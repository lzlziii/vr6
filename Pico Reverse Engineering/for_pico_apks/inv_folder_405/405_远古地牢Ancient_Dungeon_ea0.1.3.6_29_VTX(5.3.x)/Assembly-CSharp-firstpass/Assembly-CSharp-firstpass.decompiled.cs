using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Net.Sockets;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using ES3Internal;
using ES3Types;
using Il2CppDummyDll;
using MoonSharp.Interpreter;
using MoonSharp.Interpreter.Compatibility.Frameworks;
using MoonSharp.Interpreter.CoreLib.IO;
using MoonSharp.Interpreter.DataStructs;
using MoonSharp.Interpreter.Debugging;
using MoonSharp.Interpreter.Diagnostics;
using MoonSharp.Interpreter.Diagnostics.PerformanceCounters;
using MoonSharp.Interpreter.Execution;
using MoonSharp.Interpreter.Execution.Scopes;
using MoonSharp.Interpreter.Execution.VM;
using MoonSharp.Interpreter.Interop;
using MoonSharp.Interpreter.Interop.BasicDescriptors;
using MoonSharp.Interpreter.Interop.LuaStateInterop;
using MoonSharp.Interpreter.Interop.RegistrationPolicies;
using MoonSharp.Interpreter.Loaders;
using MoonSharp.Interpreter.Platforms;
using MoonSharp.Interpreter.Tree;
using MoonSharp.Interpreter.Tree.Expressions;
using MoonSharp.Interpreter.Tree.Statements;
using MoonSharp.VsCodeDebugger.DebuggerLogic;
using MoonSharp.VsCodeDebugger.SDK;
using RootMotion.FinalIK;
using UnityEngine;
using UnityEngine.AI;
using UnityEngine.Events;
using UnityEngine.Networking;
using UnityEngine.Playables;
using UnityEngine.SceneManagement;
using UnityEngine.Scripting;
using UnityEngine.Serialization;
using UnityEngine.UI;

[assembly: AssemblyVersion("0.0.0.0")]
[Token(Token = "0x200000D")]
public static class BetterStreamingAssets
{
	[Token(Token = "0x200000E")]
	internal struct ReadInfo
	{
		[Token(Token = "0x4000013")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string readPath;

		[Token(Token = "0x4000014")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public long size;

		[Token(Token = "0x4000015")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public long offset;

		[Token(Token = "0x4000016")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint crc32;
	}

	[Token(Token = "0x200000F")]
	internal static class ApkImpl
	{
		[Token(Token = "0x2000010")]
		private struct PartInfo
		{
			[Token(Token = "0x400001A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public long size;

			[Token(Token = "0x400001B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public long offset;

			[Token(Token = "0x400001C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public uint crc32;
		}

		[Token(Token = "0x4000017")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static string[] s_paths;

		[Token(Token = "0x4000018")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static PartInfo[] s_streamingAssets;

		[Token(Token = "0x4000019")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static string s_root;

		[Token(Token = "0x600004F")]
		[Address(RVA = "0xE963EC", Offset = "0xE963EC", VA = "0xE963EC")]
		public static void Initialize(string dataPath, string streamingAssetsPath)
		{
		}

		[Token(Token = "0x6000050")]
		[Address(RVA = "0xE96670", Offset = "0xE96670", VA = "0xE96670")]
		public static bool TryGetInfo(string path, out ReadInfo info)
		{
			return default(bool);
		}

		[Token(Token = "0x6000051")]
		[Address(RVA = "0xE967D4", Offset = "0xE967D4", VA = "0xE967D4")]
		public static bool DirectoryExists(string path)
		{
			return default(bool);
		}

		[Token(Token = "0x6000052")]
		[Address(RVA = "0xE973E0", Offset = "0xE973E0", VA = "0xE973E0")]
		public static string[] GetFiles(string path, string searchPattern, SearchOption searchOption)
		{
			return null;
		}

		[Token(Token = "0x6000053")]
		[Address(RVA = "0xE970A8", Offset = "0xE970A8", VA = "0xE970A8")]
		public static byte[] ReadAllBytes(string path)
		{
			return null;
		}

		[Token(Token = "0x6000054")]
		[Address(RVA = "0xE969B4", Offset = "0xE969B4", VA = "0xE969B4")]
		public static Stream OpenRead(string path)
		{
			return null;
		}

		[Token(Token = "0x6000055")]
		[Address(RVA = "0xE98294", Offset = "0xE98294", VA = "0xE98294")]
		private static int GetDirectoryIndex(string path)
		{
			return default(int);
		}

		[Token(Token = "0x6000056")]
		[Address(RVA = "0xE97974", Offset = "0xE97974", VA = "0xE97974")]
		private static void GetStreamingAssetsInfoFromJar(string apkPath, List<string> paths, List<PartInfo> parts)
		{
		}
	}

	[Token(Token = "0x17000013")]
	public static string Root
	{
		[Token(Token = "0x600003F")]
		[Address(RVA = "0xE96380", Offset = "0xE96380", VA = "0xE96380")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000040")]
	[Address(RVA = "0xE963C8", Offset = "0xE963C8", VA = "0xE963C8")]
	public static void Initialize()
	{
	}

	[Token(Token = "0x6000041")]
	[Address(RVA = "0xE96648", Offset = "0xE96648", VA = "0xE96648")]
	public static bool FileExists(string path)
	{
		return default(bool);
	}

	[Token(Token = "0x6000042")]
	[Address(RVA = "0xE967D0", Offset = "0xE967D0", VA = "0xE967D0")]
	public static bool DirectoryExists(string path)
	{
		return default(bool);
	}

	[Token(Token = "0x6000043")]
	[Address(RVA = "0xE96854", Offset = "0xE96854", VA = "0xE96854")]
	public static AssetBundleCreateRequest LoadAssetBundleAsync(string path, uint crc = 0u)
	{
		return null;
	}

	[Token(Token = "0x6000044")]
	[Address(RVA = "0xE968CC", Offset = "0xE968CC", VA = "0xE968CC")]
	public static AssetBundle LoadAssetBundle(string path, uint crc = 0u)
	{
		return null;
	}

	[Token(Token = "0x6000045")]
	[Address(RVA = "0xE968FC", Offset = "0xE968FC", VA = "0xE968FC")]
	public static Stream OpenRead(string path)
	{
		return null;
	}

	[Token(Token = "0x6000046")]
	[Address(RVA = "0xE96AFC", Offset = "0xE96AFC", VA = "0xE96AFC")]
	public static StreamReader OpenText(string path)
	{
		return null;
	}

	[Token(Token = "0x6000047")]
	[Address(RVA = "0xE96BFC", Offset = "0xE96BFC", VA = "0xE96BFC")]
	public static string ReadAllText(string path)
	{
		return null;
	}

	[Token(Token = "0x6000048")]
	[Address(RVA = "0xE96D88", Offset = "0xE96D88", VA = "0xE96D88")]
	public static string[] ReadAllLines(string path)
	{
		return null;
	}

	[Token(Token = "0x6000049")]
	[Address(RVA = "0xE96FF0", Offset = "0xE96FF0", VA = "0xE96FF0")]
	public static byte[] ReadAllBytes(string path)
	{
		return null;
	}

	[Token(Token = "0x600004A")]
	[Address(RVA = "0xE973DC", Offset = "0xE973DC", VA = "0xE973DC")]
	public static string[] GetFiles(string path, string searchPattern, SearchOption searchOption)
	{
		return null;
	}

	[Token(Token = "0x600004B")]
	[Address(RVA = "0xE978CC", Offset = "0xE978CC", VA = "0xE978CC")]
	public static string[] GetFiles(string path)
	{
		return null;
	}

	[Token(Token = "0x600004C")]
	[Address(RVA = "0xE978D8", Offset = "0xE978D8", VA = "0xE978D8")]
	public static string[] GetFiles(string path, string searchPattern)
	{
		return null;
	}

	[Token(Token = "0x600004D")]
	[Address(RVA = "0xE96884", Offset = "0xE96884", VA = "0xE96884")]
	private static ReadInfo GetInfoOrThrow(string path)
	{
		return default(ReadInfo);
	}

	[Token(Token = "0x600004E")]
	[Address(RVA = "0xE978E0", Offset = "0xE978E0", VA = "0xE978E0")]
	private static void ThrowFileNotFound(string path)
	{
	}
}
[Token(Token = "0x2000013")]
[AttributeUsage(AttributeTargets.Class | AttributeTargets.Property | AttributeTargets.Field)]
public class ES3Serializable : Attribute
{
	[Token(Token = "0x600005B")]
	[Address(RVA = "0xE984B8", Offset = "0xE984B8", VA = "0xE984B8")]
	public ES3Serializable()
	{
	}
}
[Token(Token = "0x2000014")]
[AttributeUsage(AttributeTargets.Class | AttributeTargets.Property | AttributeTargets.Field)]
public class ES3NonSerializable : Attribute
{
	[Token(Token = "0x600005C")]
	[Address(RVA = "0xE984C0", Offset = "0xE984C0", VA = "0xE984C0")]
	public ES3NonSerializable()
	{
	}
}
[Token(Token = "0x2000015")]
public class ES3AutoSave : MonoBehaviour, ISerializationCallbackReceiver
{
	[Token(Token = "0x400001F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool saveLayer;

	[Token(Token = "0x4000020")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool saveTag;

	[Token(Token = "0x4000021")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	public bool saveName;

	[Token(Token = "0x4000022")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
	public bool saveHideFlags;

	[Token(Token = "0x4000023")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool saveActive;

	[Token(Token = "0x4000024")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	public bool saveChildren;

	[Token(Token = "0x4000025")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
	private bool isQuitting;

	[Token(Token = "0x4000026")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<UnityEngine.Component> componentsToSave;

	[Token(Token = "0x600005D")]
	[Address(RVA = "0xE984C8", Offset = "0xE984C8", VA = "0xE984C8")]
	public void Reset()
	{
	}

	[Token(Token = "0x600005E")]
	[Address(RVA = "0xE984D4", Offset = "0xE984D4", VA = "0xE984D4")]
	public void Awake()
	{
	}

	[Token(Token = "0x600005F")]
	[Address(RVA = "0xE98854", Offset = "0xE98854", VA = "0xE98854")]
	public void OnApplicationQuit()
	{
	}

	[Token(Token = "0x6000060")]
	[Address(RVA = "0xE98860", Offset = "0xE98860", VA = "0xE98860")]
	public void OnDestroy()
	{
	}

	[Token(Token = "0x6000061")]
	[Address(RVA = "0xE9891C", Offset = "0xE9891C", VA = "0xE9891C", Slot = "4")]
	public void OnBeforeSerialize()
	{
	}

	[Token(Token = "0x6000062")]
	[Address(RVA = "0xE98920", Offset = "0xE98920", VA = "0xE98920", Slot = "5")]
	public void OnAfterDeserialize()
	{
	}

	[Token(Token = "0x6000063")]
	[Address(RVA = "0xE98A28", Offset = "0xE98A28", VA = "0xE98A28")]
	public ES3AutoSave()
	{
	}
}
[Token(Token = "0x2000017")]
public class ES3AutoSaveMgr : MonoBehaviour
{
	[Token(Token = "0x2000018")]
	public enum LoadEvent
	{
		[Token(Token = "0x4000030")]
		None,
		[Token(Token = "0x4000031")]
		Awake,
		[Token(Token = "0x4000032")]
		Start
	}

	[Token(Token = "0x2000019")]
	public enum SaveEvent
	{
		[Token(Token = "0x4000034")]
		None,
		[Token(Token = "0x4000035")]
		OnApplicationQuit,
		[Token(Token = "0x4000036")]
		OnApplicationPause
	}

	[Token(Token = "0x4000029")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static ES3AutoSaveMgr _current;

	[Token(Token = "0x400002A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string key;

	[Token(Token = "0x400002B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public SaveEvent saveEvent;

	[Token(Token = "0x400002C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public LoadEvent loadEvent;

	[Token(Token = "0x400002D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ES3SerializableSettings settings;

	[Token(Token = "0x400002E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public HashSet<ES3AutoSave> autoSaves;

	[Token(Token = "0x17000014")]
	public static ES3AutoSaveMgr Current
	{
		[Token(Token = "0x6000067")]
		[Address(RVA = "0xE98578", Offset = "0xE98578", VA = "0xE98578")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000015")]
	public static ES3AutoSaveMgr Instance
	{
		[Token(Token = "0x6000068")]
		[Address(RVA = "0xE98C18", Offset = "0xE98C18", VA = "0xE98C18")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000069")]
	[Address(RVA = "0xE98C1C", Offset = "0xE98C1C", VA = "0xE98C1C")]
	public void Save()
	{
	}

	[Token(Token = "0x600006A")]
	[Address(RVA = "0xE993E4", Offset = "0xE993E4", VA = "0xE993E4")]
	public void Load()
	{
	}

	[Token(Token = "0x600006B")]
	[Address(RVA = "0xE99500", Offset = "0xE99500", VA = "0xE99500")]
	private void Start()
	{
	}

	[Token(Token = "0x600006C")]
	[Address(RVA = "0xE99514", Offset = "0xE99514", VA = "0xE99514")]
	public void Awake()
	{
	}

	[Token(Token = "0x600006D")]
	[Address(RVA = "0xE9968C", Offset = "0xE9968C", VA = "0xE9968C")]
	private void OnApplicationQuit()
	{
	}

	[Token(Token = "0x600006E")]
	[Address(RVA = "0xE996A0", Offset = "0xE996A0", VA = "0xE996A0")]
	private void OnApplicationPause(bool paused)
	{
	}

	[Token(Token = "0x600006F")]
	[Address(RVA = "0xE987A8", Offset = "0xE987A8", VA = "0xE987A8")]
	public static void AddAutoSave(ES3AutoSave autoSave)
	{
	}

	[Token(Token = "0x6000070")]
	[Address(RVA = "0xE98870", Offset = "0xE98870", VA = "0xE98870")]
	public static void RemoveAutoSave(ES3AutoSave autoSave)
	{
	}

	[Token(Token = "0x6000071")]
	[Address(RVA = "0xE99540", Offset = "0xE99540", VA = "0xE99540")]
	public void GetAutoSaves()
	{
	}

	[Token(Token = "0x6000072")]
	[Address(RVA = "0xE99708", Offset = "0xE99708", VA = "0xE99708")]
	public ES3AutoSaveMgr()
	{
	}
}
[Token(Token = "0x200001A")]
public class ES3
{
	[Token(Token = "0x200001B")]
	public enum Location
	{
		[Token(Token = "0x4000038")]
		File,
		[Token(Token = "0x4000039")]
		PlayerPrefs,
		[Token(Token = "0x400003A")]
		InternalMS,
		[Token(Token = "0x400003B")]
		Resources,
		[Token(Token = "0x400003C")]
		Cache
	}

	[Token(Token = "0x200001C")]
	public enum Directory
	{
		[Token(Token = "0x400003E")]
		PersistentDataPath,
		[Token(Token = "0x400003F")]
		DataPath
	}

	[Token(Token = "0x200001D")]
	public enum EncryptionType
	{
		[Token(Token = "0x4000041")]
		None,
		[Token(Token = "0x4000042")]
		AES
	}

	[Token(Token = "0x200001E")]
	public enum CompressionType
	{
		[Token(Token = "0x4000044")]
		None,
		[Token(Token = "0x4000045")]
		Gzip
	}

	[Token(Token = "0x200001F")]
	public enum Format
	{
		[Token(Token = "0x4000047")]
		JSON
	}

	[Token(Token = "0x2000020")]
	public enum ReferenceMode
	{
		[Token(Token = "0x4000049")]
		ByRef,
		[Token(Token = "0x400004A")]
		ByValue,
		[Token(Token = "0x400004B")]
		ByRefAndValue
	}

	[Token(Token = "0x6000073")]
	[Address(RVA = "0xE99884", Offset = "0xE99884", VA = "0xE99884")]
	public static void Save(string key, object value)
	{
	}

	[Token(Token = "0x6000074")]
	[Address(RVA = "0xE99964", Offset = "0xE99964", VA = "0xE99964")]
	public static void Save(string key, object value, string filePath)
	{
	}

	[Token(Token = "0x6000075")]
	[Address(RVA = "0xE999F8", Offset = "0xE999F8", VA = "0xE999F8")]
	public static void Save(string key, object value, string filePath, ES3Settings settings)
	{
	}

	[Token(Token = "0x6000076")]
	[Address(RVA = "0xE99A98", Offset = "0xE99A98", VA = "0xE99A98")]
	public static void Save(string key, object value, ES3Settings settings)
	{
	}

	[Token(Token = "0x6000077")]
	public static void Save<T>(string key, T value)
	{
	}

	[Token(Token = "0x6000078")]
	public static void Save<T>(string key, T value, string filePath)
	{
	}

	[Token(Token = "0x6000079")]
	public static void Save<T>(string key, T value, string filePath, ES3Settings settings)
	{
	}

	[Token(Token = "0x600007A")]
	public static void Save<T>(string key, T value, ES3Settings settings)
	{
	}

	[Token(Token = "0x600007B")]
	[Address(RVA = "0xE99AF8", Offset = "0xE99AF8", VA = "0xE99AF8")]
	public static void SaveRaw(byte[] bytes)
	{
	}

	[Token(Token = "0x600007C")]
	[Address(RVA = "0xE99DAC", Offset = "0xE99DAC", VA = "0xE99DAC")]
	public static void SaveRaw(byte[] bytes, string filePath)
	{
	}

	[Token(Token = "0x600007D")]
	[Address(RVA = "0xE99E20", Offset = "0xE99E20", VA = "0xE99E20")]
	public static void SaveRaw(byte[] bytes, string filePath, ES3Settings settings)
	{
	}

	[Token(Token = "0x600007E")]
	[Address(RVA = "0xE99B5C", Offset = "0xE99B5C", VA = "0xE99B5C")]
	public static void SaveRaw(byte[] bytes, ES3Settings settings)
	{
	}

	[Token(Token = "0x600007F")]
	[Address(RVA = "0xE9A46C", Offset = "0xE9A46C", VA = "0xE9A46C")]
	public static void SaveRaw(string str)
	{
	}

	[Token(Token = "0x6000080")]
	[Address(RVA = "0xE9A508", Offset = "0xE9A508", VA = "0xE9A508")]
	public static void SaveRaw(string str, string filePath)
	{
	}

	[Token(Token = "0x6000081")]
	[Address(RVA = "0xE9A57C", Offset = "0xE9A57C", VA = "0xE9A57C")]
	public static void SaveRaw(string str, string filePath, ES3Settings settings)
	{
	}

	[Token(Token = "0x6000082")]
	[Address(RVA = "0xE9A4D0", Offset = "0xE9A4D0", VA = "0xE9A4D0")]
	public static void SaveRaw(string str, ES3Settings settings)
	{
	}

	[Token(Token = "0x6000083")]
	[Address(RVA = "0xE9A5F4", Offset = "0xE9A5F4", VA = "0xE9A5F4")]
	public static void AppendRaw(byte[] bytes)
	{
	}

	[Token(Token = "0x6000084")]
	[Address(RVA = "0xE9A890", Offset = "0xE9A890", VA = "0xE9A890")]
	public static void AppendRaw(byte[] bytes, string filePath, ES3Settings settings)
	{
	}

	[Token(Token = "0x6000085")]
	[Address(RVA = "0xE9A658", Offset = "0xE9A658", VA = "0xE9A658")]
	public static void AppendRaw(byte[] bytes, ES3Settings settings)
	{
	}

	[Token(Token = "0x6000086")]
	[Address(RVA = "0xE9A984", Offset = "0xE9A984", VA = "0xE9A984")]
	public static void AppendRaw(string str)
	{
	}

	[Token(Token = "0x6000087")]
	[Address(RVA = "0xE9AC44", Offset = "0xE9AC44", VA = "0xE9AC44")]
	public static void AppendRaw(string str, string filePath, ES3Settings settings)
	{
	}

	[Token(Token = "0x6000088")]
	[Address(RVA = "0xE9A9E8", Offset = "0xE9A9E8", VA = "0xE9A9E8")]
	public static void AppendRaw(string str, ES3Settings settings)
	{
	}

	[Token(Token = "0x6000089")]
	[Address(RVA = "0xE9ACBC", Offset = "0xE9ACBC", VA = "0xE9ACBC")]
	public static void SaveImage(Texture2D texture, string imagePath)
	{
	}

	[Token(Token = "0x600008A")]
	[Address(RVA = "0xE9AD40", Offset = "0xE9AD40", VA = "0xE9AD40")]
	public static void SaveImage(Texture2D texture, string imagePath, ES3Settings settings)
	{
	}

	[Token(Token = "0x600008B")]
	[Address(RVA = "0xE9AD34", Offset = "0xE9AD34", VA = "0xE9AD34")]
	public static void SaveImage(Texture2D texture, ES3Settings settings)
	{
	}

	[Token(Token = "0x600008C")]
	[Address(RVA = "0xE9AF5C", Offset = "0xE9AF5C", VA = "0xE9AF5C")]
	public static void SaveImage(Texture2D texture, int quality, string imagePath)
	{
	}

	[Token(Token = "0x600008D")]
	[Address(RVA = "0xE9AFD4", Offset = "0xE9AFD4", VA = "0xE9AFD4")]
	public static void SaveImage(Texture2D texture, int quality, string imagePath, ES3Settings settings)
	{
	}

	[Token(Token = "0x600008E")]
	[Address(RVA = "0xE9ADBC", Offset = "0xE9ADBC", VA = "0xE9ADBC")]
	public static void SaveImage(Texture2D texture, int quality, ES3Settings settings)
	{
	}

	[Token(Token = "0x600008F")]
	[Address(RVA = "0xE9B05C", Offset = "0xE9B05C", VA = "0xE9B05C")]
	public static object Load(string key)
	{
		return null;
	}

	[Token(Token = "0x6000090")]
	[Address(RVA = "0xE9B0D8", Offset = "0xE9B0D8", VA = "0xE9B0D8")]
	public static object Load(string key, string filePath)
	{
		return null;
	}

	[Token(Token = "0x6000091")]
	[Address(RVA = "0xE9B164", Offset = "0xE9B164", VA = "0xE9B164")]
	public static object Load(string key, string filePath, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x6000092")]
	[Address(RVA = "0xE9B1F4", Offset = "0xE9B1F4", VA = "0xE9B1F4")]
	public static object Load(string key, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x6000093")]
	[Address(RVA = "0xE9B24C", Offset = "0xE9B24C", VA = "0xE9B24C")]
	public static object Load(string key, object defaultValue)
	{
		return null;
	}

	[Token(Token = "0x6000094")]
	[Address(RVA = "0xE9B2D8", Offset = "0xE9B2D8", VA = "0xE9B2D8")]
	public static object Load(string key, string filePath, object defaultValue)
	{
		return null;
	}

	[Token(Token = "0x6000095")]
	[Address(RVA = "0xE9B36C", Offset = "0xE9B36C", VA = "0xE9B36C")]
	public static object Load(string key, string filePath, object defaultValue, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x6000096")]
	[Address(RVA = "0xE9B40C", Offset = "0xE9B40C", VA = "0xE9B40C")]
	public static object Load(string key, object defaultValue, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x6000097")]
	public static T Load<T>(string key)
	{
		return (T)null;
	}

	[Token(Token = "0x6000098")]
	public static T Load<T>(string key, ES3Settings settings)
	{
		return (T)null;
	}

	[Token(Token = "0x6000099")]
	public static T Load<T>(string key, T defaultValue)
	{
		return (T)null;
	}

	[Token(Token = "0x600009A")]
	public static T Load<T>(string key, string filePath, T defaultValue)
	{
		return (T)null;
	}

	[Token(Token = "0x600009B")]
	public static T Load<T>(string key, string filePath, T defaultValue, ES3Settings settings)
	{
		return (T)null;
	}

	[Token(Token = "0x600009C")]
	public static T Load<T>(string key, T defaultValue, ES3Settings settings)
	{
		return (T)null;
	}

	[Token(Token = "0x600009D")]
	public static void LoadInto<T>(string key, object obj) where T : class
	{
	}

	[Token(Token = "0x600009E")]
	[Address(RVA = "0xE9B46C", Offset = "0xE9B46C", VA = "0xE9B46C")]
	public static void LoadInto(string key, string filePath, object obj)
	{
	}

	[Token(Token = "0x600009F")]
	[Address(RVA = "0xE9B500", Offset = "0xE9B500", VA = "0xE9B500")]
	public static void LoadInto(string key, string filePath, object obj, ES3Settings settings)
	{
	}

	[Token(Token = "0x60000A0")]
	[Address(RVA = "0xE9B5A0", Offset = "0xE9B5A0", VA = "0xE9B5A0")]
	public static void LoadInto(string key, object obj, ES3Settings settings)
	{
	}

	[Token(Token = "0x60000A1")]
	public static void LoadInto<T>(string key, T obj) where T : class
	{
	}

	[Token(Token = "0x60000A2")]
	public static void LoadInto<T>(string key, string filePath, T obj) where T : class
	{
	}

	[Token(Token = "0x60000A3")]
	public static void LoadInto<T>(string key, string filePath, T obj, ES3Settings settings) where T : class
	{
	}

	[Token(Token = "0x60000A4")]
	public static void LoadInto<T>(string key, T obj, ES3Settings settings) where T : class
	{
	}

	[Token(Token = "0x60000A5")]
	[Address(RVA = "0xE9B600", Offset = "0xE9B600", VA = "0xE9B600")]
	public static string LoadString(string key, string defaultValue, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60000A6")]
	[Address(RVA = "0xE9B664", Offset = "0xE9B664", VA = "0xE9B664")]
	public static string LoadString(string key, string defaultValue, [Optional] string filePath, [Optional] ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60000A7")]
	[Address(RVA = "0xE9B6D4", Offset = "0xE9B6D4", VA = "0xE9B6D4")]
	public static byte[] LoadRawBytes()
	{
		return null;
	}

	[Token(Token = "0x60000A8")]
	[Address(RVA = "0xE9BC74", Offset = "0xE9BC74", VA = "0xE9BC74")]
	public static byte[] LoadRawBytes(string filePath)
	{
		return null;
	}

	[Token(Token = "0x60000A9")]
	[Address(RVA = "0xE9BCD8", Offset = "0xE9BCD8", VA = "0xE9BCD8")]
	public static byte[] LoadRawBytes(string filePath, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60000AA")]
	[Address(RVA = "0xE9B730", Offset = "0xE9B730", VA = "0xE9B730")]
	public static byte[] LoadRawBytes(ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60000AB")]
	[Address(RVA = "0xE9BDE0", Offset = "0xE9BDE0", VA = "0xE9BDE0")]
	public static string LoadRawString()
	{
		return null;
	}

	[Token(Token = "0x60000AC")]
	[Address(RVA = "0xE9BE7C", Offset = "0xE9BE7C", VA = "0xE9BE7C")]
	public static string LoadRawString(string filePath)
	{
		return null;
	}

	[Token(Token = "0x60000AD")]
	[Address(RVA = "0xE9BEE0", Offset = "0xE9BEE0", VA = "0xE9BEE0")]
	public static string LoadRawString(string filePath, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60000AE")]
	[Address(RVA = "0xE9BE3C", Offset = "0xE9BE3C", VA = "0xE9BE3C")]
	public static string LoadRawString(ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60000AF")]
	[Address(RVA = "0xE9BF50", Offset = "0xE9BF50", VA = "0xE9BF50")]
	public static Texture2D LoadImage(string imagePath)
	{
		return null;
	}

	[Token(Token = "0x60000B0")]
	[Address(RVA = "0xE9BFC8", Offset = "0xE9BFC8", VA = "0xE9BFC8")]
	public static Texture2D LoadImage(string imagePath, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60000B1")]
	[Address(RVA = "0xE9BFB8", Offset = "0xE9BFB8", VA = "0xE9BFB8")]
	public static Texture2D LoadImage(ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60000B2")]
	[Address(RVA = "0xE9C03C", Offset = "0xE9C03C", VA = "0xE9C03C")]
	public static Texture2D LoadImage(byte[] bytes)
	{
		return null;
	}

	[Token(Token = "0x60000B3")]
	[Address(RVA = "0xE9C0B4", Offset = "0xE9C0B4", VA = "0xE9C0B4")]
	public static AudioClip LoadAudio(string audioFilePath, AudioType audioType)
	{
		return null;
	}

	[Token(Token = "0x60000B4")]
	[Address(RVA = "0xE9C128", Offset = "0xE9C128", VA = "0xE9C128")]
	public static AudioClip LoadAudio(string audioFilePath, AudioType audioType, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60000B5")]
	public static byte[] Serialize<T>(T value, [Optional] ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60000B6")]
	[Address(RVA = "0xE9C8D8", Offset = "0xE9C8D8", VA = "0xE9C8D8")]
	internal static byte[] Serialize(object value, ES3Type type, [Optional] ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60000B7")]
	public static T Deserialize<T>(byte[] bytes, [Optional] ES3Settings settings)
	{
		return (T)null;
	}

	[Token(Token = "0x60000B8")]
	[Address(RVA = "0xE9CEF8", Offset = "0xE9CEF8", VA = "0xE9CEF8")]
	internal static object Deserialize(ES3Type type, byte[] bytes, [Optional] ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60000B9")]
	public static void DeserializeInto<T>(byte[] bytes, T obj, [Optional] ES3Settings settings) where T : class
	{
	}

	[Token(Token = "0x60000BA")]
	public static void DeserializeInto<T>(ES3Type type, byte[] bytes, T obj, [Optional] ES3Settings settings) where T : class
	{
	}

	[Token(Token = "0x60000BB")]
	[Address(RVA = "0xE9D424", Offset = "0xE9D424", VA = "0xE9D424")]
	public static byte[] EncryptBytes(byte[] bytes, [Optional] string password)
	{
		return null;
	}

	[Token(Token = "0x60000BC")]
	[Address(RVA = "0xE9D5FC", Offset = "0xE9D5FC", VA = "0xE9D5FC")]
	public static byte[] DecryptBytes(byte[] bytes, [Optional] string password)
	{
		return null;
	}

	[Token(Token = "0x60000BD")]
	[Address(RVA = "0xE9D6D4", Offset = "0xE9D6D4", VA = "0xE9D6D4")]
	public static string EncryptString(string str, [Optional] string password)
	{
		return null;
	}

	[Token(Token = "0x60000BE")]
	[Address(RVA = "0xE9D784", Offset = "0xE9D784", VA = "0xE9D784")]
	public static string DecryptString(string str, [Optional] string password)
	{
		return null;
	}

	[Token(Token = "0x60000BF")]
	[Address(RVA = "0xE9D834", Offset = "0xE9D834", VA = "0xE9D834")]
	public static void DeleteFile()
	{
	}

	[Token(Token = "0x60000C0")]
	[Address(RVA = "0xE9D9E0", Offset = "0xE9D9E0", VA = "0xE9D9E0")]
	public static void DeleteFile(string filePath)
	{
	}

	[Token(Token = "0x60000C1")]
	[Address(RVA = "0xE9DA44", Offset = "0xE9DA44", VA = "0xE9DA44")]
	public static void DeleteFile(string filePath, ES3Settings settings)
	{
	}

	[Token(Token = "0x60000C2")]
	[Address(RVA = "0xE9D890", Offset = "0xE9D890", VA = "0xE9D890")]
	public static void DeleteFile(ES3Settings settings)
	{
	}

	[Token(Token = "0x60000C3")]
	[Address(RVA = "0xE9DB38", Offset = "0xE9DB38", VA = "0xE9DB38")]
	public static void CopyFile(string oldFilePath, string newFilePath)
	{
	}

	[Token(Token = "0x60000C4")]
	[Address(RVA = "0xE9DFAC", Offset = "0xE9DFAC", VA = "0xE9DFAC")]
	public static void CopyFile(string oldFilePath, string newFilePath, ES3Settings oldSettings, ES3Settings newSettings)
	{
	}

	[Token(Token = "0x60000C5")]
	[Address(RVA = "0xE9DBC8", Offset = "0xE9DBC8", VA = "0xE9DBC8")]
	public static void CopyFile(ES3Settings oldSettings, ES3Settings newSettings)
	{
	}

	[Token(Token = "0x60000C6")]
	[Address(RVA = "0xE9E420", Offset = "0xE9E420", VA = "0xE9E420")]
	public static void RenameFile(string oldFilePath, string newFilePath)
	{
	}

	[Token(Token = "0x60000C7")]
	[Address(RVA = "0xE9E8AC", Offset = "0xE9E8AC", VA = "0xE9E8AC")]
	public static void RenameFile(string oldFilePath, string newFilePath, ES3Settings oldSettings, ES3Settings newSettings)
	{
	}

	[Token(Token = "0x60000C8")]
	[Address(RVA = "0xE9E4B0", Offset = "0xE9E4B0", VA = "0xE9E4B0")]
	public static void RenameFile(ES3Settings oldSettings, ES3Settings newSettings)
	{
	}

	[Token(Token = "0x60000C9")]
	[Address(RVA = "0xE9E94C", Offset = "0xE9E94C", VA = "0xE9E94C")]
	public static void CopyDirectory(string oldDirectoryPath, string newDirectoryPath)
	{
	}

	[Token(Token = "0x60000CA")]
	[Address(RVA = "0xE9EC84", Offset = "0xE9EC84", VA = "0xE9EC84")]
	public static void CopyDirectory(string oldDirectoryPath, string newDirectoryPath, ES3Settings oldSettings, ES3Settings newSettings)
	{
	}

	[Token(Token = "0x60000CB")]
	[Address(RVA = "0xE9E9DC", Offset = "0xE9E9DC", VA = "0xE9E9DC")]
	public static void CopyDirectory(ES3Settings oldSettings, ES3Settings newSettings)
	{
	}

	[Token(Token = "0x60000CC")]
	[Address(RVA = "0xE9F028", Offset = "0xE9F028", VA = "0xE9F028")]
	public static void RenameDirectory(string oldDirectoryPath, string newDirectoryPath)
	{
	}

	[Token(Token = "0x60000CD")]
	[Address(RVA = "0xE9F248", Offset = "0xE9F248", VA = "0xE9F248")]
	public static void RenameDirectory(string oldDirectoryPath, string newDirectoryPath, ES3Settings oldSettings, ES3Settings newSettings)
	{
	}

	[Token(Token = "0x60000CE")]
	[Address(RVA = "0xE9F0B8", Offset = "0xE9F0B8", VA = "0xE9F0B8")]
	public static void RenameDirectory(ES3Settings oldSettings, ES3Settings newSettings)
	{
	}

	[Token(Token = "0x60000CF")]
	[Address(RVA = "0xE9F2E8", Offset = "0xE9F2E8", VA = "0xE9F2E8")]
	public static void DeleteDirectory(string directoryPath)
	{
	}

	[Token(Token = "0x60000D0")]
	[Address(RVA = "0xE9F474", Offset = "0xE9F474", VA = "0xE9F474")]
	public static void DeleteDirectory(string directoryPath, ES3Settings settings)
	{
	}

	[Token(Token = "0x60000D1")]
	[Address(RVA = "0xE9F34C", Offset = "0xE9F34C", VA = "0xE9F34C")]
	public static void DeleteDirectory(ES3Settings settings)
	{
	}

	[Token(Token = "0x60000D2")]
	[Address(RVA = "0xE9F4E4", Offset = "0xE9F4E4", VA = "0xE9F4E4")]
	public static void DeleteKey(string key)
	{
	}

	[Token(Token = "0x60000D3")]
	[Address(RVA = "0xE9F548", Offset = "0xE9F548", VA = "0xE9F548")]
	public static void DeleteKey(string key, string filePath)
	{
	}

	[Token(Token = "0x60000D4")]
	[Address(RVA = "0xE9F5BC", Offset = "0xE9F5BC", VA = "0xE9F5BC")]
	public static void DeleteKey(string key, string filePath, ES3Settings settings)
	{
	}

	[Token(Token = "0x60000D5")]
	[Address(RVA = "0xE99128", Offset = "0xE99128", VA = "0xE99128")]
	public static void DeleteKey(string key, ES3Settings settings)
	{
	}

	[Token(Token = "0x60000D6")]
	[Address(RVA = "0xE9F6F4", Offset = "0xE9F6F4", VA = "0xE9F6F4")]
	public static bool KeyExists(string key)
	{
		return default(bool);
	}

	[Token(Token = "0x60000D7")]
	[Address(RVA = "0xE9F934", Offset = "0xE9F934", VA = "0xE9F934")]
	public static bool KeyExists(string key, string filePath)
	{
		return default(bool);
	}

	[Token(Token = "0x60000D8")]
	[Address(RVA = "0xE9F9A8", Offset = "0xE9F9A8", VA = "0xE9F9A8")]
	public static bool KeyExists(string key, string filePath, ES3Settings settings)
	{
		return default(bool);
	}

	[Token(Token = "0x60000D9")]
	[Address(RVA = "0xE9F758", Offset = "0xE9F758", VA = "0xE9F758")]
	public static bool KeyExists(string key, ES3Settings settings)
	{
		return default(bool);
	}

	[Token(Token = "0x60000DA")]
	[Address(RVA = "0xE9FB74", Offset = "0xE9FB74", VA = "0xE9FB74")]
	public static bool FileExists()
	{
		return default(bool);
	}

	[Token(Token = "0x60000DB")]
	[Address(RVA = "0xE9FBD0", Offset = "0xE9FBD0", VA = "0xE9FBD0")]
	public static bool FileExists(string filePath)
	{
		return default(bool);
	}

	[Token(Token = "0x60000DC")]
	[Address(RVA = "0xE9FC34", Offset = "0xE9FC34", VA = "0xE9FC34")]
	public static bool FileExists(string filePath, ES3Settings settings)
	{
		return default(bool);
	}

	[Token(Token = "0x60000DD")]
	[Address(RVA = "0xE98F78", Offset = "0xE98F78", VA = "0xE98F78")]
	public static bool FileExists(ES3Settings settings)
	{
		return default(bool);
	}

	[Token(Token = "0x60000DE")]
	[Address(RVA = "0xE9FD28", Offset = "0xE9FD28", VA = "0xE9FD28")]
	public static bool DirectoryExists(string folderPath)
	{
		return default(bool);
	}

	[Token(Token = "0x60000DF")]
	[Address(RVA = "0xE9FD8C", Offset = "0xE9FD8C", VA = "0xE9FD8C")]
	public static bool DirectoryExists(string folderPath, ES3Settings settings)
	{
		return default(bool);
	}

	[Token(Token = "0x60000E0")]
	[Address(RVA = "0xE9ED24", Offset = "0xE9ED24", VA = "0xE9ED24")]
	public static bool DirectoryExists(ES3Settings settings)
	{
		return default(bool);
	}

	[Token(Token = "0x60000E1")]
	[Address(RVA = "0xE9FDFC", Offset = "0xE9FDFC", VA = "0xE9FDFC")]
	public static string[] GetKeys()
	{
		return null;
	}

	[Token(Token = "0x60000E2")]
	[Address(RVA = "0xEA03C4", Offset = "0xEA03C4", VA = "0xEA03C4")]
	public static string[] GetKeys(string filePath)
	{
		return null;
	}

	[Token(Token = "0x60000E3")]
	[Address(RVA = "0xEA0428", Offset = "0xEA0428", VA = "0xEA0428")]
	public static string[] GetKeys(string filePath, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60000E4")]
	[Address(RVA = "0xE9FE58", Offset = "0xE9FE58", VA = "0xE9FE58")]
	public static string[] GetKeys(ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60000E5")]
	[Address(RVA = "0xEA0670", Offset = "0xEA0670", VA = "0xEA0670")]
	public static string[] GetFiles()
	{
		return null;
	}

	[Token(Token = "0x60000E6")]
	[Address(RVA = "0xEA0704", Offset = "0xEA0704", VA = "0xEA0704")]
	public static string[] GetFiles(string directoryPath)
	{
		return null;
	}

	[Token(Token = "0x60000E7")]
	[Address(RVA = "0xEA0768", Offset = "0xEA0768", VA = "0xEA0768")]
	public static string[] GetFiles(string directoryPath, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60000E8")]
	[Address(RVA = "0xE9EE50", Offset = "0xE9EE50", VA = "0xE9EE50")]
	public static string[] GetFiles(ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60000E9")]
	[Address(RVA = "0xEA086C", Offset = "0xEA086C", VA = "0xEA086C")]
	public static string[] GetDirectories()
	{
		return null;
	}

	[Token(Token = "0x60000EA")]
	[Address(RVA = "0xEA08C8", Offset = "0xEA08C8", VA = "0xEA08C8")]
	public static string[] GetDirectories(string directoryPath)
	{
		return null;
	}

	[Token(Token = "0x60000EB")]
	[Address(RVA = "0xEA092C", Offset = "0xEA092C", VA = "0xEA092C")]
	public static string[] GetDirectories(string directoryPath, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60000EC")]
	[Address(RVA = "0xE9EF5C", Offset = "0xE9EF5C", VA = "0xE9EF5C")]
	public static string[] GetDirectories(ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60000ED")]
	[Address(RVA = "0xEA099C", Offset = "0xEA099C", VA = "0xEA099C")]
	public static void CreateBackup()
	{
	}

	[Token(Token = "0x60000EE")]
	[Address(RVA = "0xEA0A90", Offset = "0xEA0A90", VA = "0xEA0A90")]
	public static void CreateBackup(string filePath)
	{
	}

	[Token(Token = "0x60000EF")]
	[Address(RVA = "0xEA0AF4", Offset = "0xEA0AF4", VA = "0xEA0AF4")]
	public static void CreateBackup(string filePath, ES3Settings settings)
	{
	}

	[Token(Token = "0x60000F0")]
	[Address(RVA = "0xEA09F8", Offset = "0xEA09F8", VA = "0xEA09F8")]
	public static void CreateBackup(ES3Settings settings)
	{
	}

	[Token(Token = "0x60000F1")]
	[Address(RVA = "0xEA0B64", Offset = "0xEA0B64", VA = "0xEA0B64")]
	public static bool RestoreBackup(string filePath)
	{
		return default(bool);
	}

	[Token(Token = "0x60000F2")]
	[Address(RVA = "0xEA0C7C", Offset = "0xEA0C7C", VA = "0xEA0C7C")]
	public static bool RestoreBackup(string filePath, ES3Settings settings)
	{
		return default(bool);
	}

	[Token(Token = "0x60000F3")]
	[Address(RVA = "0xEA0BC8", Offset = "0xEA0BC8", VA = "0xEA0BC8")]
	public static bool RestoreBackup(ES3Settings settings)
	{
		return default(bool);
	}

	[Token(Token = "0x60000F4")]
	[Address(RVA = "0xEA0CEC", Offset = "0xEA0CEC", VA = "0xEA0CEC")]
	public static DateTime GetTimestamp()
	{
		return default(DateTime);
	}

	[Token(Token = "0x60000F5")]
	[Address(RVA = "0xEA0ED4", Offset = "0xEA0ED4", VA = "0xEA0ED4")]
	public static DateTime GetTimestamp(string filePath)
	{
		return default(DateTime);
	}

	[Token(Token = "0x60000F6")]
	[Address(RVA = "0xEA0F38", Offset = "0xEA0F38", VA = "0xEA0F38")]
	public static DateTime GetTimestamp(string filePath, ES3Settings settings)
	{
		return default(DateTime);
	}

	[Token(Token = "0x60000F7")]
	[Address(RVA = "0xEA0D48", Offset = "0xEA0D48", VA = "0xEA0D48")]
	public static DateTime GetTimestamp(ES3Settings settings)
	{
		return default(DateTime);
	}

	[Token(Token = "0x60000F8")]
	[Address(RVA = "0xEA1090", Offset = "0xEA1090", VA = "0xEA1090")]
	public static void StoreCachedFile()
	{
	}

	[Token(Token = "0x60000F9")]
	[Address(RVA = "0xEA1328", Offset = "0xEA1328", VA = "0xEA1328")]
	public static void StoreCachedFile(string filePath)
	{
	}

	[Token(Token = "0x60000FA")]
	[Address(RVA = "0xEA138C", Offset = "0xEA138C", VA = "0xEA138C")]
	public static void StoreCachedFile(string filePath, ES3Settings settings)
	{
	}

	[Token(Token = "0x60000FB")]
	[Address(RVA = "0xE99390", Offset = "0xE99390", VA = "0xE99390")]
	public static void StoreCachedFile(ES3Settings settings)
	{
	}

	[Token(Token = "0x60000FC")]
	[Address(RVA = "0xEA13FC", Offset = "0xEA13FC", VA = "0xEA13FC")]
	public static void CacheFile()
	{
	}

	[Token(Token = "0x60000FD")]
	[Address(RVA = "0xEA1458", Offset = "0xEA1458", VA = "0xEA1458")]
	public static void CacheFile(string filePath)
	{
	}

	[Token(Token = "0x60000FE")]
	[Address(RVA = "0xEA14BC", Offset = "0xEA14BC", VA = "0xEA14BC")]
	public static void CacheFile(string filePath, ES3Settings settings)
	{
	}

	[Token(Token = "0x60000FF")]
	[Address(RVA = "0xE990D4", Offset = "0xE990D4", VA = "0xE990D4")]
	public static void CacheFile(ES3Settings settings)
	{
	}

	[Token(Token = "0x6000100")]
	[Address(RVA = "0xEA16C4", Offset = "0xEA16C4", VA = "0xEA16C4")]
	public static void Init()
	{
	}

	[Token(Token = "0x6000101")]
	[Address(RVA = "0xEA173C", Offset = "0xEA173C", VA = "0xEA173C")]
	public ES3()
	{
	}
}
[Token(Token = "0x2000021")]
public class ES3File
{
	[Token(Token = "0x400004C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	internal static Dictionary<string, ES3File> cachedFiles;

	[Token(Token = "0x400004D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ES3Settings settings;

	[Token(Token = "0x400004E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Dictionary<string, ES3Data> cache;

	[Token(Token = "0x400004F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool syncWithFile;

	[Token(Token = "0x4000050")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private DateTime timestamp;

	[Token(Token = "0x6000102")]
	[Address(RVA = "0xEA1744", Offset = "0xEA1744", VA = "0xEA1744")]
	public ES3File()
	{
	}

	[Token(Token = "0x6000103")]
	[Address(RVA = "0xEA1CEC", Offset = "0xEA1CEC", VA = "0xEA1CEC")]
	public ES3File(string filePath)
	{
	}

	[Token(Token = "0x6000104")]
	[Address(RVA = "0xEA1D64", Offset = "0xEA1D64", VA = "0xEA1D64")]
	public ES3File(string filePath, ES3Settings settings)
	{
	}

	[Token(Token = "0x6000105")]
	[Address(RVA = "0xEA1DE0", Offset = "0xEA1DE0", VA = "0xEA1DE0")]
	public ES3File(ES3Settings settings)
	{
	}

	[Token(Token = "0x6000106")]
	[Address(RVA = "0xEA1DE8", Offset = "0xEA1DE8", VA = "0xEA1DE8")]
	public ES3File(bool syncWithFile)
	{
	}

	[Token(Token = "0x6000107")]
	[Address(RVA = "0xEA1E5C", Offset = "0xEA1E5C", VA = "0xEA1E5C")]
	public ES3File(string filePath, bool syncWithFile)
	{
	}

	[Token(Token = "0x6000108")]
	[Address(RVA = "0xEA1ED8", Offset = "0xEA1ED8", VA = "0xEA1ED8")]
	public ES3File(string filePath, ES3Settings settings, bool syncWithFile)
	{
	}

	[Token(Token = "0x6000109")]
	[Address(RVA = "0xEA17AC", Offset = "0xEA17AC", VA = "0xEA17AC")]
	public ES3File(ES3Settings settings, bool syncWithFile)
	{
	}

	[Token(Token = "0x600010A")]
	[Address(RVA = "0xEA2040", Offset = "0xEA2040", VA = "0xEA2040")]
	public ES3File(byte[] bytes, [Optional] ES3Settings settings)
	{
	}

	[Token(Token = "0x600010B")]
	[Address(RVA = "0xEA2168", Offset = "0xEA2168", VA = "0xEA2168")]
	public void Sync()
	{
	}

	[Token(Token = "0x600010C")]
	[Address(RVA = "0xEA2558", Offset = "0xEA2558", VA = "0xEA2558")]
	public void Sync(string filePath, [Optional] ES3Settings settings)
	{
	}

	[Token(Token = "0x600010D")]
	[Address(RVA = "0xEA2170", Offset = "0xEA2170", VA = "0xEA2170")]
	public void Sync([Optional] ES3Settings settings)
	{
	}

	[Token(Token = "0x600010E")]
	[Address(RVA = "0xEA2620", Offset = "0xEA2620", VA = "0xEA2620")]
	public void Clear()
	{
	}

	[Token(Token = "0x600010F")]
	[Address(RVA = "0xEA2670", Offset = "0xEA2670", VA = "0xEA2670")]
	public string[] GetKeys()
	{
		return null;
	}

	[Token(Token = "0x6000110")]
	public void Save<T>(string key, T value)
	{
	}

	[Token(Token = "0x6000111")]
	[Address(RVA = "0xE99FB0", Offset = "0xE99FB0", VA = "0xE99FB0")]
	public void SaveRaw(byte[] bytes, [Optional] ES3Settings settings)
	{
	}

	[Token(Token = "0x6000112")]
	[Address(RVA = "0xE9A908", Offset = "0xE9A908", VA = "0xE9A908")]
	public void AppendRaw(byte[] bytes, [Optional] ES3Settings settings)
	{
	}

	[Token(Token = "0x6000113")]
	[Address(RVA = "0xEA2814", Offset = "0xEA2814", VA = "0xEA2814")]
	public object Load(string key)
	{
		return null;
	}

	[Token(Token = "0x6000114")]
	[Address(RVA = "0xEA286C", Offset = "0xEA286C", VA = "0xEA286C")]
	public object Load(string key, object defaultValue)
	{
		return null;
	}

	[Token(Token = "0x6000115")]
	public T Load<T>(string key)
	{
		return (T)null;
	}

	[Token(Token = "0x6000116")]
	public T Load<T>(string key, T defaultValue)
	{
		return (T)null;
	}

	[Token(Token = "0x6000117")]
	public void LoadInto<T>(string key, T obj) where T : class
	{
	}

	[Token(Token = "0x6000118")]
	[Address(RVA = "0xE9BD48", Offset = "0xE9BD48", VA = "0xE9BD48")]
	public byte[] LoadRawBytes()
	{
		return null;
	}

	[Token(Token = "0x6000119")]
	[Address(RVA = "0xEA2E54", Offset = "0xEA2E54", VA = "0xEA2E54")]
	public string LoadRawString()
	{
		return null;
	}

	[Token(Token = "0x600011A")]
	[Address(RVA = "0xEA28CC", Offset = "0xEA28CC", VA = "0xEA28CC")]
	internal byte[] GetBytes([Optional] ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x600011B")]
	[Address(RVA = "0xEA2EFC", Offset = "0xEA2EFC", VA = "0xEA2EFC")]
	public void DeleteKey(string key)
	{
	}

	[Token(Token = "0x600011C")]
	[Address(RVA = "0xEA2F54", Offset = "0xEA2F54", VA = "0xEA2F54")]
	public bool KeyExists(string key)
	{
		return default(bool);
	}

	[Token(Token = "0x600011D")]
	[Address(RVA = "0xEA2FAC", Offset = "0xEA2FAC", VA = "0xEA2FAC")]
	public int Size()
	{
		return default(int);
	}

	[Token(Token = "0x600011E")]
	[Address(RVA = "0xEA310C", Offset = "0xEA310C", VA = "0xEA310C")]
	public Type GetKeyType(string key)
	{
		return null;
	}

	[Token(Token = "0x600011F")]
	[Address(RVA = "0xE99E98", Offset = "0xE99E98", VA = "0xE99E98")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	internal static ES3File GetOrCreateCachedFile(ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x6000120")]
	[Address(RVA = "0xEA152C", Offset = "0xEA152C", VA = "0xEA152C")]
	internal static void CacheFile(ES3Settings settings)
	{
	}

	[Token(Token = "0x6000121")]
	[Address(RVA = "0xEA10E0", Offset = "0xEA10E0", VA = "0xEA10E0")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	internal static void Store([Optional] ES3Settings settings)
	{
	}

	[Token(Token = "0x6000122")]
	[Address(RVA = "0xE9DAB4", Offset = "0xE9DAB4", VA = "0xE9DAB4")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	internal static void RemoveCachedFile(ES3Settings settings)
	{
	}

	[Token(Token = "0x6000123")]
	[Address(RVA = "0xE9E04C", Offset = "0xE9E04C", VA = "0xE9E04C")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	internal static void CopyCachedFile(ES3Settings oldSettings, ES3Settings newSettings)
	{
	}

	[Token(Token = "0x6000124")]
	[Address(RVA = "0xE9F634", Offset = "0xE9F634", VA = "0xE9F634")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	internal static void DeleteKey(string key, ES3Settings settings)
	{
	}

	[Token(Token = "0x6000125")]
	[Address(RVA = "0xE9FA20", Offset = "0xE9FA20", VA = "0xE9FA20")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	internal static bool KeyExists(string key, ES3Settings settings)
	{
		return default(bool);
	}

	[Token(Token = "0x6000126")]
	[Address(RVA = "0xE9FCA4", Offset = "0xE9FCA4", VA = "0xE9FCA4")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	internal static bool FileExists(ES3Settings settings)
	{
		return default(bool);
	}

	[Token(Token = "0x6000127")]
	[Address(RVA = "0xEA0498", Offset = "0xEA0498", VA = "0xEA0498")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	internal static string[] GetKeys(ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x6000128")]
	[Address(RVA = "0xEA07D8", Offset = "0xEA07D8", VA = "0xEA07D8")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	internal static string[] GetFiles()
	{
		return null;
	}

	[Token(Token = "0x6000129")]
	[Address(RVA = "0xEA0FA8", Offset = "0xEA0FA8", VA = "0xEA0FA8")]
	internal static DateTime GetTimestamp(ES3Settings settings)
	{
		return default(DateTime);
	}
}
[Token(Token = "0x2000022")]
public class ES3InspectorInfo : MonoBehaviour
{
	[Token(Token = "0x600012B")]
	[Address(RVA = "0xEA3454", Offset = "0xEA3454", VA = "0xEA3454")]
	public ES3InspectorInfo()
	{
	}
}
[Token(Token = "0x2000023")]
public class ES3ReferenceMgr : ES3ReferenceMgrBase
{
	[Token(Token = "0x600012C")]
	[Address(RVA = "0xEA345C", Offset = "0xEA345C", VA = "0xEA345C")]
	public ES3ReferenceMgr()
	{
	}
}
[Token(Token = "0x2000024")]
public class ES3Spreadsheet
{
	[Token(Token = "0x2000025")]
	protected struct Index
	{
		[Token(Token = "0x400005A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int col;

		[Token(Token = "0x400005B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int row;

		[Token(Token = "0x6000144")]
		[Address(RVA = "0xEA3784", Offset = "0xEA3784", VA = "0xEA3784")]
		public Index(int col, int row)
		{
		}
	}

	[Token(Token = "0x4000051")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private int cols;

	[Token(Token = "0x4000052")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private int rows;

	[Token(Token = "0x4000053")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Dictionary<Index, string> cells;

	[Token(Token = "0x4000054")]
	private const string QUOTE = "\"";

	[Token(Token = "0x4000055")]
	private const char QUOTE_CHAR = '"';

	[Token(Token = "0x4000056")]
	private const char COMMA_CHAR = ',';

	[Token(Token = "0x4000057")]
	private const char NEWLINE_CHAR = '\n';

	[Token(Token = "0x4000058")]
	private const string ESCAPED_QUOTE = "\"\"";

	[Token(Token = "0x4000059")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static char[] CHARS_TO_ESCAPE;

	[Token(Token = "0x17000016")]
	public int ColumnCount
	{
		[Token(Token = "0x600012D")]
		[Address(RVA = "0xEA34B4", Offset = "0xEA34B4", VA = "0xEA34B4")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000017")]
	public int RowCount
	{
		[Token(Token = "0x600012E")]
		[Address(RVA = "0xEA34BC", Offset = "0xEA34BC", VA = "0xEA34BC")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x600012F")]
	[Address(RVA = "0xEA34C4", Offset = "0xEA34C4", VA = "0xEA34C4")]
	public void SetCell(int col, int row, object value)
	{
	}

	[Token(Token = "0x6000130")]
	[Address(RVA = "0xEA36E8", Offset = "0xEA36E8", VA = "0xEA36E8")]
	private void SetCellString(int col, int row, string value)
	{
	}

	[Token(Token = "0x6000131")]
	public T GetCell<T>(int col, int row)
	{
		return (T)null;
	}

	[Token(Token = "0x6000132")]
	[Address(RVA = "0xEA378C", Offset = "0xEA378C", VA = "0xEA378C")]
	public object GetCell(Type type, int col, int row)
	{
		return null;
	}

	[Token(Token = "0x6000133")]
	[Address(RVA = "0xEA3B94", Offset = "0xEA3B94", VA = "0xEA3B94")]
	public void Load(string filePath)
	{
	}

	[Token(Token = "0x6000134")]
	[Address(RVA = "0xEA3C40", Offset = "0xEA3C40", VA = "0xEA3C40")]
	public void Load(string filePath, ES3Settings settings)
	{
	}

	[Token(Token = "0x6000135")]
	[Address(RVA = "0xEA3C18", Offset = "0xEA3C18", VA = "0xEA3C18")]
	public void Load(ES3Settings settings)
	{
	}

	[Token(Token = "0x6000136")]
	[Address(RVA = "0xEA3FB0", Offset = "0xEA3FB0", VA = "0xEA3FB0")]
	public void LoadRaw(string str)
	{
	}

	[Token(Token = "0x6000137")]
	[Address(RVA = "0xEA4088", Offset = "0xEA4088", VA = "0xEA4088")]
	public void LoadRaw(string str, ES3Settings settings)
	{
	}

	[Token(Token = "0x6000138")]
	[Address(RVA = "0xEA3CC8", Offset = "0xEA3CC8", VA = "0xEA3CC8")]
	private void Load(Stream stream, ES3Settings settings)
	{
	}

	[Token(Token = "0x6000139")]
	[Address(RVA = "0xEA4128", Offset = "0xEA4128", VA = "0xEA4128")]
	public void Save(string filePath)
	{
	}

	[Token(Token = "0x600013A")]
	[Address(RVA = "0xEA4510", Offset = "0xEA4510", VA = "0xEA4510")]
	public void Save(string filePath, ES3Settings settings)
	{
	}

	[Token(Token = "0x600013B")]
	[Address(RVA = "0xEA458C", Offset = "0xEA458C", VA = "0xEA458C")]
	public void Save(ES3Settings settings)
	{
	}

	[Token(Token = "0x600013C")]
	[Address(RVA = "0xEA4594", Offset = "0xEA4594", VA = "0xEA4594")]
	public void Save(string filePath, bool append)
	{
	}

	[Token(Token = "0x600013D")]
	[Address(RVA = "0xEA4610", Offset = "0xEA4610", VA = "0xEA4610")]
	public void Save(string filePath, ES3Settings settings, bool append)
	{
	}

	[Token(Token = "0x600013E")]
	[Address(RVA = "0xEA41A0", Offset = "0xEA41A0", VA = "0xEA41A0")]
	public void Save(ES3Settings settings, bool append)
	{
	}

	[Token(Token = "0x600013F")]
	[Address(RVA = "0xEA4874", Offset = "0xEA4874", VA = "0xEA4874")]
	private static string Escape(string str, bool isAlreadyWrappedInQuotes = false)
	{
		return null;
	}

	[Token(Token = "0x6000140")]
	[Address(RVA = "0xEA499C", Offset = "0xEA499C", VA = "0xEA499C")]
	private static string Unescape(string str)
	{
		return null;
	}

	[Token(Token = "0x6000141")]
	[Address(RVA = "0xEA4698", Offset = "0xEA4698", VA = "0xEA4698")]
	private string[,] ToArray()
	{
		return null;
	}

	[Token(Token = "0x6000142")]
	[Address(RVA = "0xEA4A70", Offset = "0xEA4A70", VA = "0xEA4A70")]
	public ES3Spreadsheet()
	{
	}
}
[Token(Token = "0x2000026")]
public abstract class ES3Reader : IDisposable
{
	[Token(Token = "0x2000027")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public class ES3ReaderPropertyEnumerator
	{
		[Token(Token = "0x2000028")]
		[CompilerGenerated]
		private sealed class <GetEnumerator>d__2 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000060")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000061")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000062")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ES3ReaderPropertyEnumerator <>4__this;

			[Token(Token = "0x1700001A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000188")]
				[Address(RVA = "0xEA554C", Offset = "0xEA554C", VA = "0xEA554C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700001B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600018A")]
				[Address(RVA = "0xEA5594", Offset = "0xEA5594", VA = "0xEA5594", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000185")]
			[Address(RVA = "0xEA5470", Offset = "0xEA5470", VA = "0xEA5470")]
			[DebuggerHidden]
			public <GetEnumerator>d__2(int <>1__state)
			{
			}

			[Token(Token = "0x6000186")]
			[Address(RVA = "0xEA5498", Offset = "0xEA5498", VA = "0xEA5498", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000187")]
			[Address(RVA = "0xEA549C", Offset = "0xEA549C", VA = "0xEA549C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000189")]
			[Address(RVA = "0xEA5554", Offset = "0xEA5554", VA = "0xEA5554", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400005F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ES3Reader reader;

		[Token(Token = "0x6000183")]
		[Address(RVA = "0xEA4D18", Offset = "0xEA4D18", VA = "0xEA4D18")]
		public ES3ReaderPropertyEnumerator(ES3Reader reader)
		{
		}

		[Token(Token = "0x6000184")]
		[Address(RVA = "0xEA05FC", Offset = "0xEA05FC", VA = "0xEA05FC")]
		[IteratorStateMachine(typeof(<GetEnumerator>d__2))]
		public IEnumerator GetEnumerator()
		{
			return null;
		}
	}

	[Token(Token = "0x2000029")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public class ES3ReaderRawEnumerator
	{
		[Token(Token = "0x200002A")]
		[CompilerGenerated]
		private sealed class <GetEnumerator>d__2 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000064")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000065")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000066")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ES3ReaderRawEnumerator <>4__this;

			[Token(Token = "0x1700001C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000190")]
				[Address(RVA = "0xEA578C", Offset = "0xEA578C", VA = "0xEA578C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700001D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000192")]
				[Address(RVA = "0xEA57D4", Offset = "0xEA57D4", VA = "0xEA57D4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600018D")]
			[Address(RVA = "0xEA559C", Offset = "0xEA559C", VA = "0xEA559C")]
			[DebuggerHidden]
			public <GetEnumerator>d__2(int <>1__state)
			{
			}

			[Token(Token = "0x600018E")]
			[Address(RVA = "0xEA55C4", Offset = "0xEA55C4", VA = "0xEA55C4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600018F")]
			[Address(RVA = "0xEA55C8", Offset = "0xEA55C8", VA = "0xEA55C8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000191")]
			[Address(RVA = "0xEA5794", Offset = "0xEA5794", VA = "0xEA5794", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000063")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ES3Reader reader;

		[Token(Token = "0x600018B")]
		[Address(RVA = "0xEA4DB8", Offset = "0xEA4DB8", VA = "0xEA4DB8")]
		public ES3ReaderRawEnumerator(ES3Reader reader)
		{
		}

		[Token(Token = "0x600018C")]
		[Address(RVA = "0xEA1FCC", Offset = "0xEA1FCC", VA = "0xEA1FCC")]
		[IteratorStateMachine(typeof(<GetEnumerator>d__2))]
		public IEnumerator GetEnumerator()
		{
			return null;
		}
	}

	[Token(Token = "0x400005C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ES3Settings settings;

	[Token(Token = "0x400005D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected int serializationDepth;

	[Token(Token = "0x400005E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	internal string overridePropertiesName;

	[Token(Token = "0x17000018")]
	public virtual ES3ReaderPropertyEnumerator Properties
	{
		[Token(Token = "0x6000168")]
		[Address(RVA = "0xEA4CA8", Offset = "0xEA4CA8", VA = "0xEA4CA8", Slot = "39")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000019")]
	internal virtual ES3ReaderRawEnumerator RawEnumerator
	{
		[Token(Token = "0x6000169")]
		[Address(RVA = "0xEA4D48", Offset = "0xEA4D48", VA = "0xEA4D48", Slot = "40")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000145")]
	internal abstract int Read_int();

	[Token(Token = "0x6000146")]
	internal abstract float Read_float();

	[Token(Token = "0x6000147")]
	internal abstract bool Read_bool();

	[Token(Token = "0x6000148")]
	internal abstract char Read_char();

	[Token(Token = "0x6000149")]
	internal abstract decimal Read_decimal();

	[Token(Token = "0x600014A")]
	internal abstract double Read_double();

	[Token(Token = "0x600014B")]
	internal abstract long Read_long();

	[Token(Token = "0x600014C")]
	internal abstract ulong Read_ulong();

	[Token(Token = "0x600014D")]
	internal abstract byte Read_byte();

	[Token(Token = "0x600014E")]
	internal abstract sbyte Read_sbyte();

	[Token(Token = "0x600014F")]
	internal abstract short Read_short();

	[Token(Token = "0x6000150")]
	internal abstract ushort Read_ushort();

	[Token(Token = "0x6000151")]
	internal abstract uint Read_uint();

	[Token(Token = "0x6000152")]
	internal abstract string Read_string();

	[Token(Token = "0x6000153")]
	internal abstract byte[] Read_byteArray();

	[Token(Token = "0x6000154")]
	internal abstract long Read_ref();

	[Token(Token = "0x6000155")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public abstract string ReadPropertyName();

	[Token(Token = "0x6000156")]
	protected abstract Type ReadKeyPrefix(bool ignore = false);

	[Token(Token = "0x6000157")]
	protected abstract void ReadKeySuffix();

	[Token(Token = "0x6000158")]
	internal abstract byte[] ReadElement(bool skip = false);

	[Token(Token = "0x6000159")]
	public abstract void Dispose();

	[Token(Token = "0x600015A")]
	[Address(RVA = "0xEA4B98", Offset = "0xEA4B98", VA = "0xEA4B98", Slot = "26")]
	internal virtual bool Goto(string key)
	{
		return default(bool);
	}

	[Token(Token = "0x600015B")]
	[Address(RVA = "0xEA4C54", Offset = "0xEA4C54", VA = "0xEA4C54", Slot = "27")]
	internal virtual bool StartReadObject()
	{
		return default(bool);
	}

	[Token(Token = "0x600015C")]
	[Address(RVA = "0xEA4C68", Offset = "0xEA4C68", VA = "0xEA4C68", Slot = "28")]
	internal virtual void EndReadObject()
	{
	}

	[Token(Token = "0x600015D")]
	internal abstract bool StartReadDictionary();

	[Token(Token = "0x600015E")]
	internal abstract void EndReadDictionary();

	[Token(Token = "0x600015F")]
	internal abstract bool StartReadDictionaryKey();

	[Token(Token = "0x6000160")]
	internal abstract void EndReadDictionaryKey();

	[Token(Token = "0x6000161")]
	internal abstract void StartReadDictionaryValue();

	[Token(Token = "0x6000162")]
	internal abstract bool EndReadDictionaryValue();

	[Token(Token = "0x6000163")]
	internal abstract bool StartReadCollection();

	[Token(Token = "0x6000164")]
	internal abstract void EndReadCollection();

	[Token(Token = "0x6000165")]
	internal abstract bool StartReadCollectionItem();

	[Token(Token = "0x6000166")]
	internal abstract bool EndReadCollectionItem();

	[Token(Token = "0x6000167")]
	[Address(RVA = "0xEA4C78", Offset = "0xEA4C78", VA = "0xEA4C78")]
	internal ES3Reader(ES3Settings settings, bool readHeaderAndFooter = true)
	{
	}

	[Token(Token = "0x600016A")]
	[Address(RVA = "0xEA4DE8", Offset = "0xEA4DE8", VA = "0xEA4DE8", Slot = "41")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public virtual void Skip()
	{
	}

	[Token(Token = "0x600016B")]
	public virtual T Read<T>()
	{
		return (T)null;
	}

	[Token(Token = "0x600016C")]
	public virtual void ReadInto<T>(object obj)
	{
	}

	[Token(Token = "0x600016D")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public T ReadProperty<T>()
	{
		return (T)null;
	}

	[Token(Token = "0x600016E")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public T ReadProperty<T>(ES3Type type)
	{
		return (T)null;
	}

	[Token(Token = "0x600016F")]
	[Address(RVA = "0xEA4DFC", Offset = "0xEA4DFC", VA = "0xEA4DFC")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public long ReadRefProperty()
	{
		return default(long);
	}

	[Token(Token = "0x6000170")]
	[Address(RVA = "0xEA4E2C", Offset = "0xEA4E2C", VA = "0xEA4E2C")]
	internal Type ReadType()
	{
		return null;
	}

	[Token(Token = "0x6000171")]
	[Address(RVA = "0xEA4F00", Offset = "0xEA4F00", VA = "0xEA4F00")]
	public object SetPrivateProperty(string name, object value, object objectContainingProperty)
	{
		return null;
	}

	[Token(Token = "0x6000172")]
	[Address(RVA = "0xEA50A0", Offset = "0xEA50A0", VA = "0xEA50A0")]
	public object SetPrivateField(string name, object value, object objectContainingField)
	{
		return null;
	}

	[Token(Token = "0x6000173")]
	public virtual T Read<T>(string key)
	{
		return (T)null;
	}

	[Token(Token = "0x6000174")]
	public virtual T Read<T>(string key, T defaultValue)
	{
		return (T)null;
	}

	[Token(Token = "0x6000175")]
	public virtual void ReadInto<T>(string key, T obj) where T : class
	{
	}

	[Token(Token = "0x6000176")]
	protected virtual void ReadObject<T>(object obj, ES3Type type)
	{
	}

	[Token(Token = "0x6000177")]
	protected virtual T ReadObject<T>(ES3Type type)
	{
		return (T)null;
	}

	[Token(Token = "0x6000178")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public virtual T Read<T>(ES3Type type)
	{
		return (T)null;
	}

	[Token(Token = "0x6000179")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public virtual void ReadInto<T>(object obj, ES3Type type)
	{
	}

	[Token(Token = "0x600017A")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	internal Type ReadTypeFromHeader<T>()
	{
		return null;
	}

	[Token(Token = "0x600017B")]
	[Address(RVA = "0xEA5240", Offset = "0xEA5240", VA = "0xEA5240")]
	public static ES3Reader Create()
	{
		return null;
	}

	[Token(Token = "0x600017C")]
	[Address(RVA = "0xEA529C", Offset = "0xEA529C", VA = "0xEA529C")]
	public static ES3Reader Create(string filePath)
	{
		return null;
	}

	[Token(Token = "0x600017D")]
	[Address(RVA = "0xEA5300", Offset = "0xEA5300", VA = "0xEA5300")]
	public static ES3Reader Create(string filePath, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x600017E")]
	[Address(RVA = "0xE9FADC", Offset = "0xE9FADC", VA = "0xE9FADC")]
	public static ES3Reader Create(ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x600017F")]
	[Address(RVA = "0xEA5370", Offset = "0xEA5370", VA = "0xEA5370")]
	public static ES3Reader Create(byte[] bytes)
	{
		return null;
	}

	[Token(Token = "0x6000180")]
	[Address(RVA = "0xEA273C", Offset = "0xEA273C", VA = "0xEA273C")]
	public static ES3Reader Create(byte[] bytes, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x6000181")]
	[Address(RVA = "0xEA53D4", Offset = "0xEA53D4", VA = "0xEA53D4")]
	internal static ES3Reader Create(Stream stream, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x6000182")]
	[Address(RVA = "0xE9D394", Offset = "0xE9D394", VA = "0xE9D394")]
	internal static ES3Reader Create(Stream stream, ES3Settings settings, bool readHeaderAndFooter)
	{
		return null;
	}
}
[Token(Token = "0x200002B")]
public class ES3XMLReader
{
	[Token(Token = "0x6000193")]
	[Address(RVA = "0xEA57DC", Offset = "0xEA57DC", VA = "0xEA57DC")]
	public ES3XMLReader()
	{
	}
}
[Token(Token = "0x200002C")]
public class ES3Defaults : ScriptableObject
{
	[Token(Token = "0x4000067")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	public ES3SerializableSettings settings;

	[Token(Token = "0x4000068")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool addMgrToSceneAutomatically;

	[Token(Token = "0x4000069")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool autoUpdateReferences;

	[Token(Token = "0x400006A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
	public bool addAllPrefabsToManager;

	[Token(Token = "0x400006B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x23")]
	public bool logDebugInfo;

	[Token(Token = "0x400006C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool logWarnings;

	[Token(Token = "0x400006D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
	public bool logErrors;

	[Token(Token = "0x6000194")]
	[Address(RVA = "0xEA57E4", Offset = "0xEA57E4", VA = "0xEA57E4")]
	public ES3Defaults()
	{
	}
}
[Token(Token = "0x200002D")]
public class ES3Settings : ICloneable
{
	[Token(Token = "0x400006E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static ES3Settings _defaults;

	[Token(Token = "0x400006F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static ES3Defaults _defaultSettingsScriptableObject;

	[Token(Token = "0x4000070")]
	private const string defaultSettingsPath = "ES3/ES3Defaults";

	[Token(Token = "0x4000071")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static ES3Settings _unencryptedUncompressedSettings;

	[Token(Token = "0x4000072")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static readonly string[] resourcesExtensions;

	[Token(Token = "0x4000073")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[SerializeField]
	private ES3.Location _location;

	[Token(Token = "0x4000074")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string path;

	[Token(Token = "0x4000075")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ES3.EncryptionType encryptionType;

	[Token(Token = "0x4000076")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public ES3.CompressionType compressionType;

	[Token(Token = "0x4000077")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string encryptionPassword;

	[Token(Token = "0x4000078")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ES3.Directory directory;

	[Token(Token = "0x4000079")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public ES3.Format format;

	[Token(Token = "0x400007A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool prettyPrint;

	[Token(Token = "0x400007B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public int bufferSize;

	[Token(Token = "0x400007C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Encoding encoding;

	[Token(Token = "0x400007D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool saveChildren;

	[Token(Token = "0x400007E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public bool typeChecking;

	[Token(Token = "0x400007F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public bool safeReflection;

	[Token(Token = "0x4000080")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public ES3.ReferenceMode memberReferenceMode;

	[Token(Token = "0x4000081")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public ES3.ReferenceMode referenceMode;

	[Token(Token = "0x4000082")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public int serializationDepthLimit;

	[Token(Token = "0x4000083")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public string[] assemblyNames;

	[Token(Token = "0x1700001E")]
	public static ES3Defaults defaultSettingsScriptableObject
	{
		[Token(Token = "0x6000195")]
		[Address(RVA = "0xEA58B8", Offset = "0xEA58B8", VA = "0xEA58B8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700001F")]
	public static ES3Settings defaultSettings
	{
		[Token(Token = "0x6000196")]
		[Address(RVA = "0xE9D4FC", Offset = "0xE9D4FC", VA = "0xE9D4FC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000020")]
	internal static ES3Settings unencryptedUncompressedSettings
	{
		[Token(Token = "0x6000197")]
		[Address(RVA = "0xEA59C8", Offset = "0xEA59C8", VA = "0xEA59C8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000021")]
	public ES3.Location location
	{
		[Token(Token = "0x6000198")]
		[Address(RVA = "0xE98F34", Offset = "0xE98F34", VA = "0xE98F34")]
		get
		{
			return default(ES3.Location);
		}
		[Token(Token = "0x6000199")]
		[Address(RVA = "0xEA5B74", Offset = "0xEA5B74", VA = "0xEA5B74")]
		set
		{
		}
	}

	[Token(Token = "0x17000022")]
	public string FullPath
	{
		[Token(Token = "0x600019A")]
		[Address(RVA = "0xE9C574", Offset = "0xE9C574", VA = "0xE9C574")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600019B")]
	[Address(RVA = "0xE99910", Offset = "0xE99910", VA = "0xE99910")]
	public ES3Settings([Optional] string path, [Optional] ES3Settings settings)
	{
	}

	[Token(Token = "0x600019C")]
	[Address(RVA = "0xEA5F18", Offset = "0xEA5F18", VA = "0xEA5F18")]
	public ES3Settings(string path, params Enum[] enums)
	{
	}

	[Token(Token = "0x600019D")]
	[Address(RVA = "0xEA31FC", Offset = "0xEA31FC", VA = "0xEA31FC")]
	public ES3Settings(params Enum[] enums)
	{
	}

	[Token(Token = "0x600019E")]
	[Address(RVA = "0xEA5F58", Offset = "0xEA5F58", VA = "0xEA5F58")]
	public ES3Settings(ES3.EncryptionType encryptionType, string encryptionPassword)
	{
	}

	[Token(Token = "0x600019F")]
	[Address(RVA = "0xEA5F90", Offset = "0xEA5F90", VA = "0xEA5F90")]
	public ES3Settings(string path, ES3.EncryptionType encryptionType, string encryptionPassword, [Optional] ES3Settings settings)
	{
	}

	[Token(Token = "0x60001A0")]
	[Address(RVA = "0xEA5C1C", Offset = "0xEA5C1C", VA = "0xEA5C1C")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public ES3Settings(bool applyDefaults)
	{
	}

	[Token(Token = "0x60001A1")]
	[Address(RVA = "0xEA5B7C", Offset = "0xEA5B7C", VA = "0xEA5B7C")]
	private static bool IsAbsolute(string path)
	{
		return default(bool);
	}

	[Token(Token = "0x60001A2")]
	[Address(RVA = "0xEA1F60", Offset = "0xEA1F60", VA = "0xEA1F60", Slot = "4")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public object Clone()
	{
		return null;
	}

	[Token(Token = "0x60001A3")]
	[Address(RVA = "0xEA5E5C", Offset = "0xEA5E5C", VA = "0xEA5E5C")]
	private void CopyInto(ES3Settings newSettings)
	{
	}
}
[Serializable]
[Token(Token = "0x200002E")]
[EditorBrowsable(EditorBrowsableState.Never)]
public class ES3SerializableSettings : ES3Settings
{
	[Token(Token = "0x60001A5")]
	[Address(RVA = "0xEA5860", Offset = "0xEA5860", VA = "0xEA5860")]
	public ES3SerializableSettings()
	{
	}

	[Token(Token = "0x60001A6")]
	[Address(RVA = "0xEA63B8", Offset = "0xEA63B8", VA = "0xEA63B8")]
	public ES3SerializableSettings(bool applyDefaults)
	{
	}

	[Token(Token = "0x60001A7")]
	[Address(RVA = "0xEA641C", Offset = "0xEA641C", VA = "0xEA641C")]
	public ES3SerializableSettings(string path)
	{
	}

	[Token(Token = "0x60001A8")]
	[Address(RVA = "0xE99818", Offset = "0xE99818", VA = "0xE99818")]
	public ES3SerializableSettings(string path, ES3.Location location)
	{
	}
}
[Token(Token = "0x200002F")]
public class ES3Ref
{
	[Token(Token = "0x4000084")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public long id;

	[Token(Token = "0x60001A9")]
	[Address(RVA = "0xEA6490", Offset = "0xEA6490", VA = "0xEA6490")]
	public ES3Ref(long id)
	{
	}
}
[Token(Token = "0x2000030")]
public class ES3Cloud : ES3WebClass
{
	[Token(Token = "0x2000031")]
	[CompilerGenerated]
	private sealed class <Sync>d__20 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000088")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000089")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400008A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ES3Cloud <>4__this;

		[Token(Token = "0x400008B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ES3Settings settings;

		[Token(Token = "0x400008C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string user;

		[Token(Token = "0x400008D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string password;

		[Token(Token = "0x17000027")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60001F0")]
			[Address(RVA = "0xEA8EB4", Offset = "0xEA8EB4", VA = "0xEA8EB4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000028")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60001F2")]
			[Address(RVA = "0xEA8EFC", Offset = "0xEA8EFC", VA = "0xEA8EFC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001ED")]
		[Address(RVA = "0xEA6C60", Offset = "0xEA6C60", VA = "0xEA6C60")]
		[DebuggerHidden]
		public <Sync>d__20(int <>1__state)
		{
		}

		[Token(Token = "0x60001EE")]
		[Address(RVA = "0xEA8D6C", Offset = "0xEA8D6C", VA = "0xEA8D6C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60001EF")]
		[Address(RVA = "0xEA8D70", Offset = "0xEA8D70", VA = "0xEA8D70", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60001F1")]
		[Address(RVA = "0xEA8EBC", Offset = "0xEA8EBC", VA = "0xEA8EBC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000032")]
	[CompilerGenerated]
	private sealed class <UploadFile>d__33 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400008E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400008F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000090")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ES3Cloud <>4__this;

		[Token(Token = "0x4000091")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ES3Settings settings;

		[Token(Token = "0x4000092")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public long fileTimestamp;

		[Token(Token = "0x4000093")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string user;

		[Token(Token = "0x4000094")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string password;

		[Token(Token = "0x4000095")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public byte[] bytes;

		[Token(Token = "0x4000096")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private UnityWebRequest <webRequest>5__2;

		[Token(Token = "0x17000029")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60001F7")]
			[Address(RVA = "0xEA92E0", Offset = "0xEA92E0", VA = "0xEA92E0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700002A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60001F9")]
			[Address(RVA = "0xEA9328", Offset = "0xEA9328", VA = "0xEA9328", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001F3")]
		[Address(RVA = "0xEA7580", Offset = "0xEA7580", VA = "0xEA7580")]
		[DebuggerHidden]
		public <UploadFile>d__33(int <>1__state)
		{
		}

		[Token(Token = "0x60001F4")]
		[Address(RVA = "0xEA8F04", Offset = "0xEA8F04", VA = "0xEA8F04", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60001F5")]
		[Address(RVA = "0xEA8F20", Offset = "0xEA8F20", VA = "0xEA8F20", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60001F6")]
		[Address(RVA = "0xEA9230", Offset = "0xEA9230", VA = "0xEA9230")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x60001F8")]
		[Address(RVA = "0xEA92E8", Offset = "0xEA92E8", VA = "0xEA92E8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000033")]
	[CompilerGenerated]
	private sealed class <DownloadFile>d__44 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000097")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000098")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000099")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ES3Cloud <>4__this;

		[Token(Token = "0x400009A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ES3File es3File;

		[Token(Token = "0x400009B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string user;

		[Token(Token = "0x400009C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string password;

		[Token(Token = "0x400009D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public long timestamp;

		[Token(Token = "0x400009E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private UnityWebRequest <webRequest>5__2;

		[Token(Token = "0x1700002B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60001FE")]
			[Address(RVA = "0xEA97C0", Offset = "0xEA97C0", VA = "0xEA97C0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700002C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000200")]
			[Address(RVA = "0xEA9808", Offset = "0xEA9808", VA = "0xEA9808", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001FA")]
		[Address(RVA = "0xEA7C14", Offset = "0xEA7C14", VA = "0xEA7C14")]
		[DebuggerHidden]
		public <DownloadFile>d__44(int <>1__state)
		{
		}

		[Token(Token = "0x60001FB")]
		[Address(RVA = "0xEA9330", Offset = "0xEA9330", VA = "0xEA9330", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60001FC")]
		[Address(RVA = "0xEA934C", Offset = "0xEA934C", VA = "0xEA934C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60001FD")]
		[Address(RVA = "0xEA9710", Offset = "0xEA9710", VA = "0xEA9710")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x60001FF")]
		[Address(RVA = "0xEA97C8", Offset = "0xEA97C8", VA = "0xEA97C8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000034")]
	[CompilerGenerated]
	private sealed class <DownloadFile>d__45 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400009F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40000A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40000A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ES3Cloud <>4__this;

		[Token(Token = "0x40000A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ES3Settings settings;

		[Token(Token = "0x40000A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string user;

		[Token(Token = "0x40000A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string password;

		[Token(Token = "0x40000A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public long timestamp;

		[Token(Token = "0x40000A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private UnityWebRequest <webRequest>5__2;

		[Token(Token = "0x1700002D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000205")]
			[Address(RVA = "0xEA9C5C", Offset = "0xEA9C5C", VA = "0xEA9C5C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700002E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000207")]
			[Address(RVA = "0xEA9CA4", Offset = "0xEA9CA4", VA = "0xEA9CA4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000201")]
		[Address(RVA = "0xEA7C3C", Offset = "0xEA7C3C", VA = "0xEA7C3C")]
		[DebuggerHidden]
		public <DownloadFile>d__45(int <>1__state)
		{
		}

		[Token(Token = "0x6000202")]
		[Address(RVA = "0xEA9810", Offset = "0xEA9810", VA = "0xEA9810", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000203")]
		[Address(RVA = "0xEA982C", Offset = "0xEA982C", VA = "0xEA982C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000204")]
		[Address(RVA = "0xEA9BAC", Offset = "0xEA9BAC", VA = "0xEA9BAC")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x6000206")]
		[Address(RVA = "0xEA9C64", Offset = "0xEA9C64", VA = "0xEA9C64", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000035")]
	[CompilerGenerated]
	private sealed class <DeleteFile>d__53 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40000A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40000A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40000A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ES3Cloud <>4__this;

		[Token(Token = "0x40000AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ES3Settings settings;

		[Token(Token = "0x40000AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string user;

		[Token(Token = "0x40000AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string password;

		[Token(Token = "0x40000AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private UnityWebRequest <webRequest>5__2;

		[Token(Token = "0x1700002F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600020C")]
			[Address(RVA = "0xEA9FEC", Offset = "0xEA9FEC", VA = "0xEA9FEC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000030")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600020E")]
			[Address(RVA = "0xEAA034", Offset = "0xEAA034", VA = "0xEAA034", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000208")]
		[Address(RVA = "0xEA8118", Offset = "0xEA8118", VA = "0xEA8118")]
		[DebuggerHidden]
		public <DeleteFile>d__53(int <>1__state)
		{
		}

		[Token(Token = "0x6000209")]
		[Address(RVA = "0xEA9CAC", Offset = "0xEA9CAC", VA = "0xEA9CAC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600020A")]
		[Address(RVA = "0xEA9CC8", Offset = "0xEA9CC8", VA = "0xEA9CC8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600020B")]
		[Address(RVA = "0xEA9F3C", Offset = "0xEA9F3C", VA = "0xEA9F3C")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x600020D")]
		[Address(RVA = "0xEA9FF4", Offset = "0xEA9FF4", VA = "0xEA9FF4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000036")]
	[CompilerGenerated]
	private sealed class <RenameFile>d__60 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40000AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40000AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40000B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ES3Cloud <>4__this;

		[Token(Token = "0x40000B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ES3Settings settings;

		[Token(Token = "0x40000B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ES3Settings newSettings;

		[Token(Token = "0x40000B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string user;

		[Token(Token = "0x40000B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string password;

		[Token(Token = "0x40000B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private UnityWebRequest <webRequest>5__2;

		[Token(Token = "0x17000031")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000213")]
			[Address(RVA = "0xEAA3BC", Offset = "0xEAA3BC", VA = "0xEAA3BC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000032")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000215")]
			[Address(RVA = "0xEAA404", Offset = "0xEAA404", VA = "0xEAA404", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600020F")]
		[Address(RVA = "0xEA8678", Offset = "0xEA8678", VA = "0xEA8678")]
		[DebuggerHidden]
		public <RenameFile>d__60(int <>1__state)
		{
		}

		[Token(Token = "0x6000210")]
		[Address(RVA = "0xEAA03C", Offset = "0xEAA03C", VA = "0xEAA03C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000211")]
		[Address(RVA = "0xEAA058", Offset = "0xEAA058", VA = "0xEAA058", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000212")]
		[Address(RVA = "0xEAA30C", Offset = "0xEAA30C", VA = "0xEAA30C")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x6000214")]
		[Address(RVA = "0xEAA3C4", Offset = "0xEAA3C4", VA = "0xEAA3C4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000037")]
	[CompilerGenerated]
	private sealed class <DownloadFilenames>d__61 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40000B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40000B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40000B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ES3Cloud <>4__this;

		[Token(Token = "0x40000B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string user;

		[Token(Token = "0x40000BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string password;

		[Token(Token = "0x40000BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private UnityWebRequest <webRequest>5__2;

		[Token(Token = "0x17000033")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600021A")]
			[Address(RVA = "0xEAA798", Offset = "0xEAA798", VA = "0xEAA798", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000034")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600021C")]
			[Address(RVA = "0xEAA7E0", Offset = "0xEAA7E0", VA = "0xEAA7E0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000216")]
		[Address(RVA = "0xEA8744", Offset = "0xEA8744", VA = "0xEA8744")]
		[DebuggerHidden]
		public <DownloadFilenames>d__61(int <>1__state)
		{
		}

		[Token(Token = "0x6000217")]
		[Address(RVA = "0xEAA40C", Offset = "0xEAA40C", VA = "0xEAA40C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000218")]
		[Address(RVA = "0xEAA428", Offset = "0xEAA428", VA = "0xEAA428", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000219")]
		[Address(RVA = "0xEAA6E8", Offset = "0xEAA6E8", VA = "0xEAA6E8")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x600021B")]
		[Address(RVA = "0xEAA7A0", Offset = "0xEAA7A0", VA = "0xEAA7A0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000038")]
	[CompilerGenerated]
	private sealed class <SearchFilenames>d__62 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40000BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40000BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40000BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ES3Cloud <>4__this;

		[Token(Token = "0x40000BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string user;

		[Token(Token = "0x40000C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string password;

		[Token(Token = "0x40000C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string searchPattern;

		[Token(Token = "0x40000C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private UnityWebRequest <webRequest>5__2;

		[Token(Token = "0x17000035")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000221")]
			[Address(RVA = "0xEAABBC", Offset = "0xEAABBC", VA = "0xEAABBC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000036")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000223")]
			[Address(RVA = "0xEAAC04", Offset = "0xEAAC04", VA = "0xEAAC04", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600021D")]
		[Address(RVA = "0xEA882C", Offset = "0xEA882C", VA = "0xEA882C")]
		[DebuggerHidden]
		public <SearchFilenames>d__62(int <>1__state)
		{
		}

		[Token(Token = "0x600021E")]
		[Address(RVA = "0xEAA7E8", Offset = "0xEAA7E8", VA = "0xEAA7E8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600021F")]
		[Address(RVA = "0xEAA804", Offset = "0xEAA804", VA = "0xEAA804", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000220")]
		[Address(RVA = "0xEAAB0C", Offset = "0xEAAB0C", VA = "0xEAAB0C")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x6000222")]
		[Address(RVA = "0xEAABC4", Offset = "0xEAABC4", VA = "0xEAABC4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000039")]
	[CompilerGenerated]
	private sealed class <DownloadTimestamp>d__70 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40000C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40000C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40000C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ES3Cloud <>4__this;

		[Token(Token = "0x40000C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ES3Settings settings;

		[Token(Token = "0x40000C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string user;

		[Token(Token = "0x40000C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string password;

		[Token(Token = "0x40000C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private UnityWebRequest <webRequest>5__2;

		[Token(Token = "0x17000037")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000228")]
			[Address(RVA = "0xEAAF98", Offset = "0xEAAF98", VA = "0xEAAF98", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000038")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600022A")]
			[Address(RVA = "0xEAAFE0", Offset = "0xEAAFE0", VA = "0xEAAFE0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000224")]
		[Address(RVA = "0xEA8D08", Offset = "0xEA8D08", VA = "0xEA8D08")]
		[DebuggerHidden]
		public <DownloadTimestamp>d__70(int <>1__state)
		{
		}

		[Token(Token = "0x6000225")]
		[Address(RVA = "0xEAAC0C", Offset = "0xEAAC0C", VA = "0xEAAC0C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000226")]
		[Address(RVA = "0xEAAC28", Offset = "0xEAAC28", VA = "0xEAAC28", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000227")]
		[Address(RVA = "0xEAAEE8", Offset = "0xEAAEE8", VA = "0xEAAEE8")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x6000229")]
		[Address(RVA = "0xEAAFA0", Offset = "0xEAAFA0", VA = "0xEAAFA0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000085")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int timeout;

	[Token(Token = "0x4000086")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Encoding encoding;

	[Token(Token = "0x4000087")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private byte[] _data;

	[Token(Token = "0x17000023")]
	public byte[] data
	{
		[Token(Token = "0x60001AC")]
		[Address(RVA = "0xEA656C", Offset = "0xEA656C", VA = "0xEA656C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000024")]
	public string text
	{
		[Token(Token = "0x60001AD")]
		[Address(RVA = "0xEA6574", Offset = "0xEA6574", VA = "0xEA6574")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000025")]
	public string[] filenames
	{
		[Token(Token = "0x60001AE")]
		[Address(RVA = "0xEA65AC", Offset = "0xEA65AC", VA = "0xEA65AC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000026")]
	public DateTime timestamp
	{
		[Token(Token = "0x60001AF")]
		[Address(RVA = "0xEA6670", Offset = "0xEA6670", VA = "0xEA6670")]
		get
		{
			return default(DateTime);
		}
	}

	[Token(Token = "0x60001AA")]
	[Address(RVA = "0xEA64B8", Offset = "0xEA64B8", VA = "0xEA64B8")]
	public ES3Cloud(string url, string apiKey)
	{
	}

	[Token(Token = "0x60001AB")]
	[Address(RVA = "0xEA6508", Offset = "0xEA6508", VA = "0xEA6508")]
	public ES3Cloud(string url, string apiKey, int timeout)
	{
	}

	[Token(Token = "0x60001B0")]
	[Address(RVA = "0xEA67AC", Offset = "0xEA67AC", VA = "0xEA67AC")]
	public IEnumerator Sync()
	{
		return null;
	}

	[Token(Token = "0x60001B1")]
	[Address(RVA = "0xEA68EC", Offset = "0xEA68EC", VA = "0xEA68EC")]
	public IEnumerator Sync(string filePath)
	{
		return null;
	}

	[Token(Token = "0x60001B2")]
	[Address(RVA = "0xEA697C", Offset = "0xEA697C", VA = "0xEA697C")]
	public IEnumerator Sync(string filePath, string user)
	{
		return null;
	}

	[Token(Token = "0x60001B3")]
	[Address(RVA = "0xEA6A10", Offset = "0xEA6A10", VA = "0xEA6A10")]
	public IEnumerator Sync(string filePath, string user, string password)
	{
		return null;
	}

	[Token(Token = "0x60001B4")]
	[Address(RVA = "0xEA6A9C", Offset = "0xEA6A9C", VA = "0xEA6A9C")]
	public IEnumerator Sync(string filePath, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60001B5")]
	[Address(RVA = "0xEA6B30", Offset = "0xEA6B30", VA = "0xEA6B30")]
	public IEnumerator Sync(string filePath, string user, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60001B6")]
	[Address(RVA = "0xEA6BD0", Offset = "0xEA6BD0", VA = "0xEA6BD0")]
	public IEnumerator Sync(string filePath, string user, string password, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60001B7")]
	[Address(RVA = "0xEA682C", Offset = "0xEA682C", VA = "0xEA682C")]
	[IteratorStateMachine(typeof(<Sync>d__20))]
	private IEnumerator Sync(ES3Settings settings, string user, string password)
	{
		return null;
	}

	[Token(Token = "0x60001B8")]
	[Address(RVA = "0xEA6C88", Offset = "0xEA6C88", VA = "0xEA6C88")]
	public IEnumerator UploadFile()
	{
		return null;
	}

	[Token(Token = "0x60001B9")]
	[Address(RVA = "0xEA6D60", Offset = "0xEA6D60", VA = "0xEA6D60")]
	public IEnumerator UploadFile(string filePath)
	{
		return null;
	}

	[Token(Token = "0x60001BA")]
	[Address(RVA = "0xEA6E00", Offset = "0xEA6E00", VA = "0xEA6E00")]
	public IEnumerator UploadFile(string filePath, string user)
	{
		return null;
	}

	[Token(Token = "0x60001BB")]
	[Address(RVA = "0xEA6EA4", Offset = "0xEA6EA4", VA = "0xEA6EA4")]
	public IEnumerator UploadFile(string filePath, string user, string password)
	{
		return null;
	}

	[Token(Token = "0x60001BC")]
	[Address(RVA = "0xEA6F3C", Offset = "0xEA6F3C", VA = "0xEA6F3C")]
	public IEnumerator UploadFile(string filePath, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60001BD")]
	[Address(RVA = "0xEA6FE0", Offset = "0xEA6FE0", VA = "0xEA6FE0")]
	public IEnumerator UploadFile(string filePath, string user, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60001BE")]
	[Address(RVA = "0xEA7090", Offset = "0xEA7090", VA = "0xEA7090")]
	public IEnumerator UploadFile(string filePath, string user, string password, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60001BF")]
	[Address(RVA = "0xEA712C", Offset = "0xEA712C", VA = "0xEA712C")]
	public IEnumerator UploadFile(ES3File es3File)
	{
		return null;
	}

	[Token(Token = "0x60001C0")]
	[Address(RVA = "0xEA73C0", Offset = "0xEA73C0", VA = "0xEA73C0")]
	public IEnumerator UploadFile(ES3File es3File, string user)
	{
		return null;
	}

	[Token(Token = "0x60001C1")]
	[Address(RVA = "0xEA747C", Offset = "0xEA747C", VA = "0xEA747C")]
	public IEnumerator UploadFile(ES3File es3File, string user, string password)
	{
		return null;
	}

	[Token(Token = "0x60001C2")]
	[Address(RVA = "0xEA6D18", Offset = "0xEA6D18", VA = "0xEA6D18")]
	public IEnumerator UploadFile(ES3Settings settings, string user, string password)
	{
		return null;
	}

	[Token(Token = "0x60001C3")]
	[Address(RVA = "0xEA7528", Offset = "0xEA7528", VA = "0xEA7528")]
	public IEnumerator UploadFile(byte[] bytes, ES3Settings settings, string user, string password)
	{
		return null;
	}

	[Token(Token = "0x60001C4")]
	[Address(RVA = "0xEA72DC", Offset = "0xEA72DC", VA = "0xEA72DC")]
	[IteratorStateMachine(typeof(<UploadFile>d__33))]
	private IEnumerator UploadFile(byte[] bytes, ES3Settings settings, string user, string password, long fileTimestamp)
	{
		return null;
	}

	[Token(Token = "0x60001C5")]
	[Address(RVA = "0xEA75A8", Offset = "0xEA75A8", VA = "0xEA75A8")]
	public IEnumerator DownloadFile()
	{
		return null;
	}

	[Token(Token = "0x60001C6")]
	[Address(RVA = "0xEA76F4", Offset = "0xEA76F4", VA = "0xEA76F4")]
	public IEnumerator DownloadFile(string filePath)
	{
		return null;
	}

	[Token(Token = "0x60001C7")]
	[Address(RVA = "0xEA7788", Offset = "0xEA7788", VA = "0xEA7788")]
	public IEnumerator DownloadFile(string filePath, string user)
	{
		return null;
	}

	[Token(Token = "0x60001C8")]
	[Address(RVA = "0xEA7820", Offset = "0xEA7820", VA = "0xEA7820")]
	public IEnumerator DownloadFile(string filePath, string user, string password)
	{
		return null;
	}

	[Token(Token = "0x60001C9")]
	[Address(RVA = "0xEA78B0", Offset = "0xEA78B0", VA = "0xEA78B0")]
	public IEnumerator DownloadFile(string filePath, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60001CA")]
	[Address(RVA = "0xEA7948", Offset = "0xEA7948", VA = "0xEA7948")]
	public IEnumerator DownloadFile(string filePath, string user, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60001CB")]
	[Address(RVA = "0xEA79EC", Offset = "0xEA79EC", VA = "0xEA79EC")]
	public IEnumerator DownloadFile(string filePath, string user, string password, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60001CC")]
	[Address(RVA = "0xEA7A80", Offset = "0xEA7A80", VA = "0xEA7A80")]
	public IEnumerator DownloadFile(ES3File es3File)
	{
		return null;
	}

	[Token(Token = "0x60001CD")]
	[Address(RVA = "0xEA7BA8", Offset = "0xEA7BA8", VA = "0xEA7BA8")]
	public IEnumerator DownloadFile(ES3File es3File, string user)
	{
		return null;
	}

	[Token(Token = "0x60001CE")]
	[Address(RVA = "0xEA7C0C", Offset = "0xEA7C0C", VA = "0xEA7C0C")]
	public IEnumerator DownloadFile(ES3File es3File, string user, string password)
	{
		return null;
	}

	[Token(Token = "0x60001CF")]
	[Address(RVA = "0xEA7AE0", Offset = "0xEA7AE0", VA = "0xEA7AE0")]
	[IteratorStateMachine(typeof(<DownloadFile>d__44))]
	private IEnumerator DownloadFile(ES3File es3File, string user, string password, long timestamp)
	{
		return null;
	}

	[Token(Token = "0x60001D0")]
	[Address(RVA = "0xEA762C", Offset = "0xEA762C", VA = "0xEA762C")]
	[IteratorStateMachine(typeof(<DownloadFile>d__45))]
	private IEnumerator DownloadFile(ES3Settings settings, string user, string password, long timestamp)
	{
		return null;
	}

	[Token(Token = "0x60001D1")]
	[Address(RVA = "0xEA7C64", Offset = "0xEA7C64", VA = "0xEA7C64")]
	public IEnumerator DeleteFile()
	{
		return null;
	}

	[Token(Token = "0x60001D2")]
	[Address(RVA = "0xEA7DA4", Offset = "0xEA7DA4", VA = "0xEA7DA4")]
	public IEnumerator DeleteFile(string filePath)
	{
		return null;
	}

	[Token(Token = "0x60001D3")]
	[Address(RVA = "0xEA7E34", Offset = "0xEA7E34", VA = "0xEA7E34")]
	public IEnumerator DeleteFile(string filePath, string user)
	{
		return null;
	}

	[Token(Token = "0x60001D4")]
	[Address(RVA = "0xEA7EC8", Offset = "0xEA7EC8", VA = "0xEA7EC8")]
	public IEnumerator DeleteFile(string filePath, string user, string password)
	{
		return null;
	}

	[Token(Token = "0x60001D5")]
	[Address(RVA = "0xEA7F54", Offset = "0xEA7F54", VA = "0xEA7F54")]
	public IEnumerator DeleteFile(string filePath, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60001D6")]
	[Address(RVA = "0xEA7FE8", Offset = "0xEA7FE8", VA = "0xEA7FE8")]
	public IEnumerator DeleteFile(string filePath, string user, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60001D7")]
	[Address(RVA = "0xEA8088", Offset = "0xEA8088", VA = "0xEA8088")]
	public IEnumerator DeleteFile(string filePath, string user, string password, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60001D8")]
	[Address(RVA = "0xEA7CE4", Offset = "0xEA7CE4", VA = "0xEA7CE4")]
	[IteratorStateMachine(typeof(<DeleteFile>d__53))]
	private IEnumerator DeleteFile(ES3Settings settings, string user, string password)
	{
		return null;
	}

	[Token(Token = "0x60001D9")]
	[Address(RVA = "0xEA8140", Offset = "0xEA8140", VA = "0xEA8140")]
	public IEnumerator RenameFile(string filePath, string newFilePath)
	{
		return null;
	}

	[Token(Token = "0x60001DA")]
	[Address(RVA = "0xEA82C8", Offset = "0xEA82C8", VA = "0xEA82C8")]
	public IEnumerator RenameFile(string filePath, string newFilePath, string user)
	{
		return null;
	}

	[Token(Token = "0x60001DB")]
	[Address(RVA = "0xEA8388", Offset = "0xEA8388", VA = "0xEA8388")]
	public IEnumerator RenameFile(string filePath, string newFilePath, string user, string password)
	{
		return null;
	}

	[Token(Token = "0x60001DC")]
	[Address(RVA = "0xEA8438", Offset = "0xEA8438", VA = "0xEA8438")]
	public IEnumerator RenameFile(string filePath, string newFilePath, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60001DD")]
	[Address(RVA = "0xEA84F8", Offset = "0xEA84F8", VA = "0xEA84F8")]
	public IEnumerator RenameFile(string filePath, string newFilePath, string user, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60001DE")]
	[Address(RVA = "0xEA85BC", Offset = "0xEA85BC", VA = "0xEA85BC")]
	public IEnumerator RenameFile(string filePath, string newFilePath, string user, string password, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60001DF")]
	[Address(RVA = "0xEA81F4", Offset = "0xEA81F4", VA = "0xEA81F4")]
	[IteratorStateMachine(typeof(<RenameFile>d__60))]
	private IEnumerator RenameFile(ES3Settings settings, ES3Settings newSettings, string user, string password)
	{
		return null;
	}

	[Token(Token = "0x60001E0")]
	[Address(RVA = "0xEA86A0", Offset = "0xEA86A0", VA = "0xEA86A0")]
	[IteratorStateMachine(typeof(<DownloadFilenames>d__61))]
	public IEnumerator DownloadFilenames(string user = "", string password = "")
	{
		return null;
	}

	[Token(Token = "0x60001E1")]
	[Address(RVA = "0xEA876C", Offset = "0xEA876C", VA = "0xEA876C")]
	[IteratorStateMachine(typeof(<SearchFilenames>d__62))]
	public IEnumerator SearchFilenames(string searchPattern, string user = "", string password = "")
	{
		return null;
	}

	[Token(Token = "0x60001E2")]
	[Address(RVA = "0xEA8854", Offset = "0xEA8854", VA = "0xEA8854")]
	public IEnumerator DownloadTimestamp()
	{
		return null;
	}

	[Token(Token = "0x60001E3")]
	[Address(RVA = "0xEA8994", Offset = "0xEA8994", VA = "0xEA8994")]
	public IEnumerator DownloadTimestamp(string filePath)
	{
		return null;
	}

	[Token(Token = "0x60001E4")]
	[Address(RVA = "0xEA8A24", Offset = "0xEA8A24", VA = "0xEA8A24")]
	public IEnumerator DownloadTimestamp(string filePath, string user)
	{
		return null;
	}

	[Token(Token = "0x60001E5")]
	[Address(RVA = "0xEA8AB8", Offset = "0xEA8AB8", VA = "0xEA8AB8")]
	public IEnumerator DownloadTimestamp(string filePath, string user, string password)
	{
		return null;
	}

	[Token(Token = "0x60001E6")]
	[Address(RVA = "0xEA8B44", Offset = "0xEA8B44", VA = "0xEA8B44")]
	public IEnumerator DownloadTimestamp(string filePath, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60001E7")]
	[Address(RVA = "0xEA8BD8", Offset = "0xEA8BD8", VA = "0xEA8BD8")]
	public IEnumerator DownloadTimestamp(string filePath, string user, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60001E8")]
	[Address(RVA = "0xEA8C78", Offset = "0xEA8C78", VA = "0xEA8C78")]
	public IEnumerator DownloadTimestamp(string filePath, string user, string password, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60001E9")]
	[Address(RVA = "0xEA88D4", Offset = "0xEA88D4", VA = "0xEA88D4")]
	[IteratorStateMachine(typeof(<DownloadTimestamp>d__70))]
	private IEnumerator DownloadTimestamp(ES3Settings settings, string user, string password)
	{
		return null;
	}

	[Token(Token = "0x60001EA")]
	[Address(RVA = "0xEA71E4", Offset = "0xEA71E4", VA = "0xEA71E4")]
	private long DateTimeToUnixTimestamp(DateTime dt)
	{
		return default(long);
	}

	[Token(Token = "0x60001EB")]
	[Address(RVA = "0xEA8D30", Offset = "0xEA8D30", VA = "0xEA8D30")]
	private long GetFileTimestamp(ES3Settings settings)
	{
		return default(long);
	}

	[Token(Token = "0x60001EC")]
	[Address(RVA = "0xEA8D48", Offset = "0xEA8D48", VA = "0xEA8D48", Slot = "4")]
	protected override void Reset()
	{
	}
}
[Token(Token = "0x200003A")]
public abstract class ES3Writer : IDisposable
{
	[Token(Token = "0x40000CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ES3Settings settings;

	[Token(Token = "0x40000CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected HashSet<string> keysToDelete;

	[Token(Token = "0x40000CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	internal bool writeHeaderAndFooter;

	[Token(Token = "0x40000CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	internal bool overwriteKeys;

	[Token(Token = "0x40000CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	protected int serializationDepth;

	[Token(Token = "0x600022B")]
	internal abstract void WriteNull();

	[Token(Token = "0x600022C")]
	[Address(RVA = "0xEAAFE8", Offset = "0xEAAFE8", VA = "0xEAAFE8", Slot = "6")]
	internal virtual void StartWriteFile()
	{
	}

	[Token(Token = "0x600022D")]
	[Address(RVA = "0xEAAFF8", Offset = "0xEAAFF8", VA = "0xEAAFF8", Slot = "7")]
	internal virtual void EndWriteFile()
	{
	}

	[Token(Token = "0x600022E")]
	[Address(RVA = "0xEAB008", Offset = "0xEAB008", VA = "0xEAB008", Slot = "8")]
	internal virtual void StartWriteObject(string name)
	{
	}

	[Token(Token = "0x600022F")]
	[Address(RVA = "0xEAB018", Offset = "0xEAB018", VA = "0xEAB018", Slot = "9")]
	internal virtual void EndWriteObject(string name)
	{
	}

	[Token(Token = "0x6000230")]
	[Address(RVA = "0xEAB028", Offset = "0xEAB028", VA = "0xEAB028", Slot = "10")]
	internal virtual void StartWriteProperty(string name)
	{
	}

	[Token(Token = "0x6000231")]
	[Address(RVA = "0xEAB0F0", Offset = "0xEAB0F0", VA = "0xEAB0F0", Slot = "11")]
	internal virtual void EndWriteProperty(string name)
	{
	}

	[Token(Token = "0x6000232")]
	[Address(RVA = "0xEAB0F4", Offset = "0xEAB0F4", VA = "0xEAB0F4", Slot = "12")]
	internal virtual void StartWriteCollection()
	{
	}

	[Token(Token = "0x6000233")]
	[Address(RVA = "0xEAB104", Offset = "0xEAB104", VA = "0xEAB104", Slot = "13")]
	internal virtual void EndWriteCollection()
	{
	}

	[Token(Token = "0x6000234")]
	internal abstract void StartWriteCollectionItem(int index);

	[Token(Token = "0x6000235")]
	internal abstract void EndWriteCollectionItem(int index);

	[Token(Token = "0x6000236")]
	internal abstract void StartWriteDictionary();

	[Token(Token = "0x6000237")]
	internal abstract void EndWriteDictionary();

	[Token(Token = "0x6000238")]
	internal abstract void StartWriteDictionaryKey(int index);

	[Token(Token = "0x6000239")]
	internal abstract void EndWriteDictionaryKey(int index);

	[Token(Token = "0x600023A")]
	internal abstract void StartWriteDictionaryValue(int index);

	[Token(Token = "0x600023B")]
	internal abstract void EndWriteDictionaryValue(int index);

	[Token(Token = "0x600023C")]
	public abstract void Dispose();

	[Token(Token = "0x600023D")]
	internal abstract void WriteRawProperty(string name, byte[] bytes);

	[Token(Token = "0x600023E")]
	internal abstract void WritePrimitive(int value);

	[Token(Token = "0x600023F")]
	internal abstract void WritePrimitive(float value);

	[Token(Token = "0x6000240")]
	internal abstract void WritePrimitive(bool value);

	[Token(Token = "0x6000241")]
	internal abstract void WritePrimitive(decimal value);

	[Token(Token = "0x6000242")]
	internal abstract void WritePrimitive(double value);

	[Token(Token = "0x6000243")]
	internal abstract void WritePrimitive(long value);

	[Token(Token = "0x6000244")]
	internal abstract void WritePrimitive(ulong value);

	[Token(Token = "0x6000245")]
	internal abstract void WritePrimitive(uint value);

	[Token(Token = "0x6000246")]
	internal abstract void WritePrimitive(byte value);

	[Token(Token = "0x6000247")]
	internal abstract void WritePrimitive(sbyte value);

	[Token(Token = "0x6000248")]
	internal abstract void WritePrimitive(short value);

	[Token(Token = "0x6000249")]
	internal abstract void WritePrimitive(ushort value);

	[Token(Token = "0x600024A")]
	internal abstract void WritePrimitive(char value);

	[Token(Token = "0x600024B")]
	internal abstract void WritePrimitive(string value);

	[Token(Token = "0x600024C")]
	internal abstract void WritePrimitive(byte[] value);

	[Token(Token = "0x600024D")]
	[Address(RVA = "0xEAB114", Offset = "0xEAB114", VA = "0xEAB114")]
	protected ES3Writer(ES3Settings settings, bool writeHeaderAndFooter, bool overwriteKeys)
	{
	}

	[Token(Token = "0x600024E")]
	[Address(RVA = "0xEAB1E8", Offset = "0xEAB1E8", VA = "0xEAB1E8", Slot = "39")]
	internal virtual void Write(string key, Type type, byte[] value)
	{
	}

	[Token(Token = "0x600024F")]
	public virtual void Write<T>(string key, object value)
	{
	}

	[Token(Token = "0x6000250")]
	[Address(RVA = "0xEAB364", Offset = "0xEAB364", VA = "0xEAB364", Slot = "41")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public virtual void Write(Type type, string key, object value)
	{
	}

	[Token(Token = "0x6000251")]
	[Address(RVA = "0xEAB494", Offset = "0xEAB494", VA = "0xEAB494", Slot = "42")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public virtual void Write(object value, ES3.ReferenceMode memberReferenceMode = ES3.ReferenceMode.ByRef)
	{
	}

	[Token(Token = "0x6000252")]
	[Address(RVA = "0xEAB554", Offset = "0xEAB554", VA = "0xEAB554", Slot = "43")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public virtual void Write(object value, ES3Type type, ES3.ReferenceMode memberReferenceMode = ES3.ReferenceMode.ByRef)
	{
	}

	[Token(Token = "0x6000253")]
	[Address(RVA = "0xEABB4C", Offset = "0xEABB4C", VA = "0xEABB4C", Slot = "44")]
	internal virtual void WriteRef(UnityEngine.Object obj)
	{
	}

	[Token(Token = "0x6000254")]
	[Address(RVA = "0xEABCB4", Offset = "0xEABCB4", VA = "0xEABCB4", Slot = "45")]
	public virtual void WriteProperty(string name, object value)
	{
	}

	[Token(Token = "0x6000255")]
	[Address(RVA = "0xEABCDC", Offset = "0xEABCDC", VA = "0xEABCDC", Slot = "46")]
	public virtual void WriteProperty(string name, object value, ES3.ReferenceMode memberReferenceMode)
	{
	}

	[Token(Token = "0x6000256")]
	public virtual void WriteProperty<T>(string name, object value)
	{
	}

	[Token(Token = "0x6000257")]
	[Address(RVA = "0xEABE0C", Offset = "0xEABE0C", VA = "0xEABE0C", Slot = "48")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public virtual void WriteProperty(string name, object value, ES3Type type)
	{
	}

	[Token(Token = "0x6000258")]
	[Address(RVA = "0xEABE34", Offset = "0xEABE34", VA = "0xEABE34", Slot = "49")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public virtual void WriteProperty(string name, object value, ES3Type type, ES3.ReferenceMode memberReferenceMode)
	{
	}

	[Token(Token = "0x6000259")]
	[Address(RVA = "0xEABEC0", Offset = "0xEABEC0", VA = "0xEABEC0", Slot = "50")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public virtual void WritePropertyByRef(string name, UnityEngine.Object value)
	{
	}

	[Token(Token = "0x600025A")]
	[Address(RVA = "0xEABFCC", Offset = "0xEABFCC", VA = "0xEABFCC")]
	public void WritePrivateProperty(string name, object objectContainingProperty)
	{
	}

	[Token(Token = "0x600025B")]
	[Address(RVA = "0xEAC1D0", Offset = "0xEAC1D0", VA = "0xEAC1D0")]
	public void WritePrivateField(string name, object objectContainingField)
	{
	}

	[Token(Token = "0x600025C")]
	[Address(RVA = "0xEAC3D4", Offset = "0xEAC3D4", VA = "0xEAC3D4")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public void WritePrivateProperty(string name, object objectContainingProperty, ES3Type type)
	{
	}

	[Token(Token = "0x600025D")]
	[Address(RVA = "0xEAC590", Offset = "0xEAC590", VA = "0xEAC590")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public void WritePrivateField(string name, object objectContainingField, ES3Type type)
	{
	}

	[Token(Token = "0x600025E")]
	[Address(RVA = "0xEAC74C", Offset = "0xEAC74C", VA = "0xEAC74C")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public void WritePrivatePropertyByRef(string name, object objectContainingProperty)
	{
	}

	[Token(Token = "0x600025F")]
	[Address(RVA = "0xEAC94C", Offset = "0xEAC94C", VA = "0xEAC94C")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public void WritePrivateFieldByRef(string name, object objectContainingField)
	{
	}

	[Token(Token = "0x6000260")]
	[Address(RVA = "0xEAB2D0", Offset = "0xEAB2D0", VA = "0xEAB2D0")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public void WriteType(Type type)
	{
	}

	[Token(Token = "0x6000261")]
	[Address(RVA = "0xEACB4C", Offset = "0xEACB4C", VA = "0xEACB4C")]
	public static ES3Writer Create(string filePath, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x6000262")]
	[Address(RVA = "0xE9F6E4", Offset = "0xE9F6E4", VA = "0xE9F6E4")]
	public static ES3Writer Create(ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x6000263")]
	[Address(RVA = "0xEA25D0", Offset = "0xEA25D0", VA = "0xEA25D0")]
	internal static ES3Writer Create(ES3Settings settings, bool writeHeaderAndFooter, bool overwriteKeys, bool append)
	{
		return null;
	}

	[Token(Token = "0x6000264")]
	[Address(RVA = "0xE9CD80", Offset = "0xE9CD80", VA = "0xE9CD80")]
	internal static ES3Writer Create(Stream stream, ES3Settings settings, bool writeHeaderAndFooter, bool overwriteKeys)
	{
		return null;
	}

	[Token(Token = "0x6000265")]
	[Address(RVA = "0xEABD60", Offset = "0xEABD60", VA = "0xEABD60")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	protected bool SerializationDepthLimitExceeded()
	{
		return default(bool);
	}

	[Token(Token = "0x6000266")]
	[Address(RVA = "0xEACBC8", Offset = "0xEACBC8", VA = "0xEACBC8", Slot = "51")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public virtual void MarkKeyForDeletion(string key)
	{
	}

	[Token(Token = "0x6000267")]
	[Address(RVA = "0xEACC20", Offset = "0xEACC20", VA = "0xEACC20")]
	protected void Merge()
	{
	}

	[Token(Token = "0x6000268")]
	[Address(RVA = "0xEACD88", Offset = "0xEACD88", VA = "0xEACD88")]
	protected void Merge(ES3Reader reader)
	{
	}

	[Token(Token = "0x6000269")]
	[Address(RVA = "0xEAD0F0", Offset = "0xEAD0F0", VA = "0xEAD0F0", Slot = "52")]
	public virtual void Save()
	{
	}

	[Token(Token = "0x600026A")]
	[Address(RVA = "0xEAD104", Offset = "0xEAD104", VA = "0xEAD104", Slot = "53")]
	public virtual void Save(bool overwriteKeys)
	{
	}
}
[Token(Token = "0x200003B")]
public class ES3XMLWriter
{
	[Token(Token = "0x600026B")]
	[Address(RVA = "0xEAD1C8", Offset = "0xEAD1C8", VA = "0xEAD1C8")]
	public ES3XMLWriter()
	{
	}
}
namespace RootMotion
{
	[Token(Token = "0x200003C")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page3.html")]
	[AddComponentMenu("Scripts/RootMotion/Baker")]
	public abstract class Baker : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200003D")]
		public enum Mode
		{
			[Token(Token = "0x40000DE")]
			AnimationClips,
			[Token(Token = "0x40000DF")]
			AnimationStates,
			[Token(Token = "0x40000E0")]
			PlayableDirector,
			[Token(Token = "0x40000E1")]
			Realtime
		}

		[Token(Token = "0x40000CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("In AnimationClips, AnimationStates or PlayableDirector mode - the frame rate at which the animation clip will be sampled. In Realtime mode - the frame rate at which the pose will be sampled. With the latter, the frame rate is not guaranteed if the player is not able to reach it.")]
		[Range(1f, 90f)]
		public int frameRate;

		[Token(Token = "0x40000D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Maximum allowed error for keyframe reduction.")]
		[Range(0f, 0.1f)]
		public float keyReductionError;

		[Token(Token = "0x40000D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("AnimationClips mode can be used to bake a batch of AnimationClips directly without the need of setting up an AnimatorController. AnimationStates mode is useful for when you need to set up a more complex rig with layers and AvatarMasks in Mecanim. PlayableDirector mode bakes a Timeline. Realtime mode is for continuous baking of gameplay, ragdoll phsysics or PuppetMaster dynamics.")]
		public Mode mode;

		[Token(Token = "0x40000D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("AnimationClips to bake.")]
		public AnimationClip[] animationClips;

		[Token(Token = "0x40000D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The name of the AnimationStates to bake (must be on the base layer) in the Animator above (Right-click on this component header and select 'Find Animation States' to have Baker fill those in automatically, required that state names match with the names of the clips used in them).")]
		public string[] animationStates;

		[Token(Token = "0x40000D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Sets the baked animation clip to loop time and matches the last frame keys with the first. Note that when overwriting a previously baked clip, AnimationClipSettings will be copied from the existing clip.")]
		public bool loop;

		[Token(Token = "0x40000D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The folder to save the baked AnimationClips to.")]
		public string saveToFolder;

		[Token(Token = "0x40000D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("String that will be added to each clip or animation state name for the saved clip. For example if your animation state/clip names were 'Idle' and 'Walk', then with '_Baked' as Append Name, the Baker will create 'Idle_Baked' and 'Walk_Baked' animation clips.")]
		public string appendName;

		[Token(Token = "0x40000D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Name of the created AnimationClip file.")]
		public string saveName;

		[Token(Token = "0x40000DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		[HideInInspector]
		public Animator animator;

		[Token(Token = "0x40000DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		[HideInInspector]
		public PlayableDirector director;

		[Token(Token = "0x17000039")]
		public bool isBaking
		{
			[Token(Token = "0x6000270")]
			[Address(RVA = "0xEAD2E0", Offset = "0xEAD2E0", VA = "0xEAD2E0")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000271")]
			[Address(RVA = "0xEAD2E8", Offset = "0xEAD2E8", VA = "0xEAD2E8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700003A")]
		public float bakingProgress
		{
			[Token(Token = "0x6000272")]
			[Address(RVA = "0xEAD2F4", Offset = "0xEAD2F4", VA = "0xEAD2F4")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000273")]
			[Address(RVA = "0xEAD2FC", Offset = "0xEAD2FC", VA = "0xEAD2FC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700003B")]
		protected float clipLength
		{
			[Token(Token = "0x6000279")]
			[Address(RVA = "0xEAD304", Offset = "0xEAD304", VA = "0xEAD304")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600027A")]
			[Address(RVA = "0xEAD30C", Offset = "0xEAD30C", VA = "0xEAD30C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x600026C")]
		[Address(RVA = "0xEAD1D0", Offset = "0xEAD1D0", VA = "0xEAD1D0")]
		[ContextMenu("User Manual")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x600026D")]
		[Address(RVA = "0xEAD214", Offset = "0xEAD214", VA = "0xEAD214")]
		[ContextMenu("Scrpt Reference")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x600026E")]
		[Address(RVA = "0xEAD258", Offset = "0xEAD258", VA = "0xEAD258")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x600026F")]
		[Address(RVA = "0xEAD29C", Offset = "0xEAD29C", VA = "0xEAD29C")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000274")]
		protected abstract Transform GetCharacterRoot();

		[Token(Token = "0x6000275")]
		protected abstract void OnStartBaking();

		[Token(Token = "0x6000276")]
		protected abstract void OnSetLoopFrame(float time);

		[Token(Token = "0x6000277")]
		protected abstract void OnSetCurves(ref AnimationClip clip);

		[Token(Token = "0x6000278")]
		protected abstract void OnSetKeyframes(float time, bool lastFrame);

		[Token(Token = "0x600027B")]
		[Address(RVA = "0xEAD314", Offset = "0xEAD314", VA = "0xEAD314")]
		public void BakeClip()
		{
		}

		[Token(Token = "0x600027C")]
		[Address(RVA = "0xEAD318", Offset = "0xEAD318", VA = "0xEAD318")]
		public void StartBaking()
		{
		}

		[Token(Token = "0x600027D")]
		[Address(RVA = "0xEAD31C", Offset = "0xEAD31C", VA = "0xEAD31C")]
		public void StopBaking()
		{
		}

		[Token(Token = "0x600027E")]
		[Address(RVA = "0xEAD320", Offset = "0xEAD320", VA = "0xEAD320")]
		protected Baker()
		{
		}
	}
	[Token(Token = "0x200003E")]
	public class GenericBaker : Baker
	{
		[Token(Token = "0x40000E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[Tooltip("If true, produced AnimationClips will be marked as Legacy and usable with the Legacy animation system.")]
		public bool markAsLegacy;

		[Token(Token = "0x40000E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Root Transform of the hierarchy to bake.")]
		public Transform root;

		[Token(Token = "0x40000E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Root Node used for root motion.")]
		public Transform rootNode;

		[Token(Token = "0x40000E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("List of Transforms to ignore, rotation curves will not be baked for these Transforms.")]
		public Transform[] ignoreList;

		[Token(Token = "0x40000E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("LocalPosition curves will be baked for these Transforms only. If you are baking a character, the pelvis bone should be added to this array.")]
		public Transform[] bakePositionList;

		[Token(Token = "0x40000E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private BakerTransform[] children;

		[Token(Token = "0x40000E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private BakerTransform rootChild;

		[Token(Token = "0x40000E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private int rootChildIndex;

		[Token(Token = "0x600027F")]
		[Address(RVA = "0xEAD448", Offset = "0xEAD448", VA = "0xEAD448")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000280")]
		[Address(RVA = "0xEAD88C", Offset = "0xEAD88C", VA = "0xEAD88C", Slot = "4")]
		protected override Transform GetCharacterRoot()
		{
			return null;
		}

		[Token(Token = "0x6000281")]
		[Address(RVA = "0xEAD894", Offset = "0xEAD894", VA = "0xEAD894", Slot = "5")]
		protected override void OnStartBaking()
		{
		}

		[Token(Token = "0x6000282")]
		[Address(RVA = "0xEADAD0", Offset = "0xEADAD0", VA = "0xEADAD0", Slot = "6")]
		protected override void OnSetLoopFrame(float time)
		{
		}

		[Token(Token = "0x6000283")]
		[Address(RVA = "0xEADD34", Offset = "0xEADD34", VA = "0xEADD34", Slot = "7")]
		protected override void OnSetCurves(ref AnimationClip clip)
		{
		}

		[Token(Token = "0x6000284")]
		[Address(RVA = "0xEAE04C", Offset = "0xEAE04C", VA = "0xEAE04C", Slot = "8")]
		protected override void OnSetKeyframes(float time, bool lastFrame)
		{
		}

		[Token(Token = "0x6000285")]
		[Address(RVA = "0xEAD674", Offset = "0xEAD674", VA = "0xEAD674")]
		private bool IsIgnored(Transform t)
		{
			return default(bool);
		}

		[Token(Token = "0x6000286")]
		[Address(RVA = "0xEAD72C", Offset = "0xEAD72C", VA = "0xEAD72C")]
		private bool BakePosition(Transform t)
		{
			return default(bool);
		}

		[Token(Token = "0x6000287")]
		[Address(RVA = "0xEAE2AC", Offset = "0xEAE2AC", VA = "0xEAE2AC")]
		public GenericBaker()
		{
		}
	}
	[Token(Token = "0x200003F")]
	public class TQ
	{
		[Token(Token = "0x40000EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 t;

		[Token(Token = "0x40000EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Quaternion q;

		[Token(Token = "0x6000288")]
		[Address(RVA = "0xEAE314", Offset = "0xEAE314", VA = "0xEAE314")]
		public TQ(Vector3 translation, Quaternion rotation)
		{
		}
	}
	[Token(Token = "0x2000040")]
	public class AvatarUtility
	{
		[Token(Token = "0x6000289")]
		[Address(RVA = "0xEAE378", Offset = "0xEAE378", VA = "0xEAE378")]
		public static Quaternion GetPostRotation(Avatar avatar, AvatarIKGoal avatarIKGoal)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600028A")]
		[Address(RVA = "0xEAE5D4", Offset = "0xEAE5D4", VA = "0xEAE5D4")]
		public static TQ GetIKGoalTQ(Avatar avatar, float humanScale, AvatarIKGoal avatarIKGoal, TQ bodyPositionRotation, TQ boneTQ)
		{
			return null;
		}

		[Token(Token = "0x600028B")]
		[Address(RVA = "0xEAE5B4", Offset = "0xEAE5B4", VA = "0xEAE5B4")]
		public static HumanBodyBones HumanIDFromAvatarIKGoal(AvatarIKGoal avatarIKGoal)
		{
			return default(HumanBodyBones);
		}

		[Token(Token = "0x600028C")]
		[Address(RVA = "0xEAEC44", Offset = "0xEAEC44", VA = "0xEAEC44")]
		public AvatarUtility()
		{
		}
	}
	[Token(Token = "0x2000041")]
	public static class BakerUtilities
	{
		[Token(Token = "0x600028D")]
		[Address(RVA = "0xEAEC4C", Offset = "0xEAEC4C", VA = "0xEAEC4C")]
		public static void ReduceKeyframes(AnimationCurve curve, float maxError)
		{
		}

		[Token(Token = "0x600028E")]
		[Address(RVA = "0xEAEC84", Offset = "0xEAEC84", VA = "0xEAEC84")]
		public static Keyframe[] GetReducedKeyframes(AnimationCurve curve, float maxError)
		{
			return null;
		}

		[Token(Token = "0x600028F")]
		[Address(RVA = "0xEAF048", Offset = "0xEAF048", VA = "0xEAF048")]
		public static void SetLoopFrame(float time, AnimationCurve curve)
		{
		}

		[Token(Token = "0x6000290")]
		[Address(RVA = "0xEAF228", Offset = "0xEAF228", VA = "0xEAF228")]
		public static void SetTangentMode(AnimationCurve curve)
		{
		}

		[Token(Token = "0x6000291")]
		[Address(RVA = "0xEAF22C", Offset = "0xEAF22C", VA = "0xEAF22C")]
		public static Quaternion EnsureQuaternionContinuity(Quaternion lastQ, Quaternion q)
		{
			return default(Quaternion);
		}
	}
	[Serializable]
	[Token(Token = "0x2000042")]
	public class BakerHumanoidQT
	{
		[Token(Token = "0x40000EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Transform transform;

		[Token(Token = "0x40000ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string Qx;

		[Token(Token = "0x40000EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private string Qy;

		[Token(Token = "0x40000EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string Qz;

		[Token(Token = "0x40000F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private string Qw;

		[Token(Token = "0x40000F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private string Tx;

		[Token(Token = "0x40000F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private string Ty;

		[Token(Token = "0x40000F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private string Tz;

		[Token(Token = "0x40000F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AnimationCurve rotX;

		[Token(Token = "0x40000F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public AnimationCurve rotY;

		[Token(Token = "0x40000F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public AnimationCurve rotZ;

		[Token(Token = "0x40000F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public AnimationCurve rotW;

		[Token(Token = "0x40000F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public AnimationCurve posX;

		[Token(Token = "0x40000F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public AnimationCurve posY;

		[Token(Token = "0x40000FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public AnimationCurve posZ;

		[Token(Token = "0x40000FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private AvatarIKGoal goal;

		[Token(Token = "0x40000FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private Quaternion lastQ;

		[Token(Token = "0x40000FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private bool lastQSet;

		[Token(Token = "0x6000292")]
		[Address(RVA = "0xEAF3C0", Offset = "0xEAF3C0", VA = "0xEAF3C0")]
		public BakerHumanoidQT(string name)
		{
		}

		[Token(Token = "0x6000293")]
		[Address(RVA = "0xEAF724", Offset = "0xEAF724", VA = "0xEAF724")]
		public BakerHumanoidQT(Transform transform, AvatarIKGoal goal, string name)
		{
		}

		[Token(Token = "0x6000294")]
		[Address(RVA = "0xEAF58C", Offset = "0xEAF58C", VA = "0xEAF58C")]
		public void Reset()
		{
		}

		[Token(Token = "0x6000295")]
		[Address(RVA = "0xEAF90C", Offset = "0xEAF90C", VA = "0xEAF90C")]
		public void SetIKKeyframes(float time, Avatar avatar, float humanScale, Vector3 bodyPosition, Quaternion bodyRotation)
		{
		}

		[Token(Token = "0x6000296")]
		[Address(RVA = "0xEAFB40", Offset = "0xEAFB40", VA = "0xEAFB40")]
		public void SetKeyframes(float time, Vector3 pos, Quaternion rot)
		{
		}

		[Token(Token = "0x6000297")]
		[Address(RVA = "0xEAFC30", Offset = "0xEAFC30", VA = "0xEAFC30")]
		public void MoveLastKeyframes(float time)
		{
		}

		[Token(Token = "0x6000298")]
		[Address(RVA = "0xEAFD14", Offset = "0xEAFD14", VA = "0xEAFD14")]
		public void SetLoopFrame(float time)
		{
		}

		[Token(Token = "0x6000299")]
		[Address(RVA = "0xEAFC98", Offset = "0xEAFC98", VA = "0xEAFC98")]
		private void MoveLastKeyframe(float time, AnimationCurve curve)
		{
		}

		[Token(Token = "0x600029A")]
		[Address(RVA = "0xEAFD7C", Offset = "0xEAFD7C", VA = "0xEAFD7C")]
		public void MultiplyLength(AnimationCurve curve, float mlp)
		{
		}

		[Token(Token = "0x600029B")]
		[Address(RVA = "0xEAFE24", Offset = "0xEAFE24", VA = "0xEAFE24")]
		public void SetCurves(ref AnimationClip clip, float maxError, float lengthMlp)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000043")]
	public class BakerMuscle
	{
		[Token(Token = "0x40000FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AnimationCurve curve;

		[Token(Token = "0x40000FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int muscleIndex;

		[Token(Token = "0x4000100")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private string propertyName;

		[Token(Token = "0x600029C")]
		[Address(RVA = "0xEB0110", Offset = "0xEB0110", VA = "0xEB0110")]
		public BakerMuscle(int muscleIndex)
		{
		}

		[Token(Token = "0x600029D")]
		[Address(RVA = "0xEB0180", Offset = "0xEB0180", VA = "0xEB0180")]
		private string MuscleNameToPropertyName(string n)
		{
			return null;
		}

		[Token(Token = "0x600029E")]
		[Address(RVA = "0xEB0C1C", Offset = "0xEB0C1C", VA = "0xEB0C1C")]
		public void MultiplyLength(AnimationCurve curve, float mlp)
		{
		}

		[Token(Token = "0x600029F")]
		[Address(RVA = "0xEB0CC4", Offset = "0xEB0CC4", VA = "0xEB0CC4")]
		public void SetCurves(ref AnimationClip clip, float maxError, float lengthMlp)
		{
		}

		[Token(Token = "0x60002A0")]
		[Address(RVA = "0xEB0BB4", Offset = "0xEB0BB4", VA = "0xEB0BB4")]
		public void Reset()
		{
		}

		[Token(Token = "0x60002A1")]
		[Address(RVA = "0xEB0DB8", Offset = "0xEB0DB8", VA = "0xEB0DB8")]
		public void SetKeyframe(float time, float[] muscles)
		{
		}

		[Token(Token = "0x60002A2")]
		[Address(RVA = "0xEB0DF4", Offset = "0xEB0DF4", VA = "0xEB0DF4")]
		public void SetLoopFrame(float time)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000044")]
	public class BakerTransform
	{
		[Token(Token = "0x4000101")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform transform;

		[Token(Token = "0x4000102")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AnimationCurve posX;

		[Token(Token = "0x4000103")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AnimationCurve posY;

		[Token(Token = "0x4000104")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimationCurve posZ;

		[Token(Token = "0x4000105")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimationCurve rotX;

		[Token(Token = "0x4000106")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AnimationCurve rotY;

		[Token(Token = "0x4000107")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AnimationCurve rotZ;

		[Token(Token = "0x4000108")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public AnimationCurve rotW;

		[Token(Token = "0x4000109")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private string relativePath;

		[Token(Token = "0x400010A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool recordPosition;

		[Token(Token = "0x400010B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Vector3 relativePosition;

		[Token(Token = "0x400010C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool isRootNode;

		[Token(Token = "0x400010D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Quaternion relativeRotation;

		[Token(Token = "0x60002A3")]
		[Address(RVA = "0xEAD7E4", Offset = "0xEAD7E4", VA = "0xEAD7E4")]
		public BakerTransform(Transform transform, Transform root, bool recordPosition, bool isRootNode)
		{
		}

		[Token(Token = "0x60002A4")]
		[Address(RVA = "0xEADABC", Offset = "0xEADABC", VA = "0xEADABC")]
		public void SetRelativeSpace(Vector3 position, Quaternion rotation)
		{
		}

		[Token(Token = "0x60002A5")]
		[Address(RVA = "0xEADD98", Offset = "0xEADD98", VA = "0xEADD98")]
		public void SetCurves(ref AnimationClip clip)
		{
		}

		[Token(Token = "0x60002A6")]
		[Address(RVA = "0xEB0DFC", Offset = "0xEB0DFC", VA = "0xEB0DFC")]
		private void AddRootMotionCurves(ref AnimationClip clip)
		{
		}

		[Token(Token = "0x60002A7")]
		[Address(RVA = "0xEAD964", Offset = "0xEAD964", VA = "0xEAD964")]
		public void Reset()
		{
		}

		[Token(Token = "0x60002A8")]
		[Address(RVA = "0xEB1084", Offset = "0xEB1084", VA = "0xEB1084")]
		public void ReduceKeyframes(float maxError)
		{
		}

		[Token(Token = "0x60002A9")]
		[Address(RVA = "0xEAE0B8", Offset = "0xEAE0B8", VA = "0xEAE0B8")]
		public void SetKeyframes(float time)
		{
		}

		[Token(Token = "0x60002AA")]
		[Address(RVA = "0xEADB3C", Offset = "0xEADB3C", VA = "0xEADB3C")]
		public void AddLoopFrame(float time)
		{
		}
	}
	[Token(Token = "0x2000045")]
	public class HumanoidBaker : Baker
	{
		[Token(Token = "0x400010E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[Tooltip("Should the hand IK curves be added to the animation? Disable this if the original hand positions are not important when using the clip on another character via Humanoid retargeting.")]
		public bool bakeHandIK;

		[Token(Token = "0x400010F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Max keyframe reduction error for the Root.Q/T, LeftFoot IK and RightFoot IK channels. Having a larger error value for 'Key Reduction Error' and a smaller one for this enables you to optimize clip data size without the floating feet effect by enabling 'Foot IK' in the Animator.")]
		[Range(0f, 0.1f)]
		public float IKKeyReductionError;

		[Token(Token = "0x4000110")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[Tooltip("Frame rate divider for the muscle curves. If you have 'Frame Rate' set to 30, and this value set to 3, the muscle curves will be baked at 10 fps. Only the Root Q/T and Hand and Foot IK curves will be baked at 30. This enables you to optimize clip data size without the floating feet effect by enabling 'Foot IK' in the Animator.")]
		[Range(1f, 9f)]
		public int muscleFrameRateDiv;

		[Token(Token = "0x4000111")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private BakerMuscle[] bakerMuscles;

		[Token(Token = "0x4000112")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private BakerHumanoidQT rootQT;

		[Token(Token = "0x4000113")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private BakerHumanoidQT leftFootQT;

		[Token(Token = "0x4000114")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private BakerHumanoidQT rightFootQT;

		[Token(Token = "0x4000115")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private BakerHumanoidQT leftHandQT;

		[Token(Token = "0x4000116")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private BakerHumanoidQT rightHandQT;

		[Token(Token = "0x4000117")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private float[] muscles;

		[Token(Token = "0x4000118")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private HumanPose pose;

		[Token(Token = "0x4000119")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private HumanPoseHandler handler;

		[Token(Token = "0x400011A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Vector3 bodyPosition;

		[Token(Token = "0x400011B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private Quaternion bodyRotation;

		[Token(Token = "0x400011C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		private int mN;

		[Token(Token = "0x400011D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Quaternion lastBodyRotation;

		[Token(Token = "0x60002AB")]
		[Address(RVA = "0xEB10EC", Offset = "0xEB10EC", VA = "0xEB10EC")]
		private void Awake()
		{
		}

		[Token(Token = "0x60002AC")]
		[Address(RVA = "0xEB164C", Offset = "0xEB164C", VA = "0xEB164C", Slot = "4")]
		protected override Transform GetCharacterRoot()
		{
			return null;
		}

		[Token(Token = "0x60002AD")]
		[Address(RVA = "0xEB1668", Offset = "0xEB1668", VA = "0xEB1668", Slot = "5")]
		protected override void OnStartBaking()
		{
		}

		[Token(Token = "0x60002AE")]
		[Address(RVA = "0xEB1744", Offset = "0xEB1744", VA = "0xEB1744", Slot = "6")]
		protected override void OnSetLoopFrame(float time)
		{
		}

		[Token(Token = "0x60002AF")]
		[Address(RVA = "0xEB1800", Offset = "0xEB1800", VA = "0xEB1800", Slot = "7")]
		protected override void OnSetCurves(ref AnimationClip clip)
		{
		}

		[Token(Token = "0x60002B0")]
		[Address(RVA = "0xEB19A0", Offset = "0xEB19A0", VA = "0xEB19A0", Slot = "8")]
		protected override void OnSetKeyframes(float time, bool lastFrame)
		{
		}

		[Token(Token = "0x60002B1")]
		[Address(RVA = "0xEB1C44", Offset = "0xEB1C44", VA = "0xEB1C44")]
		private void UpdateHumanPose()
		{
		}

		[Token(Token = "0x60002B2")]
		[Address(RVA = "0xEB1D1C", Offset = "0xEB1D1C", VA = "0xEB1D1C")]
		public HumanoidBaker()
		{
		}
	}
	[Token(Token = "0x2000046")]
	public class CameraController : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000047")]
		public enum UpdateMode
		{
			[Token(Token = "0x4000144")]
			Update,
			[Token(Token = "0x4000145")]
			FixedUpdate,
			[Token(Token = "0x4000146")]
			LateUpdate,
			[Token(Token = "0x4000147")]
			FixedLateUpdate
		}

		[Token(Token = "0x400011E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x400011F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform rotationSpace;

		[Token(Token = "0x4000120")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UpdateMode updateMode;

		[Token(Token = "0x4000121")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool lockCursor;

		[Token(Token = "0x4000122")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		[Header("Position")]
		public bool smoothFollow;

		[Token(Token = "0x4000123")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 offset;

		[Token(Token = "0x4000124")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float followSpeed;

		[Token(Token = "0x4000125")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Rotation")]
		public float rotationSensitivity;

		[Token(Token = "0x4000126")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float yMinLimit;

		[Token(Token = "0x4000127")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float yMaxLimit;

		[Token(Token = "0x4000128")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool rotateAlways;

		[Token(Token = "0x4000129")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
		public bool rotateOnLeftButton;

		[Token(Token = "0x400012A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4E")]
		public bool rotateOnRightButton;

		[Token(Token = "0x400012B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4F")]
		public bool rotateOnMiddleButton;

		[Token(Token = "0x400012C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Distance")]
		public float distance;

		[Token(Token = "0x400012D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float minDistance;

		[Token(Token = "0x400012E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float maxDistance;

		[Token(Token = "0x400012F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float zoomSpeed;

		[Token(Token = "0x4000130")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float zoomSensitivity;

		[Token(Token = "0x4000131")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Header("Blocking")]
		public LayerMask blockingLayers;

		[Token(Token = "0x4000132")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float blockingRadius;

		[Token(Token = "0x4000133")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float blockingSmoothTime;

		[Token(Token = "0x4000134")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Range(0f, 1f)]
		public float blockedOffset;

		[Token(Token = "0x4000138")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector3 targetDistance;

		[Token(Token = "0x4000139")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private Vector3 position;

		[Token(Token = "0x400013A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Quaternion rotation;

		[Token(Token = "0x400013B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Vector3 smoothPosition;

		[Token(Token = "0x400013C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Camera cam;

		[Token(Token = "0x400013D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private bool fixedFrame;

		[Token(Token = "0x400013E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private float fixedDeltaTime;

		[Token(Token = "0x400013F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Quaternion r;

		[Token(Token = "0x4000140")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Vector3 lastUp;

		[Token(Token = "0x4000141")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private float blockedDistance;

		[Token(Token = "0x4000142")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private float blockedDistanceV;

		[Token(Token = "0x1700003C")]
		public float x
		{
			[Token(Token = "0x60002B3")]
			[Address(RVA = "0xEB2DCC", Offset = "0xEB2DCC", VA = "0xEB2DCC")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60002B4")]
			[Address(RVA = "0xEB2DD4", Offset = "0xEB2DD4", VA = "0xEB2DD4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700003D")]
		public float y
		{
			[Token(Token = "0x60002B5")]
			[Address(RVA = "0xEB2DDC", Offset = "0xEB2DDC", VA = "0xEB2DDC")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60002B6")]
			[Address(RVA = "0xEB2DE4", Offset = "0xEB2DE4", VA = "0xEB2DE4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700003E")]
		public float distanceTarget
		{
			[Token(Token = "0x60002B7")]
			[Address(RVA = "0xEB2DEC", Offset = "0xEB2DEC", VA = "0xEB2DEC")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60002B8")]
			[Address(RVA = "0xEB2DF4", Offset = "0xEB2DF4", VA = "0xEB2DF4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700003F")]
		private float zoomAdd
		{
			[Token(Token = "0x60002C2")]
			[Address(RVA = "0xEB3814", Offset = "0xEB3814", VA = "0xEB3814")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x60002B9")]
		[Address(RVA = "0xEB2DFC", Offset = "0xEB2DFC", VA = "0xEB2DFC")]
		public void SetAngles(Quaternion rotation)
		{
		}

		[Token(Token = "0x60002BA")]
		[Address(RVA = "0xEB2E34", Offset = "0xEB2E34", VA = "0xEB2E34")]
		public void SetAngles(float yaw, float pitch)
		{
		}

		[Token(Token = "0x60002BB")]
		[Address(RVA = "0xEB2E3C", Offset = "0xEB2E3C", VA = "0xEB2E3C", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x60002BC")]
		[Address(RVA = "0xEB2F74", Offset = "0xEB2F74", VA = "0xEB2F74", Slot = "5")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x60002BD")]
		[Address(RVA = "0xEB2FBC", Offset = "0xEB2FBC", VA = "0xEB2FBC", Slot = "6")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x60002BE")]
		[Address(RVA = "0xEB3014", Offset = "0xEB3014", VA = "0xEB3014", Slot = "7")]
		protected virtual void LateUpdate()
		{
		}

		[Token(Token = "0x60002BF")]
		[Address(RVA = "0xEB306C", Offset = "0xEB306C", VA = "0xEB306C")]
		public void UpdateInput()
		{
		}

		[Token(Token = "0x60002C0")]
		[Address(RVA = "0xEB2FA0", Offset = "0xEB2FA0", VA = "0xEB2FA0")]
		public void UpdateTransform()
		{
		}

		[Token(Token = "0x60002C1")]
		[Address(RVA = "0xEB31F8", Offset = "0xEB31F8", VA = "0xEB31F8")]
		public void UpdateTransform(float deltaTime)
		{
		}

		[Token(Token = "0x60002C3")]
		[Address(RVA = "0xEB37D8", Offset = "0xEB37D8", VA = "0xEB37D8")]
		private float ClampAngle(float angle, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x60002C4")]
		[Address(RVA = "0xEB3880", Offset = "0xEB3880", VA = "0xEB3880")]
		public CameraController()
		{
		}
	}
	[Token(Token = "0x2000048")]
	public class CameraControllerFPS : MonoBehaviour
	{
		[Token(Token = "0x4000148")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float rotationSensitivity;

		[Token(Token = "0x4000149")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float yMinLimit;

		[Token(Token = "0x400014A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float yMaxLimit;

		[Token(Token = "0x400014B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float moveSpeed;

		[Token(Token = "0x400014C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float x;

		[Token(Token = "0x400014D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float y;

		[Token(Token = "0x60002C5")]
		[Address(RVA = "0xEB3940", Offset = "0xEB3940", VA = "0xEB3940")]
		private void Awake()
		{
		}

		[Token(Token = "0x60002C6")]
		[Address(RVA = "0xEB396C", Offset = "0xEB396C", VA = "0xEB396C")]
		public void LateUpdate()
		{
		}

		[Token(Token = "0x60002C7")]
		[Address(RVA = "0xEB3FB0", Offset = "0xEB3FB0", VA = "0xEB3FB0")]
		private float ClampAngle(float angle, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x60002C8")]
		[Address(RVA = "0xEB3FEC", Offset = "0xEB3FEC", VA = "0xEB3FEC")]
		public CameraControllerFPS()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000049")]
	public enum Axis
	{
		[Token(Token = "0x400014F")]
		X,
		[Token(Token = "0x4000150")]
		Y,
		[Token(Token = "0x4000151")]
		Z
	}
	[Token(Token = "0x200004A")]
	public class AxisTools
	{
		[Token(Token = "0x60002C9")]
		[Address(RVA = "0xEB4000", Offset = "0xEB4000", VA = "0xEB4000")]
		public static Vector3 ToVector3(Axis axis)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60002CA")]
		[Address(RVA = "0xEB40E0", Offset = "0xEB40E0", VA = "0xEB40E0")]
		public static Axis ToAxis(Vector3 v)
		{
			return default(Axis);
		}

		[Token(Token = "0x60002CB")]
		[Address(RVA = "0xEB4118", Offset = "0xEB4118", VA = "0xEB4118")]
		public static Axis GetAxisToPoint(Transform t, Vector3 worldPosition)
		{
			return default(Axis);
		}

		[Token(Token = "0x60002CC")]
		[Address(RVA = "0xEB4260", Offset = "0xEB4260", VA = "0xEB4260")]
		public static Axis GetAxisToDirection(Transform t, Vector3 direction)
		{
			return default(Axis);
		}

		[Token(Token = "0x60002CD")]
		[Address(RVA = "0xEB4214", Offset = "0xEB4214", VA = "0xEB4214")]
		public static Vector3 GetAxisVectorToPoint(Transform t, Vector3 worldPosition)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60002CE")]
		[Address(RVA = "0xEB435C", Offset = "0xEB435C", VA = "0xEB435C")]
		public static Vector3 GetAxisVectorToDirection(Transform t, Vector3 direction)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60002CF")]
		[Address(RVA = "0xEB43A0", Offset = "0xEB43A0", VA = "0xEB43A0")]
		public static Vector3 GetAxisVectorToDirection(Quaternion r, Vector3 direction)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60002D0")]
		[Address(RVA = "0xEB482C", Offset = "0xEB482C", VA = "0xEB482C")]
		public AxisTools()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200004B")]
	public class BipedLimbOrientations
	{
		[Serializable]
		[Token(Token = "0x200004C")]
		public class LimbOrientation
		{
			[Token(Token = "0x4000156")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3 upperBoneForwardAxis;

			[Token(Token = "0x4000157")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Vector3 lowerBoneForwardAxis;

			[Token(Token = "0x4000158")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 lastBoneLeftAxis;

			[Token(Token = "0x60002D4")]
			[Address(RVA = "0xEB4B60", Offset = "0xEB4B60", VA = "0xEB4B60")]
			public LimbOrientation(Vector3 upperBoneForwardAxis, Vector3 lowerBoneForwardAxis, Vector3 lastBoneLeftAxis)
			{
			}
		}

		[Token(Token = "0x4000152")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public LimbOrientation leftArm;

		[Token(Token = "0x4000153")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LimbOrientation rightArm;

		[Token(Token = "0x4000154")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LimbOrientation leftLeg;

		[Token(Token = "0x4000155")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LimbOrientation rightLeg;

		[Token(Token = "0x17000040")]
		public static BipedLimbOrientations UMA
		{
			[Token(Token = "0x60002D2")]
			[Address(RVA = "0xEB48A8", Offset = "0xEB48A8", VA = "0xEB48A8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000041")]
		public static BipedLimbOrientations MaxBiped
		{
			[Token(Token = "0x60002D3")]
			[Address(RVA = "0xEB4BD4", Offset = "0xEB4BD4", VA = "0xEB4BD4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60002D1")]
		[Address(RVA = "0xEB4834", Offset = "0xEB4834", VA = "0xEB4834")]
		public BipedLimbOrientations(LimbOrientation leftArm, LimbOrientation rightArm, LimbOrientation leftLeg, LimbOrientation rightLeg)
		{
		}
	}
	[Token(Token = "0x200004D")]
	public static class BipedNaming
	{
		[Serializable]
		[Token(Token = "0x200004E")]
		public enum BoneType
		{
			[Token(Token = "0x400016C")]
			Unassigned,
			[Token(Token = "0x400016D")]
			Spine,
			[Token(Token = "0x400016E")]
			Head,
			[Token(Token = "0x400016F")]
			Arm,
			[Token(Token = "0x4000170")]
			Leg,
			[Token(Token = "0x4000171")]
			Tail,
			[Token(Token = "0x4000172")]
			Eye
		}

		[Serializable]
		[Token(Token = "0x200004F")]
		public enum BoneSide
		{
			[Token(Token = "0x4000174")]
			Center,
			[Token(Token = "0x4000175")]
			Left,
			[Token(Token = "0x4000176")]
			Right
		}

		[Token(Token = "0x4000159")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static string[] typeLeft;

		[Token(Token = "0x400015A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static string[] typeRight;

		[Token(Token = "0x400015B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static string[] typeSpine;

		[Token(Token = "0x400015C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static string[] typeHead;

		[Token(Token = "0x400015D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static string[] typeArm;

		[Token(Token = "0x400015E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static string[] typeLeg;

		[Token(Token = "0x400015F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static string[] typeTail;

		[Token(Token = "0x4000160")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static string[] typeEye;

		[Token(Token = "0x4000161")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public static string[] typeExclude;

		[Token(Token = "0x4000162")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public static string[] typeExcludeSpine;

		[Token(Token = "0x4000163")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public static string[] typeExcludeHead;

		[Token(Token = "0x4000164")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public static string[] typeExcludeArm;

		[Token(Token = "0x4000165")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public static string[] typeExcludeLeg;

		[Token(Token = "0x4000166")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public static string[] typeExcludeTail;

		[Token(Token = "0x4000167")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public static string[] typeExcludeEye;

		[Token(Token = "0x4000168")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public static string[] pelvis;

		[Token(Token = "0x4000169")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public static string[] hand;

		[Token(Token = "0x400016A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public static string[] foot;

		[Token(Token = "0x60002D5")]
		[Address(RVA = "0xEB4E8C", Offset = "0xEB4E8C", VA = "0xEB4E8C")]
		public static Transform[] GetBonesOfType(BoneType boneType, Transform[] bones)
		{
			return null;
		}

		[Token(Token = "0x60002D6")]
		[Address(RVA = "0xEB5158", Offset = "0xEB5158", VA = "0xEB5158")]
		public static Transform[] GetBonesOfSide(BoneSide boneSide, Transform[] bones)
		{
			return null;
		}

		[Token(Token = "0x60002D7")]
		[Address(RVA = "0xEB5394", Offset = "0xEB5394", VA = "0xEB5394")]
		public static Transform[] GetBonesOfTypeAndSide(BoneType boneType, BoneSide boneSide, Transform[] bones)
		{
			return null;
		}

		[Token(Token = "0x60002D8")]
		[Address(RVA = "0xEB5408", Offset = "0xEB5408", VA = "0xEB5408")]
		public static Transform GetFirstBoneOfTypeAndSide(BoneType boneType, BoneSide boneSide, Transform[] bones)
		{
			return null;
		}

		[Token(Token = "0x60002D9")]
		[Address(RVA = "0xEB549C", Offset = "0xEB549C", VA = "0xEB549C")]
		public static Transform GetNamingMatch(Transform[] transforms, params string[][] namings)
		{
			return null;
		}

		[Token(Token = "0x60002DA")]
		[Address(RVA = "0xEB5040", Offset = "0xEB5040", VA = "0xEB5040")]
		public static BoneType GetBoneType(string boneName)
		{
			return default(BoneType);
		}

		[Token(Token = "0x60002DB")]
		[Address(RVA = "0xEB530C", Offset = "0xEB530C", VA = "0xEB530C")]
		public static BoneSide GetBoneSide(string boneName)
		{
			return default(BoneSide);
		}

		[Token(Token = "0x60002DC")]
		[Address(RVA = "0xEB5BD4", Offset = "0xEB5BD4", VA = "0xEB5BD4")]
		public static Transform GetBone(Transform[] transforms, BoneType boneType, BoneSide boneSide = BoneSide.Center, params string[][] namings)
		{
			return null;
		}

		[Token(Token = "0x60002DD")]
		[Address(RVA = "0xEB5A2C", Offset = "0xEB5A2C", VA = "0xEB5A2C")]
		private static bool isLeft(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x60002DE")]
		[Address(RVA = "0xEB5B00", Offset = "0xEB5B00", VA = "0xEB5B00")]
		private static bool isRight(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x60002DF")]
		[Address(RVA = "0xEB5684", Offset = "0xEB5684", VA = "0xEB5684")]
		private static bool isSpine(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x60002E0")]
		[Address(RVA = "0xEB5720", Offset = "0xEB5720", VA = "0xEB5720")]
		private static bool isHead(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x60002E1")]
		[Address(RVA = "0xEB57BC", Offset = "0xEB57BC", VA = "0xEB57BC")]
		private static bool isArm(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x60002E2")]
		[Address(RVA = "0xEB5858", Offset = "0xEB5858", VA = "0xEB5858")]
		private static bool isLeg(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x60002E3")]
		[Address(RVA = "0xEB58F4", Offset = "0xEB58F4", VA = "0xEB58F4")]
		private static bool isTail(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x60002E4")]
		[Address(RVA = "0xEB5990", Offset = "0xEB5990", VA = "0xEB5990")]
		private static bool isEye(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x60002E5")]
		[Address(RVA = "0xEB5DBC", Offset = "0xEB5DBC", VA = "0xEB5DBC")]
		private static bool isTypeExclude(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x60002E6")]
		[Address(RVA = "0xEB55B0", Offset = "0xEB55B0", VA = "0xEB55B0")]
		private static bool matchesNaming(string boneName, string[] namingConvention)
		{
			return default(bool);
		}

		[Token(Token = "0x60002E7")]
		[Address(RVA = "0xEB5D38", Offset = "0xEB5D38", VA = "0xEB5D38")]
		private static bool excludesNaming(string boneName, string[] namingConvention)
		{
			return default(bool);
		}

		[Token(Token = "0x60002E8")]
		[Address(RVA = "0xEB5E1C", Offset = "0xEB5E1C", VA = "0xEB5E1C")]
		private static bool matchesLastLetter(string boneName, string[] namingConvention)
		{
			return default(bool);
		}

		[Token(Token = "0x60002E9")]
		[Address(RVA = "0xEB5EDC", Offset = "0xEB5EDC", VA = "0xEB5EDC")]
		private static bool LastLetterIs(string boneName, string letter)
		{
			return default(bool);
		}

		[Token(Token = "0x60002EA")]
		[Address(RVA = "0xEB5CC4", Offset = "0xEB5CC4", VA = "0xEB5CC4")]
		private static string firstLetter(string boneName)
		{
			return null;
		}

		[Token(Token = "0x60002EB")]
		[Address(RVA = "0xEB5C54", Offset = "0xEB5C54", VA = "0xEB5C54")]
		private static string lastLetter(string boneName)
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x2000050")]
	public class BipedReferences
	{
		[Token(Token = "0x2000051")]
		public struct AutoDetectParams
		{
			[Token(Token = "0x4000188")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool legsParentInSpine;

			[Token(Token = "0x4000189")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
			public bool includeEyes;

			[Token(Token = "0x17000044")]
			public static AutoDetectParams Default
			{
				[Token(Token = "0x6000306")]
				[Address(RVA = "0xEBC994", Offset = "0xEBC994", VA = "0xEBC994")]
				get
				{
					return default(AutoDetectParams);
				}
			}

			[Token(Token = "0x6000305")]
			[Address(RVA = "0xEBC980", Offset = "0xEBC980", VA = "0xEBC980")]
			public AutoDetectParams(bool legsParentInSpine, bool includeEyes)
			{
			}
		}

		[Token(Token = "0x4000177")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform root;

		[Token(Token = "0x4000178")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform pelvis;

		[Token(Token = "0x4000179")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform leftThigh;

		[Token(Token = "0x400017A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform leftCalf;

		[Token(Token = "0x400017B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform leftFoot;

		[Token(Token = "0x400017C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform rightThigh;

		[Token(Token = "0x400017D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform rightCalf;

		[Token(Token = "0x400017E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform rightFoot;

		[Token(Token = "0x400017F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform leftUpperArm;

		[Token(Token = "0x4000180")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform leftForearm;

		[Token(Token = "0x4000181")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform leftHand;

		[Token(Token = "0x4000182")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Transform rightUpperArm;

		[Token(Token = "0x4000183")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Transform rightForearm;

		[Token(Token = "0x4000184")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Transform rightHand;

		[Token(Token = "0x4000185")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Transform head;

		[Token(Token = "0x4000186")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Transform[] spine;

		[Token(Token = "0x4000187")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Transform[] eyes;

		[Token(Token = "0x17000042")]
		public virtual bool isFilled
		{
			[Token(Token = "0x60002ED")]
			[Address(RVA = "0xEB8CCC", Offset = "0xEB8CCC", VA = "0xEB8CCC", Slot = "4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000043")]
		public bool isEmpty
		{
			[Token(Token = "0x60002EE")]
			[Address(RVA = "0xEB9028", Offset = "0xEB9028", VA = "0xEB9028")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60002EF")]
		[Address(RVA = "0xEB9038", Offset = "0xEB9038", VA = "0xEB9038", Slot = "5")]
		public virtual bool IsEmpty(bool includeRoot)
		{
			return default(bool);
		}

		[Token(Token = "0x60002F0")]
		[Address(RVA = "0xEB93C4", Offset = "0xEB93C4", VA = "0xEB93C4", Slot = "6")]
		public virtual bool Contains(Transform t, bool ignoreRoot = false)
		{
			return default(bool);
		}

		[Token(Token = "0x60002F1")]
		[Address(RVA = "0xEB9754", Offset = "0xEB9754", VA = "0xEB9754")]
		public static bool AutoDetectReferences(ref BipedReferences references, Transform root, AutoDetectParams autoDetectParams)
		{
			return default(bool);
		}

		[Token(Token = "0x60002F2")]
		[Address(RVA = "0xEB9E78", Offset = "0xEB9E78", VA = "0xEB9E78")]
		public static void DetectReferencesByNaming(ref BipedReferences references, Transform root, AutoDetectParams autoDetectParams)
		{
		}

		[Token(Token = "0x60002F3")]
		[Address(RVA = "0xEB99E8", Offset = "0xEB99E8", VA = "0xEB99E8")]
		public static void AssignHumanoidReferences(ref BipedReferences references, Animator animator, AutoDetectParams autoDetectParams)
		{
		}

		[Token(Token = "0x60002F4")]
		[Address(RVA = "0xEBA6F8", Offset = "0xEBA6F8", VA = "0xEBA6F8")]
		public static bool SetupError(BipedReferences references, ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x60002F5")]
		[Address(RVA = "0xEBA7E4", Offset = "0xEBA7E4", VA = "0xEBA7E4")]
		public static bool SetupWarning(BipedReferences references, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x60002F6")]
		[Address(RVA = "0xEBB300", Offset = "0xEBB300", VA = "0xEBB300")]
		private static bool IsNeckBone(Transform bone, Transform leftUpperArm)
		{
			return default(bool);
		}

		[Token(Token = "0x60002F7")]
		[Address(RVA = "0xEBB10C", Offset = "0xEBB10C", VA = "0xEBB10C")]
		private static bool AddBoneToEyes(Transform bone, ref BipedReferences references, AutoDetectParams autoDetectParams)
		{
			return default(bool);
		}

		[Token(Token = "0x60002F8")]
		[Address(RVA = "0xEBAEAC", Offset = "0xEBAEAC", VA = "0xEBAEAC")]
		private static bool AddBoneToSpine(Transform bone, ref BipedReferences references, AutoDetectParams autoDetectParams)
		{
			return default(bool);
		}

		[Token(Token = "0x60002F9")]
		[Address(RVA = "0xEBA880", Offset = "0xEBA880", VA = "0xEBA880")]
		private static void DetectLimb(BipedNaming.BoneType boneType, BipedNaming.BoneSide boneSide, ref Transform firstBone, ref Transform secondBone, ref Transform lastBone, Transform[] transforms)
		{
		}

		[Token(Token = "0x60002FA")]
		[Address(RVA = "0xEBB200", Offset = "0xEBB200", VA = "0xEBB200")]
		private static void AddBoneToHierarchy(ref Transform[] bones, Transform transform)
		{
		}

		[Token(Token = "0x60002FB")]
		[Address(RVA = "0xEBB3E0", Offset = "0xEBB3E0", VA = "0xEBB3E0")]
		private static bool LimbError(Transform bone1, Transform bone2, Transform bone3, ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x60002FC")]
		[Address(RVA = "0xEBBF88", Offset = "0xEBBF88", VA = "0xEBBF88")]
		private static bool LimbWarning(Transform bone1, Transform bone2, Transform bone3, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x60002FD")]
		[Address(RVA = "0xEBBA30", Offset = "0xEBBA30", VA = "0xEBBA30")]
		private static bool SpineError(BipedReferences references, ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x60002FE")]
		[Address(RVA = "0xEBC2D4", Offset = "0xEBC2D4", VA = "0xEBC2D4")]
		private static bool SpineWarning(BipedReferences references, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x60002FF")]
		[Address(RVA = "0xEBBD90", Offset = "0xEBBD90", VA = "0xEBBD90")]
		private static bool EyesError(BipedReferences references, ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000300")]
		[Address(RVA = "0xEBC2DC", Offset = "0xEBC2DC", VA = "0xEBC2DC")]
		private static bool EyesWarning(BipedReferences references, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000301")]
		[Address(RVA = "0xEBC2E4", Offset = "0xEBC2E4", VA = "0xEBC2E4")]
		private static bool RootHeightWarning(BipedReferences references, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000302")]
		[Address(RVA = "0xEBC4A4", Offset = "0xEBC4A4", VA = "0xEBC4A4")]
		private static bool FacingAxisWarning(BipedReferences references, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000303")]
		[Address(RVA = "0xEBC918", Offset = "0xEBC918", VA = "0xEBC918")]
		private static float GetVerticalOffset(Vector3 p1, Vector3 p2, Quaternion rotation)
		{
			return default(float);
		}

		[Token(Token = "0x6000304")]
		[Address(RVA = "0xEB9968", Offset = "0xEB9968", VA = "0xEB9968")]
		public BipedReferences()
		{
		}
	}
	[Token(Token = "0x2000052")]
	public class Comments : MonoBehaviour
	{
		[Token(Token = "0x400018A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Multiline]
		public string text;

		[Token(Token = "0x6000307")]
		[Address(RVA = "0xEBC99C", Offset = "0xEBC99C", VA = "0xEBC99C")]
		public Comments()
		{
		}
	}
	[Token(Token = "0x2000053")]
	public class DemoGUIMessage : MonoBehaviour
	{
		[Token(Token = "0x400018B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string text;

		[Token(Token = "0x400018C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Color color;

		[Token(Token = "0x6000308")]
		[Address(RVA = "0xEBC9A4", Offset = "0xEBC9A4", VA = "0xEBC9A4")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000309")]
		[Address(RVA = "0xEBCA9C", Offset = "0xEBCA9C", VA = "0xEBCA9C")]
		public DemoGUIMessage()
		{
		}
	}
	[Token(Token = "0x2000054")]
	public class Hierarchy
	{
		[Token(Token = "0x600030A")]
		[Address(RVA = "0xEBC894", Offset = "0xEBC894", VA = "0xEBC894")]
		public static bool HierarchyIsValid(Transform[] bones)
		{
			return default(bool);
		}

		[Token(Token = "0x600030B")]
		[Address(RVA = "0xEBC788", Offset = "0xEBC788", VA = "0xEBC788")]
		public static UnityEngine.Object ContainsDuplicate(UnityEngine.Object[] objects)
		{
			return null;
		}

		[Token(Token = "0x600030C")]
		[Address(RVA = "0xEBA9E4", Offset = "0xEBA9E4", VA = "0xEBA9E4")]
		public static bool IsAncestor(Transform transform, Transform ancestor)
		{
			return default(bool);
		}

		[Token(Token = "0x600030D")]
		[Address(RVA = "0xEBAFFC", Offset = "0xEBAFFC", VA = "0xEBAFFC")]
		public static bool ContainsChild(Transform transform, Transform child)
		{
			return default(bool);
		}

		[Token(Token = "0x600030E")]
		[Address(RVA = "0xEBAC64", Offset = "0xEBAC64", VA = "0xEBAC64")]
		public static void AddAncestors(Transform transform, Transform blocker, ref Transform[] array)
		{
		}

		[Token(Token = "0x600030F")]
		[Address(RVA = "0xEBCAAC", Offset = "0xEBCAAC", VA = "0xEBCAAC")]
		public static Transform GetAncestor(Transform transform, int minChildCount)
		{
			return null;
		}

		[Token(Token = "0x6000310")]
		[Address(RVA = "0xEBAB14", Offset = "0xEBAB14", VA = "0xEBAB14")]
		public static Transform GetFirstCommonAncestor(Transform t1, Transform t2)
		{
			return null;
		}

		[Token(Token = "0x6000311")]
		[Address(RVA = "0xEBCBA0", Offset = "0xEBCBA0", VA = "0xEBCBA0")]
		public static Transform GetFirstCommonAncestor(Transform[] transforms)
		{
			return null;
		}

		[Token(Token = "0x6000312")]
		[Address(RVA = "0xEBCF0C", Offset = "0xEBCF0C", VA = "0xEBCF0C")]
		public static Transform GetFirstCommonAncestorRecursive(Transform transform, Transform[] transforms)
		{
			return null;
		}

		[Token(Token = "0x6000313")]
		[Address(RVA = "0xEBCD04", Offset = "0xEBCD04", VA = "0xEBCD04")]
		public static bool IsCommonAncestor(Transform transform, Transform[] transforms)
		{
			return default(bool);
		}

		[Token(Token = "0x6000314")]
		[Address(RVA = "0xEBD094", Offset = "0xEBD094", VA = "0xEBD094")]
		public Hierarchy()
		{
		}
	}
	[Token(Token = "0x2000055")]
	public class InspectorComment : PropertyAttribute
	{
		[Token(Token = "0x400018D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string name;

		[Token(Token = "0x400018E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string color;

		[Token(Token = "0x6000315")]
		[Address(RVA = "0xEBD09C", Offset = "0xEBD09C", VA = "0xEBD09C")]
		public InspectorComment(string name)
		{
		}

		[Token(Token = "0x6000316")]
		[Address(RVA = "0xEBD124", Offset = "0xEBD124", VA = "0xEBD124")]
		public InspectorComment(string name, string color)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000056")]
	public enum InterpolationMode
	{
		[Token(Token = "0x4000190")]
		None,
		[Token(Token = "0x4000191")]
		InOutCubic,
		[Token(Token = "0x4000192")]
		InOutQuintic,
		[Token(Token = "0x4000193")]
		InOutSine,
		[Token(Token = "0x4000194")]
		InQuintic,
		[Token(Token = "0x4000195")]
		InQuartic,
		[Token(Token = "0x4000196")]
		InCubic,
		[Token(Token = "0x4000197")]
		InQuadratic,
		[Token(Token = "0x4000198")]
		InElastic,
		[Token(Token = "0x4000199")]
		InElasticSmall,
		[Token(Token = "0x400019A")]
		InElasticBig,
		[Token(Token = "0x400019B")]
		InSine,
		[Token(Token = "0x400019C")]
		InBack,
		[Token(Token = "0x400019D")]
		OutQuintic,
		[Token(Token = "0x400019E")]
		OutQuartic,
		[Token(Token = "0x400019F")]
		OutCubic,
		[Token(Token = "0x40001A0")]
		OutInCubic,
		[Token(Token = "0x40001A1")]
		OutInQuartic,
		[Token(Token = "0x40001A2")]
		OutElastic,
		[Token(Token = "0x40001A3")]
		OutElasticSmall,
		[Token(Token = "0x40001A4")]
		OutElasticBig,
		[Token(Token = "0x40001A5")]
		OutSine,
		[Token(Token = "0x40001A6")]
		OutBack,
		[Token(Token = "0x40001A7")]
		OutBackCubic,
		[Token(Token = "0x40001A8")]
		OutBackQuartic,
		[Token(Token = "0x40001A9")]
		BackInCubic,
		[Token(Token = "0x40001AA")]
		BackInQuartic
	}
	[Token(Token = "0x2000057")]
	public class Interp
	{
		[Token(Token = "0x6000317")]
		[Address(RVA = "0xEBD1B0", Offset = "0xEBD1B0", VA = "0xEBD1B0")]
		public static float Float(float t, InterpolationMode mode)
		{
			return default(float);
		}

		[Token(Token = "0x6000318")]
		[Address(RVA = "0xEBDB38", Offset = "0xEBDB38", VA = "0xEBDB38")]
		public static Vector3 V3(Vector3 v1, Vector3 v2, float t, InterpolationMode mode)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000319")]
		[Address(RVA = "0xEBDBA8", Offset = "0xEBDBA8", VA = "0xEBDBA8")]
		public static float LerpValue(float value, float target, float increaseSpeed, float decreaseSpeed)
		{
			return default(float);
		}

		[Token(Token = "0x600031A")]
		[Address(RVA = "0xEBD5B0", Offset = "0xEBD5B0", VA = "0xEBD5B0")]
		private static float None(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x600031B")]
		[Address(RVA = "0xEBD5BC", Offset = "0xEBD5BC", VA = "0xEBD5BC")]
		private static float InOutCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x600031C")]
		[Address(RVA = "0xEBD5E0", Offset = "0xEBD5E0", VA = "0xEBD5E0")]
		private static float InOutQuintic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x600031D")]
		[Address(RVA = "0xEBD61C", Offset = "0xEBD61C", VA = "0xEBD61C")]
		private static float InQuintic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x600031E")]
		[Address(RVA = "0xEBD634", Offset = "0xEBD634", VA = "0xEBD634")]
		private static float InQuartic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x600031F")]
		[Address(RVA = "0xEBD648", Offset = "0xEBD648", VA = "0xEBD648")]
		private static float InCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000320")]
		[Address(RVA = "0xEBD65C", Offset = "0xEBD65C", VA = "0xEBD65C")]
		private static float InQuadratic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000321")]
		[Address(RVA = "0xEBD66C", Offset = "0xEBD66C", VA = "0xEBD66C")]
		private static float OutQuintic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000322")]
		[Address(RVA = "0xEBD6B4", Offset = "0xEBD6B4", VA = "0xEBD6B4")]
		private static float OutQuartic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000323")]
		[Address(RVA = "0xEBD6EC", Offset = "0xEBD6EC", VA = "0xEBD6EC")]
		private static float OutCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000324")]
		[Address(RVA = "0xEBD714", Offset = "0xEBD714", VA = "0xEBD714")]
		private static float OutInCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000325")]
		[Address(RVA = "0xEBDC18", Offset = "0xEBDC18", VA = "0xEBDC18")]
		private static float OutInQuartic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000326")]
		[Address(RVA = "0xEBD748", Offset = "0xEBD748", VA = "0xEBD748")]
		private static float BackInCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000327")]
		[Address(RVA = "0xEBD770", Offset = "0xEBD770", VA = "0xEBD770")]
		private static float BackInQuartic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000328")]
		[Address(RVA = "0xEBD7A0", Offset = "0xEBD7A0", VA = "0xEBD7A0")]
		private static float OutBackCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000329")]
		[Address(RVA = "0xEBD7D4", Offset = "0xEBD7D4", VA = "0xEBD7D4")]
		private static float OutBackQuartic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x600032A")]
		[Address(RVA = "0xEBD818", Offset = "0xEBD818", VA = "0xEBD818")]
		private static float OutElasticSmall(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x600032B")]
		[Address(RVA = "0xEBD87C", Offset = "0xEBD87C", VA = "0xEBD87C")]
		private static float OutElasticBig(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x600032C")]
		[Address(RVA = "0xEBD8E0", Offset = "0xEBD8E0", VA = "0xEBD8E0")]
		private static float InElasticSmall(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x600032D")]
		[Address(RVA = "0xEBD934", Offset = "0xEBD934", VA = "0xEBD934")]
		private static float InElasticBig(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x600032E")]
		[Address(RVA = "0xEBD988", Offset = "0xEBD988", VA = "0xEBD988")]
		private static float InSine(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x600032F")]
		[Address(RVA = "0xEBD9C0", Offset = "0xEBD9C0", VA = "0xEBD9C0")]
		private static float OutSine(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000330")]
		[Address(RVA = "0xEBD9F4", Offset = "0xEBD9F4", VA = "0xEBD9F4")]
		private static float InOutSine(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000331")]
		[Address(RVA = "0xEBDC4C", Offset = "0xEBDC4C", VA = "0xEBDC4C")]
		private static float InElastic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000332")]
		[Address(RVA = "0xEBDA38", Offset = "0xEBDA38", VA = "0xEBDA38")]
		private static float OutElastic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000333")]
		[Address(RVA = "0xEBDAC8", Offset = "0xEBDAC8", VA = "0xEBDAC8")]
		private static float InBack(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000334")]
		[Address(RVA = "0xEBDAF8", Offset = "0xEBDAF8", VA = "0xEBDAF8")]
		private static float OutBack(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000335")]
		[Address(RVA = "0xEBDCDC", Offset = "0xEBDCDC", VA = "0xEBDCDC")]
		public Interp()
		{
		}
	}
	[Token(Token = "0x2000058")]
	public class LargeHeader : PropertyAttribute
	{
		[Token(Token = "0x40001AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string name;

		[Token(Token = "0x40001AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string color;

		[Token(Token = "0x6000336")]
		[Address(RVA = "0xEBDCE4", Offset = "0xEBDCE4", VA = "0xEBDCE4")]
		public LargeHeader(string name)
		{
		}

		[Token(Token = "0x6000337")]
		[Address(RVA = "0xEBDD6C", Offset = "0xEBDD6C", VA = "0xEBDD6C")]
		public LargeHeader(string name, string color)
		{
		}
	}
	[Token(Token = "0x2000059")]
	public static class LayerMaskExtensions
	{
		[Token(Token = "0x6000338")]
		[Address(RVA = "0xEBDDF8", Offset = "0xEBDDF8", VA = "0xEBDDF8")]
		public static bool Contains(LayerMask mask, int layer)
		{
			return default(bool);
		}

		[Token(Token = "0x6000339")]
		[Address(RVA = "0xEBDE44", Offset = "0xEBDE44", VA = "0xEBDE44")]
		public static LayerMask Create(params string[] layerNames)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x600033A")]
		[Address(RVA = "0xEBDF00", Offset = "0xEBDF00", VA = "0xEBDF00")]
		public static LayerMask Create(params int[] layerNumbers)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x600033B")]
		[Address(RVA = "0xEBDE58", Offset = "0xEBDE58", VA = "0xEBDE58")]
		public static LayerMask NamesToMask(params string[] layerNames)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x600033C")]
		[Address(RVA = "0xEBDF14", Offset = "0xEBDF14", VA = "0xEBDF14")]
		public static LayerMask LayerNumbersToMask(params int[] layerNumbers)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x600033D")]
		[Address(RVA = "0xEBDFA4", Offset = "0xEBDFA4", VA = "0xEBDFA4")]
		public static LayerMask Inverse(this LayerMask original)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x600033E")]
		[Address(RVA = "0xEBDFCC", Offset = "0xEBDFCC", VA = "0xEBDFCC")]
		public static LayerMask AddToMask(this LayerMask original, params string[] layerNames)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x600033F")]
		[Address(RVA = "0xEBE018", Offset = "0xEBE018", VA = "0xEBE018")]
		public static LayerMask RemoveFromMask(this LayerMask original, params string[] layerNames)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x6000340")]
		[Address(RVA = "0xEBE080", Offset = "0xEBE080", VA = "0xEBE080")]
		public static string[] MaskToNames(this LayerMask original)
		{
			return null;
		}

		[Token(Token = "0x6000341")]
		[Address(RVA = "0xEBE1DC", Offset = "0xEBE1DC", VA = "0xEBE1DC")]
		public static int[] MaskToNumbers(this LayerMask original)
		{
			return null;
		}

		[Token(Token = "0x6000342")]
		[Address(RVA = "0xEBE314", Offset = "0xEBE314", VA = "0xEBE314")]
		public static string MaskToString(this LayerMask original)
		{
			return null;
		}

		[Token(Token = "0x6000343")]
		[Address(RVA = "0xEBE36C", Offset = "0xEBE36C", VA = "0xEBE36C")]
		public static string MaskToString(this LayerMask original, string delimiter)
		{
			return null;
		}
	}
	[Token(Token = "0x200005A")]
	public static class QuaTools
	{
		[Token(Token = "0x6000344")]
		[Address(RVA = "0xEBE390", Offset = "0xEBE390", VA = "0xEBE390")]
		public static Quaternion Lerp(Quaternion fromRotation, Quaternion toRotation, float weight)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000345")]
		[Address(RVA = "0xEBE3DC", Offset = "0xEBE3DC", VA = "0xEBE3DC")]
		public static Quaternion Slerp(Quaternion fromRotation, Quaternion toRotation, float weight)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000346")]
		[Address(RVA = "0xEBE428", Offset = "0xEBE428", VA = "0xEBE428")]
		public static Quaternion LinearBlend(Quaternion q, float weight)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000347")]
		[Address(RVA = "0xEBE52C", Offset = "0xEBE52C", VA = "0xEBE52C")]
		public static Quaternion SphericalBlend(Quaternion q, float weight)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000348")]
		[Address(RVA = "0xEBE630", Offset = "0xEBE630", VA = "0xEBE630")]
		public static Quaternion FromToAroundAxis(Vector3 fromDirection, Vector3 toDirection, Vector3 axis)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000349")]
		[Address(RVA = "0xEBE744", Offset = "0xEBE744", VA = "0xEBE744")]
		public static Quaternion RotationToLocalSpace(Quaternion space, Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600034A")]
		[Address(RVA = "0xEBE7EC", Offset = "0xEBE7EC", VA = "0xEBE7EC")]
		public static Quaternion FromToRotation(Quaternion from, Quaternion to)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600034B")]
		[Address(RVA = "0xEBE8F8", Offset = "0xEBE8F8", VA = "0xEBE8F8")]
		public static Vector3 GetAxis(Vector3 v)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600034C")]
		[Address(RVA = "0xEBEA60", Offset = "0xEBEA60", VA = "0xEBEA60")]
		public static Quaternion ClampRotation(Quaternion rotation, float clampWeight, int clampSmoothing)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600034D")]
		[Address(RVA = "0xEBEC44", Offset = "0xEBEC44", VA = "0xEBEC44")]
		public static float ClampAngle(float angle, float clampWeight, int clampSmoothing)
		{
			return default(float);
		}

		[Token(Token = "0x600034E")]
		[Address(RVA = "0xEBED14", Offset = "0xEBED14", VA = "0xEBED14")]
		public static Quaternion MatchRotation(Quaternion targetRotation, Vector3 targetforwardAxis, Vector3 targetUpAxis, Vector3 forwardAxis, Vector3 upAxis)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600034F")]
		[Address(RVA = "0xEBEE98", Offset = "0xEBEE98", VA = "0xEBEE98")]
		public static Vector3 ToBiPolar(Vector3 euler)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000350")]
		[Address(RVA = "0xEBEFA4", Offset = "0xEBEFA4", VA = "0xEBEFA4")]
		public static float ToBiPolar(float angle)
		{
			return default(float);
		}
	}
	[Token(Token = "0x200005B")]
	public abstract class Singleton<T> : MonoBehaviour where T : Singleton<T>
	{
		[Token(Token = "0x40001AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static T sInstance;

		[Token(Token = "0x17000045")]
		public static T instance
		{
			[Token(Token = "0x6000351")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000352")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000353")]
		protected Singleton()
		{
		}
	}
	[Token(Token = "0x200005C")]
	public class SolverManager : MonoBehaviour
	{
		[Token(Token = "0x40001AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("If true, will fix all the Transforms used by the solver to their initial state in each Update. This prevents potential problems with unanimated bones and animator culling with a small cost of performance. Not recommended for CCD and FABRIK solvers.")]
		public bool fixTransforms;

		[Token(Token = "0x40001AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Animator animator;

		[Token(Token = "0x40001B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Animation legacy;

		[Token(Token = "0x40001B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool updateFrame;

		[Token(Token = "0x40001B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool componentInitiated;

		[Token(Token = "0x40001B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		private bool skipSolverUpdate;

		[Token(Token = "0x17000046")]
		private bool animatePhysics
		{
			[Token(Token = "0x600035A")]
			[Address(RVA = "0xEBF118", Offset = "0xEBF118", VA = "0xEBF118")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000047")]
		private bool isAnimated
		{
			[Token(Token = "0x600035E")]
			[Address(RVA = "0xEBF414", Offset = "0xEBF414", VA = "0xEBF414")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000354")]
		[Address(RVA = "0xEBEFFC", Offset = "0xEBEFFC", VA = "0xEBEFFC")]
		public void Disable()
		{
		}

		[Token(Token = "0x6000355")]
		[Address(RVA = "0xEBF090", Offset = "0xEBF090", VA = "0xEBF090", Slot = "4")]
		protected virtual void InitiateSolver()
		{
		}

		[Token(Token = "0x6000356")]
		[Address(RVA = "0xEBF094", Offset = "0xEBF094", VA = "0xEBF094", Slot = "5")]
		protected virtual void UpdateSolver()
		{
		}

		[Token(Token = "0x6000357")]
		[Address(RVA = "0xEBF098", Offset = "0xEBF098", VA = "0xEBF098", Slot = "6")]
		protected virtual void FixTransforms()
		{
		}

		[Token(Token = "0x6000358")]
		[Address(RVA = "0xEBF09C", Offset = "0xEBF09C", VA = "0xEBF09C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000359")]
		[Address(RVA = "0xEBF114", Offset = "0xEBF114", VA = "0xEBF114")]
		private void Start()
		{
		}

		[Token(Token = "0x600035B")]
		[Address(RVA = "0xEBF0C4", Offset = "0xEBF0C4", VA = "0xEBF0C4")]
		private void Initiate()
		{
		}

		[Token(Token = "0x600035C")]
		[Address(RVA = "0xEBF3D8", Offset = "0xEBF3D8", VA = "0xEBF3D8")]
		private void Update()
		{
		}

		[Token(Token = "0x600035D")]
		[Address(RVA = "0xEBF1E4", Offset = "0xEBF1E4", VA = "0xEBF1E4")]
		private void FindAnimatorRecursive(Transform t, bool findInChildren)
		{
		}

		[Token(Token = "0x600035F")]
		[Address(RVA = "0xEBF4AC", Offset = "0xEBF4AC", VA = "0xEBF4AC")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000360")]
		[Address(RVA = "0xEBF4F8", Offset = "0xEBF4F8", VA = "0xEBF4F8")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000361")]
		[Address(RVA = "0xEBF544", Offset = "0xEBF544", VA = "0xEBF544")]
		public void UpdateSolverExternal()
		{
		}

		[Token(Token = "0x6000362")]
		[Address(RVA = "0xEBF57C", Offset = "0xEBF57C", VA = "0xEBF57C")]
		public SolverManager()
		{
		}
	}
	[Token(Token = "0x200005D")]
	public class TriggerEventBroadcaster : MonoBehaviour
	{
		[Token(Token = "0x40001B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject target;

		[Token(Token = "0x6000363")]
		[Address(RVA = "0xEBF58C", Offset = "0xEBF58C", VA = "0xEBF58C")]
		private void OnTriggerEnter(Collider collider)
		{
		}

		[Token(Token = "0x6000364")]
		[Address(RVA = "0xEBF640", Offset = "0xEBF640", VA = "0xEBF640")]
		private void OnTriggerStay(Collider collider)
		{
		}

		[Token(Token = "0x6000365")]
		[Address(RVA = "0xEBF6F4", Offset = "0xEBF6F4", VA = "0xEBF6F4")]
		private void OnTriggerExit(Collider collider)
		{
		}

		[Token(Token = "0x6000366")]
		[Address(RVA = "0xEBF7A8", Offset = "0xEBF7A8", VA = "0xEBF7A8")]
		public TriggerEventBroadcaster()
		{
		}
	}
	[Token(Token = "0x200005E")]
	public static class V3Tools
	{
		[Token(Token = "0x6000367")]
		[Address(RVA = "0xEBF7B0", Offset = "0xEBF7B0", VA = "0xEBF7B0")]
		public static Vector3 Lerp(Vector3 fromVector, Vector3 toVector, float weight)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000368")]
		[Address(RVA = "0xEBF80C", Offset = "0xEBF80C", VA = "0xEBF80C")]
		public static Vector3 Slerp(Vector3 fromVector, Vector3 toVector, float weight)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000369")]
		[Address(RVA = "0xEBF844", Offset = "0xEBF844", VA = "0xEBF844")]
		public static Vector3 ExtractVertical(Vector3 v, Vector3 verticalAxis, float weight)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600036A")]
		[Address(RVA = "0xEBF994", Offset = "0xEBF994", VA = "0xEBF994")]
		public static Vector3 ExtractHorizontal(Vector3 v, Vector3 normal, float weight)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600036B")]
		[Address(RVA = "0xEBFB10", Offset = "0xEBFB10", VA = "0xEBFB10")]
		public static Vector3 ClampDirection(Vector3 direction, Vector3 normalDirection, float clampWeight, int clampSmoothing)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600036C")]
		[Address(RVA = "0xEBFD40", Offset = "0xEBFD40", VA = "0xEBFD40")]
		public static Vector3 ClampDirection(Vector3 direction, Vector3 normalDirection, float clampWeight, int clampSmoothing, out bool changed)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600036D")]
		[Address(RVA = "0xEBFF90", Offset = "0xEBFF90", VA = "0xEBFF90")]
		public static Vector3 ClampDirection(Vector3 direction, Vector3 normalDirection, float clampWeight, int clampSmoothing, out float clampValue)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600036E")]
		[Address(RVA = "0xEC01E8", Offset = "0xEC01E8", VA = "0xEC01E8")]
		public static Vector3 LineToPlane(Vector3 origin, Vector3 direction, Vector3 planeNormal, Vector3 planePoint)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600036F")]
		[Address(RVA = "0xEC0394", Offset = "0xEC0394", VA = "0xEC0394")]
		public static Vector3 PointToPlane(Vector3 point, Vector3 planePosition, Vector3 planeNormal)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000370")]
		[Address(RVA = "0xEC058C", Offset = "0xEC058C", VA = "0xEC058C")]
		public static Vector3 TransformPointUnscaled(Transform t, Vector3 point)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000371")]
		[Address(RVA = "0xEC0608", Offset = "0xEC0608", VA = "0xEC0608")]
		public static Vector3 InverseTransformPointUnscaled(Transform t, Vector3 point)
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x200005F")]
	public static class Warning
	{
		[Token(Token = "0x2000060")]
		public delegate void Logger(string message);

		[Token(Token = "0x40001B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool logged;

		[Token(Token = "0x6000372")]
		[Address(RVA = "0xEC0698", Offset = "0xEC0698", VA = "0xEC0698")]
		public static void Log(string message, Logger logger, bool logInEditMode = false)
		{
		}

		[Token(Token = "0x6000373")]
		[Address(RVA = "0xEBA644", Offset = "0xEBA644", VA = "0xEBA644")]
		public static void Log(string message, Transform context, bool logInEditMode = false)
		{
		}
	}
}
namespace RootMotion.FinalIK
{
	[Token(Token = "0x2000061")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page4.html")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/Biped IK")]
	public class BipedIK : SolverManager
	{
		[Token(Token = "0x40001B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public BipedReferences references;

		[Token(Token = "0x40001B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public BipedIKSolvers solvers;

		[Token(Token = "0x6000378")]
		[Address(RVA = "0xEC0854", Offset = "0xEC0854", VA = "0xEC0854")]
		[ContextMenu("User Manual")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6000379")]
		[Address(RVA = "0xEC0898", Offset = "0xEC0898", VA = "0xEC0898")]
		[ContextMenu("Scrpt Reference")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x600037A")]
		[Address(RVA = "0xEC08DC", Offset = "0xEC08DC", VA = "0xEC08DC")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x600037B")]
		[Address(RVA = "0xEC0920", Offset = "0xEC0920", VA = "0xEC0920")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x600037C")]
		[Address(RVA = "0xEC0964", Offset = "0xEC0964", VA = "0xEC0964")]
		public float GetIKPositionWeight(AvatarIKGoal goal)
		{
			return default(float);
		}

		[Token(Token = "0x600037D")]
		[Address(RVA = "0xEC09FC", Offset = "0xEC09FC", VA = "0xEC09FC")]
		public float GetIKRotationWeight(AvatarIKGoal goal)
		{
			return default(float);
		}

		[Token(Token = "0x600037E")]
		[Address(RVA = "0xEC0A18", Offset = "0xEC0A18", VA = "0xEC0A18")]
		public void SetIKPositionWeight(AvatarIKGoal goal, float weight)
		{
		}

		[Token(Token = "0x600037F")]
		[Address(RVA = "0xEC0A44", Offset = "0xEC0A44", VA = "0xEC0A44")]
		public void SetIKRotationWeight(AvatarIKGoal goal, float weight)
		{
		}

		[Token(Token = "0x6000380")]
		[Address(RVA = "0xEC0A70", Offset = "0xEC0A70", VA = "0xEC0A70")]
		public void SetIKPosition(AvatarIKGoal goal, Vector3 IKPosition)
		{
		}

		[Token(Token = "0x6000381")]
		[Address(RVA = "0xEC0AAC", Offset = "0xEC0AAC", VA = "0xEC0AAC")]
		public void SetIKRotation(AvatarIKGoal goal, Quaternion IKRotation)
		{
		}

		[Token(Token = "0x6000382")]
		[Address(RVA = "0xEC0AEC", Offset = "0xEC0AEC", VA = "0xEC0AEC")]
		public Vector3 GetIKPosition(AvatarIKGoal goal)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000383")]
		[Address(RVA = "0xEC0B0C", Offset = "0xEC0B0C", VA = "0xEC0B0C")]
		public Quaternion GetIKRotation(AvatarIKGoal goal)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000384")]
		[Address(RVA = "0xEC0B2C", Offset = "0xEC0B2C", VA = "0xEC0B2C")]
		public void SetLookAtWeight(float weight, float bodyWeight, float headWeight, float eyesWeight, float clampWeight, float clampWeightHead, float clampWeightEyes)
		{
		}

		[Token(Token = "0x6000385")]
		[Address(RVA = "0xEC0B50", Offset = "0xEC0B50", VA = "0xEC0B50")]
		public void SetLookAtPosition(Vector3 lookAtPosition)
		{
		}

		[Token(Token = "0x6000386")]
		[Address(RVA = "0xEC0B78", Offset = "0xEC0B78", VA = "0xEC0B78")]
		public void SetSpinePosition(Vector3 spinePosition)
		{
		}

		[Token(Token = "0x6000387")]
		[Address(RVA = "0xEC0BA0", Offset = "0xEC0BA0", VA = "0xEC0BA0")]
		public void SetSpineWeight(float weight)
		{
		}

		[Token(Token = "0x6000388")]
		[Address(RVA = "0xEC0980", Offset = "0xEC0980", VA = "0xEC0980")]
		public IKSolverLimb GetGoalIK(AvatarIKGoal goal)
		{
			return null;
		}

		[Token(Token = "0x6000389")]
		[Address(RVA = "0xEC0BC4", Offset = "0xEC0BC4", VA = "0xEC0BC4")]
		public void InitiateBipedIK()
		{
		}

		[Token(Token = "0x600038A")]
		[Address(RVA = "0xEC0BD0", Offset = "0xEC0BD0", VA = "0xEC0BD0")]
		public void UpdateBipedIK()
		{
		}

		[Token(Token = "0x600038B")]
		[Address(RVA = "0xEC0BDC", Offset = "0xEC0BDC", VA = "0xEC0BDC")]
		public void SetToDefaults()
		{
		}

		[Token(Token = "0x600038C")]
		[Address(RVA = "0xEC0E90", Offset = "0xEC0E90", VA = "0xEC0E90", Slot = "6")]
		protected override void FixTransforms()
		{
		}

		[Token(Token = "0x600038D")]
		[Address(RVA = "0xEC0F2C", Offset = "0xEC0F2C", VA = "0xEC0F2C", Slot = "4")]
		protected override void InitiateSolver()
		{
		}

		[Token(Token = "0x600038E")]
		[Address(RVA = "0xEC1250", Offset = "0xEC1250", VA = "0xEC1250", Slot = "5")]
		protected override void UpdateSolver()
		{
		}

		[Token(Token = "0x600038F")]
		[Address(RVA = "0xEC16BC", Offset = "0xEC16BC", VA = "0xEC16BC")]
		public void LogWarning(string message)
		{
		}

		[Token(Token = "0x6000390")]
		[Address(RVA = "0xEC16E0", Offset = "0xEC16E0", VA = "0xEC16E0")]
		public BipedIK()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000062")]
	public class BipedIKSolvers
	{
		[Token(Token = "0x40001B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public IKSolverLimb leftFoot;

		[Token(Token = "0x40001B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public IKSolverLimb rightFoot;

		[Token(Token = "0x40001BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public IKSolverLimb leftHand;

		[Token(Token = "0x40001BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public IKSolverLimb rightHand;

		[Token(Token = "0x40001BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public IKSolverFABRIK spine;

		[Token(Token = "0x40001BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverLookAt lookAt;

		[Token(Token = "0x40001BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public IKSolverAim aim;

		[Token(Token = "0x40001BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Constraints pelvis;

		[Token(Token = "0x40001C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private IKSolverLimb[] _limbs;

		[Token(Token = "0x40001C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private IKSolver[] _ikSolvers;

		[Token(Token = "0x17000048")]
		public IKSolverLimb[] limbs
		{
			[Token(Token = "0x6000391")]
			[Address(RVA = "0xEC0D18", Offset = "0xEC0D18", VA = "0xEC0D18")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000049")]
		public IKSolver[] ikSolvers
		{
			[Token(Token = "0x6000392")]
			[Address(RVA = "0xEC197C", Offset = "0xEC197C", VA = "0xEC197C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000393")]
		[Address(RVA = "0xEC10DC", Offset = "0xEC10DC", VA = "0xEC10DC")]
		public void AssignReferences(BipedReferences references)
		{
		}

		[Token(Token = "0x6000394")]
		[Address(RVA = "0xEC1790", Offset = "0xEC1790", VA = "0xEC1790")]
		public BipedIKSolvers()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000063")]
	public abstract class Constraint
	{
		[Token(Token = "0x40001C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform transform;

		[Token(Token = "0x40001C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float weight;

		[Token(Token = "0x1700004A")]
		public bool isValid
		{
			[Token(Token = "0x6000395")]
			[Address(RVA = "0xEC1BA4", Offset = "0xEC1BA4", VA = "0xEC1BA4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000396")]
		public abstract void UpdateConstraint();

		[Token(Token = "0x6000397")]
		[Address(RVA = "0xEC1C04", Offset = "0xEC1C04", VA = "0xEC1C04")]
		protected Constraint()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000064")]
	public class ConstraintPosition : Constraint
	{
		[Token(Token = "0x40001C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 position;

		[Token(Token = "0x6000398")]
		[Address(RVA = "0xEC1C0C", Offset = "0xEC1C0C", VA = "0xEC1C0C", Slot = "4")]
		public override void UpdateConstraint()
		{
		}

		[Token(Token = "0x6000399")]
		[Address(RVA = "0xEC1CA4", Offset = "0xEC1CA4", VA = "0xEC1CA4")]
		public ConstraintPosition()
		{
		}

		[Token(Token = "0x600039A")]
		[Address(RVA = "0xEC1CAC", Offset = "0xEC1CAC", VA = "0xEC1CAC")]
		public ConstraintPosition(Transform transform)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000065")]
	public class ConstraintPositionOffset : Constraint
	{
		[Token(Token = "0x40001C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 offset;

		[Token(Token = "0x40001C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 defaultLocalPosition;

		[Token(Token = "0x40001C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 lastLocalPosition;

		[Token(Token = "0x40001C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool initiated;

		[Token(Token = "0x1700004B")]
		private bool positionChanged
		{
			[Token(Token = "0x600039E")]
			[Address(RVA = "0xEC1DE0", Offset = "0xEC1DE0", VA = "0xEC1DE0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600039B")]
		[Address(RVA = "0xEC1CDC", Offset = "0xEC1CDC", VA = "0xEC1CDC", Slot = "4")]
		public override void UpdateConstraint()
		{
		}

		[Token(Token = "0x600039C")]
		[Address(RVA = "0xEC1E3C", Offset = "0xEC1E3C", VA = "0xEC1E3C")]
		public ConstraintPositionOffset()
		{
		}

		[Token(Token = "0x600039D")]
		[Address(RVA = "0xEC1E44", Offset = "0xEC1E44", VA = "0xEC1E44")]
		public ConstraintPositionOffset(Transform transform)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000066")]
	public class ConstraintRotation : Constraint
	{
		[Token(Token = "0x40001C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Quaternion rotation;

		[Token(Token = "0x600039F")]
		[Address(RVA = "0xEC1E74", Offset = "0xEC1E74", VA = "0xEC1E74", Slot = "4")]
		public override void UpdateConstraint()
		{
		}

		[Token(Token = "0x60003A0")]
		[Address(RVA = "0xEC1EF0", Offset = "0xEC1EF0", VA = "0xEC1EF0")]
		public ConstraintRotation()
		{
		}

		[Token(Token = "0x60003A1")]
		[Address(RVA = "0xEC1EF8", Offset = "0xEC1EF8", VA = "0xEC1EF8")]
		public ConstraintRotation(Transform transform)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000067")]
	public class ConstraintRotationOffset : Constraint
	{
		[Token(Token = "0x40001CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Quaternion offset;

		[Token(Token = "0x40001CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Quaternion defaultRotation;

		[Token(Token = "0x40001CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Quaternion defaultLocalRotation;

		[Token(Token = "0x40001CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Quaternion lastLocalRotation;

		[Token(Token = "0x40001CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Quaternion defaultTargetLocalRotation;

		[Token(Token = "0x40001CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private bool initiated;

		[Token(Token = "0x1700004C")]
		private bool rotationChanged
		{
			[Token(Token = "0x60003A5")]
			[Address(RVA = "0xEC202C", Offset = "0xEC202C", VA = "0xEC202C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60003A2")]
		[Address(RVA = "0xEC1F28", Offset = "0xEC1F28", VA = "0xEC1F28", Slot = "4")]
		public override void UpdateConstraint()
		{
		}

		[Token(Token = "0x60003A3")]
		[Address(RVA = "0xEC2084", Offset = "0xEC2084", VA = "0xEC2084")]
		public ConstraintRotationOffset()
		{
		}

		[Token(Token = "0x60003A4")]
		[Address(RVA = "0xEC208C", Offset = "0xEC208C", VA = "0xEC208C")]
		public ConstraintRotationOffset(Transform transform)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000068")]
	public class Constraints
	{
		[Token(Token = "0x40001D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform transform;

		[Token(Token = "0x40001D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x40001D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 positionOffset;

		[Token(Token = "0x40001D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 position;

		[Token(Token = "0x40001D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Range(0f, 1f)]
		public float positionWeight;

		[Token(Token = "0x40001D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector3 rotationOffset;

		[Token(Token = "0x40001D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector3 rotation;

		[Token(Token = "0x40001D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Range(0f, 1f)]
		public float rotationWeight;

		[Token(Token = "0x60003A6")]
		[Address(RVA = "0xEC20BC", Offset = "0xEC20BC", VA = "0xEC20BC")]
		public bool IsValid()
		{
			return default(bool);
		}

		[Token(Token = "0x60003A7")]
		[Address(RVA = "0xEC11FC", Offset = "0xEC11FC", VA = "0xEC11FC")]
		public void Initiate(Transform transform)
		{
		}

		[Token(Token = "0x60003A8")]
		[Address(RVA = "0xEC13C4", Offset = "0xEC13C4", VA = "0xEC13C4")]
		public void Update()
		{
		}

		[Token(Token = "0x60003A9")]
		[Address(RVA = "0xEC1B9C", Offset = "0xEC1B9C", VA = "0xEC1B9C")]
		public Constraints()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000069")]
	public class Finger
	{
		[Serializable]
		[Token(Token = "0x200006A")]
		public enum DOF
		{
			[Token(Token = "0x40001EA")]
			One,
			[Token(Token = "0x40001EB")]
			Three
		}

		[Token(Token = "0x40001D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Range(0f, 1f)]
		[Tooltip("Master Weight for the finger.")]
		public float weight;

		[Token(Token = "0x40001D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[Range(0f, 1f)]
		[Tooltip("The weight of rotating the finger tip and bending the finger to the target.")]
		public float rotationWeight;

		[Token(Token = "0x40001DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Rotational degrees of freedom. When set to 'One' the fingers will be able to be rotated only around a single axis. When 3, all 3 axes are free to rotate around.")]
		public DOF rotationDOF;

		[Token(Token = "0x40001DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("If enabled, keeps bone1 twist angle fixed relative to bone2.")]
		public bool fixBone1Twist;

		[Token(Token = "0x40001DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The first bone of the finger.")]
		public Transform bone1;

		[Token(Token = "0x40001DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The second bone of the finger.")]
		public Transform bone2;

		[Token(Token = "0x40001DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The (optional) third bone of the finger. This can be ignored for thumbs.")]
		public Transform bone3;

		[Token(Token = "0x40001DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The fingertip object. If your character doesn't have tip bones, you can create an empty GameObject and parent it to the last bone in the finger. Place it to the tip of the finger.")]
		public Transform tip;

		[Token(Token = "0x40001E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The IK target (optional, can use IKPosition and IKRotation directly).")]
		public Transform target;

		[Token(Token = "0x40001E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private IKSolverLimb solver;

		[Token(Token = "0x40001E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Quaternion bone3RelativeToTarget;

		[Token(Token = "0x40001E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3 bone3DefaultLocalPosition;

		[Token(Token = "0x40001E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private Quaternion bone3DefaultLocalRotation;

		[Token(Token = "0x40001E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private Vector3 bone1Axis;

		[Token(Token = "0x40001E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector3 tipAxis;

		[Token(Token = "0x40001E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private Vector3 bone1TwistAxis;

		[Token(Token = "0x1700004D")]
		public bool initiated
		{
			[Token(Token = "0x60003AA")]
			[Address(RVA = "0xEC211C", Offset = "0xEC211C", VA = "0xEC211C")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60003AB")]
			[Address(RVA = "0xEC2124", Offset = "0xEC2124", VA = "0xEC2124")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700004E")]
		public Vector3 IKPosition
		{
			[Token(Token = "0x60003AC")]
			[Address(RVA = "0xEC2130", Offset = "0xEC2130", VA = "0xEC2130")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60003AD")]
			[Address(RVA = "0xEC2150", Offset = "0xEC2150", VA = "0xEC2150")]
			set
			{
			}
		}

		[Token(Token = "0x1700004F")]
		public Quaternion IKRotation
		{
			[Token(Token = "0x60003AE")]
			[Address(RVA = "0xEC2170", Offset = "0xEC2170", VA = "0xEC2170")]
			get
			{
				return default(Quaternion);
			}
			[Token(Token = "0x60003AF")]
			[Address(RVA = "0xEC2190", Offset = "0xEC2190", VA = "0xEC2190")]
			set
			{
			}
		}

		[Token(Token = "0x60003B0")]
		[Address(RVA = "0xEC21B0", Offset = "0xEC21B0", VA = "0xEC21B0")]
		public bool IsValid(ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x60003B1")]
		[Address(RVA = "0xEC22A8", Offset = "0xEC22A8", VA = "0xEC22A8")]
		public void Initiate(Transform hand, int index)
		{
		}

		[Token(Token = "0x60003B2")]
		[Address(RVA = "0xEC27A4", Offset = "0xEC27A4", VA = "0xEC27A4")]
		public void FixTransforms()
		{
		}

		[Token(Token = "0x60003B3")]
		[Address(RVA = "0xEC2870", Offset = "0xEC2870", VA = "0xEC2870")]
		public void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x60003B4")]
		[Address(RVA = "0xEC2928", Offset = "0xEC2928", VA = "0xEC2928")]
		public void Update(float masterWeight)
		{
		}

		[Token(Token = "0x60003B5")]
		[Address(RVA = "0xEC2F90", Offset = "0xEC2F90", VA = "0xEC2F90")]
		public Finger()
		{
		}
	}
	[Token(Token = "0x200006B")]
	public class FingerRig : SolverManager
	{
		[Token(Token = "0x40001EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("The master weight for all fingers.")]
		[Range(0f, 1f)]
		public float weight;

		[Token(Token = "0x40001ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Finger[] fingers;

		[Token(Token = "0x17000050")]
		public bool initiated
		{
			[Token(Token = "0x60003B6")]
			[Address(RVA = "0xEC2FA0", Offset = "0xEC2FA0", VA = "0xEC2FA0")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60003B7")]
			[Address(RVA = "0xEC2FA8", Offset = "0xEC2FA8", VA = "0xEC2FA8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60003B8")]
		[Address(RVA = "0xEC2FB4", Offset = "0xEC2FB4", VA = "0xEC2FB4")]
		public bool IsValid(ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x60003B9")]
		[Address(RVA = "0xEC3028", Offset = "0xEC3028", VA = "0xEC3028")]
		[ContextMenu("Auto-detect")]
		public void AutoDetect()
		{
		}

		[Token(Token = "0x60003BA")]
		[Address(RVA = "0xEC33A0", Offset = "0xEC33A0", VA = "0xEC33A0")]
		public void AddFinger(Transform bone1, Transform bone2, Transform bone3, Transform tip, [Optional] Transform target)
		{
		}

		[Token(Token = "0x60003BB")]
		[Address(RVA = "0xEC3558", Offset = "0xEC3558", VA = "0xEC3558")]
		public void RemoveFinger(int index)
		{
		}

		[Token(Token = "0x60003BC")]
		[Address(RVA = "0xEC32B0", Offset = "0xEC32B0", VA = "0xEC32B0")]
		private void AddChildrenRecursive(Transform parent, ref Transform[] array)
		{
		}

		[Token(Token = "0x60003BD")]
		[Address(RVA = "0xEC36D4", Offset = "0xEC36D4", VA = "0xEC36D4", Slot = "4")]
		protected override void InitiateSolver()
		{
		}

		[Token(Token = "0x60003BE")]
		[Address(RVA = "0xEC377C", Offset = "0xEC377C", VA = "0xEC377C")]
		public void UpdateFingerSolvers()
		{
		}

		[Token(Token = "0x60003BF")]
		[Address(RVA = "0xEC37E0", Offset = "0xEC37E0", VA = "0xEC37E0")]
		public void FixFingerTransforms()
		{
		}

		[Token(Token = "0x60003C0")]
		[Address(RVA = "0xEC3848", Offset = "0xEC3848", VA = "0xEC3848")]
		public void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x60003C1")]
		[Address(RVA = "0xEC38A4", Offset = "0xEC38A4", VA = "0xEC38A4", Slot = "5")]
		protected override void UpdateSolver()
		{
		}

		[Token(Token = "0x60003C2")]
		[Address(RVA = "0xEC38A8", Offset = "0xEC38A8", VA = "0xEC38A8", Slot = "6")]
		protected override void FixTransforms()
		{
		}

		[Token(Token = "0x60003C3")]
		[Address(RVA = "0xEC38BC", Offset = "0xEC38BC", VA = "0xEC38BC")]
		public FingerRig()
		{
		}
	}
	[Token(Token = "0x200006C")]
	public abstract class Grounder : MonoBehaviour
	{
		[Token(Token = "0x200006D")]
		public delegate void GrounderDelegate();

		[Token(Token = "0x40001EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0f, 1f)]
		[Tooltip("The master weight. Use this to fade in/out the grounding effect.")]
		public float weight;

		[Token(Token = "0x40001F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The Grounding solver. Not to confuse with IK solvers.")]
		public Grounding solver;

		[Token(Token = "0x40001F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GrounderDelegate OnPreGrounder;

		[Token(Token = "0x40001F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GrounderDelegate OnPostGrounder;

		[Token(Token = "0x17000051")]
		public bool initiated
		{
			[Token(Token = "0x60003C5")]
			[Address(RVA = "0xEC3930", Offset = "0xEC3930", VA = "0xEC3930")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60003C6")]
			[Address(RVA = "0xEC3938", Offset = "0xEC3938", VA = "0xEC3938")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x60003C4")]
		public abstract void ResetPosition();

		[Token(Token = "0x60003C7")]
		[Address(RVA = "0xEC3944", Offset = "0xEC3944", VA = "0xEC3944")]
		protected Vector3 GetSpineOffsetTarget()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60003C8")]
		[Address(RVA = "0xEC3BF4", Offset = "0xEC3BF4", VA = "0xEC3BF4")]
		protected void LogWarning(string message)
		{
		}

		[Token(Token = "0x60003C9")]
		[Address(RVA = "0xEC3A08", Offset = "0xEC3A08", VA = "0xEC3A08")]
		private Vector3 GetLegSpineBendVector(Grounding.Leg leg)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60003CA")]
		[Address(RVA = "0xEC3C18", Offset = "0xEC3C18", VA = "0xEC3C18")]
		private Vector3 GetLegSpineTangent(Grounding.Leg leg)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60003CB")]
		protected abstract void OpenUserManual();

		[Token(Token = "0x60003CC")]
		protected abstract void OpenScriptReference();

		[Token(Token = "0x60003CD")]
		[Address(RVA = "0xEC3D8C", Offset = "0xEC3D8C", VA = "0xEC3D8C")]
		protected Grounder()
		{
		}
	}
	[Token(Token = "0x200006E")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Grounder/Grounder Biped")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page9.html")]
	public class GrounderBipedIK : Grounder
	{
		[Token(Token = "0x40001F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The BipedIK componet.")]
		public BipedIK ik;

		[Token(Token = "0x40001F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("The amount of spine bending towards upward slopes.")]
		public float spineBend;

		[Token(Token = "0x40001F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("The interpolation speed of spine bending.")]
		public float spineSpeed;

		[Token(Token = "0x40001F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Transform[] feet;

		[Token(Token = "0x40001F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Quaternion[] footRotations;

		[Token(Token = "0x40001F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 animatedPelvisLocalPosition;

		[Token(Token = "0x40001FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector3 solvedPelvisLocalPosition;

		[Token(Token = "0x40001FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 spineOffset;

		[Token(Token = "0x40001FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private float lastWeight;

		[Token(Token = "0x60003D2")]
		[Address(RVA = "0xEC3F14", Offset = "0xEC3F14", VA = "0xEC3F14", Slot = "5")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x60003D3")]
		[Address(RVA = "0xEC3F58", Offset = "0xEC3F58", VA = "0xEC3F58", Slot = "6")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x60003D4")]
		[Address(RVA = "0xEC3F9C", Offset = "0xEC3F9C", VA = "0xEC3F9C", Slot = "4")]
		public override void ResetPosition()
		{
		}

		[Token(Token = "0x60003D5")]
		[Address(RVA = "0xEC4008", Offset = "0xEC4008", VA = "0xEC4008")]
		private bool IsReadyToInitiate()
		{
			return default(bool);
		}

		[Token(Token = "0x60003D6")]
		[Address(RVA = "0xEC40A8", Offset = "0xEC40A8", VA = "0xEC40A8")]
		private void Update()
		{
		}

		[Token(Token = "0x60003D7")]
		[Address(RVA = "0xEC40FC", Offset = "0xEC40FC", VA = "0xEC40FC")]
		private void Initiate()
		{
		}

		[Token(Token = "0x60003D8")]
		[Address(RVA = "0xEC445C", Offset = "0xEC445C", VA = "0xEC445C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60003D9")]
		[Address(RVA = "0xEC449C", Offset = "0xEC449C", VA = "0xEC449C")]
		private void OnSolverUpdate()
		{
		}

		[Token(Token = "0x60003DA")]
		[Address(RVA = "0xEC493C", Offset = "0xEC493C", VA = "0xEC493C")]
		private void SetLegIK(IKSolverLimb limb, int index)
		{
		}

		[Token(Token = "0x60003DB")]
		[Address(RVA = "0xEC49FC", Offset = "0xEC49FC", VA = "0xEC49FC")]
		private void OnPostSolverUpdate()
		{
		}

		[Token(Token = "0x60003DC")]
		[Address(RVA = "0xEC4BCC", Offset = "0xEC4BCC", VA = "0xEC4BCC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60003DD")]
		[Address(RVA = "0xEC4DA4", Offset = "0xEC4DA4", VA = "0xEC4DA4")]
		public GrounderBipedIK()
		{
		}
	}
	[Token(Token = "0x200006F")]
	[HelpURL("https://www.youtube.com/watch?v=9MiZiaJorws&index=6&list=PLVxSIA1OaTOu8Nos3CalXbJ2DrKnntMv6")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Grounder/Grounder Full Body Biped")]
	public class GrounderFBBIK : Grounder
	{
		[Serializable]
		[Token(Token = "0x2000070")]
		public class SpineEffector
		{
			[Token(Token = "0x4000204")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The type of the effector.")]
			public FullBodyBipedEffector effectorType;

			[Token(Token = "0x4000205")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("The weight of horizontal bend offset towards the slope.")]
			public float horizontalWeight;

			[Token(Token = "0x4000206")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("The vertical bend offset weight.")]
			public float verticalWeight;

			[Token(Token = "0x60003EC")]
			[Address(RVA = "0xEC5B40", Offset = "0xEC5B40", VA = "0xEC5B40")]
			public SpineEffector()
			{
			}

			[Token(Token = "0x60003ED")]
			[Address(RVA = "0xEC5B50", Offset = "0xEC5B50", VA = "0xEC5B50")]
			public SpineEffector(FullBodyBipedEffector effectorType, float horizontalWeight, float verticalWeight)
			{
			}
		}

		[Token(Token = "0x40001FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Reference to the FBBIK componet.")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x40001FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("The amount of spine bending towards upward slopes.")]
		public float spineBend;

		[Token(Token = "0x40001FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("The interpolation speed of spine bending.")]
		public float spineSpeed;

		[Token(Token = "0x4000200")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public SpineEffector[] spine;

		[Token(Token = "0x4000201")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform[] feet;

		[Token(Token = "0x4000202")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 spineOffset;

		[Token(Token = "0x4000203")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private bool firstSolve;

		[Token(Token = "0x60003DE")]
		[Address(RVA = "0xEC4E48", Offset = "0xEC4E48", VA = "0xEC4E48")]
		[ContextMenu("TUTORIAL VIDEO")]
		private void OpenTutorial()
		{
		}

		[Token(Token = "0x60003DF")]
		[Address(RVA = "0xEC4E8C", Offset = "0xEC4E8C", VA = "0xEC4E8C", Slot = "5")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x60003E0")]
		[Address(RVA = "0xEC4ED0", Offset = "0xEC4ED0", VA = "0xEC4ED0", Slot = "6")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x60003E1")]
		[Address(RVA = "0xEC4F14", Offset = "0xEC4F14", VA = "0xEC4F14", Slot = "4")]
		public override void ResetPosition()
		{
		}

		[Token(Token = "0x60003E2")]
		[Address(RVA = "0xEC4F80", Offset = "0xEC4F80", VA = "0xEC4F80")]
		private bool IsReadyToInitiate()
		{
			return default(bool);
		}

		[Token(Token = "0x60003E3")]
		[Address(RVA = "0xEC5008", Offset = "0xEC5008", VA = "0xEC5008")]
		private void Update()
		{
		}

		[Token(Token = "0x60003E4")]
		[Address(RVA = "0xEC52B8", Offset = "0xEC52B8", VA = "0xEC52B8")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60003E5")]
		[Address(RVA = "0xEC52C4", Offset = "0xEC52C4", VA = "0xEC52C4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60003E6")]
		[Address(RVA = "0xEC5064", Offset = "0xEC5064", VA = "0xEC5064")]
		private void Initiate()
		{
		}

		[Token(Token = "0x60003E7")]
		[Address(RVA = "0xEC52D0", Offset = "0xEC52D0", VA = "0xEC52D0")]
		private void OnSolverUpdate()
		{
		}

		[Token(Token = "0x60003E8")]
		[Address(RVA = "0xEC5684", Offset = "0xEC5684", VA = "0xEC5684")]
		private void SetLegIK(IKEffector effector, Grounding.Leg leg)
		{
		}

		[Token(Token = "0x60003E9")]
		[Address(RVA = "0xEC5808", Offset = "0xEC5808", VA = "0xEC5808")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60003EA")]
		[Address(RVA = "0xEC5968", Offset = "0xEC5968", VA = "0xEC5968")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60003EB")]
		[Address(RVA = "0xEC5A9C", Offset = "0xEC5A9C", VA = "0xEC5A9C")]
		public GrounderFBBIK()
		{
		}
	}
	[Token(Token = "0x2000071")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page9.html")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Grounder/Grounder IK")]
	public class GrounderIK : Grounder
	{
		[Token(Token = "0x4000207")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public IK[] legs;

		[Token(Token = "0x4000208")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("The pelvis transform. Common ancestor of all the legs.")]
		public Transform pelvis;

		[Token(Token = "0x4000209")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The root Transform of the character, with the rigidbody and the collider.")]
		public Transform characterRoot;

		[Token(Token = "0x400020A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Range(0f, 1f)]
		[Tooltip("The weight of rotating the character root to the ground normal (range: 0 - 1).")]
		public float rootRotationWeight;

		[Token(Token = "0x400020B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("The speed of rotating the character root to the ground normal (range: 0 - inf).")]
		public float rootRotationSpeed;

		[Token(Token = "0x400020C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The maximum angle of root rotation (range: 0 - 90).")]
		public float maxRootRotationAngle;

		[Token(Token = "0x400020D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Transform[] feet;

		[Token(Token = "0x400020E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Quaternion[] footRotations;

		[Token(Token = "0x400020F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 animatedPelvisLocalPosition;

		[Token(Token = "0x4000210")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private Vector3 solvedPelvisLocalPosition;

		[Token(Token = "0x4000211")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private int solvedFeet;

		[Token(Token = "0x4000212")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private bool solved;

		[Token(Token = "0x4000213")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float lastWeight;

		[Token(Token = "0x4000214")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Rigidbody characterRootRigidbody;

		[Token(Token = "0x60003EE")]
		[Address(RVA = "0xEC5B94", Offset = "0xEC5B94", VA = "0xEC5B94", Slot = "5")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x60003EF")]
		[Address(RVA = "0xEC5BD8", Offset = "0xEC5BD8", VA = "0xEC5BD8", Slot = "6")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x60003F0")]
		[Address(RVA = "0xEC5C1C", Offset = "0xEC5C1C", VA = "0xEC5C1C", Slot = "4")]
		public override void ResetPosition()
		{
		}

		[Token(Token = "0x60003F1")]
		[Address(RVA = "0xEC5C38", Offset = "0xEC5C38", VA = "0xEC5C38")]
		private bool IsReadyToInitiate()
		{
			return default(bool);
		}

		[Token(Token = "0x60003F2")]
		[Address(RVA = "0xEC5E54", Offset = "0xEC5E54", VA = "0xEC5E54")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60003F3")]
		[Address(RVA = "0xEC5F34", Offset = "0xEC5F34", VA = "0xEC5F34")]
		private void Update()
		{
		}

		[Token(Token = "0x60003F4")]
		[Address(RVA = "0xEC64C8", Offset = "0xEC64C8", VA = "0xEC64C8")]
		private void Initiate()
		{
		}

		[Token(Token = "0x60003F5")]
		[Address(RVA = "0xEC6984", Offset = "0xEC6984", VA = "0xEC6984")]
		private void OnSolverUpdate()
		{
		}

		[Token(Token = "0x60003F6")]
		[Address(RVA = "0xEC6B34", Offset = "0xEC6B34", VA = "0xEC6B34")]
		private void SetLegIK(int index)
		{
		}

		[Token(Token = "0x60003F7")]
		[Address(RVA = "0xEC6EBC", Offset = "0xEC6EBC", VA = "0xEC6EBC")]
		private void OnPostSolverUpdate()
		{
		}

		[Token(Token = "0x60003F8")]
		[Address(RVA = "0xEC7094", Offset = "0xEC7094", VA = "0xEC7094")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60003F9")]
		[Address(RVA = "0xEC72BC", Offset = "0xEC72BC", VA = "0xEC72BC")]
		public GrounderIK()
		{
		}
	}
	[Token(Token = "0x2000072")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page9.html")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Grounder/Grounder Quadruped")]
	public class GrounderQuadruped : Grounder
	{
		[Token(Token = "0x2000073")]
		public struct Foot
		{
			[Token(Token = "0x4000232")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IKSolver solver;

			[Token(Token = "0x4000233")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Transform transform;

			[Token(Token = "0x4000234")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Quaternion rotation;

			[Token(Token = "0x4000235")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Grounding.Leg leg;

			[Token(Token = "0x600040C")]
			[Address(RVA = "0xF65364", Offset = "0xF65364", VA = "0xF65364")]
			public Foot(IKSolver solver, Transform transform)
			{
			}
		}

		[Token(Token = "0x4000215")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The Grounding solver for the forelegs.")]
		public Grounding forelegSolver;

		[Token(Token = "0x4000216")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Range(0f, 1f)]
		[Tooltip("The weight of rotating the character root to the ground angle (range: 0 - 1).")]
		public float rootRotationWeight;

		[Token(Token = "0x4000217")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Range(-90f, 0f)]
		[Tooltip("The maximum angle of rotating the quadruped downwards (going downhill, range: -90 - 0).")]
		public float minRootRotation;

		[Token(Token = "0x4000218")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Range(0f, 90f)]
		[Tooltip("The maximum angle of rotating the quadruped upwards (going uphill, range: 0 - 90).")]
		public float maxRootRotation;

		[Token(Token = "0x4000219")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Tooltip("The speed of interpolating the character root rotation (range: 0 - inf).")]
		public float rootRotationSpeed;

		[Token(Token = "0x400021A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The maximum IK offset for the legs (range: 0 - inf).")]
		public float maxLegOffset;

		[Token(Token = "0x400021B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("The maximum IK offset for the forelegs (range: 0 - inf).")]
		public float maxForeLegOffset;

		[Token(Token = "0x400021C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The weight of maintaining the head's rotation as it was before solving the Grounding (range: 0 - 1).")]
		[Range(0f, 1f)]
		public float maintainHeadRotationWeight;

		[Token(Token = "0x400021D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The root Transform of the character, with the rigidbody and the collider.")]
		public Transform characterRoot;

		[Token(Token = "0x400021E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The pelvis transform. Common ancestor of both legs and the spine.")]
		public Transform pelvis;

		[Token(Token = "0x400021F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The last bone in the spine that is the common parent for both forelegs.")]
		public Transform lastSpineBone;

		[Token(Token = "0x4000220")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The head (optional, if you intend to maintain it's rotation).")]
		public Transform head;

		[Token(Token = "0x4000221")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public IK[] legs;

		[Token(Token = "0x4000222")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public IK[] forelegs;

		[Token(Token = "0x4000223")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[HideInInspector]
		public Vector3 gravity;

		[Token(Token = "0x4000224")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Foot[] feet;

		[Token(Token = "0x4000225")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector3 animatedPelvisLocalPosition;

		[Token(Token = "0x4000226")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private Quaternion animatedPelvisLocalRotation;

		[Token(Token = "0x4000227")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private Quaternion animatedHeadLocalRotation;

		[Token(Token = "0x4000228")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private Vector3 solvedPelvisLocalPosition;

		[Token(Token = "0x4000229")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Quaternion solvedPelvisLocalRotation;

		[Token(Token = "0x400022A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Quaternion solvedHeadLocalRotation;

		[Token(Token = "0x400022B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private int solvedFeet;

		[Token(Token = "0x400022C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		private bool solved;

		[Token(Token = "0x400022D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private float angle;

		[Token(Token = "0x400022E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private Transform forefeetRoot;

		[Token(Token = "0x400022F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Quaternion headRotation;

		[Token(Token = "0x4000230")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private float lastWeight;

		[Token(Token = "0x4000231")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private Rigidbody characterRootRigidbody;

		[Token(Token = "0x60003FA")]
		[Address(RVA = "0xEC7360", Offset = "0xEC7360", VA = "0xEC7360", Slot = "5")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x60003FB")]
		[Address(RVA = "0xEC73A4", Offset = "0xEC73A4", VA = "0xEC73A4", Slot = "6")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x60003FC")]
		[Address(RVA = "0xEC73E8", Offset = "0xEC73E8", VA = "0xEC73E8", Slot = "4")]
		public override void ResetPosition()
		{
		}

		[Token(Token = "0x60003FD")]
		[Address(RVA = "0xEC7418", Offset = "0xEC7418", VA = "0xEC7418")]
		private bool IsReadyToInitiate()
		{
			return default(bool);
		}

		[Token(Token = "0x60003FE")]
		[Address(RVA = "0xEC751C", Offset = "0xEC751C", VA = "0xEC751C")]
		private bool IsReadyToInitiateLegs(IK[] ikComponents)
		{
			return default(bool);
		}

		[Token(Token = "0x60003FF")]
		[Address(RVA = "0xEC7710", Offset = "0xEC7710", VA = "0xEC7710")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000400")]
		[Address(RVA = "0xEC7774", Offset = "0xEC7774", VA = "0xEC7774")]
		private void Update()
		{
		}

		[Token(Token = "0x6000401")]
		[Address(RVA = "0xEC77CC", Offset = "0xEC77CC", VA = "0xEC77CC")]
		private void Initiate()
		{
		}

		[Token(Token = "0x6000402")]
		[Address(RVA = "0xEC7B20", Offset = "0xEC7B20", VA = "0xEC7B20")]
		private Transform[] InitiateFeet(IK[] ikComponents, ref Foot[] f, int indexOffset)
		{
			return null;
		}

		[Token(Token = "0x6000403")]
		[Address(RVA = "0xEC7EC0", Offset = "0xEC7EC0", VA = "0xEC7EC0")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000404")]
		[Address(RVA = "0xEC7F50", Offset = "0xEC7F50", VA = "0xEC7F50")]
		private void RootRotation()
		{
		}

		[Token(Token = "0x6000405")]
		[Address(RVA = "0xEC83C8", Offset = "0xEC83C8", VA = "0xEC83C8")]
		private void OnSolverUpdate()
		{
		}

		[Token(Token = "0x6000406")]
		[Address(RVA = "0xEC8A90", Offset = "0xEC8A90", VA = "0xEC8A90")]
		private void UpdateForefeetRoot()
		{
		}

		[Token(Token = "0x6000407")]
		[Address(RVA = "0xEC8D48", Offset = "0xEC8D48", VA = "0xEC8D48")]
		private void SetFootIK(Foot foot, float maxOffset)
		{
		}

		[Token(Token = "0x6000408")]
		[Address(RVA = "0xEC8E7C", Offset = "0xEC8E7C", VA = "0xEC8E7C")]
		private void OnPostSolverUpdate()
		{
		}

		[Token(Token = "0x6000409")]
		[Address(RVA = "0xEC9144", Offset = "0xEC9144", VA = "0xEC9144")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600040A")]
		[Address(RVA = "0xEC9174", Offset = "0xEC9174", VA = "0xEC9174")]
		private void DestroyLegs(IK[] ikComponents)
		{
		}

		[Token(Token = "0x600040B")]
		[Address(RVA = "0xEC9394", Offset = "0xEC9394", VA = "0xEC9394")]
		public GrounderQuadruped()
		{
		}
	}
	[Token(Token = "0x2000074")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Grounder/Grounder VRIK")]
	[HelpURL("https://www.youtube.com/watch?v=9MiZiaJorws&index=6&list=PLVxSIA1OaTOu8Nos3CalXbJ2DrKnntMv6")]
	public class GrounderVRIK : Grounder
	{
		[Token(Token = "0x4000236")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Reference to the VRIK componet.")]
		public VRIK ik;

		[Token(Token = "0x4000237")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Transform[] feet;

		[Token(Token = "0x600040D")]
		[Address(RVA = "0xF653C4", Offset = "0xF653C4", VA = "0xF653C4")]
		[ContextMenu("TUTORIAL VIDEO")]
		private void OpenTutorial()
		{
		}

		[Token(Token = "0x600040E")]
		[Address(RVA = "0xF65408", Offset = "0xF65408", VA = "0xF65408", Slot = "5")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x600040F")]
		[Address(RVA = "0xF6544C", Offset = "0xF6544C", VA = "0xF6544C", Slot = "6")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000410")]
		[Address(RVA = "0xF65490", Offset = "0xF65490", VA = "0xF65490", Slot = "4")]
		public override void ResetPosition()
		{
		}

		[Token(Token = "0x6000411")]
		[Address(RVA = "0xF65520", Offset = "0xF65520", VA = "0xF65520")]
		private bool IsReadyToInitiate()
		{
			return default(bool);
		}

		[Token(Token = "0x6000412")]
		[Address(RVA = "0xF655A8", Offset = "0xF655A8", VA = "0xF655A8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000413")]
		[Address(RVA = "0xF655FC", Offset = "0xF655FC", VA = "0xF655FC")]
		private void Initiate()
		{
		}

		[Token(Token = "0x6000414")]
		[Address(RVA = "0xF65B44", Offset = "0xF65B44", VA = "0xF65B44")]
		private void OnSolverUpdate()
		{
		}

		[Token(Token = "0x6000415")]
		[Address(RVA = "0xF65F2C", Offset = "0xF65F2C", VA = "0xF65F2C")]
		private void SetLegIK(IKSolverVR.PositionOffset positionOffset, Transform bone, Grounding.Leg leg)
		{
		}

		[Token(Token = "0x6000416")]
		[Address(RVA = "0xF65FB0", Offset = "0xF65FB0", VA = "0xF65FB0")]
		private void OnPostSolverUpdate()
		{
		}

		[Token(Token = "0x6000417")]
		[Address(RVA = "0xF6624C", Offset = "0xF6624C", VA = "0xF6624C")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000418")]
		[Address(RVA = "0xF663AC", Offset = "0xF663AC", VA = "0xF663AC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000419")]
		[Address(RVA = "0xF66574", Offset = "0xF66574", VA = "0xF66574")]
		public GrounderVRIK()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000075")]
	public class Grounding
	{
		[Serializable]
		[Token(Token = "0x2000076")]
		public enum Quality
		{
			[Token(Token = "0x4000251")]
			Fastest,
			[Token(Token = "0x4000252")]
			Simple,
			[Token(Token = "0x4000253")]
			Best
		}

		[Token(Token = "0x2000077")]
		public class Leg
		{
			[Token(Token = "0x4000256")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Quaternion rotationOffset;

			[Token(Token = "0x400025C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public bool invertFootCenter;

			[Token(Token = "0x400025F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			private Grounding grounding;

			[Token(Token = "0x4000260")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
			private float lastTime;

			[Token(Token = "0x4000261")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
			private float deltaTime;

			[Token(Token = "0x4000262")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			private Vector3 lastPosition;

			[Token(Token = "0x4000263")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
			private Quaternion toHitNormal;

			[Token(Token = "0x4000264")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
			private Quaternion r;

			[Token(Token = "0x4000265")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
			private Vector3 up;

			[Token(Token = "0x4000266")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
			private bool doOverrideFootPosition;

			[Token(Token = "0x4000267")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
			private Vector3 overrideFootPosition;

			[Token(Token = "0x4000268")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
			private Vector3 transformPosition;

			[Token(Token = "0x1700005A")]
			public bool isGrounded
			{
				[Token(Token = "0x6000432")]
				[Address(RVA = "0xF67C74", Offset = "0xF67C74", VA = "0xF67C74")]
				[CompilerGenerated]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6000433")]
				[Address(RVA = "0xF67C7C", Offset = "0xF67C7C", VA = "0xF67C7C")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x1700005B")]
			public Vector3 IKPosition
			{
				[Token(Token = "0x6000434")]
				[Address(RVA = "0xF67C88", Offset = "0xF67C88", VA = "0xF67C88")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6000435")]
				[Address(RVA = "0xF67C94", Offset = "0xF67C94", VA = "0xF67C94")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x1700005C")]
			public bool initiated
			{
				[Token(Token = "0x6000436")]
				[Address(RVA = "0xF67CA0", Offset = "0xF67CA0", VA = "0xF67CA0")]
				[CompilerGenerated]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6000437")]
				[Address(RVA = "0xF67CA8", Offset = "0xF67CA8", VA = "0xF67CA8")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x1700005D")]
			public float heightFromGround
			{
				[Token(Token = "0x6000438")]
				[Address(RVA = "0xF67CB4", Offset = "0xF67CB4", VA = "0xF67CB4")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000439")]
				[Address(RVA = "0xF67CBC", Offset = "0xF67CBC", VA = "0xF67CBC")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x1700005E")]
			public Vector3 velocity
			{
				[Token(Token = "0x600043A")]
				[Address(RVA = "0xF67CC4", Offset = "0xF67CC4", VA = "0xF67CC4")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x600043B")]
				[Address(RVA = "0xF67CD0", Offset = "0xF67CD0", VA = "0xF67CD0")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x1700005F")]
			public Transform transform
			{
				[Token(Token = "0x600043C")]
				[Address(RVA = "0xF67CDC", Offset = "0xF67CDC", VA = "0xF67CDC")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x600043D")]
				[Address(RVA = "0xF67CE4", Offset = "0xF67CE4", VA = "0xF67CE4")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000060")]
			public float IKOffset
			{
				[Token(Token = "0x600043E")]
				[Address(RVA = "0xF67CEC", Offset = "0xF67CEC", VA = "0xF67CEC")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x600043F")]
				[Address(RVA = "0xF67CF4", Offset = "0xF67CF4", VA = "0xF67CF4")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000061")]
			public RaycastHit heelHit
			{
				[Token(Token = "0x6000440")]
				[Address(RVA = "0xF67CFC", Offset = "0xF67CFC", VA = "0xF67CFC")]
				[CompilerGenerated]
				get
				{
					return default(RaycastHit);
				}
				[Token(Token = "0x6000441")]
				[Address(RVA = "0xF67D14", Offset = "0xF67D14", VA = "0xF67D14")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000062")]
			public RaycastHit capsuleHit
			{
				[Token(Token = "0x6000442")]
				[Address(RVA = "0xF67D34", Offset = "0xF67D34", VA = "0xF67D34")]
				[CompilerGenerated]
				get
				{
					return default(RaycastHit);
				}
				[Token(Token = "0x6000443")]
				[Address(RVA = "0xF67D4C", Offset = "0xF67D4C", VA = "0xF67D4C")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000063")]
			public RaycastHit GetHitPoint
			{
				[Token(Token = "0x6000444")]
				[Address(RVA = "0xF67D6C", Offset = "0xF67D6C", VA = "0xF67D6C")]
				get
				{
					return default(RaycastHit);
				}
			}

			[Token(Token = "0x17000064")]
			public float stepHeightFromGround
			{
				[Token(Token = "0x600044A")]
				[Address(RVA = "0xF68698", Offset = "0xF68698", VA = "0xF68698")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x17000065")]
			private float rootYOffset
			{
				[Token(Token = "0x6000453")]
				[Address(RVA = "0xF687E8", Offset = "0xF687E8", VA = "0xF687E8")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x6000445")]
			[Address(RVA = "0xF67DB4", Offset = "0xF67DB4", VA = "0xF67DB4")]
			public void SetFootPosition(Vector3 position)
			{
			}

			[Token(Token = "0x6000446")]
			[Address(RVA = "0xF66B0C", Offset = "0xF66B0C", VA = "0xF66B0C")]
			public void Initiate(Grounding grounding, Transform transform)
			{
			}

			[Token(Token = "0x6000447")]
			[Address(RVA = "0xF67DC8", Offset = "0xF67DC8", VA = "0xF67DC8")]
			public void OnEnable()
			{
			}

			[Token(Token = "0x6000448")]
			[Address(RVA = "0xF67854", Offset = "0xF67854", VA = "0xF67854")]
			public void Reset()
			{
			}

			[Token(Token = "0x6000449")]
			[Address(RVA = "0xF66C20", Offset = "0xF66C20", VA = "0xF66C20")]
			public void Process()
			{
			}

			[Token(Token = "0x600044B")]
			[Address(RVA = "0xF682AC", Offset = "0xF682AC", VA = "0xF682AC")]
			private RaycastHit GetCapsuleHit(Vector3 offsetFromHeel)
			{
				return default(RaycastHit);
			}

			[Token(Token = "0x600044C")]
			[Address(RVA = "0xF67E4C", Offset = "0xF67E4C", VA = "0xF67E4C")]
			private RaycastHit GetRaycastHit(Vector3 offsetFromHeel)
			{
				return default(RaycastHit);
			}

			[Token(Token = "0x600044D")]
			[Address(RVA = "0xF6872C", Offset = "0xF6872C", VA = "0xF6872C")]
			private Vector3 RotateNormal(Vector3 normal)
			{
				return default(Vector3);
			}

			[Token(Token = "0x600044E")]
			[Address(RVA = "0xF68114", Offset = "0xF68114", VA = "0xF68114")]
			private void SetFootToPoint(Vector3 normal, Vector3 point)
			{
			}

			[Token(Token = "0x600044F")]
			[Address(RVA = "0xF68194", Offset = "0xF68194", VA = "0xF68194")]
			private void SetFootToPlane(Vector3 planeNormal, Vector3 planePoint, Vector3 heelHitPoint)
			{
			}

			[Token(Token = "0x6000450")]
			[Address(RVA = "0xF68798", Offset = "0xF68798", VA = "0xF68798")]
			private float GetHeightFromGround(Vector3 hitPoint)
			{
				return default(float);
			}

			[Token(Token = "0x6000451")]
			[Address(RVA = "0xF686CC", Offset = "0xF686CC", VA = "0xF686CC")]
			private void RotateFoot()
			{
			}

			[Token(Token = "0x6000452")]
			[Address(RVA = "0xF68874", Offset = "0xF68874", VA = "0xF68874")]
			private Quaternion GetRotationOffsetTarget()
			{
				return default(Quaternion);
			}

			[Token(Token = "0x6000454")]
			[Address(RVA = "0xF66A6C", Offset = "0xF66A6C", VA = "0xF66A6C")]
			public Leg()
			{
			}
		}

		[Token(Token = "0x2000078")]
		public class Pelvis
		{
			[Token(Token = "0x400026B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private Grounding grounding;

			[Token(Token = "0x400026C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Vector3 lastRootPosition;

			[Token(Token = "0x400026D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float damperF;

			[Token(Token = "0x400026E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private bool initiated;

			[Token(Token = "0x400026F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private float lastTime;

			[Token(Token = "0x17000066")]
			public Vector3 IKOffset
			{
				[Token(Token = "0x6000455")]
				[Address(RVA = "0xF68A24", Offset = "0xF68A24", VA = "0xF68A24")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6000456")]
				[Address(RVA = "0xF68A30", Offset = "0xF68A30", VA = "0xF68A30")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000067")]
			public float heightOffset
			{
				[Token(Token = "0x6000457")]
				[Address(RVA = "0xF68A3C", Offset = "0xF68A3C", VA = "0xF68A3C")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000458")]
				[Address(RVA = "0xF68A44", Offset = "0xF68A44", VA = "0xF68A44")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x6000459")]
			[Address(RVA = "0xF66BE4", Offset = "0xF66BE4", VA = "0xF66BE4")]
			public void Initiate(Grounding grounding)
			{
			}

			[Token(Token = "0x600045A")]
			[Address(RVA = "0xF67784", Offset = "0xF67784", VA = "0xF67784")]
			public void Reset()
			{
			}

			[Token(Token = "0x600045B")]
			[Address(RVA = "0xF68A4C", Offset = "0xF68A4C", VA = "0xF68A4C")]
			public void OnEnable()
			{
			}

			[Token(Token = "0x600045C")]
			[Address(RVA = "0xF673EC", Offset = "0xF673EC", VA = "0xF673EC")]
			public void Process(float lowestOffset, float highestOffset, bool isGrounded)
			{
			}

			[Token(Token = "0x600045D")]
			[Address(RVA = "0xF66B04", Offset = "0xF66B04", VA = "0xF66B04")]
			public Pelvis()
			{
			}
		}

		[Token(Token = "0x4000238")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Tooltip("Layers to ground the character to. Make sure to exclude the layer of the character controller.")]
		public LayerMask layers;

		[Token(Token = "0x4000239")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[Tooltip("Max step height. Maximum vertical distance of Grounding from the root of the character.")]
		public float maxStep;

		[Token(Token = "0x400023A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The height offset of the root.")]
		public float heightOffset;

		[Token(Token = "0x400023B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("The speed of moving the feet up/down.")]
		public float footSpeed;

		[Token(Token = "0x400023C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("CapsuleCast radius. Should match approximately with the size of the feet.")]
		public float footRadius;

		[Token(Token = "0x400023D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[HideInInspector]
		[Tooltip("Offset of the foot center along character forward axis.")]
		public float footCenterOffset;

		[Token(Token = "0x400023E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Amount of velocity based prediction of the foot positions.")]
		public float prediction;

		[Token(Token = "0x400023F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Range(0f, 1f)]
		[Tooltip("Weight of rotating the feet to the ground normal offset.")]
		public float footRotationWeight;

		[Token(Token = "0x4000240")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Speed of slerping the feet to their grounded rotations.")]
		public float footRotationSpeed;

		[Token(Token = "0x4000241")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("Max Foot Rotation Angle. Max angular offset from the foot's rotation.")]
		[Range(0f, 90f)]
		public float maxFootRotationAngle;

		[Token(Token = "0x4000242")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("If true, solver will rotate with the character root so the character can be grounded for example to spherical planets. For performance reasons leave this off unless needed.")]
		public bool rotateSolver;

		[Token(Token = "0x4000243")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("The speed of moving the character up/down.")]
		public float pelvisSpeed;

		[Token(Token = "0x4000244")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Range(0f, 1f)]
		[Tooltip("Used for smoothing out vertical pelvis movement (range 0 - 1).")]
		public float pelvisDamper;

		[Token(Token = "0x4000245")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("The weight of lowering the pelvis to the lowest foot.")]
		public float lowerPelvisWeight;

		[Token(Token = "0x4000246")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("The weight of lifting the pelvis to the highest foot. This is useful when you don't want the feet to go too high relative to the body when crouching.")]
		public float liftPelvisWeight;

		[Token(Token = "0x4000247")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("The radius of the spherecast from the root that determines whether the character root is grounded.")]
		public float rootSphereCastRadius;

		[Token(Token = "0x4000248")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("If false, keeps the foot that is over a ledge at the root level. If true, lowers the overstepping foot and body by the 'Max Step' value.")]
		public bool overstepFallsDown;

		[Token(Token = "0x4000249")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Tooltip("The raycasting quality. Fastest is a single raycast per foot, Simple is three raycasts, Best is one raycast and a capsule cast per foot.")]
		public Quality quality;

		[Token(Token = "0x400024F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private bool initiated;

		[Token(Token = "0x17000052")]
		public Leg[] legs
		{
			[Token(Token = "0x600041A")]
			[Address(RVA = "0xF665D8", Offset = "0xF665D8", VA = "0xF665D8")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600041B")]
			[Address(RVA = "0xF665E0", Offset = "0xF665E0", VA = "0xF665E0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000053")]
		public Pelvis pelvis
		{
			[Token(Token = "0x600041C")]
			[Address(RVA = "0xF665E8", Offset = "0xF665E8", VA = "0xF665E8")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600041D")]
			[Address(RVA = "0xF665F0", Offset = "0xF665F0", VA = "0xF665F0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000054")]
		public bool isGrounded
		{
			[Token(Token = "0x600041E")]
			[Address(RVA = "0xF665F8", Offset = "0xF665F8", VA = "0xF665F8")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600041F")]
			[Address(RVA = "0xF66600", Offset = "0xF66600", VA = "0xF66600")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000055")]
		public Transform root
		{
			[Token(Token = "0x6000420")]
			[Address(RVA = "0xF6660C", Offset = "0xF6660C", VA = "0xF6660C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000421")]
			[Address(RVA = "0xF66614", Offset = "0xF66614", VA = "0xF66614")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000056")]
		public RaycastHit rootHit
		{
			[Token(Token = "0x6000422")]
			[Address(RVA = "0xF6661C", Offset = "0xF6661C", VA = "0xF6661C")]
			[CompilerGenerated]
			get
			{
				return default(RaycastHit);
			}
			[Token(Token = "0x6000423")]
			[Address(RVA = "0xF66634", Offset = "0xF66634", VA = "0xF66634")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000057")]
		public bool rootGrounded
		{
			[Token(Token = "0x6000424")]
			[Address(RVA = "0xF66654", Offset = "0xF66654", VA = "0xF66654")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000058")]
		public Vector3 up
		{
			[Token(Token = "0x600042C")]
			[Address(RVA = "0xF668FC", Offset = "0xF668FC", VA = "0xF668FC")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000059")]
		private bool useRootRotation
		{
			[Token(Token = "0x600042F")]
			[Address(RVA = "0xF67924", Offset = "0xF67924", VA = "0xF67924")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000425")]
		[Address(RVA = "0xF6669C", Offset = "0xF6669C", VA = "0xF6669C")]
		public RaycastHit GetRootHit(float maxDistanceMlp = 10f)
		{
			return default(RaycastHit);
		}

		[Token(Token = "0x6000426")]
		[Address(RVA = "0xF66964", Offset = "0xF66964", VA = "0xF66964")]
		public bool IsValid(ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000427")]
		[Address(RVA = "0xF65880", Offset = "0xF65880", VA = "0xF65880")]
		public void Initiate(Transform root, Transform[] feet)
		{
		}

		[Token(Token = "0x6000428")]
		[Address(RVA = "0xF65D38", Offset = "0xF65D38", VA = "0xF65D38")]
		public void Update()
		{
		}

		[Token(Token = "0x6000429")]
		[Address(RVA = "0xF6760C", Offset = "0xF6760C", VA = "0xF6760C")]
		public Vector3 GetLegsPlaneNormal()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600042A")]
		[Address(RVA = "0xF654A8", Offset = "0xF654A8", VA = "0xF654A8")]
		public void Reset()
		{
		}

		[Token(Token = "0x600042B")]
		[Address(RVA = "0xF66C08", Offset = "0xF66C08", VA = "0xF66C08")]
		public void LogWarning(string message)
		{
		}

		[Token(Token = "0x600042D")]
		[Address(RVA = "0xF679D8", Offset = "0xF679D8", VA = "0xF679D8")]
		public float GetVerticalOffset(Vector3 p1, Vector3 p2)
		{
			return default(float);
		}

		[Token(Token = "0x600042E")]
		[Address(RVA = "0xF67A5C", Offset = "0xF67A5C", VA = "0xF67A5C")]
		public Vector3 Flatten(Vector3 v)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000430")]
		[Address(RVA = "0xF67BB0", Offset = "0xF67BB0", VA = "0xF67BB0")]
		public Vector3 GetFootCenterOffset()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000431")]
		[Address(RVA = "0xF67C20", Offset = "0xF67C20", VA = "0xF67C20")]
		public Grounding()
		{
		}
	}
	[Token(Token = "0x2000079")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/Aim IK")]
	[HelpURL("https://www.youtube.com/watch?v=wT8fViZpLmQ&index=3&list=PLVxSIA1OaTOu8Nos3CalXbJ2DrKnntMv6")]
	public class AimIK : IK
	{
		[Token(Token = "0x4000270")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverAim solver;

		[Token(Token = "0x600045E")]
		[Address(RVA = "0xF68AA0", Offset = "0xF68AA0", VA = "0xF68AA0", Slot = "8")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x600045F")]
		[Address(RVA = "0xF68AE4", Offset = "0xF68AE4", VA = "0xF68AE4", Slot = "9")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000460")]
		[Address(RVA = "0xF68B28", Offset = "0xF68B28", VA = "0xF68B28")]
		[ContextMenu("TUTORIAL VIDEO")]
		private void OpenSetupTutorial()
		{
		}

		[Token(Token = "0x6000461")]
		[Address(RVA = "0xF68B6C", Offset = "0xF68B6C", VA = "0xF68B6C")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000462")]
		[Address(RVA = "0xF68BB0", Offset = "0xF68BB0", VA = "0xF68BB0")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000463")]
		[Address(RVA = "0xF68BF4", Offset = "0xF68BF4", VA = "0xF68BF4", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6000464")]
		[Address(RVA = "0xF68BFC", Offset = "0xF68BFC", VA = "0xF68BFC")]
		public AimIK()
		{
		}
	}
	[Token(Token = "0x200007A")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/Arm IK")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page2.html")]
	public class ArmIK : IK
	{
		[Token(Token = "0x4000271")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverArm solver;

		[Token(Token = "0x6000465")]
		[Address(RVA = "0xF68C78", Offset = "0xF68C78", VA = "0xF68C78", Slot = "8")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000466")]
		[Address(RVA = "0xF68CBC", Offset = "0xF68CBC", VA = "0xF68CBC", Slot = "9")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000467")]
		[Address(RVA = "0xF68D00", Offset = "0xF68D00", VA = "0xF68D00")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000468")]
		[Address(RVA = "0xF68D44", Offset = "0xF68D44", VA = "0xF68D44")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000469")]
		[Address(RVA = "0xF68D88", Offset = "0xF68D88", VA = "0xF68D88", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x600046A")]
		[Address(RVA = "0xF68D90", Offset = "0xF68D90", VA = "0xF68D90")]
		public ArmIK()
		{
		}
	}
	[Token(Token = "0x200007B")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page5.html")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/CCD IK")]
	public class CCDIK : IK
	{
		[Token(Token = "0x4000272")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverCCD solver;

		[Token(Token = "0x600046B")]
		[Address(RVA = "0xF68E04", Offset = "0xF68E04", VA = "0xF68E04", Slot = "8")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x600046C")]
		[Address(RVA = "0xF68E48", Offset = "0xF68E48", VA = "0xF68E48", Slot = "9")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x600046D")]
		[Address(RVA = "0xF68E8C", Offset = "0xF68E8C", VA = "0xF68E8C")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x600046E")]
		[Address(RVA = "0xF68ED0", Offset = "0xF68ED0", VA = "0xF68ED0")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x600046F")]
		[Address(RVA = "0xF68F14", Offset = "0xF68F14", VA = "0xF68F14", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6000470")]
		[Address(RVA = "0xF68F1C", Offset = "0xF68F1C", VA = "0xF68F1C")]
		public CCDIK()
		{
		}
	}
	[Token(Token = "0x200007C")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/FABRIK")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page6.html")]
	public class FABRIK : IK
	{
		[Token(Token = "0x4000273")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverFABRIK solver;

		[Token(Token = "0x6000471")]
		[Address(RVA = "0xF68F90", Offset = "0xF68F90", VA = "0xF68F90", Slot = "8")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000472")]
		[Address(RVA = "0xF68FD4", Offset = "0xF68FD4", VA = "0xF68FD4", Slot = "9")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000473")]
		[Address(RVA = "0xF69018", Offset = "0xF69018", VA = "0xF69018")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000474")]
		[Address(RVA = "0xF6905C", Offset = "0xF6905C", VA = "0xF6905C")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000475")]
		[Address(RVA = "0xF690A0", Offset = "0xF690A0", VA = "0xF690A0", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6000476")]
		[Address(RVA = "0xF690A8", Offset = "0xF690A8", VA = "0xF690A8")]
		public FABRIK()
		{
		}
	}
	[Token(Token = "0x200007D")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page7.html")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/FABRIK Root")]
	public class FABRIKRoot : IK
	{
		[Token(Token = "0x4000274")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverFABRIKRoot solver;

		[Token(Token = "0x6000477")]
		[Address(RVA = "0xF6911C", Offset = "0xF6911C", VA = "0xF6911C", Slot = "8")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000478")]
		[Address(RVA = "0xF69160", Offset = "0xF69160", VA = "0xF69160", Slot = "9")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000479")]
		[Address(RVA = "0xF691A4", Offset = "0xF691A4", VA = "0xF691A4")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x600047A")]
		[Address(RVA = "0xF691E8", Offset = "0xF691E8", VA = "0xF691E8")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x600047B")]
		[Address(RVA = "0xF6922C", Offset = "0xF6922C", VA = "0xF6922C", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x600047C")]
		[Address(RVA = "0xF69234", Offset = "0xF69234", VA = "0xF69234")]
		public FABRIKRoot()
		{
		}
	}
	[Token(Token = "0x200007E")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/Full Body Biped IK")]
	[HelpURL("https://www.youtube.com/watch?v=7__IafZGwvI&index=1&list=PLVxSIA1OaTOu8Nos3CalXbJ2DrKnntMv6")]
	public class FullBodyBipedIK : IK
	{
		[Token(Token = "0x4000275")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public BipedReferences references;

		[Token(Token = "0x4000276")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public IKSolverFullBodyBiped solver;

		[Token(Token = "0x600047D")]
		[Address(RVA = "0xF692A8", Offset = "0xF692A8", VA = "0xF692A8", Slot = "8")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x600047E")]
		[Address(RVA = "0xF692EC", Offset = "0xF692EC", VA = "0xF692EC", Slot = "9")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x600047F")]
		[Address(RVA = "0xF69330", Offset = "0xF69330", VA = "0xF69330")]
		[ContextMenu("TUTORIAL VIDEO (SETUP)")]
		private void OpenSetupTutorial()
		{
		}

		[Token(Token = "0x6000480")]
		[Address(RVA = "0xF69374", Offset = "0xF69374", VA = "0xF69374")]
		[ContextMenu("TUTORIAL VIDEO (INSPECTOR)")]
		private void OpenInspectorTutorial()
		{
		}

		[Token(Token = "0x6000481")]
		[Address(RVA = "0xF693B8", Offset = "0xF693B8", VA = "0xF693B8")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000482")]
		[Address(RVA = "0xF693FC", Offset = "0xF693FC", VA = "0xF693FC")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000483")]
		[Address(RVA = "0xF69440", Offset = "0xF69440", VA = "0xF69440")]
		public void SetReferences(BipedReferences references, Transform rootNode)
		{
		}

		[Token(Token = "0x6000484")]
		[Address(RVA = "0xF69480", Offset = "0xF69480", VA = "0xF69480", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6000485")]
		[Address(RVA = "0xF69488", Offset = "0xF69488", VA = "0xF69488")]
		public bool ReferencesError(ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000486")]
		[Address(RVA = "0xF69658", Offset = "0xF69658", VA = "0xF69658")]
		public bool ReferencesWarning(ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000487")]
		[Address(RVA = "0xF69B14", Offset = "0xF69B14", VA = "0xF69B14")]
		[ContextMenu("Reinitiate")]
		private void Reinitiate()
		{
		}

		[Token(Token = "0x6000488")]
		[Address(RVA = "0xF69B34", Offset = "0xF69B34", VA = "0xF69B34")]
		[ContextMenu("Auto-detect References")]
		private void AutoDetectReferences()
		{
		}

		[Token(Token = "0x6000489")]
		[Address(RVA = "0xF69C24", Offset = "0xF69C24", VA = "0xF69C24")]
		public FullBodyBipedIK()
		{
		}
	}
	[Token(Token = "0x200007F")]
	public abstract class IK : SolverManager
	{
		[Token(Token = "0x600048A")]
		public abstract IKSolver GetIKSolver();

		[Token(Token = "0x600048B")]
		[Address(RVA = "0xF69CD4", Offset = "0xF69CD4", VA = "0xF69CD4", Slot = "5")]
		protected override void UpdateSolver()
		{
		}

		[Token(Token = "0x600048C")]
		[Address(RVA = "0xF69D4C", Offset = "0xF69D4C", VA = "0xF69D4C", Slot = "4")]
		protected override void InitiateSolver()
		{
		}

		[Token(Token = "0x600048D")]
		[Address(RVA = "0xF69DBC", Offset = "0xF69DBC", VA = "0xF69DBC", Slot = "6")]
		protected override void FixTransforms()
		{
		}

		[Token(Token = "0x600048E")]
		protected abstract void OpenUserManual();

		[Token(Token = "0x600048F")]
		protected abstract void OpenScriptReference();

		[Token(Token = "0x6000490")]
		[Address(RVA = "0xF68C70", Offset = "0xF68C70", VA = "0xF68C70")]
		protected IK()
		{
		}
	}
	[Token(Token = "0x2000080")]
	public class IKExecutionOrder : MonoBehaviour
	{
		[Token(Token = "0x4000277")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The IK components, assign in the order in which you wish to update them.")]
		public IK[] IKComponents;

		[Token(Token = "0x4000278")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Optional. Assign it if you are using 'Animate Physics' as the Update Mode.")]
		public Animator animator;

		[Token(Token = "0x4000279")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool fixedFrame;

		[Token(Token = "0x17000068")]
		private bool animatePhysics
		{
			[Token(Token = "0x6000491")]
			[Address(RVA = "0xF69E0C", Offset = "0xF69E0C", VA = "0xF69E0C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000492")]
		[Address(RVA = "0xF69E98", Offset = "0xF69E98", VA = "0xF69E98")]
		private void Start()
		{
		}

		[Token(Token = "0x6000493")]
		[Address(RVA = "0xF69EFC", Offset = "0xF69EFC", VA = "0xF69EFC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000494")]
		[Address(RVA = "0xF69F9C", Offset = "0xF69F9C", VA = "0xF69F9C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000495")]
		[Address(RVA = "0xF69FC8", Offset = "0xF69FC8", VA = "0xF69FC8")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000496")]
		[Address(RVA = "0xF69F20", Offset = "0xF69F20", VA = "0xF69F20")]
		private void FixTransforms()
		{
		}

		[Token(Token = "0x6000497")]
		[Address(RVA = "0xF6A04C", Offset = "0xF6A04C", VA = "0xF6A04C")]
		public IKExecutionOrder()
		{
		}
	}
	[Token(Token = "0x2000081")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page11.html")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/Leg IK")]
	public class LegIK : IK
	{
		[Token(Token = "0x400027A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverLeg solver;

		[Token(Token = "0x6000498")]
		[Address(RVA = "0xF6A054", Offset = "0xF6A054", VA = "0xF6A054", Slot = "8")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000499")]
		[Address(RVA = "0xF6A098", Offset = "0xF6A098", VA = "0xF6A098", Slot = "9")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x600049A")]
		[Address(RVA = "0xF6A0DC", Offset = "0xF6A0DC", VA = "0xF6A0DC")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x600049B")]
		[Address(RVA = "0xF6A120", Offset = "0xF6A120", VA = "0xF6A120")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x600049C")]
		[Address(RVA = "0xF6A164", Offset = "0xF6A164", VA = "0xF6A164", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x600049D")]
		[Address(RVA = "0xF6A16C", Offset = "0xF6A16C", VA = "0xF6A16C")]
		public LegIK()
		{
		}
	}
	[Token(Token = "0x2000082")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page12.html")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/Limb IK")]
	public class LimbIK : IK
	{
		[Token(Token = "0x400027B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverLimb solver;

		[Token(Token = "0x600049E")]
		[Address(RVA = "0xF6A1E0", Offset = "0xF6A1E0", VA = "0xF6A1E0", Slot = "8")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x600049F")]
		[Address(RVA = "0xF6A224", Offset = "0xF6A224", VA = "0xF6A224", Slot = "9")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x60004A0")]
		[Address(RVA = "0xF6A268", Offset = "0xF6A268", VA = "0xF6A268")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60004A1")]
		[Address(RVA = "0xF6A2AC", Offset = "0xF6A2AC", VA = "0xF6A2AC")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60004A2")]
		[Address(RVA = "0xF6A2F0", Offset = "0xF6A2F0", VA = "0xF6A2F0", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x60004A3")]
		[Address(RVA = "0xF6A2F8", Offset = "0xF6A2F8", VA = "0xF6A2F8")]
		public LimbIK()
		{
		}
	}
	[Token(Token = "0x2000083")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/Look At IK")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page13.html")]
	public class LookAtIK : IK
	{
		[Token(Token = "0x400027C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverLookAt solver;

		[Token(Token = "0x60004A4")]
		[Address(RVA = "0xF6A36C", Offset = "0xF6A36C", VA = "0xF6A36C", Slot = "8")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x60004A5")]
		[Address(RVA = "0xF6A3B0", Offset = "0xF6A3B0", VA = "0xF6A3B0", Slot = "9")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x60004A6")]
		[Address(RVA = "0xF6A3F4", Offset = "0xF6A3F4", VA = "0xF6A3F4")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60004A7")]
		[Address(RVA = "0xF6A438", Offset = "0xF6A438", VA = "0xF6A438")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60004A8")]
		[Address(RVA = "0xF6A47C", Offset = "0xF6A47C", VA = "0xF6A47C", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x60004A9")]
		[Address(RVA = "0xF6A484", Offset = "0xF6A484", VA = "0xF6A484")]
		public LookAtIK()
		{
		}
	}
	[Token(Token = "0x2000084")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page15.html")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/Trigonometric IK")]
	public class TrigonometricIK : IK
	{
		[Token(Token = "0x400027D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverTrigonometric solver;

		[Token(Token = "0x60004AA")]
		[Address(RVA = "0xF6A4F8", Offset = "0xF6A4F8", VA = "0xF6A4F8", Slot = "8")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x60004AB")]
		[Address(RVA = "0xF6A53C", Offset = "0xF6A53C", VA = "0xF6A53C", Slot = "9")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x60004AC")]
		[Address(RVA = "0xF6A580", Offset = "0xF6A580", VA = "0xF6A580")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60004AD")]
		[Address(RVA = "0xF6A5C4", Offset = "0xF6A5C4", VA = "0xF6A5C4")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60004AE")]
		[Address(RVA = "0xF6A608", Offset = "0xF6A608", VA = "0xF6A608", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x60004AF")]
		[Address(RVA = "0xF6A610", Offset = "0xF6A610", VA = "0xF6A610")]
		public TrigonometricIK()
		{
		}
	}
	[Token(Token = "0x2000085")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/VR IK")]
	public class VRIK : IK
	{
		[Serializable]
		[Token(Token = "0x2000086")]
		public class References
		{
			[Token(Token = "0x4000280")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform root;

			[Token(Token = "0x4000281")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Transform pelvis;

			[Token(Token = "0x4000282")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Transform spine;

			[Token(Token = "0x4000283")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("Optional")]
			public Transform chest;

			[Token(Token = "0x4000284")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[Tooltip("Optional")]
			public Transform neck;

			[Token(Token = "0x4000285")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Transform head;

			[Token(Token = "0x4000286")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			[Tooltip("Optional")]
			public Transform leftShoulder;

			[Token(Token = "0x4000287")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Transform leftUpperArm;

			[Token(Token = "0x4000288")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public Transform leftForearm;

			[Token(Token = "0x4000289")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public Transform leftHand;

			[Token(Token = "0x400028A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[Tooltip("Optional")]
			public Transform rightShoulder;

			[Token(Token = "0x400028B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public Transform rightUpperArm;

			[Token(Token = "0x400028C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			public Transform rightForearm;

			[Token(Token = "0x400028D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			public Transform rightHand;

			[Token(Token = "0x400028E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			[Tooltip("VRIK also supports legless characters.If you do not wish to use legs, leave all leg references empty.")]
			public Transform leftThigh;

			[Token(Token = "0x400028F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			[Tooltip("VRIK also supports legless characters.If you do not wish to use legs, leave all leg references empty.")]
			public Transform leftCalf;

			[Token(Token = "0x4000290")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			[Tooltip("VRIK also supports legless characters.If you do not wish to use legs, leave all leg references empty.")]
			public Transform leftFoot;

			[Token(Token = "0x4000291")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			[Tooltip("Optional")]
			public Transform leftToes;

			[Token(Token = "0x4000292")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			[Tooltip("VRIK also supports legless characters.If you do not wish to use legs, leave all leg references empty.")]
			public Transform rightThigh;

			[Token(Token = "0x4000293")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			[Tooltip("VRIK also supports legless characters.If you do not wish to use legs, leave all leg references empty.")]
			public Transform rightCalf;

			[Token(Token = "0x4000294")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			[Tooltip("VRIK also supports legless characters.If you do not wish to use legs, leave all leg references empty.")]
			public Transform rightFoot;

			[Token(Token = "0x4000295")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
			[Tooltip("Optional")]
			public Transform rightToes;

			[Token(Token = "0x17000069")]
			public bool isFilled
			{
				[Token(Token = "0x60004BA")]
				[Address(RVA = "0xF6B060", Offset = "0xF6B060", VA = "0xF6B060")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x1700006A")]
			public bool isEmpty
			{
				[Token(Token = "0x60004BB")]
				[Address(RVA = "0xF6ACA4", Offset = "0xF6ACA4", VA = "0xF6ACA4")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x60004B9")]
			[Address(RVA = "0xF6B664", Offset = "0xF6B664", VA = "0xF6B664")]
			public Transform[] GetTransforms()
			{
				return null;
			}

			[Token(Token = "0x60004BC")]
			[Address(RVA = "0xF6A76C", Offset = "0xF6A76C", VA = "0xF6A76C")]
			public static bool AutoDetectReferences(Transform root, out References references)
			{
				return default(bool);
			}

			[Token(Token = "0x60004BD")]
			[Address(RVA = "0xF6B65C", Offset = "0xF6B65C", VA = "0xF6B65C")]
			public References()
			{
			}
		}

		[Token(Token = "0x400027E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Bone mapping. Right-click on the component header and select 'Auto-detect References' of fill in manually if not a Humanoid character. Chest, neck, shoulder and toe bones are optional. VRIK also supports legless characters. If you do not wish to use legs, leave all leg references empty.")]
		[ContextMenuItem("Auto-detect References", "AutoDetectReferences")]
		public References references;

		[Token(Token = "0x400027F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The VRIK solver.")]
		public IKSolverVR solver;

		[Token(Token = "0x60004B0")]
		[Address(RVA = "0xF6A684", Offset = "0xF6A684", VA = "0xF6A684", Slot = "8")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x60004B1")]
		[Address(RVA = "0xF6A6C8", Offset = "0xF6A6C8", VA = "0xF6A6C8", Slot = "9")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x60004B2")]
		[Address(RVA = "0xF6A70C", Offset = "0xF6A70C", VA = "0xF6A70C")]
		[ContextMenu("TUTORIAL VIDEO (STEAMVR SETUP)")]
		private void OpenSetupTutorial()
		{
		}

		[Token(Token = "0x60004B3")]
		[Address(RVA = "0xF6A750", Offset = "0xF6A750", VA = "0xF6A750")]
		[ContextMenu("Auto-detect References")]
		public void AutoDetectReferences()
		{
		}

		[Token(Token = "0x60004B4")]
		[Address(RVA = "0xF6AC08", Offset = "0xF6AC08", VA = "0xF6AC08")]
		[ContextMenu("Guess Hand Orientations")]
		public void GuessHandOrientations()
		{
		}

		[Token(Token = "0x60004B5")]
		[Address(RVA = "0xF6AC30", Offset = "0xF6AC30", VA = "0xF6AC30", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x60004B6")]
		[Address(RVA = "0xF6AC38", Offset = "0xF6AC38", VA = "0xF6AC38", Slot = "4")]
		protected override void InitiateSolver()
		{
		}

		[Token(Token = "0x60004B7")]
		[Address(RVA = "0xF6B41C", Offset = "0xF6B41C", VA = "0xF6B41C", Slot = "5")]
		protected override void UpdateSolver()
		{
		}

		[Token(Token = "0x60004B8")]
		[Address(RVA = "0xF6B5AC", Offset = "0xF6B5AC", VA = "0xF6B5AC")]
		public VRIK()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000087")]
	public class FABRIKChain
	{
		[Token(Token = "0x4000296")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public FABRIK ik;

		[Token(Token = "0x4000297")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0f, 1f)]
		public float pull;

		[Token(Token = "0x4000298")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Range(0f, 1f)]
		public float pin;

		[Token(Token = "0x4000299")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int[] children;

		[Token(Token = "0x60004BE")]
		[Address(RVA = "0xF6BBA8", Offset = "0xF6BBA8", VA = "0xF6BBA8")]
		public bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x60004BF")]
		[Address(RVA = "0xF6BC78", Offset = "0xF6BC78", VA = "0xF6BC78")]
		public void Initiate()
		{
		}

		[Token(Token = "0x60004C0")]
		[Address(RVA = "0xF6BC98", Offset = "0xF6BC98", VA = "0xF6BC98")]
		public void Stage1(FABRIKChain[] chain)
		{
		}

		[Token(Token = "0x60004C1")]
		[Address(RVA = "0xF6BEEC", Offset = "0xF6BEEC", VA = "0xF6BEEC")]
		public void Stage2(Vector3 rootPosition, FABRIKChain[] chain)
		{
		}

		[Token(Token = "0x60004C2")]
		[Address(RVA = "0xF6BD58", Offset = "0xF6BD58", VA = "0xF6BD58")]
		private Vector3 GetCentroid(FABRIKChain[] chain)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60004C3")]
		[Address(RVA = "0xF6BFD0", Offset = "0xF6BFD0", VA = "0xF6BFD0")]
		public FABRIKChain()
		{
		}
	}
	[Token(Token = "0x2000088")]
	public class FBBIKArmBending : MonoBehaviour
	{
		[Token(Token = "0x400029A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x400029B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 bendDirectionOffsetLeft;

		[Token(Token = "0x400029C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 bendDirectionOffsetRight;

		[Token(Token = "0x400029D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector3 characterSpaceBendOffsetLeft;

		[Token(Token = "0x400029E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Vector3 characterSpaceBendOffsetRight;

		[Token(Token = "0x400029F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Quaternion leftHandTargetRotation;

		[Token(Token = "0x40002A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Quaternion rightHandTargetRotation;

		[Token(Token = "0x40002A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool initiated;

		[Token(Token = "0x60004C4")]
		[Address(RVA = "0xF6C03C", Offset = "0xF6C03C", VA = "0xF6C03C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60004C5")]
		[Address(RVA = "0xF6C4EC", Offset = "0xF6C4EC", VA = "0xF6C4EC")]
		private void OnPostFBBIK()
		{
		}

		[Token(Token = "0x60004C6")]
		[Address(RVA = "0xF6C680", Offset = "0xF6C680", VA = "0xF6C680")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60004C7")]
		[Address(RVA = "0xF6C7AC", Offset = "0xF6C7AC", VA = "0xF6C7AC")]
		public FBBIKArmBending()
		{
		}
	}
	[Token(Token = "0x2000089")]
	public class FBBIKHeadEffector : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200008A")]
		public class BendBone
		{
			[Token(Token = "0x40002D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("Assign spine and/or neck bones.")]
			public Transform transform;

			[Token(Token = "0x40002D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("The weight of rotating this bone.")]
			[Range(0f, 1f)]
			public float weight;

			[Token(Token = "0x40002D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			private Quaternion defaultLocalRotation;

			[Token(Token = "0x60004D6")]
			[Address(RVA = "0xF6FA64", Offset = "0xF6FA64", VA = "0xF6FA64")]
			public BendBone()
			{
			}

			[Token(Token = "0x60004D7")]
			[Address(RVA = "0xF6FAC4", Offset = "0xF6FAC4", VA = "0xF6FAC4")]
			public BendBone(Transform transform, float weight)
			{
			}

			[Token(Token = "0x60004D8")]
			[Address(RVA = "0xF6D0A4", Offset = "0xF6D0A4", VA = "0xF6D0A4")]
			public void StoreDefaultLocalState()
			{
			}

			[Token(Token = "0x60004D9")]
			[Address(RVA = "0xF6D474", Offset = "0xF6D474", VA = "0xF6D474")]
			public void FixTransforms()
			{
			}
		}

		[Token(Token = "0x40002A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Reference to the FBBIK component.")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x40002A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[LargeHeader("Position")]
		[Tooltip("Master weight for positioning the head.")]
		[Range(0f, 1f)]
		public float positionWeight;

		[Token(Token = "0x40002A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("The weight of moving the body along with the head")]
		[Range(0f, 1f)]
		public float bodyWeight;

		[Token(Token = "0x40002A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The weight of moving the thighs along with the head")]
		[Range(0f, 1f)]
		public float thighWeight;

		[Token(Token = "0x40002A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("If false, hands will not pull the head away if they are too far. Disabling this will improve performance significantly.")]
		public bool handsPullBody;

		[Token(Token = "0x40002A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[LargeHeader("Rotation")]
		[Tooltip("The weight of rotating the head bone after solving")]
		[Range(0f, 1f)]
		public float rotationWeight;

		[Token(Token = "0x40002A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("Clamping the rotation of the body")]
		[Range(0f, 1f)]
		public float bodyClampWeight;

		[Token(Token = "0x40002A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Clamping the rotation of the head")]
		[Range(0f, 1f)]
		public float headClampWeight;

		[Token(Token = "0x40002AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("The master weight of bending/twisting the spine to the rotation of the head effector. This is similar to CCD, but uses the rotation of the head effector not the position.")]
		[Range(0f, 1f)]
		public float bendWeight;

		[Token(Token = "0x40002AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The bones to use for bending.")]
		public BendBone[] bendBones;

		[Token(Token = "0x40002AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Range(0f, 1f)]
		[Tooltip("Optional. The master weight of the CCD (Cyclic Coordinate Descent) IK effect that bends the spine towards the head effector before FBBIK solves.")]
		[LargeHeader("CCD")]
		public float CCDWeight;

		[Token(Token = "0x40002AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("The weight of rolling the bones in towards the target")]
		[Range(0f, 1f)]
		public float roll;

		[Token(Token = "0x40002AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Range(0f, 1000f)]
		[Tooltip("Smoothing the CCD effect.")]
		public float damper;

		[Token(Token = "0x40002AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Bones to use for the CCD pass. Assign spine and/or neck bones.")]
		public Transform[] CCDBones;

		[Token(Token = "0x40002B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Range(0f, 1f)]
		[LargeHeader("Stretching")]
		[Tooltip("Stretching the spine/neck to help reach the target. This is useful for making sure the head stays locked relative to the VR headset. NB! Stretching is done after FBBIK has solved so if you have the hand effectors pinned and spine bones included in the 'Stretch Bones', the hands might become offset from their target positions.")]
		public float postStretchWeight;

		[Token(Token = "0x40002B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Tooltip("Stretch magnitude limit.")]
		public float maxStretch;

		[Token(Token = "0x40002B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("If > 0, dampers the stretching effect.")]
		public float stretchDamper;

		[Token(Token = "0x40002B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Tooltip("If true, will fix head position to this Transform no matter what. Good for making sure the head will not budge away from the VR headset")]
		public bool fixHead;

		[Token(Token = "0x40002B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Bones to use for stretching. The more bones you add, the less noticable the effect.")]
		public Transform[] stretchBones;

		[Token(Token = "0x40002B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[LargeHeader("Chest Direction")]
		public Vector3 chestDirection;

		[Token(Token = "0x40002B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[Range(0f, 1f)]
		public float chestDirectionWeight;

		[Token(Token = "0x40002B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Transform[] chestBones;

		[Token(Token = "0x40002B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public IKSolver.UpdateDelegate OnPostHeadEffectorFK;

		[Token(Token = "0x40002B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3 offset;

		[Token(Token = "0x40002BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private Vector3 headToBody;

		[Token(Token = "0x40002BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector3 shoulderCenterToHead;

		[Token(Token = "0x40002BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private Vector3 headToLeftThigh;

		[Token(Token = "0x40002BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Vector3 headToRightThigh;

		[Token(Token = "0x40002BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private Vector3 leftShoulderPos;

		[Token(Token = "0x40002BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Vector3 rightShoulderPos;

		[Token(Token = "0x40002C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private float shoulderDist;

		[Token(Token = "0x40002C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private float leftShoulderDist;

		[Token(Token = "0x40002C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private float rightShoulderDist;

		[Token(Token = "0x40002C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Quaternion chestRotation;

		[Token(Token = "0x40002C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Quaternion headRotationRelativeToRoot;

		[Token(Token = "0x40002C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private Quaternion[] ccdDefaultLocalRotations;

		[Token(Token = "0x40002C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Vector3 headLocalPosition;

		[Token(Token = "0x40002C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		private Quaternion headLocalRotation;

		[Token(Token = "0x40002C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private Vector3[] stretchLocalPositions;

		[Token(Token = "0x40002C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private Quaternion[] stretchLocalRotations;

		[Token(Token = "0x40002CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private Vector3[] chestLocalPositions;

		[Token(Token = "0x40002CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private Quaternion[] chestLocalRotations;

		[Token(Token = "0x40002CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private int bendBonesCount;

		[Token(Token = "0x40002CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		private int ccdBonesCount;

		[Token(Token = "0x40002CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private int stretchBonesCount;

		[Token(Token = "0x40002CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		private int chestBonesCount;

		[Token(Token = "0x60004C8")]
		[Address(RVA = "0xF6C7B4", Offset = "0xF6C7B4", VA = "0xF6C7B4")]
		private void Start()
		{
		}

		[Token(Token = "0x60004C9")]
		[Address(RVA = "0xF6CBF4", Offset = "0xF6CBF4", VA = "0xF6CBF4")]
		private void OnStoreDefaultLocalState()
		{
		}

		[Token(Token = "0x60004CA")]
		[Address(RVA = "0xF6D0D0", Offset = "0xF6D0D0", VA = "0xF6D0D0")]
		private void OnFixTransforms()
		{
		}

		[Token(Token = "0x60004CB")]
		[Address(RVA = "0xF6D49C", Offset = "0xF6D49C", VA = "0xF6D49C")]
		private void OnPreRead()
		{
		}

		[Token(Token = "0x60004CC")]
		[Address(RVA = "0xF6DD98", Offset = "0xF6DD98", VA = "0xF6DD98")]
		private void SpineBend()
		{
		}

		[Token(Token = "0x60004CD")]
		[Address(RVA = "0xF6E190", Offset = "0xF6E190", VA = "0xF6E190")]
		private void CCDPass()
		{
		}

		[Token(Token = "0x60004CE")]
		[Address(RVA = "0xF6E5A0", Offset = "0xF6E5A0", VA = "0xF6E5A0")]
		private void Iterate(int iteration)
		{
		}

		[Token(Token = "0x60004CF")]
		[Address(RVA = "0xF6EF18", Offset = "0xF6EF18", VA = "0xF6EF18")]
		private void OnPostUpdate()
		{
		}

		[Token(Token = "0x60004D0")]
		[Address(RVA = "0xF6DADC", Offset = "0xF6DADC", VA = "0xF6DADC")]
		private void ChestDirection()
		{
		}

		[Token(Token = "0x60004D1")]
		[Address(RVA = "0xF6F154", Offset = "0xF6F154", VA = "0xF6F154")]
		private void PostStretching()
		{
		}

		[Token(Token = "0x60004D2")]
		[Address(RVA = "0xF6EE38", Offset = "0xF6EE38", VA = "0xF6EE38")]
		private void LerpSolverPosition(IKEffector effector, Vector3 position, float weight, Vector3 offset)
		{
		}

		[Token(Token = "0x60004D3")]
		[Address(RVA = "0xF6ED38", Offset = "0xF6ED38", VA = "0xF6ED38")]
		private void Solve(ref Vector3 pos1, ref Vector3 pos2, float nominalDistance)
		{
		}

		[Token(Token = "0x60004D4")]
		[Address(RVA = "0xF6F4B4", Offset = "0xF6F4B4", VA = "0xF6F4B4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60004D5")]
		[Address(RVA = "0xF6F850", Offset = "0xF6F850", VA = "0xF6F850")]
		public FBBIKHeadEffector()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200008B")]
	public class FBIKChain
	{
		[Serializable]
		[Token(Token = "0x200008C")]
		public class ChildConstraint
		{
			[Token(Token = "0x40002EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float pushElasticity;

			[Token(Token = "0x40002EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float pullElasticity;

			[Token(Token = "0x40002EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[SerializeField]
			private Transform bone1;

			[Token(Token = "0x40002ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[SerializeField]
			private Transform bone2;

			[Token(Token = "0x40002F0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float crossFade;

			[Token(Token = "0x40002F1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float inverseCrossFade;

			[Token(Token = "0x40002F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int chain1Index;

			[Token(Token = "0x40002F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private int chain2Index;

			[Token(Token = "0x1700006B")]
			public float nominalDistance
			{
				[Token(Token = "0x60004EE")]
				[Address(RVA = "0xF72BCC", Offset = "0xF72BCC", VA = "0xF72BCC")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x60004EF")]
				[Address(RVA = "0xF72BD4", Offset = "0xF72BD4", VA = "0xF72BD4")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x1700006C")]
			public bool isRigid
			{
				[Token(Token = "0x60004F0")]
				[Address(RVA = "0xF72BDC", Offset = "0xF72BDC", VA = "0xF72BDC")]
				[CompilerGenerated]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x60004F1")]
				[Address(RVA = "0xF72BE4", Offset = "0xF72BE4", VA = "0xF72BE4")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x60004F2")]
			[Address(RVA = "0xF72BF0", Offset = "0xF72BF0", VA = "0xF72BF0")]
			public ChildConstraint(Transform bone1, Transform bone2, float pushElasticity = 0f, float pullElasticity = 0f)
			{
			}

			[Token(Token = "0x60004F3")]
			[Address(RVA = "0xF708A0", Offset = "0xF708A0", VA = "0xF708A0")]
			public void Initiate(IKSolverFullBody solver)
			{
			}

			[Token(Token = "0x60004F4")]
			[Address(RVA = "0xF70F84", Offset = "0xF70F84", VA = "0xF70F84")]
			public void OnPreSolve(IKSolverFullBody solver)
			{
			}

			[Token(Token = "0x60004F5")]
			[Address(RVA = "0xF72990", Offset = "0xF72990", VA = "0xF72990")]
			public void Solve(IKSolverFullBody solver)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200008D")]
		public enum Smoothing
		{
			[Token(Token = "0x40002F5")]
			None,
			[Token(Token = "0x40002F6")]
			Exponential,
			[Token(Token = "0x40002F7")]
			Cubic
		}

		[Token(Token = "0x40002D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Range(0f, 1f)]
		public float pin;

		[Token(Token = "0x40002D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[Range(0f, 1f)]
		public float pull;

		[Token(Token = "0x40002D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0f, 1f)]
		public float push;

		[Token(Token = "0x40002D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Range(-1f, 1f)]
		public float pushParent;

		[Token(Token = "0x40002D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 1f)]
		public float reach;

		[Token(Token = "0x40002D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Smoothing reachSmoothing;

		[Token(Token = "0x40002D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Smoothing pushSmoothing;

		[Token(Token = "0x40002DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public IKSolver.Node[] nodes;

		[Token(Token = "0x40002DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int[] children;

		[Token(Token = "0x40002DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public ChildConstraint[] childConstraints;

		[Token(Token = "0x40002DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public IKConstraintBend bendConstraint;

		[Token(Token = "0x40002DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float rootLength;

		[Token(Token = "0x40002DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private bool initiated;

		[Token(Token = "0x40002E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float length;

		[Token(Token = "0x40002E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float distance;

		[Token(Token = "0x40002E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private IKSolver.Point p;

		[Token(Token = "0x40002E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float reachForce;

		[Token(Token = "0x40002E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float pullParentSum;

		[Token(Token = "0x40002E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float[] crossFades;

		[Token(Token = "0x40002E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float sqrMag1;

		[Token(Token = "0x40002E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float sqrMag2;

		[Token(Token = "0x40002E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float sqrMagDif;

		[Token(Token = "0x40002E9")]
		private const float maxLimbLength = 0.99999f;

		[Token(Token = "0x60004DA")]
		[Address(RVA = "0xF6FB4C", Offset = "0xF6FB4C", VA = "0xF6FB4C")]
		public FBIKChain()
		{
		}

		[Token(Token = "0x60004DB")]
		[Address(RVA = "0xF6FCE4", Offset = "0xF6FCE4", VA = "0xF6FCE4")]
		public FBIKChain(float pin, float pull, params Transform[] nodeTransforms)
		{
		}

		[Token(Token = "0x60004DC")]
		[Address(RVA = "0xF6FE54", Offset = "0xF6FE54", VA = "0xF6FE54")]
		public void SetNodes(params Transform[] boneTransforms)
		{
		}

		[Token(Token = "0x60004DD")]
		[Address(RVA = "0xF6FF84", Offset = "0xF6FF84", VA = "0xF6FF84")]
		public int GetNodeIndex(Transform boneTransform)
		{
			return default(int);
		}

		[Token(Token = "0x60004DE")]
		[Address(RVA = "0xF70040", Offset = "0xF70040", VA = "0xF70040")]
		public bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x60004DF")]
		[Address(RVA = "0xF7015C", Offset = "0xF7015C", VA = "0xF7015C")]
		public void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x60004E0")]
		[Address(RVA = "0xF70BA0", Offset = "0xF70BA0", VA = "0xF70BA0")]
		public void ReadPose(IKSolverFullBody solver, bool fullBody)
		{
		}

		[Token(Token = "0x60004E1")]
		[Address(RVA = "0xF702D8", Offset = "0xF702D8", VA = "0xF702D8")]
		private void CalculateBoneLengths(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x60004E2")]
		[Address(RVA = "0xF71168", Offset = "0xF71168", VA = "0xF71168")]
		public void Reach(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x60004E3")]
		[Address(RVA = "0xF713FC", Offset = "0xF713FC", VA = "0xF713FC")]
		public Vector3 Push(IKSolverFullBody solver)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60004E4")]
		[Address(RVA = "0xF716CC", Offset = "0xF716CC", VA = "0xF716CC")]
		public void SolveTrigonometric(IKSolverFullBody solver, bool calculateBendDirection = false)
		{
		}

		[Token(Token = "0x60004E5")]
		[Address(RVA = "0xF72094", Offset = "0xF72094", VA = "0xF72094")]
		public void Stage1(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x60004E6")]
		[Address(RVA = "0xF7258C", Offset = "0xF7258C", VA = "0xF7258C")]
		public void Stage2(IKSolverFullBody solver, Vector3 position)
		{
		}

		[Token(Token = "0x60004E7")]
		[Address(RVA = "0xF7278C", Offset = "0xF7278C", VA = "0xF7278C")]
		public void SolveConstraintSystems(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x60004E8")]
		[Address(RVA = "0xF72478", Offset = "0xF72478", VA = "0xF72478")]
		private Vector3 SolveFABRIKJoint(Vector3 pos1, Vector3 pos2, float length)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60004E9")]
		[Address(RVA = "0xF71F34", Offset = "0xF71F34", VA = "0xF71F34")]
		protected Vector3 GetDirToBendPoint(Vector3 direction, Vector3 bendDirection, float directionMagnitude)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60004EA")]
		[Address(RVA = "0xF72414", Offset = "0xF72414", VA = "0xF72414")]
		private void SolveChildConstraints(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x60004EB")]
		[Address(RVA = "0xF72868", Offset = "0xF72868", VA = "0xF72868")]
		private void SolveLinearConstraint(IKSolver.Node node1, IKSolver.Node node2, float crossFade, float distance)
		{
		}

		[Token(Token = "0x60004EC")]
		[Address(RVA = "0xF72340", Offset = "0xF72340", VA = "0xF72340")]
		public void ForwardReach(Vector3 position)
		{
		}

		[Token(Token = "0x60004ED")]
		[Address(RVA = "0xF72690", Offset = "0xF72690", VA = "0xF72690")]
		private void BackwardReach(Vector3 position)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200008E")]
	public class IKConstraintBend
	{
		[Token(Token = "0x40002F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform bone1;

		[Token(Token = "0x40002F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform bone2;

		[Token(Token = "0x40002FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform bone3;

		[Token(Token = "0x40002FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform bendGoal;

		[Token(Token = "0x40002FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 direction;

		[Token(Token = "0x40002FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Quaternion rotationOffset;

		[Token(Token = "0x40002FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Range(0f, 1f)]
		public float weight;

		[Token(Token = "0x40002FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Vector3 defaultLocalDirection;

		[Token(Token = "0x4000300")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public Vector3 defaultChildDirection;

		[NonSerialized]
		[Token(Token = "0x4000301")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float clampF;

		[Token(Token = "0x4000302")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private int chainIndex1;

		[Token(Token = "0x4000303")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private int nodeIndex1;

		[Token(Token = "0x4000304")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private int chainIndex2;

		[Token(Token = "0x4000305")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private int nodeIndex2;

		[Token(Token = "0x4000306")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private int chainIndex3;

		[Token(Token = "0x4000307")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int nodeIndex3;

		[Token(Token = "0x4000309")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x85")]
		private bool limbOrientationsSet;

		[Token(Token = "0x1700006D")]
		public bool initiated
		{
			[Token(Token = "0x60004F7")]
			[Address(RVA = "0xF72E24", Offset = "0xF72E24", VA = "0xF72E24")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60004F8")]
			[Address(RVA = "0xF72E2C", Offset = "0xF72E2C", VA = "0xF72E2C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60004F6")]
		[Address(RVA = "0xF72C4C", Offset = "0xF72C4C", VA = "0xF72C4C")]
		public bool IsValid(IKSolverFullBody solver, Warning.Logger logger)
		{
			return default(bool);
		}

		[Token(Token = "0x60004F9")]
		[Address(RVA = "0xF6FC78", Offset = "0xF6FC78", VA = "0xF6FC78")]
		public IKConstraintBend()
		{
		}

		[Token(Token = "0x60004FA")]
		[Address(RVA = "0xF72E38", Offset = "0xF72E38", VA = "0xF72E38")]
		public IKConstraintBend(Transform bone1, Transform bone2, Transform bone3)
		{
		}

		[Token(Token = "0x60004FB")]
		[Address(RVA = "0xF708F4", Offset = "0xF708F4", VA = "0xF708F4")]
		public void SetBones(Transform bone1, Transform bone2, Transform bone3)
		{
		}

		[Token(Token = "0x60004FC")]
		[Address(RVA = "0xF70938", Offset = "0xF70938", VA = "0xF70938")]
		public void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x60004FD")]
		[Address(RVA = "0xF73014", Offset = "0xF73014", VA = "0xF73014")]
		public void SetLimbOrientation(Vector3 upper, Vector3 lower, Vector3 last)
		{
		}

		[Token(Token = "0x60004FE")]
		[Address(RVA = "0xF73368", Offset = "0xF73368", VA = "0xF73368")]
		public void LimitBend(float solverWeight, float positionWeight)
		{
		}

		[Token(Token = "0x60004FF")]
		[Address(RVA = "0xF71904", Offset = "0xF71904", VA = "0xF71904")]
		public Vector3 GetDir(IKSolverFullBody solver)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000500")]
		[Address(RVA = "0xF72ECC", Offset = "0xF72ECC", VA = "0xF72ECC")]
		private Vector3 OrthoToLimb(IKSolverFullBody solver, Vector3 tangent)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000501")]
		[Address(RVA = "0xF72F70", Offset = "0xF72F70", VA = "0xF72F70")]
		private Vector3 OrthoToBone1(IKSolverFullBody solver, Vector3 tangent)
		{
			return default(Vector3);
		}
	}
	[Serializable]
	[Token(Token = "0x200008F")]
	public class IKEffector
	{
		[Token(Token = "0x400030A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform bone;

		[Token(Token = "0x400030B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x400030C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 1f)]
		public float positionWeight;

		[Token(Token = "0x400030D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Range(0f, 1f)]
		public float rotationWeight;

		[Token(Token = "0x400030E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 position;

		[Token(Token = "0x400030F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Quaternion rotation;

		[Token(Token = "0x4000310")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Vector3 positionOffset;

		[Token(Token = "0x4000312")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		public bool effectChildNodes;

		[Token(Token = "0x4000313")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Range(0f, 1f)]
		public float maintainRelativePositionWeight;

		[Token(Token = "0x4000314")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform[] childBones;

		[Token(Token = "0x4000315")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform planeBone1;

		[Token(Token = "0x4000316")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Transform planeBone2;

		[Token(Token = "0x4000317")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Transform planeBone3;

		[Token(Token = "0x4000318")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Quaternion planeRotationOffset;

		[Token(Token = "0x4000319")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float posW;

		[Token(Token = "0x400031A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float rotW;

		[Token(Token = "0x400031B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector3[] localPositions;

		[Token(Token = "0x400031C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private bool usePlaneNodes;

		[Token(Token = "0x400031D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private Quaternion animatedPlaneRotation;

		[Token(Token = "0x400031E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private Vector3 animatedPosition;

		[Token(Token = "0x400031F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private bool firstUpdate;

		[Token(Token = "0x4000320")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private int chainIndex;

		[Token(Token = "0x4000321")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private int nodeIndex;

		[Token(Token = "0x4000322")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private int plane1ChainIndex;

		[Token(Token = "0x4000323")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private int plane1NodeIndex;

		[Token(Token = "0x4000324")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private int plane2ChainIndex;

		[Token(Token = "0x4000325")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private int plane2NodeIndex;

		[Token(Token = "0x4000326")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private int plane3ChainIndex;

		[Token(Token = "0x4000327")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private int plane3NodeIndex;

		[Token(Token = "0x4000328")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private int[] childChainIndexes;

		[Token(Token = "0x4000329")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private int[] childNodeIndexes;

		[Token(Token = "0x1700006E")]
		public bool isEndEffector
		{
			[Token(Token = "0x6000503")]
			[Address(RVA = "0xF73730", Offset = "0xF73730", VA = "0xF73730")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000504")]
			[Address(RVA = "0xF73738", Offset = "0xF73738", VA = "0xF73738")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000502")]
		[Address(RVA = "0xF6F458", Offset = "0xF6F458", VA = "0xF6F458")]
		public IKSolver.Node GetNode(IKSolverFullBody solver)
		{
			return null;
		}

		[Token(Token = "0x6000505")]
		[Address(RVA = "0xF73744", Offset = "0xF73744", VA = "0xF73744")]
		public void PinToBone(float positionWeight, float rotationWeight)
		{
		}

		[Token(Token = "0x6000506")]
		[Address(RVA = "0xF737C8", Offset = "0xF737C8", VA = "0xF737C8")]
		public IKEffector()
		{
		}

		[Token(Token = "0x6000507")]
		[Address(RVA = "0xF73998", Offset = "0xF73998", VA = "0xF73998")]
		public IKEffector(Transform bone, Transform[] childBones)
		{
		}

		[Token(Token = "0x6000508")]
		[Address(RVA = "0xF73BA4", Offset = "0xF73BA4", VA = "0xF73BA4")]
		public bool IsValid(IKSolver solver, ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000509")]
		[Address(RVA = "0xF73EAC", Offset = "0xF73EAC", VA = "0xF73EAC")]
		public void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x600050A")]
		[Address(RVA = "0xF74184", Offset = "0xF74184", VA = "0xF74184")]
		public void ResetOffset(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x600050B")]
		[Address(RVA = "0xF742A4", Offset = "0xF742A4", VA = "0xF742A4")]
		public void SetToTarget()
		{
		}

		[Token(Token = "0x600050C")]
		[Address(RVA = "0xF74340", Offset = "0xF74340", VA = "0xF74340")]
		public void OnPreSolve(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x600050D")]
		[Address(RVA = "0xF749F4", Offset = "0xF749F4", VA = "0xF749F4")]
		public void OnPostWrite()
		{
		}

		[Token(Token = "0x600050E")]
		[Address(RVA = "0xF74A4C", Offset = "0xF74A4C", VA = "0xF74A4C")]
		private Quaternion GetPlaneRotation(IKSolverFullBody solver)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600050F")]
		[Address(RVA = "0xF74C20", Offset = "0xF74C20", VA = "0xF74C20")]
		public void Update(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6000510")]
		[Address(RVA = "0xF74E7C", Offset = "0xF74E7C", VA = "0xF74E7C")]
		private Vector3 GetPosition(IKSolverFullBody solver, out Quaternion planeRotationOffset)
		{
			return default(Vector3);
		}
	}
	[Serializable]
	[Token(Token = "0x2000090")]
	public class IKMapping
	{
		[Serializable]
		[Token(Token = "0x2000091")]
		public class BoneMap
		{
			[Token(Token = "0x400032A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform transform;

			[Token(Token = "0x400032B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int chainIndex;

			[Token(Token = "0x400032C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public int nodeIndex;

			[Token(Token = "0x400032D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector3 defaultLocalPosition;

			[Token(Token = "0x400032E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public Quaternion defaultLocalRotation;

			[Token(Token = "0x400032F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public Vector3 localSwingAxis;

			[Token(Token = "0x4000330")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Vector3 localTwistAxis;

			[Token(Token = "0x4000331")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public Vector3 planePosition;

			[Token(Token = "0x4000332")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public Vector3 ikPosition;

			[Token(Token = "0x4000333")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			public Quaternion defaultLocalTargetRotation;

			[Token(Token = "0x4000334")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			private Quaternion maintainRotation;

			[Token(Token = "0x4000335")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
			public float length;

			[Token(Token = "0x4000336")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			public Quaternion animatedRotation;

			[Token(Token = "0x4000337")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			private Transform planeBone1;

			[Token(Token = "0x4000338")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			private Transform planeBone2;

			[Token(Token = "0x4000339")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			private Transform planeBone3;

			[Token(Token = "0x400033A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
			private int plane1ChainIndex;

			[Token(Token = "0x400033B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
			private int plane1NodeIndex;

			[Token(Token = "0x400033C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			private int plane2ChainIndex;

			[Token(Token = "0x400033D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
			private int plane2NodeIndex;

			[Token(Token = "0x400033E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
			private int plane3ChainIndex;

			[Token(Token = "0x400033F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
			private int plane3NodeIndex;

			[Token(Token = "0x1700006F")]
			public Vector3 swingDirection
			{
				[Token(Token = "0x6000517")]
				[Address(RVA = "0xF753EC", Offset = "0xF753EC", VA = "0xF753EC")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x17000070")]
			public bool isNodeBone
			{
				[Token(Token = "0x600051A")]
				[Address(RVA = "0xF754A4", Offset = "0xF754A4", VA = "0xF754A4")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x17000071")]
			private Quaternion lastAnimatedTargetRotation
			{
				[Token(Token = "0x600052E")]
				[Address(RVA = "0xF75890", Offset = "0xF75890", VA = "0xF75890")]
				get
				{
					return default(Quaternion);
				}
			}

			[Token(Token = "0x6000516")]
			[Address(RVA = "0xF753A8", Offset = "0xF753A8", VA = "0xF753A8")]
			public void Initiate(Transform transform, IKSolverFullBody solver)
			{
			}

			[Token(Token = "0x6000518")]
			[Address(RVA = "0xF7541C", Offset = "0xF7541C", VA = "0xF7541C")]
			public void StoreDefaultLocalState()
			{
			}

			[Token(Token = "0x6000519")]
			[Address(RVA = "0xF75460", Offset = "0xF75460", VA = "0xF75460")]
			public void FixTransform(bool position)
			{
			}

			[Token(Token = "0x600051B")]
			[Address(RVA = "0xF754B4", Offset = "0xF754B4", VA = "0xF754B4")]
			public void SetLength(BoneMap nextBone)
			{
			}

			[Token(Token = "0x600051C")]
			[Address(RVA = "0xF75588", Offset = "0xF75588", VA = "0xF75588")]
			public void SetLocalSwingAxis(BoneMap swingTarget)
			{
			}

			[Token(Token = "0x600051D")]
			[Address(RVA = "0xF75590", Offset = "0xF75590", VA = "0xF75590")]
			public void SetLocalSwingAxis(BoneMap bone1, BoneMap bone2)
			{
			}

			[Token(Token = "0x600051E")]
			[Address(RVA = "0xF7565C", Offset = "0xF7565C", VA = "0xF7565C")]
			public void SetLocalTwistAxis(Vector3 twistDirection, Vector3 normalDirection)
			{
			}

			[Token(Token = "0x600051F")]
			[Address(RVA = "0xF756C8", Offset = "0xF756C8", VA = "0xF756C8")]
			public void SetPlane(IKSolverFullBody solver, Transform planeBone1, Transform planeBone2, Transform planeBone3)
			{
			}

			[Token(Token = "0x6000520")]
			[Address(RVA = "0xF75780", Offset = "0xF75780", VA = "0xF75780")]
			public void UpdatePlane(bool rotation, bool position)
			{
			}

			[Token(Token = "0x6000521")]
			[Address(RVA = "0xF759F8", Offset = "0xF759F8", VA = "0xF759F8")]
			public void SetIKPosition()
			{
			}

			[Token(Token = "0x6000522")]
			[Address(RVA = "0xF75A24", Offset = "0xF75A24", VA = "0xF75A24")]
			public void MaintainRotation()
			{
			}

			[Token(Token = "0x6000523")]
			[Address(RVA = "0xF75A50", Offset = "0xF75A50", VA = "0xF75A50")]
			public void SetToIKPosition()
			{
			}

			[Token(Token = "0x6000524")]
			[Address(RVA = "0xF75A78", Offset = "0xF75A78", VA = "0xF75A78")]
			public void FixToNode(IKSolverFullBody solver, float weight, [Optional] IKSolver.Node fixNode)
			{
			}

			[Token(Token = "0x6000525")]
			[Address(RVA = "0xF75B3C", Offset = "0xF75B3C", VA = "0xF75B3C")]
			public Vector3 GetPlanePosition(IKSolverFullBody solver)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6000526")]
			[Address(RVA = "0xF75CD0", Offset = "0xF75CD0", VA = "0xF75CD0")]
			public void PositionToPlane(IKSolverFullBody solver)
			{
			}

			[Token(Token = "0x6000527")]
			[Address(RVA = "0xF75CF4", Offset = "0xF75CF4", VA = "0xF75CF4")]
			public void RotateToPlane(IKSolverFullBody solver, float weight)
			{
			}

			[Token(Token = "0x6000528")]
			[Address(RVA = "0xF75E14", Offset = "0xF75E14", VA = "0xF75E14")]
			public void Swing(Vector3 swingTarget, float weight)
			{
			}

			[Token(Token = "0x6000529")]
			[Address(RVA = "0xF75E78", Offset = "0xF75E78", VA = "0xF75E78")]
			public void Swing(Vector3 pos1, Vector3 pos2, float weight)
			{
			}

			[Token(Token = "0x600052A")]
			[Address(RVA = "0xF75FF8", Offset = "0xF75FF8", VA = "0xF75FF8")]
			public void Twist(Vector3 twistDirection, Vector3 normalDirection, float weight)
			{
			}

			[Token(Token = "0x600052B")]
			[Address(RVA = "0xF76178", Offset = "0xF76178", VA = "0xF76178")]
			public void RotateToMaintain(float weight)
			{
			}

			[Token(Token = "0x600052C")]
			[Address(RVA = "0xF761F4", Offset = "0xF761F4", VA = "0xF761F4")]
			public void RotateToEffector(IKSolverFullBody solver, float weight)
			{
			}

			[Token(Token = "0x600052D")]
			[Address(RVA = "0xF75BB4", Offset = "0xF75BB4", VA = "0xF75BB4")]
			private Quaternion GetTargetRotation(IKSolverFullBody solver)
			{
				return default(Quaternion);
			}

			[Token(Token = "0x600052F")]
			[Address(RVA = "0xF7631C", Offset = "0xF7631C", VA = "0xF7631C")]
			public BoneMap()
			{
			}
		}

		[Token(Token = "0x6000511")]
		[Address(RVA = "0xF75138", Offset = "0xF75138", VA = "0xF75138", Slot = "4")]
		public virtual bool IsValid(IKSolver solver, ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000512")]
		[Address(RVA = "0xF75140", Offset = "0xF75140", VA = "0xF75140", Slot = "5")]
		public virtual void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6000513")]
		[Address(RVA = "0xF75144", Offset = "0xF75144", VA = "0xF75144")]
		protected bool BoneIsValid(Transform bone, IKSolver solver, ref string message, [Optional] Warning.Logger logger)
		{
			return default(bool);
		}

		[Token(Token = "0x6000514")]
		[Address(RVA = "0xF7528C", Offset = "0xF7528C", VA = "0xF7528C")]
		protected Vector3 SolveFABRIKJoint(Vector3 pos1, Vector3 pos2, float length)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000515")]
		[Address(RVA = "0xF753A0", Offset = "0xF753A0", VA = "0xF753A0")]
		public IKMapping()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000092")]
	public class IKMappingBone : IKMapping
	{
		[Token(Token = "0x4000340")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform bone;

		[Token(Token = "0x4000341")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0f, 1f)]
		public float maintainRotationWeight;

		[Token(Token = "0x4000342")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private BoneMap boneMap;

		[Token(Token = "0x6000530")]
		[Address(RVA = "0xF76338", Offset = "0xF76338", VA = "0xF76338", Slot = "4")]
		public override bool IsValid(IKSolver solver, ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000531")]
		[Address(RVA = "0xF763E0", Offset = "0xF763E0", VA = "0xF763E0")]
		public IKMappingBone()
		{
		}

		[Token(Token = "0x6000532")]
		[Address(RVA = "0xF76470", Offset = "0xF76470", VA = "0xF76470")]
		public IKMappingBone(Transform bone)
		{
		}

		[Token(Token = "0x6000533")]
		[Address(RVA = "0xF7651C", Offset = "0xF7651C", VA = "0xF7651C")]
		public void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6000534")]
		[Address(RVA = "0xF76534", Offset = "0xF76534", VA = "0xF76534")]
		public void FixTransforms()
		{
		}

		[Token(Token = "0x6000535")]
		[Address(RVA = "0xF76550", Offset = "0xF76550", VA = "0xF76550", Slot = "5")]
		public override void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6000536")]
		[Address(RVA = "0xF765F8", Offset = "0xF765F8", VA = "0xF765F8")]
		public void ReadPose()
		{
		}

		[Token(Token = "0x6000537")]
		[Address(RVA = "0xF76610", Offset = "0xF76610", VA = "0xF76610")]
		public void WritePose(float solverWeight)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000093")]
	public class IKMappingLimb : IKMapping
	{
		[Serializable]
		[Token(Token = "0x2000094")]
		public enum BoneMapType
		{
			[Token(Token = "0x400034F")]
			Parent,
			[Token(Token = "0x4000350")]
			Bone1,
			[Token(Token = "0x4000351")]
			Bone2,
			[Token(Token = "0x4000352")]
			Bone3
		}

		[Token(Token = "0x4000343")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform parentBone;

		[Token(Token = "0x4000344")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform bone1;

		[Token(Token = "0x4000345")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform bone2;

		[Token(Token = "0x4000346")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform bone3;

		[Token(Token = "0x4000347")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Range(0f, 1f)]
		public float maintainRotationWeight;

		[Token(Token = "0x4000348")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Range(0f, 1f)]
		public float weight;

		[NonSerialized]
		[Token(Token = "0x4000349")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool updatePlaneRotations;

		[Token(Token = "0x400034A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private BoneMap boneMapParent;

		[Token(Token = "0x400034B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private BoneMap boneMap1;

		[Token(Token = "0x400034C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private BoneMap boneMap2;

		[Token(Token = "0x400034D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private BoneMap boneMap3;

		[Token(Token = "0x6000538")]
		[Address(RVA = "0xF76634", Offset = "0xF76634", VA = "0xF76634", Slot = "4")]
		public override bool IsValid(IKSolver solver, ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000539")]
		[Address(RVA = "0xF766A8", Offset = "0xF766A8", VA = "0xF766A8")]
		public BoneMap GetBoneMap(BoneMapType boneMap)
		{
			return null;
		}

		[Token(Token = "0x600053A")]
		[Address(RVA = "0xF76770", Offset = "0xF76770", VA = "0xF76770")]
		public void SetLimbOrientation(Vector3 upper, Vector3 lower)
		{
		}

		[Token(Token = "0x600053B")]
		[Address(RVA = "0xF76A28", Offset = "0xF76A28", VA = "0xF76A28")]
		public IKMappingLimb()
		{
		}

		[Token(Token = "0x600053C")]
		[Address(RVA = "0xF76B74", Offset = "0xF76B74", VA = "0xF76B74")]
		public IKMappingLimb(Transform bone1, Transform bone2, Transform bone3, [Optional] Transform parentBone)
		{
		}

		[Token(Token = "0x600053D")]
		[Address(RVA = "0xF76CF8", Offset = "0xF76CF8", VA = "0xF76CF8")]
		public void SetBones(Transform bone1, Transform bone2, Transform bone3, [Optional] Transform parentBone)
		{
		}

		[Token(Token = "0x600053E")]
		[Address(RVA = "0xF76D58", Offset = "0xF76D58", VA = "0xF76D58")]
		public void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x600053F")]
		[Address(RVA = "0xF76DF0", Offset = "0xF76DF0", VA = "0xF76DF0")]
		public void FixTransforms()
		{
		}

		[Token(Token = "0x6000540")]
		[Address(RVA = "0xF76E98", Offset = "0xF76E98", VA = "0xF76E98", Slot = "5")]
		public override void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6000541")]
		[Address(RVA = "0xF7714C", Offset = "0xF7714C", VA = "0xF7714C")]
		public void ReadPose()
		{
		}

		[Token(Token = "0x6000542")]
		[Address(RVA = "0xF771AC", Offset = "0xF771AC", VA = "0xF771AC")]
		public void WritePose(IKSolverFullBody solver, bool fullBody)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000095")]
	public class IKMappingSpine : IKMapping
	{
		[Token(Token = "0x4000353")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform[] spineBones;

		[Token(Token = "0x4000354")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform leftUpperArmBone;

		[Token(Token = "0x4000355")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform rightUpperArmBone;

		[Token(Token = "0x4000356")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform leftThighBone;

		[Token(Token = "0x4000357")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform rightThighBone;

		[Token(Token = "0x4000358")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Range(1f, 3f)]
		public int iterations;

		[Token(Token = "0x4000359")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Range(0f, 1f)]
		public float twistWeight;

		[Token(Token = "0x400035A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int rootNodeIndex;

		[Token(Token = "0x400035B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private BoneMap[] spine;

		[Token(Token = "0x400035C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private BoneMap leftUpperArm;

		[Token(Token = "0x400035D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private BoneMap rightUpperArm;

		[Token(Token = "0x400035E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private BoneMap leftThigh;

		[Token(Token = "0x400035F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private BoneMap rightThigh;

		[Token(Token = "0x4000360")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool useFABRIK;

		[Token(Token = "0x6000543")]
		[Address(RVA = "0xF772F4", Offset = "0xF772F4", VA = "0xF772F4", Slot = "4")]
		public override bool IsValid(IKSolver solver, ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000544")]
		[Address(RVA = "0xF77620", Offset = "0xF77620", VA = "0xF77620")]
		public IKMappingSpine()
		{
		}

		[Token(Token = "0x6000545")]
		[Address(RVA = "0xF77798", Offset = "0xF77798", VA = "0xF77798")]
		public IKMappingSpine(Transform[] spineBones, Transform leftUpperArmBone, Transform rightUpperArmBone, Transform leftThighBone, Transform rightThighBone)
		{
		}

		[Token(Token = "0x6000546")]
		[Address(RVA = "0xF77950", Offset = "0xF77950", VA = "0xF77950")]
		public void SetBones(Transform[] spineBones, Transform leftUpperArmBone, Transform rightUpperArmBone, Transform leftThighBone, Transform rightThighBone)
		{
		}

		[Token(Token = "0x6000547")]
		[Address(RVA = "0xF779C4", Offset = "0xF779C4", VA = "0xF779C4")]
		public void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6000548")]
		[Address(RVA = "0xF77A20", Offset = "0xF77A20", VA = "0xF77A20")]
		public void FixTransforms()
		{
		}

		[Token(Token = "0x6000549")]
		[Address(RVA = "0xF77A98", Offset = "0xF77A98", VA = "0xF77A98", Slot = "5")]
		public override void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x600054A")]
		[Address(RVA = "0xF78110", Offset = "0xF78110", VA = "0xF78110")]
		private bool UseFABRIK()
		{
			return default(bool);
		}

		[Token(Token = "0x600054B")]
		[Address(RVA = "0xF78148", Offset = "0xF78148", VA = "0xF78148")]
		public void ReadPose()
		{
		}

		[Token(Token = "0x600054C")]
		[Address(RVA = "0xF783AC", Offset = "0xF783AC", VA = "0xF783AC")]
		public void WritePose(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x600054D")]
		[Address(RVA = "0xF786D4", Offset = "0xF786D4", VA = "0xF786D4")]
		public void ForwardReach(Vector3 position)
		{
		}

		[Token(Token = "0x600054E")]
		[Address(RVA = "0xF787B4", Offset = "0xF787B4", VA = "0xF787B4")]
		private void BackwardReach(Vector3 position)
		{
		}

		[Token(Token = "0x600054F")]
		[Address(RVA = "0xF78868", Offset = "0xF78868", VA = "0xF78868")]
		private void MapToSolverPositions(IKSolverFullBody solver)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000096")]
	public abstract class IKSolver
	{
		[Serializable]
		[Token(Token = "0x2000097")]
		public class Point
		{
			[Token(Token = "0x400036A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform transform;

			[Token(Token = "0x400036B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Range(0f, 1f)]
			public float weight;

			[Token(Token = "0x400036C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Vector3 solverPosition;

			[Token(Token = "0x400036D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Quaternion solverRotation;

			[Token(Token = "0x400036E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Vector3 defaultLocalPosition;

			[Token(Token = "0x400036F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			public Quaternion defaultLocalRotation;

			[Token(Token = "0x6000566")]
			[Address(RVA = "0xF79144", Offset = "0xF79144", VA = "0xF79144")]
			public void StoreDefaultLocalState()
			{
			}

			[Token(Token = "0x6000567")]
			[Address(RVA = "0xF79188", Offset = "0xF79188", VA = "0xF79188")]
			public void FixTransform()
			{
			}

			[Token(Token = "0x6000568")]
			[Address(RVA = "0xF79268", Offset = "0xF79268", VA = "0xF79268")]
			public void UpdateSolverPosition()
			{
			}

			[Token(Token = "0x6000569")]
			[Address(RVA = "0xF79294", Offset = "0xF79294", VA = "0xF79294")]
			public void UpdateSolverLocalPosition()
			{
			}

			[Token(Token = "0x600056A")]
			[Address(RVA = "0xF792C0", Offset = "0xF792C0", VA = "0xF792C0")]
			public void UpdateSolverState()
			{
			}

			[Token(Token = "0x600056B")]
			[Address(RVA = "0xF79304", Offset = "0xF79304", VA = "0xF79304")]
			public void UpdateSolverLocalState()
			{
			}

			[Token(Token = "0x600056C")]
			[Address(RVA = "0xF79348", Offset = "0xF79348", VA = "0xF79348")]
			public Point()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000098")]
		public class Bone : Point
		{
			[Token(Token = "0x4000370")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public float length;

			[Token(Token = "0x4000371")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public float sqrMag;

			[Token(Token = "0x4000372")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public Vector3 axis;

			[Token(Token = "0x4000373")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			private RotationLimit _rotationLimit;

			[Token(Token = "0x4000374")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			private bool isLimited;

			[Token(Token = "0x17000073")]
			public RotationLimit rotationLimit
			{
				[Token(Token = "0x600056D")]
				[Address(RVA = "0xF793A8", Offset = "0xF793A8", VA = "0xF793A8")]
				get
				{
					return null;
				}
				[Token(Token = "0x600056E")]
				[Address(RVA = "0xF79498", Offset = "0xF79498", VA = "0xF79498")]
				set
				{
				}
			}

			[Token(Token = "0x600056F")]
			[Address(RVA = "0xF7951C", Offset = "0xF7951C", VA = "0xF7951C")]
			public void Swing(Vector3 swingTarget, float weight = 1f)
			{
			}

			[Token(Token = "0x6000570")]
			[Address(RVA = "0xF79788", Offset = "0xF79788", VA = "0xF79788")]
			public static void SolverSwing(Bone[] bones, int index, Vector3 swingTarget, float weight = 1f)
			{
			}

			[Token(Token = "0x6000571")]
			[Address(RVA = "0xF79A44", Offset = "0xF79A44", VA = "0xF79A44")]
			public void Swing2D(Vector3 swingTarget, float weight = 1f)
			{
			}

			[Token(Token = "0x6000572")]
			[Address(RVA = "0xF79C38", Offset = "0xF79C38", VA = "0xF79C38")]
			public void SetToSolverPosition()
			{
			}

			[Token(Token = "0x6000573")]
			[Address(RVA = "0xF79C60", Offset = "0xF79C60", VA = "0xF79C60")]
			public Bone()
			{
			}

			[Token(Token = "0x6000574")]
			[Address(RVA = "0xF79CCC", Offset = "0xF79CCC", VA = "0xF79CCC")]
			public Bone(Transform transform)
			{
			}

			[Token(Token = "0x6000575")]
			[Address(RVA = "0xF79D4C", Offset = "0xF79D4C", VA = "0xF79D4C")]
			public Bone(Transform transform, float weight)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000099")]
		public class Node : Point
		{
			[Token(Token = "0x4000375")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public float length;

			[Token(Token = "0x4000376")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public float effectorPositionWeight;

			[Token(Token = "0x4000377")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public float effectorRotationWeight;

			[Token(Token = "0x4000378")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public Vector3 offset;

			[Token(Token = "0x6000576")]
			[Address(RVA = "0xF79DE0", Offset = "0xF79DE0", VA = "0xF79DE0")]
			public Node()
			{
			}

			[Token(Token = "0x6000577")]
			[Address(RVA = "0xF79DE4", Offset = "0xF79DE4", VA = "0xF79DE4")]
			public Node(Transform transform)
			{
			}

			[Token(Token = "0x6000578")]
			[Address(RVA = "0xF79E10", Offset = "0xF79E10", VA = "0xF79E10")]
			public Node(Transform transform, float weight)
			{
			}
		}

		[Token(Token = "0x200009A")]
		public delegate void UpdateDelegate();

		[Token(Token = "0x200009B")]
		public delegate void IterationDelegate(int i);

		[Token(Token = "0x4000361")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[HideInInspector]
		public Vector3 IKPosition;

		[Token(Token = "0x4000362")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("The positional or the master weight of the solver.")]
		[Range(0f, 1f)]
		public float IKPositionWeight;

		[Token(Token = "0x4000364")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UpdateDelegate OnPreInitiate;

		[Token(Token = "0x4000365")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UpdateDelegate OnPostInitiate;

		[Token(Token = "0x4000366")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UpdateDelegate OnPreUpdate;

		[Token(Token = "0x4000367")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public UpdateDelegate OnPostUpdate;

		[Token(Token = "0x4000368")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected bool firstInitiation;

		[Token(Token = "0x4000369")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		[HideInInspector]
		protected Transform root;

		[Token(Token = "0x17000072")]
		public bool initiated
		{
			[Token(Token = "0x6000559")]
			[Address(RVA = "0xF78D50", Offset = "0xF78D50", VA = "0xF78D50")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600055A")]
			[Address(RVA = "0xF78D58", Offset = "0xF78D58", VA = "0xF78D58")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000550")]
		[Address(RVA = "0xF78AAC", Offset = "0xF78AAC", VA = "0xF78AAC")]
		public bool IsValid()
		{
			return default(bool);
		}

		[Token(Token = "0x6000551")]
		public abstract bool IsValid(ref string message);

		[Token(Token = "0x6000552")]
		[Address(RVA = "0xF78B20", Offset = "0xF78B20", VA = "0xF78B20")]
		public void Initiate(Transform root)
		{
		}

		[Token(Token = "0x6000553")]
		[Address(RVA = "0xF78C9C", Offset = "0xF78C9C", VA = "0xF78C9C")]
		public void Update()
		{
		}

		[Token(Token = "0x6000554")]
		[Address(RVA = "0xF78D0C", Offset = "0xF78D0C", VA = "0xF78D0C", Slot = "5")]
		public virtual Vector3 GetIKPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000555")]
		[Address(RVA = "0xF78D18", Offset = "0xF78D18", VA = "0xF78D18")]
		public void SetIKPosition(Vector3 position)
		{
		}

		[Token(Token = "0x6000556")]
		[Address(RVA = "0xF78D24", Offset = "0xF78D24", VA = "0xF78D24")]
		public float GetIKPositionWeight()
		{
			return default(float);
		}

		[Token(Token = "0x6000557")]
		[Address(RVA = "0xF78D2C", Offset = "0xF78D2C", VA = "0xF78D2C")]
		public void SetIKPositionWeight(float weight)
		{
		}

		[Token(Token = "0x6000558")]
		[Address(RVA = "0xF78D48", Offset = "0xF78D48", VA = "0xF78D48")]
		public Transform GetRoot()
		{
			return null;
		}

		[Token(Token = "0x600055B")]
		public abstract Point[] GetPoints();

		[Token(Token = "0x600055C")]
		public abstract Point GetPoint(Transform transform);

		[Token(Token = "0x600055D")]
		public abstract void FixTransforms();

		[Token(Token = "0x600055E")]
		public abstract void StoreDefaultLocalState();

		[Token(Token = "0x600055F")]
		protected abstract void OnInitiate();

		[Token(Token = "0x6000560")]
		protected abstract void OnUpdate();

		[Token(Token = "0x6000561")]
		[Address(RVA = "0xF78D64", Offset = "0xF78D64", VA = "0xF78D64")]
		protected void LogWarning(string message)
		{
		}

		[Token(Token = "0x6000562")]
		[Address(RVA = "0xF78D7C", Offset = "0xF78D7C", VA = "0xF78D7C")]
		public static Transform ContainsDuplicateBone(Bone[] bones)
		{
			return null;
		}

		[Token(Token = "0x6000563")]
		[Address(RVA = "0xF78EA0", Offset = "0xF78EA0", VA = "0xF78EA0")]
		public static bool HierarchyIsValid(Bone[] bones)
		{
			return default(bool);
		}

		[Token(Token = "0x6000564")]
		[Address(RVA = "0xF78F38", Offset = "0xF78F38", VA = "0xF78F38")]
		protected static float PreSolveBones(ref Bone[] bones)
		{
			return default(float);
		}

		[Token(Token = "0x6000565")]
		[Address(RVA = "0xF7912C", Offset = "0xF7912C", VA = "0xF7912C")]
		protected IKSolver()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200009C")]
	public class IKSolverAim : IKSolverHeuristic
	{
		[Token(Token = "0x4000379")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Transform transform;

		[Token(Token = "0x400037A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Vector3 axis;

		[Token(Token = "0x400037B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public Vector3 poleAxis;

		[Token(Token = "0x400037C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Vector3 polePosition;

		[Token(Token = "0x400037D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[Range(0f, 1f)]
		public float poleWeight;

		[Token(Token = "0x400037E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Transform poleTarget;

		[Token(Token = "0x400037F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Range(0f, 1f)]
		public float clampWeight;

		[Token(Token = "0x4000380")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[Range(0f, 2f)]
		public int clampSmoothing;

		[Token(Token = "0x4000381")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public IterationDelegate OnPreIteration;

		[Token(Token = "0x4000382")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private float step;

		[Token(Token = "0x4000383")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private Vector3 clampedIKPosition;

		[Token(Token = "0x4000384")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private RotationLimit transformLimit;

		[Token(Token = "0x4000385")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Transform lastTransform;

		[Token(Token = "0x17000074")]
		public Vector3 transformAxis
		{
			[Token(Token = "0x6000582")]
			[Address(RVA = "0xF7A20C", Offset = "0xF7A20C", VA = "0xF7A20C")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000075")]
		public Vector3 transformPoleAxis
		{
			[Token(Token = "0x6000583")]
			[Address(RVA = "0xF7A23C", Offset = "0xF7A23C", VA = "0xF7A23C")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000076")]
		protected override int minBones
		{
			[Token(Token = "0x6000586")]
			[Address(RVA = "0xF7AE8C", Offset = "0xF7AE8C", VA = "0xF7AE8C", Slot = "12")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000077")]
		protected override Vector3 localDirection
		{
			[Token(Token = "0x600058A")]
			[Address(RVA = "0xF7B3CC", Offset = "0xF7B3CC", VA = "0xF7B3CC", Slot = "15")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6000581")]
		[Address(RVA = "0xF7A0D4", Offset = "0xF7A0D4", VA = "0xF7A0D4")]
		public float GetAngle()
		{
			return default(float);
		}

		[Token(Token = "0x6000584")]
		[Address(RVA = "0xF7A26C", Offset = "0xF7A26C", VA = "0xF7A26C", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x6000585")]
		[Address(RVA = "0xF7A4F8", Offset = "0xF7A4F8", VA = "0xF7A4F8", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x6000587")]
		[Address(RVA = "0xF7ADE4", Offset = "0xF7ADE4", VA = "0xF7ADE4")]
		private void Solve()
		{
		}

		[Token(Token = "0x6000588")]
		[Address(RVA = "0xF7AA80", Offset = "0xF7AA80", VA = "0xF7AA80")]
		private Vector3 GetClampedIKPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000589")]
		[Address(RVA = "0xF7AE94", Offset = "0xF7AE94", VA = "0xF7AE94")]
		private void RotateToTarget(Vector3 targetPosition, Bone bone, float weight)
		{
		}

		[Token(Token = "0x600058B")]
		[Address(RVA = "0xF7B42C", Offset = "0xF7B42C", VA = "0xF7B42C")]
		public IKSolverAim()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200009D")]
	public class IKSolverArm : IKSolver
	{
		[Token(Token = "0x4000386")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Range(0f, 1f)]
		public float IKRotationWeight;

		[Token(Token = "0x4000387")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public Quaternion IKRotation;

		[Token(Token = "0x4000388")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Point chest;

		[Token(Token = "0x4000389")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Point shoulder;

		[Token(Token = "0x400038A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Point upperArm;

		[Token(Token = "0x400038B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Point forearm;

		[Token(Token = "0x400038C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Point hand;

		[Token(Token = "0x400038D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public bool isLeft;

		[Token(Token = "0x400038E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public IKSolverVR.Arm arm;

		[Token(Token = "0x400038F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Vector3[] positions;

		[Token(Token = "0x4000390")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Quaternion[] rotations;

		[Token(Token = "0x600058C")]
		[Address(RVA = "0xF7B54C", Offset = "0xF7B54C", VA = "0xF7B54C", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x600058D")]
		[Address(RVA = "0xF7B8F0", Offset = "0xF7B8F0", VA = "0xF7B8F0")]
		public bool SetChain(Transform chest, Transform shoulder, Transform upperArm, Transform forearm, Transform hand, Transform root)
		{
			return default(bool);
		}

		[Token(Token = "0x600058E")]
		[Address(RVA = "0xF7B9A0", Offset = "0xF7B9A0", VA = "0xF7B9A0", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x600058F")]
		[Address(RVA = "0xF7BB20", Offset = "0xF7BB20", VA = "0xF7BB20", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x6000590")]
		[Address(RVA = "0xF7BC80", Offset = "0xF7BC80", VA = "0xF7BC80", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6000591")]
		[Address(RVA = "0xF7BCC0", Offset = "0xF7BCC0", VA = "0xF7BCC0", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x6000592")]
		[Address(RVA = "0xF7BD10", Offset = "0xF7BD10", VA = "0xF7BD10", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x6000593")]
		[Address(RVA = "0xF7C070", Offset = "0xF7C070", VA = "0xF7C070", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x6000594")]
		[Address(RVA = "0xF7C090", Offset = "0xF7C090", VA = "0xF7C090")]
		private void Solve()
		{
		}

		[Token(Token = "0x6000595")]
		[Address(RVA = "0xF7BD68", Offset = "0xF7BD68", VA = "0xF7BD68")]
		private void Read()
		{
		}

		[Token(Token = "0x6000596")]
		[Address(RVA = "0xF7C0F0", Offset = "0xF7C0F0", VA = "0xF7C0F0")]
		private void Write()
		{
		}

		[Token(Token = "0x6000597")]
		[Address(RVA = "0xF7C268", Offset = "0xF7C268", VA = "0xF7C268")]
		public IKSolverArm()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200009E")]
	public class IKSolverCCD : IKSolverHeuristic
	{
		[Token(Token = "0x4000391")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public IterationDelegate OnPreIteration;

		[Token(Token = "0x6000598")]
		[Address(RVA = "0xF7C45C", Offset = "0xF7C45C", VA = "0xF7C45C")]
		public void FadeOutBoneWeights()
		{
		}

		[Token(Token = "0x6000599")]
		[Address(RVA = "0xF7C4CC", Offset = "0xF7C4CC", VA = "0xF7C4CC", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x600059A")]
		[Address(RVA = "0xF7C9C0", Offset = "0xF7C9C0", VA = "0xF7C9C0", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x600059B")]
		[Address(RVA = "0xF7D094", Offset = "0xF7D094", VA = "0xF7D094")]
		protected void Solve(Vector3 targetPosition)
		{
		}

		[Token(Token = "0x600059C")]
		[Address(RVA = "0xF7D724", Offset = "0xF7D724", VA = "0xF7D724")]
		public IKSolverCCD()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200009F")]
	public class IKSolverFABRIK : IKSolverHeuristic
	{
		[Token(Token = "0x4000392")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public IterationDelegate OnPreIteration;

		[Token(Token = "0x4000393")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool[] limitedBones;

		[Token(Token = "0x4000394")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3[] solverLocalPositions;

		[Token(Token = "0x17000078")]
		protected override bool boneLengthCanBeZero
		{
			[Token(Token = "0x60005A2")]
			[Address(RVA = "0xF7E70C", Offset = "0xF7E70C", VA = "0xF7E70C", Slot = "13")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600059D")]
		[Address(RVA = "0xF7D728", Offset = "0xF7D728", VA = "0xF7D728")]
		public void SolveForward(Vector3 position)
		{
		}

		[Token(Token = "0x600059E")]
		[Address(RVA = "0xF7DD08", Offset = "0xF7DD08", VA = "0xF7DD08")]
		public void SolveBackward(Vector3 position)
		{
		}

		[Token(Token = "0x600059F")]
		[Address(RVA = "0xF7DE38", Offset = "0xF7DE38", VA = "0xF7DE38", Slot = "5")]
		public override Vector3 GetIKPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60005A0")]
		[Address(RVA = "0xF7DEC0", Offset = "0xF7DEC0", VA = "0xF7DEC0", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x60005A1")]
		[Address(RVA = "0xF7E3D4", Offset = "0xF7E3D4", VA = "0xF7E3D4", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x60005A3")]
		[Address(RVA = "0xF7E714", Offset = "0xF7E714", VA = "0xF7E714")]
		private Vector3 SolveJoint(Vector3 pos1, Vector3 pos2, float length)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60005A4")]
		[Address(RVA = "0xF7D800", Offset = "0xF7D800", VA = "0xF7D800")]
		private void OnPreSolve()
		{
		}

		[Token(Token = "0x60005A5")]
		[Address(RVA = "0xF7DDF0", Offset = "0xF7DDF0", VA = "0xF7DDF0")]
		private void OnPostSolve()
		{
		}

		[Token(Token = "0x60005A6")]
		[Address(RVA = "0xF7E6C4", Offset = "0xF7E6C4", VA = "0xF7E6C4")]
		private void Solve(Vector3 targetPosition)
		{
		}

		[Token(Token = "0x60005A7")]
		[Address(RVA = "0xF7DB9C", Offset = "0xF7DB9C", VA = "0xF7DB9C")]
		private void ForwardReach(Vector3 position)
		{
		}

		[Token(Token = "0x60005A8")]
		[Address(RVA = "0xF7EDC0", Offset = "0xF7EDC0", VA = "0xF7EDC0")]
		private void SolverMove(int index, Vector3 offset)
		{
		}

		[Token(Token = "0x60005A9")]
		[Address(RVA = "0xF7EE28", Offset = "0xF7EE28", VA = "0xF7EE28")]
		private void SolverRotate(int index, Quaternion rotation, bool recursive)
		{
		}

		[Token(Token = "0x60005AA")]
		[Address(RVA = "0xF7EEF8", Offset = "0xF7EEF8", VA = "0xF7EEF8")]
		private void SolverRotateChildren(int index, Quaternion rotation)
		{
		}

		[Token(Token = "0x60005AB")]
		[Address(RVA = "0xF7EFC0", Offset = "0xF7EFC0", VA = "0xF7EFC0")]
		private void SolverMoveChildrenAroundPoint(int index, Quaternion rotation)
		{
		}

		[Token(Token = "0x60005AC")]
		[Address(RVA = "0xF7E14C", Offset = "0xF7E14C", VA = "0xF7E14C")]
		private Quaternion GetParentSolverRotation(int index)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60005AD")]
		[Address(RVA = "0xF7E290", Offset = "0xF7E290", VA = "0xF7E290")]
		private Vector3 GetParentSolverPosition(int index)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60005AE")]
		[Address(RVA = "0xF7F0B0", Offset = "0xF7F0B0", VA = "0xF7F0B0")]
		private Quaternion GetLimitedRotation(int index, Quaternion q, out bool changed)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60005AF")]
		[Address(RVA = "0xF7E9B0", Offset = "0xF7E9B0", VA = "0xF7E9B0")]
		private void LimitForward(int rotateBone, int limitBone)
		{
		}

		[Token(Token = "0x60005B0")]
		[Address(RVA = "0xF7DDE0", Offset = "0xF7DDE0", VA = "0xF7DDE0")]
		private void BackwardReach(Vector3 position)
		{
		}

		[Token(Token = "0x60005B1")]
		[Address(RVA = "0xF7F720", Offset = "0xF7F720", VA = "0xF7F720")]
		private void BackwardReachUnlimited(Vector3 position)
		{
		}

		[Token(Token = "0x60005B2")]
		[Address(RVA = "0xF7F270", Offset = "0xF7F270", VA = "0xF7F270")]
		private void BackwardReachLimited(Vector3 position)
		{
		}

		[Token(Token = "0x60005B3")]
		[Address(RVA = "0xF7E830", Offset = "0xF7E830", VA = "0xF7E830")]
		private void MapToSolverPositions()
		{
		}

		[Token(Token = "0x60005B4")]
		[Address(RVA = "0xF7E900", Offset = "0xF7E900", VA = "0xF7E900")]
		private void MapToSolverPositionsLimited()
		{
		}

		[Token(Token = "0x60005B5")]
		[Address(RVA = "0xF7F7D8", Offset = "0xF7F7D8", VA = "0xF7F7D8")]
		public IKSolverFABRIK()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000A0")]
	public class IKSolverFABRIKRoot : IKSolver
	{
		[Token(Token = "0x4000395")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public int iterations;

		[Token(Token = "0x4000396")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Range(0f, 1f)]
		public float rootPin;

		[Token(Token = "0x4000397")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public FABRIKChain[] chains;

		[Token(Token = "0x4000398")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool zeroWeightApplied;

		[Token(Token = "0x4000399")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool[] isRoot;

		[Token(Token = "0x400039A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 rootDefaultPosition;

		[Token(Token = "0x60005B6")]
		[Address(RVA = "0xF7F870", Offset = "0xF7F870", VA = "0xF7F870", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x60005B7")]
		[Address(RVA = "0xF7FF34", Offset = "0xF7FF34", VA = "0xF7FF34", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x60005B8")]
		[Address(RVA = "0xF7FFC0", Offset = "0xF7FFC0", VA = "0xF7FFC0", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x60005B9")]
		[Address(RVA = "0xF80054", Offset = "0xF80054", VA = "0xF80054", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x60005BA")]
		[Address(RVA = "0xF8014C", Offset = "0xF8014C", VA = "0xF8014C")]
		private bool IsRoot(int index)
		{
			return default(bool);
		}

		[Token(Token = "0x60005BB")]
		[Address(RVA = "0xF801DC", Offset = "0xF801DC", VA = "0xF801DC", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x60005BC")]
		[Address(RVA = "0xF805DC", Offset = "0xF805DC", VA = "0xF805DC", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x60005BD")]
		[Address(RVA = "0xF807D4", Offset = "0xF807D4", VA = "0xF807D4", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x60005BE")]
		[Address(RVA = "0xF8067C", Offset = "0xF8067C", VA = "0xF8067C")]
		private void AddPointsToArray(ref Point[] array, FABRIKChain chain)
		{
		}

		[Token(Token = "0x60005BF")]
		[Address(RVA = "0xF803B4", Offset = "0xF803B4", VA = "0xF803B4")]
		private Vector3 GetCentroid()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60005C0")]
		[Address(RVA = "0xF80858", Offset = "0xF80858", VA = "0xF80858")]
		public IKSolverFABRIKRoot()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000A1")]
	public class IKSolverFullBody : IKSolver
	{
		[Token(Token = "0x400039B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Range(0f, 10f)]
		public int iterations;

		[Token(Token = "0x400039C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public FBIKChain[] chain;

		[Token(Token = "0x400039D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public IKEffector[] effectors;

		[Token(Token = "0x400039E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public IKMappingSpine spineMapping;

		[Token(Token = "0x400039F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public IKMappingBone[] boneMappings;

		[Token(Token = "0x40003A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public IKMappingLimb[] limbMappings;

		[Token(Token = "0x40003A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public bool FABRIKPass;

		[Token(Token = "0x40003A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public UpdateDelegate OnPreRead;

		[Token(Token = "0x40003A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public UpdateDelegate OnPreSolve;

		[Token(Token = "0x40003A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public IterationDelegate OnPreIteration;

		[Token(Token = "0x40003A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public IterationDelegate OnPostIteration;

		[Token(Token = "0x40003A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public UpdateDelegate OnPreBend;

		[Token(Token = "0x40003A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public UpdateDelegate OnPostSolve;

		[Token(Token = "0x40003A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public UpdateDelegate OnStoreDefaultLocalState;

		[Token(Token = "0x40003A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public UpdateDelegate OnFixTransforms;

		[Token(Token = "0x60005C1")]
		[Address(RVA = "0xF808D4", Offset = "0xF808D4", VA = "0xF808D4")]
		public IKEffector GetEffector(Transform t)
		{
			return null;
		}

		[Token(Token = "0x60005C2")]
		[Address(RVA = "0xF809B0", Offset = "0xF809B0", VA = "0xF809B0")]
		public FBIKChain GetChain(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x60005C3")]
		[Address(RVA = "0xF809F8", Offset = "0xF809F8", VA = "0xF809F8")]
		public int GetChainIndex(Transform transform)
		{
			return default(int);
		}

		[Token(Token = "0x60005C4")]
		[Address(RVA = "0xF80B0C", Offset = "0xF80B0C", VA = "0xF80B0C")]
		public Node GetNode(int chainIndex, int nodeIndex)
		{
			return null;
		}

		[Token(Token = "0x60005C5")]
		[Address(RVA = "0xF80B5C", Offset = "0xF80B5C", VA = "0xF80B5C")]
		public void GetChainAndNodeIndexes(Transform transform, out int chainIndex, out int nodeIndex)
		{
		}

		[Token(Token = "0x60005C6")]
		[Address(RVA = "0xF80BD0", Offset = "0xF80BD0", VA = "0xF80BD0", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x60005C7")]
		[Address(RVA = "0xF80D70", Offset = "0xF80D70", VA = "0xF80D70", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x60005C8")]
		[Address(RVA = "0xF80ECC", Offset = "0xF80ECC", VA = "0xF80ECC", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x60005C9")]
		[Address(RVA = "0xF810D0", Offset = "0xF810D0", VA = "0xF810D0", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x60005CA")]
		[Address(RVA = "0xF811A4", Offset = "0xF811A4", VA = "0xF811A4", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x60005CB")]
		[Address(RVA = "0xF8128C", Offset = "0xF8128C", VA = "0xF8128C", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x60005CC")]
		[Address(RVA = "0xF813EC", Offset = "0xF813EC", VA = "0xF813EC", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x60005CD")]
		[Address(RVA = "0xF81588", Offset = "0xF81588", VA = "0xF81588", Slot = "12")]
		protected virtual void ReadPose()
		{
		}

		[Token(Token = "0x60005CE")]
		[Address(RVA = "0xF817C0", Offset = "0xF817C0", VA = "0xF817C0", Slot = "13")]
		protected virtual void Solve()
		{
		}

		[Token(Token = "0x60005CF")]
		[Address(RVA = "0xF81AA0", Offset = "0xF81AA0", VA = "0xF81AA0", Slot = "14")]
		protected virtual void ApplyBendConstraints()
		{
		}

		[Token(Token = "0x60005D0")]
		[Address(RVA = "0xF81AD8", Offset = "0xF81AD8", VA = "0xF81AD8", Slot = "15")]
		protected virtual void WritePose()
		{
		}

		[Token(Token = "0x60005D1")]
		[Address(RVA = "0xF81BBC", Offset = "0xF81BBC", VA = "0xF81BBC")]
		public IKSolverFullBody()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000A2")]
	public enum FullBodyBipedEffector
	{
		[Token(Token = "0x40003AB")]
		Body,
		[Token(Token = "0x40003AC")]
		LeftShoulder,
		[Token(Token = "0x40003AD")]
		RightShoulder,
		[Token(Token = "0x40003AE")]
		LeftThigh,
		[Token(Token = "0x40003AF")]
		RightThigh,
		[Token(Token = "0x40003B0")]
		LeftHand,
		[Token(Token = "0x40003B1")]
		RightHand,
		[Token(Token = "0x40003B2")]
		LeftFoot,
		[Token(Token = "0x40003B3")]
		RightFoot
	}
	[Serializable]
	[Token(Token = "0x20000A3")]
	public enum FullBodyBipedChain
	{
		[Token(Token = "0x40003B5")]
		LeftArm,
		[Token(Token = "0x40003B6")]
		RightArm,
		[Token(Token = "0x40003B7")]
		LeftLeg,
		[Token(Token = "0x40003B8")]
		RightLeg
	}
	[Serializable]
	[Token(Token = "0x20000A4")]
	public class IKSolverFullBodyBiped : IKSolverFullBody
	{
		[Token(Token = "0x40003B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Transform rootNode;

		[Token(Token = "0x40003BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[Range(0f, 1f)]
		public float spineStiffness;

		[Token(Token = "0x40003BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[Range(-1f, 1f)]
		public float pullBodyVertical;

		[Token(Token = "0x40003BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[Range(-1f, 1f)]
		public float pullBodyHorizontal;

		[Token(Token = "0x40003BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Vector3 offset;

		[Token(Token = "0x17000079")]
		public IKEffector bodyEffector
		{
			[Token(Token = "0x60005D2")]
			[Address(RVA = "0xF81D14", Offset = "0xF81D14", VA = "0xF81D14")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700007A")]
		public IKEffector leftShoulderEffector
		{
			[Token(Token = "0x60005D3")]
			[Address(RVA = "0xF81E54", Offset = "0xF81E54", VA = "0xF81E54")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700007B")]
		public IKEffector rightShoulderEffector
		{
			[Token(Token = "0x60005D4")]
			[Address(RVA = "0xF81E5C", Offset = "0xF81E5C", VA = "0xF81E5C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700007C")]
		public IKEffector leftThighEffector
		{
			[Token(Token = "0x60005D5")]
			[Address(RVA = "0xF81E64", Offset = "0xF81E64", VA = "0xF81E64")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700007D")]
		public IKEffector rightThighEffector
		{
			[Token(Token = "0x60005D6")]
			[Address(RVA = "0xF81E6C", Offset = "0xF81E6C", VA = "0xF81E6C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700007E")]
		public IKEffector leftHandEffector
		{
			[Token(Token = "0x60005D7")]
			[Address(RVA = "0xF81E74", Offset = "0xF81E74", VA = "0xF81E74")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700007F")]
		public IKEffector rightHandEffector
		{
			[Token(Token = "0x60005D8")]
			[Address(RVA = "0xF81E7C", Offset = "0xF81E7C", VA = "0xF81E7C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000080")]
		public IKEffector leftFootEffector
		{
			[Token(Token = "0x60005D9")]
			[Address(RVA = "0xF81E84", Offset = "0xF81E84", VA = "0xF81E84")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000081")]
		public IKEffector rightFootEffector
		{
			[Token(Token = "0x60005DA")]
			[Address(RVA = "0xF81E8C", Offset = "0xF81E8C", VA = "0xF81E8C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000082")]
		public FBIKChain leftArmChain
		{
			[Token(Token = "0x60005DB")]
			[Address(RVA = "0xF81E94", Offset = "0xF81E94", VA = "0xF81E94")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000083")]
		public FBIKChain rightArmChain
		{
			[Token(Token = "0x60005DC")]
			[Address(RVA = "0xF81EC0", Offset = "0xF81EC0", VA = "0xF81EC0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000084")]
		public FBIKChain leftLegChain
		{
			[Token(Token = "0x60005DD")]
			[Address(RVA = "0xF81EEC", Offset = "0xF81EEC", VA = "0xF81EEC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000085")]
		public FBIKChain rightLegChain
		{
			[Token(Token = "0x60005DE")]
			[Address(RVA = "0xF81F18", Offset = "0xF81F18", VA = "0xF81F18")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000086")]
		public IKMappingLimb leftArmMapping
		{
			[Token(Token = "0x60005DF")]
			[Address(RVA = "0xF81F44", Offset = "0xF81F44", VA = "0xF81F44")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000087")]
		public IKMappingLimb rightArmMapping
		{
			[Token(Token = "0x60005E0")]
			[Address(RVA = "0xF81F6C", Offset = "0xF81F6C", VA = "0xF81F6C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000088")]
		public IKMappingLimb leftLegMapping
		{
			[Token(Token = "0x60005E1")]
			[Address(RVA = "0xF81F98", Offset = "0xF81F98", VA = "0xF81F98")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000089")]
		public IKMappingLimb rightLegMapping
		{
			[Token(Token = "0x60005E2")]
			[Address(RVA = "0xF81FC4", Offset = "0xF81FC4", VA = "0xF81FC4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700008A")]
		public IKMappingBone headMapping
		{
			[Token(Token = "0x60005E3")]
			[Address(RVA = "0xF81FF0", Offset = "0xF81FF0", VA = "0xF81FF0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700008B")]
		public Vector3 pullBodyOffset
		{
			[Token(Token = "0x60005F3")]
			[Address(RVA = "0xF84228", Offset = "0xF84228", VA = "0xF84228")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60005F4")]
			[Address(RVA = "0xF84234", Offset = "0xF84234", VA = "0xF84234")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60005E4")]
		[Address(RVA = "0xF82018", Offset = "0xF82018", VA = "0xF82018")]
		public void SetChainWeights(FullBodyBipedChain c, float pull, float reach = 0f)
		{
		}

		[Token(Token = "0x60005E5")]
		[Address(RVA = "0xF82118", Offset = "0xF82118", VA = "0xF82118")]
		public void SetEffectorWeights(FullBodyBipedEffector effector, float positionWeight, float rotationWeight)
		{
		}

		[Token(Token = "0x60005E6")]
		[Address(RVA = "0xF82068", Offset = "0xF82068", VA = "0xF82068")]
		public FBIKChain GetChain(FullBodyBipedChain c)
		{
			return null;
		}

		[Token(Token = "0x60005E7")]
		[Address(RVA = "0xF82190", Offset = "0xF82190", VA = "0xF82190")]
		public FBIKChain GetChain(FullBodyBipedEffector effector)
		{
			return null;
		}

		[Token(Token = "0x60005E8")]
		[Address(RVA = "0xF81D1C", Offset = "0xF81D1C", VA = "0xF81D1C")]
		public IKEffector GetEffector(FullBodyBipedEffector effector)
		{
			return null;
		}

		[Token(Token = "0x60005E9")]
		[Address(RVA = "0xF82258", Offset = "0xF82258", VA = "0xF82258")]
		public IKEffector GetEndEffector(FullBodyBipedChain c)
		{
			return null;
		}

		[Token(Token = "0x60005EA")]
		[Address(RVA = "0xF82308", Offset = "0xF82308", VA = "0xF82308")]
		public IKMappingLimb GetLimbMapping(FullBodyBipedChain chain)
		{
			return null;
		}

		[Token(Token = "0x60005EB")]
		[Address(RVA = "0xF823B4", Offset = "0xF823B4", VA = "0xF823B4")]
		public IKMappingLimb GetLimbMapping(FullBodyBipedEffector effector)
		{
			return null;
		}

		[Token(Token = "0x60005EC")]
		[Address(RVA = "0xF82460", Offset = "0xF82460", VA = "0xF82460")]
		public IKMappingSpine GetSpineMapping()
		{
			return null;
		}

		[Token(Token = "0x60005ED")]
		[Address(RVA = "0xF82468", Offset = "0xF82468", VA = "0xF82468")]
		public IKMappingBone GetHeadMapping()
		{
			return null;
		}

		[Token(Token = "0x60005EE")]
		[Address(RVA = "0xF82490", Offset = "0xF82490", VA = "0xF82490")]
		public IKConstraintBend GetBendConstraint(FullBodyBipedChain limb)
		{
			return null;
		}

		[Token(Token = "0x60005EF")]
		[Address(RVA = "0xF82550", Offset = "0xF82550", VA = "0xF82550", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x60005F0")]
		[Address(RVA = "0xF826E4", Offset = "0xF826E4", VA = "0xF826E4")]
		public void SetToReferences(BipedReferences references, [Optional] Transform rootNode)
		{
		}

		[Token(Token = "0x60005F1")]
		[Address(RVA = "0xF83B20", Offset = "0xF83B20", VA = "0xF83B20")]
		public static Transform DetectRootNodeBone(BipedReferences references)
		{
			return null;
		}

		[Token(Token = "0x60005F2")]
		[Address(RVA = "0xF840D0", Offset = "0xF840D0", VA = "0xF840D0")]
		public void SetLimbOrientations(BipedLimbOrientations o)
		{
		}

		[Token(Token = "0x60005F5")]
		[Address(RVA = "0xF8412C", Offset = "0xF8412C", VA = "0xF8412C")]
		private void SetLimbOrientation(FullBodyBipedChain chain, BipedLimbOrientations.LimbOrientation limbOrientation)
		{
		}

		[Token(Token = "0x60005F6")]
		[Address(RVA = "0xF83F70", Offset = "0xF83F70", VA = "0xF83F70")]
		private static Transform GetLeftClavicle(BipedReferences references)
		{
			return null;
		}

		[Token(Token = "0x60005F7")]
		[Address(RVA = "0xF84020", Offset = "0xF84020", VA = "0xF84020")]
		private static Transform GetRightClavicle(BipedReferences references)
		{
			return null;
		}

		[Token(Token = "0x60005F8")]
		[Address(RVA = "0xF84240", Offset = "0xF84240", VA = "0xF84240")]
		private static bool Contains(Transform[] array, Transform transform)
		{
			return default(bool);
		}

		[Token(Token = "0x60005F9")]
		[Address(RVA = "0xF84304", Offset = "0xF84304", VA = "0xF84304", Slot = "12")]
		protected override void ReadPose()
		{
		}

		[Token(Token = "0x60005FA")]
		[Address(RVA = "0xF843D4", Offset = "0xF843D4", VA = "0xF843D4")]
		private void PullBody()
		{
		}

		[Token(Token = "0x60005FB")]
		[Address(RVA = "0xF844F0", Offset = "0xF844F0", VA = "0xF844F0")]
		private Vector3 GetBodyOffset()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60005FC")]
		[Address(RVA = "0xF84680", Offset = "0xF84680", VA = "0xF84680")]
		private Vector3 GetHandBodyPull(IKEffector effector, FBIKChain arm, Vector3 offset)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60005FD")]
		[Address(RVA = "0xF847F8", Offset = "0xF847F8", VA = "0xF847F8", Slot = "14")]
		protected override void ApplyBendConstraints()
		{
		}

		[Token(Token = "0x60005FE")]
		[Address(RVA = "0xF84A58", Offset = "0xF84A58", VA = "0xF84A58", Slot = "15")]
		protected override void WritePose()
		{
		}

		[Token(Token = "0x60005FF")]
		[Address(RVA = "0xF84AD0", Offset = "0xF84AD0", VA = "0xF84AD0")]
		public IKSolverFullBodyBiped()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000A5")]
	public class IKSolverHeuristic : IKSolver
	{
		[Token(Token = "0x40003BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform target;

		[Token(Token = "0x40003C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float tolerance;

		[Token(Token = "0x40003C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public int maxIterations;

		[Token(Token = "0x40003C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool useRotationLimits;

		[Token(Token = "0x40003C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		public bool XY;

		[Token(Token = "0x40003C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Bone[] bones;

		[Token(Token = "0x40003C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected Vector3 lastLocalDirection;

		[Token(Token = "0x40003C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		protected float chainLength;

		[Token(Token = "0x1700008C")]
		protected virtual int minBones
		{
			[Token(Token = "0x6000607")]
			[Address(RVA = "0xF85358", Offset = "0xF85358", VA = "0xF85358", Slot = "12")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700008D")]
		protected virtual bool boneLengthCanBeZero
		{
			[Token(Token = "0x6000608")]
			[Address(RVA = "0xF85360", Offset = "0xF85360", VA = "0xF85360", Slot = "13")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700008E")]
		protected virtual bool allowCommonParent
		{
			[Token(Token = "0x6000609")]
			[Address(RVA = "0xF85368", Offset = "0xF85368", VA = "0xF85368", Slot = "14")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700008F")]
		protected virtual Vector3 localDirection
		{
			[Token(Token = "0x600060D")]
			[Address(RVA = "0xF85378", Offset = "0xF85378", VA = "0xF85378", Slot = "15")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000090")]
		protected float positionOffset
		{
			[Token(Token = "0x600060E")]
			[Address(RVA = "0xF7D04C", Offset = "0xF7D04C", VA = "0xF7D04C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000600")]
		[Address(RVA = "0xF84ADC", Offset = "0xF84ADC", VA = "0xF84ADC")]
		public bool SetChain(Transform[] hierarchy, Transform root)
		{
			return default(bool);
		}

		[Token(Token = "0x6000601")]
		[Address(RVA = "0xF84C84", Offset = "0xF84C84", VA = "0xF84C84")]
		public void AddBone(Transform bone)
		{
		}

		[Token(Token = "0x6000602")]
		[Address(RVA = "0xF84DD0", Offset = "0xF84DD0", VA = "0xF84DD0", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6000603")]
		[Address(RVA = "0xF84E2C", Offset = "0xF84E2C", VA = "0xF84E2C", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x6000604")]
		[Address(RVA = "0xF84E9C", Offset = "0xF84E9C", VA = "0xF84E9C", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000605")]
		[Address(RVA = "0xF85274", Offset = "0xF85274", VA = "0xF85274", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x6000606")]
		[Address(RVA = "0xF8527C", Offset = "0xF8527C", VA = "0xF8527C", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x600060A")]
		[Address(RVA = "0xF85370", Offset = "0xF85370", VA = "0xF85370", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x600060B")]
		[Address(RVA = "0xF85374", Offset = "0xF85374", VA = "0xF85374", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x600060C")]
		[Address(RVA = "0xF7C538", Offset = "0xF7C538", VA = "0xF7C538")]
		protected void InitiateBones()
		{
		}

		[Token(Token = "0x600060F")]
		[Address(RVA = "0xF7CCA0", Offset = "0xF7CCA0", VA = "0xF7CCA0")]
		protected Vector3 GetSingularityOffset()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000610")]
		[Address(RVA = "0xF85434", Offset = "0xF85434", VA = "0xF85434")]
		private bool SingularityDetected()
		{
			return default(bool);
		}

		[Token(Token = "0x6000611")]
		[Address(RVA = "0xF7B4CC", Offset = "0xF7B4CC", VA = "0xF7B4CC")]
		public IKSolverHeuristic()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000A6")]
	public class IKSolverLeg : IKSolver
	{
		[Token(Token = "0x40003C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Range(0f, 1f)]
		public float IKRotationWeight;

		[Token(Token = "0x40003C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public Quaternion IKRotation;

		[Token(Token = "0x40003C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Point pelvis;

		[Token(Token = "0x40003CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Point thigh;

		[Token(Token = "0x40003CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Point calf;

		[Token(Token = "0x40003CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Point foot;

		[Token(Token = "0x40003CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Point toe;

		[Token(Token = "0x40003CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public IKSolverVR.Leg leg;

		[Token(Token = "0x40003CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Vector3 heelOffset;

		[Token(Token = "0x40003D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector3[] positions;

		[Token(Token = "0x40003D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Quaternion[] rotations;

		[Token(Token = "0x6000612")]
		[Address(RVA = "0xF856C8", Offset = "0xF856C8", VA = "0xF856C8", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000613")]
		[Address(RVA = "0xF85A6C", Offset = "0xF85A6C", VA = "0xF85A6C")]
		public bool SetChain(Transform pelvis, Transform thigh, Transform calf, Transform foot, Transform toe, Transform root)
		{
			return default(bool);
		}

		[Token(Token = "0x6000614")]
		[Address(RVA = "0xF85B1C", Offset = "0xF85B1C", VA = "0xF85B1C", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x6000615")]
		[Address(RVA = "0xF85C9C", Offset = "0xF85C9C", VA = "0xF85C9C", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x6000616")]
		[Address(RVA = "0xF85DFC", Offset = "0xF85DFC", VA = "0xF85DFC", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6000617")]
		[Address(RVA = "0xF85E3C", Offset = "0xF85E3C", VA = "0xF85E3C", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x6000618")]
		[Address(RVA = "0xF85E8C", Offset = "0xF85E8C", VA = "0xF85E8C", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x6000619")]
		[Address(RVA = "0xF861EC", Offset = "0xF861EC", VA = "0xF861EC", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x600061A")]
		[Address(RVA = "0xF8620C", Offset = "0xF8620C", VA = "0xF8620C")]
		private void Solve()
		{
		}

		[Token(Token = "0x600061B")]
		[Address(RVA = "0xF85EE4", Offset = "0xF85EE4", VA = "0xF85EE4")]
		private void Read()
		{
		}

		[Token(Token = "0x600061C")]
		[Address(RVA = "0xF86294", Offset = "0xF86294", VA = "0xF86294")]
		private void Write()
		{
		}

		[Token(Token = "0x600061D")]
		[Address(RVA = "0xF8640C", Offset = "0xF8640C", VA = "0xF8640C")]
		public IKSolverLeg()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000A7")]
	public class IKSolverLimb : IKSolverTrigonometric
	{
		[Serializable]
		[Token(Token = "0x20000A8")]
		public enum BendModifier
		{
			[Token(Token = "0x40003E3")]
			Animation,
			[Token(Token = "0x40003E4")]
			Target,
			[Token(Token = "0x40003E5")]
			Parent,
			[Token(Token = "0x40003E6")]
			Arm,
			[Token(Token = "0x40003E7")]
			Goal
		}

		[Serializable]
		[Token(Token = "0x20000A9")]
		public struct AxisDirection
		{
			[Token(Token = "0x40003E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3 direction;

			[Token(Token = "0x40003E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public Vector3 axis;

			[Token(Token = "0x40003EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float dot;

			[Token(Token = "0x6000628")]
			[Address(RVA = "0xF87A1C", Offset = "0xF87A1C", VA = "0xF87A1C")]
			public AxisDirection(Vector3 direction, Vector3 axis)
			{
			}
		}

		[Token(Token = "0x40003D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public AvatarIKGoal goal;

		[Token(Token = "0x40003D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public BendModifier bendModifier;

		[Token(Token = "0x40003D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Range(0f, 1f)]
		public float maintainRotationWeight;

		[Token(Token = "0x40003D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[Range(0f, 1f)]
		public float bendModifierWeight;

		[Token(Token = "0x40003D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Transform bendGoal;

		[Token(Token = "0x40003D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private bool maintainBendFor1Frame;

		[Token(Token = "0x40003D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC1")]
		private bool maintainRotationFor1Frame;

		[Token(Token = "0x40003D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private Quaternion defaultRootRotation;

		[Token(Token = "0x40003DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private Quaternion parentDefaultRotation;

		[Token(Token = "0x40003DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private Quaternion bone3RotationBeforeSolve;

		[Token(Token = "0x40003DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private Quaternion maintainRotation;

		[Token(Token = "0x40003DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		private Quaternion bone3DefaultRotation;

		[Token(Token = "0x40003DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		private Vector3 _bendNormal;

		[Token(Token = "0x40003DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Vector3 animationNormal;

		[Token(Token = "0x40003E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private AxisDirection[] axisDirectionsLeft;

		[Token(Token = "0x40003E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private AxisDirection[] axisDirectionsRight;

		[Token(Token = "0x17000091")]
		private AxisDirection[] axisDirections
		{
			[Token(Token = "0x6000625")]
			[Address(RVA = "0xF87A00", Offset = "0xF87A00", VA = "0xF87A00")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600061E")]
		[Address(RVA = "0xF86600", Offset = "0xF86600", VA = "0xF86600")]
		public void MaintainRotation()
		{
		}

		[Token(Token = "0x600061F")]
		[Address(RVA = "0xF86644", Offset = "0xF86644", VA = "0xF86644")]
		public void MaintainBend()
		{
		}

		[Token(Token = "0x6000620")]
		[Address(RVA = "0xF86684", Offset = "0xF86684", VA = "0xF86684", Slot = "12")]
		protected override void OnInitiateVirtual()
		{
		}

		[Token(Token = "0x6000621")]
		[Address(RVA = "0xF86BC4", Offset = "0xF86BC4", VA = "0xF86BC4", Slot = "13")]
		protected override void OnUpdateVirtual()
		{
		}

		[Token(Token = "0x6000622")]
		[Address(RVA = "0xF876E4", Offset = "0xF876E4", VA = "0xF876E4", Slot = "14")]
		protected override void OnPostSolveVirtual()
		{
		}

		[Token(Token = "0x6000623")]
		[Address(RVA = "0xF8778C", Offset = "0xF8778C", VA = "0xF8778C")]
		public IKSolverLimb()
		{
		}

		[Token(Token = "0x6000624")]
		[Address(RVA = "0xF87968", Offset = "0xF87968", VA = "0xF87968")]
		public IKSolverLimb(AvatarIKGoal goal)
		{
		}

		[Token(Token = "0x6000626")]
		[Address(RVA = "0xF869D8", Offset = "0xF869D8", VA = "0xF869D8")]
		private void StoreAxisDirections(ref AxisDirection[] axisDirections)
		{
		}

		[Token(Token = "0x6000627")]
		[Address(RVA = "0xF86C80", Offset = "0xF86C80", VA = "0xF86C80")]
		private Vector3 GetModifiedBendNormal()
		{
			return default(Vector3);
		}
	}
	[Serializable]
	[Token(Token = "0x20000AA")]
	public class IKSolverLookAt : IKSolver
	{
		[Serializable]
		[Token(Token = "0x20000AB")]
		public class LookAtBone : Bone
		{
			[Token(Token = "0x40003FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			public Vector3 baseForwardOffsetEuler;

			[Token(Token = "0x17000098")]
			public Vector3 forward
			{
				[Token(Token = "0x6000647")]
				[Address(RVA = "0xF89880", Offset = "0xF89880", VA = "0xF89880")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x6000643")]
			[Address(RVA = "0xF89F3C", Offset = "0xF89F3C", VA = "0xF89F3C")]
			public LookAtBone()
			{
			}

			[Token(Token = "0x6000644")]
			[Address(RVA = "0xF889A0", Offset = "0xF889A0", VA = "0xF889A0")]
			public LookAtBone(Transform transform)
			{
			}

			[Token(Token = "0x6000645")]
			[Address(RVA = "0xF88C90", Offset = "0xF88C90", VA = "0xF88C90")]
			public void Initiate(Transform root)
			{
			}

			[Token(Token = "0x6000646")]
			[Address(RVA = "0xF89BC8", Offset = "0xF89BC8", VA = "0xF89BC8")]
			public void LookAt(Vector3 direction, float weight)
			{
			}
		}

		[Token(Token = "0x40003EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform target;

		[Token(Token = "0x40003EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public LookAtBone[] spine;

		[Token(Token = "0x40003ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public LookAtBone head;

		[Token(Token = "0x40003EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public LookAtBone[] eyes;

		[Token(Token = "0x40003EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Range(0f, 1f)]
		public float bodyWeight;

		[Token(Token = "0x40003F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[Range(0f, 1f)]
		public float headWeight;

		[Token(Token = "0x40003F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Range(0f, 1f)]
		public float eyesWeight;

		[Token(Token = "0x40003F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[Range(0f, 1f)]
		public float clampWeight;

		[Token(Token = "0x40003F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Range(0f, 1f)]
		public float clampWeightHead;

		[Token(Token = "0x40003F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[Range(0f, 1f)]
		public float clampWeightEyes;

		[Token(Token = "0x40003F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Range(0f, 2f)]
		public int clampSmoothing;

		[Token(Token = "0x40003F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public AnimationCurve spineWeightCurve;

		[Token(Token = "0x40003F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Vector3 spineTargetOffset;

		[Token(Token = "0x40003F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected Vector3[] spineForwards;

		[Token(Token = "0x40003F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		protected Vector3[] headForwards;

		[Token(Token = "0x40003FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected Vector3[] eyeForward;

		[Token(Token = "0x17000092")]
		protected bool spineIsValid
		{
			[Token(Token = "0x6000637")]
			[Address(RVA = "0xF88130", Offset = "0xF88130", VA = "0xF88130")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000093")]
		protected bool spineIsEmpty
		{
			[Token(Token = "0x6000638")]
			[Address(RVA = "0xF882D8", Offset = "0xF882D8", VA = "0xF882D8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000094")]
		protected bool headIsValid
		{
			[Token(Token = "0x600063A")]
			[Address(RVA = "0xF881FC", Offset = "0xF881FC", VA = "0xF881FC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000095")]
		protected bool headIsEmpty
		{
			[Token(Token = "0x600063B")]
			[Address(RVA = "0xF882FC", Offset = "0xF882FC", VA = "0xF882FC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000096")]
		protected bool eyesIsValid
		{
			[Token(Token = "0x600063D")]
			[Address(RVA = "0xF8820C", Offset = "0xF8820C", VA = "0xF8820C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000097")]
		protected bool eyesIsEmpty
		{
			[Token(Token = "0x600063E")]
			[Address(RVA = "0xF88368", Offset = "0xF88368", VA = "0xF88368")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000629")]
		[Address(RVA = "0xF87BB8", Offset = "0xF87BB8", VA = "0xF87BB8")]
		public void SetLookAtWeight(float weight)
		{
		}

		[Token(Token = "0x600062A")]
		[Address(RVA = "0xF87BD4", Offset = "0xF87BD4", VA = "0xF87BD4")]
		public void SetLookAtWeight(float weight, float bodyWeight)
		{
		}

		[Token(Token = "0x600062B")]
		[Address(RVA = "0xF87C00", Offset = "0xF87C00", VA = "0xF87C00")]
		public void SetLookAtWeight(float weight, float bodyWeight, float headWeight)
		{
		}

		[Token(Token = "0x600062C")]
		[Address(RVA = "0xF87C38", Offset = "0xF87C38", VA = "0xF87C38")]
		public void SetLookAtWeight(float weight, float bodyWeight, float headWeight, float eyesWeight)
		{
		}

		[Token(Token = "0x600062D")]
		[Address(RVA = "0xF87C80", Offset = "0xF87C80", VA = "0xF87C80")]
		public void SetLookAtWeight(float weight, float bodyWeight, float headWeight, float eyesWeight, float clampWeight)
		{
		}

		[Token(Token = "0x600062E")]
		[Address(RVA = "0xF87CD8", Offset = "0xF87CD8", VA = "0xF87CD8")]
		public void SetLookAtWeight(float weight, float bodyWeight = 0f, float headWeight = 1f, float eyesWeight = 0.5f, float clampWeight = 0.5f, float clampWeightHead = 0.5f, float clampWeightEyes = 0.3f)
		{
		}

		[Token(Token = "0x600062F")]
		[Address(RVA = "0xF87D48", Offset = "0xF87D48", VA = "0xF87D48", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6000630")]
		[Address(RVA = "0xF87E54", Offset = "0xF87E54", VA = "0xF87E54", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x6000631")]
		[Address(RVA = "0xF87F74", Offset = "0xF87F74", VA = "0xF87F74", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000632")]
		[Address(RVA = "0xF8838C", Offset = "0xF8838C", VA = "0xF8838C", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x6000633")]
		[Address(RVA = "0xF885E0", Offset = "0xF885E0", VA = "0xF885E0", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x6000634")]
		[Address(RVA = "0xF88740", Offset = "0xF88740", VA = "0xF88740")]
		public bool SetChain(Transform[] spine, Transform head, Transform[] eyes, Transform root)
		{
			return default(bool);
		}

		[Token(Token = "0x6000635")]
		[Address(RVA = "0xF889CC", Offset = "0xF889CC", VA = "0xF889CC", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x6000636")]
		[Address(RVA = "0xF88D7C", Offset = "0xF88D7C", VA = "0xF88D7C", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x6000639")]
		[Address(RVA = "0xF88E40", Offset = "0xF88E40", VA = "0xF88E40")]
		protected void SolveSpine()
		{
		}

		[Token(Token = "0x600063C")]
		[Address(RVA = "0xF8905C", Offset = "0xF8905C", VA = "0xF8905C")]
		protected void SolveHead()
		{
		}

		[Token(Token = "0x600063F")]
		[Address(RVA = "0xF893A4", Offset = "0xF893A4", VA = "0xF893A4")]
		protected void SolveEyes()
		{
		}

		[Token(Token = "0x6000640")]
		[Address(RVA = "0xF898B0", Offset = "0xF898B0", VA = "0xF898B0")]
		protected Vector3[] GetForwards(ref Vector3[] forwards, Vector3 baseForward, Vector3 targetForward, int bones, float clamp)
		{
			return null;
		}

		[Token(Token = "0x6000641")]
		[Address(RVA = "0xF88800", Offset = "0xF88800", VA = "0xF88800")]
		protected void SetBones(Transform[] array, ref LookAtBone[] bones)
		{
		}

		[Token(Token = "0x6000642")]
		[Address(RVA = "0xF89CD0", Offset = "0xF89CD0", VA = "0xF89CD0")]
		public IKSolverLookAt()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000AC")]
	public class IKSolverTrigonometric : IKSolver
	{
		[Serializable]
		[Token(Token = "0x20000AD")]
		public class TrigonometricBone : Bone
		{
			[Token(Token = "0x4000405")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			private Quaternion targetToLocalSpace;

			[Token(Token = "0x4000406")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			private Vector3 defaultLocalBendNormal;

			[Token(Token = "0x600065F")]
			[Address(RVA = "0xF8BA2C", Offset = "0xF8BA2C", VA = "0xF8BA2C")]
			public void Initiate(Vector3 childPosition, Vector3 bendNormal)
			{
			}

			[Token(Token = "0x6000660")]
			[Address(RVA = "0xF8BB1C", Offset = "0xF8BB1C", VA = "0xF8BB1C")]
			public Quaternion GetRotation(Vector3 direction, Vector3 bendNormal)
			{
				return default(Quaternion);
			}

			[Token(Token = "0x6000661")]
			[Address(RVA = "0xF8BBAC", Offset = "0xF8BBAC", VA = "0xF8BBAC")]
			public Vector3 GetBendNormalFromCurrentRotation()
			{
				return default(Vector3);
			}

			[Token(Token = "0x6000662")]
			[Address(RVA = "0xF8BBDC", Offset = "0xF8BBDC", VA = "0xF8BBDC")]
			public TrigonometricBone()
			{
			}
		}

		[Token(Token = "0x40003FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform target;

		[Token(Token = "0x40003FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Range(0f, 1f)]
		public float IKRotationWeight;

		[Token(Token = "0x40003FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public Quaternion IKRotation;

		[Token(Token = "0x40003FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public Vector3 bendNormal;

		[Token(Token = "0x4000400")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public TrigonometricBone bone1;

		[Token(Token = "0x4000401")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public TrigonometricBone bone2;

		[Token(Token = "0x4000402")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public TrigonometricBone bone3;

		[Token(Token = "0x4000403")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected Vector3 weightIKPosition;

		[Token(Token = "0x4000404")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		protected bool directHierarchy;

		[Token(Token = "0x6000648")]
		[Address(RVA = "0xF89F40", Offset = "0xF89F40", VA = "0xF89F40")]
		public void SetBendGoalPosition(Vector3 goalPosition, float weight)
		{
		}

		[Token(Token = "0x6000649")]
		[Address(RVA = "0xF8A0D4", Offset = "0xF8A0D4", VA = "0xF8A0D4")]
		public void SetBendPlaneToCurrent()
		{
		}

		[Token(Token = "0x600064A")]
		[Address(RVA = "0xF8A254", Offset = "0xF8A254", VA = "0xF8A254")]
		public void SetIKRotation(Quaternion rotation)
		{
		}

		[Token(Token = "0x600064B")]
		[Address(RVA = "0xF8A260", Offset = "0xF8A260", VA = "0xF8A260")]
		public void SetIKRotationWeight(float weight)
		{
		}

		[Token(Token = "0x600064C")]
		[Address(RVA = "0xF8A27C", Offset = "0xF8A27C", VA = "0xF8A27C")]
		public Quaternion GetIKRotation()
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600064D")]
		[Address(RVA = "0xF8A288", Offset = "0xF8A288", VA = "0xF8A288")]
		public float GetIKRotationWeight()
		{
			return default(float);
		}

		[Token(Token = "0x600064E")]
		[Address(RVA = "0xF8A290", Offset = "0xF8A290", VA = "0xF8A290", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x600064F")]
		[Address(RVA = "0xF8A3A0", Offset = "0xF8A3A0", VA = "0xF8A3A0", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x6000650")]
		[Address(RVA = "0xF8A498", Offset = "0xF8A498", VA = "0xF8A498", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6000651")]
		[Address(RVA = "0xF8A4CC", Offset = "0xF8A4CC", VA = "0xF8A4CC", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x6000652")]
		[Address(RVA = "0xF8A510", Offset = "0xF8A510", VA = "0xF8A510", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000653")]
		[Address(RVA = "0xF8A8E4", Offset = "0xF8A8E4", VA = "0xF8A8E4")]
		public bool SetChain(Transform bone1, Transform bone2, Transform bone3, Transform root)
		{
			return default(bool);
		}

		[Token(Token = "0x6000654")]
		[Address(RVA = "0xF8A95C", Offset = "0xF8A95C", VA = "0xF8A95C")]
		public static void Solve(Transform bone1, Transform bone2, Transform bone3, Vector3 targetPosition, Vector3 bendNormal, float weight)
		{
		}

		[Token(Token = "0x6000655")]
		[Address(RVA = "0xF8AE50", Offset = "0xF8AE50", VA = "0xF8AE50")]
		private static Vector3 GetDirectionToBendPoint(Vector3 direction, float directionMag, Vector3 bendDirection, float sqrMag1, float sqrMag2)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000656")]
		[Address(RVA = "0xF8AFA8", Offset = "0xF8AFA8", VA = "0xF8AFA8", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x6000657")]
		[Address(RVA = "0xF8B15C", Offset = "0xF8B15C", VA = "0xF8B15C")]
		private bool IsDirectHierarchy()
		{
			return default(bool);
		}

		[Token(Token = "0x6000658")]
		[Address(RVA = "0xF8B0D4", Offset = "0xF8B0D4", VA = "0xF8B0D4")]
		private void InitiateBones()
		{
		}

		[Token(Token = "0x6000659")]
		[Address(RVA = "0xF8B24C", Offset = "0xF8B24C", VA = "0xF8B24C", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x600065A")]
		[Address(RVA = "0xF8BA20", Offset = "0xF8BA20", VA = "0xF8BA20", Slot = "12")]
		protected virtual void OnInitiateVirtual()
		{
		}

		[Token(Token = "0x600065B")]
		[Address(RVA = "0xF8BA24", Offset = "0xF8BA24", VA = "0xF8BA24", Slot = "13")]
		protected virtual void OnUpdateVirtual()
		{
		}

		[Token(Token = "0x600065C")]
		[Address(RVA = "0xF8BA28", Offset = "0xF8BA28", VA = "0xF8BA28", Slot = "14")]
		protected virtual void OnPostSolveVirtual()
		{
		}

		[Token(Token = "0x600065D")]
		[Address(RVA = "0xF8B860", Offset = "0xF8B860", VA = "0xF8B860")]
		protected Vector3 GetBendDirection(Vector3 IKPosition, Vector3 bendNormal)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600065E")]
		[Address(RVA = "0xF87810", Offset = "0xF87810", VA = "0xF87810")]
		public IKSolverTrigonometric()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000AE")]
	public class IKSolverVR : IKSolver
	{
		[Serializable]
		[Token(Token = "0x20000AF")]
		public class Arm : BodyPart
		{
			[Serializable]
			[Token(Token = "0x20000B0")]
			public enum ShoulderRotationMode
			{
				[Token(Token = "0x4000449")]
				YawPitch,
				[Token(Token = "0x400044A")]
				FromTo
			}

			[Token(Token = "0x400042B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[Tooltip("The hand target. This should not be the hand controller itself, but a child GameObject parented to it so you could adjust it's position/rotation to match the orientation of the hand bone. The best practice for setup would be to move the hand controller to the avatar's hand as it it was held by the avatar, duplicate the avatar's hand bone and parent it to the hand controller. Then assign the duplicate to this slot.")]
			public Transform target;

			[Token(Token = "0x400042C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[Tooltip("The elbow will be bent towards this Transform if 'Bend Goal Weight' > 0.")]
			public Transform bendGoal;

			[Token(Token = "0x400042D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[Range(0f, 1f)]
			[Tooltip("Positional weight of the hand target. Note that if you have nulled the target, the hand will still be pulled to the last position of the target until you set this value to 0.")]
			public float positionWeight;

			[Token(Token = "0x400042E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			[Tooltip("Rotational weight of the hand target. Note that if you have nulled the target, the hand will still be rotated to the last rotation of the target until you set this value to 0.")]
			[Range(0f, 1f)]
			public float rotationWeight;

			[Token(Token = "0x400042F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[Tooltip("Different techniques for shoulder bone rotation.")]
			public ShoulderRotationMode shoulderRotationMode;

			[Token(Token = "0x4000430")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			[Range(0f, 1f)]
			[Tooltip("The weight of shoulder rotation")]
			public float shoulderRotationWeight;

			[Token(Token = "0x4000431")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			[Range(0f, 1f)]
			[Tooltip("The weight of twisting the shoulders backwards when arms are lifted up.")]
			public float shoulderTwistWeight;

			[Token(Token = "0x4000432")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			[Tooltip("If greater than 0, will bend the elbow towards the 'Bend Goal' Transform.")]
			[Range(0f, 1f)]
			public float bendGoalWeight;

			[Token(Token = "0x4000433")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			[Tooltip("Angular offset of the elbow bending direction.")]
			[Range(-180f, 180f)]
			public float swivelOffset;

			[Token(Token = "0x4000434")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			[Tooltip("Local axis of the hand bone that points from the wrist towards the palm. Used for defining hand bone orientation. If you have copied VRIK component from another avatar that has different bone orientations, right-click on VRIK header and select 'Guess Hand Orientations' from the context menu.")]
			public Vector3 wristToPalmAxis;

			[Token(Token = "0x4000435")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			[Tooltip("Local axis of the hand bone that points from the palm towards the thumb. Used for defining hand bone orientation. If you have copied VRIK component from another avatar that has different bone orientations, right-click on VRIK header and select 'Guess Hand Orientations' from the context menu.")]
			public Vector3 palmToThumbAxis;

			[Token(Token = "0x4000436")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
			[Range(0.01f, 2f)]
			[Tooltip("Use this to make the arm shorter/longer. Works by displacement of hand and forearm localPosition.")]
			public float armLengthMlp;

			[Token(Token = "0x4000437")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			[Tooltip("Evaluates stretching of the arm by target distance relative to arm length. Value at time 1 represents stretching amount at the point where distance to the target is equal to arm length. Value at time 2 represents stretching amount at the point where distance to the target is double the arm length. Value represents the amount of stretching. Linear stretching would be achieved with a linear curve going up by 45 degrees. Increase the range of stretching by moving the last key up and right at the same amount. Smoothing in the curve can help reduce elbow snapping (start stretching the arm slightly before target distance reaches arm length). To get a good optimal value for this curve, please go to the 'VRIK (Basic)' demo scene and copy the stretch curve over from the Pilot character.")]
			public AnimationCurve stretchCurve;

			[NonSerialized]
			[Token(Token = "0x4000438")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			[HideInInspector]
			public Vector3 IKPosition;

			[NonSerialized]
			[Token(Token = "0x4000439")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
			[HideInInspector]
			public Quaternion IKRotation;

			[NonSerialized]
			[Token(Token = "0x400043A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
			[HideInInspector]
			public Vector3 bendDirection;

			[NonSerialized]
			[Token(Token = "0x400043B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			[HideInInspector]
			public Vector3 handPositionOffset;

			[Token(Token = "0x400043E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
			private bool hasShoulder;

			[Token(Token = "0x400043F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
			private Vector3 chestForwardAxis;

			[Token(Token = "0x4000440")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
			private Vector3 chestUpAxis;

			[Token(Token = "0x4000441")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
			private Quaternion chestRotation;

			[Token(Token = "0x4000442")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
			private Vector3 chestForward;

			[Token(Token = "0x4000443")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
			private Vector3 chestUp;

			[Token(Token = "0x4000444")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
			private Quaternion forearmRelToUpperArm;

			[Token(Token = "0x4000445")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
			private Vector3 upperArmBendAxis;

			[Token(Token = "0x4000446")]
			private const float yawOffsetAngle = 45f;

			[Token(Token = "0x4000447")]
			private const float pitchOffsetAngle = -30f;

			[Token(Token = "0x1700009A")]
			public Vector3 position
			{
				[Token(Token = "0x6000681")]
				[Address(RVA = "0xF9435C", Offset = "0xF9435C", VA = "0xF9435C")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6000682")]
				[Address(RVA = "0xF94368", Offset = "0xF94368", VA = "0xF94368")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x1700009B")]
			public Quaternion rotation
			{
				[Token(Token = "0x6000683")]
				[Address(RVA = "0xF94374", Offset = "0xF94374", VA = "0xF94374")]
				[CompilerGenerated]
				get
				{
					return default(Quaternion);
				}
				[Token(Token = "0x6000684")]
				[Address(RVA = "0xF94380", Offset = "0xF94380", VA = "0xF94380")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x1700009C")]
			private VirtualBone shoulder
			{
				[Token(Token = "0x6000685")]
				[Address(RVA = "0xF9438C", Offset = "0xF9438C", VA = "0xF9438C")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700009D")]
			private VirtualBone upperArm
			{
				[Token(Token = "0x6000686")]
				[Address(RVA = "0xF943B4", Offset = "0xF943B4", VA = "0xF943B4")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700009E")]
			private VirtualBone forearm
			{
				[Token(Token = "0x6000687")]
				[Address(RVA = "0xF943E8", Offset = "0xF943E8", VA = "0xF943E8")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700009F")]
			private VirtualBone hand
			{
				[Token(Token = "0x6000688")]
				[Address(RVA = "0xF94428", Offset = "0xF94428", VA = "0xF94428")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000689")]
			[Address(RVA = "0xF94468", Offset = "0xF94468", VA = "0xF94468", Slot = "4")]
			protected override void OnRead(Vector3[] positions, Quaternion[] rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs, int rootIndex, int index)
			{
			}

			[Token(Token = "0x600068A")]
			[Address(RVA = "0xF94D3C", Offset = "0xF94D3C", VA = "0xF94D3C", Slot = "5")]
			public override void PreSolve()
			{
			}

			[Token(Token = "0x600068B")]
			[Address(RVA = "0xF94FE8", Offset = "0xF94FE8", VA = "0xF94FE8", Slot = "7")]
			public override void ApplyOffsets()
			{
			}

			[Token(Token = "0x600068C")]
			[Address(RVA = "0xF9500C", Offset = "0xF9500C", VA = "0xF9500C")]
			private void Stretching()
			{
			}

			[Token(Token = "0x600068D")]
			[Address(RVA = "0xF91ED8", Offset = "0xF91ED8", VA = "0xF91ED8")]
			public void Solve(bool isLeft)
			{
			}

			[Token(Token = "0x600068E")]
			[Address(RVA = "0xF95FA8", Offset = "0xF95FA8", VA = "0xF95FA8", Slot = "8")]
			public override void ResetOffsets()
			{
			}

			[Token(Token = "0x600068F")]
			[Address(RVA = "0xF96000", Offset = "0xF96000", VA = "0xF96000", Slot = "6")]
			public override void Write(ref Vector3[] solvedPositions, ref Quaternion[] solvedRotations)
			{
			}

			[Token(Token = "0x6000690")]
			[Address(RVA = "0xF9535C", Offset = "0xF9535C", VA = "0xF9535C")]
			private float DamperValue(float value, float min, float max, float weight = 1f)
			{
				return default(float);
			}

			[Token(Token = "0x6000691")]
			[Address(RVA = "0xF95564", Offset = "0xF95564", VA = "0xF95564")]
			private Vector3 GetBendNormal(Vector3 dir)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6000692")]
			[Address(RVA = "0xF9620C", Offset = "0xF9620C", VA = "0xF9620C")]
			private void Visualize(VirtualBone bone1, VirtualBone bone2, VirtualBone bone3, Color color)
			{
			}

			[Token(Token = "0x6000693")]
			[Address(RVA = "0xF93FCC", Offset = "0xF93FCC", VA = "0xF93FCC")]
			public Arm()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000B1")]
		public abstract class BodyPart
		{
			[Token(Token = "0x400044D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[HideInInspector]
			public VirtualBone[] bones;

			[Token(Token = "0x400044E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			protected bool initiated;

			[Token(Token = "0x400044F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			protected Vector3 rootPosition;

			[Token(Token = "0x4000450")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			protected Quaternion rootRotation;

			[Token(Token = "0x4000451")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			protected int index;

			[Token(Token = "0x4000452")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			protected int LOD;

			[Token(Token = "0x170000A0")]
			public float sqrMag
			{
				[Token(Token = "0x6000699")]
				[Address(RVA = "0xF963C8", Offset = "0xF963C8", VA = "0xF963C8")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x600069A")]
				[Address(RVA = "0xF963D0", Offset = "0xF963D0", VA = "0xF963D0")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000A1")]
			public float mag
			{
				[Token(Token = "0x600069B")]
				[Address(RVA = "0xF963D8", Offset = "0xF963D8", VA = "0xF963D8")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x600069C")]
				[Address(RVA = "0xF963E0", Offset = "0xF963E0", VA = "0xF963E0")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x6000694")]
			protected abstract void OnRead(Vector3[] positions, Quaternion[] rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs, int rootIndex, int index);

			[Token(Token = "0x6000695")]
			public abstract void PreSolve();

			[Token(Token = "0x6000696")]
			public abstract void Write(ref Vector3[] solvedPositions, ref Quaternion[] solvedRotations);

			[Token(Token = "0x6000697")]
			public abstract void ApplyOffsets();

			[Token(Token = "0x6000698")]
			public abstract void ResetOffsets();

			[Token(Token = "0x600069D")]
			[Address(RVA = "0xF963E8", Offset = "0xF963E8", VA = "0xF963E8")]
			public void SetLOD(int LOD)
			{
			}

			[Token(Token = "0x600069E")]
			[Address(RVA = "0xF8FDF0", Offset = "0xF8FDF0", VA = "0xF8FDF0")]
			public void Read(Vector3[] positions, Quaternion[] rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs, int rootIndex, int index)
			{
			}

			[Token(Token = "0x600069F")]
			[Address(RVA = "0xF96550", Offset = "0xF96550", VA = "0xF96550")]
			public void MovePosition(Vector3 position)
			{
			}

			[Token(Token = "0x60006A0")]
			[Address(RVA = "0xF965D8", Offset = "0xF965D8", VA = "0xF965D8")]
			public void MoveRotation(Quaternion rotation)
			{
			}

			[Token(Token = "0x60006A1")]
			[Address(RVA = "0xF967DC", Offset = "0xF967DC", VA = "0xF967DC")]
			public void Translate(Vector3 position, Quaternion rotation)
			{
			}

			[Token(Token = "0x60006A2")]
			[Address(RVA = "0xF91BCC", Offset = "0xF91BCC", VA = "0xF91BCC")]
			public void TranslateRoot(Vector3 newRootPos, Quaternion newRootRot)
			{
			}

			[Token(Token = "0x60006A3")]
			[Address(RVA = "0xF95E44", Offset = "0xF95E44", VA = "0xF95E44")]
			public void RotateTo(VirtualBone bone, Quaternion rotation, float weight = 1f)
			{
			}

			[Token(Token = "0x60006A4")]
			[Address(RVA = "0xF96824", Offset = "0xF96824", VA = "0xF96824")]
			public void Visualize(Color color)
			{
			}

			[Token(Token = "0x60006A5")]
			[Address(RVA = "0xF96948", Offset = "0xF96948", VA = "0xF96948")]
			public void Visualize()
			{
			}

			[Token(Token = "0x60006A6")]
			[Address(RVA = "0xF96324", Offset = "0xF96324", VA = "0xF96324")]
			protected BodyPart()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000B2")]
		public class Footstep
		{
			[Token(Token = "0x4000453")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float stepSpeed;

			[Token(Token = "0x4000454")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public Vector3 characterSpaceOffset;

			[Token(Token = "0x4000455")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector3 position;

			[Token(Token = "0x4000456")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public Quaternion rotation;

			[Token(Token = "0x4000457")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public Quaternion stepToRootRot;

			[Token(Token = "0x4000458")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			public bool isSupportLeg;

			[Token(Token = "0x400045A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public Vector3 stepFrom;

			[Token(Token = "0x400045B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public Vector3 stepTo;

			[Token(Token = "0x400045C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			public Quaternion stepFromRot;

			[Token(Token = "0x400045D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			public Quaternion stepToRot;

			[Token(Token = "0x400045E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
			private Quaternion footRelativeToRoot;

			[Token(Token = "0x400045F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
			private float supportLegW;

			[Token(Token = "0x4000460")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			private float supportLegWV;

			[Token(Token = "0x170000A2")]
			public bool isStepping
			{
				[Token(Token = "0x60006A7")]
				[Address(RVA = "0xF9695C", Offset = "0xF9695C", VA = "0xF9695C")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x170000A3")]
			public float stepProgress
			{
				[Token(Token = "0x60006A8")]
				[Address(RVA = "0xF96970", Offset = "0xF96970", VA = "0xF96970")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x60006A9")]
				[Address(RVA = "0xF96978", Offset = "0xF96978", VA = "0xF96978")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x60006AA")]
			[Address(RVA = "0xF96980", Offset = "0xF96980", VA = "0xF96980")]
			public Footstep(Quaternion rootRotation, Vector3 footPosition, Quaternion footRotation, Vector3 characterSpaceOffset)
			{
			}

			[Token(Token = "0x60006AB")]
			[Address(RVA = "0xF96B44", Offset = "0xF96B44", VA = "0xF96B44")]
			public void Reset(Quaternion rootRotation, Vector3 footPosition, Quaternion footRotation)
			{
			}

			[Token(Token = "0x60006AC")]
			[Address(RVA = "0xF96B8C", Offset = "0xF96B8C", VA = "0xF96B8C")]
			public void StepTo(Vector3 p, Quaternion rootRotation, float stepThreshold)
			{
			}

			[Token(Token = "0x60006AD")]
			[Address(RVA = "0xF96DB0", Offset = "0xF96DB0", VA = "0xF96DB0")]
			public void UpdateStepping(Vector3 p, Quaternion rootRotation, float speed)
			{
			}

			[Token(Token = "0x60006AE")]
			[Address(RVA = "0xF96FD8", Offset = "0xF96FD8", VA = "0xF96FD8")]
			public void UpdateStanding(Quaternion rootRotation, float minAngle, float speed)
			{
			}

			[Token(Token = "0x60006AF")]
			[Address(RVA = "0xF97208", Offset = "0xF97208", VA = "0xF97208")]
			public void Update(InterpolationMode interpolation, UnityEvent onStep)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000B3")]
		public class Leg : BodyPart
		{
			[Token(Token = "0x4000461")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[Tooltip("The foot/toe target. This should not be the foot tracker itself, but a child GameObject parented to it so you could adjust it's position/rotation to match the orientation of the foot/toe bone. If a toe bone is assigned in the References, the solver will match the toe bone to this target. If no toe bone assigned, foot bone will be used instead.")]
			public Transform target;

			[Token(Token = "0x4000462")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[Tooltip("The knee will be bent towards this Transform if 'Bend Goal Weight' > 0.")]
			public Transform bendGoal;

			[Token(Token = "0x4000463")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[Range(0f, 1f)]
			[Tooltip("Positional weight of the toe/foot target. Note that if you have nulled the target, the foot will still be pulled to the last position of the target until you set this value to 0.")]
			public float positionWeight;

			[Token(Token = "0x4000464")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			[Range(0f, 1f)]
			[Tooltip("Rotational weight of the toe/foot target. Note that if you have nulled the target, the foot will still be rotated to the last rotation of the target until you set this value to 0.")]
			public float rotationWeight;

			[Token(Token = "0x4000465")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[Tooltip("If greater than 0, will bend the knee towards the 'Bend Goal' Transform.")]
			[Range(0f, 1f)]
			public float bendGoalWeight;

			[Token(Token = "0x4000466")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			[Range(-180f, 180f)]
			[Tooltip("Angular offset of knee bending direction.")]
			public float swivelOffset;

			[Token(Token = "0x4000467")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			[Tooltip("If 0, the bend plane will be locked to the rotation of the pelvis and rotating the foot will have no effect on the knee direction. If 1, to the target rotation of the leg so that the knee will bend towards the forward axis of the foot. Values in between will be slerped between the two.")]
			[Range(0f, 1f)]
			public float bendToTargetWeight;

			[Token(Token = "0x4000468")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			[Range(0.01f, 2f)]
			[Tooltip("Use this to make the leg shorter/longer. Works by displacement of foot and calf localPosition.")]
			public float legLengthMlp;

			[Token(Token = "0x4000469")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			[Tooltip("Evaluates stretching of the leg by target distance relative to leg length. Value at time 1 represents stretching amount at the point where distance to the target is equal to leg length. Value at time 1 represents stretching amount at the point where distance to the target is double the leg length. Value represents the amount of stretching. Linear stretching would be achieved with a linear curve going up by 45 degrees. Increase the range of stretching by moving the last key up and right at the same amount. Smoothing in the curve can help reduce knee snapping (start stretching the arm slightly before target distance reaches leg length). To get a good optimal value for this curve, please go to the 'VRIK (Basic)' demo scene and copy the stretch curve over from the Pilot character.")]
			public AnimationCurve stretchCurve;

			[NonSerialized]
			[Token(Token = "0x400046A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			[HideInInspector]
			public Vector3 IKPosition;

			[NonSerialized]
			[Token(Token = "0x400046B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			[HideInInspector]
			public Quaternion IKRotation;

			[NonSerialized]
			[Token(Token = "0x400046C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
			[HideInInspector]
			public Vector3 footPositionOffset;

			[NonSerialized]
			[Token(Token = "0x400046D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			[HideInInspector]
			public Vector3 heelPositionOffset;

			[NonSerialized]
			[Token(Token = "0x400046E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
			[HideInInspector]
			public Quaternion footRotationOffset;

			[NonSerialized]
			[Token(Token = "0x400046F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
			[HideInInspector]
			public float currentMag;

			[Token(Token = "0x4000470")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			[HideInInspector]
			public bool useAnimatedBendNormal;

			[Token(Token = "0x4000475")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
			private Vector3 footPosition;

			[Token(Token = "0x4000476")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
			private Quaternion footRotation;

			[Token(Token = "0x4000477")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
			private Vector3 bendNormal;

			[Token(Token = "0x4000478")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
			private Quaternion calfRelToThigh;

			[Token(Token = "0x4000479")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
			private Quaternion thighRelToFoot;

			[Token(Token = "0x400047A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
			private Vector3 bendNormalRelToPelvis;

			[Token(Token = "0x400047B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
			private Vector3 bendNormalRelToTarget;

			[Token(Token = "0x170000A4")]
			public Vector3 position
			{
				[Token(Token = "0x60006B0")]
				[Address(RVA = "0xF973B8", Offset = "0xF973B8", VA = "0xF973B8")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x60006B1")]
				[Address(RVA = "0xF973C4", Offset = "0xF973C4", VA = "0xF973C4")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000A5")]
			public Quaternion rotation
			{
				[Token(Token = "0x60006B2")]
				[Address(RVA = "0xF973D0", Offset = "0xF973D0", VA = "0xF973D0")]
				[CompilerGenerated]
				get
				{
					return default(Quaternion);
				}
				[Token(Token = "0x60006B3")]
				[Address(RVA = "0xF973DC", Offset = "0xF973DC", VA = "0xF973DC")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000A6")]
			public bool hasToes
			{
				[Token(Token = "0x60006B4")]
				[Address(RVA = "0xF973E8", Offset = "0xF973E8", VA = "0xF973E8")]
				[CompilerGenerated]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x60006B5")]
				[Address(RVA = "0xF973F0", Offset = "0xF973F0", VA = "0xF973F0")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000A7")]
			public VirtualBone thigh
			{
				[Token(Token = "0x60006B6")]
				[Address(RVA = "0xF973FC", Offset = "0xF973FC", VA = "0xF973FC")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000A8")]
			private VirtualBone calf
			{
				[Token(Token = "0x60006B7")]
				[Address(RVA = "0xF97424", Offset = "0xF97424", VA = "0xF97424")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000A9")]
			private VirtualBone foot
			{
				[Token(Token = "0x60006B8")]
				[Address(RVA = "0xF97450", Offset = "0xF97450", VA = "0xF97450")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000AA")]
			private VirtualBone toes
			{
				[Token(Token = "0x60006B9")]
				[Address(RVA = "0xF9747C", Offset = "0xF9747C", VA = "0xF9747C")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000AB")]
			public VirtualBone lastBone
			{
				[Token(Token = "0x60006BA")]
				[Address(RVA = "0xF91AC0", Offset = "0xF91AC0", VA = "0xF91AC0")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000AC")]
			public Vector3 thighRelativeToPelvis
			{
				[Token(Token = "0x60006BB")]
				[Address(RVA = "0xF974A8", Offset = "0xF974A8", VA = "0xF974A8")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x60006BC")]
				[Address(RVA = "0xF974B4", Offset = "0xF974B4", VA = "0xF974B4")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x60006BD")]
			[Address(RVA = "0xF974C0", Offset = "0xF974C0", VA = "0xF974C0", Slot = "4")]
			protected override void OnRead(Vector3[] positions, Quaternion[] rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs, int rootIndex, int index)
			{
			}

			[Token(Token = "0x60006BE")]
			[Address(RVA = "0xF97A30", Offset = "0xF97A30", VA = "0xF97A30", Slot = "5")]
			public override void PreSolve()
			{
			}

			[Token(Token = "0x60006BF")]
			[Address(RVA = "0xF981A0", Offset = "0xF981A0", VA = "0xF981A0", Slot = "7")]
			public override void ApplyOffsets()
			{
			}

			[Token(Token = "0x60006C0")]
			[Address(RVA = "0xF98150", Offset = "0xF98150", VA = "0xF98150")]
			private void ApplyPositionOffset(Vector3 offset, float weight)
			{
			}

			[Token(Token = "0x60006C1")]
			[Address(RVA = "0xF97F04", Offset = "0xF97F04", VA = "0xF97F04")]
			private void ApplyRotationOffset(Quaternion offset, float weight)
			{
			}

			[Token(Token = "0x60006C2")]
			[Address(RVA = "0xF91CF0", Offset = "0xF91CF0", VA = "0xF91CF0")]
			public void Solve(bool stretch)
			{
			}

			[Token(Token = "0x60006C3")]
			[Address(RVA = "0xF98A58", Offset = "0xF98A58", VA = "0xF98A58")]
			private void FixTwistRotations()
			{
			}

			[Token(Token = "0x60006C4")]
			[Address(RVA = "0xF9867C", Offset = "0xF9867C", VA = "0xF9867C")]
			private void Stretching()
			{
			}

			[Token(Token = "0x60006C5")]
			[Address(RVA = "0xF98EB0", Offset = "0xF98EB0", VA = "0xF98EB0", Slot = "6")]
			public override void Write(ref Vector3[] solvedPositions, ref Quaternion[] solvedRotations)
			{
			}

			[Token(Token = "0x60006C6")]
			[Address(RVA = "0xF990B8", Offset = "0xF990B8", VA = "0xF990B8", Slot = "8")]
			public override void ResetOffsets()
			{
			}

			[Token(Token = "0x60006C7")]
			[Address(RVA = "0xF94164", Offset = "0xF94164", VA = "0xF94164")]
			public Leg()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000B4")]
		public class Locomotion
		{
			[Token(Token = "0x400047C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("Used for blending in/out of procedural locomotion.")]
			[Range(0f, 1f)]
			public float weight;

			[Token(Token = "0x400047D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("Tries to maintain this distance between the legs.")]
			public float footDistance;

			[Token(Token = "0x400047E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("Makes a step only if step target position is at least this far from the current footstep or the foot does not reach the current footstep anymore or footstep angle is past the 'Angle Threshold'.")]
			public float stepThreshold;

			[Token(Token = "0x400047F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[Tooltip("Makes a step only if step target position is at least 'Step Threshold' far from the current footstep or the foot does not reach the current footstep anymore or footstep angle is past this value.")]
			public float angleThreshold;

			[Token(Token = "0x4000480")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("Multiplies angle of the center of mass - center of pressure vector. Larger value makes the character step sooner if losing balance.")]
			public float comAngleMlp;

			[Token(Token = "0x4000481")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[Tooltip("Maximum magnitude of head/hand target velocity used in prediction.")]
			public float maxVelocity;

			[Token(Token = "0x4000482")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("The amount of head/hand target velocity prediction.")]
			public float velocityFactor;

			[Token(Token = "0x4000483")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[Tooltip("How much can a leg be extended before it is forced to step to another position? 1 means fully stretched.")]
			[Range(0.9f, 1f)]
			public float maxLegStretch;

			[Token(Token = "0x4000484")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[Tooltip("The speed of lerping the root of the character towards the horizontal mid-point of the footsteps.")]
			public float rootSpeed;

			[Token(Token = "0x4000485")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			[Tooltip("The speed of moving a foot to the next position.")]
			public float stepSpeed;

			[Token(Token = "0x4000486")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[Tooltip("The height of the foot by normalized step progress (0 - 1).")]
			public AnimationCurve stepHeight;

			[Token(Token = "0x4000487")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			[Tooltip("The height offset of the heel by normalized step progress (0 - 1).")]
			public AnimationCurve heelHeight;

			[Token(Token = "0x4000488")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[Tooltip("Rotates the foot while the leg is not stepping to relax the twist rotation of the leg if ideal rotation is past this angle.")]
			[Range(0f, 180f)]
			public float relaxLegTwistMinAngle;

			[Token(Token = "0x4000489")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			[Tooltip("The speed of rotating the foot while the leg is not stepping to relax the twist rotation of the leg.")]
			public float relaxLegTwistSpeed;

			[Token(Token = "0x400048A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[Tooltip("Interpolation mode of the step.")]
			public InterpolationMode stepInterpolation;

			[Token(Token = "0x400048B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			[Tooltip("Offset for the approximated center of mass.")]
			public Vector3 offset;

			[Token(Token = "0x400048C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[HideInInspector]
			public bool blockingEnabled;

			[Token(Token = "0x400048D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			[HideInInspector]
			public LayerMask blockingLayers;

			[Token(Token = "0x400048E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			[HideInInspector]
			public float raycastRadius;

			[Token(Token = "0x400048F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			[HideInInspector]
			public float raycastHeight;

			[Token(Token = "0x4000490")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			[Tooltip("Called when the left foot has finished a step.")]
			public UnityEvent onLeftFootstep;

			[Token(Token = "0x4000491")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			[Tooltip("Called when the right foot has finished a step")]
			public UnityEvent onRightFootstep;

			[Token(Token = "0x4000493")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			private Footstep[] footsteps;

			[Token(Token = "0x4000494")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			private Vector3 lastComPosition;

			[Token(Token = "0x4000495")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
			private Vector3 comVelocity;

			[Token(Token = "0x4000496")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			private int leftFootIndex;

			[Token(Token = "0x4000497")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
			private int rightFootIndex;

			[Token(Token = "0x170000AD")]
			public Vector3 centerOfMass
			{
				[Token(Token = "0x60006C8")]
				[Address(RVA = "0xF99198", Offset = "0xF99198", VA = "0xF99198")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x60006C9")]
				[Address(RVA = "0xF991A4", Offset = "0xF991A4", VA = "0xF991A4")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000AE")]
			public Vector3 leftFootstepPosition
			{
				[Token(Token = "0x60006CF")]
				[Address(RVA = "0xF995B4", Offset = "0xF995B4", VA = "0xF995B4")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x170000AF")]
			public Vector3 rightFootstepPosition
			{
				[Token(Token = "0x60006D0")]
				[Address(RVA = "0xF995E8", Offset = "0xF995E8", VA = "0xF995E8")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x170000B0")]
			public Quaternion leftFootstepRotation
			{
				[Token(Token = "0x60006D1")]
				[Address(RVA = "0xF99620", Offset = "0xF99620", VA = "0xF99620")]
				get
				{
					return default(Quaternion);
				}
			}

			[Token(Token = "0x170000B1")]
			public Quaternion rightFootstepRotation
			{
				[Token(Token = "0x60006D2")]
				[Address(RVA = "0xF99654", Offset = "0xF99654", VA = "0xF99654")]
				get
				{
					return default(Quaternion);
				}
			}

			[Token(Token = "0x60006CA")]
			[Address(RVA = "0xF8FEAC", Offset = "0xF8FEAC", VA = "0xF8FEAC")]
			public void Initiate(Vector3[] positions, Quaternion[] rotations, bool hasToes)
			{
			}

			[Token(Token = "0x60006CB")]
			[Address(RVA = "0xF8D848", Offset = "0xF8D848", VA = "0xF8D848")]
			public void Reset(Vector3[] positions, Quaternion[] rotations)
			{
			}

			[Token(Token = "0x60006CC")]
			[Address(RVA = "0xF8CCB4", Offset = "0xF8CCB4", VA = "0xF8CCB4")]
			public void AddDeltaRotation(Quaternion delta, Vector3 pivot)
			{
			}

			[Token(Token = "0x60006CD")]
			[Address(RVA = "0xF8CBFC", Offset = "0xF8CBFC", VA = "0xF8CBFC")]
			public void AddDeltaPosition(Vector3 delta)
			{
			}

			[Token(Token = "0x60006CE")]
			[Address(RVA = "0xF906FC", Offset = "0xF906FC", VA = "0xF906FC")]
			public void Solve(VirtualBone rootBone, Spine spine, Leg leftLeg, Leg rightLeg, Arm leftArm, Arm rightArm, int supportLegIndex, out Vector3 leftFootPosition, out Vector3 rightFootPosition, out Quaternion leftFootRotation, out Quaternion rightFootRotation, out float leftFootOffset, out float rightFootOffset, out float leftHeelOffset, out float rightHeelOffset)
			{
			}

			[Token(Token = "0x60006D3")]
			[Address(RVA = "0xF991E4", Offset = "0xF991E4", VA = "0xF991E4")]
			private bool StepBlocked(Vector3 fromPosition, Vector3 toPosition, Vector3 rootPosition)
			{
				return default(bool);
			}

			[Token(Token = "0x60006D4")]
			[Address(RVA = "0xF99398", Offset = "0xF99398", VA = "0xF99398")]
			private bool CanStep()
			{
				return default(bool);
			}

			[Token(Token = "0x60006D5")]
			[Address(RVA = "0xF99404", Offset = "0xF99404", VA = "0xF99404")]
			private static bool GetLineSphereCollision(Vector3 lineStart, Vector3 lineEnd, Vector3 sphereCenter, float sphereRadius)
			{
				return default(bool);
			}

			[Token(Token = "0x60006D6")]
			[Address(RVA = "0xF9424C", Offset = "0xF9424C", VA = "0xF9424C")]
			public Locomotion()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000B5")]
		public class Spine : BodyPart
		{
			[Token(Token = "0x4000498")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[Tooltip("The head target. This should not be the camera Transform itself, but a child GameObject parented to it so you could adjust it's position/rotation  to match the orientation of the head bone. The best practice for setup would be to move the camera to the avatar's eyes, duplicate the avatar's head bone and parent it to the camera. Then assign the duplicate to this slot.")]
			public Transform headTarget;

			[Token(Token = "0x4000499")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[Tooltip("The pelvis target (optional), useful for seated rigs or if you had an additional tracker on the backpack or belt are. The best practice for setup would be to duplicate the avatar's pelvis bone and parenting it to the pelvis tracker. Then assign the duplicate to this slot.")]
			public Transform pelvisTarget;

			[Token(Token = "0x400049A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[Tooltip("Positional weight of the head target. Note that if you have nulled the headTarget, the head will still be pulled to the last position of the headTarget until you set this value to 0.")]
			[Range(0f, 1f)]
			public float positionWeight;

			[Token(Token = "0x400049B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			[Tooltip("Rotational weight of the head target. Note that if you have nulled the headTarget, the head will still be rotated to the last rotation of the headTarget until you set this value to 0.")]
			[Range(0f, 1f)]
			public float rotationWeight;

			[Token(Token = "0x400049C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[Tooltip("Positional weight of the pelvis target. Note that if you have nulled the pelvisTarget, the pelvis will still be pulled to the last position of the pelvisTarget until you set this value to 0.")]
			[Range(0f, 1f)]
			public float pelvisPositionWeight;

			[Token(Token = "0x400049D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			[Tooltip("Rotational weight of the pelvis target. Note that if you have nulled the pelvisTarget, the pelvis will still be rotated to the last rotation of the pelvisTarget until you set this value to 0.")]
			[Range(0f, 1f)]
			public float pelvisRotationWeight;

			[Token(Token = "0x400049E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			[Tooltip("If 'Chest Goal Weight' is greater than 0, the chest will be turned towards this Transform.")]
			public Transform chestGoal;

			[Token(Token = "0x400049F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			[Tooltip("Weight of turning the chest towards the 'Chest Goal'.")]
			[Range(0f, 1f)]
			public float chestGoalWeight;

			[Token(Token = "0x40004A0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			[Tooltip("Minimum height of the head from the root of the character.")]
			public float minHeadHeight;

			[Token(Token = "0x40004A1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			[Tooltip("Determines how much the body will follow the position of the head.")]
			[Range(0f, 1f)]
			public float bodyPosStiffness;

			[Token(Token = "0x40004A2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			[Range(0f, 1f)]
			[Tooltip("Determines how much the body will follow the rotation of the head.")]
			public float bodyRotStiffness;

			[Token(Token = "0x40004A3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			[Tooltip("Determines how much the chest will rotate to the rotation of the head.")]
			[FormerlySerializedAs("chestRotationWeight")]
			[Range(0f, 1f)]
			public float neckStiffness;

			[Token(Token = "0x40004A4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			[Range(0f, 1f)]
			[Tooltip("The amount of rotation applied to the chest based on hand positions.")]
			public float rotateChestByHands;

			[Token(Token = "0x40004A5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			[Tooltip("Clamps chest rotation. Value of 0.5 allows 90 degrees of rotation for the chest relative to the head. Value of 0 allows 180 degrees and value of 1 means the chest will be locked relative to the head.")]
			[Range(0f, 1f)]
			public float chestClampWeight;

			[Token(Token = "0x40004A6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
			[Tooltip("Clamps head rotation. Value of 0.5 allows 90 degrees of rotation for the head relative to the headTarget. Value of 0 allows 180 degrees and value of 1 means head rotation will be locked to the target.")]
			[Range(0f, 1f)]
			public float headClampWeight;

			[Token(Token = "0x40004A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			[Tooltip("Moves the body horizontally along -character.forward axis by that value when the player is crouching.")]
			public float moveBodyBackWhenCrouching;

			[Token(Token = "0x40004A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
			[Range(0f, 1f)]
			[Tooltip("How much will the pelvis maintain it's animated position?")]
			public float maintainPelvisPosition;

			[Token(Token = "0x40004A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			[Tooltip("Will automatically rotate the root of the character if the head target has turned past this angle.")]
			[Range(0f, 180f)]
			public float maxRootAngle;

			[Token(Token = "0x40004AA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
			[Tooltip("Angular offset for root heading. Adjust this value to turn the root relative to the HMD around the vertical axis. Usefulf for fighting or shooting games where you would sometimes want the avatar to stand at an angled stance.")]
			[Range(-180f, 180f)]
			public float rootHeadingOffset;

			[NonSerialized]
			[Token(Token = "0x40004AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			[HideInInspector]
			public Vector3 IKPositionHead;

			[NonSerialized]
			[Token(Token = "0x40004AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
			[HideInInspector]
			public Quaternion IKRotationHead;

			[NonSerialized]
			[Token(Token = "0x40004AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
			[HideInInspector]
			public Vector3 IKPositionPelvis;

			[NonSerialized]
			[Token(Token = "0x40004AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
			[HideInInspector]
			public Quaternion IKRotationPelvis;

			[NonSerialized]
			[Token(Token = "0x40004AF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
			[HideInInspector]
			public Vector3 goalPositionChest;

			[NonSerialized]
			[Token(Token = "0x40004B0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
			[HideInInspector]
			public Vector3 pelvisPositionOffset;

			[NonSerialized]
			[Token(Token = "0x40004B1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
			[HideInInspector]
			public Vector3 chestPositionOffset;

			[NonSerialized]
			[Token(Token = "0x40004B2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
			[HideInInspector]
			public Vector3 headPositionOffset;

			[NonSerialized]
			[Token(Token = "0x40004B3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
			[HideInInspector]
			public Quaternion pelvisRotationOffset;

			[NonSerialized]
			[Token(Token = "0x40004B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
			[HideInInspector]
			public Quaternion chestRotationOffset;

			[NonSerialized]
			[Token(Token = "0x40004B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
			[HideInInspector]
			public Quaternion headRotationOffset;

			[NonSerialized]
			[Token(Token = "0x40004B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
			[HideInInspector]
			public Vector3 faceDirection;

			[NonSerialized]
			[Token(Token = "0x40004B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
			[HideInInspector]
			public Vector3 locomotionHeadPositionOffset;

			[NonSerialized]
			[Token(Token = "0x40004B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
			[HideInInspector]
			public Vector3 headPosition;

			[Token(Token = "0x40004BB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
			private Quaternion headRotation;

			[Token(Token = "0x40004BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
			private Quaternion pelvisRotation;

			[Token(Token = "0x40004BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
			private Quaternion anchorRelativeToPelvis;

			[Token(Token = "0x40004BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
			private Quaternion pelvisRelativeRotation;

			[Token(Token = "0x40004BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1BC")]
			private Quaternion chestRelativeRotation;

			[Token(Token = "0x40004C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
			private Vector3 headDeltaPosition;

			[Token(Token = "0x40004C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
			private Quaternion pelvisDeltaRotation;

			[Token(Token = "0x40004C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
			private Quaternion chestTargetRotation;

			[Token(Token = "0x40004C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
			private int pelvisIndex;

			[Token(Token = "0x40004C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1FC")]
			private int spineIndex;

			[Token(Token = "0x40004C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
			private int chestIndex;

			[Token(Token = "0x40004C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x204")]
			private int neckIndex;

			[Token(Token = "0x40004C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
			private int headIndex;

			[Token(Token = "0x40004C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20C")]
			private float length;

			[Token(Token = "0x40004C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
			private bool hasChest;

			[Token(Token = "0x40004CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x211")]
			private bool hasNeck;

			[Token(Token = "0x40004CB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x212")]
			private bool hasLegs;

			[Token(Token = "0x40004CC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x214")]
			private float headHeight;

			[Token(Token = "0x40004CD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
			private float sizeMlp;

			[Token(Token = "0x40004CE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x21C")]
			private Vector3 chestForward;

			[Token(Token = "0x170000B2")]
			public VirtualBone pelvis
			{
				[Token(Token = "0x60006D7")]
				[Address(RVA = "0xF8DA2C", Offset = "0xF8DA2C", VA = "0xF8DA2C")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000B3")]
			public VirtualBone firstSpineBone
			{
				[Token(Token = "0x60006D8")]
				[Address(RVA = "0xF9968C", Offset = "0xF9968C", VA = "0xF9968C")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000B4")]
			public VirtualBone chest
			{
				[Token(Token = "0x60006D9")]
				[Address(RVA = "0xF91E90", Offset = "0xF91E90", VA = "0xF91E90")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000B5")]
			private VirtualBone neck
			{
				[Token(Token = "0x60006DA")]
				[Address(RVA = "0xF996C0", Offset = "0xF996C0", VA = "0xF996C0")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000B6")]
			public VirtualBone head
			{
				[Token(Token = "0x60006DB")]
				[Address(RVA = "0xF991B0", Offset = "0xF991B0", VA = "0xF991B0")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000B7")]
			public Quaternion anchorRotation
			{
				[Token(Token = "0x60006DC")]
				[Address(RVA = "0xF996F4", Offset = "0xF996F4", VA = "0xF996F4")]
				[CompilerGenerated]
				get
				{
					return default(Quaternion);
				}
				[Token(Token = "0x60006DD")]
				[Address(RVA = "0xF99708", Offset = "0xF99708", VA = "0xF99708")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000B8")]
			public Quaternion anchorRelativeToHead
			{
				[Token(Token = "0x60006DE")]
				[Address(RVA = "0xF9971C", Offset = "0xF9971C", VA = "0xF9971C")]
				[CompilerGenerated]
				get
				{
					return default(Quaternion);
				}
				[Token(Token = "0x60006DF")]
				[Address(RVA = "0xF99730", Offset = "0xF99730", VA = "0xF99730")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x60006E0")]
			[Address(RVA = "0xF99744", Offset = "0xF99744", VA = "0xF99744", Slot = "4")]
			protected override void OnRead(Vector3[] positions, Quaternion[] rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs, int rootIndex, int index)
			{
			}

			[Token(Token = "0x60006E1")]
			[Address(RVA = "0xF9A3E4", Offset = "0xF9A3E4", VA = "0xF9A3E4", Slot = "5")]
			public override void PreSolve()
			{
			}

			[Token(Token = "0x60006E2")]
			[Address(RVA = "0xF9A5CC", Offset = "0xF9A5CC", VA = "0xF9A5CC", Slot = "7")]
			public override void ApplyOffsets()
			{
			}

			[Token(Token = "0x60006E3")]
			[Address(RVA = "0xF9AD60", Offset = "0xF9AD60", VA = "0xF9AD60")]
			private void CalculateChestTargetRotation(VirtualBone rootBone, Arm[] arms)
			{
			}

			[Token(Token = "0x60006E4")]
			[Address(RVA = "0xF901C0", Offset = "0xF901C0", VA = "0xF901C0")]
			public void Solve(VirtualBone rootBone, Leg[] legs, Arm[] arms)
			{
			}

			[Token(Token = "0x60006E5")]
			[Address(RVA = "0xF9B7A8", Offset = "0xF9B7A8", VA = "0xF9B7A8")]
			private void FABRIKPass(Vector3 animatedPelvisPos, Vector3 rootUp, float weight)
			{
			}

			[Token(Token = "0x60006E6")]
			[Address(RVA = "0xF9BE74", Offset = "0xF9BE74", VA = "0xF9BE74")]
			private void SolvePelvis()
			{
			}

			[Token(Token = "0x60006E7")]
			[Address(RVA = "0xF9C4D0", Offset = "0xF9C4D0", VA = "0xF9C4D0", Slot = "6")]
			public override void Write(ref Vector3[] solvedPositions, ref Quaternion[] solvedRotations)
			{
			}

			[Token(Token = "0x60006E8")]
			[Address(RVA = "0xF9C6A0", Offset = "0xF9C6A0", VA = "0xF9C6A0", Slot = "8")]
			public override void ResetOffsets()
			{
			}

			[Token(Token = "0x60006E9")]
			[Address(RVA = "0xF9AFA4", Offset = "0xF9AFA4", VA = "0xF9AFA4")]
			private void AdjustChestByHands(ref Quaternion chestTargetRotation, Arm[] arms)
			{
			}

			[Token(Token = "0x60006EA")]
			[Address(RVA = "0xF91AF4", Offset = "0xF91AF4", VA = "0xF91AF4")]
			public void InverseTranslateToHead(Leg[] legs, bool limited, bool useCurrentLegMag, Vector3 offset, float w)
			{
			}

			[Token(Token = "0x60006EB")]
			[Address(RVA = "0xF9B39C", Offset = "0xF9B39C", VA = "0xF9B39C")]
			private void TranslatePelvis(Leg[] legs, Vector3 deltaPosition, Quaternion deltaRotation)
			{
			}

			[Token(Token = "0x60006EC")]
			[Address(RVA = "0xF9C774", Offset = "0xF9C774", VA = "0xF9C774")]
			private Vector3 LimitPelvisPosition(Leg[] legs, Vector3 pelvisPosition, bool useCurrentLegMag, int it = 2)
			{
				return default(Vector3);
			}

			[Token(Token = "0x60006ED")]
			[Address(RVA = "0xF9BC78", Offset = "0xF9BC78", VA = "0xF9BC78")]
			private void Bend(VirtualBone[] bones, int firstIndex, int lastIndex, Quaternion targetRotation, float clampWeight, bool uniformWeight, float w)
			{
			}

			[Token(Token = "0x60006EE")]
			[Address(RVA = "0xF9BA08", Offset = "0xF9BA08", VA = "0xF9BA08")]
			private void Bend(VirtualBone[] bones, int firstIndex, int lastIndex, Quaternion targetRotation, Quaternion rotationOffset, float clampWeight, bool uniformWeight, float w)
			{
			}

			[Token(Token = "0x60006EF")]
			[Address(RVA = "0xF93EB4", Offset = "0xF93EB4", VA = "0xF93EB4")]
			public Spine()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000B6")]
		public enum PositionOffset
		{
			[Token(Token = "0x40004D0")]
			Pelvis,
			[Token(Token = "0x40004D1")]
			Chest,
			[Token(Token = "0x40004D2")]
			Head,
			[Token(Token = "0x40004D3")]
			LeftHand,
			[Token(Token = "0x40004D4")]
			RightHand,
			[Token(Token = "0x40004D5")]
			LeftFoot,
			[Token(Token = "0x40004D6")]
			RightFoot,
			[Token(Token = "0x40004D7")]
			LeftHeel,
			[Token(Token = "0x40004D8")]
			RightHeel
		}

		[Serializable]
		[Token(Token = "0x20000B7")]
		public enum RotationOffset
		{
			[Token(Token = "0x40004DA")]
			Pelvis,
			[Token(Token = "0x40004DB")]
			Chest,
			[Token(Token = "0x40004DC")]
			Head
		}

		[Serializable]
		[Token(Token = "0x20000B8")]
		public class VirtualBone
		{
			[Token(Token = "0x40004DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3 readPosition;

			[Token(Token = "0x40004DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Quaternion readRotation;

			[Token(Token = "0x40004DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public Vector3 solverPosition;

			[Token(Token = "0x40004E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Quaternion solverRotation;

			[Token(Token = "0x40004E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public float length;

			[Token(Token = "0x40004E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			public float sqrMag;

			[Token(Token = "0x40004E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public Vector3 axis;

			[Token(Token = "0x60006F0")]
			[Address(RVA = "0xF8FD60", Offset = "0xF8FD60", VA = "0xF8FD60")]
			public VirtualBone(Vector3 position, Quaternion rotation)
			{
			}

			[Token(Token = "0x60006F1")]
			[Address(RVA = "0xF8FDD0", Offset = "0xF8FDD0", VA = "0xF8FDD0")]
			public void Read(Vector3 position, Quaternion rotation)
			{
			}

			[Token(Token = "0x60006F2")]
			[Address(RVA = "0xF9CA10", Offset = "0xF9CA10", VA = "0xF9CA10")]
			public static void SwingRotation(VirtualBone[] bones, int index, Vector3 swingTarget, float weight = 1f)
			{
			}

			[Token(Token = "0x60006F3")]
			[Address(RVA = "0xF963F0", Offset = "0xF963F0", VA = "0xF963F0")]
			public static float PreSolve(ref VirtualBone[] bones)
			{
				return default(float);
			}

			[Token(Token = "0x60006F4")]
			[Address(RVA = "0xF9666C", Offset = "0xF9666C", VA = "0xF9666C")]
			public static void RotateAroundPoint(VirtualBone[] bones, int index, Vector3 point, Quaternion rotation)
			{
			}

			[Token(Token = "0x60006F5")]
			[Address(RVA = "0xF9CC10", Offset = "0xF9CC10", VA = "0xF9CC10")]
			public static void RotateBy(VirtualBone[] bones, int index, Quaternion rotation)
			{
			}

			[Token(Token = "0x60006F6")]
			[Address(RVA = "0xF953DC", Offset = "0xF953DC", VA = "0xF953DC")]
			public static void RotateBy(VirtualBone[] bones, Quaternion rotation)
			{
			}

			[Token(Token = "0x60006F7")]
			[Address(RVA = "0xF9CDB8", Offset = "0xF9CDB8", VA = "0xF9CDB8")]
			public static void RotateTo(VirtualBone[] bones, int index, Quaternion rotation)
			{
			}

			[Token(Token = "0x60006F8")]
			[Address(RVA = "0xF95A60", Offset = "0xF95A60", VA = "0xF95A60")]
			public static void SolveTrigonometric(VirtualBone[] bones, int first, int second, int third, Vector3 targetPosition, Vector3 bendNormal, float weight)
			{
			}

			[Token(Token = "0x60006F9")]
			[Address(RVA = "0xF9CE5C", Offset = "0xF9CE5C", VA = "0xF9CE5C")]
			private static Vector3 GetDirectionToBendPoint(Vector3 direction, float directionMag, Vector3 bendDirection, float sqrMag1, float sqrMag2)
			{
				return default(Vector3);
			}

			[Token(Token = "0x60006FA")]
			[Address(RVA = "0xF9C104", Offset = "0xF9C104", VA = "0xF9C104")]
			public static void SolveFABRIK(VirtualBone[] bones, Vector3 startPosition, Vector3 targetPosition, float weight, float minNormalizedTargetDistance, int iterations, float length, Vector3 startOffset)
			{
			}

			[Token(Token = "0x60006FB")]
			[Address(RVA = "0xF9CFB4", Offset = "0xF9CFB4", VA = "0xF9CFB4")]
			private static Vector3 SolveFABRIKJoint(Vector3 pos1, Vector3 pos2, float length)
			{
				return default(Vector3);
			}

			[Token(Token = "0x60006FC")]
			[Address(RVA = "0xF9D0C8", Offset = "0xF9D0C8", VA = "0xF9D0C8")]
			public static void SolveCCD(VirtualBone[] bones, Vector3 targetPosition, float weight, int iterations)
			{
			}
		}

		[Token(Token = "0x4000407")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform[] solverTransforms;

		[Token(Token = "0x4000408")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool hasChest;

		[Token(Token = "0x4000409")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		private bool hasNeck;

		[Token(Token = "0x400040A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
		private bool hasShoulders;

		[Token(Token = "0x400040B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x63")]
		private bool hasToes;

		[Token(Token = "0x400040C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private bool hasLegs;

		[Token(Token = "0x400040D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3[] readPositions;

		[Token(Token = "0x400040E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Quaternion[] readRotations;

		[Token(Token = "0x400040F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3[] solvedPositions;

		[Token(Token = "0x4000410")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Quaternion[] solvedRotations;

		[Token(Token = "0x4000411")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Quaternion[] defaultLocalRotations;

		[Token(Token = "0x4000412")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector3[] defaultLocalPositions;

		[Token(Token = "0x4000413")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3 rootV;

		[Token(Token = "0x4000414")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private Vector3 rootVelocity;

		[Token(Token = "0x4000415")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector3 bodyOffset;

		[Token(Token = "0x4000416")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private int supportLegIndex;

		[Token(Token = "0x4000417")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private int lastLOD;

		[Token(Token = "0x4000418")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[Tooltip("LOD 0: Full quality solving. LOD 1: Shoulder solving, stretching plant feet disabled, spine solving quality reduced. This provides about 30% of performance gain. LOD 2: Culled, but updating root position and rotation if locomotion is enabled.")]
		[Range(0f, 2f)]
		public int LOD;

		[Token(Token = "0x4000419")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Tooltip("If true, will keep the toes planted even if head target is out of reach, so this can cause the camera to exit the head if it is too high for the model to reach. Enabling this increases the cost of the solver as the legs will have to be solved multiple times.")]
		public bool plantFeet;

		[Token(Token = "0x400041B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[Tooltip("The spine solver.")]
		public Spine spine;

		[Token(Token = "0x400041C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[Tooltip("The left arm solver.")]
		public Arm leftArm;

		[Token(Token = "0x400041D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[Tooltip("The right arm solver.")]
		public Arm rightArm;

		[Token(Token = "0x400041E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[Tooltip("The left leg solver.")]
		public Leg leftLeg;

		[Token(Token = "0x400041F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[Tooltip("The right leg solver.")]
		public Leg rightLeg;

		[Token(Token = "0x4000420")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[Tooltip("Procedural leg shuffling for stationary VR games. Not designed for roomscale and thumbstick locomotion. For those it would be better to use a strafing locomotion blend tree to make the character follow the horizontal direction towards the HMD by root motion or script.")]
		public Locomotion locomotion;

		[Token(Token = "0x4000421")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Leg[] legs;

		[Token(Token = "0x4000422")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private Arm[] arms;

		[Token(Token = "0x4000423")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private Vector3 headPosition;

		[Token(Token = "0x4000424")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		private Vector3 headDeltaPosition;

		[Token(Token = "0x4000425")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private Vector3 raycastOriginPelvis;

		[Token(Token = "0x4000426")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		private Vector3 lastOffset;

		[Token(Token = "0x4000427")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private Vector3 debugPos1;

		[Token(Token = "0x4000428")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
		private Vector3 debugPos2;

		[Token(Token = "0x4000429")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private Vector3 debugPos3;

		[Token(Token = "0x400042A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		private Vector3 debugPos4;

		[Token(Token = "0x17000099")]
		[HideInInspector]
		public VirtualBone rootBone
		{
			[Token(Token = "0x600067C")]
			[Address(RVA = "0xF93BC8", Offset = "0xF93BC8", VA = "0xF93BC8")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600067D")]
			[Address(RVA = "0xF93BD0", Offset = "0xF93BD0", VA = "0xF93BD0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000663")]
		[Address(RVA = "0xF8BBE4", Offset = "0xF8BBE4", VA = "0xF8BBE4")]
		public void SetToReferences(VRIK.References references)
		{
		}

		[Token(Token = "0x6000664")]
		[Address(RVA = "0xF8C050", Offset = "0xF8C050", VA = "0xF8C050")]
		public void GuessHandOrientations(VRIK.References references, bool onlyIfZero)
		{
		}

		[Token(Token = "0x6000665")]
		[Address(RVA = "0xF8BEE4", Offset = "0xF8BEE4", VA = "0xF8BEE4")]
		public void DefaultAnimationCurves()
		{
		}

		[Token(Token = "0x6000666")]
		[Address(RVA = "0xF8C880", Offset = "0xF8C880", VA = "0xF8C880")]
		public void AddPositionOffset(PositionOffset positionOffset, Vector3 value)
		{
		}

		[Token(Token = "0x6000667")]
		[Address(RVA = "0xF8C9C4", Offset = "0xF8C9C4", VA = "0xF8C9C4")]
		public void AddRotationOffset(RotationOffset rotationOffset, Vector3 value)
		{
		}

		[Token(Token = "0x6000668")]
		[Address(RVA = "0xF8CA04", Offset = "0xF8CA04", VA = "0xF8CA04")]
		public void AddRotationOffset(RotationOffset rotationOffset, Quaternion value)
		{
		}

		[Token(Token = "0x6000669")]
		[Address(RVA = "0xF8CB28", Offset = "0xF8CB28", VA = "0xF8CB28")]
		public void AddPlatformMotion(Vector3 deltaPosition, Quaternion deltaRotation, Vector3 platformPivot)
		{
		}

		[Token(Token = "0x600066A")]
		[Address(RVA = "0xF8D07C", Offset = "0xF8D07C", VA = "0xF8D07C")]
		public void Reset()
		{
		}

		[Token(Token = "0x600066B")]
		[Address(RVA = "0xF8DA60", Offset = "0xF8DA60", VA = "0xF8DA60", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x600066C")]
		[Address(RVA = "0xF8DBB4", Offset = "0xF8DBB4", VA = "0xF8DBB4", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x600066D")]
		[Address(RVA = "0xF8DDA0", Offset = "0xF8DDA0", VA = "0xF8DDA0", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x600066E")]
		[Address(RVA = "0xF8DE10", Offset = "0xF8DE10", VA = "0xF8DE10", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x600066F")]
		[Address(RVA = "0xF8DE80", Offset = "0xF8DE80", VA = "0xF8DE80", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000670")]
		[Address(RVA = "0xF8E088", Offset = "0xF8E088", VA = "0xF8E088")]
		private Vector3 GetNormal(Transform[] transforms)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000671")]
		[Address(RVA = "0xF8C340", Offset = "0xF8C340", VA = "0xF8C340")]
		private Vector3 GuessWristToPalmAxis(Transform hand, Transform forearm)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000672")]
		[Address(RVA = "0xF8C424", Offset = "0xF8C424", VA = "0xF8C424")]
		private Vector3 GuessPalmToThumbAxis(Transform hand, Transform forearm)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000673")]
		[Address(RVA = "0xF8C76C", Offset = "0xF8C76C", VA = "0xF8C76C")]
		private static Keyframe[] GetSineKeyframes(float mag)
		{
			return null;
		}

		[Token(Token = "0x6000674")]
		[Address(RVA = "0xF8D188", Offset = "0xF8D188", VA = "0xF8D188")]
		private void UpdateSolverTransforms()
		{
		}

		[Token(Token = "0x6000675")]
		[Address(RVA = "0xF8E2F8", Offset = "0xF8E2F8", VA = "0xF8E2F8", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x6000676")]
		[Address(RVA = "0xF8E334", Offset = "0xF8E334", VA = "0xF8E334", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x6000677")]
		[Address(RVA = "0xF8F898", Offset = "0xF8F898", VA = "0xF8F898")]
		private void WriteTransforms()
		{
		}

		[Token(Token = "0x6000678")]
		[Address(RVA = "0xF8D2D8", Offset = "0xF8D2D8", VA = "0xF8D2D8")]
		private void Read(Vector3[] positions, Quaternion[] rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs)
		{
		}

		[Token(Token = "0x6000679")]
		[Address(RVA = "0xF8E738", Offset = "0xF8E738", VA = "0xF8E738")]
		private void Solve()
		{
		}

		[Token(Token = "0x600067A")]
		[Address(RVA = "0xF8FCEC", Offset = "0xF8FCEC", VA = "0xF8FCEC")]
		private Vector3 GetPosition(int index)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600067B")]
		[Address(RVA = "0xF8FD28", Offset = "0xF8FD28", VA = "0xF8FD28")]
		private Quaternion GetRotation(int index)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600067E")]
		[Address(RVA = "0xF8F75C", Offset = "0xF8F75C", VA = "0xF8F75C")]
		private void Write()
		{
		}

		[Token(Token = "0x600067F")]
		[Address(RVA = "0xF934A4", Offset = "0xF934A4", VA = "0xF934A4")]
		private Vector3 GetPelvisOffset()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000680")]
		[Address(RVA = "0xF93BD8", Offset = "0xF93BD8", VA = "0xF93BD8")]
		public IKSolverVR()
		{
		}
	}
	[Token(Token = "0x20000B9")]
	public class TwistRelaxer : MonoBehaviour
	{
		[Token(Token = "0x40004E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public IK ik;

		[Token(Token = "0x40004E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("If this is the forearm roll bone, the parent should be the forearm bone. If null, will be found automatically.")]
		public Transform parent;

		[Token(Token = "0x40004E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("If this is the forearm roll bone, the child should be the hand bone. If null, will attempt to find automatically. Assign the hand manually if the hand bone is not a child of the roll bone.")]
		public Transform child;

		[Token(Token = "0x40004E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Range(0f, 1f)]
		[Tooltip("The weight of relaxing the twist of this Transform")]
		public float weight;

		[Token(Token = "0x40004E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Range(0f, 1f)]
		[Tooltip("If 0.5, this Transform will be twisted half way from parent to child. If 1, the twist angle will be locked to the child and will rotate with along with it.")]
		public float parentChildCrossfade;

		[Token(Token = "0x40004E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Rotation offset around the twist axis.")]
		[Range(-180f, 180f)]
		public float twistAngleOffset;

		[Token(Token = "0x40004EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Vector3 twistAxis;

		[Token(Token = "0x40004EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3 axis;

		[Token(Token = "0x40004EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Vector3 axisRelativeToParentDefault;

		[Token(Token = "0x40004ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 axisRelativeToChildDefault;

		[Token(Token = "0x60006FD")]
		[Address(RVA = "0xF9D27C", Offset = "0xF9D27C", VA = "0xF9D27C")]
		public void Relax()
		{
		}

		[Token(Token = "0x60006FE")]
		[Address(RVA = "0xF9D6C0", Offset = "0xF9D6C0", VA = "0xF9D6C0")]
		private void Start()
		{
		}

		[Token(Token = "0x60006FF")]
		[Address(RVA = "0xF9DAB0", Offset = "0xF9DAB0", VA = "0xF9DAB0")]
		private void OnPostUpdate()
		{
		}

		[Token(Token = "0x6000700")]
		[Address(RVA = "0xF9DB28", Offset = "0xF9DB28", VA = "0xF9DB28")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000701")]
		[Address(RVA = "0xF9DBA0", Offset = "0xF9DBA0", VA = "0xF9DBA0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000702")]
		[Address(RVA = "0xF9DCD8", Offset = "0xF9DCD8", VA = "0xF9DCD8")]
		public TwistRelaxer()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000BA")]
	public class InteractionEffector
	{
		[Token(Token = "0x40004F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Poser poser;

		[Token(Token = "0x40004F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private IKEffector effector;

		[Token(Token = "0x40004F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float timer;

		[Token(Token = "0x40004F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float length;

		[Token(Token = "0x40004F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float weight;

		[Token(Token = "0x40004F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float fadeInSpeed;

		[Token(Token = "0x40004F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float defaultPositionWeight;

		[Token(Token = "0x40004F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float defaultRotationWeight;

		[Token(Token = "0x40004F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float defaultPull;

		[Token(Token = "0x40004FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float defaultReach;

		[Token(Token = "0x40004FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float defaultPush;

		[Token(Token = "0x40004FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float defaultPushParent;

		[Token(Token = "0x40004FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float defaultBendGoalWeight;

		[Token(Token = "0x40004FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float resetTimer;

		[Token(Token = "0x40004FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool positionWeightUsed;

		[Token(Token = "0x4000500")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		private bool rotationWeightUsed;

		[Token(Token = "0x4000501")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
		private bool pullUsed;

		[Token(Token = "0x4000502")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x63")]
		private bool reachUsed;

		[Token(Token = "0x4000503")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private bool pushUsed;

		[Token(Token = "0x4000504")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
		private bool pushParentUsed;

		[Token(Token = "0x4000505")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x66")]
		private bool bendGoalWeightUsed;

		[Token(Token = "0x4000506")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x67")]
		private bool pickedUp;

		[Token(Token = "0x4000507")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool defaults;

		[Token(Token = "0x4000508")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		private bool pickUpOnPostFBBIK;

		[Token(Token = "0x4000509")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector3 pickUpPosition;

		[Token(Token = "0x400050A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 pausePositionRelative;

		[Token(Token = "0x400050B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private Quaternion pickUpRotation;

		[Token(Token = "0x400050C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private Quaternion pauseRotationRelative;

		[Token(Token = "0x400050D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private InteractionTarget interactionTarget;

		[Token(Token = "0x400050E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Transform target;

		[Token(Token = "0x400050F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private List<bool> triggered;

		[Token(Token = "0x4000510")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private InteractionSystem interactionSystem;

		[Token(Token = "0x4000511")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private bool started;

		[Token(Token = "0x170000B9")]
		public FullBodyBipedEffector effectorType
		{
			[Token(Token = "0x6000703")]
			[Address(RVA = "0xF9DD78", Offset = "0xF9DD78", VA = "0xF9DD78")]
			[CompilerGenerated]
			get
			{
				return default(FullBodyBipedEffector);
			}
			[Token(Token = "0x6000704")]
			[Address(RVA = "0xF9DD80", Offset = "0xF9DD80", VA = "0xF9DD80")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000BA")]
		public bool isPaused
		{
			[Token(Token = "0x6000705")]
			[Address(RVA = "0xF9DD88", Offset = "0xF9DD88", VA = "0xF9DD88")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000706")]
			[Address(RVA = "0xF9DD90", Offset = "0xF9DD90", VA = "0xF9DD90")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000BB")]
		public InteractionObject interactionObject
		{
			[Token(Token = "0x6000707")]
			[Address(RVA = "0xF9DD9C", Offset = "0xF9DD9C", VA = "0xF9DD9C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000708")]
			[Address(RVA = "0xF9DDA4", Offset = "0xF9DDA4", VA = "0xF9DDA4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000BC")]
		public bool inInteraction
		{
			[Token(Token = "0x6000709")]
			[Address(RVA = "0xF9DDAC", Offset = "0xF9DDAC", VA = "0xF9DDAC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000BD")]
		public float progress
		{
			[Token(Token = "0x6000712")]
			[Address(RVA = "0xF9F804", Offset = "0xF9F804", VA = "0xF9F804")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x600070A")]
		[Address(RVA = "0xF9DE0C", Offset = "0xF9DE0C", VA = "0xF9DE0C")]
		public InteractionEffector(FullBodyBipedEffector effectorType)
		{
		}

		[Token(Token = "0x600070B")]
		[Address(RVA = "0xF9DEA8", Offset = "0xF9DEA8", VA = "0xF9DEA8")]
		public void Initiate(InteractionSystem interactionSystem)
		{
		}

		[Token(Token = "0x600070C")]
		[Address(RVA = "0xF9DF68", Offset = "0xF9DF68", VA = "0xF9DF68")]
		private void StoreDefaults()
		{
		}

		[Token(Token = "0x600070D")]
		[Address(RVA = "0xF9E0D4", Offset = "0xF9E0D4", VA = "0xF9E0D4")]
		public bool ResetToDefaults(float speed)
		{
			return default(bool);
		}

		[Token(Token = "0x600070E")]
		[Address(RVA = "0xF9E4F0", Offset = "0xF9E4F0", VA = "0xF9E4F0")]
		public bool Pause()
		{
			return default(bool);
		}

		[Token(Token = "0x600070F")]
		[Address(RVA = "0xF9E610", Offset = "0xF9E610", VA = "0xF9E610")]
		public bool Resume()
		{
			return default(bool);
		}

		[Token(Token = "0x6000710")]
		[Address(RVA = "0xF9E664", Offset = "0xF9E664", VA = "0xF9E664")]
		public bool Start(InteractionObject interactionObject, string tag, float fadeInTime, bool interrupt)
		{
			return default(bool);
		}

		[Token(Token = "0x6000711")]
		[Address(RVA = "0xF9EB64", Offset = "0xF9EB64", VA = "0xF9EB64")]
		public void Update(Transform root, float speed)
		{
		}

		[Token(Token = "0x6000713")]
		[Address(RVA = "0xF9F258", Offset = "0xF9F258", VA = "0xF9F258")]
		private void TriggerUntriggeredEvents(bool checkTime, out bool pickUp, out bool pause)
		{
		}

		[Token(Token = "0x6000714")]
		[Address(RVA = "0xF9F47C", Offset = "0xF9F47C", VA = "0xF9F47C")]
		private void PickUp(Transform root)
		{
		}

		[Token(Token = "0x6000715")]
		[Address(RVA = "0xF9F69C", Offset = "0xF9F69C", VA = "0xF9F69C")]
		public bool Stop()
		{
			return default(bool);
		}

		[Token(Token = "0x6000716")]
		[Address(RVA = "0xF9F834", Offset = "0xF9F834", VA = "0xF9F834")]
		public void OnPostFBBIK()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000BB")]
	public class InteractionLookAt
	{
		[Token(Token = "0x4000512")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Tooltip("(Optional) reference to the LookAtIK component that will be used to make the character look at the objects that it is interacting with.")]
		public LookAtIK ik;

		[Token(Token = "0x4000513")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Interpolation speed of the LookAtIK target.")]
		public float lerpSpeed;

		[Token(Token = "0x4000514")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Interpolation speed of the LookAtIK weight.")]
		public float weightSpeed;

		[Token(Token = "0x4000515")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public bool isPaused;

		[Token(Token = "0x4000516")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Transform lookAtTarget;

		[Token(Token = "0x4000517")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float stopLookTime;

		[Token(Token = "0x4000518")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float weight;

		[Token(Token = "0x4000519")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool firstFBBIKSolve;

		[Token(Token = "0x6000717")]
		[Address(RVA = "0xF9FA78", Offset = "0xF9FA78", VA = "0xF9FA78")]
		public void Look(Transform target, float time)
		{
		}

		[Token(Token = "0x6000718")]
		[Address(RVA = "0xF9FB94", Offset = "0xF9FB94", VA = "0xF9FB94")]
		public void OnFixTransforms()
		{
		}

		[Token(Token = "0x6000719")]
		[Address(RVA = "0xF9FC2C", Offset = "0xF9FC2C", VA = "0xF9FC2C")]
		public void Update()
		{
		}

		[Token(Token = "0x600071A")]
		[Address(RVA = "0xF9FE54", Offset = "0xF9FE54", VA = "0xF9FE54")]
		public void SolveSpine()
		{
		}

		[Token(Token = "0x600071B")]
		[Address(RVA = "0xF9FEFC", Offset = "0xF9FEFC", VA = "0xF9FEFC")]
		public void SolveHead()
		{
		}

		[Token(Token = "0x600071C")]
		[Address(RVA = "0xF9FFA8", Offset = "0xF9FFA8", VA = "0xF9FFA8")]
		public InteractionLookAt()
		{
		}
	}
	[Token(Token = "0x20000BC")]
	[HelpURL("https://www.youtube.com/watch?v=r5jiZnsDH3M")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Interaction System/Interaction Object")]
	public class InteractionObject : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20000BD")]
		public class InteractionEvent
		{
			[Token(Token = "0x4000523")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The time of the event since interaction start.")]
			public float time;

			[Token(Token = "0x4000524")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("If true, the interaction will be paused on this event. The interaction can be resumed by InteractionSystem.ResumeInteraction() or InteractionSystem.ResumeAll;")]
			public bool pause;

			[Token(Token = "0x4000525")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
			[Tooltip("If true, the object will be parented to the effector bone on this event. Note that picking up like this can be done by only a single effector at a time. If you wish to pick up an object with both hands, see the Interaction PickUp2Handed demo scene.")]
			public bool pickUp;

			[Token(Token = "0x4000526")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("The animations called on this event.")]
			public AnimatorEvent[] animations;

			[Token(Token = "0x4000527")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("The messages sent on this event using GameObject.SendMessage().")]
			public Message[] messages;

			[Token(Token = "0x4000528")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("The UnityEvent to invoke on this event.")]
			public UnityEvent unityEvent;

			[Token(Token = "0x6000739")]
			[Address(RVA = "0xFA15E4", Offset = "0xFA15E4", VA = "0xFA15E4")]
			public void Activate(Transform t)
			{
			}

			[Token(Token = "0x600073A")]
			[Address(RVA = "0xFA187C", Offset = "0xFA187C", VA = "0xFA187C")]
			public InteractionEvent()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000BE")]
		public class Message
		{
			[Token(Token = "0x4000529")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The name of the function called.")]
			public string function;

			[Token(Token = "0x400052A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("The recipient game object.")]
			public GameObject recipient;

			[Token(Token = "0x400052B")]
			private const string empty = "";

			[Token(Token = "0x600073B")]
			[Address(RVA = "0xFA1784", Offset = "0xFA1784", VA = "0xFA1784")]
			public void Send(Transform t)
			{
			}

			[Token(Token = "0x600073C")]
			[Address(RVA = "0xFA1884", Offset = "0xFA1884", VA = "0xFA1884")]
			public Message()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000BF")]
		public class AnimatorEvent
		{
			[Token(Token = "0x400052C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The Animator component that will receive the AnimatorEvents.")]
			public Animator animator;

			[Token(Token = "0x400052D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("The Animation component that will receive the AnimatorEvents (Legacy).")]
			public Animation animation;

			[Token(Token = "0x400052E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("The name of the animation state.")]
			public string animationState;

			[Token(Token = "0x400052F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("The crossfading time.")]
			public float crossfadeTime;

			[Token(Token = "0x4000530")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[Tooltip("The layer of the animation state (if using Legacy, the animation state will be forced to this layer).")]
			public int layer;

			[Token(Token = "0x4000531")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[Tooltip("Should the animation always start from 0 normalized time?")]
			public bool resetNormalizedTime;

			[Token(Token = "0x4000532")]
			private const string empty = "";

			[Token(Token = "0x600073D")]
			[Address(RVA = "0xFA16A8", Offset = "0xFA16A8", VA = "0xFA16A8")]
			public void Activate(bool pickUp)
			{
			}

			[Token(Token = "0x600073E")]
			[Address(RVA = "0xFA188C", Offset = "0xFA188C", VA = "0xFA188C")]
			private void Activate(Animator animator)
			{
			}

			[Token(Token = "0x600073F")]
			[Address(RVA = "0xFA193C", Offset = "0xFA193C", VA = "0xFA193C")]
			private void Activate(Animation animation)
			{
			}

			[Token(Token = "0x6000740")]
			[Address(RVA = "0xFA1A14", Offset = "0xFA1A14", VA = "0xFA1A14")]
			public AnimatorEvent()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000C0")]
		public class WeightCurve
		{
			[Serializable]
			[Token(Token = "0x20000C1")]
			public enum Type
			{
				[Token(Token = "0x4000536")]
				PositionWeight,
				[Token(Token = "0x4000537")]
				RotationWeight,
				[Token(Token = "0x4000538")]
				PositionOffsetX,
				[Token(Token = "0x4000539")]
				PositionOffsetY,
				[Token(Token = "0x400053A")]
				PositionOffsetZ,
				[Token(Token = "0x400053B")]
				Pull,
				[Token(Token = "0x400053C")]
				Reach,
				[Token(Token = "0x400053D")]
				RotateBoneWeight,
				[Token(Token = "0x400053E")]
				Push,
				[Token(Token = "0x400053F")]
				PushParent,
				[Token(Token = "0x4000540")]
				PoserWeight,
				[Token(Token = "0x4000541")]
				BendGoalWeight
			}

			[Token(Token = "0x4000533")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The type of the curve (InteractionObject.WeightCurve.Type).")]
			public Type type;

			[Token(Token = "0x4000534")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("The weight curve.")]
			public AnimationCurve curve;

			[Token(Token = "0x6000741")]
			[Address(RVA = "0xFA0CDC", Offset = "0xFA0CDC", VA = "0xFA0CDC")]
			public float GetValue(float timer)
			{
				return default(float);
			}

			[Token(Token = "0x6000742")]
			[Address(RVA = "0xFA1A28", Offset = "0xFA1A28", VA = "0xFA1A28")]
			public WeightCurve()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000C2")]
		public class Multiplier
		{
			[Token(Token = "0x4000542")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The curve type to multiply.")]
			public WeightCurve.Type curve;

			[Token(Token = "0x4000543")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("The multiplier of the curve's value.")]
			public float multiplier;

			[Token(Token = "0x4000544")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("The resulting value will be applied to this channel.")]
			public WeightCurve.Type result;

			[Token(Token = "0x6000743")]
			[Address(RVA = "0xFA12E4", Offset = "0xFA12E4", VA = "0xFA12E4")]
			public float GetValue(WeightCurve weightCurve, float timer)
			{
				return default(float);
			}

			[Token(Token = "0x6000744")]
			[Address(RVA = "0xFA1A30", Offset = "0xFA1A30", VA = "0xFA1A30")]
			public Multiplier()
			{
			}
		}

		[Token(Token = "0x400051A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("If the Interaction System has a 'Look At' LookAtIK component assigned, will use it to make the character look at the specified Transform. If unassigned, will look at this GameObject.")]
		public Transform otherLookAtTarget;

		[Token(Token = "0x400051B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The root Transform of the InteractionTargets. If null, will use this GameObject. GetComponentsInChildren<InteractionTarget>() will be used at initiation to find all InteractionTargets associated with this InteractionObject.")]
		public Transform otherTargetsRoot;

		[Token(Token = "0x400051C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("If assigned, all PositionOffset channels will be applied in the rotation space of this Transform. If not, they will be in the rotation space of the character.")]
		public Transform positionOffsetSpace;

		[Token(Token = "0x400051D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public WeightCurve[] weightCurves;

		[Token(Token = "0x400051E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Multiplier[] multipliers;

		[Token(Token = "0x400051F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public InteractionEvent[] events;

		[Token(Token = "0x4000522")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private InteractionTarget[] targets;

		[Token(Token = "0x170000BE")]
		public float length
		{
			[Token(Token = "0x6000725")]
			[Address(RVA = "0xFA01DC", Offset = "0xFA01DC", VA = "0xFA01DC")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000726")]
			[Address(RVA = "0xFA01E4", Offset = "0xFA01E4", VA = "0xFA01E4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000BF")]
		public InteractionSystem lastUsedInteractionSystem
		{
			[Token(Token = "0x6000727")]
			[Address(RVA = "0xFA01EC", Offset = "0xFA01EC", VA = "0xFA01EC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000728")]
			[Address(RVA = "0xFA01F4", Offset = "0xFA01F4", VA = "0xFA01F4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000C0")]
		public Transform lookAtTarget
		{
			[Token(Token = "0x600072A")]
			[Address(RVA = "0xFA0434", Offset = "0xFA0434", VA = "0xFA0434")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C1")]
		public Transform targetsRoot
		{
			[Token(Token = "0x6000732")]
			[Address(RVA = "0xFA03B4", Offset = "0xFA03B4", VA = "0xFA03B4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600071D")]
		[Address(RVA = "0xF9FFBC", Offset = "0xF9FFBC", VA = "0xF9FFBC")]
		[ContextMenu("User Manual")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x600071E")]
		[Address(RVA = "0xFA0000", Offset = "0xFA0000", VA = "0xFA0000")]
		[ContextMenu("Scrpt Reference")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x600071F")]
		[Address(RVA = "0xFA0044", Offset = "0xFA0044", VA = "0xFA0044")]
		[ContextMenu("TUTORIAL VIDEO (PART 1: BASICS)")]
		private void OpenTutorial1()
		{
		}

		[Token(Token = "0x6000720")]
		[Address(RVA = "0xFA0088", Offset = "0xFA0088", VA = "0xFA0088")]
		[ContextMenu("TUTORIAL VIDEO (PART 2: PICKING UP...)")]
		private void OpenTutorial2()
		{
		}

		[Token(Token = "0x6000721")]
		[Address(RVA = "0xFA00CC", Offset = "0xFA00CC", VA = "0xFA00CC")]
		[ContextMenu("TUTORIAL VIDEO (PART 3: ANIMATION)")]
		private void OpenTutorial3()
		{
		}

		[Token(Token = "0x6000722")]
		[Address(RVA = "0xFA0110", Offset = "0xFA0110", VA = "0xFA0110")]
		[ContextMenu("TUTORIAL VIDEO (PART 4: TRIGGERS)")]
		private void OpenTutorial4()
		{
		}

		[Token(Token = "0x6000723")]
		[Address(RVA = "0xFA0154", Offset = "0xFA0154", VA = "0xFA0154")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000724")]
		[Address(RVA = "0xFA0198", Offset = "0xFA0198", VA = "0xFA0198")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000729")]
		[Address(RVA = "0xFA01FC", Offset = "0xFA01FC", VA = "0xFA01FC")]
		public void Initiate()
		{
		}

		[Token(Token = "0x600072B")]
		[Address(RVA = "0xFA04B4", Offset = "0xFA04B4", VA = "0xFA04B4")]
		public InteractionTarget GetTarget(FullBodyBipedEffector effectorType, InteractionSystem interactionSystem)
		{
			return null;
		}

		[Token(Token = "0x600072C")]
		[Address(RVA = "0xFA062C", Offset = "0xFA062C", VA = "0xFA062C")]
		public bool CurveUsed(WeightCurve.Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x600072D")]
		[Address(RVA = "0xFA06C0", Offset = "0xFA06C0", VA = "0xFA06C0")]
		public InteractionTarget[] GetTargets()
		{
			return null;
		}

		[Token(Token = "0x600072E")]
		[Address(RVA = "0xFA06C8", Offset = "0xFA06C8", VA = "0xFA06C8")]
		public Transform GetTarget(FullBodyBipedEffector effectorType, string tag)
		{
			return null;
		}

		[Token(Token = "0x600072F")]
		[Address(RVA = "0xFA0868", Offset = "0xFA0868", VA = "0xFA0868")]
		public void OnStartInteraction(InteractionSystem interactionSystem)
		{
		}

		[Token(Token = "0x6000730")]
		[Address(RVA = "0xFA0870", Offset = "0xFA0870", VA = "0xFA0870")]
		public void Apply(IKSolverFullBodyBiped solver, FullBodyBipedEffector effector, InteractionTarget target, float timer, float weight)
		{
		}

		[Token(Token = "0x6000731")]
		[Address(RVA = "0xFA1314", Offset = "0xFA1314", VA = "0xFA1314")]
		public float GetValue(WeightCurve.Type weightCurveType, InteractionTarget target, float timer)
		{
			return default(float);
		}

		[Token(Token = "0x6000733")]
		[Address(RVA = "0xFA1520", Offset = "0xFA1520", VA = "0xFA1520")]
		private void Start()
		{
		}

		[Token(Token = "0x6000734")]
		[Address(RVA = "0xFA0CF8", Offset = "0xFA0CF8", VA = "0xFA0CF8")]
		private void Apply(IKSolverFullBodyBiped solver, FullBodyBipedEffector effector, WeightCurve.Type type, float value, float weight)
		{
		}

		[Token(Token = "0x6000735")]
		[Address(RVA = "0xFA0804", Offset = "0xFA0804", VA = "0xFA0804")]
		private Transform GetTarget(FullBodyBipedEffector effectorType)
		{
			return null;
		}

		[Token(Token = "0x6000736")]
		[Address(RVA = "0xFA1288", Offset = "0xFA1288", VA = "0xFA1288")]
		private int GetWeightCurveIndex(WeightCurve.Type weightCurveType)
		{
			return default(int);
		}

		[Token(Token = "0x6000737")]
		[Address(RVA = "0xFA1524", Offset = "0xFA1524", VA = "0xFA1524")]
		private int GetMultiplierIndex(WeightCurve.Type weightCurveType)
		{
			return default(int);
		}

		[Token(Token = "0x6000738")]
		[Address(RVA = "0xFA1580", Offset = "0xFA1580", VA = "0xFA1580")]
		public InteractionObject()
		{
		}
	}
	[Token(Token = "0x20000C3")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Interaction System/Interaction System")]
	[HelpURL("https://www.youtube.com/watch?v=r5jiZnsDH3M")]
	public class InteractionSystem : MonoBehaviour
	{
		[Token(Token = "0x20000C4")]
		public delegate void InteractionDelegate(FullBodyBipedEffector effectorType, InteractionObject interactionObject);

		[Token(Token = "0x20000C5")]
		public delegate void InteractionEventDelegate(FullBodyBipedEffector effectorType, InteractionObject interactionObject, InteractionObject.InteractionEvent interactionEvent);

		[Token(Token = "0x4000545")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("If not empty, only the targets with the specified tag will be used by this Interaction System.")]
		public string targetTag;

		[Token(Token = "0x4000546")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The fade in time of the interaction.")]
		public float fadeInTime;

		[Token(Token = "0x4000547")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("The master speed for all interactions.")]
		public float speed;

		[Token(Token = "0x4000548")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("If > 0, lerps all the FBBIK channels used by the Interaction System back to their default or initial values when not in interaction.")]
		public float resetToDefaultsSpeed;

		[Token(Token = "0x4000549")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[FormerlySerializedAs("collider")]
		[Tooltip("The collider that registers OnTriggerEnter and OnTriggerExit events with InteractionTriggers.")]
		[Header("Triggering")]
		public Collider characterCollider;

		[Token(Token = "0x400054A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[FormerlySerializedAs("camera")]
		[Tooltip("Will be used by Interaction Triggers that need the camera's position. Assign the first person view character camera.")]
		public Transform FPSCamera;

		[Token(Token = "0x400054B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The layers that will be raycasted from the camera (along camera.forward). All InteractionTrigger look at target colliders should be included.")]
		public LayerMask camRaycastLayers;

		[Token(Token = "0x400054C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("Max distance of raycasting from the camera.")]
		public float camRaycastDistance;

		[Token(Token = "0x400054E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private List<InteractionTrigger> inContact;

		[Token(Token = "0x400054F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private List<int> bestRangeIndexes;

		[Token(Token = "0x4000550")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public InteractionDelegate OnInteractionStart;

		[Token(Token = "0x4000551")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public InteractionDelegate OnInteractionPause;

		[Token(Token = "0x4000552")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public InteractionDelegate OnInteractionPickUp;

		[Token(Token = "0x4000553")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public InteractionDelegate OnInteractionResume;

		[Token(Token = "0x4000554")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public InteractionDelegate OnInteractionStop;

		[Token(Token = "0x4000555")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public InteractionEventDelegate OnInteractionEvent;

		[Token(Token = "0x4000556")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public RaycastHit raycastHit;

		[Token(Token = "0x4000557")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Space(10f)]
		[SerializeField]
		[Tooltip("Reference to the FBBIK component.")]
		private FullBodyBipedIK fullBody;

		[Token(Token = "0x4000558")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Tooltip("Handles looking at the interactions.")]
		public InteractionLookAt lookAt;

		[Token(Token = "0x4000559")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private InteractionEffector[] interactionEffectors;

		[Token(Token = "0x400055A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private bool initiated;

		[Token(Token = "0x400055B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Collider lastCollider;

		[Token(Token = "0x400055C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Collider c;

		[Token(Token = "0x170000C2")]
		public bool inInteraction
		{
			[Token(Token = "0x600074D")]
			[Address(RVA = "0xFA1C60", Offset = "0xFA1C60", VA = "0xFA1C60")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000C3")]
		public FullBodyBipedIK ik
		{
			[Token(Token = "0x6000767")]
			[Address(RVA = "0xFA3700", Offset = "0xFA3700", VA = "0xFA3700")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000768")]
			[Address(RVA = "0xFA3708", Offset = "0xFA3708", VA = "0xFA3708")]
			set
			{
			}
		}

		[Token(Token = "0x170000C4")]
		public List<InteractionTrigger> triggersInRange
		{
			[Token(Token = "0x6000769")]
			[Address(RVA = "0xFA3710", Offset = "0xFA3710", VA = "0xFA3710")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600076A")]
			[Address(RVA = "0xFA3718", Offset = "0xFA3718", VA = "0xFA3718")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000745")]
		[Address(RVA = "0xFA1A40", Offset = "0xFA1A40", VA = "0xFA1A40")]
		[ContextMenu("User Manual")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6000746")]
		[Address(RVA = "0xFA1A84", Offset = "0xFA1A84", VA = "0xFA1A84")]
		[ContextMenu("Scrpt Reference")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000747")]
		[Address(RVA = "0xFA1AC8", Offset = "0xFA1AC8", VA = "0xFA1AC8")]
		[ContextMenu("TUTORIAL VIDEO (PART 1: BASICS)")]
		private void OpenTutorial1()
		{
		}

		[Token(Token = "0x6000748")]
		[Address(RVA = "0xFA1B0C", Offset = "0xFA1B0C", VA = "0xFA1B0C")]
		[ContextMenu("TUTORIAL VIDEO (PART 2: PICKING UP...)")]
		private void OpenTutorial2()
		{
		}

		[Token(Token = "0x6000749")]
		[Address(RVA = "0xFA1B50", Offset = "0xFA1B50", VA = "0xFA1B50")]
		[ContextMenu("TUTORIAL VIDEO (PART 3: ANIMATION)")]
		private void OpenTutorial3()
		{
		}

		[Token(Token = "0x600074A")]
		[Address(RVA = "0xFA1B94", Offset = "0xFA1B94", VA = "0xFA1B94")]
		[ContextMenu("TUTORIAL VIDEO (PART 4: TRIGGERS)")]
		private void OpenTutorial4()
		{
		}

		[Token(Token = "0x600074B")]
		[Address(RVA = "0xFA1BD8", Offset = "0xFA1BD8", VA = "0xFA1BD8")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x600074C")]
		[Address(RVA = "0xFA1C1C", Offset = "0xFA1C1C", VA = "0xFA1C1C")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x600074E")]
		[Address(RVA = "0xFA1DDC", Offset = "0xFA1DDC", VA = "0xFA1DDC")]
		public bool IsInInteraction(FullBodyBipedEffector effectorType)
		{
			return default(bool);
		}

		[Token(Token = "0x600074F")]
		[Address(RVA = "0xFA1E98", Offset = "0xFA1E98", VA = "0xFA1E98")]
		public bool IsPaused(FullBodyBipedEffector effectorType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000750")]
		[Address(RVA = "0xFA1F54", Offset = "0xFA1F54", VA = "0xFA1F54")]
		public bool IsPaused()
		{
			return default(bool);
		}

		[Token(Token = "0x6000751")]
		[Address(RVA = "0xFA1FF0", Offset = "0xFA1FF0", VA = "0xFA1FF0")]
		public bool IsInSync()
		{
			return default(bool);
		}

		[Token(Token = "0x6000752")]
		[Address(RVA = "0xFA20D8", Offset = "0xFA20D8", VA = "0xFA20D8")]
		public bool StartInteraction(FullBodyBipedEffector effectorType, InteractionObject interactionObject, bool interrupt)
		{
			return default(bool);
		}

		[Token(Token = "0x6000753")]
		[Address(RVA = "0xFA21D4", Offset = "0xFA21D4", VA = "0xFA21D4")]
		public bool PauseInteraction(FullBodyBipedEffector effectorType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000754")]
		[Address(RVA = "0xFA225C", Offset = "0xFA225C", VA = "0xFA225C")]
		public bool ResumeInteraction(FullBodyBipedEffector effectorType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000755")]
		[Address(RVA = "0xFA22E4", Offset = "0xFA22E4", VA = "0xFA22E4")]
		public bool StopInteraction(FullBodyBipedEffector effectorType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000756")]
		[Address(RVA = "0xFA236C", Offset = "0xFA236C", VA = "0xFA236C")]
		public void PauseAll()
		{
		}

		[Token(Token = "0x6000757")]
		[Address(RVA = "0xFA23D8", Offset = "0xFA23D8", VA = "0xFA23D8")]
		public void ResumeAll()
		{
		}

		[Token(Token = "0x6000758")]
		[Address(RVA = "0xFA2444", Offset = "0xFA2444", VA = "0xFA2444")]
		public void StopAll()
		{
		}

		[Token(Token = "0x6000759")]
		[Address(RVA = "0xFA24A4", Offset = "0xFA24A4", VA = "0xFA24A4")]
		public InteractionObject GetInteractionObject(FullBodyBipedEffector effectorType)
		{
			return null;
		}

		[Token(Token = "0x600075A")]
		[Address(RVA = "0xFA2524", Offset = "0xFA2524", VA = "0xFA2524")]
		public float GetProgress(FullBodyBipedEffector effectorType)
		{
			return default(float);
		}

		[Token(Token = "0x600075B")]
		[Address(RVA = "0xFA25AC", Offset = "0xFA25AC", VA = "0xFA25AC")]
		public float GetMinActiveProgress()
		{
			return default(float);
		}

		[Token(Token = "0x600075C")]
		[Address(RVA = "0xFA2664", Offset = "0xFA2664", VA = "0xFA2664")]
		public bool TriggerInteraction(int index, bool interrupt)
		{
			return default(bool);
		}

		[Token(Token = "0x600075D")]
		[Address(RVA = "0xFA28F4", Offset = "0xFA28F4", VA = "0xFA28F4")]
		public bool TriggerInteraction(int index, bool interrupt, out InteractionObject interactionObject)
		{
			return default(bool);
		}

		[Token(Token = "0x600075E")]
		[Address(RVA = "0xFA2AC8", Offset = "0xFA2AC8", VA = "0xFA2AC8")]
		public bool TriggerInteraction(int index, bool interrupt, out InteractionTarget interactionTarget)
		{
			return default(bool);
		}

		[Token(Token = "0x600075F")]
		[Address(RVA = "0xFA2D38", Offset = "0xFA2D38", VA = "0xFA2D38")]
		public InteractionTrigger.Range GetClosestInteractionRange()
		{
			return null;
		}

		[Token(Token = "0x6000760")]
		[Address(RVA = "0xFA2FC4", Offset = "0xFA2FC4", VA = "0xFA2FC4")]
		public InteractionObject GetClosestInteractionObjectInRange()
		{
			return null;
		}

		[Token(Token = "0x6000761")]
		[Address(RVA = "0xFA2FFC", Offset = "0xFA2FFC", VA = "0xFA2FFC")]
		public InteractionTarget GetClosestInteractionTargetInRange()
		{
			return null;
		}

		[Token(Token = "0x6000762")]
		[Address(RVA = "0xFA305C", Offset = "0xFA305C", VA = "0xFA305C")]
		public InteractionObject[] GetClosestInteractionObjectsInRange()
		{
			return null;
		}

		[Token(Token = "0x6000763")]
		[Address(RVA = "0xFA3188", Offset = "0xFA3188", VA = "0xFA3188")]
		public InteractionTarget[] GetClosestInteractionTargetsInRange()
		{
			return null;
		}

		[Token(Token = "0x6000764")]
		[Address(RVA = "0xFA336C", Offset = "0xFA336C", VA = "0xFA336C")]
		public bool TriggerEffectorsReady(int index)
		{
			return default(bool);
		}

		[Token(Token = "0x6000765")]
		[Address(RVA = "0xFA35E0", Offset = "0xFA35E0", VA = "0xFA35E0")]
		public InteractionTrigger.Range GetTriggerRange(int index)
		{
			return null;
		}

		[Token(Token = "0x6000766")]
		[Address(RVA = "0xFA2E20", Offset = "0xFA2E20", VA = "0xFA2E20")]
		public int GetClosestTriggerIndex()
		{
			return default(int);
		}

		[Token(Token = "0x600076B")]
		[Address(RVA = "0xFA3720", Offset = "0xFA3720", VA = "0xFA3720")]
		public void Start()
		{
		}

		[Token(Token = "0x600076C")]
		[Address(RVA = "0xFA4048", Offset = "0xFA4048", VA = "0xFA4048")]
		private void InteractionPause(FullBodyBipedEffector effector, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x600076D")]
		[Address(RVA = "0xFA4068", Offset = "0xFA4068", VA = "0xFA4068")]
		private void InteractionResume(FullBodyBipedEffector effector, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x600076E")]
		[Address(RVA = "0xFA4084", Offset = "0xFA4084", VA = "0xFA4084")]
		private void InteractionStop(FullBodyBipedEffector effector, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x600076F")]
		[Address(RVA = "0xFA40A0", Offset = "0xFA40A0", VA = "0xFA40A0")]
		private void LookAtInteraction(FullBodyBipedEffector effector, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x6000770")]
		[Address(RVA = "0xFA40F4", Offset = "0xFA40F4", VA = "0xFA40F4")]
		public void OnTriggerEnter(Collider c)
		{
		}

		[Token(Token = "0x6000771")]
		[Address(RVA = "0xFA4278", Offset = "0xFA4278", VA = "0xFA4278")]
		public void OnTriggerExit(Collider c)
		{
		}

		[Token(Token = "0x6000772")]
		[Address(RVA = "0xFA4374", Offset = "0xFA4374", VA = "0xFA4374")]
		private bool ContactIsInRange(int index, out int bestRangeIndex)
		{
			return default(bool);
		}

		[Token(Token = "0x6000773")]
		[Address(RVA = "0xFA46D0", Offset = "0xFA46D0", VA = "0xFA46D0")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000774")]
		[Address(RVA = "0xFA47E8", Offset = "0xFA47E8", VA = "0xFA47E8")]
		public void Update()
		{
		}

		[Token(Token = "0x6000775")]
		[Address(RVA = "0xFA4AD0", Offset = "0xFA4AD0", VA = "0xFA4AD0")]
		private void Raycasting()
		{
		}

		[Token(Token = "0x6000776")]
		[Address(RVA = "0xFA3DE8", Offset = "0xFA3DE8", VA = "0xFA3DE8")]
		private void UpdateTriggerEventBroadcasting()
		{
		}

		[Token(Token = "0x6000777")]
		[Address(RVA = "0xFA4C00", Offset = "0xFA4C00", VA = "0xFA4C00")]
		private void UpdateEffectors()
		{
		}

		[Token(Token = "0x6000778")]
		[Address(RVA = "0xFA4D14", Offset = "0xFA4D14", VA = "0xFA4D14")]
		private void OnPreFBBIK()
		{
		}

		[Token(Token = "0x6000779")]
		[Address(RVA = "0xFA4D9C", Offset = "0xFA4D9C", VA = "0xFA4D9C")]
		private void OnPostFBBIK()
		{
		}

		[Token(Token = "0x600077A")]
		[Address(RVA = "0xFA4E60", Offset = "0xFA4E60", VA = "0xFA4E60")]
		private void OnFixTransforms()
		{
		}

		[Token(Token = "0x600077B")]
		[Address(RVA = "0xFA4E78", Offset = "0xFA4E78", VA = "0xFA4E78")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600077C")]
		[Address(RVA = "0xFA1CFC", Offset = "0xFA1CFC", VA = "0xFA1CFC")]
		private bool IsValid(bool log)
		{
			return default(bool);
		}

		[Token(Token = "0x600077D")]
		[Address(RVA = "0xFA27E0", Offset = "0xFA27E0", VA = "0xFA27E0")]
		private bool TriggerIndexIsValid(int index)
		{
			return default(bool);
		}

		[Token(Token = "0x600077E")]
		[Address(RVA = "0xFA52F0", Offset = "0xFA52F0", VA = "0xFA52F0")]
		public InteractionSystem()
		{
		}
	}
	[Token(Token = "0x20000C6")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Interaction System/Interaction Target")]
	[HelpURL("https://www.youtube.com/watch?v=r5jiZnsDH3M")]
	public class InteractionTarget : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20000C7")]
		public class Multiplier
		{
			[Token(Token = "0x4000567")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The curve type (InteractionObject.WeightCurve.Type).")]
			public InteractionObject.WeightCurve.Type curve;

			[Token(Token = "0x4000568")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("Multiplier of the curve's value.")]
			public float multiplier;

			[Token(Token = "0x6000793")]
			[Address(RVA = "0xFA6164", Offset = "0xFA6164", VA = "0xFA6164")]
			public Multiplier()
			{
			}
		}

		[Token(Token = "0x400055D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The type of the FBBIK effector.")]
		public FullBodyBipedEffector effectorType;

		[Token(Token = "0x400055E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("InteractionObject weight curve multipliers for this effector target.")]
		public Multiplier[] multipliers;

		[Token(Token = "0x400055F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The interaction speed multiplier for this effector. This can be used to make interactions faster/slower for specific effectors.")]
		public float interactionSpeedMlp;

		[Token(Token = "0x4000560")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The pivot to twist/swing this interaction target about. For symmetric objects that can be interacted with from a certain angular range.")]
		public Transform pivot;

		[Token(Token = "0x4000561")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The axis of twisting the interaction target (blue line).")]
		public Vector3 twistAxis;

		[Token(Token = "0x4000562")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("The weight of twisting the interaction target towards the effector bone in the start of the interaction.")]
		public float twistWeight;

		[Token(Token = "0x4000563")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("The weight of swinging the interaction target towards the effector bone in the start of the interaction. Swing is defined as a 3-DOF rotation around any axis, while twist is only around the twist axis.")]
		public float swingWeight;

		[Token(Token = "0x4000564")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("If true, will twist/swing around the pivot only once at the start of the interaction. If false, will continue rotating throuout the whole interaction.")]
		public bool rotateOnce;

		[Token(Token = "0x4000565")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Quaternion defaultLocalRotation;

		[Token(Token = "0x4000566")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform lastPivot;

		[Token(Token = "0x6000787")]
		[Address(RVA = "0xFA599C", Offset = "0xFA599C", VA = "0xFA599C")]
		[ContextMenu("User Manual")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6000788")]
		[Address(RVA = "0xFA59E0", Offset = "0xFA59E0", VA = "0xFA59E0")]
		[ContextMenu("Scrpt Reference")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000789")]
		[Address(RVA = "0xFA5A24", Offset = "0xFA5A24", VA = "0xFA5A24")]
		[ContextMenu("TUTORIAL VIDEO (PART 1: BASICS)")]
		private void OpenTutorial1()
		{
		}

		[Token(Token = "0x600078A")]
		[Address(RVA = "0xFA5A68", Offset = "0xFA5A68", VA = "0xFA5A68")]
		[ContextMenu("TUTORIAL VIDEO (PART 2: PICKING UP...)")]
		private void OpenTutorial2()
		{
		}

		[Token(Token = "0x600078B")]
		[Address(RVA = "0xFA5AAC", Offset = "0xFA5AAC", VA = "0xFA5AAC")]
		[ContextMenu("TUTORIAL VIDEO (PART 3: ANIMATION)")]
		private void OpenTutorial3()
		{
		}

		[Token(Token = "0x600078C")]
		[Address(RVA = "0xFA5AF0", Offset = "0xFA5AF0", VA = "0xFA5AF0")]
		[ContextMenu("TUTORIAL VIDEO (PART 4: TRIGGERS)")]
		private void OpenTutorial4()
		{
		}

		[Token(Token = "0x600078D")]
		[Address(RVA = "0xFA5B34", Offset = "0xFA5B34", VA = "0xFA5B34")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x600078E")]
		[Address(RVA = "0xFA5B78", Offset = "0xFA5B78", VA = "0xFA5B78")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x600078F")]
		[Address(RVA = "0xFA0C78", Offset = "0xFA0C78", VA = "0xFA0C78")]
		public float GetValue(InteractionObject.WeightCurve.Type curveType)
		{
			return default(float);
		}

		[Token(Token = "0x6000790")]
		[Address(RVA = "0xFA5BBC", Offset = "0xFA5BBC", VA = "0xFA5BBC")]
		public void ResetRotation()
		{
		}

		[Token(Token = "0x6000791")]
		[Address(RVA = "0xFA5C48", Offset = "0xFA5C48", VA = "0xFA5C48")]
		public void RotateTo(Vector3 position)
		{
		}

		[Token(Token = "0x6000792")]
		[Address(RVA = "0xFA60F4", Offset = "0xFA60F4", VA = "0xFA60F4")]
		public InteractionTarget()
		{
		}
	}
	[Token(Token = "0x20000C8")]
	[HelpURL("https://www.youtube.com/watch?v=-TDZpNjt2mk&index=15&list=PLVxSIA1OaTOu8Nos3CalXbJ2DrKnntMv6")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Interaction System/Interaction Trigger")]
	public class InteractionTrigger : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20000C9")]
		public class CharacterPosition
		{
			[Token(Token = "0x400056A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("If false, will not care where the character stands, as long as it is in contact with the trigger collider.")]
			public bool use;

			[Token(Token = "0x400056B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("The offset of the character's position relative to the trigger in XZ plane. Y position of the character is unlimited as long as it is contact with the collider.")]
			public Vector2 offset;

			[Token(Token = "0x400056C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[Tooltip("Angle offset from the default forward direction.")]
			[Range(-180f, 180f)]
			public float angleOffset;

			[Token(Token = "0x400056D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Range(0f, 180f)]
			[Tooltip("Max angular offset of the character's forward from the direction of this trigger.")]
			public float maxAngle;

			[Token(Token = "0x400056E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[Tooltip("Max offset of the character's position from this range's center.")]
			public float radius;

			[Token(Token = "0x400056F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("If true, will rotate the trigger around it's Y axis relative to the position of the character, so the object can be interacted with from all sides.")]
			public bool orbit;

			[Token(Token = "0x4000570")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
			[Tooltip("Fixes the Y axis of the trigger to Vector3.up. This makes the trigger symmetrical relative to the object. For example a gun will be able to be picked up from the same direction relative to the barrel no matter which side the gun is resting on.")]
			public bool fixYAxis;

			[Token(Token = "0x170000C5")]
			public Vector3 offset3D
			{
				[Token(Token = "0x600079C")]
				[Address(RVA = "0xFA63D8", Offset = "0xFA63D8", VA = "0xFA63D8")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x170000C6")]
			public Vector3 direction3D
			{
				[Token(Token = "0x600079D")]
				[Address(RVA = "0xFA63E4", Offset = "0xFA63E4", VA = "0xFA63E4")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x600079E")]
			[Address(RVA = "0xFA64A4", Offset = "0xFA64A4", VA = "0xFA64A4")]
			public bool IsInRange(Transform character, Transform trigger, out float error)
			{
				return default(bool);
			}

			[Token(Token = "0x600079F")]
			[Address(RVA = "0xFA6C08", Offset = "0xFA6C08", VA = "0xFA6C08")]
			public CharacterPosition()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000CA")]
		public class CameraPosition
		{
			[Token(Token = "0x4000571")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("What the camera should be looking at to trigger the interaction? If null, this camera position will not be used.")]
			public Collider lookAtTarget;

			[Token(Token = "0x4000572")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("The direction from the lookAtTarget towards the camera (in lookAtTarget's space).")]
			public Vector3 direction;

			[Token(Token = "0x4000573")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[Tooltip("Max distance from the lookAtTarget to the camera.")]
			public float maxDistance;

			[Token(Token = "0x4000574")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Range(0f, 180f)]
			[Tooltip("Max angle between the direction and the direction towards the camera.")]
			public float maxAngle;

			[Token(Token = "0x4000575")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[Tooltip("Fixes the Y axis of the trigger to Vector3.up. This makes the trigger symmetrical relative to the object.")]
			public bool fixYAxis;

			[Token(Token = "0x60007A0")]
			[Address(RVA = "0xFA6C1C", Offset = "0xFA6C1C", VA = "0xFA6C1C")]
			public Quaternion GetRotation()
			{
				return default(Quaternion);
			}

			[Token(Token = "0x60007A1")]
			[Address(RVA = "0xFA6D94", Offset = "0xFA6D94", VA = "0xFA6D94")]
			public bool IsInRange(Transform raycastFrom, RaycastHit hit, Transform trigger, out float error)
			{
				return default(bool);
			}

			[Token(Token = "0x60007A2")]
			[Address(RVA = "0xFA709C", Offset = "0xFA709C", VA = "0xFA709C")]
			public CameraPosition()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000CB")]
		public class Range
		{
			[Serializable]
			[Token(Token = "0x20000CC")]
			public class Interaction
			{
				[Token(Token = "0x400057B")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[Tooltip("The InteractionObject to interact with.")]
				public InteractionObject interactionObject;

				[Token(Token = "0x400057C")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				[Tooltip("The effectors to interact with.")]
				public FullBodyBipedEffector[] effectors;

				[Token(Token = "0x60007A5")]
				[Address(RVA = "0xFA7120", Offset = "0xFA7120", VA = "0xFA7120")]
				public Interaction()
				{
				}
			}

			[Token(Token = "0x4000576")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[SerializeField]
			[HideInInspector]
			public string name;

			[Token(Token = "0x4000577")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[SerializeField]
			[HideInInspector]
			public bool show;

			[Token(Token = "0x4000578")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("The range for the character's position and rotation.")]
			public CharacterPosition characterPosition;

			[Token(Token = "0x4000579")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("The range for the character camera's position and rotation.")]
			public CameraPosition cameraPosition;

			[Token(Token = "0x400057A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[Tooltip("Definitions of the interactions associated with this range.")]
			public Interaction[] interactions;

			[Token(Token = "0x60007A3")]
			[Address(RVA = "0xFA62C4", Offset = "0xFA62C4", VA = "0xFA62C4")]
			public bool IsInRange(Transform character, Transform raycastFrom, RaycastHit raycastHit, Transform trigger, out float maxError)
			{
				return default(bool);
			}

			[Token(Token = "0x60007A4")]
			[Address(RVA = "0xFA7110", Offset = "0xFA7110", VA = "0xFA7110")]
			public Range()
			{
			}
		}

		[Token(Token = "0x4000569")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The valid ranges of the character's and/or it's camera's position for triggering interaction when the character is in contact with the collider of this trigger.")]
		public Range[] ranges;

		[Token(Token = "0x6000794")]
		[Address(RVA = "0xFA616C", Offset = "0xFA616C", VA = "0xFA616C")]
		[ContextMenu("User Manual")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6000795")]
		[Address(RVA = "0xFA61B0", Offset = "0xFA61B0", VA = "0xFA61B0")]
		[ContextMenu("Scrpt Reference")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000796")]
		[Address(RVA = "0xFA61F4", Offset = "0xFA61F4", VA = "0xFA61F4")]
		[ContextMenu("TUTORIAL VIDEO")]
		private void OpenTutorial4()
		{
		}

		[Token(Token = "0x6000797")]
		[Address(RVA = "0xFA6238", Offset = "0xFA6238", VA = "0xFA6238")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000798")]
		[Address(RVA = "0xFA627C", Offset = "0xFA627C", VA = "0xFA627C")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000799")]
		[Address(RVA = "0xFA62C0", Offset = "0xFA62C0", VA = "0xFA62C0")]
		private void Start()
		{
		}

		[Token(Token = "0x600079A")]
		[Address(RVA = "0xFA451C", Offset = "0xFA451C", VA = "0xFA451C")]
		public int GetBestRangeIndex(Transform character, Transform raycastFrom, RaycastHit raycastHit)
		{
			return default(int);
		}

		[Token(Token = "0x600079B")]
		[Address(RVA = "0xFA6374", Offset = "0xFA6374", VA = "0xFA6374")]
		public InteractionTrigger()
		{
		}
	}
	[Token(Token = "0x20000CD")]
	public class GenericPoser : Poser
	{
		[Serializable]
		[Token(Token = "0x20000CE")]
		public class Map
		{
			[Token(Token = "0x400057E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform bone;

			[Token(Token = "0x400057F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Transform target;

			[Token(Token = "0x4000580")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private Vector3 defaultLocalPosition;

			[Token(Token = "0x4000581")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private Quaternion defaultLocalRotation;

			[Token(Token = "0x60007AD")]
			[Address(RVA = "0xFA7420", Offset = "0xFA7420", VA = "0xFA7420")]
			public Map(Transform bone, Transform target)
			{
			}

			[Token(Token = "0x60007AE")]
			[Address(RVA = "0xFA7778", Offset = "0xFA7778", VA = "0xFA7778")]
			public void StoreDefaultState()
			{
			}

			[Token(Token = "0x60007AF")]
			[Address(RVA = "0xFA7738", Offset = "0xFA7738", VA = "0xFA7738")]
			public void FixTransform()
			{
			}

			[Token(Token = "0x60007B0")]
			[Address(RVA = "0xFA75BC", Offset = "0xFA75BC", VA = "0xFA75BC")]
			public void Update(float localRotationWeight, float localPositionWeight)
			{
			}
		}

		[Token(Token = "0x400057D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Map[] maps;

		[Token(Token = "0x60007A6")]
		[Address(RVA = "0xFA7128", Offset = "0xFA7128", VA = "0xFA7128", Slot = "7")]
		[ContextMenu("Auto-Mapping")]
		public override void AutoMapping()
		{
		}

		[Token(Token = "0x60007A7")]
		[Address(RVA = "0xFA74C8", Offset = "0xFA74C8", VA = "0xFA74C8", Slot = "8")]
		protected override void InitiatePoser()
		{
		}

		[Token(Token = "0x60007A8")]
		[Address(RVA = "0xFA74CC", Offset = "0xFA74CC", VA = "0xFA74CC", Slot = "9")]
		protected override void UpdatePoser()
		{
		}

		[Token(Token = "0x60007A9")]
		[Address(RVA = "0xFA76DC", Offset = "0xFA76DC", VA = "0xFA76DC", Slot = "10")]
		protected override void FixPoserTransforms()
		{
		}

		[Token(Token = "0x60007AA")]
		[Address(RVA = "0xFA746C", Offset = "0xFA746C", VA = "0xFA746C")]
		private void StoreDefaultState()
		{
		}

		[Token(Token = "0x60007AB")]
		[Address(RVA = "0xFA738C", Offset = "0xFA738C", VA = "0xFA738C")]
		private Transform GetTargetNamed(string tName, Transform[] array)
		{
			return null;
		}

		[Token(Token = "0x60007AC")]
		[Address(RVA = "0xFA77BC", Offset = "0xFA77BC", VA = "0xFA77BC")]
		public GenericPoser()
		{
		}
	}
	[Token(Token = "0x20000CF")]
	public class HandPoser : Poser
	{
		[Token(Token = "0x4000582")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected Transform[] children;

		[Token(Token = "0x4000583")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform _poseRoot;

		[Token(Token = "0x4000584")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform[] poseChildren;

		[Token(Token = "0x4000585")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3[] defaultLocalPositions;

		[Token(Token = "0x4000586")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Quaternion[] defaultLocalRotations;

		[Token(Token = "0x60007B1")]
		[Address(RVA = "0xFA77DC", Offset = "0xFA77DC", VA = "0xFA77DC", Slot = "7")]
		public override void AutoMapping()
		{
		}

		[Token(Token = "0x60007B2")]
		[Address(RVA = "0xFA78AC", Offset = "0xFA78AC", VA = "0xFA78AC", Slot = "8")]
		protected override void InitiatePoser()
		{
		}

		[Token(Token = "0x60007B3")]
		[Address(RVA = "0xFA7A84", Offset = "0xFA7A84", VA = "0xFA7A84", Slot = "10")]
		protected override void FixPoserTransforms()
		{
		}

		[Token(Token = "0x60007B4")]
		[Address(RVA = "0xFA7B6C", Offset = "0xFA7B6C", VA = "0xFA7B6C", Slot = "9")]
		protected override void UpdatePoser()
		{
		}

		[Token(Token = "0x60007B5")]
		[Address(RVA = "0xFA790C", Offset = "0xFA790C", VA = "0xFA790C")]
		protected void StoreDefaultState()
		{
		}

		[Token(Token = "0x60007B6")]
		[Address(RVA = "0xFA7E9C", Offset = "0xFA7E9C", VA = "0xFA7E9C")]
		public HandPoser()
		{
		}
	}
	[Token(Token = "0x20000D0")]
	public abstract class Poser : SolverManager
	{
		[Token(Token = "0x4000587")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform poseRoot;

		[Token(Token = "0x4000588")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Range(0f, 1f)]
		public float weight;

		[Token(Token = "0x4000589")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Range(0f, 1f)]
		public float localRotationWeight;

		[Token(Token = "0x400058A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Range(0f, 1f)]
		public float localPositionWeight;

		[Token(Token = "0x400058B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private bool initiated;

		[Token(Token = "0x60007B7")]
		public abstract void AutoMapping();

		[Token(Token = "0x60007B8")]
		[Address(RVA = "0xFA7EAC", Offset = "0xFA7EAC", VA = "0xFA7EAC")]
		public void UpdateManual()
		{
		}

		[Token(Token = "0x60007B9")]
		protected abstract void InitiatePoser();

		[Token(Token = "0x60007BA")]
		protected abstract void UpdatePoser();

		[Token(Token = "0x60007BB")]
		protected abstract void FixPoserTransforms();

		[Token(Token = "0x60007BC")]
		[Address(RVA = "0xFA7EB8", Offset = "0xFA7EB8", VA = "0xFA7EB8", Slot = "5")]
		protected override void UpdateSolver()
		{
		}

		[Token(Token = "0x60007BD")]
		[Address(RVA = "0xFA7EFC", Offset = "0xFA7EFC", VA = "0xFA7EFC", Slot = "4")]
		protected override void InitiateSolver()
		{
		}

		[Token(Token = "0x60007BE")]
		[Address(RVA = "0xFA7F28", Offset = "0xFA7F28", VA = "0xFA7F28", Slot = "6")]
		protected override void FixTransforms()
		{
		}

		[Token(Token = "0x60007BF")]
		[Address(RVA = "0xFA77CC", Offset = "0xFA77CC", VA = "0xFA77CC")]
		protected Poser()
		{
		}
	}
	[Token(Token = "0x20000D1")]
	[RequireComponent(typeof(Animator))]
	public class RagdollUtility : MonoBehaviour
	{
		[Token(Token = "0x20000D2")]
		public class Rigidbone
		{
			[Token(Token = "0x400059C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Rigidbody r;

			[Token(Token = "0x400059D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Transform t;

			[Token(Token = "0x400059E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Collider collider;

			[Token(Token = "0x400059F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Joint joint;

			[Token(Token = "0x40005A0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Rigidbody c;

			[Token(Token = "0x40005A1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public bool updateAnchor;

			[Token(Token = "0x40005A2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public Vector3 deltaPosition;

			[Token(Token = "0x40005A3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Quaternion deltaRotation;

			[Token(Token = "0x40005A4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public float deltaTime;

			[Token(Token = "0x40005A5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public Vector3 lastPosition;

			[Token(Token = "0x40005A6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public Quaternion lastRotation;

			[Token(Token = "0x60007D4")]
			[Address(RVA = "0xFA85A8", Offset = "0xFA85A8", VA = "0xFA85A8")]
			public Rigidbone(Rigidbody r)
			{
			}

			[Token(Token = "0x60007D5")]
			[Address(RVA = "0xFA9154", Offset = "0xFA9154", VA = "0xFA9154")]
			public void RecordVelocity()
			{
			}

			[Token(Token = "0x60007D6")]
			[Address(RVA = "0xFA8F14", Offset = "0xFA8F14", VA = "0xFA8F14")]
			public void WakeUp(float velocityWeight, float angularVelocityWeight)
			{
			}
		}

		[Token(Token = "0x20000D3")]
		public class Child
		{
			[Token(Token = "0x40005A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform t;

			[Token(Token = "0x40005A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Vector3 localPosition;

			[Token(Token = "0x40005A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public Quaternion localRotation;

			[Token(Token = "0x60007D7")]
			[Address(RVA = "0xFA8750", Offset = "0xFA8750", VA = "0xFA8750")]
			public Child(Transform transform)
			{
			}

			[Token(Token = "0x60007D8")]
			[Address(RVA = "0xFA92B0", Offset = "0xFA92B0", VA = "0xFA92B0")]
			public void FixTransform(float weight)
			{
			}

			[Token(Token = "0x60007D9")]
			[Address(RVA = "0xFA926C", Offset = "0xFA926C", VA = "0xFA926C")]
			public void StoreLocalState()
			{
			}

			[Token(Token = "0x60007DA")]
			[Address(RVA = "0xFA962C", Offset = "0xFA962C", VA = "0xFA962C")]
			public void TranslatePosition(Vector3 offset)
			{
			}
		}

		[Token(Token = "0x20000D4")]
		[CompilerGenerated]
		private sealed class <DisableRagdollSmooth>d__23 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40005AA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40005AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40005AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public RagdollUtility <>4__this;

			[Token(Token = "0x170000C9")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60007DE")]
				[Address(RVA = "0xFA983C", Offset = "0xFA983C", VA = "0xFA983C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000CA")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60007E0")]
				[Address(RVA = "0xFA9884", Offset = "0xFA9884", VA = "0xFA9884", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60007DB")]
			[Address(RVA = "0xFA87BC", Offset = "0xFA87BC", VA = "0xFA87BC")]
			[DebuggerHidden]
			public <DisableRagdollSmooth>d__23(int <>1__state)
			{
			}

			[Token(Token = "0x60007DC")]
			[Address(RVA = "0xFA964C", Offset = "0xFA964C", VA = "0xFA964C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60007DD")]
			[Address(RVA = "0xFA9650", Offset = "0xFA9650", VA = "0xFA9650", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60007DF")]
			[Address(RVA = "0xFA9844", Offset = "0xFA9844", VA = "0xFA9844", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400058C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("If you have multiple IK components, then this should be the one that solves last each frame.")]
		public IK ik;

		[Token(Token = "0x400058D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("How long does it take to blend from ragdoll to animation?")]
		public float ragdollToAnimationTime;

		[Token(Token = "0x400058E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("If true, IK can be used on top of physical ragdoll simulation.")]
		public bool applyIkOnRagdoll;

		[Token(Token = "0x400058F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("How much velocity transfer from animation to ragdoll?")]
		public float applyVelocity;

		[Token(Token = "0x4000590")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("How much angular velocity to transfer from animation to ragdoll?")]
		public float applyAngularVelocity;

		[Token(Token = "0x4000591")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Animator animator;

		[Token(Token = "0x4000592")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Rigidbone[] rigidbones;

		[Token(Token = "0x4000593")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Child[] children;

		[Token(Token = "0x4000594")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool enableRagdollFlag;

		[Token(Token = "0x4000595")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private AnimatorUpdateMode animatorUpdateMode;

		[Token(Token = "0x4000596")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private IK[] allIKComponents;

		[Token(Token = "0x4000597")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool[] fixTransforms;

		[Token(Token = "0x4000598")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float ragdollWeight;

		[Token(Token = "0x4000599")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float ragdollWeightV;

		[Token(Token = "0x400059A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool fixedFrame;

		[Token(Token = "0x400059B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool[] disabledIKComponents;

		[Token(Token = "0x170000C7")]
		private bool isRagdoll
		{
			[Token(Token = "0x60007CD")]
			[Address(RVA = "0xFA7F6C", Offset = "0xFA7F6C", VA = "0xFA7F6C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000C8")]
		private bool ikUsed
		{
			[Token(Token = "0x60007CF")]
			[Address(RVA = "0xFA8B48", Offset = "0xFA8B48", VA = "0xFA8B48")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60007C0")]
		[Address(RVA = "0xFA7F40", Offset = "0xFA7F40", VA = "0xFA7F40")]
		[ContextMenu("ENABLE RAGDOLL")]
		public void EnableRagdoll()
		{
		}

		[Token(Token = "0x60007C1")]
		[Address(RVA = "0xFA7FD0", Offset = "0xFA7FD0", VA = "0xFA7FD0")]
		public void DisableRagdoll()
		{
		}

		[Token(Token = "0x60007C2")]
		[Address(RVA = "0xFA80E8", Offset = "0xFA80E8", VA = "0xFA80E8")]
		public Rigidbone[] GetRigidbones()
		{
			return null;
		}

		[Token(Token = "0x60007C3")]
		[Address(RVA = "0xFA80F0", Offset = "0xFA80F0", VA = "0xFA80F0")]
		public Child[] GetChildren()
		{
			return null;
		}

		[Token(Token = "0x60007C4")]
		[Address(RVA = "0xFA80F8", Offset = "0xFA80F8", VA = "0xFA80F8")]
		public void Start()
		{
		}

		[Token(Token = "0x60007C5")]
		[Address(RVA = "0xFA8074", Offset = "0xFA8074", VA = "0xFA8074")]
		[IteratorStateMachine(typeof(<DisableRagdollSmooth>d__23))]
		private IEnumerator DisableRagdollSmooth()
		{
			return null;
		}

		[Token(Token = "0x60007C6")]
		[Address(RVA = "0xFA87E4", Offset = "0xFA87E4", VA = "0xFA87E4")]
		private void Update()
		{
		}

		[Token(Token = "0x60007C7")]
		[Address(RVA = "0xFA8A0C", Offset = "0xFA8A0C", VA = "0xFA8A0C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60007C8")]
		[Address(RVA = "0xFA8AAC", Offset = "0xFA8AAC", VA = "0xFA8AAC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60007C9")]
		[Address(RVA = "0xFA8C9C", Offset = "0xFA8C9C", VA = "0xFA8C9C")]
		private void AfterLastIK()
		{
		}

		[Token(Token = "0x60007CA")]
		[Address(RVA = "0xFA8B1C", Offset = "0xFA8B1C", VA = "0xFA8B1C")]
		private void AfterAnimation()
		{
		}

		[Token(Token = "0x60007CB")]
		[Address(RVA = "0xFA8C68", Offset = "0xFA8C68", VA = "0xFA8C68")]
		private void OnFinalPose()
		{
		}

		[Token(Token = "0x60007CC")]
		[Address(RVA = "0xFA8D1C", Offset = "0xFA8D1C", VA = "0xFA8D1C")]
		private void RagdollEnabler()
		{
		}

		[Token(Token = "0x60007CE")]
		[Address(RVA = "0xFA8CC0", Offset = "0xFA8CC0", VA = "0xFA8CC0")]
		private void RecordVelocities()
		{
		}

		[Token(Token = "0x60007D0")]
		[Address(RVA = "0xFA8018", Offset = "0xFA8018", VA = "0xFA8018")]
		private void StoreLocalState()
		{
		}

		[Token(Token = "0x60007D1")]
		[Address(RVA = "0xFA8A40", Offset = "0xFA8A40", VA = "0xFA8A40")]
		private void FixTransforms(float weight)
		{
		}

		[Token(Token = "0x60007D2")]
		[Address(RVA = "0xFA93C0", Offset = "0xFA93C0", VA = "0xFA93C0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60007D3")]
		[Address(RVA = "0xFA94F8", Offset = "0xFA94F8", VA = "0xFA94F8")]
		public RagdollUtility()
		{
		}
	}
	[Token(Token = "0x20000D5")]
	public abstract class RotationLimit : MonoBehaviour
	{
		[Token(Token = "0x40005AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 axis;

		[Token(Token = "0x40005AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[HideInInspector]
		public Quaternion defaultLocalRotation;

		[Token(Token = "0x40005B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		private bool initiated;

		[Token(Token = "0x40005B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x36")]
		private bool applicationQuit;

		[Token(Token = "0x40005B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x37")]
		private bool defaultLocalRotationSet;

		[Token(Token = "0x170000CB")]
		public Vector3 secondaryAxis
		{
			[Token(Token = "0x60007E6")]
			[Address(RVA = "0xFA9CF0", Offset = "0xFA9CF0", VA = "0xFA9CF0")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170000CC")]
		public Vector3 crossAxis
		{
			[Token(Token = "0x60007E7")]
			[Address(RVA = "0xFA9CFC", Offset = "0xFA9CFC", VA = "0xFA9CFC")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170000CD")]
		public bool defaultLocalRotationOverride
		{
			[Token(Token = "0x60007E8")]
			[Address(RVA = "0xFA9D2C", Offset = "0xFA9D2C", VA = "0xFA9D2C")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60007E9")]
			[Address(RVA = "0xFA9D34", Offset = "0xFA9D34", VA = "0xFA9D34")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60007E1")]
		[Address(RVA = "0xFA988C", Offset = "0xFA988C", VA = "0xFA988C")]
		public void SetDefaultLocalRotation()
		{
		}

		[Token(Token = "0x60007E2")]
		[Address(RVA = "0xFA98C8", Offset = "0xFA98C8", VA = "0xFA98C8")]
		public void SetDefaultLocalRotation(Quaternion localRotation)
		{
		}

		[Token(Token = "0x60007E3")]
		[Address(RVA = "0xFA98E0", Offset = "0xFA98E0", VA = "0xFA98E0")]
		public Quaternion GetLimitedLocalRotation(Quaternion localRotation, out bool changed)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60007E4")]
		[Address(RVA = "0xFA9C60", Offset = "0xFA9C60", VA = "0xFA9C60")]
		public bool Apply()
		{
			return default(bool);
		}

		[Token(Token = "0x60007E5")]
		[Address(RVA = "0xFA9CC4", Offset = "0xFA9CC4", VA = "0xFA9CC4")]
		public void Disable()
		{
		}

		[Token(Token = "0x60007EA")]
		protected abstract Quaternion LimitRotation(Quaternion rotation);

		[Token(Token = "0x60007EB")]
		[Address(RVA = "0xFA9B64", Offset = "0xFA9B64", VA = "0xFA9B64")]
		private void Awake()
		{
		}

		[Token(Token = "0x60007EC")]
		[Address(RVA = "0xFA9D40", Offset = "0xFA9D40", VA = "0xFA9D40")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60007ED")]
		[Address(RVA = "0xFA9D44", Offset = "0xFA9D44", VA = "0xFA9D44")]
		public void LogWarning(string message)
		{
		}

		[Token(Token = "0x60007EE")]
		[Address(RVA = "0xFA9D6C", Offset = "0xFA9D6C", VA = "0xFA9D6C")]
		protected static Quaternion Limit1DOF(Quaternion rotation, Vector3 axis)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60007EF")]
		[Address(RVA = "0xFA9E40", Offset = "0xFA9E40", VA = "0xFA9E40")]
		protected static Quaternion LimitTwist(Quaternion rotation, Vector3 axis, Vector3 orthoAxis, float twistLimit)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60007F0")]
		[Address(RVA = "0xFAA098", Offset = "0xFAA098", VA = "0xFAA098")]
		protected static float GetOrthogonalAngle(Vector3 v1, Vector3 v2, Vector3 normal)
		{
			return default(float);
		}

		[Token(Token = "0x60007F1")]
		[Address(RVA = "0xFAA1EC", Offset = "0xFAA1EC", VA = "0xFAA1EC")]
		protected RotationLimit()
		{
		}
	}
	[Token(Token = "0x20000D6")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Rotation Limits/Rotation Limit Angle")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page14.html")]
	public class RotationLimitAngle : RotationLimit
	{
		[Token(Token = "0x40005B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Range(0f, 180f)]
		public float limit;

		[Token(Token = "0x40005B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Range(0f, 180f)]
		public float twistLimit;

		[Token(Token = "0x60007F2")]
		[Address(RVA = "0xFAA24C", Offset = "0xFAA24C", VA = "0xFAA24C")]
		[ContextMenu("User Manual")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x60007F3")]
		[Address(RVA = "0xFAA290", Offset = "0xFAA290", VA = "0xFAA290")]
		[ContextMenu("Scrpt Reference")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x60007F4")]
		[Address(RVA = "0xFAA2D4", Offset = "0xFAA2D4", VA = "0xFAA2D4")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60007F5")]
		[Address(RVA = "0xFAA318", Offset = "0xFAA318", VA = "0xFAA318")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60007F6")]
		[Address(RVA = "0xFAA35C", Offset = "0xFAA35C", VA = "0xFAA35C", Slot = "4")]
		protected override Quaternion LimitRotation(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60007F7")]
		[Address(RVA = "0xFAA394", Offset = "0xFAA394", VA = "0xFAA394")]
		private Quaternion LimitSwing(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60007F8")]
		[Address(RVA = "0xFAA6B8", Offset = "0xFAA6B8", VA = "0xFAA6B8")]
		public RotationLimitAngle()
		{
		}
	}
	[Token(Token = "0x20000D7")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Rotation Limits/Rotation Limit Hinge")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page14.html")]
	public class RotationLimitHinge : RotationLimit
	{
		[Token(Token = "0x40005B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool useLimits;

		[Token(Token = "0x40005B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float min;

		[Token(Token = "0x40005B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float max;

		[Token(Token = "0x40005B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[HideInInspector]
		public float zeroAxisDisplayOffset;

		[Token(Token = "0x40005B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Quaternion lastRotation;

		[Token(Token = "0x40005BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float lastAngle;

		[Token(Token = "0x60007F9")]
		[Address(RVA = "0xFAA6C8", Offset = "0xFAA6C8", VA = "0xFAA6C8")]
		[ContextMenu("User Manual")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x60007FA")]
		[Address(RVA = "0xFAA70C", Offset = "0xFAA70C", VA = "0xFAA70C")]
		[ContextMenu("Scrpt Reference")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x60007FB")]
		[Address(RVA = "0xFAA750", Offset = "0xFAA750", VA = "0xFAA750")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60007FC")]
		[Address(RVA = "0xFAA794", Offset = "0xFAA794", VA = "0xFAA794")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60007FD")]
		[Address(RVA = "0xFAA7D8", Offset = "0xFAA7D8", VA = "0xFAA7D8", Slot = "4")]
		protected override Quaternion LimitRotation(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60007FE")]
		[Address(RVA = "0xFAA7F4", Offset = "0xFAA7F4", VA = "0xFAA7F4")]
		private Quaternion LimitHinge(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60007FF")]
		[Address(RVA = "0xFAAA3C", Offset = "0xFAAA3C", VA = "0xFAAA3C")]
		public RotationLimitHinge()
		{
		}
	}
	[Token(Token = "0x20000D8")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page14.html")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Rotation Limits/Rotation Limit Polygonal")]
	public class RotationLimitPolygonal : RotationLimit
	{
		[Serializable]
		[Token(Token = "0x20000D9")]
		public class ReachCone
		{
			[Token(Token = "0x40005C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3[] tetrahedron;

			[Token(Token = "0x40005C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float volume;

			[Token(Token = "0x40005C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Vector3 S;

			[Token(Token = "0x40005C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 B;

			[Token(Token = "0x170000CE")]
			public Vector3 o
			{
				[Token(Token = "0x6000810")]
				[Address(RVA = "0xFAC934", Offset = "0xFAC934", VA = "0xFAC934")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x170000CF")]
			public Vector3 a
			{
				[Token(Token = "0x6000811")]
				[Address(RVA = "0xFAC960", Offset = "0xFAC960", VA = "0xFAC960")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x170000D0")]
			public Vector3 b
			{
				[Token(Token = "0x6000812")]
				[Address(RVA = "0xFAC990", Offset = "0xFAC990", VA = "0xFAC990")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x170000D1")]
			public Vector3 c
			{
				[Token(Token = "0x6000813")]
				[Address(RVA = "0xFAC9C0", Offset = "0xFAC9C0", VA = "0xFAC9C0")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x170000D2")]
			public bool isValid
			{
				[Token(Token = "0x6000815")]
				[Address(RVA = "0xFABE5C", Offset = "0xFABE5C", VA = "0xFABE5C")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6000814")]
			[Address(RVA = "0xFAC300", Offset = "0xFAC300", VA = "0xFAC300")]
			public ReachCone(Vector3 _o, Vector3 _a, Vector3 _b, Vector3 _c)
			{
			}

			[Token(Token = "0x6000816")]
			[Address(RVA = "0xFAC478", Offset = "0xFAC478", VA = "0xFAC478")]
			public void Calculate()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000DA")]
		public class LimitPoint
		{
			[Token(Token = "0x40005C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3 point;

			[Token(Token = "0x40005C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public float tangentWeight;

			[Token(Token = "0x6000817")]
			[Address(RVA = "0xFABE6C", Offset = "0xFABE6C", VA = "0xFABE6C")]
			public LimitPoint()
			{
			}
		}

		[Token(Token = "0x40005BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Range(0f, 180f)]
		public float twistLimit;

		[Token(Token = "0x40005BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Range(0f, 3f)]
		public int smoothIterations;

		[Token(Token = "0x40005BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[HideInInspector]
		public LimitPoint[] points;

		[Token(Token = "0x40005BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		[HideInInspector]
		public Vector3[] P;

		[Token(Token = "0x40005BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		[HideInInspector]
		public ReachCone[] reachCones;

		[Token(Token = "0x6000800")]
		[Address(RVA = "0xFAAAA0", Offset = "0xFAAAA0", VA = "0xFAAAA0")]
		[ContextMenu("User Manual")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6000801")]
		[Address(RVA = "0xFAAAE4", Offset = "0xFAAAE4", VA = "0xFAAAE4")]
		[ContextMenu("Scrpt Reference")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000802")]
		[Address(RVA = "0xFAAB28", Offset = "0xFAAB28", VA = "0xFAAB28")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000803")]
		[Address(RVA = "0xFAAB6C", Offset = "0xFAAB6C", VA = "0xFAAB6C")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000804")]
		[Address(RVA = "0xFAABB0", Offset = "0xFAABB0", VA = "0xFAABB0")]
		public void SetLimitPoints(LimitPoint[] points)
		{
		}

		[Token(Token = "0x6000805")]
		[Address(RVA = "0xFAB294", Offset = "0xFAB294", VA = "0xFAB294", Slot = "4")]
		protected override Quaternion LimitRotation(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000806")]
		[Address(RVA = "0xFAB31C", Offset = "0xFAB31C", VA = "0xFAB31C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000807")]
		[Address(RVA = "0xFAB968", Offset = "0xFAB968", VA = "0xFAB968")]
		public void ResetToDefault()
		{
		}

		[Token(Token = "0x6000808")]
		[Address(RVA = "0xFAAC48", Offset = "0xFAAC48", VA = "0xFAAC48")]
		public void BuildReachCones()
		{
		}

		[Token(Token = "0x6000809")]
		[Address(RVA = "0xFABED0", Offset = "0xFABED0", VA = "0xFABED0")]
		private Vector3[] SmoothPoints()
		{
			return null;
		}

		[Token(Token = "0x600080A")]
		[Address(RVA = "0xFAC6EC", Offset = "0xFAC6EC", VA = "0xFAC6EC")]
		private float GetScalar(int k)
		{
			return default(float);
		}

		[Token(Token = "0x600080B")]
		[Address(RVA = "0xFAC734", Offset = "0xFAC734", VA = "0xFAC734")]
		private Vector3 PointToTangentPlane(Vector3 p, float r)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600080C")]
		[Address(RVA = "0xFAC794", Offset = "0xFAC794", VA = "0xFAC794")]
		private Vector3 TangentPointToSphere(Vector3 q, float r)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600080D")]
		[Address(RVA = "0xFAB6C4", Offset = "0xFAB6C4", VA = "0xFAB6C4")]
		private Quaternion LimitSwing(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600080E")]
		[Address(RVA = "0xFAC800", Offset = "0xFAC800", VA = "0xFAC800")]
		private int GetReachCone(Vector3 L)
		{
			return default(int);
		}

		[Token(Token = "0x600080F")]
		[Address(RVA = "0xFAC8CC", Offset = "0xFAC8CC", VA = "0xFAC8CC")]
		public RotationLimitPolygonal()
		{
		}
	}
	[Token(Token = "0x20000DB")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page14.html")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Rotation Limits/Rotation Limit Spline")]
	public class RotationLimitSpline : RotationLimit
	{
		[Token(Token = "0x40005C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Range(0f, 180f)]
		public float twistLimit;

		[Token(Token = "0x40005C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		[SerializeField]
		public AnimationCurve spline;

		[Token(Token = "0x6000818")]
		[Address(RVA = "0xFAC9F0", Offset = "0xFAC9F0", VA = "0xFAC9F0")]
		[ContextMenu("User Manual")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6000819")]
		[Address(RVA = "0xFACA34", Offset = "0xFACA34", VA = "0xFACA34")]
		[ContextMenu("Scrpt Reference")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x600081A")]
		[Address(RVA = "0xFACA78", Offset = "0xFACA78", VA = "0xFACA78")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x600081B")]
		[Address(RVA = "0xFACABC", Offset = "0xFACABC", VA = "0xFACABC")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x600081C")]
		[Address(RVA = "0xFACB00", Offset = "0xFACB00", VA = "0xFACB00")]
		public void SetSpline(Keyframe[] keyframes)
		{
		}

		[Token(Token = "0x600081D")]
		[Address(RVA = "0xFACB1C", Offset = "0xFACB1C", VA = "0xFACB1C", Slot = "4")]
		protected override Quaternion LimitRotation(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600081E")]
		[Address(RVA = "0xFACB54", Offset = "0xFACB54", VA = "0xFACB54")]
		public Quaternion LimitSwing(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600081F")]
		[Address(RVA = "0xFACF00", Offset = "0xFACF00", VA = "0xFACF00")]
		public RotationLimitSpline()
		{
		}
	}
	[Token(Token = "0x20000DC")]
	public class AimController : MonoBehaviour
	{
		[Token(Token = "0x20000DD")]
		[CompilerGenerated]
		private sealed class <TurnToTarget>d__33 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40005E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40005E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40005E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public AimController <>4__this;

			[Token(Token = "0x170000D4")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600082A")]
				[Address(RVA = "0xFADC00", Offset = "0xFADC00", VA = "0xFADC00", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000D5")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600082C")]
				[Address(RVA = "0xFADC48", Offset = "0xFADC48", VA = "0xFADC48", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000827")]
			[Address(RVA = "0xFADA00", Offset = "0xFADA00", VA = "0xFADA00")]
			[DebuggerHidden]
			public <TurnToTarget>d__33(int <>1__state)
			{
			}

			[Token(Token = "0x6000828")]
			[Address(RVA = "0xFADB0C", Offset = "0xFADB0C", VA = "0xFADB0C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000829")]
			[Address(RVA = "0xFADB10", Offset = "0xFADB10", VA = "0xFADB10", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600082B")]
			[Address(RVA = "0xFADC08", Offset = "0xFADC08", VA = "0xFADC08", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40005C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Reference to the AimIK component.")]
		public AimIK ik;

		[Token(Token = "0x40005C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 1f)]
		[Tooltip("Master weight of the IK solver.")]
		public float weight;

		[Token(Token = "0x40005CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Target Smoothing")]
		[Tooltip("The target to aim at. Do not use the Target transform that is assigned to AimIK. Set to null if you wish to stop aiming.")]
		public Transform target;

		[Token(Token = "0x40005CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The time it takes to switch targets.")]
		public float targetSwitchSmoothTime;

		[Token(Token = "0x40005CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("The time it takes to blend in/out of AimIK weight.")]
		public float weightSmoothTime;

		[Token(Token = "0x40005CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Turning Towards The Target")]
		[Tooltip("Enables smooth turning towards the target according to the parameters under this header.")]
		public bool smoothTurnTowardsTarget;

		[Token(Token = "0x40005CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("Speed of turning towards the target using Vector3.RotateTowards.")]
		public float maxRadiansDelta;

		[Token(Token = "0x40005CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Speed of moving towards the target using Vector3.RotateTowards.")]
		public float maxMagnitudeDelta;

		[Token(Token = "0x40005D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("Speed of slerping towards the target.")]
		public float slerpSpeed;

		[Token(Token = "0x40005D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("The position of the pivot that the aim target is rotated around relative to the root of the character.")]
		public Vector3 pivotOffsetFromRoot;

		[Token(Token = "0x40005D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Tooltip("Minimum distance of aiming from the first bone. Keeps the solver from failing if the target is too close.")]
		public float minDistance;

		[Token(Token = "0x40005D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Offset applied to the target in world space. Convenient for scripting aiming inaccuracy.")]
		public Vector3 offset;

		[Token(Token = "0x40005D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Range(0f, 180f)]
		[Tooltip("Character root will be rotate around the Y axis to keep root forward within this angle from the aiming direction.")]
		[Header("RootRotation")]
		public float maxRootAngle;

		[Token(Token = "0x40005D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("If enabled, aligns the root forward to target direction after 'Max Root Angle' has been exceeded.")]
		public bool turnToTarget;

		[Token(Token = "0x40005D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Tooltip("The time of turning towards the target direction if 'Max Root Angle has been exceeded and 'Turn To Target' is enabled.")]
		public float turnToTargetTime;

		[Token(Token = "0x40005D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Header("Mode")]
		[Tooltip("If true, AimIK will consider whatever the current direction of the weapon to be the forward aiming direction and work additively on top of that. This enables you to use recoil and reloading animations seamlessly with AimIK. Adjust the Vector3 value below if the weapon is not aiming perfectly forward in the aiming animation clip.")]
		public bool useAnimatedAimDirection;

		[Token(Token = "0x40005D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[Tooltip("The direction of the animated weapon aiming in character space. Tweak this value to adjust the aiming. 'Use Animated Aim Direction' must be enabled for this property to work.")]
		public Vector3 animatedAimDirection;

		[Token(Token = "0x40005D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Transform lastTarget;

		[Token(Token = "0x40005DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float switchWeight;

		[Token(Token = "0x40005DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float switchWeightV;

		[Token(Token = "0x40005DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float weightV;

		[Token(Token = "0x40005DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private Vector3 lastPosition;

		[Token(Token = "0x40005DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Vector3 dir;

		[Token(Token = "0x40005DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private bool lastSmoothTowardsTarget;

		[Token(Token = "0x40005E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAD")]
		private bool turningToTarget;

		[Token(Token = "0x40005E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private float turnToTargetMlp;

		[Token(Token = "0x40005E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private float turnToTargetMlpV;

		[Token(Token = "0x170000D3")]
		private Vector3 pivot
		{
			[Token(Token = "0x6000822")]
			[Address(RVA = "0xFACF8C", Offset = "0xFACF8C", VA = "0xFACF8C")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6000820")]
		[Address(RVA = "0xFACF0C", Offset = "0xFACF0C", VA = "0xFACF0C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000821")]
		[Address(RVA = "0xFAD010", Offset = "0xFAD010", VA = "0xFAD010")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000823")]
		[Address(RVA = "0xFAD564", Offset = "0xFAD564", VA = "0xFAD564")]
		private void ApplyMinDistance()
		{
		}

		[Token(Token = "0x6000824")]
		[Address(RVA = "0xFAD6E8", Offset = "0xFAD6E8", VA = "0xFAD6E8")]
		private void RootRotation()
		{
		}

		[Token(Token = "0x6000825")]
		[Address(RVA = "0xFAD98C", Offset = "0xFAD98C", VA = "0xFAD98C")]
		[IteratorStateMachine(typeof(<TurnToTarget>d__33))]
		private IEnumerator TurnToTarget()
		{
			return null;
		}

		[Token(Token = "0x6000826")]
		[Address(RVA = "0xFADA28", Offset = "0xFADA28", VA = "0xFADA28")]
		public AimController()
		{
		}
	}
	[Token(Token = "0x20000DE")]
	public class AimPoser : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20000DF")]
		public class Pose
		{
			[Token(Token = "0x40005E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool visualize;

			[Token(Token = "0x40005E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string name;

			[Token(Token = "0x40005EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector3 direction;

			[Token(Token = "0x40005EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float yaw;

			[Token(Token = "0x40005EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float pitch;

			[Token(Token = "0x40005ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float angleBuffer;

			[Token(Token = "0x6000830")]
			[Address(RVA = "0xFADD20", Offset = "0xFADD20", VA = "0xFADD20")]
			public bool IsInDirection(Vector3 d)
			{
				return default(bool);
			}

			[Token(Token = "0x6000831")]
			[Address(RVA = "0xFAE29C", Offset = "0xFAE29C", VA = "0xFAE29C")]
			public void SetAngleBuffer(float value)
			{
			}

			[Token(Token = "0x6000832")]
			[Address(RVA = "0xFAE2A4", Offset = "0xFAE2A4", VA = "0xFAE2A4")]
			public Pose()
			{
			}
		}

		[Token(Token = "0x40005E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float angleBuffer;

		[Token(Token = "0x40005E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Pose[] poses;

		[Token(Token = "0x600082D")]
		[Address(RVA = "0xFADC50", Offset = "0xFADC50", VA = "0xFADC50")]
		public Pose GetPose(Vector3 localDirection)
		{
			return null;
		}

		[Token(Token = "0x600082E")]
		[Address(RVA = "0xFAE1D0", Offset = "0xFAE1D0", VA = "0xFAE1D0")]
		public void SetPoseActive(Pose pose)
		{
		}

		[Token(Token = "0x600082F")]
		[Address(RVA = "0xFAE230", Offset = "0xFAE230", VA = "0xFAE230")]
		public AimPoser()
		{
		}
	}
	[Token(Token = "0x20000E0")]
	public class Amplifier : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x20000E1")]
		public class Body
		{
			[Serializable]
			[Token(Token = "0x20000E2")]
			public class EffectorLink
			{
				[Token(Token = "0x40005F8")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[Tooltip("Type of the FBBIK effector to use")]
				public FullBodyBipedEffector effector;

				[Token(Token = "0x40005F9")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[Tooltip("Weight of using this effector")]
				public float weight;

				[Token(Token = "0x6000838")]
				[Address(RVA = "0xFAE790", Offset = "0xFAE790", VA = "0xFAE790")]
				public EffectorLink()
				{
				}
			}

			[Token(Token = "0x40005EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The Transform that's motion we are reading.")]
			public Transform transform;

			[Token(Token = "0x40005F0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("Amplify the 'transform's' position relative to this Transform.")]
			public Transform relativeTo;

			[Token(Token = "0x40005F1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("Linking the body to effectors. One Body can be used to offset more than one effector.")]
			public EffectorLink[] effectorLinks;

			[Token(Token = "0x40005F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("Amplification magnitude along the up axis of the character.")]
			public float verticalWeight;

			[Token(Token = "0x40005F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[Tooltip("Amplification magnitude along the horizontal axes of the character.")]
			public float horizontalWeight;

			[Token(Token = "0x40005F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[Tooltip("Speed of the amplifier. 0 means instant.")]
			public float speed;

			[Token(Token = "0x40005F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private Vector3 lastRelativePos;

			[Token(Token = "0x40005F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private Vector3 smoothDelta;

			[Token(Token = "0x40005F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			private bool firstUpdate;

			[Token(Token = "0x6000835")]
			[Address(RVA = "0xFAE438", Offset = "0xFAE438", VA = "0xFAE438")]
			public void Update(IKSolverFullBodyBiped solver, float w, float deltaTime)
			{
			}

			[Token(Token = "0x6000836")]
			[Address(RVA = "0xFAE768", Offset = "0xFAE768", VA = "0xFAE768")]
			private static Vector3 Multiply(Vector3 v1, Vector3 v2)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6000837")]
			[Address(RVA = "0xFAE778", Offset = "0xFAE778", VA = "0xFAE778")]
			public Body()
			{
			}
		}

		[Token(Token = "0x40005EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The amplified bodies.")]
		public Body[] bodies;

		[Token(Token = "0x6000833")]
		[Address(RVA = "0xFAE2C0", Offset = "0xFAE2C0", VA = "0xFAE2C0", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6000834")]
		[Address(RVA = "0xFAE748", Offset = "0xFAE748", VA = "0xFAE748")]
		public Amplifier()
		{
		}
	}
	[Token(Token = "0x20000E3")]
	public class BodyTilt : OffsetModifier
	{
		[Token(Token = "0x40005FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("Speed of tilting")]
		public float tiltSpeed;

		[Token(Token = "0x40005FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Sensitivity of tilting")]
		public float tiltSensitivity;

		[Token(Token = "0x40005FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The OffsetPose components")]
		public OffsetPose poseLeft;

		[Token(Token = "0x40005FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The OffsetPose components")]
		public OffsetPose poseRight;

		[Token(Token = "0x40005FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float tiltAngle;

		[Token(Token = "0x40005FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 lastForward;

		[Token(Token = "0x6000839")]
		[Address(RVA = "0xFAE798", Offset = "0xFAE798", VA = "0xFAE798", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x600083A")]
		[Address(RVA = "0xFAE800", Offset = "0xFAE800", VA = "0xFAE800", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x600083B")]
		[Address(RVA = "0xFAEB04", Offset = "0xFAEB04", VA = "0xFAEB04")]
		public BodyTilt()
		{
		}
	}
	[Token(Token = "0x20000E4")]
	[ExecuteInEditMode]
	public class EditorIK : MonoBehaviour
	{
		[Token(Token = "0x4000600")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private IK ik;

		[Token(Token = "0x600083C")]
		[Address(RVA = "0xFAEB20", Offset = "0xFAEB20", VA = "0xFAEB20")]
		private void Start()
		{
		}

		[Token(Token = "0x600083D")]
		[Address(RVA = "0xFAEBBC", Offset = "0xFAEBBC", VA = "0xFAEBBC")]
		private void Update()
		{
		}

		[Token(Token = "0x600083E")]
		[Address(RVA = "0xFAEC7C", Offset = "0xFAEC7C", VA = "0xFAEC7C")]
		public EditorIK()
		{
		}
	}
	[Token(Token = "0x20000E5")]
	public class HitReaction : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x20000E6")]
		public abstract class HitPoint
		{
			[Token(Token = "0x4000604")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("Just for visual clarity, not used at all")]
			public string name;

			[Token(Token = "0x4000605")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("Linking this hit point to a collider")]
			public Collider collider;

			[Token(Token = "0x4000606")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[SerializeField]
			[Tooltip("Only used if this hit point gets hit when already processing another hit")]
			private float crossFadeTime;

			[Token(Token = "0x400060B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			private float length;

			[Token(Token = "0x400060C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private float crossFadeSpeed;

			[Token(Token = "0x400060D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			private float lastTime;

			[Token(Token = "0x170000D7")]
			public bool inProgress
			{
				[Token(Token = "0x6000844")]
				[Address(RVA = "0xFAED20", Offset = "0xFAED20", VA = "0xFAED20")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x170000D8")]
			protected float crossFader
			{
				[Token(Token = "0x6000845")]
				[Address(RVA = "0xFAF280", Offset = "0xFAF280", VA = "0xFAF280")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000846")]
				[Address(RVA = "0xFAF288", Offset = "0xFAF288", VA = "0xFAF288")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000D9")]
			protected float timer
			{
				[Token(Token = "0x6000847")]
				[Address(RVA = "0xFAF290", Offset = "0xFAF290", VA = "0xFAF290")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000848")]
				[Address(RVA = "0xFAF298", Offset = "0xFAF298", VA = "0xFAF298")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000DA")]
			protected Vector3 force
			{
				[Token(Token = "0x6000849")]
				[Address(RVA = "0xFAF2A0", Offset = "0xFAF2A0", VA = "0xFAF2A0")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x600084A")]
				[Address(RVA = "0xFAF2AC", Offset = "0xFAF2AC", VA = "0xFAF2AC")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000DB")]
			protected Vector3 point
			{
				[Token(Token = "0x600084B")]
				[Address(RVA = "0xFAF2B8", Offset = "0xFAF2B8", VA = "0xFAF2B8")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x600084C")]
				[Address(RVA = "0xFAF2C4", Offset = "0xFAF2C4", VA = "0xFAF2C4")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x600084D")]
			[Address(RVA = "0xFAF0F8", Offset = "0xFAF0F8", VA = "0xFAF0F8")]
			public void Hit(Vector3 force, Vector3 point)
			{
			}

			[Token(Token = "0x600084E")]
			[Address(RVA = "0xFAEDF4", Offset = "0xFAEDF4", VA = "0xFAEDF4")]
			public void Apply(IKSolverFullBodyBiped solver, float weight)
			{
			}

			[Token(Token = "0x600084F")]
			protected abstract float GetLength();

			[Token(Token = "0x6000850")]
			protected abstract void CrossFadeStart();

			[Token(Token = "0x6000851")]
			protected abstract void OnApply(IKSolverFullBodyBiped solver, float weight);

			[Token(Token = "0x6000852")]
			[Address(RVA = "0xFAF2D0", Offset = "0xFAF2D0", VA = "0xFAF2D0")]
			protected HitPoint()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000E7")]
		public class HitPointEffector : HitPoint
		{
			[Serializable]
			[Token(Token = "0x20000E8")]
			public class EffectorLink
			{
				[Token(Token = "0x4000611")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[Tooltip("The FBBIK effector type")]
				public FullBodyBipedEffector effector;

				[Token(Token = "0x4000612")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[Tooltip("The weight of this effector (could also be negative)")]
				public float weight;

				[Token(Token = "0x4000613")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				private Vector3 lastValue;

				[Token(Token = "0x4000614")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
				private Vector3 current;

				[Token(Token = "0x6000857")]
				[Address(RVA = "0xFAF604", Offset = "0xFAF604", VA = "0xFAF604")]
				public void Apply(IKSolverFullBodyBiped solver, Vector3 offset, float crossFader)
				{
				}

				[Token(Token = "0x6000858")]
				[Address(RVA = "0xFAF460", Offset = "0xFAF460", VA = "0xFAF460")]
				public void CrossFadeStart()
				{
				}

				[Token(Token = "0x6000859")]
				[Address(RVA = "0xFAF6B4", Offset = "0xFAF6B4", VA = "0xFAF6B4")]
				public EffectorLink()
				{
				}
			}

			[Token(Token = "0x400060E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[Tooltip("Offset magnitude in the direction of the hit force")]
			public AnimationCurve offsetInForceDirection;

			[Token(Token = "0x400060F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[Tooltip("Offset magnitude in the direction of character.up")]
			public AnimationCurve offsetInUpDirection;

			[Token(Token = "0x4000610")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[Tooltip("Linking this offset to the FBBIK effectors")]
			public EffectorLink[] effectorLinks;

			[Token(Token = "0x6000853")]
			[Address(RVA = "0xFAF2E4", Offset = "0xFAF2E4", VA = "0xFAF2E4", Slot = "4")]
			protected override float GetLength()
			{
				return default(float);
			}

			[Token(Token = "0x6000854")]
			[Address(RVA = "0xFAF400", Offset = "0xFAF400", VA = "0xFAF400", Slot = "5")]
			protected override void CrossFadeStart()
			{
			}

			[Token(Token = "0x6000855")]
			[Address(RVA = "0xFAF474", Offset = "0xFAF474", VA = "0xFAF474", Slot = "6")]
			protected override void OnApply(IKSolverFullBodyBiped solver, float weight)
			{
			}

			[Token(Token = "0x6000856")]
			[Address(RVA = "0xFAF6A0", Offset = "0xFAF6A0", VA = "0xFAF6A0")]
			public HitPointEffector()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000E9")]
		public class HitPointBone : HitPoint
		{
			[Serializable]
			[Token(Token = "0x20000EA")]
			public class BoneLink
			{
				[Token(Token = "0x4000618")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[Tooltip("Reference to the bone that this hit point rotates")]
				public Transform bone;

				[Token(Token = "0x4000619")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				[Tooltip("Weight of rotating the bone")]
				[Range(0f, 1f)]
				public float weight;

				[Token(Token = "0x400061A")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
				private Quaternion lastValue;

				[Token(Token = "0x400061B")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
				private Quaternion current;

				[Token(Token = "0x600085E")]
				[Address(RVA = "0xFAF984", Offset = "0xFAF984", VA = "0xFAF984")]
				public void Apply(IKSolverFullBodyBiped solver, Quaternion offset, float crossFader)
				{
				}

				[Token(Token = "0x600085F")]
				[Address(RVA = "0xFAF7A0", Offset = "0xFAF7A0", VA = "0xFAF7A0")]
				public void CrossFadeStart()
				{
				}

				[Token(Token = "0x6000860")]
				[Address(RVA = "0xFAFB24", Offset = "0xFAFB24", VA = "0xFAFB24")]
				public BoneLink()
				{
				}
			}

			[Token(Token = "0x4000615")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[Tooltip("The angle to rotate the bone around it's rigidbody's world center of mass")]
			public AnimationCurve aroundCenterOfMass;

			[Token(Token = "0x4000616")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[Tooltip("Linking this hit point to bone(s)")]
			public BoneLink[] boneLinks;

			[Token(Token = "0x4000617")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private Rigidbody rigidbody;

			[Token(Token = "0x600085A")]
			[Address(RVA = "0xFAF6BC", Offset = "0xFAF6BC", VA = "0xFAF6BC", Slot = "4")]
			protected override float GetLength()
			{
				return default(float);
			}

			[Token(Token = "0x600085B")]
			[Address(RVA = "0xFAF748", Offset = "0xFAF748", VA = "0xFAF748", Slot = "5")]
			protected override void CrossFadeStart()
			{
			}

			[Token(Token = "0x600085C")]
			[Address(RVA = "0xFAF7AC", Offset = "0xFAF7AC", VA = "0xFAF7AC", Slot = "6")]
			protected override void OnApply(IKSolverFullBodyBiped solver, float weight)
			{
			}

			[Token(Token = "0x600085D")]
			[Address(RVA = "0xFAFB10", Offset = "0xFAFB10", VA = "0xFAFB10")]
			public HitPointBone()
			{
			}
		}

		[Token(Token = "0x4000601")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static float customDeltaTime;

		[Token(Token = "0x4000602")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Hit points for the FBBIK effectors")]
		public HitPointEffector[] effectorHitPoints;

		[Token(Token = "0x4000603")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip(" Hit points for bones without an effector, such as the head")]
		public HitPointBone[] boneHitPoints;

		[Token(Token = "0x170000D6")]
		public bool inProgress
		{
			[Token(Token = "0x600083F")]
			[Address(RVA = "0xFAEC84", Offset = "0xFAEC84", VA = "0xFAEC84")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000840")]
		[Address(RVA = "0xFAED34", Offset = "0xFAED34", VA = "0xFAED34", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6000841")]
		[Address(RVA = "0xFAEEDC", Offset = "0xFAEEDC", VA = "0xFAEEDC")]
		public void Hit(Collider collider, Vector3 force, Vector3 point)
		{
		}

		[Token(Token = "0x6000842")]
		[Address(RVA = "0xFAF220", Offset = "0xFAF220", VA = "0xFAF220")]
		public HitReaction()
		{
		}
	}
	[Token(Token = "0x20000EB")]
	public class HitReactionVRIK : OffsetModifierVRIK
	{
		[Serializable]
		[Token(Token = "0x20000EC")]
		public abstract class Offset
		{
			[Token(Token = "0x400061F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("Just for visual clarity, not used at all")]
			public string name;

			[Token(Token = "0x4000620")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("Linking this hit point to a collider")]
			public Collider collider;

			[Token(Token = "0x4000621")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[SerializeField]
			[Tooltip("Only used if this hit point gets hit when already processing another hit")]
			private float crossFadeTime;

			[Token(Token = "0x4000626")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			private float length;

			[Token(Token = "0x4000627")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private float crossFadeSpeed;

			[Token(Token = "0x4000628")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			private float lastTime;

			[Token(Token = "0x170000DC")]
			protected float crossFader
			{
				[Token(Token = "0x6000864")]
				[Address(RVA = "0xFB00C4", Offset = "0xFB00C4", VA = "0xFB00C4")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000865")]
				[Address(RVA = "0xFB00CC", Offset = "0xFB00CC", VA = "0xFB00CC")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000DD")]
			protected float timer
			{
				[Token(Token = "0x6000866")]
				[Address(RVA = "0xFB00D4", Offset = "0xFB00D4", VA = "0xFB00D4")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000867")]
				[Address(RVA = "0xFB00DC", Offset = "0xFB00DC", VA = "0xFB00DC")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000DE")]
			protected Vector3 force
			{
				[Token(Token = "0x6000868")]
				[Address(RVA = "0xFB00E4", Offset = "0xFB00E4", VA = "0xFB00E4")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6000869")]
				[Address(RVA = "0xFB00F0", Offset = "0xFB00F0", VA = "0xFB00F0")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000DF")]
			protected Vector3 point
			{
				[Token(Token = "0x600086A")]
				[Address(RVA = "0xFB00FC", Offset = "0xFB00FC", VA = "0xFB00FC")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x600086B")]
				[Address(RVA = "0xFB0108", Offset = "0xFB0108", VA = "0xFB0108")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x600086C")]
			[Address(RVA = "0xFAFF74", Offset = "0xFAFF74", VA = "0xFAFF74")]
			public void Hit(Vector3 force, AnimationCurve[] curves, Vector3 point)
			{
			}

			[Token(Token = "0x600086D")]
			[Address(RVA = "0xFAFC40", Offset = "0xFAFC40", VA = "0xFAFC40")]
			public void Apply(VRIK ik, AnimationCurve[] curves, float weight)
			{
			}

			[Token(Token = "0x600086E")]
			protected abstract float GetLength(AnimationCurve[] curves);

			[Token(Token = "0x600086F")]
			protected abstract void CrossFadeStart();

			[Token(Token = "0x6000870")]
			protected abstract void OnApply(VRIK ik, AnimationCurve[] curves, float weight);

			[Token(Token = "0x6000871")]
			[Address(RVA = "0xFB0114", Offset = "0xFB0114", VA = "0xFB0114")]
			protected Offset()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000ED")]
		public class PositionOffset : Offset
		{
			[Serializable]
			[Token(Token = "0x20000EE")]
			public class PositionOffsetLink
			{
				[Token(Token = "0x400062C")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[Tooltip("The FBBIK effector type")]
				public IKSolverVR.PositionOffset positionOffset;

				[Token(Token = "0x400062D")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[Tooltip("The weight of this effector (could also be negative)")]
				public float weight;

				[Token(Token = "0x400062E")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				private Vector3 lastValue;

				[Token(Token = "0x400062F")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
				private Vector3 current;

				[Token(Token = "0x6000876")]
				[Address(RVA = "0xFB04F8", Offset = "0xFB04F8", VA = "0xFB04F8")]
				public void Apply(VRIK ik, Vector3 offset, float crossFader)
				{
				}

				[Token(Token = "0x6000877")]
				[Address(RVA = "0xFB031C", Offset = "0xFB031C", VA = "0xFB031C")]
				public void CrossFadeStart()
				{
				}

				[Token(Token = "0x6000878")]
				[Address(RVA = "0xFB058C", Offset = "0xFB058C", VA = "0xFB058C")]
				public PositionOffsetLink()
				{
				}
			}

			[Token(Token = "0x4000629")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[Tooltip("Offset magnitude in the direction of the hit force")]
			public int forceDirCurveIndex;

			[Token(Token = "0x400062A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			[Tooltip("Offset magnitude in the direction of character.up")]
			public int upDirCurveIndex;

			[Token(Token = "0x400062B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[Tooltip("Linking this offset to the VRIK position offsets")]
			public PositionOffsetLink[] offsetLinks;

			[Token(Token = "0x6000872")]
			[Address(RVA = "0xFB0128", Offset = "0xFB0128", VA = "0xFB0128", Slot = "4")]
			protected override float GetLength(AnimationCurve[] curves)
			{
				return default(float);
			}

			[Token(Token = "0x6000873")]
			[Address(RVA = "0xFB02BC", Offset = "0xFB02BC", VA = "0xFB02BC", Slot = "5")]
			protected override void CrossFadeStart()
			{
			}

			[Token(Token = "0x6000874")]
			[Address(RVA = "0xFB0330", Offset = "0xFB0330", VA = "0xFB0330", Slot = "6")]
			protected override void OnApply(VRIK ik, AnimationCurve[] curves, float weight)
			{
			}

			[Token(Token = "0x6000875")]
			[Address(RVA = "0xFB0570", Offset = "0xFB0570", VA = "0xFB0570")]
			public PositionOffset()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000EF")]
		public class RotationOffset : Offset
		{
			[Serializable]
			[Token(Token = "0x20000F0")]
			public class RotationOffsetLink
			{
				[Token(Token = "0x4000633")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[Tooltip("Reference to the bone that this hit point rotates")]
				public IKSolverVR.RotationOffset rotationOffset;

				[Token(Token = "0x4000634")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[Range(0f, 1f)]
				[Tooltip("Weight of rotating the bone")]
				public float weight;

				[Token(Token = "0x4000635")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				private Quaternion lastValue;

				[Token(Token = "0x4000636")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
				private Quaternion current;

				[Token(Token = "0x600087D")]
				[Address(RVA = "0xFB0960", Offset = "0xFB0960", VA = "0xFB0960")]
				public void Apply(VRIK ik, Quaternion offset, float crossFader)
				{
				}

				[Token(Token = "0x600087E")]
				[Address(RVA = "0xFB06C4", Offset = "0xFB06C4", VA = "0xFB06C4")]
				public void CrossFadeStart()
				{
				}

				[Token(Token = "0x600087F")]
				[Address(RVA = "0xFB0A7C", Offset = "0xFB0A7C", VA = "0xFB0A7C")]
				public RotationOffsetLink()
				{
				}
			}

			[Token(Token = "0x4000630")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[Tooltip("The angle to rotate the bone around it's rigidbody's world center of mass")]
			public int curveIndex;

			[Token(Token = "0x4000631")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[Tooltip("Linking this hit point to bone(s)")]
			public RotationOffsetLink[] offsetLinks;

			[Token(Token = "0x4000632")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private Rigidbody rigidbody;

			[Token(Token = "0x6000879")]
			[Address(RVA = "0xFB0594", Offset = "0xFB0594", VA = "0xFB0594", Slot = "4")]
			protected override float GetLength(AnimationCurve[] curves)
			{
				return default(float);
			}

			[Token(Token = "0x600087A")]
			[Address(RVA = "0xFB066C", Offset = "0xFB066C", VA = "0xFB066C", Slot = "5")]
			protected override void CrossFadeStart()
			{
			}

			[Token(Token = "0x600087B")]
			[Address(RVA = "0xFB06D0", Offset = "0xFB06D0", VA = "0xFB06D0", Slot = "6")]
			protected override void OnApply(VRIK ik, AnimationCurve[] curves, float weight)
			{
			}

			[Token(Token = "0x600087C")]
			[Address(RVA = "0xFB0A68", Offset = "0xFB0A68", VA = "0xFB0A68")]
			public RotationOffset()
			{
			}
		}

		[Token(Token = "0x400061C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimationCurve[] offsetCurves;

		[Token(Token = "0x400061D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Hit points for the FBBIK effectors")]
		public PositionOffset[] positionOffsets;

		[Token(Token = "0x400061E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip(" Hit points for bones without an effector, such as the head")]
		public RotationOffset[] rotationOffsets;

		[Token(Token = "0x6000861")]
		[Address(RVA = "0xFAFB88", Offset = "0xFAFB88", VA = "0xFAFB88", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6000862")]
		[Address(RVA = "0xFAFD50", Offset = "0xFAFD50", VA = "0xFAFD50")]
		public void Hit(Collider collider, Vector3 force, Vector3 point)
		{
		}

		[Token(Token = "0x6000863")]
		[Address(RVA = "0xFB00A4", Offset = "0xFB00A4", VA = "0xFB00A4")]
		public HitReactionVRIK()
		{
		}
	}
	[Token(Token = "0x20000F1")]
	public class Inertia : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x20000F2")]
		public class Body
		{
			[Serializable]
			[Token(Token = "0x20000F3")]
			public class EffectorLink
			{
				[Token(Token = "0x4000644")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[Tooltip("Type of the FBBIK effector to use")]
				public FullBodyBipedEffector effector;

				[Token(Token = "0x4000645")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[Tooltip("Weight of using this effector")]
				public float weight;

				[Token(Token = "0x6000886")]
				[Address(RVA = "0xFB1084", Offset = "0xFB1084", VA = "0xFB1084")]
				public EffectorLink()
				{
				}
			}

			[Token(Token = "0x4000639")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The Transform to follow, can be any bone of the character")]
			public Transform transform;

			[Token(Token = "0x400063A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("Linking the body to effectors. One Body can be used to offset more than one effector")]
			public EffectorLink[] effectorLinks;

			[Token(Token = "0x400063B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("The speed to follow the Transform")]
			public float speed;

			[Token(Token = "0x400063C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[Tooltip("The acceleration, smaller values means lazyer following")]
			public float acceleration;

			[Token(Token = "0x400063D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Range(0f, 1f)]
			[Tooltip("Matching target velocity")]
			public float matchVelocity;

			[Token(Token = "0x400063E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[Tooltip("gravity applied to the Body")]
			public float gravity;

			[Token(Token = "0x400063F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Vector3 delta;

			[Token(Token = "0x4000640")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private Vector3 lazyPoint;

			[Token(Token = "0x4000641")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private Vector3 direction;

			[Token(Token = "0x4000642")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			private Vector3 lastPosition;

			[Token(Token = "0x4000643")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private bool firstUpdate;

			[Token(Token = "0x6000883")]
			[Address(RVA = "0xFB0B4C", Offset = "0xFB0B4C", VA = "0xFB0B4C")]
			public void Reset()
			{
			}

			[Token(Token = "0x6000884")]
			[Address(RVA = "0xFB0D0C", Offset = "0xFB0D0C", VA = "0xFB0D0C")]
			public void Update(IKSolverFullBodyBiped solver, float weight, float deltaTime)
			{
			}

			[Token(Token = "0x6000885")]
			[Address(RVA = "0xFB1068", Offset = "0xFB1068", VA = "0xFB1068")]
			public Body()
			{
			}
		}

		[Token(Token = "0x4000637")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The array of Bodies")]
		public Body[] bodies;

		[Token(Token = "0x4000638")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The array of OffsetLimits")]
		public OffsetLimits[] limits;

		[Token(Token = "0x6000880")]
		[Address(RVA = "0xFB0AE0", Offset = "0xFB0AE0", VA = "0xFB0AE0")]
		public void ResetBodies()
		{
		}

		[Token(Token = "0x6000881")]
		[Address(RVA = "0xFB0C28", Offset = "0xFB0C28", VA = "0xFB0C28", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6000882")]
		[Address(RVA = "0xFB1058", Offset = "0xFB1058", VA = "0xFB1058")]
		public Inertia()
		{
		}
	}
	[Token(Token = "0x20000F4")]
	public class LookAtController : MonoBehaviour
	{
		[Token(Token = "0x4000646")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LookAtIK ik;

		[Token(Token = "0x4000647")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Target Smoothing")]
		[Tooltip("The target to look at. Do not use the Target transform that is assigned to LookAtIK. Set to null if you wish to stop looking.")]
		public Transform target;

		[Token(Token = "0x4000648")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Range(0f, 1f)]
		public float weight;

		[Token(Token = "0x4000649")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 offset;

		[Token(Token = "0x400064A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The time it takes to switch targets.")]
		public float targetSwitchSmoothTime;

		[Token(Token = "0x400064B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("The time it takes to blend in/out of LookAtIK weight.")]
		public float weightSmoothTime;

		[Token(Token = "0x400064C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Turning Towards The Target")]
		[Tooltip("Enables smooth turning towards the target according to the parameters under this header.")]
		public bool smoothTurnTowardsTarget;

		[Token(Token = "0x400064D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("Speed of turning towards the target using Vector3.RotateTowards.")]
		public float maxRadiansDelta;

		[Token(Token = "0x400064E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Speed of moving towards the target using Vector3.RotateTowards.")]
		public float maxMagnitudeDelta;

		[Token(Token = "0x400064F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("Speed of slerping towards the target.")]
		public float slerpSpeed;

		[Token(Token = "0x4000650")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The position of the pivot that the look at target is rotated around relative to the root of the character.")]
		public Vector3 pivotOffsetFromRoot;

		[Token(Token = "0x4000651")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("Minimum distance of looking from the first bone. Keeps the solver from failing if the target is too close.")]
		public float minDistance;

		[Token(Token = "0x4000652")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Range(0f, 180f)]
		[Tooltip("Character root will be rotate around the Y axis to keep root forward within this angle from the look direction.")]
		[Header("RootRotation")]
		public float maxRootAngle;

		[Token(Token = "0x4000653")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Transform lastTarget;

		[Token(Token = "0x4000654")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float switchWeight;

		[Token(Token = "0x4000655")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float switchWeightV;

		[Token(Token = "0x4000656")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float weightV;

		[Token(Token = "0x4000657")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private Vector3 lastPosition;

		[Token(Token = "0x4000658")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Vector3 dir;

		[Token(Token = "0x4000659")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private bool lastSmoothTowardsTarget;

		[Token(Token = "0x170000E0")]
		private Vector3 pivot
		{
			[Token(Token = "0x6000889")]
			[Address(RVA = "0xFB10F4", Offset = "0xFB10F4", VA = "0xFB10F4")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6000887")]
		[Address(RVA = "0xFB108C", Offset = "0xFB108C", VA = "0xFB108C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000888")]
		[Address(RVA = "0xFB1178", Offset = "0xFB1178", VA = "0xFB1178")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600088A")]
		[Address(RVA = "0xFB168C", Offset = "0xFB168C", VA = "0xFB168C")]
		private void ApplyMinDistance()
		{
		}

		[Token(Token = "0x600088B")]
		[Address(RVA = "0xFB1810", Offset = "0xFB1810", VA = "0xFB1810")]
		private void RootRotation()
		{
		}

		[Token(Token = "0x600088C")]
		[Address(RVA = "0xFB1A5C", Offset = "0xFB1A5C", VA = "0xFB1A5C")]
		public LookAtController()
		{
		}
	}
	[Token(Token = "0x20000F5")]
	public abstract class OffsetModifier : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20000F6")]
		public class OffsetLimits
		{
			[Token(Token = "0x400065D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The effector type (this is just an enum)")]
			public FullBodyBipedEffector effector;

			[Token(Token = "0x400065E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("Spring force, if zero then this is a hard limit, if not, offset can exceed the limit.")]
			public float spring;

			[Token(Token = "0x400065F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("Which axes to limit the offset on?")]
			public bool x;

			[Token(Token = "0x4000660")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
			[Tooltip("Which axes to limit the offset on?")]
			public bool y;

			[Token(Token = "0x4000661")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
			[Tooltip("Which axes to limit the offset on?")]
			public bool z;

			[Token(Token = "0x4000662")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[Tooltip("The limits")]
			public float minX;

			[Token(Token = "0x4000663")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("The limits")]
			public float maxX;

			[Token(Token = "0x4000664")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[Tooltip("The limits")]
			public float minY;

			[Token(Token = "0x4000665")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("The limits")]
			public float maxY;

			[Token(Token = "0x4000666")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[Tooltip("The limits")]
			public float minZ;

			[Token(Token = "0x4000667")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[Tooltip("The limits")]
			public float maxZ;

			[Token(Token = "0x6000895")]
			[Address(RVA = "0xFB1CF0", Offset = "0xFB1CF0", VA = "0xFB1CF0")]
			public void Apply(IKEffector e, Quaternion rootRotation)
			{
			}

			[Token(Token = "0x6000896")]
			[Address(RVA = "0xFB1F80", Offset = "0xFB1F80", VA = "0xFB1F80")]
			private float SpringAxis(float value, float min, float max)
			{
				return default(float);
			}

			[Token(Token = "0x6000897")]
			[Address(RVA = "0xFB1FF0", Offset = "0xFB1FF0", VA = "0xFB1FF0")]
			private float Spring(float value, float limit, bool negative)
			{
				return default(float);
			}

			[Token(Token = "0x6000898")]
			[Address(RVA = "0xFB2038", Offset = "0xFB2038", VA = "0xFB2038")]
			public OffsetLimits()
			{
			}
		}

		[Token(Token = "0x20000F7")]
		[CompilerGenerated]
		private sealed class <Initiate>d__8 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000668")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000669")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400066A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public OffsetModifier <>4__this;

			[Token(Token = "0x170000E2")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600089C")]
				[Address(RVA = "0xFB21B4", Offset = "0xFB21B4", VA = "0xFB21B4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000E3")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600089E")]
				[Address(RVA = "0xFB21FC", Offset = "0xFB21FC", VA = "0xFB21FC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000899")]
			[Address(RVA = "0xFB1BC0", Offset = "0xFB1BC0", VA = "0xFB1BC0")]
			[DebuggerHidden]
			public <Initiate>d__8(int <>1__state)
			{
			}

			[Token(Token = "0x600089A")]
			[Address(RVA = "0xFB2040", Offset = "0xFB2040", VA = "0xFB2040", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600089B")]
			[Address(RVA = "0xFB2044", Offset = "0xFB2044", VA = "0xFB2044", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600089D")]
			[Address(RVA = "0xFB21BC", Offset = "0xFB21BC", VA = "0xFB21BC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400065A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The master weight")]
		public float weight;

		[Token(Token = "0x400065B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Reference to the FBBIK component")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x400065C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected float lastTime;

		[Token(Token = "0x170000E1")]
		protected float deltaTime
		{
			[Token(Token = "0x600088D")]
			[Address(RVA = "0xFB1AF4", Offset = "0xFB1AF4", VA = "0xFB1AF4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x600088E")]
		protected abstract void OnModifyOffset();

		[Token(Token = "0x600088F")]
		[Address(RVA = "0xFAE7E0", Offset = "0xFAE7E0", VA = "0xFAE7E0", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000890")]
		[Address(RVA = "0xFB1B4C", Offset = "0xFB1B4C", VA = "0xFB1B4C")]
		[IteratorStateMachine(typeof(<Initiate>d__8))]
		private IEnumerator Initiate()
		{
			return null;
		}

		[Token(Token = "0x6000891")]
		[Address(RVA = "0xFB1BE8", Offset = "0xFB1BE8", VA = "0xFB1BE8")]
		private void ModifyOffset()
		{
		}

		[Token(Token = "0x6000892")]
		[Address(RVA = "0xFB0FB0", Offset = "0xFB0FB0", VA = "0xFB0FB0")]
		protected void ApplyLimits(OffsetLimits[] limits)
		{
		}

		[Token(Token = "0x6000893")]
		[Address(RVA = "0xFB1E54", Offset = "0xFB1E54", VA = "0xFB1E54", Slot = "6")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6000894")]
		[Address(RVA = "0xFAE758", Offset = "0xFAE758", VA = "0xFAE758")]
		protected OffsetModifier()
		{
		}
	}
	[Token(Token = "0x20000F8")]
	public abstract class OffsetModifierVRIK : MonoBehaviour
	{
		[Token(Token = "0x20000F9")]
		[CompilerGenerated]
		private sealed class <Initiate>d__7 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400066E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400066F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000670")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public OffsetModifierVRIK <>4__this;

			[Token(Token = "0x170000E5")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60008A9")]
				[Address(RVA = "0xFB26C0", Offset = "0xFB26C0", VA = "0xFB26C0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000E6")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60008AB")]
				[Address(RVA = "0xFB2708", Offset = "0xFB2708", VA = "0xFB2708", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60008A6")]
			[Address(RVA = "0xFB22F0", Offset = "0xFB22F0", VA = "0xFB22F0")]
			[DebuggerHidden]
			public <Initiate>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x60008A7")]
			[Address(RVA = "0xFB254C", Offset = "0xFB254C", VA = "0xFB254C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60008A8")]
			[Address(RVA = "0xFB2550", Offset = "0xFB2550", VA = "0xFB2550", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60008AA")]
			[Address(RVA = "0xFB26C8", Offset = "0xFB26C8", VA = "0xFB26C8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400066B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The master weight")]
		public float weight;

		[Token(Token = "0x400066C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Reference to the VRIK component")]
		public VRIK ik;

		[Token(Token = "0x400066D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float lastTime;

		[Token(Token = "0x170000E4")]
		protected float deltaTime
		{
			[Token(Token = "0x600089F")]
			[Address(RVA = "0xFB2204", Offset = "0xFB2204", VA = "0xFB2204")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x60008A0")]
		protected abstract void OnModifyOffset();

		[Token(Token = "0x60008A1")]
		[Address(RVA = "0xFB225C", Offset = "0xFB225C", VA = "0xFB225C", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x60008A2")]
		[Address(RVA = "0xFB227C", Offset = "0xFB227C", VA = "0xFB227C")]
		[IteratorStateMachine(typeof(<Initiate>d__7))]
		private IEnumerator Initiate()
		{
			return null;
		}

		[Token(Token = "0x60008A3")]
		[Address(RVA = "0xFB2318", Offset = "0xFB2318", VA = "0xFB2318")]
		private void ModifyOffset()
		{
		}

		[Token(Token = "0x60008A4")]
		[Address(RVA = "0xFB2420", Offset = "0xFB2420", VA = "0xFB2420", Slot = "6")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x60008A5")]
		[Address(RVA = "0xFB00B4", Offset = "0xFB00B4", VA = "0xFB00B4")]
		protected OffsetModifierVRIK()
		{
		}
	}
	[Token(Token = "0x20000FA")]
	public class OffsetPose : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20000FB")]
		public class EffectorLink
		{
			[Token(Token = "0x4000672")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public FullBodyBipedEffector effector;

			[Token(Token = "0x4000673")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public Vector3 offset;

			[Token(Token = "0x4000674")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector3 pin;

			[Token(Token = "0x4000675")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public Vector3 pinWeight;

			[Token(Token = "0x60008AF")]
			[Address(RVA = "0xFB2710", Offset = "0xFB2710", VA = "0xFB2710")]
			public void Apply(IKSolverFullBodyBiped solver, float weight, Quaternion rotation)
			{
			}

			[Token(Token = "0x60008B0")]
			[Address(RVA = "0xFB2A68", Offset = "0xFB2A68", VA = "0xFB2A68")]
			public EffectorLink()
			{
			}
		}

		[Token(Token = "0x4000671")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public EffectorLink[] effectorLinks;

		[Token(Token = "0x60008AC")]
		[Address(RVA = "0xFAEA50", Offset = "0xFAEA50", VA = "0xFAEA50")]
		public void Apply(IKSolverFullBodyBiped solver, float weight)
		{
		}

		[Token(Token = "0x60008AD")]
		[Address(RVA = "0xFB2960", Offset = "0xFB2960", VA = "0xFB2960")]
		public void Apply(IKSolverFullBodyBiped solver, float weight, Quaternion rotation)
		{
		}

		[Token(Token = "0x60008AE")]
		[Address(RVA = "0xFB2A04", Offset = "0xFB2A04", VA = "0xFB2A04")]
		public OffsetPose()
		{
		}
	}
	[Token(Token = "0x20000FC")]
	public class PenetrationAvoidance : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x20000FD")]
		public class Avoider
		{
			[Serializable]
			[Token(Token = "0x20000FE")]
			public class EffectorLink
			{
				[Token(Token = "0x4000681")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[Tooltip("Effector to apply the offset to.")]
				public FullBodyBipedEffector effector;

				[Token(Token = "0x4000682")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[Tooltip("Multiplier of the offset value, can be negative.")]
				public float weight;

				[Token(Token = "0x60008B7")]
				[Address(RVA = "0xFB30BC", Offset = "0xFB30BC", VA = "0xFB30BC")]
				public EffectorLink()
				{
				}
			}

			[Token(Token = "0x4000677")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("Bones to start the raycast from. Multiple raycasts can be used by assigning more than 1 bone.")]
			public Transform[] raycastFrom;

			[Token(Token = "0x4000678")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("The Transform to raycast towards. Usually the body part that you want to keep from penetrating.")]
			public Transform raycastTo;

			[Token(Token = "0x4000679")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("If 0, will use simple raycasting, if > 0, will use sphere casting (better, but slower).")]
			[Range(0f, 1f)]
			public float raycastRadius;

			[Token(Token = "0x400067A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("Linking this to FBBIK effectors.")]
			public EffectorLink[] effectors;

			[Token(Token = "0x400067B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[Tooltip("The time of smooth interpolation of the offset value to avoid penetration.")]
			public float smoothTimeIn;

			[Token(Token = "0x400067C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			[Tooltip("The time of smooth interpolation of the offset value blending out of penetration avoidance.")]
			public float smoothTimeOut;

			[Token(Token = "0x400067D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[Tooltip("Layers to keep penetrating from.")]
			public LayerMask layers;

			[Token(Token = "0x400067E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private Vector3 offset;

			[Token(Token = "0x400067F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private Vector3 offsetTarget;

			[Token(Token = "0x4000680")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			private Vector3 offsetV;

			[Token(Token = "0x60008B3")]
			[Address(RVA = "0xFB2AE0", Offset = "0xFB2AE0", VA = "0xFB2AE0")]
			public void Solve(IKSolverFullBodyBiped solver, float weight)
			{
			}

			[Token(Token = "0x60008B4")]
			[Address(RVA = "0xFB2C80", Offset = "0xFB2C80", VA = "0xFB2C80")]
			private Vector3 GetOffsetTarget(IKSolverFullBodyBiped solver)
			{
				return default(Vector3);
			}

			[Token(Token = "0x60008B5")]
			[Address(RVA = "0xFB2D88", Offset = "0xFB2D88", VA = "0xFB2D88")]
			private Vector3 Raycast(Vector3 from, Vector3 to)
			{
				return default(Vector3);
			}

			[Token(Token = "0x60008B6")]
			[Address(RVA = "0xFB30A8", Offset = "0xFB30A8", VA = "0xFB30A8")]
			public Avoider()
			{
			}
		}

		[Token(Token = "0x4000676")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Definitions of penetration avoidances.")]
		public Avoider[] avoiders;

		[Token(Token = "0x60008B1")]
		[Address(RVA = "0xFB2A70", Offset = "0xFB2A70", VA = "0xFB2A70", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x60008B2")]
		[Address(RVA = "0xFB2C70", Offset = "0xFB2C70", VA = "0xFB2C70")]
		public PenetrationAvoidance()
		{
		}
	}
	[Token(Token = "0x20000FF")]
	public class Recoil : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x2000100")]
		public class RecoilOffset
		{
			[Serializable]
			[Token(Token = "0x2000101")]
			public class EffectorLink
			{
				[Token(Token = "0x40006A0")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[Tooltip("Type of the FBBIK effector to use")]
				public FullBodyBipedEffector effector;

				[Token(Token = "0x40006A1")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[Tooltip("Weight of using this effector")]
				public float weight;

				[Token(Token = "0x60008C7")]
				[Address(RVA = "0xFB4490", Offset = "0xFB4490", VA = "0xFB4490")]
				public EffectorLink()
				{
				}
			}

			[Token(Token = "0x400069A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("Offset vector for the associated effector when doing recoil.")]
			public Vector3 offset;

			[Token(Token = "0x400069B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[Tooltip("When firing before the last recoil has faded, how much of the current recoil offset will be maintained?")]
			[Range(0f, 1f)]
			public float additivity;

			[Token(Token = "0x400069C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("Max additive recoil for automatic fire.")]
			public float maxAdditiveOffsetMag;

			[Token(Token = "0x400069D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("Linking this recoil offset to FBBIK effectors.")]
			public EffectorLink[] effectorLinks;

			[Token(Token = "0x400069E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Vector3 additiveOffset;

			[Token(Token = "0x400069F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private Vector3 lastOffset;

			[Token(Token = "0x60008C4")]
			[Address(RVA = "0xFB3260", Offset = "0xFB3260", VA = "0xFB3260")]
			public void Start()
			{
			}

			[Token(Token = "0x60008C5")]
			[Address(RVA = "0xFB3E08", Offset = "0xFB3E08", VA = "0xFB3E08")]
			public void Apply(IKSolverFullBodyBiped solver, Quaternion rotation, float masterWeight, float length, float timeLeft)
			{
			}

			[Token(Token = "0x60008C6")]
			[Address(RVA = "0xFB447C", Offset = "0xFB447C", VA = "0xFB447C")]
			public RecoilOffset()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000102")]
		public enum Handedness
		{
			[Token(Token = "0x40006A3")]
			Right,
			[Token(Token = "0x40006A4")]
			Left
		}

		[Token(Token = "0x4000683")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Reference to the AimIK component. Optional, only used to getting the aiming direction.")]
		public AimIK aimIK;

		[Token(Token = "0x4000684")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Set this true if you are using IKExecutionOrder.cs or a custom script to force AimIK solve after FBBIK.")]
		public bool aimIKSolvedLast;

		[Token(Token = "0x4000685")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("Which hand is holding the weapon?")]
		public Handedness handedness;

		[Token(Token = "0x4000686")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Check for 2-handed weapons.")]
		public bool twoHanded;

		[Token(Token = "0x4000687")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Weight curve for the recoil offsets. Recoil procedure is as long as this curve.")]
		public AnimationCurve recoilWeight;

		[Token(Token = "0x4000688")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("How much is the magnitude randomized each time Recoil is called?")]
		public float magnitudeRandom;

		[Token(Token = "0x4000689")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Tooltip("How much is the rotation randomized each time Recoil is called?")]
		public Vector3 rotationRandom;

		[Token(Token = "0x400068A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Rotating the primary hand bone for the recoil (in local space).")]
		public Vector3 handRotationOffset;

		[Token(Token = "0x400068B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Tooltip("Time of blending in another recoil when doing automatic fire.")]
		public float blendTime;

		[Token(Token = "0x400068C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Space(10f)]
		[Tooltip("FBBIK effector position offsets for the recoil (in aiming direction space).")]
		public RecoilOffset[] offsets;

		[Token(Token = "0x400068D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[HideInInspector]
		public Quaternion rotationOffset;

		[Token(Token = "0x400068E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float magnitudeMlp;

		[Token(Token = "0x400068F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float endTime;

		[Token(Token = "0x4000690")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Quaternion handRotation;

		[Token(Token = "0x4000691")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Quaternion secondaryHandRelativeRotation;

		[Token(Token = "0x4000692")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Quaternion randomRotation;

		[Token(Token = "0x4000693")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private float length;

		[Token(Token = "0x4000694")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private bool initiated;

		[Token(Token = "0x4000695")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private float blendWeight;

		[Token(Token = "0x4000696")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private float w;

		[Token(Token = "0x4000697")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Quaternion primaryHandRotation;

		[Token(Token = "0x4000698")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private bool handRotationsSet;

		[Token(Token = "0x4000699")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private Vector3 aimIKAxis;

		[Token(Token = "0x170000E7")]
		public bool isFinished
		{
			[Token(Token = "0x60008B8")]
			[Address(RVA = "0xFB30C4", Offset = "0xFB30C4", VA = "0xFB30C4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000E8")]
		private IKEffector primaryHandEffector
		{
			[Token(Token = "0x60008BE")]
			[Address(RVA = "0xFB400C", Offset = "0xFB400C", VA = "0xFB400C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000E9")]
		private IKEffector secondaryHandEffector
		{
			[Token(Token = "0x60008BF")]
			[Address(RVA = "0xFB4048", Offset = "0xFB4048", VA = "0xFB4048")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000EA")]
		private Transform primaryHand
		{
			[Token(Token = "0x60008C0")]
			[Address(RVA = "0xFB3FD4", Offset = "0xFB3FD4", VA = "0xFB3FD4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000EB")]
		private Transform secondaryHand
		{
			[Token(Token = "0x60008C1")]
			[Address(RVA = "0xFB3FF0", Offset = "0xFB3FF0", VA = "0xFB3FF0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60008B9")]
		[Address(RVA = "0xFB30E8", Offset = "0xFB30E8", VA = "0xFB30E8")]
		public void SetHandRotations(Quaternion leftHandRotation, Quaternion rightHandRotation)
		{
		}

		[Token(Token = "0x60008BA")]
		[Address(RVA = "0xFB3114", Offset = "0xFB3114", VA = "0xFB3114")]
		public void Fire(float magnitude)
		{
		}

		[Token(Token = "0x60008BB")]
		[Address(RVA = "0xFB3334", Offset = "0xFB3334", VA = "0xFB3334", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x60008BC")]
		[Address(RVA = "0xFB4084", Offset = "0xFB4084", VA = "0xFB4084")]
		private void AfterFBBIK()
		{
		}

		[Token(Token = "0x60008BD")]
		[Address(RVA = "0xFB419C", Offset = "0xFB419C", VA = "0xFB419C")]
		private void AfterAimIK()
		{
		}

		[Token(Token = "0x60008C2")]
		[Address(RVA = "0xFB41EC", Offset = "0xFB41EC", VA = "0xFB41EC", Slot = "6")]
		protected override void OnDestroy()
		{
		}

		[Token(Token = "0x60008C3")]
		[Address(RVA = "0xFB43F4", Offset = "0xFB43F4", VA = "0xFB43F4")]
		public Recoil()
		{
		}
	}
	[Token(Token = "0x2000103")]
	public class ShoulderRotator : MonoBehaviour
	{
		[Token(Token = "0x40006A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Weight of shoulder rotation")]
		public float weight;

		[Token(Token = "0x40006A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("The greater the offset, the sooner the shoulder will start rotating")]
		public float offset;

		[Token(Token = "0x40006A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private FullBodyBipedIK ik;

		[Token(Token = "0x40006A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool skip;

		[Token(Token = "0x60008C8")]
		[Address(RVA = "0xFB4498", Offset = "0xFB4498", VA = "0xFB4498")]
		private void Start()
		{
		}

		[Token(Token = "0x60008C9")]
		[Address(RVA = "0xFB45AC", Offset = "0xFB45AC", VA = "0xFB45AC")]
		private void RotateShoulders()
		{
		}

		[Token(Token = "0x60008CA")]
		[Address(RVA = "0xFB4688", Offset = "0xFB4688", VA = "0xFB4688")]
		private void RotateShoulder(FullBodyBipedChain chain, float weight, float offset)
		{
		}

		[Token(Token = "0x60008CB")]
		[Address(RVA = "0xFB4A8C", Offset = "0xFB4A8C", VA = "0xFB4A8C")]
		private IKMapping.BoneMap GetParentBoneMap(FullBodyBipedChain chain)
		{
			return null;
		}

		[Token(Token = "0x60008CC")]
		[Address(RVA = "0xFB4AC0", Offset = "0xFB4AC0", VA = "0xFB4AC0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60008CD")]
		[Address(RVA = "0xFB4BEC", Offset = "0xFB4BEC", VA = "0xFB4BEC")]
		public ShoulderRotator()
		{
		}
	}
	[Token(Token = "0x2000104")]
	public static class VRIKCalibrator
	{
		[Serializable]
		[Token(Token = "0x2000105")]
		public class Settings
		{
			[Token(Token = "0x40006A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("Multiplies character scale")]
			public float scaleMlp;

			[Token(Token = "0x40006AA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("Local axis of the HMD facing forward.")]
			public Vector3 headTrackerForward;

			[Token(Token = "0x40006AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("Local axis of the HMD facing up.")]
			public Vector3 headTrackerUp;

			[Token(Token = "0x40006AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[Tooltip("Local axis of the body tracker towards the player's forward direction.")]
			public Vector3 bodyTrackerForward;

			[Token(Token = "0x40006AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[Tooltip("Local axis of the body tracker towards the up direction.")]
			public Vector3 bodyTrackerUp;

			[Token(Token = "0x40006AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			[Tooltip("Local axis of the hand trackers pointing from the wrist towards the palm.")]
			public Vector3 handTrackerForward;

			[Token(Token = "0x40006AF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[Tooltip("Local axis of the hand trackers pointing in the direction of the surface normal of the back of the hand.")]
			public Vector3 handTrackerUp;

			[Token(Token = "0x40006B0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			[Tooltip("Local axis of the foot trackers towards the player's forward direction.")]
			public Vector3 footTrackerForward;

			[Token(Token = "0x40006B1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			[Tooltip("Local axis of the foot tracker towards the up direction.")]
			public Vector3 footTrackerUp;

			[Token(Token = "0x40006B2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			[Tooltip("Offset of the head bone from the HMD in (headTrackerForward, headTrackerUp) space relative to the head tracker.")]
			[Space(10f)]
			public Vector3 headOffset;

			[Token(Token = "0x40006B3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			[Tooltip("Offset of the hand bones from the hand trackers in (handTrackerForward, handTrackerUp) space relative to the hand trackers.")]
			public Vector3 handOffset;

			[Token(Token = "0x40006B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
			[Tooltip("Forward offset of the foot bones from the foot trackers.")]
			public float footForwardOffset;

			[Token(Token = "0x40006B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			[Tooltip("Inward offset of the foot bones from the foot trackers.")]
			public float footInwardOffset;

			[Token(Token = "0x40006B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
			[Range(-180f, 180f)]
			[Tooltip("Used for adjusting foot heading relative to the foot trackers.")]
			public float footHeadingOffset;

			[Token(Token = "0x40006B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			[Range(0f, 1f)]
			public float pelvisPositionWeight;

			[Token(Token = "0x40006B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
			[Range(0f, 1f)]
			public float pelvisRotationWeight;

			[Token(Token = "0x60008D3")]
			[Address(RVA = "0xFB77A4", Offset = "0xFB77A4", VA = "0xFB77A4")]
			public Settings()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000106")]
		public class CalibrationData
		{
			[Serializable]
			[Token(Token = "0x2000107")]
			public class Target
			{
				[Token(Token = "0x40006C5")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				public bool used;

				[Token(Token = "0x40006C6")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				public Vector3 localPosition;

				[Token(Token = "0x40006C7")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
				public Quaternion localRotation;

				[Token(Token = "0x60008D5")]
				[Address(RVA = "0xFB68DC", Offset = "0xFB68DC", VA = "0xFB68DC")]
				public Target(Transform t)
				{
				}

				[Token(Token = "0x60008D6")]
				[Address(RVA = "0xFB7334", Offset = "0xFB7334", VA = "0xFB7334")]
				public void SetTo(Transform t)
				{
				}
			}

			[Token(Token = "0x40006B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float scale;

			[Token(Token = "0x40006BA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Target head;

			[Token(Token = "0x40006BB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Target leftHand;

			[Token(Token = "0x40006BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Target rightHand;

			[Token(Token = "0x40006BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Target pelvis;

			[Token(Token = "0x40006BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Target leftFoot;

			[Token(Token = "0x40006BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public Target rightFoot;

			[Token(Token = "0x40006C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Target leftLegGoal;

			[Token(Token = "0x40006C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public Target rightLegGoal;

			[Token(Token = "0x40006C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public Vector3 pelvisTargetRight;

			[Token(Token = "0x40006C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			public float pelvisPositionWeight;

			[Token(Token = "0x40006C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public float pelvisRotationWeight;

			[Token(Token = "0x60008D4")]
			[Address(RVA = "0xFB5FE0", Offset = "0xFB5FE0", VA = "0xFB5FE0")]
			public CalibrationData()
			{
			}
		}

		[Token(Token = "0x60008CE")]
		[Address(RVA = "0xFB4C00", Offset = "0xFB4C00", VA = "0xFB4C00")]
		public static void RecalibrateScale(VRIK ik, Settings settings)
		{
		}

		[Token(Token = "0x60008CF")]
		[Address(RVA = "0xFB4CF4", Offset = "0xFB4CF4", VA = "0xFB4CF4")]
		public static CalibrationData Calibrate(VRIK ik, Settings settings, Transform headTracker, [Optional] Transform bodyTracker, [Optional] Transform leftHandTracker, [Optional] Transform rightHandTracker, [Optional] Transform leftFootTracker, [Optional] Transform rightFootTracker)
		{
			return null;
		}

		[Token(Token = "0x60008D0")]
		[Address(RVA = "0xFB5FE8", Offset = "0xFB5FE8", VA = "0xFB5FE8")]
		private static void CalibrateLeg(Settings settings, Transform tracker, IKSolverVR.Leg leg, Transform lastBone, Vector3 rootForward, bool isLeft)
		{
		}

		[Token(Token = "0x60008D1")]
		[Address(RVA = "0xFB6990", Offset = "0xFB6990", VA = "0xFB6990")]
		public static void Calibrate(VRIK ik, CalibrationData data, Transform headTracker, [Optional] Transform bodyTracker, [Optional] Transform leftHandTracker, [Optional] Transform rightHandTracker, [Optional] Transform leftFootTracker, [Optional] Transform rightFootTracker)
		{
		}

		[Token(Token = "0x60008D2")]
		[Address(RVA = "0xFB7390", Offset = "0xFB7390", VA = "0xFB7390")]
		private static void CalibrateLeg(CalibrationData data, Transform tracker, IKSolverVR.Leg leg, Transform lastBone, Vector3 rootForward, bool isLeft)
		{
		}
	}
	[Token(Token = "0x2000108")]
	public class VRIKLODController : MonoBehaviour
	{
		[Token(Token = "0x40006C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Renderer LODRenderer;

		[Token(Token = "0x40006C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float LODDistance;

		[Token(Token = "0x40006CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool allowCulled;

		[Token(Token = "0x40006CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private VRIK ik;

		[Token(Token = "0x60008D7")]
		[Address(RVA = "0xFB79A8", Offset = "0xFB79A8", VA = "0xFB79A8")]
		private void Start()
		{
		}

		[Token(Token = "0x60008D8")]
		[Address(RVA = "0xFB7A00", Offset = "0xFB7A00", VA = "0xFB7A00")]
		private void Update()
		{
		}

		[Token(Token = "0x60008D9")]
		[Address(RVA = "0xFB7A28", Offset = "0xFB7A28", VA = "0xFB7A28")]
		private int GetLODLevel()
		{
			return default(int);
		}

		[Token(Token = "0x60008DA")]
		[Address(RVA = "0xFB7B48", Offset = "0xFB7B48", VA = "0xFB7B48")]
		public VRIKLODController()
		{
		}
	}
	[Token(Token = "0x2000109")]
	public class VRIKRootController : MonoBehaviour
	{
		[Token(Token = "0x40006CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Transform pelvisTarget;

		[Token(Token = "0x40006CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Transform leftFootTarget;

		[Token(Token = "0x40006CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform rightFootTarget;

		[Token(Token = "0x40006D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private VRIK ik;

		[Token(Token = "0x170000EC")]
		public Vector3 pelvisTargetRight
		{
			[Token(Token = "0x60008DB")]
			[Address(RVA = "0xFB7B60", Offset = "0xFB7B60", VA = "0xFB7B60")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60008DC")]
			[Address(RVA = "0xFB7B6C", Offset = "0xFB7B6C", VA = "0xFB7B6C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60008DD")]
		[Address(RVA = "0xFB7B78", Offset = "0xFB7B78", VA = "0xFB7B78")]
		private void Awake()
		{
		}

		[Token(Token = "0x60008DE")]
		[Address(RVA = "0xFB66C8", Offset = "0xFB66C8", VA = "0xFB66C8")]
		public void Calibrate()
		{
		}

		[Token(Token = "0x60008DF")]
		[Address(RVA = "0xFB7604", Offset = "0xFB7604", VA = "0xFB7604")]
		public void Calibrate(VRIKCalibrator.CalibrationData data)
		{
		}

		[Token(Token = "0x60008E0")]
		[Address(RVA = "0xFB7C94", Offset = "0xFB7C94", VA = "0xFB7C94")]
		private void OnPreUpdate()
		{
		}

		[Token(Token = "0x60008E1")]
		[Address(RVA = "0xFB805C", Offset = "0xFB805C", VA = "0xFB805C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60008E2")]
		[Address(RVA = "0xFB8188", Offset = "0xFB8188", VA = "0xFB8188")]
		public VRIKRootController()
		{
		}
	}
}
namespace RootMotion.Demos
{
	[Token(Token = "0x200010A")]
	public class FKOffset : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200010B")]
		public class Offset
		{
			[Token(Token = "0x40006D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[SerializeField]
			[HideInInspector]
			public string name;

			[Token(Token = "0x40006D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public HumanBodyBones bone;

			[Token(Token = "0x40006D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Vector3 rotationOffset;

			[Token(Token = "0x40006D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Transform t;

			[Token(Token = "0x60008E7")]
			[Address(RVA = "0xFB824C", Offset = "0xFB824C", VA = "0xFB824C")]
			public void Apply(Animator animator)
			{
			}

			[Token(Token = "0x60008E8")]
			[Address(RVA = "0xFB84C8", Offset = "0xFB84C8", VA = "0xFB84C8")]
			public Offset()
			{
			}
		}

		[Token(Token = "0x40006D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Offset[] offsets;

		[Token(Token = "0x40006D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Animator animator;

		[Token(Token = "0x60008E3")]
		[Address(RVA = "0xFB8190", Offset = "0xFB8190", VA = "0xFB8190")]
		private void Start()
		{
		}

		[Token(Token = "0x60008E4")]
		[Address(RVA = "0xFB81E8", Offset = "0xFB81E8", VA = "0xFB81E8")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60008E5")]
		[Address(RVA = "0xFB83FC", Offset = "0xFB83FC", VA = "0xFB83FC")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60008E6")]
		[Address(RVA = "0xFB84C0", Offset = "0xFB84C0", VA = "0xFB84C0")]
		public FKOffset()
		{
		}
	}
	[Token(Token = "0x200010C")]
	public class AimBoxing : MonoBehaviour
	{
		[Token(Token = "0x40006D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AimIK aimIK;

		[Token(Token = "0x40006D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform pin;

		[Token(Token = "0x60008E9")]
		[Address(RVA = "0xFB84D0", Offset = "0xFB84D0", VA = "0xFB84D0")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60008EA")]
		[Address(RVA = "0xFB8550", Offset = "0xFB8550", VA = "0xFB8550")]
		public AimBoxing()
		{
		}
	}
	[Token(Token = "0x200010D")]
	public class AimSwing : MonoBehaviour
	{
		[Token(Token = "0x40006D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AimIK ik;

		[Token(Token = "0x40006DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The direction of the animated weapon swing in character space. Tweak this value to adjust the aiming.")]
		public Vector3 animatedSwingDirection;

		[Token(Token = "0x60008EB")]
		[Address(RVA = "0xFB8558", Offset = "0xFB8558", VA = "0xFB8558")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60008EC")]
		[Address(RVA = "0xFB85C4", Offset = "0xFB85C4", VA = "0xFB85C4")]
		public AimSwing()
		{
		}
	}
	[Token(Token = "0x200010E")]
	public class SecondHandOnGun : MonoBehaviour
	{
		[Token(Token = "0x40006DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AimIK aim;

		[Token(Token = "0x40006DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LimbIK leftArmIK;

		[Token(Token = "0x40006DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform leftHand;

		[Token(Token = "0x40006DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform rightHand;

		[Token(Token = "0x40006DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector3 leftHandPositionOffset;

		[Token(Token = "0x40006E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Vector3 leftHandRotationOffset;

		[Token(Token = "0x40006E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Vector3 leftHandPosRelToRight;

		[Token(Token = "0x40006E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Quaternion leftHandRotRelToRight;

		[Token(Token = "0x60008ED")]
		[Address(RVA = "0xFB8624", Offset = "0xFB8624", VA = "0xFB8624")]
		private void Start()
		{
		}

		[Token(Token = "0x60008EE")]
		[Address(RVA = "0xFB865C", Offset = "0xFB865C", VA = "0xFB865C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60008EF")]
		[Address(RVA = "0xFB8918", Offset = "0xFB8918", VA = "0xFB8918")]
		public SecondHandOnGun()
		{
		}
	}
	[Token(Token = "0x200010F")]
	public class SimpleAimingSystem : MonoBehaviour
	{
		[Token(Token = "0x40006E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("AimPoser is a tool that returns an animation name based on direction.")]
		public AimPoser aimPoser;

		[Token(Token = "0x40006E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Reference to the AimIK component.")]
		public AimIK aim;

		[Token(Token = "0x40006E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Reference to the LookAt component (only used for the head in this instance).")]
		public LookAtIK lookAt;

		[Token(Token = "0x40006E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Reference to the Animator component.")]
		public Animator animator;

		[Token(Token = "0x40006E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Time of cross-fading from pose to pose.")]
		public float crossfadeTime;

		[Token(Token = "0x40006E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("Will keep the aim target at a distance.")]
		public float minAimDistance;

		[Token(Token = "0x40006E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private AimPoser.Pose aimPose;

		[Token(Token = "0x40006EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private AimPoser.Pose lastPose;

		[Token(Token = "0x60008F0")]
		[Address(RVA = "0xFB8920", Offset = "0xFB8920", VA = "0xFB8920")]
		private void Start()
		{
		}

		[Token(Token = "0x60008F1")]
		[Address(RVA = "0xFB8958", Offset = "0xFB8958", VA = "0xFB8958")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60008F2")]
		[Address(RVA = "0xFB8AA4", Offset = "0xFB8AA4", VA = "0xFB8AA4")]
		private void Pose()
		{
		}

		[Token(Token = "0x60008F3")]
		[Address(RVA = "0xFB8C30", Offset = "0xFB8C30", VA = "0xFB8C30")]
		private void LimitAimTarget()
		{
		}

		[Token(Token = "0x60008F4")]
		[Address(RVA = "0xFB8E14", Offset = "0xFB8E14", VA = "0xFB8E14")]
		private void DirectCrossFade(string state, float target)
		{
		}

		[Token(Token = "0x60008F5")]
		[Address(RVA = "0xFB8EA4", Offset = "0xFB8EA4", VA = "0xFB8EA4")]
		public SimpleAimingSystem()
		{
		}
	}
	[Token(Token = "0x2000110")]
	public class TerrainOffset : MonoBehaviour
	{
		[Token(Token = "0x40006EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AimIK aimIK;

		[Token(Token = "0x40006EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 raycastOffset;

		[Token(Token = "0x40006ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public LayerMask raycastLayers;

		[Token(Token = "0x40006EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float min;

		[Token(Token = "0x40006EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float max;

		[Token(Token = "0x40006F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float lerpSpeed;

		[Token(Token = "0x40006F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private RaycastHit hit;

		[Token(Token = "0x40006F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3 offset;

		[Token(Token = "0x60008F6")]
		[Address(RVA = "0xFB8EB8", Offset = "0xFB8EB8", VA = "0xFB8EB8")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60008F7")]
		[Address(RVA = "0xFB9024", Offset = "0xFB9024", VA = "0xFB9024")]
		private Vector3 GetGroundHeightOffset(Vector3 worldPosition)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60008F8")]
		[Address(RVA = "0xFB9220", Offset = "0xFB9220", VA = "0xFB9220")]
		public TerrainOffset()
		{
		}
	}
	[Token(Token = "0x2000111")]
	public class BipedIKvsAnimatorIK : MonoBehaviour
	{
		[Token(Token = "0x40006F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[LargeHeader("References")]
		public Animator animator;

		[Token(Token = "0x40006F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BipedIK bipedIK;

		[Token(Token = "0x40006F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[LargeHeader("Look At")]
		public Transform lookAtTargetBiped;

		[Token(Token = "0x40006F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform lookAtTargetAnimator;

		[Token(Token = "0x40006F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Range(0f, 1f)]
		public float lookAtWeight;

		[Token(Token = "0x40006F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Range(0f, 1f)]
		public float lookAtBodyWeight;

		[Token(Token = "0x40006F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Range(0f, 1f)]
		public float lookAtHeadWeight;

		[Token(Token = "0x40006FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Range(0f, 1f)]
		public float lookAtEyesWeight;

		[Token(Token = "0x40006FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Range(0f, 1f)]
		public float lookAtClampWeight;

		[Token(Token = "0x40006FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Range(0f, 1f)]
		public float lookAtClampWeightHead;

		[Token(Token = "0x40006FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Range(0f, 1f)]
		public float lookAtClampWeightEyes;

		[Token(Token = "0x40006FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[LargeHeader("Foot")]
		public Transform footTargetBiped;

		[Token(Token = "0x40006FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform footTargetAnimator;

		[Token(Token = "0x4000700")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Range(0f, 1f)]
		public float footPositionWeight;

		[Token(Token = "0x4000701")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Range(0f, 1f)]
		public float footRotationWeight;

		[Token(Token = "0x4000702")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[LargeHeader("Hand")]
		public Transform handTargetBiped;

		[Token(Token = "0x4000703")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Transform handTargetAnimator;

		[Token(Token = "0x4000704")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Range(0f, 1f)]
		public float handPositionWeight;

		[Token(Token = "0x4000705")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[Range(0f, 1f)]
		public float handRotationWeight;

		[Token(Token = "0x60008F9")]
		[Address(RVA = "0xFB9250", Offset = "0xFB9250", VA = "0xFB9250")]
		private void OnAnimatorIK(int layer)
		{
		}

		[Token(Token = "0x60008FA")]
		[Address(RVA = "0xFB967C", Offset = "0xFB967C", VA = "0xFB967C")]
		public BipedIKvsAnimatorIK()
		{
		}
	}
	[Token(Token = "0x2000112")]
	public class MechSpider : MonoBehaviour
	{
		[Token(Token = "0x4000706")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LayerMask raycastLayers;

		[Token(Token = "0x4000707")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float scale;

		[Token(Token = "0x4000708")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform body;

		[Token(Token = "0x4000709")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public MechSpiderLeg[] legs;

		[Token(Token = "0x400070A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float legRotationWeight;

		[Token(Token = "0x400070B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float rootPositionSpeed;

		[Token(Token = "0x400070C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float rootRotationSpeed;

		[Token(Token = "0x400070D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float breatheSpeed;

		[Token(Token = "0x400070E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float breatheMagnitude;

		[Token(Token = "0x400070F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float height;

		[Token(Token = "0x4000710")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float minHeight;

		[Token(Token = "0x4000711")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float raycastHeight;

		[Token(Token = "0x4000712")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float raycastDistance;

		[Token(Token = "0x4000713")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Vector3 lastPosition;

		[Token(Token = "0x4000714")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 defaultBodyLocalPosition;

		[Token(Token = "0x4000715")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float sine;

		[Token(Token = "0x4000716")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private RaycastHit rootHit;

		[Token(Token = "0x60008FB")]
		[Address(RVA = "0xFB969C", Offset = "0xFB969C", VA = "0xFB969C")]
		private void Update()
		{
		}

		[Token(Token = "0x60008FC")]
		[Address(RVA = "0xFB9FB8", Offset = "0xFB9FB8", VA = "0xFB9FB8")]
		private Vector3 GetLegCentroid()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60008FD")]
		[Address(RVA = "0xFB9D34", Offset = "0xFB9D34", VA = "0xFB9D34")]
		private Vector3 GetLegsPlaneNormal()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60008FE")]
		[Address(RVA = "0xFBA0C8", Offset = "0xFBA0C8", VA = "0xFBA0C8")]
		public MechSpider()
		{
		}
	}
	[Token(Token = "0x2000113")]
	public class MechSpiderController : MonoBehaviour
	{
		[Token(Token = "0x4000717")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MechSpider mechSpider;

		[Token(Token = "0x4000718")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform cameraTransform;

		[Token(Token = "0x4000719")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float speed;

		[Token(Token = "0x400071A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float turnSpeed;

		[Token(Token = "0x170000ED")]
		public Vector3 inputVector
		{
			[Token(Token = "0x60008FF")]
			[Address(RVA = "0xFBA0F4", Offset = "0xFBA0F4", VA = "0xFBA0F4")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6000900")]
		[Address(RVA = "0xFBA174", Offset = "0xFBA174", VA = "0xFBA174")]
		private void Update()
		{
		}

		[Token(Token = "0x6000901")]
		[Address(RVA = "0xFBA4B8", Offset = "0xFBA4B8", VA = "0xFBA4B8")]
		public MechSpiderController()
		{
		}
	}
	[Token(Token = "0x2000114")]
	public class MechSpiderLeg : MonoBehaviour
	{
		[Token(Token = "0x2000115")]
		[CompilerGenerated]
		private sealed class <Step>d__33 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000731")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000732")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000733")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MechSpiderLeg <>4__this;

			[Token(Token = "0x4000734")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 stepStartPosition;

			[Token(Token = "0x4000735")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public Vector3 targetPosition;

			[Token(Token = "0x170000F0")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000910")]
				[Address(RVA = "0xFBB540", Offset = "0xFBB540", VA = "0xFBB540", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000F1")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000912")]
				[Address(RVA = "0xFBB588", Offset = "0xFBB588", VA = "0xFBB588", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600090D")]
			[Address(RVA = "0xFBB1D8", Offset = "0xFBB1D8", VA = "0xFBB1D8")]
			[DebuggerHidden]
			public <Step>d__33(int <>1__state)
			{
			}

			[Token(Token = "0x600090E")]
			[Address(RVA = "0xFBB290", Offset = "0xFBB290", VA = "0xFBB290", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600090F")]
			[Address(RVA = "0xFBB294", Offset = "0xFBB294", VA = "0xFBB294", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000911")]
			[Address(RVA = "0xFBB548", Offset = "0xFBB548", VA = "0xFBB548", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400071B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MechSpider mechSpider;

		[Token(Token = "0x400071C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MechSpiderLeg unSync;

		[Token(Token = "0x400071D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 offset;

		[Token(Token = "0x400071E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float minDelay;

		[Token(Token = "0x400071F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float maxOffset;

		[Token(Token = "0x4000720")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float stepSpeed;

		[Token(Token = "0x4000721")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float footHeight;

		[Token(Token = "0x4000722")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float velocityPrediction;

		[Token(Token = "0x4000723")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float raycastFocus;

		[Token(Token = "0x4000724")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AnimationCurve yOffset;

		[Token(Token = "0x4000725")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform foot;

		[Token(Token = "0x4000726")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Vector3 footUpAxis;

		[Token(Token = "0x4000727")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float footRotationSpeed;

		[Token(Token = "0x4000728")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public ParticleSystem sand;

		[Token(Token = "0x4000729")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private IK ik;

		[Token(Token = "0x400072A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float stepProgress;

		[Token(Token = "0x400072B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private float lastStepTime;

		[Token(Token = "0x400072C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Vector3 defaultPosition;

		[Token(Token = "0x400072D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private RaycastHit hit;

		[Token(Token = "0x400072E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Quaternion lastFootLocalRotation;

		[Token(Token = "0x400072F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Vector3 smoothHitNormal;

		[Token(Token = "0x4000730")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private Vector3 lastStepPosition;

		[Token(Token = "0x170000EE")]
		public bool isStepping
		{
			[Token(Token = "0x6000902")]
			[Address(RVA = "0xFBA4CC", Offset = "0xFBA4CC", VA = "0xFBA4CC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000EF")]
		public Vector3 position
		{
			[Token(Token = "0x6000903")]
			[Address(RVA = "0xFBA098", Offset = "0xFBA098", VA = "0xFBA098")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000904")]
			[Address(RVA = "0xFBA4E0", Offset = "0xFBA4E0", VA = "0xFBA4E0")]
			set
			{
			}
		}

		[Token(Token = "0x6000905")]
		[Address(RVA = "0xFBA52C", Offset = "0xFBA52C", VA = "0xFBA52C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000906")]
		[Address(RVA = "0xFBA7AC", Offset = "0xFBA7AC", VA = "0xFBA7AC")]
		private void AfterIK()
		{
		}

		[Token(Token = "0x6000907")]
		[Address(RVA = "0xFBA984", Offset = "0xFBA984", VA = "0xFBA984")]
		private void Start()
		{
		}

		[Token(Token = "0x6000908")]
		[Address(RVA = "0xFBABA8", Offset = "0xFBABA8", VA = "0xFBABA8")]
		private Vector3 GetStepTarget(out bool stepFound, float focus, float distance)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000909")]
		[Address(RVA = "0xFBAE38", Offset = "0xFBAE38", VA = "0xFBAE38")]
		private void UpdatePosition(float distance)
		{
		}

		[Token(Token = "0x600090A")]
		[Address(RVA = "0xFBAFA0", Offset = "0xFBAFA0", VA = "0xFBAFA0")]
		private void Update()
		{
		}

		[Token(Token = "0x600090B")]
		[Address(RVA = "0xFBAAF8", Offset = "0xFBAAF8", VA = "0xFBAAF8")]
		[IteratorStateMachine(typeof(<Step>d__33))]
		private IEnumerator Step(Vector3 stepStartPosition, Vector3 targetPosition)
		{
			return null;
		}

		[Token(Token = "0x600090C")]
		[Address(RVA = "0xFBB200", Offset = "0xFBB200", VA = "0xFBB200")]
		public MechSpiderLeg()
		{
		}
	}
	[Token(Token = "0x2000116")]
	public class MechSpiderParticles : MonoBehaviour
	{
		[Token(Token = "0x4000736")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MechSpiderController mechSpiderController;

		[Token(Token = "0x4000737")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ParticleSystem particles;

		[Token(Token = "0x6000913")]
		[Address(RVA = "0xFBB590", Offset = "0xFBB590", VA = "0xFBB590")]
		private void Start()
		{
		}

		[Token(Token = "0x6000914")]
		[Address(RVA = "0xFBB66C", Offset = "0xFBB66C", VA = "0xFBB66C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000915")]
		[Address(RVA = "0xFBB8E0", Offset = "0xFBB8E0", VA = "0xFBB8E0")]
		public MechSpiderParticles()
		{
		}
	}
	[Token(Token = "0x2000117")]
	public class AnimationWarping : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x2000118")]
		public struct Warp
		{
			[Token(Token = "0x400073C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Tooltip("Layer of the 'Animation State' in the Animator.")]
			public int animationLayer;

			[Token(Token = "0x400073D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Tooltip("Name of the state in the Animator to warp.")]
			public string animationState;

			[Token(Token = "0x400073E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("Warping weight by normalized time of the animation state.")]
			public AnimationCurve weightCurve;

			[Token(Token = "0x400073F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("Animated point to warp from. This should be in character space so keep this Transform parented to the root of the character.")]
			public Transform warpFrom;

			[Token(Token = "0x4000740")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("World space point to warp to.")]
			public Transform warpTo;

			[Token(Token = "0x4000741")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("Which FBBIK effector to use?")]
			public FullBodyBipedEffector effector;
		}

		[Serializable]
		[Token(Token = "0x2000119")]
		public enum EffectorMode
		{
			[Token(Token = "0x4000743")]
			PositionOffset,
			[Token(Token = "0x4000744")]
			Position
		}

		[Token(Token = "0x4000738")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Reference to the Animator component to use")]
		public Animator animator;

		[Token(Token = "0x4000739")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Using effector.positionOffset or effector.position with effector.positionWeight? The former will enable you to use effector.position for other things, the latter will weigh in the effectors, hence using Reach and Pull in the process.")]
		public EffectorMode effectorMode;

		[Token(Token = "0x400073A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The array of warps, can have multiple simultaneous warps.")]
		[Space(10f)]
		public Warp[] warps;

		[Token(Token = "0x400073B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private EffectorMode lastMode;

		[Token(Token = "0x6000916")]
		[Address(RVA = "0xFBB8E8", Offset = "0xFBB8E8", VA = "0xFBB8E8", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000917")]
		[Address(RVA = "0xFBB908", Offset = "0xFBB908", VA = "0xFBB908")]
		public float GetWarpWeight(int warpIndex)
		{
			return default(float);
		}

		[Token(Token = "0x6000918")]
		[Address(RVA = "0xFBBB20", Offset = "0xFBBB20", VA = "0xFBBB20", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6000919")]
		[Address(RVA = "0xFBBDD8", Offset = "0xFBBDD8", VA = "0xFBBDD8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600091A")]
		[Address(RVA = "0xFBBE6C", Offset = "0xFBBE6C", VA = "0xFBBE6C")]
		public AnimationWarping()
		{
		}
	}
	[Token(Token = "0x200011A")]
	[RequireComponent(typeof(Animator))]
	public class AnimatorController3rdPerson : MonoBehaviour
	{
		[Token(Token = "0x4000745")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float rotateSpeed;

		[Token(Token = "0x4000746")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float blendSpeed;

		[Token(Token = "0x4000747")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float maxAngle;

		[Token(Token = "0x4000748")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float moveSpeed;

		[Token(Token = "0x4000749")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float rootMotionWeight;

		[Token(Token = "0x400074A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected Animator animator;

		[Token(Token = "0x400074B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected Vector3 moveBlend;

		[Token(Token = "0x400074C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		protected Vector3 moveInput;

		[Token(Token = "0x400074D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected Vector3 velocity;

		[Token(Token = "0x600091B")]
		[Address(RVA = "0xFBBE74", Offset = "0xFBBE74", VA = "0xFBBE74", Slot = "4")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x600091C")]
		[Address(RVA = "0xFBBECC", Offset = "0xFBBECC", VA = "0xFBBECC")]
		private void OnAnimatorMove()
		{
		}

		[Token(Token = "0x600091D")]
		[Address(RVA = "0xFBC0D4", Offset = "0xFBC0D4", VA = "0xFBC0D4", Slot = "5")]
		public virtual void Move(Vector3 moveInput, bool isMoving, Vector3 faceDirection, Vector3 aimTarget)
		{
		}

		[Token(Token = "0x600091E")]
		[Address(RVA = "0xFBC2FC", Offset = "0xFBC2FC", VA = "0xFBC2FC")]
		public AnimatorController3rdPerson()
		{
		}
	}
	[Token(Token = "0x200011B")]
	[RequireComponent(typeof(AimIK))]
	[RequireComponent(typeof(FullBodyBipedIK))]
	public class AnimatorController3rdPersonIK : AnimatorController3rdPerson
	{
		[Token(Token = "0x400074E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Range(0f, 1f)]
		public float headLookWeight;

		[Token(Token = "0x400074F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Vector3 gunHoldOffset;

		[Token(Token = "0x4000750")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public Vector3 leftHandOffset;

		[Token(Token = "0x4000751")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Recoil recoil;

		[Token(Token = "0x4000752")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private AimIK aim;

		[Token(Token = "0x4000753")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private FullBodyBipedIK ik;

		[Token(Token = "0x4000754")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector3 headLookAxis;

		[Token(Token = "0x4000755")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private Vector3 leftHandPosRelToRightHand;

		[Token(Token = "0x4000756")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Quaternion leftHandRotRelToRightHand;

		[Token(Token = "0x4000757")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Vector3 aimTarget;

		[Token(Token = "0x4000758")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private Quaternion rightHandRotation;

		[Token(Token = "0x600091F")]
		[Address(RVA = "0xFBC310", Offset = "0xFBC310", VA = "0xFBC310", Slot = "4")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000920")]
		[Address(RVA = "0xFBC4E4", Offset = "0xFBC4E4", VA = "0xFBC4E4", Slot = "5")]
		public override void Move(Vector3 moveInput, bool isMoving, Vector3 faceDirection, Vector3 aimTarget)
		{
		}

		[Token(Token = "0x6000921")]
		[Address(RVA = "0xFBC554", Offset = "0xFBC554", VA = "0xFBC554")]
		private void Read()
		{
		}

		[Token(Token = "0x6000922")]
		[Address(RVA = "0xFBC68C", Offset = "0xFBC68C", VA = "0xFBC68C")]
		private void AimIK()
		{
		}

		[Token(Token = "0x6000923")]
		[Address(RVA = "0xFBC6E8", Offset = "0xFBC6E8", VA = "0xFBC6E8")]
		private void FBBIK()
		{
		}

		[Token(Token = "0x6000924")]
		[Address(RVA = "0xFBCD50", Offset = "0xFBCD50", VA = "0xFBCD50")]
		private void OnPreRead()
		{
		}

		[Token(Token = "0x6000925")]
		[Address(RVA = "0xFBCB64", Offset = "0xFBCB64", VA = "0xFBCB64")]
		private void HeadLookAt(Vector3 lookAtTarget)
		{
		}

		[Token(Token = "0x6000926")]
		[Address(RVA = "0xFBCFF4", Offset = "0xFBCFF4", VA = "0xFBCFF4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000927")]
		[Address(RVA = "0xFBD120", Offset = "0xFBD120", VA = "0xFBD120")]
		public AnimatorController3rdPersonIK()
		{
		}
	}
	[Token(Token = "0x200011C")]
	[RequireComponent(typeof(FullBodyBipedIK))]
	public class CharacterAnimationThirdPersonIK : CharacterAnimationThirdPerson
	{
		[Token(Token = "0x4000759")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private FullBodyBipedIK ik;

		[Token(Token = "0x6000928")]
		[Address(RVA = "0xFBD13C", Offset = "0xFBD13C", VA = "0xFBD13C", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000929")]
		[Address(RVA = "0xFBD1A0", Offset = "0xFBD1A0", VA = "0xFBD1A0", Slot = "7")]
		protected override void LateUpdate()
		{
		}

		[Token(Token = "0x600092A")]
		[Address(RVA = "0xFBD4DC", Offset = "0xFBD4DC", VA = "0xFBD4DC")]
		private void RotateEffector(IKEffector effector, Quaternion rotation, float mlp)
		{
		}

		[Token(Token = "0x600092B")]
		[Address(RVA = "0xFBD5CC", Offset = "0xFBD5CC", VA = "0xFBD5CC")]
		public CharacterAnimationThirdPersonIK()
		{
		}
	}
	[Token(Token = "0x200011D")]
	[RequireComponent(typeof(AnimatorController3rdPerson))]
	public class CharacterController3rdPerson : MonoBehaviour
	{
		[Token(Token = "0x400075A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public CameraController cam;

		[Token(Token = "0x400075B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private AnimatorController3rdPerson animatorController;

		[Token(Token = "0x170000F2")]
		private static Vector3 inputVector
		{
			[Token(Token = "0x600092E")]
			[Address(RVA = "0xFBD834", Offset = "0xFBD834", VA = "0xFBD834")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170000F3")]
		private static Vector3 inputVectorRaw
		{
			[Token(Token = "0x600092F")]
			[Address(RVA = "0xFBD8B4", Offset = "0xFBD8B4", VA = "0xFBD8B4")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x600092C")]
		[Address(RVA = "0xFBD5D4", Offset = "0xFBD5D4", VA = "0xFBD5D4")]
		private void Start()
		{
		}

		[Token(Token = "0x600092D")]
		[Address(RVA = "0xFBD644", Offset = "0xFBD644", VA = "0xFBD644")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000930")]
		[Address(RVA = "0xFBD934", Offset = "0xFBD934", VA = "0xFBD934")]
		public CharacterController3rdPerson()
		{
		}
	}
	[Token(Token = "0x200011E")]
	public class EffectorOffset : OffsetModifier
	{
		[Token(Token = "0x400075C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Range(0f, 1f)]
		public float handsMaintainRelativePositionWeight;

		[Token(Token = "0x400075D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 bodyOffset;

		[Token(Token = "0x400075E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector3 leftShoulderOffset;

		[Token(Token = "0x400075F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector3 rightShoulderOffset;

		[Token(Token = "0x4000760")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public Vector3 leftThighOffset;

		[Token(Token = "0x4000761")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Vector3 rightThighOffset;

		[Token(Token = "0x4000762")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public Vector3 leftHandOffset;

		[Token(Token = "0x4000763")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Vector3 rightHandOffset;

		[Token(Token = "0x4000764")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public Vector3 leftFootOffset;

		[Token(Token = "0x4000765")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Vector3 rightFootOffset;

		[Token(Token = "0x6000931")]
		[Address(RVA = "0xFBD93C", Offset = "0xFBD93C", VA = "0xFBD93C", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6000932")]
		[Address(RVA = "0xFBDD98", Offset = "0xFBDD98", VA = "0xFBDD98")]
		public EffectorOffset()
		{
		}
	}
	[Token(Token = "0x200011F")]
	public class ExplosionDemo : MonoBehaviour
	{
		[Token(Token = "0x4000766")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SimpleLocomotion character;

		[Token(Token = "0x4000767")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float forceMlp;

		[Token(Token = "0x4000768")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float upForce;

		[Token(Token = "0x4000769")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float weightFalloffSpeed;

		[Token(Token = "0x400076A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimationCurve weightFalloff;

		[Token(Token = "0x400076B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AnimationCurve explosionForceByDistance;

		[Token(Token = "0x400076C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AnimationCurve scale;

		[Token(Token = "0x400076D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float weight;

		[Token(Token = "0x400076E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 defaultScale;

		[Token(Token = "0x400076F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Rigidbody r;

		[Token(Token = "0x4000770")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private FullBodyBipedIK ik;

		[Token(Token = "0x6000933")]
		[Address(RVA = "0xFBDDA0", Offset = "0xFBDDA0", VA = "0xFBDDA0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000934")]
		[Address(RVA = "0xFBDE58", Offset = "0xFBDE58", VA = "0xFBDE58")]
		private void Update()
		{
		}

		[Token(Token = "0x6000935")]
		[Address(RVA = "0xFBE2B4", Offset = "0xFBE2B4", VA = "0xFBE2B4")]
		private void SetEffectorWeights(float w)
		{
		}

		[Token(Token = "0x6000936")]
		[Address(RVA = "0xFBE354", Offset = "0xFBE354", VA = "0xFBE354")]
		public ExplosionDemo()
		{
		}
	}
	[Token(Token = "0x2000120")]
	public class FBBIKSettings : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000121")]
		public class Limb
		{
			[Token(Token = "0x4000779")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public FBIKChain.Smoothing reachSmoothing;

			[Token(Token = "0x400077A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float maintainRelativePositionWeight;

			[Token(Token = "0x400077B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float mappingWeight;

			[Token(Token = "0x600093B")]
			[Address(RVA = "0xFBE4E8", Offset = "0xFBE4E8", VA = "0xFBE4E8")]
			public void Apply(FullBodyBipedChain chain, IKSolverFullBodyBiped solver)
			{
			}

			[Token(Token = "0x600093C")]
			[Address(RVA = "0xFBE60C", Offset = "0xFBE60C", VA = "0xFBE60C")]
			public Limb()
			{
			}
		}

		[Token(Token = "0x4000771")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x4000772")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool disableAfterStart;

		[Token(Token = "0x4000773")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Limb leftArm;

		[Token(Token = "0x4000774")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Limb rightArm;

		[Token(Token = "0x4000775")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Limb leftLeg;

		[Token(Token = "0x4000776")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Limb rightLeg;

		[Token(Token = "0x4000777")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float rootPin;

		[Token(Token = "0x4000778")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool bodyEffectChildNodes;

		[Token(Token = "0x6000937")]
		[Address(RVA = "0xFBE3C4", Offset = "0xFBE3C4", VA = "0xFBE3C4")]
		public void UpdateSettings()
		{
		}

		[Token(Token = "0x6000938")]
		[Address(RVA = "0xFBE560", Offset = "0xFBE560", VA = "0xFBE560")]
		private void Start()
		{
		}

		[Token(Token = "0x6000939")]
		[Address(RVA = "0xFBE5F8", Offset = "0xFBE5F8", VA = "0xFBE5F8")]
		private void Update()
		{
		}

		[Token(Token = "0x600093A")]
		[Address(RVA = "0xFBE5FC", Offset = "0xFBE5FC", VA = "0xFBE5FC")]
		public FBBIKSettings()
		{
		}
	}
	[Token(Token = "0x2000122")]
	public class FBIKBendGoal : MonoBehaviour
	{
		[Token(Token = "0x400077C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x400077D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FullBodyBipedChain chain;

		[Token(Token = "0x400077E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float weight;

		[Token(Token = "0x600093D")]
		[Address(RVA = "0xFBE61C", Offset = "0xFBE61C", VA = "0xFBE61C")]
		private void Start()
		{
		}

		[Token(Token = "0x600093E")]
		[Address(RVA = "0xFBE684", Offset = "0xFBE684", VA = "0xFBE684")]
		private void Update()
		{
		}

		[Token(Token = "0x600093F")]
		[Address(RVA = "0xFBE758", Offset = "0xFBE758", VA = "0xFBE758")]
		public FBIKBendGoal()
		{
		}
	}
	[Token(Token = "0x2000123")]
	public class FBIKBoxing : MonoBehaviour
	{
		[Token(Token = "0x400077F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The target we want to hit")]
		public Transform target;

		[Token(Token = "0x4000780")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The pin Transform is used to reference the exact hit point in the animation (used by AimIK to aim the upper body to follow the target).In Legacy and Generic modes you can just create and position a reference point in your animating software and include it in the FBX. Then in Unity if you added a GameObject with the exact same name under the character's root, it would be animated to the required position.In Humanoid mode however, Mecanim loses track of any Transform that does not belong to the avatar, so in this case the pin point has to be manually set inside the Unity Editor.")]
		public Transform pin;

		[Token(Token = "0x4000781")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The Full Body Biped IK component")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x4000782")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The Aim IK component. Aim IK is ust used for following the target slightly with the body.")]
		public AimIK aim;

		[Token(Token = "0x4000783")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The master weight")]
		public float weight;

		[Token(Token = "0x4000784")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("The effector type of the punching hand")]
		public FullBodyBipedEffector effector;

		[Token(Token = "0x4000785")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Weight of aiming the body to follow the target")]
		public AnimationCurve aimWeight;

		[Token(Token = "0x4000786")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Animator animator;

		[Token(Token = "0x6000940")]
		[Address(RVA = "0xFBE760", Offset = "0xFBE760", VA = "0xFBE760")]
		private void Start()
		{
		}

		[Token(Token = "0x6000941")]
		[Address(RVA = "0xFBE7B8", Offset = "0xFBE7B8", VA = "0xFBE7B8")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000942")]
		[Address(RVA = "0xFBE950", Offset = "0xFBE950", VA = "0xFBE950")]
		public FBIKBoxing()
		{
		}
	}
	[Token(Token = "0x2000124")]
	public class FBIKHandsOnProp : MonoBehaviour
	{
		[Token(Token = "0x4000787")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x4000788")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool leftHanded;

		[Token(Token = "0x6000943")]
		[Address(RVA = "0xFBE958", Offset = "0xFBE958", VA = "0xFBE958")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000944")]
		[Address(RVA = "0xFBEA38", Offset = "0xFBEA38", VA = "0xFBEA38")]
		private void OnPreRead()
		{
		}

		[Token(Token = "0x6000945")]
		[Address(RVA = "0xFBEAC4", Offset = "0xFBEAC4", VA = "0xFBEAC4")]
		private void HandsOnProp(IKEffector mainHand, IKEffector otherHand)
		{
		}

		[Token(Token = "0x6000946")]
		[Address(RVA = "0xFBEF98", Offset = "0xFBEF98", VA = "0xFBEF98")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000947")]
		[Address(RVA = "0xFBF0C4", Offset = "0xFBF0C4", VA = "0xFBF0C4")]
		public FBIKHandsOnProp()
		{
		}
	}
	[Token(Token = "0x2000125")]
	public class FPSAiming : MonoBehaviour
	{
		[Token(Token = "0x4000789")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0f, 1f)]
		public float aimWeight;

		[Token(Token = "0x400078A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Range(0f, 1f)]
		public float sightWeight;

		[Token(Token = "0x400078B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 180f)]
		public float maxAngle;

		[Token(Token = "0x400078C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector3 aimOffset;

		[Token(Token = "0x400078D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool animatePhysics;

		[Token(Token = "0x400078E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform gun;

		[Token(Token = "0x400078F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform gunTarget;

		[Token(Token = "0x4000790")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x4000791")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AimIK gunAim;

		[Token(Token = "0x4000792")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public CameraControllerFPS cam;

		[Token(Token = "0x4000793")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Recoil recoil;

		[Token(Token = "0x4000794")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Range(0f, 1f)]
		public float cameraRecoilWeight;

		[Token(Token = "0x4000795")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public Vector3 gunTargetDefaultLocalPosition;

		[Token(Token = "0x4000796")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Vector3 gunTargetDefaultLocalRotation;

		[Token(Token = "0x4000797")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private Vector3 camDefaultLocalPosition;

		[Token(Token = "0x4000798")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector3 camRelativeToGunTarget;

		[Token(Token = "0x4000799")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private bool updateFrame;

		[Token(Token = "0x6000948")]
		[Address(RVA = "0xFBF0CC", Offset = "0xFBF0CC", VA = "0xFBF0CC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000949")]
		[Address(RVA = "0xFBF22C", Offset = "0xFBF22C", VA = "0xFBF22C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x600094A")]
		[Address(RVA = "0xFBF238", Offset = "0xFBF238", VA = "0xFBF238")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600094B")]
		[Address(RVA = "0xFBF4F8", Offset = "0xFBF4F8", VA = "0xFBF4F8")]
		private void Aiming()
		{
		}

		[Token(Token = "0x600094C")]
		[Address(RVA = "0xFBF684", Offset = "0xFBF684", VA = "0xFBF684")]
		private void LookDownTheSight()
		{
		}

		[Token(Token = "0x600094D")]
		[Address(RVA = "0xFBF2FC", Offset = "0xFBF2FC", VA = "0xFBF2FC")]
		private void RotateCharacter()
		{
		}

		[Token(Token = "0x600094E")]
		[Address(RVA = "0xFC034C", Offset = "0xFC034C", VA = "0xFC034C")]
		public FPSAiming()
		{
		}
	}
	[Token(Token = "0x2000126")]
	[RequireComponent(typeof(FPSAiming))]
	[RequireComponent(typeof(Animator))]
	public class FPSCharacter : MonoBehaviour
	{
		[Token(Token = "0x400079A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0f, 1f)]
		public float walkSpeed;

		[Token(Token = "0x400079B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float sVel;

		[Token(Token = "0x400079C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Animator animator;

		[Token(Token = "0x400079D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private FPSAiming FPSAiming;

		[Token(Token = "0x600094F")]
		[Address(RVA = "0xFC036C", Offset = "0xFC036C", VA = "0xFC036C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000950")]
		[Address(RVA = "0xFC03FC", Offset = "0xFC03FC", VA = "0xFC03FC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000951")]
		[Address(RVA = "0xFC04F8", Offset = "0xFC04F8", VA = "0xFC04F8")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000952")]
		[Address(RVA = "0xFC05A4", Offset = "0xFC05A4", VA = "0xFC05A4")]
		public FPSCharacter()
		{
		}
	}
	[Token(Token = "0x2000127")]
	public class HitReactionTrigger : MonoBehaviour
	{
		[Token(Token = "0x400079E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HitReaction hitReaction;

		[Token(Token = "0x400079F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float hitForce;

		[Token(Token = "0x40007A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string colliderName;

		[Token(Token = "0x6000953")]
		[Address(RVA = "0xFC05B4", Offset = "0xFC05B4", VA = "0xFC05B4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000954")]
		[Address(RVA = "0xFC0704", Offset = "0xFC0704", VA = "0xFC0704")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000955")]
		[Address(RVA = "0xFC0868", Offset = "0xFC0868", VA = "0xFC0868")]
		public HitReactionTrigger()
		{
		}
	}
	[Token(Token = "0x2000128")]
	public class HoldingHands : MonoBehaviour
	{
		[Token(Token = "0x40007A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FullBodyBipedIK rightHandChar;

		[Token(Token = "0x40007A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FullBodyBipedIK leftHandChar;

		[Token(Token = "0x40007A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform rightHandTarget;

		[Token(Token = "0x40007A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform leftHandTarget;

		[Token(Token = "0x40007A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float crossFade;

		[Token(Token = "0x40007A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float speed;

		[Token(Token = "0x40007A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Quaternion rightHandRotation;

		[Token(Token = "0x40007A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Quaternion leftHandRotation;

		[Token(Token = "0x6000956")]
		[Address(RVA = "0xFC0878", Offset = "0xFC0878", VA = "0xFC0878")]
		private void Start()
		{
		}

		[Token(Token = "0x6000957")]
		[Address(RVA = "0xFC0A44", Offset = "0xFC0A44", VA = "0xFC0A44")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000958")]
		[Address(RVA = "0xFC0E54", Offset = "0xFC0E54", VA = "0xFC0E54")]
		public HoldingHands()
		{
		}
	}
	[Token(Token = "0x2000129")]
	public class InteractionC2CDemo : MonoBehaviour
	{
		[Token(Token = "0x40007A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InteractionSystem character1;

		[Token(Token = "0x40007AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InteractionSystem character2;

		[Token(Token = "0x40007AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public InteractionObject handShake;

		[Token(Token = "0x6000959")]
		[Address(RVA = "0xFC0E64", Offset = "0xFC0E64", VA = "0xFC0E64")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x600095A")]
		[Address(RVA = "0xFC0F4C", Offset = "0xFC0F4C", VA = "0xFC0F4C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600095B")]
		[Address(RVA = "0xFC1038", Offset = "0xFC1038", VA = "0xFC1038")]
		public InteractionC2CDemo()
		{
		}
	}
	[Token(Token = "0x200012A")]
	public class InteractionDemo : MonoBehaviour
	{
		[Token(Token = "0x40007AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InteractionSystem interactionSystem;

		[Token(Token = "0x40007AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool interrupt;

		[Token(Token = "0x40007AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public InteractionObject ball;

		[Token(Token = "0x40007AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public InteractionObject benchMain;

		[Token(Token = "0x40007B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public InteractionObject benchHands;

		[Token(Token = "0x40007B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public InteractionObject button;

		[Token(Token = "0x40007B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public InteractionObject cigarette;

		[Token(Token = "0x40007B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public InteractionObject door;

		[Token(Token = "0x40007B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool isSitting;

		[Token(Token = "0x600095C")]
		[Address(RVA = "0xFC1040", Offset = "0xFC1040", VA = "0xFC1040")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x600095D")]
		[Address(RVA = "0xFC1540", Offset = "0xFC1540", VA = "0xFC1540")]
		public InteractionDemo()
		{
		}
	}
	[Token(Token = "0x200012B")]
	[RequireComponent(typeof(InteractionSystem))]
	public class InteractionSystemTestGUI : MonoBehaviour
	{
		[Token(Token = "0x40007B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The object to interact to")]
		public InteractionObject interactionObject;

		[Token(Token = "0x40007B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The effectors to interact with")]
		public FullBodyBipedEffector[] effectors;

		[Token(Token = "0x40007B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private InteractionSystem interactionSystem;

		[Token(Token = "0x600095E")]
		[Address(RVA = "0xFC1548", Offset = "0xFC1548", VA = "0xFC1548")]
		private void Awake()
		{
		}

		[Token(Token = "0x600095F")]
		[Address(RVA = "0xFC15A0", Offset = "0xFC15A0", VA = "0xFC15A0")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000960")]
		[Address(RVA = "0xFC184C", Offset = "0xFC184C", VA = "0xFC184C")]
		public InteractionSystemTestGUI()
		{
		}
	}
	[Token(Token = "0x200012C")]
	public class KissingRig : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200012D")]
		public class Partner
		{
			[Token(Token = "0x40007BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public FullBodyBipedIK ik;

			[Token(Token = "0x40007BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Transform mouth;

			[Token(Token = "0x40007BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Transform mouthTarget;

			[Token(Token = "0x40007BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Transform touchTargetLeftHand;

			[Token(Token = "0x40007C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Transform touchTargetRightHand;

			[Token(Token = "0x40007C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public float bodyWeightHorizontal;

			[Token(Token = "0x40007C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public float bodyWeightVertical;

			[Token(Token = "0x40007C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public float neckRotationWeight;

			[Token(Token = "0x40007C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			public float headTiltAngle;

			[Token(Token = "0x40007C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Vector3 headTiltAxis;

			[Token(Token = "0x40007C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			private Quaternion neckRotation;

			[Token(Token = "0x170000F4")]
			private Transform neck
			{
				[Token(Token = "0x6000966")]
				[Address(RVA = "0xFC2058", Offset = "0xFC2058", VA = "0xFC2058")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000964")]
			[Address(RVA = "0xFC187C", Offset = "0xFC187C", VA = "0xFC187C")]
			public void Initiate()
			{
			}

			[Token(Token = "0x6000965")]
			[Address(RVA = "0xFC18F8", Offset = "0xFC18F8", VA = "0xFC18F8")]
			public void Update(float weight)
			{
			}

			[Token(Token = "0x6000967")]
			[Address(RVA = "0xFC1EF0", Offset = "0xFC1EF0", VA = "0xFC1EF0")]
			private void InverseTransformEffector(FullBodyBipedEffector effector, Transform target, Vector3 targetPosition, float weight)
			{
			}

			[Token(Token = "0x6000968")]
			[Address(RVA = "0xFC20A4", Offset = "0xFC20A4", VA = "0xFC20A4")]
			public Partner()
			{
			}
		}

		[Token(Token = "0x40007B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Partner partner1;

		[Token(Token = "0x40007B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Partner partner2;

		[Token(Token = "0x40007BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float weight;

		[Token(Token = "0x40007BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int iterations;

		[Token(Token = "0x6000961")]
		[Address(RVA = "0xFC1854", Offset = "0xFC1854", VA = "0xFC1854")]
		private void Start()
		{
		}

		[Token(Token = "0x6000962")]
		[Address(RVA = "0xFC189C", Offset = "0xFC189C", VA = "0xFC189C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000963")]
		[Address(RVA = "0xFC1EE0", Offset = "0xFC1EE0", VA = "0xFC1EE0")]
		public KissingRig()
		{
		}
	}
	[Token(Token = "0x200012E")]
	public class MotionAbsorb : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x200012F")]
		public enum Mode
		{
			[Token(Token = "0x40007CF")]
			Position,
			[Token(Token = "0x40007D0")]
			PositionOffset
		}

		[Serializable]
		[Token(Token = "0x2000130")]
		public class Absorber
		{
			[Token(Token = "0x40007D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The type of effector (hand, foot, shoulder...) - this is just an enum")]
			public FullBodyBipedEffector effector;

			[Token(Token = "0x40007D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("How much should motion be absorbed on this effector")]
			public float weight;

			[Token(Token = "0x40007D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private Vector3 position;

			[Token(Token = "0x40007D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			private Quaternion rotation;

			[Token(Token = "0x40007D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private IKEffector e;

			[Token(Token = "0x600096F")]
			[Address(RVA = "0xFC2230", Offset = "0xFC2230", VA = "0xFC2230")]
			public void SetToBone(IKSolverFullBodyBiped solver, Mode mode)
			{
			}

			[Token(Token = "0x6000970")]
			[Address(RVA = "0xFC2418", Offset = "0xFC2418", VA = "0xFC2418")]
			public void UpdateEffectorWeights(float w)
			{
			}

			[Token(Token = "0x6000971")]
			[Address(RVA = "0xFC243C", Offset = "0xFC243C", VA = "0xFC243C")]
			public void SetPosition(float w)
			{
			}

			[Token(Token = "0x6000972")]
			[Address(RVA = "0xFC254C", Offset = "0xFC254C", VA = "0xFC254C")]
			public void SetRotation(float w)
			{
			}

			[Token(Token = "0x6000973")]
			[Address(RVA = "0xFC2704", Offset = "0xFC2704", VA = "0xFC2704")]
			public Absorber()
			{
			}
		}

		[Token(Token = "0x40007C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("Use either effector position, position weight, rotation, rotationWeight or positionOffset and rotating the bone directly.")]
		public Mode mode;

		[Token(Token = "0x40007C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Array containing the absorbers")]
		public Absorber[] absorbers;

		[Token(Token = "0x40007C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Weight falloff curve (how fast will the effect reduce after impact)")]
		public AnimationCurve falloff;

		[Token(Token = "0x40007CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("How fast will the impact fade away. (if 1, effect lasts for 1 second)")]
		public float falloffSpeed;

		[Token(Token = "0x40007CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float timer;

		[Token(Token = "0x40007CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float w;

		[Token(Token = "0x40007CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Mode initialMode;

		[Token(Token = "0x6000969")]
		[Address(RVA = "0xFC20B8", Offset = "0xFC20B8", VA = "0xFC20B8", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x600096A")]
		[Address(RVA = "0xFC21B0", Offset = "0xFC21B0", VA = "0xFC21B0")]
		private void OnCollisionEnter(Collision c)
		{
		}

		[Token(Token = "0x600096B")]
		[Address(RVA = "0xFC230C", Offset = "0xFC230C", VA = "0xFC230C", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x600096C")]
		[Address(RVA = "0xFC24D0", Offset = "0xFC24D0", VA = "0xFC24D0")]
		private void AfterIK()
		{
		}

		[Token(Token = "0x600096D")]
		[Address(RVA = "0xFC25BC", Offset = "0xFC25BC", VA = "0xFC25BC", Slot = "6")]
		protected override void OnDestroy()
		{
		}

		[Token(Token = "0x600096E")]
		[Address(RVA = "0xFC26F4", Offset = "0xFC26F4", VA = "0xFC26F4")]
		public MotionAbsorb()
		{
		}
	}
	[Token(Token = "0x2000131")]
	public class MotionAbsorbCharacter : MonoBehaviour
	{
		[Token(Token = "0x40007D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Animator animator;

		[Token(Token = "0x40007D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MotionAbsorb motionAbsorb;

		[Token(Token = "0x40007D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform cube;

		[Token(Token = "0x40007D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float cubeRandomPosition;

		[Token(Token = "0x40007DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AnimationCurve motionAbsorbWeight;

		[Token(Token = "0x40007DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 cubeDefaultPosition;

		[Token(Token = "0x40007DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private AnimatorStateInfo info;

		[Token(Token = "0x40007DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Rigidbody cubeRigidbody;

		[Token(Token = "0x6000974")]
		[Address(RVA = "0xFC2764", Offset = "0xFC2764", VA = "0xFC2764")]
		private void Start()
		{
		}

		[Token(Token = "0x6000975")]
		[Address(RVA = "0xFC27DC", Offset = "0xFC27DC", VA = "0xFC27DC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000976")]
		[Address(RVA = "0xFC28AC", Offset = "0xFC28AC", VA = "0xFC28AC")]
		private void SwingStart()
		{
		}

		[Token(Token = "0x6000977")]
		[Address(RVA = "0xFC29F4", Offset = "0xFC29F4", VA = "0xFC29F4")]
		public MotionAbsorbCharacter()
		{
		}
	}
	[Token(Token = "0x2000132")]
	public class OffsetEffector : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x2000133")]
		public class EffectorLink
		{
			[Token(Token = "0x40007DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public FullBodyBipedEffector effectorType;

			[Token(Token = "0x40007E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float weightMultiplier;

			[Token(Token = "0x40007E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[HideInInspector]
			public Vector3 localPosition;

			[Token(Token = "0x600097B")]
			[Address(RVA = "0xFC2C74", Offset = "0xFC2C74", VA = "0xFC2C74")]
			public EffectorLink()
			{
			}
		}

		[Token(Token = "0x40007DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public EffectorLink[] effectorLinks;

		[Token(Token = "0x6000978")]
		[Address(RVA = "0xFC2A08", Offset = "0xFC2A08", VA = "0xFC2A08", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000979")]
		[Address(RVA = "0xFC2AF4", Offset = "0xFC2AF4", VA = "0xFC2AF4", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x600097A")]
		[Address(RVA = "0xFC2C6C", Offset = "0xFC2C6C", VA = "0xFC2C6C")]
		public OffsetEffector()
		{
		}
	}
	[Token(Token = "0x2000134")]
	[RequireComponent(typeof(FullBodyBipedIK))]
	public class PendulumExample : MonoBehaviour
	{
		[Token(Token = "0x40007E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The master weight of this script.")]
		[Range(0f, 1f)]
		public float weight;

		[Token(Token = "0x40007E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Multiplier for the distance of the root to the target.")]
		public float hangingDistanceMlp;

		[Token(Token = "0x40007E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		[Tooltip("Where does the root of the character land when weight is blended out?")]
		public Vector3 rootTargetPosition;

		[Token(Token = "0x40007E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("How is the root of the character rotated when weight is blended out?")]
		[HideInInspector]
		public Quaternion rootTargetRotation;

		[Token(Token = "0x40007E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform target;

		[Token(Token = "0x40007E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform leftHandTarget;

		[Token(Token = "0x40007E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform rightHandTarget;

		[Token(Token = "0x40007E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform leftFootTarget;

		[Token(Token = "0x40007EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform rightFootTarget;

		[Token(Token = "0x40007EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Transform pelvisTarget;

		[Token(Token = "0x40007EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Transform bodyTarget;

		[Token(Token = "0x40007ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Transform headTarget;

		[Token(Token = "0x40007EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Vector3 pelvisDownAxis;

		[Token(Token = "0x40007EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private FullBodyBipedIK ik;

		[Token(Token = "0x40007F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Quaternion rootRelativeToPelvis;

		[Token(Token = "0x40007F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Vector3 pelvisToRoot;

		[Token(Token = "0x40007F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private float lastWeight;

		[Token(Token = "0x600097C")]
		[Address(RVA = "0xFC2C84", Offset = "0xFC2C84", VA = "0xFC2C84")]
		private void Start()
		{
		}

		[Token(Token = "0x600097D")]
		[Address(RVA = "0xFC2F98", Offset = "0xFC2F98", VA = "0xFC2F98")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600097E")]
		[Address(RVA = "0xFC3794", Offset = "0xFC3794", VA = "0xFC3794")]
		public PendulumExample()
		{
		}
	}
	[Token(Token = "0x2000135")]
	public abstract class PickUp2Handed : MonoBehaviour
	{
		[Token(Token = "0x40007F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int GUIspace;

		[Token(Token = "0x40007F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InteractionSystem interactionSystem;

		[Token(Token = "0x40007F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public InteractionObject obj;

		[Token(Token = "0x40007F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform pivot;

		[Token(Token = "0x40007F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform holdPoint;

		[Token(Token = "0x40007F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float pickUpTime;

		[Token(Token = "0x40007F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float holdWeight;

		[Token(Token = "0x40007FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float holdWeightVel;

		[Token(Token = "0x40007FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 pickUpPosition;

		[Token(Token = "0x40007FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Quaternion pickUpRotation;

		[Token(Token = "0x170000F5")]
		private bool holding
		{
			[Token(Token = "0x6000986")]
			[Address(RVA = "0xFC3A14", Offset = "0xFC3A14", VA = "0xFC3A14")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600097F")]
		[Address(RVA = "0xFC3800", Offset = "0xFC3800", VA = "0xFC3800")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000980")]
		protected abstract void RotatePivot();

		[Token(Token = "0x6000981")]
		[Address(RVA = "0xFC3A34", Offset = "0xFC3A34", VA = "0xFC3A34")]
		private void Start()
		{
		}

		[Token(Token = "0x6000982")]
		[Address(RVA = "0xFC3C24", Offset = "0xFC3C24", VA = "0xFC3C24")]
		private void OnPause(FullBodyBipedEffector effectorType, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x6000983")]
		[Address(RVA = "0xFC3D94", Offset = "0xFC3D94", VA = "0xFC3D94")]
		private void OnStart(FullBodyBipedEffector effectorType, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x6000984")]
		[Address(RVA = "0xFC3E64", Offset = "0xFC3E64", VA = "0xFC3E64")]
		private void OnDrop(FullBodyBipedEffector effectorType, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x6000985")]
		[Address(RVA = "0xFC3F84", Offset = "0xFC3F84", VA = "0xFC3F84")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000987")]
		[Address(RVA = "0xFC40F8", Offset = "0xFC40F8", VA = "0xFC40F8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000988")]
		[Address(RVA = "0xFC4334", Offset = "0xFC4334", VA = "0xFC4334")]
		protected PickUp2Handed()
		{
		}
	}
	[Token(Token = "0x2000136")]
	public class PickUpBox : PickUp2Handed
	{
		[Token(Token = "0x6000989")]
		[Address(RVA = "0xFC4348", Offset = "0xFC4348", VA = "0xFC4348", Slot = "4")]
		protected override void RotatePivot()
		{
		}

		[Token(Token = "0x600098A")]
		[Address(RVA = "0xFC4528", Offset = "0xFC4528", VA = "0xFC4528")]
		public PickUpBox()
		{
		}
	}
	[Token(Token = "0x2000137")]
	public class PickUpSphere : PickUp2Handed
	{
		[Token(Token = "0x600098B")]
		[Address(RVA = "0xFC4530", Offset = "0xFC4530", VA = "0xFC4530", Slot = "4")]
		protected override void RotatePivot()
		{
		}

		[Token(Token = "0x600098C")]
		[Address(RVA = "0xFC4644", Offset = "0xFC4644", VA = "0xFC4644")]
		public PickUpSphere()
		{
		}
	}
	[Token(Token = "0x2000138")]
	public class RagdollUtilityDemo : MonoBehaviour
	{
		[Token(Token = "0x40007FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RagdollUtility ragdollUtility;

		[Token(Token = "0x40007FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform root;

		[Token(Token = "0x40007FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Rigidbody pelvis;

		[Token(Token = "0x600098D")]
		[Address(RVA = "0xFC464C", Offset = "0xFC464C", VA = "0xFC464C")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x600098E")]
		[Address(RVA = "0xFC46E4", Offset = "0xFC46E4", VA = "0xFC46E4")]
		private void Update()
		{
		}

		[Token(Token = "0x600098F")]
		[Address(RVA = "0xFC47FC", Offset = "0xFC47FC", VA = "0xFC47FC")]
		public RagdollUtilityDemo()
		{
		}
	}
	[Token(Token = "0x2000139")]
	[RequireComponent(typeof(Recoil))]
	public class RecoilTest : MonoBehaviour
	{
		[Token(Token = "0x4000800")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float magnitude;

		[Token(Token = "0x4000801")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Recoil recoil;

		[Token(Token = "0x6000990")]
		[Address(RVA = "0xFC4804", Offset = "0xFC4804", VA = "0xFC4804")]
		private void Start()
		{
		}

		[Token(Token = "0x6000991")]
		[Address(RVA = "0xFC485C", Offset = "0xFC485C", VA = "0xFC485C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000992")]
		[Address(RVA = "0xFC48A8", Offset = "0xFC48A8", VA = "0xFC48A8")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000993")]
		[Address(RVA = "0xFC4940", Offset = "0xFC4940", VA = "0xFC4940")]
		public RecoilTest()
		{
		}
	}
	[Token(Token = "0x200013A")]
	public class ResetInteractionObject : MonoBehaviour
	{
		[Token(Token = "0x200013B")]
		[CompilerGenerated]
		private sealed class <ResetObject>d__7 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000807")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000808")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000809")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float resetTime;

			[Token(Token = "0x400080A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public ResetInteractionObject <>4__this;

			[Token(Token = "0x170000F6")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600099B")]
				[Address(RVA = "0xFC4CB8", Offset = "0xFC4CB8", VA = "0xFC4CB8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000F7")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600099D")]
				[Address(RVA = "0xFC4D00", Offset = "0xFC4D00", VA = "0xFC4D00", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000998")]
			[Address(RVA = "0xFC4AD4", Offset = "0xFC4AD4", VA = "0xFC4AD4")]
			[DebuggerHidden]
			public <ResetObject>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x6000999")]
			[Address(RVA = "0xFC4B0C", Offset = "0xFC4B0C", VA = "0xFC4B0C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600099A")]
			[Address(RVA = "0xFC4B10", Offset = "0xFC4B10", VA = "0xFC4B10", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600099C")]
			[Address(RVA = "0xFC4CC0", Offset = "0xFC4CC0", VA = "0xFC4CC0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000802")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float resetDelay;

		[Token(Token = "0x4000803")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private Vector3 defaultPosition;

		[Token(Token = "0x4000804")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Quaternion defaultRotation;

		[Token(Token = "0x4000805")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform defaultParent;

		[Token(Token = "0x4000806")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Rigidbody r;

		[Token(Token = "0x6000994")]
		[Address(RVA = "0xFC4950", Offset = "0xFC4950", VA = "0xFC4950")]
		private void Start()
		{
		}

		[Token(Token = "0x6000995")]
		[Address(RVA = "0xFC4A14", Offset = "0xFC4A14", VA = "0xFC4A14")]
		private void OnPickUp(Transform t)
		{
		}

		[Token(Token = "0x6000996")]
		[Address(RVA = "0xFC4A50", Offset = "0xFC4A50", VA = "0xFC4A50")]
		[IteratorStateMachine(typeof(<ResetObject>d__7))]
		private IEnumerator ResetObject(float resetTime)
		{
			return null;
		}

		[Token(Token = "0x6000997")]
		[Address(RVA = "0xFC4AFC", Offset = "0xFC4AFC", VA = "0xFC4AFC")]
		public ResetInteractionObject()
		{
		}
	}
	[Token(Token = "0x200013C")]
	[RequireComponent(typeof(Animator))]
	public class SoccerDemo : MonoBehaviour
	{
		[Token(Token = "0x200013D")]
		[CompilerGenerated]
		private sealed class <ResetDelayed>d__4 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400080E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400080F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000810")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SoccerDemo <>4__this;

			[Token(Token = "0x170000F8")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60009A4")]
				[Address(RVA = "0xFC4FA4", Offset = "0xFC4FA4", VA = "0xFC4FA4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000F9")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60009A6")]
				[Address(RVA = "0xFC4FEC", Offset = "0xFC4FEC", VA = "0xFC4FEC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60009A1")]
			[Address(RVA = "0xFC4E30", Offset = "0xFC4E30", VA = "0xFC4E30")]
			[DebuggerHidden]
			public <ResetDelayed>d__4(int <>1__state)
			{
			}

			[Token(Token = "0x60009A2")]
			[Address(RVA = "0xFC4E60", Offset = "0xFC4E60", VA = "0xFC4E60", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60009A3")]
			[Address(RVA = "0xFC4E64", Offset = "0xFC4E64", VA = "0xFC4E64", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60009A5")]
			[Address(RVA = "0xFC4FAC", Offset = "0xFC4FAC", VA = "0xFC4FAC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400080B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Animator animator;

		[Token(Token = "0x400080C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 defaultPosition;

		[Token(Token = "0x400080D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Quaternion defaultRotation;

		[Token(Token = "0x600099E")]
		[Address(RVA = "0xFC4D08", Offset = "0xFC4D08", VA = "0xFC4D08")]
		private void Start()
		{
		}

		[Token(Token = "0x600099F")]
		[Address(RVA = "0xFC4DBC", Offset = "0xFC4DBC", VA = "0xFC4DBC")]
		[IteratorStateMachine(typeof(<ResetDelayed>d__4))]
		private IEnumerator ResetDelayed()
		{
			return null;
		}

		[Token(Token = "0x60009A0")]
		[Address(RVA = "0xFC4E58", Offset = "0xFC4E58", VA = "0xFC4E58")]
		public SoccerDemo()
		{
		}
	}
	[Token(Token = "0x200013E")]
	public class TouchWalls : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200013F")]
		public class EffectorLink
		{
			[Token(Token = "0x4000813")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool enabled;

			[Token(Token = "0x4000814")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public FullBodyBipedEffector effectorType;

			[Token(Token = "0x4000815")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public InteractionObject interactionObject;

			[Token(Token = "0x4000816")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Transform spherecastFrom;

			[Token(Token = "0x4000817")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float spherecastRadius;

			[Token(Token = "0x4000818")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float minDistance;

			[Token(Token = "0x4000819")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public LayerMask touchLayers;

			[Token(Token = "0x400081A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public float lerpSpeed;

			[Token(Token = "0x400081B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public float minSwitchTime;

			[Token(Token = "0x400081C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public float releaseDistance;

			[Token(Token = "0x400081D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public bool sliding;

			[Token(Token = "0x400081E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			private Vector3 raycastDirectionLocal;

			[Token(Token = "0x400081F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private float raycastDistance;

			[Token(Token = "0x4000820")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			private bool inTouch;

			[Token(Token = "0x4000821")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private RaycastHit hit;

			[Token(Token = "0x4000822")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			private Vector3 targetPosition;

			[Token(Token = "0x4000823")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			private Quaternion targetRotation;

			[Token(Token = "0x4000824")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			private bool initiated;

			[Token(Token = "0x4000825")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
			private float nextSwitchTime;

			[Token(Token = "0x4000826")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			private float speedF;

			[Token(Token = "0x60009AB")]
			[Address(RVA = "0xFC5058", Offset = "0xFC5058", VA = "0xFC5058")]
			public void Initiate(InteractionSystem interactionSystem)
			{
			}

			[Token(Token = "0x60009AC")]
			[Address(RVA = "0xFC5C2C", Offset = "0xFC5C2C", VA = "0xFC5C2C")]
			private bool FindWalls(Vector3 direction)
			{
				return default(bool);
			}

			[Token(Token = "0x60009AD")]
			[Address(RVA = "0xFC5460", Offset = "0xFC5460", VA = "0xFC5460")]
			public void Update(InteractionSystem interactionSystem)
			{
			}

			[Token(Token = "0x60009AE")]
			[Address(RVA = "0xFC5D08", Offset = "0xFC5D08", VA = "0xFC5D08")]
			private void StopTouch(InteractionSystem interactionSystem)
			{
			}

			[Token(Token = "0x60009AF")]
			[Address(RVA = "0xFC5DEC", Offset = "0xFC5DEC", VA = "0xFC5DEC")]
			private void OnInteractionStart(FullBodyBipedEffector effectorType, InteractionObject interactionObject)
			{
			}

			[Token(Token = "0x60009B0")]
			[Address(RVA = "0xFC5E78", Offset = "0xFC5E78", VA = "0xFC5E78")]
			private void OnInteractionResume(FullBodyBipedEffector effectorType, InteractionObject interactionObject)
			{
			}

			[Token(Token = "0x60009B1")]
			[Address(RVA = "0xFC5F00", Offset = "0xFC5F00", VA = "0xFC5F00")]
			private void OnInteractionStop(FullBodyBipedEffector effectorType, InteractionObject interactionObject)
			{
			}

			[Token(Token = "0x60009B2")]
			[Address(RVA = "0xFC5A18", Offset = "0xFC5A18", VA = "0xFC5A18")]
			public void Destroy(InteractionSystem interactionSystem)
			{
			}

			[Token(Token = "0x60009B3")]
			[Address(RVA = "0xFC5F88", Offset = "0xFC5F88", VA = "0xFC5F88")]
			public EffectorLink()
			{
			}
		}

		[Token(Token = "0x4000811")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InteractionSystem interactionSystem;

		[Token(Token = "0x4000812")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EffectorLink[] effectorLinks;

		[Token(Token = "0x60009A7")]
		[Address(RVA = "0xFC4FF4", Offset = "0xFC4FF4", VA = "0xFC4FF4")]
		private void Start()
		{
		}

		[Token(Token = "0x60009A8")]
		[Address(RVA = "0xFC5400", Offset = "0xFC5400", VA = "0xFC5400")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60009A9")]
		[Address(RVA = "0xFC5968", Offset = "0xFC5968", VA = "0xFC5968")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60009AA")]
		[Address(RVA = "0xFC5C24", Offset = "0xFC5C24", VA = "0xFC5C24")]
		public TouchWalls()
		{
		}
	}
	[Token(Token = "0x2000140")]
	public class TransferMotion : MonoBehaviour
	{
		[Token(Token = "0x4000827")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The Transform to transfer motion to.")]
		public Transform to;

		[Token(Token = "0x4000828")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 1f)]
		[Tooltip("The amount of motion to transfer.")]
		public float transferMotion;

		[Token(Token = "0x4000829")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Vector3 lastPosition;

		[Token(Token = "0x60009B4")]
		[Address(RVA = "0xFC5FBC", Offset = "0xFC5FBC", VA = "0xFC5FBC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60009B5")]
		[Address(RVA = "0xFC5FEC", Offset = "0xFC5FEC", VA = "0xFC5FEC")]
		private void Update()
		{
		}

		[Token(Token = "0x60009B6")]
		[Address(RVA = "0xFC609C", Offset = "0xFC609C", VA = "0xFC609C")]
		public TransferMotion()
		{
		}
	}
	[Token(Token = "0x2000141")]
	public class TwoHandedProp : MonoBehaviour
	{
		[Token(Token = "0x400082A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The left hand target parented to the right hand.")]
		public Transform leftHandTarget;

		[Token(Token = "0x400082B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private FullBodyBipedIK ik;

		[Token(Token = "0x400082C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 targetPosRelativeToRight;

		[Token(Token = "0x400082D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Quaternion targetRotRelativeToRight;

		[Token(Token = "0x60009B7")]
		[Address(RVA = "0xFC60B0", Offset = "0xFC60B0", VA = "0xFC60B0")]
		private void Start()
		{
		}

		[Token(Token = "0x60009B8")]
		[Address(RVA = "0xFC62C8", Offset = "0xFC62C8", VA = "0xFC62C8")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60009B9")]
		[Address(RVA = "0xFC6564", Offset = "0xFC6564", VA = "0xFC6564")]
		private void AfterFBBIK()
		{
		}

		[Token(Token = "0x60009BA")]
		[Address(RVA = "0xFC662C", Offset = "0xFC662C", VA = "0xFC662C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60009BB")]
		[Address(RVA = "0xFC6758", Offset = "0xFC6758", VA = "0xFC6758")]
		public TwoHandedProp()
		{
		}
	}
	[Token(Token = "0x2000142")]
	public class UserControlInteractions : UserControlThirdPerson
	{
		[Token(Token = "0x400082E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public CharacterThirdPerson character;

		[Token(Token = "0x400082F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public InteractionSystem interactionSystem;

		[Token(Token = "0x4000830")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool disableInputInInteraction;

		[Token(Token = "0x4000831")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float enableInputAtProgress;

		[Token(Token = "0x60009BC")]
		[Address(RVA = "0xFC6760", Offset = "0xFC6760", VA = "0xFC6760", Slot = "5")]
		protected override void Update()
		{
		}

		[Token(Token = "0x60009BD")]
		[Address(RVA = "0xFC6BB8", Offset = "0xFC6BB8", VA = "0xFC6BB8")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x60009BE")]
		[Address(RVA = "0xFC6D80", Offset = "0xFC6D80", VA = "0xFC6D80")]
		public UserControlInteractions()
		{
		}
	}
	[Token(Token = "0x2000143")]
	public class GrounderDemo : MonoBehaviour
	{
		[Token(Token = "0x4000832")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject[] characters;

		[Token(Token = "0x60009BF")]
		[Address(RVA = "0xFC6DB4", Offset = "0xFC6DB4", VA = "0xFC6DB4")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x60009C0")]
		[Address(RVA = "0xFC6FBC", Offset = "0xFC6FBC", VA = "0xFC6FBC")]
		public void Activate(int index)
		{
		}

		[Token(Token = "0x60009C1")]
		[Address(RVA = "0xFC7028", Offset = "0xFC7028", VA = "0xFC7028")]
		public GrounderDemo()
		{
		}
	}
	[Token(Token = "0x2000144")]
	public class PlatformRotator : MonoBehaviour
	{
		[Token(Token = "0x2000145")]
		[CompilerGenerated]
		private sealed class <SwitchRotation>d__14 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400083F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000840")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000841")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PlatformRotator <>4__this;

			[Token(Token = "0x170000FA")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60009CB")]
				[Address(RVA = "0xFC7798", Offset = "0xFC7798", VA = "0xFC7798", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000FB")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60009CD")]
				[Address(RVA = "0xFC77E0", Offset = "0xFC77E0", VA = "0xFC77E0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60009C8")]
			[Address(RVA = "0xFC7420", Offset = "0xFC7420", VA = "0xFC7420")]
			[DebuggerHidden]
			public <SwitchRotation>d__14(int <>1__state)
			{
			}

			[Token(Token = "0x60009C9")]
			[Address(RVA = "0xFC7610", Offset = "0xFC7610", VA = "0xFC7610", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60009CA")]
			[Address(RVA = "0xFC7614", Offset = "0xFC7614", VA = "0xFC7614", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60009CC")]
			[Address(RVA = "0xFC77A0", Offset = "0xFC77A0", VA = "0xFC77A0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000833")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float maxAngle;

		[Token(Token = "0x4000834")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float switchRotationTime;

		[Token(Token = "0x4000835")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float random;

		[Token(Token = "0x4000836")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float rotationSpeed;

		[Token(Token = "0x4000837")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 movePosition;

		[Token(Token = "0x4000838")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float moveSpeed;

		[Token(Token = "0x4000839")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int characterLayer;

		[Token(Token = "0x400083A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Quaternion defaultRotation;

		[Token(Token = "0x400083B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Quaternion targetRotation;

		[Token(Token = "0x400083C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Vector3 targetPosition;

		[Token(Token = "0x400083D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3 velocity;

		[Token(Token = "0x400083E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Rigidbody r;

		[Token(Token = "0x60009C2")]
		[Address(RVA = "0xFC7030", Offset = "0xFC7030", VA = "0xFC7030")]
		private void Start()
		{
		}

		[Token(Token = "0x60009C3")]
		[Address(RVA = "0xFC716C", Offset = "0xFC716C", VA = "0xFC716C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60009C4")]
		[Address(RVA = "0xFC70F8", Offset = "0xFC70F8", VA = "0xFC70F8")]
		[IteratorStateMachine(typeof(<SwitchRotation>d__14))]
		private IEnumerator SwitchRotation()
		{
			return null;
		}

		[Token(Token = "0x60009C5")]
		[Address(RVA = "0xFC7448", Offset = "0xFC7448", VA = "0xFC7448")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x60009C6")]
		[Address(RVA = "0xFC7520", Offset = "0xFC7520", VA = "0xFC7520")]
		private void OnCollisionExit(Collision collision)
		{
		}

		[Token(Token = "0x60009C7")]
		[Address(RVA = "0xFC75F4", Offset = "0xFC75F4", VA = "0xFC75F4")]
		public PlatformRotator()
		{
		}
	}
	[Token(Token = "0x2000146")]
	public class BendGoal : MonoBehaviour
	{
		[Token(Token = "0x4000842")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LimbIK limbIK;

		[Token(Token = "0x4000843")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 1f)]
		public float weight;

		[Token(Token = "0x60009CE")]
		[Address(RVA = "0xFC77E8", Offset = "0xFC77E8", VA = "0xFC77E8")]
		private void Start()
		{
		}

		[Token(Token = "0x60009CF")]
		[Address(RVA = "0xFC7850", Offset = "0xFC7850", VA = "0xFC7850")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60009D0")]
		[Address(RVA = "0xFC78FC", Offset = "0xFC78FC", VA = "0xFC78FC")]
		public BendGoal()
		{
		}
	}
	[Token(Token = "0x2000147")]
	public class Turret : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000148")]
		public class Part
		{
			[Token(Token = "0x4000846")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform transform;

			[Token(Token = "0x4000847")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private RotationLimit rotationLimit;

			[Token(Token = "0x60009D3")]
			[Address(RVA = "0xFC7970", Offset = "0xFC7970", VA = "0xFC7970")]
			public void AimAt(Transform target)
			{
			}

			[Token(Token = "0x60009D4")]
			[Address(RVA = "0xFC7AAC", Offset = "0xFC7AAC", VA = "0xFC7AAC")]
			public Part()
			{
			}
		}

		[Token(Token = "0x4000844")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x4000845")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Part[] parts;

		[Token(Token = "0x60009D1")]
		[Address(RVA = "0xFC790C", Offset = "0xFC790C", VA = "0xFC790C")]
		private void Update()
		{
		}

		[Token(Token = "0x60009D2")]
		[Address(RVA = "0xFC7AA4", Offset = "0xFC7AA4", VA = "0xFC7AA4")]
		public Turret()
		{
		}
	}
	[Token(Token = "0x2000149")]
	public class HitReactionVRIKTrigger : MonoBehaviour
	{
		[Token(Token = "0x4000848")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HitReactionVRIK hitReaction;

		[Token(Token = "0x4000849")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float hitForce;

		[Token(Token = "0x400084A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string colliderName;

		[Token(Token = "0x60009D5")]
		[Address(RVA = "0xFC7AB4", Offset = "0xFC7AB4", VA = "0xFC7AB4")]
		private void Update()
		{
		}

		[Token(Token = "0x60009D6")]
		[Address(RVA = "0xFC7C04", Offset = "0xFC7C04", VA = "0xFC7C04")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x60009D7")]
		[Address(RVA = "0xFC7D68", Offset = "0xFC7D68", VA = "0xFC7D68")]
		public HitReactionVRIKTrigger()
		{
		}
	}
	[Token(Token = "0x200014A")]
	public class VRIKCalibrationController : MonoBehaviour
	{
		[Token(Token = "0x400084B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Reference to the VRIK component on the avatar.")]
		public VRIK ik;

		[Token(Token = "0x400084C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The settings for VRIK calibration.")]
		public VRIKCalibrator.Settings settings;

		[Token(Token = "0x400084D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The HMD.")]
		public Transform headTracker;

		[Token(Token = "0x400084E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("(Optional) A tracker placed anywhere on the body of the player, preferrably close to the pelvis, on the belt area.")]
		public Transform bodyTracker;

		[Token(Token = "0x400084F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("(Optional) A tracker or hand controller device placed anywhere on or in the player's left hand.")]
		public Transform leftHandTracker;

		[Token(Token = "0x4000850")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("(Optional) A tracker or hand controller device placed anywhere on or in the player's right hand.")]
		public Transform rightHandTracker;

		[Token(Token = "0x4000851")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("(Optional) A tracker placed anywhere on the ankle or toes of the player's left leg.")]
		public Transform leftFootTracker;

		[Token(Token = "0x4000852")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("(Optional) A tracker placed anywhere on the ankle or toes of the player's right leg.")]
		public Transform rightFootTracker;

		[Token(Token = "0x4000853")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Header("Data stored by Calibration")]
		public VRIKCalibrator.CalibrationData data;

		[Token(Token = "0x60009D8")]
		[Address(RVA = "0xFC7D78", Offset = "0xFC7D78", VA = "0xFC7D78")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60009D9")]
		[Address(RVA = "0xFC7ED8", Offset = "0xFC7ED8", VA = "0xFC7ED8")]
		public VRIKCalibrationController()
		{
		}
	}
	[Token(Token = "0x200014B")]
	public class VRIKPlatform : MonoBehaviour
	{
		[Token(Token = "0x4000854")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VRIK ik;

		[Token(Token = "0x4000855")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 lastPosition;

		[Token(Token = "0x4000856")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Quaternion lastRotation;

		[Token(Token = "0x60009DA")]
		[Address(RVA = "0xFC7F4C", Offset = "0xFC7F4C", VA = "0xFC7F4C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60009DB")]
		[Address(RVA = "0xFC7F9C", Offset = "0xFC7F9C", VA = "0xFC7F9C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60009DC")]
		[Address(RVA = "0xFC8174", Offset = "0xFC8174", VA = "0xFC8174")]
		public VRIKPlatform()
		{
		}
	}
	[Token(Token = "0x200014C")]
	public class VRIKPlatformController : MonoBehaviour
	{
		[Token(Token = "0x4000857")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VRIK ik;

		[Token(Token = "0x4000858")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform trackingSpace;

		[Token(Token = "0x4000859")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform platform;

		[Token(Token = "0x400085A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool moveToPlatform;

		[Token(Token = "0x400085B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform lastPlatform;

		[Token(Token = "0x400085C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 lastPosition;

		[Token(Token = "0x400085D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Quaternion lastRotation;

		[Token(Token = "0x60009DD")]
		[Address(RVA = "0xFC81CC", Offset = "0xFC81CC", VA = "0xFC81CC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60009DE")]
		[Address(RVA = "0xFC86FC", Offset = "0xFC86FC", VA = "0xFC86FC")]
		public VRIKPlatformController()
		{
		}
	}
	[Token(Token = "0x200014D")]
	public abstract class CharacterAnimationBase : MonoBehaviour
	{
		[Token(Token = "0x400085E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool smoothFollow;

		[Token(Token = "0x400085F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float smoothFollowSpeed;

		[Token(Token = "0x4000860")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected bool animatePhysics;

		[Token(Token = "0x4000861")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Vector3 lastPosition;

		[Token(Token = "0x4000862")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 localPosition;

		[Token(Token = "0x4000863")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Quaternion localRotation;

		[Token(Token = "0x4000864")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Quaternion lastRotation;

		[Token(Token = "0x170000FC")]
		public virtual bool animationGrounded
		{
			[Token(Token = "0x60009E0")]
			[Address(RVA = "0xFC8778", Offset = "0xFC8778", VA = "0xFC8778", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60009DF")]
		[Address(RVA = "0xFC8758", Offset = "0xFC8758", VA = "0xFC8758", Slot = "4")]
		public virtual Vector3 GetPivotPoint()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60009E1")]
		[Address(RVA = "0xFC8780", Offset = "0xFC8780", VA = "0xFC8780")]
		public float GetAngleFromForward(Vector3 worldDirection)
		{
			return default(float);
		}

		[Token(Token = "0x60009E2")]
		[Address(RVA = "0xFC87E0", Offset = "0xFC87E0", VA = "0xFC87E0", Slot = "6")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x60009E3")]
		[Address(RVA = "0xFC8964", Offset = "0xFC8964", VA = "0xFC8964", Slot = "7")]
		protected virtual void LateUpdate()
		{
		}

		[Token(Token = "0x60009E4")]
		[Address(RVA = "0xFC8BE0", Offset = "0xFC8BE0", VA = "0xFC8BE0", Slot = "8")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x60009E5")]
		[Address(RVA = "0xFC8974", Offset = "0xFC8974", VA = "0xFC8974")]
		private void SmoothFollow()
		{
		}

		[Token(Token = "0x60009E6")]
		[Address(RVA = "0xFC8BF0", Offset = "0xFC8BF0", VA = "0xFC8BF0")]
		protected CharacterAnimationBase()
		{
		}
	}
	[Token(Token = "0x200014E")]
	[RequireComponent(typeof(Animator))]
	public class CharacterAnimationSimple : CharacterAnimationBase
	{
		[Token(Token = "0x4000865")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public CharacterThirdPerson characterController;

		[Token(Token = "0x4000866")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float pivotOffset;

		[Token(Token = "0x4000867")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public AnimationCurve moveSpeed;

		[Token(Token = "0x4000868")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Animator animator;

		[Token(Token = "0x60009E7")]
		[Address(RVA = "0xFC8C08", Offset = "0xFC8C08", VA = "0xFC8C08", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x60009E8")]
		[Address(RVA = "0xFC8C68", Offset = "0xFC8C68", VA = "0xFC8C68", Slot = "4")]
		public override Vector3 GetPivotPoint()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60009E9")]
		[Address(RVA = "0xFC8CF8", Offset = "0xFC8CF8", VA = "0xFC8CF8")]
		private void Update()
		{
		}

		[Token(Token = "0x60009EA")]
		[Address(RVA = "0xFC8E1C", Offset = "0xFC8E1C", VA = "0xFC8E1C")]
		public CharacterAnimationSimple()
		{
		}
	}
	[Token(Token = "0x200014F")]
	[RequireComponent(typeof(Animator))]
	public class CharacterAnimationThirdPerson : CharacterAnimationBase
	{
		[Token(Token = "0x4000869")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public CharacterThirdPerson characterController;

		[Token(Token = "0x400086A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private float turnSensitivity;

		[Token(Token = "0x400086B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[SerializeField]
		private float turnSpeed;

		[Token(Token = "0x400086C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private float runCycleLegOffset;

		[Token(Token = "0x400086D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[Range(0.1f, 3f)]
		[SerializeField]
		private float animSpeedMultiplier;

		[Token(Token = "0x400086E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected Animator animator;

		[Token(Token = "0x400086F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector3 lastForward;

		[Token(Token = "0x4000870")]
		private const string groundedDirectional = "Grounded Directional";

		[Token(Token = "0x4000871")]
		private const string groundedStrafe = "Grounded Strafe";

		[Token(Token = "0x4000872")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float deltaAngle;

		[Token(Token = "0x170000FD")]
		public override bool animationGrounded
		{
			[Token(Token = "0x60009ED")]
			[Address(RVA = "0xFC8ED8", Offset = "0xFC8ED8", VA = "0xFC8ED8", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60009EB")]
		[Address(RVA = "0xFC8E34", Offset = "0xFC8E34", VA = "0xFC8E34", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x60009EC")]
		[Address(RVA = "0xFC8EBC", Offset = "0xFC8EBC", VA = "0xFC8EBC", Slot = "4")]
		public override Vector3 GetPivotPoint()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60009EE")]
		[Address(RVA = "0xFC8FCC", Offset = "0xFC8FCC", VA = "0xFC8FCC", Slot = "9")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x60009EF")]
		[Address(RVA = "0xFC93A0", Offset = "0xFC93A0", VA = "0xFC93A0")]
		private void OnAnimatorMove()
		{
		}

		[Token(Token = "0x60009F0")]
		[Address(RVA = "0xFC94C8", Offset = "0xFC94C8", VA = "0xFC94C8")]
		public CharacterAnimationThirdPerson()
		{
		}
	}
	[Token(Token = "0x2000150")]
	[RequireComponent(typeof(Rigidbody))]
	[RequireComponent(typeof(CapsuleCollider))]
	public abstract class CharacterBase : MonoBehaviour
	{
		[Token(Token = "0x4000873")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("If specified, will use the direction from the character to this Transform as the gravity vector instead of Physics.gravity. Physics.gravity.magnitude will be used as the magnitude of the gravity vector.")]
		[Header("Base Parameters")]
		public Transform gravityTarget;

		[Token(Token = "0x4000874")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Multiplies gravity applied to the character even if 'Individual Gravity' is unchecked.")]
		public float gravityMultiplier;

		[Token(Token = "0x4000875")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float airborneThreshold;

		[Token(Token = "0x4000876")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float slopeStartAngle;

		[Token(Token = "0x4000877")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float slopeEndAngle;

		[Token(Token = "0x4000878")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float spherecastRadius;

		[Token(Token = "0x4000879")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public LayerMask groundLayers;

		[Token(Token = "0x400087A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private PhysicMaterial zeroFrictionMaterial;

		[Token(Token = "0x400087B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private PhysicMaterial highFrictionMaterial;

		[Token(Token = "0x400087C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected Rigidbody r;

		[Token(Token = "0x400087D")]
		protected const float half = 0.5f;

		[Token(Token = "0x400087E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected float originalHeight;

		[Token(Token = "0x400087F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		protected Vector3 originalCenter;

		[Token(Token = "0x4000880")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected CapsuleCollider capsule;

		[Token(Token = "0x60009F1")]
		public abstract void Move(Vector3 deltaPosition, Quaternion deltaRotation);

		[Token(Token = "0x60009F2")]
		[Address(RVA = "0xFC94EC", Offset = "0xFC94EC", VA = "0xFC94EC")]
		protected Vector3 GetGravity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60009F3")]
		[Address(RVA = "0xFC96D8", Offset = "0xFC96D8", VA = "0xFC96D8", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x60009F4")]
		[Address(RVA = "0xFC9904", Offset = "0xFC9904", VA = "0xFC9904", Slot = "6")]
		protected virtual RaycastHit GetSpherecastHit()
		{
			return default(RaycastHit);
		}

		[Token(Token = "0x60009F5")]
		[Address(RVA = "0xFC9AA4", Offset = "0xFC9AA4", VA = "0xFC9AA4")]
		public float GetAngleFromForward(Vector3 worldDirection)
		{
			return default(float);
		}

		[Token(Token = "0x60009F6")]
		[Address(RVA = "0xFC9B04", Offset = "0xFC9B04", VA = "0xFC9B04")]
		protected void RigidbodyRotateAround(Vector3 point, Vector3 axis, float angle)
		{
		}

		[Token(Token = "0x60009F7")]
		[Address(RVA = "0xFC9C68", Offset = "0xFC9C68", VA = "0xFC9C68")]
		protected void ScaleCapsule(float mlp)
		{
		}

		[Token(Token = "0x60009F8")]
		[Address(RVA = "0xFC9E6C", Offset = "0xFC9E6C", VA = "0xFC9E6C")]
		protected void HighFriction()
		{
		}

		[Token(Token = "0x60009F9")]
		[Address(RVA = "0xFC9E90", Offset = "0xFC9E90", VA = "0xFC9E90")]
		protected void ZeroFriction()
		{
		}

		[Token(Token = "0x60009FA")]
		[Address(RVA = "0xFC9EB4", Offset = "0xFC9EB4", VA = "0xFC9EB4")]
		protected float GetSlopeDamper(Vector3 velocity, Vector3 groundNormal)
		{
			return default(float);
		}

		[Token(Token = "0x60009FB")]
		[Address(RVA = "0xFCA000", Offset = "0xFCA000", VA = "0xFCA000")]
		protected CharacterBase()
		{
		}
	}
	[Token(Token = "0x2000151")]
	public class CharacterThirdPerson : CharacterBase
	{
		[Serializable]
		[Token(Token = "0x2000152")]
		public enum MoveMode
		{
			[Token(Token = "0x40008BA")]
			Directional,
			[Token(Token = "0x40008BB")]
			Strafe
		}

		[Token(Token = "0x2000153")]
		public struct AnimState
		{
			[Token(Token = "0x40008BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3 moveDirection;

			[Token(Token = "0x40008BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public bool jump;

			[Token(Token = "0x40008BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
			public bool crouch;

			[Token(Token = "0x40008BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE")]
			public bool onGround;

			[Token(Token = "0x40008C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF")]
			public bool isStrafing;

			[Token(Token = "0x40008C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float yVelocity;

			[Token(Token = "0x40008C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public bool doubleJump;
		}

		[Token(Token = "0x2000154")]
		[CompilerGenerated]
		private sealed class <JumpSmooth>d__74 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40008C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40008C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40008C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public CharacterThirdPerson <>4__this;

			[Token(Token = "0x40008C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 jumpVelocity;

			[Token(Token = "0x40008C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private int <steps>5__2;

			[Token(Token = "0x40008C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int <stepsToTake>5__3;

			[Token(Token = "0x170000FF")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000A11")]
				[Address(RVA = "0xFCCA00", Offset = "0xFCCA00", VA = "0xFCCA00", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000100")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000A13")]
				[Address(RVA = "0xFCCA48", Offset = "0xFCCA48", VA = "0xFCCA48", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000A0E")]
			[Address(RVA = "0xFCC7BC", Offset = "0xFCC7BC", VA = "0xFCC7BC")]
			[DebuggerHidden]
			public <JumpSmooth>d__74(int <>1__state)
			{
			}

			[Token(Token = "0x6000A0F")]
			[Address(RVA = "0xFCC8FC", Offset = "0xFCC8FC", VA = "0xFCC8FC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000A10")]
			[Address(RVA = "0xFCC900", Offset = "0xFCC900", VA = "0xFCC900", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000A12")]
			[Address(RVA = "0xFCCA08", Offset = "0xFCCA08", VA = "0xFCCA08", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000881")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Header("References")]
		public CharacterAnimationBase characterAnimation;

		[Token(Token = "0x4000882")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public UserControlThirdPerson userControl;

		[Token(Token = "0x4000883")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public CameraController cam;

		[Token(Token = "0x4000884")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Header("Movement")]
		public MoveMode moveMode;

		[Token(Token = "0x4000885")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public bool smoothPhysics;

		[Token(Token = "0x4000886")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float smoothAccelerationTime;

		[Token(Token = "0x4000887")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float linearAccelerationSpeed;

		[Token(Token = "0x4000888")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float platformFriction;

		[Token(Token = "0x4000889")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public float groundStickyEffect;

		[Token(Token = "0x400088A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public float maxVerticalVelocityOnGround;

		[Token(Token = "0x400088B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public float velocityToGroundTangentWeight;

		[Token(Token = "0x400088C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Header("Rotation")]
		public bool lookInCameraDirection;

		[Token(Token = "0x400088D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public float turnSpeed;

		[Token(Token = "0x400088E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public float stationaryTurnSpeedMlp;

		[Token(Token = "0x400088F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[Header("Jumping and Falling")]
		public bool smoothJump;

		[Token(Token = "0x4000890")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public float airSpeed;

		[Token(Token = "0x4000891")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public float airControl;

		[Token(Token = "0x4000892")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public float jumpPower;

		[Token(Token = "0x4000893")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public float jumpRepeatDelayTime;

		[Token(Token = "0x4000894")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public bool doubleJumpEnabled;

		[Token(Token = "0x4000895")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public float doubleJumpPowerMlp;

		[Token(Token = "0x4000896")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Header("Wall Running")]
		public LayerMask wallRunLayers;

		[Token(Token = "0x4000897")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		public float wallRunMaxLength;

		[Token(Token = "0x4000898")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public float wallRunMinMoveMag;

		[Token(Token = "0x4000899")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		public float wallRunMinVelocityY;

		[Token(Token = "0x400089A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public float wallRunRotationSpeed;

		[Token(Token = "0x400089B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		public float wallRunMaxRotationAngle;

		[Token(Token = "0x400089C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public float wallRunWeightSpeed;

		[Token(Token = "0x400089D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		[Header("Crouching")]
		public float crouchCapsuleScaleMlp;

		[Token(Token = "0x400089F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		public AnimState animState;

		[Token(Token = "0x40008A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		protected Vector3 moveDirection;

		[Token(Token = "0x40008A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private Animator animator;

		[Token(Token = "0x40008A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private Vector3 normal;

		[Token(Token = "0x40008A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		private Vector3 platformVelocity;

		[Token(Token = "0x40008A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private Vector3 platformAngularVelocity;

		[Token(Token = "0x40008A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		private RaycastHit hit;

		[Token(Token = "0x40008A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private float jumpLeg;

		[Token(Token = "0x40008A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		private float jumpEndTime;

		[Token(Token = "0x40008A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private float forwardMlp;

		[Token(Token = "0x40008A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
		private float groundDistance;

		[Token(Token = "0x40008AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private float lastAirTime;

		[Token(Token = "0x40008AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
		private float stickyForce;

		[Token(Token = "0x40008AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private Vector3 wallNormal;

		[Token(Token = "0x40008AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
		private Vector3 moveDirectionVelocity;

		[Token(Token = "0x40008AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		private float wallRunWeight;

		[Token(Token = "0x40008AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
		private float lastWallRunWeight;

		[Token(Token = "0x40008B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		private Vector3 fixedDeltaPosition;

		[Token(Token = "0x40008B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
		private Quaternion fixedDeltaRotation;

		[Token(Token = "0x40008B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1BC")]
		private bool fixedFrame;

		[Token(Token = "0x40008B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		private float wallRunEndTime;

		[Token(Token = "0x40008B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C4")]
		private Vector3 gravity;

		[Token(Token = "0x40008B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		private Vector3 verticalVelocity;

		[Token(Token = "0x40008B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1DC")]
		private float velocityY;

		[Token(Token = "0x40008B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		private bool doubleJumped;

		[Token(Token = "0x40008B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E1")]
		private bool jumpReleased;

		[Token(Token = "0x170000FE")]
		public bool onGround
		{
			[Token(Token = "0x60009FC")]
			[Address(RVA = "0xFCA020", Offset = "0xFCA020", VA = "0xFCA020")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60009FD")]
			[Address(RVA = "0xFCA028", Offset = "0xFCA028", VA = "0xFCA028")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60009FE")]
		[Address(RVA = "0xFCA034", Offset = "0xFCA034", VA = "0xFCA034", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x60009FF")]
		[Address(RVA = "0xFCA224", Offset = "0xFCA224", VA = "0xFCA224")]
		private void OnAnimatorMove()
		{
		}

		[Token(Token = "0x6000A00")]
		[Address(RVA = "0xFCA2A8", Offset = "0xFCA2A8", VA = "0xFCA2A8", Slot = "4")]
		public override void Move(Vector3 deltaPosition, Quaternion deltaRotation)
		{
		}

		[Token(Token = "0x6000A01")]
		[Address(RVA = "0xFCA358", Offset = "0xFCA358", VA = "0xFCA358")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000A02")]
		[Address(RVA = "0xFCB344", Offset = "0xFCB344", VA = "0xFCB344", Slot = "7")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000A03")]
		[Address(RVA = "0xFCB7D4", Offset = "0xFCB7D4", VA = "0xFCB7D4", Slot = "8")]
		protected virtual void LateUpdate()
		{
		}

		[Token(Token = "0x6000A04")]
		[Address(RVA = "0xFCAA08", Offset = "0xFCAA08", VA = "0xFCAA08")]
		private void MoveFixed(Vector3 deltaPosition)
		{
		}

		[Token(Token = "0x6000A05")]
		[Address(RVA = "0xFCB8AC", Offset = "0xFCB8AC", VA = "0xFCB8AC")]
		private void WallRun()
		{
		}

		[Token(Token = "0x6000A06")]
		[Address(RVA = "0xFCBF38", Offset = "0xFCBF38", VA = "0xFCBF38")]
		private bool CanWallRun()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A07")]
		[Address(RVA = "0xFCB3D0", Offset = "0xFCB3D0", VA = "0xFCB3D0")]
		private Vector3 GetMoveDirection()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000A08")]
		[Address(RVA = "0xFCC028", Offset = "0xFCC028", VA = "0xFCC028", Slot = "9")]
		protected virtual void Rotate()
		{
		}

		[Token(Token = "0x6000A09")]
		[Address(RVA = "0xFCC4A8", Offset = "0xFCC4A8", VA = "0xFCC4A8")]
		private Vector3 GetForwardDirection()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000A0A")]
		[Address(RVA = "0xFCC5D0", Offset = "0xFCC5D0", VA = "0xFCC5D0", Slot = "10")]
		protected virtual bool Jump()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A0B")]
		[Address(RVA = "0xFCC724", Offset = "0xFCC724", VA = "0xFCC724")]
		[IteratorStateMachine(typeof(<JumpSmooth>d__74))]
		private IEnumerator JumpSmooth(Vector3 jumpVelocity)
		{
			return null;
		}

		[Token(Token = "0x6000A0C")]
		[Address(RVA = "0xFCADE4", Offset = "0xFCADE4", VA = "0xFCADE4")]
		private void GroundCheck()
		{
		}

		[Token(Token = "0x6000A0D")]
		[Address(RVA = "0xFCC7E4", Offset = "0xFCC7E4", VA = "0xFCC7E4")]
		public CharacterThirdPerson()
		{
		}
	}
	[Token(Token = "0x2000155")]
	[RequireComponent(typeof(Animator))]
	public class SimpleLocomotion : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000156")]
		public enum RotationMode
		{
			[Token(Token = "0x40008D7")]
			Smooth,
			[Token(Token = "0x40008D8")]
			Linear
		}

		[Token(Token = "0x40008C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The component that updates the camera.")]
		public CameraController cameraController;

		[Token(Token = "0x40008CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Acceleration of movement.")]
		public float accelerationTime;

		[Token(Token = "0x40008CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("Turning speed.")]
		public float turnTime;

		[Token(Token = "0x40008CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("If true, will run on left shift, if not will walk on left shift.")]
		public bool walkByDefault;

		[Token(Token = "0x40008CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("Smooth or linear rotation.")]
		public RotationMode rotationMode;

		[Token(Token = "0x40008CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Procedural motion speed (if not using root motion).")]
		public float moveSpeed;

		[Token(Token = "0x40008D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Animator animator;

		[Token(Token = "0x40008D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float speed;

		[Token(Token = "0x40008D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float angleVel;

		[Token(Token = "0x40008D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float speedVel;

		[Token(Token = "0x40008D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 linearTargetDirection;

		[Token(Token = "0x40008D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private CharacterController characterController;

		[Token(Token = "0x17000101")]
		public bool isGrounded
		{
			[Token(Token = "0x6000A14")]
			[Address(RVA = "0xFCCA50", Offset = "0xFCCA50", VA = "0xFCCA50")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000A15")]
			[Address(RVA = "0xFCCA58", Offset = "0xFCCA58", VA = "0xFCCA58")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000A16")]
		[Address(RVA = "0xFCCA64", Offset = "0xFCCA64", VA = "0xFCCA64")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A17")]
		[Address(RVA = "0xFCCB0C", Offset = "0xFCCB0C", VA = "0xFCCB0C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A18")]
		[Address(RVA = "0xFCD124", Offset = "0xFCD124", VA = "0xFCD124")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000A19")]
		[Address(RVA = "0xFCCB54", Offset = "0xFCCB54", VA = "0xFCCB54")]
		private void Rotate()
		{
		}

		[Token(Token = "0x6000A1A")]
		[Address(RVA = "0xFCCEBC", Offset = "0xFCCEBC", VA = "0xFCCEBC")]
		private void Move()
		{
		}

		[Token(Token = "0x6000A1B")]
		[Address(RVA = "0xFCD154", Offset = "0xFCD154", VA = "0xFCD154")]
		private Vector3 GetInputVector()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000A1C")]
		[Address(RVA = "0xFCD1EC", Offset = "0xFCD1EC", VA = "0xFCD1EC")]
		private Vector3 GetInputVectorRaw()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000A1D")]
		[Address(RVA = "0xFCD26C", Offset = "0xFCD26C", VA = "0xFCD26C")]
		public SimpleLocomotion()
		{
		}
	}
	[Token(Token = "0x2000157")]
	public class UserControlAI : UserControlThirdPerson
	{
		[Token(Token = "0x40008D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform moveTarget;

		[Token(Token = "0x40008DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float stoppingDistance;

		[Token(Token = "0x40008DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float stoppingThreshold;

		[Token(Token = "0x40008DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Navigator navigator;

		[Token(Token = "0x6000A1E")]
		[Address(RVA = "0xFCD294", Offset = "0xFCD294", VA = "0xFCD294", Slot = "4")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000A1F")]
		[Address(RVA = "0xFCD3DC", Offset = "0xFCD3DC", VA = "0xFCD3DC", Slot = "5")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6000A20")]
		[Address(RVA = "0xFCDA54", Offset = "0xFCDA54", VA = "0xFCDA54")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6000A21")]
		[Address(RVA = "0xFCDC40", Offset = "0xFCDC40", VA = "0xFCDC40")]
		public UserControlAI()
		{
		}
	}
	[Token(Token = "0x2000158")]
	public class UserControlThirdPerson : MonoBehaviour
	{
		[Token(Token = "0x2000159")]
		public struct State
		{
			[Token(Token = "0x40008E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3 move;

			[Token(Token = "0x40008E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public Vector3 lookPos;

			[Token(Token = "0x40008E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public bool crouch;

			[Token(Token = "0x40008E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
			public bool jump;

			[Token(Token = "0x40008E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public int actionIndex;
		}

		[Token(Token = "0x40008DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool walkByDefault;

		[Token(Token = "0x40008DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool canCrouch;

		[Token(Token = "0x40008DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public bool canJump;

		[Token(Token = "0x40008E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public State state;

		[Token(Token = "0x40008E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected Transform cam;

		[Token(Token = "0x6000A22")]
		[Address(RVA = "0xFCD2D0", Offset = "0xFCD2D0", VA = "0xFCD2D0", Slot = "4")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000A23")]
		[Address(RVA = "0xFC6874", Offset = "0xFC6874", VA = "0xFC6874", Slot = "5")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000A24")]
		[Address(RVA = "0xFC6DA4", Offset = "0xFC6DA4", VA = "0xFC6DA4")]
		public UserControlThirdPerson()
		{
		}
	}
	[Token(Token = "0x200015A")]
	public class ApplicationQuit : MonoBehaviour
	{
		[Token(Token = "0x6000A25")]
		[Address(RVA = "0xFCDC5C", Offset = "0xFCDC5C", VA = "0xFCDC5C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A26")]
		[Address(RVA = "0xFCDC94", Offset = "0xFCDC94", VA = "0xFCDC94")]
		public ApplicationQuit()
		{
		}
	}
	[Token(Token = "0x200015B")]
	public class SlowMo : MonoBehaviour
	{
		[Token(Token = "0x40008E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public KeyCode[] keyCodes;

		[Token(Token = "0x40008E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool mouse0;

		[Token(Token = "0x40008E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool mouse1;

		[Token(Token = "0x40008EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float slowMoTimeScale;

		[Token(Token = "0x6000A27")]
		[Address(RVA = "0xFCDC9C", Offset = "0xFCDC9C", VA = "0xFCDC9C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A28")]
		[Address(RVA = "0xFCDCC4", Offset = "0xFCDCC4", VA = "0xFCDCC4")]
		private bool IsSlowMotion()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A29")]
		[Address(RVA = "0xFCDD68", Offset = "0xFCDD68", VA = "0xFCDD68")]
		public SlowMo()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200015C")]
	public class Navigator
	{
		[Token(Token = "0x200015D")]
		public enum State
		{
			[Token(Token = "0x40008FA")]
			Idle,
			[Token(Token = "0x40008FB")]
			Seeking,
			[Token(Token = "0x40008FC")]
			OnPath
		}

		[Token(Token = "0x40008EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Tooltip("Should this Navigator be actively seeking a path.")]
		public bool activeTargetSeeking;

		[Token(Token = "0x40008EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[Tooltip("Increase this value if the character starts running in a circle, not able to reach the corner because of a too large turning radius.")]
		public float cornerRadius;

		[Token(Token = "0x40008ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Recalculate path if target position has moved by this distance from the position it was at when the path was originally calculated")]
		public float recalculateOnPathDistance;

		[Token(Token = "0x40008EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Sample within this distance from sourcePosition.")]
		public float maxSampleDistance;

		[Token(Token = "0x40008EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Interval of updating the path")]
		public float nextPathInterval;

		[Token(Token = "0x40008F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform transform;

		[Token(Token = "0x40008F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int cornerIndex;

		[Token(Token = "0x40008F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3[] corners;

		[Token(Token = "0x40008F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private NavMeshPath path;

		[Token(Token = "0x40008F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector3 lastTargetPosition;

		[Token(Token = "0x40008F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private bool initiated;

		[Token(Token = "0x40008F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float nextPathTime;

		[Token(Token = "0x17000102")]
		public Vector3 normalizedDeltaPosition
		{
			[Token(Token = "0x6000A2A")]
			[Address(RVA = "0xFCDD7C", Offset = "0xFCDD7C", VA = "0xFCDD7C")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000A2B")]
			[Address(RVA = "0xFCDD88", Offset = "0xFCDD88", VA = "0xFCDD88")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000103")]
		public State state
		{
			[Token(Token = "0x6000A2C")]
			[Address(RVA = "0xFCDD94", Offset = "0xFCDD94", VA = "0xFCDD94")]
			[CompilerGenerated]
			get
			{
				return default(State);
			}
			[Token(Token = "0x6000A2D")]
			[Address(RVA = "0xFCDD9C", Offset = "0xFCDD9C", VA = "0xFCDD9C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000A2E")]
		[Address(RVA = "0xFCD304", Offset = "0xFCD304", VA = "0xFCD304")]
		public void Initiate(Transform transform)
		{
		}

		[Token(Token = "0x6000A2F")]
		[Address(RVA = "0xFCD5FC", Offset = "0xFCD5FC", VA = "0xFCD5FC")]
		public void Update(Vector3 targetPosition)
		{
		}

		[Token(Token = "0x6000A30")]
		[Address(RVA = "0xFCDE7C", Offset = "0xFCDE7C", VA = "0xFCDE7C")]
		private void CalculatePath(Vector3 targetPosition)
		{
		}

		[Token(Token = "0x6000A31")]
		[Address(RVA = "0xFCDEE0", Offset = "0xFCDEE0", VA = "0xFCDEE0")]
		private bool Find(Vector3 targetPosition)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A32")]
		[Address(RVA = "0xFCDDA4", Offset = "0xFCDDA4", VA = "0xFCDDA4")]
		private void Stop()
		{
		}

		[Token(Token = "0x6000A33")]
		[Address(RVA = "0xFCDE00", Offset = "0xFCDE00", VA = "0xFCDE00")]
		private float HorDistance(Vector3 p1, Vector3 p2)
		{
			return default(float);
		}

		[Token(Token = "0x6000A34")]
		[Address(RVA = "0xFCDA7C", Offset = "0xFCDA7C", VA = "0xFCDA7C")]
		public void Visualize()
		{
		}

		[Token(Token = "0x6000A35")]
		[Address(RVA = "0xFCE014", Offset = "0xFCE014", VA = "0xFCE014")]
		public Navigator()
		{
		}
	}
}
namespace MoonSharp.Interpreter
{
	[Token(Token = "0x200015E")]
	internal static class Extension_Methods
	{
		[Token(Token = "0x6000A36")]
		public static TValue GetOrDefault<TKey, TValue>(this Dictionary<TKey, TValue> dictionary, TKey key)
		{
			return (TValue)null;
		}

		[Token(Token = "0x6000A37")]
		public static TValue GetOrCreate<TKey, TValue>(this Dictionary<TKey, TValue> dictionary, TKey key, Func<TValue> creator)
		{
			return (TValue)null;
		}
	}
	[Token(Token = "0x200015F")]
	public class CallbackArguments
	{
		[Token(Token = "0x40008FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IList<DynValue> m_Args;

		[Token(Token = "0x40008FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int m_Count;

		[Token(Token = "0x40008FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private bool m_LastIsTuple;

		[Token(Token = "0x17000104")]
		public int Count
		{
			[Token(Token = "0x6000A39")]
			[Address(RVA = "0xFCE3A0", Offset = "0xFCE3A0", VA = "0xFCE3A0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000105")]
		public bool IsMethodCall
		{
			[Token(Token = "0x6000A3A")]
			[Address(RVA = "0xFCE3A8", Offset = "0xFCE3A8", VA = "0xFCE3A8")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000A3B")]
			[Address(RVA = "0xFCE3B0", Offset = "0xFCE3B0", VA = "0xFCE3B0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000106")]
		public DynValue this[int index]
		{
			[Token(Token = "0x6000A3C")]
			[Address(RVA = "0xFCE3BC", Offset = "0xFCE3BC", VA = "0xFCE3BC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A38")]
		[Address(RVA = "0xFCE084", Offset = "0xFCE084", VA = "0xFCE084")]
		public CallbackArguments(IList<DynValue> args, bool isMethodCall)
		{
		}

		[Token(Token = "0x6000A3D")]
		[Address(RVA = "0xFCE460", Offset = "0xFCE460", VA = "0xFCE460")]
		public DynValue RawGet(int index, bool translateVoids)
		{
			return null;
		}

		[Token(Token = "0x6000A3E")]
		[Address(RVA = "0xFCE81C", Offset = "0xFCE81C", VA = "0xFCE81C")]
		public DynValue[] GetArray(int skip = 0)
		{
			return null;
		}

		[Token(Token = "0x6000A3F")]
		[Address(RVA = "0xFCE92C", Offset = "0xFCE92C", VA = "0xFCE92C")]
		public DynValue AsType(int argNum, string funcName, DataType type, bool allowNil = false)
		{
			return null;
		}

		[Token(Token = "0x6000A40")]
		public T AsUserData<T>(int argNum, string funcName, bool allowNil = false)
		{
			return (T)null;
		}

		[Token(Token = "0x6000A41")]
		[Address(RVA = "0xFCEB30", Offset = "0xFCEB30", VA = "0xFCEB30")]
		public int AsInt(int argNum, string funcName)
		{
			return default(int);
		}

		[Token(Token = "0x6000A42")]
		[Address(RVA = "0xFCEB6C", Offset = "0xFCEB6C", VA = "0xFCEB6C")]
		public long AsLong(int argNum, string funcName)
		{
			return default(long);
		}

		[Token(Token = "0x6000A43")]
		[Address(RVA = "0xFCEBA8", Offset = "0xFCEBA8", VA = "0xFCEBA8")]
		public string AsStringUsingMeta(ScriptExecutionContext executionContext, int argNum, string funcName)
		{
			return null;
		}

		[Token(Token = "0x6000A44")]
		[Address(RVA = "0xFCF260", Offset = "0xFCF260", VA = "0xFCF260")]
		public CallbackArguments SkipMethodCall()
		{
			return null;
		}
	}
	[Token(Token = "0x2000160")]
	public sealed class CallbackFunction : RefIdObject
	{
		[Token(Token = "0x4000901")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static InteropAccessMode m_DefaultAccessMode;

		[Token(Token = "0x17000107")]
		public string Name
		{
			[Token(Token = "0x6000A45")]
			[Address(RVA = "0xFCF3A0", Offset = "0xFCF3A0", VA = "0xFCF3A0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A46")]
			[Address(RVA = "0xFCF3A8", Offset = "0xFCF3A8", VA = "0xFCF3A8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000108")]
		public Func<ScriptExecutionContext, CallbackArguments, DynValue> ClrCallback
		{
			[Token(Token = "0x6000A47")]
			[Address(RVA = "0xFCF3B0", Offset = "0xFCF3B0", VA = "0xFCF3B0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A48")]
			[Address(RVA = "0xFCF3B8", Offset = "0xFCF3B8", VA = "0xFCF3B8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000109")]
		public static InteropAccessMode DefaultAccessMode
		{
			[Token(Token = "0x6000A4B")]
			[Address(RVA = "0xFCF62C", Offset = "0xFCF62C", VA = "0xFCF62C")]
			get
			{
				return default(InteropAccessMode);
			}
			[Token(Token = "0x6000A4C")]
			[Address(RVA = "0xFCF684", Offset = "0xFCF684", VA = "0xFCF684")]
			set
			{
			}
		}

		[Token(Token = "0x1700010A")]
		public object AdditionalData
		{
			[Token(Token = "0x6000A4F")]
			[Address(RVA = "0xFCF8DC", Offset = "0xFCF8DC", VA = "0xFCF8DC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A50")]
			[Address(RVA = "0xFCF8E4", Offset = "0xFCF8E4", VA = "0xFCF8E4")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6000A49")]
		[Address(RVA = "0xFCF3C0", Offset = "0xFCF3C0", VA = "0xFCF3C0")]
		public CallbackFunction(Func<ScriptExecutionContext, CallbackArguments, DynValue> callBack, [Optional] string name)
		{
		}

		[Token(Token = "0x6000A4A")]
		[Address(RVA = "0xFCF460", Offset = "0xFCF460", VA = "0xFCF460")]
		public DynValue Invoke(ScriptExecutionContext executionContext, IList<DynValue> args, bool isMethodCall = false)
		{
			return null;
		}

		[Token(Token = "0x6000A4D")]
		[Address(RVA = "0xFCF748", Offset = "0xFCF748", VA = "0xFCF748")]
		public static CallbackFunction FromDelegate(Script script, Delegate del, InteropAccessMode accessMode = InteropAccessMode.Default)
		{
			return null;
		}

		[Token(Token = "0x6000A4E")]
		[Address(RVA = "0xFCF81C", Offset = "0xFCF81C", VA = "0xFCF81C")]
		public static CallbackFunction FromMethodInfo(Script script, MethodInfo mi, [Optional] object obj, InteropAccessMode accessMode = InteropAccessMode.Default)
		{
			return null;
		}

		[Token(Token = "0x6000A51")]
		[Address(RVA = "0xFCF8EC", Offset = "0xFCF8EC", VA = "0xFCF8EC")]
		public static bool CheckCallbackSignature(MethodInfo mi, bool requirePublicVisibility)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000161")]
	public class Closure : RefIdObject, IScriptPrivateResource
	{
		[Token(Token = "0x2000162")]
		public enum UpvaluesType
		{
			[Token(Token = "0x400090A")]
			None,
			[Token(Token = "0x400090B")]
			Environment,
			[Token(Token = "0x400090C")]
			Closure
		}

		[Token(Token = "0x4000907")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static ClosureContext emptyClosure;

		[Token(Token = "0x1700010B")]
		public int EntryPointByteCodeLocation
		{
			[Token(Token = "0x6000A53")]
			[Address(RVA = "0xFCFB20", Offset = "0xFCFB20", VA = "0xFCFB20")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000A54")]
			[Address(RVA = "0xFCFB28", Offset = "0xFCFB28", VA = "0xFCFB28")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700010C")]
		public Script OwnerScript
		{
			[Token(Token = "0x6000A55")]
			[Address(RVA = "0xFCFB30", Offset = "0xFCFB30", VA = "0xFCFB30", Slot = "4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A56")]
			[Address(RVA = "0xFCFB38", Offset = "0xFCFB38", VA = "0xFCFB38")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700010D")]
		internal ClosureContext ClosureContext
		{
			[Token(Token = "0x6000A57")]
			[Address(RVA = "0xFCFB40", Offset = "0xFCFB40", VA = "0xFCFB40")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A58")]
			[Address(RVA = "0xFCFB48", Offset = "0xFCFB48", VA = "0xFCFB48")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000A59")]
		[Address(RVA = "0xFCFB50", Offset = "0xFCFB50", VA = "0xFCFB50")]
		internal Closure(Script script, int idx, SymbolRef[] symbols, IEnumerable<DynValue> resolvedLocals)
		{
		}

		[Token(Token = "0x6000A5A")]
		[Address(RVA = "0xFCFC48", Offset = "0xFCFC48", VA = "0xFCFC48")]
		public DynValue Call()
		{
			return null;
		}

		[Token(Token = "0x6000A5B")]
		[Address(RVA = "0xFCFC68", Offset = "0xFCFC68", VA = "0xFCFC68")]
		public DynValue Call(params object[] args)
		{
			return null;
		}

		[Token(Token = "0x6000A5C")]
		[Address(RVA = "0xFCFC90", Offset = "0xFCFC90", VA = "0xFCFC90")]
		public DynValue Call(params DynValue[] args)
		{
			return null;
		}

		[Token(Token = "0x6000A5D")]
		[Address(RVA = "0xFCFCB8", Offset = "0xFCFCB8", VA = "0xFCFCB8")]
		public ScriptFunctionDelegate GetDelegate()
		{
			return null;
		}

		[Token(Token = "0x6000A5E")]
		public ScriptFunctionDelegate<T> GetDelegate<T>()
		{
			return null;
		}

		[Token(Token = "0x6000A5F")]
		[Address(RVA = "0xFCFE6C", Offset = "0xFCFE6C", VA = "0xFCFE6C")]
		public int GetUpvaluesCount()
		{
			return default(int);
		}

		[Token(Token = "0x6000A60")]
		[Address(RVA = "0xFCFEB4", Offset = "0xFCFEB4", VA = "0xFCFEB4")]
		public string GetUpvalueName(int idx)
		{
			return null;
		}

		[Token(Token = "0x6000A61")]
		[Address(RVA = "0xFCFEEC", Offset = "0xFCFEEC", VA = "0xFCFEEC")]
		public DynValue GetUpvalue(int idx)
		{
			return null;
		}

		[Token(Token = "0x6000A62")]
		[Address(RVA = "0xFCFF44", Offset = "0xFCFF44", VA = "0xFCFF44")]
		public UpvaluesType GetUpvaluesType()
		{
			return default(UpvaluesType);
		}
	}
	[Token(Token = "0x2000163")]
	public class Coroutine : RefIdObject, IScriptPrivateResource
	{
		[Token(Token = "0x2000164")]
		public enum CoroutineType
		{
			[Token(Token = "0x4000912")]
			Coroutine,
			[Token(Token = "0x4000913")]
			ClrCallback,
			[Token(Token = "0x4000914")]
			ClrCallbackDead
		}

		[Token(Token = "0x2000165")]
		[CompilerGenerated]
		private sealed class <AsTypedEnumerable>d__10 : IEnumerable<DynValue>, IEnumerable, IEnumerator<DynValue>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000915")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000916")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private DynValue <>2__current;

			[Token(Token = "0x4000917")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4000918")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Coroutine <>4__this;

			[Token(Token = "0x17000112")]
			private DynValue System.Collections.Generic.IEnumerator<MoonSharp.Interpreter.DynValue>.Current
			{
				[Token(Token = "0x6000A7E")]
				[Address(RVA = "0xFD0EA0", Offset = "0xFD0EA0", VA = "0xFD0EA0", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000113")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000A80")]
				[Address(RVA = "0xFD0EE8", Offset = "0xFD0EE8", VA = "0xFD0EE8", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000A7B")]
			[Address(RVA = "0xFD020C", Offset = "0xFD020C", VA = "0xFD020C")]
			[DebuggerHidden]
			public <AsTypedEnumerable>d__10(int <>1__state)
			{
			}

			[Token(Token = "0x6000A7C")]
			[Address(RVA = "0xFD0DB8", Offset = "0xFD0DB8", VA = "0xFD0DB8", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000A7D")]
			[Address(RVA = "0xFD0DBC", Offset = "0xFD0DBC", VA = "0xFD0DBC", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000A7F")]
			[Address(RVA = "0xFD0EA8", Offset = "0xFD0EA8", VA = "0xFD0EA8", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6000A81")]
			[Address(RVA = "0xFD0EF0", Offset = "0xFD0EF0", VA = "0xFD0EF0", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<DynValue> System.Collections.Generic.IEnumerable<MoonSharp.Interpreter.DynValue>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6000A82")]
			[Address(RVA = "0xFD0F9C", Offset = "0xFD0F9C", VA = "0xFD0F9C", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x2000166")]
		[CompilerGenerated]
		private sealed class <AsEnumerable>d__11 : IEnumerable<object>, IEnumerable, IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000919")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400091A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400091B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x400091C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Coroutine <>4__this;

			[Token(Token = "0x400091D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private IEnumerator<DynValue> <>7__wrap1;

			[Token(Token = "0x17000114")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000A87")]
				[Address(RVA = "0xFD1414", Offset = "0xFD1414", VA = "0xFD1414", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000115")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000A89")]
				[Address(RVA = "0xFD145C", Offset = "0xFD145C", VA = "0xFD145C", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000A83")]
			[Address(RVA = "0xFD02C4", Offset = "0xFD02C4", VA = "0xFD02C4")]
			[DebuggerHidden]
			public <AsEnumerable>d__11(int <>1__state)
			{
			}

			[Token(Token = "0x6000A84")]
			[Address(RVA = "0xFD0FA0", Offset = "0xFD0FA0", VA = "0xFD0FA0", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000A85")]
			[Address(RVA = "0xFD0FBC", Offset = "0xFD0FBC", VA = "0xFD0FBC", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000A86")]
			[Address(RVA = "0xFD1364", Offset = "0xFD1364", VA = "0xFD1364")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6000A88")]
			[Address(RVA = "0xFD141C", Offset = "0xFD141C", VA = "0xFD141C", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6000A8A")]
			[Address(RVA = "0xFD1464", Offset = "0xFD1464", VA = "0xFD1464", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<object> System.Collections.Generic.IEnumerable<System.Object>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6000A8B")]
			[Address(RVA = "0xFD1510", Offset = "0xFD1510", VA = "0xFD1510", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x2000167")]
		[CompilerGenerated]
		private sealed class <AsEnumerable>d__12<T> : IEnumerable<T>, IEnumerable, IEnumerator<T>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400091E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <>1__state;

			[Token(Token = "0x400091F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T <>2__current;

			[Token(Token = "0x4000920")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4000921")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Coroutine <>4__this;

			[Token(Token = "0x4000922")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private IEnumerator<DynValue> <>7__wrap1;

			[Token(Token = "0x17000116")]
			private T System.Collections.Generic.IEnumerator<T>.Current
			{
				[Token(Token = "0x6000A90")]
				[DebuggerHidden]
				get
				{
					return (T)null;
				}
			}

			[Token(Token = "0x17000117")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000A92")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000A8C")]
			[DebuggerHidden]
			public <AsEnumerable>d__12(int <>1__state)
			{
			}

			[Token(Token = "0x6000A8D")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000A8E")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000A8F")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6000A91")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6000A93")]
			[DebuggerHidden]
			private IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6000A94")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x2000168")]
		[CompilerGenerated]
		private sealed class <AsUnityCoroutine>d__13 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000923")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000924")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000925")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Coroutine <>4__this;

			[Token(Token = "0x4000926")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private IEnumerator<DynValue> <>7__wrap1;

			[Token(Token = "0x17000118")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000A99")]
				[Address(RVA = "0xFD1888", Offset = "0xFD1888", VA = "0xFD1888", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000119")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000A9B")]
				[Address(RVA = "0xFD18D0", Offset = "0xFD18D0", VA = "0xFD18D0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000A95")]
			[Address(RVA = "0xFD036C", Offset = "0xFD036C", VA = "0xFD036C")]
			[DebuggerHidden]
			public <AsUnityCoroutine>d__13(int <>1__state)
			{
			}

			[Token(Token = "0x6000A96")]
			[Address(RVA = "0xFD1514", Offset = "0xFD1514", VA = "0xFD1514", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000A97")]
			[Address(RVA = "0xFD1530", Offset = "0xFD1530", VA = "0xFD1530", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000A98")]
			[Address(RVA = "0xFD17D8", Offset = "0xFD17D8", VA = "0xFD17D8")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6000A9A")]
			[Address(RVA = "0xFD1890", Offset = "0xFD1890", VA = "0xFD1890", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400090E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private CallbackFunction m_ClrCallback;

		[Token(Token = "0x400090F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Processor m_Processor;

		[Token(Token = "0x1700010E")]
		public CoroutineType Type
		{
			[Token(Token = "0x6000A66")]
			[Address(RVA = "0xFD0068", Offset = "0xFD0068", VA = "0xFD0068")]
			[CompilerGenerated]
			get
			{
				return default(CoroutineType);
			}
			[Token(Token = "0x6000A67")]
			[Address(RVA = "0xFD0070", Offset = "0xFD0070", VA = "0xFD0070")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700010F")]
		public CoroutineState State
		{
			[Token(Token = "0x6000A75")]
			[Address(RVA = "0xFD0C68", Offset = "0xFD0C68", VA = "0xFD0C68")]
			get
			{
				return default(CoroutineState);
			}
		}

		[Token(Token = "0x17000110")]
		public Script OwnerScript
		{
			[Token(Token = "0x6000A77")]
			[Address(RVA = "0xFD0D70", Offset = "0xFD0D70", VA = "0xFD0D70", Slot = "4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A78")]
			[Address(RVA = "0xFD0D78", Offset = "0xFD0D78", VA = "0xFD0D78")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000111")]
		public long AutoYieldCounter
		{
			[Token(Token = "0x6000A79")]
			[Address(RVA = "0xFD0D80", Offset = "0xFD0D80", VA = "0xFD0D80")]
			get
			{
				return default(long);
			}
			[Token(Token = "0x6000A7A")]
			[Address(RVA = "0xFD0D9C", Offset = "0xFD0D9C", VA = "0xFD0D9C")]
			set
			{
			}
		}

		[Token(Token = "0x6000A68")]
		[Address(RVA = "0xFD0078", Offset = "0xFD0078", VA = "0xFD0078")]
		internal Coroutine(CallbackFunction function)
		{
		}

		[Token(Token = "0x6000A69")]
		[Address(RVA = "0xFD00BC", Offset = "0xFD00BC", VA = "0xFD00BC")]
		internal Coroutine(Processor proc)
		{
		}

		[Token(Token = "0x6000A6A")]
		[Address(RVA = "0xFD011C", Offset = "0xFD011C", VA = "0xFD011C")]
		internal void MarkClrCallbackAsDead()
		{
		}

		[Token(Token = "0x6000A6B")]
		[Address(RVA = "0xFD0188", Offset = "0xFD0188", VA = "0xFD0188")]
		[IteratorStateMachine(typeof(<AsTypedEnumerable>d__10))]
		public IEnumerable<DynValue> AsTypedEnumerable()
		{
			return null;
		}

		[Token(Token = "0x6000A6C")]
		[Address(RVA = "0xFD0240", Offset = "0xFD0240", VA = "0xFD0240")]
		[IteratorStateMachine(typeof(<AsEnumerable>d__11))]
		public IEnumerable<object> AsEnumerable()
		{
			return null;
		}

		[Token(Token = "0x6000A6D")]
		[IteratorStateMachine(typeof(<AsEnumerable>d__12<>))]
		public IEnumerable<T> AsEnumerable<T>()
		{
			return null;
		}

		[Token(Token = "0x6000A6E")]
		[Address(RVA = "0xFD02F8", Offset = "0xFD02F8", VA = "0xFD02F8")]
		[IteratorStateMachine(typeof(<AsUnityCoroutine>d__13))]
		public IEnumerator AsUnityCoroutine()
		{
			return null;
		}

		[Token(Token = "0x6000A6F")]
		[Address(RVA = "0xFD0394", Offset = "0xFD0394", VA = "0xFD0394")]
		public DynValue Resume(params DynValue[] args)
		{
			return null;
		}

		[Token(Token = "0x6000A70")]
		[Address(RVA = "0xFD0488", Offset = "0xFD0488", VA = "0xFD0488")]
		public DynValue Resume(ScriptExecutionContext context, params DynValue[] args)
		{
			return null;
		}

		[Token(Token = "0x6000A71")]
		[Address(RVA = "0xFD08B4", Offset = "0xFD08B4", VA = "0xFD08B4")]
		public DynValue Resume()
		{
			return null;
		}

		[Token(Token = "0x6000A72")]
		[Address(RVA = "0xFD0908", Offset = "0xFD0908", VA = "0xFD0908")]
		public DynValue Resume(ScriptExecutionContext context)
		{
			return null;
		}

		[Token(Token = "0x6000A73")]
		[Address(RVA = "0xFD096C", Offset = "0xFD096C", VA = "0xFD096C")]
		public DynValue Resume(params object[] args)
		{
			return null;
		}

		[Token(Token = "0x6000A74")]
		[Address(RVA = "0xFD0B08", Offset = "0xFD0B08", VA = "0xFD0B08")]
		public DynValue Resume(ScriptExecutionContext context, params object[] args)
		{
			return null;
		}

		[Token(Token = "0x6000A76")]
		[Address(RVA = "0xFD0CA4", Offset = "0xFD0CA4", VA = "0xFD0CA4")]
		public WatchItem[] GetStackTrace(int skip, [Optional] SourceRef entrySourceRef)
		{
			return null;
		}
	}
	[Token(Token = "0x2000169")]
	public enum CoroutineState
	{
		[Token(Token = "0x4000928")]
		Main,
		[Token(Token = "0x4000929")]
		NotStarted,
		[Token(Token = "0x400092A")]
		Suspended,
		[Token(Token = "0x400092B")]
		ForceSuspended,
		[Token(Token = "0x400092C")]
		Running,
		[Token(Token = "0x400092D")]
		Dead
	}
	[Token(Token = "0x200016A")]
	public enum DataType
	{
		[Token(Token = "0x400092F")]
		Nil,
		[Token(Token = "0x4000930")]
		Void,
		[Token(Token = "0x4000931")]
		Boolean,
		[Token(Token = "0x4000932")]
		Number,
		[Token(Token = "0x4000933")]
		String,
		[Token(Token = "0x4000934")]
		Function,
		[Token(Token = "0x4000935")]
		Table,
		[Token(Token = "0x4000936")]
		Tuple,
		[Token(Token = "0x4000937")]
		UserData,
		[Token(Token = "0x4000938")]
		Thread,
		[Token(Token = "0x4000939")]
		ClrFunction,
		[Token(Token = "0x400093A")]
		TailCallRequest,
		[Token(Token = "0x400093B")]
		YieldRequest
	}
	[Token(Token = "0x200016B")]
	public static class LuaTypeExtensions
	{
		[Token(Token = "0x400093C")]
		internal const DataType MaxMetaTypes = DataType.Table;

		[Token(Token = "0x400093D")]
		internal const DataType MaxConvertibleTypes = DataType.ClrFunction;

		[Token(Token = "0x6000A9C")]
		[Address(RVA = "0xFD18D8", Offset = "0xFD18D8", VA = "0xFD18D8")]
		public static bool CanHaveTypeMetatables(this DataType type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A9D")]
		[Address(RVA = "0xFD18E4", Offset = "0xFD18E4", VA = "0xFD18E4")]
		public static string ToErrorTypeString(this DataType type)
		{
			return null;
		}

		[Token(Token = "0x6000A9E")]
		[Address(RVA = "0xFD1A40", Offset = "0xFD1A40", VA = "0xFD1A40")]
		public static string ToLuaDebuggerString(this DataType type)
		{
			return null;
		}

		[Token(Token = "0x6000A9F")]
		[Address(RVA = "0xFD1AB4", Offset = "0xFD1AB4", VA = "0xFD1AB4")]
		public static string ToLuaTypeString(this DataType type)
		{
			return null;
		}
	}
	[Token(Token = "0x200016C")]
	public sealed class DynValue
	{
		[Token(Token = "0x400093E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int s_RefIDCounter;

		[Token(Token = "0x400093F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int m_RefID;

		[Token(Token = "0x4000940")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private int m_HashCode;

		[Token(Token = "0x4000941")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool m_ReadOnly;

		[Token(Token = "0x4000942")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private double m_Number;

		[Token(Token = "0x4000943")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private object m_Object;

		[Token(Token = "0x4000944")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private DataType m_Type;

		[Token(Token = "0x1700011A")]
		public int ReferenceID
		{
			[Token(Token = "0x6000AA0")]
			[Address(RVA = "0xFD1C08", Offset = "0xFD1C08", VA = "0xFD1C08")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700011B")]
		public DataType Type
		{
			[Token(Token = "0x6000AA1")]
			[Address(RVA = "0xFD1C10", Offset = "0xFD1C10", VA = "0xFD1C10")]
			get
			{
				return default(DataType);
			}
		}

		[Token(Token = "0x1700011C")]
		public Closure Function
		{
			[Token(Token = "0x6000AA2")]
			[Address(RVA = "0xFD1C18", Offset = "0xFD1C18", VA = "0xFD1C18")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700011D")]
		public double Number
		{
			[Token(Token = "0x6000AA3")]
			[Address(RVA = "0xFD1C94", Offset = "0xFD1C94", VA = "0xFD1C94")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x1700011E")]
		public DynValue[] Tuple
		{
			[Token(Token = "0x6000AA4")]
			[Address(RVA = "0xFCE358", Offset = "0xFCE358", VA = "0xFCE358")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700011F")]
		public Coroutine Coroutine
		{
			[Token(Token = "0x6000AA5")]
			[Address(RVA = "0xFD1C9C", Offset = "0xFD1C9C", VA = "0xFD1C9C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000120")]
		public Table Table
		{
			[Token(Token = "0x6000AA6")]
			[Address(RVA = "0xFCEDE8", Offset = "0xFCEDE8", VA = "0xFCEDE8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000121")]
		public bool Boolean
		{
			[Token(Token = "0x6000AA7")]
			[Address(RVA = "0xFD1D18", Offset = "0xFD1D18", VA = "0xFD1D18")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000122")]
		public string String
		{
			[Token(Token = "0x6000AA8")]
			[Address(RVA = "0xFD1D28", Offset = "0xFD1D28", VA = "0xFD1D28")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000123")]
		public CallbackFunction Callback
		{
			[Token(Token = "0x6000AA9")]
			[Address(RVA = "0xFD1D88", Offset = "0xFD1D88", VA = "0xFD1D88")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000124")]
		public TailCallData TailCallData
		{
			[Token(Token = "0x6000AAA")]
			[Address(RVA = "0xFD1DE8", Offset = "0xFD1DE8", VA = "0xFD1DE8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000125")]
		public YieldRequest YieldRequest
		{
			[Token(Token = "0x6000AAB")]
			[Address(RVA = "0xFD1E64", Offset = "0xFD1E64", VA = "0xFD1E64")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000126")]
		public UserData UserData
		{
			[Token(Token = "0x6000AAC")]
			[Address(RVA = "0xFD1EE0", Offset = "0xFD1EE0", VA = "0xFD1EE0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000127")]
		public bool ReadOnly
		{
			[Token(Token = "0x6000AAD")]
			[Address(RVA = "0xFD1F5C", Offset = "0xFD1F5C", VA = "0xFD1F5C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000128")]
		public static DynValue Void
		{
			[Token(Token = "0x6000AC7")]
			[Address(RVA = "0xFD30A0", Offset = "0xFD30A0", VA = "0xFD30A0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000AC8")]
			[Address(RVA = "0xFD30F8", Offset = "0xFD30F8", VA = "0xFD30F8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000129")]
		public static DynValue Nil
		{
			[Token(Token = "0x6000AC9")]
			[Address(RVA = "0xFD3158", Offset = "0xFD3158", VA = "0xFD3158")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000ACA")]
			[Address(RVA = "0xFD31B0", Offset = "0xFD31B0", VA = "0xFD31B0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700012A")]
		public static DynValue True
		{
			[Token(Token = "0x6000ACB")]
			[Address(RVA = "0xFD3210", Offset = "0xFD3210", VA = "0xFD3210")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000ACC")]
			[Address(RVA = "0xFD3268", Offset = "0xFD3268", VA = "0xFD3268")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700012B")]
		public static DynValue False
		{
			[Token(Token = "0x6000ACD")]
			[Address(RVA = "0xFD32C8", Offset = "0xFD32C8", VA = "0xFD32C8")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000ACE")]
			[Address(RVA = "0xFD3320", Offset = "0xFD3320", VA = "0xFD3320")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000AAE")]
		[Address(RVA = "0xFD1F64", Offset = "0xFD1F64", VA = "0xFD1F64")]
		public static DynValue NewNil()
		{
			return null;
		}

		[Token(Token = "0x6000AAF")]
		[Address(RVA = "0xFD2030", Offset = "0xFD2030", VA = "0xFD2030")]
		public static DynValue NewBoolean(bool v)
		{
			return null;
		}

		[Token(Token = "0x6000AB0")]
		[Address(RVA = "0xFD20A8", Offset = "0xFD20A8", VA = "0xFD20A8")]
		public static DynValue NewNumber(double num)
		{
			return null;
		}

		[Token(Token = "0x6000AB1")]
		[Address(RVA = "0xFD2120", Offset = "0xFD2120", VA = "0xFD2120")]
		public static DynValue NewString(string str)
		{
			return null;
		}

		[Token(Token = "0x6000AB2")]
		[Address(RVA = "0xFD2194", Offset = "0xFD2194", VA = "0xFD2194")]
		public static DynValue NewString(StringBuilder sb)
		{
			return null;
		}

		[Token(Token = "0x6000AB3")]
		[Address(RVA = "0xFD221C", Offset = "0xFD221C", VA = "0xFD221C")]
		public static DynValue NewString(string format, params object[] args)
		{
			return null;
		}

		[Token(Token = "0x6000AB4")]
		[Address(RVA = "0xFD22AC", Offset = "0xFD22AC", VA = "0xFD22AC")]
		public static DynValue NewCoroutine(Coroutine coroutine)
		{
			return null;
		}

		[Token(Token = "0x6000AB5")]
		[Address(RVA = "0xFD2320", Offset = "0xFD2320", VA = "0xFD2320")]
		public static DynValue NewClosure(Closure function)
		{
			return null;
		}

		[Token(Token = "0x6000AB6")]
		[Address(RVA = "0xFD2394", Offset = "0xFD2394", VA = "0xFD2394")]
		public static DynValue NewCallback(Func<ScriptExecutionContext, CallbackArguments, DynValue> callBack, [Optional] string name)
		{
			return null;
		}

		[Token(Token = "0x6000AB7")]
		[Address(RVA = "0xFD2444", Offset = "0xFD2444", VA = "0xFD2444")]
		public static DynValue NewCallback(CallbackFunction function)
		{
			return null;
		}

		[Token(Token = "0x6000AB8")]
		[Address(RVA = "0xFD24B8", Offset = "0xFD24B8", VA = "0xFD24B8")]
		public static DynValue NewTable(Table table)
		{
			return null;
		}

		[Token(Token = "0x6000AB9")]
		[Address(RVA = "0xFD252C", Offset = "0xFD252C", VA = "0xFD252C")]
		public static DynValue NewPrimeTable()
		{
			return null;
		}

		[Token(Token = "0x6000ABA")]
		[Address(RVA = "0xFD2768", Offset = "0xFD2768", VA = "0xFD2768")]
		public static DynValue NewTable(Script script)
		{
			return null;
		}

		[Token(Token = "0x6000ABB")]
		[Address(RVA = "0xFD27EC", Offset = "0xFD27EC", VA = "0xFD27EC")]
		public static DynValue NewTable(Script script, params DynValue[] arrayValues)
		{
			return null;
		}

		[Token(Token = "0x6000ABC")]
		[Address(RVA = "0xFD294C", Offset = "0xFD294C", VA = "0xFD294C")]
		public static DynValue NewTailCallReq(DynValue tailFn, params DynValue[] args)
		{
			return null;
		}

		[Token(Token = "0x6000ABD")]
		[Address(RVA = "0xFD2A20", Offset = "0xFD2A20", VA = "0xFD2A20")]
		public static DynValue NewTailCallReq(TailCallData tailCallData)
		{
			return null;
		}

		[Token(Token = "0x6000ABE")]
		[Address(RVA = "0xFD2A94", Offset = "0xFD2A94", VA = "0xFD2A94")]
		public static DynValue NewYieldReq(DynValue[] args)
		{
			return null;
		}

		[Token(Token = "0x6000ABF")]
		[Address(RVA = "0xFD2B4C", Offset = "0xFD2B4C", VA = "0xFD2B4C")]
		internal static DynValue NewForcedYieldReq()
		{
			return null;
		}

		[Token(Token = "0x6000AC0")]
		[Address(RVA = "0xFD2BF0", Offset = "0xFD2BF0", VA = "0xFD2BF0")]
		public static DynValue NewTuple(params DynValue[] values)
		{
			return null;
		}

		[Token(Token = "0x6000AC1")]
		[Address(RVA = "0xFD2C9C", Offset = "0xFD2C9C", VA = "0xFD2C9C")]
		public static DynValue NewTupleNested(params DynValue[] values)
		{
			return null;
		}

		[Token(Token = "0x6000AC2")]
		[Address(RVA = "0xFD2F70", Offset = "0xFD2F70", VA = "0xFD2F70")]
		public static DynValue NewUserData(UserData userData)
		{
			return null;
		}

		[Token(Token = "0x6000AC3")]
		[Address(RVA = "0xFD2FE4", Offset = "0xFD2FE4", VA = "0xFD2FE4")]
		public DynValue AsReadOnly()
		{
			return null;
		}

		[Token(Token = "0x6000AC4")]
		[Address(RVA = "0xFD3090", Offset = "0xFD3090", VA = "0xFD3090")]
		public DynValue Clone()
		{
			return null;
		}

		[Token(Token = "0x6000AC5")]
		[Address(RVA = "0xFD2FF8", Offset = "0xFD2FF8", VA = "0xFD2FF8")]
		public DynValue Clone(bool readOnly)
		{
			return null;
		}

		[Token(Token = "0x6000AC6")]
		[Address(RVA = "0xFD3098", Offset = "0xFD3098", VA = "0xFD3098")]
		public DynValue CloneAsWritable()
		{
			return null;
		}

		[Token(Token = "0x6000ACF")]
		[Address(RVA = "0xFD3380", Offset = "0xFD3380", VA = "0xFD3380")]
		static DynValue()
		{
		}

		[Token(Token = "0x6000AD0")]
		[Address(RVA = "0xFCEEF8", Offset = "0xFCEEF8", VA = "0xFCEEF8")]
		public string ToPrintString()
		{
			return null;
		}

		[Token(Token = "0x6000AD1")]
		[Address(RVA = "0xFD3614", Offset = "0xFD3614", VA = "0xFD3614")]
		public string ToDebugPrintString()
		{
			return null;
		}

		[Token(Token = "0x6000AD2")]
		[Address(RVA = "0xFD3920", Offset = "0xFD3920", VA = "0xFD3920", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000AD3")]
		[Address(RVA = "0xFD3DD4", Offset = "0xFD3DD4", VA = "0xFD3DD4", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000AD4")]
		[Address(RVA = "0xFD3F64", Offset = "0xFD3F64", VA = "0xFD3F64", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AD5")]
		[Address(RVA = "0xFD4218", Offset = "0xFD4218", VA = "0xFD4218")]
		public string CastToString()
		{
			return null;
		}

		[Token(Token = "0x6000AD6")]
		[Address(RVA = "0xFD42B4", Offset = "0xFD42B4", VA = "0xFD42B4")]
		public double? CastToNumber()
		{
			return null;
		}

		[Token(Token = "0x6000AD7")]
		[Address(RVA = "0xFD43E0", Offset = "0xFD43E0", VA = "0xFD43E0")]
		public bool CastToBool()
		{
			return default(bool);
		}

		[Token(Token = "0x6000AD8")]
		[Address(RVA = "0xFD441C", Offset = "0xFD441C", VA = "0xFD441C")]
		public IScriptPrivateResource GetAsPrivateResource()
		{
			return null;
		}

		[Token(Token = "0x6000AD9")]
		[Address(RVA = "0xFD128C", Offset = "0xFD128C", VA = "0xFD128C")]
		public DynValue ToScalar()
		{
			return null;
		}

		[Token(Token = "0x6000ADA")]
		[Address(RVA = "0xFD4464", Offset = "0xFD4464", VA = "0xFD4464")]
		public void Assign(DynValue value)
		{
		}

		[Token(Token = "0x6000ADB")]
		[Address(RVA = "0xFD4504", Offset = "0xFD4504", VA = "0xFD4504")]
		public DynValue GetLength()
		{
			return null;
		}

		[Token(Token = "0x6000ADC")]
		[Address(RVA = "0xFD4760", Offset = "0xFD4760", VA = "0xFD4760")]
		public bool IsNil()
		{
			return default(bool);
		}

		[Token(Token = "0x6000ADD")]
		[Address(RVA = "0xFD4770", Offset = "0xFD4770", VA = "0xFD4770")]
		public bool IsNotNil()
		{
			return default(bool);
		}

		[Token(Token = "0x6000ADE")]
		[Address(RVA = "0xFD4780", Offset = "0xFD4780", VA = "0xFD4780")]
		public bool IsVoid()
		{
			return default(bool);
		}

		[Token(Token = "0x6000ADF")]
		[Address(RVA = "0xFD4790", Offset = "0xFD4790", VA = "0xFD4790")]
		public bool IsNotVoid()
		{
			return default(bool);
		}

		[Token(Token = "0x6000AE0")]
		[Address(RVA = "0xFD47A0", Offset = "0xFD47A0", VA = "0xFD47A0")]
		public bool IsNilOrNan()
		{
			return default(bool);
		}

		[Token(Token = "0x6000AE1")]
		[Address(RVA = "0xFD4824", Offset = "0xFD4824", VA = "0xFD4824")]
		internal void AssignNumber(double num)
		{
		}

		[Token(Token = "0x6000AE2")]
		[Address(RVA = "0xFD0B00", Offset = "0xFD0B00", VA = "0xFD0B00")]
		public static DynValue FromObject(Script script, object obj)
		{
			return null;
		}

		[Token(Token = "0x6000AE3")]
		[Address(RVA = "0xFD0060", Offset = "0xFD0060", VA = "0xFD0060")]
		public object ToObject()
		{
			return null;
		}

		[Token(Token = "0x6000AE4")]
		[Address(RVA = "0xFD4978", Offset = "0xFD4978", VA = "0xFD4978")]
		public object ToObject(Type desiredType)
		{
			return null;
		}

		[Token(Token = "0x6000AE5")]
		public T ToObject<T>()
		{
			return (T)null;
		}

		[Token(Token = "0x6000AE6")]
		[Address(RVA = "0xFCE97C", Offset = "0xFCE97C", VA = "0xFCE97C")]
		public DynValue CheckType(string funcName, DataType desiredType, int argNum = -1, TypeValidationFlags flags = TypeValidationFlags.AutoConvert)
		{
			return null;
		}

		[Token(Token = "0x6000AE7")]
		public T CheckUserDataType<T>(string funcName, int argNum = -1, TypeValidationFlags flags = TypeValidationFlags.AutoConvert)
		{
			return (T)null;
		}

		[Token(Token = "0x6000AE8")]
		[Address(RVA = "0xFD1FBC", Offset = "0xFD1FBC", VA = "0xFD1FBC")]
		public DynValue()
		{
		}
	}
	[Token(Token = "0x200016E")]
	public interface IScriptPrivateResource
	{
		[Token(Token = "0x1700012C")]
		Script OwnerScript
		{
			[Token(Token = "0x6000AF0")]
			get;
		}
	}
	[Token(Token = "0x200016F")]
	internal static class ScriptPrivateResource_Extension
	{
		[Token(Token = "0x6000AF1")]
		[Address(RVA = "0xFD041C", Offset = "0xFD041C", VA = "0xFD041C")]
		public static void CheckScriptOwnership(this IScriptPrivateResource containingResource, DynValue[] values)
		{
		}

		[Token(Token = "0x6000AF2")]
		[Address(RVA = "0xFD4C74", Offset = "0xFD4C74", VA = "0xFD4C74")]
		public static void CheckScriptOwnership(this IScriptPrivateResource containingResource, DynValue value)
		{
		}

		[Token(Token = "0x6000AF3")]
		[Address(RVA = "0xFD4CA4", Offset = "0xFD4CA4", VA = "0xFD4CA4")]
		public static void CheckScriptOwnership(this IScriptPrivateResource resource, Script script)
		{
		}

		[Token(Token = "0x6000AF4")]
		[Address(RVA = "0xFD0534", Offset = "0xFD0534", VA = "0xFD0534")]
		public static void CheckScriptOwnership(this IScriptPrivateResource containingResource, IScriptPrivateResource itemResource)
		{
		}
	}
	[Token(Token = "0x2000170")]
	public class RefIdObject
	{
		[Token(Token = "0x400094F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int s_RefIDCounter;

		[Token(Token = "0x4000950")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int m_RefID;

		[Token(Token = "0x1700012D")]
		public int ReferenceID
		{
			[Token(Token = "0x6000AF5")]
			[Address(RVA = "0xFD4DF8", Offset = "0xFD4DF8", VA = "0xFD4DF8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000AF6")]
		[Address(RVA = "0xFD3580", Offset = "0xFD3580", VA = "0xFD3580")]
		public string FormatTypeString(string typeString)
		{
			return null;
		}

		[Token(Token = "0x6000AF7")]
		[Address(RVA = "0xFCF400", Offset = "0xFCF400", VA = "0xFCF400")]
		public RefIdObject()
		{
		}
	}
	[Token(Token = "0x2000171")]
	public delegate object ScriptFunctionDelegate(params object[] args);
	[Token(Token = "0x2000172")]
	public delegate T ScriptFunctionDelegate<T>(params object[] args);
	[Token(Token = "0x2000173")]
	public class SymbolRef
	{
		[Token(Token = "0x4000951")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static SymbolRef s_DefaultEnv;

		[Token(Token = "0x4000952")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal SymbolRefType i_Type;

		[Token(Token = "0x4000953")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal SymbolRef i_Env;

		[Token(Token = "0x4000954")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal int i_Index;

		[Token(Token = "0x4000955")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal string i_Name;

		[Token(Token = "0x1700012E")]
		public SymbolRefType Type
		{
			[Token(Token = "0x6000B00")]
			[Address(RVA = "0xFD4E40", Offset = "0xFD4E40", VA = "0xFD4E40")]
			get
			{
				return default(SymbolRefType);
			}
		}

		[Token(Token = "0x1700012F")]
		public int Index
		{
			[Token(Token = "0x6000B01")]
			[Address(RVA = "0xFD4E48", Offset = "0xFD4E48", VA = "0xFD4E48")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000130")]
		public string Name
		{
			[Token(Token = "0x6000B02")]
			[Address(RVA = "0xFD4E50", Offset = "0xFD4E50", VA = "0xFD4E50")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000131")]
		public SymbolRef Environment
		{
			[Token(Token = "0x6000B03")]
			[Address(RVA = "0xFD4E58", Offset = "0xFD4E58", VA = "0xFD4E58")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000132")]
		public static SymbolRef DefaultEnv
		{
			[Token(Token = "0x6000B04")]
			[Address(RVA = "0xFD4E60", Offset = "0xFD4E60", VA = "0xFD4E60")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B05")]
		[Address(RVA = "0xFD4EB8", Offset = "0xFD4EB8", VA = "0xFD4EB8")]
		public static SymbolRef Global(string name, SymbolRef envSymbol)
		{
			return null;
		}

		[Token(Token = "0x6000B06")]
		[Address(RVA = "0xFD4F5C", Offset = "0xFD4F5C", VA = "0xFD4F5C")]
		internal static SymbolRef Local(string name, int index)
		{
			return null;
		}

		[Token(Token = "0x6000B07")]
		[Address(RVA = "0xFD4FE0", Offset = "0xFD4FE0", VA = "0xFD4FE0")]
		internal static SymbolRef Upvalue(string name, int index)
		{
			return null;
		}

		[Token(Token = "0x6000B08")]
		[Address(RVA = "0xFD5068", Offset = "0xFD5068", VA = "0xFD5068", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000B09")]
		[Address(RVA = "0xFD5190", Offset = "0xFD5190", VA = "0xFD5190")]
		internal void WriteBinary(BinaryWriter bw)
		{
		}

		[Token(Token = "0x6000B0A")]
		[Address(RVA = "0xFD51F4", Offset = "0xFD51F4", VA = "0xFD51F4")]
		internal static SymbolRef ReadBinary(BinaryReader br)
		{
			return null;
		}

		[Token(Token = "0x6000B0B")]
		[Address(RVA = "0xFD52AC", Offset = "0xFD52AC", VA = "0xFD52AC")]
		internal void WriteBinaryEnv(BinaryWriter bw, Dictionary<SymbolRef, int> symbolMap)
		{
		}

		[Token(Token = "0x6000B0C")]
		[Address(RVA = "0xFD5340", Offset = "0xFD5340", VA = "0xFD5340")]
		internal void ReadBinaryEnv(BinaryReader br, SymbolRef[] symbolRefs)
		{
		}

		[Token(Token = "0x6000B0D")]
		[Address(RVA = "0xFD4F54", Offset = "0xFD4F54", VA = "0xFD4F54")]
		public SymbolRef()
		{
		}
	}
	[Token(Token = "0x2000174")]
	public enum SymbolRefType
	{
		[Token(Token = "0x4000957")]
		Local,
		[Token(Token = "0x4000958")]
		Upvalue,
		[Token(Token = "0x4000959")]
		Global,
		[Token(Token = "0x400095A")]
		DefaultEnv
	}
	[Token(Token = "0x2000175")]
	public class Table : RefIdObject, IScriptPrivateResource
	{
		[Token(Token = "0x400095B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly LinkedList<TablePair> m_Values;

		[Token(Token = "0x400095C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly LinkedListIndex<DynValue, TablePair> m_ValueMap;

		[Token(Token = "0x400095D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly LinkedListIndex<string, TablePair> m_StringMap;

		[Token(Token = "0x400095E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly LinkedListIndex<int, TablePair> m_ArrayMap;

		[Token(Token = "0x400095F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly Script m_Owner;

		[Token(Token = "0x4000960")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int m_InitArray;

		[Token(Token = "0x4000961")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private int m_CachedLength;

		[Token(Token = "0x4000962")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool m_ContainsNilEntries;

		[Token(Token = "0x4000963")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Table m_MetaTable;

		[Token(Token = "0x17000133")]
		public Script OwnerScript
		{
			[Token(Token = "0x6000B11")]
			[Address(RVA = "0xFD55B8", Offset = "0xFD55B8", VA = "0xFD55B8", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000134")]
		public object this[params object[] keys]
		{
			[Token(Token = "0x6000B14")]
			[Address(RVA = "0xFD56B8", Offset = "0xFD56B8", VA = "0xFD56B8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B15")]
			[Address(RVA = "0xFD5774", Offset = "0xFD5774", VA = "0xFD5774")]
			set
			{
			}
		}

		[Token(Token = "0x17000135")]
		public object this[object key]
		{
			[Token(Token = "0x6000B16")]
			[Address(RVA = "0xFD5858", Offset = "0xFD5858", VA = "0xFD5858")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B17")]
			[Address(RVA = "0xFD5914", Offset = "0xFD5914", VA = "0xFD5914")]
			set
			{
			}
		}

		[Token(Token = "0x17000136")]
		public int Length
		{
			[Token(Token = "0x6000B34")]
			[Address(RVA = "0xFD468C", Offset = "0xFD468C", VA = "0xFD468C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000137")]
		public Table MetaTable
		{
			[Token(Token = "0x6000B36")]
			[Address(RVA = "0xFD6C88", Offset = "0xFD6C88", VA = "0xFD6C88")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B37")]
			[Address(RVA = "0xFD6C90", Offset = "0xFD6C90", VA = "0xFD6C90")]
			set
			{
			}
		}

		[Token(Token = "0x17000138")]
		public IEnumerable<TablePair> Pairs
		{
			[Token(Token = "0x6000B38")]
			[Address(RVA = "0xFD6CC4", Offset = "0xFD6CC4", VA = "0xFD6CC4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000139")]
		public IEnumerable<DynValue> Keys
		{
			[Token(Token = "0x6000B39")]
			[Address(RVA = "0xFD6DC8", Offset = "0xFD6DC8", VA = "0xFD6DC8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700013A")]
		public IEnumerable<DynValue> Values
		{
			[Token(Token = "0x6000B3A")]
			[Address(RVA = "0xFD6ECC", Offset = "0xFD6ECC", VA = "0xFD6ECC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B0F")]
		[Address(RVA = "0xFD25AC", Offset = "0xFD25AC", VA = "0xFD25AC")]
		public Table(Script owner)
		{
		}

		[Token(Token = "0x6000B10")]
		[Address(RVA = "0xFD2880", Offset = "0xFD2880", VA = "0xFD2880")]
		public Table(Script owner, params DynValue[] arrayValues)
		{
		}

		[Token(Token = "0x6000B12")]
		[Address(RVA = "0xFD55C0", Offset = "0xFD55C0", VA = "0xFD55C0")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000B13")]
		[Address(RVA = "0xFD5688", Offset = "0xFD5688", VA = "0xFD5688")]
		private int GetIntegralKey(double d)
		{
			return default(int);
		}

		[Token(Token = "0x6000B18")]
		[Address(RVA = "0xFD5ABC", Offset = "0xFD5ABC", VA = "0xFD5ABC")]
		private Table ResolveMultipleKeys(object[] keys, out object key)
		{
			return null;
		}

		[Token(Token = "0x6000B19")]
		[Address(RVA = "0xFD5D10", Offset = "0xFD5D10", VA = "0xFD5D10")]
		public void Append(DynValue value)
		{
		}

		[Token(Token = "0x6000B1A")]
		private void PerformTableSet<T>(LinkedListIndex<T, TablePair> listIndex, T key, DynValue keyDynValue, DynValue value, bool isNumber, int appendKey)
		{
		}

		[Token(Token = "0x6000B1B")]
		[Address(RVA = "0xFD5DEC", Offset = "0xFD5DEC", VA = "0xFD5DEC")]
		public void Set(string key, DynValue value)
		{
		}

		[Token(Token = "0x6000B1C")]
		[Address(RVA = "0xFD5F2C", Offset = "0xFD5F2C", VA = "0xFD5F2C")]
		public void Set(int key, DynValue value)
		{
		}

		[Token(Token = "0x6000B1D")]
		[Address(RVA = "0xFD5428", Offset = "0xFD5428", VA = "0xFD5428")]
		public void Set(DynValue key, DynValue value)
		{
		}

		[Token(Token = "0x6000B1E")]
		[Address(RVA = "0xFD5994", Offset = "0xFD5994", VA = "0xFD5994")]
		public void Set(object key, DynValue value)
		{
		}

		[Token(Token = "0x6000B1F")]
		[Address(RVA = "0xFD57F4", Offset = "0xFD57F4", VA = "0xFD57F4")]
		public void Set(object[] keys, DynValue value)
		{
		}

		[Token(Token = "0x6000B20")]
		[Address(RVA = "0xFD6048", Offset = "0xFD6048", VA = "0xFD6048")]
		public DynValue Get(string key)
		{
			return null;
		}

		[Token(Token = "0x6000B21")]
		[Address(RVA = "0xFD60E8", Offset = "0xFD60E8", VA = "0xFD60E8")]
		public DynValue Get(int key)
		{
			return null;
		}

		[Token(Token = "0x6000B22")]
		[Address(RVA = "0xFD6218", Offset = "0xFD6218", VA = "0xFD6218")]
		public DynValue Get(DynValue key)
		{
			return null;
		}

		[Token(Token = "0x6000B23")]
		[Address(RVA = "0xFD5874", Offset = "0xFD5874", VA = "0xFD5874")]
		public DynValue Get(object key)
		{
			return null;
		}

		[Token(Token = "0x6000B24")]
		[Address(RVA = "0xFD56D4", Offset = "0xFD56D4", VA = "0xFD56D4")]
		public DynValue Get(params object[] keys)
		{
			return null;
		}

		[Token(Token = "0x6000B25")]
		[Address(RVA = "0xFD643C", Offset = "0xFD643C", VA = "0xFD643C")]
		private static DynValue RawGetValue(LinkedListNode<TablePair> linkedListNode)
		{
			return null;
		}

		[Token(Token = "0x6000B26")]
		[Address(RVA = "0xFCEE64", Offset = "0xFCEE64", VA = "0xFCEE64")]
		public DynValue RawGet(string key)
		{
			return null;
		}

		[Token(Token = "0x6000B27")]
		[Address(RVA = "0xFD6188", Offset = "0xFD6188", VA = "0xFD6188")]
		public DynValue RawGet(int key)
		{
			return null;
		}

		[Token(Token = "0x6000B28")]
		[Address(RVA = "0xFD62B8", Offset = "0xFD62B8", VA = "0xFD62B8")]
		public DynValue RawGet(DynValue key)
		{
			return null;
		}

		[Token(Token = "0x6000B29")]
		[Address(RVA = "0xFD5C18", Offset = "0xFD5C18", VA = "0xFD5C18")]
		public DynValue RawGet(object key)
		{
			return null;
		}

		[Token(Token = "0x6000B2A")]
		[Address(RVA = "0xFD6400", Offset = "0xFD6400", VA = "0xFD6400")]
		public DynValue RawGet(params object[] keys)
		{
			return null;
		}

		[Token(Token = "0x6000B2B")]
		private bool PerformTableRemove<T>(LinkedListIndex<T, TablePair> listIndex, T key, bool isNumber)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B2C")]
		[Address(RVA = "0xFD6484", Offset = "0xFD6484", VA = "0xFD6484")]
		public bool Remove(string key)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B2D")]
		[Address(RVA = "0xFD64E4", Offset = "0xFD64E4", VA = "0xFD64E4")]
		public bool Remove(int key)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B2E")]
		[Address(RVA = "0xFD6544", Offset = "0xFD6544", VA = "0xFD6544")]
		public bool Remove(DynValue key)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B2F")]
		[Address(RVA = "0xFD6658", Offset = "0xFD6658", VA = "0xFD6658")]
		public bool Remove(object key)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B30")]
		[Address(RVA = "0xFD6740", Offset = "0xFD6740", VA = "0xFD6740")]
		public bool Remove(params object[] keys)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B31")]
		[Address(RVA = "0xFD6780", Offset = "0xFD6780", VA = "0xFD6780")]
		public void CollectDeadKeys()
		{
		}

		[Token(Token = "0x6000B32")]
		[Address(RVA = "0xFD682C", Offset = "0xFD682C", VA = "0xFD682C")]
		public TablePair? NextKey(DynValue v)
		{
			return null;
		}

		[Token(Token = "0x6000B33")]
		[Address(RVA = "0xFD6A90", Offset = "0xFD6A90", VA = "0xFD6A90")]
		private TablePair? GetNextOf(LinkedListNode<TablePair> linkedListNode)
		{
			return null;
		}

		[Token(Token = "0x6000B35")]
		[Address(RVA = "0xFD6BCC", Offset = "0xFD6BCC", VA = "0xFD6BCC")]
		internal void InitNextArrayKeys(DynValue val, bool lastpos)
		{
		}
	}
	[Token(Token = "0x2000177")]
	public struct TablePair
	{
		[Token(Token = "0x4000968")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static TablePair s_NilNode;

		[Token(Token = "0x4000969")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private DynValue key;

		[Token(Token = "0x400096A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private DynValue value;

		[Token(Token = "0x1700013B")]
		public DynValue Key
		{
			[Token(Token = "0x6000B40")]
			[Address(RVA = "0xFD70D0", Offset = "0xFD70D0", VA = "0xFD70D0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B41")]
			[Address(RVA = "0xFD70D8", Offset = "0xFD70D8", VA = "0xFD70D8")]
			private set
			{
			}
		}

		[Token(Token = "0x1700013C")]
		public DynValue Value
		{
			[Token(Token = "0x6000B42")]
			[Address(RVA = "0xFD70DC", Offset = "0xFD70DC", VA = "0xFD70DC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B43")]
			[Address(RVA = "0xFD70E4", Offset = "0xFD70E4", VA = "0xFD70E4")]
			set
			{
			}
		}

		[Token(Token = "0x1700013D")]
		public static TablePair Nil
		{
			[Token(Token = "0x6000B45")]
			[Address(RVA = "0xFD7108", Offset = "0xFD7108", VA = "0xFD7108")]
			get
			{
				return default(TablePair);
			}
		}

		[Token(Token = "0x6000B44")]
		[Address(RVA = "0xFD7090", Offset = "0xFD7090", VA = "0xFD7090")]
		public TablePair(DynValue key, DynValue val)
		{
		}
	}
	[Token(Token = "0x2000178")]
	public class TailCallData
	{
		[Token(Token = "0x1700013E")]
		public DynValue Function
		{
			[Token(Token = "0x6000B47")]
			[Address(RVA = "0xFD7294", Offset = "0xFD7294", VA = "0xFD7294")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B48")]
			[Address(RVA = "0xFD729C", Offset = "0xFD729C", VA = "0xFD729C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700013F")]
		public DynValue[] Args
		{
			[Token(Token = "0x6000B49")]
			[Address(RVA = "0xFD72A4", Offset = "0xFD72A4", VA = "0xFD72A4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B4A")]
			[Address(RVA = "0xFD72AC", Offset = "0xFD72AC", VA = "0xFD72AC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000140")]
		public CallbackFunction Continuation
		{
			[Token(Token = "0x6000B4B")]
			[Address(RVA = "0xFD72B4", Offset = "0xFD72B4", VA = "0xFD72B4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B4C")]
			[Address(RVA = "0xFD72BC", Offset = "0xFD72BC", VA = "0xFD72BC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000141")]
		public CallbackFunction ErrorHandler
		{
			[Token(Token = "0x6000B4D")]
			[Address(RVA = "0xFD72C4", Offset = "0xFD72C4", VA = "0xFD72C4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B4E")]
			[Address(RVA = "0xFD72CC", Offset = "0xFD72CC", VA = "0xFD72CC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000142")]
		public DynValue ErrorHandlerBeforeUnwind
		{
			[Token(Token = "0x6000B4F")]
			[Address(RVA = "0xFD72D4", Offset = "0xFD72D4", VA = "0xFD72D4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B50")]
			[Address(RVA = "0xFD72DC", Offset = "0xFD72DC", VA = "0xFD72DC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6000B51")]
		[Address(RVA = "0xFD2A18", Offset = "0xFD2A18", VA = "0xFD2A18")]
		public TailCallData()
		{
		}
	}
	[Token(Token = "0x2000179")]
	[Flags]
	public enum TypeValidationFlags
	{
		[Token(Token = "0x4000971")]
		None = 0,
		[Token(Token = "0x4000972")]
		AllowNil = 1,
		[Token(Token = "0x4000973")]
		AutoConvert = 2,
		[Token(Token = "0x4000974")]
		Default = 2
	}
	[Token(Token = "0x200017A")]
	public class UserData : RefIdObject
	{
		[Token(Token = "0x17000143")]
		public DynValue UserValue
		{
			[Token(Token = "0x6000B53")]
			[Address(RVA = "0xFD72E8", Offset = "0xFD72E8", VA = "0xFD72E8")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B54")]
			[Address(RVA = "0xFD72F0", Offset = "0xFD72F0", VA = "0xFD72F0")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000144")]
		public object Object
		{
			[Token(Token = "0x6000B55")]
			[Address(RVA = "0xFD72F8", Offset = "0xFD72F8", VA = "0xFD72F8")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B56")]
			[Address(RVA = "0xFD7300", Offset = "0xFD7300", VA = "0xFD7300")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000145")]
		public IUserDataDescriptor Descriptor
		{
			[Token(Token = "0x6000B57")]
			[Address(RVA = "0xFD7308", Offset = "0xFD7308", VA = "0xFD7308")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B58")]
			[Address(RVA = "0xFD7310", Offset = "0xFD7310", VA = "0xFD7310")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000146")]
		public static IRegistrationPolicy RegistrationPolicy
		{
			[Token(Token = "0x6000B6B")]
			[Address(RVA = "0xFD7BF4", Offset = "0xFD7BF4", VA = "0xFD7BF4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B6C")]
			[Address(RVA = "0xFD73E8", Offset = "0xFD73E8", VA = "0xFD73E8")]
			set
			{
			}
		}

		[Token(Token = "0x17000147")]
		public static InteropAccessMode DefaultAccessMode
		{
			[Token(Token = "0x6000B6D")]
			[Address(RVA = "0xFD7C7C", Offset = "0xFD7C7C", VA = "0xFD7C7C")]
			get
			{
				return default(InteropAccessMode);
			}
			[Token(Token = "0x6000B6E")]
			[Address(RVA = "0xFD7478", Offset = "0xFD7478", VA = "0xFD7478")]
			set
			{
			}
		}

		[Token(Token = "0x6000B52")]
		[Address(RVA = "0xFD72E4", Offset = "0xFD72E4", VA = "0xFD72E4")]
		private UserData()
		{
		}

		[Token(Token = "0x6000B59")]
		[Address(RVA = "0xFD7318", Offset = "0xFD7318", VA = "0xFD7318")]
		static UserData()
		{
		}

		[Token(Token = "0x6000B5A")]
		public static IUserDataDescriptor RegisterType<T>(InteropAccessMode accessMode = InteropAccessMode.Default, [Optional] string friendlyName)
		{
			return null;
		}

		[Token(Token = "0x6000B5B")]
		[Address(RVA = "0xFD74D0", Offset = "0xFD74D0", VA = "0xFD74D0")]
		public static IUserDataDescriptor RegisterType(Type type, InteropAccessMode accessMode = InteropAccessMode.Default, [Optional] string friendlyName)
		{
			return null;
		}

		[Token(Token = "0x6000B5C")]
		[Address(RVA = "0xFD7544", Offset = "0xFD7544", VA = "0xFD7544")]
		public static IUserDataDescriptor RegisterProxyType(IProxyFactory proxyFactory, InteropAccessMode accessMode = InteropAccessMode.Default, [Optional] string friendlyName)
		{
			return null;
		}

		[Token(Token = "0x6000B5D")]
		public static IUserDataDescriptor RegisterProxyType<TProxy, TTarget>(Func<TTarget, TProxy> wrapDelegate, InteropAccessMode accessMode = InteropAccessMode.Default, [Optional] string friendlyName) where TProxy : class where TTarget : class
		{
			return null;
		}

		[Token(Token = "0x6000B5E")]
		public static IUserDataDescriptor RegisterType<T>(IUserDataDescriptor customDescriptor)
		{
			return null;
		}

		[Token(Token = "0x6000B5F")]
		[Address(RVA = "0xFD75B4", Offset = "0xFD75B4", VA = "0xFD75B4")]
		public static IUserDataDescriptor RegisterType(Type type, IUserDataDescriptor customDescriptor)
		{
			return null;
		}

		[Token(Token = "0x6000B60")]
		[Address(RVA = "0xFD7624", Offset = "0xFD7624", VA = "0xFD7624")]
		public static IUserDataDescriptor RegisterType(IUserDataDescriptor customDescriptor)
		{
			return null;
		}

		[Token(Token = "0x6000B61")]
		[Address(RVA = "0xFD7708", Offset = "0xFD7708", VA = "0xFD7708")]
		public static void RegisterAssembly([Optional] Assembly asm, bool includeExtensionTypes = false)
		{
		}

		[Token(Token = "0x6000B62")]
		[Address(RVA = "0xFD7788", Offset = "0xFD7788", VA = "0xFD7788")]
		public static bool IsTypeRegistered(Type t)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B63")]
		public static bool IsTypeRegistered<T>()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B64")]
		public static void UnregisterType<T>()
		{
		}

		[Token(Token = "0x6000B65")]
		[Address(RVA = "0xFD77E0", Offset = "0xFD77E0", VA = "0xFD77E0")]
		public static void UnregisterType(Type t)
		{
		}

		[Token(Token = "0x6000B66")]
		[Address(RVA = "0xFD7838", Offset = "0xFD7838", VA = "0xFD7838")]
		public static DynValue Create(object o, IUserDataDescriptor descr)
		{
			return null;
		}

		[Token(Token = "0x6000B67")]
		[Address(RVA = "0xFD78E4", Offset = "0xFD78E4", VA = "0xFD78E4")]
		public static DynValue Create(object o)
		{
			return null;
		}

		[Token(Token = "0x6000B68")]
		[Address(RVA = "0xFD7AD8", Offset = "0xFD7AD8", VA = "0xFD7AD8")]
		public static DynValue CreateStatic(IUserDataDescriptor descr)
		{
			return null;
		}

		[Token(Token = "0x6000B69")]
		[Address(RVA = "0xFD7A7C", Offset = "0xFD7A7C", VA = "0xFD7A7C")]
		public static DynValue CreateStatic(Type t)
		{
			return null;
		}

		[Token(Token = "0x6000B6A")]
		public static DynValue CreateStatic<T>()
		{
			return null;
		}

		[Token(Token = "0x6000B6F")]
		[Address(RVA = "0xFD7D04", Offset = "0xFD7D04", VA = "0xFD7D04")]
		public static void RegisterExtensionType(Type type, InteropAccessMode mode = InteropAccessMode.Default)
		{
		}

		[Token(Token = "0x6000B70")]
		[Address(RVA = "0xFD7D6C", Offset = "0xFD7D6C", VA = "0xFD7D6C")]
		public static List<IOverloadableMemberDescriptor> GetExtensionMethodsByNameAndType(string name, Type extendedType)
		{
			return null;
		}

		[Token(Token = "0x6000B71")]
		[Address(RVA = "0xFD7DD4", Offset = "0xFD7DD4", VA = "0xFD7DD4")]
		public static int GetExtensionMethodsChangeVersion()
		{
			return default(int);
		}

		[Token(Token = "0x6000B72")]
		public static IUserDataDescriptor GetDescriptorForType<T>(bool searchInterfaces)
		{
			return null;
		}

		[Token(Token = "0x6000B73")]
		[Address(RVA = "0xFD7B8C", Offset = "0xFD7B8C", VA = "0xFD7B8C")]
		public static IUserDataDescriptor GetDescriptorForType(Type type, bool searchInterfaces)
		{
			return null;
		}

		[Token(Token = "0x6000B74")]
		[Address(RVA = "0xFD7A04", Offset = "0xFD7A04", VA = "0xFD7A04")]
		public static IUserDataDescriptor GetDescriptorForObject(object o)
		{
			return null;
		}

		[Token(Token = "0x6000B75")]
		[Address(RVA = "0xFD7E5C", Offset = "0xFD7E5C", VA = "0xFD7E5C")]
		public static Table GetDescriptionOfRegisteredTypes(bool useHistoricalData = false)
		{
			return null;
		}

		[Token(Token = "0x6000B76")]
		[Address(RVA = "0xFD831C", Offset = "0xFD831C", VA = "0xFD831C")]
		public static IEnumerable<Type> GetRegisteredTypes(bool useHistoricalData = false)
		{
			return null;
		}
	}
	[Token(Token = "0x200017C")]
	public static class WellKnownSymbols
	{
		[Token(Token = "0x400097A")]
		public const string VARARGS = "...";

		[Token(Token = "0x400097B")]
		public const string ENV = "_ENV";
	}
	[Token(Token = "0x200017D")]
	public class YieldRequest
	{
		[Token(Token = "0x400097C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public DynValue[] ReturnValues;

		[Token(Token = "0x17000148")]
		public bool Forced
		{
			[Token(Token = "0x6000B7A")]
			[Address(RVA = "0xFD857C", Offset = "0xFD857C", VA = "0xFD857C")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000B7B")]
			[Address(RVA = "0xFD8584", Offset = "0xFD8584", VA = "0xFD8584")]
			[CompilerGenerated]
			internal set
			{
			}
		}

		[Token(Token = "0x6000B7C")]
		[Address(RVA = "0xFD2B44", Offset = "0xFD2B44", VA = "0xFD2B44")]
		public YieldRequest()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200017E")]
	public class DynamicExpressionException : ScriptRuntimeException
	{
		[Token(Token = "0x6000B7D")]
		[Address(RVA = "0xFD8590", Offset = "0xFD8590", VA = "0xFD8590")]
		public DynamicExpressionException(string format, params object[] args)
		{
		}

		[Token(Token = "0x6000B7E")]
		[Address(RVA = "0xFD85FC", Offset = "0xFD85FC", VA = "0xFD85FC")]
		public DynamicExpressionException(string message)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200017F")]
	public class InternalErrorException : InterpreterException
	{
		[Token(Token = "0x6000B7F")]
		[Address(RVA = "0xFD8660", Offset = "0xFD8660", VA = "0xFD8660")]
		internal InternalErrorException(string message)
		{
		}

		[Token(Token = "0x6000B80")]
		[Address(RVA = "0xFD4974", Offset = "0xFD4974", VA = "0xFD4974")]
		internal InternalErrorException(string format, params object[] args)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000180")]
	public class InterpreterException : Exception
	{
		[Token(Token = "0x17000149")]
		public int InstructionPtr
		{
			[Token(Token = "0x6000B85")]
			[Address(RVA = "0xFD883C", Offset = "0xFD883C", VA = "0xFD883C")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000B86")]
			[Address(RVA = "0xFD8844", Offset = "0xFD8844", VA = "0xFD8844")]
			[CompilerGenerated]
			internal set
			{
			}
		}

		[Token(Token = "0x1700014A")]
		public IList<WatchItem> CallStack
		{
			[Token(Token = "0x6000B87")]
			[Address(RVA = "0xFD884C", Offset = "0xFD884C", VA = "0xFD884C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B88")]
			[Address(RVA = "0xFD8854", Offset = "0xFD8854", VA = "0xFD8854")]
			[CompilerGenerated]
			internal set
			{
			}
		}

		[Token(Token = "0x1700014B")]
		public string DecoratedMessage
		{
			[Token(Token = "0x6000B89")]
			[Address(RVA = "0xFD885C", Offset = "0xFD885C", VA = "0xFD885C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B8A")]
			[Address(RVA = "0xFD8864", Offset = "0xFD8864", VA = "0xFD8864")]
			[CompilerGenerated]
			internal set
			{
			}
		}

		[Token(Token = "0x1700014C")]
		public bool DoNotDecorateMessage
		{
			[Token(Token = "0x6000B8B")]
			[Address(RVA = "0xFD886C", Offset = "0xFD886C", VA = "0xFD886C")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000B8C")]
			[Address(RVA = "0xFD8874", Offset = "0xFD8874", VA = "0xFD8874")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6000B81")]
		[Address(RVA = "0xFD8750", Offset = "0xFD8750", VA = "0xFD8750")]
		protected InterpreterException(Exception ex, string message)
		{
		}

		[Token(Token = "0x6000B82")]
		[Address(RVA = "0xFD87C0", Offset = "0xFD87C0", VA = "0xFD87C0")]
		protected InterpreterException(Exception ex)
		{
		}

		[Token(Token = "0x6000B83")]
		[Address(RVA = "0xFD8664", Offset = "0xFD8664", VA = "0xFD8664")]
		protected InterpreterException(string message)
		{
		}

		[Token(Token = "0x6000B84")]
		[Address(RVA = "0xFD86CC", Offset = "0xFD86CC", VA = "0xFD86CC")]
		protected InterpreterException(string format, params object[] args)
		{
		}

		[Token(Token = "0x6000B8D")]
		[Address(RVA = "0xFD8880", Offset = "0xFD8880", VA = "0xFD8880")]
		internal void DecorateMessage(Script script, SourceRef sref, int ip = -1)
		{
		}

		[Token(Token = "0x6000B8E")]
		[Address(RVA = "0xFD89E4", Offset = "0xFD89E4", VA = "0xFD89E4", Slot = "12")]
		public virtual void Rethrow()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000181")]
	public class ScriptRuntimeException : InterpreterException
	{
		[Token(Token = "0x6000B8F")]
		[Address(RVA = "0xFD89E8", Offset = "0xFD89E8", VA = "0xFD89E8")]
		public ScriptRuntimeException(Exception ex)
		{
		}

		[Token(Token = "0x6000B90")]
		[Address(RVA = "0xFD89EC", Offset = "0xFD89EC", VA = "0xFD89EC")]
		public ScriptRuntimeException(ScriptRuntimeException ex)
		{
		}

		[Token(Token = "0x6000B91")]
		[Address(RVA = "0xFD4500", Offset = "0xFD4500", VA = "0xFD4500")]
		public ScriptRuntimeException(string message)
		{
		}

		[Token(Token = "0x6000B92")]
		[Address(RVA = "0xFCEEF4", Offset = "0xFCEEF4", VA = "0xFCEEF4")]
		public ScriptRuntimeException(string format, params object[] args)
		{
		}

		[Token(Token = "0x6000B93")]
		[Address(RVA = "0xFD8A34", Offset = "0xFD8A34", VA = "0xFD8A34")]
		public static ScriptRuntimeException ArithmeticOnNonNumber(DynValue l, [Optional] DynValue r)
		{
			return null;
		}

		[Token(Token = "0x6000B94")]
		[Address(RVA = "0xFD8BFC", Offset = "0xFD8BFC", VA = "0xFD8BFC")]
		public static ScriptRuntimeException ConcatOnNonString(DynValue l, DynValue r)
		{
			return null;
		}

		[Token(Token = "0x6000B95")]
		[Address(RVA = "0xFD8D78", Offset = "0xFD8D78", VA = "0xFD8D78")]
		public static ScriptRuntimeException LenOnInvalidType(DynValue r)
		{
			return null;
		}

		[Token(Token = "0x6000B96")]
		[Address(RVA = "0xFD8E68", Offset = "0xFD8E68", VA = "0xFD8E68")]
		public static ScriptRuntimeException CompareInvalidType(DynValue l, DynValue r)
		{
			return null;
		}

		[Token(Token = "0x6000B97")]
		[Address(RVA = "0xFD9054", Offset = "0xFD9054", VA = "0xFD9054")]
		public static ScriptRuntimeException BadArgument(int argNum, string funcName, string message)
		{
			return null;
		}

		[Token(Token = "0x6000B98")]
		[Address(RVA = "0xFD91E0", Offset = "0xFD91E0", VA = "0xFD91E0")]
		public static ScriptRuntimeException BadArgumentUserData(int argNum, string funcName, Type expected, object got, bool allowNil)
		{
			return null;
		}

		[Token(Token = "0x6000B99")]
		[Address(RVA = "0xFD4B20", Offset = "0xFD4B20", VA = "0xFD4B20")]
		public static ScriptRuntimeException BadArgument(int argNum, string funcName, DataType expected, DataType got, bool allowNil)
		{
			return null;
		}

		[Token(Token = "0x6000B9A")]
		[Address(RVA = "0xFD94B8", Offset = "0xFD94B8", VA = "0xFD94B8")]
		public static ScriptRuntimeException BadArgument(int argNum, string funcName, string expected, string got, bool allowNil)
		{
			return null;
		}

		[Token(Token = "0x6000B9B")]
		[Address(RVA = "0xFD4988", Offset = "0xFD4988", VA = "0xFD4988")]
		public static ScriptRuntimeException BadArgumentNoValue(int argNum, string funcName, DataType expected)
		{
			return null;
		}

		[Token(Token = "0x6000B9C")]
		[Address(RVA = "0xFD96F4", Offset = "0xFD96F4", VA = "0xFD96F4")]
		public static ScriptRuntimeException BadArgumentIndexOutOfRange(string funcName, int argNum)
		{
			return null;
		}

		[Token(Token = "0x6000B9D")]
		[Address(RVA = "0xFD9848", Offset = "0xFD9848", VA = "0xFD9848")]
		public static ScriptRuntimeException BadArgumentNoNegativeNumbers(int argNum, string funcName)
		{
			return null;
		}

		[Token(Token = "0x6000B9E")]
		[Address(RVA = "0xFD999C", Offset = "0xFD999C", VA = "0xFD999C")]
		public static ScriptRuntimeException BadArgumentValueExpected(int argNum, string funcName)
		{
			return null;
		}

		[Token(Token = "0x6000B9F")]
		[Address(RVA = "0xFD9AF0", Offset = "0xFD9AF0", VA = "0xFD9AF0")]
		public static ScriptRuntimeException IndexType(DynValue obj)
		{
			return null;
		}

		[Token(Token = "0x6000BA0")]
		[Address(RVA = "0xFD9BE0", Offset = "0xFD9BE0", VA = "0xFD9BE0")]
		public static ScriptRuntimeException LoopInIndex()
		{
			return null;
		}

		[Token(Token = "0x6000BA1")]
		[Address(RVA = "0xFD9C50", Offset = "0xFD9C50", VA = "0xFD9C50")]
		public static ScriptRuntimeException LoopInNewIndex()
		{
			return null;
		}

		[Token(Token = "0x6000BA2")]
		[Address(RVA = "0xFD9CC0", Offset = "0xFD9CC0", VA = "0xFD9CC0")]
		public static ScriptRuntimeException LoopInCall()
		{
			return null;
		}

		[Token(Token = "0x6000BA3")]
		[Address(RVA = "0xFD5EBC", Offset = "0xFD5EBC", VA = "0xFD5EBC")]
		public static ScriptRuntimeException TableIndexIsNil()
		{
			return null;
		}

		[Token(Token = "0x6000BA4")]
		[Address(RVA = "0xFD5FD8", Offset = "0xFD5FD8", VA = "0xFD5FD8")]
		public static ScriptRuntimeException TableIndexIsNaN()
		{
			return null;
		}

		[Token(Token = "0x6000BA5")]
		[Address(RVA = "0xFD9D30", Offset = "0xFD9D30", VA = "0xFD9D30")]
		public static ScriptRuntimeException ConvertToNumberFailed(int stage)
		{
			return null;
		}

		[Token(Token = "0x6000BA6")]
		[Address(RVA = "0xFD9E2C", Offset = "0xFD9E2C", VA = "0xFD9E2C")]
		public static ScriptRuntimeException ConvertObjectFailed(object obj)
		{
			return null;
		}

		[Token(Token = "0x6000BA7")]
		[Address(RVA = "0xFD9F20", Offset = "0xFD9F20", VA = "0xFD9F20")]
		public static ScriptRuntimeException ConvertObjectFailed(DataType t)
		{
			return null;
		}

		[Token(Token = "0x6000BA8")]
		[Address(RVA = "0xFDA050", Offset = "0xFDA050", VA = "0xFDA050")]
		public static ScriptRuntimeException ConvertObjectFailed(DataType t, Type t2)
		{
			return null;
		}

		[Token(Token = "0x6000BA9")]
		[Address(RVA = "0xFDA1D4", Offset = "0xFDA1D4", VA = "0xFDA1D4")]
		public static ScriptRuntimeException UserDataArgumentTypeMismatch(DataType t, Type clrType)
		{
			return null;
		}

		[Token(Token = "0x6000BAA")]
		[Address(RVA = "0xFDA358", Offset = "0xFDA358", VA = "0xFDA358")]
		public static ScriptRuntimeException UserDataMissingField(string typename, string fieldname)
		{
			return null;
		}

		[Token(Token = "0x6000BAB")]
		[Address(RVA = "0xFD0824", Offset = "0xFD0824", VA = "0xFD0824")]
		public static ScriptRuntimeException CannotResumeNotSuspended(CoroutineState state)
		{
			return null;
		}

		[Token(Token = "0x6000BAC")]
		[Address(RVA = "0xFDA478", Offset = "0xFDA478", VA = "0xFDA478")]
		public static ScriptRuntimeException CannotYield()
		{
			return null;
		}

		[Token(Token = "0x6000BAD")]
		[Address(RVA = "0xFDA4E8", Offset = "0xFDA4E8", VA = "0xFDA4E8")]
		public static ScriptRuntimeException CannotYieldMain()
		{
			return null;
		}

		[Token(Token = "0x6000BAE")]
		[Address(RVA = "0xFDA558", Offset = "0xFDA558", VA = "0xFDA558")]
		public static ScriptRuntimeException AttemptToCallNonFunc(DataType type, [Optional] string debugText)
		{
			return null;
		}

		[Token(Token = "0x6000BAF")]
		[Address(RVA = "0xFDA6F4", Offset = "0xFDA6F4", VA = "0xFDA6F4")]
		public static ScriptRuntimeException AccessInstanceMemberOnStatics(IMemberDescriptor desc)
		{
			return null;
		}

		[Token(Token = "0x6000BB0")]
		[Address(RVA = "0xFDA84C", Offset = "0xFDA84C", VA = "0xFDA84C")]
		public static ScriptRuntimeException AccessInstanceMemberOnStatics(IUserDataDescriptor typeDescr, IMemberDescriptor desc)
		{
			return null;
		}

		[Token(Token = "0x6000BB1")]
		[Address(RVA = "0xFDAA58", Offset = "0xFDAA58", VA = "0xFDAA58", Slot = "12")]
		public override void Rethrow()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000182")]
	public class SyntaxErrorException : InterpreterException
	{
		[Token(Token = "0x1700014D")]
		internal Token Token
		{
			[Token(Token = "0x6000BB2")]
			[Address(RVA = "0xFDAB30", Offset = "0xFDAB30", VA = "0xFDAB30")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000BB3")]
			[Address(RVA = "0xFDAB38", Offset = "0xFDAB38", VA = "0xFDAB38")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700014E")]
		public bool IsPrematureStreamTermination
		{
			[Token(Token = "0x6000BB4")]
			[Address(RVA = "0xFDAB40", Offset = "0xFDAB40", VA = "0xFDAB40")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000BB5")]
			[Address(RVA = "0xFDAB48", Offset = "0xFDAB48", VA = "0xFDAB48")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6000BB6")]
		[Address(RVA = "0xFDAB54", Offset = "0xFDAB54", VA = "0xFDAB54")]
		internal SyntaxErrorException(Token t, string format, params object[] args)
		{
		}

		[Token(Token = "0x6000BB7")]
		[Address(RVA = "0xFDAB88", Offset = "0xFDAB88", VA = "0xFDAB88")]
		internal SyntaxErrorException(Token t, string message)
		{
		}

		[Token(Token = "0x6000BB8")]
		[Address(RVA = "0xFDABB8", Offset = "0xFDABB8", VA = "0xFDABB8")]
		internal SyntaxErrorException(Script script, SourceRef sref, string format, params object[] args)
		{
		}

		[Token(Token = "0x6000BB9")]
		[Address(RVA = "0xFDABF4", Offset = "0xFDABF4", VA = "0xFDABF4")]
		internal SyntaxErrorException(Script script, SourceRef sref, string message)
		{
		}

		[Token(Token = "0x6000BBA")]
		[Address(RVA = "0xFDAC2C", Offset = "0xFDAC2C", VA = "0xFDAC2C")]
		private SyntaxErrorException(SyntaxErrorException syntaxErrorException)
		{
		}

		[Token(Token = "0x6000BBB")]
		[Address(RVA = "0xFDAC84", Offset = "0xFDAC84", VA = "0xFDAC84")]
		internal void DecorateMessage(Script script)
		{
		}

		[Token(Token = "0x6000BBC")]
		[Address(RVA = "0xFDACD0", Offset = "0xFDACD0", VA = "0xFDACD0", Slot = "12")]
		public override void Rethrow()
		{
		}
	}
	[Token(Token = "0x2000183")]
	public class DynamicExpression : IScriptPrivateResource
	{
		[Token(Token = "0x4000984")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private DynamicExprExpression m_Exp;

		[Token(Token = "0x4000985")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private DynValue m_Constant;

		[Token(Token = "0x4000986")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly string ExpressionCode;

		[Token(Token = "0x1700014F")]
		public Script OwnerScript
		{
			[Token(Token = "0x6000BC1")]
			[Address(RVA = "0xFDAF44", Offset = "0xFDAF44", VA = "0xFDAF44", Slot = "4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000BC2")]
			[Address(RVA = "0xFDAF4C", Offset = "0xFDAF4C", VA = "0xFDAF4C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000BBD")]
		[Address(RVA = "0xFDADA8", Offset = "0xFDADA8", VA = "0xFDADA8")]
		internal DynamicExpression(Script S, string strExpr, DynamicExprExpression expr)
		{
		}

		[Token(Token = "0x6000BBE")]
		[Address(RVA = "0xFDAE08", Offset = "0xFDAE08", VA = "0xFDAE08")]
		internal DynamicExpression(Script S, string strExpr, DynValue constant)
		{
		}

		[Token(Token = "0x6000BBF")]
		[Address(RVA = "0xFDAE68", Offset = "0xFDAE68", VA = "0xFDAE68")]
		public DynValue Evaluate([Optional] ScriptExecutionContext context)
		{
			return null;
		}

		[Token(Token = "0x6000BC0")]
		[Address(RVA = "0xFDAEE8", Offset = "0xFDAEE8", VA = "0xFDAEE8")]
		public SymbolRef FindSymbol(ScriptExecutionContext context)
		{
			return null;
		}

		[Token(Token = "0x6000BC3")]
		[Address(RVA = "0xFDAF54", Offset = "0xFDAF54", VA = "0xFDAF54")]
		public bool IsConstant()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BC4")]
		[Address(RVA = "0xFDAF64", Offset = "0xFDAF64", VA = "0xFDAF64", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000BC5")]
		[Address(RVA = "0xFDAF84", Offset = "0xFDAF84", VA = "0xFDAF84", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000184")]
	public class ScriptExecutionContext : IScriptPrivateResource
	{
		[Token(Token = "0x4000988")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Processor m_Processor;

		[Token(Token = "0x4000989")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private CallbackFunction m_Callback;

		[Token(Token = "0x17000150")]
		public bool IsDynamicExecution
		{
			[Token(Token = "0x6000BC7")]
			[Address(RVA = "0xFDB08C", Offset = "0xFDB08C", VA = "0xFDB08C")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000BC8")]
			[Address(RVA = "0xFDB094", Offset = "0xFDB094", VA = "0xFDB094")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000151")]
		public SourceRef CallingLocation
		{
			[Token(Token = "0x6000BC9")]
			[Address(RVA = "0xFDB0A0", Offset = "0xFDB0A0", VA = "0xFDB0A0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000BCA")]
			[Address(RVA = "0xFDB0A8", Offset = "0xFDB0A8", VA = "0xFDB0A8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000152")]
		public object AdditionalData
		{
			[Token(Token = "0x6000BCB")]
			[Address(RVA = "0xFDB0B0", Offset = "0xFDB0B0", VA = "0xFDB0B0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000BCC")]
			[Address(RVA = "0xFDB0C8", Offset = "0xFDB0C8", VA = "0xFDB0C8")]
			set
			{
			}
		}

		[Token(Token = "0x17000153")]
		public Table CurrentGlobalEnv
		{
			[Token(Token = "0x6000BD8")]
			[Address(RVA = "0xFDB830", Offset = "0xFDB830", VA = "0xFDB830")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000154")]
		public Script OwnerScript
		{
			[Token(Token = "0x6000BDA")]
			[Address(RVA = "0xFDB928", Offset = "0xFDB928", VA = "0xFDB928", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000BC6")]
		[Address(RVA = "0xFDB020", Offset = "0xFDB020", VA = "0xFDB020")]
		internal ScriptExecutionContext(Processor p, CallbackFunction callBackFunction, SourceRef sourceRef, bool isDynamic = false)
		{
		}

		[Token(Token = "0x6000BCD")]
		[Address(RVA = "0xFDB12C", Offset = "0xFDB12C", VA = "0xFDB12C")]
		public Table GetMetatable(DynValue value)
		{
			return null;
		}

		[Token(Token = "0x6000BCE")]
		[Address(RVA = "0xFDB148", Offset = "0xFDB148", VA = "0xFDB148")]
		public DynValue GetMetamethod(DynValue value, string metamethod)
		{
			return null;
		}

		[Token(Token = "0x6000BCF")]
		[Address(RVA = "0xFDB164", Offset = "0xFDB164", VA = "0xFDB164")]
		public DynValue GetMetamethodTailCall(DynValue value, string metamethod, params DynValue[] args)
		{
			return null;
		}

		[Token(Token = "0x6000BD0")]
		[Address(RVA = "0xFDB208", Offset = "0xFDB208", VA = "0xFDB208")]
		public DynValue GetBinaryMetamethod(DynValue op1, DynValue op2, string eventName)
		{
			return null;
		}

		[Token(Token = "0x6000BD1")]
		[Address(RVA = "0xFDB224", Offset = "0xFDB224", VA = "0xFDB224")]
		public Script GetScript()
		{
			return null;
		}

		[Token(Token = "0x6000BD2")]
		[Address(RVA = "0xFDB240", Offset = "0xFDB240", VA = "0xFDB240")]
		public Coroutine GetCallingCoroutine()
		{
			return null;
		}

		[Token(Token = "0x6000BD3")]
		[Address(RVA = "0xFDB25C", Offset = "0xFDB25C", VA = "0xFDB25C")]
		public DynValue EmulateClassicCall(CallbackArguments args, string functionName, Func<LuaState, int> callback)
		{
			return null;
		}

		[Token(Token = "0x6000BD4")]
		[Address(RVA = "0xFDB304", Offset = "0xFDB304", VA = "0xFDB304")]
		public DynValue Call(DynValue func, params DynValue[] args)
		{
			return null;
		}

		[Token(Token = "0x6000BD5")]
		[Address(RVA = "0xFDB734", Offset = "0xFDB734", VA = "0xFDB734")]
		public DynValue EvaluateSymbol(SymbolRef symref)
		{
			return null;
		}

		[Token(Token = "0x6000BD6")]
		[Address(RVA = "0xFDB7E8", Offset = "0xFDB7E8", VA = "0xFDB7E8")]
		public DynValue EvaluateSymbolByName(string symbol)
		{
			return null;
		}

		[Token(Token = "0x6000BD7")]
		[Address(RVA = "0xFDB814", Offset = "0xFDB814", VA = "0xFDB814")]
		public SymbolRef FindSymbolByName(string symbol)
		{
			return null;
		}

		[Token(Token = "0x6000BD9")]
		[Address(RVA = "0xFDB8A0", Offset = "0xFDB8A0", VA = "0xFDB8A0")]
		public void PerformMessageDecorationBeforeUnwind(DynValue messageHandler, ScriptRuntimeException exception)
		{
		}
	}
	[Token(Token = "0x2000185")]
	[AttributeUsage(AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Event, Inherited = true, AllowMultiple = false)]
	public sealed class MoonSharpHiddenAttribute : Attribute
	{
		[Token(Token = "0x6000BDB")]
		[Address(RVA = "0xFDB944", Offset = "0xFDB944", VA = "0xFDB944")]
		public MoonSharpHiddenAttribute()
		{
		}
	}
	[Token(Token = "0x2000186")]
	[AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct, Inherited = true, AllowMultiple = true)]
	public sealed class MoonSharpHideMemberAttribute : Attribute
	{
		[Token(Token = "0x17000155")]
		public string MemberName
		{
			[Token(Token = "0x6000BDC")]
			[Address(RVA = "0xFDB94C", Offset = "0xFDB94C", VA = "0xFDB94C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000BDD")]
			[Address(RVA = "0xFDB954", Offset = "0xFDB954", VA = "0xFDB954")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000BDE")]
		[Address(RVA = "0xFDB95C", Offset = "0xFDB95C", VA = "0xFDB95C")]
		public MoonSharpHideMemberAttribute(string memberName)
		{
		}
	}
	[Token(Token = "0x2000187")]
	[AttributeUsage(AttributeTargets.Property, Inherited = true, AllowMultiple = true)]
	public sealed class MoonSharpPropertyAttribute : Attribute
	{
		[Token(Token = "0x17000156")]
		public string Name
		{
			[Token(Token = "0x6000BDF")]
			[Address(RVA = "0xFDB98C", Offset = "0xFDB98C", VA = "0xFDB98C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000BE0")]
			[Address(RVA = "0xFDB994", Offset = "0xFDB994", VA = "0xFDB994")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000BE1")]
		[Address(RVA = "0xFDB99C", Offset = "0xFDB99C", VA = "0xFDB99C")]
		public MoonSharpPropertyAttribute()
		{
		}

		[Token(Token = "0x6000BE2")]
		[Address(RVA = "0xFDB9A4", Offset = "0xFDB9A4", VA = "0xFDB9A4")]
		public MoonSharpPropertyAttribute(string name)
		{
		}
	}
	[Token(Token = "0x2000188")]
	[AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct, Inherited = false, AllowMultiple = false)]
	public sealed class MoonSharpUserDataAttribute : Attribute
	{
		[Token(Token = "0x17000157")]
		public InteropAccessMode AccessMode
		{
			[Token(Token = "0x6000BE3")]
			[Address(RVA = "0xFDB9D4", Offset = "0xFDB9D4", VA = "0xFDB9D4")]
			[CompilerGenerated]
			get
			{
				return default(InteropAccessMode);
			}
			[Token(Token = "0x6000BE4")]
			[Address(RVA = "0xFDB9DC", Offset = "0xFDB9DC", VA = "0xFDB9DC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6000BE5")]
		[Address(RVA = "0xFDB9E4", Offset = "0xFDB9E4", VA = "0xFDB9E4")]
		public MoonSharpUserDataAttribute()
		{
		}
	}
	[Token(Token = "0x2000189")]
	[AttributeUsage(AttributeTargets.Method, Inherited = true, AllowMultiple = true)]
	public sealed class MoonSharpUserDataMetamethodAttribute : Attribute
	{
		[Token(Token = "0x17000158")]
		public string Name
		{
			[Token(Token = "0x6000BE6")]
			[Address(RVA = "0xFDBA04", Offset = "0xFDBA04", VA = "0xFDBA04")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000BE7")]
			[Address(RVA = "0xFDBA0C", Offset = "0xFDBA0C", VA = "0xFDBA0C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000BE8")]
		[Address(RVA = "0xFDBA14", Offset = "0xFDBA14", VA = "0xFDBA14")]
		public MoonSharpUserDataMetamethodAttribute(string name)
		{
		}
	}
	[Token(Token = "0x200018A")]
	public enum InteropAccessMode
	{
		[Token(Token = "0x4000991")]
		Reflection,
		[Token(Token = "0x4000992")]
		LazyOptimized,
		[Token(Token = "0x4000993")]
		Preoptimized,
		[Token(Token = "0x4000994")]
		BackgroundOptimized,
		[Token(Token = "0x4000995")]
		Hardwired,
		[Token(Token = "0x4000996")]
		HideMembers,
		[Token(Token = "0x4000997")]
		NoReflectionAllowed,
		[Token(Token = "0x4000998")]
		Default
	}
	[Token(Token = "0x200018B")]
	internal class AutoDescribingUserDataDescriptor : IUserDataDescriptor
	{
		[Token(Token = "0x4000999")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private string m_FriendlyName;

		[Token(Token = "0x400099A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Type m_Type;

		[Token(Token = "0x17000159")]
		public string Name
		{
			[Token(Token = "0x6000BEA")]
			[Address(RVA = "0xFDBA88", Offset = "0xFDBA88", VA = "0xFDBA88", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700015A")]
		public Type Type
		{
			[Token(Token = "0x6000BEB")]
			[Address(RVA = "0xFDBA90", Offset = "0xFDBA90", VA = "0xFDBA90", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000BE9")]
		[Address(RVA = "0xFDBA44", Offset = "0xFDBA44", VA = "0xFDBA44")]
		public AutoDescribingUserDataDescriptor(Type type, string friendlyName)
		{
		}

		[Token(Token = "0x6000BEC")]
		[Address(RVA = "0xFDBA98", Offset = "0xFDBA98", VA = "0xFDBA98", Slot = "6")]
		public DynValue Index(Script script, object obj, DynValue index, bool isDirectIndexing)
		{
			return null;
		}

		[Token(Token = "0x6000BED")]
		[Address(RVA = "0xFDBB7C", Offset = "0xFDBB7C", VA = "0xFDBB7C", Slot = "7")]
		public bool SetIndex(Script script, object obj, DynValue index, DynValue value, bool isDirectIndexing)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BEE")]
		[Address(RVA = "0xFDBC6C", Offset = "0xFDBC6C", VA = "0xFDBC6C", Slot = "8")]
		public string AsString(object obj)
		{
			return null;
		}

		[Token(Token = "0x6000BEF")]
		[Address(RVA = "0xFDBC8C", Offset = "0xFDBC8C", VA = "0xFDBC8C", Slot = "9")]
		public DynValue MetaIndex(Script script, object obj, string metaname)
		{
			return null;
		}

		[Token(Token = "0x6000BF0")]
		[Address(RVA = "0xFDBD60", Offset = "0xFDBD60", VA = "0xFDBD60", Slot = "10")]
		public bool IsTypeCompatible(Type type, object obj)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200018C")]
	public static class LinqHelpers
	{
		[Token(Token = "0x6000BF1")]
		public static IEnumerable<T> Convert<T>(this IEnumerable<DynValue> enumerable, DataType type)
		{
			return null;
		}

		[Token(Token = "0x6000BF2")]
		[Address(RVA = "0xFDBE14", Offset = "0xFDBE14", VA = "0xFDBE14")]
		public static IEnumerable<DynValue> OfDataType(this IEnumerable<DynValue> enumerable, DataType type)
		{
			return null;
		}

		[Token(Token = "0x6000BF3")]
		[Address(RVA = "0xFDBEF0", Offset = "0xFDBEF0", VA = "0xFDBEF0")]
		public static IEnumerable<object> AsObjects(this IEnumerable<DynValue> enumerable)
		{
			return null;
		}

		[Token(Token = "0x6000BF4")]
		public static IEnumerable<T> AsObjects<T>(this IEnumerable<DynValue> enumerable)
		{
			return null;
		}
	}
	[Token(Token = "0x2000192")]
	[Flags]
	public enum CoreModules
	{
		[Token(Token = "0x40009A4")]
		None = 0,
		[Token(Token = "0x40009A5")]
		Basic = 0x40,
		[Token(Token = "0x40009A6")]
		GlobalConsts = 1,
		[Token(Token = "0x40009A7")]
		TableIterators = 2,
		[Token(Token = "0x40009A8")]
		Metatables = 4,
		[Token(Token = "0x40009A9")]
		String = 8,
		[Token(Token = "0x40009AA")]
		LoadMethods = 0x10,
		[Token(Token = "0x40009AB")]
		Table = 0x20,
		[Token(Token = "0x40009AC")]
		ErrorHandling = 0x80,
		[Token(Token = "0x40009AD")]
		Math = 0x100,
		[Token(Token = "0x40009AE")]
		Coroutine = 0x200,
		[Token(Token = "0x40009AF")]
		Bit32 = 0x400,
		[Token(Token = "0x40009B0")]
		OS_Time = 0x800,
		[Token(Token = "0x40009B1")]
		OS_System = 0x1000,
		[Token(Token = "0x40009B2")]
		IO = 0x2000,
		[Token(Token = "0x40009B3")]
		Debug = 0x4000,
		[Token(Token = "0x40009B4")]
		Dynamic = 0x8000,
		[Token(Token = "0x40009B5")]
		Json = 0x10000,
		[Token(Token = "0x40009B6")]
		Preset_HardSandbox = 0x56B,
		[Token(Token = "0x40009B7")]
		Preset_SoftSandbox = 0x18FEF,
		[Token(Token = "0x40009B8")]
		Preset_Default = 0x1BFFF,
		[Token(Token = "0x40009B9")]
		Preset_Complete = 0x1FFFF
	}
	[Token(Token = "0x2000193")]
	internal static class CoreModules_ExtensionMethods
	{
		[Token(Token = "0x6000C02")]
		[Address(RVA = "0xFDC0A4", Offset = "0xFDC0A4", VA = "0xFDC0A4")]
		public static bool Has(this CoreModules val, CoreModules flag)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000194")]
	public static class ModuleRegister
	{
		[Token(Token = "0x6000C03")]
		[Address(RVA = "0xFDC0B0", Offset = "0xFDC0B0", VA = "0xFDC0B0")]
		public static Table RegisterCoreModules(this Table table, CoreModules modules)
		{
			return null;
		}

		[Token(Token = "0x6000C04")]
		[Address(RVA = "0xFDC480", Offset = "0xFDC480", VA = "0xFDC480")]
		public static Table RegisterConstants(this Table table)
		{
			return null;
		}

		[Token(Token = "0x6000C05")]
		[Address(RVA = "0xFDCC24", Offset = "0xFDCC24", VA = "0xFDCC24")]
		public static Table RegisterModuleType(this Table gtable, Type t)
		{
			return null;
		}

		[Token(Token = "0x6000C06")]
		[Address(RVA = "0xFDE360", Offset = "0xFDE360", VA = "0xFDE360")]
		private static void RegisterScriptFieldAsConst(FieldInfo fi, object o, Table table, Type t, string name)
		{
		}

		[Token(Token = "0x6000C07")]
		[Address(RVA = "0xFDE1C8", Offset = "0xFDE1C8", VA = "0xFDE1C8")]
		private static void RegisterScriptField(FieldInfo fi, object o, Table table, Type t, string name)
		{
		}

		[Token(Token = "0x6000C08")]
		[Address(RVA = "0xFDDE44", Offset = "0xFDDE44", VA = "0xFDDE44")]
		private static Table CreateModuleNamespace(Table gtable, Type t)
		{
			return null;
		}

		[Token(Token = "0x6000C09")]
		public static Table RegisterModuleType<T>(this Table table)
		{
			return null;
		}
	}
	[Token(Token = "0x2000196")]
	[AttributeUsage(AttributeTargets.Class, Inherited = false, AllowMultiple = false)]
	public sealed class MoonSharpModuleAttribute : Attribute
	{
		[Token(Token = "0x1700015B")]
		public string Namespace
		{
			[Token(Token = "0x6000C0F")]
			[Address(RVA = "0xFDEA18", Offset = "0xFDEA18", VA = "0xFDEA18")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C10")]
			[Address(RVA = "0xFDEA20", Offset = "0xFDEA20", VA = "0xFDEA20")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6000C11")]
		[Address(RVA = "0xFDEA28", Offset = "0xFDEA28", VA = "0xFDEA28")]
		public MoonSharpModuleAttribute()
		{
		}
	}
	[Token(Token = "0x2000197")]
	[AttributeUsage(AttributeTargets.Field, Inherited = false, AllowMultiple = false)]
	public sealed class MoonSharpModuleConstantAttribute : Attribute
	{
		[Token(Token = "0x1700015C")]
		public string Name
		{
			[Token(Token = "0x6000C12")]
			[Address(RVA = "0xFDEA30", Offset = "0xFDEA30", VA = "0xFDEA30")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C13")]
			[Address(RVA = "0xFDEA38", Offset = "0xFDEA38", VA = "0xFDEA38")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6000C14")]
		[Address(RVA = "0xFDEA40", Offset = "0xFDEA40", VA = "0xFDEA40")]
		public MoonSharpModuleConstantAttribute()
		{
		}
	}
	[Token(Token = "0x2000198")]
	[AttributeUsage(AttributeTargets.Method | AttributeTargets.Field, Inherited = false, AllowMultiple = false)]
	public sealed class MoonSharpModuleMethodAttribute : Attribute
	{
		[Token(Token = "0x1700015D")]
		public string Name
		{
			[Token(Token = "0x6000C15")]
			[Address(RVA = "0xFDEA48", Offset = "0xFDEA48", VA = "0xFDEA48")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C16")]
			[Address(RVA = "0xFDEA50", Offset = "0xFDEA50", VA = "0xFDEA50")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6000C17")]
		[Address(RVA = "0xFDEA58", Offset = "0xFDEA58", VA = "0xFDEA58")]
		public MoonSharpModuleMethodAttribute()
		{
		}
	}
	[Token(Token = "0x2000199")]
	internal static class NamespaceDoc
	{
	}
	[Token(Token = "0x200019A")]
	public enum ColonOperatorBehaviour
	{
		[Token(Token = "0x40009C2")]
		TreatAsDot,
		[Token(Token = "0x40009C3")]
		TreatAsDotOnUserData,
		[Token(Token = "0x40009C4")]
		TreatAsColon
	}
	[Token(Token = "0x200019B")]
	public class Script : IScriptPrivateResource
	{
		[Token(Token = "0x40009C5")]
		public const string VERSION = "2.0.0.0";

		[Token(Token = "0x40009C6")]
		public const string LUA_VERSION = "5.2";

		[Token(Token = "0x40009C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Processor m_MainProcessor;

		[Token(Token = "0x40009C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ByteCode m_ByteCode;

		[Token(Token = "0x40009C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<SourceCode> m_Sources;

		[Token(Token = "0x40009CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Table m_GlobalTable;

		[Token(Token = "0x40009CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private IDebugger m_Debugger;

		[Token(Token = "0x40009CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Table[] m_TypeMetatables;

		[Token(Token = "0x1700015E")]
		public static ScriptOptions DefaultOptions
		{
			[Token(Token = "0x6000C1B")]
			[Address(RVA = "0xFDF098", Offset = "0xFDF098", VA = "0xFDF098")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C1C")]
			[Address(RVA = "0xFDF0F0", Offset = "0xFDF0F0", VA = "0xFDF0F0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700015F")]
		public ScriptOptions Options
		{
			[Token(Token = "0x6000C1D")]
			[Address(RVA = "0xFDF158", Offset = "0xFDF158", VA = "0xFDF158")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C1E")]
			[Address(RVA = "0xFDF160", Offset = "0xFDF160", VA = "0xFDF160")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000160")]
		public static ScriptGlobalOptions GlobalOptions
		{
			[Token(Token = "0x6000C1F")]
			[Address(RVA = "0xFDF168", Offset = "0xFDF168", VA = "0xFDF168")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C20")]
			[Address(RVA = "0xFDF1C0", Offset = "0xFDF1C0", VA = "0xFDF1C0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000161")]
		public PerformanceStatistics PerformanceStats
		{
			[Token(Token = "0x6000C21")]
			[Address(RVA = "0xFDF220", Offset = "0xFDF220", VA = "0xFDF220")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C22")]
			[Address(RVA = "0xFDF228", Offset = "0xFDF228", VA = "0xFDF228")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000162")]
		public Table Globals
		{
			[Token(Token = "0x6000C23")]
			[Address(RVA = "0xFDF230", Offset = "0xFDF230", VA = "0xFDF230")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000163")]
		public bool DebuggerEnabled
		{
			[Token(Token = "0x6000C38")]
			[Address(RVA = "0xFE1970", Offset = "0xFE1970", VA = "0xFE1970")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000C39")]
			[Address(RVA = "0xFE198C", Offset = "0xFE198C", VA = "0xFE198C")]
			set
			{
			}
		}

		[Token(Token = "0x17000164")]
		public int SourceCodeCount
		{
			[Token(Token = "0x6000C3C")]
			[Address(RVA = "0xFE1B8C", Offset = "0xFE1B8C", VA = "0xFE1B8C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000165")]
		public Table Registry
		{
			[Token(Token = "0x6000C44")]
			[Address(RVA = "0xFE2344", Offset = "0xFE2344", VA = "0xFE2344")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C45")]
			[Address(RVA = "0xFE234C", Offset = "0xFE234C", VA = "0xFE234C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000166")]
		private Script MoonSharp.Interpreter.IScriptPrivateResource.OwnerScript
		{
			[Token(Token = "0x6000C47")]
			[Address(RVA = "0xFE2354", Offset = "0xFE2354", VA = "0xFE2354", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C18")]
		[Address(RVA = "0xFDEA60", Offset = "0xFDEA60", VA = "0xFDEA60")]
		static Script()
		{
		}

		[Token(Token = "0x6000C19")]
		[Address(RVA = "0xFDED2C", Offset = "0xFDED2C", VA = "0xFDED2C")]
		public Script()
		{
		}

		[Token(Token = "0x6000C1A")]
		[Address(RVA = "0xFDED38", Offset = "0xFDED38", VA = "0xFDED38")]
		public Script(CoreModules coreModules)
		{
		}

		[Token(Token = "0x6000C24")]
		[Address(RVA = "0xFDE5F8", Offset = "0xFDE5F8", VA = "0xFDE5F8")]
		public DynValue LoadFunction(string code, [Optional] Table globalTable, [Optional] string funcFriendlyName)
		{
			return null;
		}

		[Token(Token = "0x6000C25")]
		[Address(RVA = "0xFDF8B4", Offset = "0xFDF8B4", VA = "0xFDF8B4")]
		private void SignalByteCodeChange()
		{
		}

		[Token(Token = "0x6000C26")]
		[Address(RVA = "0xFDF800", Offset = "0xFDF800", VA = "0xFDF800")]
		private void SignalSourceCodeChange(SourceCode source)
		{
		}

		[Token(Token = "0x6000C27")]
		[Address(RVA = "0xFDFDE8", Offset = "0xFDFDE8", VA = "0xFDFDE8")]
		public DynValue LoadString(string code, [Optional] Table globalTable, [Optional] string codeFriendlyName)
		{
			return null;
		}

		[Token(Token = "0x6000C28")]
		[Address(RVA = "0xFE01E0", Offset = "0xFE01E0", VA = "0xFE01E0")]
		public DynValue LoadStream(Stream stream, [Optional] Table globalTable, [Optional] string codeFriendlyName)
		{
			return null;
		}

		[Token(Token = "0x6000C29")]
		[Address(RVA = "0xFE0C00", Offset = "0xFE0C00", VA = "0xFE0C00")]
		public void Dump(DynValue function, Stream stream)
		{
		}

		[Token(Token = "0x6000C2A")]
		[Address(RVA = "0xFE0D90", Offset = "0xFE0D90", VA = "0xFE0D90")]
		public DynValue LoadFile(string filename, [Optional] Table globalContext, [Optional] string friendlyFilename)
		{
			return null;
		}

		[Token(Token = "0x6000C2B")]
		[Address(RVA = "0xFE1350", Offset = "0xFE1350", VA = "0xFE1350")]
		public DynValue DoString(string code, [Optional] Table globalContext, [Optional] string codeFriendlyName)
		{
			return null;
		}

		[Token(Token = "0x6000C2C")]
		[Address(RVA = "0xFE13D0", Offset = "0xFE13D0", VA = "0xFE13D0")]
		public DynValue DoStream(Stream stream, [Optional] Table globalContext, [Optional] string codeFriendlyName)
		{
			return null;
		}

		[Token(Token = "0x6000C2D")]
		[Address(RVA = "0xFE13EC", Offset = "0xFE13EC", VA = "0xFE13EC")]
		public DynValue DoFile(string filename, [Optional] Table globalContext, [Optional] string codeFriendlyName)
		{
			return null;
		}

		[Token(Token = "0x6000C2E")]
		[Address(RVA = "0xFE1408", Offset = "0xFE1408", VA = "0xFE1408")]
		public static DynValue RunFile(string filename)
		{
			return null;
		}

		[Token(Token = "0x6000C2F")]
		[Address(RVA = "0xFE1484", Offset = "0xFE1484", VA = "0xFE1484")]
		public static DynValue RunString(string code)
		{
			return null;
		}

		[Token(Token = "0x6000C30")]
		[Address(RVA = "0xFDFA6C", Offset = "0xFDFA6C", VA = "0xFDFA6C")]
		private DynValue MakeClosure(int address, [Optional] Table envTable)
		{
			return null;
		}

		[Token(Token = "0x6000C31")]
		[Address(RVA = "0xFE136C", Offset = "0xFE136C", VA = "0xFE136C")]
		public DynValue Call(DynValue function)
		{
			return null;
		}

		[Token(Token = "0x6000C32")]
		[Address(RVA = "0xFDB494", Offset = "0xFDB494", VA = "0xFDB494")]
		public DynValue Call(DynValue function, params DynValue[] args)
		{
			return null;
		}

		[Token(Token = "0x6000C33")]
		[Address(RVA = "0xFE157C", Offset = "0xFE157C", VA = "0xFE157C")]
		public DynValue Call(DynValue function, params object[] args)
		{
			return null;
		}

		[Token(Token = "0x6000C34")]
		[Address(RVA = "0xFE16C8", Offset = "0xFE16C8", VA = "0xFE16C8")]
		public DynValue Call(object function)
		{
			return null;
		}

		[Token(Token = "0x6000C35")]
		[Address(RVA = "0xFE173C", Offset = "0xFE173C", VA = "0xFE173C")]
		public DynValue Call(object function, params object[] args)
		{
			return null;
		}

		[Token(Token = "0x6000C36")]
		[Address(RVA = "0xFE17B8", Offset = "0xFE17B8", VA = "0xFE17B8")]
		public DynValue CreateCoroutine(DynValue function)
		{
			return null;
		}

		[Token(Token = "0x6000C37")]
		[Address(RVA = "0xFE18FC", Offset = "0xFE18FC", VA = "0xFE18FC")]
		public DynValue CreateCoroutine(object function)
		{
			return null;
		}

		[Token(Token = "0x6000C3A")]
		[Address(RVA = "0xFE19AC", Offset = "0xFE19AC", VA = "0xFE19AC")]
		public void AttachDebugger(IDebugger debugger)
		{
		}

		[Token(Token = "0x6000C3B")]
		[Address(RVA = "0xFE1B34", Offset = "0xFE1B34", VA = "0xFE1B34")]
		public SourceCode GetSourceCode(int sourceCodeID)
		{
			return null;
		}

		[Token(Token = "0x6000C3D")]
		[Address(RVA = "0xFE1BD4", Offset = "0xFE1BD4", VA = "0xFE1BD4")]
		public DynValue RequireModule(string modname, [Optional] Table globalContext)
		{
			return null;
		}

		[Token(Token = "0x6000C3E")]
		[Address(RVA = "0xFE1D54", Offset = "0xFE1D54", VA = "0xFE1D54")]
		public Table GetTypeMetatable(DataType type)
		{
			return null;
		}

		[Token(Token = "0x6000C3F")]
		[Address(RVA = "0xFE1D94", Offset = "0xFE1D94", VA = "0xFE1D94")]
		public void SetTypeMetatable(DataType type, Table metatable)
		{
		}

		[Token(Token = "0x6000C40")]
		[Address(RVA = "0xFE1EA8", Offset = "0xFE1EA8", VA = "0xFE1EA8")]
		public static void WarmUp()
		{
		}

		[Token(Token = "0x6000C41")]
		[Address(RVA = "0xFE1F24", Offset = "0xFE1F24", VA = "0xFE1F24")]
		public DynamicExpression CreateDynamicExpression(string code)
		{
			return null;
		}

		[Token(Token = "0x6000C42")]
		[Address(RVA = "0xFE22B8", Offset = "0xFE22B8", VA = "0xFE22B8")]
		public DynamicExpression CreateConstantDynamicExpression(string code, DynValue constant)
		{
			return null;
		}

		[Token(Token = "0x6000C43")]
		[Address(RVA = "0xFE1500", Offset = "0xFE1500", VA = "0xFE1500")]
		internal ScriptExecutionContext CreateDynamicExecutionContext([Optional] CallbackFunction func)
		{
			return null;
		}

		[Token(Token = "0x6000C46")]
		[Address(RVA = "0xFDC9EC", Offset = "0xFDC9EC", VA = "0xFDC9EC")]
		public static string GetBanner([Optional] string subproduct)
		{
			return null;
		}
	}
	[Token(Token = "0x200019D")]
	public class ScriptGlobalOptions
	{
		[Token(Token = "0x17000167")]
		public CustomConvertersCollection CustomConverters
		{
			[Token(Token = "0x6000C4E")]
			[Address(RVA = "0xFE2608", Offset = "0xFE2608", VA = "0xFE2608")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C4F")]
			[Address(RVA = "0xFE2610", Offset = "0xFE2610", VA = "0xFE2610")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000168")]
		public IPlatformAccessor Platform
		{
			[Token(Token = "0x6000C50")]
			[Address(RVA = "0xFE2618", Offset = "0xFE2618", VA = "0xFE2618")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C51")]
			[Address(RVA = "0xFE2620", Offset = "0xFE2620", VA = "0xFE2620")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000169")]
		public bool RethrowExceptionNested
		{
			[Token(Token = "0x6000C52")]
			[Address(RVA = "0xFE2628", Offset = "0xFE2628", VA = "0xFE2628")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000C53")]
			[Address(RVA = "0xFE2630", Offset = "0xFE2630", VA = "0xFE2630")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6000C4D")]
		[Address(RVA = "0xFDEC98", Offset = "0xFDEC98", VA = "0xFDEC98")]
		internal ScriptGlobalOptions()
		{
		}
	}
	[Token(Token = "0x200019E")]
	public class ScriptOptions
	{
		[Token(Token = "0x1700016A")]
		public IScriptLoader ScriptLoader
		{
			[Token(Token = "0x6000C56")]
			[Address(RVA = "0xFE263C", Offset = "0xFE263C", VA = "0xFE263C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C57")]
			[Address(RVA = "0xFE2644", Offset = "0xFE2644", VA = "0xFE2644")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700016B")]
		public Action<string> DebugPrint
		{
			[Token(Token = "0x6000C58")]
			[Address(RVA = "0xFE264C", Offset = "0xFE264C", VA = "0xFE264C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C59")]
			[Address(RVA = "0xFE2654", Offset = "0xFE2654", VA = "0xFE2654")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700016C")]
		public Func<string, string> DebugInput
		{
			[Token(Token = "0x6000C5A")]
			[Address(RVA = "0xFE265C", Offset = "0xFE265C", VA = "0xFE265C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C5B")]
			[Address(RVA = "0xFE2664", Offset = "0xFE2664", VA = "0xFE2664")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700016D")]
		public bool UseLuaErrorLocations
		{
			[Token(Token = "0x6000C5C")]
			[Address(RVA = "0xFE266C", Offset = "0xFE266C", VA = "0xFE266C")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000C5D")]
			[Address(RVA = "0xFE2674", Offset = "0xFE2674", VA = "0xFE2674")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700016E")]
		public ColonOperatorBehaviour ColonOperatorClrCallbackBehaviour
		{
			[Token(Token = "0x6000C5E")]
			[Address(RVA = "0xFE2680", Offset = "0xFE2680", VA = "0xFE2680")]
			[CompilerGenerated]
			get
			{
				return default(ColonOperatorBehaviour);
			}
			[Token(Token = "0x6000C5F")]
			[Address(RVA = "0xFE2688", Offset = "0xFE2688", VA = "0xFE2688")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700016F")]
		public Stream Stdin
		{
			[Token(Token = "0x6000C60")]
			[Address(RVA = "0xFE2690", Offset = "0xFE2690", VA = "0xFE2690")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C61")]
			[Address(RVA = "0xFE2698", Offset = "0xFE2698", VA = "0xFE2698")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000170")]
		public Stream Stdout
		{
			[Token(Token = "0x6000C62")]
			[Address(RVA = "0xFE26A0", Offset = "0xFE26A0", VA = "0xFE26A0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C63")]
			[Address(RVA = "0xFE26A8", Offset = "0xFE26A8", VA = "0xFE26A8")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000171")]
		public Stream Stderr
		{
			[Token(Token = "0x6000C64")]
			[Address(RVA = "0xFE26B0", Offset = "0xFE26B0", VA = "0xFE26B0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C65")]
			[Address(RVA = "0xFE26B8", Offset = "0xFE26B8", VA = "0xFE26B8")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000172")]
		public int TailCallOptimizationThreshold
		{
			[Token(Token = "0x6000C66")]
			[Address(RVA = "0xFE26C0", Offset = "0xFE26C0", VA = "0xFE26C0")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000C67")]
			[Address(RVA = "0xFE26C8", Offset = "0xFE26C8", VA = "0xFE26C8")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000173")]
		public bool CheckThreadAccess
		{
			[Token(Token = "0x6000C68")]
			[Address(RVA = "0xFE26D0", Offset = "0xFE26D0", VA = "0xFE26D0")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000C69")]
			[Address(RVA = "0xFE26D8", Offset = "0xFE26D8", VA = "0xFE26D8")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6000C54")]
		[Address(RVA = "0xFDED24", Offset = "0xFDED24", VA = "0xFDED24")]
		internal ScriptOptions()
		{
		}

		[Token(Token = "0x6000C55")]
		[Address(RVA = "0xFDEFF4", Offset = "0xFDEFF4", VA = "0xFDEFF4")]
		internal ScriptOptions(ScriptOptions defaults)
		{
		}
	}
}
namespace MoonSharp.Interpreter.Tree
{
	[Token(Token = "0x200019F")]
	internal abstract class Expression : NodeBase
	{
		[Token(Token = "0x6000C6A")]
		[Address(RVA = "0xFE26E4", Offset = "0xFE26E4", VA = "0xFE26E4")]
		public Expression(ScriptLoadingContext lcontext)
		{
		}

		[Token(Token = "0x6000C6B")]
		[Address(RVA = "0xFE2720", Offset = "0xFE2720", VA = "0xFE2720", Slot = "5")]
		public virtual string GetFriendlyDebugName()
		{
			return null;
		}

		[Token(Token = "0x6000C6C")]
		public abstract DynValue Eval(ScriptExecutionContext context);

		[Token(Token = "0x6000C6D")]
		[Address(RVA = "0xFE2728", Offset = "0xFE2728", VA = "0xFE2728", Slot = "7")]
		public virtual SymbolRef FindDynamic(ScriptExecutionContext context)
		{
			return null;
		}

		[Token(Token = "0x6000C6E")]
		[Address(RVA = "0xFE2730", Offset = "0xFE2730", VA = "0xFE2730")]
		internal static List<Expression> ExprListAfterFirstExpr(ScriptLoadingContext lcontext, Expression expr1)
		{
			return null;
		}

		[Token(Token = "0x6000C6F")]
		[Address(RVA = "0xFE293C", Offset = "0xFE293C", VA = "0xFE293C")]
		internal static List<Expression> ExprList(ScriptLoadingContext lcontext)
		{
			return null;
		}

		[Token(Token = "0x6000C70")]
		[Address(RVA = "0xFE28F4", Offset = "0xFE28F4", VA = "0xFE28F4")]
		internal static Expression Expr(ScriptLoadingContext lcontext)
		{
			return null;
		}

		[Token(Token = "0x6000C71")]
		[Address(RVA = "0xFE2AA0", Offset = "0xFE2AA0", VA = "0xFE2AA0")]
		internal static Expression SubExpr(ScriptLoadingContext lcontext, bool isPrimary)
		{
			return null;
		}

		[Token(Token = "0x6000C72")]
		[Address(RVA = "0xFE2F7C", Offset = "0xFE2F7C", VA = "0xFE2F7C")]
		internal static Expression SimpleExp(ScriptLoadingContext lcontext)
		{
			return null;
		}

		[Token(Token = "0x6000C73")]
		[Address(RVA = "0xFE3AB4", Offset = "0xFE3AB4", VA = "0xFE3AB4")]
		internal static Expression PrimaryExp(ScriptLoadingContext lcontext)
		{
			return null;
		}

		[Token(Token = "0x6000C74")]
		[Address(RVA = "0xFE3D58", Offset = "0xFE3D58", VA = "0xFE3D58")]
		private static Expression PrefixExp(ScriptLoadingContext lcontext)
		{
			return null;
		}
	}
	[Token(Token = "0x20001A0")]
	internal interface IVariable
	{
		[Token(Token = "0x6000C75")]
		void CompileAssignment(ByteCode bc, int stackofs, int tupleidx);
	}
	[Token(Token = "0x20001A1")]
	internal class Lexer
	{
		[Token(Token = "0x40009E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Token m_Current;

		[Token(Token = "0x40009E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string m_Code;

		[Token(Token = "0x40009E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int m_PrevLineTo;

		[Token(Token = "0x40009E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int m_PrevColTo;

		[Token(Token = "0x40009E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int m_Cursor;

		[Token(Token = "0x40009E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int m_Line;

		[Token(Token = "0x40009E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int m_Col;

		[Token(Token = "0x40009E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int m_SourceId;

		[Token(Token = "0x40009E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool m_AutoSkipComments;

		[Token(Token = "0x17000174")]
		public Token Current
		{
			[Token(Token = "0x6000C77")]
			[Address(RVA = "0xFE28FC", Offset = "0xFE28FC", VA = "0xFE28FC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C76")]
		[Address(RVA = "0xFE4788", Offset = "0xFE4788", VA = "0xFE4788")]
		public Lexer(int sourceID, string scriptContent, bool autoSkipComments)
		{
		}

		[Token(Token = "0x6000C78")]
		[Address(RVA = "0xFE483C", Offset = "0xFE483C", VA = "0xFE483C")]
		private Token FetchNewToken()
		{
			return null;
		}

		[Token(Token = "0x6000C79")]
		[Address(RVA = "0xFE28D4", Offset = "0xFE28D4", VA = "0xFE28D4")]
		public void Next()
		{
		}

		[Token(Token = "0x6000C7A")]
		[Address(RVA = "0xFE4FD8", Offset = "0xFE4FD8", VA = "0xFE4FD8")]
		public Token PeekNext()
		{
			return null;
		}

		[Token(Token = "0x6000C7B")]
		[Address(RVA = "0xFE504C", Offset = "0xFE504C", VA = "0xFE504C")]
		private void CursorNext()
		{
		}

		[Token(Token = "0x6000C7C")]
		[Address(RVA = "0xFE50DC", Offset = "0xFE50DC", VA = "0xFE50DC")]
		private char CursorChar()
		{
			return default(char);
		}

		[Token(Token = "0x6000C7D")]
		[Address(RVA = "0xFE5118", Offset = "0xFE5118", VA = "0xFE5118")]
		private char CursorCharNext()
		{
			return default(char);
		}

		[Token(Token = "0x6000C7E")]
		[Address(RVA = "0xFE5130", Offset = "0xFE5130", VA = "0xFE5130")]
		private bool CursorMatches(string pattern)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C7F")]
		[Address(RVA = "0xFE50B4", Offset = "0xFE50B4", VA = "0xFE50B4")]
		private bool CursorNotEof()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C80")]
		[Address(RVA = "0xFE51C8", Offset = "0xFE51C8", VA = "0xFE51C8")]
		private bool IsWhiteSpace(char c)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C81")]
		[Address(RVA = "0xFE5220", Offset = "0xFE5220", VA = "0xFE5220")]
		private void SkipWhiteSpace()
		{
		}

		[Token(Token = "0x6000C82")]
		[Address(RVA = "0xFE4878", Offset = "0xFE4878", VA = "0xFE4878")]
		private Token ReadToken()
		{
			return null;
		}

		[Token(Token = "0x6000C83")]
		[Address(RVA = "0xFE59F4", Offset = "0xFE59F4", VA = "0xFE59F4")]
		private string ReadLongString(int fromLine, int fromCol, string startpattern, string subtypeforerrors)
		{
			return null;
		}

		[Token(Token = "0x6000C84")]
		[Address(RVA = "0xFE5430", Offset = "0xFE5430", VA = "0xFE5430")]
		private Token ReadNumberToken(int fromLine, int fromCol, bool leadingDot)
		{
			return null;
		}

		[Token(Token = "0x6000C85")]
		[Address(RVA = "0xFE56D0", Offset = "0xFE56D0", VA = "0xFE56D0")]
		private Token CreateSingleCharToken(TokenType tokenType, int fromLine, int fromCol)
		{
			return null;
		}

		[Token(Token = "0x6000C86")]
		[Address(RVA = "0xFE58F0", Offset = "0xFE58F0", VA = "0xFE58F0")]
		private Token ReadHashBang(int fromLine, int fromCol)
		{
			return null;
		}

		[Token(Token = "0x6000C87")]
		[Address(RVA = "0xFE5738", Offset = "0xFE5738", VA = "0xFE5738")]
		private Token ReadComment(int fromLine, int fromCol)
		{
			return null;
		}

		[Token(Token = "0x6000C88")]
		[Address(RVA = "0xFE5E80", Offset = "0xFE5E80", VA = "0xFE5E80")]
		private Token ReadSimpleStringToken(int fromLine, int fromCol)
		{
			return null;
		}

		[Token(Token = "0x6000C89")]
		[Address(RVA = "0xFE533C", Offset = "0xFE533C", VA = "0xFE533C")]
		private Token PotentiallyDoubleCharOperator(char expectedSecondChar, TokenType singleCharToken, TokenType doubleCharToken, int fromLine, int fromCol)
		{
			return null;
		}

		[Token(Token = "0x6000C8A")]
		[Address(RVA = "0xFE634C", Offset = "0xFE634C", VA = "0xFE634C")]
		private Token CreateNameToken(string name, int fromLine, int fromCol)
		{
			return null;
		}

		[Token(Token = "0x6000C8B")]
		[Address(RVA = "0xFE5270", Offset = "0xFE5270", VA = "0xFE5270")]
		private Token CreateToken(TokenType tokenType, int fromLine, int fromCol, [Optional] string text)
		{
			return null;
		}

		[Token(Token = "0x6000C8C")]
		[Address(RVA = "0xFE6248", Offset = "0xFE6248", VA = "0xFE6248")]
		private string ReadNameToken()
		{
			return null;
		}
	}
	[Token(Token = "0x20001A2")]
	internal static class LexerUtils
	{
		[Token(Token = "0x6000C8D")]
		[Address(RVA = "0xFE758C", Offset = "0xFE758C", VA = "0xFE758C")]
		public static double ParseNumber(Token T)
		{
			return default(double);
		}

		[Token(Token = "0x6000C8E")]
		[Address(RVA = "0xFE76A8", Offset = "0xFE76A8", VA = "0xFE76A8")]
		public static double ParseHexInteger(Token T)
		{
			return default(double);
		}

		[Token(Token = "0x6000C8F")]
		[Address(RVA = "0xFE78D4", Offset = "0xFE78D4", VA = "0xFE78D4")]
		public static string ReadHexProgressive(string s, ref double d, out int digits)
		{
			return null;
		}

		[Token(Token = "0x6000C90")]
		[Address(RVA = "0xFE7B1C", Offset = "0xFE7B1C", VA = "0xFE7B1C")]
		public static double ParseHexFloat(Token T)
		{
			return default(double);
		}

		[Token(Token = "0x6000C91")]
		[Address(RVA = "0xFE7A14", Offset = "0xFE7A14", VA = "0xFE7A14")]
		public static int HexDigit2Value(char c)
		{
			return default(int);
		}

		[Token(Token = "0x6000C92")]
		[Address(RVA = "0xFE541C", Offset = "0xFE541C", VA = "0xFE541C")]
		public static bool CharIsDigit(char c)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C93")]
		[Address(RVA = "0xFE649C", Offset = "0xFE649C", VA = "0xFE649C")]
		public static bool CharIsHexDigit(char c)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C94")]
		[Address(RVA = "0xFE63F4", Offset = "0xFE63F4", VA = "0xFE63F4")]
		public static string AdjustLuaLongString(string str)
		{
			return null;
		}

		[Token(Token = "0x6000C95")]
		[Address(RVA = "0xFE64F0", Offset = "0xFE64F0", VA = "0xFE64F0")]
		public static string UnescapeLuaString(Token token, string str)
		{
			return null;
		}

		[Token(Token = "0x6000C96")]
		[Address(RVA = "0xFE8070", Offset = "0xFE8070", VA = "0xFE8070")]
		private static string ConvertUtf32ToChar(int i)
		{
			return null;
		}
	}
	[Token(Token = "0x20001A3")]
	internal class Token
	{
		[Token(Token = "0x40009EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly int SourceId;

		[Token(Token = "0x40009EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public readonly int FromCol;

		[Token(Token = "0x40009EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly int ToCol;

		[Token(Token = "0x40009ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public readonly int FromLine;

		[Token(Token = "0x40009EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly int ToLine;

		[Token(Token = "0x40009EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public readonly int PrevCol;

		[Token(Token = "0x40009F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly int PrevLine;

		[Token(Token = "0x40009F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public readonly TokenType Type;

		[Token(Token = "0x17000175")]
		public string Text
		{
			[Token(Token = "0x6000C97")]
			[Address(RVA = "0xFE80C8", Offset = "0xFE80C8", VA = "0xFE80C8")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C98")]
			[Address(RVA = "0xFE80D0", Offset = "0xFE80D0", VA = "0xFE80D0")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6000C99")]
		[Address(RVA = "0xFE7524", Offset = "0xFE7524", VA = "0xFE7524")]
		public Token(TokenType type, int sourceId, int fromLine, int fromCol, int toLine, int toCol, int prevLine, int prevCol)
		{
		}

		[Token(Token = "0x6000C9A")]
		[Address(RVA = "0xFE80D8", Offset = "0xFE80D8", VA = "0xFE80D8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000C9B")]
		[Address(RVA = "0xFE6E34", Offset = "0xFE6E34", VA = "0xFE6E34")]
		public static TokenType? GetReservedTokenType(string reservedWord)
		{
			return null;
		}

		[Token(Token = "0x6000C9C")]
		[Address(RVA = "0xFE8398", Offset = "0xFE8398", VA = "0xFE8398")]
		public double GetNumberValue()
		{
			return default(double);
		}

		[Token(Token = "0x6000C9D")]
		[Address(RVA = "0xFE841C", Offset = "0xFE841C", VA = "0xFE841C")]
		public bool IsEndOfBlock()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C9E")]
		[Address(RVA = "0xFE2ED4", Offset = "0xFE2ED4", VA = "0xFE2ED4")]
		public bool IsUnaryOperator()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C9F")]
		[Address(RVA = "0xFE3168", Offset = "0xFE3168", VA = "0xFE3168")]
		public bool IsBinaryOperator()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CA0")]
		[Address(RVA = "0xFE8450", Offset = "0xFE8450", VA = "0xFE8450")]
		internal SourceRef GetSourceRef(bool isStepStop = true)
		{
			return null;
		}

		[Token(Token = "0x6000CA1")]
		[Address(RVA = "0xFE84E8", Offset = "0xFE84E8", VA = "0xFE84E8")]
		internal SourceRef GetSourceRef(Token to, bool isStepStop = true)
		{
			return null;
		}

		[Token(Token = "0x6000CA2")]
		[Address(RVA = "0xFE858C", Offset = "0xFE858C", VA = "0xFE858C")]
		internal SourceRef GetSourceRefUpTo(Token to, bool isStepStop = true)
		{
			return null;
		}
	}
	[Token(Token = "0x20001A4")]
	internal enum TokenType
	{
		[Token(Token = "0x40009F4")]
		Eof,
		[Token(Token = "0x40009F5")]
		HashBang,
		[Token(Token = "0x40009F6")]
		Name,
		[Token(Token = "0x40009F7")]
		And,
		[Token(Token = "0x40009F8")]
		Break,
		[Token(Token = "0x40009F9")]
		Do,
		[Token(Token = "0x40009FA")]
		Else,
		[Token(Token = "0x40009FB")]
		ElseIf,
		[Token(Token = "0x40009FC")]
		End,
		[Token(Token = "0x40009FD")]
		False,
		[Token(Token = "0x40009FE")]
		For,
		[Token(Token = "0x40009FF")]
		Function,
		[Token(Token = "0x4000A00")]
		Lambda,
		[Token(Token = "0x4000A01")]
		Goto,
		[Token(Token = "0x4000A02")]
		If,
		[Token(Token = "0x4000A03")]
		In,
		[Token(Token = "0x4000A04")]
		Local,
		[Token(Token = "0x4000A05")]
		Nil,
		[Token(Token = "0x4000A06")]
		Not,
		[Token(Token = "0x4000A07")]
		Or,
		[Token(Token = "0x4000A08")]
		Repeat,
		[Token(Token = "0x4000A09")]
		Return,
		[Token(Token = "0x4000A0A")]
		Then,
		[Token(Token = "0x4000A0B")]
		True,
		[Token(Token = "0x4000A0C")]
		Until,
		[Token(Token = "0x4000A0D")]
		While,
		[Token(Token = "0x4000A0E")]
		Op_Equal,
		[Token(Token = "0x4000A0F")]
		Op_Assignment,
		[Token(Token = "0x4000A10")]
		Op_LessThan,
		[Token(Token = "0x4000A11")]
		Op_LessThanEqual,
		[Token(Token = "0x4000A12")]
		Op_GreaterThanEqual,
		[Token(Token = "0x4000A13")]
		Op_GreaterThan,
		[Token(Token = "0x4000A14")]
		Op_NotEqual,
		[Token(Token = "0x4000A15")]
		Op_Concat,
		[Token(Token = "0x4000A16")]
		VarArgs,
		[Token(Token = "0x4000A17")]
		Dot,
		[Token(Token = "0x4000A18")]
		Colon,
		[Token(Token = "0x4000A19")]
		DoubleColon,
		[Token(Token = "0x4000A1A")]
		Comma,
		[Token(Token = "0x4000A1B")]
		Brk_Close_Curly,
		[Token(Token = "0x4000A1C")]
		Brk_Open_Curly,
		[Token(Token = "0x4000A1D")]
		Brk_Close_Round,
		[Token(Token = "0x4000A1E")]
		Brk_Open_Round,
		[Token(Token = "0x4000A1F")]
		Brk_Close_Square,
		[Token(Token = "0x4000A20")]
		Brk_Open_Square,
		[Token(Token = "0x4000A21")]
		Op_Len,
		[Token(Token = "0x4000A22")]
		Op_Pwr,
		[Token(Token = "0x4000A23")]
		Op_Mod,
		[Token(Token = "0x4000A24")]
		Op_Div,
		[Token(Token = "0x4000A25")]
		Op_Mul,
		[Token(Token = "0x4000A26")]
		Op_MinusOrSub,
		[Token(Token = "0x4000A27")]
		Op_Add,
		[Token(Token = "0x4000A28")]
		Comment,
		[Token(Token = "0x4000A29")]
		String,
		[Token(Token = "0x4000A2A")]
		String_Long,
		[Token(Token = "0x4000A2B")]
		Number,
		[Token(Token = "0x4000A2C")]
		Number_HexFloat,
		[Token(Token = "0x4000A2D")]
		Number_Hex,
		[Token(Token = "0x4000A2E")]
		SemiColon,
		[Token(Token = "0x4000A2F")]
		Invalid,
		[Token(Token = "0x4000A30")]
		Brk_Open_Curly_Shared,
		[Token(Token = "0x4000A31")]
		Op_Dollar
	}
	[Token(Token = "0x20001A5")]
	internal class Loop : ILoop
	{
		[Token(Token = "0x4000A32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public RuntimeScopeBlock Scope;

		[Token(Token = "0x4000A33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<Instruction> BreakJumps;

		[Token(Token = "0x6000CA3")]
		[Address(RVA = "0xFE862C", Offset = "0xFE862C", VA = "0xFE862C", Slot = "4")]
		public void CompileBreak(ByteCode bc)
		{
		}

		[Token(Token = "0x6000CA4")]
		[Address(RVA = "0xFE8704", Offset = "0xFE8704", VA = "0xFE8704", Slot = "5")]
		public bool IsBoundary()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CA5")]
		[Address(RVA = "0xFE870C", Offset = "0xFE870C", VA = "0xFE870C")]
		public Loop()
		{
		}
	}
	[Token(Token = "0x20001A6")]
	internal class LoopBoundary : ILoop
	{
		[Token(Token = "0x6000CA6")]
		[Address(RVA = "0xFE8794", Offset = "0xFE8794", VA = "0xFE8794", Slot = "4")]
		public void CompileBreak(ByteCode bc)
		{
		}

		[Token(Token = "0x6000CA7")]
		[Address(RVA = "0xFE87E4", Offset = "0xFE87E4", VA = "0xFE87E4", Slot = "5")]
		public bool IsBoundary()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CA8")]
		[Address(RVA = "0xFE87EC", Offset = "0xFE87EC", VA = "0xFE87EC")]
		public LoopBoundary()
		{
		}
	}
	[Token(Token = "0x20001A7")]
	internal abstract class NodeBase
	{
		[Token(Token = "0x17000176")]
		public Script Script
		{
			[Token(Token = "0x6000CA9")]
			[Address(RVA = "0xFE87F4", Offset = "0xFE87F4", VA = "0xFE87F4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CAA")]
			[Address(RVA = "0xFE87FC", Offset = "0xFE87FC", VA = "0xFE87FC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000177")]
		protected ScriptLoadingContext LoadingContext
		{
			[Token(Token = "0x6000CAB")]
			[Address(RVA = "0xFE8804", Offset = "0xFE8804", VA = "0xFE8804")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CAC")]
			[Address(RVA = "0xFE880C", Offset = "0xFE880C", VA = "0xFE880C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000CAD")]
		[Address(RVA = "0xFE26E8", Offset = "0xFE26E8", VA = "0xFE26E8")]
		public NodeBase(ScriptLoadingContext lcontext)
		{
		}

		[Token(Token = "0x6000CAE")]
		public abstract void Compile(ByteCode bc);

		[Token(Token = "0x6000CAF")]
		[Address(RVA = "0xFE8814", Offset = "0xFE8814", VA = "0xFE8814")]
		protected static Token UnexpectedTokenType(Token t)
		{
			return null;
		}

		[Token(Token = "0x6000CB0")]
		[Address(RVA = "0xFE3F48", Offset = "0xFE3F48", VA = "0xFE3F48")]
		protected static Token CheckTokenType(ScriptLoadingContext lcontext, TokenType tokenType)
		{
			return null;
		}

		[Token(Token = "0x6000CB1")]
		[Address(RVA = "0xFE88DC", Offset = "0xFE88DC", VA = "0xFE88DC")]
		protected static Token CheckTokenType(ScriptLoadingContext lcontext, TokenType tokenType1, TokenType tokenType2)
		{
			return null;
		}

		[Token(Token = "0x6000CB2")]
		[Address(RVA = "0xFE8960", Offset = "0xFE8960", VA = "0xFE8960")]
		protected static Token CheckTokenType(ScriptLoadingContext lcontext, TokenType tokenType1, TokenType tokenType2, TokenType tokenType3)
		{
			return null;
		}

		[Token(Token = "0x6000CB3")]
		[Address(RVA = "0xFE89F0", Offset = "0xFE89F0", VA = "0xFE89F0")]
		protected static void CheckTokenTypeNotNext(ScriptLoadingContext lcontext, TokenType tokenType)
		{
		}

		[Token(Token = "0x6000CB4")]
		[Address(RVA = "0xFE402C", Offset = "0xFE402C", VA = "0xFE402C")]
		protected static Token CheckMatch(ScriptLoadingContext lcontext, Token originalToken, TokenType expectedTokenType, string expectedTokenText)
		{
			return null;
		}
	}
	[Token(Token = "0x20001A8")]
	internal abstract class Statement : NodeBase
	{
		[Token(Token = "0x6000CB5")]
		[Address(RVA = "0xFE8A28", Offset = "0xFE8A28", VA = "0xFE8A28")]
		public Statement(ScriptLoadingContext lcontext)
		{
		}

		[Token(Token = "0x6000CB6")]
		[Address(RVA = "0xFE8A2C", Offset = "0xFE8A2C", VA = "0xFE8A2C")]
		protected static Statement CreateStatement(ScriptLoadingContext lcontext, out bool forceLast)
		{
			return null;
		}

		[Token(Token = "0x6000CB7")]
		[Address(RVA = "0xFE96A0", Offset = "0xFE96A0", VA = "0xFE96A0")]
		private static Statement DispatchForLoopStatement(ScriptLoadingContext lcontext)
		{
			return null;
		}
	}
}
namespace MoonSharp.Interpreter.Tree.Statements
{
	[Token(Token = "0x20001A9")]
	internal class AssignmentStatement : Statement
	{
		[Token(Token = "0x4000A36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<IVariable> m_LValues;

		[Token(Token = "0x4000A37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<Expression> m_RValues;

		[Token(Token = "0x4000A38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private SourceRef m_Ref;

		[Token(Token = "0x6000CB8")]
		[Address(RVA = "0xFE9E88", Offset = "0xFE9E88", VA = "0xFE9E88")]
		public AssignmentStatement(ScriptLoadingContext lcontext, Token startToken)
		{
		}

		[Token(Token = "0x6000CB9")]
		[Address(RVA = "0xFEA74C", Offset = "0xFEA74C", VA = "0xFEA74C")]
		public AssignmentStatement(ScriptLoadingContext lcontext, Expression firstExpression, Token first)
		{
		}

		[Token(Token = "0x6000CBA")]
		[Address(RVA = "0xFEB400", Offset = "0xFEB400", VA = "0xFEB400")]
		private IVariable CheckVar(ScriptLoadingContext lcontext, Expression firstExpression)
		{
			return null;
		}

		[Token(Token = "0x6000CBB")]
		[Address(RVA = "0xFEB530", Offset = "0xFEB530", VA = "0xFEB530", Slot = "4")]
		public override void Compile(ByteCode bc)
		{
		}
	}
	[Token(Token = "0x20001AA")]
	internal class BreakStatement : Statement
	{
		[Token(Token = "0x4000A39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private SourceRef m_Ref;

		[Token(Token = "0x6000CBC")]
		[Address(RVA = "0xFEA574", Offset = "0xFEA574", VA = "0xFEA574")]
		public BreakStatement(ScriptLoadingContext lcontext)
		{
		}

		[Token(Token = "0x6000CBD")]
		[Address(RVA = "0xFEB98C", Offset = "0xFEB98C", VA = "0xFEB98C", Slot = "4")]
		public override void Compile(ByteCode bc)
		{
		}
	}
	[Token(Token = "0x20001AB")]
	internal class ChunkStatement : Statement, IClosureBuilder
	{
		[Token(Token = "0x4000A3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Statement m_Block;

		[Token(Token = "0x4000A3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private RuntimeScopeFrame m_StackFrame;

		[Token(Token = "0x4000A3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private SymbolRef m_Env;

		[Token(Token = "0x4000A3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private SymbolRef m_VarArgs;

		[Token(Token = "0x6000CBE")]
		[Address(RVA = "0xFEBE6C", Offset = "0xFEBE6C", VA = "0xFEBE6C")]
		public ChunkStatement(ScriptLoadingContext lcontext)
		{
		}

		[Token(Token = "0x6000CBF")]
		[Address(RVA = "0xFEC224", Offset = "0xFEC224", VA = "0xFEC224", Slot = "4")]
		public override void Compile(ByteCode bc)
		{
		}

		[Token(Token = "0x6000CC0")]
		[Address(RVA = "0xFEC400", Offset = "0xFEC400", VA = "0xFEC400", Slot = "5")]
		public SymbolRef CreateUpvalue(BuildTimeScope scope, SymbolRef symbol)
		{
			return null;
		}
	}
	[Token(Token = "0x20001AC")]
	internal class CompositeStatement : Statement
	{
		[Token(Token = "0x4000A3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<Statement> m_Statements;

		[Token(Token = "0x6000CC1")]
		[Address(RVA = "0xFEC078", Offset = "0xFEC078", VA = "0xFEC078")]
		public CompositeStatement(ScriptLoadingContext lcontext)
		{
		}

		[Token(Token = "0x6000CC2")]
		[Address(RVA = "0xFEC408", Offset = "0xFEC408", VA = "0xFEC408", Slot = "4")]
		public override void Compile(ByteCode bc)
		{
		}
	}
	[Token(Token = "0x20001AD")]
	internal class EmptyStatement : Statement
	{
		[Token(Token = "0x6000CC3")]
		[Address(RVA = "0xFE900C", Offset = "0xFE900C", VA = "0xFE900C")]
		public EmptyStatement(ScriptLoadingContext lcontext)
		{
		}

		[Token(Token = "0x6000CC4")]
		[Address(RVA = "0xFEC55C", Offset = "0xFEC55C", VA = "0xFEC55C", Slot = "4")]
		public override void Compile(ByteCode bc)
		{
		}
	}
	[Token(Token = "0x20001AE")]
	internal class ForEachLoopStatement : Statement
	{
		[Token(Token = "0x4000A3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private RuntimeScopeBlock m_StackFrame;

		[Token(Token = "0x4000A40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private SymbolRef[] m_Names;

		[Token(Token = "0x4000A41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private IVariable[] m_NameExps;

		[Token(Token = "0x4000A42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Expression m_RValues;

		[Token(Token = "0x4000A43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Statement m_Block;

		[Token(Token = "0x4000A44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private SourceRef m_RefFor;

		[Token(Token = "0x4000A45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private SourceRef m_RefEnd;

		[Token(Token = "0x6000CC5")]
		[Address(RVA = "0xFEAD90", Offset = "0xFEAD90", VA = "0xFEAD90")]
		public ForEachLoopStatement(ScriptLoadingContext lcontext, Token firstNameToken, Token forToken)
		{
		}

		[Token(Token = "0x6000CC6")]
		[Address(RVA = "0xFEC568", Offset = "0xFEC568", VA = "0xFEC568", Slot = "4")]
		public override void Compile(ByteCode bc)
		{
		}
	}
	[Token(Token = "0x20001B0")]
	internal class ForLoopStatement : Statement
	{
		[Token(Token = "0x4000A47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private RuntimeScopeBlock m_StackFrame;

		[Token(Token = "0x4000A48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Statement m_InnerBlock;

		[Token(Token = "0x4000A49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private SymbolRef m_VarName;

		[Token(Token = "0x4000A4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Expression m_Start;

		[Token(Token = "0x4000A4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Expression m_End;

		[Token(Token = "0x4000A4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Expression m_Step;

		[Token(Token = "0x4000A4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private SourceRef m_RefFor;

		[Token(Token = "0x4000A4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private SourceRef m_RefEnd;

		[Token(Token = "0x6000CCA")]
		[Address(RVA = "0xFEAA20", Offset = "0xFEAA20", VA = "0xFEAA20")]
		public ForLoopStatement(ScriptLoadingContext lcontext, Token nameToken, Token forToken)
		{
		}

		[Token(Token = "0x6000CCB")]
		[Address(RVA = "0xFECA64", Offset = "0xFECA64", VA = "0xFECA64", Slot = "4")]
		public override void Compile(ByteCode bc)
		{
		}
	}
	[Token(Token = "0x20001B1")]
	internal class FunctionCallStatement : Statement
	{
		[Token(Token = "0x4000A4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private FunctionCallExpression m_FunctionCallExpression;

		[Token(Token = "0x6000CCC")]
		[Address(RVA = "0xFEA660", Offset = "0xFEA660", VA = "0xFEA660")]
		public FunctionCallStatement(ScriptLoadingContext lcontext, FunctionCallExpression functionCallExpression)
		{
		}

		[Token(Token = "0x6000CCD")]
		[Address(RVA = "0xFECDCC", Offset = "0xFECDCC", VA = "0xFECDCC", Slot = "4")]
		public override void Compile(ByteCode bc)
		{
		}

		[Token(Token = "0x6000CCE")]
		[Address(RVA = "0xFECF94", Offset = "0xFECF94", VA = "0xFECF94")]
		private void RemoveBreakpointStop(Instruction instruction)
		{
		}
	}
	[Token(Token = "0x20001B2")]
	internal class FunctionDefinitionStatement : Statement
	{
		[Token(Token = "0x4000A50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private SymbolRef m_FuncSymbol;

		[Token(Token = "0x4000A51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private SourceRef m_SourceRef;

		[Token(Token = "0x4000A52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool m_Local;

		[Token(Token = "0x4000A53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool m_IsMethodCallingConvention;

		[Token(Token = "0x4000A54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private string m_MethodName;

		[Token(Token = "0x4000A55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private string m_FriendlyName;

		[Token(Token = "0x4000A56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<string> m_TableAccessors;

		[Token(Token = "0x4000A57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private FunctionDefinitionExpression m_FuncDef;

		[Token(Token = "0x6000CCF")]
		[Address(RVA = "0xFE99BC", Offset = "0xFE99BC", VA = "0xFE99BC")]
		public FunctionDefinitionStatement(ScriptLoadingContext lcontext, bool local, Token localToken)
		{
		}

		[Token(Token = "0x6000CD0")]
		[Address(RVA = "0xFECFB4", Offset = "0xFECFB4", VA = "0xFECFB4", Slot = "4")]
		public override void Compile(ByteCode bc)
		{
		}

		[Token(Token = "0x6000CD1")]
		[Address(RVA = "0xFED5E4", Offset = "0xFED5E4", VA = "0xFED5E4")]
		private int SetMethod(ByteCode bc)
		{
			return default(int);
		}

		[Token(Token = "0x6000CD2")]
		[Address(RVA = "0xFED7D8", Offset = "0xFED7D8", VA = "0xFED7D8")]
		private int SetFunction(ByteCode bc, int numPop)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001B4")]
	internal class GotoStatement : Statement
	{
		[Token(Token = "0x4000A5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Instruction m_Jump;

		[Token(Token = "0x4000A60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int m_LabelAddress;

		[Token(Token = "0x17000178")]
		internal SourceRef SourceRef
		{
			[Token(Token = "0x6000CD7")]
			[Address(RVA = "0xFED894", Offset = "0xFED894", VA = "0xFED894")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CD8")]
			[Address(RVA = "0xFED89C", Offset = "0xFED89C", VA = "0xFED89C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000179")]
		internal Token GotoToken
		{
			[Token(Token = "0x6000CD9")]
			[Address(RVA = "0xFED8A4", Offset = "0xFED8A4", VA = "0xFED8A4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CDA")]
			[Address(RVA = "0xFED8AC", Offset = "0xFED8AC", VA = "0xFED8AC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700017A")]
		public string Label
		{
			[Token(Token = "0x6000CDB")]
			[Address(RVA = "0xFED8B4", Offset = "0xFED8B4", VA = "0xFED8B4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CDC")]
			[Address(RVA = "0xFED8BC", Offset = "0xFED8BC", VA = "0xFED8BC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700017B")]
		internal int DefinedVarsCount
		{
			[Token(Token = "0x6000CDD")]
			[Address(RVA = "0xFED8C4", Offset = "0xFED8C4", VA = "0xFED8C4")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000CDE")]
			[Address(RVA = "0xFED8CC", Offset = "0xFED8CC", VA = "0xFED8CC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700017C")]
		internal string LastDefinedVarName
		{
			[Token(Token = "0x6000CDF")]
			[Address(RVA = "0xFED8D4", Offset = "0xFED8D4", VA = "0xFED8D4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CE0")]
			[Address(RVA = "0xFED8DC", Offset = "0xFED8DC", VA = "0xFED8DC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000CE1")]
		[Address(RVA = "0xFE8F60", Offset = "0xFE8F60", VA = "0xFE8F60")]
		public GotoStatement(ScriptLoadingContext lcontext)
		{
		}

		[Token(Token = "0x6000CE2")]
		[Address(RVA = "0xFED8E4", Offset = "0xFED8E4", VA = "0xFED8E4", Slot = "4")]
		public override void Compile(ByteCode bc)
		{
		}

		[Token(Token = "0x6000CE3")]
		[Address(RVA = "0xFED924", Offset = "0xFED924", VA = "0xFED924")]
		internal void SetDefinedVars(int definedVarsCount, string lastDefinedVarsName)
		{
		}

		[Token(Token = "0x6000CE4")]
		[Address(RVA = "0xFED934", Offset = "0xFED934", VA = "0xFED934")]
		internal void SetAddress(int labelAddress)
		{
		}
	}
	[Token(Token = "0x20001B5")]
	internal class IfStatement : Statement
	{
		[Token(Token = "0x20001B6")]
		private class IfBlock
		{
			[Token(Token = "0x4000A64")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Expression Exp;

			[Token(Token = "0x4000A65")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Statement Block;

			[Token(Token = "0x4000A66")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public RuntimeScopeBlock StackFrame;

			[Token(Token = "0x4000A67")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public SourceRef Source;

			[Token(Token = "0x6000CE9")]
			[Address(RVA = "0xFEDC90", Offset = "0xFEDC90", VA = "0xFEDC90")]
			public IfBlock()
			{
			}
		}

		[Token(Token = "0x4000A61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<IfBlock> m_Ifs;

		[Token(Token = "0x4000A62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private IfBlock m_Else;

		[Token(Token = "0x4000A63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private SourceRef m_End;

		[Token(Token = "0x6000CE5")]
		[Address(RVA = "0xFE9010", Offset = "0xFE9010", VA = "0xFE9010")]
		public IfStatement(ScriptLoadingContext lcontext)
		{
		}

		[Token(Token = "0x6000CE6")]
		[Address(RVA = "0xFED948", Offset = "0xFED948", VA = "0xFED948")]
		private IfBlock CreateIfBlock(ScriptLoadingContext lcontext)
		{
			return null;
		}

		[Token(Token = "0x6000CE7")]
		[Address(RVA = "0xFEDB04", Offset = "0xFEDB04", VA = "0xFEDB04")]
		private IfBlock CreateElseBlock(ScriptLoadingContext lcontext)
		{
			return null;
		}

		[Token(Token = "0x6000CE8")]
		[Address(RVA = "0xFEDC98", Offset = "0xFEDC98", VA = "0xFEDC98", Slot = "4")]
		public override void Compile(ByteCode bc)
		{
		}
	}
	[Token(Token = "0x20001B7")]
	internal class LabelStatement : Statement
	{
		[Token(Token = "0x4000A6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private List<GotoStatement> m_Gotos;

		[Token(Token = "0x4000A6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private RuntimeScopeBlock m_StackFrame;

		[Token(Token = "0x1700017D")]
		public string Label
		{
			[Token(Token = "0x6000CEA")]
			[Address(RVA = "0xFEE6CC", Offset = "0xFEE6CC", VA = "0xFEE6CC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CEB")]
			[Address(RVA = "0xFEE6D4", Offset = "0xFEE6D4", VA = "0xFEE6D4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700017E")]
		public int Address
		{
			[Token(Token = "0x6000CEC")]
			[Address(RVA = "0xFEE6DC", Offset = "0xFEE6DC", VA = "0xFEE6DC")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000CED")]
			[Address(RVA = "0xFEE6E4", Offset = "0xFEE6E4", VA = "0xFEE6E4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700017F")]
		public SourceRef SourceRef
		{
			[Token(Token = "0x6000CEE")]
			[Address(RVA = "0xFEE6EC", Offset = "0xFEE6EC", VA = "0xFEE6EC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CEF")]
			[Address(RVA = "0xFEE6F4", Offset = "0xFEE6F4", VA = "0xFEE6F4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000180")]
		public Token NameToken
		{
			[Token(Token = "0x6000CF0")]
			[Address(RVA = "0xFEE6FC", Offset = "0xFEE6FC", VA = "0xFEE6FC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CF1")]
			[Address(RVA = "0xFEE704", Offset = "0xFEE704", VA = "0xFEE704")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000181")]
		internal int DefinedVarsCount
		{
			[Token(Token = "0x6000CF2")]
			[Address(RVA = "0xFEE70C", Offset = "0xFEE70C", VA = "0xFEE70C")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000CF3")]
			[Address(RVA = "0xFEE714", Offset = "0xFEE714", VA = "0xFEE714")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000182")]
		internal string LastDefinedVarName
		{
			[Token(Token = "0x6000CF4")]
			[Address(RVA = "0xFEE71C", Offset = "0xFEE71C", VA = "0xFEE71C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CF5")]
			[Address(RVA = "0xFEE724", Offset = "0xFEE724", VA = "0xFEE724")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000CF6")]
		[Address(RVA = "0xFE8E40", Offset = "0xFE8E40", VA = "0xFE8E40")]
		public LabelStatement(ScriptLoadingContext lcontext)
		{
		}

		[Token(Token = "0x6000CF7")]
		[Address(RVA = "0xFEE72C", Offset = "0xFEE72C", VA = "0xFEE72C")]
		internal void SetDefinedVars(int definedVarsCount, string lastDefinedVarsName)
		{
		}

		[Token(Token = "0x6000CF8")]
		[Address(RVA = "0xFEE73C", Offset = "0xFEE73C", VA = "0xFEE73C")]
		internal void RegisterGoto(GotoStatement gotostat)
		{
		}

		[Token(Token = "0x6000CF9")]
		[Address(RVA = "0xFEE7EC", Offset = "0xFEE7EC", VA = "0xFEE7EC", Slot = "4")]
		public override void Compile(ByteCode bc)
		{
		}

		[Token(Token = "0x6000CFA")]
		[Address(RVA = "0xFEE95C", Offset = "0xFEE95C", VA = "0xFEE95C")]
		internal void SetScope(RuntimeScopeBlock runtimeScopeBlock)
		{
		}
	}
	[Token(Token = "0x20001B8")]
	internal class RepeatStatement : Statement
	{
		[Token(Token = "0x4000A70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Expression m_Condition;

		[Token(Token = "0x4000A71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Statement m_Block;

		[Token(Token = "0x4000A72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private RuntimeScopeBlock m_StackFrame;

		[Token(Token = "0x4000A73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private SourceRef m_Repeat;

		[Token(Token = "0x4000A74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private SourceRef m_Until;

		[Token(Token = "0x6000CFB")]
		[Address(RVA = "0xFE9788", Offset = "0xFE9788", VA = "0xFE9788")]
		public RepeatStatement(ScriptLoadingContext lcontext)
		{
		}

		[Token(Token = "0x6000CFC")]
		[Address(RVA = "0xFEE964", Offset = "0xFEE964", VA = "0xFEE964", Slot = "4")]
		public override void Compile(ByteCode bc)
		{
		}
	}
	[Token(Token = "0x20001B9")]
	internal class ReturnStatement : Statement
	{
		[Token(Token = "0x4000A75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Expression m_Expression;

		[Token(Token = "0x4000A76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private SourceRef m_Ref;

		[Token(Token = "0x6000CFD")]
		[Address(RVA = "0xFEEC00", Offset = "0xFEEC00", VA = "0xFEEC00")]
		public ReturnStatement(ScriptLoadingContext lcontext, Expression e, SourceRef sref)
		{
		}

		[Token(Token = "0x6000CFE")]
		[Address(RVA = "0xFEA38C", Offset = "0xFEA38C", VA = "0xFEA38C")]
		public ReturnStatement(ScriptLoadingContext lcontext)
		{
		}

		[Token(Token = "0x6000CFF")]
		[Address(RVA = "0xFEECFC", Offset = "0xFEECFC", VA = "0xFEECFC", Slot = "4")]
		public override void Compile(ByteCode bc)
		{
		}
	}
	[Token(Token = "0x20001BA")]
	internal class ScopeBlockStatement : Statement
	{
		[Token(Token = "0x4000A77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Statement m_Block;

		[Token(Token = "0x4000A78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private RuntimeScopeBlock m_StackFrame;

		[Token(Token = "0x4000A79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private SourceRef m_Do;

		[Token(Token = "0x4000A7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private SourceRef m_End;

		[Token(Token = "0x6000D00")]
		[Address(RVA = "0xFE94A0", Offset = "0xFE94A0", VA = "0xFE94A0")]
		public ScopeBlockStatement(ScriptLoadingContext lcontext)
		{
		}

		[Token(Token = "0x6000D01")]
		[Address(RVA = "0xFEEEC0", Offset = "0xFEEEC0", VA = "0xFEEEC0", Slot = "4")]
		public override void Compile(ByteCode bc)
		{
		}
	}
	[Token(Token = "0x20001BB")]
	internal class WhileStatement : Statement
	{
		[Token(Token = "0x4000A7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Expression m_Condition;

		[Token(Token = "0x4000A7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Statement m_Block;

		[Token(Token = "0x4000A7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private RuntimeScopeBlock m_StackFrame;

		[Token(Token = "0x4000A7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private SourceRef m_Start;

		[Token(Token = "0x4000A7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private SourceRef m_End;

		[Token(Token = "0x6000D02")]
		[Address(RVA = "0xFE9260", Offset = "0xFE9260", VA = "0xFE9260")]
		public WhileStatement(ScriptLoadingContext lcontext)
		{
		}

		[Token(Token = "0x6000D03")]
		[Address(RVA = "0xFEF188", Offset = "0xFEF188", VA = "0xFEF188", Slot = "4")]
		public override void Compile(ByteCode bc)
		{
		}
	}
}
namespace MoonSharp.Interpreter.Tree.Fast_Interface
{
	[Token(Token = "0x20001BC")]
	internal static class Loader_Fast
	{
		[Token(Token = "0x6000D04")]
		[Address(RVA = "0xFE2000", Offset = "0xFE2000", VA = "0xFE2000")]
		internal static DynamicExprExpression LoadDynamicExpr(Script script, SourceCode source)
		{
			return null;
		}

		[Token(Token = "0x6000D05")]
		[Address(RVA = "0xFEF45C", Offset = "0xFEF45C", VA = "0xFEF45C")]
		private static ScriptLoadingContext CreateLoadingContext(Script script, SourceCode source)
		{
			return null;
		}

		[Token(Token = "0x6000D06")]
		[Address(RVA = "0xFE0638", Offset = "0xFE0638", VA = "0xFE0638")]
		internal static int LoadChunk(Script script, SourceCode source, ByteCode bytecode)
		{
			return default(int);
		}

		[Token(Token = "0x6000D07")]
		[Address(RVA = "0xFDF238", Offset = "0xFDF238", VA = "0xFDF238")]
		internal static int LoadFunction(Script script, SourceCode source, ByteCode bytecode, bool usesGlobalEnv)
		{
			return default(int);
		}
	}
}
namespace MoonSharp.Interpreter.Tree.Expressions
{
	[Token(Token = "0x20001BD")]
	internal class AdjustmentExpression : Expression
	{
		[Token(Token = "0x4000A80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Expression expression;

		[Token(Token = "0x6000D08")]
		[Address(RVA = "0xFE475C", Offset = "0xFE475C", VA = "0xFE475C")]
		public AdjustmentExpression(ScriptLoadingContext lcontext, Expression exp)
		{
		}

		[Token(Token = "0x6000D09")]
		[Address(RVA = "0xFEF898", Offset = "0xFEF898", VA = "0xFEF898", Slot = "4")]
		public override void Compile(ByteCode bc)
		{
		}

		[Token(Token = "0x6000D0A")]
		[Address(RVA = "0xFEF8CC", Offset = "0xFEF8CC", VA = "0xFEF8CC", Slot = "6")]
		public override DynValue Eval(ScriptExecutionContext context)
		{
			return null;
		}
	}
	[Token(Token = "0x20001BE")]
	internal class BinaryOperatorExpression : Expression
	{
		[Token(Token = "0x20001BF")]
		[Flags]
		private enum Operator
		{
			[Token(Token = "0x4000A8C")]
			NotAnOperator = 0,
			[Token(Token = "0x4000A8D")]
			Or = 1,
			[Token(Token = "0x4000A8E")]
			And = 2,
			[Token(Token = "0x4000A8F")]
			Less = 4,
			[Token(Token = "0x4000A90")]
			Greater = 8,
			[Token(Token = "0x4000A91")]
			LessOrEqual = 0x10,
			[Token(Token = "0x4000A92")]
			GreaterOrEqual = 0x20,
			[Token(Token = "0x4000A93")]
			NotEqual = 0x40,
			[Token(Token = "0x4000A94")]
			Equal = 0x80,
			[Token(Token = "0x4000A95")]
			StrConcat = 0x100,
			[Token(Token = "0x4000A96")]
			Add = 0x200,
			[Token(Token = "0x4000A97")]
			Sub = 0x400,
			[Token(Token = "0x4000A98")]
			Mul = 0x1000,
			[Token(Token = "0x4000A99")]
			Div = 0x2000,
			[Token(Token = "0x4000A9A")]
			Mod = 0x4000,
			[Token(Token = "0x4000A9B")]
			Power = 0x8000
		}

		[Token(Token = "0x20001C0")]
		private class Node
		{
			[Token(Token = "0x4000A9C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Expression Expr;

			[Token(Token = "0x4000A9D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Operator Op;

			[Token(Token = "0x4000A9E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Node Prev;

			[Token(Token = "0x4000A9F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Node Next;

			[Token(Token = "0x6000D1C")]
			[Address(RVA = "0xFEF900", Offset = "0xFEF900", VA = "0xFEF900")]
			public Node()
			{
			}
		}

		[Token(Token = "0x20001C1")]
		private class LinkedList
		{
			[Token(Token = "0x4000AA0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Node Nodes;

			[Token(Token = "0x4000AA1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Node Last;

			[Token(Token = "0x4000AA2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Operator OperatorMask;

			[Token(Token = "0x6000D1D")]
			[Address(RVA = "0xFEF8F8", Offset = "0xFEF8F8", VA = "0xFEF8F8")]
			public LinkedList()
			{
			}
		}

		[Token(Token = "0x4000A81")]
		private const Operator POWER = Operator.Power;

		[Token(Token = "0x4000A82")]
		private const Operator MUL_DIV_MOD = Operator.Mul | Operator.Div | Operator.Mod;

		[Token(Token = "0x4000A83")]
		private const Operator ADD_SUB = Operator.Add | Operator.Sub;

		[Token(Token = "0x4000A84")]
		private const Operator STRCAT = Operator.StrConcat;

		[Token(Token = "0x4000A85")]
		private const Operator COMPARES = Operator.Less | Operator.Greater | Operator.LessOrEqual | Operator.GreaterOrEqual | Operator.NotEqual | Operator.Equal;

		[Token(Token = "0x4000A86")]
		private const Operator LOGIC_AND = Operator.And;

		[Token(Token = "0x4000A87")]
		private const Operator LOGIC_OR = Operator.Or;

		[Token(Token = "0x4000A88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Expression m_Exp1;

		[Token(Token = "0x4000A89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Expression m_Exp2;

		[Token(Token = "0x4000A8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Operator m_Operator;

		[Token(Token = "0x6000D0B")]
		[Address(RVA = "0xFE31A8", Offset = "0xFE31A8", VA = "0xFE31A8")]
		public static object BeginOperatorChain()
		{
			return null;
		}

		[Token(Token = "0x6000D0C")]
		[Address(RVA = "0xFE3204", Offset = "0xFE3204", VA = "0xFE3204")]
		public static void AddExpressionToChain(object chain, Expression exp)
		{
		}

		[Token(Token = "0x6000D0D")]
		[Address(RVA = "0xFE32D0", Offset = "0xFE32D0", VA = "0xFE32D0")]
		public static void AddOperatorToChain(object chain, Token op)
		{
		}

		[Token(Token = "0x6000D0E")]
		[Address(RVA = "0xFE3398", Offset = "0xFE3398", VA = "0xFE3398")]
		public static Expression CommitOperatorChain(object chain, ScriptLoadingContext lcontext)
		{
			return null;
		}

		[Token(Token = "0x6000D0F")]
		[Address(RVA = "0xFE2F00", Offset = "0xFE2F00", VA = "0xFE2F00")]
		public static Expression CreatePowerExpression(Expression op1, Expression op2, ScriptLoadingContext lcontext)
		{
			return null;
		}

		[Token(Token = "0x6000D10")]
		[Address(RVA = "0xFEF908", Offset = "0xFEF908", VA = "0xFEF908")]
		private static void AddNode(LinkedList list, Node node)
		{
		}

		[Token(Token = "0x6000D11")]
		[Address(RVA = "0xFEFAF4", Offset = "0xFEFAF4", VA = "0xFEFAF4")]
		private static Expression CreateSubTree(LinkedList list, ScriptLoadingContext lcontext)
		{
			return null;
		}

		[Token(Token = "0x6000D12")]
		[Address(RVA = "0xFEFDDC", Offset = "0xFEFDDC", VA = "0xFEFDDC")]
		private static Node PrioritizeLeftAssociative(Node nodes, ScriptLoadingContext lcontext, Operator operatorsToFind)
		{
			return null;
		}

		[Token(Token = "0x6000D13")]
		[Address(RVA = "0xFEFC84", Offset = "0xFEFC84", VA = "0xFEFC84")]
		private static Node PrioritizeRightAssociative(Node nodes, ScriptLoadingContext lcontext, Operator operatorsToFind)
		{
			return null;
		}

		[Token(Token = "0x6000D14")]
		[Address(RVA = "0xFEF994", Offset = "0xFEF994", VA = "0xFEF994")]
		private static Operator ParseBinaryOperator(Token token)
		{
			return default(Operator);
		}

		[Token(Token = "0x6000D15")]
		[Address(RVA = "0xFEFC2C", Offset = "0xFEFC2C", VA = "0xFEFC2C")]
		private BinaryOperatorExpression(Expression exp1, Expression exp2, Operator op, ScriptLoadingContext lcontext)
		{
		}

		[Token(Token = "0x6000D16")]
		[Address(RVA = "0xFEFF30", Offset = "0xFEFF30", VA = "0xFEFF30")]
		private static bool ShouldInvertBoolean(Operator op)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D17")]
		[Address(RVA = "0xFEFF58", Offset = "0xFEFF58", VA = "0xFEFF58")]
		private static OpCode OperatorToOpCode(Operator op)
		{
			return default(OpCode);
		}

		[Token(Token = "0x6000D18")]
		[Address(RVA = "0xFF00E8", Offset = "0xFF00E8", VA = "0xFF00E8", Slot = "4")]
		public override void Compile(ByteCode bc)
		{
		}

		[Token(Token = "0x6000D19")]
		[Address(RVA = "0xFF0204", Offset = "0xFF0204", VA = "0xFF0204", Slot = "6")]
		public override DynValue Eval(ScriptExecutionContext context)
		{
			return null;
		}

		[Token(Token = "0x6000D1A")]
		[Address(RVA = "0xFF0754", Offset = "0xFF0754", VA = "0xFF0754")]
		private double EvalArithmetic(DynValue v1, DynValue v2)
		{
			return default(double);
		}

		[Token(Token = "0x6000D1B")]
		[Address(RVA = "0xFF0474", Offset = "0xFF0474", VA = "0xFF0474")]
		private bool EvalComparison(DynValue l, DynValue r, Operator op)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20001C2")]
	internal class DynamicExprExpression : Expression
	{
		[Token(Token = "0x4000AA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Expression m_Exp;

		[Token(Token = "0x6000D1E")]
		[Address(RVA = "0xFEF568", Offset = "0xFEF568", VA = "0xFEF568")]
		public DynamicExprExpression(Expression exp, ScriptLoadingContext lcontext)
		{
		}

		[Token(Token = "0x6000D1F")]
		[Address(RVA = "0xFF099C", Offset = "0xFF099C", VA = "0xFF099C", Slot = "6")]
		public override DynValue Eval(ScriptExecutionContext context)
		{
			return null;
		}

		[Token(Token = "0x6000D20")]
		[Address(RVA = "0xFF09BC", Offset = "0xFF09BC", VA = "0xFF09BC", Slot = "4")]
		public override void Compile(ByteCode bc)
		{
		}

		[Token(Token = "0x6000D21")]
		[Address(RVA = "0xFF09FC", Offset = "0xFF09FC", VA = "0xFF09FC", Slot = "7")]
		public override SymbolRef FindDynamic(ScriptExecutionContext context)
		{
			return null;
		}
	}
	[Token(Token = "0x20001C3")]
	internal class ExprListExpression : Expression
	{
		[Token(Token = "0x4000AA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<Expression> expressions;

		[Token(Token = "0x6000D22")]
		[Address(RVA = "0xFE3FFC", Offset = "0xFE3FFC", VA = "0xFE3FFC")]
		public ExprListExpression(List<Expression> exps, ScriptLoadingContext lcontext)
		{
		}

		[Token(Token = "0x6000D23")]
		[Address(RVA = "0xFF0A1C", Offset = "0xFF0A1C", VA = "0xFF0A1C")]
		public Expression[] GetExpressions()
		{
			return null;
		}

		[Token(Token = "0x6000D24")]
		[Address(RVA = "0xFF0A6C", Offset = "0xFF0A6C", VA = "0xFF0A6C", Slot = "4")]
		public override void Compile(ByteCode bc)
		{
		}

		[Token(Token = "0x6000D25")]
		[Address(RVA = "0xFF0BFC", Offset = "0xFF0BFC", VA = "0xFF0BFC", Slot = "6")]
		public override DynValue Eval(ScriptExecutionContext context)
		{
			return null;
		}
	}
	[Token(Token = "0x20001C4")]
	internal class FunctionCallExpression : Expression
	{
		[Token(Token = "0x4000AA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<Expression> m_Arguments;

		[Token(Token = "0x4000AA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Expression m_Function;

		[Token(Token = "0x4000AA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private string m_Name;

		[Token(Token = "0x4000AA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private string m_DebugErr;

		[Token(Token = "0x17000183")]
		internal SourceRef SourceRef
		{
			[Token(Token = "0x6000D26")]
			[Address(RVA = "0xFF0CEC", Offset = "0xFF0CEC", VA = "0xFF0CEC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D27")]
			[Address(RVA = "0xFF0CF4", Offset = "0xFF0CF4", VA = "0xFF0CF4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000D28")]
		[Address(RVA = "0xFE425C", Offset = "0xFE425C", VA = "0xFE425C")]
		public FunctionCallExpression(ScriptLoadingContext lcontext, Expression function, Token thisCallName)
		{
		}

		[Token(Token = "0x6000D29")]
		[Address(RVA = "0xFF0CFC", Offset = "0xFF0CFC", VA = "0xFF0CFC", Slot = "4")]
		public override void Compile(ByteCode bc)
		{
		}

		[Token(Token = "0x6000D2A")]
		[Address(RVA = "0xFF0E8C", Offset = "0xFF0E8C", VA = "0xFF0E8C", Slot = "6")]
		public override DynValue Eval(ScriptExecutionContext context)
		{
			return null;
		}
	}
	[Token(Token = "0x20001C5")]
	internal class FunctionDefinitionExpression : Expression, IClosureBuilder
	{
		[Token(Token = "0x4000AAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private SymbolRef[] m_ParamNames;

		[Token(Token = "0x4000AAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Statement m_Statement;

		[Token(Token = "0x4000AAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private RuntimeScopeFrame m_StackFrame;

		[Token(Token = "0x4000AAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<SymbolRef> m_Closure;

		[Token(Token = "0x4000AAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool m_HasVarArgs;

		[Token(Token = "0x4000AAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Instruction m_ClosureInstruction;

		[Token(Token = "0x4000AB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool m_UsesGlobalEnv;

		[Token(Token = "0x4000AB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private SymbolRef m_Env;

		[Token(Token = "0x4000AB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private SourceRef m_Begin;

		[Token(Token = "0x4000AB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private SourceRef m_End;

		[Token(Token = "0x6000D2B")]
		[Address(RVA = "0xFEF5AC", Offset = "0xFEF5AC", VA = "0xFEF5AC")]
		public FunctionDefinitionExpression(ScriptLoadingContext lcontext, bool usesGlobalEnv)
		{
		}

		[Token(Token = "0x6000D2C")]
		[Address(RVA = "0xFE3AA4", Offset = "0xFE3AA4", VA = "0xFE3AA4")]
		public FunctionDefinitionExpression(ScriptLoadingContext lcontext, bool pushSelfParam, bool isLambda)
		{
		}

		[Token(Token = "0x6000D2D")]
		[Address(RVA = "0xFF0EDC", Offset = "0xFF0EDC", VA = "0xFF0EDC")]
		private FunctionDefinitionExpression(ScriptLoadingContext lcontext, bool pushSelfParam, bool usesGlobalEnv, bool isLambda)
		{
		}

		[Token(Token = "0x6000D2E")]
		[Address(RVA = "0xFF16E4", Offset = "0xFF16E4", VA = "0xFF16E4")]
		private Statement CreateLambdaBody(ScriptLoadingContext lcontext)
		{
			return null;
		}

		[Token(Token = "0x6000D2F")]
		[Address(RVA = "0xFF17A4", Offset = "0xFF17A4", VA = "0xFF17A4")]
		private Statement CreateBody(ScriptLoadingContext lcontext)
		{
			return null;
		}

		[Token(Token = "0x6000D30")]
		[Address(RVA = "0xFF11D0", Offset = "0xFF11D0", VA = "0xFF11D0")]
		private List<string> BuildParamList(ScriptLoadingContext lcontext, bool pushSelfParam, Token openBracketToken, bool isLambda)
		{
			return null;
		}

		[Token(Token = "0x6000D31")]
		[Address(RVA = "0xFF14BC", Offset = "0xFF14BC", VA = "0xFF14BC")]
		private SymbolRef[] DefineArguments(List<string> paramnames, ScriptLoadingContext lcontext)
		{
			return null;
		}

		[Token(Token = "0x6000D32")]
		[Address(RVA = "0xFF1978", Offset = "0xFF1978", VA = "0xFF1978", Slot = "8")]
		public SymbolRef CreateUpvalue(BuildTimeScope scope, SymbolRef symbol)
		{
			return null;
		}

		[Token(Token = "0x6000D33")]
		[Address(RVA = "0xFF1B3C", Offset = "0xFF1B3C", VA = "0xFF1B3C", Slot = "6")]
		public override DynValue Eval(ScriptExecutionContext context)
		{
			return null;
		}

		[Token(Token = "0x6000D34")]
		[Address(RVA = "0xFEF5BC", Offset = "0xFEF5BC", VA = "0xFEF5BC")]
		public int CompileBody(ByteCode bc, string friendlyName)
		{
			return default(int);
		}

		[Token(Token = "0x6000D35")]
		[Address(RVA = "0xFED3A0", Offset = "0xFED3A0", VA = "0xFED3A0")]
		public int Compile(ByteCode bc, Func<int> afterDecl, string friendlyName)
		{
			return default(int);
		}

		[Token(Token = "0x6000D36")]
		[Address(RVA = "0xFF1B8C", Offset = "0xFF1B8C", VA = "0xFF1B8C", Slot = "4")]
		public override void Compile(ByteCode bc)
		{
		}
	}
	[Token(Token = "0x20001C7")]
	internal class IndexExpression : Expression, IVariable
	{
		[Token(Token = "0x4000AB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Expression m_BaseExp;

		[Token(Token = "0x4000AB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Expression m_IndexExp;

		[Token(Token = "0x4000AB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private string m_Name;

		[Token(Token = "0x6000D3A")]
		[Address(RVA = "0xFE4218", Offset = "0xFE4218", VA = "0xFE4218")]
		public IndexExpression(Expression baseExp, Expression indexExp, ScriptLoadingContext lcontext)
		{
		}

		[Token(Token = "0x6000D3B")]
		[Address(RVA = "0xFE3FB8", Offset = "0xFE3FB8", VA = "0xFE3FB8")]
		public IndexExpression(Expression baseExp, string name, ScriptLoadingContext lcontext)
		{
		}

		[Token(Token = "0x6000D3C")]
		[Address(RVA = "0xFF1D04", Offset = "0xFF1D04", VA = "0xFF1D04", Slot = "4")]
		public override void Compile(ByteCode bc)
		{
		}

		[Token(Token = "0x6000D3D")]
		[Address(RVA = "0xFF1E70", Offset = "0xFF1E70", VA = "0xFF1E70", Slot = "8")]
		public void CompileAssignment(ByteCode bc, int stackofs, int tupleidx)
		{
		}

		[Token(Token = "0x6000D3E")]
		[Address(RVA = "0xFF2004", Offset = "0xFF2004", VA = "0xFF2004", Slot = "6")]
		public override DynValue Eval(ScriptExecutionContext context)
		{
			return null;
		}
	}
	[Token(Token = "0x20001C8")]
	internal class LiteralExpression : Expression
	{
		[Token(Token = "0x4000AB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private DynValue m_Value;

		[Token(Token = "0x17000184")]
		public DynValue Value
		{
			[Token(Token = "0x6000D3F")]
			[Address(RVA = "0xFF21DC", Offset = "0xFF21DC", VA = "0xFF21DC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D40")]
		[Address(RVA = "0xFECA38", Offset = "0xFECA38", VA = "0xFECA38")]
		public LiteralExpression(ScriptLoadingContext lcontext, DynValue value)
		{
		}

		[Token(Token = "0x6000D41")]
		[Address(RVA = "0xFE341C", Offset = "0xFE341C", VA = "0xFE341C")]
		public LiteralExpression(ScriptLoadingContext lcontext, Token t)
		{
		}

		[Token(Token = "0x6000D42")]
		[Address(RVA = "0xFF21E4", Offset = "0xFF21E4", VA = "0xFF21E4", Slot = "4")]
		public override void Compile(ByteCode bc)
		{
		}

		[Token(Token = "0x6000D43")]
		[Address(RVA = "0xFF2208", Offset = "0xFF2208", VA = "0xFF2208", Slot = "6")]
		public override DynValue Eval(ScriptExecutionContext context)
		{
			return null;
		}
	}
	[Token(Token = "0x20001C9")]
	internal class SymbolRefExpression : Expression, IVariable
	{
		[Token(Token = "0x4000ABA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private SymbolRef m_Ref;

		[Token(Token = "0x4000ABB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string m_VarName;

		[Token(Token = "0x6000D44")]
		[Address(RVA = "0xFE3730", Offset = "0xFE3730", VA = "0xFE3730")]
		public SymbolRefExpression(Token T, ScriptLoadingContext lcontext)
		{
		}

		[Token(Token = "0x6000D45")]
		[Address(RVA = "0xFEB370", Offset = "0xFEB370", VA = "0xFEB370")]
		public SymbolRefExpression(ScriptLoadingContext lcontext, SymbolRef refr)
		{
		}

		[Token(Token = "0x6000D46")]
		[Address(RVA = "0xFF2210", Offset = "0xFF2210", VA = "0xFF2210", Slot = "4")]
		public override void Compile(ByteCode bc)
		{
		}

		[Token(Token = "0x6000D47")]
		[Address(RVA = "0xFF2234", Offset = "0xFF2234", VA = "0xFF2234", Slot = "8")]
		public void CompileAssignment(ByteCode bc, int stackofs, int tupleidx)
		{
		}

		[Token(Token = "0x6000D48")]
		[Address(RVA = "0xFF2258", Offset = "0xFF2258", VA = "0xFF2258", Slot = "6")]
		public override DynValue Eval(ScriptExecutionContext context)
		{
			return null;
		}

		[Token(Token = "0x6000D49")]
		[Address(RVA = "0xFF2278", Offset = "0xFF2278", VA = "0xFF2278", Slot = "7")]
		public override SymbolRef FindDynamic(ScriptExecutionContext context)
		{
			return null;
		}
	}
	[Token(Token = "0x20001CA")]
	internal class TableConstructor : Expression
	{
		[Token(Token = "0x4000ABC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool m_Shared;

		[Token(Token = "0x4000ABD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<Expression> m_PositionalValues;

		[Token(Token = "0x4000ABE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<KeyValuePair<Expression, Expression>> m_CtorArgs;

		[Token(Token = "0x6000D4A")]
		[Address(RVA = "0xFE38C4", Offset = "0xFE38C4", VA = "0xFE38C4")]
		public TableConstructor(ScriptLoadingContext lcontext, bool shared)
		{
		}

		[Token(Token = "0x6000D4B")]
		[Address(RVA = "0xFF2510", Offset = "0xFF2510", VA = "0xFF2510")]
		private void MapField(ScriptLoadingContext lcontext)
		{
		}

		[Token(Token = "0x6000D4C")]
		[Address(RVA = "0xFF22A0", Offset = "0xFF22A0", VA = "0xFF22A0")]
		private void StructField(ScriptLoadingContext lcontext)
		{
		}

		[Token(Token = "0x6000D4D")]
		[Address(RVA = "0xFF2458", Offset = "0xFF2458", VA = "0xFF2458")]
		private void ArrayField(ScriptLoadingContext lcontext)
		{
		}

		[Token(Token = "0x6000D4E")]
		[Address(RVA = "0xFF2658", Offset = "0xFF2658", VA = "0xFF2658", Slot = "4")]
		public override void Compile(ByteCode bc)
		{
		}

		[Token(Token = "0x6000D4F")]
		[Address(RVA = "0xFF28B4", Offset = "0xFF28B4", VA = "0xFF28B4", Slot = "6")]
		public override DynValue Eval(ScriptExecutionContext context)
		{
			return null;
		}
	}
	[Token(Token = "0x20001CB")]
	internal class UnaryOperatorExpression : Expression
	{
		[Token(Token = "0x4000ABF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Expression m_Exp;

		[Token(Token = "0x4000AC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string m_OpText;

		[Token(Token = "0x6000D50")]
		[Address(RVA = "0xFF2C60", Offset = "0xFF2C60", VA = "0xFF2C60")]
		public UnaryOperatorExpression(ScriptLoadingContext lcontext, Expression subExpression, Token unaryOpToken)
		{
		}

		[Token(Token = "0x6000D51")]
		[Address(RVA = "0xFF2CAC", Offset = "0xFF2CAC", VA = "0xFF2CAC", Slot = "4")]
		public override void Compile(ByteCode bc)
		{
		}

		[Token(Token = "0x6000D52")]
		[Address(RVA = "0xFF2E30", Offset = "0xFF2E30", VA = "0xFF2E30", Slot = "6")]
		public override DynValue Eval(ScriptExecutionContext context)
		{
			return null;
		}
	}
}
namespace MoonSharp.Interpreter.Serialization
{
	[Token(Token = "0x20001CC")]
	public static class ObjectValueConverter
	{
		[Token(Token = "0x6000D53")]
		[Address(RVA = "0xFF30B4", Offset = "0xFF30B4", VA = "0xFF30B4")]
		public static DynValue SerializeObjectToDynValue(Script script, object o, [Optional] DynValue valueForNulls)
		{
			return null;
		}
	}
	[Token(Token = "0x20001CD")]
	public static class SerializationExtensions
	{
		[Token(Token = "0x4000AC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static HashSet<string> LUAKEYWORDS;

		[Token(Token = "0x6000D54")]
		[Address(RVA = "0xFF3758", Offset = "0xFF3758", VA = "0xFF3758")]
		public static string Serialize(this Table table, bool prefixReturn = false, int tabs = 0)
		{
			return null;
		}

		[Token(Token = "0x6000D55")]
		[Address(RVA = "0xFF3D58", Offset = "0xFF3D58", VA = "0xFF3D58")]
		private static bool IsStringIdentifierValid(DynValue dynValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D56")]
		[Address(RVA = "0xFF3F28", Offset = "0xFF3F28", VA = "0xFF3F28")]
		public static string SerializeValue(this DynValue dynValue, int tabs = 0)
		{
			return null;
		}

		[Token(Token = "0x6000D57")]
		[Address(RVA = "0xFF4190", Offset = "0xFF4190", VA = "0xFF4190")]
		private static string EscapeString(string s)
		{
			return null;
		}
	}
}
namespace MoonSharp.Interpreter.Serialization.Json
{
	[Token(Token = "0x20001CE")]
	public sealed class JsonNull
	{
		[Token(Token = "0x6000D59")]
		[Address(RVA = "0xFF4810", Offset = "0xFF4810", VA = "0xFF4810")]
		public static bool isNull()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D5A")]
		[Address(RVA = "0xFF4818", Offset = "0xFF4818", VA = "0xFF4818")]
		[MoonSharpHidden]
		public static bool IsJsonNull(DynValue v)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D5B")]
		[Address(RVA = "0xFF4964", Offset = "0xFF4964", VA = "0xFF4964")]
		[MoonSharpHidden]
		public static DynValue Create()
		{
			return null;
		}

		[Token(Token = "0x6000D5C")]
		[Address(RVA = "0xFF49C8", Offset = "0xFF49C8", VA = "0xFF49C8")]
		public JsonNull()
		{
		}
	}
	[Token(Token = "0x20001CF")]
	public static class JsonTableConverter
	{
		[Token(Token = "0x6000D5D")]
		[Address(RVA = "0xFF49D0", Offset = "0xFF49D0", VA = "0xFF49D0")]
		public static string TableToJson(this Table table)
		{
			return null;
		}

		[Token(Token = "0x6000D5E")]
		[Address(RVA = "0xFF4A44", Offset = "0xFF4A44", VA = "0xFF4A44")]
		private static void TableToJson(StringBuilder sb, Table table)
		{
		}

		[Token(Token = "0x6000D5F")]
		[Address(RVA = "0xFF50BC", Offset = "0xFF50BC", VA = "0xFF50BC")]
		public static string ObjectToJson(object obj)
		{
			return null;
		}

		[Token(Token = "0x6000D60")]
		[Address(RVA = "0xFF4F58", Offset = "0xFF4F58", VA = "0xFF4F58")]
		private static void ValueToJson(StringBuilder sb, DynValue value)
		{
		}

		[Token(Token = "0x6000D61")]
		[Address(RVA = "0xFF50F0", Offset = "0xFF50F0", VA = "0xFF50F0")]
		private static string EscapeString(string s)
		{
			return null;
		}

		[Token(Token = "0x6000D62")]
		[Address(RVA = "0xFF4EF4", Offset = "0xFF4EF4", VA = "0xFF4EF4")]
		private static bool IsValueJsonCompatible(DynValue value)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D63")]
		[Address(RVA = "0xFF5314", Offset = "0xFF5314", VA = "0xFF5314")]
		public static Table JsonToTable(string json, [Optional] Script script)
		{
			return null;
		}

		[Token(Token = "0x6000D64")]
		[Address(RVA = "0xFF56B8", Offset = "0xFF56B8", VA = "0xFF56B8")]
		private static void AssertToken(Lexer L, TokenType type)
		{
		}

		[Token(Token = "0x6000D65")]
		[Address(RVA = "0xFF55D4", Offset = "0xFF55D4", VA = "0xFF55D4")]
		private static Table ParseJsonArray(Lexer L, Script script)
		{
			return null;
		}

		[Token(Token = "0x6000D66")]
		[Address(RVA = "0xFF54A8", Offset = "0xFF54A8", VA = "0xFF54A8")]
		private static Table ParseJsonObject(Lexer L, Script script)
		{
			return null;
		}

		[Token(Token = "0x6000D67")]
		[Address(RVA = "0xFF57C0", Offset = "0xFF57C0", VA = "0xFF57C0")]
		private static DynValue ParseJsonValue(Lexer L, Script script)
		{
			return null;
		}
	}
}
namespace MoonSharp.Interpreter.REPL
{
	[Token(Token = "0x20001D0")]
	internal static class NamespaceDoc
	{
	}
	[Token(Token = "0x20001D1")]
	public class ReplHistoryInterpreter : ReplInterpreter
	{
		[Token(Token = "0x4000AC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string[] m_History;

		[Token(Token = "0x4000AC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int m_Last;

		[Token(Token = "0x4000AC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int m_Navi;

		[Token(Token = "0x6000D68")]
		[Address(RVA = "0xFF5B40", Offset = "0xFF5B40", VA = "0xFF5B40")]
		public ReplHistoryInterpreter(Script script, int historySize)
		{
		}

		[Token(Token = "0x6000D69")]
		[Address(RVA = "0xFF5C38", Offset = "0xFF5C38", VA = "0xFF5C38", Slot = "7")]
		public override DynValue Evaluate(string input)
		{
			return null;
		}

		[Token(Token = "0x6000D6A")]
		[Address(RVA = "0xFF6158", Offset = "0xFF6158", VA = "0xFF6158")]
		public string HistoryPrev()
		{
			return null;
		}

		[Token(Token = "0x6000D6B")]
		[Address(RVA = "0xFF61C8", Offset = "0xFF61C8", VA = "0xFF61C8")]
		public string HistoryNext()
		{
			return null;
		}
	}
	[Token(Token = "0x20001D2")]
	public class ReplInterpreter
	{
		[Token(Token = "0x4000AC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Script m_Script;

		[Token(Token = "0x4000AC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string m_CurrentCommand;

		[Token(Token = "0x17000185")]
		public bool HandleDynamicExprs
		{
			[Token(Token = "0x6000D6D")]
			[Address(RVA = "0xFF6220", Offset = "0xFF6220", VA = "0xFF6220")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D6E")]
			[Address(RVA = "0xFF6228", Offset = "0xFF6228", VA = "0xFF6228")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000186")]
		public bool HandleClassicExprsSyntax
		{
			[Token(Token = "0x6000D6F")]
			[Address(RVA = "0xFF6234", Offset = "0xFF6234", VA = "0xFF6234")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D70")]
			[Address(RVA = "0xFF623C", Offset = "0xFF623C", VA = "0xFF623C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000187")]
		public virtual bool HasPendingCommand
		{
			[Token(Token = "0x6000D71")]
			[Address(RVA = "0xFF6248", Offset = "0xFF6248", VA = "0xFF6248", Slot = "4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000188")]
		public virtual string CurrentPendingCommand
		{
			[Token(Token = "0x6000D72")]
			[Address(RVA = "0xFF626C", Offset = "0xFF626C", VA = "0xFF626C", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000189")]
		public virtual string ClassicPrompt
		{
			[Token(Token = "0x6000D73")]
			[Address(RVA = "0xFF6274", Offset = "0xFF6274", VA = "0xFF6274", Slot = "6")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D6C")]
		[Address(RVA = "0xFF5BBC", Offset = "0xFF5BBC", VA = "0xFF5BBC")]
		public ReplInterpreter(Script script)
		{
		}

		[Token(Token = "0x6000D74")]
		[Address(RVA = "0xFF5CD4", Offset = "0xFF5CD4", VA = "0xFF5CD4", Slot = "7")]
		public virtual DynValue Evaluate(string input)
		{
			return null;
		}
	}
	[Token(Token = "0x20001D3")]
	public class ReplInterpreterScriptLoader : FileSystemScriptLoader
	{
		[Token(Token = "0x6000D75")]
		[Address(RVA = "0xFF62EC", Offset = "0xFF62EC", VA = "0xFF62EC")]
		public ReplInterpreterScriptLoader()
		{
		}

		[Token(Token = "0x6000D76")]
		[Address(RVA = "0xFF668C", Offset = "0xFF668C", VA = "0xFF668C", Slot = "10")]
		public override string ResolveModuleName(string modname, Table globalContext)
		{
			return null;
		}
	}
}
namespace MoonSharp.Interpreter.Platforms
{
	[Token(Token = "0x20001D4")]
	internal static class NamespaceDoc
	{
	}
	[Token(Token = "0x20001D5")]
	public interface IPlatformAccessor
	{
		[Token(Token = "0x6000D77")]
		CoreModules FilterSupportedCoreModules(CoreModules module);

		[Token(Token = "0x6000D78")]
		string GetEnvironmentVariable(string envvarname);

		[Token(Token = "0x6000D79")]
		bool IsRunningOnAOT();

		[Token(Token = "0x6000D7A")]
		string GetPlatformName();

		[Token(Token = "0x6000D7B")]
		void DefaultPrint(string content);

		[Token(Token = "0x6000D7C")]
		string DefaultInput(string prompt);

		[Token(Token = "0x6000D7D")]
		Stream IO_OpenFile(Script script, string filename, Encoding encoding, string mode);

		[Token(Token = "0x6000D7E")]
		Stream IO_GetStandardStream(StandardFileType type);

		[Token(Token = "0x6000D7F")]
		string IO_OS_GetTempFilename();

		[Token(Token = "0x6000D80")]
		void OS_ExitFast(int exitCode);

		[Token(Token = "0x6000D81")]
		bool OS_FileExists(string file);

		[Token(Token = "0x6000D82")]
		void OS_FileDelete(string file);

		[Token(Token = "0x6000D83")]
		void OS_FileMove(string src, string dst);

		[Token(Token = "0x6000D84")]
		int OS_Execute(string cmdline);
	}
	[Token(Token = "0x20001D6")]
	public class LimitedPlatformAccessor : PlatformAccessorBase
	{
		[Token(Token = "0x6000D85")]
		[Address(RVA = "0xFF67EC", Offset = "0xFF67EC", VA = "0xFF67EC", Slot = "31")]
		public override string GetEnvironmentVariable(string envvarname)
		{
			return null;
		}

		[Token(Token = "0x6000D86")]
		[Address(RVA = "0xFF67F4", Offset = "0xFF67F4", VA = "0xFF67F4", Slot = "30")]
		public override CoreModules FilterSupportedCoreModules(CoreModules module)
		{
			return default(CoreModules);
		}

		[Token(Token = "0x6000D87")]
		[Address(RVA = "0xFF67FC", Offset = "0xFF67FC", VA = "0xFF67FC", Slot = "22")]
		public override Stream IO_OpenFile(Script script, string filename, Encoding encoding, string mode)
		{
			return null;
		}

		[Token(Token = "0x6000D88")]
		[Address(RVA = "0xFF684C", Offset = "0xFF684C", VA = "0xFF684C", Slot = "23")]
		public override Stream IO_GetStandardStream(StandardFileType type)
		{
			return null;
		}

		[Token(Token = "0x6000D89")]
		[Address(RVA = "0xFF689C", Offset = "0xFF689C", VA = "0xFF689C", Slot = "24")]
		public override string IO_OS_GetTempFilename()
		{
			return null;
		}

		[Token(Token = "0x6000D8A")]
		[Address(RVA = "0xFF68EC", Offset = "0xFF68EC", VA = "0xFF68EC", Slot = "25")]
		public override void OS_ExitFast(int exitCode)
		{
		}

		[Token(Token = "0x6000D8B")]
		[Address(RVA = "0xFF693C", Offset = "0xFF693C", VA = "0xFF693C", Slot = "26")]
		public override bool OS_FileExists(string file)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D8C")]
		[Address(RVA = "0xFF698C", Offset = "0xFF698C", VA = "0xFF698C", Slot = "27")]
		public override void OS_FileDelete(string file)
		{
		}

		[Token(Token = "0x6000D8D")]
		[Address(RVA = "0xFF69DC", Offset = "0xFF69DC", VA = "0xFF69DC", Slot = "28")]
		public override void OS_FileMove(string src, string dst)
		{
		}

		[Token(Token = "0x6000D8E")]
		[Address(RVA = "0xFF6A2C", Offset = "0xFF6A2C", VA = "0xFF6A2C", Slot = "29")]
		public override int OS_Execute(string cmdline)
		{
			return default(int);
		}

		[Token(Token = "0x6000D8F")]
		[Address(RVA = "0xFF6A7C", Offset = "0xFF6A7C", VA = "0xFF6A7C", Slot = "18")]
		public override string GetPlatformNamePrefix()
		{
			return null;
		}

		[Token(Token = "0x6000D90")]
		[Address(RVA = "0xFF6ABC", Offset = "0xFF6ABC", VA = "0xFF6ABC", Slot = "19")]
		public override void DefaultPrint(string content)
		{
		}

		[Token(Token = "0x6000D91")]
		[Address(RVA = "0xFF6AC0", Offset = "0xFF6AC0", VA = "0xFF6AC0")]
		public LimitedPlatformAccessor()
		{
		}
	}
	[Token(Token = "0x20001D7")]
	public abstract class PlatformAccessorBase : IPlatformAccessor
	{
		[Token(Token = "0x6000D92")]
		public abstract string GetPlatformNamePrefix();

		[Token(Token = "0x6000D93")]
		[Address(RVA = "0xFF6AD0", Offset = "0xFF6AD0", VA = "0xFF6AD0", Slot = "7")]
		public string GetPlatformName()
		{
			return null;
		}

		[Token(Token = "0x6000D94")]
		[Address(RVA = "0xFF6E28", Offset = "0xFF6E28", VA = "0xFF6E28")]
		private string GetUnityRuntimeName()
		{
			return null;
		}

		[Token(Token = "0x6000D95")]
		[Address(RVA = "0xFF6DE8", Offset = "0xFF6DE8", VA = "0xFF6DE8")]
		private string GetUnityPlatformName()
		{
			return null;
		}

		[Token(Token = "0x6000D96")]
		public abstract void DefaultPrint(string content);

		[Token(Token = "0x6000D97")]
		[Address(RVA = "0xFF6E70", Offset = "0xFF6E70", VA = "0xFF6E70", Slot = "20")]
		[Obsolete("Replace with DefaultInput(string)")]
		public virtual string DefaultInput()
		{
			return null;
		}

		[Token(Token = "0x6000D98")]
		[Address(RVA = "0xFF6E78", Offset = "0xFF6E78", VA = "0xFF6E78", Slot = "21")]
		public virtual string DefaultInput(string prompt)
		{
			return null;
		}

		[Token(Token = "0x6000D99")]
		public abstract Stream IO_OpenFile(Script script, string filename, Encoding encoding, string mode);

		[Token(Token = "0x6000D9A")]
		public abstract Stream IO_GetStandardStream(StandardFileType type);

		[Token(Token = "0x6000D9B")]
		public abstract string IO_OS_GetTempFilename();

		[Token(Token = "0x6000D9C")]
		public abstract void OS_ExitFast(int exitCode);

		[Token(Token = "0x6000D9D")]
		public abstract bool OS_FileExists(string file);

		[Token(Token = "0x6000D9E")]
		public abstract void OS_FileDelete(string file);

		[Token(Token = "0x6000D9F")]
		public abstract void OS_FileMove(string src, string dst);

		[Token(Token = "0x6000DA0")]
		public abstract int OS_Execute(string cmdline);

		[Token(Token = "0x6000DA1")]
		public abstract CoreModules FilterSupportedCoreModules(CoreModules module);

		[Token(Token = "0x6000DA2")]
		public abstract string GetEnvironmentVariable(string envvarname);

		[Token(Token = "0x6000DA3")]
		[Address(RVA = "0xFF6E88", Offset = "0xFF6E88", VA = "0xFF6E88", Slot = "32")]
		public virtual bool IsRunningOnAOT()
		{
			return default(bool);
		}

		[Token(Token = "0x6000DA4")]
		[Address(RVA = "0xFF6AC8", Offset = "0xFF6AC8", VA = "0xFF6AC8")]
		protected PlatformAccessorBase()
		{
		}
	}
	[Token(Token = "0x20001D8")]
	public static class PlatformAutoDetector
	{
		[Token(Token = "0x4000AC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool? m_IsRunningOnAOT;

		[Token(Token = "0x4000ACA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		private static bool m_AutoDetectionsDone;

		[Token(Token = "0x1700018A")]
		public static bool IsRunningOnMono
		{
			[Token(Token = "0x6000DA5")]
			[Address(RVA = "0xFF6E90", Offset = "0xFF6E90", VA = "0xFF6E90")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000DA6")]
			[Address(RVA = "0xFF6ED8", Offset = "0xFF6ED8", VA = "0xFF6ED8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700018B")]
		public static bool IsRunningOnClr4
		{
			[Token(Token = "0x6000DA7")]
			[Address(RVA = "0xFF6F24", Offset = "0xFF6F24", VA = "0xFF6F24")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000DA8")]
			[Address(RVA = "0xFF6F6C", Offset = "0xFF6F6C", VA = "0xFF6F6C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700018C")]
		public static bool IsRunningOnUnity
		{
			[Token(Token = "0x6000DA9")]
			[Address(RVA = "0xFF6FB8", Offset = "0xFF6FB8", VA = "0xFF6FB8")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000DAA")]
			[Address(RVA = "0xFF7000", Offset = "0xFF7000", VA = "0xFF7000")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700018D")]
		public static bool IsPortableFramework
		{
			[Token(Token = "0x6000DAB")]
			[Address(RVA = "0xFF704C", Offset = "0xFF704C", VA = "0xFF704C")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000DAC")]
			[Address(RVA = "0xFF7094", Offset = "0xFF7094", VA = "0xFF7094")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700018E")]
		public static bool IsUnityNative
		{
			[Token(Token = "0x6000DAD")]
			[Address(RVA = "0xFF70E0", Offset = "0xFF70E0", VA = "0xFF70E0")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000DAE")]
			[Address(RVA = "0xFF7128", Offset = "0xFF7128", VA = "0xFF7128")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700018F")]
		public static bool IsUnityIL2CPP
		{
			[Token(Token = "0x6000DAF")]
			[Address(RVA = "0xFF7174", Offset = "0xFF7174", VA = "0xFF7174")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000DB0")]
			[Address(RVA = "0xFF71BC", Offset = "0xFF71BC", VA = "0xFF71BC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000190")]
		public static bool IsRunningOnAOT
		{
			[Token(Token = "0x6000DB1")]
			[Address(RVA = "0xFF6E68", Offset = "0xFF6E68", VA = "0xFF6E68")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000DB2")]
		[Address(RVA = "0xFF7208", Offset = "0xFF7208", VA = "0xFF7208")]
		private static void AutoDetectPlatformFlags()
		{
		}

		[Token(Token = "0x6000DB3")]
		[Address(RVA = "0xFF755C", Offset = "0xFF755C", VA = "0xFF755C")]
		internal static IPlatformAccessor GetDefaultPlatform()
		{
			return null;
		}

		[Token(Token = "0x6000DB4")]
		[Address(RVA = "0xFF7610", Offset = "0xFF7610", VA = "0xFF7610")]
		internal static IScriptLoader GetDefaultScriptLoader()
		{
			return null;
		}
	}
	[Token(Token = "0x20001DA")]
	public enum StandardFileType
	{
		[Token(Token = "0x4000AD5")]
		StdIn,
		[Token(Token = "0x4000AD6")]
		StdOut,
		[Token(Token = "0x4000AD7")]
		StdErr
	}
	[Token(Token = "0x20001DB")]
	public class StandardPlatformAccessor : PlatformAccessorBase
	{
		[Token(Token = "0x6000DB9")]
		[Address(RVA = "0xFF79B0", Offset = "0xFF79B0", VA = "0xFF79B0")]
		public static FileAccess ParseFileAccess(string mode)
		{
			return default(FileAccess);
		}

		[Token(Token = "0x6000DBA")]
		[Address(RVA = "0xFF7AD0", Offset = "0xFF7AD0", VA = "0xFF7AD0")]
		public static FileMode ParseFileMode(string mode)
		{
			return default(FileMode);
		}

		[Token(Token = "0x6000DBB")]
		[Address(RVA = "0xFF7C00", Offset = "0xFF7C00", VA = "0xFF7C00", Slot = "22")]
		public override Stream IO_OpenFile(Script script, string filename, Encoding encoding, string mode)
		{
			return null;
		}

		[Token(Token = "0x6000DBC")]
		[Address(RVA = "0xFF7C98", Offset = "0xFF7C98", VA = "0xFF7C98", Slot = "31")]
		public override string GetEnvironmentVariable(string envvarname)
		{
			return null;
		}

		[Token(Token = "0x6000DBD")]
		[Address(RVA = "0xFF7CA4", Offset = "0xFF7CA4", VA = "0xFF7CA4", Slot = "23")]
		public override Stream IO_GetStandardStream(StandardFileType type)
		{
			return null;
		}

		[Token(Token = "0x6000DBE")]
		[Address(RVA = "0xFF7D98", Offset = "0xFF7D98", VA = "0xFF7D98", Slot = "19")]
		public override void DefaultPrint(string content)
		{
		}

		[Token(Token = "0x6000DBF")]
		[Address(RVA = "0xFF7DF0", Offset = "0xFF7DF0", VA = "0xFF7DF0", Slot = "24")]
		public override string IO_OS_GetTempFilename()
		{
			return null;
		}

		[Token(Token = "0x6000DC0")]
		[Address(RVA = "0xFF7E40", Offset = "0xFF7E40", VA = "0xFF7E40", Slot = "25")]
		public override void OS_ExitFast(int exitCode)
		{
		}

		[Token(Token = "0x6000DC1")]
		[Address(RVA = "0xFF7E4C", Offset = "0xFF7E4C", VA = "0xFF7E4C", Slot = "26")]
		public override bool OS_FileExists(string file)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DC2")]
		[Address(RVA = "0xFF7E58", Offset = "0xFF7E58", VA = "0xFF7E58", Slot = "27")]
		public override void OS_FileDelete(string file)
		{
		}

		[Token(Token = "0x6000DC3")]
		[Address(RVA = "0xFF7E64", Offset = "0xFF7E64", VA = "0xFF7E64", Slot = "28")]
		public override void OS_FileMove(string src, string dst)
		{
		}

		[Token(Token = "0x6000DC4")]
		[Address(RVA = "0xFF7E74", Offset = "0xFF7E74", VA = "0xFF7E74", Slot = "29")]
		public override int OS_Execute(string cmdline)
		{
			return default(int);
		}

		[Token(Token = "0x6000DC5")]
		[Address(RVA = "0xFF7F48", Offset = "0xFF7F48", VA = "0xFF7F48", Slot = "30")]
		public override CoreModules FilterSupportedCoreModules(CoreModules module)
		{
			return default(CoreModules);
		}

		[Token(Token = "0x6000DC6")]
		[Address(RVA = "0xFF7F50", Offset = "0xFF7F50", VA = "0xFF7F50", Slot = "18")]
		public override string GetPlatformNamePrefix()
		{
			return null;
		}

		[Token(Token = "0x6000DC7")]
		[Address(RVA = "0xFF7608", Offset = "0xFF7608", VA = "0xFF7608")]
		public StandardPlatformAccessor()
		{
		}
	}
}
namespace MoonSharp.Interpreter.Loaders
{
	[Token(Token = "0x20001DC")]
	public class EmbeddedResourcesScriptLoader : ScriptLoaderBase
	{
		[Token(Token = "0x4000AD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Assembly m_ResourceAssembly;

		[Token(Token = "0x4000AD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private HashSet<string> m_ResourceNames;

		[Token(Token = "0x4000ADA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private string m_Namespace;

		[Token(Token = "0x6000DC8")]
		[Address(RVA = "0xFF7F90", Offset = "0xFF7F90", VA = "0xFF7F90")]
		public EmbeddedResourcesScriptLoader([Optional] Assembly resourceAssembly)
		{
		}

		[Token(Token = "0x6000DC9")]
		[Address(RVA = "0xFF80D4", Offset = "0xFF80D4", VA = "0xFF80D4")]
		private string FileNameToResource(string file)
		{
			return null;
		}

		[Token(Token = "0x6000DCA")]
		[Address(RVA = "0xFF815C", Offset = "0xFF815C", VA = "0xFF815C", Slot = "7")]
		public override bool ScriptFileExists(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DCB")]
		[Address(RVA = "0xFF81C4", Offset = "0xFF81C4", VA = "0xFF81C4", Slot = "8")]
		public override object LoadFile(string file, Table globalContext)
		{
			return null;
		}
	}
	[Token(Token = "0x20001DD")]
	public class FileSystemScriptLoader : ScriptLoaderBase
	{
		[Token(Token = "0x6000DCC")]
		[Address(RVA = "0xFF81F8", Offset = "0xFF81F8", VA = "0xFF81F8", Slot = "7")]
		public override bool ScriptFileExists(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DCD")]
		[Address(RVA = "0xFF8204", Offset = "0xFF8204", VA = "0xFF8204", Slot = "8")]
		public override object LoadFile(string file, Table globalContext)
		{
			return null;
		}

		[Token(Token = "0x6000DCE")]
		[Address(RVA = "0xFF6448", Offset = "0xFF6448", VA = "0xFF6448")]
		public FileSystemScriptLoader()
		{
		}
	}
	[Token(Token = "0x20001DE")]
	internal class InvalidScriptLoader : IScriptLoader
	{
		[Token(Token = "0x4000ADB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private string m_Error;

		[Token(Token = "0x6000DCF")]
		[Address(RVA = "0xFF8274", Offset = "0xFF8274", VA = "0xFF8274")]
		internal InvalidScriptLoader(string frameworkname)
		{
		}

		[Token(Token = "0x6000DD0")]
		[Address(RVA = "0xFF82E8", Offset = "0xFF82E8", VA = "0xFF82E8", Slot = "4")]
		public object LoadFile(string file, Table globalContext)
		{
			return null;
		}

		[Token(Token = "0x6000DD1")]
		[Address(RVA = "0xFF8334", Offset = "0xFF8334", VA = "0xFF8334", Slot = "5")]
		public string ResolveFileName(string filename, Table globalContext)
		{
			return null;
		}

		[Token(Token = "0x6000DD2")]
		[Address(RVA = "0xFF833C", Offset = "0xFF833C", VA = "0xFF833C", Slot = "6")]
		public string ResolveModuleName(string modname, Table globalContext)
		{
			return null;
		}
	}
	[Token(Token = "0x20001DF")]
	public interface IScriptLoader
	{
		[Token(Token = "0x6000DD3")]
		object LoadFile(string file, Table globalContext);

		[Token(Token = "0x6000DD4")]
		[Obsolete("This serves almost no purpose. Kept here just to preserve backward compatibility.")]
		string ResolveFileName(string filename, Table globalContext);

		[Token(Token = "0x6000DD5")]
		string ResolveModuleName(string modname, Table globalContext);
	}
	[Token(Token = "0x20001E0")]
	public abstract class ScriptLoaderBase : IScriptLoader
	{
		[Token(Token = "0x17000191")]
		public string[] ModulePaths
		{
			[Token(Token = "0x6000DDA")]
			[Address(RVA = "0xFF8470", Offset = "0xFF8470", VA = "0xFF8470")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000DDB")]
			[Address(RVA = "0xFF8478", Offset = "0xFF8478", VA = "0xFF8478")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000192")]
		public bool IgnoreLuaPathGlobal
		{
			[Token(Token = "0x6000DDF")]
			[Address(RVA = "0xFF86E0", Offset = "0xFF86E0", VA = "0xFF86E0")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000DE0")]
			[Address(RVA = "0xFF86E8", Offset = "0xFF86E8", VA = "0xFF86E8")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6000DD6")]
		public abstract bool ScriptFileExists(string name);

		[Token(Token = "0x6000DD7")]
		public abstract object LoadFile(string file, Table globalContext);

		[Token(Token = "0x6000DD8")]
		[Address(RVA = "0xFF8388", Offset = "0xFF8388", VA = "0xFF8388", Slot = "9")]
		protected virtual string ResolveModuleName(string modname, string[] paths)
		{
			return null;
		}

		[Token(Token = "0x6000DD9")]
		[Address(RVA = "0xFF6740", Offset = "0xFF6740", VA = "0xFF6740", Slot = "10")]
		public virtual string ResolveModuleName(string modname, Table globalContext)
		{
			return null;
		}

		[Token(Token = "0x6000DDC")]
		[Address(RVA = "0xFF6450", Offset = "0xFF6450", VA = "0xFF6450")]
		public static string[] UnpackStringPaths(string str)
		{
			return null;
		}

		[Token(Token = "0x6000DDD")]
		[Address(RVA = "0xFF8480", Offset = "0xFF8480", VA = "0xFF8480")]
		public static string[] GetDefaultEnvironmentPaths()
		{
			return null;
		}

		[Token(Token = "0x6000DDE")]
		[Address(RVA = "0xFF86D8", Offset = "0xFF86D8", VA = "0xFF86D8", Slot = "11")]
		public virtual string ResolveFileName(string filename, Table globalContext)
		{
			return null;
		}

		[Token(Token = "0x6000DE1")]
		[Address(RVA = "0xFF80CC", Offset = "0xFF80CC", VA = "0xFF80CC")]
		protected ScriptLoaderBase()
		{
		}
	}
	[Token(Token = "0x20001E2")]
	public class UnityAssetsScriptLoader : ScriptLoaderBase
	{
		[Token(Token = "0x4000AE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Dictionary<string, string> m_Resources;

		[Token(Token = "0x4000AE2")]
		public const string DEFAULT_PATH = "MoonSharp/Scripts";

		[Token(Token = "0x6000DE6")]
		[Address(RVA = "0xFF76D0", Offset = "0xFF76D0", VA = "0xFF76D0")]
		public UnityAssetsScriptLoader([Optional] string assetsPath)
		{
		}

		[Token(Token = "0x6000DE7")]
		[Address(RVA = "0xFF8F04", Offset = "0xFF8F04", VA = "0xFF8F04")]
		public UnityAssetsScriptLoader(Dictionary<string, string> scriptToCodeMap)
		{
		}

		[Token(Token = "0x6000DE8")]
		[Address(RVA = "0xFF87A4", Offset = "0xFF87A4", VA = "0xFF87A4")]
		private void LoadResourcesWithReflection(string assetsPath)
		{
		}

		[Token(Token = "0x6000DE9")]
		[Address(RVA = "0xFF8FAC", Offset = "0xFF8FAC", VA = "0xFF8FAC")]
		private string GetFileName(string filename)
		{
			return null;
		}

		[Token(Token = "0x6000DEA")]
		[Address(RVA = "0xFF9064", Offset = "0xFF9064", VA = "0xFF9064", Slot = "8")]
		public override object LoadFile(string file, Table globalContext)
		{
			return null;
		}

		[Token(Token = "0x6000DEB")]
		[Address(RVA = "0xFF916C", Offset = "0xFF916C", VA = "0xFF916C", Slot = "7")]
		public override bool ScriptFileExists(string file)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DEC")]
		[Address(RVA = "0xFF91D0", Offset = "0xFF91D0", VA = "0xFF91D0")]
		public string[] GetLoadedScripts()
		{
			return null;
		}
	}
	[Token(Token = "0x20001E3")]
	internal static class NamespaceDoc
	{
	}
}
namespace MoonSharp.Interpreter.IO
{
	[Token(Token = "0x20001E4")]
	public class BinDumpBinaryReader : BinaryReader
	{
		[Token(Token = "0x4000AE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<string> m_Strings;

		[Token(Token = "0x6000DED")]
		[Address(RVA = "0xFF923C", Offset = "0xFF923C", VA = "0xFF923C")]
		public BinDumpBinaryReader(Stream s)
		{
		}

		[Token(Token = "0x6000DEE")]
		[Address(RVA = "0xFF92D4", Offset = "0xFF92D4", VA = "0xFF92D4")]
		public BinDumpBinaryReader(Stream s, Encoding e)
		{
		}

		[Token(Token = "0x6000DEF")]
		[Address(RVA = "0xFF9374", Offset = "0xFF9374", VA = "0xFF9374", Slot = "15")]
		public override int ReadInt32()
		{
			return default(int);
		}

		[Token(Token = "0x6000DF0")]
		[Address(RVA = "0xFF93C8", Offset = "0xFF93C8", VA = "0xFF93C8", Slot = "16")]
		public override uint ReadUInt32()
		{
			return default(uint);
		}

		[Token(Token = "0x6000DF1")]
		[Address(RVA = "0xFF9418", Offset = "0xFF9418", VA = "0xFF9418", Slot = "22")]
		public override string ReadString()
		{
			return null;
		}
	}
	[Token(Token = "0x20001E5")]
	public class BinDumpBinaryWriter : BinaryWriter
	{
		[Token(Token = "0x4000AE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Dictionary<string, int> m_StringMap;

		[Token(Token = "0x6000DF2")]
		[Address(RVA = "0xFF9588", Offset = "0xFF9588", VA = "0xFF9588")]
		public BinDumpBinaryWriter(Stream s)
		{
		}

		[Token(Token = "0x6000DF3")]
		[Address(RVA = "0xFF9644", Offset = "0xFF9644", VA = "0xFF9644")]
		public BinDumpBinaryWriter(Stream s, Encoding e)
		{
		}

		[Token(Token = "0x6000DF4")]
		[Address(RVA = "0xFF9708", Offset = "0xFF9708", VA = "0xFF9708", Slot = "19")]
		public override void Write(uint value)
		{
		}

		[Token(Token = "0x6000DF5")]
		[Address(RVA = "0xFF979C", Offset = "0xFF979C", VA = "0xFF979C", Slot = "18")]
		public override void Write(int value)
		{
		}

		[Token(Token = "0x6000DF6")]
		[Address(RVA = "0xFF9838", Offset = "0xFF9838", VA = "0xFF9838", Slot = "23")]
		public override void Write(string value)
		{
		}
	}
	[Token(Token = "0x20001E6")]
	public class UndisposableStream : Stream
	{
		[Token(Token = "0x4000AE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Stream m_Stream;

		[Token(Token = "0x17000193")]
		public override bool CanRead
		{
			[Token(Token = "0x6000DFA")]
			[Address(RVA = "0xFF99E4", Offset = "0xFF99E4", VA = "0xFF99E4", Slot = "7")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000194")]
		public override bool CanSeek
		{
			[Token(Token = "0x6000DFB")]
			[Address(RVA = "0xFF9A04", Offset = "0xFF9A04", VA = "0xFF9A04", Slot = "8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000195")]
		public override bool CanWrite
		{
			[Token(Token = "0x6000DFC")]
			[Address(RVA = "0xFF9A24", Offset = "0xFF9A24", VA = "0xFF9A24", Slot = "10")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000196")]
		public override long Length
		{
			[Token(Token = "0x6000DFE")]
			[Address(RVA = "0xFF9A68", Offset = "0xFF9A68", VA = "0xFF9A68", Slot = "11")]
			get
			{
				return default(long);
			}
		}

		[Token(Token = "0x17000197")]
		public override long Position
		{
			[Token(Token = "0x6000DFF")]
			[Address(RVA = "0xFF9A88", Offset = "0xFF9A88", VA = "0xFF9A88", Slot = "12")]
			get
			{
				return default(long);
			}
			[Token(Token = "0x6000E00")]
			[Address(RVA = "0xFF9AA8", Offset = "0xFF9AA8", VA = "0xFF9AA8", Slot = "13")]
			set
			{
			}
		}

		[Token(Token = "0x17000198")]
		public override bool CanTimeout
		{
			[Token(Token = "0x6000E09")]
			[Address(RVA = "0xFF9BEC", Offset = "0xFF9BEC", VA = "0xFF9BEC", Slot = "9")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000199")]
		public override int ReadTimeout
		{
			[Token(Token = "0x6000E0D")]
			[Address(RVA = "0xFF9C70", Offset = "0xFF9C70", VA = "0xFF9C70", Slot = "14")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000E0E")]
			[Address(RVA = "0xFF9C94", Offset = "0xFF9C94", VA = "0xFF9C94", Slot = "15")]
			set
			{
			}
		}

		[Token(Token = "0x1700019A")]
		public override int WriteTimeout
		{
			[Token(Token = "0x6000E11")]
			[Address(RVA = "0xFF9CFC", Offset = "0xFF9CFC", VA = "0xFF9CFC", Slot = "16")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000E12")]
			[Address(RVA = "0xFF9D20", Offset = "0xFF9D20", VA = "0xFF9D20", Slot = "17")]
			set
			{
			}
		}

		[Token(Token = "0x6000DF7")]
		[Address(RVA = "0xFF9968", Offset = "0xFF9968", VA = "0xFF9968")]
		public UndisposableStream(Stream stream)
		{
		}

		[Token(Token = "0x6000DF8")]
		[Address(RVA = "0xFF99DC", Offset = "0xFF99DC", VA = "0xFF99DC", Slot = "20")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x6000DF9")]
		[Address(RVA = "0xFF99E0", Offset = "0xFF99E0", VA = "0xFF99E0", Slot = "19")]
		public override void Close()
		{
		}

		[Token(Token = "0x6000DFD")]
		[Address(RVA = "0xFF9A44", Offset = "0xFF9A44", VA = "0xFF9A44", Slot = "21")]
		public override void Flush()
		{
		}

		[Token(Token = "0x6000E01")]
		[Address(RVA = "0xFF9ACC", Offset = "0xFF9ACC", VA = "0xFF9ACC", Slot = "32")]
		public override int Read(byte[] buffer, int offset, int count)
		{
			return default(int);
		}

		[Token(Token = "0x6000E02")]
		[Address(RVA = "0xFF9AF0", Offset = "0xFF9AF0", VA = "0xFF9AF0", Slot = "30")]
		public override long Seek(long offset, SeekOrigin origin)
		{
			return default(long);
		}

		[Token(Token = "0x6000E03")]
		[Address(RVA = "0xFF9B14", Offset = "0xFF9B14", VA = "0xFF9B14", Slot = "31")]
		public override void SetLength(long value)
		{
		}

		[Token(Token = "0x6000E04")]
		[Address(RVA = "0xFF9B38", Offset = "0xFF9B38", VA = "0xFF9B38", Slot = "35")]
		public override void Write(byte[] buffer, int offset, int count)
		{
		}

		[Token(Token = "0x6000E05")]
		[Address(RVA = "0xFF9B5C", Offset = "0xFF9B5C", VA = "0xFF9B5C", Slot = "22")]
		public override IAsyncResult BeginRead(byte[] buffer, int offset, int count, AsyncCallback callback, object state)
		{
			return null;
		}

		[Token(Token = "0x6000E06")]
		[Address(RVA = "0xFF9B80", Offset = "0xFF9B80", VA = "0xFF9B80", Slot = "26")]
		public override IAsyncResult BeginWrite(byte[] buffer, int offset, int count, AsyncCallback callback, object state)
		{
			return null;
		}

		[Token(Token = "0x6000E07")]
		[Address(RVA = "0xFF9BA4", Offset = "0xFF9BA4", VA = "0xFF9BA4", Slot = "27")]
		public override void EndWrite(IAsyncResult asyncResult)
		{
		}

		[Token(Token = "0x6000E08")]
		[Address(RVA = "0xFF9BC8", Offset = "0xFF9BC8", VA = "0xFF9BC8", Slot = "23")]
		public override int EndRead(IAsyncResult asyncResult)
		{
			return default(int);
		}

		[Token(Token = "0x6000E0A")]
		[Address(RVA = "0xFF9C0C", Offset = "0xFF9C0C", VA = "0xFF9C0C", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E0B")]
		[Address(RVA = "0xFF9C2C", Offset = "0xFF9C2C", VA = "0xFF9C2C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000E0C")]
		[Address(RVA = "0xFF9C4C", Offset = "0xFF9C4C", VA = "0xFF9C4C", Slot = "34")]
		public override int ReadByte()
		{
			return default(int);
		}

		[Token(Token = "0x6000E0F")]
		[Address(RVA = "0xFF9CB8", Offset = "0xFF9CB8", VA = "0xFF9CB8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000E10")]
		[Address(RVA = "0xFF9CD8", Offset = "0xFF9CD8", VA = "0xFF9CD8", Slot = "37")]
		public override void WriteByte(byte value)
		{
		}
	}
}
namespace MoonSharp.Interpreter.Interop
{
	[Token(Token = "0x20001E7")]
	[AttributeUsage(AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Event, Inherited = true, AllowMultiple = false)]
	public sealed class MoonSharpVisibleAttribute : Attribute
	{
		[Token(Token = "0x1700019B")]
		public bool Visible
		{
			[Token(Token = "0x6000E13")]
			[Address(RVA = "0xFF9D44", Offset = "0xFF9D44", VA = "0xFF9D44")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000E14")]
			[Address(RVA = "0xFF9D4C", Offset = "0xFF9D4C", VA = "0xFF9D4C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000E15")]
		[Address(RVA = "0xFF9D58", Offset = "0xFF9D58", VA = "0xFF9D58")]
		public MoonSharpVisibleAttribute(bool visible)
		{
		}
	}
	[Token(Token = "0x20001E8")]
	public class CustomConvertersCollection
	{
		[Token(Token = "0x4000AE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Dictionary<Type, Func<DynValue, object>>[] m_Script2Clr;

		[Token(Token = "0x4000AE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Dictionary<Type, Func<Script, object, DynValue>> m_Clr2Script;

		[Token(Token = "0x6000E16")]
		[Address(RVA = "0xFF9D84", Offset = "0xFF9D84", VA = "0xFF9D84")]
		internal CustomConvertersCollection()
		{
		}

		[Token(Token = "0x6000E17")]
		[Address(RVA = "0xFF9F04", Offset = "0xFF9F04", VA = "0xFF9F04")]
		public void SetScriptToClrCustomConversion(DataType scriptDataType, Type clrDataType, [Optional] Func<DynValue, object> converter)
		{
		}

		[Token(Token = "0x6000E18")]
		[Address(RVA = "0xFFA04C", Offset = "0xFFA04C", VA = "0xFFA04C")]
		public Func<DynValue, object> GetScriptToClrCustomConversion(DataType scriptDataType, Type clrDataType)
		{
			return null;
		}

		[Token(Token = "0x6000E19")]
		[Address(RVA = "0xFFA0E0", Offset = "0xFFA0E0", VA = "0xFFA0E0")]
		public void SetClrToScriptCustomConversion(Type clrDataType, [Optional] Func<Script, object, DynValue> converter)
		{
		}

		[Token(Token = "0x6000E1A")]
		public void SetClrToScriptCustomConversion<T>([Optional] Func<Script, T, DynValue> converter)
		{
		}

		[Token(Token = "0x6000E1B")]
		[Address(RVA = "0xFFA1B4", Offset = "0xFFA1B4", VA = "0xFFA1B4")]
		public Func<Script, object, DynValue> GetClrToScriptCustomConversion(Type clrDataType)
		{
			return null;
		}

		[Token(Token = "0x6000E1C")]
		[Address(RVA = "0xFFA20C", Offset = "0xFFA20C", VA = "0xFFA20C")]
		[Obsolete("This method is deprecated. Use the overloads accepting functions with a Script argument.")]
		public void SetClrToScriptCustomConversion(Type clrDataType, [Optional] Func<object, DynValue> converter)
		{
		}

		[Token(Token = "0x6000E1D")]
		[Obsolete("This method is deprecated. Use the overloads accepting functions with a Script argument.")]
		public void SetClrToScriptCustomConversion<T>([Optional] Func<T, DynValue> converter)
		{
		}

		[Token(Token = "0x6000E1E")]
		[Address(RVA = "0xFFA2E4", Offset = "0xFFA2E4", VA = "0xFFA2E4")]
		public void Clear()
		{
		}
	}
	[Token(Token = "0x20001EC")]
	public static class DescriptorHelpers
	{
		[Token(Token = "0x20001EE")]
		[CompilerGenerated]
		private sealed class <GetAllImplementedTypes>d__10 : IEnumerable<Type>, IEnumerable, IEnumerator<Type>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000AEE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000AEF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private Type <>2__current;

			[Token(Token = "0x4000AF0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4000AF1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Type t;

			[Token(Token = "0x4000AF2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Type <>3__t;

			[Token(Token = "0x4000AF3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private Type <ot>5__2;

			[Token(Token = "0x4000AF4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private Type[] <>7__wrap2;

			[Token(Token = "0x4000AF5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private int <>7__wrap3;

			[Token(Token = "0x1700019C")]
			private Type System.Collections.Generic.IEnumerator<System.Type>.Current
			{
				[Token(Token = "0x6000E3A")]
				[Address(RVA = "0xFFB904", Offset = "0xFFB904", VA = "0xFFB904", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700019D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000E3C")]
				[Address(RVA = "0xFFB94C", Offset = "0xFFB94C", VA = "0xFFB94C", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000E37")]
			[Address(RVA = "0xFFB0F4", Offset = "0xFFB0F4", VA = "0xFFB0F4")]
			[DebuggerHidden]
			public <GetAllImplementedTypes>d__10(int <>1__state)
			{
			}

			[Token(Token = "0x6000E38")]
			[Address(RVA = "0xFFB6AC", Offset = "0xFFB6AC", VA = "0xFFB6AC", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000E39")]
			[Address(RVA = "0xFFB6B0", Offset = "0xFFB6B0", VA = "0xFFB6B0", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000E3B")]
			[Address(RVA = "0xFFB90C", Offset = "0xFFB90C", VA = "0xFFB90C", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6000E3D")]
			[Address(RVA = "0xFFB954", Offset = "0xFFB954", VA = "0xFFB954", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<Type> System.Collections.Generic.IEnumerable<System.Type>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6000E3E")]
			[Address(RVA = "0xFFBA00", Offset = "0xFFBA00", VA = "0xFFBA00", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x6000E25")]
		[Address(RVA = "0xFFA3B8", Offset = "0xFFA3B8", VA = "0xFFA3B8")]
		public static bool? GetVisibilityFromAttributes(this MemberInfo mi)
		{
			return null;
		}

		[Token(Token = "0x6000E26")]
		[Address(RVA = "0xFFA584", Offset = "0xFFA584", VA = "0xFFA584")]
		public static bool IsDelegateType(this Type t)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E27")]
		[Address(RVA = "0xFFA680", Offset = "0xFFA680", VA = "0xFFA680")]
		public static string GetClrVisibility(this Type type)
		{
			return null;
		}

		[Token(Token = "0x6000E28")]
		[Address(RVA = "0xFFA7D4", Offset = "0xFFA7D4", VA = "0xFFA7D4")]
		public static string GetClrVisibility(this FieldInfo info)
		{
			return null;
		}

		[Token(Token = "0x6000E29")]
		[Address(RVA = "0xFFA8F8", Offset = "0xFFA8F8", VA = "0xFFA8F8")]
		public static string GetClrVisibility(this PropertyInfo info)
		{
			return null;
		}

		[Token(Token = "0x6000E2A")]
		[Address(RVA = "0xFFAAEC", Offset = "0xFFAAEC", VA = "0xFFAAEC")]
		public static string GetClrVisibility(this MethodBase info)
		{
			return null;
		}

		[Token(Token = "0x6000E2B")]
		[Address(RVA = "0xFFAC10", Offset = "0xFFAC10", VA = "0xFFAC10")]
		public static bool IsPropertyInfoPublic(this PropertyInfo pi)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E2C")]
		[Address(RVA = "0xFFAD7C", Offset = "0xFFAD7C", VA = "0xFFAD7C")]
		public static List<string> GetMetaNamesFromAttributes(this MethodInfo mi)
		{
			return null;
		}

		[Token(Token = "0x6000E2D")]
		[Address(RVA = "0xFF780C", Offset = "0xFF780C", VA = "0xFF780C")]
		public static Type[] SafeGetTypes(this Assembly asm)
		{
			return null;
		}

		[Token(Token = "0x6000E2E")]
		[Address(RVA = "0xFFAF28", Offset = "0xFFAF28", VA = "0xFFAF28")]
		public static string GetConversionMethodName(this Type type)
		{
			return null;
		}

		[Token(Token = "0x6000E2F")]
		[Address(RVA = "0xFFB070", Offset = "0xFFB070", VA = "0xFFB070")]
		[IteratorStateMachine(typeof(<GetAllImplementedTypes>d__10))]
		public static IEnumerable<Type> GetAllImplementedTypes(this Type t)
		{
			return null;
		}

		[Token(Token = "0x6000E30")]
		[Address(RVA = "0xFFB128", Offset = "0xFFB128", VA = "0xFFB128")]
		public static bool IsValidSimpleIdentifier(string str)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E31")]
		[Address(RVA = "0xFFB25C", Offset = "0xFFB25C", VA = "0xFFB25C")]
		public static string ToValidSimpleIdentifier(string str)
		{
			return null;
		}

		[Token(Token = "0x6000E32")]
		[Address(RVA = "0xFFB420", Offset = "0xFFB420", VA = "0xFFB420")]
		public static string Camelify(string name)
		{
			return null;
		}

		[Token(Token = "0x6000E33")]
		[Address(RVA = "0xFFB550", Offset = "0xFFB550", VA = "0xFFB550")]
		public static string UpperFirstLetter(string name)
		{
			return null;
		}
	}
	[Token(Token = "0x20001EF")]
	public interface IGeneratorUserDataDescriptor : IUserDataDescriptor
	{
		[Token(Token = "0x6000E3F")]
		IUserDataDescriptor Generate(Type type);
	}
	[Token(Token = "0x20001F0")]
	public static class InteropRegistrationPolicy
	{
		[Token(Token = "0x1700019E")]
		public static IRegistrationPolicy Default
		{
			[Token(Token = "0x6000E40")]
			[Address(RVA = "0xFFBA04", Offset = "0xFFBA04", VA = "0xFFBA04")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700019F")]
		[Obsolete("Please use InteropRegistrationPolicy.Default instead.")]
		public static IRegistrationPolicy Explicit
		{
			[Token(Token = "0x6000E41")]
			[Address(RVA = "0xFFBA60", Offset = "0xFFBA60", VA = "0xFFBA60")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001A0")]
		public static IRegistrationPolicy Automatic
		{
			[Token(Token = "0x6000E42")]
			[Address(RVA = "0xFFBABC", Offset = "0xFFBABC", VA = "0xFFBABC")]
			get
			{
				return null;
			}
		}
	}
	[Token(Token = "0x20001F1")]
	public interface IUserDataDescriptor
	{
		[Token(Token = "0x170001A1")]
		string Name
		{
			[Token(Token = "0x6000E43")]
			get;
		}

		[Token(Token = "0x170001A2")]
		Type Type
		{
			[Token(Token = "0x6000E44")]
			get;
		}

		[Token(Token = "0x6000E45")]
		DynValue Index(Script script, object obj, DynValue index, bool isDirectIndexing);

		[Token(Token = "0x6000E46")]
		bool SetIndex(Script script, object obj, DynValue index, DynValue value, bool isDirectIndexing);

		[Token(Token = "0x6000E47")]
		string AsString(object obj);

		[Token(Token = "0x6000E48")]
		DynValue MetaIndex(Script script, object obj, string metaname);

		[Token(Token = "0x6000E49")]
		bool IsTypeCompatible(Type type, object obj);
	}
	[Token(Token = "0x20001F2")]
	public interface IUserDataMemberDescriptor
	{
		[Token(Token = "0x170001A3")]
		string Name
		{
			[Token(Token = "0x6000E4A")]
			get;
		}

		[Token(Token = "0x170001A4")]
		Type Type
		{
			[Token(Token = "0x6000E4B")]
			get;
		}

		[Token(Token = "0x170001A5")]
		UserDataMemberType MemberType
		{
			[Token(Token = "0x6000E4E")]
			get;
		}

		[Token(Token = "0x170001A6")]
		bool IsStatic
		{
			[Token(Token = "0x6000E50")]
			get;
		}

		[Token(Token = "0x6000E4C")]
		DynValue GetValue(Script script, object obj);

		[Token(Token = "0x6000E4D")]
		bool SetValue(Script script, object obj, DynValue value);

		[Token(Token = "0x6000E4F")]
		void Optimize();
	}
	[Token(Token = "0x20001F3")]
	public interface IUserDataType
	{
		[Token(Token = "0x6000E51")]
		DynValue Index(Script script, DynValue index, bool isDirectIndexing);

		[Token(Token = "0x6000E52")]
		bool SetIndex(Script script, DynValue index, DynValue value, bool isDirectIndexing);

		[Token(Token = "0x6000E53")]
		DynValue MetaIndex(Script script, string metaname);
	}
	[Token(Token = "0x20001F4")]
	public class AnonWrapper
	{
		[Token(Token = "0x6000E54")]
		[Address(RVA = "0xFFBB18", Offset = "0xFFBB18", VA = "0xFFBB18")]
		public AnonWrapper()
		{
		}
	}
	[Token(Token = "0x20001F5")]
	public class AnonWrapper<T> : AnonWrapper
	{
		[Token(Token = "0x170001A7")]
		public T Value
		{
			[Token(Token = "0x6000E57")]
			[CompilerGenerated]
			get
			{
				return (T)null;
			}
			[Token(Token = "0x6000E58")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6000E55")]
		public AnonWrapper()
		{
		}

		[Token(Token = "0x6000E56")]
		public AnonWrapper(T o)
		{
		}
	}
	[Token(Token = "0x20001F6")]
	internal class EnumerableWrapper : IUserDataType
	{
		[Token(Token = "0x4000AF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IEnumerator m_Enumerator;

		[Token(Token = "0x4000AF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Script m_Script;

		[Token(Token = "0x4000AF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private DynValue m_Prev;

		[Token(Token = "0x4000AFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool m_HasTurnOnce;

		[Token(Token = "0x6000E59")]
		[Address(RVA = "0xFFBB20", Offset = "0xFFBB20", VA = "0xFFBB20")]
		private EnumerableWrapper(Script script, IEnumerator enumerator)
		{
		}

		[Token(Token = "0x6000E5A")]
		[Address(RVA = "0xFFBBF0", Offset = "0xFFBBF0", VA = "0xFFBBF0")]
		public void Reset()
		{
		}

		[Token(Token = "0x6000E5B")]
		[Address(RVA = "0xFFBCA8", Offset = "0xFFBCA8", VA = "0xFFBCA8")]
		private DynValue GetNext(DynValue prev)
		{
			return null;
		}

		[Token(Token = "0x6000E5C")]
		[Address(RVA = "0xFFBE6C", Offset = "0xFFBE6C", VA = "0xFFBE6C")]
		private DynValue LuaIteratorCallback(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x6000E5D")]
		[Address(RVA = "0xFFBE98", Offset = "0xFFBE98", VA = "0xFFBE98")]
		internal static DynValue ConvertIterator(Script script, IEnumerator enumerator)
		{
			return null;
		}

		[Token(Token = "0x6000E5E")]
		[Address(RVA = "0xFFC0AC", Offset = "0xFFC0AC", VA = "0xFFC0AC")]
		internal static DynValue ConvertTable(Table table)
		{
			return null;
		}

		[Token(Token = "0x6000E5F")]
		[Address(RVA = "0xFFC16C", Offset = "0xFFC16C", VA = "0xFFC16C", Slot = "4")]
		public DynValue Index(Script script, DynValue index, bool isDirectIndexing)
		{
			return null;
		}

		[Token(Token = "0x6000E60")]
		[Address(RVA = "0xFFC440", Offset = "0xFFC440", VA = "0xFFC440", Slot = "5")]
		public bool SetIndex(Script script, DynValue index, DynValue value, bool isDirectIndexing)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E61")]
		[Address(RVA = "0xFFC448", Offset = "0xFFC448", VA = "0xFFC448", Slot = "6")]
		public DynValue MetaIndex(Script script, string metaname)
		{
			return null;
		}
	}
	[Token(Token = "0x20001F7")]
	public class PropertyTableAssigner<T> : IPropertyTableAssigner
	{
		[Token(Token = "0x4000AFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private PropertyTableAssigner m_InternalAssigner;

		[Token(Token = "0x6000E64")]
		public PropertyTableAssigner(params string[] expectedMissingProperties)
		{
		}

		[Token(Token = "0x6000E65")]
		public void AddExpectedMissingProperty(string name)
		{
		}

		[Token(Token = "0x6000E66")]
		public void AssignObject(T obj, Table data)
		{
		}

		[Token(Token = "0x6000E67")]
		public PropertyTableAssigner GetTypeUnsafeAssigner()
		{
			return null;
		}

		[Token(Token = "0x6000E68")]
		public void SetSubassignerForType(Type propertyType, IPropertyTableAssigner assigner)
		{
		}

		[Token(Token = "0x6000E69")]
		public void SetSubassigner<SubassignerType>(PropertyTableAssigner<SubassignerType> assigner)
		{
		}

		[Token(Token = "0x6000E6A")]
		private void MoonSharp.Interpreter.Interop.IPropertyTableAssigner.AssignObjectUnchecked(object o, Table data)
		{
		}
	}
	[Token(Token = "0x20001F8")]
	public class PropertyTableAssigner : IPropertyTableAssigner
	{
		[Token(Token = "0x4000AFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Type m_Type;

		[Token(Token = "0x4000AFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Dictionary<string, PropertyInfo> m_PropertyMap;

		[Token(Token = "0x4000AFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Dictionary<Type, IPropertyTableAssigner> m_SubAssigners;

		[Token(Token = "0x6000E6B")]
		[Address(RVA = "0xFFC6A4", Offset = "0xFFC6A4", VA = "0xFFC6A4")]
		public PropertyTableAssigner(Type type, params string[] expectedMissingProperties)
		{
		}

		[Token(Token = "0x6000E6C")]
		[Address(RVA = "0xFFCD94", Offset = "0xFFCD94", VA = "0xFFCD94")]
		public void AddExpectedMissingProperty(string name)
		{
		}

		[Token(Token = "0x6000E6D")]
		[Address(RVA = "0xFFCDF0", Offset = "0xFFCDF0", VA = "0xFFCDF0")]
		private bool TryAssignProperty(object obj, string name, DynValue value)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E6E")]
		[Address(RVA = "0xFFD124", Offset = "0xFFD124", VA = "0xFFD124")]
		private void AssignProperty(object obj, string name, DynValue value)
		{
		}

		[Token(Token = "0x6000E6F")]
		[Address(RVA = "0xFFD244", Offset = "0xFFD244", VA = "0xFFD244")]
		public void AssignObject(object obj, Table data)
		{
		}

		[Token(Token = "0x6000E70")]
		[Address(RVA = "0xFFD7D0", Offset = "0xFFD7D0", VA = "0xFFD7D0")]
		public void SetSubassignerForType(Type propertyType, IPropertyTableAssigner assigner)
		{
		}

		[Token(Token = "0x6000E71")]
		[Address(RVA = "0xFFDA20", Offset = "0xFFDA20", VA = "0xFFDA20", Slot = "4")]
		private void MoonSharp.Interpreter.Interop.IPropertyTableAssigner.AssignObjectUnchecked(object obj, Table data)
		{
		}
	}
	[Token(Token = "0x20001F9")]
	public interface IPropertyTableAssigner
	{
		[Token(Token = "0x6000E72")]
		void AssignObjectUnchecked(object o, Table data);
	}
	[Token(Token = "0x20001FA")]
	public class DelegateProxyFactory<TProxy, TTarget> : IProxyFactory<TProxy, TTarget>, IProxyFactory where TProxy : class where TTarget : class
	{
		[Token(Token = "0x4000AFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Func<TTarget, TProxy> wrapDelegate;

		[Token(Token = "0x170001A8")]
		public Type TargetType
		{
			[Token(Token = "0x6000E76")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001A9")]
		public Type ProxyType
		{
			[Token(Token = "0x6000E77")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E73")]
		public DelegateProxyFactory(Func<TTarget, TProxy> wrapDelegate)
		{
		}

		[Token(Token = "0x6000E74")]
		public TProxy CreateProxyObject(TTarget target)
		{
			return null;
		}

		[Token(Token = "0x6000E75")]
		public object CreateProxyObject(object o)
		{
			return null;
		}
	}
	[Token(Token = "0x20001FB")]
	public interface IProxyFactory
	{
		[Token(Token = "0x170001AA")]
		Type TargetType
		{
			[Token(Token = "0x6000E79")]
			get;
		}

		[Token(Token = "0x170001AB")]
		Type ProxyType
		{
			[Token(Token = "0x6000E7A")]
			get;
		}

		[Token(Token = "0x6000E78")]
		object CreateProxyObject(object o);
	}
	[Token(Token = "0x20001FC")]
	public interface IProxyFactory<TProxy, TTarget> : IProxyFactory where TProxy : class where TTarget : class
	{
		[Token(Token = "0x6000E7B")]
		TProxy CreateProxyObject(TTarget target);
	}
	[Token(Token = "0x20001FD")]
	public enum ReflectionSpecialNameType
	{
		[Token(Token = "0x4000B01")]
		IndexGetter,
		[Token(Token = "0x4000B02")]
		IndexSetter,
		[Token(Token = "0x4000B03")]
		ImplicitCast,
		[Token(Token = "0x4000B04")]
		ExplicitCast,
		[Token(Token = "0x4000B05")]
		OperatorTrue,
		[Token(Token = "0x4000B06")]
		OperatorFalse,
		[Token(Token = "0x4000B07")]
		PropertyGetter,
		[Token(Token = "0x4000B08")]
		PropertySetter,
		[Token(Token = "0x4000B09")]
		AddEvent,
		[Token(Token = "0x4000B0A")]
		RemoveEvent,
		[Token(Token = "0x4000B0B")]
		OperatorAdd,
		[Token(Token = "0x4000B0C")]
		OperatorAnd,
		[Token(Token = "0x4000B0D")]
		OperatorOr,
		[Token(Token = "0x4000B0E")]
		OperatorDec,
		[Token(Token = "0x4000B0F")]
		OperatorDiv,
		[Token(Token = "0x4000B10")]
		OperatorEq,
		[Token(Token = "0x4000B11")]
		OperatorXor,
		[Token(Token = "0x4000B12")]
		OperatorGt,
		[Token(Token = "0x4000B13")]
		OperatorGte,
		[Token(Token = "0x4000B14")]
		OperatorInc,
		[Token(Token = "0x4000B15")]
		OperatorNeq,
		[Token(Token = "0x4000B16")]
		OperatorLt,
		[Token(Token = "0x4000B17")]
		OperatorLte,
		[Token(Token = "0x4000B18")]
		OperatorNot,
		[Token(Token = "0x4000B19")]
		OperatorMod,
		[Token(Token = "0x4000B1A")]
		OperatorMul,
		[Token(Token = "0x4000B1B")]
		OperatorCompl,
		[Token(Token = "0x4000B1C")]
		OperatorSub,
		[Token(Token = "0x4000B1D")]
		OperatorNeg,
		[Token(Token = "0x4000B1E")]
		OperatorUnaryPlus
	}
	[Token(Token = "0x20001FE")]
	public struct ReflectionSpecialName
	{
		[Token(Token = "0x170001AC")]
		public ReflectionSpecialNameType Type
		{
			[Token(Token = "0x6000E7C")]
			[Address(RVA = "0xFFDA24", Offset = "0xFFDA24", VA = "0xFFDA24")]
			[CompilerGenerated]
			readonly get
			{
				return default(ReflectionSpecialNameType);
			}
			[Token(Token = "0x6000E7D")]
			[Address(RVA = "0xFFDA2C", Offset = "0xFFDA2C", VA = "0xFFDA2C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001AD")]
		public string Argument
		{
			[Token(Token = "0x6000E7E")]
			[Address(RVA = "0xFFDA34", Offset = "0xFFDA34", VA = "0xFFDA34")]
			[CompilerGenerated]
			readonly get
			{
				return null;
			}
			[Token(Token = "0x6000E7F")]
			[Address(RVA = "0xFFDA3C", Offset = "0xFFDA3C", VA = "0xFFDA3C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000E80")]
		[Address(RVA = "0xFFDA44", Offset = "0xFFDA44", VA = "0xFFDA44")]
		public ReflectionSpecialName(ReflectionSpecialNameType type, [Optional] string argument)
		{
		}

		[Token(Token = "0x6000E81")]
		[Address(RVA = "0xFFDA54", Offset = "0xFFDA54", VA = "0xFFDA54")]
		public ReflectionSpecialName(string name)
		{
		}
	}
	[Token(Token = "0x20001FF")]
	public class CompositeUserDataDescriptor : IUserDataDescriptor
	{
		[Token(Token = "0x4000B21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<IUserDataDescriptor> m_Descriptors;

		[Token(Token = "0x4000B22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Type m_Type;

		[Token(Token = "0x170001AE")]
		public IList<IUserDataDescriptor> Descriptors
		{
			[Token(Token = "0x6000E83")]
			[Address(RVA = "0xFFE4D4", Offset = "0xFFE4D4", VA = "0xFFE4D4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001AF")]
		public string Name
		{
			[Token(Token = "0x6000E84")]
			[Address(RVA = "0xFFE4DC", Offset = "0xFFE4DC", VA = "0xFFE4DC", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001B0")]
		public Type Type
		{
			[Token(Token = "0x6000E85")]
			[Address(RVA = "0xFFE548", Offset = "0xFFE548", VA = "0xFFE548", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E82")]
		[Address(RVA = "0xFFE490", Offset = "0xFFE490", VA = "0xFFE490")]
		public CompositeUserDataDescriptor(List<IUserDataDescriptor> descriptors, Type type)
		{
		}

		[Token(Token = "0x6000E86")]
		[Address(RVA = "0xFFE550", Offset = "0xFFE550", VA = "0xFFE550", Slot = "6")]
		public DynValue Index(Script script, object obj, DynValue index, bool isNameIndex)
		{
			return null;
		}

		[Token(Token = "0x6000E87")]
		[Address(RVA = "0xFFE758", Offset = "0xFFE758", VA = "0xFFE758", Slot = "7")]
		public bool SetIndex(Script script, object obj, DynValue index, DynValue value, bool isNameIndex)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E88")]
		[Address(RVA = "0xFFE968", Offset = "0xFFE968", VA = "0xFFE968", Slot = "8")]
		public string AsString(object obj)
		{
			return null;
		}

		[Token(Token = "0x6000E89")]
		[Address(RVA = "0xFFE988", Offset = "0xFFE988", VA = "0xFFE988", Slot = "9")]
		public DynValue MetaIndex(Script script, object obj, string metaname)
		{
			return null;
		}

		[Token(Token = "0x6000E8A")]
		[Address(RVA = "0xFFEB7C", Offset = "0xFFEB7C", VA = "0xFFEB7C", Slot = "10")]
		public bool IsTypeCompatible(Type type, object obj)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000200")]
	public class ArrayMemberDescriptor : ObjectCallbackMemberDescriptor, IWireableDescriptor
	{
		[Token(Token = "0x4000B23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool m_IsSetter;

		[Token(Token = "0x6000E8B")]
		[Address(RVA = "0xFFEC30", Offset = "0xFFEC30", VA = "0xFFEC30")]
		public ArrayMemberDescriptor(string name, bool isSetter, ParameterDescriptor[] indexerParams)
		{
		}

		[Token(Token = "0x6000E8C")]
		[Address(RVA = "0xFFED54", Offset = "0xFFED54", VA = "0xFFED54")]
		public ArrayMemberDescriptor(string name, bool isSetter)
		{
		}

		[Token(Token = "0x6000E8D")]
		[Address(RVA = "0xFFEE7C", Offset = "0xFFEE7C", VA = "0xFFEE7C", Slot = "19")]
		public void PrepareForWiring(Table t)
		{
		}

		[Token(Token = "0x6000E8E")]
		[Address(RVA = "0xFFF098", Offset = "0xFFF098", VA = "0xFFF098")]
		private static int[] BuildArrayIndices(CallbackArguments args, int count)
		{
			return null;
		}

		[Token(Token = "0x6000E8F")]
		[Address(RVA = "0xFFF168", Offset = "0xFFF168", VA = "0xFFF168")]
		private static object ArrayIndexerSet(object arrayObj, ScriptExecutionContext ctx, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x6000E90")]
		[Address(RVA = "0xFFF2D0", Offset = "0xFFF2D0", VA = "0xFFF2D0")]
		private static object ArrayIndexerGet(object arrayObj, ScriptExecutionContext ctx, CallbackArguments args)
		{
			return null;
		}
	}
	[Token(Token = "0x2000201")]
	public class DynValueMemberDescriptor : IMemberDescriptor, IWireableDescriptor
	{
		[Token(Token = "0x4000B24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private DynValue m_Value;

		[Token(Token = "0x170001B1")]
		public bool IsStatic
		{
			[Token(Token = "0x6000E94")]
			[Address(RVA = "0xFFF4F8", Offset = "0xFFF4F8", VA = "0xFFF4F8", Slot = "4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001B2")]
		public string Name
		{
			[Token(Token = "0x6000E95")]
			[Address(RVA = "0xFFF500", Offset = "0xFFF500", VA = "0xFFF500", Slot = "5")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E96")]
			[Address(RVA = "0xFFF508", Offset = "0xFFF508", VA = "0xFFF508")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001B3")]
		public MemberDescriptorAccess MemberAccess
		{
			[Token(Token = "0x6000E97")]
			[Address(RVA = "0xFFF510", Offset = "0xFFF510", VA = "0xFFF510", Slot = "6")]
			[CompilerGenerated]
			get
			{
				return default(MemberDescriptorAccess);
			}
			[Token(Token = "0x6000E98")]
			[Address(RVA = "0xFFF518", Offset = "0xFFF518", VA = "0xFFF518")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001B4")]
		public virtual DynValue Value
		{
			[Token(Token = "0x6000E99")]
			[Address(RVA = "0xFFF520", Offset = "0xFFF520", VA = "0xFFF520", Slot = "10")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E91")]
		[Address(RVA = "0xFFF370", Offset = "0xFFF370", VA = "0xFFF370")]
		protected DynValueMemberDescriptor(string name, string serializedTableValue)
		{
		}

		[Token(Token = "0x6000E92")]
		[Address(RVA = "0xFFF44C", Offset = "0xFFF44C", VA = "0xFFF44C")]
		protected DynValueMemberDescriptor(string name)
		{
		}

		[Token(Token = "0x6000E93")]
		[Address(RVA = "0xFFF494", Offset = "0xFFF494", VA = "0xFFF494")]
		public DynValueMemberDescriptor(string name, DynValue value)
		{
		}

		[Token(Token = "0x6000E9A")]
		[Address(RVA = "0xFFF528", Offset = "0xFFF528", VA = "0xFFF528", Slot = "7")]
		public DynValue GetValue(Script script, object obj)
		{
			return null;
		}

		[Token(Token = "0x6000E9B")]
		[Address(RVA = "0xFFF534", Offset = "0xFFF534", VA = "0xFFF534", Slot = "8")]
		public void SetValue(Script script, object obj, DynValue value)
		{
		}

		[Token(Token = "0x6000E9C")]
		[Address(RVA = "0xFFF5CC", Offset = "0xFFF5CC", VA = "0xFFF5CC", Slot = "9")]
		public void PrepareForWiring(Table t)
		{
		}
	}
	[Token(Token = "0x2000202")]
	public abstract class FunctionMemberDescriptorBase : IOverloadableMemberDescriptor, IMemberDescriptor
	{
		[Token(Token = "0x170001B5")]
		public bool IsStatic
		{
			[Token(Token = "0x6000E9D")]
			[Address(RVA = "0xFFFA28", Offset = "0xFFFA28", VA = "0xFFFA28", Slot = "10")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000E9E")]
			[Address(RVA = "0xFFFA30", Offset = "0xFFFA30", VA = "0xFFFA30")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001B6")]
		public string Name
		{
			[Token(Token = "0x6000E9F")]
			[Address(RVA = "0xFFFA3C", Offset = "0xFFFA3C", VA = "0xFFFA3C", Slot = "11")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000EA0")]
			[Address(RVA = "0xFFFA44", Offset = "0xFFFA44", VA = "0xFFFA44")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001B7")]
		public string SortDiscriminant
		{
			[Token(Token = "0x6000EA1")]
			[Address(RVA = "0xFFFA4C", Offset = "0xFFFA4C", VA = "0xFFFA4C", Slot = "9")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000EA2")]
			[Address(RVA = "0xFFFA54", Offset = "0xFFFA54", VA = "0xFFFA54")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001B8")]
		public ParameterDescriptor[] Parameters
		{
			[Token(Token = "0x6000EA3")]
			[Address(RVA = "0xFFFA5C", Offset = "0xFFFA5C", VA = "0xFFFA5C", Slot = "6")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000EA4")]
			[Address(RVA = "0xFFFA64", Offset = "0xFFFA64", VA = "0xFFFA64")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001B9")]
		public Type ExtensionMethodType
		{
			[Token(Token = "0x6000EA5")]
			[Address(RVA = "0xFFFA6C", Offset = "0xFFFA6C", VA = "0xFFFA6C", Slot = "5")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000EA6")]
			[Address(RVA = "0xFFFA74", Offset = "0xFFFA74", VA = "0xFFFA74")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001BA")]
		public Type VarArgsArrayType
		{
			[Token(Token = "0x6000EA7")]
			[Address(RVA = "0xFFFA7C", Offset = "0xFFFA7C", VA = "0xFFFA7C", Slot = "7")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000EA8")]
			[Address(RVA = "0xFFFA84", Offset = "0xFFFA84", VA = "0xFFFA84")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001BB")]
		public Type VarArgsElementType
		{
			[Token(Token = "0x6000EA9")]
			[Address(RVA = "0xFFFA8C", Offset = "0xFFFA8C", VA = "0xFFFA8C", Slot = "8")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000EAA")]
			[Address(RVA = "0xFFFA94", Offset = "0xFFFA94", VA = "0xFFFA94")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001BC")]
		public MemberDescriptorAccess MemberAccess
		{
			[Token(Token = "0x6000EB3")]
			[Address(RVA = "0x10012CC", Offset = "0x10012CC", VA = "0x10012CC", Slot = "12")]
			get
			{
				return default(MemberDescriptorAccess);
			}
		}

		[Token(Token = "0x6000EAB")]
		[Address(RVA = "0xFFFA9C", Offset = "0xFFFA9C", VA = "0xFFFA9C")]
		protected void Initialize(string funcName, bool isStatic, ParameterDescriptor[] parameters, bool isExtensionMethod)
		{
		}

		[Token(Token = "0x6000EAC")]
		[Address(RVA = "0xFFFCFC", Offset = "0xFFFCFC", VA = "0xFFFCFC")]
		public Func<ScriptExecutionContext, CallbackArguments, DynValue> GetCallback(Script script, [Optional] object obj)
		{
			return null;
		}

		[Token(Token = "0x6000EAD")]
		[Address(RVA = "0xFFFDEC", Offset = "0xFFFDEC", VA = "0xFFFDEC")]
		public CallbackFunction GetCallbackFunction(Script script, [Optional] object obj)
		{
			return null;
		}

		[Token(Token = "0x6000EAE")]
		[Address(RVA = "0xFFFE80", Offset = "0xFFFE80", VA = "0xFFFE80")]
		public DynValue GetCallbackAsDynValue(Script script, [Optional] object obj)
		{
			return null;
		}

		[Token(Token = "0x6000EAF")]
		[Address(RVA = "0xFFFF00", Offset = "0xFFFF00", VA = "0xFFFF00")]
		public static DynValue CreateCallbackDynValue(Script script, MethodInfo mi, [Optional] object obj)
		{
			return null;
		}

		[Token(Token = "0x6000EB0")]
		[Address(RVA = "0x10007B0", Offset = "0x10007B0", VA = "0x10007B0", Slot = "15")]
		protected virtual object[] BuildArgumentList(Script script, object obj, ScriptExecutionContext context, CallbackArguments args, out List<int> outParams)
		{
			return null;
		}

		[Token(Token = "0x6000EB1")]
		[Address(RVA = "0x1001064", Offset = "0x1001064", VA = "0x1001064")]
		protected static DynValue BuildReturnValue(Script script, List<int> outParams, object[] pars, object retv)
		{
			return null;
		}

		[Token(Token = "0x6000EB2")]
		public abstract DynValue Execute(Script script, object obj, ScriptExecutionContext context, CallbackArguments args);

		[Token(Token = "0x6000EB4")]
		[Address(RVA = "0x10012D4", Offset = "0x10012D4", VA = "0x10012D4", Slot = "17")]
		public virtual DynValue GetValue(Script script, object obj)
		{
			return null;
		}

		[Token(Token = "0x6000EB5")]
		[Address(RVA = "0x100130C", Offset = "0x100130C", VA = "0x100130C", Slot = "18")]
		public virtual void SetValue(Script script, object obj, DynValue v)
		{
		}

		[Token(Token = "0x6000EB6")]
		[Address(RVA = "0x1001318", Offset = "0x1001318", VA = "0x1001318")]
		protected FunctionMemberDescriptorBase()
		{
		}
	}
	[Token(Token = "0x2000205")]
	public class ObjectCallbackMemberDescriptor : FunctionMemberDescriptorBase
	{
		[Token(Token = "0x4000B33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Func<object, ScriptExecutionContext, CallbackArguments, object> m_CallbackFunc;

		[Token(Token = "0x6000EBC")]
		[Address(RVA = "0x10013F4", Offset = "0x10013F4", VA = "0x10013F4")]
		public ObjectCallbackMemberDescriptor(string funcName)
		{
		}

		[Token(Token = "0x6000EBD")]
		[Address(RVA = "0xFFEE10", Offset = "0xFFEE10", VA = "0xFFEE10")]
		public ObjectCallbackMemberDescriptor(string funcName, Func<object, ScriptExecutionContext, CallbackArguments, object> callBack)
		{
		}

		[Token(Token = "0x6000EBE")]
		[Address(RVA = "0xFFECFC", Offset = "0xFFECFC", VA = "0xFFECFC")]
		public ObjectCallbackMemberDescriptor(string funcName, Func<object, ScriptExecutionContext, CallbackArguments, object> callBack, ParameterDescriptor[] parameters)
		{
		}

		[Token(Token = "0x6000EBF")]
		[Address(RVA = "0x1001508", Offset = "0x1001508", VA = "0x1001508", Slot = "16")]
		public override DynValue Execute(Script script, object obj, ScriptExecutionContext context, CallbackArguments args)
		{
			return null;
		}
	}
	[Token(Token = "0x2000207")]
	public sealed class ProxyUserDataDescriptor : IUserDataDescriptor
	{
		[Token(Token = "0x4000B36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IUserDataDescriptor m_ProxyDescriptor;

		[Token(Token = "0x4000B37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private IProxyFactory m_ProxyFactory;

		[Token(Token = "0x170001BD")]
		public IUserDataDescriptor InnerDescriptor
		{
			[Token(Token = "0x6000EC4")]
			[Address(RVA = "0x1001824", Offset = "0x1001824", VA = "0x1001824")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001BE")]
		public string Name
		{
			[Token(Token = "0x6000EC5")]
			[Address(RVA = "0x100182C", Offset = "0x100182C", VA = "0x100182C", Slot = "4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000EC6")]
			[Address(RVA = "0x1001834", Offset = "0x1001834", VA = "0x1001834")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001BF")]
		public Type Type
		{
			[Token(Token = "0x6000EC7")]
			[Address(RVA = "0x100183C", Offset = "0x100183C", VA = "0x100183C", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000EC3")]
		[Address(RVA = "0x10016F8", Offset = "0x10016F8", VA = "0x10016F8")]
		internal ProxyUserDataDescriptor(IProxyFactory proxyFactory, IUserDataDescriptor proxyDescriptor, [Optional] string friendlyName)
		{
		}

		[Token(Token = "0x6000EC8")]
		[Address(RVA = "0x10018E0", Offset = "0x10018E0", VA = "0x10018E0")]
		private object Proxy(object obj)
		{
			return null;
		}

		[Token(Token = "0x6000EC9")]
		[Address(RVA = "0x100199C", Offset = "0x100199C", VA = "0x100199C", Slot = "6")]
		public DynValue Index(Script script, object obj, DynValue index, bool isDirectIndexing)
		{
			return null;
		}

		[Token(Token = "0x6000ECA")]
		[Address(RVA = "0x1001A80", Offset = "0x1001A80", VA = "0x1001A80", Slot = "7")]
		public bool SetIndex(Script script, object obj, DynValue index, DynValue value, bool isDirectIndexing)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ECB")]
		[Address(RVA = "0x1001B6C", Offset = "0x1001B6C", VA = "0x1001B6C", Slot = "8")]
		public string AsString(object obj)
		{
			return null;
		}

		[Token(Token = "0x6000ECC")]
		[Address(RVA = "0x1001C28", Offset = "0x1001C28", VA = "0x1001C28", Slot = "9")]
		public DynValue MetaIndex(Script script, object obj, string metaname)
		{
			return null;
		}

		[Token(Token = "0x6000ECD")]
		[Address(RVA = "0x1001CFC", Offset = "0x1001CFC", VA = "0x1001CFC", Slot = "10")]
		public bool IsTypeCompatible(Type type, object obj)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000208")]
	public class EventMemberDescriptor : IMemberDescriptor
	{
		[Token(Token = "0x2000209")]
		private delegate void EventWrapper00();

		[Token(Token = "0x200020A")]
		private delegate void EventWrapper01(object o1);

		[Token(Token = "0x200020B")]
		private delegate void EventWrapper02(object o1, object o2);

		[Token(Token = "0x200020C")]
		private delegate void EventWrapper03(object o1, object o2, object o3);

		[Token(Token = "0x200020D")]
		private delegate void EventWrapper04(object o1, object o2, object o3, object o4);

		[Token(Token = "0x200020E")]
		private delegate void EventWrapper05(object o1, object o2, object o3, object o4, object o5);

		[Token(Token = "0x200020F")]
		private delegate void EventWrapper06(object o1, object o2, object o3, object o4, object o5, object o6);

		[Token(Token = "0x2000210")]
		private delegate void EventWrapper07(object o1, object o2, object o3, object o4, object o5, object o6, object o7);

		[Token(Token = "0x2000211")]
		private delegate void EventWrapper08(object o1, object o2, object o3, object o4, object o5, object o6, object o7, object o8);

		[Token(Token = "0x2000212")]
		private delegate void EventWrapper09(object o1, object o2, object o3, object o4, object o5, object o6, object o7, object o8, object o9);

		[Token(Token = "0x2000213")]
		private delegate void EventWrapper10(object o1, object o2, object o3, object o4, object o5, object o6, object o7, object o8, object o9, object o10);

		[Token(Token = "0x2000214")]
		private delegate void EventWrapper11(object o1, object o2, object o3, object o4, object o5, object o6, object o7, object o8, object o9, object o10, object o11);

		[Token(Token = "0x2000215")]
		private delegate void EventWrapper12(object o1, object o2, object o3, object o4, object o5, object o6, object o7, object o8, object o9, object o10, object o11, object o12);

		[Token(Token = "0x2000216")]
		private delegate void EventWrapper13(object o1, object o2, object o3, object o4, object o5, object o6, object o7, object o8, object o9, object o10, object o11, object o12, object o13);

		[Token(Token = "0x2000217")]
		private delegate void EventWrapper14(object o1, object o2, object o3, object o4, object o5, object o6, object o7, object o8, object o9, object o10, object o11, object o12, object o13, object o14);

		[Token(Token = "0x2000218")]
		private delegate void EventWrapper15(object o1, object o2, object o3, object o4, object o5, object o6, object o7, object o8, object o9, object o10, object o11, object o12, object o13, object o14, object o15);

		[Token(Token = "0x2000219")]
		private delegate void EventWrapper16(object o1, object o2, object o3, object o4, object o5, object o6, object o7, object o8, object o9, object o10, object o11, object o12, object o13, object o14, object o15, object o16);

		[Token(Token = "0x4000B39")]
		public const int MAX_ARGS_IN_DELEGATE = 16;

		[Token(Token = "0x4000B3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private object m_Lock;

		[Token(Token = "0x4000B3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private MultiDictionary<object, Closure> m_Callbacks;

		[Token(Token = "0x4000B3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Dictionary<object, Delegate> m_Delegates;

		[Token(Token = "0x4000B3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private MethodInfo m_Add;

		[Token(Token = "0x4000B40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private MethodInfo m_Remove;

		[Token(Token = "0x170001C0")]
		public EventInfo EventInfo
		{
			[Token(Token = "0x6000ED1")]
			[Address(RVA = "0x1002AF4", Offset = "0x1002AF4", VA = "0x1002AF4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000ED2")]
			[Address(RVA = "0x1002AFC", Offset = "0x1002AFC", VA = "0x1002AFC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001C1")]
		public bool IsStatic
		{
			[Token(Token = "0x6000ED3")]
			[Address(RVA = "0x1002B04", Offset = "0x1002B04", VA = "0x1002B04", Slot = "4")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000ED4")]
			[Address(RVA = "0x1002B0C", Offset = "0x1002B0C", VA = "0x1002B0C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001C2")]
		public string Name
		{
			[Token(Token = "0x6000EDC")]
			[Address(RVA = "0x1005368", Offset = "0x1005368", VA = "0x1005368", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001C3")]
		public MemberDescriptorAccess MemberAccess
		{
			[Token(Token = "0x6000EDD")]
			[Address(RVA = "0x1005388", Offset = "0x1005388", VA = "0x1005388", Slot = "6")]
			get
			{
				return default(MemberDescriptorAccess);
			}
		}

		[Token(Token = "0x6000ECE")]
		[Address(RVA = "0x1001DB0", Offset = "0x1001DB0", VA = "0x1001DB0")]
		public static EventMemberDescriptor TryCreateIfVisible(EventInfo ei, InteropAccessMode accessMode)
		{
			return null;
		}

		[Token(Token = "0x6000ECF")]
		[Address(RVA = "0x1001F98", Offset = "0x1001F98", VA = "0x1001F98")]
		public static bool CheckEventIsCompatible(EventInfo ei, bool throwException)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ED0")]
		[Address(RVA = "0x1002524", Offset = "0x1002524", VA = "0x1002524")]
		public EventMemberDescriptor(EventInfo ei, InteropAccessMode accessMode = InteropAccessMode.Default)
		{
		}

		[Token(Token = "0x6000ED5")]
		[Address(RVA = "0x1002B18", Offset = "0x1002B18", VA = "0x1002B18", Slot = "7")]
		public DynValue GetValue(Script script, object obj)
		{
			return null;
		}

		[Token(Token = "0x6000ED6")]
		[Address(RVA = "0x1002BD0", Offset = "0x1002BD0", VA = "0x1002BD0")]
		internal DynValue AddCallback(object o, ScriptExecutionContext context, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x6000ED7")]
		[Address(RVA = "0x1002F10", Offset = "0x1002F10", VA = "0x1002F10")]
		internal DynValue RemoveCallback(object o, ScriptExecutionContext context, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x6000ED8")]
		[Address(RVA = "0x1002E10", Offset = "0x1002E10", VA = "0x1002E10")]
		private void RegisterCallback(object o)
		{
		}

		[Token(Token = "0x6000ED9")]
		[Address(RVA = "0x1003150", Offset = "0x1003150", VA = "0x1003150")]
		private void UnregisterCallback(object o)
		{
		}

		[Token(Token = "0x6000EDA")]
		[Address(RVA = "0x10032B0", Offset = "0x10032B0", VA = "0x10032B0")]
		private Delegate CreateDelegate(object sender)
		{
			return null;
		}

		[Token(Token = "0x6000EDB")]
		[Address(RVA = "0x1004E08", Offset = "0x1004E08", VA = "0x1004E08")]
		private void DispatchEvent(object sender, [Optional] object o01, [Optional] object o02, [Optional] object o03, [Optional] object o04, [Optional] object o05, [Optional] object o06, [Optional] object o07, [Optional] object o08, [Optional] object o09, [Optional] object o10, [Optional] object o11, [Optional] object o12, [Optional] object o13, [Optional] object o14, [Optional] object o15, [Optional] object o16)
		{
		}

		[Token(Token = "0x6000EDE")]
		[Address(RVA = "0x1005390", Offset = "0x1005390", VA = "0x1005390", Slot = "8")]
		public void SetValue(Script script, object obj, DynValue v)
		{
		}
	}
	[Token(Token = "0x200021C")]
	public class FieldMemberDescriptor : IMemberDescriptor, IOptimizableDescriptor, IWireableDescriptor
	{
		[Token(Token = "0x4000B4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private object m_ConstValue;

		[Token(Token = "0x4000B4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Func<object, object> m_OptimizedGetter;

		[Token(Token = "0x170001C4")]
		public FieldInfo FieldInfo
		{
			[Token(Token = "0x6000F37")]
			[Address(RVA = "0x1006228", Offset = "0x1006228", VA = "0x1006228")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F38")]
			[Address(RVA = "0x1006230", Offset = "0x1006230", VA = "0x1006230")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001C5")]
		public InteropAccessMode AccessMode
		{
			[Token(Token = "0x6000F39")]
			[Address(RVA = "0x1006238", Offset = "0x1006238", VA = "0x1006238")]
			[CompilerGenerated]
			get
			{
				return default(InteropAccessMode);
			}
			[Token(Token = "0x6000F3A")]
			[Address(RVA = "0x1006240", Offset = "0x1006240", VA = "0x1006240")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001C6")]
		public bool IsStatic
		{
			[Token(Token = "0x6000F3B")]
			[Address(RVA = "0x1006248", Offset = "0x1006248", VA = "0x1006248", Slot = "4")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000F3C")]
			[Address(RVA = "0x1006250", Offset = "0x1006250", VA = "0x1006250")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001C7")]
		public string Name
		{
			[Token(Token = "0x6000F3D")]
			[Address(RVA = "0x100625C", Offset = "0x100625C", VA = "0x100625C", Slot = "5")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F3E")]
			[Address(RVA = "0x1006264", Offset = "0x1006264", VA = "0x1006264")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001C8")]
		public bool IsConst
		{
			[Token(Token = "0x6000F3F")]
			[Address(RVA = "0x100626C", Offset = "0x100626C", VA = "0x100626C")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000F40")]
			[Address(RVA = "0x1006274", Offset = "0x1006274", VA = "0x1006274")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001C9")]
		public bool IsReadonly
		{
			[Token(Token = "0x6000F41")]
			[Address(RVA = "0x1006280", Offset = "0x1006280", VA = "0x1006280")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000F42")]
			[Address(RVA = "0x1006288", Offset = "0x1006288", VA = "0x1006288")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001CA")]
		public MemberDescriptorAccess MemberAccess
		{
			[Token(Token = "0x6000F48")]
			[Address(RVA = "0x1006E6C", Offset = "0x1006E6C", VA = "0x1006E6C", Slot = "6")]
			get
			{
				return default(MemberDescriptorAccess);
			}
		}

		[Token(Token = "0x6000F43")]
		[Address(RVA = "0x1006294", Offset = "0x1006294", VA = "0x1006294")]
		public static FieldMemberDescriptor TryCreateIfVisible(FieldInfo fi, InteropAccessMode accessMode)
		{
			return null;
		}

		[Token(Token = "0x6000F44")]
		[Address(RVA = "0x1006350", Offset = "0x1006350", VA = "0x1006350")]
		public FieldMemberDescriptor(FieldInfo fi, InteropAccessMode accessMode)
		{
		}

		[Token(Token = "0x6000F45")]
		[Address(RVA = "0x1006A38", Offset = "0x1006A38", VA = "0x1006A38", Slot = "7")]
		public DynValue GetValue(Script script, object obj)
		{
			return null;
		}

		[Token(Token = "0x6000F46")]
		[Address(RVA = "0x1006560", Offset = "0x1006560", VA = "0x1006560")]
		internal void OptimizeGetter()
		{
		}

		[Token(Token = "0x6000F47")]
		[Address(RVA = "0x1006AD4", Offset = "0x1006AD4", VA = "0x1006AD4", Slot = "8")]
		public void SetValue(Script script, object obj, DynValue v)
		{
		}

		[Token(Token = "0x6000F49")]
		[Address(RVA = "0x1006E90", Offset = "0x1006E90", VA = "0x1006E90", Slot = "9")]
		private void MoonSharp.Interpreter.Interop.BasicDescriptors.IOptimizableDescriptor.Optimize()
		{
		}

		[Token(Token = "0x6000F4A")]
		[Address(RVA = "0x1006EA0", Offset = "0x1006EA0", VA = "0x1006EA0", Slot = "10")]
		public void PrepareForWiring(Table t)
		{
		}
	}
	[Token(Token = "0x200021D")]
	public class MethodMemberDescriptor : FunctionMemberDescriptorBase, IOptimizableDescriptor, IWireableDescriptor
	{
		[Token(Token = "0x4000B50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Func<object, object[], object> m_OptimizedFunc;

		[Token(Token = "0x4000B51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Action<object, object[]> m_OptimizedAction;

		[Token(Token = "0x4000B52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool m_IsAction;

		[Token(Token = "0x4000B53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		private bool m_IsArrayCtor;

		[Token(Token = "0x170001CB")]
		public MethodBase MethodInfo
		{
			[Token(Token = "0x6000F4B")]
			[Address(RVA = "0x1007284", Offset = "0x1007284", VA = "0x1007284")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F4C")]
			[Address(RVA = "0x100728C", Offset = "0x100728C", VA = "0x100728C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001CC")]
		public InteropAccessMode AccessMode
		{
			[Token(Token = "0x6000F4D")]
			[Address(RVA = "0x1007294", Offset = "0x1007294", VA = "0x1007294")]
			[CompilerGenerated]
			get
			{
				return default(InteropAccessMode);
			}
			[Token(Token = "0x6000F4E")]
			[Address(RVA = "0x100729C", Offset = "0x100729C", VA = "0x100729C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001CD")]
		public bool IsConstructor
		{
			[Token(Token = "0x6000F4F")]
			[Address(RVA = "0x10072A4", Offset = "0x10072A4", VA = "0x10072A4")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000F50")]
			[Address(RVA = "0x10072AC", Offset = "0x10072AC", VA = "0x10072AC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000F51")]
		[Address(RVA = "0xFFFF7C", Offset = "0xFFFF7C", VA = "0xFFFF7C")]
		public MethodMemberDescriptor(MethodBase methodBase, InteropAccessMode accessMode = InteropAccessMode.Default)
		{
		}

		[Token(Token = "0x6000F52")]
		[Address(RVA = "0x10072B8", Offset = "0x10072B8", VA = "0x10072B8")]
		public static MethodMemberDescriptor TryCreateIfVisible(MethodBase methodBase, InteropAccessMode accessMode, bool forceVisibility = false)
		{
			return null;
		}

		[Token(Token = "0x6000F53")]
		[Address(RVA = "0x10027B4", Offset = "0x10027B4", VA = "0x10027B4")]
		public static bool CheckMethodIsCompatible(MethodBase methodBase, bool throwException)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F54")]
		[Address(RVA = "0x1007394", Offset = "0x1007394", VA = "0x1007394", Slot = "16")]
		public override DynValue Execute(Script script, object obj, ScriptExecutionContext context, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x6000F55")]
		[Address(RVA = "0x1007600", Offset = "0x1007600", VA = "0x1007600", Slot = "19")]
		private void MoonSharp.Interpreter.Interop.BasicDescriptors.IOptimizableDescriptor.Optimize()
		{
		}

		[Token(Token = "0x6000F56")]
		[Address(RVA = "0x1007E5C", Offset = "0x1007E5C", VA = "0x1007E5C", Slot = "20")]
		public void PrepareForWiring(Table t)
		{
		}
	}
	[Token(Token = "0x200021F")]
	public class OverloadedMethodMemberDescriptor : IOptimizableDescriptor, IMemberDescriptor, IWireableDescriptor
	{
		[Token(Token = "0x2000220")]
		private class OverloadableMemberDescriptorComparer : IComparer<IOverloadableMemberDescriptor>
		{
			[Token(Token = "0x6000F75")]
			[Address(RVA = "0x100AC18", Offset = "0x100AC18", VA = "0x100AC18", Slot = "4")]
			public int Compare(IOverloadableMemberDescriptor x, IOverloadableMemberDescriptor y)
			{
				return default(int);
			}

			[Token(Token = "0x6000F76")]
			[Address(RVA = "0x1008E20", Offset = "0x1008E20", VA = "0x1008E20")]
			public OverloadableMemberDescriptorComparer()
			{
			}
		}

		[Token(Token = "0x2000221")]
		private class OverloadCacheItem
		{
			[Token(Token = "0x4000B62")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool HasObject;

			[Token(Token = "0x4000B63")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public IOverloadableMemberDescriptor Method;

			[Token(Token = "0x4000B64")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public List<DataType> ArgsDataType;

			[Token(Token = "0x4000B65")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public List<Type> ArgsUserDataType;

			[Token(Token = "0x4000B66")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public int HitIndexAtLastHit;

			[Token(Token = "0x6000F77")]
			[Address(RVA = "0x100A064", Offset = "0x100A064", VA = "0x100A064")]
			public OverloadCacheItem()
			{
			}
		}

		[Token(Token = "0x4000B58")]
		private const int CACHE_SIZE = 5;

		[Token(Token = "0x4000B59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<IOverloadableMemberDescriptor> m_Overloads;

		[Token(Token = "0x4000B5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private List<IOverloadableMemberDescriptor> m_ExtOverloads;

		[Token(Token = "0x4000B5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool m_Unsorted;

		[Token(Token = "0x4000B5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private OverloadCacheItem[] m_Cache;

		[Token(Token = "0x4000B5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int m_CacheHits;

		[Token(Token = "0x4000B5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int m_ExtensionMethodVersion;

		[Token(Token = "0x170001CE")]
		public bool IgnoreExtensionMethods
		{
			[Token(Token = "0x6000F5C")]
			[Address(RVA = "0x100850C", Offset = "0x100850C", VA = "0x100850C")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000F5D")]
			[Address(RVA = "0x1008514", Offset = "0x1008514", VA = "0x1008514")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170001CF")]
		public string Name
		{
			[Token(Token = "0x6000F62")]
			[Address(RVA = "0x10087BC", Offset = "0x10087BC", VA = "0x10087BC", Slot = "6")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F63")]
			[Address(RVA = "0x10087C4", Offset = "0x10087C4", VA = "0x10087C4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001D0")]
		public Type DeclaringType
		{
			[Token(Token = "0x6000F64")]
			[Address(RVA = "0x10087CC", Offset = "0x10087CC", VA = "0x10087CC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F65")]
			[Address(RVA = "0x10087D4", Offset = "0x10087D4", VA = "0x10087D4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001D1")]
		public int OverloadCount
		{
			[Token(Token = "0x6000F67")]
			[Address(RVA = "0x1008894", Offset = "0x1008894", VA = "0x1008894")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001D2")]
		public bool IsStatic
		{
			[Token(Token = "0x6000F70")]
			[Address(RVA = "0x100A61C", Offset = "0x100A61C", VA = "0x100A61C", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001D3")]
		public MemberDescriptorAccess MemberAccess
		{
			[Token(Token = "0x6000F71")]
			[Address(RVA = "0x100A720", Offset = "0x100A720", VA = "0x100A720", Slot = "7")]
			get
			{
				return default(MemberDescriptorAccess);
			}
		}

		[Token(Token = "0x6000F5E")]
		[Address(RVA = "0x1008520", Offset = "0x1008520", VA = "0x1008520")]
		public OverloadedMethodMemberDescriptor(string name, Type declaringType)
		{
		}

		[Token(Token = "0x6000F5F")]
		[Address(RVA = "0x1008640", Offset = "0x1008640", VA = "0x1008640")]
		public OverloadedMethodMemberDescriptor(string name, Type declaringType, IOverloadableMemberDescriptor descriptor)
		{
		}

		[Token(Token = "0x6000F60")]
		[Address(RVA = "0x1008714", Offset = "0x1008714", VA = "0x1008714")]
		public OverloadedMethodMemberDescriptor(string name, Type declaringType, IEnumerable<IOverloadableMemberDescriptor> descriptors)
		{
		}

		[Token(Token = "0x6000F61")]
		[Address(RVA = "0x100878C", Offset = "0x100878C", VA = "0x100878C")]
		internal void SetExtensionMethodsSnapshot(int version, List<IOverloadableMemberDescriptor> extMethods)
		{
		}

		[Token(Token = "0x6000F66")]
		[Address(RVA = "0x10087DC", Offset = "0x10087DC", VA = "0x10087DC")]
		public void AddOverload(IOverloadableMemberDescriptor overload)
		{
		}

		[Token(Token = "0x6000F68")]
		[Address(RVA = "0x10088DC", Offset = "0x10088DC", VA = "0x10088DC")]
		private DynValue PerformOverloadedCall(Script script, object obj, ScriptExecutionContext context, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x6000F69")]
		[Address(RVA = "0x1009B30", Offset = "0x1009B30", VA = "0x1009B30")]
		private void Cache(bool hasObject, CallbackArguments args, IOverloadableMemberDescriptor bestOverload)
		{
		}

		[Token(Token = "0x6000F6A")]
		[Address(RVA = "0x1008E28", Offset = "0x1008E28", VA = "0x1008E28")]
		private bool CheckMatch(bool hasObject, CallbackArguments args, OverloadCacheItem overloadCacheItem)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F6B")]
		[Address(RVA = "0x1009068", Offset = "0x1009068", VA = "0x1009068")]
		private int CalcScoreForOverload(ScriptExecutionContext context, CallbackArguments args, IOverloadableMemberDescriptor method, bool isExtMethod)
		{
			return default(int);
		}

		[Token(Token = "0x6000F6C")]
		[Address(RVA = "0x100A06C", Offset = "0x100A06C", VA = "0x100A06C")]
		private static int CalcScoreForSingleArgument(ParameterDescriptor desc, Type parameterType, DynValue arg, bool isOptional)
		{
			return default(int);
		}

		[Token(Token = "0x6000F6D")]
		[Address(RVA = "0x100A134", Offset = "0x100A134", VA = "0x100A134")]
		public Func<ScriptExecutionContext, CallbackArguments, DynValue> GetCallback(Script script, object obj)
		{
			return null;
		}

		[Token(Token = "0x6000F6E")]
		[Address(RVA = "0x100A224", Offset = "0x100A224", VA = "0x100A224", Slot = "4")]
		private void MoonSharp.Interpreter.Interop.BasicDescriptors.IOptimizableDescriptor.Optimize()
		{
		}

		[Token(Token = "0x6000F6F")]
		[Address(RVA = "0x100A588", Offset = "0x100A588", VA = "0x100A588")]
		public CallbackFunction GetCallbackFunction(Script script, [Optional] object obj)
		{
			return null;
		}

		[Token(Token = "0x6000F72")]
		[Address(RVA = "0x100A728", Offset = "0x100A728", VA = "0x100A728", Slot = "8")]
		public DynValue GetValue(Script script, object obj)
		{
			return null;
		}

		[Token(Token = "0x6000F73")]
		[Address(RVA = "0x100A7A8", Offset = "0x100A7A8", VA = "0x100A7A8", Slot = "9")]
		public void SetValue(Script script, object obj, DynValue value)
		{
		}

		[Token(Token = "0x6000F74")]
		[Address(RVA = "0x100A7B4", Offset = "0x100A7B4", VA = "0x100A7B4", Slot = "10")]
		public void PrepareForWiring(Table t)
		{
		}
	}
	[Token(Token = "0x2000224")]
	public class PropertyMemberDescriptor : IMemberDescriptor, IOptimizableDescriptor, IWireableDescriptor
	{
		[Token(Token = "0x4000B70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private MethodInfo m_Getter;

		[Token(Token = "0x4000B71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private MethodInfo m_Setter;

		[Token(Token = "0x4000B72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Func<object, object> m_OptimizedGetter;

		[Token(Token = "0x4000B73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Action<object, object> m_OptimizedSetter;

		[Token(Token = "0x170001D4")]
		public PropertyInfo PropertyInfo
		{
			[Token(Token = "0x6000F7D")]
			[Address(RVA = "0x100AE70", Offset = "0x100AE70", VA = "0x100AE70")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F7E")]
			[Address(RVA = "0x100AE78", Offset = "0x100AE78", VA = "0x100AE78")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001D5")]
		public InteropAccessMode AccessMode
		{
			[Token(Token = "0x6000F7F")]
			[Address(RVA = "0x100AE80", Offset = "0x100AE80", VA = "0x100AE80")]
			[CompilerGenerated]
			get
			{
				return default(InteropAccessMode);
			}
			[Token(Token = "0x6000F80")]
			[Address(RVA = "0x100AE88", Offset = "0x100AE88", VA = "0x100AE88")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001D6")]
		public bool IsStatic
		{
			[Token(Token = "0x6000F81")]
			[Address(RVA = "0x100AE90", Offset = "0x100AE90", VA = "0x100AE90", Slot = "4")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000F82")]
			[Address(RVA = "0x100AE98", Offset = "0x100AE98", VA = "0x100AE98")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001D7")]
		public string Name
		{
			[Token(Token = "0x6000F83")]
			[Address(RVA = "0x100AEA4", Offset = "0x100AEA4", VA = "0x100AEA4", Slot = "5")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F84")]
			[Address(RVA = "0x100AEAC", Offset = "0x100AEAC", VA = "0x100AEAC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001D8")]
		public bool CanRead
		{
			[Token(Token = "0x6000F85")]
			[Address(RVA = "0x100AEB4", Offset = "0x100AEB4", VA = "0x100AEB4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001D9")]
		public bool CanWrite
		{
			[Token(Token = "0x6000F86")]
			[Address(RVA = "0x100AEC4", Offset = "0x100AEC4", VA = "0x100AEC4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001DA")]
		public MemberDescriptorAccess MemberAccess
		{
			[Token(Token = "0x6000F8F")]
			[Address(RVA = "0x100C75C", Offset = "0x100C75C", VA = "0x100C75C", Slot = "6")]
			get
			{
				return default(MemberDescriptorAccess);
			}
		}

		[Token(Token = "0x6000F87")]
		[Address(RVA = "0x100AED4", Offset = "0x100AED4", VA = "0x100AED4")]
		public static PropertyMemberDescriptor TryCreateIfVisible(PropertyInfo pi, InteropAccessMode accessMode)
		{
			return null;
		}

		[Token(Token = "0x6000F88")]
		[Address(RVA = "0x100B104", Offset = "0x100B104", VA = "0x100B104")]
		private static PropertyMemberDescriptor TryCreate(PropertyInfo pi, InteropAccessMode accessMode, MethodInfo getter, MethodInfo setter)
		{
			return null;
		}

		[Token(Token = "0x6000F89")]
		[Address(RVA = "0x100B414", Offset = "0x100B414", VA = "0x100B414")]
		public PropertyMemberDescriptor(PropertyInfo pi, InteropAccessMode accessMode)
		{
		}

		[Token(Token = "0x6000F8A")]
		[Address(RVA = "0x100B1B0", Offset = "0x100B1B0", VA = "0x100B1B0")]
		public PropertyMemberDescriptor(PropertyInfo pi, InteropAccessMode accessMode, MethodInfo getter, MethodInfo setter)
		{
		}

		[Token(Token = "0x6000F8B")]
		[Address(RVA = "0x100C1C8", Offset = "0x100C1C8", VA = "0x100C1C8", Slot = "7")]
		public DynValue GetValue(Script script, object obj)
		{
			return null;
		}

		[Token(Token = "0x6000F8C")]
		[Address(RVA = "0x100B53C", Offset = "0x100B53C", VA = "0x100B53C")]
		internal void OptimizeGetter()
		{
		}

		[Token(Token = "0x6000F8D")]
		[Address(RVA = "0x100BA20", Offset = "0x100BA20", VA = "0x100BA20")]
		internal void OptimizeSetter()
		{
		}

		[Token(Token = "0x6000F8E")]
		[Address(RVA = "0x100C360", Offset = "0x100C360", VA = "0x100C360", Slot = "8")]
		public void SetValue(Script script, object obj, DynValue v)
		{
		}

		[Token(Token = "0x6000F90")]
		[Address(RVA = "0x100C7A4", Offset = "0x100C7A4", VA = "0x100C7A4", Slot = "9")]
		private void MoonSharp.Interpreter.Interop.BasicDescriptors.IOptimizableDescriptor.Optimize()
		{
		}

		[Token(Token = "0x6000F91")]
		[Address(RVA = "0x100C7BC", Offset = "0x100C7BC", VA = "0x100C7BC", Slot = "10")]
		public void PrepareForWiring(Table t)
		{
		}
	}
	[Token(Token = "0x2000225")]
	public class ValueTypeDefaultCtorMemberDescriptor : IOverloadableMemberDescriptor, IMemberDescriptor, IWireableDescriptor
	{
		[Token(Token = "0x170001DB")]
		public bool IsStatic
		{
			[Token(Token = "0x6000F92")]
			[Address(RVA = "0x100CB20", Offset = "0x100CB20", VA = "0x100CB20", Slot = "10")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001DC")]
		public string Name
		{
			[Token(Token = "0x6000F93")]
			[Address(RVA = "0x100CB28", Offset = "0x100CB28", VA = "0x100CB28", Slot = "11")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F94")]
			[Address(RVA = "0x100CB30", Offset = "0x100CB30", VA = "0x100CB30")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001DD")]
		public Type ValueTypeDefaultCtor
		{
			[Token(Token = "0x6000F95")]
			[Address(RVA = "0x100CB38", Offset = "0x100CB38", VA = "0x100CB38")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F96")]
			[Address(RVA = "0x100CB40", Offset = "0x100CB40", VA = "0x100CB40")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001DE")]
		public ParameterDescriptor[] Parameters
		{
			[Token(Token = "0x6000F97")]
			[Address(RVA = "0x100CB48", Offset = "0x100CB48", VA = "0x100CB48", Slot = "6")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F98")]
			[Address(RVA = "0x100CB50", Offset = "0x100CB50", VA = "0x100CB50")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001DF")]
		public Type ExtensionMethodType
		{
			[Token(Token = "0x6000F99")]
			[Address(RVA = "0x100CB58", Offset = "0x100CB58", VA = "0x100CB58", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001E0")]
		public Type VarArgsArrayType
		{
			[Token(Token = "0x6000F9A")]
			[Address(RVA = "0x100CB60", Offset = "0x100CB60", VA = "0x100CB60", Slot = "7")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001E1")]
		public Type VarArgsElementType
		{
			[Token(Token = "0x6000F9B")]
			[Address(RVA = "0x100CB68", Offset = "0x100CB68", VA = "0x100CB68", Slot = "8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001E2")]
		public string SortDiscriminant
		{
			[Token(Token = "0x6000F9E")]
			[Address(RVA = "0x100CD1C", Offset = "0x100CD1C", VA = "0x100CD1C", Slot = "9")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001E3")]
		public MemberDescriptorAccess MemberAccess
		{
			[Token(Token = "0x6000F9F")]
			[Address(RVA = "0x100CD5C", Offset = "0x100CD5C", VA = "0x100CD5C", Slot = "12")]
			get
			{
				return default(MemberDescriptorAccess);
			}
		}

		[Token(Token = "0x6000F9C")]
		[Address(RVA = "0x100CB70", Offset = "0x100CB70", VA = "0x100CB70")]
		public ValueTypeDefaultCtorMemberDescriptor(Type valueType)
		{
		}

		[Token(Token = "0x6000F9D")]
		[Address(RVA = "0x100CCDC", Offset = "0x100CCDC", VA = "0x100CCDC", Slot = "4")]
		public DynValue Execute(Script script, object obj, ScriptExecutionContext context, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x6000FA0")]
		[Address(RVA = "0x100CD64", Offset = "0x100CD64", VA = "0x100CD64", Slot = "13")]
		public DynValue GetValue(Script script, object obj)
		{
			return null;
		}

		[Token(Token = "0x6000FA1")]
		[Address(RVA = "0x100CDA4", Offset = "0x100CDA4", VA = "0x100CDA4", Slot = "14")]
		public void SetValue(Script script, object obj, DynValue value)
		{
		}

		[Token(Token = "0x6000FA2")]
		[Address(RVA = "0x100CDB0", Offset = "0x100CDB0", VA = "0x100CDB0", Slot = "15")]
		public void PrepareForWiring(Table t)
		{
		}
	}
	[Token(Token = "0x2000226")]
	public class StandardEnumUserDataDescriptor : DispatchingUserDataDescriptor
	{
		[Token(Token = "0x4000B7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Func<object, ulong> m_EnumToULong;

		[Token(Token = "0x4000B7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Func<ulong, object> m_ULongToEnum;

		[Token(Token = "0x4000B7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Func<object, long> m_EnumToLong;

		[Token(Token = "0x4000B7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Func<long, object> m_LongToEnum;

		[Token(Token = "0x170001E4")]
		public Type UnderlyingType
		{
			[Token(Token = "0x6000FA3")]
			[Address(RVA = "0x100CEE8", Offset = "0x100CEE8", VA = "0x100CEE8")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FA4")]
			[Address(RVA = "0x100CEF0", Offset = "0x100CEF0", VA = "0x100CEF0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001E5")]
		public bool IsUnsigned
		{
			[Token(Token = "0x6000FA5")]
			[Address(RVA = "0x100CEF8", Offset = "0x100CEF8", VA = "0x100CEF8")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000FA6")]
			[Address(RVA = "0x100CF00", Offset = "0x100CF00", VA = "0x100CF00")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001E6")]
		public bool IsFlags
		{
			[Token(Token = "0x6000FA7")]
			[Address(RVA = "0x100CF0C", Offset = "0x100CF0C", VA = "0x100CF0C")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000FA8")]
			[Address(RVA = "0x100CF14", Offset = "0x100CF14", VA = "0x100CF14")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000FA9")]
		[Address(RVA = "0x100CF20", Offset = "0x100CF20", VA = "0x100CF20")]
		public StandardEnumUserDataDescriptor(Type enumType, [Optional] string friendlyName, [Optional] string[] names, [Optional] object[] values, [Optional] Type underlyingType)
		{
		}

		[Token(Token = "0x6000FAA")]
		[Address(RVA = "0x100D290", Offset = "0x100D290", VA = "0x100D290")]
		private void FillMemberList(string[] names, object[] values)
		{
		}

		[Token(Token = "0x6000FAB")]
		[Address(RVA = "0x100D720", Offset = "0x100D720", VA = "0x100D720")]
		private void AddEnumMethod(string name, DynValue dynValue)
		{
		}

		[Token(Token = "0x6000FAC")]
		[Address(RVA = "0x100D7EC", Offset = "0x100D7EC", VA = "0x100D7EC")]
		private long GetValueSigned(DynValue dv)
		{
			return default(long);
		}

		[Token(Token = "0x6000FAD")]
		[Address(RVA = "0x100DFDC", Offset = "0x100DFDC", VA = "0x100DFDC")]
		private ulong GetValueUnsigned(DynValue dv)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000FAE")]
		[Address(RVA = "0x100E7C4", Offset = "0x100E7C4", VA = "0x100E7C4")]
		private DynValue CreateValueSigned(long value)
		{
			return null;
		}

		[Token(Token = "0x6000FAF")]
		[Address(RVA = "0x100E854", Offset = "0x100E854", VA = "0x100E854")]
		private DynValue CreateValueUnsigned(ulong value)
		{
			return null;
		}

		[Token(Token = "0x6000FB0")]
		[Address(RVA = "0x100D8F8", Offset = "0x100D8F8", VA = "0x100D8F8")]
		private void CreateSignedConversionFunctions()
		{
		}

		[Token(Token = "0x6000FB1")]
		[Address(RVA = "0x100E0E0", Offset = "0x100E0E0", VA = "0x100E0E0")]
		private void CreateUnsignedConversionFunctions()
		{
		}

		[Token(Token = "0x6000FB2")]
		[Address(RVA = "0x100E8E4", Offset = "0x100E8E4", VA = "0x100E8E4")]
		private DynValue PerformBinaryOperationS(string funcName, ScriptExecutionContext ctx, CallbackArguments args, Func<long, long, DynValue> operation)
		{
			return null;
		}

		[Token(Token = "0x6000FB3")]
		[Address(RVA = "0x100EA00", Offset = "0x100EA00", VA = "0x100EA00")]
		private DynValue PerformBinaryOperationU(string funcName, ScriptExecutionContext ctx, CallbackArguments args, Func<ulong, ulong, DynValue> operation)
		{
			return null;
		}

		[Token(Token = "0x6000FB4")]
		[Address(RVA = "0x100EB1C", Offset = "0x100EB1C", VA = "0x100EB1C")]
		private DynValue PerformBinaryOperationS(string funcName, ScriptExecutionContext ctx, CallbackArguments args, Func<long, long, long> operation)
		{
			return null;
		}

		[Token(Token = "0x6000FB5")]
		[Address(RVA = "0x100EC0C", Offset = "0x100EC0C", VA = "0x100EC0C")]
		private DynValue PerformBinaryOperationU(string funcName, ScriptExecutionContext ctx, CallbackArguments args, Func<ulong, ulong, ulong> operation)
		{
			return null;
		}

		[Token(Token = "0x6000FB6")]
		[Address(RVA = "0x100ECFC", Offset = "0x100ECFC", VA = "0x100ECFC")]
		private DynValue PerformUnaryOperationS(string funcName, ScriptExecutionContext ctx, CallbackArguments args, Func<long, long> operation)
		{
			return null;
		}

		[Token(Token = "0x6000FB7")]
		[Address(RVA = "0x100EDF4", Offset = "0x100EDF4", VA = "0x100EDF4")]
		private DynValue PerformUnaryOperationU(string funcName, ScriptExecutionContext ctx, CallbackArguments args, Func<ulong, ulong> operation)
		{
			return null;
		}

		[Token(Token = "0x6000FB8")]
		[Address(RVA = "0x100EEEC", Offset = "0x100EEEC", VA = "0x100EEEC")]
		internal DynValue Callback_Or(ScriptExecutionContext ctx, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x6000FB9")]
		[Address(RVA = "0x100F0AC", Offset = "0x100F0AC", VA = "0x100F0AC")]
		internal DynValue Callback_And(ScriptExecutionContext ctx, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x6000FBA")]
		[Address(RVA = "0x100F26C", Offset = "0x100F26C", VA = "0x100F26C")]
		internal DynValue Callback_Xor(ScriptExecutionContext ctx, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x6000FBB")]
		[Address(RVA = "0x100F42C", Offset = "0x100F42C", VA = "0x100F42C")]
		internal DynValue Callback_BwNot(ScriptExecutionContext ctx, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x6000FBC")]
		[Address(RVA = "0x100F5EC", Offset = "0x100F5EC", VA = "0x100F5EC")]
		internal DynValue Callback_HasAll(ScriptExecutionContext ctx, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x6000FBD")]
		[Address(RVA = "0x100F7AC", Offset = "0x100F7AC", VA = "0x100F7AC")]
		internal DynValue Callback_HasAny(ScriptExecutionContext ctx, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x6000FBE")]
		[Address(RVA = "0x100F96C", Offset = "0x100F96C", VA = "0x100F96C", Slot = "19")]
		public override bool IsTypeCompatible(Type type, object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FBF")]
		[Address(RVA = "0x100FA00", Offset = "0x100FA00", VA = "0x100FA00", Slot = "18")]
		public override DynValue MetaIndex(Script script, object obj, string metaname)
		{
			return null;
		}
	}
	[Token(Token = "0x200022A")]
	public class StandardGenericsUserDataDescriptor : IUserDataDescriptor, IGeneratorUserDataDescriptor
	{
		[Token(Token = "0x170001E7")]
		public InteropAccessMode AccessMode
		{
			[Token(Token = "0x6000FE2")]
			[Address(RVA = "0xEC9DBC", Offset = "0xEC9DBC", VA = "0xEC9DBC")]
			[CompilerGenerated]
			get
			{
				return default(InteropAccessMode);
			}
			[Token(Token = "0x6000FE3")]
			[Address(RVA = "0xEC9DC4", Offset = "0xEC9DC4", VA = "0xEC9DC4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001E8")]
		public string Name
		{
			[Token(Token = "0x6000FE5")]
			[Address(RVA = "0xEC9ECC", Offset = "0xEC9ECC", VA = "0xEC9ECC", Slot = "4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FE6")]
			[Address(RVA = "0xEC9ED4", Offset = "0xEC9ED4", VA = "0xEC9ED4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001E9")]
		public Type Type
		{
			[Token(Token = "0x6000FE7")]
			[Address(RVA = "0xEC9EDC", Offset = "0xEC9EDC", VA = "0xEC9EDC", Slot = "5")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FE8")]
			[Address(RVA = "0xEC9EE4", Offset = "0xEC9EE4", VA = "0xEC9EE4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000FE4")]
		[Address(RVA = "0xEC9DCC", Offset = "0xEC9DCC", VA = "0xEC9DCC")]
		public StandardGenericsUserDataDescriptor(Type type, InteropAccessMode accessMode)
		{
		}

		[Token(Token = "0x6000FE9")]
		[Address(RVA = "0xEC9EEC", Offset = "0xEC9EEC", VA = "0xEC9EEC", Slot = "6")]
		public DynValue Index(Script script, object obj, DynValue index, bool isDirectIndexing)
		{
			return null;
		}

		[Token(Token = "0x6000FEA")]
		[Address(RVA = "0xEC9EF4", Offset = "0xEC9EF4", VA = "0xEC9EF4", Slot = "7")]
		public bool SetIndex(Script script, object obj, DynValue index, DynValue value, bool isDirectIndexing)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FEB")]
		[Address(RVA = "0xEC9EFC", Offset = "0xEC9EFC", VA = "0xEC9EFC", Slot = "8")]
		public string AsString(object obj)
		{
			return null;
		}

		[Token(Token = "0x6000FEC")]
		[Address(RVA = "0xEC9F1C", Offset = "0xEC9F1C", VA = "0xEC9F1C", Slot = "9")]
		public DynValue MetaIndex(Script script, object obj, string metaname)
		{
			return null;
		}

		[Token(Token = "0x6000FED")]
		[Address(RVA = "0xEC9F24", Offset = "0xEC9F24", VA = "0xEC9F24", Slot = "10")]
		public bool IsTypeCompatible(Type type, object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FEE")]
		[Address(RVA = "0xEC9FD8", Offset = "0xEC9FD8", VA = "0xEC9FD8", Slot = "11")]
		public IUserDataDescriptor Generate(Type type)
		{
			return null;
		}
	}
	[Token(Token = "0x200022B")]
	public class StandardUserDataDescriptor : DispatchingUserDataDescriptor, IWireableDescriptor
	{
		[Token(Token = "0x170001EA")]
		public InteropAccessMode AccessMode
		{
			[Token(Token = "0x6000FEF")]
			[Address(RVA = "0xECA0F8", Offset = "0xECA0F8", VA = "0xECA0F8")]
			[CompilerGenerated]
			get
			{
				return default(InteropAccessMode);
			}
			[Token(Token = "0x6000FF0")]
			[Address(RVA = "0xECA100", Offset = "0xECA100", VA = "0xECA100")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000FF1")]
		[Address(RVA = "0xECA108", Offset = "0xECA108", VA = "0xECA108")]
		public StandardUserDataDescriptor(Type type, InteropAccessMode accessMode, [Optional] string friendlyName)
		{
		}

		[Token(Token = "0x6000FF2")]
		[Address(RVA = "0xECA3F8", Offset = "0xECA3F8", VA = "0xECA3F8")]
		private void FillMemberList()
		{
		}

		[Token(Token = "0x6000FF3")]
		[Address(RVA = "0xECB690", Offset = "0xECB690", VA = "0xECB690", Slot = "20")]
		public void PrepareForWiring(Table t)
		{
		}

		[Token(Token = "0x6000FF4")]
		[Address(RVA = "0xECB97C", Offset = "0xECB97C", VA = "0xECB97C")]
		private void Serialize(Table t, IEnumerable<KeyValuePair<string, IMemberDescriptor>> members)
		{
		}
	}
	[Token(Token = "0x200022D")]
	public enum UserDataMemberType
	{
		[Token(Token = "0x4000BA6")]
		Constructor,
		[Token(Token = "0x4000BA7")]
		Method,
		[Token(Token = "0x4000BA8")]
		Property,
		[Token(Token = "0x4000BA9")]
		Field,
		[Token(Token = "0x4000BAA")]
		Event
	}
	[Token(Token = "0x200022E")]
	internal static class NamespaceDoc
	{
	}
}
namespace MoonSharp.Interpreter.Interop.UserDataRegistries
{
	[Token(Token = "0x200022F")]
	internal class ExtensionMethodsRegistry
	{
		[Token(Token = "0x2000230")]
		private class UnresolvedGenericMethod
		{
			[Token(Token = "0x4000BAF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public readonly MethodInfo Method;

			[Token(Token = "0x4000BB0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public readonly InteropAccessMode AccessMode;

			[Token(Token = "0x4000BB1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public readonly HashSet<Type> AlreadyAddedTypes;

			[Token(Token = "0x6001001")]
			[Address(RVA = "0xECC6A8", Offset = "0xECC6A8", VA = "0xECC6A8")]
			public UnresolvedGenericMethod(MethodInfo mi, InteropAccessMode mode)
			{
			}
		}

		[Token(Token = "0x4000BAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static object s_Lock;

		[Token(Token = "0x4000BAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static MultiDictionary<string, IOverloadableMemberDescriptor> s_Registry;

		[Token(Token = "0x4000BAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static MultiDictionary<string, UnresolvedGenericMethod> s_UnresolvedGenericsRegistry;

		[Token(Token = "0x4000BAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static int s_ExtensionMethodChangeVersion;

		[Token(Token = "0x6000FF8")]
		[Address(RVA = "0xECBEB8", Offset = "0xECBEB8", VA = "0xECBEB8")]
		public static void RegisterExtensionType(Type type, InteropAccessMode mode = InteropAccessMode.Default)
		{
		}

		[Token(Token = "0x6000FF9")]
		[Address(RVA = "0xECC754", Offset = "0xECC754", VA = "0xECC754")]
		private static object FrameworkGetMethods()
		{
			return null;
		}

		[Token(Token = "0x6000FFA")]
		[Address(RVA = "0xECC794", Offset = "0xECC794", VA = "0xECC794")]
		public static IEnumerable<IOverloadableMemberDescriptor> GetExtensionMethodsByName(string name)
		{
			return null;
		}

		[Token(Token = "0x6000FFB")]
		[Address(RVA = "0xECC934", Offset = "0xECC934", VA = "0xECC934")]
		public static int GetExtensionMethodsChangeVersion()
		{
			return default(int);
		}

		[Token(Token = "0x6000FFC")]
		[Address(RVA = "0xECC98C", Offset = "0xECC98C", VA = "0xECC98C")]
		public static List<IOverloadableMemberDescriptor> GetExtensionMethodsByNameAndType(string name, Type extendedType)
		{
			return null;
		}

		[Token(Token = "0x6000FFD")]
		[Address(RVA = "0xECD3B8", Offset = "0xECD3B8", VA = "0xECD3B8")]
		private static MethodInfo InstantiateMethodInfo(MethodInfo mi, Type extensionType, Type genericType, Type extendedType)
		{
			return null;
		}

		[Token(Token = "0x6000FFE")]
		[Address(RVA = "0xECCF78", Offset = "0xECCF78", VA = "0xECCF78")]
		private static Type GetGenericMatch(Type extensionType, Type extendedType)
		{
			return null;
		}

		[Token(Token = "0x6000FFF")]
		[Address(RVA = "0xECD4CC", Offset = "0xECD4CC", VA = "0xECD4CC")]
		public ExtensionMethodsRegistry()
		{
		}
	}
	[Token(Token = "0x2000233")]
	internal static class TypeDescriptorRegistry
	{
		[Token(Token = "0x4000BB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static object s_Lock;

		[Token(Token = "0x4000BB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Dictionary<Type, IUserDataDescriptor> s_TypeRegistry;

		[Token(Token = "0x4000BB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static Dictionary<Type, IUserDataDescriptor> s_TypeRegistryHistory;

		[Token(Token = "0x4000BB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static InteropAccessMode s_DefaultAccessMode;

		[Token(Token = "0x170001EB")]
		internal static InteropAccessMode DefaultAccessMode
		{
			[Token(Token = "0x600100A")]
			[Address(RVA = "0xECE804", Offset = "0xECE804", VA = "0xECE804")]
			get
			{
				return default(InteropAccessMode);
			}
			[Token(Token = "0x600100B")]
			[Address(RVA = "0xECE85C", Offset = "0xECE85C", VA = "0xECE85C")]
			set
			{
			}
		}

		[Token(Token = "0x170001EC")]
		public static IEnumerable<KeyValuePair<Type, IUserDataDescriptor>> RegisteredTypes
		{
			[Token(Token = "0x6001013")]
			[Address(RVA = "0xED019C", Offset = "0xED019C", VA = "0xED019C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001ED")]
		public static IEnumerable<KeyValuePair<Type, IUserDataDescriptor>> RegisteredTypesHistory
		{
			[Token(Token = "0x6001014")]
			[Address(RVA = "0xED02D8", Offset = "0xED02D8", VA = "0xED02D8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001EE")]
		internal static IRegistrationPolicy RegistrationPolicy
		{
			[Token(Token = "0x6001015")]
			[Address(RVA = "0xED0414", Offset = "0xED0414", VA = "0xED0414")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001016")]
			[Address(RVA = "0xED046C", Offset = "0xED046C", VA = "0xED046C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6001007")]
		[Address(RVA = "0xECD87C", Offset = "0xECD87C", VA = "0xECD87C")]
		internal static void RegisterAssembly([Optional] Assembly asm, bool includeExtensionTypes = false)
		{
		}

		[Token(Token = "0x6001008")]
		[Address(RVA = "0xECE34C", Offset = "0xECE34C", VA = "0xECE34C")]
		internal static bool IsTypeRegistered(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6001009")]
		[Address(RVA = "0xECE49C", Offset = "0xECE49C", VA = "0xECE49C")]
		internal static void UnregisterType(Type t)
		{
		}

		[Token(Token = "0x600100C")]
		[Address(RVA = "0xECE90C", Offset = "0xECE90C", VA = "0xECE90C")]
		internal static IUserDataDescriptor RegisterProxyType_Impl(IProxyFactory proxyFactory, InteropAccessMode accessMode, string friendlyName)
		{
			return null;
		}

		[Token(Token = "0x600100D")]
		[Address(RVA = "0xECEAB8", Offset = "0xECEAB8", VA = "0xECEAB8")]
		internal static IUserDataDescriptor RegisterType_Impl(Type type, InteropAccessMode accessMode, string friendlyName, IUserDataDescriptor descriptor)
		{
			return null;
		}

		[Token(Token = "0x600100E")]
		[Address(RVA = "0xECE650", Offset = "0xECE650", VA = "0xECE650")]
		private static IUserDataDescriptor PerformRegistration(Type type, IUserDataDescriptor newDescriptor, IUserDataDescriptor oldDescriptor)
		{
			return null;
		}

		[Token(Token = "0x600100F")]
		[Address(RVA = "0xECF18C", Offset = "0xECF18C", VA = "0xECF18C")]
		internal static InteropAccessMode ResolveDefaultAccessModeForType(InteropAccessMode accessMode, Type type)
		{
			return default(InteropAccessMode);
		}

		[Token(Token = "0x6001010")]
		[Address(RVA = "0xECF45C", Offset = "0xECF45C", VA = "0xECF45C")]
		internal static IUserDataDescriptor GetDescriptorForType(Type type, bool searchInterfaces)
		{
			return null;
		}

		[Token(Token = "0x6001011")]
		[Address(RVA = "0xED015C", Offset = "0xED015C", VA = "0xED015C")]
		private static bool FrameworkIsAssignableFrom(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6001012")]
		[Address(RVA = "0xECF2C0", Offset = "0xECF2C0", VA = "0xECF2C0")]
		public static bool IsTypeBlacklisted(Type t)
		{
			return default(bool);
		}
	}
}
namespace MoonSharp.Interpreter.Interop.StandardDescriptors
{
	[Token(Token = "0x2000236")]
	internal class EventFacade : IUserDataType
	{
		[Token(Token = "0x4000BC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Func<object, ScriptExecutionContext, CallbackArguments, DynValue> m_AddCallback;

		[Token(Token = "0x4000BC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Func<object, ScriptExecutionContext, CallbackArguments, DynValue> m_RemoveCallback;

		[Token(Token = "0x4000BC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private object m_Object;

		[Token(Token = "0x6001023")]
		[Address(RVA = "0xED0C18", Offset = "0xED0C18", VA = "0xED0C18")]
		public EventFacade(EventMemberDescriptor parent, object obj)
		{
		}

		[Token(Token = "0x6001024")]
		[Address(RVA = "0xED0D0C", Offset = "0xED0D0C", VA = "0xED0D0C")]
		public EventFacade(Func<object, ScriptExecutionContext, CallbackArguments, DynValue> addCallback, Func<object, ScriptExecutionContext, CallbackArguments, DynValue> removeCallback, object obj)
		{
		}

		[Token(Token = "0x6001025")]
		[Address(RVA = "0xED0D6C", Offset = "0xED0D6C", VA = "0xED0D6C", Slot = "4")]
		public DynValue Index(Script script, DynValue index, bool isDirectIndexing)
		{
			return null;
		}

		[Token(Token = "0x6001026")]
		[Address(RVA = "0xED0F04", Offset = "0xED0F04", VA = "0xED0F04", Slot = "5")]
		public bool SetIndex(Script script, DynValue index, DynValue value, bool isDirectIndexing)
		{
			return default(bool);
		}

		[Token(Token = "0x6001027")]
		[Address(RVA = "0xED0F54", Offset = "0xED0F54", VA = "0xED0F54", Slot = "6")]
		public DynValue MetaIndex(Script script, string metaname)
		{
			return null;
		}
	}
}
namespace MoonSharp.Interpreter.Interop.StandardDescriptors.HardwiredDescriptors
{
	[Token(Token = "0x2000237")]
	public sealed class DefaultValue
	{
		[Token(Token = "0x4000BC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly DefaultValue Instance;

		[Token(Token = "0x600102A")]
		[Address(RVA = "0xED0FBC", Offset = "0xED0FBC", VA = "0xED0FBC")]
		public DefaultValue()
		{
		}
	}
	[Token(Token = "0x2000238")]
	public abstract class HardwiredMemberDescriptor : IMemberDescriptor
	{
		[Token(Token = "0x170001EF")]
		public Type MemberType
		{
			[Token(Token = "0x600102C")]
			[Address(RVA = "0xED1034", Offset = "0xED1034", VA = "0xED1034")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600102D")]
			[Address(RVA = "0xED103C", Offset = "0xED103C", VA = "0xED103C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001F0")]
		public bool IsStatic
		{
			[Token(Token = "0x600102F")]
			[Address(RVA = "0xED10A4", Offset = "0xED10A4", VA = "0xED10A4", Slot = "4")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001030")]
			[Address(RVA = "0xED10AC", Offset = "0xED10AC", VA = "0xED10AC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001F1")]
		public string Name
		{
			[Token(Token = "0x6001031")]
			[Address(RVA = "0xED10B8", Offset = "0xED10B8", VA = "0xED10B8", Slot = "5")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001032")]
			[Address(RVA = "0xED10C0", Offset = "0xED10C0", VA = "0xED10C0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001F2")]
		public MemberDescriptorAccess MemberAccess
		{
			[Token(Token = "0x6001033")]
			[Address(RVA = "0xED10C8", Offset = "0xED10C8", VA = "0xED10C8", Slot = "6")]
			[CompilerGenerated]
			get
			{
				return default(MemberDescriptorAccess);
			}
			[Token(Token = "0x6001034")]
			[Address(RVA = "0xED10D0", Offset = "0xED10D0", VA = "0xED10D0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x600102E")]
		[Address(RVA = "0xED1044", Offset = "0xED1044", VA = "0xED1044")]
		protected HardwiredMemberDescriptor(Type memberType, string name, bool isStatic, MemberDescriptorAccess access)
		{
		}

		[Token(Token = "0x6001035")]
		[Address(RVA = "0xED10D8", Offset = "0xED10D8", VA = "0xED10D8", Slot = "7")]
		public DynValue GetValue(Script script, object obj)
		{
			return null;
		}

		[Token(Token = "0x6001036")]
		[Address(RVA = "0xED1864", Offset = "0xED1864", VA = "0xED1864", Slot = "8")]
		public void SetValue(Script script, object obj, DynValue value)
		{
		}

		[Token(Token = "0x6001037")]
		[Address(RVA = "0xED2278", Offset = "0xED2278", VA = "0xED2278", Slot = "9")]
		protected virtual object GetValueImpl(Script script, object obj)
		{
			return null;
		}

		[Token(Token = "0x6001038")]
		[Address(RVA = "0xED22E0", Offset = "0xED22E0", VA = "0xED22E0", Slot = "10")]
		protected virtual void SetValueImpl(Script script, object obj, object value)
		{
		}
	}
	[Token(Token = "0x2000239")]
	public abstract class HardwiredMethodMemberDescriptor : FunctionMemberDescriptorBase
	{
		[Token(Token = "0x6001039")]
		[Address(RVA = "0xED2348", Offset = "0xED2348", VA = "0xED2348", Slot = "16")]
		public override DynValue Execute(Script script, object obj, ScriptExecutionContext context, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x600103A")]
		[Address(RVA = "0xED2440", Offset = "0xED2440", VA = "0xED2440")]
		private int CalcArgsCount(object[] pars)
		{
			return default(int);
		}

		[Token(Token = "0x600103B")]
		protected abstract object Invoke(Script script, object obj, object[] pars, int argscount);

		[Token(Token = "0x600103C")]
		[Address(RVA = "0xED2504", Offset = "0xED2504", VA = "0xED2504")]
		protected HardwiredMethodMemberDescriptor()
		{
		}
	}
	[Token(Token = "0x200023A")]
	public abstract class HardwiredUserDataDescriptor : DispatchingUserDataDescriptor
	{
		[Token(Token = "0x600103D")]
		[Address(RVA = "0xED250C", Offset = "0xED250C", VA = "0xED250C")]
		protected HardwiredUserDataDescriptor(Type T)
		{
		}
	}
}
namespace MoonSharp.Interpreter.Interop.RegistrationPolicies
{
	[Token(Token = "0x200023B")]
	public class AutomaticRegistrationPolicy : DefaultRegistrationPolicy
	{
		[Token(Token = "0x600103E")]
		[Address(RVA = "0xED2588", Offset = "0xED2588", VA = "0xED2588", Slot = "6")]
		public override bool AllowTypeAutoRegistration(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x600103F")]
		[Address(RVA = "0xED2590", Offset = "0xED2590", VA = "0xED2590")]
		public AutomaticRegistrationPolicy()
		{
		}
	}
	[Token(Token = "0x200023C")]
	public class DefaultRegistrationPolicy : IRegistrationPolicy
	{
		[Token(Token = "0x6001040")]
		[Address(RVA = "0xED25A0", Offset = "0xED25A0", VA = "0xED25A0", Slot = "4")]
		public IUserDataDescriptor HandleRegistration(IUserDataDescriptor newDescriptor, IUserDataDescriptor oldDescriptor)
		{
			return null;
		}

		[Token(Token = "0x6001041")]
		[Address(RVA = "0xED25B8", Offset = "0xED25B8", VA = "0xED25B8", Slot = "6")]
		public virtual bool AllowTypeAutoRegistration(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6001042")]
		[Address(RVA = "0xED2598", Offset = "0xED2598", VA = "0xED2598")]
		public DefaultRegistrationPolicy()
		{
		}
	}
	[Token(Token = "0x200023D")]
	public interface IRegistrationPolicy
	{
		[Token(Token = "0x6001043")]
		IUserDataDescriptor HandleRegistration(IUserDataDescriptor newDescriptor, IUserDataDescriptor oldDescriptor);

		[Token(Token = "0x6001044")]
		bool AllowTypeAutoRegistration(Type type);
	}
	[Token(Token = "0x200023E")]
	public class PermanentRegistrationPolicy : IRegistrationPolicy
	{
		[Token(Token = "0x6001045")]
		[Address(RVA = "0xED25C0", Offset = "0xED25C0", VA = "0xED25C0", Slot = "4")]
		public IUserDataDescriptor HandleRegistration(IUserDataDescriptor newDescriptor, IUserDataDescriptor oldDescriptor)
		{
			return null;
		}

		[Token(Token = "0x6001046")]
		[Address(RVA = "0xED25CC", Offset = "0xED25CC", VA = "0xED25CC", Slot = "5")]
		public bool AllowTypeAutoRegistration(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6001047")]
		[Address(RVA = "0xED25D4", Offset = "0xED25D4", VA = "0xED25D4")]
		public PermanentRegistrationPolicy()
		{
		}
	}
}
namespace MoonSharp.Interpreter.Interop.LuaStateInterop
{
	[Token(Token = "0x200023F")]
	public class CharPtr
	{
		[Token(Token = "0x4000BCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public char[] chars;

		[Token(Token = "0x4000BCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int index;

		[Token(Token = "0x170001F3")]
		public char this[int offset]
		{
			[Token(Token = "0x6001048")]
			[Address(RVA = "0xED25DC", Offset = "0xED25DC", VA = "0xED25DC")]
			get
			{
				return default(char);
			}
			[Token(Token = "0x6001049")]
			[Address(RVA = "0xED2614", Offset = "0xED2614", VA = "0xED2614")]
			set
			{
			}
		}

		[Token(Token = "0x170001F4")]
		public char this[uint offset]
		{
			[Token(Token = "0x600104A")]
			[Address(RVA = "0xED264C", Offset = "0xED264C", VA = "0xED264C")]
			get
			{
				return default(char);
			}
			[Token(Token = "0x600104B")]
			[Address(RVA = "0xED26B4", Offset = "0xED26B4", VA = "0xED26B4")]
			set
			{
			}
		}

		[Token(Token = "0x170001F5")]
		public char this[long offset]
		{
			[Token(Token = "0x600104C")]
			[Address(RVA = "0xED2728", Offset = "0xED2728", VA = "0xED2728")]
			get
			{
				return default(char);
			}
			[Token(Token = "0x600104D")]
			[Address(RVA = "0xED2760", Offset = "0xED2760", VA = "0xED2760")]
			set
			{
			}
		}

		[Token(Token = "0x600104E")]
		[Address(RVA = "0xED2798", Offset = "0xED2798", VA = "0xED2798")]
		public static implicit operator CharPtr(string str)
		{
			return null;
		}

		[Token(Token = "0x600104F")]
		[Address(RVA = "0xED2884", Offset = "0xED2884", VA = "0xED2884")]
		public static implicit operator CharPtr(char[] chars)
		{
			return null;
		}

		[Token(Token = "0x6001050")]
		[Address(RVA = "0xED2930", Offset = "0xED2930", VA = "0xED2930")]
		public static implicit operator CharPtr(byte[] bytes)
		{
			return null;
		}

		[Token(Token = "0x6001051")]
		[Address(RVA = "0xED2A60", Offset = "0xED2A60", VA = "0xED2A60")]
		public CharPtr()
		{
		}

		[Token(Token = "0x6001052")]
		[Address(RVA = "0xED27F8", Offset = "0xED27F8", VA = "0xED27F8")]
		public CharPtr(string str)
		{
		}

		[Token(Token = "0x6001053")]
		[Address(RVA = "0xED2A8C", Offset = "0xED2A8C", VA = "0xED2A8C")]
		public CharPtr(CharPtr ptr)
		{
		}

		[Token(Token = "0x6001054")]
		[Address(RVA = "0xED2AD0", Offset = "0xED2AD0", VA = "0xED2AD0")]
		public CharPtr(CharPtr ptr, int index)
		{
		}

		[Token(Token = "0x6001055")]
		[Address(RVA = "0xED28F8", Offset = "0xED28F8", VA = "0xED28F8")]
		public CharPtr(char[] chars)
		{
		}

		[Token(Token = "0x6001056")]
		[Address(RVA = "0xED2B14", Offset = "0xED2B14", VA = "0xED2B14")]
		public CharPtr(char[] chars, int index)
		{
		}

		[Token(Token = "0x6001057")]
		[Address(RVA = "0xED2990", Offset = "0xED2990", VA = "0xED2990")]
		public CharPtr(byte[] bytes)
		{
		}

		[Token(Token = "0x6001058")]
		[Address(RVA = "0xED2B50", Offset = "0xED2B50", VA = "0xED2B50")]
		public CharPtr(IntPtr ptr)
		{
		}

		[Token(Token = "0x6001059")]
		[Address(RVA = "0xED2BBC", Offset = "0xED2BBC", VA = "0xED2BBC")]
		public static CharPtr operator +(CharPtr ptr, int offset)
		{
			return null;
		}

		[Token(Token = "0x600105A")]
		[Address(RVA = "0xED2C4C", Offset = "0xED2C4C", VA = "0xED2C4C")]
		public static CharPtr operator -(CharPtr ptr, int offset)
		{
			return null;
		}

		[Token(Token = "0x600105B")]
		[Address(RVA = "0xED2CDC", Offset = "0xED2CDC", VA = "0xED2CDC")]
		public static CharPtr operator +(CharPtr ptr, uint offset)
		{
			return null;
		}

		[Token(Token = "0x600105C")]
		[Address(RVA = "0xED2D6C", Offset = "0xED2D6C", VA = "0xED2D6C")]
		public static CharPtr operator -(CharPtr ptr, uint offset)
		{
			return null;
		}

		[Token(Token = "0x600105D")]
		[Address(RVA = "0xED2DFC", Offset = "0xED2DFC", VA = "0xED2DFC")]
		public void inc()
		{
		}

		[Token(Token = "0x600105E")]
		[Address(RVA = "0xED2E0C", Offset = "0xED2E0C", VA = "0xED2E0C")]
		public void dec()
		{
		}

		[Token(Token = "0x600105F")]
		[Address(RVA = "0xED2E1C", Offset = "0xED2E1C", VA = "0xED2E1C")]
		public CharPtr next()
		{
			return null;
		}

		[Token(Token = "0x6001060")]
		[Address(RVA = "0xED2EA4", Offset = "0xED2EA4", VA = "0xED2EA4")]
		public CharPtr prev()
		{
			return null;
		}

		[Token(Token = "0x6001061")]
		[Address(RVA = "0xED2F2C", Offset = "0xED2F2C", VA = "0xED2F2C")]
		public CharPtr add(int ofs)
		{
			return null;
		}

		[Token(Token = "0x6001062")]
		[Address(RVA = "0xED2FB8", Offset = "0xED2FB8", VA = "0xED2FB8")]
		public CharPtr sub(int ofs)
		{
			return null;
		}

		[Token(Token = "0x6001063")]
		[Address(RVA = "0xED3044", Offset = "0xED3044", VA = "0xED3044")]
		public static bool operator ==(CharPtr ptr, char ch)
		{
			return default(bool);
		}

		[Token(Token = "0x6001064")]
		[Address(RVA = "0xED3070", Offset = "0xED3070", VA = "0xED3070")]
		public static bool operator ==(char ch, CharPtr ptr)
		{
			return default(bool);
		}

		[Token(Token = "0x6001065")]
		[Address(RVA = "0xED30A0", Offset = "0xED30A0", VA = "0xED30A0")]
		public static bool operator !=(CharPtr ptr, char ch)
		{
			return default(bool);
		}

		[Token(Token = "0x6001066")]
		[Address(RVA = "0xED30CC", Offset = "0xED30CC", VA = "0xED30CC")]
		public static bool operator !=(char ch, CharPtr ptr)
		{
			return default(bool);
		}

		[Token(Token = "0x6001067")]
		[Address(RVA = "0xED30FC", Offset = "0xED30FC", VA = "0xED30FC")]
		public static CharPtr operator +(CharPtr ptr1, CharPtr ptr2)
		{
			return null;
		}

		[Token(Token = "0x6001068")]
		[Address(RVA = "0xED324C", Offset = "0xED324C", VA = "0xED324C")]
		public static int operator -(CharPtr ptr1, CharPtr ptr2)
		{
			return default(int);
		}

		[Token(Token = "0x6001069")]
		[Address(RVA = "0xED3270", Offset = "0xED3270", VA = "0xED3270")]
		public static bool operator <(CharPtr ptr1, CharPtr ptr2)
		{
			return default(bool);
		}

		[Token(Token = "0x600106A")]
		[Address(RVA = "0xED3298", Offset = "0xED3298", VA = "0xED3298")]
		public static bool operator <=(CharPtr ptr1, CharPtr ptr2)
		{
			return default(bool);
		}

		[Token(Token = "0x600106B")]
		[Address(RVA = "0xED32C0", Offset = "0xED32C0", VA = "0xED32C0")]
		public static bool operator >(CharPtr ptr1, CharPtr ptr2)
		{
			return default(bool);
		}

		[Token(Token = "0x600106C")]
		[Address(RVA = "0xED32E8", Offset = "0xED32E8", VA = "0xED32E8")]
		public static bool operator >=(CharPtr ptr1, CharPtr ptr2)
		{
			return default(bool);
		}

		[Token(Token = "0x600106D")]
		[Address(RVA = "0xED3310", Offset = "0xED3310", VA = "0xED3310")]
		public static bool operator ==(CharPtr ptr1, CharPtr ptr2)
		{
			return default(bool);
		}

		[Token(Token = "0x600106E")]
		[Address(RVA = "0xED3354", Offset = "0xED3354", VA = "0xED3354")]
		public static bool operator !=(CharPtr ptr1, CharPtr ptr2)
		{
			return default(bool);
		}

		[Token(Token = "0x600106F")]
		[Address(RVA = "0xED3398", Offset = "0xED3398", VA = "0xED3398", Slot = "0")]
		public override bool Equals(object o)
		{
			return default(bool);
		}

		[Token(Token = "0x6001070")]
		[Address(RVA = "0xED3450", Offset = "0xED3450", VA = "0xED3450", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6001071")]
		[Address(RVA = "0xED3458", Offset = "0xED3458", VA = "0xED3458", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6001072")]
		[Address(RVA = "0xED3514", Offset = "0xED3514", VA = "0xED3514")]
		public string ToString(int length)
		{
			return null;
		}
	}
	[Token(Token = "0x2000240")]
	public class LuaBase
	{
		[Token(Token = "0x4000BCD")]
		protected const int LUA_TNONE = -1;

		[Token(Token = "0x4000BCE")]
		protected const int LUA_TNIL = 0;

		[Token(Token = "0x4000BCF")]
		protected const int LUA_TBOOLEAN = 1;

		[Token(Token = "0x4000BD0")]
		protected const int LUA_TLIGHTUSERDATA = 2;

		[Token(Token = "0x4000BD1")]
		protected const int LUA_TNUMBER = 3;

		[Token(Token = "0x4000BD2")]
		protected const int LUA_TSTRING = 4;

		[Token(Token = "0x4000BD3")]
		protected const int LUA_TTABLE = 5;

		[Token(Token = "0x4000BD4")]
		protected const int LUA_TFUNCTION = 6;

		[Token(Token = "0x4000BD5")]
		protected const int LUA_TUSERDATA = 7;

		[Token(Token = "0x4000BD6")]
		protected const int LUA_TTHREAD = 8;

		[Token(Token = "0x4000BD7")]
		protected const int LUA_MULTRET = -1;

		[Token(Token = "0x4000BD8")]
		protected const string LUA_INTFRMLEN = "l";

		[Token(Token = "0x6001073")]
		[Address(RVA = "0xED35DC", Offset = "0xED35DC", VA = "0xED35DC")]
		protected static DynValue GetArgument(LuaState L, int pos)
		{
			return null;
		}

		[Token(Token = "0x6001074")]
		[Address(RVA = "0xED36E0", Offset = "0xED36E0", VA = "0xED36E0")]
		protected static DynValue ArgAsType(LuaState L, int pos, DataType type, bool allowNil = false)
		{
			return null;
		}

		[Token(Token = "0x6001075")]
		[Address(RVA = "0xED3738", Offset = "0xED3738", VA = "0xED3738")]
		protected static int LuaType(LuaState L, int p)
		{
			return default(int);
		}

		[Token(Token = "0x6001076")]
		[Address(RVA = "0xED37C4", Offset = "0xED37C4", VA = "0xED37C4")]
		protected static string LuaLCheckLString(LuaState L, int argNum, out uint l)
		{
			return null;
		}

		[Token(Token = "0x6001077")]
		[Address(RVA = "0xED37FC", Offset = "0xED37FC", VA = "0xED37FC")]
		protected static void LuaPushInteger(LuaState L, int val)
		{
		}

		[Token(Token = "0x6001078")]
		[Address(RVA = "0xED3924", Offset = "0xED3924", VA = "0xED3924")]
		protected static int LuaToBoolean(LuaState L, int p)
		{
			return default(int);
		}

		[Token(Token = "0x6001079")]
		[Address(RVA = "0xED394C", Offset = "0xED394C", VA = "0xED394C")]
		protected static string LuaToLString(LuaState luaState, int p, out uint l)
		{
			return null;
		}

		[Token(Token = "0x600107A")]
		[Address(RVA = "0xED3950", Offset = "0xED3950", VA = "0xED3950")]
		protected static string LuaToString(LuaState luaState, int p)
		{
			return null;
		}

		[Token(Token = "0x600107B")]
		[Address(RVA = "0xED3968", Offset = "0xED3968", VA = "0xED3968")]
		protected static void LuaLAddValue(LuaLBuffer b)
		{
		}

		[Token(Token = "0x600107C")]
		[Address(RVA = "0xED3A2C", Offset = "0xED3A2C", VA = "0xED3A2C")]
		protected static void LuaLAddLString(LuaLBuffer b, CharPtr s, uint p)
		{
		}

		[Token(Token = "0x600107D")]
		[Address(RVA = "0xED3A64", Offset = "0xED3A64", VA = "0xED3A64")]
		protected static void LuaLAddString(LuaLBuffer b, string s)
		{
		}

		[Token(Token = "0x600107E")]
		[Address(RVA = "0xED3AA4", Offset = "0xED3AA4", VA = "0xED3AA4")]
		protected static int LuaLOptInteger(LuaState L, int pos, int def)
		{
			return default(int);
		}

		[Token(Token = "0x600107F")]
		[Address(RVA = "0xED3B00", Offset = "0xED3B00", VA = "0xED3B00")]
		protected static int LuaLCheckInteger(LuaState L, int pos)
		{
			return default(int);
		}

		[Token(Token = "0x6001080")]
		[Address(RVA = "0xED3B3C", Offset = "0xED3B3C", VA = "0xED3B3C")]
		protected static void LuaLArgCheck(LuaState L, bool condition, int argNum, string message)
		{
		}

		[Token(Token = "0x6001081")]
		[Address(RVA = "0xED3B9C", Offset = "0xED3B9C", VA = "0xED3B9C")]
		protected static int LuaLCheckInt(LuaState L, int argNum)
		{
			return default(int);
		}

		[Token(Token = "0x6001082")]
		[Address(RVA = "0xED3BA0", Offset = "0xED3BA0", VA = "0xED3BA0")]
		protected static int LuaGetTop(LuaState L)
		{
			return default(int);
		}

		[Token(Token = "0x6001083")]
		[Address(RVA = "0xED3BF8", Offset = "0xED3BF8", VA = "0xED3BF8")]
		protected static int LuaLError(LuaState luaState, string message, params object[] args)
		{
			return default(int);
		}

		[Token(Token = "0x6001084")]
		[Address(RVA = "0xED3C4C", Offset = "0xED3C4C", VA = "0xED3C4C")]
		protected static void LuaLAddChar(LuaLBuffer b, char p)
		{
		}

		[Token(Token = "0x6001085")]
		[Address(RVA = "0xED3C6C", Offset = "0xED3C6C", VA = "0xED3C6C")]
		protected static void LuaLBuffInit(LuaState L, LuaLBuffer b)
		{
		}

		[Token(Token = "0x6001086")]
		[Address(RVA = "0xED3C70", Offset = "0xED3C70", VA = "0xED3C70")]
		protected static void LuaPushLiteral(LuaState L, string literalString)
		{
		}

		[Token(Token = "0x6001087")]
		[Address(RVA = "0xED3CE8", Offset = "0xED3CE8", VA = "0xED3CE8")]
		protected static void LuaLPushResult(LuaLBuffer b)
		{
		}

		[Token(Token = "0x6001088")]
		[Address(RVA = "0xED3D20", Offset = "0xED3D20", VA = "0xED3D20")]
		protected static void LuaPushLString(LuaState L, CharPtr s, uint len)
		{
		}

		[Token(Token = "0x6001089")]
		[Address(RVA = "0xED3DB4", Offset = "0xED3DB4", VA = "0xED3DB4")]
		protected static void LuaLCheckStack(LuaState L, int n, string message)
		{
		}

		[Token(Token = "0x600108A")]
		[Address(RVA = "0xED3DB8", Offset = "0xED3DB8", VA = "0xED3DB8")]
		protected static string LUA_QL(string p)
		{
			return null;
		}

		[Token(Token = "0x600108B")]
		[Address(RVA = "0xED3E08", Offset = "0xED3E08", VA = "0xED3E08")]
		protected static void LuaPushNil(LuaState L)
		{
		}

		[Token(Token = "0x600108C")]
		[Address(RVA = "0xED3EA0", Offset = "0xED3EA0", VA = "0xED3EA0")]
		protected static void LuaAssert(bool p)
		{
		}

		[Token(Token = "0x600108D")]
		[Address(RVA = "0xED3EA4", Offset = "0xED3EA4", VA = "0xED3EA4")]
		protected static string LuaLTypeName(LuaState L, int p)
		{
			return null;
		}

		[Token(Token = "0x600108E")]
		[Address(RVA = "0xED3EC8", Offset = "0xED3EC8", VA = "0xED3EC8")]
		protected static int LuaIsString(LuaState L, int p)
		{
			return default(int);
		}

		[Token(Token = "0x600108F")]
		[Address(RVA = "0xED3EF4", Offset = "0xED3EF4", VA = "0xED3EF4")]
		protected static void LuaPop(LuaState L, int p)
		{
		}

		[Token(Token = "0x6001090")]
		[Address(RVA = "0xED3F30", Offset = "0xED3F30", VA = "0xED3F30")]
		protected static void LuaGetTable(LuaState L, int p)
		{
		}

		[Token(Token = "0x6001091")]
		[Address(RVA = "0xED3FDC", Offset = "0xED3FDC", VA = "0xED3FDC")]
		protected static int LuaLOptInt(LuaState L, int pos, int def)
		{
			return default(int);
		}

		[Token(Token = "0x6001092")]
		[Address(RVA = "0xED3FE0", Offset = "0xED3FE0", VA = "0xED3FE0")]
		protected static CharPtr LuaLCheckString(LuaState L, int p)
		{
			return null;
		}

		[Token(Token = "0x6001093")]
		[Address(RVA = "0xED3FF8", Offset = "0xED3FF8", VA = "0xED3FF8")]
		protected static string LuaLCheckStringStr(LuaState L, int p)
		{
			return null;
		}

		[Token(Token = "0x6001094")]
		[Address(RVA = "0xED3B54", Offset = "0xED3B54", VA = "0xED3B54")]
		protected static void LuaLArgError(LuaState L, int arg, string p)
		{
		}

		[Token(Token = "0x6001095")]
		[Address(RVA = "0xED4010", Offset = "0xED4010", VA = "0xED4010")]
		protected static double LuaLCheckNumber(LuaState L, int pos)
		{
			return default(double);
		}

		[Token(Token = "0x6001096")]
		[Address(RVA = "0xED4034", Offset = "0xED4034", VA = "0xED4034")]
		protected static void LuaPushValue(LuaState L, int arg)
		{
		}

		[Token(Token = "0x6001097")]
		[Address(RVA = "0xED4058", Offset = "0xED4058", VA = "0xED4058")]
		protected static void LuaCall(LuaState L, int nargs, int nresults = -1)
		{
		}

		[Token(Token = "0x6001098")]
		[Address(RVA = "0xED43D0", Offset = "0xED43D0", VA = "0xED43D0")]
		protected static int memcmp(CharPtr ptr1, CharPtr ptr2, uint size)
		{
			return default(int);
		}

		[Token(Token = "0x6001099")]
		[Address(RVA = "0xED43D4", Offset = "0xED43D4", VA = "0xED43D4")]
		protected static int memcmp(CharPtr ptr1, CharPtr ptr2, int size)
		{
			return default(int);
		}

		[Token(Token = "0x600109A")]
		[Address(RVA = "0xED4478", Offset = "0xED4478", VA = "0xED4478")]
		protected static CharPtr memchr(CharPtr ptr, char c, uint count)
		{
			return null;
		}

		[Token(Token = "0x600109B")]
		[Address(RVA = "0xED4540", Offset = "0xED4540", VA = "0xED4540")]
		protected static CharPtr strpbrk(CharPtr str, CharPtr charset)
		{
			return null;
		}

		[Token(Token = "0x600109C")]
		[Address(RVA = "0xED466C", Offset = "0xED466C", VA = "0xED466C")]
		protected static bool isalpha(char c)
		{
			return default(bool);
		}

		[Token(Token = "0x600109D")]
		[Address(RVA = "0xED46C4", Offset = "0xED46C4", VA = "0xED46C4")]
		protected static bool iscntrl(char c)
		{
			return default(bool);
		}

		[Token(Token = "0x600109E")]
		[Address(RVA = "0xED471C", Offset = "0xED471C", VA = "0xED471C")]
		protected static bool isdigit(char c)
		{
			return default(bool);
		}

		[Token(Token = "0x600109F")]
		[Address(RVA = "0xED4774", Offset = "0xED4774", VA = "0xED4774")]
		protected static bool islower(char c)
		{
			return default(bool);
		}

		[Token(Token = "0x60010A0")]
		[Address(RVA = "0xED47CC", Offset = "0xED47CC", VA = "0xED47CC")]
		protected static bool ispunct(char c)
		{
			return default(bool);
		}

		[Token(Token = "0x60010A1")]
		[Address(RVA = "0xED4824", Offset = "0xED4824", VA = "0xED4824")]
		protected static bool isspace(char c)
		{
			return default(bool);
		}

		[Token(Token = "0x60010A2")]
		[Address(RVA = "0xED484C", Offset = "0xED484C", VA = "0xED484C")]
		protected static bool isupper(char c)
		{
			return default(bool);
		}

		[Token(Token = "0x60010A3")]
		[Address(RVA = "0xED48A4", Offset = "0xED48A4", VA = "0xED48A4")]
		protected static bool isalnum(char c)
		{
			return default(bool);
		}

		[Token(Token = "0x60010A4")]
		[Address(RVA = "0xED48FC", Offset = "0xED48FC", VA = "0xED48FC")]
		protected static bool isxdigit(char c)
		{
			return default(bool);
		}

		[Token(Token = "0x60010A5")]
		[Address(RVA = "0xED495C", Offset = "0xED495C", VA = "0xED495C")]
		protected static bool isgraph(char c)
		{
			return default(bool);
		}

		[Token(Token = "0x60010A6")]
		[Address(RVA = "0xED49E8", Offset = "0xED49E8", VA = "0xED49E8")]
		protected static bool isalpha(int c)
		{
			return default(bool);
		}

		[Token(Token = "0x60010A7")]
		[Address(RVA = "0xED4A40", Offset = "0xED4A40", VA = "0xED4A40")]
		protected static bool iscntrl(int c)
		{
			return default(bool);
		}

		[Token(Token = "0x60010A8")]
		[Address(RVA = "0xED4A98", Offset = "0xED4A98", VA = "0xED4A98")]
		protected static bool isdigit(int c)
		{
			return default(bool);
		}

		[Token(Token = "0x60010A9")]
		[Address(RVA = "0xED4AF0", Offset = "0xED4AF0", VA = "0xED4AF0")]
		protected static bool islower(int c)
		{
			return default(bool);
		}

		[Token(Token = "0x60010AA")]
		[Address(RVA = "0xED4B48", Offset = "0xED4B48", VA = "0xED4B48")]
		protected static bool ispunct(int c)
		{
			return default(bool);
		}

		[Token(Token = "0x60010AB")]
		[Address(RVA = "0xED4B74", Offset = "0xED4B74", VA = "0xED4B74")]
		protected static bool isspace(int c)
		{
			return default(bool);
		}

		[Token(Token = "0x60010AC")]
		[Address(RVA = "0xED4B98", Offset = "0xED4B98", VA = "0xED4B98")]
		protected static bool isupper(int c)
		{
			return default(bool);
		}

		[Token(Token = "0x60010AD")]
		[Address(RVA = "0xED4BF0", Offset = "0xED4BF0", VA = "0xED4BF0")]
		protected static bool isalnum(int c)
		{
			return default(bool);
		}

		[Token(Token = "0x60010AE")]
		[Address(RVA = "0xED4C48", Offset = "0xED4C48", VA = "0xED4C48")]
		protected static bool isgraph(int c)
		{
			return default(bool);
		}

		[Token(Token = "0x60010AF")]
		[Address(RVA = "0xED4CD4", Offset = "0xED4CD4", VA = "0xED4CD4")]
		protected static char tolower(char c)
		{
			return default(char);
		}

		[Token(Token = "0x60010B0")]
		[Address(RVA = "0xED4D2C", Offset = "0xED4D2C", VA = "0xED4D2C")]
		protected static char toupper(char c)
		{
			return default(char);
		}

		[Token(Token = "0x60010B1")]
		[Address(RVA = "0xED4D84", Offset = "0xED4D84", VA = "0xED4D84")]
		protected static char tolower(int c)
		{
			return default(char);
		}

		[Token(Token = "0x60010B2")]
		[Address(RVA = "0xED4DDC", Offset = "0xED4DDC", VA = "0xED4DDC")]
		protected static char toupper(int c)
		{
			return default(char);
		}

		[Token(Token = "0x60010B3")]
		[Address(RVA = "0xED4E34", Offset = "0xED4E34", VA = "0xED4E34")]
		protected static CharPtr strchr(CharPtr str, char c)
		{
			return null;
		}

		[Token(Token = "0x60010B4")]
		[Address(RVA = "0xED4EF4", Offset = "0xED4EF4", VA = "0xED4EF4")]
		protected static CharPtr strcpy(CharPtr dst, CharPtr src)
		{
			return null;
		}

		[Token(Token = "0x60010B5")]
		[Address(RVA = "0xED4F88", Offset = "0xED4F88", VA = "0xED4F88")]
		protected static CharPtr strncpy(CharPtr dst, CharPtr src, int length)
		{
			return null;
		}

		[Token(Token = "0x60010B6")]
		[Address(RVA = "0xED5054", Offset = "0xED5054", VA = "0xED5054")]
		protected static int strlen(CharPtr str)
		{
			return default(int);
		}

		[Token(Token = "0x60010B7")]
		[Address(RVA = "0xED5094", Offset = "0xED5094", VA = "0xED5094")]
		public static void sprintf(CharPtr buffer, CharPtr str, params object[] argv)
		{
		}

		[Token(Token = "0x60010B8")]
		[Address(RVA = "0xED6034", Offset = "0xED6034", VA = "0xED6034")]
		public LuaBase()
		{
		}
	}
	[Token(Token = "0x2000241")]
	public class LuaLBuffer
	{
		[Token(Token = "0x170001F6")]
		public StringBuilder StringBuilder
		{
			[Token(Token = "0x60010B9")]
			[Address(RVA = "0xED603C", Offset = "0xED603C", VA = "0xED603C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60010BA")]
			[Address(RVA = "0xED6044", Offset = "0xED6044", VA = "0xED6044")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001F7")]
		public LuaState LuaState
		{
			[Token(Token = "0x60010BB")]
			[Address(RVA = "0xED604C", Offset = "0xED604C", VA = "0xED604C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60010BC")]
			[Address(RVA = "0xED6054", Offset = "0xED6054", VA = "0xED6054")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60010BD")]
		[Address(RVA = "0xED605C", Offset = "0xED605C", VA = "0xED605C")]
		public LuaLBuffer(LuaState l)
		{
		}
	}
	[Token(Token = "0x2000242")]
	public class LuaState
	{
		[Token(Token = "0x4000BDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<DynValue> m_Stack;

		[Token(Token = "0x170001F8")]
		public ScriptExecutionContext ExecutionContext
		{
			[Token(Token = "0x60010BE")]
			[Address(RVA = "0xED60EC", Offset = "0xED60EC", VA = "0xED60EC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60010BF")]
			[Address(RVA = "0xED60F4", Offset = "0xED60F4", VA = "0xED60F4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001F9")]
		public string FunctionName
		{
			[Token(Token = "0x60010C0")]
			[Address(RVA = "0xED60FC", Offset = "0xED60FC", VA = "0xED60FC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60010C1")]
			[Address(RVA = "0xED6104", Offset = "0xED6104", VA = "0xED6104")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001FA")]
		public int Count
		{
			[Token(Token = "0x60010C5")]
			[Address(RVA = "0xED3BB0", Offset = "0xED3BB0", VA = "0xED3BB0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60010C2")]
		[Address(RVA = "0xED610C", Offset = "0xED610C", VA = "0xED610C")]
		internal LuaState(ScriptExecutionContext executionContext, CallbackArguments args, string functionName)
		{
		}

		[Token(Token = "0x60010C3")]
		[Address(RVA = "0xED6284", Offset = "0xED6284", VA = "0xED6284")]
		public DynValue Top(int pos = 0)
		{
			return null;
		}

		[Token(Token = "0x60010C4")]
		[Address(RVA = "0xED35EC", Offset = "0xED35EC", VA = "0xED35EC")]
		public DynValue At(int pos)
		{
			return null;
		}

		[Token(Token = "0x60010C6")]
		[Address(RVA = "0xED3874", Offset = "0xED3874", VA = "0xED3874")]
		public void Push(DynValue v)
		{
		}

		[Token(Token = "0x60010C7")]
		[Address(RVA = "0xED39AC", Offset = "0xED39AC", VA = "0xED39AC")]
		public DynValue Pop()
		{
			return null;
		}

		[Token(Token = "0x60010C8")]
		[Address(RVA = "0xED4270", Offset = "0xED4270", VA = "0xED4270")]
		public DynValue[] GetTopArray(int num)
		{
			return null;
		}

		[Token(Token = "0x60010C9")]
		[Address(RVA = "0xED62F0", Offset = "0xED62F0", VA = "0xED62F0")]
		public DynValue GetReturnValue(int retvals)
		{
			return null;
		}

		[Token(Token = "0x60010CA")]
		[Address(RVA = "0xED4354", Offset = "0xED4354", VA = "0xED4354")]
		public void Discard(int nargs)
		{
		}
	}
	[Token(Token = "0x2000243")]
	internal static class Tools
	{
		[Token(Token = "0x4000BDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static Regex r;

		[Token(Token = "0x60010CB")]
		[Address(RVA = "0xED63D8", Offset = "0xED63D8", VA = "0xED63D8")]
		public static bool IsNumericType(object o)
		{
			return default(bool);
		}

		[Token(Token = "0x60010CC")]
		[Address(RVA = "0xED6578", Offset = "0xED6578", VA = "0xED6578")]
		public static bool IsPositive(object Value, bool ZeroIsPositive)
		{
			return default(bool);
		}

		[Token(Token = "0x60010CD")]
		[Address(RVA = "0xED6CBC", Offset = "0xED6CBC", VA = "0xED6CBC")]
		public static object ToUnsigned(object Value)
		{
			return null;
		}

		[Token(Token = "0x60010CE")]
		[Address(RVA = "0xED72C8", Offset = "0xED72C8", VA = "0xED72C8")]
		public static object ToInteger(object Value, bool Round)
		{
			return null;
		}

		[Token(Token = "0x60010CF")]
		[Address(RVA = "0xED79C8", Offset = "0xED79C8", VA = "0xED79C8")]
		public static long UnboxToLong(object Value, bool Round)
		{
			return default(long);
		}

		[Token(Token = "0x60010D0")]
		[Address(RVA = "0xED81EC", Offset = "0xED81EC", VA = "0xED81EC")]
		public static string ReplaceMetaChars(string input)
		{
			return null;
		}

		[Token(Token = "0x60010D1")]
		[Address(RVA = "0xED82B4", Offset = "0xED82B4", VA = "0xED82B4")]
		private static string ReplaceMetaCharsMatch(Match m)
		{
			return null;
		}

		[Token(Token = "0x60010D2")]
		[Address(RVA = "0xED867C", Offset = "0xED867C", VA = "0xED867C")]
		public static void fprintf(TextWriter Destination, string Format, params object[] Parameters)
		{
		}

		[Token(Token = "0x60010D3")]
		[Address(RVA = "0xED512C", Offset = "0xED512C", VA = "0xED512C")]
		public static string sprintf(string Format, params object[] Parameters)
		{
			return null;
		}

		[Token(Token = "0x60010D4")]
		[Address(RVA = "0xED8A90", Offset = "0xED8A90", VA = "0xED8A90")]
		private static string FormatOct(string NativeFormat, bool Alternate, int FieldLength, int FieldPrecision, bool Left2Right, char Padding, object Value)
		{
			return null;
		}

		[Token(Token = "0x60010D5")]
		[Address(RVA = "0xED8D38", Offset = "0xED8D38", VA = "0xED8D38")]
		private static string FormatHex(string NativeFormat, bool Alternate, int FieldLength, int FieldPrecision, bool Left2Right, char Padding, object Value)
		{
			return null;
		}

		[Token(Token = "0x60010D6")]
		[Address(RVA = "0xED8704", Offset = "0xED8704", VA = "0xED8704")]
		private static string FormatNumber(string NativeFormat, bool Alternate, int FieldLength, int FieldPrecision, bool Left2Right, bool PositiveSign, bool PositiveSpace, char Padding, object Value)
		{
			return null;
		}
	}
	[Token(Token = "0x2000244")]
	internal static class NamespaceDoc
	{
	}
}
namespace MoonSharp.Interpreter.Interop.Converters
{
	[Token(Token = "0x2000245")]
	internal static class ClrToScriptConversions
	{
		[Token(Token = "0x60010D8")]
		[Address(RVA = "0xED90C0", Offset = "0xED90C0", VA = "0xED90C0")]
		internal static DynValue TryObjectToTrivialDynValue(Script script, object obj)
		{
			return null;
		}

		[Token(Token = "0x60010D9")]
		[Address(RVA = "0xED9A48", Offset = "0xED9A48", VA = "0xED9A48")]
		internal static DynValue TryObjectToSimpleDynValue(Script script, object obj)
		{
			return null;
		}

		[Token(Token = "0x60010DA")]
		[Address(RVA = "0xED13E0", Offset = "0xED13E0", VA = "0xED13E0")]
		internal static DynValue ObjectToDynValue(Script script, object obj)
		{
			return null;
		}

		[Token(Token = "0x60010DB")]
		[Address(RVA = "0xEDA544", Offset = "0xEDA544", VA = "0xEDA544")]
		public static DynValue EnumerationToDynValue(Script script, object obj)
		{
			return null;
		}
	}
	[Token(Token = "0x2000246")]
	internal static class NumericConversions
	{
		[Token(Token = "0x4000BDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static readonly HashSet<Type> NumericTypes;

		[Token(Token = "0x4000BE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal static readonly Type[] NumericTypesOrdered;

		[Token(Token = "0x60010DC")]
		[Address(RVA = "0xEDA694", Offset = "0xEDA694", VA = "0xEDA694")]
		static NumericConversions()
		{
		}

		[Token(Token = "0x60010DD")]
		[Address(RVA = "0xEDAB80", Offset = "0xEDAB80", VA = "0xEDAB80")]
		internal static object DoubleToType(Type type, double d)
		{
			return null;
		}

		[Token(Token = "0x60010DE")]
		[Address(RVA = "0xED93E4", Offset = "0xED93E4", VA = "0xED93E4")]
		internal static double TypeToDouble(Type type, object d)
		{
			return default(double);
		}
	}
	[Token(Token = "0x2000247")]
	internal static class ScriptToClrConversions
	{
		[Token(Token = "0x4000BE1")]
		internal const int WEIGHT_MAX_VALUE = 100;

		[Token(Token = "0x4000BE2")]
		internal const int WEIGHT_CUSTOM_CONVERTER_MATCH = 100;

		[Token(Token = "0x4000BE3")]
		internal const int WEIGHT_EXACT_MATCH = 100;

		[Token(Token = "0x4000BE4")]
		internal const int WEIGHT_STRING_TO_STRINGBUILDER = 99;

		[Token(Token = "0x4000BE5")]
		internal const int WEIGHT_STRING_TO_CHAR = 98;

		[Token(Token = "0x4000BE6")]
		internal const int WEIGHT_NIL_TO_NULLABLE = 100;

		[Token(Token = "0x4000BE7")]
		internal const int WEIGHT_NIL_TO_REFTYPE = 100;

		[Token(Token = "0x4000BE8")]
		internal const int WEIGHT_VOID_WITH_DEFAULT = 50;

		[Token(Token = "0x4000BE9")]
		internal const int WEIGHT_VOID_WITHOUT_DEFAULT = 25;

		[Token(Token = "0x4000BEA")]
		internal const int WEIGHT_NIL_WITH_DEFAULT = 25;

		[Token(Token = "0x4000BEB")]
		internal const int WEIGHT_BOOL_TO_STRING = 5;

		[Token(Token = "0x4000BEC")]
		internal const int WEIGHT_NUMBER_TO_STRING = 50;

		[Token(Token = "0x4000BED")]
		internal const int WEIGHT_NUMBER_TO_ENUM = 90;

		[Token(Token = "0x4000BEE")]
		internal const int WEIGHT_USERDATA_TO_STRING = 5;

		[Token(Token = "0x4000BEF")]
		internal const int WEIGHT_TABLE_CONVERSION = 90;

		[Token(Token = "0x4000BF0")]
		internal const int WEIGHT_NUMBER_DOWNCAST = 99;

		[Token(Token = "0x4000BF1")]
		internal const int WEIGHT_NO_MATCH = 0;

		[Token(Token = "0x4000BF2")]
		internal const int WEIGHT_NO_EXTRA_PARAMS_BONUS = 100;

		[Token(Token = "0x4000BF3")]
		internal const int WEIGHT_EXTRA_PARAMS_MALUS = 2;

		[Token(Token = "0x4000BF4")]
		internal const int WEIGHT_BYREF_BONUSMALUS = -10;

		[Token(Token = "0x4000BF5")]
		internal const int WEIGHT_VARARGS_MALUS = 1;

		[Token(Token = "0x4000BF6")]
		internal const int WEIGHT_VARARGS_EMPTY = 40;

		[Token(Token = "0x60010DF")]
		[Address(RVA = "0xEDB138", Offset = "0xEDB138", VA = "0xEDB138")]
		internal static object DynValueToObject(DynValue value)
		{
			return null;
		}

		[Token(Token = "0x60010E0")]
		[Address(RVA = "0xED18C4", Offset = "0xED18C4", VA = "0xED18C4")]
		internal static object DynValueToObjectOfType(DynValue value, Type desiredType, object defaultValue, bool isOptional)
		{
			return null;
		}

		[Token(Token = "0x60010E1")]
		[Address(RVA = "0xEDC4B8", Offset = "0xEDC4B8", VA = "0xEDC4B8")]
		internal static int DynValueToObjectOfTypeWeight(DynValue value, Type desiredType, bool isOptional)
		{
			return default(int);
		}

		[Token(Token = "0x60010E2")]
		[Address(RVA = "0xEDCC1C", Offset = "0xEDCC1C", VA = "0xEDCC1C")]
		private static int GetNumericTypeWeight(Type desiredType)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000248")]
	internal static class StringConversions
	{
		[Token(Token = "0x2000249")]
		internal enum StringSubtype
		{
			[Token(Token = "0x4000BF8")]
			None,
			[Token(Token = "0x4000BF9")]
			String,
			[Token(Token = "0x4000BFA")]
			StringBuilder,
			[Token(Token = "0x4000BFB")]
			Char
		}

		[Token(Token = "0x60010E3")]
		[Address(RVA = "0xEDB484", Offset = "0xEDB484", VA = "0xEDB484")]
		internal static StringSubtype GetStringSubtype(Type desiredType)
		{
			return default(StringSubtype);
		}

		[Token(Token = "0x60010E4")]
		[Address(RVA = "0xEDC398", Offset = "0xEDC398", VA = "0xEDC398")]
		internal static object ConvertString(StringSubtype stringSubType, string str, Type desiredType, DataType dataType)
		{
			return null;
		}
	}
	[Token(Token = "0x200024A")]
	internal static class TableConversions
	{
		[Token(Token = "0x60010E5")]
		[Address(RVA = "0xED9FE8", Offset = "0xED9FE8", VA = "0xED9FE8")]
		internal static Table ConvertIListToTable(Script script, IList list)
		{
			return null;
		}

		[Token(Token = "0x60010E6")]
		[Address(RVA = "0xEDA1B4", Offset = "0xEDA1B4", VA = "0xEDA1B4")]
		internal static Table ConvertIDictionaryToTable(Script script, IDictionary dict)
		{
			return null;
		}

		[Token(Token = "0x60010E7")]
		[Address(RVA = "0xEDCD04", Offset = "0xEDCD04", VA = "0xEDCD04")]
		internal static bool CanConvertTableToType(Table table, Type t)
		{
			return default(bool);
		}

		[Token(Token = "0x60010E8")]
		[Address(RVA = "0xEDB5BC", Offset = "0xEDB5BC", VA = "0xEDB5BC")]
		internal static object ConvertTableToType(Table table, Type t)
		{
			return null;
		}

		[Token(Token = "0x60010E9")]
		[Address(RVA = "0xEDD620", Offset = "0xEDD620", VA = "0xEDD620")]
		internal static object ConvertTableToDictionaryOfGenericType(Type dictionaryType, Type keyType, Type valueType, Table table)
		{
			return null;
		}

		[Token(Token = "0x60010EA")]
		[Address(RVA = "0xEDDB7C", Offset = "0xEDDB7C", VA = "0xEDDB7C")]
		internal static object ConvertTableToArrayOfGenericType(Type arrayType, Type itemType, Table table)
		{
			return null;
		}

		[Token(Token = "0x60010EB")]
		[Address(RVA = "0xEDD3A0", Offset = "0xEDD3A0", VA = "0xEDD3A0")]
		internal static object ConvertTableToListOfGenericType(Type listType, Type itemType, Table table)
		{
			return null;
		}

		[Token(Token = "0x60010EC")]
		internal static List<T> TableToList<T>(Table table, Func<DynValue, T> converter)
		{
			return null;
		}

		[Token(Token = "0x60010ED")]
		internal static Dictionary<TK, TV> TableToDictionary<TK, TV>(Table table, Func<DynValue, TK> keyconverter, Func<DynValue, TV> valconverter)
		{
			return null;
		}
	}
}
namespace MoonSharp.Interpreter.Interop.BasicDescriptors
{
	[Token(Token = "0x200024C")]
	public abstract class DispatchingUserDataDescriptor : IUserDataDescriptor, IOptimizableDescriptor
	{
		[Token(Token = "0x4000C05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int m_ExtMethodsVersion;

		[Token(Token = "0x4000C06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Dictionary<string, IMemberDescriptor> m_MetaMembers;

		[Token(Token = "0x4000C07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Dictionary<string, IMemberDescriptor> m_Members;

		[Token(Token = "0x4000C08")]
		protected const string SPECIALNAME_INDEXER_GET = "get_Item";

		[Token(Token = "0x4000C09")]
		protected const string SPECIALNAME_INDEXER_SET = "set_Item";

		[Token(Token = "0x4000C0A")]
		protected const string SPECIALNAME_CAST_EXPLICIT = "op_Explicit";

		[Token(Token = "0x4000C0B")]
		protected const string SPECIALNAME_CAST_IMPLICIT = "op_Implicit";

		[Token(Token = "0x170001FB")]
		public string Name
		{
			[Token(Token = "0x60010F8")]
			[Address(RVA = "0xEDDF64", Offset = "0xEDDF64", VA = "0xEDDF64", Slot = "4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60010F9")]
			[Address(RVA = "0xEDDF6C", Offset = "0xEDDF6C", VA = "0xEDDF6C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001FC")]
		public Type Type
		{
			[Token(Token = "0x60010FA")]
			[Address(RVA = "0xEDDF74", Offset = "0xEDDF74", VA = "0xEDDF74", Slot = "5")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60010FB")]
			[Address(RVA = "0xEDDF7C", Offset = "0xEDDF7C", VA = "0xEDDF7C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001FD")]
		public string FriendlyName
		{
			[Token(Token = "0x60010FC")]
			[Address(RVA = "0xEDDF84", Offset = "0xEDDF84", VA = "0xEDDF84")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60010FD")]
			[Address(RVA = "0xEDDF8C", Offset = "0xEDDF8C", VA = "0xEDDF8C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001FE")]
		public IEnumerable<string> MemberNames
		{
			[Token(Token = "0x6001102")]
			[Address(RVA = "0xEDE1A0", Offset = "0xEDE1A0", VA = "0xEDE1A0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001FF")]
		public IEnumerable<KeyValuePair<string, IMemberDescriptor>> Members
		{
			[Token(Token = "0x6001103")]
			[Address(RVA = "0xEDE1F0", Offset = "0xEDE1F0", VA = "0xEDE1F0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000200")]
		public IEnumerable<string> MetaMemberNames
		{
			[Token(Token = "0x6001106")]
			[Address(RVA = "0xEDE2A8", Offset = "0xEDE2A8", VA = "0xEDE2A8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000201")]
		public IEnumerable<KeyValuePair<string, IMemberDescriptor>> MetaMembers
		{
			[Token(Token = "0x6001107")]
			[Address(RVA = "0xEDE2F8", Offset = "0xEDE2F8", VA = "0xEDE2F8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60010FE")]
		[Address(RVA = "0xECA2D0", Offset = "0xECA2D0", VA = "0xECA2D0")]
		protected DispatchingUserDataDescriptor(Type type, [Optional] string friendlyName)
		{
		}

		[Token(Token = "0x60010FF")]
		[Address(RVA = "0xECB550", Offset = "0xECB550", VA = "0xECB550")]
		public void AddMetaMember(string name, IMemberDescriptor desc)
		{
		}

		[Token(Token = "0x6001100")]
		[Address(RVA = "0xECB568", Offset = "0xECB568", VA = "0xECB568")]
		public void AddDynValue(string name, DynValue value)
		{
		}

		[Token(Token = "0x6001101")]
		[Address(RVA = "0xECB538", Offset = "0xECB538", VA = "0xECB538")]
		public void AddMember(string name, IMemberDescriptor desc)
		{
		}

		[Token(Token = "0x6001104")]
		[Address(RVA = "0xEDE1F8", Offset = "0xEDE1F8", VA = "0xEDE1F8")]
		public IMemberDescriptor FindMember(string memberName)
		{
			return null;
		}

		[Token(Token = "0x6001105")]
		[Address(RVA = "0xEDE250", Offset = "0xEDE250", VA = "0xEDE250")]
		public void RemoveMember(string memberName)
		{
		}

		[Token(Token = "0x6001108")]
		[Address(RVA = "0xEDE300", Offset = "0xEDE300", VA = "0xEDE300")]
		public IMemberDescriptor FindMetaMember(string memberName)
		{
			return null;
		}

		[Token(Token = "0x6001109")]
		[Address(RVA = "0xEDE358", Offset = "0xEDE358", VA = "0xEDE358")]
		public void RemoveMetaMember(string memberName)
		{
		}

		[Token(Token = "0x600110A")]
		[Address(RVA = "0xEDDF94", Offset = "0xEDDF94", VA = "0xEDDF94")]
		private void AddMemberTo(Dictionary<string, IMemberDescriptor> members, string name, IMemberDescriptor desc)
		{
		}

		[Token(Token = "0x600110B")]
		[Address(RVA = "0xEDE3B0", Offset = "0xEDE3B0", VA = "0xEDE3B0", Slot = "12")]
		public virtual DynValue Index(Script script, object obj, DynValue index, bool isDirectIndexing)
		{
			return null;
		}

		[Token(Token = "0x600110C")]
		[Address(RVA = "0xEDE760", Offset = "0xEDE760", VA = "0xEDE760")]
		private DynValue TryIndexOnExtMethod(Script script, object obj, string indexName)
		{
			return null;
		}

		[Token(Token = "0x600110D")]
		[Address(RVA = "0xEDE904", Offset = "0xEDE904", VA = "0xEDE904")]
		public bool HasMember(string exactName)
		{
			return default(bool);
		}

		[Token(Token = "0x600110E")]
		[Address(RVA = "0xEDE95C", Offset = "0xEDE95C", VA = "0xEDE95C")]
		public bool HasMetaMember(string exactName)
		{
			return default(bool);
		}

		[Token(Token = "0x600110F")]
		[Address(RVA = "0xEDE9B4", Offset = "0xEDE9B4", VA = "0xEDE9B4", Slot = "13")]
		protected virtual DynValue TryIndex(Script script, object obj, string indexName)
		{
			return null;
		}

		[Token(Token = "0x6001110")]
		[Address(RVA = "0xEDEABC", Offset = "0xEDEABC", VA = "0xEDEABC", Slot = "14")]
		public virtual bool SetIndex(Script script, object obj, DynValue index, DynValue value, bool isDirectIndexing)
		{
			return default(bool);
		}

		[Token(Token = "0x6001111")]
		[Address(RVA = "0xEDECB0", Offset = "0xEDECB0", VA = "0xEDECB0", Slot = "15")]
		protected virtual bool TrySetIndex(Script script, object obj, string indexName, DynValue value)
		{
			return default(bool);
		}

		[Token(Token = "0x6001112")]
		[Address(RVA = "0xEDEDA8", Offset = "0xEDEDA8", VA = "0xEDEDA8", Slot = "11")]
		private void MoonSharp.Interpreter.Interop.BasicDescriptors.IOptimizableDescriptor.Optimize()
		{
		}

		[Token(Token = "0x6001113")]
		[Address(RVA = "0xEDE758", Offset = "0xEDE758", VA = "0xEDE758")]
		protected static string Camelify(string name)
		{
			return null;
		}

		[Token(Token = "0x6001114")]
		[Address(RVA = "0xEDE750", Offset = "0xEDE750", VA = "0xEDE750")]
		protected static string UpperFirstLetter(string name)
		{
			return null;
		}

		[Token(Token = "0x6001115")]
		[Address(RVA = "0xEDF400", Offset = "0xEDF400", VA = "0xEDF400", Slot = "16")]
		public virtual string AsString(object obj)
		{
			return null;
		}

		[Token(Token = "0x6001116")]
		[Address(RVA = "0xEDF420", Offset = "0xEDF420", VA = "0xEDF420", Slot = "17")]
		protected virtual DynValue ExecuteIndexer(IMemberDescriptor mdesc, Script script, object obj, DynValue index, DynValue value)
		{
			return null;
		}

		[Token(Token = "0x6001117")]
		[Address(RVA = "0xEDF83C", Offset = "0xEDF83C", VA = "0xEDF83C", Slot = "18")]
		public virtual DynValue MetaIndex(Script script, object obj, string metaname)
		{
			return null;
		}

		[Token(Token = "0x6001118")]
		[Address(RVA = "0xEE04F8", Offset = "0xEE04F8", VA = "0xEE04F8")]
		private int PerformComparison(object obj, object p1, object p2)
		{
			return default(int);
		}

		[Token(Token = "0x6001119")]
		[Address(RVA = "0xEE0108", Offset = "0xEE0108", VA = "0xEE0108")]
		private DynValue MultiDispatchLessThanOrEqual(Script script, object obj)
		{
			return null;
		}

		[Token(Token = "0x600111A")]
		[Address(RVA = "0xEDFFD0", Offset = "0xEDFFD0", VA = "0xEDFFD0")]
		private DynValue MultiDispatchLessThan(Script script, object obj)
		{
			return null;
		}

		[Token(Token = "0x600111B")]
		[Address(RVA = "0xEE0240", Offset = "0xEE0240", VA = "0xEE0240")]
		private DynValue TryDispatchLength(Script script, object obj)
		{
			return null;
		}

		[Token(Token = "0x600111C")]
		[Address(RVA = "0xEDFED0", Offset = "0xEDFED0", VA = "0xEDFED0")]
		private DynValue MultiDispatchEqual(Script script, object obj)
		{
			return null;
		}

		[Token(Token = "0x600111D")]
		[Address(RVA = "0xEE091C", Offset = "0xEE091C", VA = "0xEE091C")]
		private bool CheckEquality(object obj, object p1, object p2)
		{
			return default(bool);
		}

		[Token(Token = "0x600111E")]
		[Address(RVA = "0xEDFDD4", Offset = "0xEDFDD4", VA = "0xEDFDD4")]
		private DynValue DispatchMetaOnMethod(Script script, object obj, string methodName)
		{
			return null;
		}

		[Token(Token = "0x600111F")]
		[Address(RVA = "0xEE033C", Offset = "0xEE033C", VA = "0xEE033C")]
		private DynValue TryDispatchToNumber(Script script, object obj)
		{
			return null;
		}

		[Token(Token = "0x6001120")]
		[Address(RVA = "0xEE0414", Offset = "0xEE0414", VA = "0xEE0414")]
		private DynValue TryDispatchToBool(Script script, object obj)
		{
			return null;
		}

		[Token(Token = "0x6001121")]
		[Address(RVA = "0xEE0994", Offset = "0xEE0994", VA = "0xEE0994", Slot = "19")]
		public virtual bool IsTypeCompatible(Type type, object obj)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000250")]
	public interface IMemberDescriptor
	{
		[Token(Token = "0x17000202")]
		bool IsStatic
		{
			[Token(Token = "0x6001128")]
			get;
		}

		[Token(Token = "0x17000203")]
		string Name
		{
			[Token(Token = "0x6001129")]
			get;
		}

		[Token(Token = "0x17000204")]
		MemberDescriptorAccess MemberAccess
		{
			[Token(Token = "0x600112A")]
			get;
		}

		[Token(Token = "0x600112B")]
		DynValue GetValue(Script script, object obj);

		[Token(Token = "0x600112C")]
		void SetValue(Script script, object obj, DynValue value);
	}
	[Token(Token = "0x2000251")]
	public static class MemberDescriptor
	{
		[Token(Token = "0x600112D")]
		[Address(RVA = "0xEE0CA4", Offset = "0xEE0CA4", VA = "0xEE0CA4")]
		public static bool HasAllFlags(this MemberDescriptorAccess access, MemberDescriptorAccess flag)
		{
			return default(bool);
		}

		[Token(Token = "0x600112E")]
		[Address(RVA = "0xEE06B0", Offset = "0xEE06B0", VA = "0xEE06B0")]
		public static bool CanRead(this IMemberDescriptor desc)
		{
			return default(bool);
		}

		[Token(Token = "0x600112F")]
		[Address(RVA = "0xEE0CB0", Offset = "0xEE0CB0", VA = "0xEE0CB0")]
		public static bool CanWrite(this IMemberDescriptor desc)
		{
			return default(bool);
		}

		[Token(Token = "0x6001130")]
		[Address(RVA = "0xEE0758", Offset = "0xEE0758", VA = "0xEE0758")]
		public static bool CanExecute(this IMemberDescriptor desc)
		{
			return default(bool);
		}

		[Token(Token = "0x6001131")]
		[Address(RVA = "0xEE0800", Offset = "0xEE0800", VA = "0xEE0800")]
		public static DynValue GetGetterCallbackAsDynValue(this IMemberDescriptor desc, Script script, object obj)
		{
			return null;
		}

		[Token(Token = "0x6001132")]
		[Address(RVA = "0xEDE69C", Offset = "0xEDE69C", VA = "0xEDE69C")]
		public static IMemberDescriptor WithAccessOrNull(this IMemberDescriptor desc, MemberDescriptorAccess access)
		{
			return null;
		}

		[Token(Token = "0x6001133")]
		[Address(RVA = "0xED1120", Offset = "0xED1120", VA = "0xED1120")]
		public static void CheckAccess(this IMemberDescriptor desc, MemberDescriptorAccess access, object obj)
		{
		}
	}
	[Token(Token = "0x2000253")]
	public interface IOptimizableDescriptor
	{
		[Token(Token = "0x6001136")]
		void Optimize();
	}
	[Token(Token = "0x2000254")]
	public interface IOverloadableMemberDescriptor : IMemberDescriptor
	{
		[Token(Token = "0x17000205")]
		Type ExtensionMethodType
		{
			[Token(Token = "0x6001138")]
			get;
		}

		[Token(Token = "0x17000206")]
		ParameterDescriptor[] Parameters
		{
			[Token(Token = "0x6001139")]
			get;
		}

		[Token(Token = "0x17000207")]
		Type VarArgsArrayType
		{
			[Token(Token = "0x600113A")]
			get;
		}

		[Token(Token = "0x17000208")]
		Type VarArgsElementType
		{
			[Token(Token = "0x600113B")]
			get;
		}

		[Token(Token = "0x17000209")]
		string SortDiscriminant
		{
			[Token(Token = "0x600113C")]
			get;
		}

		[Token(Token = "0x6001137")]
		DynValue Execute(Script script, object obj, ScriptExecutionContext context, CallbackArguments args);
	}
	[Token(Token = "0x2000255")]
	[Flags]
	public enum MemberDescriptorAccess
	{
		[Token(Token = "0x4000C19")]
		CanRead = 1,
		[Token(Token = "0x4000C1A")]
		CanWrite = 2,
		[Token(Token = "0x4000C1B")]
		CanExecute = 4
	}
	[Token(Token = "0x2000256")]
	public sealed class ParameterDescriptor : IWireableDescriptor
	{
		[Token(Token = "0x4000C23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Type m_OriginalType;

		[Token(Token = "0x1700020A")]
		public string Name
		{
			[Token(Token = "0x600113D")]
			[Address(RVA = "0xEE0E10", Offset = "0xEE0E10", VA = "0xEE0E10")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600113E")]
			[Address(RVA = "0xEE0E18", Offset = "0xEE0E18", VA = "0xEE0E18")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700020B")]
		public Type Type
		{
			[Token(Token = "0x600113F")]
			[Address(RVA = "0xEE0E20", Offset = "0xEE0E20", VA = "0xEE0E20")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001140")]
			[Address(RVA = "0xEE0E28", Offset = "0xEE0E28", VA = "0xEE0E28")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700020C")]
		public bool HasDefaultValue
		{
			[Token(Token = "0x6001141")]
			[Address(RVA = "0xEE0E30", Offset = "0xEE0E30", VA = "0xEE0E30")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001142")]
			[Address(RVA = "0xEE0E38", Offset = "0xEE0E38", VA = "0xEE0E38")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700020D")]
		public object DefaultValue
		{
			[Token(Token = "0x6001143")]
			[Address(RVA = "0xEE0E44", Offset = "0xEE0E44", VA = "0xEE0E44")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001144")]
			[Address(RVA = "0xEE0E4C", Offset = "0xEE0E4C", VA = "0xEE0E4C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700020E")]
		public bool IsOut
		{
			[Token(Token = "0x6001145")]
			[Address(RVA = "0xEE0E54", Offset = "0xEE0E54", VA = "0xEE0E54")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001146")]
			[Address(RVA = "0xEE0E5C", Offset = "0xEE0E5C", VA = "0xEE0E5C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700020F")]
		public bool IsRef
		{
			[Token(Token = "0x6001147")]
			[Address(RVA = "0xEE0E68", Offset = "0xEE0E68", VA = "0xEE0E68")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001148")]
			[Address(RVA = "0xEE0E70", Offset = "0xEE0E70", VA = "0xEE0E70")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000210")]
		public bool IsVarArgs
		{
			[Token(Token = "0x6001149")]
			[Address(RVA = "0xEE0E7C", Offset = "0xEE0E7C", VA = "0xEE0E7C")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600114A")]
			[Address(RVA = "0xEE0E84", Offset = "0xEE0E84", VA = "0xEE0E84")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000211")]
		public bool HasBeenRestricted
		{
			[Token(Token = "0x600114B")]
			[Address(RVA = "0xEE0E90", Offset = "0xEE0E90", VA = "0xEE0E90")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000212")]
		public Type OriginalType
		{
			[Token(Token = "0x600114C")]
			[Address(RVA = "0xEE0EF0", Offset = "0xEE0EF0", VA = "0xEE0EF0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600114D")]
		[Address(RVA = "0xECB5EC", Offset = "0xECB5EC", VA = "0xECB5EC")]
		public ParameterDescriptor(string name, Type type, bool hasDefaultValue = false, [Optional] object defaultValue, bool isOut = false, bool isRef = false, bool isVarArgs = false)
		{
		}

		[Token(Token = "0x600114E")]
		[Address(RVA = "0xEE0F08", Offset = "0xEE0F08", VA = "0xEE0F08")]
		public ParameterDescriptor(string name, Type type, bool hasDefaultValue, object defaultValue, bool isOut, bool isRef, bool isVarArgs, Type typeRestriction)
		{
		}

		[Token(Token = "0x600114F")]
		[Address(RVA = "0xEE1194", Offset = "0xEE1194", VA = "0xEE1194")]
		public ParameterDescriptor(ParameterInfo pi)
		{
		}

		[Token(Token = "0x6001150")]
		[Address(RVA = "0xEE13C4", Offset = "0xEE13C4", VA = "0xEE13C4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6001151")]
		[Address(RVA = "0xEE1030", Offset = "0xEE1030", VA = "0xEE1030")]
		public void RestrictType(Type type)
		{
		}

		[Token(Token = "0x6001152")]
		[Address(RVA = "0xEE1470", Offset = "0xEE1470", VA = "0xEE1470", Slot = "4")]
		public void PrepareForWiring(Table table)
		{
		}
	}
	[Token(Token = "0x2000257")]
	public interface IWireableDescriptor
	{
		[Token(Token = "0x6001153")]
		void PrepareForWiring(Table t);
	}
}
namespace MoonSharp.Interpreter.Execution
{
	[Token(Token = "0x2000258")]
	[Flags]
	internal enum InstructionFieldUsage
	{
		[Token(Token = "0x4000C25")]
		None = 0,
		[Token(Token = "0x4000C26")]
		Symbol = 1,
		[Token(Token = "0x4000C27")]
		SymbolList = 2,
		[Token(Token = "0x4000C28")]
		Name = 4,
		[Token(Token = "0x4000C29")]
		Value = 8,
		[Token(Token = "0x4000C2A")]
		NumVal = 0x10,
		[Token(Token = "0x4000C2B")]
		NumVal2 = 0x20,
		[Token(Token = "0x4000C2C")]
		NumValAsCodeAddress = 0x8010
	}
	[Token(Token = "0x2000259")]
	internal static class InstructionFieldUsage_Extensions
	{
		[Token(Token = "0x6001154")]
		[Address(RVA = "0xEE179C", Offset = "0xEE179C", VA = "0xEE179C")]
		internal static InstructionFieldUsage GetFieldUsage(this OpCode op)
		{
			return default(InstructionFieldUsage);
		}
	}
	[Token(Token = "0x200025A")]
	internal class BuildTimeScope
	{
		[Token(Token = "0x4000C2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<BuildTimeScopeFrame> m_Frames;

		[Token(Token = "0x4000C2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private List<IClosureBuilder> m_ClosureBuilders;

		[Token(Token = "0x6001155")]
		[Address(RVA = "0xEE183C", Offset = "0xEE183C", VA = "0xEE183C")]
		public void PushFunction(IClosureBuilder closureBuilder, bool hasVarArgs)
		{
		}

		[Token(Token = "0x6001156")]
		[Address(RVA = "0xEE19A8", Offset = "0xEE19A8", VA = "0xEE19A8")]
		public void PushBlock()
		{
		}

		[Token(Token = "0x6001157")]
		[Address(RVA = "0xEE1A00", Offset = "0xEE1A00", VA = "0xEE1A00")]
		public RuntimeScopeBlock PopBlock()
		{
			return null;
		}

		[Token(Token = "0x6001158")]
		[Address(RVA = "0xEE1A58", Offset = "0xEE1A58", VA = "0xEE1A58")]
		public RuntimeScopeFrame PopFunction()
		{
			return null;
		}

		[Token(Token = "0x6001159")]
		[Address(RVA = "0xEE1B30", Offset = "0xEE1B30", VA = "0xEE1B30")]
		public SymbolRef Find(string name)
		{
			return null;
		}

		[Token(Token = "0x600115A")]
		[Address(RVA = "0xEE1DB4", Offset = "0xEE1DB4", VA = "0xEE1DB4")]
		public SymbolRef CreateGlobalReference(string name)
		{
			return null;
		}

		[Token(Token = "0x600115B")]
		[Address(RVA = "0xEE1EA4", Offset = "0xEE1EA4", VA = "0xEE1EA4")]
		public void ForceEnvUpValue()
		{
		}

		[Token(Token = "0x600115C")]
		[Address(RVA = "0xEE1C4C", Offset = "0xEE1C4C", VA = "0xEE1C4C")]
		private SymbolRef CreateUpValue(BuildTimeScope buildTimeScope, SymbolRef symb, int closuredFrame, int currentFrame)
		{
			return null;
		}

		[Token(Token = "0x600115D")]
		[Address(RVA = "0xEE1EEC", Offset = "0xEE1EEC", VA = "0xEE1EEC")]
		public SymbolRef DefineLocal(string name)
		{
			return null;
		}

		[Token(Token = "0x600115E")]
		[Address(RVA = "0xEE1F54", Offset = "0xEE1F54", VA = "0xEE1F54")]
		public SymbolRef TryDefineLocal(string name)
		{
			return null;
		}

		[Token(Token = "0x600115F")]
		[Address(RVA = "0xEE1FBC", Offset = "0xEE1FBC", VA = "0xEE1FBC")]
		public bool CurrentFunctionHasVarArgs()
		{
			return default(bool);
		}

		[Token(Token = "0x6001160")]
		[Address(RVA = "0xEE2014", Offset = "0xEE2014", VA = "0xEE2014")]
		internal void DefineLabel(LabelStatement label)
		{
		}

		[Token(Token = "0x6001161")]
		[Address(RVA = "0xEE207C", Offset = "0xEE207C", VA = "0xEE207C")]
		internal void RegisterGoto(GotoStatement gotostat)
		{
		}

		[Token(Token = "0x6001162")]
		[Address(RVA = "0xEE20E4", Offset = "0xEE20E4", VA = "0xEE20E4")]
		public BuildTimeScope()
		{
		}
	}
	[Token(Token = "0x200025B")]
	internal class ClosureContext : List<DynValue>
	{
		[Token(Token = "0x17000213")]
		public string[] Symbols
		{
			[Token(Token = "0x6001163")]
			[Address(RVA = "0xEE21BC", Offset = "0xEE21BC", VA = "0xEE21BC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001164")]
			[Address(RVA = "0xEE21C4", Offset = "0xEE21C4", VA = "0xEE21C4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6001165")]
		[Address(RVA = "0xEE21CC", Offset = "0xEE21CC", VA = "0xEE21CC")]
		internal ClosureContext(SymbolRef[] symbols, IEnumerable<DynValue> values)
		{
		}

		[Token(Token = "0x6001166")]
		[Address(RVA = "0xEE2384", Offset = "0xEE2384", VA = "0xEE2384")]
		internal ClosureContext()
		{
		}
	}
	[Token(Token = "0x200025D")]
	internal interface IClosureBuilder
	{
		[Token(Token = "0x600116A")]
		SymbolRef CreateUpvalue(BuildTimeScope scope, SymbolRef symbol);
	}
	[Token(Token = "0x200025E")]
	internal interface ILoop
	{
		[Token(Token = "0x600116B")]
		void CompileBreak(ByteCode bc);

		[Token(Token = "0x600116C")]
		bool IsBoundary();
	}
	[Token(Token = "0x200025F")]
	internal class LoopTracker
	{
		[Token(Token = "0x4000C32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public FastStack<ILoop> Loops;

		[Token(Token = "0x600116D")]
		[Address(RVA = "0xEE24B0", Offset = "0xEE24B0", VA = "0xEE24B0")]
		public LoopTracker()
		{
		}
	}
	[Token(Token = "0x2000260")]
	internal class RuntimeScopeBlock
	{
		[Token(Token = "0x17000214")]
		public int From
		{
			[Token(Token = "0x600116E")]
			[Address(RVA = "0xEE253C", Offset = "0xEE253C", VA = "0xEE253C")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600116F")]
			[Address(RVA = "0xEE2544", Offset = "0xEE2544", VA = "0xEE2544")]
			[CompilerGenerated]
			internal set
			{
			}
		}

		[Token(Token = "0x17000215")]
		public int To
		{
			[Token(Token = "0x6001170")]
			[Address(RVA = "0xEE254C", Offset = "0xEE254C", VA = "0xEE254C")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001171")]
			[Address(RVA = "0xEE2554", Offset = "0xEE2554", VA = "0xEE2554")]
			[CompilerGenerated]
			internal set
			{
			}
		}

		[Token(Token = "0x17000216")]
		public int ToInclusive
		{
			[Token(Token = "0x6001172")]
			[Address(RVA = "0xEE255C", Offset = "0xEE255C", VA = "0xEE255C")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001173")]
			[Address(RVA = "0xEE2564", Offset = "0xEE2564", VA = "0xEE2564")]
			[CompilerGenerated]
			internal set
			{
			}
		}

		[Token(Token = "0x6001174")]
		[Address(RVA = "0xEE256C", Offset = "0xEE256C", VA = "0xEE256C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6001175")]
		[Address(RVA = "0xEE2630", Offset = "0xEE2630", VA = "0xEE2630")]
		public RuntimeScopeBlock()
		{
		}
	}
	[Token(Token = "0x2000261")]
	internal class RuntimeScopeFrame
	{
		[Token(Token = "0x17000217")]
		public List<SymbolRef> DebugSymbols
		{
			[Token(Token = "0x6001176")]
			[Address(RVA = "0xEE2638", Offset = "0xEE2638", VA = "0xEE2638")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001177")]
			[Address(RVA = "0xEE2640", Offset = "0xEE2640", VA = "0xEE2640")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000218")]
		public int Count
		{
			[Token(Token = "0x6001178")]
			[Address(RVA = "0xEE2648", Offset = "0xEE2648", VA = "0xEE2648")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000219")]
		public int ToFirstBlock
		{
			[Token(Token = "0x6001179")]
			[Address(RVA = "0xEE2690", Offset = "0xEE2690", VA = "0xEE2690")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600117A")]
			[Address(RVA = "0xEE2698", Offset = "0xEE2698", VA = "0xEE2698")]
			[CompilerGenerated]
			internal set
			{
			}
		}

		[Token(Token = "0x600117B")]
		[Address(RVA = "0xEE26A0", Offset = "0xEE26A0", VA = "0xEE26A0")]
		public RuntimeScopeFrame()
		{
		}

		[Token(Token = "0x600117C")]
		[Address(RVA = "0xEE2728", Offset = "0xEE2728", VA = "0xEE2728", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000262")]
	internal class ScriptLoadingContext
	{
		[Token(Token = "0x1700021A")]
		public Script Script
		{
			[Token(Token = "0x600117D")]
			[Address(RVA = "0xEE27B4", Offset = "0xEE27B4", VA = "0xEE27B4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600117E")]
			[Address(RVA = "0xEE27BC", Offset = "0xEE27BC", VA = "0xEE27BC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700021B")]
		public BuildTimeScope Scope
		{
			[Token(Token = "0x600117F")]
			[Address(RVA = "0xEE27C4", Offset = "0xEE27C4", VA = "0xEE27C4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001180")]
			[Address(RVA = "0xEE27CC", Offset = "0xEE27CC", VA = "0xEE27CC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700021C")]
		public SourceCode Source
		{
			[Token(Token = "0x6001181")]
			[Address(RVA = "0xEE27D4", Offset = "0xEE27D4", VA = "0xEE27D4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001182")]
			[Address(RVA = "0xEE27DC", Offset = "0xEE27DC", VA = "0xEE27DC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700021D")]
		public bool Anonymous
		{
			[Token(Token = "0x6001183")]
			[Address(RVA = "0xEE27E4", Offset = "0xEE27E4", VA = "0xEE27E4")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001184")]
			[Address(RVA = "0xEE27EC", Offset = "0xEE27EC", VA = "0xEE27EC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700021E")]
		public bool IsDynamicExpression
		{
			[Token(Token = "0x6001185")]
			[Address(RVA = "0xEE27F8", Offset = "0xEE27F8", VA = "0xEE27F8")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001186")]
			[Address(RVA = "0xEE2800", Offset = "0xEE2800", VA = "0xEE2800")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700021F")]
		public Lexer Lexer
		{
			[Token(Token = "0x6001187")]
			[Address(RVA = "0xEE280C", Offset = "0xEE280C", VA = "0xEE280C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001188")]
			[Address(RVA = "0xEE2814", Offset = "0xEE2814", VA = "0xEE2814")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6001189")]
		[Address(RVA = "0xEE281C", Offset = "0xEE281C", VA = "0xEE281C")]
		public ScriptLoadingContext(Script s)
		{
		}
	}
}
namespace MoonSharp.Interpreter.Execution.VM
{
	[Token(Token = "0x2000263")]
	internal class ByteCode : RefIdObject
	{
		[Token(Token = "0x2000264")]
		private class SourceCodeStackGuard : IDisposable
		{
			[Token(Token = "0x4000C43")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private ByteCode m_Bc;

			[Token(Token = "0x60011B7")]
			[Address(RVA = "0xEE29F8", Offset = "0xEE29F8", VA = "0xEE29F8")]
			public SourceCodeStackGuard(SourceRef sref, ByteCode bc)
			{
			}

			[Token(Token = "0x60011B8")]
			[Address(RVA = "0xEE47E4", Offset = "0xEE47E4", VA = "0xEE47E4", Slot = "4")]
			public void Dispose()
			{
			}
		}

		[Token(Token = "0x4000C3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<Instruction> Code;

		[Token(Token = "0x4000C40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<SourceRef> m_SourceRefStack;

		[Token(Token = "0x4000C41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private SourceRef m_CurrentSourceRef;

		[Token(Token = "0x4000C42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal LoopTracker LoopTracker;

		[Token(Token = "0x17000220")]
		public Script Script
		{
			[Token(Token = "0x600118A")]
			[Address(RVA = "0xEE284C", Offset = "0xEE284C", VA = "0xEE284C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600118B")]
			[Address(RVA = "0xEE2854", Offset = "0xEE2854", VA = "0xEE2854")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x600118C")]
		[Address(RVA = "0xEE285C", Offset = "0xEE285C", VA = "0xEE285C")]
		public ByteCode(Script script)
		{
		}

		[Token(Token = "0x600118D")]
		[Address(RVA = "0xEE2988", Offset = "0xEE2988", VA = "0xEE2988")]
		public IDisposable EnterSource(SourceRef sref)
		{
			return null;
		}

		[Token(Token = "0x600118E")]
		[Address(RVA = "0xEE2A40", Offset = "0xEE2A40", VA = "0xEE2A40")]
		public void PushSourceRef(SourceRef sref)
		{
		}

		[Token(Token = "0x600118F")]
		[Address(RVA = "0xEE2AFC", Offset = "0xEE2AFC", VA = "0xEE2AFC")]
		public void PopSourceRef()
		{
		}

		[Token(Token = "0x6001190")]
		[Address(RVA = "0xEE2BA8", Offset = "0xEE2BA8", VA = "0xEE2BA8")]
		public void Dump(string file)
		{
		}

		[Token(Token = "0x6001191")]
		[Address(RVA = "0xEE2D54", Offset = "0xEE2D54", VA = "0xEE2D54")]
		public int GetJumpPointForNextInstruction()
		{
			return default(int);
		}

		[Token(Token = "0x6001192")]
		[Address(RVA = "0xEE2D9C", Offset = "0xEE2D9C", VA = "0xEE2D9C")]
		public int GetJumpPointForLastInstruction()
		{
			return default(int);
		}

		[Token(Token = "0x6001193")]
		[Address(RVA = "0xEE2DE8", Offset = "0xEE2DE8", VA = "0xEE2DE8")]
		public Instruction GetLastInstruction()
		{
			return null;
		}

		[Token(Token = "0x6001194")]
		[Address(RVA = "0xEE2E4C", Offset = "0xEE2E4C", VA = "0xEE2E4C")]
		private Instruction AppendInstruction(Instruction c)
		{
			return null;
		}

		[Token(Token = "0x6001195")]
		[Address(RVA = "0xEE2F00", Offset = "0xEE2F00", VA = "0xEE2F00")]
		public Instruction Emit_Nop(string comment)
		{
			return null;
		}

		[Token(Token = "0x6001196")]
		[Address(RVA = "0xEE2FC8", Offset = "0xEE2FC8", VA = "0xEE2FC8")]
		public Instruction Emit_Invalid(string type)
		{
			return null;
		}

		[Token(Token = "0x6001197")]
		[Address(RVA = "0xEE3064", Offset = "0xEE3064", VA = "0xEE3064")]
		public Instruction Emit_Pop(int num = 1)
		{
			return null;
		}

		[Token(Token = "0x6001198")]
		[Address(RVA = "0xEE30F4", Offset = "0xEE30F4", VA = "0xEE30F4")]
		public void Emit_Call(int argCount, string debugName)
		{
		}

		[Token(Token = "0x6001199")]
		[Address(RVA = "0xEE3198", Offset = "0xEE3198", VA = "0xEE3198")]
		public void Emit_ThisCall(int argCount, string debugName)
		{
		}

		[Token(Token = "0x600119A")]
		[Address(RVA = "0xEE323C", Offset = "0xEE323C", VA = "0xEE323C")]
		public Instruction Emit_Literal(DynValue value)
		{
			return null;
		}

		[Token(Token = "0x600119B")]
		[Address(RVA = "0xEE32D8", Offset = "0xEE32D8", VA = "0xEE32D8")]
		public Instruction Emit_Jump(OpCode jumpOpCode, int idx, int optPar = 0)
		{
			return null;
		}

		[Token(Token = "0x600119C")]
		[Address(RVA = "0xEE3374", Offset = "0xEE3374", VA = "0xEE3374")]
		public Instruction Emit_MkTuple(int cnt)
		{
			return null;
		}

		[Token(Token = "0x600119D")]
		[Address(RVA = "0xEE3404", Offset = "0xEE3404", VA = "0xEE3404")]
		public Instruction Emit_Operator(OpCode opcode)
		{
			return null;
		}

		[Token(Token = "0x600119E")]
		[Address(RVA = "0xEE350C", Offset = "0xEE350C", VA = "0xEE350C")]
		[Conditional("EMIT_DEBUG_OPS")]
		public void Emit_Debug(string str)
		{
		}

		[Token(Token = "0x600119F")]
		[Address(RVA = "0xEE35FC", Offset = "0xEE35FC", VA = "0xEE35FC")]
		public Instruction Emit_Enter(RuntimeScopeBlock runtimeScopeBlock)
		{
			return null;
		}

		[Token(Token = "0x60011A0")]
		[Address(RVA = "0xEE36A0", Offset = "0xEE36A0", VA = "0xEE36A0")]
		public Instruction Emit_Leave(RuntimeScopeBlock runtimeScopeBlock)
		{
			return null;
		}

		[Token(Token = "0x60011A1")]
		[Address(RVA = "0xEE373C", Offset = "0xEE373C", VA = "0xEE373C")]
		public Instruction Emit_Exit(RuntimeScopeBlock runtimeScopeBlock)
		{
			return null;
		}

		[Token(Token = "0x60011A2")]
		[Address(RVA = "0xEE37E0", Offset = "0xEE37E0", VA = "0xEE37E0")]
		public Instruction Emit_Clean(RuntimeScopeBlock runtimeScopeBlock)
		{
			return null;
		}

		[Token(Token = "0x60011A3")]
		[Address(RVA = "0xEE3888", Offset = "0xEE3888", VA = "0xEE3888")]
		public Instruction Emit_Closure(SymbolRef[] symbols, int jmpnum)
		{
			return null;
		}

		[Token(Token = "0x60011A4")]
		[Address(RVA = "0xEE392C", Offset = "0xEE392C", VA = "0xEE392C")]
		public Instruction Emit_Args(params SymbolRef[] symbols)
		{
			return null;
		}

		[Token(Token = "0x60011A5")]
		[Address(RVA = "0xEE39C8", Offset = "0xEE39C8", VA = "0xEE39C8")]
		public Instruction Emit_Ret(int retvals)
		{
			return null;
		}

		[Token(Token = "0x60011A6")]
		[Address(RVA = "0xEE3A58", Offset = "0xEE3A58", VA = "0xEE3A58")]
		public Instruction Emit_ToNum(int stage = 0)
		{
			return null;
		}

		[Token(Token = "0x60011A7")]
		[Address(RVA = "0xEE3AE8", Offset = "0xEE3AE8", VA = "0xEE3AE8")]
		public Instruction Emit_Incr(int i)
		{
			return null;
		}

		[Token(Token = "0x60011A8")]
		[Address(RVA = "0xEE3B78", Offset = "0xEE3B78", VA = "0xEE3B78")]
		public Instruction Emit_NewTable(bool shared)
		{
			return null;
		}

		[Token(Token = "0x60011A9")]
		[Address(RVA = "0xEE3C0C", Offset = "0xEE3C0C", VA = "0xEE3C0C")]
		public Instruction Emit_IterPrep()
		{
			return null;
		}

		[Token(Token = "0x60011AA")]
		[Address(RVA = "0xEE3C8C", Offset = "0xEE3C8C", VA = "0xEE3C8C")]
		public Instruction Emit_ExpTuple(int stackOffset)
		{
			return null;
		}

		[Token(Token = "0x60011AB")]
		[Address(RVA = "0xEE3D1C", Offset = "0xEE3D1C", VA = "0xEE3D1C")]
		public Instruction Emit_IterUpd()
		{
			return null;
		}

		[Token(Token = "0x60011AC")]
		[Address(RVA = "0xEE3D9C", Offset = "0xEE3D9C", VA = "0xEE3D9C")]
		public Instruction Emit_Meta(string funcName, OpCodeMetadataType metaType, [Optional] DynValue value)
		{
			return null;
		}

		[Token(Token = "0x60011AD")]
		[Address(RVA = "0xEE3E5C", Offset = "0xEE3E5C", VA = "0xEE3E5C")]
		public Instruction Emit_BeginFn(RuntimeScopeFrame stackFrame)
		{
			return null;
		}

		[Token(Token = "0x60011AE")]
		[Address(RVA = "0xEE3F38", Offset = "0xEE3F38", VA = "0xEE3F38")]
		public Instruction Emit_Scalar()
		{
			return null;
		}

		[Token(Token = "0x60011AF")]
		[Address(RVA = "0xEE3FB8", Offset = "0xEE3FB8", VA = "0xEE3FB8")]
		public int Emit_Load(SymbolRef sym)
		{
			return default(int);
		}

		[Token(Token = "0x60011B0")]
		[Address(RVA = "0xEE41D8", Offset = "0xEE41D8", VA = "0xEE41D8")]
		public int Emit_Store(SymbolRef sym, int stackofs, int tupleidx)
		{
			return default(int);
		}

		[Token(Token = "0x60011B1")]
		[Address(RVA = "0xEE4410", Offset = "0xEE4410", VA = "0xEE4410")]
		public Instruction Emit_TblInitN()
		{
			return null;
		}

		[Token(Token = "0x60011B2")]
		[Address(RVA = "0xEE4490", Offset = "0xEE4490", VA = "0xEE4490")]
		public Instruction Emit_TblInitI(bool lastpos)
		{
			return null;
		}

		[Token(Token = "0x60011B3")]
		[Address(RVA = "0xEE4524", Offset = "0xEE4524", VA = "0xEE4524")]
		public Instruction Emit_Index([Optional] DynValue index, bool isNameIndex = false, bool isExpList = false)
		{
			return null;
		}

		[Token(Token = "0x60011B4")]
		[Address(RVA = "0xEE45E8", Offset = "0xEE45E8", VA = "0xEE45E8")]
		public Instruction Emit_IndexSet(int stackofs, int tupleidx, [Optional] DynValue index, bool isNameIndex = false, bool isExpList = false)
		{
			return null;
		}

		[Token(Token = "0x60011B5")]
		[Address(RVA = "0xEE46C0", Offset = "0xEE46C0", VA = "0xEE46C0")]
		public Instruction Emit_Copy(int numval)
		{
			return null;
		}

		[Token(Token = "0x60011B6")]
		[Address(RVA = "0xEE4750", Offset = "0xEE4750", VA = "0xEE4750")]
		public Instruction Emit_Swap(int p1, int p2)
		{
			return null;
		}
	}
	[Token(Token = "0x2000265")]
	internal class CallStackItem
	{
		[Token(Token = "0x4000C44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int Debug_EntryPoint;

		[Token(Token = "0x4000C45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SymbolRef[] Debug_Symbols;

		[Token(Token = "0x4000C46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SourceRef CallingSourceRef;

		[Token(Token = "0x4000C47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public CallbackFunction ClrFunction;

		[Token(Token = "0x4000C48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public CallbackFunction Continuation;

		[Token(Token = "0x4000C49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public CallbackFunction ErrorHandler;

		[Token(Token = "0x4000C4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public DynValue ErrorHandlerBeforeUnwind;

		[Token(Token = "0x4000C4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public int BasePointer;

		[Token(Token = "0x4000C4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public int ReturnAddress;

		[Token(Token = "0x4000C4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public DynValue[] LocalScope;

		[Token(Token = "0x4000C4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public ClosureContext ClosureScope;

		[Token(Token = "0x4000C4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public CallStackItemFlags Flags;

		[Token(Token = "0x60011B9")]
		[Address(RVA = "0xEE47FC", Offset = "0xEE47FC", VA = "0xEE47FC")]
		public CallStackItem()
		{
		}
	}
	[Token(Token = "0x2000266")]
	[Flags]
	internal enum CallStackItemFlags
	{
		[Token(Token = "0x4000C51")]
		None = 0,
		[Token(Token = "0x4000C52")]
		EntryPoint = 1,
		[Token(Token = "0x4000C53")]
		ResumeEntryPoint = 3,
		[Token(Token = "0x4000C54")]
		CallEntryPoint = 5,
		[Token(Token = "0x4000C55")]
		TailCall = 0x10,
		[Token(Token = "0x4000C56")]
		MethodCall = 0x20
	}
	[Token(Token = "0x2000267")]
	internal sealed class ExecutionState
	{
		[Token(Token = "0x4000C57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public FastStack<DynValue> ValueStack;

		[Token(Token = "0x4000C58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FastStack<CallStackItem> ExecutionStack;

		[Token(Token = "0x4000C59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int InstructionPtr;

		[Token(Token = "0x4000C5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public CoroutineState State;

		[Token(Token = "0x60011BA")]
		[Address(RVA = "0xEE4804", Offset = "0xEE4804", VA = "0xEE4804")]
		public ExecutionState()
		{
		}
	}
	[Token(Token = "0x2000268")]
	internal class Instruction
	{
		[Token(Token = "0x4000C5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal OpCode OpCode;

		[Token(Token = "0x4000C5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal SymbolRef Symbol;

		[Token(Token = "0x4000C5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal SymbolRef[] SymbolList;

		[Token(Token = "0x4000C5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal string Name;

		[Token(Token = "0x4000C5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal DynValue Value;

		[Token(Token = "0x4000C60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal int NumVal;

		[Token(Token = "0x4000C61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		internal int NumVal2;

		[Token(Token = "0x4000C62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal SourceRef SourceCodeRef;

		[Token(Token = "0x60011BB")]
		[Address(RVA = "0xEE2F98", Offset = "0xEE2F98", VA = "0xEE2F98")]
		internal Instruction(SourceRef sourceref)
		{
		}

		[Token(Token = "0x60011BC")]
		[Address(RVA = "0xEE48EC", Offset = "0xEE48EC", VA = "0xEE48EC", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60011BD")]
		[Address(RVA = "0xEE4CA8", Offset = "0xEE4CA8", VA = "0xEE4CA8")]
		private string PurifyFromNewLines(DynValue Value)
		{
			return null;
		}

		[Token(Token = "0x60011BE")]
		[Address(RVA = "0xEE4C1C", Offset = "0xEE4C1C", VA = "0xEE4C1C")]
		private string GenSpaces()
		{
			return null;
		}

		[Token(Token = "0x60011BF")]
		[Address(RVA = "0xEE4D34", Offset = "0xEE4D34", VA = "0xEE4D34")]
		internal void WriteBinary(BinaryWriter wr, int baseAddress, Dictionary<SymbolRef, int> symbolMap)
		{
		}

		[Token(Token = "0x60011C0")]
		[Address(RVA = "0xEE505C", Offset = "0xEE505C", VA = "0xEE505C")]
		private static void WriteSymbol(BinaryWriter wr, SymbolRef symbolRef, Dictionary<SymbolRef, int> symbolMap)
		{
		}

		[Token(Token = "0x60011C1")]
		[Address(RVA = "0xEE50E8", Offset = "0xEE50E8", VA = "0xEE50E8")]
		private static SymbolRef ReadSymbol(BinaryReader rd, SymbolRef[] deserializedSymbols)
		{
			return null;
		}

		[Token(Token = "0x60011C2")]
		[Address(RVA = "0xEE5138", Offset = "0xEE5138", VA = "0xEE5138")]
		internal static Instruction ReadBinary(SourceRef chunkRef, BinaryReader rd, int baseAddress, Table envTable, SymbolRef[] deserializedSymbols)
		{
			return null;
		}

		[Token(Token = "0x60011C3")]
		[Address(RVA = "0xEE53A4", Offset = "0xEE53A4", VA = "0xEE53A4")]
		private static DynValue ReadValue(BinaryReader rd, Table envTable)
		{
			return null;
		}

		[Token(Token = "0x60011C4")]
		[Address(RVA = "0xEE4EE4", Offset = "0xEE4EE4", VA = "0xEE4EE4")]
		private void DumpValue(BinaryWriter wr, DynValue value)
		{
		}

		[Token(Token = "0x60011C5")]
		[Address(RVA = "0xEE5620", Offset = "0xEE5620", VA = "0xEE5620")]
		internal void GetSymbolReferences(out SymbolRef[] symbolList, out SymbolRef symbol)
		{
		}
	}
	[Token(Token = "0x200026A")]
	internal enum OpCode
	{
		[Token(Token = "0x4000C66")]
		Nop,
		[Token(Token = "0x4000C67")]
		Debug,
		[Token(Token = "0x4000C68")]
		Pop,
		[Token(Token = "0x4000C69")]
		Copy,
		[Token(Token = "0x4000C6A")]
		Swap,
		[Token(Token = "0x4000C6B")]
		Literal,
		[Token(Token = "0x4000C6C")]
		Closure,
		[Token(Token = "0x4000C6D")]
		NewTable,
		[Token(Token = "0x4000C6E")]
		TblInitN,
		[Token(Token = "0x4000C6F")]
		TblInitI,
		[Token(Token = "0x4000C70")]
		StoreLcl,
		[Token(Token = "0x4000C71")]
		Local,
		[Token(Token = "0x4000C72")]
		StoreUpv,
		[Token(Token = "0x4000C73")]
		Upvalue,
		[Token(Token = "0x4000C74")]
		IndexSet,
		[Token(Token = "0x4000C75")]
		Index,
		[Token(Token = "0x4000C76")]
		IndexSetN,
		[Token(Token = "0x4000C77")]
		IndexN,
		[Token(Token = "0x4000C78")]
		IndexSetL,
		[Token(Token = "0x4000C79")]
		IndexL,
		[Token(Token = "0x4000C7A")]
		Clean,
		[Token(Token = "0x4000C7B")]
		Meta,
		[Token(Token = "0x4000C7C")]
		BeginFn,
		[Token(Token = "0x4000C7D")]
		Args,
		[Token(Token = "0x4000C7E")]
		Call,
		[Token(Token = "0x4000C7F")]
		ThisCall,
		[Token(Token = "0x4000C80")]
		Ret,
		[Token(Token = "0x4000C81")]
		Jump,
		[Token(Token = "0x4000C82")]
		Jf,
		[Token(Token = "0x4000C83")]
		JNil,
		[Token(Token = "0x4000C84")]
		JFor,
		[Token(Token = "0x4000C85")]
		JtOrPop,
		[Token(Token = "0x4000C86")]
		JfOrPop,
		[Token(Token = "0x4000C87")]
		Concat,
		[Token(Token = "0x4000C88")]
		LessEq,
		[Token(Token = "0x4000C89")]
		Less,
		[Token(Token = "0x4000C8A")]
		Eq,
		[Token(Token = "0x4000C8B")]
		Add,
		[Token(Token = "0x4000C8C")]
		Sub,
		[Token(Token = "0x4000C8D")]
		Mul,
		[Token(Token = "0x4000C8E")]
		Div,
		[Token(Token = "0x4000C8F")]
		Mod,
		[Token(Token = "0x4000C90")]
		Not,
		[Token(Token = "0x4000C91")]
		Len,
		[Token(Token = "0x4000C92")]
		Neg,
		[Token(Token = "0x4000C93")]
		Power,
		[Token(Token = "0x4000C94")]
		CNot,
		[Token(Token = "0x4000C95")]
		MkTuple,
		[Token(Token = "0x4000C96")]
		Scalar,
		[Token(Token = "0x4000C97")]
		Incr,
		[Token(Token = "0x4000C98")]
		ToNum,
		[Token(Token = "0x4000C99")]
		ToBool,
		[Token(Token = "0x4000C9A")]
		ExpTuple,
		[Token(Token = "0x4000C9B")]
		IterPrep,
		[Token(Token = "0x4000C9C")]
		IterUpd,
		[Token(Token = "0x4000C9D")]
		Invalid
	}
	[Token(Token = "0x200026B")]
	public enum OpCodeMetadataType
	{
		[Token(Token = "0x4000C9F")]
		ChunkEntrypoint,
		[Token(Token = "0x4000CA0")]
		FunctionEntrypoint
	}
	[Token(Token = "0x200026C")]
	internal sealed class Processor
	{
		[Token(Token = "0x200026D")]
		private class DebugContext
		{
			[Token(Token = "0x4000CB3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool DebuggerEnabled;

			[Token(Token = "0x4000CB4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public IDebugger DebuggerAttached;

			[Token(Token = "0x4000CB5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public DebuggerAction.ActionType DebuggerCurrentAction;

			[Token(Token = "0x4000CB6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public int DebuggerCurrentActionTarget;

			[Token(Token = "0x4000CB7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public SourceRef LastHlRef;

			[Token(Token = "0x4000CB8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public int ExStackDepthAtStep;

			[Token(Token = "0x4000CB9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public List<SourceRef> BreakPoints;

			[Token(Token = "0x4000CBA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public bool LineBasedBreakPoints;

			[Token(Token = "0x600122A")]
			[Address(RVA = "0xEF2A64", Offset = "0xEF2A64", VA = "0xEF2A64")]
			public DebugContext()
			{
			}
		}

		[Token(Token = "0x4000CA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private ByteCode m_RootChunk;

		[Token(Token = "0x4000CA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private FastStack<DynValue> m_ValueStack;

		[Token(Token = "0x4000CA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private FastStack<CallStackItem> m_ExecutionStack;

		[Token(Token = "0x4000CA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<Processor> m_CoroutinesStack;

		[Token(Token = "0x4000CA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Table m_GlobalTable;

		[Token(Token = "0x4000CA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Script m_Script;

		[Token(Token = "0x4000CA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Processor m_Parent;

		[Token(Token = "0x4000CA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private CoroutineState m_State;

		[Token(Token = "0x4000CA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private bool m_CanYield;

		[Token(Token = "0x4000CAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int m_SavedInstructionPtr;

		[Token(Token = "0x4000CAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private DebugContext m_Debug;

		[Token(Token = "0x4000CAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int m_OwningThreadID;

		[Token(Token = "0x4000CAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private int m_ExecutionNesting;

		[Token(Token = "0x4000CAE")]
		private const ulong DUMP_CHUNK_MAGIC = 1877195438928383261uL;

		[Token(Token = "0x4000CAF")]
		private const int DUMP_CHUNK_VERSION = 336;

		[Token(Token = "0x4000CB1")]
		private const int YIELD_SPECIAL_TRAP = -99;

		[Token(Token = "0x4000CB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		internal long AutoYieldCounter;

		[Token(Token = "0x17000221")]
		public CoroutineState State
		{
			[Token(Token = "0x60011D6")]
			[Address(RVA = "0xEE8D24", Offset = "0xEE8D24", VA = "0xEE8D24")]
			get
			{
				return default(CoroutineState);
			}
		}

		[Token(Token = "0x17000222")]
		public Coroutine AssociatedCoroutine
		{
			[Token(Token = "0x60011D7")]
			[Address(RVA = "0xEE8D2C", Offset = "0xEE8D2C", VA = "0xEE8D2C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60011D8")]
			[Address(RVA = "0xEE8D34", Offset = "0xEE8D34", VA = "0xEE8D34")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000223")]
		internal bool DebuggerEnabled
		{
			[Token(Token = "0x60011DC")]
			[Address(RVA = "0xEE91C4", Offset = "0xEE91C4", VA = "0xEE91C4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60011DD")]
			[Address(RVA = "0xEE91E0", Offset = "0xEE91E0", VA = "0xEE91E0")]
			set
			{
			}
		}

		[Token(Token = "0x60011C9")]
		[Address(RVA = "0xEE5740", Offset = "0xEE5740", VA = "0xEE5740")]
		public Processor(Script script, Table globalContext, ByteCode byteCode)
		{
		}

		[Token(Token = "0x60011CA")]
		[Address(RVA = "0xEE5974", Offset = "0xEE5974", VA = "0xEE5974")]
		private Processor(Processor parentProcessor)
		{
		}

		[Token(Token = "0x60011CB")]
		[Address(RVA = "0xEE5AD0", Offset = "0xEE5AD0", VA = "0xEE5AD0")]
		public DynValue Call(DynValue function, DynValue[] args)
		{
			return null;
		}

		[Token(Token = "0x60011CC")]
		[Address(RVA = "0xEE5F44", Offset = "0xEE5F44", VA = "0xEE5F44")]
		private int PushClrToScriptStackFrame(CallStackItemFlags flags, DynValue function, DynValue[] args)
		{
			return default(int);
		}

		[Token(Token = "0x60011CD")]
		[Address(RVA = "0xEE7954", Offset = "0xEE7954", VA = "0xEE7954")]
		private void LeaveProcessor()
		{
		}

		[Token(Token = "0x60011CE")]
		[Address(RVA = "0xEE7A6C", Offset = "0xEE7A6C", VA = "0xEE7A6C")]
		private int GetThreadId()
		{
			return default(int);
		}

		[Token(Token = "0x60011CF")]
		[Address(RVA = "0xEE5DA0", Offset = "0xEE5DA0", VA = "0xEE5DA0")]
		private void EnterProcessor()
		{
		}

		[Token(Token = "0x60011D0")]
		[Address(RVA = "0xEE7A8C", Offset = "0xEE7A8C", VA = "0xEE7A8C")]
		internal SourceRef GetCoroutineSuspendedLocation()
		{
			return null;
		}

		[Token(Token = "0x60011D1")]
		[Address(RVA = "0xEE7B24", Offset = "0xEE7B24", VA = "0xEE7B24")]
		internal static bool IsDumpStream(Stream stream)
		{
			return default(bool);
		}

		[Token(Token = "0x60011D2")]
		[Address(RVA = "0xEE7D44", Offset = "0xEE7D44", VA = "0xEE7D44")]
		internal int Dump(Stream stream, int baseAddress, bool hasUpvalues)
		{
			return default(int);
		}

		[Token(Token = "0x60011D3")]
		[Address(RVA = "0xEE85E4", Offset = "0xEE85E4", VA = "0xEE85E4")]
		private void AddSymbolToMap(Dictionary<SymbolRef, int> symbolMap, SymbolRef s)
		{
		}

		[Token(Token = "0x60011D4")]
		[Address(RVA = "0xEE8694", Offset = "0xEE8694", VA = "0xEE8694")]
		internal int Undump(Stream stream, int sourceID, Table envTable, out bool hasUpvalues)
		{
			return default(int);
		}

		[Token(Token = "0x60011D5")]
		[Address(RVA = "0xEE8C28", Offset = "0xEE8C28", VA = "0xEE8C28")]
		public DynValue Coroutine_Create(Closure closure)
		{
			return null;
		}

		[Token(Token = "0x60011D9")]
		[Address(RVA = "0xEE8D3C", Offset = "0xEE8D3C", VA = "0xEE8D3C")]
		public DynValue Coroutine_Resume(DynValue[] args)
		{
			return null;
		}

		[Token(Token = "0x60011DA")]
		[Address(RVA = "0xEE8550", Offset = "0xEE8550", VA = "0xEE8550")]
		internal Instruction FindMeta(ref int baseAddress)
		{
			return null;
		}

		[Token(Token = "0x60011DB")]
		[Address(RVA = "0xEE9060", Offset = "0xEE9060", VA = "0xEE9060")]
		internal void AttachDebugger(IDebugger debugger)
		{
		}

		[Token(Token = "0x60011DE")]
		[Address(RVA = "0xEE9200", Offset = "0xEE9200", VA = "0xEE9200")]
		private void ListenDebugger(Instruction instr, int instructionPtr)
		{
		}

		[Token(Token = "0x60011DF")]
		[Address(RVA = "0xEE9F7C", Offset = "0xEE9F7C", VA = "0xEE9F7C")]
		private void ResetBreakPoints(DebuggerAction action)
		{
		}

		[Token(Token = "0x60011E0")]
		[Address(RVA = "0xEEA020", Offset = "0xEEA020", VA = "0xEEA020")]
		internal HashSet<int> ResetBreakPoints(SourceCode src, HashSet<int> lines)
		{
			return null;
		}

		[Token(Token = "0x60011E1")]
		[Address(RVA = "0xEE9AAC", Offset = "0xEE9AAC", VA = "0xEE9AAC")]
		private bool ToggleBreakPoint(DebuggerAction action, bool? state)
		{
			return default(bool);
		}

		[Token(Token = "0x60011E2")]
		[Address(RVA = "0xEE9670", Offset = "0xEE9670", VA = "0xEE9670")]
		private void RefreshDebugger(bool hard, int instructionPtr)
		{
		}

		[Token(Token = "0x60011E3")]
		[Address(RVA = "0xEEAA50", Offset = "0xEEAA50", VA = "0xEEAA50")]
		private List<WatchItem> Debugger_RefreshThreads(ScriptExecutionContext context)
		{
			return null;
		}

		[Token(Token = "0x60011E4")]
		[Address(RVA = "0xEEA63C", Offset = "0xEEA63C", VA = "0xEEA63C")]
		private List<WatchItem> Debugger_RefreshVStack()
		{
			return null;
		}

		[Token(Token = "0x60011E5")]
		[Address(RVA = "0xEEA52C", Offset = "0xEEA52C", VA = "0xEEA52C")]
		private List<WatchItem> Debugger_RefreshWatches(ScriptExecutionContext context, List<DynamicExpression> watchList)
		{
			return null;
		}

		[Token(Token = "0x60011E6")]
		[Address(RVA = "0xEEA808", Offset = "0xEEA808", VA = "0xEEA808")]
		private List<WatchItem> Debugger_RefreshLocals(ScriptExecutionContext context)
		{
			return null;
		}

		[Token(Token = "0x60011E7")]
		[Address(RVA = "0xEEAB7C", Offset = "0xEEAB7C", VA = "0xEEAB7C")]
		private WatchItem Debugger_RefreshWatch(ScriptExecutionContext context, DynamicExpression dynExpr)
		{
			return null;
		}

		[Token(Token = "0x60011E8")]
		[Address(RVA = "0xEEA22C", Offset = "0xEEA22C", VA = "0xEEA22C")]
		internal List<WatchItem> Debugger_GetCallStack(SourceRef startingRef)
		{
			return null;
		}

		[Token(Token = "0x60011E9")]
		[Address(RVA = "0xEE7A94", Offset = "0xEE7A94", VA = "0xEE7A94")]
		private SourceRef GetCurrentSourceRef(int instructionPtr)
		{
			return null;
		}

		[Token(Token = "0x60011EA")]
		[Address(RVA = "0xEEAD7C", Offset = "0xEEAD7C", VA = "0xEEAD7C")]
		private void FillDebugData(InterpreterException ex, int ip)
		{
		}

		[Token(Token = "0x60011EB")]
		[Address(RVA = "0xEEAE04", Offset = "0xEEAE04", VA = "0xEEAE04")]
		internal Table GetMetatable(DynValue value)
		{
			return null;
		}

		[Token(Token = "0x60011EC")]
		[Address(RVA = "0xEEAE7C", Offset = "0xEEAE7C", VA = "0xEEAE7C")]
		internal DynValue GetBinaryMetamethod(DynValue op1, DynValue op2, string eventName)
		{
			return null;
		}

		[Token(Token = "0x60011ED")]
		[Address(RVA = "0xEEB0A4", Offset = "0xEEB0A4", VA = "0xEEB0A4")]
		internal DynValue GetMetamethod(DynValue value, string metamethod)
		{
			return null;
		}

		[Token(Token = "0x60011EE")]
		[Address(RVA = "0xEEB1CC", Offset = "0xEEB1CC", VA = "0xEEB1CC")]
		internal DynValue GetMetamethodRaw(DynValue value, string metamethod)
		{
			return null;
		}

		[Token(Token = "0x60011EF")]
		[Address(RVA = "0xEEB210", Offset = "0xEEB210", VA = "0xEEB210")]
		internal Script GetScript()
		{
			return null;
		}

		[Token(Token = "0x60011F0")]
		[Address(RVA = "0xEE6184", Offset = "0xEE6184", VA = "0xEE6184")]
		private DynValue Processing_Loop(int instructionPtr)
		{
			return null;
		}

		[Token(Token = "0x60011F1")]
		[Address(RVA = "0xEEFCB4", Offset = "0xEEFCB4", VA = "0xEEFCB4")]
		internal string PerformMessageDecorationBeforeUnwind(DynValue messageHandler, string decoratedMessage, SourceRef sourceRef)
		{
			return null;
		}

		[Token(Token = "0x60011F2")]
		[Address(RVA = "0xEF0054", Offset = "0xEF0054", VA = "0xEF0054")]
		private void AssignLocal(SymbolRef symref, DynValue value)
		{
		}

		[Token(Token = "0x60011F3")]
		[Address(RVA = "0xEEF120", Offset = "0xEEF120", VA = "0xEEF120")]
		private void ExecStoreLcl(Instruction i)
		{
		}

		[Token(Token = "0x60011F4")]
		[Address(RVA = "0xEEEFF4", Offset = "0xEEEFF4", VA = "0xEEEFF4")]
		private void ExecStoreUpv(Instruction i)
		{
		}

		[Token(Token = "0x60011F5")]
		[Address(RVA = "0xEEB218", Offset = "0xEEB218", VA = "0xEEB218")]
		private void ExecSwap(Instruction i)
		{
		}

		[Token(Token = "0x60011F6")]
		[Address(RVA = "0xEF016C", Offset = "0xEF016C", VA = "0xEF016C")]
		private DynValue GetStoreValue(Instruction i)
		{
			return null;
		}

		[Token(Token = "0x60011F7")]
		[Address(RVA = "0xEED858", Offset = "0xEED858", VA = "0xEED858")]
		private void ExecClosure(Instruction i)
		{
		}

		[Token(Token = "0x60011F8")]
		[Address(RVA = "0xEF0268", Offset = "0xEF0268", VA = "0xEF0268")]
		private DynValue GetUpvalueSymbol(SymbolRef s)
		{
			return null;
		}

		[Token(Token = "0x60011F9")]
		[Address(RVA = "0xEED67C", Offset = "0xEED67C", VA = "0xEED67C")]
		private void ExecMkTuple(Instruction i)
		{
		}

		[Token(Token = "0x60011FA")]
		[Address(RVA = "0xEEE348", Offset = "0xEEE348", VA = "0xEEE348")]
		private void ExecToNum(Instruction i)
		{
		}

		[Token(Token = "0x60011FB")]
		[Address(RVA = "0xEEEE0C", Offset = "0xEEEE0C", VA = "0xEEEE0C")]
		private void ExecIterUpd(Instruction i)
		{
		}

		[Token(Token = "0x60011FC")]
		[Address(RVA = "0xEEEED4", Offset = "0xEEEED4", VA = "0xEEEED4")]
		private void ExecExpTuple(Instruction i)
		{
		}

		[Token(Token = "0x60011FD")]
		[Address(RVA = "0xEEE570", Offset = "0xEEE570", VA = "0xEEE570")]
		private void ExecIterPrep(Instruction i)
		{
		}

		[Token(Token = "0x60011FE")]
		[Address(RVA = "0xEEE494", Offset = "0xEEE494", VA = "0xEEE494")]
		private int ExecJFor(Instruction i, int instructionPtr)
		{
			return default(int);
		}

		[Token(Token = "0x60011FF")]
		[Address(RVA = "0xEEE238", Offset = "0xEEE238", VA = "0xEEE238")]
		private void ExecIncr(Instruction i)
		{
		}

		[Token(Token = "0x6001200")]
		[Address(RVA = "0xEED3A0", Offset = "0xEED3A0", VA = "0xEED3A0")]
		private void ExecCNot(Instruction i)
		{
		}

		[Token(Token = "0x6001201")]
		[Address(RVA = "0xEED2D0", Offset = "0xEED2D0", VA = "0xEED2D0")]
		private void ExecNot(Instruction i)
		{
		}

		[Token(Token = "0x6001202")]
		[Address(RVA = "0xEED9D8", Offset = "0xEED9D8", VA = "0xEED9D8")]
		private void ExecBeginFn(Instruction i)
		{
		}

		[Token(Token = "0x6001203")]
		[Address(RVA = "0xEEFFC8", Offset = "0xEEFFC8", VA = "0xEEFFC8")]
		private CallStackItem PopToBasePointer()
		{
			return null;
		}

		[Token(Token = "0x6001204")]
		[Address(RVA = "0xEF0394", Offset = "0xEF0394", VA = "0xEF0394")]
		private int PopExecStackAndCheckVStack(int vstackguard)
		{
			return default(int);
		}

		[Token(Token = "0x6001205")]
		[Address(RVA = "0xEF044C", Offset = "0xEF044C", VA = "0xEF044C")]
		private IList<DynValue> CreateArgsListForFunctionCall(int numargs, int offsFromTop)
		{
			return null;
		}

		[Token(Token = "0x6001206")]
		[Address(RVA = "0xEEDA90", Offset = "0xEEDA90", VA = "0xEEDA90")]
		private void ExecArgs(Instruction I)
		{
		}

		[Token(Token = "0x6001207")]
		[Address(RVA = "0xEECBBC", Offset = "0xEECBBC", VA = "0xEECBBC")]
		private int Internal_ExecCall(int argsCount, int instructionPtr, [Optional] CallbackFunction handler, [Optional] CallbackFunction continuation, bool thisCall = false, [Optional] string debugText, [Optional] DynValue unwindHandler)
		{
			return default(int);
		}

		[Token(Token = "0x6001208")]
		[Address(RVA = "0xEF0720", Offset = "0xEF0720", VA = "0xEF0720")]
		private int PerformTCO(int instructionPtr, int argsCount)
		{
			return default(int);
		}

		[Token(Token = "0x6001209")]
		[Address(RVA = "0xEEDEF4", Offset = "0xEEDEF4", VA = "0xEEDEF4")]
		private int ExecRet(Instruction i)
		{
			return default(int);
		}

		[Token(Token = "0x600120A")]
		[Address(RVA = "0xEF08CC", Offset = "0xEF08CC", VA = "0xEF08CC")]
		private int Internal_CheckForTailRequests(Instruction i, int instructionPtr)
		{
			return default(int);
		}

		[Token(Token = "0x600120B")]
		[Address(RVA = "0xEED5E8", Offset = "0xEED5E8", VA = "0xEED5E8")]
		private int JumpBool(Instruction i, bool expectedValueForJump, int instructionPtr)
		{
			return default(int);
		}

		[Token(Token = "0x600120C")]
		[Address(RVA = "0xEED520", Offset = "0xEED520", VA = "0xEED520")]
		private int ExecShortCircuitingOperator(Instruction i, int instructionPtr)
		{
			return default(int);
		}

		[Token(Token = "0x600120D")]
		[Address(RVA = "0xEEB2E0", Offset = "0xEEB2E0", VA = "0xEEB2E0")]
		private int ExecAdd(Instruction i, int instructionPtr)
		{
			return default(int);
		}

		[Token(Token = "0x600120E")]
		[Address(RVA = "0xEEB7F0", Offset = "0xEEB7F0", VA = "0xEEB7F0")]
		private int ExecSub(Instruction i, int instructionPtr)
		{
			return default(int);
		}

		[Token(Token = "0x600120F")]
		[Address(RVA = "0xEEB9E0", Offset = "0xEEB9E0", VA = "0xEEB9E0")]
		private int ExecMul(Instruction i, int instructionPtr)
		{
			return default(int);
		}

		[Token(Token = "0x6001210")]
		[Address(RVA = "0xEEBDC0", Offset = "0xEEBDC0", VA = "0xEEBDC0")]
		private int ExecMod(Instruction i, int instructionPtr)
		{
			return default(int);
		}

		[Token(Token = "0x6001211")]
		[Address(RVA = "0xEEBBD0", Offset = "0xEEBBD0", VA = "0xEEBBD0")]
		private int ExecDiv(Instruction i, int instructionPtr)
		{
			return default(int);
		}

		[Token(Token = "0x6001212")]
		[Address(RVA = "0xEEC000", Offset = "0xEEC000", VA = "0xEEC000")]
		private int ExecPower(Instruction i, int instructionPtr)
		{
			return default(int);
		}

		[Token(Token = "0x6001213")]
		[Address(RVA = "0xEEB66C", Offset = "0xEEB66C", VA = "0xEEB66C")]
		private int ExecNeg(Instruction i, int instructionPtr)
		{
			return default(int);
		}

		[Token(Token = "0x6001214")]
		[Address(RVA = "0xEEC228", Offset = "0xEEC228", VA = "0xEEC228")]
		private int ExecEq(Instruction i, int instructionPtr)
		{
			return default(int);
		}

		[Token(Token = "0x6001215")]
		[Address(RVA = "0xEEC840", Offset = "0xEEC840", VA = "0xEEC840")]
		private int ExecLess(Instruction i, int instructionPtr)
		{
			return default(int);
		}

		[Token(Token = "0x6001216")]
		[Address(RVA = "0xEEC4E0", Offset = "0xEEC4E0", VA = "0xEEC4E0")]
		private int ExecLessEq(Instruction i, int instructionPtr)
		{
			return default(int);
		}

		[Token(Token = "0x6001217")]
		[Address(RVA = "0xEECA3C", Offset = "0xEECA3C", VA = "0xEECA3C")]
		private int ExecLen(Instruction i, int instructionPtr)
		{
			return default(int);
		}

		[Token(Token = "0x6001218")]
		[Address(RVA = "0xEEB4D0", Offset = "0xEEB4D0", VA = "0xEEB4D0")]
		private int ExecConcat(Instruction i, int instructionPtr)
		{
			return default(int);
		}

		[Token(Token = "0x6001219")]
		[Address(RVA = "0xEEF2C0", Offset = "0xEEF2C0", VA = "0xEEF2C0")]
		private void ExecTblInitI(Instruction i)
		{
		}

		[Token(Token = "0x600121A")]
		[Address(RVA = "0xEEF154", Offset = "0xEEF154", VA = "0xEEF154")]
		private void ExecTblInitN(Instruction i)
		{
		}

		[Token(Token = "0x600121B")]
		[Address(RVA = "0xEEF894", Offset = "0xEEF894", VA = "0xEEF894")]
		private int ExecIndexSet(Instruction i, int instructionPtr)
		{
			return default(int);
		}

		[Token(Token = "0x600121C")]
		[Address(RVA = "0xEEF40C", Offset = "0xEEF40C", VA = "0xEEF40C")]
		private int ExecIndex(Instruction i, int instructionPtr)
		{
			return default(int);
		}

		[Token(Token = "0x600121D")]
		[Address(RVA = "0xEED7C4", Offset = "0xEED7C4", VA = "0xEED7C4")]
		private void ClearBlockData(Instruction I)
		{
		}

		[Token(Token = "0x600121E")]
		[Address(RVA = "0xEF0CE4", Offset = "0xEF0CE4", VA = "0xEF0CE4")]
		public DynValue GetGenericSymbol(SymbolRef symref)
		{
			return null;
		}

		[Token(Token = "0x600121F")]
		[Address(RVA = "0xEF0F08", Offset = "0xEF0F08", VA = "0xEF0F08")]
		private DynValue GetGlobalSymbol(DynValue dynValue, string name)
		{
			return null;
		}

		[Token(Token = "0x6001220")]
		[Address(RVA = "0xEF1068", Offset = "0xEF1068", VA = "0xEF1068")]
		private void SetGlobalSymbol(DynValue dynValue, string name, DynValue value)
		{
		}

		[Token(Token = "0x6001221")]
		[Address(RVA = "0xEF11B8", Offset = "0xEF11B8", VA = "0xEF11B8")]
		public void AssignGenericSymbol(SymbolRef symref, DynValue value)
		{
		}

		[Token(Token = "0x6001222")]
		[Address(RVA = "0xEF0FC4", Offset = "0xEF0FC4", VA = "0xEF0FC4")]
		private CallStackItem GetTopNonClrFunction()
		{
			return null;
		}

		[Token(Token = "0x6001223")]
		[Address(RVA = "0xEF14D4", Offset = "0xEF14D4", VA = "0xEF14D4")]
		public SymbolRef FindSymbolByName(string name)
		{
			return null;
		}

		[Token(Token = "0x6001224")]
		[Address(RVA = "0xEE7178", Offset = "0xEE7178", VA = "0xEE7178")]
		private DynValue[] Internal_AdjustTuple(IList<DynValue> values)
		{
			return null;
		}

		[Token(Token = "0x6001225")]
		[Address(RVA = "0xEF0B34", Offset = "0xEF0B34", VA = "0xEF0B34")]
		private int Internal_InvokeUnaryMetaMethod(DynValue op1, string eventName, int instructionPtr)
		{
			return default(int);
		}

		[Token(Token = "0x6001226")]
		[Address(RVA = "0xEF0A28", Offset = "0xEF0A28", VA = "0xEF0A28")]
		private int Internal_InvokeBinaryMetaMethod(DynValue l, DynValue r, string eventName, int instructionPtr, [Optional] DynValue extraPush)
		{
			return default(int);
		}

		[Token(Token = "0x6001227")]
		[Address(RVA = "0xEF1710", Offset = "0xEF1710", VA = "0xEF1710")]
		private DynValue[] StackTopToArray(int items, bool pop)
		{
			return null;
		}

		[Token(Token = "0x6001228")]
		[Address(RVA = "0xEF18C8", Offset = "0xEF18C8", VA = "0xEF18C8")]
		private DynValue[] StackTopToArrayReverse(int items, bool pop)
		{
			return null;
		}
	}
}
namespace MoonSharp.Interpreter.Execution.Scopes
{
	[Token(Token = "0x2000270")]
	internal class BuildTimeScopeBlock
	{
		[Token(Token = "0x4000CC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Dictionary<string, SymbolRef> m_DefinedNames;

		[Token(Token = "0x4000CC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<GotoStatement> m_PendingGotos;

		[Token(Token = "0x4000CC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Dictionary<string, LabelStatement> m_LocalLabels;

		[Token(Token = "0x4000CC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private string m_LastDefinedName;

		[Token(Token = "0x17000224")]
		internal BuildTimeScopeBlock Parent
		{
			[Token(Token = "0x6001230")]
			[Address(RVA = "0xEF2C80", Offset = "0xEF2C80", VA = "0xEF2C80")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001231")]
			[Address(RVA = "0xEF2C88", Offset = "0xEF2C88", VA = "0xEF2C88")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000225")]
		internal List<BuildTimeScopeBlock> ChildNodes
		{
			[Token(Token = "0x6001232")]
			[Address(RVA = "0xEF2C90", Offset = "0xEF2C90", VA = "0xEF2C90")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001233")]
			[Address(RVA = "0xEF2C98", Offset = "0xEF2C98", VA = "0xEF2C98")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000226")]
		internal RuntimeScopeBlock ScopeBlock
		{
			[Token(Token = "0x6001234")]
			[Address(RVA = "0xEF2CA0", Offset = "0xEF2CA0", VA = "0xEF2CA0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001235")]
			[Address(RVA = "0xEF2CA8", Offset = "0xEF2CA8", VA = "0xEF2CA8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6001236")]
		[Address(RVA = "0xEF2CB0", Offset = "0xEF2CB0", VA = "0xEF2CB0")]
		internal void Rename(string name)
		{
		}

		[Token(Token = "0x6001237")]
		[Address(RVA = "0xEF2DE0", Offset = "0xEF2DE0", VA = "0xEF2DE0")]
		internal BuildTimeScopeBlock(BuildTimeScopeBlock parent)
		{
		}

		[Token(Token = "0x6001238")]
		[Address(RVA = "0xEF2F10", Offset = "0xEF2F10", VA = "0xEF2F10")]
		internal BuildTimeScopeBlock AddChild()
		{
			return null;
		}

		[Token(Token = "0x6001239")]
		[Address(RVA = "0xEF2FEC", Offset = "0xEF2FEC", VA = "0xEF2FEC")]
		internal SymbolRef Find(string name)
		{
			return null;
		}

		[Token(Token = "0x600123A")]
		[Address(RVA = "0xEF3044", Offset = "0xEF3044", VA = "0xEF3044")]
		internal SymbolRef Define(string name)
		{
			return null;
		}

		[Token(Token = "0x600123B")]
		[Address(RVA = "0xEF30FC", Offset = "0xEF30FC", VA = "0xEF30FC")]
		internal int ResolveLRefs(BuildTimeScopeFrame buildTimeScopeFrame)
		{
			return default(int);
		}

		[Token(Token = "0x600123C")]
		[Address(RVA = "0xEF3688", Offset = "0xEF3688", VA = "0xEF3688")]
		internal void DefineLabel(LabelStatement label)
		{
		}

		[Token(Token = "0x600123D")]
		[Address(RVA = "0xEF38F0", Offset = "0xEF38F0", VA = "0xEF38F0")]
		internal void RegisterGoto(GotoStatement gotostat)
		{
		}

		[Token(Token = "0x600123E")]
		[Address(RVA = "0xEF3A3C", Offset = "0xEF3A3C", VA = "0xEF3A3C")]
		internal void ResolveGotos()
		{
		}
	}
	[Token(Token = "0x2000271")]
	internal class BuildTimeScopeFrame
	{
		[Token(Token = "0x4000CC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private BuildTimeScopeBlock m_ScopeTreeRoot;

		[Token(Token = "0x4000CC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private BuildTimeScopeBlock m_ScopeTreeHead;

		[Token(Token = "0x4000CC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private RuntimeScopeFrame m_ScopeFrame;

		[Token(Token = "0x17000227")]
		public bool HasVarArgs
		{
			[Token(Token = "0x600123F")]
			[Address(RVA = "0xEF3F40", Offset = "0xEF3F40", VA = "0xEF3F40")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001240")]
			[Address(RVA = "0xEF3F48", Offset = "0xEF3F48", VA = "0xEF3F48")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6001241")]
		[Address(RVA = "0xEF3F54", Offset = "0xEF3F54", VA = "0xEF3F54")]
		internal BuildTimeScopeFrame(bool hasVarArgs)
		{
		}

		[Token(Token = "0x6001242")]
		[Address(RVA = "0xEF4028", Offset = "0xEF4028", VA = "0xEF4028")]
		internal void PushBlock()
		{
		}

		[Token(Token = "0x6001243")]
		[Address(RVA = "0xEF4054", Offset = "0xEF4054", VA = "0xEF4054")]
		internal RuntimeScopeBlock PopBlock()
		{
			return null;
		}

		[Token(Token = "0x6001244")]
		[Address(RVA = "0xEF40F0", Offset = "0xEF40F0", VA = "0xEF40F0")]
		internal RuntimeScopeFrame GetRuntimeFrameData()
		{
			return null;
		}

		[Token(Token = "0x6001245")]
		[Address(RVA = "0xEF4174", Offset = "0xEF4174", VA = "0xEF4174")]
		internal SymbolRef Find(string name)
		{
			return null;
		}

		[Token(Token = "0x6001246")]
		[Address(RVA = "0xEF41B0", Offset = "0xEF41B0", VA = "0xEF41B0")]
		internal SymbolRef DefineLocal(string name)
		{
			return null;
		}

		[Token(Token = "0x6001247")]
		[Address(RVA = "0xEF41C8", Offset = "0xEF41C8", VA = "0xEF41C8")]
		internal SymbolRef TryDefineLocal(string name)
		{
			return null;
		}

		[Token(Token = "0x6001248")]
		[Address(RVA = "0xEF4214", Offset = "0xEF4214", VA = "0xEF4214")]
		internal void ResolveLRefs()
		{
		}

		[Token(Token = "0x6001249")]
		[Address(RVA = "0xEF3568", Offset = "0xEF3568", VA = "0xEF3568")]
		internal int AllocVar(SymbolRef var)
		{
			return default(int);
		}

		[Token(Token = "0x600124A")]
		[Address(RVA = "0xEF3638", Offset = "0xEF3638", VA = "0xEF3638")]
		internal int GetPosForNextVar()
		{
			return default(int);
		}

		[Token(Token = "0x600124B")]
		[Address(RVA = "0xEF4240", Offset = "0xEF4240", VA = "0xEF4240")]
		internal void DefineLabel(LabelStatement label)
		{
		}

		[Token(Token = "0x600124C")]
		[Address(RVA = "0xEF4258", Offset = "0xEF4258", VA = "0xEF4258")]
		internal void RegisterGoto(GotoStatement gotostat)
		{
		}
	}
}
namespace MoonSharp.Interpreter.Diagnostics
{
	[Token(Token = "0x2000272")]
	public enum PerformanceCounter
	{
		[Token(Token = "0x4000CCB")]
		AstCreation,
		[Token(Token = "0x4000CCC")]
		Compilation,
		[Token(Token = "0x4000CCD")]
		Execution,
		[Token(Token = "0x4000CCE")]
		AdaptersCompilation,
		[Token(Token = "0x4000CCF")]
		LastValue
	}
	[Token(Token = "0x2000273")]
	public enum PerformanceCounterType
	{
		[Token(Token = "0x4000CD1")]
		MemoryBytes,
		[Token(Token = "0x4000CD2")]
		TimeMilliseconds
	}
	[Token(Token = "0x2000274")]
	public class PerformanceResult
	{
		[Token(Token = "0x17000228")]
		public string Name
		{
			[Token(Token = "0x600124D")]
			[Address(RVA = "0xEF4270", Offset = "0xEF4270", VA = "0xEF4270")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600124E")]
			[Address(RVA = "0xEF4278", Offset = "0xEF4278", VA = "0xEF4278")]
			[CompilerGenerated]
			internal set
			{
			}
		}

		[Token(Token = "0x17000229")]
		public long Counter
		{
			[Token(Token = "0x600124F")]
			[Address(RVA = "0xEF4280", Offset = "0xEF4280", VA = "0xEF4280")]
			[CompilerGenerated]
			get
			{
				return default(long);
			}
			[Token(Token = "0x6001250")]
			[Address(RVA = "0xEF4288", Offset = "0xEF4288", VA = "0xEF4288")]
			[CompilerGenerated]
			internal set
			{
			}
		}

		[Token(Token = "0x1700022A")]
		public int Instances
		{
			[Token(Token = "0x6001251")]
			[Address(RVA = "0xEF4290", Offset = "0xEF4290", VA = "0xEF4290")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001252")]
			[Address(RVA = "0xEF4298", Offset = "0xEF4298", VA = "0xEF4298")]
			[CompilerGenerated]
			internal set
			{
			}
		}

		[Token(Token = "0x1700022B")]
		public bool Global
		{
			[Token(Token = "0x6001253")]
			[Address(RVA = "0xEF42A0", Offset = "0xEF42A0", VA = "0xEF42A0")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001254")]
			[Address(RVA = "0xEF42A8", Offset = "0xEF42A8", VA = "0xEF42A8")]
			[CompilerGenerated]
			internal set
			{
			}
		}

		[Token(Token = "0x1700022C")]
		public PerformanceCounterType Type
		{
			[Token(Token = "0x6001255")]
			[Address(RVA = "0xEF42B4", Offset = "0xEF42B4", VA = "0xEF42B4")]
			[CompilerGenerated]
			get
			{
				return default(PerformanceCounterType);
			}
			[Token(Token = "0x6001256")]
			[Address(RVA = "0xEF42BC", Offset = "0xEF42BC", VA = "0xEF42BC")]
			[CompilerGenerated]
			internal set
			{
			}
		}

		[Token(Token = "0x6001257")]
		[Address(RVA = "0xEF42C4", Offset = "0xEF42C4", VA = "0xEF42C4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6001258")]
		[Address(RVA = "0xEF4510", Offset = "0xEF4510", VA = "0xEF4510")]
		public static string PerformanceCounterTypeToString(PerformanceCounterType Type)
		{
			return null;
		}

		[Token(Token = "0x6001259")]
		[Address(RVA = "0xEF4604", Offset = "0xEF4604", VA = "0xEF4604")]
		public PerformanceResult()
		{
		}
	}
	[Token(Token = "0x2000275")]
	public class PerformanceStatistics
	{
		[Token(Token = "0x4000CD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IPerformanceStopwatch[] m_Stopwatches;

		[Token(Token = "0x4000CD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static IPerformanceStopwatch[] m_GlobalStopwatches;

		[Token(Token = "0x4000CDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool m_Enabled;

		[Token(Token = "0x1700022D")]
		public bool Enabled
		{
			[Token(Token = "0x600125A")]
			[Address(RVA = "0xEF460C", Offset = "0xEF460C", VA = "0xEF460C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600125B")]
			[Address(RVA = "0xEF4614", Offset = "0xEF4614", VA = "0xEF4614")]
			set
			{
			}
		}

		[Token(Token = "0x600125C")]
		[Address(RVA = "0xEF4924", Offset = "0xEF4924", VA = "0xEF4924")]
		public PerformanceResult GetPerformanceCounterResult(PerformanceCounter pc)
		{
			return null;
		}

		[Token(Token = "0x600125D")]
		[Address(RVA = "0xEF49F8", Offset = "0xEF49F8", VA = "0xEF49F8")]
		internal IDisposable StartStopwatch(PerformanceCounter pc)
		{
			return null;
		}

		[Token(Token = "0x600125E")]
		[Address(RVA = "0xEF4AC8", Offset = "0xEF4AC8", VA = "0xEF4AC8")]
		internal static IDisposable StartGlobalStopwatch(PerformanceCounter pc)
		{
			return null;
		}

		[Token(Token = "0x600125F")]
		[Address(RVA = "0xEF4BC0", Offset = "0xEF4BC0", VA = "0xEF4BC0")]
		public string GetPerformanceLog()
		{
			return null;
		}

		[Token(Token = "0x6001260")]
		[Address(RVA = "0xEF4C64", Offset = "0xEF4C64", VA = "0xEF4C64")]
		public PerformanceStatistics()
		{
		}
	}
	[Token(Token = "0x2000276")]
	internal static class NamespaceDoc
	{
	}
}
namespace MoonSharp.Interpreter.Diagnostics.PerformanceCounters
{
	[Token(Token = "0x2000277")]
	internal class DummyPerformanceStopwatch : IPerformanceStopwatch, IDisposable
	{
		[Token(Token = "0x4000CDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static DummyPerformanceStopwatch Instance;

		[Token(Token = "0x4000CDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private PerformanceResult m_Result;

		[Token(Token = "0x6001262")]
		[Address(RVA = "0xEF4D3C", Offset = "0xEF4D3C", VA = "0xEF4D3C")]
		private DummyPerformanceStopwatch()
		{
		}

		[Token(Token = "0x6001263")]
		[Address(RVA = "0xEF4DF0", Offset = "0xEF4DF0", VA = "0xEF4DF0", Slot = "4")]
		public IDisposable Start()
		{
			return null;
		}

		[Token(Token = "0x6001264")]
		[Address(RVA = "0xEF4DF4", Offset = "0xEF4DF4", VA = "0xEF4DF4", Slot = "5")]
		public PerformanceResult GetResult()
		{
			return null;
		}

		[Token(Token = "0x6001265")]
		[Address(RVA = "0xEF4DFC", Offset = "0xEF4DFC", VA = "0xEF4DFC", Slot = "6")]
		public void Dispose()
		{
		}
	}
	[Token(Token = "0x2000278")]
	internal class GlobalPerformanceStopwatch : IPerformanceStopwatch
	{
		[Token(Token = "0x2000279")]
		private class GlobalPerformanceStopwatch_StopwatchObject : IDisposable
		{
			[Token(Token = "0x4000CE0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private Stopwatch m_Stopwatch;

			[Token(Token = "0x4000CE1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private GlobalPerformanceStopwatch m_Parent;

			[Token(Token = "0x600126B")]
			[Address(RVA = "0xEF4F10", Offset = "0xEF4F10", VA = "0xEF4F10")]
			public GlobalPerformanceStopwatch_StopwatchObject(GlobalPerformanceStopwatch parent)
			{
			}

			[Token(Token = "0x600126C")]
			[Address(RVA = "0xEF5064", Offset = "0xEF5064", VA = "0xEF5064", Slot = "4")]
			public void Dispose()
			{
			}
		}

		[Token(Token = "0x4000CDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int m_Count;

		[Token(Token = "0x4000CDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private long m_Elapsed;

		[Token(Token = "0x4000CDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private PerformanceCounter m_Counter;

		[Token(Token = "0x6001267")]
		[Address(RVA = "0xEF4874", Offset = "0xEF4874", VA = "0xEF4874")]
		public GlobalPerformanceStopwatch(PerformanceCounter perfcounter)
		{
		}

		[Token(Token = "0x6001268")]
		[Address(RVA = "0xEF4E6C", Offset = "0xEF4E6C", VA = "0xEF4E6C")]
		private void SignalStopwatchTerminated(Stopwatch sw)
		{
		}

		[Token(Token = "0x6001269")]
		[Address(RVA = "0xEF4EB0", Offset = "0xEF4EB0", VA = "0xEF4EB0", Slot = "4")]
		public IDisposable Start()
		{
			return null;
		}

		[Token(Token = "0x600126A")]
		[Address(RVA = "0xEF4F9C", Offset = "0xEF4F9C", VA = "0xEF4F9C", Slot = "5")]
		public PerformanceResult GetResult()
		{
			return null;
		}
	}
	[Token(Token = "0x200027A")]
	internal interface IPerformanceStopwatch
	{
		[Token(Token = "0x600126D")]
		IDisposable Start();

		[Token(Token = "0x600126E")]
		PerformanceResult GetResult();
	}
	[Token(Token = "0x200027B")]
	internal class PerformanceStopwatch : IDisposable, IPerformanceStopwatch
	{
		[Token(Token = "0x4000CE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Stopwatch m_Stopwatch;

		[Token(Token = "0x4000CE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int m_Count;

		[Token(Token = "0x4000CE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private int m_Reentrant;

		[Token(Token = "0x4000CE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private PerformanceCounter m_Counter;

		[Token(Token = "0x600126F")]
		[Address(RVA = "0xEF489C", Offset = "0xEF489C", VA = "0xEF489C")]
		public PerformanceStopwatch(PerformanceCounter perfcounter)
		{
		}

		[Token(Token = "0x6001270")]
		[Address(RVA = "0xEF5094", Offset = "0xEF5094", VA = "0xEF5094", Slot = "5")]
		public IDisposable Start()
		{
			return null;
		}

		[Token(Token = "0x6001271")]
		[Address(RVA = "0xEF50DC", Offset = "0xEF50DC", VA = "0xEF50DC", Slot = "4")]
		public void Dispose()
		{
		}

		[Token(Token = "0x6001272")]
		[Address(RVA = "0xEF5110", Offset = "0xEF5110", VA = "0xEF5110", Slot = "6")]
		public PerformanceResult GetResult()
		{
			return null;
		}
	}
}
namespace MoonSharp.Interpreter.Debugging
{
	[Token(Token = "0x200027C")]
	public class DebuggerAction
	{
		[Token(Token = "0x200027D")]
		public enum ActionType
		{
			[Token(Token = "0x4000CED")]
			ByteCodeStepIn,
			[Token(Token = "0x4000CEE")]
			ByteCodeStepOver,
			[Token(Token = "0x4000CEF")]
			ByteCodeStepOut,
			[Token(Token = "0x4000CF0")]
			StepIn,
			[Token(Token = "0x4000CF1")]
			StepOver,
			[Token(Token = "0x4000CF2")]
			StepOut,
			[Token(Token = "0x4000CF3")]
			Run,
			[Token(Token = "0x4000CF4")]
			ToggleBreakpoint,
			[Token(Token = "0x4000CF5")]
			SetBreakpoint,
			[Token(Token = "0x4000CF6")]
			ClearBreakpoint,
			[Token(Token = "0x4000CF7")]
			ResetBreakpoints,
			[Token(Token = "0x4000CF8")]
			Refresh,
			[Token(Token = "0x4000CF9")]
			HardRefresh,
			[Token(Token = "0x4000CFA")]
			None
		}

		[Token(Token = "0x1700022E")]
		public ActionType Action
		{
			[Token(Token = "0x6001273")]
			[Address(RVA = "0xEF51E8", Offset = "0xEF51E8", VA = "0xEF51E8")]
			[CompilerGenerated]
			get
			{
				return default(ActionType);
			}
			[Token(Token = "0x6001274")]
			[Address(RVA = "0xEF51F0", Offset = "0xEF51F0", VA = "0xEF51F0")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700022F")]
		public DateTime TimeStampUTC
		{
			[Token(Token = "0x6001275")]
			[Address(RVA = "0xEF51F8", Offset = "0xEF51F8", VA = "0xEF51F8")]
			[CompilerGenerated]
			get
			{
				return default(DateTime);
			}
			[Token(Token = "0x6001276")]
			[Address(RVA = "0xEF5200", Offset = "0xEF5200", VA = "0xEF5200")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000230")]
		public int SourceID
		{
			[Token(Token = "0x6001277")]
			[Address(RVA = "0xEF5208", Offset = "0xEF5208", VA = "0xEF5208")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001278")]
			[Address(RVA = "0xEF5210", Offset = "0xEF5210", VA = "0xEF5210")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000231")]
		public int SourceLine
		{
			[Token(Token = "0x6001279")]
			[Address(RVA = "0xEF5218", Offset = "0xEF5218", VA = "0xEF5218")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600127A")]
			[Address(RVA = "0xEF5220", Offset = "0xEF5220", VA = "0xEF5220")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000232")]
		public int SourceCol
		{
			[Token(Token = "0x600127B")]
			[Address(RVA = "0xEF5228", Offset = "0xEF5228", VA = "0xEF5228")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600127C")]
			[Address(RVA = "0xEF5230", Offset = "0xEF5230", VA = "0xEF5230")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000233")]
		public int[] Lines
		{
			[Token(Token = "0x600127D")]
			[Address(RVA = "0xEF5238", Offset = "0xEF5238", VA = "0xEF5238")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600127E")]
			[Address(RVA = "0xEF5240", Offset = "0xEF5240", VA = "0xEF5240")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000234")]
		public TimeSpan Age
		{
			[Token(Token = "0x6001280")]
			[Address(RVA = "0xEF52B0", Offset = "0xEF52B0", VA = "0xEF52B0")]
			get
			{
				return default(TimeSpan);
			}
		}

		[Token(Token = "0x600127F")]
		[Address(RVA = "0xEF5248", Offset = "0xEF5248", VA = "0xEF5248")]
		public DebuggerAction()
		{
		}

		[Token(Token = "0x6001281")]
		[Address(RVA = "0xEF5310", Offset = "0xEF5310", VA = "0xEF5310", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x200027E")]
	[Flags]
	public enum DebuggerCaps
	{
		[Token(Token = "0x4000CFC")]
		CanDebugSourceCode = 1,
		[Token(Token = "0x4000CFD")]
		CanDebugByteCode = 2,
		[Token(Token = "0x4000CFE")]
		HasLineBasedBreakpoints = 4
	}
	[Token(Token = "0x200027F")]
	public sealed class DebugService : IScriptPrivateResource
	{
		[Token(Token = "0x4000CFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Processor m_Processor;

		[Token(Token = "0x17000235")]
		public Script OwnerScript
		{
			[Token(Token = "0x6001283")]
			[Address(RVA = "0xEF5574", Offset = "0xEF5574", VA = "0xEF5574", Slot = "4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001284")]
			[Address(RVA = "0xEF557C", Offset = "0xEF557C", VA = "0xEF557C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6001282")]
		[Address(RVA = "0xEF5530", Offset = "0xEF5530", VA = "0xEF5530")]
		internal DebugService(Script script, Processor processor)
		{
		}

		[Token(Token = "0x6001285")]
		[Address(RVA = "0xEF5584", Offset = "0xEF5584", VA = "0xEF5584")]
		public HashSet<int> ResetBreakPoints(SourceCode src, HashSet<int> lines)
		{
			return null;
		}
	}
	[Token(Token = "0x2000280")]
	public interface IDebugger
	{
		[Token(Token = "0x6001286")]
		DebuggerCaps GetDebuggerCaps();

		[Token(Token = "0x6001287")]
		void SetDebugService(DebugService debugService);

		[Token(Token = "0x6001288")]
		void SetSourceCode(SourceCode sourceCode);

		[Token(Token = "0x6001289")]
		void SetByteCode(string[] byteCode);

		[Token(Token = "0x600128A")]
		bool IsPauseRequested();

		[Token(Token = "0x600128B")]
		bool SignalRuntimeException(ScriptRuntimeException ex);

		[Token(Token = "0x600128C")]
		DebuggerAction GetAction(int ip, SourceRef sourceref);

		[Token(Token = "0x600128D")]
		void SignalExecutionEnded();

		[Token(Token = "0x600128E")]
		void Update(WatchType watchType, IEnumerable<WatchItem> items);

		[Token(Token = "0x600128F")]
		List<DynamicExpression> GetWatchItems();

		[Token(Token = "0x6001290")]
		void RefreshBreakpoints(IEnumerable<SourceRef> refs);
	}
	[Token(Token = "0x2000281")]
	public class SourceCode : IScriptPrivateResource
	{
		[Token(Token = "0x17000236")]
		public string Name
		{
			[Token(Token = "0x6001291")]
			[Address(RVA = "0xEF55A0", Offset = "0xEF55A0", VA = "0xEF55A0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001292")]
			[Address(RVA = "0xEF55A8", Offset = "0xEF55A8", VA = "0xEF55A8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000237")]
		public string Code
		{
			[Token(Token = "0x6001293")]
			[Address(RVA = "0xEF55B0", Offset = "0xEF55B0", VA = "0xEF55B0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001294")]
			[Address(RVA = "0xEF55B8", Offset = "0xEF55B8", VA = "0xEF55B8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000238")]
		public string[] Lines
		{
			[Token(Token = "0x6001295")]
			[Address(RVA = "0xEF55C0", Offset = "0xEF55C0", VA = "0xEF55C0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001296")]
			[Address(RVA = "0xEF55C8", Offset = "0xEF55C8", VA = "0xEF55C8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000239")]
		public Script OwnerScript
		{
			[Token(Token = "0x6001297")]
			[Address(RVA = "0xEF55D0", Offset = "0xEF55D0", VA = "0xEF55D0", Slot = "4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001298")]
			[Address(RVA = "0xEF55D8", Offset = "0xEF55D8", VA = "0xEF55D8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700023A")]
		public int SourceID
		{
			[Token(Token = "0x6001299")]
			[Address(RVA = "0xEF55E0", Offset = "0xEF55E0", VA = "0xEF55E0")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600129A")]
			[Address(RVA = "0xEF55E8", Offset = "0xEF55E8", VA = "0xEF55E8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700023B")]
		internal List<SourceRef> Refs
		{
			[Token(Token = "0x600129B")]
			[Address(RVA = "0xEF55F0", Offset = "0xEF55F0", VA = "0xEF55F0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600129C")]
			[Address(RVA = "0xEF55F8", Offset = "0xEF55F8", VA = "0xEF55F8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x600129D")]
		[Address(RVA = "0xEF5600", Offset = "0xEF5600", VA = "0xEF5600")]
		internal SourceCode(string name, string code, int sourceID, Script ownerScript)
		{
		}

		[Token(Token = "0x600129E")]
		[Address(RVA = "0xEF582C", Offset = "0xEF582C", VA = "0xEF582C")]
		public string GetCodeSnippet(SourceRef sourceCodeRef)
		{
			return null;
		}

		[Token(Token = "0x600129F")]
		[Address(RVA = "0xEF5A54", Offset = "0xEF5A54", VA = "0xEF5A54")]
		private int AdjustStrIndex(string str, int loc)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000282")]
	public class SourceRef
	{
		[Token(Token = "0x4000D0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool Breakpoint;

		[Token(Token = "0x1700023C")]
		public bool IsClrLocation
		{
			[Token(Token = "0x60012A0")]
			[Address(RVA = "0xEF5ACC", Offset = "0xEF5ACC", VA = "0xEF5ACC")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60012A1")]
			[Address(RVA = "0xEF5AD4", Offset = "0xEF5AD4", VA = "0xEF5AD4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700023D")]
		public int SourceIdx
		{
			[Token(Token = "0x60012A2")]
			[Address(RVA = "0xEF5AE0", Offset = "0xEF5AE0", VA = "0xEF5AE0")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60012A3")]
			[Address(RVA = "0xEF5AE8", Offset = "0xEF5AE8", VA = "0xEF5AE8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700023E")]
		public int FromChar
		{
			[Token(Token = "0x60012A4")]
			[Address(RVA = "0xEF5AF0", Offset = "0xEF5AF0", VA = "0xEF5AF0")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60012A5")]
			[Address(RVA = "0xEF5AF8", Offset = "0xEF5AF8", VA = "0xEF5AF8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700023F")]
		public int ToChar
		{
			[Token(Token = "0x60012A6")]
			[Address(RVA = "0xEF5B00", Offset = "0xEF5B00", VA = "0xEF5B00")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60012A7")]
			[Address(RVA = "0xEF5B08", Offset = "0xEF5B08", VA = "0xEF5B08")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000240")]
		public int FromLine
		{
			[Token(Token = "0x60012A8")]
			[Address(RVA = "0xEF5B10", Offset = "0xEF5B10", VA = "0xEF5B10")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60012A9")]
			[Address(RVA = "0xEF5B18", Offset = "0xEF5B18", VA = "0xEF5B18")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000241")]
		public int ToLine
		{
			[Token(Token = "0x60012AA")]
			[Address(RVA = "0xEF5B20", Offset = "0xEF5B20", VA = "0xEF5B20")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60012AB")]
			[Address(RVA = "0xEF5B28", Offset = "0xEF5B28", VA = "0xEF5B28")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000242")]
		public bool IsStepStop
		{
			[Token(Token = "0x60012AC")]
			[Address(RVA = "0xEF5B30", Offset = "0xEF5B30", VA = "0xEF5B30")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60012AD")]
			[Address(RVA = "0xEF5B38", Offset = "0xEF5B38", VA = "0xEF5B38")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000243")]
		public bool CannotBreakpoint
		{
			[Token(Token = "0x60012AE")]
			[Address(RVA = "0xEF5B44", Offset = "0xEF5B44", VA = "0xEF5B44")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60012AF")]
			[Address(RVA = "0xEF5B4C", Offset = "0xEF5B4C", VA = "0xEF5B4C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60012B0")]
		[Address(RVA = "0xEF5B58", Offset = "0xEF5B58", VA = "0xEF5B58")]
		internal static SourceRef GetClrLocation()
		{
			return null;
		}

		[Token(Token = "0x60012B1")]
		[Address(RVA = "0xEF5C24", Offset = "0xEF5C24", VA = "0xEF5C24")]
		public SourceRef(SourceRef src, bool isStepStop)
		{
		}

		[Token(Token = "0x60012B2")]
		[Address(RVA = "0xEF5BC8", Offset = "0xEF5BC8", VA = "0xEF5BC8")]
		public SourceRef(int sourceIdx, int from, int to, int fromline, int toline, bool isStepStop)
		{
		}

		[Token(Token = "0x60012B3")]
		[Address(RVA = "0xEF5C6C", Offset = "0xEF5C6C", VA = "0xEF5C6C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60012B4")]
		[Address(RVA = "0xEF5F10", Offset = "0xEF5F10", VA = "0xEF5F10")]
		internal int GetLocationDistance(int sourceIdx, int line, int col)
		{
			return default(int);
		}

		[Token(Token = "0x60012B5")]
		[Address(RVA = "0xEF6024", Offset = "0xEF6024", VA = "0xEF6024")]
		public bool IncludesLocation(int sourceIdx, int line, int col)
		{
			return default(bool);
		}

		[Token(Token = "0x60012B6")]
		[Address(RVA = "0xEF609C", Offset = "0xEF609C", VA = "0xEF609C")]
		public SourceRef SetNoBreakPoint()
		{
			return null;
		}

		[Token(Token = "0x60012B7")]
		[Address(RVA = "0xEF60A8", Offset = "0xEF60A8", VA = "0xEF60A8")]
		public string FormatLocation(Script script, bool forceClassicFormat = false)
		{
			return null;
		}
	}
	[Token(Token = "0x2000283")]
	public class WatchItem
	{
		[Token(Token = "0x17000244")]
		public int Address
		{
			[Token(Token = "0x60012B8")]
			[Address(RVA = "0xEF663C", Offset = "0xEF663C", VA = "0xEF663C")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60012B9")]
			[Address(RVA = "0xEF6644", Offset = "0xEF6644", VA = "0xEF6644")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000245")]
		public int BasePtr
		{
			[Token(Token = "0x60012BA")]
			[Address(RVA = "0xEF664C", Offset = "0xEF664C", VA = "0xEF664C")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60012BB")]
			[Address(RVA = "0xEF6654", Offset = "0xEF6654", VA = "0xEF6654")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000246")]
		public int RetAddress
		{
			[Token(Token = "0x60012BC")]
			[Address(RVA = "0xEF665C", Offset = "0xEF665C", VA = "0xEF665C")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60012BD")]
			[Address(RVA = "0xEF6664", Offset = "0xEF6664", VA = "0xEF6664")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000247")]
		public string Name
		{
			[Token(Token = "0x60012BE")]
			[Address(RVA = "0xEF666C", Offset = "0xEF666C", VA = "0xEF666C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60012BF")]
			[Address(RVA = "0xEF6674", Offset = "0xEF6674", VA = "0xEF6674")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000248")]
		public DynValue Value
		{
			[Token(Token = "0x60012C0")]
			[Address(RVA = "0xEF667C", Offset = "0xEF667C", VA = "0xEF667C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60012C1")]
			[Address(RVA = "0xEF6684", Offset = "0xEF6684", VA = "0xEF6684")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000249")]
		public SymbolRef LValue
		{
			[Token(Token = "0x60012C2")]
			[Address(RVA = "0xEF668C", Offset = "0xEF668C", VA = "0xEF668C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60012C3")]
			[Address(RVA = "0xEF6694", Offset = "0xEF6694", VA = "0xEF6694")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700024A")]
		public bool IsError
		{
			[Token(Token = "0x60012C4")]
			[Address(RVA = "0xEF669C", Offset = "0xEF669C", VA = "0xEF669C")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60012C5")]
			[Address(RVA = "0xEF66A4", Offset = "0xEF66A4", VA = "0xEF66A4")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700024B")]
		public SourceRef Location
		{
			[Token(Token = "0x60012C6")]
			[Address(RVA = "0xEF66B0", Offset = "0xEF66B0", VA = "0xEF66B0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60012C7")]
			[Address(RVA = "0xEF66B8", Offset = "0xEF66B8", VA = "0xEF66B8")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x60012C8")]
		[Address(RVA = "0xEF66C0", Offset = "0xEF66C0", VA = "0xEF66C0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60012C9")]
		[Address(RVA = "0xEF2C48", Offset = "0xEF2C48", VA = "0xEF2C48")]
		public WatchItem()
		{
		}
	}
	[Token(Token = "0x2000284")]
	public enum WatchType
	{
		[Token(Token = "0x4000D19")]
		Watches,
		[Token(Token = "0x4000D1A")]
		VStack,
		[Token(Token = "0x4000D1B")]
		CallStack,
		[Token(Token = "0x4000D1C")]
		Coroutines,
		[Token(Token = "0x4000D1D")]
		Locals,
		[Token(Token = "0x4000D1E")]
		Threads,
		[Token(Token = "0x4000D1F")]
		MaxValue
	}
	[Token(Token = "0x2000285")]
	internal static class NamespaceDoc
	{
	}
}
namespace MoonSharp.Interpreter.DataStructs
{
	[Token(Token = "0x2000286")]
	internal class FastStack<T> : IList<T>, ICollection<T>, IEnumerable<T>, IEnumerable
	{
		[Token(Token = "0x4000D20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T[] m_Storage;

		[Token(Token = "0x4000D21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int m_HeadIdx;

		[Token(Token = "0x1700024C")]
		public T this[int index]
		{
			[Token(Token = "0x60012CB")]
			get
			{
				return (T)null;
			}
			[Token(Token = "0x60012CC")]
			set
			{
			}
		}

		[Token(Token = "0x1700024D")]
		public int Count
		{
			[Token(Token = "0x60012D7")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700024E")]
		private T System.Collections.Generic.IList<T>.Item
		{
			[Token(Token = "0x60012DB")]
			get
			{
				return (T)null;
			}
			[Token(Token = "0x60012DC")]
			set
			{
			}
		}

		[Token(Token = "0x1700024F")]
		private int System.Collections.Generic.ICollection<T>.Count
		{
			[Token(Token = "0x60012E1")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000250")]
		private bool System.Collections.Generic.ICollection<T>.IsReadOnly
		{
			[Token(Token = "0x60012E2")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60012CA")]
		public FastStack(int maxCapacity)
		{
		}

		[Token(Token = "0x60012CD")]
		public T Push(T item)
		{
			return (T)null;
		}

		[Token(Token = "0x60012CE")]
		public void Expand(int size)
		{
		}

		[Token(Token = "0x60012CF")]
		private void Zero(int from, int to)
		{
		}

		[Token(Token = "0x60012D0")]
		private void Zero(int index)
		{
		}

		[Token(Token = "0x60012D1")]
		public T Peek(int idxofs = 0)
		{
			return (T)null;
		}

		[Token(Token = "0x60012D2")]
		public void Set(int idxofs, T item)
		{
		}

		[Token(Token = "0x60012D3")]
		public void CropAtCount(int p)
		{
		}

		[Token(Token = "0x60012D4")]
		public void RemoveLast(int cnt = 1)
		{
		}

		[Token(Token = "0x60012D5")]
		public T Pop()
		{
			return (T)null;
		}

		[Token(Token = "0x60012D6")]
		public void Clear()
		{
		}

		[Token(Token = "0x60012D8")]
		private int System.Collections.Generic.IList<T>.IndexOf(T item)
		{
			return default(int);
		}

		[Token(Token = "0x60012D9")]
		private void System.Collections.Generic.IList<T>.Insert(int index, T item)
		{
		}

		[Token(Token = "0x60012DA")]
		private void System.Collections.Generic.IList<T>.RemoveAt(int index)
		{
		}

		[Token(Token = "0x60012DD")]
		private void System.Collections.Generic.ICollection<T>.Add(T item)
		{
		}

		[Token(Token = "0x60012DE")]
		private void System.Collections.Generic.ICollection<T>.Clear()
		{
		}

		[Token(Token = "0x60012DF")]
		private bool System.Collections.Generic.ICollection<T>.Contains(T item)
		{
			return default(bool);
		}

		[Token(Token = "0x60012E0")]
		private void System.Collections.Generic.ICollection<T>.CopyTo(T[] array, int arrayIndex)
		{
		}

		[Token(Token = "0x60012E3")]
		private bool System.Collections.Generic.ICollection<T>.Remove(T item)
		{
			return default(bool);
		}

		[Token(Token = "0x60012E4")]
		private IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x60012E5")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}
	}
	[Token(Token = "0x2000287")]
	internal class FastStackDynamic<T> : List<T>
	{
		[Token(Token = "0x60012E6")]
		public FastStackDynamic(int startingCapacity)
		{
		}

		[Token(Token = "0x60012E7")]
		public void Set(int idxofs, T item)
		{
		}

		[Token(Token = "0x60012E8")]
		public T Push(T item)
		{
			return (T)null;
		}

		[Token(Token = "0x60012E9")]
		public void Expand(int size)
		{
		}

		[Token(Token = "0x60012EA")]
		public void Zero(int index)
		{
		}

		[Token(Token = "0x60012EB")]
		public T Peek(int idxofs = 0)
		{
			return (T)null;
		}

		[Token(Token = "0x60012EC")]
		public void CropAtCount(int p)
		{
		}

		[Token(Token = "0x60012ED")]
		public void RemoveLast(int cnt = 1)
		{
		}

		[Token(Token = "0x60012EE")]
		public T Pop()
		{
			return (T)null;
		}
	}
	[Token(Token = "0x2000288")]
	internal class LinkedListIndex<TKey, TValue>
	{
		[Token(Token = "0x4000D22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private LinkedList<TValue> m_LinkedList;

		[Token(Token = "0x4000D23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Dictionary<TKey, LinkedListNode<TValue>> m_Map;

		[Token(Token = "0x60012EF")]
		public LinkedListIndex(LinkedList<TValue> linkedList)
		{
		}

		[Token(Token = "0x60012F0")]
		public LinkedListNode<TValue> Find(TKey key)
		{
			return null;
		}

		[Token(Token = "0x60012F1")]
		public TValue Set(TKey key, TValue value)
		{
			return (TValue)null;
		}

		[Token(Token = "0x60012F2")]
		public void Add(TKey key, TValue value)
		{
		}

		[Token(Token = "0x60012F3")]
		public bool Remove(TKey key)
		{
			return default(bool);
		}

		[Token(Token = "0x60012F4")]
		public bool ContainsKey(TKey key)
		{
			return default(bool);
		}

		[Token(Token = "0x60012F5")]
		public void Clear()
		{
		}
	}
	[Token(Token = "0x2000289")]
	internal class MultiDictionary<K, V>
	{
		[Token(Token = "0x4000D24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Dictionary<K, List<V>> m_Map;

		[Token(Token = "0x4000D25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private V[] m_DefaultRet;

		[Token(Token = "0x17000251")]
		public IEnumerable<K> Keys
		{
			[Token(Token = "0x60012FB")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60012F6")]
		public MultiDictionary()
		{
		}

		[Token(Token = "0x60012F7")]
		public MultiDictionary(IEqualityComparer<K> eqComparer)
		{
		}

		[Token(Token = "0x60012F8")]
		public bool Add(K key, V value)
		{
			return default(bool);
		}

		[Token(Token = "0x60012F9")]
		public IEnumerable<V> Find(K key)
		{
			return null;
		}

		[Token(Token = "0x60012FA")]
		public bool ContainsKey(K key)
		{
			return default(bool);
		}

		[Token(Token = "0x60012FC")]
		public void Clear()
		{
		}

		[Token(Token = "0x60012FD")]
		public void Remove(K key)
		{
		}

		[Token(Token = "0x60012FE")]
		public bool RemoveValue(K key, V value)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200028A")]
	internal class ReferenceEqualityComparer : IEqualityComparer<object>
	{
		[Token(Token = "0x60012FF")]
		[Address(RVA = "0xEF695C", Offset = "0xEF695C", VA = "0xEF695C", Slot = "4")]
		private bool System.Collections.Generic.IEqualityComparer<System.Object>.Equals(object x, object y)
		{
			return default(bool);
		}

		[Token(Token = "0x6001300")]
		[Address(RVA = "0xEF6968", Offset = "0xEF6968", VA = "0xEF6968", Slot = "5")]
		private int System.Collections.Generic.IEqualityComparer<System.Object>.GetHashCode(object obj)
		{
			return default(int);
		}

		[Token(Token = "0x6001301")]
		[Address(RVA = "0xEF6988", Offset = "0xEF6988", VA = "0xEF6988")]
		public ReferenceEqualityComparer()
		{
		}
	}
	[Token(Token = "0x200028B")]
	internal class Slice<T> : IEnumerable<T>, IEnumerable, IList<T>, ICollection<T>
	{
		[Token(Token = "0x200028C")]
		[CompilerGenerated]
		private sealed class <GetEnumerator>d__15 : IEnumerator<T>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000D2A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <>1__state;

			[Token(Token = "0x4000D2B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T <>2__current;

			[Token(Token = "0x4000D2C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Slice<T> <>4__this;

			[Token(Token = "0x4000D2D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <i>5__2;

			[Token(Token = "0x17000257")]
			private T System.Collections.Generic.IEnumerator<T>.Current
			{
				[Token(Token = "0x6001319")]
				[DebuggerHidden]
				get
				{
					return (T)null;
				}
			}

			[Token(Token = "0x17000258")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600131B")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001316")]
			[DebuggerHidden]
			public <GetEnumerator>d__15(int <>1__state)
			{
			}

			[Token(Token = "0x6001317")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001318")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600131A")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200028D")]
		[CompilerGenerated]
		private sealed class <System-Collections-IEnumerable-GetEnumerator>d__16 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000D2E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <>1__state;

			[Token(Token = "0x4000D2F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private object <>2__current;

			[Token(Token = "0x4000D30")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Slice<T> <>4__this;

			[Token(Token = "0x4000D31")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <i>5__2;

			[Token(Token = "0x17000259")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600131F")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700025A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001321")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600131C")]
			[DebuggerHidden]
			public <System-Collections-IEnumerable-GetEnumerator>d__16(int <>1__state)
			{
			}

			[Token(Token = "0x600131D")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600131E")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001320")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000D26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IList<T> m_SourceList;

		[Token(Token = "0x4000D27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int m_From;

		[Token(Token = "0x4000D28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int m_Length;

		[Token(Token = "0x4000D29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool m_Reversed;

		[Token(Token = "0x17000252")]
		public T this[int index]
		{
			[Token(Token = "0x6001303")]
			get
			{
				return (T)null;
			}
			[Token(Token = "0x6001304")]
			set
			{
			}
		}

		[Token(Token = "0x17000253")]
		public int From
		{
			[Token(Token = "0x6001305")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000254")]
		public int Count
		{
			[Token(Token = "0x6001306")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000255")]
		public bool Reversed
		{
			[Token(Token = "0x6001307")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000256")]
		public bool IsReadOnly
		{
			[Token(Token = "0x6001314")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001302")]
		public Slice(IList<T> list, int from, int length, bool reversed)
		{
		}

		[Token(Token = "0x6001308")]
		private int CalcRealIndex(int index)
		{
			return default(int);
		}

		[Token(Token = "0x6001309")]
		[IteratorStateMachine(typeof(Slice<>.<GetEnumerator>d__15))]
		public IEnumerator<T> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x600130A")]
		[IteratorStateMachine(typeof(Slice<>.<System-Collections-IEnumerable-GetEnumerator>d__16))]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x600130B")]
		public T[] ToArray()
		{
			return null;
		}

		[Token(Token = "0x600130C")]
		public List<T> ToList()
		{
			return null;
		}

		[Token(Token = "0x600130D")]
		public int IndexOf(T item)
		{
			return default(int);
		}

		[Token(Token = "0x600130E")]
		public void Insert(int index, T item)
		{
		}

		[Token(Token = "0x600130F")]
		public void RemoveAt(int index)
		{
		}

		[Token(Token = "0x6001310")]
		public void Add(T item)
		{
		}

		[Token(Token = "0x6001311")]
		public void Clear()
		{
		}

		[Token(Token = "0x6001312")]
		public bool Contains(T item)
		{
			return default(bool);
		}

		[Token(Token = "0x6001313")]
		public void CopyTo(T[] array, int arrayIndex)
		{
		}

		[Token(Token = "0x6001315")]
		public bool Remove(T item)
		{
			return default(bool);
		}
	}
}
namespace MoonSharp.Interpreter.CoreLib
{
	[Token(Token = "0x200028E")]
	[MoonSharpModule]
	public class BasicModule
	{
		[Token(Token = "0x6001322")]
		[Address(RVA = "0xEF6990", Offset = "0xEF6990", VA = "0xEF6990")]
		[MoonSharpModuleMethod]
		public static DynValue type(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x6001323")]
		[Address(RVA = "0xEF6A5C", Offset = "0xEF6A5C", VA = "0xEF6A5C")]
		[MoonSharpModuleMethod]
		public static DynValue assert(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x6001324")]
		[Address(RVA = "0xEF6BC8", Offset = "0xEF6BC8", VA = "0xEF6BC8")]
		[MoonSharpModuleMethod]
		public static DynValue collectgarbage(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x6001325")]
		[Address(RVA = "0xEF6D00", Offset = "0xEF6D00", VA = "0xEF6D00")]
		[MoonSharpModuleMethod]
		public static DynValue error(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x6001326")]
		[Address(RVA = "0xEF6D94", Offset = "0xEF6D94", VA = "0xEF6D94")]
		[MoonSharpModuleMethod]
		public static DynValue tostring(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x6001327")]
		[Address(RVA = "0xEF6FD8", Offset = "0xEF6FD8", VA = "0xEF6FD8")]
		private static DynValue __tostring_continuation(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x6001328")]
		[Address(RVA = "0xEF7078", Offset = "0xEF7078", VA = "0xEF7078")]
		[MoonSharpModuleMethod]
		public static DynValue select(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x6001329")]
		[Address(RVA = "0xEF73F8", Offset = "0xEF73F8", VA = "0xEF73F8")]
		[MoonSharpModuleMethod]
		public static DynValue tonumber(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x600132A")]
		[Address(RVA = "0xEF7824", Offset = "0xEF7824", VA = "0xEF7824")]
		[MoonSharpModuleMethod]
		public static DynValue print(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x600132B")]
		[Address(RVA = "0xEF79C8", Offset = "0xEF79C8", VA = "0xEF79C8")]
		public BasicModule()
		{
		}
	}
	[Token(Token = "0x200028F")]
	[MoonSharpModule(Namespace = "bit32")]
	public class Bit32Module
	{
		[Token(Token = "0x4000D32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly uint[] MASKS;

		[Token(Token = "0x600132C")]
		[Address(RVA = "0xEF79D0", Offset = "0xEF79D0", VA = "0xEF79D0")]
		private static uint ToUInt32(DynValue v)
		{
			return default(uint);
		}

		[Token(Token = "0x600132D")]
		[Address(RVA = "0xEF7A68", Offset = "0xEF7A68", VA = "0xEF7A68")]
		private static int ToInt32(DynValue v)
		{
			return default(int);
		}

		[Token(Token = "0x600132E")]
		[Address(RVA = "0xEF7B08", Offset = "0xEF7B08", VA = "0xEF7B08")]
		private static uint NBitMask(int bits)
		{
			return default(uint);
		}

		[Token(Token = "0x600132F")]
		[Address(RVA = "0xEF7BB4", Offset = "0xEF7BB4", VA = "0xEF7BB4")]
		public static uint Bitwise(string funcName, CallbackArguments args, Func<uint, uint, uint> accumFunc)
		{
			return default(uint);
		}

		[Token(Token = "0x6001330")]
		[Address(RVA = "0xEF7CD4", Offset = "0xEF7CD4", VA = "0xEF7CD4")]
		[MoonSharpModuleMethod]
		public static DynValue extract(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x6001331")]
		[Address(RVA = "0xEF8088", Offset = "0xEF8088", VA = "0xEF8088")]
		[MoonSharpModuleMethod]
		public static DynValue replace(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x6001332")]
		[Address(RVA = "0xEF7E80", Offset = "0xEF7E80", VA = "0xEF7E80")]
		private static void ValidatePosWidth(string func, int argPos, int pos, int width)
		{
		}

		[Token(Token = "0x6001333")]
		[Address(RVA = "0xEF825C", Offset = "0xEF825C", VA = "0xEF825C")]
		[MoonSharpModuleMethod]
		public static DynValue arshift(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x6001334")]
		[Address(RVA = "0xEF8374", Offset = "0xEF8374", VA = "0xEF8374")]
		[MoonSharpModuleMethod]
		public static DynValue rshift(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x6001335")]
		[Address(RVA = "0xEF848C", Offset = "0xEF848C", VA = "0xEF848C")]
		[MoonSharpModuleMethod]
		public static DynValue lshift(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x6001336")]
		[Address(RVA = "0xEF85A4", Offset = "0xEF85A4", VA = "0xEF85A4")]
		[MoonSharpModuleMethod]
		public static DynValue band(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x6001337")]
		[Address(RVA = "0xEF8704", Offset = "0xEF8704", VA = "0xEF8704")]
		[MoonSharpModuleMethod]
		public static DynValue btest(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x6001338")]
		[Address(RVA = "0xEF8868", Offset = "0xEF8868", VA = "0xEF8868")]
		[MoonSharpModuleMethod]
		public static DynValue bor(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x6001339")]
		[Address(RVA = "0xEF89C8", Offset = "0xEF89C8", VA = "0xEF89C8")]
		[MoonSharpModuleMethod]
		public static DynValue bnot(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x600133A")]
		[Address(RVA = "0xEF8A98", Offset = "0xEF8A98", VA = "0xEF8A98")]
		[MoonSharpModuleMethod]
		public static DynValue bxor(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x600133B")]
		[Address(RVA = "0xEF8BF8", Offset = "0xEF8BF8", VA = "0xEF8BF8")]
		[MoonSharpModuleMethod]
		public static DynValue lrotate(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x600133C")]
		[Address(RVA = "0xEF8D00", Offset = "0xEF8D00", VA = "0xEF8D00")]
		[MoonSharpModuleMethod]
		public static DynValue rrotate(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x600133D")]
		[Address(RVA = "0xEF8E08", Offset = "0xEF8E08", VA = "0xEF8E08")]
		public Bit32Module()
		{
		}
	}
	[Token(Token = "0x2000291")]
	[MoonSharpModule(Namespace = "coroutine")]
	public class CoroutineModule
	{
		[Token(Token = "0x6001345")]
		[Address(RVA = "0xEF8F48", Offset = "0xEF8F48", VA = "0xEF8F48")]
		[MoonSharpModuleMethod]
		public static DynValue create(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x6001346")]
		[Address(RVA = "0xEF9024", Offset = "0xEF9024", VA = "0xEF9024")]
		[MoonSharpModuleMethod]
		public static DynValue wrap(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x6001347")]
		[Address(RVA = "0xEF9180", Offset = "0xEF9180", VA = "0xEF9180")]
		public static DynValue __wrap_wrapper(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x6001348")]
		[Address(RVA = "0xEF9220", Offset = "0xEF9220", VA = "0xEF9220")]
		[MoonSharpModuleMethod]
		public static DynValue resume(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x6001349")]
		[Address(RVA = "0xEF97B4", Offset = "0xEF97B4", VA = "0xEF97B4")]
		[MoonSharpModuleMethod]
		public static DynValue yield(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x600134A")]
		[Address(RVA = "0xEF982C", Offset = "0xEF982C", VA = "0xEF982C")]
		[MoonSharpModuleMethod]
		public static DynValue running(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x600134B")]
		[Address(RVA = "0xEF9974", Offset = "0xEF9974", VA = "0xEF9974")]
		[MoonSharpModuleMethod]
		public static DynValue status(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x600134C")]
		[Address(RVA = "0xEF9BB4", Offset = "0xEF9BB4", VA = "0xEF9BB4")]
		public CoroutineModule()
		{
		}
	}
	[Token(Token = "0x2000292")]
	[MoonSharpModule(Namespace = "debug")]
	public class DebugModule
	{
		[Token(Token = "0x600134D")]
		[Address(RVA = "0xEF9BBC", Offset = "0xEF9BBC", VA = "0xEF9BBC")]
		[MoonSharpModuleMethod]
		public static DynValue debug(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x600134E")]
		[Address(RVA = "0xEF9EE8", Offset = "0xEF9EE8", VA = "0xEF9EE8")]
		[MoonSharpModuleMethod]
		public static DynValue getuservalue(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x600134F")]
		[Address(RVA = "0xEF9FB0", Offset = "0xEF9FB0", VA = "0xEF9FB0")]
		[MoonSharpModuleMethod]
		public static DynValue setuservalue(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x6001350")]
		[Address(RVA = "0xEFA05C", Offset = "0xEFA05C", VA = "0xEFA05C")]
		[MoonSharpModuleMethod]
		public static DynValue getregistry(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x6001351")]
		[Address(RVA = "0xEFA0D4", Offset = "0xEFA0D4", VA = "0xEFA0D4")]
		[MoonSharpModuleMethod]
		public static DynValue getmetatable(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x6001352")]
		[Address(RVA = "0xEFA20C", Offset = "0xEFA20C", VA = "0xEFA20C")]
		[MoonSharpModuleMethod]
		public static DynValue setmetatable(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x6001353")]
		[Address(RVA = "0xEFA3C8", Offset = "0xEFA3C8", VA = "0xEFA3C8")]
		[MoonSharpModuleMethod]
		public static DynValue getupvalue(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x6001354")]
		[Address(RVA = "0xEFA640", Offset = "0xEFA640", VA = "0xEFA640")]
		[MoonSharpModuleMethod]
		public static DynValue upvalueid(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x6001355")]
		[Address(RVA = "0xEFA7F4", Offset = "0xEFA7F4", VA = "0xEFA7F4")]
		[MoonSharpModuleMethod]
		public static DynValue setupvalue(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x6001356")]
		[Address(RVA = "0xEFA9E8", Offset = "0xEFA9E8", VA = "0xEFA9E8")]
		[MoonSharpModuleMethod]
		public static DynValue upvaluejoin(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x6001357")]
		[Address(RVA = "0xEFAC38", Offset = "0xEFAC38", VA = "0xEFAC38")]
		[MoonSharpModuleMethod]
		public static DynValue traceback(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x6001358")]
		[Address(RVA = "0xEFAFDC", Offset = "0xEFAFDC", VA = "0xEFAFDC")]
		public DebugModule()
		{
		}
	}
	[Token(Token = "0x2000293")]
	[MoonSharpModule(Namespace = "dynamic")]
	public class DynamicModule
	{
		[Token(Token = "0x2000294")]
		private class DynamicExprWrapper
		{
			[Token(Token = "0x4000D38")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public DynamicExpression Expr;

			[Token(Token = "0x600135D")]
			[Address(RVA = "0xEFB4F8", Offset = "0xEFB4F8", VA = "0xEFB4F8")]
			public DynamicExprWrapper()
			{
			}
		}

		[Token(Token = "0x6001359")]
		[Address(RVA = "0xEFAFE4", Offset = "0xEFAFE4", VA = "0xEFAFE4")]
		public static void MoonSharpInit(Table globalTable, Table stringTable)
		{
		}

		[Token(Token = "0x600135A")]
		[Address(RVA = "0xEFB050", Offset = "0xEFB050", VA = "0xEFB050")]
		[MoonSharpModuleMethod]
		public static DynValue eval(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x600135B")]
		[Address(RVA = "0xEFB2FC", Offset = "0xEFB2FC", VA = "0xEFB2FC")]
		[MoonSharpModuleMethod]
		public static DynValue prepare(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x600135C")]
		[Address(RVA = "0xEFB500", Offset = "0xEFB500", VA = "0xEFB500")]
		public DynamicModule()
		{
		}
	}
	[Token(Token = "0x2000295")]
	[MoonSharpModule]
	public class ErrorHandlingModule
	{
		[Token(Token = "0x600135E")]
		[Address(RVA = "0xEFB508", Offset = "0xEFB508", VA = "0xEFB508")]
		[MoonSharpModuleMethod]
		public static DynValue pcall(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x600135F")]
		[Address(RVA = "0xEFB564", Offset = "0xEFB564", VA = "0xEFB564")]
		private static DynValue SetErrorHandlerStrategy(string funcName, ScriptExecutionContext executionContext, CallbackArguments args, DynValue handlerBeforeUnwind)
		{
			return null;
		}

		[Token(Token = "0x6001360")]
		[Address(RVA = "0xEFBF8C", Offset = "0xEFBF8C", VA = "0xEFBF8C")]
		private static DynValue MakeReturnTuple(bool retstatus, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x6001361")]
		[Address(RVA = "0xEFC0F4", Offset = "0xEFC0F4", VA = "0xEFC0F4")]
		public static DynValue pcall_continuation(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x6001362")]
		[Address(RVA = "0xEFC0FC", Offset = "0xEFC0FC", VA = "0xEFC0FC")]
		public static DynValue pcall_onerror(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x6001363")]
		[Address(RVA = "0xEFC104", Offset = "0xEFC104", VA = "0xEFC104")]
		[MoonSharpModuleMethod]
		public static DynValue xpcall(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x6001364")]
		[Address(RVA = "0xEFC318", Offset = "0xEFC318", VA = "0xEFC318")]
		public ErrorHandlingModule()
		{
		}
	}
	[Token(Token = "0x2000296")]
	[MoonSharpModule(Namespace = "io")]
	public class IoModule
	{
		[Token(Token = "0x6001365")]
		[Address(RVA = "0xEFC320", Offset = "0xEFC320", VA = "0xEFC320")]
		public static void MoonSharpInit(Table globalTable, Table ioTable)
		{
		}

		[Token(Token = "0x6001366")]
		[Address(RVA = "0xEFC748", Offset = "0xEFC748", VA = "0xEFC748")]
		private static DynValue __index_callback(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x6001367")]
		[Address(RVA = "0xEFC8C4", Offset = "0xEFC8C4", VA = "0xEFC8C4")]
		private static DynValue GetStandardFile(Script S, StandardFileType file)
		{
			return null;
		}

		[Token(Token = "0x6001368")]
		[Address(RVA = "0xEFC544", Offset = "0xEFC544", VA = "0xEFC544")]
		private static void SetStandardFile(Script S, StandardFileType file, Stream optionsStream)
		{
		}

		[Token(Token = "0x6001369")]
		[Address(RVA = "0xEFC974", Offset = "0xEFC974", VA = "0xEFC974")]
		private static FileUserDataBase GetDefaultFile(ScriptExecutionContext executionContext, StandardFileType file)
		{
			return null;
		}

		[Token(Token = "0x600136A")]
		[Address(RVA = "0xEFCAFC", Offset = "0xEFCAFC", VA = "0xEFCAFC")]
		private static void SetDefaultFile(ScriptExecutionContext executionContext, StandardFileType file, FileUserDataBase fileHandle)
		{
		}

		[Token(Token = "0x600136B")]
		[Address(RVA = "0xEFCB30", Offset = "0xEFCB30", VA = "0xEFCB30")]
		internal static void SetDefaultFile(Script script, StandardFileType file, FileUserDataBase fileHandle)
		{
		}

		[Token(Token = "0x600136C")]
		[Address(RVA = "0xEFCC28", Offset = "0xEFCC28", VA = "0xEFCC28")]
		public static void SetDefaultFile(Script script, StandardFileType file, Stream stream)
		{
		}

		[Token(Token = "0x600136D")]
		[Address(RVA = "0xEFCC70", Offset = "0xEFCC70", VA = "0xEFCC70")]
		[MoonSharpModuleMethod]
		public static DynValue close(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x600136E")]
		[Address(RVA = "0xEFCD08", Offset = "0xEFCD08", VA = "0xEFCD08")]
		[MoonSharpModuleMethod]
		public static DynValue flush(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x600136F")]
		[Address(RVA = "0xEFCE00", Offset = "0xEFCE00", VA = "0xEFCE00")]
		[MoonSharpModuleMethod]
		public static DynValue input(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x6001370")]
		[Address(RVA = "0xEFCFE8", Offset = "0xEFCFE8", VA = "0xEFCFE8")]
		[MoonSharpModuleMethod]
		public static DynValue output(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x6001371")]
		[Address(RVA = "0xEFCE08", Offset = "0xEFCE08", VA = "0xEFCE08")]
		private static DynValue HandleDefaultStreamSetter(ScriptExecutionContext executionContext, CallbackArguments args, StandardFileType defaultFiles)
		{
			return null;
		}

		[Token(Token = "0x6001372")]
		[Address(RVA = "0xEFCFF0", Offset = "0xEFCFF0", VA = "0xEFCFF0")]
		private static Encoding GetUTF8Encoding()
		{
			return null;
		}

		[Token(Token = "0x6001373")]
		[Address(RVA = "0xEFD0EC", Offset = "0xEFD0EC", VA = "0xEFD0EC")]
		[MoonSharpModuleMethod]
		public static DynValue lines(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x6001374")]
		[Address(RVA = "0xEFD9A8", Offset = "0xEFD9A8", VA = "0xEFD9A8")]
		[MoonSharpModuleMethod]
		public static DynValue open(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x6001375")]
		[Address(RVA = "0xEFD8FC", Offset = "0xEFD8FC", VA = "0xEFD8FC")]
		public static string IoExceptionToLuaMessage(Exception ex, string filename)
		{
			return null;
		}

		[Token(Token = "0x6001376")]
		[Address(RVA = "0xEFDFB8", Offset = "0xEFDFB8", VA = "0xEFDFB8")]
		[MoonSharpModuleMethod]
		public static DynValue type(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x6001377")]
		[Address(RVA = "0xEFE138", Offset = "0xEFE138", VA = "0xEFE138")]
		[MoonSharpModuleMethod]
		public static DynValue read(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x6001378")]
		[Address(RVA = "0xEFE170", Offset = "0xEFE170", VA = "0xEFE170")]
		[MoonSharpModuleMethod]
		public static DynValue write(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x6001379")]
		[Address(RVA = "0xEFE1A8", Offset = "0xEFE1A8", VA = "0xEFE1A8")]
		[MoonSharpModuleMethod]
		public static DynValue tmpfile(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x600137A")]
		[Address(RVA = "0xEFD050", Offset = "0xEFD050", VA = "0xEFD050")]
		private static FileUserDataBase Open(ScriptExecutionContext executionContext, string filename, Encoding encoding, string mode)
		{
			return null;
		}

		[Token(Token = "0x600137B")]
		[Address(RVA = "0xEFE320", Offset = "0xEFE320", VA = "0xEFE320")]
		public IoModule()
		{
		}
	}
	[Token(Token = "0x2000298")]
	[MoonSharpModule(Namespace = "json")]
	public class JsonModule
	{
		[Token(Token = "0x600137F")]
		[Address(RVA = "0xEFE3A8", Offset = "0xEFE3A8", VA = "0xEFE3A8")]
		[MoonSharpModuleMethod]
		public static DynValue parse(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x6001380")]
		[Address(RVA = "0xEFE544", Offset = "0xEFE544", VA = "0xEFE544")]
		[MoonSharpModuleMethod]
		public static DynValue serialize(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x6001381")]
		[Address(RVA = "0xEFE6B4", Offset = "0xEFE6B4", VA = "0xEFE6B4")]
		[MoonSharpModuleMethod]
		public static DynValue isnull(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x6001382")]
		[Address(RVA = "0xEFE750", Offset = "0xEFE750", VA = "0xEFE750")]
		[MoonSharpModuleMethod]
		public static DynValue @null(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x6001383")]
		[Address(RVA = "0xEFE758", Offset = "0xEFE758", VA = "0xEFE758")]
		public JsonModule()
		{
		}
	}
	[Token(Token = "0x2000299")]
	[MoonSharpModule]
	public class LoadModule
	{
		[Token(Token = "0x4000D3B")]
		[MoonSharpModuleMethod]
		public const string require = "\r\nfunction(modulename)\r\n\tif (package == nil) then package = { }; end\r\n\tif (package.loaded == nil) then package.loaded = { }; end\r\n\r\n\tlocal m = package.loaded[modulename];\r\n\r\n\tif (m ~= nil) then\r\n\t\treturn m;\r\n\tend\r\n\r\n\tlocal func = __require_clr_impl(modulename);\r\n\r\n\tlocal res = func(modulename);\r\n\r\n\tif (res == nil) then\r\n\t\tres = true;\r\n\tend\r\n\r\n\tpackage.loaded[modulename] = res;\r\n\r\n\treturn res;\r\nend";

		[Token(Token = "0x6001384")]
		[Address(RVA = "0xEFE760", Offset = "0xEFE760", VA = "0xEFE760")]
		public static void MoonSharpInit(Table globalTable, Table ioTable)
		{
		}

		[Token(Token = "0x6001385")]
		[Address(RVA = "0xEFE944", Offset = "0xEFE944", VA = "0xEFE944")]
		[MoonSharpModuleMethod]
		public static DynValue load(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x6001386")]
		[Address(RVA = "0xEFEF30", Offset = "0xEFEF30", VA = "0xEFEF30")]
		[MoonSharpModuleMethod]
		public static DynValue loadsafe(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x6001387")]
		[Address(RVA = "0xEFE94C", Offset = "0xEFE94C", VA = "0xEFE94C")]
		public static DynValue load_impl(ScriptExecutionContext executionContext, CallbackArguments args, Table defaultEnv)
		{
			return null;
		}

		[Token(Token = "0x6001388")]
		[Address(RVA = "0xEFEFC8", Offset = "0xEFEFC8", VA = "0xEFEFC8")]
		[MoonSharpModuleMethod]
		public static DynValue loadfile(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x6001389")]
		[Address(RVA = "0xEFF2C8", Offset = "0xEFF2C8", VA = "0xEFF2C8")]
		[MoonSharpModuleMethod]
		public static DynValue loadfilesafe(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x600138A")]
		[Address(RVA = "0xEFEFD0", Offset = "0xEFEFD0", VA = "0xEFEFD0")]
		private static DynValue loadfile_impl(ScriptExecutionContext executionContext, CallbackArguments args, Table defaultEnv)
		{
			return null;
		}

		[Token(Token = "0x600138B")]
		[Address(RVA = "0xEFEF5C", Offset = "0xEFEF5C", VA = "0xEFEF5C")]
		private static Table GetSafeDefaultEnv(ScriptExecutionContext executionContext)
		{
			return null;
		}

		[Token(Token = "0x600138C")]
		[Address(RVA = "0xEFF2F4", Offset = "0xEFF2F4", VA = "0xEFF2F4")]
		[MoonSharpModuleMethod]
		public static DynValue dofile(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x600138D")]
		[Address(RVA = "0xEFF504", Offset = "0xEFF504", VA = "0xEFF504")]
		[MoonSharpModuleMethod]
		public static DynValue __require_clr_impl(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x600138E")]
		[Address(RVA = "0xEFF5A0", Offset = "0xEFF5A0", VA = "0xEFF5A0")]
		public LoadModule()
		{
		}
	}
	[Token(Token = "0x200029A")]
	[MoonSharpModule(Namespace = "math")]
	public class MathModule
	{
		[Token(Token = "0x4000D3C")]
		[MoonSharpModuleConstant]
		public const double pi = Math.PI;

		[Token(Token = "0x4000D3D")]
		[MoonSharpModuleConstant]
		public const double huge = double.MaxValue;

		[Token(Token = "0x600138F")]
		[Address(RVA = "0xEFF5A8", Offset = "0xEFF5A8", VA = "0xEFF5A8")]
		private static System.Random GetRandom(Script s)
		{
			return null;
		}

		[Token(Token = "0x6001390")]
		[Address(RVA = "0xEFF66C", Offset = "0xEFF66C", VA = "0xEFF66C")]
		private static void SetRandom(Script s, System.Random random)
		{
		}

		[Token(Token = "0x6001391")]
		[Address(RVA = "0xEFF748", Offset = "0xEFF748", VA = "0xEFF748")]
		public static void MoonSharpInit(Table globalTable, Table ioTable)
		{
		}

		[Token(Token = "0x6001392")]
		[Address(RVA = "0xEFF7B4", Offset = "0xEFF7B4", VA = "0xEFF7B4")]
		private static DynValue exec1(CallbackArguments args, string funcName, Func<double, double> func)
		{
			return null;
		}

		[Token(Token = "0x6001393")]
		[Address(RVA = "0xEFF868", Offset = "0xEFF868", VA = "0xEFF868")]
		private static DynValue exec2(CallbackArguments args, string funcName, Func<double, double, double> func)
		{
			return null;
		}

		[Token(Token = "0x6001394")]
		[Address(RVA = "0xEFF944", Offset = "0xEFF944", VA = "0xEFF944")]
		private static DynValue exec2n(CallbackArguments args, string funcName, double defVal, Func<double, double, double> func)
		{
			return null;
		}

		[Token(Token = "0x6001395")]
		[Address(RVA = "0xEFFA40", Offset = "0xEFFA40", VA = "0xEFFA40")]
		private static DynValue execaccum(CallbackArguments args, string funcName, Func<double, double, double> func)
		{
			return null;
		}

		[Token(Token = "0x6001396")]
		[Address(RVA = "0xEFFBC4", Offset = "0xEFFBC4", VA = "0xEFFBC4")]
		[MoonSharpModuleMethod]
		public static DynValue abs(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x6001397")]
		[Address(RVA = "0xEFFCC8", Offset = "0xEFFCC8", VA = "0xEFFCC8")]
		[MoonSharpModuleMethod]
		public static DynValue acos(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x6001398")]
		[Address(RVA = "0xEFFDCC", Offset = "0xEFFDCC", VA = "0xEFFDCC")]
		[MoonSharpModuleMethod]
		public static DynValue asin(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x6001399")]
		[Address(RVA = "0xEFFED0", Offset = "0xEFFED0", VA = "0xEFFED0")]
		[MoonSharpModuleMethod]
		public static DynValue atan(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x600139A")]
		[Address(RVA = "0xEFFFD4", Offset = "0xEFFFD4", VA = "0xEFFFD4")]
		[MoonSharpModuleMethod]
		public static DynValue atan2(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x600139B")]
		[Address(RVA = "0xF000D8", Offset = "0xF000D8", VA = "0xF000D8")]
		[MoonSharpModuleMethod]
		public static DynValue ceil(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x600139C")]
		[Address(RVA = "0xF001DC", Offset = "0xF001DC", VA = "0xF001DC")]
		[MoonSharpModuleMethod]
		public static DynValue cos(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x600139D")]
		[Address(RVA = "0xF002E0", Offset = "0xF002E0", VA = "0xF002E0")]
		[MoonSharpModuleMethod]
		public static DynValue cosh(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x600139E")]
		[Address(RVA = "0xF003E4", Offset = "0xF003E4", VA = "0xF003E4")]
		[MoonSharpModuleMethod]
		public static DynValue deg(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x600139F")]
		[Address(RVA = "0xF004E8", Offset = "0xF004E8", VA = "0xF004E8")]
		[MoonSharpModuleMethod]
		public static DynValue exp(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x60013A0")]
		[Address(RVA = "0xF005EC", Offset = "0xF005EC", VA = "0xF005EC")]
		[MoonSharpModuleMethod]
		public static DynValue floor(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x60013A1")]
		[Address(RVA = "0xF006F0", Offset = "0xF006F0", VA = "0xF006F0")]
		[MoonSharpModuleMethod]
		public static DynValue fmod(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x60013A2")]
		[Address(RVA = "0xF007F4", Offset = "0xF007F4", VA = "0xF007F4")]
		[MoonSharpModuleMethod]
		public static DynValue frexp(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x60013A3")]
		[Address(RVA = "0xF00A6C", Offset = "0xF00A6C", VA = "0xF00A6C")]
		[MoonSharpModuleMethod]
		public static DynValue ldexp(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x60013A4")]
		[Address(RVA = "0xF00B70", Offset = "0xF00B70", VA = "0xF00B70")]
		[MoonSharpModuleMethod]
		public static DynValue log(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x60013A5")]
		[Address(RVA = "0xF00C7C", Offset = "0xF00C7C", VA = "0xF00C7C")]
		[MoonSharpModuleMethod]
		public static DynValue max(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x60013A6")]
		[Address(RVA = "0xF00D80", Offset = "0xF00D80", VA = "0xF00D80")]
		[MoonSharpModuleMethod]
		public static DynValue min(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x60013A7")]
		[Address(RVA = "0xF00E84", Offset = "0xF00E84", VA = "0xF00E84")]
		[MoonSharpModuleMethod]
		public static DynValue modf(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x60013A8")]
		[Address(RVA = "0xF01018", Offset = "0xF01018", VA = "0xF01018")]
		[MoonSharpModuleMethod]
		public static DynValue pow(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x60013A9")]
		[Address(RVA = "0xF0111C", Offset = "0xF0111C", VA = "0xF0111C")]
		[MoonSharpModuleMethod]
		public static DynValue rad(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x60013AA")]
		[Address(RVA = "0xF01220", Offset = "0xF01220", VA = "0xF01220")]
		[MoonSharpModuleMethod]
		public static DynValue random(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x60013AB")]
		[Address(RVA = "0xF013C8", Offset = "0xF013C8", VA = "0xF013C8")]
		[MoonSharpModuleMethod]
		public static DynValue randomseed(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x60013AC")]
		[Address(RVA = "0xF01508", Offset = "0xF01508", VA = "0xF01508")]
		[MoonSharpModuleMethod]
		public static DynValue sin(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x60013AD")]
		[Address(RVA = "0xF0160C", Offset = "0xF0160C", VA = "0xF0160C")]
		[MoonSharpModuleMethod]
		public static DynValue sinh(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x60013AE")]
		[Address(RVA = "0xF01710", Offset = "0xF01710", VA = "0xF01710")]
		[MoonSharpModuleMethod]
		public static DynValue sqrt(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x60013AF")]
		[Address(RVA = "0xF01814", Offset = "0xF01814", VA = "0xF01814")]
		[MoonSharpModuleMethod]
		public static DynValue tan(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x60013B0")]
		[Address(RVA = "0xF01918", Offset = "0xF01918", VA = "0xF01918")]
		[MoonSharpModuleMethod]
		public static DynValue tanh(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x60013B1")]
		[Address(RVA = "0xF01A1C", Offset = "0xF01A1C", VA = "0xF01A1C")]
		public MathModule()
		{
		}
	}
	[Token(Token = "0x200029C")]
	[MoonSharpModule]
	public class MetaTableModule
	{
		[Token(Token = "0x60013CB")]
		[Address(RVA = "0xF022B8", Offset = "0xF022B8", VA = "0xF022B8")]
		[MoonSharpModuleMethod]
		public static DynValue setmetatable(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x60013CC")]
		[Address(RVA = "0xF023FC", Offset = "0xF023FC", VA = "0xF023FC")]
		[MoonSharpModuleMethod]
		public static DynValue getmetatable(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x60013CD")]
		[Address(RVA = "0xF0256C", Offset = "0xF0256C", VA = "0xF0256C")]
		[MoonSharpModuleMethod]
		public static DynValue rawget(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x60013CE")]
		[Address(RVA = "0xF02604", Offset = "0xF02604", VA = "0xF02604")]
		[MoonSharpModuleMethod]
		public static DynValue rawset(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x60013CF")]
		[Address(RVA = "0xF026C8", Offset = "0xF026C8", VA = "0xF026C8")]
		[MoonSharpModuleMethod]
		public static DynValue rawequal(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x60013D0")]
		[Address(RVA = "0xF0276C", Offset = "0xF0276C", VA = "0xF0276C")]
		[MoonSharpModuleMethod]
		public static DynValue rawlen(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x60013D1")]
		[Address(RVA = "0xF02868", Offset = "0xF02868", VA = "0xF02868")]
		public MetaTableModule()
		{
		}
	}
	[Token(Token = "0x200029D")]
	[MoonSharpModule(Namespace = "os")]
	public class OsSystemModule
	{
		[Token(Token = "0x60013D2")]
		[Address(RVA = "0xF02870", Offset = "0xF02870", VA = "0xF02870")]
		[MoonSharpModuleMethod]
		public static DynValue execute(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x60013D3")]
		[Address(RVA = "0xF02C90", Offset = "0xF02C90", VA = "0xF02C90")]
		[MoonSharpModuleMethod]
		public static DynValue exit(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x60013D4")]
		[Address(RVA = "0xF02DDC", Offset = "0xF02DDC", VA = "0xF02DDC")]
		[MoonSharpModuleMethod]
		public static DynValue getenv(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x60013D5")]
		[Address(RVA = "0xF02FC0", Offset = "0xF02FC0", VA = "0xF02FC0")]
		[MoonSharpModuleMethod]
		public static DynValue remove(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x60013D6")]
		[Address(RVA = "0xF0364C", Offset = "0xF0364C", VA = "0xF0364C")]
		[MoonSharpModuleMethod]
		public static DynValue rename(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x60013D7")]
		[Address(RVA = "0xF03D14", Offset = "0xF03D14", VA = "0xF03D14")]
		[MoonSharpModuleMethod]
		public static DynValue setlocale(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x60013D8")]
		[Address(RVA = "0xF03D7C", Offset = "0xF03D7C", VA = "0xF03D7C")]
		[MoonSharpModuleMethod]
		public static DynValue tmpname(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x60013D9")]
		[Address(RVA = "0xF03EB8", Offset = "0xF03EB8", VA = "0xF03EB8")]
		public OsSystemModule()
		{
		}
	}
	[Token(Token = "0x200029E")]
	[MoonSharpModule(Namespace = "os")]
	public class OsTimeModule
	{
		[Token(Token = "0x4000D56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static DateTime Time0;

		[Token(Token = "0x4000D57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static DateTime Epoch;

		[Token(Token = "0x60013DA")]
		[Address(RVA = "0xF03EC0", Offset = "0xF03EC0", VA = "0xF03EC0")]
		private static DynValue GetUnixTime(DateTime dateTime, [Optional] DateTime? epoch)
		{
			return null;
		}

		[Token(Token = "0x60013DB")]
		[Address(RVA = "0xF04020", Offset = "0xF04020", VA = "0xF04020")]
		private static DateTime FromUnixTime(double unixtime)
		{
			return default(DateTime);
		}

		[Token(Token = "0x60013DC")]
		[Address(RVA = "0xF040EC", Offset = "0xF040EC", VA = "0xF040EC")]
		[MoonSharpModuleMethod]
		public static DynValue clock(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x60013DD")]
		[Address(RVA = "0xF041B0", Offset = "0xF041B0", VA = "0xF041B0")]
		[MoonSharpModuleMethod]
		public static DynValue difftime(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x60013DE")]
		[Address(RVA = "0xF042A0", Offset = "0xF042A0", VA = "0xF042A0")]
		[MoonSharpModuleMethod]
		public static DynValue time(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x60013DF")]
		[Address(RVA = "0xF043AC", Offset = "0xF043AC", VA = "0xF043AC")]
		private static DateTime ParseTimeTable(Table t)
		{
			return default(DateTime);
		}

		[Token(Token = "0x60013E0")]
		[Address(RVA = "0xF04654", Offset = "0xF04654", VA = "0xF04654")]
		private static int? GetTimeTableField(Table t, string key)
		{
			return null;
		}

		[Token(Token = "0x60013E1")]
		[Address(RVA = "0xF04738", Offset = "0xF04738", VA = "0xF04738")]
		[MoonSharpModuleMethod]
		public static DynValue date(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x60013E2")]
		[Address(RVA = "0xF04CF0", Offset = "0xF04CF0", VA = "0xF04CF0")]
		private static string StrFTime(string format, DateTime d)
		{
			return null;
		}

		[Token(Token = "0x60013E3")]
		[Address(RVA = "0xF054BC", Offset = "0xF054BC", VA = "0xF054BC")]
		public OsTimeModule()
		{
		}
	}
	[Token(Token = "0x200029F")]
	[MoonSharpModule(Namespace = "string")]
	public class StringModule
	{
		[Token(Token = "0x4000D58")]
		public const string BASE64_DUMP_HEADER = "MoonSharp_dump_b64::";

		[Token(Token = "0x60013E5")]
		[Address(RVA = "0xF05578", Offset = "0xF05578", VA = "0xF05578")]
		public static void MoonSharpInit(Table globalTable, Table stringTable)
		{
		}

		[Token(Token = "0x60013E6")]
		[Address(RVA = "0xF05660", Offset = "0xF05660", VA = "0xF05660")]
		[MoonSharpModuleMethod]
		public static DynValue dump(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x60013E7")]
		[Address(RVA = "0xF05A0C", Offset = "0xF05A0C", VA = "0xF05A0C")]
		[MoonSharpModuleMethod]
		public static DynValue @char(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x60013E8")]
		[Address(RVA = "0xF05BD4", Offset = "0xF05BD4", VA = "0xF05BD4")]
		[MoonSharpModuleMethod]
		public static DynValue @byte(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x60013E9")]
		[Address(RVA = "0xF05EF0", Offset = "0xF05EF0", VA = "0xF05EF0")]
		[MoonSharpModuleMethod]
		public static DynValue unicode(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x60013EA")]
		[Address(RVA = "0xF06068", Offset = "0xF06068", VA = "0xF06068")]
		private static int Unicode2Ascii(int i)
		{
			return default(int);
		}

		[Token(Token = "0x60013EB")]
		[Address(RVA = "0xF05D4C", Offset = "0xF05D4C", VA = "0xF05D4C")]
		private static DynValue PerformByteLike(DynValue vs, DynValue vi, DynValue vj, Func<int, int> filter)
		{
			return null;
		}

		[Token(Token = "0x60013EC")]
		[Address(RVA = "0xF0624C", Offset = "0xF0624C", VA = "0xF0624C")]
		private static int? AdjustIndex(string s, DynValue vi, int defval)
		{
			return null;
		}

		[Token(Token = "0x60013ED")]
		[Address(RVA = "0xF0639C", Offset = "0xF0639C", VA = "0xF0639C")]
		[MoonSharpModuleMethod]
		public static DynValue len(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x60013EE")]
		[Address(RVA = "0xF06444", Offset = "0xF06444", VA = "0xF06444")]
		[MoonSharpModuleMethod]
		public static DynValue match(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x60013EF")]
		[Address(RVA = "0xF064F4", Offset = "0xF064F4", VA = "0xF064F4")]
		[MoonSharpModuleMethod]
		public static DynValue gmatch(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x60013F0")]
		[Address(RVA = "0xF065A4", Offset = "0xF065A4", VA = "0xF065A4")]
		[MoonSharpModuleMethod]
		public static DynValue gsub(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x60013F1")]
		[Address(RVA = "0xF06654", Offset = "0xF06654", VA = "0xF06654")]
		[MoonSharpModuleMethod]
		public static DynValue find(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x60013F2")]
		[Address(RVA = "0xF06704", Offset = "0xF06704", VA = "0xF06704")]
		[MoonSharpModuleMethod]
		public static DynValue lower(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x60013F3")]
		[Address(RVA = "0xF067B4", Offset = "0xF067B4", VA = "0xF067B4")]
		[MoonSharpModuleMethod]
		public static DynValue upper(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x60013F4")]
		[Address(RVA = "0xF06864", Offset = "0xF06864", VA = "0xF06864")]
		[MoonSharpModuleMethod]
		public static DynValue rep(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x60013F5")]
		[Address(RVA = "0xF06A90", Offset = "0xF06A90", VA = "0xF06A90")]
		[MoonSharpModuleMethod]
		public static DynValue format(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x60013F6")]
		[Address(RVA = "0xF06B40", Offset = "0xF06B40", VA = "0xF06B40")]
		[MoonSharpModuleMethod]
		public static DynValue reverse(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x60013F7")]
		[Address(RVA = "0xF06C68", Offset = "0xF06C68", VA = "0xF06C68")]
		[MoonSharpModuleMethod]
		public static DynValue sub(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x60013F8")]
		[Address(RVA = "0xF06DAC", Offset = "0xF06DAC", VA = "0xF06DAC")]
		[MoonSharpModuleMethod]
		public static DynValue startsWith(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x60013F9")]
		[Address(RVA = "0xF06F18", Offset = "0xF06F18", VA = "0xF06F18")]
		[MoonSharpModuleMethod]
		public static DynValue endsWith(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x60013FA")]
		[Address(RVA = "0xF07084", Offset = "0xF07084", VA = "0xF07084")]
		[MoonSharpModuleMethod]
		public static DynValue contains(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x60013FB")]
		[Address(RVA = "0xF071F0", Offset = "0xF071F0", VA = "0xF071F0")]
		public StringModule()
		{
		}
	}
	[Token(Token = "0x20002A1")]
	[MoonSharpModule]
	public class TableIteratorsModule
	{
		[Token(Token = "0x6001400")]
		[Address(RVA = "0xF07288", Offset = "0xF07288", VA = "0xF07288")]
		[MoonSharpModuleMethod]
		public static DynValue ipairs(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x6001401")]
		[Address(RVA = "0xF0749C", Offset = "0xF0749C", VA = "0xF0749C")]
		[MoonSharpModuleMethod]
		public static DynValue pairs(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x6001402")]
		[Address(RVA = "0xF0766C", Offset = "0xF0766C", VA = "0xF0766C")]
		[MoonSharpModuleMethod]
		public static DynValue next(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x6001403")]
		[Address(RVA = "0xF0788C", Offset = "0xF0788C", VA = "0xF0788C")]
		public static DynValue __next_i(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x6001404")]
		[Address(RVA = "0xF07A90", Offset = "0xF07A90", VA = "0xF07A90")]
		public TableIteratorsModule()
		{
		}
	}
	[Token(Token = "0x20002A2")]
	[MoonSharpModule(Namespace = "table")]
	public class TableModule
	{
		[Token(Token = "0x6001405")]
		[Address(RVA = "0xF07A98", Offset = "0xF07A98", VA = "0xF07A98")]
		[MoonSharpModuleMethod]
		public static DynValue unpack(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x6001406")]
		[Address(RVA = "0xF07E98", Offset = "0xF07E98", VA = "0xF07E98")]
		[MoonSharpModuleMethod]
		public static DynValue pack(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x6001407")]
		[Address(RVA = "0xF07FE8", Offset = "0xF07FE8", VA = "0xF07FE8")]
		[MoonSharpModuleMethod]
		public static DynValue sort(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x6001408")]
		[Address(RVA = "0xF083D8", Offset = "0xF083D8", VA = "0xF083D8")]
		private static int SortComparer(ScriptExecutionContext executionContext, DynValue a, DynValue b, DynValue lt)
		{
			return default(int);
		}

		[Token(Token = "0x6001409")]
		[Address(RVA = "0xF086BC", Offset = "0xF086BC", VA = "0xF086BC")]
		private static int LuaComparerToClrComparer(DynValue dynValue1, DynValue dynValue2)
		{
			return default(int);
		}

		[Token(Token = "0x600140A")]
		[Address(RVA = "0xF08774", Offset = "0xF08774", VA = "0xF08774")]
		[MoonSharpModuleMethod]
		public static DynValue insert(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x600140B")]
		[Address(RVA = "0xF089C4", Offset = "0xF089C4", VA = "0xF089C4")]
		[MoonSharpModuleMethod]
		public static DynValue remove(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x600140C")]
		[Address(RVA = "0xF08C24", Offset = "0xF08C24", VA = "0xF08C24")]
		[MoonSharpModuleMethod]
		public static DynValue concat(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x600140D")]
		[Address(RVA = "0xF07CC0", Offset = "0xF07CC0", VA = "0xF07CC0")]
		private static int GetTableLength(ScriptExecutionContext executionContext, DynValue vlist)
		{
			return default(int);
		}

		[Token(Token = "0x600140E")]
		[Address(RVA = "0xF08FE4", Offset = "0xF08FE4", VA = "0xF08FE4")]
		public TableModule()
		{
		}
	}
	[Token(Token = "0x20002A4")]
	[MoonSharpModule]
	public class TableModule_Globals
	{
		[Token(Token = "0x6001411")]
		[Address(RVA = "0xF08FF8", Offset = "0xF08FF8", VA = "0xF08FF8")]
		[MoonSharpModuleMethod]
		public static DynValue unpack(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x6001412")]
		[Address(RVA = "0xF08FFC", Offset = "0xF08FFC", VA = "0xF08FFC")]
		[MoonSharpModuleMethod]
		public static DynValue pack(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x6001413")]
		[Address(RVA = "0xF09000", Offset = "0xF09000", VA = "0xF09000")]
		public TableModule_Globals()
		{
		}
	}
	[Token(Token = "0x20002A5")]
	internal static class NamespaceDoc
	{
	}
}
namespace MoonSharp.Interpreter.CoreLib.StringLib
{
	[Token(Token = "0x20002A6")]
	internal class KopiLua_StringLib : LuaBase
	{
		[Token(Token = "0x20002A7")]
		public class MatchState
		{
			[Token(Token = "0x20002A8")]
			public class capture_
			{
				[Token(Token = "0x4000D6D")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				public CharPtr init;

				[Token(Token = "0x4000D6E")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				public int len;

				[Token(Token = "0x6001437")]
				[Address(RVA = "0xF0D2E4", Offset = "0xF0D2E4", VA = "0xF0D2E4")]
				public capture_()
				{
				}
			}

			[Token(Token = "0x4000D67")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int matchdepth;

			[Token(Token = "0x4000D68")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public CharPtr src_init;

			[Token(Token = "0x4000D69")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public CharPtr src_end;

			[Token(Token = "0x4000D6A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public LuaState L;

			[Token(Token = "0x4000D6B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public int level;

			[Token(Token = "0x4000D6C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public capture_[] capture;

			[Token(Token = "0x6001436")]
			[Address(RVA = "0xF0B370", Offset = "0xF0B370", VA = "0xF0B370")]
			public MatchState()
			{
			}
		}

		[Token(Token = "0x20002A9")]
		private class GMatchAuxData
		{
			[Token(Token = "0x4000D6F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public CharPtr S;

			[Token(Token = "0x4000D70")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public CharPtr P;

			[Token(Token = "0x4000D71")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public uint LS;

			[Token(Token = "0x4000D72")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public uint POS;

			[Token(Token = "0x6001438")]
			[Address(RVA = "0xF0BA48", Offset = "0xF0BA48", VA = "0xF0BA48")]
			public GMatchAuxData()
			{
			}
		}

		[Token(Token = "0x4000D5E")]
		public const int LUA_MAXCAPTURES = 32;

		[Token(Token = "0x4000D5F")]
		public const int CAP_UNFINISHED = -1;

		[Token(Token = "0x4000D60")]
		public const int CAP_POSITION = -2;

		[Token(Token = "0x4000D61")]
		public const int MAXCCALLS = 200;

		[Token(Token = "0x4000D62")]
		public const char L_ESC = '%';

		[Token(Token = "0x4000D63")]
		public const string SPECIALS = "^$*+?.([%-";

		[Token(Token = "0x4000D64")]
		public const int MAX_ITEM = 512;

		[Token(Token = "0x4000D65")]
		public const string FLAGS = "-+ #0";

		[Token(Token = "0x4000D66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly int MAX_FORMAT;

		[Token(Token = "0x6001414")]
		[Address(RVA = "0xF09008", Offset = "0xF09008", VA = "0xF09008")]
		private static int posrelat(int pos, uint len)
		{
			return default(int);
		}

		[Token(Token = "0x6001415")]
		[Address(RVA = "0xF0901C", Offset = "0xF0901C", VA = "0xF0901C")]
		private static int check_capture(MatchState ms, int l)
		{
			return default(int);
		}

		[Token(Token = "0x6001416")]
		[Address(RVA = "0xF09164", Offset = "0xF09164", VA = "0xF09164")]
		private static int capture_to_close(MatchState ms)
		{
			return default(int);
		}

		[Token(Token = "0x6001417")]
		[Address(RVA = "0xF09258", Offset = "0xF09258", VA = "0xF09258")]
		private static CharPtr classend(MatchState ms, CharPtr p)
		{
			return null;
		}

		[Token(Token = "0x6001418")]
		[Address(RVA = "0xF095A8", Offset = "0xF095A8", VA = "0xF095A8")]
		private static int match_class(char c, char cl)
		{
			return default(int);
		}

		[Token(Token = "0x6001419")]
		[Address(RVA = "0xF096C8", Offset = "0xF096C8", VA = "0xF096C8")]
		private static int matchbracketclass(int c, CharPtr p, CharPtr ec)
		{
			return default(int);
		}

		[Token(Token = "0x600141A")]
		[Address(RVA = "0xF098AC", Offset = "0xF098AC", VA = "0xF098AC")]
		private static int singlematch(int c, CharPtr p, CharPtr ep)
		{
			return default(int);
		}

		[Token(Token = "0x600141B")]
		[Address(RVA = "0xF099D4", Offset = "0xF099D4", VA = "0xF099D4")]
		private static CharPtr matchbalance(MatchState ms, CharPtr s, CharPtr p)
		{
			return null;
		}

		[Token(Token = "0x600141C")]
		[Address(RVA = "0xF09BC8", Offset = "0xF09BC8", VA = "0xF09BC8")]
		private static CharPtr max_expand(MatchState ms, CharPtr s, CharPtr p, CharPtr ep)
		{
			return null;
		}

		[Token(Token = "0x600141D")]
		[Address(RVA = "0xF0A66C", Offset = "0xF0A66C", VA = "0xF0A66C")]
		private static CharPtr min_expand(MatchState ms, CharPtr s, CharPtr p, CharPtr ep)
		{
			return null;
		}

		[Token(Token = "0x600141E")]
		[Address(RVA = "0xF0A78C", Offset = "0xF0A78C", VA = "0xF0A78C")]
		private static CharPtr start_capture(MatchState ms, CharPtr s, CharPtr p, int what)
		{
			return null;
		}

		[Token(Token = "0x600141F")]
		[Address(RVA = "0xF0A918", Offset = "0xF0A918", VA = "0xF0A918")]
		private static CharPtr end_capture(MatchState ms, CharPtr s, CharPtr p)
		{
			return null;
		}

		[Token(Token = "0x6001420")]
		[Address(RVA = "0xF0AA20", Offset = "0xF0AA20", VA = "0xF0AA20")]
		private static CharPtr match_capture(MatchState ms, CharPtr s, int l)
		{
			return null;
		}

		[Token(Token = "0x6001421")]
		[Address(RVA = "0xF09D2C", Offset = "0xF09D2C", VA = "0xF09D2C")]
		private static CharPtr match(MatchState ms, CharPtr s, CharPtr p)
		{
			return null;
		}

		[Token(Token = "0x6001422")]
		[Address(RVA = "0xF0AB34", Offset = "0xF0AB34", VA = "0xF0AB34")]
		private static CharPtr lmemfind(CharPtr s1, uint l1, CharPtr s2, uint l2)
		{
			return null;
		}

		[Token(Token = "0x6001423")]
		[Address(RVA = "0xF0AC2C", Offset = "0xF0AC2C", VA = "0xF0AC2C")]
		private static void push_onecapture(MatchState ms, int i, CharPtr s, CharPtr e)
		{
		}

		[Token(Token = "0x6001424")]
		[Address(RVA = "0xF0AE40", Offset = "0xF0AE40", VA = "0xF0AE40")]
		private static int push_captures(MatchState ms, CharPtr s, CharPtr e)
		{
			return default(int);
		}

		[Token(Token = "0x6001425")]
		[Address(RVA = "0xF0AF30", Offset = "0xF0AF30", VA = "0xF0AF30")]
		private static int str_find_aux(LuaState L, int find)
		{
			return default(int);
		}

		[Token(Token = "0x6001426")]
		[Address(RVA = "0xF0B47C", Offset = "0xF0B47C", VA = "0xF0B47C")]
		public static int str_find(LuaState L)
		{
			return default(int);
		}

		[Token(Token = "0x6001427")]
		[Address(RVA = "0xF0B4D4", Offset = "0xF0B4D4", VA = "0xF0B4D4")]
		public static int str_match(LuaState L)
		{
			return default(int);
		}

		[Token(Token = "0x6001428")]
		[Address(RVA = "0xF0B52C", Offset = "0xF0B52C", VA = "0xF0B52C")]
		private static int gmatch_aux(LuaState L, GMatchAuxData auxdata)
		{
			return default(int);
		}

		[Token(Token = "0x6001429")]
		[Address(RVA = "0xF0B6F8", Offset = "0xF0B6F8", VA = "0xF0B6F8")]
		private static DynValue gmatch_aux_2(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x600142A")]
		[Address(RVA = "0xF0B7F4", Offset = "0xF0B7F4", VA = "0xF0B7F4")]
		public static int str_gmatch(LuaState L)
		{
			return default(int);
		}

		[Token(Token = "0x600142B")]
		[Address(RVA = "0xF0BA50", Offset = "0xF0BA50", VA = "0xF0BA50")]
		private static int gfind_nodef(LuaState L)
		{
			return default(int);
		}

		[Token(Token = "0x600142C")]
		[Address(RVA = "0xF0BB6C", Offset = "0xF0BB6C", VA = "0xF0BB6C")]
		private static void add_s(MatchState ms, LuaLBuffer b, CharPtr s, CharPtr e)
		{
		}

		[Token(Token = "0x600142D")]
		[Address(RVA = "0xF0BDA8", Offset = "0xF0BDA8", VA = "0xF0BDA8")]
		private static void add_value(MatchState ms, LuaLBuffer b, CharPtr s, CharPtr e)
		{
		}

		[Token(Token = "0x600142E")]
		[Address(RVA = "0xF0BFF8", Offset = "0xF0BFF8", VA = "0xF0BFF8")]
		public static int str_gsub(LuaState L)
		{
			return default(int);
		}

		[Token(Token = "0x600142F")]
		[Address(RVA = "0xF0C374", Offset = "0xF0C374", VA = "0xF0C374")]
		private static void addquoted(LuaState L, LuaLBuffer b, int arg)
		{
		}

		[Token(Token = "0x6001430")]
		[Address(RVA = "0xF0C620", Offset = "0xF0C620", VA = "0xF0C620")]
		private static CharPtr scanformat(LuaState L, CharPtr strfrmt, CharPtr form)
		{
			return null;
		}

		[Token(Token = "0x6001431")]
		[Address(RVA = "0xF0C9A0", Offset = "0xF0C9A0", VA = "0xF0C9A0")]
		private static void addintlen(CharPtr form)
		{
		}

		[Token(Token = "0x6001432")]
		[Address(RVA = "0xF0CAA4", Offset = "0xF0CAA4", VA = "0xF0CAA4")]
		public static int str_format(LuaState L)
		{
			return default(int);
		}

		[Token(Token = "0x6001433")]
		[Address(RVA = "0xF0B304", Offset = "0xF0B304", VA = "0xF0B304")]
		private static string PatchPattern(string charPtr)
		{
			return null;
		}

		[Token(Token = "0x6001434")]
		[Address(RVA = "0xF0D248", Offset = "0xF0D248", VA = "0xF0D248")]
		public KopiLua_StringLib()
		{
		}
	}
	[Token(Token = "0x20002AB")]
	internal class StringRange
	{
		[Token(Token = "0x1700025B")]
		public int Start
		{
			[Token(Token = "0x600143B")]
			[Address(RVA = "0xF0D3B8", Offset = "0xF0D3B8", VA = "0xF0D3B8")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600143C")]
			[Address(RVA = "0xF0D3C0", Offset = "0xF0D3C0", VA = "0xF0D3C0")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700025C")]
		public int End
		{
			[Token(Token = "0x600143D")]
			[Address(RVA = "0xF0D3C8", Offset = "0xF0D3C8", VA = "0xF0D3C8")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600143E")]
			[Address(RVA = "0xF0D3D0", Offset = "0xF0D3D0", VA = "0xF0D3D0")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x600143F")]
		[Address(RVA = "0xF0D3D8", Offset = "0xF0D3D8", VA = "0xF0D3D8")]
		public StringRange()
		{
		}

		[Token(Token = "0x6001440")]
		[Address(RVA = "0xF0D3F4", Offset = "0xF0D3F4", VA = "0xF0D3F4")]
		public StringRange(int start, int end)
		{
		}

		[Token(Token = "0x6001441")]
		[Address(RVA = "0xF06078", Offset = "0xF06078", VA = "0xF06078")]
		public static StringRange FromLuaRange(DynValue start, DynValue end, [Optional] int? defaultEnd)
		{
			return null;
		}

		[Token(Token = "0x6001442")]
		[Address(RVA = "0xF06180", Offset = "0xF06180", VA = "0xF06180")]
		public string ApplyToString(string value)
		{
			return null;
		}

		[Token(Token = "0x6001443")]
		[Address(RVA = "0xF0D420", Offset = "0xF0D420", VA = "0xF0D420")]
		public int Length()
		{
			return default(int);
		}
	}
}
namespace MoonSharp.Interpreter.CoreLib.IO
{
	[Token(Token = "0x20002AC")]
	internal class BinaryEncoding : Encoding
	{
		[Token(Token = "0x6001444")]
		[Address(RVA = "0xF0E430", Offset = "0xF0E430", VA = "0xF0E430")]
		public BinaryEncoding()
		{
		}

		[Token(Token = "0x6001445")]
		[Address(RVA = "0xF0E438", Offset = "0xF0E438", VA = "0xF0E438", Slot = "13")]
		public override int GetByteCount(char[] chars, int index, int count)
		{
			return default(int);
		}

		[Token(Token = "0x6001446")]
		[Address(RVA = "0xF0E440", Offset = "0xF0E440", VA = "0xF0E440", Slot = "18")]
		public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex)
		{
			return default(int);
		}

		[Token(Token = "0x6001447")]
		[Address(RVA = "0xF0E4B4", Offset = "0xF0E4B4", VA = "0xF0E4B4", Slot = "23")]
		public override int GetCharCount(byte[] bytes, int index, int count)
		{
			return default(int);
		}

		[Token(Token = "0x6001448")]
		[Address(RVA = "0xF0E4BC", Offset = "0xF0E4BC", VA = "0xF0E4BC", Slot = "27")]
		public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex)
		{
			return default(int);
		}

		[Token(Token = "0x6001449")]
		[Address(RVA = "0xF0E530", Offset = "0xF0E530", VA = "0xF0E530", Slot = "34")]
		public override int GetMaxByteCount(int charCount)
		{
			return default(int);
		}

		[Token(Token = "0x600144A")]
		[Address(RVA = "0xF0E538", Offset = "0xF0E538", VA = "0xF0E538", Slot = "35")]
		public override int GetMaxCharCount(int byteCount)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20002AD")]
	internal class FileUserData : StreamFileUserDataBase
	{
		[Token(Token = "0x600144B")]
		[Address(RVA = "0xF0E540", Offset = "0xF0E540", VA = "0xF0E540")]
		public FileUserData(Script script, string filename, Encoding encoding, string mode)
		{
		}
	}
	[Token(Token = "0x20002AE")]
	internal abstract class FileUserDataBase : RefIdObject
	{
		[Token(Token = "0x600144C")]
		[Address(RVA = "0xF0E788", Offset = "0xF0E788", VA = "0xF0E788")]
		public DynValue lines(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x600144D")]
		[Address(RVA = "0xF0E9DC", Offset = "0xF0E9DC", VA = "0xF0E9DC")]
		public DynValue read(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x600144E")]
		[Address(RVA = "0xF0F1FC", Offset = "0xF0F1FC", VA = "0xF0F1FC")]
		public DynValue write(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x600144F")]
		[Address(RVA = "0xF0F4B8", Offset = "0xF0F4B8", VA = "0xF0F4B8")]
		public DynValue close(ScriptExecutionContext executionContext, CallbackArguments args)
		{
			return null;
		}

		[Token(Token = "0x6001450")]
		[Address(RVA = "0xF0F07C", Offset = "0xF0F07C", VA = "0xF0F07C")]
		private double? ReadNumber()
		{
			return null;
		}

		[Token(Token = "0x6001451")]
		[Address(RVA = "0xF0F85C", Offset = "0xF0F85C", VA = "0xF0F85C")]
		private bool IsNumericChar(char c, string numAsFar)
		{
			return default(bool);
		}

		[Token(Token = "0x6001452")]
		protected abstract bool Eof();

		[Token(Token = "0x6001453")]
		protected abstract string ReadLine();

		[Token(Token = "0x6001454")]
		protected abstract string ReadBuffer(int p);

		[Token(Token = "0x6001455")]
		protected abstract string ReadToEnd();

		[Token(Token = "0x6001456")]
		protected abstract char Peek();

		[Token(Token = "0x6001457")]
		protected abstract void Write(string value);

		[Token(Token = "0x6001458")]
		protected internal abstract bool isopen();

		[Token(Token = "0x6001459")]
		protected abstract string Close();

		[Token(Token = "0x600145A")]
		public abstract bool flush();

		[Token(Token = "0x600145B")]
		public abstract long seek(string whence, long offset);

		[Token(Token = "0x600145C")]
		public abstract bool setvbuf(string mode);

		[Token(Token = "0x600145D")]
		[Address(RVA = "0xF0FA60", Offset = "0xF0FA60", VA = "0xF0FA60", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x600145E")]
		[Address(RVA = "0xF0FB0C", Offset = "0xF0FB0C", VA = "0xF0FB0C")]
		protected FileUserDataBase()
		{
		}
	}
	[Token(Token = "0x20002B0")]
	internal class StandardIOFileUserDataBase : StreamFileUserDataBase
	{
		[Token(Token = "0x6001462")]
		[Address(RVA = "0xF0FB94", Offset = "0xF0FB94", VA = "0xF0FB94", Slot = "11")]
		protected override string Close()
		{
			return null;
		}

		[Token(Token = "0x6001463")]
		[Address(RVA = "0xF0FBD4", Offset = "0xF0FBD4", VA = "0xF0FBD4")]
		public static StandardIOFileUserDataBase CreateInputStream(Stream stream)
		{
			return null;
		}

		[Token(Token = "0x6001464")]
		[Address(RVA = "0xF0FC80", Offset = "0xF0FC80", VA = "0xF0FC80")]
		public static StandardIOFileUserDataBase CreateOutputStream(Stream stream)
		{
			return null;
		}

		[Token(Token = "0x6001465")]
		[Address(RVA = "0xF0FC78", Offset = "0xF0FC78", VA = "0xF0FC78")]
		public StandardIOFileUserDataBase()
		{
		}
	}
	[Token(Token = "0x20002B1")]
	internal abstract class StreamFileUserDataBase : FileUserDataBase
	{
		[Token(Token = "0x4000D78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected Stream m_Stream;

		[Token(Token = "0x4000D79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected StreamReader m_Reader;

		[Token(Token = "0x4000D7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected StreamWriter m_Writer;

		[Token(Token = "0x4000D7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected bool m_Closed;

		[Token(Token = "0x6001466")]
		[Address(RVA = "0xF0E744", Offset = "0xF0E744", VA = "0xF0E744")]
		protected void Initialize(Stream stream, StreamReader reader, StreamWriter writer)
		{
		}

		[Token(Token = "0x6001467")]
		[Address(RVA = "0xF0FD24", Offset = "0xF0FD24", VA = "0xF0FD24")]
		private void CheckFileIsNotClosed()
		{
		}

		[Token(Token = "0x6001468")]
		[Address(RVA = "0xF0FD84", Offset = "0xF0FD84", VA = "0xF0FD84", Slot = "4")]
		protected override bool Eof()
		{
			return default(bool);
		}

		[Token(Token = "0x6001469")]
		[Address(RVA = "0xF0FDAC", Offset = "0xF0FDAC", VA = "0xF0FDAC", Slot = "5")]
		protected override string ReadLine()
		{
			return null;
		}

		[Token(Token = "0x600146A")]
		[Address(RVA = "0xF0FDD8", Offset = "0xF0FDD8", VA = "0xF0FDD8", Slot = "7")]
		protected override string ReadToEnd()
		{
			return null;
		}

		[Token(Token = "0x600146B")]
		[Address(RVA = "0xF0FE00", Offset = "0xF0FE00", VA = "0xF0FE00", Slot = "6")]
		protected override string ReadBuffer(int p)
		{
			return null;
		}

		[Token(Token = "0x600146C")]
		[Address(RVA = "0xF0FEA4", Offset = "0xF0FEA4", VA = "0xF0FEA4", Slot = "8")]
		protected override char Peek()
		{
			return default(char);
		}

		[Token(Token = "0x600146D")]
		[Address(RVA = "0xF0FED0", Offset = "0xF0FED0", VA = "0xF0FED0", Slot = "9")]
		protected override void Write(string value)
		{
		}

		[Token(Token = "0x600146E")]
		[Address(RVA = "0xF0FF0C", Offset = "0xF0FF0C", VA = "0xF0FF0C", Slot = "11")]
		protected override string Close()
		{
			return null;
		}

		[Token(Token = "0x600146F")]
		[Address(RVA = "0xF0FF60", Offset = "0xF0FF60", VA = "0xF0FF60", Slot = "12")]
		public override bool flush()
		{
			return default(bool);
		}

		[Token(Token = "0x6001470")]
		[Address(RVA = "0xF0FF8C", Offset = "0xF0FF8C", VA = "0xF0FF8C", Slot = "13")]
		public override long seek(string whence, long offset)
		{
			return default(long);
		}

		[Token(Token = "0x6001471")]
		[Address(RVA = "0xF10124", Offset = "0xF10124", VA = "0xF10124", Slot = "14")]
		public override bool setvbuf(string mode)
		{
			return default(bool);
		}

		[Token(Token = "0x6001472")]
		[Address(RVA = "0xF101D4", Offset = "0xF101D4", VA = "0xF101D4", Slot = "10")]
		protected internal override bool isopen()
		{
			return default(bool);
		}

		[Token(Token = "0x6001473")]
		[Address(RVA = "0xF0E73C", Offset = "0xF0E73C", VA = "0xF0E73C")]
		protected StreamFileUserDataBase()
		{
		}
	}
	[Token(Token = "0x20002B2")]
	internal static class NamespaceDoc
	{
	}
}
namespace MoonSharp.Interpreter.Compatibility
{
	[Token(Token = "0x20002B3")]
	public static class Framework
	{
		[Token(Token = "0x4000D7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static FrameworkCurrent s_FrameworkCurrent;

		[Token(Token = "0x1700025D")]
		public static FrameworkBase Do
		{
			[Token(Token = "0x6001474")]
			[Address(RVA = "0xF101E4", Offset = "0xF101E4", VA = "0xF101E4")]
			get
			{
				return null;
			}
		}
	}
}
namespace MoonSharp.Interpreter.Compatibility.Frameworks
{
	[Token(Token = "0x20002B4")]
	public abstract class FrameworkBase
	{
		[Token(Token = "0x6001476")]
		public abstract bool StringContainsChar(string str, char chr);

		[Token(Token = "0x6001477")]
		public abstract bool IsValueType(Type t);

		[Token(Token = "0x6001478")]
		public abstract Assembly GetAssembly(Type t);

		[Token(Token = "0x6001479")]
		public abstract Type GetBaseType(Type t);

		[Token(Token = "0x600147A")]
		public abstract bool IsGenericType(Type t);

		[Token(Token = "0x600147B")]
		public abstract bool IsGenericTypeDefinition(Type t);

		[Token(Token = "0x600147C")]
		public abstract bool IsEnum(Type t);

		[Token(Token = "0x600147D")]
		public abstract bool IsNestedPublic(Type t);

		[Token(Token = "0x600147E")]
		public abstract bool IsAbstract(Type t);

		[Token(Token = "0x600147F")]
		public abstract bool IsInterface(Type t);

		[Token(Token = "0x6001480")]
		public abstract Attribute[] GetCustomAttributes(Type t, bool inherit);

		[Token(Token = "0x6001481")]
		public abstract Attribute[] GetCustomAttributes(Type t, Type at, bool inherit);

		[Token(Token = "0x6001482")]
		public abstract Type[] GetInterfaces(Type t);

		[Token(Token = "0x6001483")]
		public abstract bool IsInstanceOfType(Type t, object o);

		[Token(Token = "0x6001484")]
		public abstract MethodInfo GetAddMethod(EventInfo ei);

		[Token(Token = "0x6001485")]
		public abstract MethodInfo GetRemoveMethod(EventInfo ei);

		[Token(Token = "0x6001486")]
		public abstract MethodInfo GetGetMethod(PropertyInfo pi);

		[Token(Token = "0x6001487")]
		public abstract MethodInfo GetSetMethod(PropertyInfo pi);

		[Token(Token = "0x6001488")]
		public abstract Type GetInterface(Type type, string name);

		[Token(Token = "0x6001489")]
		public abstract PropertyInfo[] GetProperties(Type type);

		[Token(Token = "0x600148A")]
		public abstract PropertyInfo GetProperty(Type type, string name);

		[Token(Token = "0x600148B")]
		public abstract Type[] GetNestedTypes(Type type);

		[Token(Token = "0x600148C")]
		public abstract EventInfo[] GetEvents(Type type);

		[Token(Token = "0x600148D")]
		public abstract ConstructorInfo[] GetConstructors(Type type);

		[Token(Token = "0x600148E")]
		public abstract Type[] GetAssemblyTypes(Assembly asm);

		[Token(Token = "0x600148F")]
		public abstract MethodInfo[] GetMethods(Type type);

		[Token(Token = "0x6001490")]
		public abstract FieldInfo[] GetFields(Type t);

		[Token(Token = "0x6001491")]
		public abstract MethodInfo GetMethod(Type type, string name);

		[Token(Token = "0x6001492")]
		public abstract Type[] GetGenericArguments(Type t);

		[Token(Token = "0x6001493")]
		public abstract bool IsAssignableFrom(Type current, Type toCompare);

		[Token(Token = "0x6001494")]
		public abstract bool IsDbNull(object o);

		[Token(Token = "0x6001495")]
		public abstract MethodInfo GetMethod(Type resourcesType, string v, Type[] type);

		[Token(Token = "0x6001496")]
		[Address(RVA = "0xF102E0", Offset = "0xF102E0", VA = "0xF102E0")]
		protected FrameworkBase()
		{
		}
	}
	[Token(Token = "0x20002B5")]
	internal abstract class FrameworkClrBase : FrameworkReflectionBase
	{
		[Token(Token = "0x4000D7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private BindingFlags BINDINGFLAGS_MEMBER;

		[Token(Token = "0x4000D7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private BindingFlags BINDINGFLAGS_INNERCLASS;

		[Token(Token = "0x6001497")]
		[Address(RVA = "0xF102E8", Offset = "0xF102E8", VA = "0xF102E8", Slot = "36")]
		public override Type GetTypeInfoFromType(Type t)
		{
			return null;
		}

		[Token(Token = "0x6001498")]
		[Address(RVA = "0xF102F0", Offset = "0xF102F0", VA = "0xF102F0", Slot = "18")]
		public override MethodInfo GetAddMethod(EventInfo ei)
		{
			return null;
		}

		[Token(Token = "0x6001499")]
		[Address(RVA = "0xF10318", Offset = "0xF10318", VA = "0xF10318", Slot = "27")]
		public override ConstructorInfo[] GetConstructors(Type type)
		{
			return null;
		}

		[Token(Token = "0x600149A")]
		[Address(RVA = "0xF10344", Offset = "0xF10344", VA = "0xF10344", Slot = "26")]
		public override EventInfo[] GetEvents(Type type)
		{
			return null;
		}

		[Token(Token = "0x600149B")]
		[Address(RVA = "0xF10370", Offset = "0xF10370", VA = "0xF10370", Slot = "30")]
		public override FieldInfo[] GetFields(Type type)
		{
			return null;
		}

		[Token(Token = "0x600149C")]
		[Address(RVA = "0xF1039C", Offset = "0xF1039C", VA = "0xF1039C", Slot = "32")]
		public override Type[] GetGenericArguments(Type type)
		{
			return null;
		}

		[Token(Token = "0x600149D")]
		[Address(RVA = "0xF103C0", Offset = "0xF103C0", VA = "0xF103C0", Slot = "20")]
		public override MethodInfo GetGetMethod(PropertyInfo pi)
		{
			return null;
		}

		[Token(Token = "0x600149E")]
		[Address(RVA = "0xF103E8", Offset = "0xF103E8", VA = "0xF103E8", Slot = "16")]
		public override Type[] GetInterfaces(Type t)
		{
			return null;
		}

		[Token(Token = "0x600149F")]
		[Address(RVA = "0xF1040C", Offset = "0xF1040C", VA = "0xF1040C", Slot = "31")]
		public override MethodInfo GetMethod(Type type, string name)
		{
			return null;
		}

		[Token(Token = "0x60014A0")]
		[Address(RVA = "0xF10428", Offset = "0xF10428", VA = "0xF10428", Slot = "29")]
		public override MethodInfo[] GetMethods(Type type)
		{
			return null;
		}

		[Token(Token = "0x60014A1")]
		[Address(RVA = "0xF10454", Offset = "0xF10454", VA = "0xF10454", Slot = "25")]
		public override Type[] GetNestedTypes(Type type)
		{
			return null;
		}

		[Token(Token = "0x60014A2")]
		[Address(RVA = "0xF10480", Offset = "0xF10480", VA = "0xF10480", Slot = "23")]
		public override PropertyInfo[] GetProperties(Type type)
		{
			return null;
		}

		[Token(Token = "0x60014A3")]
		[Address(RVA = "0xF104AC", Offset = "0xF104AC", VA = "0xF104AC", Slot = "24")]
		public override PropertyInfo GetProperty(Type type, string name)
		{
			return null;
		}

		[Token(Token = "0x60014A4")]
		[Address(RVA = "0xF104C8", Offset = "0xF104C8", VA = "0xF104C8", Slot = "19")]
		public override MethodInfo GetRemoveMethod(EventInfo ei)
		{
			return null;
		}

		[Token(Token = "0x60014A5")]
		[Address(RVA = "0xF104F0", Offset = "0xF104F0", VA = "0xF104F0", Slot = "21")]
		public override MethodInfo GetSetMethod(PropertyInfo pi)
		{
			return null;
		}

		[Token(Token = "0x60014A6")]
		[Address(RVA = "0xF10518", Offset = "0xF10518", VA = "0xF10518", Slot = "33")]
		public override bool IsAssignableFrom(Type current, Type toCompare)
		{
			return default(bool);
		}

		[Token(Token = "0x60014A7")]
		[Address(RVA = "0xF10544", Offset = "0xF10544", VA = "0xF10544", Slot = "17")]
		public override bool IsInstanceOfType(Type t, object o)
		{
			return default(bool);
		}

		[Token(Token = "0x60014A8")]
		[Address(RVA = "0xF10570", Offset = "0xF10570", VA = "0xF10570", Slot = "35")]
		public override MethodInfo GetMethod(Type resourcesType, string name, Type[] types)
		{
			return null;
		}

		[Token(Token = "0x60014A9")]
		[Address(RVA = "0xF10590", Offset = "0xF10590", VA = "0xF10590", Slot = "28")]
		public override Type[] GetAssemblyTypes(Assembly asm)
		{
			return null;
		}

		[Token(Token = "0x60014AA")]
		[Address(RVA = "0xF105B4", Offset = "0xF105B4", VA = "0xF105B4")]
		protected FrameworkClrBase()
		{
		}
	}
	[Token(Token = "0x20002B6")]
	internal abstract class FrameworkReflectionBase : FrameworkBase
	{
		[Token(Token = "0x60014AB")]
		public abstract Type GetTypeInfoFromType(Type t);

		[Token(Token = "0x60014AC")]
		[Address(RVA = "0xF105D0", Offset = "0xF105D0", VA = "0xF105D0", Slot = "6")]
		public override Assembly GetAssembly(Type t)
		{
			return null;
		}

		[Token(Token = "0x60014AD")]
		[Address(RVA = "0xF10600", Offset = "0xF10600", VA = "0xF10600", Slot = "7")]
		public override Type GetBaseType(Type t)
		{
			return null;
		}

		[Token(Token = "0x60014AE")]
		[Address(RVA = "0xF10630", Offset = "0xF10630", VA = "0xF10630", Slot = "5")]
		public override bool IsValueType(Type t)
		{
			return default(bool);
		}

		[Token(Token = "0x60014AF")]
		[Address(RVA = "0xF10658", Offset = "0xF10658", VA = "0xF10658", Slot = "13")]
		public override bool IsInterface(Type t)
		{
			return default(bool);
		}

		[Token(Token = "0x60014B0")]
		[Address(RVA = "0xF10680", Offset = "0xF10680", VA = "0xF10680", Slot = "11")]
		public override bool IsNestedPublic(Type t)
		{
			return default(bool);
		}

		[Token(Token = "0x60014B1")]
		[Address(RVA = "0xF106A8", Offset = "0xF106A8", VA = "0xF106A8", Slot = "12")]
		public override bool IsAbstract(Type t)
		{
			return default(bool);
		}

		[Token(Token = "0x60014B2")]
		[Address(RVA = "0xF106D0", Offset = "0xF106D0", VA = "0xF106D0", Slot = "10")]
		public override bool IsEnum(Type t)
		{
			return default(bool);
		}

		[Token(Token = "0x60014B3")]
		[Address(RVA = "0xF10700", Offset = "0xF10700", VA = "0xF10700", Slot = "9")]
		public override bool IsGenericTypeDefinition(Type t)
		{
			return default(bool);
		}

		[Token(Token = "0x60014B4")]
		[Address(RVA = "0xF10730", Offset = "0xF10730", VA = "0xF10730", Slot = "8")]
		public override bool IsGenericType(Type t)
		{
			return default(bool);
		}

		[Token(Token = "0x60014B5")]
		[Address(RVA = "0xF10760", Offset = "0xF10760", VA = "0xF10760", Slot = "14")]
		public override Attribute[] GetCustomAttributes(Type t, bool inherit)
		{
			return null;
		}

		[Token(Token = "0x60014B6")]
		[Address(RVA = "0xF10800", Offset = "0xF10800", VA = "0xF10800", Slot = "15")]
		public override Attribute[] GetCustomAttributes(Type t, Type at, bool inherit)
		{
			return null;
		}

		[Token(Token = "0x60014B7")]
		[Address(RVA = "0xF105C8", Offset = "0xF105C8", VA = "0xF105C8")]
		protected FrameworkReflectionBase()
		{
		}
	}
	[Token(Token = "0x20002B7")]
	internal class FrameworkCurrent : FrameworkClrBase
	{
		[Token(Token = "0x60014B8")]
		[Address(RVA = "0xF108AC", Offset = "0xF108AC", VA = "0xF108AC", Slot = "34")]
		public override bool IsDbNull(object o)
		{
			return default(bool);
		}

		[Token(Token = "0x60014B9")]
		[Address(RVA = "0xF10918", Offset = "0xF10918", VA = "0xF10918", Slot = "4")]
		public override bool StringContainsChar(string str, char chr)
		{
			return default(bool);
		}

		[Token(Token = "0x60014BA")]
		[Address(RVA = "0xF10934", Offset = "0xF10934", VA = "0xF10934", Slot = "22")]
		public override Type GetInterface(Type type, string name)
		{
			return null;
		}

		[Token(Token = "0x60014BB")]
		[Address(RVA = "0xF102CC", Offset = "0xF102CC", VA = "0xF102CC")]
		public FrameworkCurrent()
		{
		}
	}
}
namespace MoonSharp.Interpreter.CodeAnalysis
{
	[Token(Token = "0x20002B8")]
	internal class AstNode
	{
		[Token(Token = "0x60014BC")]
		[Address(RVA = "0xF10950", Offset = "0xF10950", VA = "0xF10950")]
		public AstNode()
		{
		}
	}
}
namespace MoonSharp.VsCodeDebugger
{
	[Token(Token = "0x20002B9")]
	public class MoonSharpVsCodeDebugServer : IDisposable
	{
		[Token(Token = "0x4000D7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private object m_Lock;

		[Token(Token = "0x4000D80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private List<AsyncDebugger> m_DebuggerList;

		[Token(Token = "0x4000D81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private AsyncDebugger m_Current;

		[Token(Token = "0x4000D82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ManualResetEvent m_StopEvent;

		[Token(Token = "0x4000D83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool m_Started;

		[Token(Token = "0x4000D84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int m_Port;

		[Token(Token = "0x1700025E")]
		public int? CurrentId
		{
			[Token(Token = "0x60014C1")]
			[Address(RVA = "0xF11750", Offset = "0xF11750", VA = "0xF11750")]
			get
			{
				return null;
			}
			[Token(Token = "0x60014C2")]
			[Address(RVA = "0xF11860", Offset = "0xF11860", VA = "0xF11860")]
			set
			{
			}
		}

		[Token(Token = "0x1700025F")]
		public Script Current
		{
			[Token(Token = "0x60014C3")]
			[Address(RVA = "0xF11A90", Offset = "0xF11A90", VA = "0xF11A90")]
			get
			{
				return null;
			}
			[Token(Token = "0x60014C4")]
			[Address(RVA = "0xF11B60", Offset = "0xF11B60", VA = "0xF11B60")]
			set
			{
			}
		}

		[Token(Token = "0x17000260")]
		public Action<string> Logger
		{
			[Token(Token = "0x60014C6")]
			[Address(RVA = "0xF122A8", Offset = "0xF122A8", VA = "0xF122A8")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60014C7")]
			[Address(RVA = "0xF122B0", Offset = "0xF122B0", VA = "0xF122B0")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x60014BD")]
		[Address(RVA = "0xF10958", Offset = "0xF10958", VA = "0xF10958")]
		public MoonSharpVsCodeDebugServer(int port = 41912)
		{
		}

		[Token(Token = "0x60014BE")]
		[Address(RVA = "0xF10A70", Offset = "0xF10A70", VA = "0xF10A70")]
		[Obsolete("Use the constructor taking only a port, and the 'Attach' method instead.")]
		public MoonSharpVsCodeDebugServer(Script script, int port, [Optional] Func<SourceCode, string> sourceFinder)
		{
		}

		[Token(Token = "0x60014BF")]
		[Address(RVA = "0xF110B0", Offset = "0xF110B0", VA = "0xF110B0")]
		public void AttachToScript(Script script, string name, [Optional] Func<SourceCode, string> sourceFinder)
		{
		}

		[Token(Token = "0x60014C0")]
		[Address(RVA = "0xF11488", Offset = "0xF11488", VA = "0xF11488")]
		public IEnumerable<KeyValuePair<int, string>> GetAttachedDebuggersByIdAndName()
		{
			return null;
		}

		[Token(Token = "0x60014C5")]
		[Address(RVA = "0xF11D94", Offset = "0xF11D94", VA = "0xF11D94")]
		public void Detach(Script script)
		{
		}

		[Token(Token = "0x60014C8")]
		[Address(RVA = "0xF122B8", Offset = "0xF122B8", VA = "0xF122B8")]
		[Obsolete("Use the Attach method instead.")]
		public IDebugger GetDebugger()
		{
			return null;
		}

		[Token(Token = "0x60014C9")]
		[Address(RVA = "0xF12378", Offset = "0xF12378", VA = "0xF12378", Slot = "4")]
		public void Dispose()
		{
		}

		[Token(Token = "0x60014CA")]
		[Address(RVA = "0xF12394", Offset = "0xF12394", VA = "0xF12394")]
		public MoonSharpVsCodeDebugServer Start()
		{
			return null;
		}

		[Token(Token = "0x60014CB")]
		[Address(RVA = "0xF127CC", Offset = "0xF127CC", VA = "0xF127CC")]
		private void ListenThread(TcpListener serverSocket)
		{
		}

		[Token(Token = "0x60014CC")]
		[Address(RVA = "0xF12CD0", Offset = "0xF12CD0", VA = "0xF12CD0")]
		private void RunSession(string sessionId, NetworkStream stream)
		{
		}

		[Token(Token = "0x60014CD")]
		[Address(RVA = "0xF12C90", Offset = "0xF12C90", VA = "0xF12C90")]
		private void Log(string format, params object[] args)
		{
		}

		[Token(Token = "0x60014CE")]
		[Address(RVA = "0xF126B4", Offset = "0xF126B4", VA = "0xF126B4")]
		private static void SpawnThread(string name, Action threadProc)
		{
		}
	}
}
namespace MoonSharp.VsCodeDebugger.SDK
{
	[Token(Token = "0x20002C2")]
	public class Message
	{
		[Token(Token = "0x17000261")]
		public int id
		{
			[Token(Token = "0x60014E3")]
			[Address(RVA = "0xF1368C", Offset = "0xF1368C", VA = "0xF1368C")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60014E4")]
			[Address(RVA = "0xF13694", Offset = "0xF13694", VA = "0xF13694")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000262")]
		public string format
		{
			[Token(Token = "0x60014E5")]
			[Address(RVA = "0xF1369C", Offset = "0xF1369C", VA = "0xF1369C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60014E6")]
			[Address(RVA = "0xF136A4", Offset = "0xF136A4", VA = "0xF136A4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000263")]
		public object variables
		{
			[Token(Token = "0x60014E7")]
			[Address(RVA = "0xF136AC", Offset = "0xF136AC", VA = "0xF136AC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60014E8")]
			[Address(RVA = "0xF136B4", Offset = "0xF136B4", VA = "0xF136B4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000264")]
		public object showUser
		{
			[Token(Token = "0x60014E9")]
			[Address(RVA = "0xF136BC", Offset = "0xF136BC", VA = "0xF136BC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60014EA")]
			[Address(RVA = "0xF136C4", Offset = "0xF136C4", VA = "0xF136C4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000265")]
		public object sendTelemetry
		{
			[Token(Token = "0x60014EB")]
			[Address(RVA = "0xF136CC", Offset = "0xF136CC", VA = "0xF136CC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60014EC")]
			[Address(RVA = "0xF136D4", Offset = "0xF136D4", VA = "0xF136D4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60014ED")]
		[Address(RVA = "0xF136DC", Offset = "0xF136DC", VA = "0xF136DC")]
		public Message(int id, string format, [Optional] object variables, bool user = true, bool telemetry = false)
		{
		}
	}
	[Token(Token = "0x20002C3")]
	public class StackFrame
	{
		[Token(Token = "0x17000266")]
		public int id
		{
			[Token(Token = "0x60014EE")]
			[Address(RVA = "0xF137B8", Offset = "0xF137B8", VA = "0xF137B8")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60014EF")]
			[Address(RVA = "0xF137C0", Offset = "0xF137C0", VA = "0xF137C0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000267")]
		public Source source
		{
			[Token(Token = "0x60014F0")]
			[Address(RVA = "0xF137C8", Offset = "0xF137C8", VA = "0xF137C8")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60014F1")]
			[Address(RVA = "0xF137D0", Offset = "0xF137D0", VA = "0xF137D0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000268")]
		public int line
		{
			[Token(Token = "0x60014F2")]
			[Address(RVA = "0xF137D8", Offset = "0xF137D8", VA = "0xF137D8")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60014F3")]
			[Address(RVA = "0xF137E0", Offset = "0xF137E0", VA = "0xF137E0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000269")]
		public int column
		{
			[Token(Token = "0x60014F4")]
			[Address(RVA = "0xF137E8", Offset = "0xF137E8", VA = "0xF137E8")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60014F5")]
			[Address(RVA = "0xF137F0", Offset = "0xF137F0", VA = "0xF137F0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700026A")]
		public string name
		{
			[Token(Token = "0x60014F6")]
			[Address(RVA = "0xF137F8", Offset = "0xF137F8", VA = "0xF137F8")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60014F7")]
			[Address(RVA = "0xF13800", Offset = "0xF13800", VA = "0xF13800")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700026B")]
		public int? endLine
		{
			[Token(Token = "0x60014F8")]
			[Address(RVA = "0xF13808", Offset = "0xF13808", VA = "0xF13808")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60014F9")]
			[Address(RVA = "0xF13810", Offset = "0xF13810", VA = "0xF13810")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700026C")]
		public int? endColumn
		{
			[Token(Token = "0x60014FA")]
			[Address(RVA = "0xF13818", Offset = "0xF13818", VA = "0xF13818")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60014FB")]
			[Address(RVA = "0xF13820", Offset = "0xF13820", VA = "0xF13820")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60014FC")]
		[Address(RVA = "0xF13828", Offset = "0xF13828", VA = "0xF13828")]
		public StackFrame(int id, string name, Source source, int line, int column = 0, [Optional] int? endLine, [Optional] int? endColumn)
		{
		}
	}
	[Token(Token = "0x20002C4")]
	public class Scope
	{
		[Token(Token = "0x1700026D")]
		public string name
		{
			[Token(Token = "0x60014FD")]
			[Address(RVA = "0xF138A8", Offset = "0xF138A8", VA = "0xF138A8")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60014FE")]
			[Address(RVA = "0xF138B0", Offset = "0xF138B0", VA = "0xF138B0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700026E")]
		public int variablesReference
		{
			[Token(Token = "0x60014FF")]
			[Address(RVA = "0xF138B8", Offset = "0xF138B8", VA = "0xF138B8")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001500")]
			[Address(RVA = "0xF138C0", Offset = "0xF138C0", VA = "0xF138C0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700026F")]
		public bool expensive
		{
			[Token(Token = "0x6001501")]
			[Address(RVA = "0xF138C8", Offset = "0xF138C8", VA = "0xF138C8")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001502")]
			[Address(RVA = "0xF138D0", Offset = "0xF138D0", VA = "0xF138D0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6001503")]
		[Address(RVA = "0xF138DC", Offset = "0xF138DC", VA = "0xF138DC")]
		public Scope(string name, int variablesReference, bool expensive = false)
		{
		}
	}
	[Token(Token = "0x20002C5")]
	public class Variable
	{
		[Token(Token = "0x17000270")]
		public string name
		{
			[Token(Token = "0x6001504")]
			[Address(RVA = "0xF1392C", Offset = "0xF1392C", VA = "0xF1392C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001505")]
			[Address(RVA = "0xF13934", Offset = "0xF13934", VA = "0xF13934")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000271")]
		public string value
		{
			[Token(Token = "0x6001506")]
			[Address(RVA = "0xF1393C", Offset = "0xF1393C", VA = "0xF1393C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001507")]
			[Address(RVA = "0xF13944", Offset = "0xF13944", VA = "0xF13944")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000272")]
		public int variablesReference
		{
			[Token(Token = "0x6001508")]
			[Address(RVA = "0xF1394C", Offset = "0xF1394C", VA = "0xF1394C")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001509")]
			[Address(RVA = "0xF13954", Offset = "0xF13954", VA = "0xF13954")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x600150A")]
		[Address(RVA = "0xF1395C", Offset = "0xF1395C", VA = "0xF1395C")]
		public Variable(string name, string value, int variablesReference = 0)
		{
		}
	}
	[Token(Token = "0x20002C6")]
	public class Thread
	{
		[Token(Token = "0x17000273")]
		public int id
		{
			[Token(Token = "0x600150B")]
			[Address(RVA = "0xF139B4", Offset = "0xF139B4", VA = "0xF139B4")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600150C")]
			[Address(RVA = "0xF139BC", Offset = "0xF139BC", VA = "0xF139BC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000274")]
		public string name
		{
			[Token(Token = "0x600150D")]
			[Address(RVA = "0xF139C4", Offset = "0xF139C4", VA = "0xF139C4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600150E")]
			[Address(RVA = "0xF139CC", Offset = "0xF139CC", VA = "0xF139CC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x600150F")]
		[Address(RVA = "0xF139D4", Offset = "0xF139D4", VA = "0xF139D4")]
		public Thread(int id, string name)
		{
		}
	}
	[Token(Token = "0x20002C7")]
	public class Source
	{
		[Token(Token = "0x17000275")]
		public string name
		{
			[Token(Token = "0x6001510")]
			[Address(RVA = "0xF13AA4", Offset = "0xF13AA4", VA = "0xF13AA4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001511")]
			[Address(RVA = "0xF13AAC", Offset = "0xF13AAC", VA = "0xF13AAC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000276")]
		public string path
		{
			[Token(Token = "0x6001512")]
			[Address(RVA = "0xF13AB4", Offset = "0xF13AB4", VA = "0xF13AB4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001513")]
			[Address(RVA = "0xF13ABC", Offset = "0xF13ABC", VA = "0xF13ABC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000277")]
		public int sourceReference
		{
			[Token(Token = "0x6001514")]
			[Address(RVA = "0xF13AC4", Offset = "0xF13AC4", VA = "0xF13AC4")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001515")]
			[Address(RVA = "0xF13ACC", Offset = "0xF13ACC", VA = "0xF13ACC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6001516")]
		[Address(RVA = "0xF13AD4", Offset = "0xF13AD4", VA = "0xF13AD4")]
		public Source(string name, string path, int sourceReference = 0)
		{
		}

		[Token(Token = "0x6001517")]
		[Address(RVA = "0xF13B2C", Offset = "0xF13B2C", VA = "0xF13B2C")]
		public Source(string path, int sourceReference = 0)
		{
		}
	}
	[Token(Token = "0x20002C8")]
	public class Breakpoint
	{
		[Token(Token = "0x17000278")]
		public bool verified
		{
			[Token(Token = "0x6001518")]
			[Address(RVA = "0xF13BC8", Offset = "0xF13BC8", VA = "0xF13BC8")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001519")]
			[Address(RVA = "0xF13BD0", Offset = "0xF13BD0", VA = "0xF13BD0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000279")]
		public int line
		{
			[Token(Token = "0x600151A")]
			[Address(RVA = "0xF13BDC", Offset = "0xF13BDC", VA = "0xF13BDC")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600151B")]
			[Address(RVA = "0xF13BE4", Offset = "0xF13BE4", VA = "0xF13BE4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x600151C")]
		[Address(RVA = "0xF13BEC", Offset = "0xF13BEC", VA = "0xF13BEC")]
		public Breakpoint(bool verified, int line)
		{
		}
	}
	[Token(Token = "0x20002C9")]
	public class InitializedEvent : Event
	{
		[Token(Token = "0x600151D")]
		[Address(RVA = "0xF13C20", Offset = "0xF13C20", VA = "0xF13C20")]
		public InitializedEvent()
		{
		}
	}
	[Token(Token = "0x20002CA")]
	public class StoppedEvent : Event
	{
		[Token(Token = "0x600151E")]
		[Address(RVA = "0xF13CF8", Offset = "0xF13CF8", VA = "0xF13CF8")]
		public StoppedEvent(int tid, string reasn, [Optional] string txt)
		{
		}
	}
	[Token(Token = "0x20002CB")]
	public class ExitedEvent : Event
	{
		[Token(Token = "0x600151F")]
		[Address(RVA = "0xF13DB0", Offset = "0xF13DB0", VA = "0xF13DB0")]
		public ExitedEvent(int exCode)
		{
		}
	}
	[Token(Token = "0x20002CC")]
	public class TerminatedEvent : Event
	{
		[Token(Token = "0x6001520")]
		[Address(RVA = "0xF13E50", Offset = "0xF13E50", VA = "0xF13E50")]
		public TerminatedEvent()
		{
		}
	}
	[Token(Token = "0x20002CD")]
	public class ThreadEvent : Event
	{
		[Token(Token = "0x6001521")]
		[Address(RVA = "0xF13E9C", Offset = "0xF13E9C", VA = "0xF13E9C")]
		public ThreadEvent(string reasn, int tid)
		{
		}
	}
	[Token(Token = "0x20002CE")]
	public class OutputEvent : Event
	{
		[Token(Token = "0x6001522")]
		[Address(RVA = "0xF13F44", Offset = "0xF13F44", VA = "0xF13F44")]
		public OutputEvent(string cat, string outpt)
		{
		}
	}
	[Token(Token = "0x20002CF")]
	public class Capabilities : ResponseBody
	{
		[Token(Token = "0x4000DAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool supportsConfigurationDoneRequest;

		[Token(Token = "0x4000DAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool supportsFunctionBreakpoints;

		[Token(Token = "0x4000DB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		public bool supportsConditionalBreakpoints;

		[Token(Token = "0x4000DB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13")]
		public bool supportsEvaluateForHovers;

		[Token(Token = "0x4000DB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public object[] exceptionBreakpointFilters;

		[Token(Token = "0x6001523")]
		[Address(RVA = "0xF13FEC", Offset = "0xF13FEC", VA = "0xF13FEC")]
		public Capabilities()
		{
		}
	}
	[Token(Token = "0x20002D0")]
	public class ErrorResponseBody : ResponseBody
	{
		[Token(Token = "0x1700027A")]
		public Message error
		{
			[Token(Token = "0x6001524")]
			[Address(RVA = "0xF13FFC", Offset = "0xF13FFC", VA = "0xF13FFC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001525")]
			[Address(RVA = "0xF14004", Offset = "0xF14004", VA = "0xF14004")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6001526")]
		[Address(RVA = "0xF1400C", Offset = "0xF1400C", VA = "0xF1400C")]
		public ErrorResponseBody(Message error)
		{
		}
	}
	[Token(Token = "0x20002D1")]
	public class StackTraceResponseBody : ResponseBody
	{
		[Token(Token = "0x1700027B")]
		public StackFrame[] stackFrames
		{
			[Token(Token = "0x6001527")]
			[Address(RVA = "0xF1403C", Offset = "0xF1403C", VA = "0xF1403C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001528")]
			[Address(RVA = "0xF14044", Offset = "0xF14044", VA = "0xF14044")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6001529")]
		[Address(RVA = "0xF1404C", Offset = "0xF1404C", VA = "0xF1404C")]
		public StackTraceResponseBody([Optional] List<StackFrame> frames)
		{
		}
	}
	[Token(Token = "0x20002D2")]
	public class ScopesResponseBody : ResponseBody
	{
		[Token(Token = "0x1700027C")]
		public Scope[] scopes
		{
			[Token(Token = "0x600152A")]
			[Address(RVA = "0xF140DC", Offset = "0xF140DC", VA = "0xF140DC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600152B")]
			[Address(RVA = "0xF140E4", Offset = "0xF140E4", VA = "0xF140E4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x600152C")]
		[Address(RVA = "0xF140EC", Offset = "0xF140EC", VA = "0xF140EC")]
		public ScopesResponseBody([Optional] List<Scope> scps)
		{
		}
	}
	[Token(Token = "0x20002D3")]
	public class VariablesResponseBody : ResponseBody
	{
		[Token(Token = "0x1700027D")]
		public Variable[] variables
		{
			[Token(Token = "0x600152D")]
			[Address(RVA = "0xF1417C", Offset = "0xF1417C", VA = "0xF1417C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600152E")]
			[Address(RVA = "0xF14184", Offset = "0xF14184", VA = "0xF14184")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x600152F")]
		[Address(RVA = "0xF1418C", Offset = "0xF1418C", VA = "0xF1418C")]
		public VariablesResponseBody([Optional] List<Variable> vars)
		{
		}
	}
	[Token(Token = "0x20002D4")]
	public class ThreadsResponseBody : ResponseBody
	{
		[Token(Token = "0x1700027E")]
		public Thread[] threads
		{
			[Token(Token = "0x6001530")]
			[Address(RVA = "0xF1421C", Offset = "0xF1421C", VA = "0xF1421C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001531")]
			[Address(RVA = "0xF14224", Offset = "0xF14224", VA = "0xF14224")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6001532")]
		[Address(RVA = "0xF1422C", Offset = "0xF1422C", VA = "0xF1422C")]
		public ThreadsResponseBody([Optional] List<Thread> vars)
		{
		}
	}
	[Token(Token = "0x20002D5")]
	public class EvaluateResponseBody : ResponseBody
	{
		[Token(Token = "0x1700027F")]
		public string result
		{
			[Token(Token = "0x6001533")]
			[Address(RVA = "0xF142BC", Offset = "0xF142BC", VA = "0xF142BC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001534")]
			[Address(RVA = "0xF142C4", Offset = "0xF142C4", VA = "0xF142C4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000280")]
		public string type
		{
			[Token(Token = "0x6001535")]
			[Address(RVA = "0xF142CC", Offset = "0xF142CC", VA = "0xF142CC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001536")]
			[Address(RVA = "0xF142D4", Offset = "0xF142D4", VA = "0xF142D4")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000281")]
		public int variablesReference
		{
			[Token(Token = "0x6001537")]
			[Address(RVA = "0xF142DC", Offset = "0xF142DC", VA = "0xF142DC")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001538")]
			[Address(RVA = "0xF142E4", Offset = "0xF142E4", VA = "0xF142E4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6001539")]
		[Address(RVA = "0xF142EC", Offset = "0xF142EC", VA = "0xF142EC")]
		public EvaluateResponseBody(string value, int reff = 0)
		{
		}
	}
	[Token(Token = "0x20002D6")]
	public class SetBreakpointsResponseBody : ResponseBody
	{
		[Token(Token = "0x17000282")]
		public Breakpoint[] breakpoints
		{
			[Token(Token = "0x600153A")]
			[Address(RVA = "0xF14328", Offset = "0xF14328", VA = "0xF14328")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600153B")]
			[Address(RVA = "0xF14330", Offset = "0xF14330", VA = "0xF14330")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x600153C")]
		[Address(RVA = "0xF14338", Offset = "0xF14338", VA = "0xF14338")]
		public SetBreakpointsResponseBody([Optional] List<Breakpoint> bpts)
		{
		}
	}
	[Token(Token = "0x20002D7")]
	public abstract class DebugSession : ProtocolServer
	{
		[Token(Token = "0x4000DBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		private bool _debuggerLinesStartAt1;

		[Token(Token = "0x4000DBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E")]
		private bool _debuggerPathsAreURI;

		[Token(Token = "0x4000DBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F")]
		private bool _clientLinesStartAt1;

		[Token(Token = "0x4000DBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool _clientPathsAreURI;

		[Token(Token = "0x600153D")]
		[Address(RVA = "0xF143C8", Offset = "0xF143C8", VA = "0xF143C8")]
		public DebugSession(bool debuggerLinesStartAt1, bool debuggerPathsAreURI = false)
		{
		}

		[Token(Token = "0x600153E")]
		[Address(RVA = "0xF144C0", Offset = "0xF144C0", VA = "0xF144C0")]
		public void SendResponse(Response response, [Optional] ResponseBody body)
		{
		}

		[Token(Token = "0x600153F")]
		[Address(RVA = "0xF1485C", Offset = "0xF1485C", VA = "0xF1485C")]
		public void SendErrorResponse(Response response, int id, string format, [Optional] object arguments, bool user = true, bool telemetry = false)
		{
		}

		[Token(Token = "0x6001540")]
		[Address(RVA = "0xF14B58", Offset = "0xF14B58", VA = "0xF14B58", Slot = "4")]
		protected override void DispatchRequest(string command, Table args, Response response)
		{
		}

		[Token(Token = "0x6001541")]
		public abstract void Initialize(Response response, Table args);

		[Token(Token = "0x6001542")]
		public abstract void Launch(Response response, Table arguments);

		[Token(Token = "0x6001543")]
		public abstract void Attach(Response response, Table arguments);

		[Token(Token = "0x6001544")]
		public abstract void Disconnect(Response response, Table arguments);

		[Token(Token = "0x6001545")]
		[Address(RVA = "0xF15654", Offset = "0xF15654", VA = "0xF15654", Slot = "9")]
		public virtual void SetFunctionBreakpoints(Response response, Table arguments)
		{
		}

		[Token(Token = "0x6001546")]
		[Address(RVA = "0xF15658", Offset = "0xF15658", VA = "0xF15658", Slot = "10")]
		public virtual void SetExceptionBreakpoints(Response response, Table arguments)
		{
		}

		[Token(Token = "0x6001547")]
		public abstract void SetBreakpoints(Response response, Table arguments);

		[Token(Token = "0x6001548")]
		public abstract void Continue(Response response, Table arguments);

		[Token(Token = "0x6001549")]
		public abstract void Next(Response response, Table arguments);

		[Token(Token = "0x600154A")]
		public abstract void StepIn(Response response, Table arguments);

		[Token(Token = "0x600154B")]
		public abstract void StepOut(Response response, Table arguments);

		[Token(Token = "0x600154C")]
		public abstract void Pause(Response response, Table arguments);

		[Token(Token = "0x600154D")]
		public abstract void StackTrace(Response response, Table arguments);

		[Token(Token = "0x600154E")]
		public abstract void Scopes(Response response, Table arguments);

		[Token(Token = "0x600154F")]
		public abstract void Variables(Response response, Table arguments);

		[Token(Token = "0x6001550")]
		[Address(RVA = "0xF1565C", Offset = "0xF1565C", VA = "0xF1565C", Slot = "20")]
		public virtual void Source(Response response, Table arguments)
		{
		}

		[Token(Token = "0x6001551")]
		public abstract void Threads(Response response, Table arguments);

		[Token(Token = "0x6001552")]
		public abstract void Evaluate(Response response, Table arguments);

		[Token(Token = "0x6001553")]
		[Address(RVA = "0xF156C4", Offset = "0xF156C4", VA = "0xF156C4")]
		protected int ConvertDebuggerLineToClient(int line)
		{
			return default(int);
		}

		[Token(Token = "0x6001554")]
		[Address(RVA = "0xF156E4", Offset = "0xF156E4", VA = "0xF156E4")]
		protected int ConvertClientLineToDebugger(int line)
		{
			return default(int);
		}

		[Token(Token = "0x6001555")]
		[Address(RVA = "0xF15704", Offset = "0xF15704", VA = "0xF15704")]
		protected string ConvertDebuggerPathToClient(string path)
		{
			return null;
		}

		[Token(Token = "0x6001556")]
		[Address(RVA = "0xF15840", Offset = "0xF15840", VA = "0xF15840")]
		protected string ConvertClientPathToDebugger(string clientPath)
		{
			return null;
		}
	}
	[Token(Token = "0x20002D8")]
	public class ProtocolMessage
	{
		[Token(Token = "0x4000DC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int seq;

		[Token(Token = "0x17000283")]
		public string type
		{
			[Token(Token = "0x6001557")]
			[Address(RVA = "0xF159BC", Offset = "0xF159BC", VA = "0xF159BC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001558")]
			[Address(RVA = "0xF159C4", Offset = "0xF159C4", VA = "0xF159C4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6001559")]
		[Address(RVA = "0xF159CC", Offset = "0xF159CC", VA = "0xF159CC")]
		public ProtocolMessage(string typ)
		{
		}

		[Token(Token = "0x600155A")]
		[Address(RVA = "0xF159FC", Offset = "0xF159FC", VA = "0xF159FC")]
		public ProtocolMessage(string typ, int sq)
		{
		}
	}
	[Token(Token = "0x20002D9")]
	public class Request : ProtocolMessage
	{
		[Token(Token = "0x4000DC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string command;

		[Token(Token = "0x4000DC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Table arguments;

		[Token(Token = "0x600155B")]
		[Address(RVA = "0xF15A38", Offset = "0xF15A38", VA = "0xF15A38")]
		public Request(int id, string cmd, Table arg)
		{
		}
	}
	[Token(Token = "0x20002DA")]
	public class ResponseBody
	{
		[Token(Token = "0x600155C")]
		[Address(RVA = "0xF13FF4", Offset = "0xF13FF4", VA = "0xF13FF4")]
		public ResponseBody()
		{
		}
	}
	[Token(Token = "0x20002DB")]
	public class Response : ProtocolMessage
	{
		[Token(Token = "0x17000284")]
		public bool success
		{
			[Token(Token = "0x600155D")]
			[Address(RVA = "0xF15AD4", Offset = "0xF15AD4", VA = "0xF15AD4")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600155E")]
			[Address(RVA = "0xF15ADC", Offset = "0xF15ADC", VA = "0xF15ADC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000285")]
		public string message
		{
			[Token(Token = "0x600155F")]
			[Address(RVA = "0xF15AE8", Offset = "0xF15AE8", VA = "0xF15AE8")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001560")]
			[Address(RVA = "0xF15AF0", Offset = "0xF15AF0", VA = "0xF15AF0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000286")]
		public int request_seq
		{
			[Token(Token = "0x6001561")]
			[Address(RVA = "0xF15AF8", Offset = "0xF15AF8", VA = "0xF15AF8")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001562")]
			[Address(RVA = "0xF15B00", Offset = "0xF15B00", VA = "0xF15B00")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000287")]
		public string command
		{
			[Token(Token = "0x6001563")]
			[Address(RVA = "0xF15B08", Offset = "0xF15B08", VA = "0xF15B08")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001564")]
			[Address(RVA = "0xF15B10", Offset = "0xF15B10", VA = "0xF15B10")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000288")]
		public ResponseBody body
		{
			[Token(Token = "0x6001565")]
			[Address(RVA = "0xF15B18", Offset = "0xF15B18", VA = "0xF15B18")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001566")]
			[Address(RVA = "0xF15B20", Offset = "0xF15B20", VA = "0xF15B20")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6001567")]
		[Address(RVA = "0xF15B28", Offset = "0xF15B28", VA = "0xF15B28")]
		public Response(Table req)
		{
		}

		[Token(Token = "0x6001568")]
		[Address(RVA = "0xF14508", Offset = "0xF14508", VA = "0xF14508")]
		public void SetBody(ResponseBody bdy)
		{
		}

		[Token(Token = "0x6001569")]
		[Address(RVA = "0xF14B24", Offset = "0xF14B24", VA = "0xF14B24")]
		public void SetErrorBody(string msg, [Optional] ResponseBody bdy)
		{
		}
	}
	[Token(Token = "0x20002DC")]
	public class Event : ProtocolMessage
	{
		[Token(Token = "0x17000289")]
		public string @event
		{
			[Token(Token = "0x600156A")]
			[Address(RVA = "0xF15C40", Offset = "0xF15C40", VA = "0xF15C40")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600156B")]
			[Address(RVA = "0xF15C48", Offset = "0xF15C48", VA = "0xF15C48")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700028A")]
		public object body
		{
			[Token(Token = "0x600156C")]
			[Address(RVA = "0xF15C50", Offset = "0xF15C50", VA = "0xF15C50")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600156D")]
			[Address(RVA = "0xF15C58", Offset = "0xF15C58", VA = "0xF15C58")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x600156E")]
		[Address(RVA = "0xF13C6C", Offset = "0xF13C6C", VA = "0xF13C6C")]
		public Event(string type, [Optional] object bdy)
		{
		}
	}
	[Token(Token = "0x20002DD")]
	public abstract class ProtocolServer
	{
		[Token(Token = "0x4000DCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool TRACE;

		[Token(Token = "0x4000DCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool TRACE_RESPONSE;

		[Token(Token = "0x4000DCD")]
		protected const int BUFFER_SIZE = 4096;

		[Token(Token = "0x4000DCE")]
		protected const string TWO_CRLF = "\r\n\r\n";

		[Token(Token = "0x4000DCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected static readonly Regex CONTENT_LENGTH_MATCHER;

		[Token(Token = "0x4000DD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		protected static readonly Encoding Encoding;

		[Token(Token = "0x4000DD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private int _sequenceNumber;

		[Token(Token = "0x4000DD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Stream _outputStream;

		[Token(Token = "0x4000DD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ByteBuffer _rawData;

		[Token(Token = "0x4000DD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int _bodyLength;

		[Token(Token = "0x4000DD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private bool _stopRequested;

		[Token(Token = "0x600156F")]
		[Address(RVA = "0xF14440", Offset = "0xF14440", VA = "0xF14440")]
		public ProtocolServer()
		{
		}

		[Token(Token = "0x6001570")]
		[Address(RVA = "0xF12FAC", Offset = "0xF12FAC", VA = "0xF12FAC")]
		public void ProcessLoop(Stream inputStream, Stream outputStream)
		{
		}

		[Token(Token = "0x6001571")]
		[Address(RVA = "0xF15648", Offset = "0xF15648", VA = "0xF15648")]
		public void Stop()
		{
		}

		[Token(Token = "0x6001572")]
		[Address(RVA = "0xF15FB8", Offset = "0xF15FB8", VA = "0xF15FB8")]
		public void SendEvent(Event e)
		{
		}

		[Token(Token = "0x6001573")]
		protected abstract void DispatchRequest(string command, Table args, Response response);

		[Token(Token = "0x6001574")]
		[Address(RVA = "0xF15D88", Offset = "0xF15D88", VA = "0xF15D88")]
		private void ProcessData()
		{
		}

		[Token(Token = "0x6001575")]
		[Address(RVA = "0xF160B0", Offset = "0xF160B0", VA = "0xF160B0")]
		private void Dispatch(string req)
		{
		}

		[Token(Token = "0x6001576")]
		[Address(RVA = "0xF14518", Offset = "0xF14518", VA = "0xF14518")]
		protected void SendMessage(ProtocolMessage message)
		{
		}

		[Token(Token = "0x6001577")]
		[Address(RVA = "0xF163CC", Offset = "0xF163CC", VA = "0xF163CC")]
		private static byte[] ConvertToBytes(ProtocolMessage request)
		{
			return null;
		}
	}
	[Token(Token = "0x20002DE")]
	internal class ByteBuffer
	{
		[Token(Token = "0x4000DD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private byte[] _buffer;

		[Token(Token = "0x1700028B")]
		public int Length
		{
			[Token(Token = "0x600157A")]
			[Address(RVA = "0xF15FBC", Offset = "0xF15FBC", VA = "0xF15FBC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001579")]
		[Address(RVA = "0xF15C60", Offset = "0xF15C60", VA = "0xF15C60")]
		public ByteBuffer()
		{
		}

		[Token(Token = "0x600157B")]
		[Address(RVA = "0xF163A0", Offset = "0xF163A0", VA = "0xF163A0")]
		public string GetString(Encoding enc)
		{
			return null;
		}

		[Token(Token = "0x600157C")]
		[Address(RVA = "0xF15CC4", Offset = "0xF15CC4", VA = "0xF15CC4")]
		public void Append(byte[] b, int length)
		{
		}

		[Token(Token = "0x600157D")]
		[Address(RVA = "0xF15FD8", Offset = "0xF15FD8", VA = "0xF15FD8")]
		public byte[] RemoveFirst(int n)
		{
			return null;
		}
	}
	[Token(Token = "0x20002DF")]
	internal class Utilities
	{
		[Token(Token = "0x4000DD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Regex VARIABLE;

		[Token(Token = "0x600157E")]
		[Address(RVA = "0xF149AC", Offset = "0xF149AC", VA = "0xF149AC")]
		public static string ExpandVariables(string format, object variables, bool underscoredOnly = true)
		{
			return null;
		}

		[Token(Token = "0x600157F")]
		[Address(RVA = "0xF1662C", Offset = "0xF1662C", VA = "0xF1662C")]
		public static string MakeRelativePath(string dirPath, string absPath)
		{
			return null;
		}

		[Token(Token = "0x6001580")]
		[Address(RVA = "0xF166EC", Offset = "0xF166EC", VA = "0xF166EC")]
		public Utilities()
		{
		}
	}
}
namespace MoonSharp.VsCodeDebugger.DebuggerLogic
{
	[Token(Token = "0x20002E1")]
	internal class AsyncDebugger : IDebugger
	{
		[Token(Token = "0x4000DDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static object s_AsyncDebuggerIdLock;

		[Token(Token = "0x4000DDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static int s_AsyncDebuggerIdCounter;

		[Token(Token = "0x4000DDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private object m_Lock;

		[Token(Token = "0x4000DDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private IAsyncDebuggerClient m_Client__;

		[Token(Token = "0x4000DDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private DebuggerAction m_PendingAction;

		[Token(Token = "0x4000DE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<WatchItem>[] m_WatchItems;

		[Token(Token = "0x4000DE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Dictionary<int, SourceCode> m_SourcesMap;

		[Token(Token = "0x4000DE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Dictionary<int, string> m_SourcesOverride;

		[Token(Token = "0x4000DE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Func<SourceCode, string> m_SourceFinder;

		[Token(Token = "0x1700028C")]
		public DebugService DebugService
		{
			[Token(Token = "0x6001584")]
			[Address(RVA = "0xF16970", Offset = "0xF16970", VA = "0xF16970")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001585")]
			[Address(RVA = "0xF16978", Offset = "0xF16978", VA = "0xF16978")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700028D")]
		public Regex ErrorRegex
		{
			[Token(Token = "0x6001586")]
			[Address(RVA = "0xF16980", Offset = "0xF16980", VA = "0xF16980")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001587")]
			[Address(RVA = "0xF16988", Offset = "0xF16988", VA = "0xF16988")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700028E")]
		public Script Script
		{
			[Token(Token = "0x6001588")]
			[Address(RVA = "0xF16990", Offset = "0xF16990", VA = "0xF16990")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001589")]
			[Address(RVA = "0xF16998", Offset = "0xF16998", VA = "0xF16998")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700028F")]
		public bool PauseRequested
		{
			[Token(Token = "0x600158A")]
			[Address(RVA = "0xF169A0", Offset = "0xF169A0", VA = "0xF169A0")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600158B")]
			[Address(RVA = "0xF169A8", Offset = "0xF169A8", VA = "0xF169A8")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000290")]
		public string Name
		{
			[Token(Token = "0x600158C")]
			[Address(RVA = "0xF169B4", Offset = "0xF169B4", VA = "0xF169B4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600158D")]
			[Address(RVA = "0xF169BC", Offset = "0xF169BC", VA = "0xF169BC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000291")]
		public int Id
		{
			[Token(Token = "0x600158E")]
			[Address(RVA = "0xF169C4", Offset = "0xF169C4", VA = "0xF169C4")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600158F")]
			[Address(RVA = "0xF169CC", Offset = "0xF169CC", VA = "0xF169CC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000292")]
		public IAsyncDebuggerClient Client
		{
			[Token(Token = "0x6001591")]
			[Address(RVA = "0xF169D4", Offset = "0xF169D4", VA = "0xF169D4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001592")]
			[Address(RVA = "0xF1205C", Offset = "0xF1205C", VA = "0xF1205C")]
			set
			{
			}
		}

		[Token(Token = "0x6001590")]
		[Address(RVA = "0xF10D1C", Offset = "0xF10D1C", VA = "0xF10D1C")]
		public AsyncDebugger(Script script, Func<SourceCode, string> sourceFinder, string name)
		{
		}

		[Token(Token = "0x6001593")]
		[Address(RVA = "0xF169DC", Offset = "0xF169DC", VA = "0xF169DC", Slot = "10")]
		private DebuggerAction MoonSharp.Interpreter.Debugging.IDebugger.GetAction(int ip, SourceRef sourceref)
		{
			return null;
		}

		[Token(Token = "0x6001594")]
		[Address(RVA = "0xF16C90", Offset = "0xF16C90", VA = "0xF16C90")]
		public void QueueAction(DebuggerAction action)
		{
		}

		[Token(Token = "0x6001595")]
		[Address(RVA = "0xF16C84", Offset = "0xF16C84", VA = "0xF16C84")]
		private void Sleep(int v)
		{
		}

		[Token(Token = "0x6001596")]
		[Address(RVA = "0xF16DA4", Offset = "0xF16DA4", VA = "0xF16DA4")]
		private DynamicExpression CreateDynExpr(string code)
		{
			return null;
		}

		[Token(Token = "0x6001597")]
		[Address(RVA = "0xF16EB0", Offset = "0xF16EB0", VA = "0xF16EB0", Slot = "13")]
		private List<DynamicExpression> MoonSharp.Interpreter.Debugging.IDebugger.GetWatchItems()
		{
			return null;
		}

		[Token(Token = "0x6001598")]
		[Address(RVA = "0xF16F20", Offset = "0xF16F20", VA = "0xF16F20", Slot = "8")]
		private bool MoonSharp.Interpreter.Debugging.IDebugger.IsPauseRequested()
		{
			return default(bool);
		}

		[Token(Token = "0x6001599")]
		[Address(RVA = "0xF16F28", Offset = "0xF16F28", VA = "0xF16F28", Slot = "14")]
		private void MoonSharp.Interpreter.Debugging.IDebugger.RefreshBreakpoints(IEnumerable<SourceRef> refs)
		{
		}

		[Token(Token = "0x600159A")]
		[Address(RVA = "0xF16F2C", Offset = "0xF16F2C", VA = "0xF16F2C", Slot = "7")]
		private void MoonSharp.Interpreter.Debugging.IDebugger.SetByteCode(string[] byteCode)
		{
		}

		[Token(Token = "0x600159B")]
		[Address(RVA = "0xF16F30", Offset = "0xF16F30", VA = "0xF16F30", Slot = "6")]
		private void MoonSharp.Interpreter.Debugging.IDebugger.SetSourceCode(SourceCode sourceCode)
		{
		}

		[Token(Token = "0x600159C")]
		[Address(RVA = "0xF17294", Offset = "0xF17294", VA = "0xF17294")]
		private string GetFooterForTempFile()
		{
			return null;
		}

		[Token(Token = "0x600159D")]
		[Address(RVA = "0xF172D4", Offset = "0xF172D4", VA = "0xF172D4")]
		public string GetSourceFile(int sourceId)
		{
			return null;
		}

		[Token(Token = "0x600159E")]
		[Address(RVA = "0xF173C8", Offset = "0xF173C8", VA = "0xF173C8")]
		public bool IsSourceOverride(int sourceId)
		{
			return default(bool);
		}

		[Token(Token = "0x600159F")]
		[Address(RVA = "0xF17420", Offset = "0xF17420", VA = "0xF17420", Slot = "11")]
		private void MoonSharp.Interpreter.Debugging.IDebugger.SignalExecutionEnded()
		{
		}

		[Token(Token = "0x60015A0")]
		[Address(RVA = "0xF17564", Offset = "0xF17564", VA = "0xF17564", Slot = "9")]
		private bool MoonSharp.Interpreter.Debugging.IDebugger.SignalRuntimeException(ScriptRuntimeException ex)
		{
			return default(bool);
		}

		[Token(Token = "0x60015A1")]
		[Address(RVA = "0xF17718", Offset = "0xF17718", VA = "0xF17718", Slot = "12")]
		private void MoonSharp.Interpreter.Debugging.IDebugger.Update(WatchType watchType, IEnumerable<WatchItem> items)
		{
		}

		[Token(Token = "0x60015A2")]
		[Address(RVA = "0xF178F0", Offset = "0xF178F0", VA = "0xF178F0")]
		public List<WatchItem> GetWatches(WatchType watchType)
		{
			return null;
		}

		[Token(Token = "0x60015A3")]
		[Address(RVA = "0xF17920", Offset = "0xF17920", VA = "0xF17920")]
		public SourceCode GetSource(int id)
		{
			return null;
		}

		[Token(Token = "0x60015A4")]
		[Address(RVA = "0xF179B4", Offset = "0xF179B4", VA = "0xF179B4")]
		public SourceCode FindSourceByName(string path)
		{
			return null;
		}

		[Token(Token = "0x60015A5")]
		[Address(RVA = "0xF17CDC", Offset = "0xF17CDC", VA = "0xF17CDC", Slot = "5")]
		private void MoonSharp.Interpreter.Debugging.IDebugger.SetDebugService(DebugService debugService)
		{
		}

		[Token(Token = "0x60015A6")]
		[Address(RVA = "0xF17CE4", Offset = "0xF17CE4", VA = "0xF17CE4")]
		public DynValue Evaluate(string expression)
		{
			return null;
		}

		[Token(Token = "0x60015A7")]
		[Address(RVA = "0xF17D04", Offset = "0xF17D04", VA = "0xF17D04", Slot = "4")]
		private DebuggerCaps MoonSharp.Interpreter.Debugging.IDebugger.GetDebuggerCaps()
		{
			return default(DebuggerCaps);
		}
	}
	[Token(Token = "0x20002E3")]
	internal class EmptyDebugSession : DebugSession
	{
		[Token(Token = "0x4000DEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private MoonSharpVsCodeDebugServer m_Server;

		[Token(Token = "0x60015AB")]
		[Address(RVA = "0xF12F78", Offset = "0xF12F78", VA = "0xF12F78")]
		internal EmptyDebugSession(MoonSharpVsCodeDebugServer server)
		{
		}

		[Token(Token = "0x60015AC")]
		[Address(RVA = "0xF17DE4", Offset = "0xF17DE4", VA = "0xF17DE4", Slot = "5")]
		public override void Initialize(Response response, Table args)
		{
		}

		[Token(Token = "0x60015AD")]
		[Address(RVA = "0xF18290", Offset = "0xF18290", VA = "0xF18290")]
		private void SendList()
		{
		}

		[Token(Token = "0x60015AE")]
		[Address(RVA = "0xF188B0", Offset = "0xF188B0", VA = "0xF188B0", Slot = "7")]
		public override void Attach(Response response, Table arguments)
		{
		}

		[Token(Token = "0x60015AF")]
		[Address(RVA = "0xF188B4", Offset = "0xF188B4", VA = "0xF188B4", Slot = "12")]
		public override void Continue(Response response, Table arguments)
		{
		}

		[Token(Token = "0x60015B0")]
		[Address(RVA = "0xF188DC", Offset = "0xF188DC", VA = "0xF188DC", Slot = "8")]
		public override void Disconnect(Response response, Table arguments)
		{
		}

		[Token(Token = "0x60015B1")]
		[Address(RVA = "0xF188E0", Offset = "0xF188E0", VA = "0xF188E0")]
		private static string getString(Table args, string property, [Optional] string dflt)
		{
			return null;
		}

		[Token(Token = "0x60015B2")]
		[Address(RVA = "0xF18980", Offset = "0xF18980", VA = "0xF18980", Slot = "22")]
		public override void Evaluate(Response response, Table args)
		{
		}

		[Token(Token = "0x60015B3")]
		[Address(RVA = "0xF18A70", Offset = "0xF18A70", VA = "0xF18A70")]
		private void ExecuteRepl(string cmd)
		{
		}

		[Token(Token = "0x60015B4")]
		[Address(RVA = "0xF18C5C", Offset = "0xF18C5C", VA = "0xF18C5C", Slot = "6")]
		public override void Launch(Response response, Table arguments)
		{
		}

		[Token(Token = "0x60015B5")]
		[Address(RVA = "0xF18C60", Offset = "0xF18C60", VA = "0xF18C60", Slot = "13")]
		public override void Next(Response response, Table arguments)
		{
		}

		[Token(Token = "0x60015B6")]
		[Address(RVA = "0xF18C88", Offset = "0xF18C88", VA = "0xF18C88", Slot = "16")]
		public override void Pause(Response response, Table arguments)
		{
		}

		[Token(Token = "0x60015B7")]
		[Address(RVA = "0xF18CB0", Offset = "0xF18CB0", VA = "0xF18CB0", Slot = "18")]
		public override void Scopes(Response response, Table arguments)
		{
		}

		[Token(Token = "0x60015B8")]
		[Address(RVA = "0xF18CB4", Offset = "0xF18CB4", VA = "0xF18CB4", Slot = "11")]
		public override void SetBreakpoints(Response response, Table args)
		{
		}

		[Token(Token = "0x60015B9")]
		[Address(RVA = "0xF18CB8", Offset = "0xF18CB8", VA = "0xF18CB8", Slot = "17")]
		public override void StackTrace(Response response, Table args)
		{
		}

		[Token(Token = "0x60015BA")]
		[Address(RVA = "0xF18CBC", Offset = "0xF18CBC", VA = "0xF18CBC", Slot = "14")]
		public override void StepIn(Response response, Table arguments)
		{
		}

		[Token(Token = "0x60015BB")]
		[Address(RVA = "0xF18CE4", Offset = "0xF18CE4", VA = "0xF18CE4", Slot = "15")]
		public override void StepOut(Response response, Table arguments)
		{
		}

		[Token(Token = "0x60015BC")]
		[Address(RVA = "0xF18D0C", Offset = "0xF18D0C", VA = "0xF18D0C", Slot = "21")]
		public override void Threads(Response response, Table arguments)
		{
		}

		[Token(Token = "0x60015BD")]
		[Address(RVA = "0xF18E78", Offset = "0xF18E78", VA = "0xF18E78", Slot = "19")]
		public override void Variables(Response response, Table arguments)
		{
		}

		[Token(Token = "0x60015BE")]
		[Address(RVA = "0xF181C4", Offset = "0xF181C4", VA = "0xF181C4")]
		private void SendText(string msg, params object[] args)
		{
		}

		[Token(Token = "0x60015BF")]
		[Address(RVA = "0xF18B88", Offset = "0xF18B88", VA = "0xF18B88")]
		public void Unbind()
		{
		}
	}
	[Token(Token = "0x20002E4")]
	internal interface IAsyncDebuggerClient
	{
		[Token(Token = "0x60015C0")]
		void SendStopEvent();

		[Token(Token = "0x60015C1")]
		void OnWatchesUpdated(WatchType watchType);

		[Token(Token = "0x60015C2")]
		void OnSourceCodeChanged(int sourceID);

		[Token(Token = "0x60015C3")]
		void OnExecutionEnded();

		[Token(Token = "0x60015C4")]
		void OnException(ScriptRuntimeException ex);

		[Token(Token = "0x60015C5")]
		void Unbind();
	}
	[Token(Token = "0x20002E5")]
	internal class MoonSharpDebugSession : DebugSession, IAsyncDebuggerClient
	{
		[Token(Token = "0x4000DEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private AsyncDebugger m_Debug;

		[Token(Token = "0x4000DED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private MoonSharpVsCodeDebugServer m_Server;

		[Token(Token = "0x4000DEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<DynValue> m_Variables;

		[Token(Token = "0x4000DEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool m_NotifyExecutionEnd;

		[Token(Token = "0x4000DF0")]
		private const int SCOPE_LOCALS = 65536;

		[Token(Token = "0x4000DF1")]
		private const int SCOPE_SELF = 65537;

		[Token(Token = "0x4000DF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly SourceRef DefaultSourceRef;

		[Token(Token = "0x60015C6")]
		[Address(RVA = "0xF12E68", Offset = "0xF12E68", VA = "0xF12E68")]
		internal MoonSharpDebugSession(MoonSharpVsCodeDebugServer server, AsyncDebugger debugger)
		{
		}

		[Token(Token = "0x60015C7")]
		[Address(RVA = "0xF18E7C", Offset = "0xF18E7C", VA = "0xF18E7C", Slot = "5")]
		public override void Initialize(Response response, Table args)
		{
		}

		[Token(Token = "0x60015C8")]
		[Address(RVA = "0xF193A4", Offset = "0xF193A4", VA = "0xF193A4", Slot = "7")]
		public override void Attach(Response response, Table arguments)
		{
		}

		[Token(Token = "0x60015C9")]
		[Address(RVA = "0xF193A8", Offset = "0xF193A8", VA = "0xF193A8", Slot = "12")]
		public override void Continue(Response response, Table arguments)
		{
		}

		[Token(Token = "0x60015CA")]
		[Address(RVA = "0xF19434", Offset = "0xF19434", VA = "0xF19434", Slot = "8")]
		public override void Disconnect(Response response, Table arguments)
		{
		}

		[Token(Token = "0x60015CB")]
		[Address(RVA = "0xF1946C", Offset = "0xF1946C", VA = "0xF1946C")]
		private static string getString(Table args, string property, [Optional] string dflt)
		{
			return null;
		}

		[Token(Token = "0x60015CC")]
		[Address(RVA = "0xF1950C", Offset = "0xF1950C", VA = "0xF1950C", Slot = "22")]
		public override void Evaluate(Response response, Table args)
		{
		}

		[Token(Token = "0x60015CD")]
		[Address(RVA = "0xF1992C", Offset = "0xF1992C", VA = "0xF1992C")]
		private void ExecuteRepl(string cmd)
		{
		}

		[Token(Token = "0x60015CE")]
		[Address(RVA = "0xF1AAEC", Offset = "0xF1AAEC", VA = "0xF1AAEC", Slot = "6")]
		public override void Launch(Response response, Table arguments)
		{
		}

		[Token(Token = "0x60015CF")]
		[Address(RVA = "0xF1AAF0", Offset = "0xF1AAF0", VA = "0xF1AAF0", Slot = "13")]
		public override void Next(Response response, Table arguments)
		{
		}

		[Token(Token = "0x60015D0")]
		[Address(RVA = "0xF1AB7C", Offset = "0xF1AB7C", VA = "0xF1AB7C")]
		private StoppedEvent CreateStoppedEvent(string reason, [Optional] string text)
		{
			return null;
		}

		[Token(Token = "0x60015D1")]
		[Address(RVA = "0xF1ABF0", Offset = "0xF1ABF0", VA = "0xF1ABF0", Slot = "16")]
		public override void Pause(Response response, Table arguments)
		{
		}

		[Token(Token = "0x60015D2")]
		[Address(RVA = "0xF1ACB0", Offset = "0xF1ACB0", VA = "0xF1ACB0", Slot = "18")]
		public override void Scopes(Response response, Table arguments)
		{
		}

		[Token(Token = "0x60015D3")]
		[Address(RVA = "0xF1AEFC", Offset = "0xF1AEFC", VA = "0xF1AEFC", Slot = "11")]
		public override void SetBreakpoints(Response response, Table args)
		{
		}

		[Token(Token = "0x60015D4")]
		[Address(RVA = "0xF1B480", Offset = "0xF1B480", VA = "0xF1B480", Slot = "17")]
		public override void StackTrace(Response response, Table args)
		{
		}

		[Token(Token = "0x60015D5")]
		[Address(RVA = "0xF1989C", Offset = "0xF1989C", VA = "0xF1989C")]
		private int getInt(Table args, string propName, int defaultValue)
		{
			return default(int);
		}

		[Token(Token = "0x60015D6")]
		[Address(RVA = "0xF1BAF8", Offset = "0xF1BAF8", VA = "0xF1BAF8", Slot = "14")]
		public override void StepIn(Response response, Table arguments)
		{
		}

		[Token(Token = "0x60015D7")]
		[Address(RVA = "0xF1BB84", Offset = "0xF1BB84", VA = "0xF1BB84", Slot = "15")]
		public override void StepOut(Response response, Table arguments)
		{
		}

		[Token(Token = "0x60015D8")]
		[Address(RVA = "0xF1BC10", Offset = "0xF1BC10", VA = "0xF1BC10", Slot = "21")]
		public override void Threads(Response response, Table arguments)
		{
		}

		[Token(Token = "0x60015D9")]
		[Address(RVA = "0xF1BD7C", Offset = "0xF1BD7C", VA = "0xF1BD7C", Slot = "19")]
		public override void Variables(Response response, Table arguments)
		{
		}

		[Token(Token = "0x60015DA")]
		[Address(RVA = "0xF1D850", Offset = "0xF1D850", VA = "0xF1D850", Slot = "23")]
		private void MoonSharp.VsCodeDebugger.DebuggerLogic.IAsyncDebuggerClient.SendStopEvent()
		{
		}

		[Token(Token = "0x60015DB")]
		[Address(RVA = "0xF1D8A4", Offset = "0xF1D8A4", VA = "0xF1D8A4", Slot = "24")]
		private void MoonSharp.VsCodeDebugger.DebuggerLogic.IAsyncDebuggerClient.OnWatchesUpdated(WatchType watchType)
		{
		}

		[Token(Token = "0x60015DC")]
		[Address(RVA = "0xF1D920", Offset = "0xF1D920", VA = "0xF1D920", Slot = "25")]
		private void MoonSharp.VsCodeDebugger.DebuggerLogic.IAsyncDebuggerClient.OnSourceCodeChanged(int sourceID)
		{
		}

		[Token(Token = "0x60015DD")]
		[Address(RVA = "0xF1DAD0", Offset = "0xF1DAD0", VA = "0xF1DAD0", Slot = "26")]
		public void OnExecutionEnded()
		{
		}

		[Token(Token = "0x60015DE")]
		[Address(RVA = "0xF192D8", Offset = "0xF192D8", VA = "0xF192D8")]
		private void SendText(string msg, params object[] args)
		{
		}

		[Token(Token = "0x60015DF")]
		[Address(RVA = "0xF1DB80", Offset = "0xF1DB80", VA = "0xF1DB80", Slot = "27")]
		public void OnException(ScriptRuntimeException ex)
		{
		}

		[Token(Token = "0x60015E0")]
		[Address(RVA = "0xF1A9B8", Offset = "0xF1A9B8", VA = "0xF1A9B8", Slot = "28")]
		public void Unbind()
		{
		}
	}
	[Token(Token = "0x20002E6")]
	internal static class VariableInspector
	{
		[Token(Token = "0x60015E2")]
		[Address(RVA = "0xF1C21C", Offset = "0xF1C21C", VA = "0xF1C21C")]
		internal static void InspectVariable(DynValue v, List<Variable> variables)
		{
		}
	}
}
namespace ES3Types
{
	[Token(Token = "0x20002E7")]
	[Preserve]
	public class ES3Type_ES3Prefab : ES3Type
	{
		[Token(Token = "0x4000DF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60015E3")]
		[Address(RVA = "0xF1DCC0", Offset = "0xF1DCC0", VA = "0xF1DCC0")]
		public ES3Type_ES3Prefab()
		{
		}

		[Token(Token = "0x60015E4")]
		[Address(RVA = "0xF1DE34", Offset = "0xF1DE34", VA = "0xF1DE34", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60015E5")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x20002E8")]
	public class ES3Type_ES3PrefabInternal : ES3Type
	{
		[Token(Token = "0x4000DF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60015E6")]
		[Address(RVA = "0xF1DE38", Offset = "0xF1DE38", VA = "0xF1DE38")]
		public ES3Type_ES3PrefabInternal()
		{
		}

		[Token(Token = "0x60015E7")]
		[Address(RVA = "0xF1DEFC", Offset = "0xF1DEFC", VA = "0xF1DEFC", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60015E8")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x60015E9")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20002E9")]
	public class ES32DArrayType : ES3CollectionType
	{
		[Token(Token = "0x60015EB")]
		[Address(RVA = "0xF1E080", Offset = "0xF1E080", VA = "0xF1E080")]
		public ES32DArrayType(Type type)
		{
		}

		[Token(Token = "0x60015EC")]
		[Address(RVA = "0xF1E170", Offset = "0xF1E170", VA = "0xF1E170", Slot = "9")]
		public override void Write(object obj, ES3Writer writer, ES3.ReferenceMode unityObjectType)
		{
		}

		[Token(Token = "0x60015ED")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x60015EE")]
		[Address(RVA = "0xF1E38C", Offset = "0xF1E38C", VA = "0xF1E38C", Slot = "7")]
		public override object Read(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x60015EF")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x60015F0")]
		[Address(RVA = "0xF1E5E0", Offset = "0xF1E5E0", VA = "0xF1E5E0", Slot = "8")]
		public override void ReadInto(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20002EA")]
	public class ES33DArrayType : ES3CollectionType
	{
		[Token(Token = "0x60015F1")]
		[Address(RVA = "0xF1E8C4", Offset = "0xF1E8C4", VA = "0xF1E8C4")]
		public ES33DArrayType(Type type)
		{
		}

		[Token(Token = "0x60015F2")]
		[Address(RVA = "0xF1E8C8", Offset = "0xF1E8C8", VA = "0xF1E8C8", Slot = "9")]
		public override void Write(object obj, ES3Writer writer, ES3.ReferenceMode memberReferenceMode)
		{
		}

		[Token(Token = "0x60015F3")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x60015F4")]
		[Address(RVA = "0xF1EB74", Offset = "0xF1EB74", VA = "0xF1EB74", Slot = "7")]
		public override object Read(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x60015F5")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x60015F6")]
		[Address(RVA = "0xF1EE88", Offset = "0xF1EE88", VA = "0xF1EE88", Slot = "8")]
		public override void ReadInto(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20002EB")]
	[Preserve]
	public class ES3ArrayType : ES3CollectionType
	{
		[Token(Token = "0x60015F7")]
		[Address(RVA = "0xF1F204", Offset = "0xF1F204", VA = "0xF1F204")]
		public ES3ArrayType(Type type)
		{
		}

		[Token(Token = "0x60015F8")]
		[Address(RVA = "0xF1F208", Offset = "0xF1F208", VA = "0xF1F208")]
		public ES3ArrayType(Type type, ES3Type elementType)
		{
		}

		[Token(Token = "0x60015F9")]
		[Address(RVA = "0xF1F278", Offset = "0xF1F278", VA = "0xF1F278", Slot = "9")]
		public override void Write(object obj, ES3Writer writer, ES3.ReferenceMode memberReferenceMode)
		{
		}

		[Token(Token = "0x60015FA")]
		[Address(RVA = "0xF1F3F4", Offset = "0xF1F3F4", VA = "0xF1F3F4", Slot = "7")]
		public override object Read(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x60015FB")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x60015FC")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x60015FD")]
		[Address(RVA = "0xF1F650", Offset = "0xF1F650", VA = "0xF1F650", Slot = "8")]
		public override void ReadInto(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20002EC")]
	[Preserve]
	public abstract class ES3CollectionType : ES3Type
	{
		[Token(Token = "0x4000DF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ES3Type elementType;

		[Token(Token = "0x60015FE")]
		public abstract object Read(ES3Reader reader);

		[Token(Token = "0x60015FF")]
		public abstract void ReadInto(ES3Reader reader, object obj);

		[Token(Token = "0x6001600")]
		public abstract void Write(object obj, ES3Writer writer, ES3.ReferenceMode memberReferenceMode);

		[Token(Token = "0x6001601")]
		[Address(RVA = "0xF1E084", Offset = "0xF1E084", VA = "0xF1E084")]
		public ES3CollectionType(Type type)
		{
		}

		[Token(Token = "0x6001602")]
		[Address(RVA = "0xF1F240", Offset = "0xF1F240", VA = "0xF1F240")]
		public ES3CollectionType(Type type, ES3Type elementType)
		{
		}

		[Token(Token = "0x6001603")]
		[Address(RVA = "0xF1FC94", Offset = "0xF1FC94", VA = "0xF1FC94", Slot = "4")]
		[Preserve]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001604")]
		protected virtual bool ReadICollection<T>(ES3Reader reader, ICollection<T> collection, ES3Type elementType)
		{
			return default(bool);
		}

		[Token(Token = "0x6001605")]
		protected virtual void ReadICollectionInto<T>(ES3Reader reader, ICollection<T> collection, ES3Type elementType)
		{
		}

		[Token(Token = "0x6001606")]
		[Address(RVA = "0xF1FCA4", Offset = "0xF1FCA4", VA = "0xF1FCA4", Slot = "12")]
		[Preserve]
		protected virtual void ReadICollectionInto(ES3Reader reader, ICollection collection, ES3Type elementType)
		{
		}
	}
	[Token(Token = "0x20002ED")]
	[Preserve]
	public class ES3DictionaryType : ES3Type
	{
		[Token(Token = "0x4000DF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ES3Type keyType;

		[Token(Token = "0x4000DF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public ES3Type valueType;

		[Token(Token = "0x4000DF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected ES3Reflection.ES3ReflectedMethod readMethod;

		[Token(Token = "0x4000DF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected ES3Reflection.ES3ReflectedMethod readIntoMethod;

		[Token(Token = "0x6001607")]
		[Address(RVA = "0xF20210", Offset = "0xF20210", VA = "0xF20210")]
		public ES3DictionaryType(Type type)
		{
		}

		[Token(Token = "0x6001608")]
		[Address(RVA = "0xF20334", Offset = "0xF20334", VA = "0xF20334")]
		public ES3DictionaryType(Type type, ES3Type keyType, ES3Type valueType)
		{
		}

		[Token(Token = "0x6001609")]
		[Address(RVA = "0xF20390", Offset = "0xF20390", VA = "0xF20390", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x600160A")]
		[Address(RVA = "0xF203B0", Offset = "0xF203B0", VA = "0xF203B0")]
		public void Write(object obj, ES3Writer writer, ES3.ReferenceMode memberReferenceMode)
		{
		}

		[Token(Token = "0x600160B")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x600160C")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x600160D")]
		[Address(RVA = "0xF207F8", Offset = "0xF207F8", VA = "0xF207F8")]
		public object Read(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x600160E")]
		[Address(RVA = "0xF20A30", Offset = "0xF20A30", VA = "0xF20A30")]
		public void ReadInto(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20002EE")]
	[Preserve]
	public class ES3HashSetType : ES3CollectionType
	{
		[Token(Token = "0x600160F")]
		[Address(RVA = "0xF20D98", Offset = "0xF20D98", VA = "0xF20D98")]
		public ES3HashSetType(Type type)
		{
		}

		[Token(Token = "0x6001610")]
		[Address(RVA = "0xF20D9C", Offset = "0xF20D9C", VA = "0xF20D9C", Slot = "9")]
		public override void Write(object obj, ES3Writer writer, ES3.ReferenceMode memberReferenceMode)
		{
		}

		[Token(Token = "0x6001611")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6001612")]
		[Address(RVA = "0xF213F8", Offset = "0xF213F8", VA = "0xF213F8", Slot = "7")]
		public override object Read(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6001613")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x6001614")]
		[Address(RVA = "0xF216C8", Offset = "0xF216C8", VA = "0xF216C8", Slot = "8")]
		public override void ReadInto(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20002EF")]
	[Preserve]
	public class ES3ListType : ES3CollectionType
	{
		[Token(Token = "0x6001615")]
		[Address(RVA = "0xF21718", Offset = "0xF21718", VA = "0xF21718")]
		public ES3ListType(Type type)
		{
		}

		[Token(Token = "0x6001616")]
		[Address(RVA = "0xF2171C", Offset = "0xF2171C", VA = "0xF2171C")]
		public ES3ListType(Type type, ES3Type elementType)
		{
		}

		[Token(Token = "0x6001617")]
		[Address(RVA = "0xF21754", Offset = "0xF21754", VA = "0xF21754", Slot = "9")]
		public override void Write(object obj, ES3Writer writer, ES3.ReferenceMode memberReferenceMode)
		{
		}

		[Token(Token = "0x6001618")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6001619")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x600161A")]
		[Address(RVA = "0xF21B84", Offset = "0xF21B84", VA = "0xF21B84", Slot = "7")]
		public override object Read(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x600161B")]
		[Address(RVA = "0xF21D64", Offset = "0xF21D64", VA = "0xF21D64", Slot = "8")]
		public override void ReadInto(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20002F0")]
	[Preserve]
	public class ES3QueueType : ES3CollectionType
	{
		[Token(Token = "0x600161C")]
		[Address(RVA = "0xF2231C", Offset = "0xF2231C", VA = "0xF2231C")]
		public ES3QueueType(Type type)
		{
		}

		[Token(Token = "0x600161D")]
		[Address(RVA = "0xF22320", Offset = "0xF22320", VA = "0xF22320", Slot = "9")]
		public override void Write(object obj, ES3Writer writer, ES3.ReferenceMode memberReferenceMode)
		{
		}

		[Token(Token = "0x600161E")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x600161F")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x6001620")]
		[Address(RVA = "0xF2272C", Offset = "0xF2272C", VA = "0xF2272C", Slot = "7")]
		public override object Read(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6001621")]
		[Address(RVA = "0xF229FC", Offset = "0xF229FC", VA = "0xF229FC", Slot = "8")]
		public override void ReadInto(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20002F1")]
	[Preserve]
	public class ES3StackType : ES3CollectionType
	{
		[Token(Token = "0x6001622")]
		[Address(RVA = "0xF22F90", Offset = "0xF22F90", VA = "0xF22F90")]
		public ES3StackType(Type type)
		{
		}

		[Token(Token = "0x6001623")]
		[Address(RVA = "0xF22F94", Offset = "0xF22F94", VA = "0xF22F94", Slot = "9")]
		public override void Write(object obj, ES3Writer writer, ES3.ReferenceMode memberReferenceMode)
		{
		}

		[Token(Token = "0x6001624")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6001625")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x6001626")]
		[Address(RVA = "0xF233A0", Offset = "0xF233A0", VA = "0xF233A0", Slot = "7")]
		public override object Read(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6001627")]
		[Address(RVA = "0xF237C4", Offset = "0xF237C4", VA = "0xF237C4", Slot = "8")]
		public override void ReadInto(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20002F3")]
	[Preserve]
	public abstract class ES3ComponentType : ES3UnityObjectType
	{
		[Token(Token = "0x4000DFC")]
		protected const string gameObjectPropertyName = "goID";

		[Token(Token = "0x600162B")]
		[Address(RVA = "0xF23DF8", Offset = "0xF23DF8", VA = "0xF23DF8")]
		public ES3ComponentType(Type type)
		{
		}

		[Token(Token = "0x600162C")]
		protected abstract void WriteComponent(object obj, ES3Writer writer);

		[Token(Token = "0x600162D")]
		protected abstract void ReadComponent<T>(ES3Reader reader, object obj);

		[Token(Token = "0x600162E")]
		[Address(RVA = "0xF23E38", Offset = "0xF23E38", VA = "0xF23E38", Slot = "10")]
		protected override void WriteUnityObject(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x600162F")]
		protected override void ReadUnityObject<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x6001630")]
		protected override object ReadUnityObject<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6001631")]
		protected override object ReadObject<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6001632")]
		[Address(RVA = "0xF240B4", Offset = "0xF240B4", VA = "0xF240B4")]
		private static UnityEngine.Component GetOrAddComponent(GameObject go, Type type)
		{
			return null;
		}

		[Token(Token = "0x6001633")]
		[Address(RVA = "0xF24158", Offset = "0xF24158", VA = "0xF24158")]
		public static UnityEngine.Component CreateComponent(Type type)
		{
			return null;
		}
	}
	[Token(Token = "0x20002F4")]
	[Preserve]
	public abstract class ES3ObjectType : ES3Type
	{
		[Token(Token = "0x6001634")]
		[Address(RVA = "0xF24254", Offset = "0xF24254", VA = "0xF24254")]
		public ES3ObjectType(Type type)
		{
		}

		[Token(Token = "0x6001635")]
		protected abstract void WriteObject(object obj, ES3Writer writer);

		[Token(Token = "0x6001636")]
		protected abstract object ReadObject<T>(ES3Reader reader);

		[Token(Token = "0x6001637")]
		protected virtual void ReadObject<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x6001638")]
		[Address(RVA = "0xF24258", Offset = "0xF24258", VA = "0xF24258", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001639")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x600163A")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20002F5")]
	[Preserve]
	public abstract class ES3ScriptableObjectType : ES3UnityObjectType
	{
		[Token(Token = "0x600163B")]
		[Address(RVA = "0xF24508", Offset = "0xF24508", VA = "0xF24508")]
		public ES3ScriptableObjectType(Type type)
		{
		}

		[Token(Token = "0x600163C")]
		protected abstract void WriteScriptableObject(object obj, ES3Writer writer);

		[Token(Token = "0x600163D")]
		protected abstract void ReadScriptableObject<T>(ES3Reader reader, object obj);

		[Token(Token = "0x600163E")]
		[Address(RVA = "0xF24528", Offset = "0xF24528", VA = "0xF24528", Slot = "10")]
		protected override void WriteUnityObject(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x600163F")]
		protected override void ReadUnityObject<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x6001640")]
		protected override object ReadUnityObject<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6001641")]
		protected override object ReadObject<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x20002F6")]
	[Preserve]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public abstract class ES3Type
	{
		[Token(Token = "0x4000DFD")]
		public const string typeFieldName = "__type";

		[Token(Token = "0x4000DFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ES3Member[] members;

		[Token(Token = "0x4000DFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Type type;

		[Token(Token = "0x4000E00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool isPrimitive;

		[Token(Token = "0x4000E01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool isValueType;

		[Token(Token = "0x4000E02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		public bool isCollection;

		[Token(Token = "0x4000E03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x23")]
		public bool isDictionary;

		[Token(Token = "0x4000E04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool isEnum;

		[Token(Token = "0x4000E05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		public bool isES3TypeUnityObject;

		[Token(Token = "0x4000E06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
		public bool isReflectedType;

		[Token(Token = "0x4000E07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x27")]
		public bool isUnsupported;

		[Token(Token = "0x4000E08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int priority;

		[Token(Token = "0x6001642")]
		[Address(RVA = "0xF1DD74", Offset = "0xF1DD74", VA = "0xF1DD74")]
		protected ES3Type(Type type)
		{
		}

		[Token(Token = "0x6001643")]
		public abstract void Write(object obj, ES3Writer writer);

		[Token(Token = "0x6001644")]
		public abstract object Read<T>(ES3Reader reader);

		[Token(Token = "0x6001645")]
		public virtual void ReadInto<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x6001646")]
		[Address(RVA = "0xF24408", Offset = "0xF24408", VA = "0xF24408")]
		protected bool WriteUsingDerivedType(object obj, ES3Writer writer)
		{
			return default(bool);
		}

		[Token(Token = "0x6001647")]
		protected void ReadUsingDerivedType<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x6001648")]
		[Address(RVA = "0xF246A8", Offset = "0xF246A8", VA = "0xF246A8")]
		internal string ReadPropertyName(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6001649")]
		[Address(RVA = "0xF246F4", Offset = "0xF246F4", VA = "0xF246F4")]
		protected void WriteProperties(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x600164A")]
		[Address(RVA = "0xF24834", Offset = "0xF24834", VA = "0xF24834")]
		protected object ReadProperties(ES3Reader reader, object obj)
		{
			return null;
		}

		[Token(Token = "0x600164B")]
		[Address(RVA = "0xF24828", Offset = "0xF24828", VA = "0xF24828")]
		protected void GetMembers(bool safe)
		{
		}

		[Token(Token = "0x600164C")]
		[Address(RVA = "0xF263A4", Offset = "0xF263A4", VA = "0xF263A4")]
		protected void GetMembers(bool safe, string[] memberNames)
		{
		}
	}
	[Token(Token = "0x20002F7")]
	[AttributeUsage(AttributeTargets.Class)]
	public class ES3PropertiesAttribute : Attribute
	{
		[Token(Token = "0x4000E09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string[] members;

		[Token(Token = "0x600164D")]
		[Address(RVA = "0xF26544", Offset = "0xF26544", VA = "0xF26544")]
		public ES3PropertiesAttribute(params string[] members)
		{
		}
	}
	[Token(Token = "0x20002F8")]
	[Preserve]
	public abstract class ES3UnityObjectType : ES3ObjectType
	{
		[Token(Token = "0x600164E")]
		[Address(RVA = "0xF23E18", Offset = "0xF23E18", VA = "0xF23E18")]
		public ES3UnityObjectType(Type type)
		{
		}

		[Token(Token = "0x600164F")]
		protected abstract void WriteUnityObject(object obj, ES3Writer writer);

		[Token(Token = "0x6001650")]
		protected abstract void ReadUnityObject<T>(ES3Reader reader, object obj);

		[Token(Token = "0x6001651")]
		protected abstract object ReadUnityObject<T>(ES3Reader reader);

		[Token(Token = "0x6001652")]
		[Address(RVA = "0xF26574", Offset = "0xF26574", VA = "0xF26574", Slot = "7")]
		protected override void WriteObject(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001653")]
		[Address(RVA = "0xF26588", Offset = "0xF26588", VA = "0xF26588", Slot = "13")]
		public virtual void WriteObject(object obj, ES3Writer writer, ES3.ReferenceMode mode)
		{
		}

		[Token(Token = "0x6001654")]
		protected override void ReadObject<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x6001655")]
		protected override object ReadObject<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6001656")]
		[Address(RVA = "0xF267F0", Offset = "0xF267F0", VA = "0xF267F0")]
		protected bool WriteUsingDerivedType(object obj, ES3Writer writer, ES3.ReferenceMode mode)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20002F9")]
	[Preserve]
	[ES3Properties(new string[] { "bytes" })]
	public class ES3Type_BigInteger : ES3Type
	{
		[Token(Token = "0x4000E0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001657")]
		[Address(RVA = "0xF2694C", Offset = "0xF2694C", VA = "0xF2694C")]
		public ES3Type_BigInteger()
		{
		}

		[Token(Token = "0x6001658")]
		[Address(RVA = "0xF26A00", Offset = "0xF26A00", VA = "0xF26A00", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001659")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x20002FA")]
	public class ES3Type_BigIntegerArray : ES3ArrayType
	{
		[Token(Token = "0x4000E0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x600165A")]
		[Address(RVA = "0xF26AE4", Offset = "0xF26AE4", VA = "0xF26AE4")]
		public ES3Type_BigIntegerArray()
		{
		}
	}
	[Token(Token = "0x20002FB")]
	[Preserve]
	public class ES3Type_bool : ES3Type
	{
		[Token(Token = "0x4000E0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x600165B")]
		[Address(RVA = "0xF26BD0", Offset = "0xF26BD0", VA = "0xF26BD0")]
		public ES3Type_bool()
		{
		}

		[Token(Token = "0x600165C")]
		[Address(RVA = "0xF26C8C", Offset = "0xF26C8C", VA = "0xF26C8C", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x600165D")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x20002FC")]
	public class ES3Type_boolArray : ES3ArrayType
	{
		[Token(Token = "0x4000E0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x600165E")]
		[Address(RVA = "0xF26D14", Offset = "0xF26D14", VA = "0xF26D14")]
		public ES3Type_boolArray()
		{
		}
	}
	[Token(Token = "0x20002FD")]
	[Preserve]
	public class ES3Type_byte : ES3Type
	{
		[Token(Token = "0x4000E0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x600165F")]
		[Address(RVA = "0xF26E00", Offset = "0xF26E00", VA = "0xF26E00")]
		public ES3Type_byte()
		{
		}

		[Token(Token = "0x6001660")]
		[Address(RVA = "0xF26EBC", Offset = "0xF26EBC", VA = "0xF26EBC", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001661")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x20002FE")]
	[Preserve]
	public class ES3Type_byteArray : ES3Type
	{
		[Token(Token = "0x4000E0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001662")]
		[Address(RVA = "0xF26F44", Offset = "0xF26F44", VA = "0xF26F44")]
		public ES3Type_byteArray()
		{
		}

		[Token(Token = "0x6001663")]
		[Address(RVA = "0xF27000", Offset = "0xF27000", VA = "0xF27000", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001664")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x20002FF")]
	[Preserve]
	public class ES3Type_char : ES3Type
	{
		[Token(Token = "0x4000E10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001665")]
		[Address(RVA = "0xF27088", Offset = "0xF27088", VA = "0xF27088")]
		public ES3Type_char()
		{
		}

		[Token(Token = "0x6001666")]
		[Address(RVA = "0xF27144", Offset = "0xF27144", VA = "0xF27144", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001667")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000300")]
	public class ES3Type_charArray : ES3ArrayType
	{
		[Token(Token = "0x4000E11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001668")]
		[Address(RVA = "0xF271CC", Offset = "0xF271CC", VA = "0xF271CC")]
		public ES3Type_charArray()
		{
		}
	}
	[Token(Token = "0x2000301")]
	[Preserve]
	public class ES3Type_DateTime : ES3Type
	{
		[Token(Token = "0x4000E12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001669")]
		[Address(RVA = "0xF272B8", Offset = "0xF272B8", VA = "0xF272B8")]
		public ES3Type_DateTime()
		{
		}

		[Token(Token = "0x600166A")]
		[Address(RVA = "0xF2736C", Offset = "0xF2736C", VA = "0xF2736C", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x600166B")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000302")]
	public class ES3Type_DateTimeArray : ES3ArrayType
	{
		[Token(Token = "0x4000E13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x600166C")]
		[Address(RVA = "0xF2747C", Offset = "0xF2747C", VA = "0xF2747C")]
		public ES3Type_DateTimeArray()
		{
		}
	}
	[Token(Token = "0x2000303")]
	[Preserve]
	public class ES3Type_decimal : ES3Type
	{
		[Token(Token = "0x4000E14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x600166D")]
		[Address(RVA = "0xF27568", Offset = "0xF27568", VA = "0xF27568")]
		public ES3Type_decimal()
		{
		}

		[Token(Token = "0x600166E")]
		[Address(RVA = "0xF27624", Offset = "0xF27624", VA = "0xF27624", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x600166F")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000304")]
	public class ES3Type_decimalArray : ES3ArrayType
	{
		[Token(Token = "0x4000E15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001670")]
		[Address(RVA = "0xF276AC", Offset = "0xF276AC", VA = "0xF276AC")]
		public ES3Type_decimalArray()
		{
		}
	}
	[Token(Token = "0x2000305")]
	[Preserve]
	public class ES3Type_double : ES3Type
	{
		[Token(Token = "0x4000E16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001671")]
		[Address(RVA = "0xF27798", Offset = "0xF27798", VA = "0xF27798")]
		public ES3Type_double()
		{
		}

		[Token(Token = "0x6001672")]
		[Address(RVA = "0xF27854", Offset = "0xF27854", VA = "0xF27854", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001673")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000306")]
	public class ES3Type_doubleArray : ES3ArrayType
	{
		[Token(Token = "0x4000E17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001674")]
		[Address(RVA = "0xF278DC", Offset = "0xF278DC", VA = "0xF278DC")]
		public ES3Type_doubleArray()
		{
		}
	}
	[Token(Token = "0x2000307")]
	[Preserve]
	public class ES3Type_enum : ES3Type
	{
		[Token(Token = "0x4000E18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x4000E19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Type underlyingType;

		[Token(Token = "0x6001675")]
		[Address(RVA = "0xF279C8", Offset = "0xF279C8", VA = "0xF279C8")]
		public ES3Type_enum(Type type)
		{
		}

		[Token(Token = "0x6001676")]
		[Address(RVA = "0xF27A84", Offset = "0xF27A84", VA = "0xF27A84", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001677")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000308")]
	[Preserve]
	public class ES3Type_ES3Ref : ES3Type
	{
		[Token(Token = "0x4000E1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001678")]
		[Address(RVA = "0xF28500", Offset = "0xF28500", VA = "0xF28500")]
		public ES3Type_ES3Ref()
		{
		}

		[Token(Token = "0x6001679")]
		[Address(RVA = "0xF285CC", Offset = "0xF285CC", VA = "0xF285CC", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x600167A")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000309")]
	public class ES3Type_ES3RefArray : ES3ArrayType
	{
		[Token(Token = "0x4000E1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x600167C")]
		[Address(RVA = "0xF286E4", Offset = "0xF286E4", VA = "0xF286E4")]
		public ES3Type_ES3RefArray()
		{
		}
	}
	[Token(Token = "0x200030A")]
	public class ES3Type_ES3RefDictionary : ES3DictionaryType
	{
		[Token(Token = "0x4000E1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x600167E")]
		[Address(RVA = "0xF28868", Offset = "0xF28868", VA = "0xF28868")]
		public ES3Type_ES3RefDictionary()
		{
		}
	}
	[Token(Token = "0x200030B")]
	[Preserve]
	public class ES3Type_float : ES3Type
	{
		[Token(Token = "0x4000E1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001680")]
		[Address(RVA = "0xF289D4", Offset = "0xF289D4", VA = "0xF289D4")]
		public ES3Type_float()
		{
		}

		[Token(Token = "0x6001681")]
		[Address(RVA = "0xF28A90", Offset = "0xF28A90", VA = "0xF28A90", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001682")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x200030C")]
	public class ES3Type_floatArray : ES3ArrayType
	{
		[Token(Token = "0x4000E1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001683")]
		[Address(RVA = "0xF28B18", Offset = "0xF28B18", VA = "0xF28B18")]
		public ES3Type_floatArray()
		{
		}
	}
	[Token(Token = "0x200030D")]
	[Preserve]
	public class ES3Type_int : ES3Type
	{
		[Token(Token = "0x4000E1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001684")]
		[Address(RVA = "0xF28C04", Offset = "0xF28C04", VA = "0xF28C04")]
		public ES3Type_int()
		{
		}

		[Token(Token = "0x6001685")]
		[Address(RVA = "0xF28CC0", Offset = "0xF28CC0", VA = "0xF28CC0", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001686")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x200030E")]
	public class ES3Type_intArray : ES3ArrayType
	{
		[Token(Token = "0x4000E20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001687")]
		[Address(RVA = "0xF28D48", Offset = "0xF28D48", VA = "0xF28D48")]
		public ES3Type_intArray()
		{
		}
	}
	[Token(Token = "0x200030F")]
	[Preserve]
	public class ES3Type_IntPtr : ES3Type
	{
		[Token(Token = "0x4000E21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001688")]
		[Address(RVA = "0xF28E34", Offset = "0xF28E34", VA = "0xF28E34")]
		public ES3Type_IntPtr()
		{
		}

		[Token(Token = "0x6001689")]
		[Address(RVA = "0xF28EF0", Offset = "0xF28EF0", VA = "0xF28EF0", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x600168A")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000310")]
	public class ES3Type_IntPtrArray : ES3ArrayType
	{
		[Token(Token = "0x4000E22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x600168B")]
		[Address(RVA = "0xF28F84", Offset = "0xF28F84", VA = "0xF28F84")]
		public ES3Type_IntPtrArray()
		{
		}
	}
	[Token(Token = "0x2000311")]
	[Preserve]
	public class ES3Type_long : ES3Type
	{
		[Token(Token = "0x4000E23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x600168C")]
		[Address(RVA = "0xF29070", Offset = "0xF29070", VA = "0xF29070")]
		public ES3Type_long()
		{
		}

		[Token(Token = "0x600168D")]
		[Address(RVA = "0xF2912C", Offset = "0xF2912C", VA = "0xF2912C", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x600168E")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000312")]
	public class ES3Type_longArray : ES3ArrayType
	{
		[Token(Token = "0x4000E24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x600168F")]
		[Address(RVA = "0xF291B4", Offset = "0xF291B4", VA = "0xF291B4")]
		public ES3Type_longArray()
		{
		}
	}
	[Token(Token = "0x2000313")]
	[Preserve]
	public class ES3Type_sbyte : ES3Type
	{
		[Token(Token = "0x4000E25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001690")]
		[Address(RVA = "0xF292A0", Offset = "0xF292A0", VA = "0xF292A0")]
		public ES3Type_sbyte()
		{
		}

		[Token(Token = "0x6001691")]
		[Address(RVA = "0xF2935C", Offset = "0xF2935C", VA = "0xF2935C", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001692")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000314")]
	public class ES3Type_sbyteArray : ES3ArrayType
	{
		[Token(Token = "0x4000E26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001693")]
		[Address(RVA = "0xF293E4", Offset = "0xF293E4", VA = "0xF293E4")]
		public ES3Type_sbyteArray()
		{
		}
	}
	[Token(Token = "0x2000315")]
	[Preserve]
	public class ES3Type_short : ES3Type
	{
		[Token(Token = "0x4000E27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001694")]
		[Address(RVA = "0xF294D0", Offset = "0xF294D0", VA = "0xF294D0")]
		public ES3Type_short()
		{
		}

		[Token(Token = "0x6001695")]
		[Address(RVA = "0xF2958C", Offset = "0xF2958C", VA = "0xF2958C", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001696")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000316")]
	public class ES3Type_shortArray : ES3ArrayType
	{
		[Token(Token = "0x4000E28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001697")]
		[Address(RVA = "0xF29614", Offset = "0xF29614", VA = "0xF29614")]
		public ES3Type_shortArray()
		{
		}
	}
	[Token(Token = "0x2000317")]
	[Preserve]
	public class ES3Type_string : ES3Type
	{
		[Token(Token = "0x4000E29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001698")]
		[Address(RVA = "0xF29700", Offset = "0xF29700", VA = "0xF29700")]
		public ES3Type_string()
		{
		}

		[Token(Token = "0x6001699")]
		[Address(RVA = "0xF297BC", Offset = "0xF297BC", VA = "0xF297BC", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x600169A")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000318")]
	public class ES3Type_StringArray : ES3ArrayType
	{
		[Token(Token = "0x4000E2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x600169B")]
		[Address(RVA = "0xF29838", Offset = "0xF29838", VA = "0xF29838")]
		public ES3Type_StringArray()
		{
		}
	}
	[Token(Token = "0x2000319")]
	[Preserve]
	public class ES3Type_uint : ES3Type
	{
		[Token(Token = "0x4000E2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x600169C")]
		[Address(RVA = "0xF29924", Offset = "0xF29924", VA = "0xF29924")]
		public ES3Type_uint()
		{
		}

		[Token(Token = "0x600169D")]
		[Address(RVA = "0xF299E0", Offset = "0xF299E0", VA = "0xF299E0", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x600169E")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x200031A")]
	public class ES3Type_uintArray : ES3ArrayType
	{
		[Token(Token = "0x4000E2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x600169F")]
		[Address(RVA = "0xF29A68", Offset = "0xF29A68", VA = "0xF29A68")]
		public ES3Type_uintArray()
		{
		}
	}
	[Token(Token = "0x200031B")]
	[Preserve]
	public class ES3Type_UIntPtr : ES3Type
	{
		[Token(Token = "0x4000E2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60016A0")]
		[Address(RVA = "0xF29B54", Offset = "0xF29B54", VA = "0xF29B54")]
		public ES3Type_UIntPtr()
		{
		}

		[Token(Token = "0x60016A1")]
		[Address(RVA = "0xF29C10", Offset = "0xF29C10", VA = "0xF29C10", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60016A2")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x200031C")]
	public class ES3Type_UIntPtrArray : ES3ArrayType
	{
		[Token(Token = "0x4000E2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60016A3")]
		[Address(RVA = "0xF29C98", Offset = "0xF29C98", VA = "0xF29C98")]
		public ES3Type_UIntPtrArray()
		{
		}
	}
	[Token(Token = "0x200031D")]
	[Preserve]
	public class ES3Type_ulong : ES3Type
	{
		[Token(Token = "0x4000E2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60016A4")]
		[Address(RVA = "0xF29D84", Offset = "0xF29D84", VA = "0xF29D84")]
		public ES3Type_ulong()
		{
		}

		[Token(Token = "0x60016A5")]
		[Address(RVA = "0xF29E40", Offset = "0xF29E40", VA = "0xF29E40", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60016A6")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x200031E")]
	public class ES3Type_ulongArray : ES3ArrayType
	{
		[Token(Token = "0x4000E30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60016A7")]
		[Address(RVA = "0xF29EC8", Offset = "0xF29EC8", VA = "0xF29EC8")]
		public ES3Type_ulongArray()
		{
		}
	}
	[Token(Token = "0x200031F")]
	[Preserve]
	public class ES3Type_ushort : ES3Type
	{
		[Token(Token = "0x4000E31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60016A8")]
		[Address(RVA = "0xF29FB4", Offset = "0xF29FB4", VA = "0xF29FB4")]
		public ES3Type_ushort()
		{
		}

		[Token(Token = "0x60016A9")]
		[Address(RVA = "0xF2A070", Offset = "0xF2A070", VA = "0xF2A070", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60016AA")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000320")]
	public class ES3Type_ushortArray : ES3ArrayType
	{
		[Token(Token = "0x4000E32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60016AB")]
		[Address(RVA = "0xF2A0F8", Offset = "0xF2A0F8", VA = "0xF2A0F8")]
		public ES3Type_ushortArray()
		{
		}
	}
	[Token(Token = "0x2000321")]
	[Preserve]
	internal class ES3ReflectedComponentType : ES3ComponentType
	{
		[Token(Token = "0x60016AC")]
		[Address(RVA = "0xF2A1E4", Offset = "0xF2A1E4", VA = "0xF2A1E4")]
		public ES3ReflectedComponentType(Type type)
		{
		}

		[Token(Token = "0x60016AD")]
		[Address(RVA = "0xF2A210", Offset = "0xF2A210", VA = "0xF2A210", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60016AE")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000322")]
	[Preserve]
	internal class ES3ReflectedObjectType : ES3ObjectType
	{
		[Token(Token = "0x60016AF")]
		[Address(RVA = "0xF2A214", Offset = "0xF2A214", VA = "0xF2A214")]
		public ES3ReflectedObjectType(Type type)
		{
		}

		[Token(Token = "0x60016B0")]
		[Address(RVA = "0xF2A23C", Offset = "0xF2A23C", VA = "0xF2A23C", Slot = "7")]
		protected override void WriteObject(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60016B1")]
		protected override object ReadObject<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x60016B2")]
		protected override void ReadObject<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000323")]
	[Preserve]
	internal class ES3ReflectedScriptableObjectType : ES3ScriptableObjectType
	{
		[Token(Token = "0x60016B3")]
		[Address(RVA = "0xF2A240", Offset = "0xF2A240", VA = "0xF2A240")]
		public ES3ReflectedScriptableObjectType(Type type)
		{
		}

		[Token(Token = "0x60016B4")]
		[Address(RVA = "0xF2A26C", Offset = "0xF2A26C", VA = "0xF2A26C", Slot = "14")]
		protected override void WriteScriptableObject(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60016B5")]
		protected override void ReadScriptableObject<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000324")]
	[Preserve]
	internal class ES3ReflectedType : ES3Type
	{
		[Token(Token = "0x60016B6")]
		[Address(RVA = "0xF2A270", Offset = "0xF2A270", VA = "0xF2A270")]
		public ES3ReflectedType(Type type)
		{
		}

		[Token(Token = "0x60016B7")]
		[Address(RVA = "0xF2A28C", Offset = "0xF2A28C", VA = "0xF2A28C")]
		public ES3ReflectedType(Type type, string[] members)
		{
		}

		[Token(Token = "0x60016B8")]
		[Address(RVA = "0xF2A2C0", Offset = "0xF2A2C0", VA = "0xF2A2C0", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60016B9")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x60016BA")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000325")]
	[Preserve]
	internal class ES3ReflectedUnityObjectType : ES3UnityObjectType
	{
		[Token(Token = "0x60016BB")]
		[Address(RVA = "0xF2A644", Offset = "0xF2A644", VA = "0xF2A644")]
		public ES3ReflectedUnityObjectType(Type type)
		{
		}

		[Token(Token = "0x60016BC")]
		[Address(RVA = "0xF2A670", Offset = "0xF2A670", VA = "0xF2A670", Slot = "10")]
		protected override void WriteUnityObject(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60016BD")]
		protected override object ReadUnityObject<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x60016BE")]
		protected override void ReadUnityObject<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000326")]
	[Preserve]
	internal class ES3ReflectedValueType : ES3Type
	{
		[Token(Token = "0x60016BF")]
		[Address(RVA = "0xF2A674", Offset = "0xF2A674", VA = "0xF2A674")]
		public ES3ReflectedValueType(Type type)
		{
		}

		[Token(Token = "0x60016C0")]
		[Address(RVA = "0xF2A69C", Offset = "0xF2A69C", VA = "0xF2A69C", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60016C1")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x60016C2")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000327")]
	[ES3Properties(new string[] { "center", "size", "enabled", "isTrigger", "contactOffset", "sharedMaterial" })]
	[Preserve]
	public class ES3Type_BoxCollider : ES3ComponentType
	{
		[Token(Token = "0x4000E33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60016C3")]
		[Address(RVA = "0xF2A6A0", Offset = "0xF2A6A0", VA = "0xF2A6A0")]
		public ES3Type_BoxCollider()
		{
		}

		[Token(Token = "0x60016C4")]
		[Address(RVA = "0xF2A760", Offset = "0xF2A760", VA = "0xF2A760", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60016C5")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000328")]
	[Preserve]
	[ES3Properties(new string[] { "size", "density", "isTrigger", "usedByEffector", "offset", "sharedMaterial", "enabled" })]
	public class ES3Type_BoxCollider2D : ES3ComponentType
	{
		[Token(Token = "0x4000E34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60016C6")]
		[Address(RVA = "0xF2AA18", Offset = "0xF2AA18", VA = "0xF2AA18")]
		public ES3Type_BoxCollider2D()
		{
		}

		[Token(Token = "0x60016C7")]
		[Address(RVA = "0xF2AAD8", Offset = "0xF2AAD8", VA = "0xF2AAD8", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60016C8")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000329")]
	[ES3Properties(new string[]
	{
		"fieldOfView", "nearClipPlane", "farClipPlane", "renderingPath", "allowHDR", "orthographicSize", "orthographic", "opaqueSortMode", "transparencySortMode", "depth",
		"aspect", "cullingMask", "eventMask", "backgroundColor", "rect", "pixelRect", "worldToCameraMatrix", "projectionMatrix", "nonJitteredProjectionMatrix", "useJitteredProjectionMatrixForTransparentRendering",
		"clearFlags", "stereoSeparation", "stereoConvergence", "cameraType", "stereoTargetEye", "targetDisplay", "useOcclusionCulling", "cullingMatrix", "layerCullSpherical", "depthTextureMode",
		"clearStencilAfterLightingPass", "enabled", "hideFlags"
	})]
	[Preserve]
	public class ES3Type_Camera : ES3ComponentType
	{
		[Token(Token = "0x4000E35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60016C9")]
		[Address(RVA = "0xF2AE20", Offset = "0xF2AE20", VA = "0xF2AE20")]
		public ES3Type_Camera()
		{
		}

		[Token(Token = "0x60016CA")]
		[Address(RVA = "0xF2AEE0", Offset = "0xF2AEE0", VA = "0xF2AEE0", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60016CB")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x200032A")]
	[Preserve]
	[ES3Properties(new string[] { "center", "radius", "height", "direction", "enabled", "isTrigger", "contactOffset", "sharedMaterial" })]
	public class ES3Type_CapsuleCollider : ES3ComponentType
	{
		[Token(Token = "0x4000E36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60016CC")]
		[Address(RVA = "0xF2BA7C", Offset = "0xF2BA7C", VA = "0xF2BA7C")]
		public ES3Type_CapsuleCollider()
		{
		}

		[Token(Token = "0x60016CD")]
		[Address(RVA = "0xF2BB3C", Offset = "0xF2BB3C", VA = "0xF2BB3C", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60016CE")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x200032B")]
	[Preserve]
	public class ES3Type_EventSystem : ES3ComponentType
	{
		[Token(Token = "0x4000E37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60016CF")]
		[Address(RVA = "0xF2BF44", Offset = "0xF2BF44", VA = "0xF2BF44")]
		public ES3Type_EventSystem()
		{
		}

		[Token(Token = "0x60016D0")]
		[Address(RVA = "0xF2C004", Offset = "0xF2C004", VA = "0xF2C004", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60016D1")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x200032C")]
	[Preserve]
	[ES3Properties(new string[]
	{
		"sprite", "overrideSprite", "type", "preserveAspect", "fillCenter", "fillMethod", "fillAmount", "fillClockwise", "fillOrigin", "alphaHitTestMinimumThreshold",
		"useSpriteMesh", "pixelsPerUnitMultiplier", "material", "onCullStateChanged", "maskable", "color", "raycastTarget", "useLegacyMeshGeneration", "useGUILayout", "enabled",
		"hideFlags"
	})]
	public class ES3Type_Image : ES3ComponentType
	{
		[Token(Token = "0x4000E38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60016D2")]
		[Address(RVA = "0xF2C008", Offset = "0xF2C008", VA = "0xF2C008")]
		public ES3Type_Image()
		{
		}

		[Token(Token = "0x60016D3")]
		[Address(RVA = "0xF2C0D0", Offset = "0xF2C0D0", VA = "0xF2C0D0", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60016D4")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x200032D")]
	public class ES3Type_ImageArray : ES3ArrayType
	{
		[Token(Token = "0x4000E39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60016D5")]
		[Address(RVA = "0xF2C8C0", Offset = "0xF2C8C0", VA = "0xF2C8C0")]
		public ES3Type_ImageArray()
		{
		}
	}
	[Token(Token = "0x200032E")]
	[Preserve]
	[ES3Properties(new string[] { "sharedMesh", "convex", "inflateMesh", "skinWidth", "enabled", "isTrigger", "contactOffset", "sharedMaterial" })]
	public class ES3Type_MeshCollider : ES3ComponentType
	{
		[Token(Token = "0x4000E3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60016D6")]
		[Address(RVA = "0xF2C9AC", Offset = "0xF2C9AC", VA = "0xF2C9AC")]
		public ES3Type_MeshCollider()
		{
		}

		[Token(Token = "0x60016D7")]
		[Address(RVA = "0xF2CA6C", Offset = "0xF2CA6C", VA = "0xF2CA6C", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60016D8")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x200032F")]
	public class ES3Type_MeshColliderArray : ES3ArrayType
	{
		[Token(Token = "0x4000E3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60016D9")]
		[Address(RVA = "0xF2CD58", Offset = "0xF2CD58", VA = "0xF2CD58")]
		public ES3Type_MeshColliderArray()
		{
		}
	}
	[Token(Token = "0x2000330")]
	[ES3Properties(new string[] { "sharedMesh" })]
	[Preserve]
	public class ES3Type_MeshFilter : ES3ComponentType
	{
		[Token(Token = "0x4000E3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60016DA")]
		[Address(RVA = "0xF2CE44", Offset = "0xF2CE44", VA = "0xF2CE44")]
		public ES3Type_MeshFilter()
		{
		}

		[Token(Token = "0x60016DB")]
		[Address(RVA = "0xF2CF04", Offset = "0xF2CF04", VA = "0xF2CF04", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60016DC")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000331")]
	public class ES3Type_MeshFilterArray : ES3ArrayType
	{
		[Token(Token = "0x4000E3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60016DD")]
		[Address(RVA = "0xF2CFA0", Offset = "0xF2CFA0", VA = "0xF2CFA0")]
		public ES3Type_MeshFilterArray()
		{
		}
	}
	[Token(Token = "0x2000332")]
	[Preserve]
	[ES3Properties(new string[]
	{
		"additionalVertexStreams", "enabled", "shadowCastingMode", "receiveShadows", "sharedMaterials", "lightmapIndex", "realtimeLightmapIndex", "lightmapScaleOffset", "motionVectorGenerationMode", "realtimeLightmapScaleOffset",
		"lightProbeUsage", "lightProbeProxyVolumeOverride", "probeAnchor", "reflectionProbeUsage", "sortingLayerName", "sortingLayerID", "sortingOrder"
	})]
	public class ES3Type_MeshRenderer : ES3ComponentType
	{
		[Token(Token = "0x4000E3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60016DE")]
		[Address(RVA = "0xF2D08C", Offset = "0xF2D08C", VA = "0xF2D08C")]
		public ES3Type_MeshRenderer()
		{
		}

		[Token(Token = "0x60016DF")]
		[Address(RVA = "0xF2D14C", Offset = "0xF2D14C", VA = "0xF2D14C", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60016E0")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000333")]
	public class ES3Type_MeshRendererArray : ES3ArrayType
	{
		[Token(Token = "0x4000E3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60016E1")]
		[Address(RVA = "0xF2D898", Offset = "0xF2D898", VA = "0xF2D898")]
		public ES3Type_MeshRendererArray()
		{
		}
	}
	[Token(Token = "0x2000334")]
	[Preserve]
	[ES3Properties(new string[]
	{
		"time", "hideFlags", "collision", "colorBySpeed", "colorOverLifetime", "emission", "externalForces", "forceOverLifetime", "inheritVelocity", "lights",
		"limitVelocityOverLifetime", "main", "noise", "rotatonBySpeed", "rotationOverLifetime", "shape", "sizeBySpeed", "sizeOverLifetime", "subEmitters", "textureSheetAnimation",
		"trails", "trigger", "useAutoRandomSeed", "velocityOverLifetime", "isPaused", "isPlaying", "isStopped"
	})]
	public class ES3Type_ParticleSystem : ES3ComponentType
	{
		[Token(Token = "0x4000E40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60016E2")]
		[Address(RVA = "0xF2D984", Offset = "0xF2D984", VA = "0xF2D984")]
		public ES3Type_ParticleSystem()
		{
		}

		[Token(Token = "0x60016E3")]
		[Address(RVA = "0xF2DA44", Offset = "0xF2DA44", VA = "0xF2DA44", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60016E4")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000335")]
	[Preserve]
	[ES3Properties(new string[] { "points", "pathCount", "paths", "density", "isTrigger", "usedByEffector", "offset", "sharedMaterial", "enabled" })]
	public class ES3Type_PolygonCollider2D : ES3ComponentType
	{
		[Token(Token = "0x4000E41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60016E5")]
		[Address(RVA = "0xF2E534", Offset = "0xF2E534", VA = "0xF2E534")]
		public ES3Type_PolygonCollider2D()
		{
		}

		[Token(Token = "0x60016E6")]
		[Address(RVA = "0xF2E5F4", Offset = "0xF2E5F4", VA = "0xF2E5F4", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60016E7")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000336")]
	public class ES3Type_PolygonCollider2DArray : ES3ArrayType
	{
		[Token(Token = "0x4000E42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60016E8")]
		[Address(RVA = "0xF2FAFC", Offset = "0xF2FAFC", VA = "0xF2FAFC")]
		public ES3Type_PolygonCollider2DArray()
		{
		}
	}
	[Token(Token = "0x2000337")]
	[Preserve]
	[ES3Properties(new string[]
	{
		"texture", "uvRect", "onCullStateChanged", "maskable", "color", "raycastTarget", "useLegacyMeshGeneration", "material", "useGUILayout", "enabled",
		"hideFlags"
	})]
	public class ES3Type_RawImage : ES3ComponentType
	{
		[Token(Token = "0x4000E43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60016E9")]
		[Address(RVA = "0xF2FBD4", Offset = "0xF2FBD4", VA = "0xF2FBD4")]
		public ES3Type_RawImage()
		{
		}

		[Token(Token = "0x60016EA")]
		[Address(RVA = "0xF2FC98", Offset = "0xF2FC98", VA = "0xF2FC98", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60016EB")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000338")]
	public class ES3Type_RawImageArray : ES3ArrayType
	{
		[Token(Token = "0x4000E44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60016EC")]
		[Address(RVA = "0xF30174", Offset = "0xF30174", VA = "0xF30174")]
		public ES3Type_RawImageArray()
		{
		}
	}
	[Token(Token = "0x2000339")]
	[Preserve]
	[ES3Properties(new string[]
	{
		"velocity", "angularVelocity", "drag", "angularDrag", "mass", "useGravity", "maxDepenetrationVelocity", "isKinematic", "freezeRotation", "constraints",
		"collisionDetectionMode", "centerOfMass", "inertiaTensorRotation", "inertiaTensor", "detectCollisions", "position", "rotation", "interpolation", "solverIterations", "sleepThreshold",
		"maxAngularVelocity", "solverVelocityIterations"
	})]
	public class ES3Type_Rigidbody : ES3ComponentType
	{
		[Token(Token = "0x4000E45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60016ED")]
		[Address(RVA = "0xF3024C", Offset = "0xF3024C", VA = "0xF3024C")]
		public ES3Type_Rigidbody()
		{
		}

		[Token(Token = "0x60016EE")]
		[Address(RVA = "0xF30310", Offset = "0xF30310", VA = "0xF30310", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60016EF")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x200033A")]
	public class ES3UserType_RigidbodyArray : ES3ArrayType
	{
		[Token(Token = "0x4000E46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60016F0")]
		[Address(RVA = "0xF30C80", Offset = "0xF30C80", VA = "0xF30C80")]
		public ES3UserType_RigidbodyArray()
		{
		}
	}
	[Token(Token = "0x200033B")]
	[ES3Properties(new string[] { "center", "radius", "enabled", "isTrigger", "contactOffset", "sharedMaterial" })]
	[Preserve]
	public class ES3Type_SphereCollider : ES3ComponentType
	{
		[Token(Token = "0x4000E47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60016F1")]
		[Address(RVA = "0xF30D58", Offset = "0xF30D58", VA = "0xF30D58")]
		public ES3Type_SphereCollider()
		{
		}

		[Token(Token = "0x60016F2")]
		[Address(RVA = "0xF30E10", Offset = "0xF30E10", VA = "0xF30E10", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60016F3")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x200033C")]
	[Preserve]
	[ES3Properties(new string[]
	{
		"font", "text", "supportRichText", "resizeTextForBestFit", "resizeTextMinSize", "resizeTextMaxSize", "alignment", "alignByGeometry", "fontSize", "horizontalOverflow",
		"verticalOverflow", "lineSpacing", "fontStyle", "onCullStateChanged", "maskable", "color", "raycastTarget", "material", "useGUILayout", "enabled",
		"tag", "name", "hideFlags"
	})]
	public class ES3Type_Text : ES3ComponentType
	{
		[Token(Token = "0x4000E48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60016F4")]
		[Address(RVA = "0xF3113C", Offset = "0xF3113C", VA = "0xF3113C")]
		public ES3Type_Text()
		{
		}

		[Token(Token = "0x60016F5")]
		[Address(RVA = "0xF311F4", Offset = "0xF311F4", VA = "0xF311F4", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60016F6")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x200033D")]
	[Preserve]
	[ES3Properties(new string[] { "localPosition", "localRotation", "localScale", "parent", "siblingIndex" })]
	public class ES3Type_Transform : ES3ComponentType
	{
		[Token(Token = "0x4000E49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static int countRead;

		[Token(Token = "0x4000E4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static ES3Type Instance;

		[Token(Token = "0x60016F7")]
		[Address(RVA = "0xF319D0", Offset = "0xF319D0", VA = "0xF319D0")]
		public ES3Type_Transform()
		{
		}

		[Token(Token = "0x60016F8")]
		[Address(RVA = "0xF31A80", Offset = "0xF31A80", VA = "0xF31A80", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60016F9")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x200033E")]
	[ES3Properties(new string[] { "keys", "preWrapMode", "postWrapMode" })]
	[Preserve]
	public class ES3Type_AnimationCurve : ES3Type
	{
		[Token(Token = "0x4000E4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60016FA")]
		[Address(RVA = "0xF31CDC", Offset = "0xF31CDC", VA = "0xF31CDC")]
		public ES3Type_AnimationCurve()
		{
		}

		[Token(Token = "0x60016FB")]
		[Address(RVA = "0xF31D94", Offset = "0xF31D94", VA = "0xF31D94", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60016FC")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x60016FD")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x200033F")]
	[ES3Properties(new string[] { "name", "samples", "channels", "frequency", "sampleData" })]
	[Preserve]
	public class ES3Type_AudioClip : ES3UnityObjectType
	{
		[Token(Token = "0x4000E4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60016FE")]
		[Address(RVA = "0xF31F38", Offset = "0xF31F38", VA = "0xF31F38")]
		public ES3Type_AudioClip()
		{
		}

		[Token(Token = "0x60016FF")]
		[Address(RVA = "0xF31FF0", Offset = "0xF31FF0", VA = "0xF31FF0", Slot = "10")]
		protected override void WriteUnityObject(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001700")]
		protected override void ReadUnityObject<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x6001701")]
		protected override object ReadUnityObject<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000340")]
	public class ES3Type_AudioClipArray : ES3ArrayType
	{
		[Token(Token = "0x4000E4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001702")]
		[Address(RVA = "0xF32240", Offset = "0xF32240", VA = "0xF32240")]
		public ES3Type_AudioClipArray()
		{
		}
	}
	[Token(Token = "0x2000341")]
	[ES3Properties(new string[] { "boneIndex0", "boneIndex1", "boneIndex2", "boneIndex3", "weight0", "weight1", "weight2", "weight3" })]
	[Preserve]
	public class ES3Type_BoneWeight : ES3Type
	{
		[Token(Token = "0x4000E4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001703")]
		[Address(RVA = "0xF32318", Offset = "0xF32318", VA = "0xF32318")]
		public ES3Type_BoneWeight()
		{
		}

		[Token(Token = "0x6001704")]
		[Address(RVA = "0xF323D0", Offset = "0xF323D0", VA = "0xF323D0", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001705")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000342")]
	public class ES3Type_BoneWeightArray : ES3ArrayType
	{
		[Token(Token = "0x4000E4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001706")]
		[Address(RVA = "0xF327A0", Offset = "0xF327A0", VA = "0xF327A0")]
		public ES3Type_BoneWeightArray()
		{
		}
	}
	[Token(Token = "0x2000343")]
	[Preserve]
	[ES3Properties(new string[] { "center", "size" })]
	public class ES3Type_Bounds : ES3Type
	{
		[Token(Token = "0x4000E50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001707")]
		[Address(RVA = "0xF32878", Offset = "0xF32878", VA = "0xF32878")]
		public ES3Type_Bounds()
		{
		}

		[Token(Token = "0x6001708")]
		[Address(RVA = "0xF32930", Offset = "0xF32930", VA = "0xF32930", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001709")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000344")]
	public class ES3Type_BoundsArray : ES3ArrayType
	{
		[Token(Token = "0x4000E51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x600170A")]
		[Address(RVA = "0xF32AB0", Offset = "0xF32AB0", VA = "0xF32AB0")]
		public ES3Type_BoundsArray()
		{
		}
	}
	[Token(Token = "0x2000345")]
	[Preserve]
	[ES3Properties(new string[] { "time", "count", "minCount", "maxCount", "cycleCount", "repeatInterval", "probability" })]
	public class ES3Type_Burst : ES3Type
	{
		[Token(Token = "0x4000E52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x600170B")]
		[Address(RVA = "0xF32B88", Offset = "0xF32B88", VA = "0xF32B88")]
		public ES3Type_Burst()
		{
		}

		[Token(Token = "0x600170C")]
		[Address(RVA = "0xF32C4C", Offset = "0xF32C4C", VA = "0xF32C4C", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x600170D")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000346")]
	public class ES3Type_BurstArray : ES3ArrayType
	{
		[Token(Token = "0x4000E53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x600170E")]
		[Address(RVA = "0xF33038", Offset = "0xF33038", VA = "0xF33038")]
		public ES3Type_BurstArray()
		{
		}
	}
	[Token(Token = "0x2000347")]
	[Preserve]
	[ES3Properties(new string[]
	{
		"enabled", "type", "mode", "dampen", "dampenMultiplier", "bounce", "bounceMultiplier", "lifetimeLoss", "lifetimeLossMultiplier", "minKillSpeed",
		"maxKillSpeed", "collidesWith", "enableDynamicColliders", "maxCollisionShapes", "quality", "voxelSize", "radiusScale", "sendCollisionMessages"
	})]
	public class ES3Type_CollisionModule : ES3Type
	{
		[Token(Token = "0x4000E54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x600170F")]
		[Address(RVA = "0xF33110", Offset = "0xF33110", VA = "0xF33110")]
		public ES3Type_CollisionModule()
		{
		}

		[Token(Token = "0x6001710")]
		[Address(RVA = "0xF331C8", Offset = "0xF331C8", VA = "0xF331C8", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001711")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6001712")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000348")]
	[ES3Properties(new string[] { "r", "g", "b", "a" })]
	[Preserve]
	public class ES3Type_Color : ES3Type
	{
		[Token(Token = "0x4000E55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001713")]
		[Address(RVA = "0xF338D0", Offset = "0xF338D0", VA = "0xF338D0")]
		public ES3Type_Color()
		{
		}

		[Token(Token = "0x6001714")]
		[Address(RVA = "0xF33988", Offset = "0xF33988", VA = "0xF33988", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001715")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000349")]
	public class ES3Type_ColorArray : ES3ArrayType
	{
		[Token(Token = "0x4000E56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001716")]
		[Address(RVA = "0xF33B80", Offset = "0xF33B80", VA = "0xF33B80")]
		public ES3Type_ColorArray()
		{
		}
	}
	[Token(Token = "0x200034A")]
	[ES3Properties(new string[] { "r", "g", "b", "a" })]
	[Preserve]
	public class ES3Type_Color32 : ES3Type
	{
		[Token(Token = "0x4000E57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001717")]
		[Address(RVA = "0xF33C58", Offset = "0xF33C58", VA = "0xF33C58")]
		public ES3Type_Color32()
		{
		}

		[Token(Token = "0x6001718")]
		[Address(RVA = "0xF33D10", Offset = "0xF33D10", VA = "0xF33D10", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001719")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x600171A")]
		[Address(RVA = "0xF33F10", Offset = "0xF33F10", VA = "0xF33F10")]
		public static bool Equals(Color32 a, Color32 b)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200034B")]
	public class ES3Type_Color32Array : ES3ArrayType
	{
		[Token(Token = "0x4000E58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x600171B")]
		[Address(RVA = "0xF33F34", Offset = "0xF33F34", VA = "0xF33F34")]
		public ES3Type_Color32Array()
		{
		}
	}
	[Token(Token = "0x200034C")]
	[Preserve]
	[ES3Properties(new string[] { "enabled", "color", "range" })]
	public class ES3Type_ColorBySpeedModule : ES3Type
	{
		[Token(Token = "0x4000E59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x600171C")]
		[Address(RVA = "0xF3400C", Offset = "0xF3400C", VA = "0xF3400C")]
		public ES3Type_ColorBySpeedModule()
		{
		}

		[Token(Token = "0x600171D")]
		[Address(RVA = "0xF340C4", Offset = "0xF340C4", VA = "0xF340C4", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x600171E")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x600171F")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x200034D")]
	[Preserve]
	[ES3Properties(new string[] { "enabled", "color" })]
	public class ES3Type_ColorOverLifetimeModule : ES3Type
	{
		[Token(Token = "0x4000E5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001720")]
		[Address(RVA = "0xF3430C", Offset = "0xF3430C", VA = "0xF3430C")]
		public ES3Type_ColorOverLifetimeModule()
		{
		}

		[Token(Token = "0x6001721")]
		[Address(RVA = "0xF343C4", Offset = "0xF343C4", VA = "0xF343C4", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001722")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6001723")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x200034E")]
	[Preserve]
	[ES3Properties(new string[] { "enabled", "rateOverTime", "rateOverTimeMultiplier", "rateOverDistance", "rateOverDistanceMultiplier" })]
	public class ES3Type_EmissionModule : ES3Type
	{
		[Token(Token = "0x4000E5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001724")]
		[Address(RVA = "0xF34584", Offset = "0xF34584", VA = "0xF34584")]
		public ES3Type_EmissionModule()
		{
		}

		[Token(Token = "0x6001725")]
		[Address(RVA = "0xF3463C", Offset = "0xF3463C", VA = "0xF3463C", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001726")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6001727")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x200034F")]
	[Preserve]
	[ES3Properties(new string[] { "enabled", "multiplier" })]
	public class ES3Type_ExternalForcesModule : ES3Type
	{
		[Token(Token = "0x4000E5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001728")]
		[Address(RVA = "0xF349D4", Offset = "0xF349D4", VA = "0xF349D4")]
		public ES3Type_ExternalForcesModule()
		{
		}

		[Token(Token = "0x6001729")]
		[Address(RVA = "0xF34A8C", Offset = "0xF34A8C", VA = "0xF34A8C", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x600172A")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x600172B")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000350")]
	[Preserve]
	[ES3Properties(new string[] { "hideFlags" })]
	public class ES3Type_Flare : ES3Type
	{
		[Token(Token = "0x4000E5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x600172C")]
		[Address(RVA = "0xF34C28", Offset = "0xF34C28", VA = "0xF34C28")]
		public ES3Type_Flare()
		{
		}

		[Token(Token = "0x600172D")]
		[Address(RVA = "0xF34CE0", Offset = "0xF34CE0", VA = "0xF34CE0", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x600172E")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x600172F")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000351")]
	public class ES3Type_FlareArray : ES3ArrayType
	{
		[Token(Token = "0x4000E5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001730")]
		[Address(RVA = "0xF34DB4", Offset = "0xF34DB4", VA = "0xF34DB4")]
		public ES3Type_FlareArray()
		{
		}
	}
	[Token(Token = "0x2000352")]
	[Preserve]
	[ES3Properties(new string[] { "material", "name" })]
	public class ES3Type_Font : ES3UnityObjectType
	{
		[Token(Token = "0x4000E5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001731")]
		[Address(RVA = "0xF34E8C", Offset = "0xF34E8C", VA = "0xF34E8C")]
		public ES3Type_Font()
		{
		}

		[Token(Token = "0x6001732")]
		[Address(RVA = "0xF34F44", Offset = "0xF34F44", VA = "0xF34F44", Slot = "10")]
		protected override void WriteUnityObject(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001733")]
		protected override void ReadUnityObject<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x6001734")]
		protected override object ReadUnityObject<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000353")]
	public class ES3Type_FontArray : ES3ArrayType
	{
		[Token(Token = "0x4000E60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001735")]
		[Address(RVA = "0xF35040", Offset = "0xF35040", VA = "0xF35040")]
		public ES3Type_FontArray()
		{
		}
	}
	[Token(Token = "0x2000354")]
	[ES3Properties(new string[] { "enabled", "x", "y", "z", "xMultiplier", "yMultiplier", "zMultiplier", "space", "randomized" })]
	[Preserve]
	public class ES3Type_ForceOverLifetimeModule : ES3Type
	{
		[Token(Token = "0x4000E61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001736")]
		[Address(RVA = "0xF35118", Offset = "0xF35118", VA = "0xF35118")]
		public ES3Type_ForceOverLifetimeModule()
		{
		}

		[Token(Token = "0x6001737")]
		[Address(RVA = "0xF351D0", Offset = "0xF351D0", VA = "0xF351D0", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001738")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6001739")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000355")]
	[Preserve]
	[ES3Properties(new string[] { "layer", "isStatic", "tag", "name", "hideFlags", "children", "components" })]
	public class ES3Type_GameObject : ES3UnityObjectType
	{
		[Token(Token = "0x4000E62")]
		private const string prefabPropertyName = "es3Prefab";

		[Token(Token = "0x4000E63")]
		private const string transformPropertyName = "transformID";

		[Token(Token = "0x4000E64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x4000E65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool saveChildren;

		[Token(Token = "0x600173A")]
		[Address(RVA = "0xF3565C", Offset = "0xF3565C", VA = "0xF3565C")]
		public ES3Type_GameObject()
		{
		}

		[Token(Token = "0x600173B")]
		[Address(RVA = "0xF35714", Offset = "0xF35714", VA = "0xF35714", Slot = "13")]
		public override void WriteObject(object obj, ES3Writer writer, ES3.ReferenceMode mode)
		{
		}

		[Token(Token = "0x600173C")]
		protected override object ReadObject<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x600173D")]
		protected override void ReadObject<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x600173E")]
		[Address(RVA = "0xF362C0", Offset = "0xF362C0", VA = "0xF362C0")]
		private void ReadComponents(ES3Reader reader, GameObject go)
		{
		}

		[Token(Token = "0x600173F")]
		[Address(RVA = "0xF368E8", Offset = "0xF368E8", VA = "0xF368E8")]
		private GameObject CreateNewGameObject(ES3ReferenceMgrBase refMgr, long id)
		{
			return null;
		}

		[Token(Token = "0x6001740")]
		[Address(RVA = "0xF35F1C", Offset = "0xF35F1C", VA = "0xF35F1C")]
		public static List<GameObject> GetChildren(GameObject go)
		{
			return null;
		}

		[Token(Token = "0x6001741")]
		[Address(RVA = "0xF3697C", Offset = "0xF3697C", VA = "0xF3697C", Slot = "10")]
		protected override void WriteUnityObject(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001742")]
		protected override void ReadUnityObject<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x6001743")]
		protected override object ReadUnityObject<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000357")]
	public class ES3Type_GameObjectArray : ES3ArrayType
	{
		[Token(Token = "0x4000E68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001746")]
		[Address(RVA = "0xF36A00", Offset = "0xF36A00", VA = "0xF36A00")]
		public ES3Type_GameObjectArray()
		{
		}
	}
	[Token(Token = "0x2000358")]
	[Preserve]
	[ES3Properties(new string[] { "colorKeys", "alphaKeys", "mode" })]
	public class ES3Type_Gradient : ES3Type
	{
		[Token(Token = "0x4000E69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001747")]
		[Address(RVA = "0xF36AD8", Offset = "0xF36AD8", VA = "0xF36AD8")]
		public ES3Type_Gradient()
		{
		}

		[Token(Token = "0x6001748")]
		[Address(RVA = "0xF36B90", Offset = "0xF36B90", VA = "0xF36B90", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001749")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x600174A")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000359")]
	[Preserve]
	[ES3Properties(new string[] { "alpha", "time" })]
	public class ES3Type_GradientAlphaKey : ES3Type
	{
		[Token(Token = "0x4000E6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x600174B")]
		[Address(RVA = "0xF36D40", Offset = "0xF36D40", VA = "0xF36D40")]
		public ES3Type_GradientAlphaKey()
		{
		}

		[Token(Token = "0x600174C")]
		[Address(RVA = "0xF36DF8", Offset = "0xF36DF8", VA = "0xF36DF8", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x600174D")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x200035A")]
	public class ES3Type_GradientAlphaKeyArray : ES3ArrayType
	{
		[Token(Token = "0x4000E6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x600174E")]
		[Address(RVA = "0xF36F44", Offset = "0xF36F44", VA = "0xF36F44")]
		public ES3Type_GradientAlphaKeyArray()
		{
		}
	}
	[Token(Token = "0x200035B")]
	[Preserve]
	[ES3Properties(new string[] { "color", "time" })]
	public class ES3Type_GradientColorKey : ES3Type
	{
		[Token(Token = "0x4000E6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x600174F")]
		[Address(RVA = "0xF3701C", Offset = "0xF3701C", VA = "0xF3701C")]
		public ES3Type_GradientColorKey()
		{
		}

		[Token(Token = "0x6001750")]
		[Address(RVA = "0xF370D4", Offset = "0xF370D4", VA = "0xF370D4", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001751")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x200035C")]
	public class ES3Type_GradientColorKeyArray : ES3ArrayType
	{
		[Token(Token = "0x4000E6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001752")]
		[Address(RVA = "0xF3724C", Offset = "0xF3724C", VA = "0xF3724C")]
		public ES3Type_GradientColorKeyArray()
		{
		}
	}
	[Token(Token = "0x200035D")]
	[Preserve]
	[ES3Properties(new string[] { "value" })]
	public class ES3Type_Guid : ES3Type
	{
		[Token(Token = "0x4000E6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001753")]
		[Address(RVA = "0xF37324", Offset = "0xF37324", VA = "0xF37324")]
		public ES3Type_Guid()
		{
		}

		[Token(Token = "0x6001754")]
		[Address(RVA = "0xF373DC", Offset = "0xF373DC", VA = "0xF373DC", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001755")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x200035E")]
	public class ES3Type_GuidArray : ES3ArrayType
	{
		[Token(Token = "0x4000E6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001756")]
		[Address(RVA = "0xF374C0", Offset = "0xF374C0", VA = "0xF374C0")]
		public ES3Type_GuidArray()
		{
		}
	}
	[Token(Token = "0x200035F")]
	[Preserve]
	[ES3Properties(new string[] { "enabled", "mode", "curve", "curveMultiplier" })]
	public class ES3Type_InheritVelocityModule : ES3Type
	{
		[Token(Token = "0x4000E70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001757")]
		[Address(RVA = "0xF37598", Offset = "0xF37598", VA = "0xF37598")]
		public ES3Type_InheritVelocityModule()
		{
		}

		[Token(Token = "0x6001758")]
		[Address(RVA = "0xF37650", Offset = "0xF37650", VA = "0xF37650", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001759")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x600175A")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000360")]
	[ES3Properties(new string[] { "time", "value", "inTangent", "outTangent" })]
	[Preserve]
	public class ES3Type_Keyframe : ES3Type
	{
		[Token(Token = "0x4000E71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x600175B")]
		[Address(RVA = "0xF378EC", Offset = "0xF378EC", VA = "0xF378EC")]
		public ES3Type_Keyframe()
		{
		}

		[Token(Token = "0x600175C")]
		[Address(RVA = "0xF379A4", Offset = "0xF379A4", VA = "0xF379A4", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x600175D")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000361")]
	public class ES3Type_KeyframeArray : ES3ArrayType
	{
		[Token(Token = "0x4000E72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x600175E")]
		[Address(RVA = "0xF37BD8", Offset = "0xF37BD8", VA = "0xF37BD8")]
		public ES3Type_KeyframeArray()
		{
		}
	}
	[Token(Token = "0x2000362")]
	[Preserve]
	[ES3Properties(new string[] { "colorKeys", "alphaKeys", "mode" })]
	public class ES3Type_LayerMask : ES3Type
	{
		[Token(Token = "0x4000E73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x600175F")]
		[Address(RVA = "0xF37CB0", Offset = "0xF37CB0", VA = "0xF37CB0")]
		public ES3Type_LayerMask()
		{
		}

		[Token(Token = "0x6001760")]
		[Address(RVA = "0xF37D68", Offset = "0xF37D68", VA = "0xF37D68", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001761")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000363")]
	[ES3Properties(new string[]
	{
		"type", "color", "intensity", "bounceIntensity", "shadows", "shadowStrength", "shadowResolution", "shadowCustomResolution", "shadowBias", "shadowNormalBias",
		"shadowNearPlane", "range", "spotAngle", "cookieSize", "cookie", "flare", "renderMode", "cullingMask", "areaSize", "lightmappingMode",
		"enabled", "hideFlags"
	})]
	[Preserve]
	public class ES3Type_Light : ES3ComponentType
	{
		[Token(Token = "0x4000E74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001762")]
		[Address(RVA = "0xF37E78", Offset = "0xF37E78", VA = "0xF37E78")]
		public ES3Type_Light()
		{
		}

		[Token(Token = "0x6001763")]
		[Address(RVA = "0xF37F30", Offset = "0xF37F30", VA = "0xF37F30", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001764")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000364")]
	[Preserve]
	[ES3Properties(new string[]
	{
		"enabled", "ratio", "useRandomDistribution", "light", "useParticleColor", "sizeAffectsRange", "alphaAffectsIntensity", "range", "rangeMultiplier", "intensity",
		"intensityMultiplier", "maxLights"
	})]
	public class ES3Type_LightsModule : ES3Type
	{
		[Token(Token = "0x4000E75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001765")]
		[Address(RVA = "0xF38784", Offset = "0xF38784", VA = "0xF38784")]
		public ES3Type_LightsModule()
		{
		}

		[Token(Token = "0x6001766")]
		[Address(RVA = "0xF3883C", Offset = "0xF3883C", VA = "0xF3883C", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001767")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6001768")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000365")]
	[Preserve]
	[ES3Properties(new string[]
	{
		"enabled", "limitX", "limitXMultiplier", "limitY", "limitYMultiplier", "limitZ", "limitZMultiplier", "limit", "limitMultiplier", "dampen",
		"separateAxes", "space"
	})]
	public class ES3Type_LimitVelocityOverLifetimeModule : ES3Type
	{
		[Token(Token = "0x4000E76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001769")]
		[Address(RVA = "0xF38DD0", Offset = "0xF38DD0", VA = "0xF38DD0")]
		public ES3Type_LimitVelocityOverLifetimeModule()
		{
		}

		[Token(Token = "0x600176A")]
		[Address(RVA = "0xF38E88", Offset = "0xF38E88", VA = "0xF38E88", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x600176B")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x600176C")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000366")]
	[ES3Properties(new string[]
	{
		"duration", "loop", "prewarm", "startDelay", "startDelayMultiplier", "startLifetime", "startLifetimeMultiplier", "startSpeed", "startSpeedMultiplier", "startSize3D",
		"startSize", "startSizeMultiplier", "startSizeX", "startSizeXMultiplier", "startSizeY", "startSizeYMultiplier", "startSizeZ", "startSizeZMultiplier", "startRotation3D", "startRotation",
		"startRotationMultiplier", "startRotationX", "startRotationXMultiplier", "startRotationY", "startRotationYMultiplier", "startRotationZ", "startRotationZMultiplier", "randomizeRotationDirection", "startColor", "gravityModifier",
		"gravityModifierMultiplier", "simulationSpace", "customSimulationSpace", "simulationSpeed", "scalingMode", "playOnAwake", "maxParticles"
	})]
	[Preserve]
	public class ES3Type_MainModule : ES3Type
	{
		[Token(Token = "0x4000E77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x600176D")]
		[Address(RVA = "0xF39428", Offset = "0xF39428", VA = "0xF39428")]
		public ES3Type_MainModule()
		{
		}

		[Token(Token = "0x600176E")]
		[Address(RVA = "0xF394E0", Offset = "0xF394E0", VA = "0xF394E0", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x600176F")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6001770")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000367")]
	[Preserve]
	[ES3Properties(new string[] { "shader", "renderQueue", "shaderKeywords", "globalIlluminationFlags", "properties" })]
	public class ES3Type_Material : ES3UnityObjectType
	{
		[Token(Token = "0x4000E78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001771")]
		[Address(RVA = "0xF3A3EC", Offset = "0xF3A3EC", VA = "0xF3A3EC")]
		public ES3Type_Material()
		{
		}

		[Token(Token = "0x6001772")]
		[Address(RVA = "0xF3A4A4", Offset = "0xF3A4A4", VA = "0xF3A4A4", Slot = "10")]
		protected override void WriteUnityObject(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001773")]
		protected override object ReadUnityObject<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6001774")]
		protected override void ReadUnityObject<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000368")]
	public class ES3Type_MaterialArray : ES3ArrayType
	{
		[Token(Token = "0x4000E79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001775")]
		[Address(RVA = "0xF402B4", Offset = "0xF402B4", VA = "0xF402B4")]
		public ES3Type_MaterialArray()
		{
		}
	}
	[Token(Token = "0x2000369")]
	[Preserve]
	[ES3Properties(new string[] { "col0", "col1", "col2", "col3" })]
	public class ES3Type_Matrix4x4 : ES3Type
	{
		[Token(Token = "0x4000E7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001776")]
		[Address(RVA = "0xF4038C", Offset = "0xF4038C", VA = "0xF4038C")]
		public ES3Type_Matrix4x4()
		{
		}

		[Token(Token = "0x6001777")]
		[Address(RVA = "0xF40444", Offset = "0xF40444", VA = "0xF40444", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001778")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x200036A")]
	public class ES3Type_Matrix4x4Array : ES3ArrayType
	{
		[Token(Token = "0x4000E7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001779")]
		[Address(RVA = "0xF40698", Offset = "0xF40698", VA = "0xF40698")]
		public ES3Type_Matrix4x4Array()
		{
		}
	}
	[Token(Token = "0x200036B")]
	[ES3Properties(new string[]
	{
		"bounds", "subMeshCount", "boneWeights", "bindposes", "vertices", "normals", "tangents", "uv", "uv2", "uv3",
		"uv4", "colors32", "triangles", "subMeshes"
	})]
	[Preserve]
	public class ES3Type_Mesh : ES3UnityObjectType
	{
		[Token(Token = "0x4000E7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x600177A")]
		[Address(RVA = "0xF40770", Offset = "0xF40770", VA = "0xF40770")]
		public ES3Type_Mesh()
		{
		}

		[Token(Token = "0x600177B")]
		[Address(RVA = "0xF40828", Offset = "0xF40828", VA = "0xF40828", Slot = "10")]
		protected override void WriteUnityObject(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x600177C")]
		protected override object ReadUnityObject<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x600177D")]
		protected override void ReadUnityObject<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x200036C")]
	[Preserve]
	[ES3Properties(new string[] { "mode", "curveMultiplier", "curveMax", "curveMin", "constantMax", "constantMin", "constant", "curve" })]
	public class ES3Type_MinMaxCurve : ES3Type
	{
		[Token(Token = "0x4000E7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x600177E")]
		[Address(RVA = "0xF40E60", Offset = "0xF40E60", VA = "0xF40E60")]
		public ES3Type_MinMaxCurve()
		{
		}

		[Token(Token = "0x600177F")]
		[Address(RVA = "0xF40F18", Offset = "0xF40F18", VA = "0xF40F18", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001780")]
		[Preserve]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6001781")]
		[Preserve]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x200036D")]
	[Preserve]
	[ES3Properties(new string[] { "mode", "gradientMax", "gradientMin", "colorMax", "colorMin", "color", "gradient" })]
	public class ES3Type_MinMaxGradient : ES3Type
	{
		[Token(Token = "0x4000E7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001782")]
		[Address(RVA = "0xF412A0", Offset = "0xF412A0", VA = "0xF412A0")]
		public ES3Type_MinMaxGradient()
		{
		}

		[Token(Token = "0x6001783")]
		[Address(RVA = "0xF41358", Offset = "0xF41358", VA = "0xF41358", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001784")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x200036E")]
	[Preserve]
	[ES3Properties(new string[]
	{
		"enabled", "separateAxes", "strength", "strengthMultiplier", "strengthX", "strengthXMultiplier", "strengthY", "strengthYMultiplier", "strengthZ", "strengthZMultiplier",
		"frequency", "damping", "octaveCount", "octaveMultiplier", "octaveScale", "quality", "scrollSpeed", "scrollSpeedMultiplier", "remapEnabled", "remap",
		"remapMultiplier", "remapX", "remapXMultiplier", "remapY", "remapYMultiplier", "remapZ", "remapZMultiplier"
	})]
	public class ES3Type_NoiseModule : ES3Type
	{
		[Token(Token = "0x4000E7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001785")]
		[Address(RVA = "0xF416AC", Offset = "0xF416AC", VA = "0xF416AC")]
		public ES3Type_NoiseModule()
		{
		}

		[Token(Token = "0x6001786")]
		[Address(RVA = "0xF41764", Offset = "0xF41764", VA = "0xF41764", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001787")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6001788")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x200036F")]
	[Preserve]
	[ES3Properties(new string[] { "dynamicFriction", "staticFriction", "bounciness", "frictionCombine", "bounceCombine" })]
	public class ES3Type_PhysicMaterial : ES3ObjectType
	{
		[Token(Token = "0x4000E80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001789")]
		[Address(RVA = "0xF422A0", Offset = "0xF422A0", VA = "0xF422A0")]
		public ES3Type_PhysicMaterial()
		{
		}

		[Token(Token = "0x600178A")]
		[Address(RVA = "0xF42358", Offset = "0xF42358", VA = "0xF42358", Slot = "7")]
		protected override void WriteObject(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x600178B")]
		protected override void ReadObject<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x600178C")]
		protected override object ReadObject<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000370")]
	public class ES3Type_PhysicMaterialArray : ES3ArrayType
	{
		[Token(Token = "0x4000E81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x600178D")]
		[Address(RVA = "0xF425E0", Offset = "0xF425E0", VA = "0xF425E0")]
		public ES3Type_PhysicMaterialArray()
		{
		}
	}
	[Token(Token = "0x2000371")]
	[Preserve]
	[ES3Properties(new string[] { "bounciness", "friction" })]
	public class ES3Type_PhysicsMaterial2D : ES3ObjectType
	{
		[Token(Token = "0x4000E82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x600178E")]
		[Address(RVA = "0xF426B8", Offset = "0xF426B8", VA = "0xF426B8")]
		public ES3Type_PhysicsMaterial2D()
		{
		}

		[Token(Token = "0x600178F")]
		[Address(RVA = "0xF42770", Offset = "0xF42770", VA = "0xF42770", Slot = "7")]
		protected override void WriteObject(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001790")]
		protected override void ReadObject<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x6001791")]
		protected override object ReadObject<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000372")]
	public class ES3Type_PhysicsMaterial2DArray : ES3ArrayType
	{
		[Token(Token = "0x4000E83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001792")]
		[Address(RVA = "0xF428C0", Offset = "0xF428C0", VA = "0xF428C0")]
		public ES3Type_PhysicsMaterial2DArray()
		{
		}
	}
	[Token(Token = "0x2000373")]
	[Preserve]
	[ES3Properties(new string[] { "x", "y", "z", "w" })]
	public class ES3Type_Quaternion : ES3Type
	{
		[Token(Token = "0x4000E84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001793")]
		[Address(RVA = "0xF42998", Offset = "0xF42998", VA = "0xF42998")]
		public ES3Type_Quaternion()
		{
		}

		[Token(Token = "0x6001794")]
		[Address(RVA = "0xF42A50", Offset = "0xF42A50", VA = "0xF42A50", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001795")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000374")]
	public class ES3Type_QuaternionArray : ES3ArrayType
	{
		[Token(Token = "0x4000E85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001796")]
		[Address(RVA = "0xF42C48", Offset = "0xF42C48", VA = "0xF42C48")]
		public ES3Type_QuaternionArray()
		{
		}
	}
	[Token(Token = "0x2000375")]
	[Preserve]
	[ES3Properties(new string[] { "x", "y", "width", "height" })]
	public class ES3Type_Rect : ES3Type
	{
		[Token(Token = "0x4000E86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001797")]
		[Address(RVA = "0xF42D20", Offset = "0xF42D20", VA = "0xF42D20")]
		public ES3Type_Rect()
		{
		}

		[Token(Token = "0x6001798")]
		[Address(RVA = "0xF42DD8", Offset = "0xF42DD8", VA = "0xF42DD8", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001799")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000376")]
	[ES3Properties(new string[]
	{
		"anchorMin", "anchorMax", "anchoredPosition", "sizeDelta", "pivot", "offsetMin", "offsetMax", "localPosition", "localRotation", "localScale",
		"parent", "hideFlags"
	})]
	[Preserve]
	public class ES3Type_RectTransform : ES3ComponentType
	{
		[Token(Token = "0x4000E87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x600179A")]
		[Address(RVA = "0xF42FFC", Offset = "0xF42FFC", VA = "0xF42FFC")]
		public ES3Type_RectTransform()
		{
		}

		[Token(Token = "0x600179B")]
		[Address(RVA = "0xF430B4", Offset = "0xF430B4", VA = "0xF430B4", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x600179C")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000377")]
	[Preserve]
	[ES3Properties(new string[]
	{
		"width", "height", "dimension", "graphicsFormat", "useMipMap", "vrUsage", "memorylessMode", "format", "stencilFormat", "autoGenerateMips",
		"volumeDepth", "antiAliasing", "bindTextureMS", "enableRandomWrite", "useDynamicScale", "isPowerOfTwo", "depth", "descriptor", "masterTextureLimit", "anisotropicFiltering",
		"wrapMode", "wrapModeU", "wrapModeV", "wrapModeW", "filterMode", "anisoLevel", "mipMapBias", "imageContentsHash", "streamingTextureForceLoadAll", "streamingTextureDiscardUnusedMips",
		"allowThreadedTextureCreation", "name"
	})]
	public class ES3Type_RenderTexture : ES3ObjectType
	{
		[Token(Token = "0x4000E88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x600179D")]
		[Address(RVA = "0xF435D8", Offset = "0xF435D8", VA = "0xF435D8")]
		public ES3Type_RenderTexture()
		{
		}

		[Token(Token = "0x600179E")]
		[Address(RVA = "0xF43690", Offset = "0xF43690", VA = "0xF43690", Slot = "7")]
		protected override void WriteObject(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x600179F")]
		protected override void ReadObject<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x60017A0")]
		protected override object ReadObject<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000378")]
	public class ES3Type_RenderTextureArray : ES3ArrayType
	{
		[Token(Token = "0x4000E89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60017A1")]
		[Address(RVA = "0xF43D5C", Offset = "0xF43D5C", VA = "0xF43D5C")]
		public ES3Type_RenderTextureArray()
		{
		}
	}
	[Token(Token = "0x2000379")]
	[ES3Properties(new string[] { "enabled", "x", "xMultiplier", "y", "yMultiplier", "z", "zMultiplier", "separateAxes", "range" })]
	[Preserve]
	public class ES3Type_RotationBySpeedModule : ES3Type
	{
		[Token(Token = "0x4000E8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60017A2")]
		[Address(RVA = "0xF43E34", Offset = "0xF43E34", VA = "0xF43E34")]
		public ES3Type_RotationBySpeedModule()
		{
		}

		[Token(Token = "0x60017A3")]
		[Address(RVA = "0xF43EEC", Offset = "0xF43EEC", VA = "0xF43EEC", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60017A4")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x60017A5")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x200037A")]
	[ES3Properties(new string[] { "enabled", "x", "xMultiplier", "y", "yMultiplier", "z", "zMultiplier", "separateAxes" })]
	[Preserve]
	public class ES3Type_RotationOverLifetimeModule : ES3Type
	{
		[Token(Token = "0x4000E8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60017A6")]
		[Address(RVA = "0xF44384", Offset = "0xF44384", VA = "0xF44384")]
		public ES3Type_RotationOverLifetimeModule()
		{
		}

		[Token(Token = "0x60017A7")]
		[Address(RVA = "0xF4443C", Offset = "0xF4443C", VA = "0xF4443C", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60017A8")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x60017A9")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x200037B")]
	[Preserve]
	[ES3Properties(new string[] { "name", "maximumLOD" })]
	public class ES3Type_Shader : ES3Type
	{
		[Token(Token = "0x4000E8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60017AA")]
		[Address(RVA = "0xF44864", Offset = "0xF44864", VA = "0xF44864")]
		public ES3Type_Shader()
		{
		}

		[Token(Token = "0x60017AB")]
		[Address(RVA = "0xF4491C", Offset = "0xF4491C", VA = "0xF4491C", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60017AC")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x60017AD")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x200037C")]
	public class ES3Type_ShaderArray : ES3ArrayType
	{
		[Token(Token = "0x4000E8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60017AE")]
		[Address(RVA = "0xF44A74", Offset = "0xF44A74", VA = "0xF44A74")]
		public ES3Type_ShaderArray()
		{
		}
	}
	[Token(Token = "0x200037D")]
	[Preserve]
	[ES3Properties(new string[]
	{
		"enabled", "shapeType", "randomDirectionAmount", "sphericalDirectionAmount", "alignToDirection", "radius", "angle", "length", "box", "meshShapeType",
		"mesh", "meshRenderer", "skinnedMeshRenderer", "useMeshMaterialIndex", "meshMaterialIndex", "useMeshColors", "normalOffset", "meshScale", "arc"
	})]
	public class ES3Type_ShapeModule : ES3Type
	{
		[Token(Token = "0x4000E8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60017AF")]
		[Address(RVA = "0xF44B4C", Offset = "0xF44B4C", VA = "0xF44B4C")]
		public ES3Type_ShapeModule()
		{
		}

		[Token(Token = "0x60017B0")]
		[Address(RVA = "0xF44C04", Offset = "0xF44C04", VA = "0xF44C04", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60017B1")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x60017B2")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x200037E")]
	[Preserve]
	[ES3Properties(new string[]
	{
		"enabled", "size", "sizeMultiplier", "x", "xMultiplier", "y", "yMultiplier", "z", "zMultiplier", "separateAxes",
		"range"
	})]
	public class ES3Type_SizeBySpeedModule : ES3Type
	{
		[Token(Token = "0x4000E8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60017B3")]
		[Address(RVA = "0xF4536C", Offset = "0xF4536C", VA = "0xF4536C")]
		public ES3Type_SizeBySpeedModule()
		{
		}

		[Token(Token = "0x60017B4")]
		[Address(RVA = "0xF45424", Offset = "0xF45424", VA = "0xF45424", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60017B5")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x60017B6")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x200037F")]
	[Preserve]
	[ES3Properties(new string[] { "enabled", "size", "sizeMultiplier", "x", "xMultiplier", "y", "yMultiplier", "z", "zMultiplier", "separateAxes" })]
	public class ES3Type_SizeOverLifetimeModule : ES3Type
	{
		[Token(Token = "0x4000E90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60017B7")]
		[Address(RVA = "0xF45980", Offset = "0xF45980", VA = "0xF45980")]
		public ES3Type_SizeOverLifetimeModule()
		{
		}

		[Token(Token = "0x60017B8")]
		[Address(RVA = "0xF45A38", Offset = "0xF45A38", VA = "0xF45A38", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60017B9")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x60017BA")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000380")]
	[ES3Properties(new string[]
	{
		"bones", "rootBone", "quality", "sharedMesh", "updateWhenOffscreen", "skinnedMotionVectors", "localBounds", "enabled", "shadowCastingMode", "receiveShadows",
		"sharedMaterials", "lightmapIndex", "realtimeLightmapIndex", "lightmapScaleOffset", "motionVectorGenerationMode", "realtimeLightmapScaleOffset", "lightProbeUsage", "lightProbeProxyVolumeOverride", "probeAnchor", "reflectionProbeUsage",
		"sortingLayerName", "sortingLayerID", "sortingOrder"
	})]
	[Preserve]
	public class ES3Type_SkinnedMeshRenderer : ES3ComponentType
	{
		[Token(Token = "0x4000E91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60017BB")]
		[Address(RVA = "0xF45F24", Offset = "0xF45F24", VA = "0xF45F24")]
		public ES3Type_SkinnedMeshRenderer()
		{
		}

		[Token(Token = "0x60017BC")]
		[Address(RVA = "0xF45FDC", Offset = "0xF45FDC", VA = "0xF45FDC", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60017BD")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000381")]
	public class ES3Type_SkinnedMeshRendererArray : ES3ArrayType
	{
		[Token(Token = "0x4000E92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60017BE")]
		[Address(RVA = "0xF46A1C", Offset = "0xF46A1C", VA = "0xF46A1C")]
		public ES3Type_SkinnedMeshRendererArray()
		{
		}
	}
	[Token(Token = "0x2000382")]
	[ES3Properties(new string[] { "texture", "rect", "pivot", "pixelsPerUnit", "border" })]
	[Preserve]
	public class ES3Type_Sprite : ES3UnityObjectType
	{
		[Token(Token = "0x4000E93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60017BF")]
		[Address(RVA = "0xF46AF4", Offset = "0xF46AF4", VA = "0xF46AF4")]
		public ES3Type_Sprite()
		{
		}

		[Token(Token = "0x60017C0")]
		[Address(RVA = "0xF46BAC", Offset = "0xF46BAC", VA = "0xF46BAC", Slot = "10")]
		protected override void WriteUnityObject(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60017C1")]
		protected override void ReadUnityObject<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x60017C2")]
		protected override object ReadUnityObject<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000383")]
	[ES3Properties(new string[]
	{
		"sprite", "color", "flipX", "flipY", "enabled", "shadowCastingMode", "receiveShadows", "sharedMaterials", "lightmapIndex", "realtimeLightmapIndex",
		"lightmapScaleOffset", "motionVectorGenerationMode", "realtimeLightmapScaleOffset", "lightProbeUsage", "lightProbeProxyVolumeOverride", "probeAnchor", "reflectionProbeUsage", "sortingLayerName", "sortingLayerID", "sortingOrder"
	})]
	[Preserve]
	public class ES3Type_SpriteRenderer : ES3ComponentType
	{
		[Token(Token = "0x4000E94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60017C3")]
		[Address(RVA = "0xF46F08", Offset = "0xF46F08", VA = "0xF46F08")]
		public ES3Type_SpriteRenderer()
		{
		}

		[Token(Token = "0x60017C4")]
		[Address(RVA = "0xF46FC0", Offset = "0xF46FC0", VA = "0xF46FC0", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60017C5")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000384")]
	public class ES3Type_SpriteRendererArray : ES3ArrayType
	{
		[Token(Token = "0x4000E95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60017C6")]
		[Address(RVA = "0xF47810", Offset = "0xF47810", VA = "0xF47810")]
		public ES3Type_SpriteRendererArray()
		{
		}
	}
	[Token(Token = "0x2000385")]
	[ES3Properties(new string[] { "properties", "systems", "types" })]
	[Preserve]
	public class ES3Type_SubEmittersModule : ES3Type
	{
		[Token(Token = "0x4000E96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60017C7")]
		[Address(RVA = "0xF478E8", Offset = "0xF478E8", VA = "0xF478E8")]
		public ES3Type_SubEmittersModule()
		{
		}

		[Token(Token = "0x60017C8")]
		[Address(RVA = "0xF479A0", Offset = "0xF479A0", VA = "0xF479A0", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60017C9")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x60017CA")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000386")]
	[Preserve]
	[ES3Properties(new string[] { "filterMode", "anisoLevel", "wrapMode", "mipMapBias", "rawTextureData" })]
	public class ES3Type_Texture : ES3Type
	{
		[Token(Token = "0x4000E97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60017CB")]
		[Address(RVA = "0xF47C54", Offset = "0xF47C54", VA = "0xF47C54")]
		public ES3Type_Texture()
		{
		}

		[Token(Token = "0x60017CC")]
		[Address(RVA = "0xF47D0C", Offset = "0xF47D0C", VA = "0xF47D0C", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60017CD")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x60017CE")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000387")]
	public class ES3Type_TextureArray : ES3ArrayType
	{
		[Token(Token = "0x4000E98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60017CF")]
		[Address(RVA = "0xF47EA0", Offset = "0xF47EA0", VA = "0xF47EA0")]
		public ES3Type_TextureArray()
		{
		}
	}
	[Token(Token = "0x2000388")]
	[Preserve]
	[ES3Properties(new string[] { "filterMode", "anisoLevel", "wrapMode", "mipMapBias", "rawTextureData" })]
	public class ES3Type_Texture2D : ES3UnityObjectType
	{
		[Token(Token = "0x4000E99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60017D0")]
		[Address(RVA = "0xF47F78", Offset = "0xF47F78", VA = "0xF47F78")]
		public ES3Type_Texture2D()
		{
		}

		[Token(Token = "0x60017D1")]
		[Address(RVA = "0xF48030", Offset = "0xF48030", VA = "0xF48030", Slot = "10")]
		protected override void WriteUnityObject(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60017D2")]
		protected override void ReadUnityObject<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x60017D3")]
		protected override object ReadUnityObject<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x60017D4")]
		[Address(RVA = "0xF484BC", Offset = "0xF484BC", VA = "0xF484BC")]
		protected bool IsReadable(Texture2D instance)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000389")]
	public class ES3Type_Texture2DArray : ES3ArrayType
	{
		[Token(Token = "0x4000E9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60017D5")]
		[Address(RVA = "0xF48544", Offset = "0xF48544", VA = "0xF48544")]
		public ES3Type_Texture2DArray()
		{
		}
	}
	[Token(Token = "0x200038A")]
	[Preserve]
	[ES3Properties(new string[]
	{
		"enabled", "numTilesX", "numTilesY", "animation", "useRandomRow", "frameOverTime", "frameOverTimeMultiplier", "startFrame", "startFrameMultiplier", "cycleCount",
		"rowIndex", "uvChannelMask", "flipU", "flipV"
	})]
	public class ES3Type_TextureSheetAnimationModule : ES3Type
	{
		[Token(Token = "0x4000E9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60017D6")]
		[Address(RVA = "0xF4861C", Offset = "0xF4861C", VA = "0xF4861C")]
		public ES3Type_TextureSheetAnimationModule()
		{
		}

		[Token(Token = "0x60017D7")]
		[Address(RVA = "0xF486D4", Offset = "0xF486D4", VA = "0xF486D4", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60017D8")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x60017D9")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x200038B")]
	[Preserve]
	[ES3Properties(new string[]
	{
		"enabled", "ratio", "lifetime", "lifetimeMultiplier", "minVertexDistance", "textureMode", "worldSpace", "dieWithParticles", "sizeAffectsWidth", "sizeAffectsLifetime",
		"inheritParticleColor", "colorOverLifetime", "widthOverTrail", "widthOverTrailMultiplier", "colorOverTrail"
	})]
	public class ES3Type_TrailModule : ES3Type
	{
		[Token(Token = "0x4000E9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60017DA")]
		[Address(RVA = "0xF48C94", Offset = "0xF48C94", VA = "0xF48C94")]
		public ES3Type_TrailModule()
		{
		}

		[Token(Token = "0x60017DB")]
		[Address(RVA = "0xF48D4C", Offset = "0xF48D4C", VA = "0xF48D4C", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60017DC")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x60017DD")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x200038C")]
	[Preserve]
	[ES3Properties(new string[] { "enabled", "inside", "outside", "enter", "exit", "radiusScale" })]
	public class ES3Type_TriggerModule : ES3Type
	{
		[Token(Token = "0x4000E9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60017DE")]
		[Address(RVA = "0xF4945C", Offset = "0xF4945C", VA = "0xF4945C")]
		public ES3Type_TriggerModule()
		{
		}

		[Token(Token = "0x60017DF")]
		[Address(RVA = "0xF49514", Offset = "0xF49514", VA = "0xF49514", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60017E0")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x60017E1")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x200038D")]
	[Preserve]
	[ES3Properties(new string[] { "x", "y" })]
	public class ES3Type_Vector2 : ES3Type
	{
		[Token(Token = "0x4000E9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60017E2")]
		[Address(RVA = "0xF49814", Offset = "0xF49814", VA = "0xF49814")]
		public ES3Type_Vector2()
		{
		}

		[Token(Token = "0x60017E3")]
		[Address(RVA = "0xF498CC", Offset = "0xF498CC", VA = "0xF498CC", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60017E4")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x200038E")]
	public class ES3Type_Vector2Array : ES3ArrayType
	{
		[Token(Token = "0x4000E9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60017E5")]
		[Address(RVA = "0xF49A18", Offset = "0xF49A18", VA = "0xF49A18")]
		public ES3Type_Vector2Array()
		{
		}
	}
	[Token(Token = "0x200038F")]
	[Preserve]
	[ES3Properties(new string[] { "x", "y" })]
	public class ES3Type_Vector2Int : ES3Type
	{
		[Token(Token = "0x4000EA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60017E6")]
		[Address(RVA = "0xF49AF0", Offset = "0xF49AF0", VA = "0xF49AF0")]
		public ES3Type_Vector2Int()
		{
		}

		[Token(Token = "0x60017E7")]
		[Address(RVA = "0xF49BA8", Offset = "0xF49BA8", VA = "0xF49BA8", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60017E8")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000390")]
	public class ES3Type_Vector2IntArray : ES3ArrayType
	{
		[Token(Token = "0x4000EA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60017E9")]
		[Address(RVA = "0xF49CF8", Offset = "0xF49CF8", VA = "0xF49CF8")]
		public ES3Type_Vector2IntArray()
		{
		}
	}
	[Token(Token = "0x2000391")]
	[Preserve]
	[ES3Properties(new string[] { "x", "y", "z" })]
	public class ES3Type_Vector3 : ES3Type
	{
		[Token(Token = "0x4000EA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60017EA")]
		[Address(RVA = "0xF49DD0", Offset = "0xF49DD0", VA = "0xF49DD0")]
		public ES3Type_Vector3()
		{
		}

		[Token(Token = "0x60017EB")]
		[Address(RVA = "0xF49E88", Offset = "0xF49E88", VA = "0xF49E88", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60017EC")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000392")]
	public class ES3Type_Vector3Array : ES3ArrayType
	{
		[Token(Token = "0x4000EA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60017ED")]
		[Address(RVA = "0xF4A02C", Offset = "0xF4A02C", VA = "0xF4A02C")]
		public ES3Type_Vector3Array()
		{
		}
	}
	[Token(Token = "0x2000393")]
	[Preserve]
	[ES3Properties(new string[] { "x", "y", "z" })]
	public class ES3Type_Vector3Int : ES3Type
	{
		[Token(Token = "0x4000EA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60017EE")]
		[Address(RVA = "0xF4A104", Offset = "0xF4A104", VA = "0xF4A104")]
		public ES3Type_Vector3Int()
		{
		}

		[Token(Token = "0x60017EF")]
		[Address(RVA = "0xF4A1BC", Offset = "0xF4A1BC", VA = "0xF4A1BC", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60017F0")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000394")]
	public class ES3Type_Vector3IntArray : ES3ArrayType
	{
		[Token(Token = "0x4000EA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60017F1")]
		[Address(RVA = "0xF4A360", Offset = "0xF4A360", VA = "0xF4A360")]
		public ES3Type_Vector3IntArray()
		{
		}
	}
	[Token(Token = "0x2000395")]
	[Preserve]
	[ES3Properties(new string[] { "x", "y", "z", "w" })]
	public class ES3Type_Vector4 : ES3Type
	{
		[Token(Token = "0x4000EA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60017F2")]
		[Address(RVA = "0xF4B438", Offset = "0xF4B438", VA = "0xF4B438")]
		public ES3Type_Vector4()
		{
		}

		[Token(Token = "0x60017F3")]
		[Address(RVA = "0xF4B4F0", Offset = "0xF4B4F0", VA = "0xF4B4F0", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60017F4")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x60017F5")]
		[Address(RVA = "0xF4B6E8", Offset = "0xF4B6E8", VA = "0xF4B6E8")]
		public static bool Equals(Vector4 a, Vector4 b)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000396")]
	public class ES3Type_Vector4Array : ES3ArrayType
	{
		[Token(Token = "0x4000EA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60017F6")]
		[Address(RVA = "0xF4B820", Offset = "0xF4B820", VA = "0xF4B820")]
		public ES3Type_Vector4Array()
		{
		}
	}
	[Token(Token = "0x2000397")]
	[Preserve]
	[ES3Properties(new string[] { "enabled", "x", "y", "z", "xMultiplier", "yMultiplier", "zMultiplier", "space" })]
	public class ES3Type_VelocityOverLifetimeModule : ES3Type
	{
		[Token(Token = "0x4000EA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60017F7")]
		[Address(RVA = "0xF4B8F8", Offset = "0xF4B8F8", VA = "0xF4B8F8")]
		public ES3Type_VelocityOverLifetimeModule()
		{
		}

		[Token(Token = "0x60017F8")]
		[Address(RVA = "0xF4B9B0", Offset = "0xF4B9B0", VA = "0xF4B9B0", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60017F9")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x60017FA")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
}
namespace ES3Internal
{
	[Token(Token = "0x2000398")]
	internal static class ES3Debug
	{
		[Token(Token = "0x4000EA9")]
		private const string disableInfoMsg = "\n<i>To disable these messages from Easy Save, go to Window > Easy Save 3 > Settings, and uncheck 'Log Info'</i>";

		[Token(Token = "0x4000EAA")]
		private const string disableWarningMsg = "\n<i>To disable warnings from Easy Save, go to Window > Easy Save 3 > Settings, and uncheck 'Log Warnings'</i>";

		[Token(Token = "0x4000EAB")]
		private const string disableErrorMsg = "\n<i>To disable these error messages from Easy Save, go to Window > Easy Save 3 > Settings, and uncheck 'Log Errors'</i>";

		[Token(Token = "0x4000EAC")]
		private const char indentChar = '-';

		[Token(Token = "0x60017FB")]
		[Address(RVA = "0xF4BDCC", Offset = "0xF4BDCC", VA = "0xF4BDCC")]
		public static void Log(string msg, [Optional] UnityEngine.Object context, int indent = 0)
		{
		}

		[Token(Token = "0x60017FC")]
		[Address(RVA = "0xF4BFD8", Offset = "0xF4BFD8", VA = "0xF4BFD8")]
		public static void LogWarning(string msg, [Optional] UnityEngine.Object context, int indent = 0)
		{
		}

		[Token(Token = "0x60017FD")]
		[Address(RVA = "0xF4C15C", Offset = "0xF4C15C", VA = "0xF4C15C")]
		public static void LogError(string msg, [Optional] UnityEngine.Object context, int indent = 0)
		{
		}

		[Token(Token = "0x60017FE")]
		[Address(RVA = "0xF4BF74", Offset = "0xF4BF74", VA = "0xF4BF74")]
		private static string Indent(int size)
		{
			return null;
		}
	}
	[Token(Token = "0x2000399")]
	public static class ES3Hash
	{
		[Token(Token = "0x60017FF")]
		[Address(RVA = "0xF4C2E0", Offset = "0xF4C2E0", VA = "0xF4C2E0")]
		public static string SHA1Hash(string input)
		{
			return null;
		}
	}
	[Token(Token = "0x200039A")]
	public abstract class EncryptionAlgorithm
	{
		[Token(Token = "0x6001800")]
		public abstract byte[] Encrypt(byte[] bytes, string password, int bufferSize);

		[Token(Token = "0x6001801")]
		public abstract byte[] Decrypt(byte[] bytes, string password, int bufferSize);

		[Token(Token = "0x6001802")]
		public abstract void Encrypt(Stream input, Stream output, string password, int bufferSize);

		[Token(Token = "0x6001803")]
		public abstract void Decrypt(Stream input, Stream output, string password, int bufferSize);

		[Token(Token = "0x6001804")]
		[Address(RVA = "0xF4C4DC", Offset = "0xF4C4DC", VA = "0xF4C4DC")]
		protected static void CopyStream(Stream input, Stream output, int bufferSize)
		{
		}

		[Token(Token = "0x6001805")]
		[Address(RVA = "0xF4C5BC", Offset = "0xF4C5BC", VA = "0xF4C5BC")]
		protected EncryptionAlgorithm()
		{
		}
	}
	[Token(Token = "0x200039B")]
	public class AESEncryptionAlgorithm : EncryptionAlgorithm
	{
		[Token(Token = "0x4000EAD")]
		private const int ivSize = 16;

		[Token(Token = "0x4000EAE")]
		private const int keySize = 16;

		[Token(Token = "0x4000EAF")]
		private const int pwIterations = 100;

		[Token(Token = "0x6001806")]
		[Address(RVA = "0xF4C5C4", Offset = "0xF4C5C4", VA = "0xF4C5C4", Slot = "4")]
		public override byte[] Encrypt(byte[] bytes, string password, int bufferSize)
		{
			return null;
		}

		[Token(Token = "0x6001807")]
		[Address(RVA = "0xF4C8E4", Offset = "0xF4C8E4", VA = "0xF4C8E4", Slot = "5")]
		public override byte[] Decrypt(byte[] bytes, string password, int bufferSize)
		{
			return null;
		}

		[Token(Token = "0x6001808")]
		[Address(RVA = "0xF4CC04", Offset = "0xF4CC04", VA = "0xF4CC04", Slot = "6")]
		public override void Encrypt(Stream input, Stream output, string password, int bufferSize)
		{
		}

		[Token(Token = "0x6001809")]
		[Address(RVA = "0xF4D164", Offset = "0xF4D164", VA = "0xF4D164", Slot = "7")]
		public override void Decrypt(Stream input, Stream output, string password, int bufferSize)
		{
		}

		[Token(Token = "0x600180A")]
		[Address(RVA = "0xF4D700", Offset = "0xF4D700", VA = "0xF4D700")]
		public AESEncryptionAlgorithm()
		{
		}
	}
	[Token(Token = "0x200039C")]
	public class UnbufferedCryptoStream : MemoryStream
	{
		[Token(Token = "0x4000EB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly Stream stream;

		[Token(Token = "0x4000EB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly bool isReadStream;

		[Token(Token = "0x4000EB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private string password;

		[Token(Token = "0x4000EB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int bufferSize;

		[Token(Token = "0x4000EB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private EncryptionAlgorithm alg;

		[Token(Token = "0x4000EB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private bool disposed;

		[Token(Token = "0x600180B")]
		[Address(RVA = "0xF4D708", Offset = "0xF4D708", VA = "0xF4D708")]
		public UnbufferedCryptoStream(Stream stream, bool isReadStream, string password, int bufferSize, EncryptionAlgorithm alg)
		{
		}

		[Token(Token = "0x600180C")]
		[Address(RVA = "0xF4D7C4", Offset = "0xF4D7C4", VA = "0xF4D7C4", Slot = "20")]
		protected override void Dispose(bool disposing)
		{
		}
	}
	[Token(Token = "0x200039D")]
	public struct ES3Data
	{
		[Token(Token = "0x4000EB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ES3Type type;

		[Token(Token = "0x4000EB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public byte[] bytes;

		[Token(Token = "0x600180D")]
		[Address(RVA = "0xF4D848", Offset = "0xF4D848", VA = "0xF4D848")]
		public ES3Data(Type type, byte[] bytes)
		{
		}

		[Token(Token = "0x600180E")]
		[Address(RVA = "0xF4DB08", Offset = "0xF4DB08", VA = "0xF4DB08")]
		public ES3Data(ES3Type type, byte[] bytes)
		{
		}
	}
	[Token(Token = "0x200039E")]
	public static class ES3IO
	{
		[Token(Token = "0x200039F")]
		public enum ES3FileMode
		{
			[Token(Token = "0x4000EBC")]
			Read,
			[Token(Token = "0x4000EBD")]
			Write,
			[Token(Token = "0x4000EBE")]
			Append
		}

		[Token(Token = "0x4000EB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static readonly string persistentDataPath;

		[Token(Token = "0x4000EB9")]
		internal const string backupFileSuffix = ".bac";

		[Token(Token = "0x4000EBA")]
		internal const string temporaryFileSuffix = ".tmp";

		[Token(Token = "0x600180F")]
		[Address(RVA = "0xF4DB38", Offset = "0xF4DB38", VA = "0xF4DB38")]
		public static DateTime GetTimestamp(string filePath)
		{
			return default(DateTime);
		}

		[Token(Token = "0x6001810")]
		[Address(RVA = "0xF4DC08", Offset = "0xF4DC08", VA = "0xF4DC08")]
		public static string GetExtension(string path)
		{
			return null;
		}

		[Token(Token = "0x6001811")]
		[Address(RVA = "0xF4DC60", Offset = "0xF4DC60", VA = "0xF4DC60")]
		public static void DeleteFile(string filePath)
		{
		}

		[Token(Token = "0x6001812")]
		[Address(RVA = "0xF4DC00", Offset = "0xF4DC00", VA = "0xF4DC00")]
		public static bool FileExists(string filePath)
		{
			return default(bool);
		}

		[Token(Token = "0x6001813")]
		[Address(RVA = "0xF4DCD4", Offset = "0xF4DCD4", VA = "0xF4DCD4")]
		public static void MoveFile(string sourcePath, string destPath)
		{
		}

		[Token(Token = "0x6001814")]
		[Address(RVA = "0xF4DCDC", Offset = "0xF4DCDC", VA = "0xF4DCDC")]
		public static void CopyFile(string sourcePath, string destPath)
		{
		}

		[Token(Token = "0x6001815")]
		[Address(RVA = "0xF4DCE4", Offset = "0xF4DCE4", VA = "0xF4DCE4")]
		public static void MoveDirectory(string sourcePath, string destPath)
		{
		}

		[Token(Token = "0x6001816")]
		[Address(RVA = "0xF4DCEC", Offset = "0xF4DCEC", VA = "0xF4DCEC")]
		public static void CreateDirectory(string directoryPath)
		{
		}

		[Token(Token = "0x6001817")]
		[Address(RVA = "0xF4DCF4", Offset = "0xF4DCF4", VA = "0xF4DCF4")]
		public static bool DirectoryExists(string directoryPath)
		{
			return default(bool);
		}

		[Token(Token = "0x6001818")]
		[Address(RVA = "0xF4DCFC", Offset = "0xF4DCFC", VA = "0xF4DCFC")]
		public static string GetDirectoryPath(string path, char seperator = '/')
		{
			return null;
		}

		[Token(Token = "0x6001819")]
		[Address(RVA = "0xF4DDF4", Offset = "0xF4DDF4", VA = "0xF4DDF4")]
		public static bool UsesForwardSlash(string path)
		{
			return default(bool);
		}

		[Token(Token = "0x600181A")]
		[Address(RVA = "0xF4DE48", Offset = "0xF4DE48", VA = "0xF4DE48")]
		public static string CombinePathAndFilename(string directoryPath, string fileOrDirectoryName)
		{
			return null;
		}

		[Token(Token = "0x600181B")]
		[Address(RVA = "0xF4DEF4", Offset = "0xF4DEF4", VA = "0xF4DEF4")]
		public static string[] GetDirectories(string path, bool getFullPaths = true)
		{
			return null;
		}

		[Token(Token = "0x600181C")]
		[Address(RVA = "0xF4E054", Offset = "0xF4E054", VA = "0xF4E054")]
		public static void DeleteDirectory(string directoryPath)
		{
		}

		[Token(Token = "0x600181D")]
		[Address(RVA = "0xF4E0CC", Offset = "0xF4E0CC", VA = "0xF4E0CC")]
		public static string[] GetFiles(string path, bool getFullPaths = true)
		{
			return null;
		}

		[Token(Token = "0x600181E")]
		[Address(RVA = "0xF4E1E0", Offset = "0xF4E1E0", VA = "0xF4E1E0")]
		public static byte[] ReadAllBytes(string path)
		{
			return null;
		}

		[Token(Token = "0x600181F")]
		[Address(RVA = "0xF4E1E8", Offset = "0xF4E1E8", VA = "0xF4E1E8")]
		public static void WriteAllBytes(string path, byte[] bytes)
		{
		}

		[Token(Token = "0x6001820")]
		[Address(RVA = "0xF4E1F0", Offset = "0xF4E1F0", VA = "0xF4E1F0")]
		public static void CommitBackup(ES3Settings settings)
		{
		}
	}
	[Token(Token = "0x20003A0")]
	public class ES3Prefab : MonoBehaviour
	{
		[Token(Token = "0x4000EBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public long prefabId;

		[Token(Token = "0x4000EC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ES3RefIdDictionary localRefs;

		[Token(Token = "0x6001822")]
		[Address(RVA = "0xF4E644", Offset = "0xF4E644", VA = "0xF4E644")]
		public void Awake()
		{
		}

		[Token(Token = "0x6001823")]
		[Address(RVA = "0xF4EB50", Offset = "0xF4EB50", VA = "0xF4EB50")]
		public long Get(UnityEngine.Object obj)
		{
			return default(long);
		}

		[Token(Token = "0x6001824")]
		[Address(RVA = "0xF4EBC8", Offset = "0xF4EBC8", VA = "0xF4EBC8")]
		public long Add(UnityEngine.Object obj)
		{
			return default(long);
		}

		[Token(Token = "0x6001825")]
		[Address(RVA = "0xF4ECE8", Offset = "0xF4ECE8", VA = "0xF4ECE8")]
		public Dictionary<string, string> GetReferences()
		{
			return null;
		}

		[Token(Token = "0x6001826")]
		[Address(RVA = "0xF4EF58", Offset = "0xF4EF58", VA = "0xF4EF58")]
		public void ApplyReferences(Dictionary<long, long> localToGlobal)
		{
		}

		[Token(Token = "0x6001827")]
		[Address(RVA = "0xF4EC9C", Offset = "0xF4EC9C", VA = "0xF4EC9C")]
		public static long GetNewRefID()
		{
			return default(long);
		}

		[Token(Token = "0x6001828")]
		[Address(RVA = "0xF4F4F8", Offset = "0xF4F4F8", VA = "0xF4F4F8")]
		public ES3Prefab()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003A1")]
	[DisallowMultipleComponent]
	public abstract class ES3ReferenceMgrBase : MonoBehaviour
	{
		[Token(Token = "0x4000EC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal object _lock;

		[Token(Token = "0x4000EC2")]
		public const string referencePropertyName = "_ES3Ref";

		[Token(Token = "0x4000EC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static ES3ReferenceMgrBase _current;

		[Token(Token = "0x4000EC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static HashSet<ES3ReferenceMgrBase> mgrs;

		[Token(Token = "0x4000EC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static System.Random rng;

		[Token(Token = "0x4000EC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public bool openPrefabs;

		[Token(Token = "0x4000EC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<ES3Prefab> prefabs;

		[Token(Token = "0x4000EC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		public ES3IdRefDictionary idRef;

		[Token(Token = "0x4000EC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private ES3RefIdDictionary _refId;

		[Token(Token = "0x17000293")]
		public static ES3ReferenceMgrBase Current
		{
			[Token(Token = "0x6001829")]
			[Address(RVA = "0xF4E830", Offset = "0xF4E830", VA = "0xF4E830")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000294")]
		public bool IsInitialised
		{
			[Token(Token = "0x600182B")]
			[Address(RVA = "0xF4F758", Offset = "0xF4F758", VA = "0xF4F758")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000295")]
		public ES3RefIdDictionary refId
		{
			[Token(Token = "0x600182C")]
			[Address(RVA = "0xF4F7B4", Offset = "0xF4F7B4", VA = "0xF4F7B4")]
			get
			{
				return null;
			}
			[Token(Token = "0x600182D")]
			[Address(RVA = "0xF4F9C4", Offset = "0xF4F9C4", VA = "0xF4F9C4")]
			set
			{
			}
		}

		[Token(Token = "0x17000296")]
		public ES3GlobalReferences GlobalReferences
		{
			[Token(Token = "0x600182E")]
			[Address(RVA = "0xF4F9CC", Offset = "0xF4F9CC", VA = "0xF4F9CC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600182A")]
		[Address(RVA = "0xF4F5B8", Offset = "0xF4F5B8", VA = "0xF4F5B8")]
		public static ES3ReferenceMgrBase GetManagerFromScene(Scene scene)
		{
			return null;
		}

		[Token(Token = "0x600182F")]
		[Address(RVA = "0xF4F9DC", Offset = "0xF4F9DC", VA = "0xF4F9DC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001830")]
		[Address(RVA = "0xF4FD1C", Offset = "0xF4FD1C", VA = "0xF4FD1C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001831")]
		[Address(RVA = "0xF4FBC8", Offset = "0xF4FBC8", VA = "0xF4FBC8")]
		public void Merge(ES3ReferenceMgrBase otherMgr)
		{
		}

		[Token(Token = "0x6001832")]
		[Address(RVA = "0xF4FD9C", Offset = "0xF4FD9C", VA = "0xF4FD9C")]
		public long Get(UnityEngine.Object obj)
		{
			return default(long);
		}

		[Token(Token = "0x6001833")]
		[Address(RVA = "0xF4FFFC", Offset = "0xF4FFFC", VA = "0xF4FFFC")]
		internal UnityEngine.Object Get(long id, Type type, bool suppressWarnings = false)
		{
			return null;
		}

		[Token(Token = "0x6001834")]
		[Address(RVA = "0xF505B4", Offset = "0xF505B4", VA = "0xF505B4")]
		public UnityEngine.Object Get(long id, bool suppressWarnings = false)
		{
			return null;
		}

		[Token(Token = "0x6001835")]
		[Address(RVA = "0xF505C0", Offset = "0xF505C0", VA = "0xF505C0")]
		public ES3Prefab GetPrefab(long id, bool suppressWarnings = false)
		{
			return null;
		}

		[Token(Token = "0x6001836")]
		[Address(RVA = "0xF50994", Offset = "0xF50994", VA = "0xF50994")]
		public long GetPrefab(ES3Prefab prefabToFind, bool suppressWarnings = false)
		{
			return default(long);
		}

		[Token(Token = "0x6001837")]
		[Address(RVA = "0xF4E9B4", Offset = "0xF4E9B4", VA = "0xF4E9B4")]
		public long Add(UnityEngine.Object obj)
		{
			return default(long);
		}

		[Token(Token = "0x6001838")]
		[Address(RVA = "0xF4F19C", Offset = "0xF4F19C", VA = "0xF4F19C")]
		public long Add(UnityEngine.Object obj, long id)
		{
			return default(long);
		}

		[Token(Token = "0x6001839")]
		[Address(RVA = "0xF50D74", Offset = "0xF50D74", VA = "0xF50D74")]
		public bool AddPrefab(ES3Prefab prefab)
		{
			return default(bool);
		}

		[Token(Token = "0x600183A")]
		[Address(RVA = "0xF50E5C", Offset = "0xF50E5C", VA = "0xF50E5C")]
		public void Remove(UnityEngine.Object obj)
		{
		}

		[Token(Token = "0x600183B")]
		[Address(RVA = "0xF51390", Offset = "0xF51390", VA = "0xF51390")]
		public void Remove(long referenceID)
		{
		}

		[Token(Token = "0x600183C")]
		[Address(RVA = "0xF518BC", Offset = "0xF518BC", VA = "0xF518BC")]
		public void RemoveNullOrInvalidValues()
		{
		}

		[Token(Token = "0x600183D")]
		[Address(RVA = "0xF51C10", Offset = "0xF51C10", VA = "0xF51C10")]
		public void Clear()
		{
		}

		[Token(Token = "0x600183E")]
		[Address(RVA = "0xF51D34", Offset = "0xF51D34", VA = "0xF51D34")]
		public bool Contains(UnityEngine.Object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x600183F")]
		[Address(RVA = "0xF51D90", Offset = "0xF51D90", VA = "0xF51D90")]
		public bool Contains(long referenceID)
		{
			return default(bool);
		}

		[Token(Token = "0x6001840")]
		[Address(RVA = "0xF51DE8", Offset = "0xF51DE8", VA = "0xF51DE8")]
		public void ChangeId(long oldId, long newId)
		{
		}

		[Token(Token = "0x6001841")]
		[Address(RVA = "0xF4F370", Offset = "0xF4F370", VA = "0xF4F370")]
		internal static long GetNewRefID()
		{
			return default(long);
		}

		[Token(Token = "0x6001842")]
		[Address(RVA = "0xF4EC94", Offset = "0xF4EC94", VA = "0xF4EC94")]
		internal static bool CanBeSaved(UnityEngine.Object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001843")]
		[Address(RVA = "0xF51FF4", Offset = "0xF51FF4", VA = "0xF51FF4")]
		protected ES3ReferenceMgrBase()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003A5")]
	public class ES3IdRefDictionary : ES3SerializableDictionary<long, UnityEngine.Object>
	{
		[Token(Token = "0x600184D")]
		[Address(RVA = "0xF523F8", Offset = "0xF523F8", VA = "0xF523F8", Slot = "44")]
		protected override bool KeysAreEqual(long a, long b)
		{
			return default(bool);
		}

		[Token(Token = "0x600184E")]
		[Address(RVA = "0xF52404", Offset = "0xF52404", VA = "0xF52404", Slot = "45")]
		protected override bool ValuesAreEqual(UnityEngine.Object a, UnityEngine.Object b)
		{
			return default(bool);
		}

		[Token(Token = "0x600184F")]
		[Address(RVA = "0xF520F0", Offset = "0xF520F0", VA = "0xF520F0")]
		public ES3IdRefDictionary()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003A6")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public class ES3RefIdDictionary : ES3SerializableDictionary<UnityEngine.Object, long>
	{
		[Token(Token = "0x6001850")]
		[Address(RVA = "0xF5246C", Offset = "0xF5246C", VA = "0xF5246C", Slot = "44")]
		protected override bool KeysAreEqual(UnityEngine.Object a, UnityEngine.Object b)
		{
			return default(bool);
		}

		[Token(Token = "0x6001851")]
		[Address(RVA = "0xF524D4", Offset = "0xF524D4", VA = "0xF524D4", Slot = "45")]
		protected override bool ValuesAreEqual(long a, long b)
		{
			return default(bool);
		}

		[Token(Token = "0x6001852")]
		[Address(RVA = "0xF4F570", Offset = "0xF4F570", VA = "0xF4F570")]
		public ES3RefIdDictionary()
		{
		}
	}
	[Token(Token = "0x20003A7")]
	public static class ES3Reflection
	{
		[Token(Token = "0x20003A8")]
		public struct ES3ReflectedMember
		{
			[Token(Token = "0x4000EDD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private FieldInfo fieldInfo;

			[Token(Token = "0x4000EDE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private PropertyInfo propertyInfo;

			[Token(Token = "0x4000EDF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool isProperty;

			[Token(Token = "0x17000298")]
			public bool IsNull
			{
				[Token(Token = "0x600187D")]
				[Address(RVA = "0xF56864", Offset = "0xF56864", VA = "0xF56864")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x17000299")]
			public string Name
			{
				[Token(Token = "0x600187E")]
				[Address(RVA = "0xF568A0", Offset = "0xF568A0", VA = "0xF568A0")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700029A")]
			public Type MemberType
			{
				[Token(Token = "0x600187F")]
				[Address(RVA = "0xF568D0", Offset = "0xF568D0", VA = "0xF568D0")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700029B")]
			public bool IsPublic
			{
				[Token(Token = "0x6001880")]
				[Address(RVA = "0xF56914", Offset = "0xF56914", VA = "0xF56914")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x1700029C")]
			public bool IsProtected
			{
				[Token(Token = "0x6001881")]
				[Address(RVA = "0xF569A0", Offset = "0xF569A0", VA = "0xF569A0")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x1700029D")]
			public bool IsStatic
			{
				[Token(Token = "0x6001882")]
				[Address(RVA = "0xF569F0", Offset = "0xF569F0", VA = "0xF569F0")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6001883")]
			[Address(RVA = "0xF542AC", Offset = "0xF542AC", VA = "0xF542AC")]
			public ES3ReflectedMember(object fieldPropertyInfo)
			{
			}

			[Token(Token = "0x6001884")]
			[Address(RVA = "0xF56A40", Offset = "0xF56A40", VA = "0xF56A40")]
			public void SetValue(object obj, object value)
			{
			}

			[Token(Token = "0x6001885")]
			[Address(RVA = "0xF56A84", Offset = "0xF56A84", VA = "0xF56A84")]
			public object GetValue(object obj)
			{
				return null;
			}
		}

		[Token(Token = "0x20003A9")]
		public class ES3ReflectedMethod
		{
			[Token(Token = "0x4000EE0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private MethodInfo method;

			[Token(Token = "0x6001886")]
			[Address(RVA = "0xF54CB0", Offset = "0xF54CB0", VA = "0xF54CB0")]
			public ES3ReflectedMethod(Type type, string methodName, Type[] genericParameters, Type[] parameterTypes)
			{
			}

			[Token(Token = "0x6001887")]
			[Address(RVA = "0xF56AD0", Offset = "0xF56AD0", VA = "0xF56AD0")]
			public ES3ReflectedMethod(Type type, string methodName, Type[] genericParameters, Type[] parameterTypes, BindingFlags bindingAttr)
			{
			}

			[Token(Token = "0x6001888")]
			[Address(RVA = "0xF56B60", Offset = "0xF56B60", VA = "0xF56B60")]
			public object Invoke(object obj, [Optional] object[] parameters)
			{
				return null;
			}
		}

		[Token(Token = "0x4000ED1")]
		public const string memberFieldPrefix = "m_";

		[Token(Token = "0x4000ED2")]
		public const string componentTagFieldName = "tag";

		[Token(Token = "0x4000ED3")]
		public const string componentNameFieldName = "name";

		[Token(Token = "0x4000ED4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly string[] excludedPropertyNames;

		[Token(Token = "0x4000ED5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly Type serializableAttributeType;

		[Token(Token = "0x4000ED6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly Type serializeFieldAttributeType;

		[Token(Token = "0x4000ED7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly Type obsoleteAttributeType;

		[Token(Token = "0x4000ED8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly Type nonSerializedAttributeType;

		[Token(Token = "0x4000ED9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static readonly Type es3SerializableAttributeType;

		[Token(Token = "0x4000EDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static readonly Type es3NonSerializableAttributeType;

		[Token(Token = "0x4000EDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static Type[] EmptyTypes;

		[Token(Token = "0x4000EDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private static Assembly[] _assemblies;

		[Token(Token = "0x17000297")]
		private static Assembly[] Assemblies
		{
			[Token(Token = "0x6001853")]
			[Address(RVA = "0xF524E0", Offset = "0xF524E0", VA = "0xF524E0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001854")]
		[Address(RVA = "0xF527E4", Offset = "0xF527E4", VA = "0xF527E4")]
		public static Type[] GetElementTypes(Type type)
		{
			return null;
		}

		[Token(Token = "0x6001855")]
		[Address(RVA = "0xF5298C", Offset = "0xF5298C", VA = "0xF5298C")]
		public static List<FieldInfo> GetSerializableFields(Type type, [Optional] List<FieldInfo> serializableFields, bool safe = true, [Optional] string[] memberNames, BindingFlags bindings = BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic)
		{
			return null;
		}

		[Token(Token = "0x6001856")]
		[Address(RVA = "0xF532DC", Offset = "0xF532DC", VA = "0xF532DC")]
		public static List<PropertyInfo> GetSerializableProperties(Type type, [Optional] List<PropertyInfo> serializableProperties, bool safe = true, [Optional] string[] memberNames, BindingFlags bindings = BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic)
		{
			return null;
		}

		[Token(Token = "0x6001857")]
		[Address(RVA = "0xF52FC0", Offset = "0xF52FC0", VA = "0xF52FC0")]
		public static bool TypeIsSerializable(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6001858")]
		[Address(RVA = "0xF53B38", Offset = "0xF53B38", VA = "0xF53B38")]
		public static object CreateInstance(Type type)
		{
			return null;
		}

		[Token(Token = "0x6001859")]
		[Address(RVA = "0xF53CA8", Offset = "0xF53CA8", VA = "0xF53CA8")]
		public static object CreateInstance(Type type, params object[] args)
		{
			return null;
		}

		[Token(Token = "0x600185A")]
		[Address(RVA = "0xF53E20", Offset = "0xF53E20", VA = "0xF53E20")]
		public static Array ArrayCreateInstance(Type type, int length)
		{
			return null;
		}

		[Token(Token = "0x600185B")]
		[Address(RVA = "0xF53E9C", Offset = "0xF53E9C", VA = "0xF53E9C")]
		public static Array ArrayCreateInstance(Type type, int[] dimensions)
		{
			return null;
		}

		[Token(Token = "0x600185C")]
		[Address(RVA = "0xF53EA4", Offset = "0xF53EA4", VA = "0xF53EA4")]
		public static Type MakeGenericType(Type type, Type genericParam)
		{
			return null;
		}

		[Token(Token = "0x600185D")]
		[Address(RVA = "0xF53F60", Offset = "0xF53F60", VA = "0xF53F60")]
		public static ES3ReflectedMember[] GetSerializableMembers(Type type, bool safe = true, [Optional] string[] memberNames)
		{
			return null;
		}

		[Token(Token = "0x600185E")]
		[Address(RVA = "0xF544D4", Offset = "0xF544D4", VA = "0xF544D4")]
		public static ES3ReflectedMember GetES3ReflectedProperty(Type type, string propertyName)
		{
			return default(ES3ReflectedMember);
		}

		[Token(Token = "0x600185F")]
		[Address(RVA = "0xF54690", Offset = "0xF54690", VA = "0xF54690")]
		public static ES3ReflectedMember GetES3ReflectedMember(Type type, string fieldName)
		{
			return default(ES3ReflectedMember);
		}

		[Token(Token = "0x6001860")]
		public static IList<T> GetInstances<T>()
		{
			return null;
		}

		[Token(Token = "0x6001861")]
		[Address(RVA = "0xF54854", Offset = "0xF54854", VA = "0xF54854")]
		public static IList<Type> GetDerivedTypes(Type derivedType)
		{
			return null;
		}

		[Token(Token = "0x6001862")]
		[Address(RVA = "0xF52FA0", Offset = "0xF52FA0", VA = "0xF52FA0")]
		public static bool IsAssignableFrom(Type a, Type b)
		{
			return default(bool);
		}

		[Token(Token = "0x6001863")]
		[Address(RVA = "0xF54BC8", Offset = "0xF54BC8", VA = "0xF54BC8")]
		public static Type GetGenericTypeDefinition(Type type)
		{
			return null;
		}

		[Token(Token = "0x6001864")]
		[Address(RVA = "0xF5294C", Offset = "0xF5294C", VA = "0xF5294C")]
		public static Type[] GetGenericArguments(Type type)
		{
			return null;
		}

		[Token(Token = "0x6001865")]
		[Address(RVA = "0xF54BE8", Offset = "0xF54BE8", VA = "0xF54BE8")]
		public static int GetArrayRank(Type type)
		{
			return default(int);
		}

		[Token(Token = "0x6001866")]
		[Address(RVA = "0xF54C08", Offset = "0xF54C08", VA = "0xF54C08")]
		public static string GetAssemblyQualifiedName(Type type)
		{
			return null;
		}

		[Token(Token = "0x6001867")]
		[Address(RVA = "0xF54C28", Offset = "0xF54C28", VA = "0xF54C28")]
		public static ES3ReflectedMethod GetMethod(Type type, string methodName, Type[] genericParameters, Type[] parameterTypes)
		{
			return null;
		}

		[Token(Token = "0x6001868")]
		[Address(RVA = "0xF53A38", Offset = "0xF53A38", VA = "0xF53A38")]
		public static bool TypeIsArray(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6001869")]
		[Address(RVA = "0xF5296C", Offset = "0xF5296C", VA = "0xF5296C")]
		public static Type GetElementType(Type type)
		{
			return null;
		}

		[Token(Token = "0x600186A")]
		[Address(RVA = "0xF54D28", Offset = "0xF54D28", VA = "0xF54D28")]
		public static bool IsAbstract(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x600186B")]
		[Address(RVA = "0xF54D3C", Offset = "0xF54D3C", VA = "0xF54D3C")]
		public static bool IsInterface(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x600186C")]
		[Address(RVA = "0xF5292C", Offset = "0xF5292C", VA = "0xF5292C")]
		public static bool IsGenericType(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x600186D")]
		[Address(RVA = "0xF53A24", Offset = "0xF53A24", VA = "0xF53A24")]
		public static bool IsValueType(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x600186E")]
		[Address(RVA = "0xF54D50", Offset = "0xF54D50", VA = "0xF54D50")]
		public static bool IsEnum(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x600186F")]
		[Address(RVA = "0xF53A4C", Offset = "0xF53A4C", VA = "0xF53A4C")]
		public static bool HasParameterlessConstructor(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6001870")]
		[Address(RVA = "0xF54D70", Offset = "0xF54D70", VA = "0xF54D70")]
		public static ConstructorInfo GetParameterlessConstructor(Type type)
		{
			return null;
		}

		[Token(Token = "0x6001871")]
		[Address(RVA = "0xF54DDC", Offset = "0xF54DDC", VA = "0xF54DDC")]
		public static string GetShortAssemblyQualifiedName(Type type)
		{
			return null;
		}

		[Token(Token = "0x6001872")]
		[Address(RVA = "0xF54550", Offset = "0xF54550", VA = "0xF54550")]
		public static PropertyInfo GetProperty(Type type, string propertyName)
		{
			return null;
		}

		[Token(Token = "0x6001873")]
		[Address(RVA = "0xF5470C", Offset = "0xF5470C", VA = "0xF5470C")]
		public static FieldInfo GetField(Type type, string fieldName)
		{
			return null;
		}

		[Token(Token = "0x6001874")]
		[Address(RVA = "0xF54EBC", Offset = "0xF54EBC", VA = "0xF54EBC")]
		public static MethodInfo[] GetMethods(Type type, string methodName)
		{
			return null;
		}

		[Token(Token = "0x6001875")]
		[Address(RVA = "0xF53934", Offset = "0xF53934", VA = "0xF53934")]
		public static bool IsPrimitive(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6001876")]
		[Address(RVA = "0xF52F94", Offset = "0xF52F94", VA = "0xF52F94")]
		public static bool AttributeIsDefined(MemberInfo info, Type attributeType)
		{
			return default(bool);
		}

		[Token(Token = "0x6001877")]
		[Address(RVA = "0xF53914", Offset = "0xF53914", VA = "0xF53914")]
		public static bool AttributeIsDefined(Type type, Type attributeType)
		{
			return default(bool);
		}

		[Token(Token = "0x6001878")]
		[Address(RVA = "0xF54FD8", Offset = "0xF54FD8", VA = "0xF54FD8")]
		public static bool ImplementsInterface(Type type, Type interfaceType)
		{
			return default(bool);
		}

		[Token(Token = "0x6001879")]
		[Address(RVA = "0xF532BC", Offset = "0xF532BC", VA = "0xF532BC")]
		public static Type BaseType(Type type)
		{
			return null;
		}

		[Token(Token = "0x600187A")]
		[Address(RVA = "0xF5506C", Offset = "0xF5506C", VA = "0xF5506C")]
		public static Type GetType(string typeString)
		{
			return null;
		}

		[Token(Token = "0x600187B")]
		[Address(RVA = "0xF55AA0", Offset = "0xF55AA0", VA = "0xF55AA0")]
		public static string GetTypeString(Type type)
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x20003AD")]
	public abstract class ES3SerializableDictionary<TKey, TVal> : Dictionary<TKey, TVal>, ISerializationCallbackReceiver
	{
		[Token(Token = "0x4000EE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		private List<TKey> _Keys;

		[Token(Token = "0x4000EE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		private List<TVal> _Values;

		[Token(Token = "0x6001892")]
		protected abstract bool KeysAreEqual(TKey a, TKey b);

		[Token(Token = "0x6001893")]
		protected abstract bool ValuesAreEqual(TVal a, TVal b);

		[Token(Token = "0x6001894")]
		public void OnBeforeSerialize()
		{
		}

		[Token(Token = "0x6001895")]
		public void OnAfterDeserialize()
		{
		}

		[Token(Token = "0x6001896")]
		public int RemoveNullValues()
		{
			return default(int);
		}

		[Token(Token = "0x6001897")]
		public bool ChangeKey(TKey oldKey, TKey newKey)
		{
			return default(bool);
		}

		[Token(Token = "0x6001898")]
		protected ES3SerializableDictionary()
		{
		}
	}
	[Token(Token = "0x20003AF")]
	public class ES3BinaryReader : ES3Reader
	{
		[Token(Token = "0x4000EEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public BinaryReader baseReader;

		[Token(Token = "0x600189D")]
		[Address(RVA = "0xF56DA0", Offset = "0xF56DA0", VA = "0xF56DA0")]
		internal ES3BinaryReader(Stream stream, ES3Settings settings, bool readHeaderAndFooter = true)
		{
		}

		[Token(Token = "0x600189E")]
		[Address(RVA = "0xF56E40", Offset = "0xF56E40", VA = "0xF56E40", Slot = "21")]
		public override string ReadPropertyName()
		{
			return null;
		}

		[Token(Token = "0x600189F")]
		[Address(RVA = "0xF56F54", Offset = "0xF56F54", VA = "0xF56F54", Slot = "22")]
		protected override Type ReadKeyPrefix(bool ignoreType = false)
		{
			return null;
		}

		[Token(Token = "0x60018A0")]
		[Address(RVA = "0xF571F0", Offset = "0xF571F0", VA = "0xF571F0", Slot = "23")]
		protected override void ReadKeySuffix()
		{
		}

		[Token(Token = "0x60018A1")]
		[Address(RVA = "0xF572D4", Offset = "0xF572D4", VA = "0xF572D4", Slot = "27")]
		internal override bool StartReadObject()
		{
			return default(bool);
		}

		[Token(Token = "0x60018A2")]
		[Address(RVA = "0xF57304", Offset = "0xF57304", VA = "0xF57304", Slot = "28")]
		internal override void EndReadObject()
		{
		}

		[Token(Token = "0x60018A3")]
		[Address(RVA = "0xF5730C", Offset = "0xF5730C", VA = "0xF5730C", Slot = "29")]
		internal override bool StartReadDictionary()
		{
			return default(bool);
		}

		[Token(Token = "0x60018A4")]
		[Address(RVA = "0xF57334", Offset = "0xF57334", VA = "0xF57334", Slot = "30")]
		internal override void EndReadDictionary()
		{
		}

		[Token(Token = "0x60018A5")]
		[Address(RVA = "0xF57338", Offset = "0xF57338", VA = "0xF57338", Slot = "31")]
		internal override bool StartReadDictionaryKey()
		{
			return default(bool);
		}

		[Token(Token = "0x60018A6")]
		[Address(RVA = "0xF57360", Offset = "0xF57360", VA = "0xF57360", Slot = "32")]
		internal override void EndReadDictionaryKey()
		{
		}

		[Token(Token = "0x60018A7")]
		[Address(RVA = "0xF57364", Offset = "0xF57364", VA = "0xF57364", Slot = "33")]
		internal override void StartReadDictionaryValue()
		{
		}

		[Token(Token = "0x60018A8")]
		[Address(RVA = "0xF57368", Offset = "0xF57368", VA = "0xF57368", Slot = "34")]
		internal override bool EndReadDictionaryValue()
		{
			return default(bool);
		}

		[Token(Token = "0x60018A9")]
		[Address(RVA = "0xF57370", Offset = "0xF57370", VA = "0xF57370", Slot = "35")]
		internal override bool StartReadCollection()
		{
			return default(bool);
		}

		[Token(Token = "0x60018AA")]
		[Address(RVA = "0xF57398", Offset = "0xF57398", VA = "0xF57398", Slot = "36")]
		internal override void EndReadCollection()
		{
		}

		[Token(Token = "0x60018AB")]
		[Address(RVA = "0xF5739C", Offset = "0xF5739C", VA = "0xF5739C", Slot = "37")]
		internal override bool StartReadCollectionItem()
		{
			return default(bool);
		}

		[Token(Token = "0x60018AC")]
		[Address(RVA = "0xF573A4", Offset = "0xF573A4", VA = "0xF573A4", Slot = "38")]
		internal override bool EndReadCollectionItem()
		{
			return default(bool);
		}

		[Token(Token = "0x60018AD")]
		[Address(RVA = "0xF573AC", Offset = "0xF573AC", VA = "0xF573AC", Slot = "24")]
		internal override byte[] ReadElement(bool skip = false)
		{
			return null;
		}

		[Token(Token = "0x60018AE")]
		[Address(RVA = "0xF57658", Offset = "0xF57658", VA = "0xF57658")]
		private void ReadElement(BinaryWriter writer, bool skip = false)
		{
		}

		[Token(Token = "0x60018AF")]
		[Address(RVA = "0xF576C0", Offset = "0xF576C0", VA = "0xF576C0", Slot = "20")]
		internal override long Read_ref()
		{
			return default(long);
		}

		[Token(Token = "0x60018B0")]
		[Address(RVA = "0xF577DC", Offset = "0xF577DC", VA = "0xF577DC", Slot = "18")]
		internal override string Read_string()
		{
			return null;
		}

		[Token(Token = "0x60018B1")]
		[Address(RVA = "0xF57818", Offset = "0xF57818", VA = "0xF57818", Slot = "8")]
		internal override char Read_char()
		{
			return default(char);
		}

		[Token(Token = "0x60018B2")]
		[Address(RVA = "0xF57850", Offset = "0xF57850", VA = "0xF57850", Slot = "6")]
		internal override float Read_float()
		{
			return default(float);
		}

		[Token(Token = "0x60018B3")]
		[Address(RVA = "0xF5788C", Offset = "0xF5788C", VA = "0xF5788C", Slot = "5")]
		internal override int Read_int()
		{
			return default(int);
		}

		[Token(Token = "0x60018B4")]
		[Address(RVA = "0xF578B8", Offset = "0xF578B8", VA = "0xF578B8", Slot = "7")]
		internal override bool Read_bool()
		{
			return default(bool);
		}

		[Token(Token = "0x60018B5")]
		[Address(RVA = "0xF578F0", Offset = "0xF578F0", VA = "0xF578F0", Slot = "9")]
		internal override decimal Read_decimal()
		{
			return default(decimal);
		}

		[Token(Token = "0x60018B6")]
		[Address(RVA = "0xF5792C", Offset = "0xF5792C", VA = "0xF5792C", Slot = "10")]
		internal override double Read_double()
		{
			return default(double);
		}

		[Token(Token = "0x60018B7")]
		[Address(RVA = "0xF57968", Offset = "0xF57968", VA = "0xF57968", Slot = "11")]
		internal override long Read_long()
		{
			return default(long);
		}

		[Token(Token = "0x60018B8")]
		[Address(RVA = "0xF579A4", Offset = "0xF579A4", VA = "0xF579A4", Slot = "12")]
		internal override ulong Read_ulong()
		{
			return default(ulong);
		}

		[Token(Token = "0x60018B9")]
		[Address(RVA = "0xF579E0", Offset = "0xF579E0", VA = "0xF579E0", Slot = "17")]
		internal override uint Read_uint()
		{
			return default(uint);
		}

		[Token(Token = "0x60018BA")]
		[Address(RVA = "0xF57A1C", Offset = "0xF57A1C", VA = "0xF57A1C", Slot = "13")]
		internal override byte Read_byte()
		{
			return default(byte);
		}

		[Token(Token = "0x60018BB")]
		[Address(RVA = "0xF57A54", Offset = "0xF57A54", VA = "0xF57A54", Slot = "14")]
		internal override sbyte Read_sbyte()
		{
			return default(sbyte);
		}

		[Token(Token = "0x60018BC")]
		[Address(RVA = "0xF57A8C", Offset = "0xF57A8C", VA = "0xF57A8C", Slot = "15")]
		internal override short Read_short()
		{
			return default(short);
		}

		[Token(Token = "0x60018BD")]
		[Address(RVA = "0xF57AC8", Offset = "0xF57AC8", VA = "0xF57AC8", Slot = "16")]
		internal override ushort Read_ushort()
		{
			return default(ushort);
		}

		[Token(Token = "0x60018BE")]
		[Address(RVA = "0xF57B04", Offset = "0xF57B04", VA = "0xF57B04", Slot = "19")]
		internal override byte[] Read_byteArray()
		{
			return null;
		}

		[Token(Token = "0x60018BF")]
		[EditorBrowsable(EditorBrowsableState.Never)]
		public override T Read<T>(ES3Type type)
		{
			return (T)null;
		}

		[Token(Token = "0x60018C0")]
		[EditorBrowsable(EditorBrowsableState.Never)]
		public override void ReadInto<T>(object obj, ES3Type type)
		{
		}

		[Token(Token = "0x60018C1")]
		[Address(RVA = "0xF5714C", Offset = "0xF5714C", VA = "0xF5714C")]
		private int Read7BitEncodedInt()
		{
			return default(int);
		}

		[Token(Token = "0x60018C2")]
		[Address(RVA = "0xF57B5C", Offset = "0xF57B5C", VA = "0xF57B5C", Slot = "25")]
		public override void Dispose()
		{
		}
	}
	[Token(Token = "0x20003B0")]
	public class ES3JSONReader : ES3Reader
	{
		[Token(Token = "0x4000EED")]
		private const char endOfStreamChar = '\uffff';

		[Token(Token = "0x4000EEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public StreamReader baseReader;

		[Token(Token = "0x60018C3")]
		[Address(RVA = "0xF57B7C", Offset = "0xF57B7C", VA = "0xF57B7C")]
		internal ES3JSONReader(Stream stream, ES3Settings settings, bool readHeaderAndFooter = true)
		{
		}

		[Token(Token = "0x60018C4")]
		[Address(RVA = "0xF57DA4", Offset = "0xF57DA4", VA = "0xF57DA4", Slot = "21")]
		public override string ReadPropertyName()
		{
			return null;
		}

		[Token(Token = "0x60018C5")]
		[Address(RVA = "0xF582F8", Offset = "0xF582F8", VA = "0xF582F8", Slot = "22")]
		protected override Type ReadKeyPrefix(bool ignoreType = false)
		{
			return null;
		}

		[Token(Token = "0x60018C6")]
		[Address(RVA = "0xF58494", Offset = "0xF58494", VA = "0xF58494", Slot = "23")]
		protected override void ReadKeySuffix()
		{
		}

		[Token(Token = "0x60018C7")]
		[Address(RVA = "0xF584A4", Offset = "0xF584A4", VA = "0xF584A4", Slot = "27")]
		internal override bool StartReadObject()
		{
			return default(bool);
		}

		[Token(Token = "0x60018C8")]
		[Address(RVA = "0xF58798", Offset = "0xF58798", VA = "0xF58798", Slot = "28")]
		internal override void EndReadObject()
		{
		}

		[Token(Token = "0x60018C9")]
		[Address(RVA = "0xF587B8", Offset = "0xF587B8", VA = "0xF587B8", Slot = "29")]
		internal override bool StartReadDictionary()
		{
			return default(bool);
		}

		[Token(Token = "0x60018CA")]
		[Address(RVA = "0xF587C8", Offset = "0xF587C8", VA = "0xF587C8", Slot = "30")]
		internal override void EndReadDictionary()
		{
		}

		[Token(Token = "0x60018CB")]
		[Address(RVA = "0xF587CC", Offset = "0xF587CC", VA = "0xF587CC", Slot = "31")]
		internal override bool StartReadDictionaryKey()
		{
			return default(bool);
		}

		[Token(Token = "0x60018CC")]
		[Address(RVA = "0xF58804", Offset = "0xF58804", VA = "0xF58804", Slot = "32")]
		internal override void EndReadDictionaryKey()
		{
		}

		[Token(Token = "0x60018CD")]
		[Address(RVA = "0xF5880C", Offset = "0xF5880C", VA = "0xF5880C", Slot = "33")]
		internal override void StartReadDictionaryValue()
		{
		}

		[Token(Token = "0x60018CE")]
		[Address(RVA = "0xF58810", Offset = "0xF58810", VA = "0xF58810", Slot = "34")]
		internal override bool EndReadDictionaryValue()
		{
			return default(bool);
		}

		[Token(Token = "0x60018CF")]
		[Address(RVA = "0xF588D4", Offset = "0xF588D4", VA = "0xF588D4", Slot = "35")]
		internal override bool StartReadCollection()
		{
			return default(bool);
		}

		[Token(Token = "0x60018D0")]
		[Address(RVA = "0xF588DC", Offset = "0xF588DC", VA = "0xF588DC", Slot = "36")]
		internal override void EndReadCollection()
		{
		}

		[Token(Token = "0x60018D1")]
		[Address(RVA = "0xF588E0", Offset = "0xF588E0", VA = "0xF588E0", Slot = "37")]
		internal override bool StartReadCollectionItem()
		{
			return default(bool);
		}

		[Token(Token = "0x60018D2")]
		[Address(RVA = "0xF58918", Offset = "0xF58918", VA = "0xF58918", Slot = "38")]
		internal override bool EndReadCollectionItem()
		{
			return default(bool);
		}

		[Token(Token = "0x60018D3")]
		[Address(RVA = "0xF589DC", Offset = "0xF589DC", VA = "0xF589DC")]
		private void ReadString(StreamWriter writer, bool skip = false)
		{
		}

		[Token(Token = "0x60018D4")]
		[Address(RVA = "0xF58B04", Offset = "0xF58B04", VA = "0xF58B04", Slot = "24")]
		internal override byte[] ReadElement(bool skip = false)
		{
			return null;
		}

		[Token(Token = "0x60018D5")]
		[Address(RVA = "0xF58AA8", Offset = "0xF58AA8", VA = "0xF58AA8")]
		private char ReadOrSkipChar(StreamWriter writer, bool skip)
		{
			return default(char);
		}

		[Token(Token = "0x60018D6")]
		[Address(RVA = "0xF57FF4", Offset = "0xF57FF4", VA = "0xF57FF4")]
		private char ReadCharIgnoreWhitespace(bool ignoreTrailingWhitespace = true)
		{
			return default(char);
		}

		[Token(Token = "0x60018D7")]
		[Address(RVA = "0xF584C4", Offset = "0xF584C4", VA = "0xF584C4")]
		private bool ReadNullOrCharIgnoreWhitespace(char expectedChar)
		{
			return default(bool);
		}

		[Token(Token = "0x60018D8")]
		[Address(RVA = "0xF580F0", Offset = "0xF580F0", VA = "0xF580F0")]
		private char ReadCharIgnoreWhitespace(char expectedChar)
		{
			return default(char);
		}

		[Token(Token = "0x60018D9")]
		[Address(RVA = "0xF590B0", Offset = "0xF590B0", VA = "0xF590B0")]
		private bool ReadQuotationMarkOrNullIgnoreWhitespace()
		{
			return default(bool);
		}

		[Token(Token = "0x60018DA")]
		[Address(RVA = "0xF5928C", Offset = "0xF5928C", VA = "0xF5928C")]
		private char PeekCharIgnoreWhitespace(char expectedChar)
		{
			return default(char);
		}

		[Token(Token = "0x60018DB")]
		[Address(RVA = "0xF57F6C", Offset = "0xF57F6C", VA = "0xF57F6C")]
		private char PeekCharIgnoreWhitespace()
		{
			return default(char);
		}

		[Token(Token = "0x60018DC")]
		[Address(RVA = "0xF59490", Offset = "0xF59490", VA = "0xF59490")]
		private void SkipWhiteSpace()
		{
		}

		[Token(Token = "0x60018DD")]
		[Address(RVA = "0xF57CF4", Offset = "0xF57CF4", VA = "0xF57CF4")]
		private void SkipOpeningBraceOfFile()
		{
		}

		[Token(Token = "0x60018DE")]
		[Address(RVA = "0xF59078", Offset = "0xF59078", VA = "0xF59078")]
		private static bool IsWhiteSpace(char c)
		{
			return default(bool);
		}

		[Token(Token = "0x60018DF")]
		[Address(RVA = "0xF58FF4", Offset = "0xF58FF4", VA = "0xF58FF4")]
		private static bool IsOpeningBrace(char c)
		{
			return default(bool);
		}

		[Token(Token = "0x60018E0")]
		[Address(RVA = "0xF59008", Offset = "0xF59008", VA = "0xF59008")]
		private static bool IsEndOfValue(char c)
		{
			return default(bool);
		}

		[Token(Token = "0x60018E1")]
		[Address(RVA = "0xF57FE0", Offset = "0xF57FE0", VA = "0xF57FE0")]
		private static bool IsTerminator(char c)
		{
			return default(bool);
		}

		[Token(Token = "0x60018E2")]
		[Address(RVA = "0xF580C8", Offset = "0xF580C8", VA = "0xF580C8")]
		private static bool IsQuotationMark(char c)
		{
			return default(bool);
		}

		[Token(Token = "0x60018E3")]
		[Address(RVA = "0xF59504", Offset = "0xF59504", VA = "0xF59504")]
		private static bool IsEndOfStream(char c)
		{
			return default(bool);
		}

		[Token(Token = "0x60018E4")]
		[Address(RVA = "0xF59514", Offset = "0xF59514", VA = "0xF59514")]
		private string GetValueString()
		{
			return null;
		}

		[Token(Token = "0x60018E5")]
		[Address(RVA = "0xF595D4", Offset = "0xF595D4", VA = "0xF595D4", Slot = "18")]
		internal override string Read_string()
		{
			return null;
		}

		[Token(Token = "0x60018E6")]
		[Address(RVA = "0xF59774", Offset = "0xF59774", VA = "0xF59774", Slot = "20")]
		internal override long Read_ref()
		{
			return default(long);
		}

		[Token(Token = "0x60018E7")]
		[Address(RVA = "0xF598A8", Offset = "0xF598A8", VA = "0xF598A8", Slot = "8")]
		internal override char Read_char()
		{
			return default(char);
		}

		[Token(Token = "0x60018E8")]
		[Address(RVA = "0xF5991C", Offset = "0xF5991C", VA = "0xF5991C", Slot = "6")]
		internal override float Read_float()
		{
			return default(float);
		}

		[Token(Token = "0x60018E9")]
		[Address(RVA = "0xF59990", Offset = "0xF59990", VA = "0xF59990", Slot = "5")]
		internal override int Read_int()
		{
			return default(int);
		}

		[Token(Token = "0x60018EA")]
		[Address(RVA = "0xF599A4", Offset = "0xF599A4", VA = "0xF599A4", Slot = "7")]
		internal override bool Read_bool()
		{
			return default(bool);
		}

		[Token(Token = "0x60018EB")]
		[Address(RVA = "0xF59A0C", Offset = "0xF59A0C", VA = "0xF59A0C", Slot = "9")]
		internal override decimal Read_decimal()
		{
			return default(decimal);
		}

		[Token(Token = "0x60018EC")]
		[Address(RVA = "0xF59AAC", Offset = "0xF59AAC", VA = "0xF59AAC", Slot = "10")]
		internal override double Read_double()
		{
			return default(double);
		}

		[Token(Token = "0x60018ED")]
		[Address(RVA = "0xF59B20", Offset = "0xF59B20", VA = "0xF59B20", Slot = "11")]
		internal override long Read_long()
		{
			return default(long);
		}

		[Token(Token = "0x60018EE")]
		[Address(RVA = "0xF59B34", Offset = "0xF59B34", VA = "0xF59B34", Slot = "12")]
		internal override ulong Read_ulong()
		{
			return default(ulong);
		}

		[Token(Token = "0x60018EF")]
		[Address(RVA = "0xF59B48", Offset = "0xF59B48", VA = "0xF59B48", Slot = "17")]
		internal override uint Read_uint()
		{
			return default(uint);
		}

		[Token(Token = "0x60018F0")]
		[Address(RVA = "0xF59B5C", Offset = "0xF59B5C", VA = "0xF59B5C", Slot = "13")]
		internal override byte Read_byte()
		{
			return default(byte);
		}

		[Token(Token = "0x60018F1")]
		[Address(RVA = "0xF59B74", Offset = "0xF59B74", VA = "0xF59B74", Slot = "14")]
		internal override sbyte Read_sbyte()
		{
			return default(sbyte);
		}

		[Token(Token = "0x60018F2")]
		[Address(RVA = "0xF59B8C", Offset = "0xF59B8C", VA = "0xF59B8C", Slot = "15")]
		internal override short Read_short()
		{
			return default(short);
		}

		[Token(Token = "0x60018F3")]
		[Address(RVA = "0xF59BA4", Offset = "0xF59BA4", VA = "0xF59BA4", Slot = "16")]
		internal override ushort Read_ushort()
		{
			return default(ushort);
		}

		[Token(Token = "0x60018F4")]
		[Address(RVA = "0xF59BBC", Offset = "0xF59BBC", VA = "0xF59BBC", Slot = "19")]
		internal override byte[] Read_byteArray()
		{
			return null;
		}

		[Token(Token = "0x60018F5")]
		[Address(RVA = "0xF59C30", Offset = "0xF59C30", VA = "0xF59C30", Slot = "25")]
		public override void Dispose()
		{
		}
	}
	[Token(Token = "0x20003B1")]
	public class ES3GlobalReferences : ScriptableObject
	{
		[Token(Token = "0x1700029E")]
		public static ES3GlobalReferences Instance
		{
			[Token(Token = "0x60018F6")]
			[Address(RVA = "0xF4F9D4", Offset = "0xF4F9D4", VA = "0xF4F9D4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60018F7")]
		[Address(RVA = "0xF505AC", Offset = "0xF505AC", VA = "0xF505AC")]
		public UnityEngine.Object Get(long id)
		{
			return null;
		}

		[Token(Token = "0x60018F8")]
		[Address(RVA = "0xF50D6C", Offset = "0xF50D6C", VA = "0xF50D6C")]
		public long GetOrAdd(UnityEngine.Object obj)
		{
			return default(long);
		}

		[Token(Token = "0x60018F9")]
		[Address(RVA = "0xF51C0C", Offset = "0xF51C0C", VA = "0xF51C0C")]
		public void RemoveInvalidKeys()
		{
		}

		[Token(Token = "0x60018FA")]
		[Address(RVA = "0xF59C4C", Offset = "0xF59C4C", VA = "0xF59C4C")]
		public ES3GlobalReferences()
		{
		}
	}
	[Token(Token = "0x20003B2")]
	public class ES3DefaultSettings : MonoBehaviour
	{
		[Token(Token = "0x4000EEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public ES3SerializableSettings settings;

		[Token(Token = "0x4000EF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool autoUpdateReferences;

		[Token(Token = "0x60018FB")]
		[Address(RVA = "0xF59C54", Offset = "0xF59C54", VA = "0xF59C54")]
		public ES3DefaultSettings()
		{
		}
	}
	[Token(Token = "0x20003B3")]
	public enum ES3FileMode
	{
		[Token(Token = "0x4000EF2")]
		Read,
		[Token(Token = "0x4000EF3")]
		Write,
		[Token(Token = "0x4000EF4")]
		Append
	}
	[Token(Token = "0x20003B4")]
	public class ES3FileStream : FileStream
	{
		[Token(Token = "0x4000EF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool isDisposed;

		[Token(Token = "0x60018FC")]
		[Address(RVA = "0xF59C64", Offset = "0xF59C64", VA = "0xF59C64")]
		public ES3FileStream(string path, ES3FileMode fileMode, int bufferSize, bool useAsync)
		{
		}

		[Token(Token = "0x60018FD")]
		[Address(RVA = "0xF59D28", Offset = "0xF59D28", VA = "0xF59D28")]
		protected static string GetPath(string path, ES3FileMode fileMode)
		{
			return null;
		}

		[Token(Token = "0x60018FE")]
		[Address(RVA = "0xF59E18", Offset = "0xF59E18", VA = "0xF59E18")]
		protected static FileMode GetFileMode(ES3FileMode fileMode)
		{
			return default(FileMode);
		}

		[Token(Token = "0x60018FF")]
		[Address(RVA = "0xF59E38", Offset = "0xF59E38", VA = "0xF59E38")]
		protected static FileAccess GetFileAccess(ES3FileMode fileMode)
		{
			return default(FileAccess);
		}

		[Token(Token = "0x6001900")]
		[Address(RVA = "0xF59E48", Offset = "0xF59E48", VA = "0xF59E48", Slot = "20")]
		protected override void Dispose(bool disposing)
		{
		}
	}
	[Token(Token = "0x20003B5")]
	internal class ES3PlayerPrefsStream : MemoryStream
	{
		[Token(Token = "0x4000EF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private string path;

		[Token(Token = "0x4000EF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool append;

		[Token(Token = "0x4000EF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		private bool isWriteStream;

		[Token(Token = "0x4000EF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5A")]
		private bool isDisposed;

		[Token(Token = "0x6001901")]
		[Address(RVA = "0xF59E68", Offset = "0xF59E68", VA = "0xF59E68")]
		public ES3PlayerPrefsStream(string path)
		{
		}

		[Token(Token = "0x6001902")]
		[Address(RVA = "0xF59FA4", Offset = "0xF59FA4", VA = "0xF59FA4")]
		public ES3PlayerPrefsStream(string path, int bufferSize, bool append = false)
		{
		}

		[Token(Token = "0x6001903")]
		[Address(RVA = "0xF59EB4", Offset = "0xF59EB4", VA = "0xF59EB4")]
		private static byte[] GetData(string path, bool isWriteStream)
		{
			return null;
		}

		[Token(Token = "0x6001904")]
		[Address(RVA = "0xF59FEC", Offset = "0xF59FEC", VA = "0xF59FEC", Slot = "20")]
		protected override void Dispose(bool disposing)
		{
		}
	}
	[Token(Token = "0x20003B6")]
	internal class ES3ResourcesStream : MemoryStream
	{
		[Token(Token = "0x1700029F")]
		public bool Exists
		{
			[Token(Token = "0x6001905")]
			[Address(RVA = "0xF5A268", Offset = "0xF5A268", VA = "0xF5A268")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001906")]
		[Address(RVA = "0xF5A288", Offset = "0xF5A288", VA = "0xF5A288")]
		public ES3ResourcesStream(string path)
		{
		}

		[Token(Token = "0x6001907")]
		[Address(RVA = "0xF5A2AC", Offset = "0xF5A2AC", VA = "0xF5A2AC")]
		private static byte[] GetData(string path)
		{
			return null;
		}

		[Token(Token = "0x6001908")]
		[Address(RVA = "0xF5A3A0", Offset = "0xF5A3A0", VA = "0xF5A3A0", Slot = "20")]
		protected override void Dispose(bool disposing)
		{
		}
	}
	[Token(Token = "0x20003B7")]
	public static class ES3Stream
	{
		[Token(Token = "0x6001909")]
		[Address(RVA = "0xF5A3AC", Offset = "0xF5A3AC", VA = "0xF5A3AC")]
		public static Stream CreateStream(ES3Settings settings, ES3FileMode fileMode)
		{
			return null;
		}

		[Token(Token = "0x600190A")]
		[Address(RVA = "0xF5A868", Offset = "0xF5A868", VA = "0xF5A868")]
		public static Stream CreateStream(Stream stream, ES3Settings settings, ES3FileMode fileMode)
		{
			return null;
		}

		[Token(Token = "0x600190B")]
		[Address(RVA = "0xF5AC3C", Offset = "0xF5AC3C", VA = "0xF5AC3C")]
		public static void CopyTo(Stream source, Stream destination)
		{
		}
	}
	[Token(Token = "0x20003B8")]
	public class ES3Member
	{
		[Token(Token = "0x4000EFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x4000EFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Type type;

		[Token(Token = "0x4000EFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool isProperty;

		[Token(Token = "0x4000EFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ES3Reflection.ES3ReflectedMember reflectedMember;

		[Token(Token = "0x4000EFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool useReflection;

		[Token(Token = "0x600190C")]
		[Address(RVA = "0xF5AC50", Offset = "0xF5AC50", VA = "0xF5AC50")]
		public ES3Member(string name, Type type, bool isProperty)
		{
		}

		[Token(Token = "0x600190D")]
		[Address(RVA = "0xF5ACA8", Offset = "0xF5ACA8", VA = "0xF5ACA8")]
		public ES3Member(ES3Reflection.ES3ReflectedMember reflectedMember)
		{
		}
	}
	[Token(Token = "0x20003B9")]
	[Preserve]
	public static class ES3TypeMgr
	{
		[Token(Token = "0x4000EFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static object _lock;

		[Token(Token = "0x4000F00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[EditorBrowsable(EditorBrowsableState.Never)]
		public static Dictionary<Type, ES3Type> types;

		[Token(Token = "0x4000F01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static ES3Type lastAccessedType;

		[Token(Token = "0x600190E")]
		[Address(RVA = "0xF4D90C", Offset = "0xF4D90C", VA = "0xF4D90C")]
		public static ES3Type GetOrCreateES3Type(Type type, bool throwException = true)
		{
			return null;
		}

		[Token(Token = "0x600190F")]
		[Address(RVA = "0xF5B9B8", Offset = "0xF5B9B8", VA = "0xF5B9B8")]
		public static ES3Type GetES3Type(Type type)
		{
			return null;
		}

		[Token(Token = "0x6001910")]
		[Address(RVA = "0xF5BA98", Offset = "0xF5BA98", VA = "0xF5BA98")]
		internal static void Add(Type type, ES3Type es3Type)
		{
		}

		[Token(Token = "0x6001911")]
		[Address(RVA = "0xF5AF88", Offset = "0xF5AF88", VA = "0xF5AF88")]
		internal static ES3Type CreateES3Type(Type type, bool throwException = true)
		{
			return null;
		}

		[Token(Token = "0x6001912")]
		[Address(RVA = "0xF5AD2C", Offset = "0xF5AD2C", VA = "0xF5AD2C")]
		internal static void Init()
		{
		}
	}
	[Token(Token = "0x20003BA")]
	public class ES3WebClass
	{
		[Token(Token = "0x20003BB")]
		[CompilerGenerated]
		private sealed class <SendWebRequest>d__19 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000F09")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000F0A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000F0B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ES3WebClass <>4__this;

			[Token(Token = "0x4000F0C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public UnityWebRequest webRequest;

			[Token(Token = "0x170002A3")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001922")]
				[Address(RVA = "0xF5C480", Offset = "0xF5C480", VA = "0xF5C480", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002A4")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001924")]
				[Address(RVA = "0xF5C4C8", Offset = "0xF5C4C8", VA = "0xF5C4C8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600191F")]
			[Address(RVA = "0xF5C3B4", Offset = "0xF5C3B4", VA = "0xF5C3B4")]
			[DebuggerHidden]
			public <SendWebRequest>d__19(int <>1__state)
			{
			}

			[Token(Token = "0x6001920")]
			[Address(RVA = "0xF5C404", Offset = "0xF5C404", VA = "0xF5C404", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001921")]
			[Address(RVA = "0xF5C408", Offset = "0xF5C408", VA = "0xF5C408", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001923")]
			[Address(RVA = "0xF5C488", Offset = "0xF5C488", VA = "0xF5C488", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000F02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected string url;

		[Token(Token = "0x4000F03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected string apiKey;

		[Token(Token = "0x4000F04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected List<KeyValuePair<string, string>> formData;

		[Token(Token = "0x4000F05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected UnityWebRequest _webRequest;

		[Token(Token = "0x4000F06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool isDone;

		[Token(Token = "0x4000F07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string error;

		[Token(Token = "0x4000F08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public long errorCode;

		[Token(Token = "0x170002A0")]
		public float uploadProgress
		{
			[Token(Token = "0x6001914")]
			[Address(RVA = "0xF5BCF0", Offset = "0xF5BCF0", VA = "0xF5BCF0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170002A1")]
		public float downloadProgress
		{
			[Token(Token = "0x6001915")]
			[Address(RVA = "0xF5BD08", Offset = "0xF5BD08", VA = "0xF5BD08")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170002A2")]
		public bool isError
		{
			[Token(Token = "0x6001916")]
			[Address(RVA = "0xF5BD20", Offset = "0xF5BD20", VA = "0xF5BD20")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001917")]
		[Address(RVA = "0xF5BD54", Offset = "0xF5BD54", VA = "0xF5BD54")]
		public static bool IsNetworkError(UnityWebRequest www)
		{
			return default(bool);
		}

		[Token(Token = "0x6001918")]
		[Address(RVA = "0xF5BD78", Offset = "0xF5BD78", VA = "0xF5BD78")]
		protected ES3WebClass(string url, string apiKey)
		{
		}

		[Token(Token = "0x6001919")]
		[Address(RVA = "0xF5BE30", Offset = "0xF5BE30", VA = "0xF5BE30")]
		public void AddPOSTField(string fieldName, string value)
		{
		}

		[Token(Token = "0x600191A")]
		[Address(RVA = "0xF5BF24", Offset = "0xF5BF24", VA = "0xF5BF24")]
		protected string GetUser(string user, string password)
		{
			return null;
		}

		[Token(Token = "0x600191B")]
		[Address(RVA = "0xF5BFB0", Offset = "0xF5BFB0", VA = "0xF5BFB0")]
		protected WWWForm CreateWWWForm()
		{
			return null;
		}

		[Token(Token = "0x600191C")]
		[Address(RVA = "0xF5C13C", Offset = "0xF5C13C", VA = "0xF5C13C")]
		protected bool HandleError(UnityWebRequest webRequest, bool errorIfDataIsDownloaded)
		{
			return default(bool);
		}

		[Token(Token = "0x600191D")]
		[Address(RVA = "0xF5C324", Offset = "0xF5C324", VA = "0xF5C324")]
		[IteratorStateMachine(typeof(<SendWebRequest>d__19))]
		protected IEnumerator SendWebRequest(UnityWebRequest webRequest)
		{
			return null;
		}

		[Token(Token = "0x600191E")]
		[Address(RVA = "0xF5C3DC", Offset = "0xF5C3DC", VA = "0xF5C3DC", Slot = "4")]
		protected virtual void Reset()
		{
		}
	}
	[Token(Token = "0x20003BC")]
	internal enum ES3SpecialByte : byte
	{
		[Token(Token = "0x4000F0E")]
		Null = 0,
		[Token(Token = "0x4000F0F")]
		Bool = 1,
		[Token(Token = "0x4000F10")]
		Byte = 2,
		[Token(Token = "0x4000F11")]
		Sbyte = 3,
		[Token(Token = "0x4000F12")]
		Char = 4,
		[Token(Token = "0x4000F13")]
		Decimal = 5,
		[Token(Token = "0x4000F14")]
		Double = 6,
		[Token(Token = "0x4000F15")]
		Float = 7,
		[Token(Token = "0x4000F16")]
		Int = 8,
		[Token(Token = "0x4000F17")]
		Uint = 9,
		[Token(Token = "0x4000F18")]
		Long = 10,
		[Token(Token = "0x4000F19")]
		Ulong = 11,
		[Token(Token = "0x4000F1A")]
		Short = 12,
		[Token(Token = "0x4000F1B")]
		Ushort = 13,
		[Token(Token = "0x4000F1C")]
		String = 14,
		[Token(Token = "0x4000F1D")]
		ByteArray = 15,
		[Token(Token = "0x4000F1E")]
		Collection = 128,
		[Token(Token = "0x4000F1F")]
		Dictionary = 129,
		[Token(Token = "0x4000F20")]
		CollectionItem = 130,
		[Token(Token = "0x4000F21")]
		Object = 254,
		[Token(Token = "0x4000F22")]
		Terminator = byte.MaxValue
	}
	[Token(Token = "0x20003BD")]
	internal static class ES3Binary
	{
		[Token(Token = "0x4000F23")]
		internal const string ObjectTerminator = ".";

		[Token(Token = "0x4000F24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static readonly Dictionary<ES3SpecialByte, Type> IdToType;

		[Token(Token = "0x4000F25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal static readonly Dictionary<Type, ES3SpecialByte> TypeToId;

		[Token(Token = "0x6001925")]
		[Address(RVA = "0xF5C4D0", Offset = "0xF5C4D0", VA = "0xF5C4D0")]
		internal static ES3SpecialByte TypeToByte(Type type)
		{
			return default(ES3SpecialByte);
		}

		[Token(Token = "0x6001926")]
		[Address(RVA = "0xF5C574", Offset = "0xF5C574", VA = "0xF5C574")]
		internal static Type ByteToType(ES3SpecialByte b)
		{
			return null;
		}

		[Token(Token = "0x6001927")]
		[Address(RVA = "0xF5C5C8", Offset = "0xF5C5C8", VA = "0xF5C5C8")]
		internal static Type ByteToType(byte b)
		{
			return null;
		}

		[Token(Token = "0x6001928")]
		[Address(RVA = "0xF5C6B0", Offset = "0xF5C6B0", VA = "0xF5C6B0")]
		internal static bool IsPrimitive(ES3SpecialByte b)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20003BE")]
	internal class ES3CacheWriter : ES3Writer
	{
		[Token(Token = "0x4000F26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ES3File es3File;

		[Token(Token = "0x600192A")]
		[Address(RVA = "0xF5CD60", Offset = "0xF5CD60", VA = "0xF5CD60")]
		internal ES3CacheWriter(ES3Settings settings, bool writeHeaderAndFooter, bool mergeKeys)
		{
		}

		[Token(Token = "0x600192B")]
		public override void Write<T>(string key, object value)
		{
		}

		[Token(Token = "0x600192C")]
		[Address(RVA = "0xF5CE00", Offset = "0xF5CE00", VA = "0xF5CE00", Slot = "39")]
		internal override void Write(string key, Type type, byte[] value)
		{
		}

		[Token(Token = "0x600192D")]
		[Address(RVA = "0xF5CE48", Offset = "0xF5CE48", VA = "0xF5CE48", Slot = "41")]
		[EditorBrowsable(EditorBrowsableState.Never)]
		public override void Write(Type type, string key, object value)
		{
		}

		[Token(Token = "0x600192E")]
		[Address(RVA = "0xF5CEB0", Offset = "0xF5CEB0", VA = "0xF5CEB0", Slot = "24")]
		internal override void WritePrimitive(int value)
		{
		}

		[Token(Token = "0x600192F")]
		[Address(RVA = "0xF5CEB4", Offset = "0xF5CEB4", VA = "0xF5CEB4", Slot = "25")]
		internal override void WritePrimitive(float value)
		{
		}

		[Token(Token = "0x6001930")]
		[Address(RVA = "0xF5CEB8", Offset = "0xF5CEB8", VA = "0xF5CEB8", Slot = "26")]
		internal override void WritePrimitive(bool value)
		{
		}

		[Token(Token = "0x6001931")]
		[Address(RVA = "0xF5CEBC", Offset = "0xF5CEBC", VA = "0xF5CEBC", Slot = "27")]
		internal override void WritePrimitive(decimal value)
		{
		}

		[Token(Token = "0x6001932")]
		[Address(RVA = "0xF5CEC0", Offset = "0xF5CEC0", VA = "0xF5CEC0", Slot = "28")]
		internal override void WritePrimitive(double value)
		{
		}

		[Token(Token = "0x6001933")]
		[Address(RVA = "0xF5CEC4", Offset = "0xF5CEC4", VA = "0xF5CEC4", Slot = "29")]
		internal override void WritePrimitive(long value)
		{
		}

		[Token(Token = "0x6001934")]
		[Address(RVA = "0xF5CEC8", Offset = "0xF5CEC8", VA = "0xF5CEC8", Slot = "30")]
		internal override void WritePrimitive(ulong value)
		{
		}

		[Token(Token = "0x6001935")]
		[Address(RVA = "0xF5CECC", Offset = "0xF5CECC", VA = "0xF5CECC", Slot = "31")]
		internal override void WritePrimitive(uint value)
		{
		}

		[Token(Token = "0x6001936")]
		[Address(RVA = "0xF5CED0", Offset = "0xF5CED0", VA = "0xF5CED0", Slot = "32")]
		internal override void WritePrimitive(byte value)
		{
		}

		[Token(Token = "0x6001937")]
		[Address(RVA = "0xF5CED4", Offset = "0xF5CED4", VA = "0xF5CED4", Slot = "33")]
		internal override void WritePrimitive(sbyte value)
		{
		}

		[Token(Token = "0x6001938")]
		[Address(RVA = "0xF5CED8", Offset = "0xF5CED8", VA = "0xF5CED8", Slot = "34")]
		internal override void WritePrimitive(short value)
		{
		}

		[Token(Token = "0x6001939")]
		[Address(RVA = "0xF5CEDC", Offset = "0xF5CEDC", VA = "0xF5CEDC", Slot = "35")]
		internal override void WritePrimitive(ushort value)
		{
		}

		[Token(Token = "0x600193A")]
		[Address(RVA = "0xF5CEE0", Offset = "0xF5CEE0", VA = "0xF5CEE0", Slot = "36")]
		internal override void WritePrimitive(char value)
		{
		}

		[Token(Token = "0x600193B")]
		[Address(RVA = "0xF5CEE4", Offset = "0xF5CEE4", VA = "0xF5CEE4", Slot = "38")]
		internal override void WritePrimitive(byte[] value)
		{
		}

		[Token(Token = "0x600193C")]
		[Address(RVA = "0xF5CEE8", Offset = "0xF5CEE8", VA = "0xF5CEE8", Slot = "37")]
		internal override void WritePrimitive(string value)
		{
		}

		[Token(Token = "0x600193D")]
		[Address(RVA = "0xF5CEEC", Offset = "0xF5CEEC", VA = "0xF5CEEC", Slot = "5")]
		internal override void WriteNull()
		{
		}

		[Token(Token = "0x600193E")]
		[Address(RVA = "0xF5CEF0", Offset = "0xF5CEF0", VA = "0xF5CEF0")]
		private static bool CharacterRequiresEscaping(char c)
		{
			return default(bool);
		}

		[Token(Token = "0x600193F")]
		[Address(RVA = "0xF5CEF8", Offset = "0xF5CEF8", VA = "0xF5CEF8")]
		private void WriteCommaIfRequired()
		{
		}

		[Token(Token = "0x6001940")]
		[Address(RVA = "0xF5CEFC", Offset = "0xF5CEFC", VA = "0xF5CEFC", Slot = "23")]
		internal override void WriteRawProperty(string name, byte[] value)
		{
		}

		[Token(Token = "0x6001941")]
		[Address(RVA = "0xF5CF00", Offset = "0xF5CF00", VA = "0xF5CF00", Slot = "6")]
		internal override void StartWriteFile()
		{
		}

		[Token(Token = "0x6001942")]
		[Address(RVA = "0xF5CF04", Offset = "0xF5CF04", VA = "0xF5CF04", Slot = "7")]
		internal override void EndWriteFile()
		{
		}

		[Token(Token = "0x6001943")]
		[Address(RVA = "0xF5CF08", Offset = "0xF5CF08", VA = "0xF5CF08", Slot = "10")]
		internal override void StartWriteProperty(string name)
		{
		}

		[Token(Token = "0x6001944")]
		[Address(RVA = "0xF5CF10", Offset = "0xF5CF10", VA = "0xF5CF10", Slot = "11")]
		internal override void EndWriteProperty(string name)
		{
		}

		[Token(Token = "0x6001945")]
		[Address(RVA = "0xF5CF14", Offset = "0xF5CF14", VA = "0xF5CF14", Slot = "8")]
		internal override void StartWriteObject(string name)
		{
		}

		[Token(Token = "0x6001946")]
		[Address(RVA = "0xF5CF18", Offset = "0xF5CF18", VA = "0xF5CF18", Slot = "9")]
		internal override void EndWriteObject(string name)
		{
		}

		[Token(Token = "0x6001947")]
		[Address(RVA = "0xF5CF1C", Offset = "0xF5CF1C", VA = "0xF5CF1C", Slot = "12")]
		internal override void StartWriteCollection()
		{
		}

		[Token(Token = "0x6001948")]
		[Address(RVA = "0xF5CF20", Offset = "0xF5CF20", VA = "0xF5CF20", Slot = "13")]
		internal override void EndWriteCollection()
		{
		}

		[Token(Token = "0x6001949")]
		[Address(RVA = "0xF5CF24", Offset = "0xF5CF24", VA = "0xF5CF24", Slot = "14")]
		internal override void StartWriteCollectionItem(int index)
		{
		}

		[Token(Token = "0x600194A")]
		[Address(RVA = "0xF5CF28", Offset = "0xF5CF28", VA = "0xF5CF28", Slot = "15")]
		internal override void EndWriteCollectionItem(int index)
		{
		}

		[Token(Token = "0x600194B")]
		[Address(RVA = "0xF5CF2C", Offset = "0xF5CF2C", VA = "0xF5CF2C", Slot = "16")]
		internal override void StartWriteDictionary()
		{
		}

		[Token(Token = "0x600194C")]
		[Address(RVA = "0xF5CF30", Offset = "0xF5CF30", VA = "0xF5CF30", Slot = "17")]
		internal override void EndWriteDictionary()
		{
		}

		[Token(Token = "0x600194D")]
		[Address(RVA = "0xF5CF34", Offset = "0xF5CF34", VA = "0xF5CF34", Slot = "18")]
		internal override void StartWriteDictionaryKey(int index)
		{
		}

		[Token(Token = "0x600194E")]
		[Address(RVA = "0xF5CF38", Offset = "0xF5CF38", VA = "0xF5CF38", Slot = "19")]
		internal override void EndWriteDictionaryKey(int index)
		{
		}

		[Token(Token = "0x600194F")]
		[Address(RVA = "0xF5CF3C", Offset = "0xF5CF3C", VA = "0xF5CF3C", Slot = "20")]
		internal override void StartWriteDictionaryValue(int index)
		{
		}

		[Token(Token = "0x6001950")]
		[Address(RVA = "0xF5CF40", Offset = "0xF5CF40", VA = "0xF5CF40", Slot = "21")]
		internal override void EndWriteDictionaryValue(int index)
		{
		}

		[Token(Token = "0x6001951")]
		[Address(RVA = "0xF5CF44", Offset = "0xF5CF44", VA = "0xF5CF44", Slot = "22")]
		public override void Dispose()
		{
		}
	}
	[Token(Token = "0x20003BF")]
	internal class ES3JSONWriter : ES3Writer
	{
		[Token(Token = "0x4000F27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal StreamWriter baseWriter;

		[Token(Token = "0x4000F28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool isFirstProperty;

		[Token(Token = "0x6001952")]
		[Address(RVA = "0xF5CF48", Offset = "0xF5CF48", VA = "0xF5CF48")]
		public ES3JSONWriter(Stream stream, ES3Settings settings)
		{
		}

		[Token(Token = "0x6001953")]
		[Address(RVA = "0xF5CF54", Offset = "0xF5CF54", VA = "0xF5CF54")]
		internal ES3JSONWriter(Stream stream, ES3Settings settings, bool writeHeaderAndFooter, bool mergeKeys)
		{
		}

		[Token(Token = "0x6001954")]
		[Address(RVA = "0xF5D010", Offset = "0xF5D010", VA = "0xF5D010", Slot = "24")]
		internal override void WritePrimitive(int value)
		{
		}

		[Token(Token = "0x6001955")]
		[Address(RVA = "0xF5D034", Offset = "0xF5D034", VA = "0xF5D034", Slot = "25")]
		internal override void WritePrimitive(float value)
		{
		}

		[Token(Token = "0x6001956")]
		[Address(RVA = "0xF5D0E4", Offset = "0xF5D0E4", VA = "0xF5D0E4", Slot = "26")]
		internal override void WritePrimitive(bool value)
		{
		}

		[Token(Token = "0x6001957")]
		[Address(RVA = "0xF5D160", Offset = "0xF5D160", VA = "0xF5D160", Slot = "27")]
		internal override void WritePrimitive(decimal value)
		{
		}

		[Token(Token = "0x6001958")]
		[Address(RVA = "0xF5D220", Offset = "0xF5D220", VA = "0xF5D220", Slot = "28")]
		internal override void WritePrimitive(double value)
		{
		}

		[Token(Token = "0x6001959")]
		[Address(RVA = "0xF5D2D0", Offset = "0xF5D2D0", VA = "0xF5D2D0", Slot = "29")]
		internal override void WritePrimitive(long value)
		{
		}

		[Token(Token = "0x600195A")]
		[Address(RVA = "0xF5D2F4", Offset = "0xF5D2F4", VA = "0xF5D2F4", Slot = "30")]
		internal override void WritePrimitive(ulong value)
		{
		}

		[Token(Token = "0x600195B")]
		[Address(RVA = "0xF5D318", Offset = "0xF5D318", VA = "0xF5D318", Slot = "31")]
		internal override void WritePrimitive(uint value)
		{
		}

		[Token(Token = "0x600195C")]
		[Address(RVA = "0xF5D33C", Offset = "0xF5D33C", VA = "0xF5D33C", Slot = "32")]
		internal override void WritePrimitive(byte value)
		{
		}

		[Token(Token = "0x600195D")]
		[Address(RVA = "0xF5D3C4", Offset = "0xF5D3C4", VA = "0xF5D3C4", Slot = "33")]
		internal override void WritePrimitive(sbyte value)
		{
		}

		[Token(Token = "0x600195E")]
		[Address(RVA = "0xF5D44C", Offset = "0xF5D44C", VA = "0xF5D44C", Slot = "34")]
		internal override void WritePrimitive(short value)
		{
		}

		[Token(Token = "0x600195F")]
		[Address(RVA = "0xF5D4D4", Offset = "0xF5D4D4", VA = "0xF5D4D4", Slot = "35")]
		internal override void WritePrimitive(ushort value)
		{
		}

		[Token(Token = "0x6001960")]
		[Address(RVA = "0xF5D55C", Offset = "0xF5D55C", VA = "0xF5D55C", Slot = "36")]
		internal override void WritePrimitive(char value)
		{
		}

		[Token(Token = "0x6001961")]
		[Address(RVA = "0xF5D59C", Offset = "0xF5D59C", VA = "0xF5D59C", Slot = "38")]
		internal override void WritePrimitive(byte[] value)
		{
		}

		[Token(Token = "0x6001962")]
		[Address(RVA = "0xF5D618", Offset = "0xF5D618", VA = "0xF5D618", Slot = "37")]
		internal override void WritePrimitive(string value)
		{
		}

		[Token(Token = "0x6001963")]
		[Address(RVA = "0xF5D854", Offset = "0xF5D854", VA = "0xF5D854", Slot = "5")]
		internal override void WriteNull()
		{
		}

		[Token(Token = "0x6001964")]
		[Address(RVA = "0xF5D8B0", Offset = "0xF5D8B0", VA = "0xF5D8B0")]
		private static bool CharacterRequiresEscaping(char c)
		{
			return default(bool);
		}

		[Token(Token = "0x6001965")]
		[Address(RVA = "0xF5D8E0", Offset = "0xF5D8E0", VA = "0xF5D8E0")]
		private void WriteCommaIfRequired()
		{
		}

		[Token(Token = "0x6001966")]
		[Address(RVA = "0xF5D9B4", Offset = "0xF5D9B4", VA = "0xF5D9B4", Slot = "23")]
		internal override void WriteRawProperty(string name, byte[] value)
		{
		}

		[Token(Token = "0x6001967")]
		[Address(RVA = "0xF5DA4C", Offset = "0xF5DA4C", VA = "0xF5DA4C", Slot = "6")]
		internal override void StartWriteFile()
		{
		}

		[Token(Token = "0x6001968")]
		[Address(RVA = "0xF5DA8C", Offset = "0xF5DA8C", VA = "0xF5DA8C", Slot = "7")]
		internal override void EndWriteFile()
		{
		}

		[Token(Token = "0x6001969")]
		[Address(RVA = "0xF5DAD8", Offset = "0xF5DAD8", VA = "0xF5DAD8", Slot = "10")]
		internal override void StartWriteProperty(string name)
		{
		}

		[Token(Token = "0x600196A")]
		[Address(RVA = "0xF5DBA0", Offset = "0xF5DBA0", VA = "0xF5DBA0", Slot = "11")]
		internal override void EndWriteProperty(string name)
		{
		}

		[Token(Token = "0x600196B")]
		[Address(RVA = "0xF5DBA8", Offset = "0xF5DBA8", VA = "0xF5DBA8", Slot = "8")]
		internal override void StartWriteObject(string name)
		{
		}

		[Token(Token = "0x600196C")]
		[Address(RVA = "0xF5DBE4", Offset = "0xF5DBE4", VA = "0xF5DBE4", Slot = "9")]
		internal override void EndWriteObject(string name)
		{
		}

		[Token(Token = "0x600196D")]
		[Address(RVA = "0xF5DC24", Offset = "0xF5DC24", VA = "0xF5DC24", Slot = "12")]
		internal override void StartWriteCollection()
		{
		}

		[Token(Token = "0x600196E")]
		[Address(RVA = "0xF5DC60", Offset = "0xF5DC60", VA = "0xF5DC60", Slot = "13")]
		internal override void EndWriteCollection()
		{
		}

		[Token(Token = "0x600196F")]
		[Address(RVA = "0xF5DC9C", Offset = "0xF5DC9C", VA = "0xF5DC9C", Slot = "14")]
		internal override void StartWriteCollectionItem(int index)
		{
		}

		[Token(Token = "0x6001970")]
		[Address(RVA = "0xF5DCD0", Offset = "0xF5DCD0", VA = "0xF5DCD0", Slot = "15")]
		internal override void EndWriteCollectionItem(int index)
		{
		}

		[Token(Token = "0x6001971")]
		[Address(RVA = "0xF5DCD4", Offset = "0xF5DCD4", VA = "0xF5DCD4", Slot = "16")]
		internal override void StartWriteDictionary()
		{
		}

		[Token(Token = "0x6001972")]
		[Address(RVA = "0xF5DCE4", Offset = "0xF5DCE4", VA = "0xF5DCE4", Slot = "17")]
		internal override void EndWriteDictionary()
		{
		}

		[Token(Token = "0x6001973")]
		[Address(RVA = "0xF5DCF4", Offset = "0xF5DCF4", VA = "0xF5DCF4", Slot = "18")]
		internal override void StartWriteDictionaryKey(int index)
		{
		}

		[Token(Token = "0x6001974")]
		[Address(RVA = "0xF5DD28", Offset = "0xF5DD28", VA = "0xF5DD28", Slot = "19")]
		internal override void EndWriteDictionaryKey(int index)
		{
		}

		[Token(Token = "0x6001975")]
		[Address(RVA = "0xF5DD50", Offset = "0xF5DD50", VA = "0xF5DD50", Slot = "20")]
		internal override void StartWriteDictionaryValue(int index)
		{
		}

		[Token(Token = "0x6001976")]
		[Address(RVA = "0xF5DD54", Offset = "0xF5DD54", VA = "0xF5DD54", Slot = "21")]
		internal override void EndWriteDictionaryValue(int index)
		{
		}

		[Token(Token = "0x6001977")]
		[Address(RVA = "0xF5DD58", Offset = "0xF5DD58", VA = "0xF5DD58", Slot = "22")]
		public override void Dispose()
		{
		}

		[Token(Token = "0x6001978")]
		[Address(RVA = "0xF5D924", Offset = "0xF5D924", VA = "0xF5D924")]
		public void WriteNewlineAndTabs()
		{
		}
	}
}
namespace Better.StreamingAssets
{
	[Token(Token = "0x20003C0")]
	public static class PathUtil
	{
		[Token(Token = "0x20003C1")]
		private enum NormalizeState
		{
			[Token(Token = "0x4000F2A")]
			PrevSlash,
			[Token(Token = "0x4000F2B")]
			PrevDot,
			[Token(Token = "0x4000F2C")]
			PrevDoubleDot,
			[Token(Token = "0x4000F2D")]
			NothingSpecial
		}

		[Token(Token = "0x6001979")]
		[Address(RVA = "0xF5DD74", Offset = "0xF5DD74", VA = "0xF5DD74")]
		public static bool IsDirectorySeparator(char c)
		{
			return default(bool);
		}

		[Token(Token = "0x600197A")]
		[Address(RVA = "0xF5DD90", Offset = "0xF5DD90", VA = "0xF5DD90")]
		public static string FixTrailingDirectorySeparators(string path)
		{
			return null;
		}

		[Token(Token = "0x600197B")]
		[Address(RVA = "0xF5DEA8", Offset = "0xF5DEA8", VA = "0xF5DEA8")]
		public static string CombineSlash(string a, string b)
		{
			return null;
		}

		[Token(Token = "0x600197C")]
		[Address(RVA = "0xF5E004", Offset = "0xF5E004", VA = "0xF5E004")]
		public static string NormalizeRelativePath(string relative, bool forceTrailingSlash = false)
		{
			return null;
		}

		[Token(Token = "0x600197D")]
		[Address(RVA = "0xF5E420", Offset = "0xF5E420", VA = "0xF5E420")]
		public static bool IsValidCharacter(char c)
		{
			return default(bool);
		}

		[Token(Token = "0x600197E")]
		[Address(RVA = "0xF5E484", Offset = "0xF5E484", VA = "0xF5E484")]
		public static Regex WildcardToRegex(string pattern)
		{
			return null;
		}
	}
	[Token(Token = "0x20003C2")]
	internal class SubReadOnlyStream : Stream
	{
		[Token(Token = "0x4000F2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly long m_offset;

		[Token(Token = "0x4000F2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly bool m_leaveOpen;

		[Token(Token = "0x4000F30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private long? m_length;

		[Token(Token = "0x4000F31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Stream m_actualStream;

		[Token(Token = "0x4000F32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private long m_position;

		[Token(Token = "0x170002A5")]
		public override long Length
		{
			[Token(Token = "0x6001981")]
			[Address(RVA = "0xF5E7B0", Offset = "0xF5E7B0", VA = "0xF5E7B0", Slot = "11")]
			get
			{
				return default(long);
			}
		}

		[Token(Token = "0x170002A6")]
		public override long Position
		{
			[Token(Token = "0x6001982")]
			[Address(RVA = "0xF5E900", Offset = "0xF5E900", VA = "0xF5E900", Slot = "12")]
			get
			{
				return default(long);
			}
			[Token(Token = "0x6001983")]
			[Address(RVA = "0xF5E920", Offset = "0xF5E920", VA = "0xF5E920", Slot = "13")]
			set
			{
			}
		}

		[Token(Token = "0x170002A7")]
		public override bool CanRead
		{
			[Token(Token = "0x6001984")]
			[Address(RVA = "0xF5E964", Offset = "0xF5E964", VA = "0xF5E964", Slot = "7")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002A8")]
		public override bool CanSeek
		{
			[Token(Token = "0x6001985")]
			[Address(RVA = "0xF5E984", Offset = "0xF5E984", VA = "0xF5E984", Slot = "8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002A9")]
		public override bool CanWrite
		{
			[Token(Token = "0x6001986")]
			[Address(RVA = "0xF5E9A4", Offset = "0xF5E9A4", VA = "0xF5E9A4", Slot = "10")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600197F")]
		[Address(RVA = "0xF5E5C8", Offset = "0xF5E5C8", VA = "0xF5E5C8")]
		public SubReadOnlyStream(Stream actualStream, bool leaveOpen = false)
		{
		}

		[Token(Token = "0x6001980")]
		[Address(RVA = "0xF5E69C", Offset = "0xF5E69C", VA = "0xF5E69C")]
		public SubReadOnlyStream(Stream actualStream, long offset, long length, bool leaveOpen = false)
		{
		}

		[Token(Token = "0x6001987")]
		[Address(RVA = "0xF5E9AC", Offset = "0xF5E9AC", VA = "0xF5E9AC", Slot = "32")]
		public override int Read(byte[] buffer, int offset, int count)
		{
			return default(int);
		}

		[Token(Token = "0x6001988")]
		[Address(RVA = "0xF5EB14", Offset = "0xF5EB14", VA = "0xF5EB14", Slot = "30")]
		public override long Seek(long offset, SeekOrigin origin)
		{
			return default(long);
		}

		[Token(Token = "0x6001989")]
		[Address(RVA = "0xF5EBD8", Offset = "0xF5EBD8", VA = "0xF5EBD8", Slot = "31")]
		public override void SetLength(long value)
		{
		}

		[Token(Token = "0x600198A")]
		[Address(RVA = "0xF5EC18", Offset = "0xF5EC18", VA = "0xF5EC18", Slot = "35")]
		public override void Write(byte[] buffer, int offset, int count)
		{
		}

		[Token(Token = "0x600198B")]
		[Address(RVA = "0xF5EC58", Offset = "0xF5EC58", VA = "0xF5EC58", Slot = "21")]
		public override void Flush()
		{
		}

		[Token(Token = "0x600198C")]
		[Address(RVA = "0xF5EC98", Offset = "0xF5EC98", VA = "0xF5EC98", Slot = "20")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x600198D")]
		[Address(RVA = "0xF5E870", Offset = "0xF5E870", VA = "0xF5E870")]
		private void ThrowIfDisposed()
		{
		}

		[Token(Token = "0x600198E")]
		[Address(RVA = "0xF5EABC", Offset = "0xF5EABC", VA = "0xF5EABC")]
		private void ThrowIfCantRead()
		{
		}
	}
	[Token(Token = "0x20003C3")]
	public class BSA_TestSceneGUI : MonoBehaviour
	{
		[Token(Token = "0x20003C4")]
		private class CoroutineHost : MonoBehaviour
		{
			[Token(Token = "0x600199B")]
			[Address(RVA = "0xF61288", Offset = "0xF61288", VA = "0xF61288")]
			public CoroutineHost()
			{
			}
		}

		[Token(Token = "0x20003C5")]
		private class TestInfo
		{
			[Token(Token = "0x4000F40")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public ReadMode readMode;

			[Token(Token = "0x4000F41")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public TestType testType;

			[Token(Token = "0x4000F42")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string path;

			[Token(Token = "0x4000F43")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public int attempts;

			[Token(Token = "0x4000F44")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Exception error;

			[Token(Token = "0x4000F45")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public TimeSpan duration;

			[Token(Token = "0x4000F46")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public long bytesRead;

			[Token(Token = "0x4000F47")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public long memoryPeak;

			[Token(Token = "0x4000F48")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public long maxMemoryPeak;

			[Token(Token = "0x600199C")]
			[Address(RVA = "0xF61290", Offset = "0xF61290", VA = "0xF61290")]
			public TestInfo()
			{
			}
		}

		[Token(Token = "0x20003C6")]
		private delegate void TestResultDelegate(TimeSpan avgDuration, long avgBytesRead, long avgMemoryPeak, long maxMemoryPeak, string[] assetNames);

		[Token(Token = "0x20003C7")]
		[Flags]
		private enum ReadMode
		{
			[Token(Token = "0x4000F4A")]
			BSA = 1,
			[Token(Token = "0x4000F4B")]
			WWW = 2,
			[Token(Token = "0x4000F4C")]
			Direct = 0x20,
			[Token(Token = "0x4000F4D")]
			UnityWebRequest = 0x40
		}

		[Token(Token = "0x20003C8")]
		[Flags]
		private enum TestType
		{
			[Token(Token = "0x4000F4F")]
			CheckIfExists = 1,
			[Token(Token = "0x4000F50")]
			LoadBytes = 2
		}

		[Token(Token = "0x20003C9")]
		[CompilerGenerated]
		private sealed class <>c__DisplayClass26_0
		{
			[Token(Token = "0x4000F51")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public TestInfo testInfo;

			[Token(Token = "0x60019A1")]
			[Address(RVA = "0xF61470", Offset = "0xF61470", VA = "0xF61470")]
			public <>c__DisplayClass26_0()
			{
			}

			[Token(Token = "0x60019A2")]
			[Address(RVA = "0xF61478", Offset = "0xF61478", VA = "0xF61478")]
			internal void <TestAllCoroutine>b__0(TimeSpan duration, long bytes, long memory, long maxMemory, string[] names)
			{
			}

			[Token(Token = "0x60019A3")]
			[Address(RVA = "0xF614A4", Offset = "0xF614A4", VA = "0xF614A4")]
			internal void <TestAllCoroutine>b__1(Exception ex)
			{
			}
		}

		[Token(Token = "0x20003CA")]
		[CompilerGenerated]
		private sealed class <TestAllCoroutine>d__26 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000F52")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000F53")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000F54")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public BSA_TestSceneGUI <>4__this;

			[Token(Token = "0x4000F55")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public List<TestInfo> results;

			[Token(Token = "0x4000F56")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public IEnumerable<string> paths;

			[Token(Token = "0x4000F57")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public ReadMode readModes;

			[Token(Token = "0x4000F58")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public TestType testTypes;

			[Token(Token = "0x4000F59")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public int attempts;

			[Token(Token = "0x4000F5A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private <>c__DisplayClass26_0 <>8__1;

			[Token(Token = "0x4000F5B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private string <logPath>5__2;

			[Token(Token = "0x4000F5C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private IEnumerator<string> <>7__wrap2;

			[Token(Token = "0x4000F5D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private string <path>5__4;

			[Token(Token = "0x4000F5E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			private IEnumerator <>7__wrap4;

			[Token(Token = "0x4000F5F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			private ReadMode <readMode>5__6;

			[Token(Token = "0x4000F60")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			private IEnumerator <>7__wrap6;

			[Token(Token = "0x170002AB")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60019AB")]
				[Address(RVA = "0xF62A48", Offset = "0xF62A48", VA = "0xF62A48", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002AC")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60019AD")]
				[Address(RVA = "0xF62A90", Offset = "0xF62A90", VA = "0xF62A90", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60019A4")]
			[Address(RVA = "0xF60E4C", Offset = "0xF60E4C", VA = "0xF60E4C")]
			[DebuggerHidden]
			public <TestAllCoroutine>d__26(int <>1__state)
			{
			}

			[Token(Token = "0x60019A5")]
			[Address(RVA = "0xF614C0", Offset = "0xF614C0", VA = "0xF614C0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60019A6")]
			[Address(RVA = "0xF61658", Offset = "0xF61658", VA = "0xF61658", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60019A7")]
			[Address(RVA = "0xF6238C", Offset = "0xF6238C", VA = "0xF6238C")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x60019A8")]
			[Address(RVA = "0xF622DC", Offset = "0xF622DC", VA = "0xF622DC")]
			private void <>m__Finally2()
			{
			}

			[Token(Token = "0x60019A9")]
			[Address(RVA = "0xF62220", Offset = "0xF62220", VA = "0xF62220")]
			private void <>m__Finally3()
			{
			}

			[Token(Token = "0x60019AA")]
			[Address(RVA = "0xF62164", Offset = "0xF62164", VA = "0xF62164")]
			private void <>m__Finally4()
			{
			}

			[Token(Token = "0x60019AC")]
			[Address(RVA = "0xF62A50", Offset = "0xF62A50", VA = "0xF62A50", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20003CB")]
		[CompilerGenerated]
		private sealed class <ErrorCatchingCoroutine>d__28 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000F61")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000F62")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000F63")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public BSA_TestSceneGUI <>4__this;

			[Token(Token = "0x4000F64")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public IEnumerator inner;

			[Token(Token = "0x4000F65")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Action<Exception> onError;

			[Token(Token = "0x170002AD")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60019B1")]
				[Address(RVA = "0xF62CB0", Offset = "0xF62CB0", VA = "0xF62CB0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002AE")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60019B3")]
				[Address(RVA = "0xF62CF8", Offset = "0xF62CF8", VA = "0xF62CF8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60019AE")]
			[Address(RVA = "0xF60FF4", Offset = "0xF60FF4", VA = "0xF60FF4")]
			[DebuggerHidden]
			public <ErrorCatchingCoroutine>d__28(int <>1__state)
			{
			}

			[Token(Token = "0x60019AF")]
			[Address(RVA = "0xF62A98", Offset = "0xF62A98", VA = "0xF62A98", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60019B0")]
			[Address(RVA = "0xF62A9C", Offset = "0xF62A9C", VA = "0xF62A9C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60019B2")]
			[Address(RVA = "0xF62CB8", Offset = "0xF62CB8", VA = "0xF62CB8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20003CC")]
		[CompilerGenerated]
		private sealed class <TestHarness>d__29 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000F66")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000F67")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000F68")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public BSA_TestSceneGUI <>4__this;

			[Token(Token = "0x4000F69")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string path;

			[Token(Token = "0x4000F6A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public ReadMode readMode;

			[Token(Token = "0x4000F6B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public TestType testType;

			[Token(Token = "0x4000F6C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public int attempts;

			[Token(Token = "0x4000F6D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public TestResultDelegate callback;

			[Token(Token = "0x4000F6E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private Stopwatch <stopwatch>5__2;

			[Token(Token = "0x4000F6F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private string[] <assetNames>5__3;

			[Token(Token = "0x4000F70")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private string <streamingAssetsUrl>5__4;

			[Token(Token = "0x4000F71")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private long <bytesRead>5__5;

			[Token(Token = "0x4000F72")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			private long <maxMemoryPeak>5__6;

			[Token(Token = "0x4000F73")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			private long <totalMemoryPeaks>5__7;

			[Token(Token = "0x4000F74")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			private int <i>5__8;

			[Token(Token = "0x4000F75")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			private IDisposable <toDispose>5__9;

			[Token(Token = "0x4000F76")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			private long <memoryUnityBefore>5__10;

			[Token(Token = "0x4000F77")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			private WWW <www>5__11;

			[Token(Token = "0x4000F78")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			private UnityWebRequest <www>5__12;

			[Token(Token = "0x170002AF")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60019B7")]
				[Address(RVA = "0xF63430", Offset = "0xF63430", VA = "0xF63430", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002B0")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60019B9")]
				[Address(RVA = "0xF63478", Offset = "0xF63478", VA = "0xF63478", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60019B4")]
			[Address(RVA = "0xF610E4", Offset = "0xF610E4", VA = "0xF610E4")]
			[DebuggerHidden]
			public <TestHarness>d__29(int <>1__state)
			{
			}

			[Token(Token = "0x60019B5")]
			[Address(RVA = "0xF62D00", Offset = "0xF62D00", VA = "0xF62D00", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60019B6")]
			[Address(RVA = "0xF62D04", Offset = "0xF62D04", VA = "0xF62D04", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60019B8")]
			[Address(RVA = "0xF63438", Offset = "0xF63438", VA = "0xF63438", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000F33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Text InProgressText;

		[Token(Token = "0x4000F34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string EditorApkPath;

		[Token(Token = "0x4000F35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int RepetitionCount;

		[Token(Token = "0x4000F36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool LogToFile;

		[Token(Token = "0x4000F37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private string m_status;

		[Token(Token = "0x4000F38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private TestType m_testModes;

		[Token(Token = "0x4000F39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private ReadMode m_readModes;

		[Token(Token = "0x4000F3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private CoroutineHost coroutineHost;

		[Token(Token = "0x4000F3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector2 m_assetsScroll;

		[Token(Token = "0x4000F3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Vector2 m_resultsScroll;

		[Token(Token = "0x4000F3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private string[] m_allStreamingAssets;

		[Token(Token = "0x4000F3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private List<TestInfo> m_results;

		[Token(Token = "0x4000F3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private HashSet<string> m_selectedPaths;

		[Token(Token = "0x170002AA")]
		private string StreamingAssetsPath
		{
			[Token(Token = "0x6001992")]
			[Address(RVA = "0xF60E44", Offset = "0xF60E44", VA = "0xF60E44")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600198F")]
		[Address(RVA = "0xF5ECF0", Offset = "0xF5ECF0", VA = "0xF5ECF0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001990")]
		[Address(RVA = "0xF5ED10", Offset = "0xF5ED10", VA = "0xF5ED10")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001991")]
		[Address(RVA = "0xF5ED30", Offset = "0xF5ED30", VA = "0xF5ED30")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6001993")]
		[Address(RVA = "0xF6090C", Offset = "0xF6090C", VA = "0xF6090C")]
		private void Initialize()
		{
		}

		[Token(Token = "0x6001994")]
		[Address(RVA = "0xF60B44", Offset = "0xF60B44", VA = "0xF60B44")]
		private void DoTestTypeToggle(TestType testMode)
		{
		}

		[Token(Token = "0x6001995")]
		[Address(RVA = "0xF60C60", Offset = "0xF60C60", VA = "0xF60C60")]
		private void DoReadModeToggle(ReadMode readMode)
		{
		}

		[Token(Token = "0x6001996")]
		[Address(RVA = "0xF60D7C", Offset = "0xF60D7C", VA = "0xF60D7C")]
		[IteratorStateMachine(typeof(<TestAllCoroutine>d__26))]
		private IEnumerator TestAllCoroutine(IEnumerable<string> paths, int attempts, ReadMode readModes, TestType testTypes, List<TestInfo> results)
		{
			return null;
		}

		[Token(Token = "0x6001997")]
		[Address(RVA = "0xF60E74", Offset = "0xF60E74", VA = "0xF60E74")]
		private void LogWorkProgress(string status)
		{
		}

		[Token(Token = "0x6001998")]
		[Address(RVA = "0xF60F50", Offset = "0xF60F50", VA = "0xF60F50")]
		[IteratorStateMachine(typeof(<ErrorCatchingCoroutine>d__28))]
		private IEnumerator ErrorCatchingCoroutine(IEnumerator inner, Action<Exception> onError)
		{
			return null;
		}

		[Token(Token = "0x6001999")]
		[Address(RVA = "0xF6101C", Offset = "0xF6101C", VA = "0xF6101C")]
		[IteratorStateMachine(typeof(<TestHarness>d__29))]
		private IEnumerator TestHarness(ReadMode readMode, string path, TestType testType, int attempts, TestResultDelegate callback)
		{
			return null;
		}

		[Token(Token = "0x600199A")]
		[Address(RVA = "0xF6110C", Offset = "0xF6110C", VA = "0xF6110C")]
		public BSA_TestSceneGUI()
		{
		}
	}
}
namespace Better.StreamingAssets.ZipArchive
{
	[Token(Token = "0x20003CD")]
	internal struct ZipGenericExtraField
	{
		[Token(Token = "0x4000F79")]
		private const int SizeOfHeader = 4;

		[Token(Token = "0x4000F7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private ushort _tag;

		[Token(Token = "0x4000F7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		private ushort _size;

		[Token(Token = "0x4000F7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private byte[] _data;

		[Token(Token = "0x170002B1")]
		public ushort Tag
		{
			[Token(Token = "0x60019BA")]
			[Address(RVA = "0xF63480", Offset = "0xF63480", VA = "0xF63480")]
			get
			{
				return default(ushort);
			}
		}

		[Token(Token = "0x170002B2")]
		public ushort Size
		{
			[Token(Token = "0x60019BB")]
			[Address(RVA = "0xF63488", Offset = "0xF63488", VA = "0xF63488")]
			get
			{
				return default(ushort);
			}
		}

		[Token(Token = "0x170002B3")]
		public byte[] Data
		{
			[Token(Token = "0x60019BC")]
			[Address(RVA = "0xF63490", Offset = "0xF63490", VA = "0xF63490")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60019BD")]
		[Address(RVA = "0xF63498", Offset = "0xF63498", VA = "0xF63498")]
		public static bool TryReadBlock(BinaryReader reader, long endExtraField, out ZipGenericExtraField field)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20003CE")]
	internal struct Zip64ExtraField
	{
		[Token(Token = "0x4000F7D")]
		public const int OffsetToFirstField = 4;

		[Token(Token = "0x4000F7E")]
		private const ushort TagConstant = 1;

		[Token(Token = "0x4000F7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private ushort _size;

		[Token(Token = "0x4000F80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private long? _uncompressedSize;

		[Token(Token = "0x4000F81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private long? _compressedSize;

		[Token(Token = "0x4000F82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private long? _localHeaderOffset;

		[Token(Token = "0x4000F83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int? _startDiskNumber;

		[Token(Token = "0x170002B4")]
		public long? UncompressedSize
		{
			[Token(Token = "0x60019BE")]
			[Address(RVA = "0xF6357C", Offset = "0xF6357C", VA = "0xF6357C")]
			get
			{
				return null;
			}
			[Token(Token = "0x60019BF")]
			[Address(RVA = "0xF63588", Offset = "0xF63588", VA = "0xF63588")]
			set
			{
			}
		}

		[Token(Token = "0x170002B5")]
		public long? CompressedSize
		{
			[Token(Token = "0x60019C0")]
			[Address(RVA = "0xF6361C", Offset = "0xF6361C", VA = "0xF6361C")]
			get
			{
				return null;
			}
			[Token(Token = "0x60019C1")]
			[Address(RVA = "0xF63628", Offset = "0xF63628", VA = "0xF63628")]
			set
			{
			}
		}

		[Token(Token = "0x170002B6")]
		public long? LocalHeaderOffset
		{
			[Token(Token = "0x60019C2")]
			[Address(RVA = "0xF63630", Offset = "0xF63630", VA = "0xF63630")]
			get
			{
				return null;
			}
			[Token(Token = "0x60019C3")]
			[Address(RVA = "0xF6363C", Offset = "0xF6363C", VA = "0xF6363C")]
			set
			{
			}
		}

		[Token(Token = "0x170002B7")]
		public int? StartDiskNumber
		{
			[Token(Token = "0x60019C4")]
			[Address(RVA = "0xF63644", Offset = "0xF63644", VA = "0xF63644")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60019C5")]
		[Address(RVA = "0xF63590", Offset = "0xF63590", VA = "0xF63590")]
		private void UpdateSize()
		{
		}

		[Token(Token = "0x60019C6")]
		[Address(RVA = "0xF6364C", Offset = "0xF6364C", VA = "0xF6364C")]
		public static Zip64ExtraField GetJustZip64Block(Stream extraFieldStream, bool readUncompressedSize, bool readCompressedSize, bool readLocalHeaderOffset, bool readStartDiskNumber)
		{
			return default(Zip64ExtraField);
		}

		[Token(Token = "0x60019C7")]
		[Address(RVA = "0xF638E0", Offset = "0xF638E0", VA = "0xF638E0")]
		private static bool TryGetZip64BlockFromGenericExtraField(ZipGenericExtraField extraField, bool readUncompressedSize, bool readCompressedSize, bool readLocalHeaderOffset, bool readStartDiskNumber, out Zip64ExtraField zip64Block)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20003CF")]
	internal struct Zip64EndOfCentralDirectoryLocator
	{
		[Token(Token = "0x4000F84")]
		public const uint SignatureConstant = 117853008u;

		[Token(Token = "0x4000F85")]
		public const int SizeOfBlockWithoutSignature = 16;

		[Token(Token = "0x4000F86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint NumberOfDiskWithZip64EOCD;

		[Token(Token = "0x4000F87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong OffsetOfZip64EOCD;

		[Token(Token = "0x4000F88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint TotalNumberOfDisks;

		[Token(Token = "0x60019C8")]
		[Address(RVA = "0xF63F54", Offset = "0xF63F54", VA = "0xF63F54")]
		public static bool TryReadBlock(BinaryReader reader, out Zip64EndOfCentralDirectoryLocator zip64EOCDLocator)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20003D0")]
	internal struct Zip64EndOfCentralDirectoryRecord
	{
		[Token(Token = "0x4000F89")]
		private const uint SignatureConstant = 101075792u;

		[Token(Token = "0x4000F8A")]
		private const ulong NormalSize = 44uL;

		[Token(Token = "0x4000F8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong SizeOfThisRecord;

		[Token(Token = "0x4000F8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ushort VersionMadeBy;

		[Token(Token = "0x4000F8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA")]
		public ushort VersionNeededToExtract;

		[Token(Token = "0x4000F8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint NumberOfThisDisk;

		[Token(Token = "0x4000F8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint NumberOfDiskWithStartOfCD;

		[Token(Token = "0x4000F90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ulong NumberOfEntriesOnThisDisk;

		[Token(Token = "0x4000F91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ulong NumberOfEntriesTotal;

		[Token(Token = "0x4000F92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ulong SizeOfCentralDirectory;

		[Token(Token = "0x4000F93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ulong OffsetOfCentralDirectory;

		[Token(Token = "0x60019C9")]
		[Address(RVA = "0xF63FF4", Offset = "0xF63FF4", VA = "0xF63FF4")]
		public static bool TryReadBlock(BinaryReader reader, out Zip64EndOfCentralDirectoryRecord zip64EOCDRecord)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20003D1")]
	internal struct ZipLocalFileHeader
	{
		[Token(Token = "0x4000F94")]
		public const uint DataDescriptorSignature = 134695760u;

		[Token(Token = "0x4000F95")]
		public const uint SignatureConstant = 67324752u;

		[Token(Token = "0x4000F96")]
		public const int OffsetToCrcFromHeaderStart = 14;

		[Token(Token = "0x4000F97")]
		public const int OffsetToBitFlagFromHeaderStart = 6;

		[Token(Token = "0x4000F98")]
		public const int SizeOfLocalHeader = 30;

		[Token(Token = "0x60019CA")]
		[Address(RVA = "0xF6412C", Offset = "0xF6412C", VA = "0xF6412C")]
		public static bool TrySkipBlock(BinaryReader reader)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20003D2")]
	internal struct ZipCentralDirectoryFileHeader
	{
		[Token(Token = "0x4000F99")]
		public const uint SignatureConstant = 33639248u;

		[Token(Token = "0x4000F9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte VersionMadeByCompatibility;

		[Token(Token = "0x4000F9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		public byte VersionMadeBySpecification;

		[Token(Token = "0x4000F9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		public ushort VersionNeededToExtract;

		[Token(Token = "0x4000F9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public ushort GeneralPurposeBitFlag;

		[Token(Token = "0x4000F9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6")]
		public ushort CompressionMethod;

		[Token(Token = "0x4000F9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint LastModified;

		[Token(Token = "0x4000FA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint Crc32;

		[Token(Token = "0x4000FA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public long CompressedSize;

		[Token(Token = "0x4000FA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public long UncompressedSize;

		[Token(Token = "0x4000FA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ushort FilenameLength;

		[Token(Token = "0x4000FA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		public ushort ExtraFieldLength;

		[Token(Token = "0x4000FA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public ushort FileCommentLength;

		[Token(Token = "0x4000FA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int DiskNumberStart;

		[Token(Token = "0x4000FA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public ushort InternalFileAttributes;

		[Token(Token = "0x4000FA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public uint ExternalFileAttributes;

		[Token(Token = "0x4000FA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public long RelativeOffsetOfLocalHeader;

		[Token(Token = "0x4000FAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public byte[] Filename;

		[Token(Token = "0x4000FAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public byte[] FileComment;

		[Token(Token = "0x4000FAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public List<ZipGenericExtraField> ExtraFields;

		[Token(Token = "0x60019CB")]
		[Address(RVA = "0xF642B4", Offset = "0xF642B4", VA = "0xF642B4")]
		public static bool TryReadBlock(BinaryReader reader, out ZipCentralDirectoryFileHeader header)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20003D3")]
	internal struct ZipEndOfCentralDirectoryBlock
	{
		[Token(Token = "0x4000FAD")]
		public const uint SignatureConstant = 101010256u;

		[Token(Token = "0x4000FAE")]
		public const int SizeOfBlockWithoutSignature = 18;

		[Token(Token = "0x4000FAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint Signature;

		[Token(Token = "0x4000FB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public ushort NumberOfThisDisk;

		[Token(Token = "0x4000FB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6")]
		public ushort NumberOfTheDiskWithTheStartOfTheCentralDirectory;

		[Token(Token = "0x4000FB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ushort NumberOfEntriesInTheCentralDirectoryOnThisDisk;

		[Token(Token = "0x4000FB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA")]
		public ushort NumberOfEntriesInTheCentralDirectory;

		[Token(Token = "0x4000FB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint SizeOfCentralDirectory;

		[Token(Token = "0x4000FB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint OffsetOfStartOfCentralDirectoryWithRespectToTheStartingDiskNumber;

		[Token(Token = "0x4000FB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public byte[] ArchiveComment;

		[Token(Token = "0x60019CC")]
		[Address(RVA = "0xF649A4", Offset = "0xF649A4", VA = "0xF649A4")]
		public static bool TryReadBlock(BinaryReader reader, out ZipEndOfCentralDirectoryBlock eocdBlock)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20003D4")]
	internal static class ZipHelper
	{
		[Token(Token = "0x4000FB7")]
		internal const uint Mask32Bit = uint.MaxValue;

		[Token(Token = "0x4000FB8")]
		internal const ushort Mask16Bit = ushort.MaxValue;

		[Token(Token = "0x4000FB9")]
		private const int BackwardsSeekingBufferSize = 32;

		[Token(Token = "0x60019CD")]
		[Address(RVA = "0xF64ACC", Offset = "0xF64ACC", VA = "0xF64ACC")]
		internal static void ReadBytes(Stream stream, byte[] buffer, int bytesToRead)
		{
		}

		[Token(Token = "0x60019CE")]
		[Address(RVA = "0xF64B78", Offset = "0xF64B78", VA = "0xF64B78")]
		internal static bool SeekBackwardsToSignature(Stream stream, uint signatureToFind)
		{
			return default(bool);
		}

		[Token(Token = "0x60019CF")]
		[Address(RVA = "0xF648B8", Offset = "0xF648B8", VA = "0xF648B8")]
		internal static void AdvanceToPosition(this Stream stream, long position)
		{
		}

		[Token(Token = "0x60019D0")]
		[Address(RVA = "0xF64C74", Offset = "0xF64C74", VA = "0xF64C74")]
		private static bool SeekBackwardsAndRead(Stream stream, byte[] buffer, out int bufferPointer)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20003D5")]
	public class ZipArchiveException : Exception
	{
		[Token(Token = "0x60019D1")]
		[Address(RVA = "0xF63EEC", Offset = "0xF63EEC", VA = "0xF63EEC")]
		public ZipArchiveException(string msg)
		{
		}

		[Token(Token = "0x60019D2")]
		[Address(RVA = "0xF64D8C", Offset = "0xF64D8C", VA = "0xF64D8C")]
		public ZipArchiveException(string msg, Exception inner)
		{
		}
	}
	[Token(Token = "0x20003D6")]
	public static class ZipArchiveUtils
	{
		[Token(Token = "0x60019D3")]
		[Address(RVA = "0xF64DFC", Offset = "0xF64DFC", VA = "0xF64DFC")]
		public static void ReadEndOfCentralDirectory(Stream stream, BinaryReader reader, out long expectedNumberOfEntries, out long centralDirectoryStart)
		{
		}
	}
}
