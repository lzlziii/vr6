using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Xml;
using DigitalOpus.MB.Core;
using Dreamteck.Splines;
using Il2CppDummyDll;
using Lightning;
using MirzaBeig.Scripting.Effects;
using NLayer;
using ProBuilder2.Common;
using RealisticEyeMovements;
using RogoDigital.Lipsync;
using TMPro;
using Tayx.Graphy;
using Tayx.Graphy.Advanced;
using Tayx.Graphy.Audio;
using Tayx.Graphy.Fps;
using Tayx.Graphy.Graph;
using Tayx.Graphy.Ram;
using Tayx.Graphy.UI;
using Tayx.Graphy.Utils;
using UnityEngine;
using UnityEngine.Audio;
using UnityEngine.EventSystems;
using UnityEngine.Events;
using UnityEngine.InputSystem;
using UnityEngine.Networking;
using UnityEngine.Playables;
using UnityEngine.Rendering;
using UnityEngine.SceneManagement;
using UnityEngine.UI;
using UnityEngine.Video;
using UnityEngine.XR.Interaction.Toolkit;
using VRUiKits.Utils;

[assembly: AssemblyVersion("0.0.0.0")]
[Token(Token = "0x2000002")]
public class ExtendedFlycam : MonoBehaviour
{
	[Token(Token = "0x4000001")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float cameraSensitivity;

	[Token(Token = "0x4000002")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float climbSpeed;

	[Token(Token = "0x4000003")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float normalMoveSpeed;

	[Token(Token = "0x4000004")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float slowMoveFactor;

	[Token(Token = "0x4000005")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float fastMoveFactor;

	[Token(Token = "0x4000006")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float rotationX;

	[Token(Token = "0x4000007")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float rotationY;

	[Token(Token = "0x6000001")]
	[Address(RVA = "0xA04B20", Offset = "0xA04B20", VA = "0xA04B20")]
	private void Start()
	{
	}

	[Token(Token = "0x6000002")]
	[Address(RVA = "0xA04B44", Offset = "0xA04B44", VA = "0xA04B44")]
	private void Update()
	{
	}

	[Token(Token = "0x6000003")]
	[Address(RVA = "0xA054D0", Offset = "0xA054D0", VA = "0xA054D0")]
	public ExtendedFlycam()
	{
	}
}
[Token(Token = "0x2000003")]
public class ForestMaker : MonoBehaviour
{
	[Token(Token = "0x4000008")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject m_treePrefab;

	[Token(Token = "0x4000009")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int m_amount;

	[Token(Token = "0x400000A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject m_ground;

	[Token(Token = "0x400000B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float m_radiusDistance;

	[Token(Token = "0x6000004")]
	[Address(RVA = "0xBFC29C", Offset = "0xBFC29C", VA = "0xBFC29C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000005")]
	[Address(RVA = "0xBFC5B8", Offset = "0xBFC5B8", VA = "0xBFC5B8")]
	public ForestMaker()
	{
	}
}
[Token(Token = "0x2000004")]
public enum ImpostorType
{
	[Token(Token = "0x400000D")]
	Spherical,
	[Token(Token = "0x400000E")]
	Octahedron,
	[Token(Token = "0x400000F")]
	HemiOctahedron
}
[Token(Token = "0x2000005")]
[Flags]
public enum DeferredBuffers
{
	[Token(Token = "0x4000011")]
	AlbedoAlpha = 1,
	[Token(Token = "0x4000012")]
	SpecularSmoothness = 2,
	[Token(Token = "0x4000013")]
	NormalDepth = 4,
	[Token(Token = "0x4000014")]
	EmissionOcclusion = 8
}
[Token(Token = "0x2000006")]
public enum NormalCompression
{
	[Token(Token = "0x4000016")]
	None,
	[Token(Token = "0x4000017")]
	LowQuality,
	[Token(Token = "0x4000018")]
	NormalQuality,
	[Token(Token = "0x4000019")]
	HighQuality
}
[Token(Token = "0x2000007")]
[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0x5C96E4", Offset = "0x5C96E4")]
public class AmplifyImpostorAsset : ScriptableObject
{
	[Token(Token = "0x400001A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	public Material Material;

	[Token(Token = "0x400001B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	public Mesh Mesh;

	[Token(Token = "0x400001C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[HideInInspector]
	[SerializeField]
	public int Version;

	[Token(Token = "0x400001D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	public ImpostorType ImpostorType;

	[Token(Token = "0x400001E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	[SerializeField]
	public bool LockedSizes;

	[Token(Token = "0x400001F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[HideInInspector]
	[SerializeField]
	public int SelectedSize;

	[Token(Token = "0x4000020")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	public Vector2 TexSize;

	[Token(Token = "0x4000021")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[HideInInspector]
	[SerializeField]
	public bool DecoupleAxisFrames;

	[Token(Token = "0x4000022")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5CE3E4", Offset = "0x5CE3E4")]
	public int HorizontalFrames;

	[Token(Token = "0x4000023")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5CE428", Offset = "0x5CE428")]
	public int VerticalFrames;

	[Token(Token = "0x4000024")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[SerializeField]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5CE46C", Offset = "0x5CE46C")]
	public int PixelPadding;

	[Token(Token = "0x4000025")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	public DeferredBuffers BufferMask;

	[Token(Token = "0x4000026")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[SerializeField]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5CE4C0", Offset = "0x5CE4C0")]
	public int MaxVertices;

	[Token(Token = "0x4000027")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5CE500", Offset = "0x5CE500")]
	public float Tolerance;

	[Token(Token = "0x4000028")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[SerializeField]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5CE544", Offset = "0x5CE544")]
	public float NormalScale;

	[Token(Token = "0x4000029")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	public Vector2[] ShapePoints;

	[Token(Token = "0x400002A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	public NormalCompression NormalCompression;

	[Token(Token = "0x6000006")]
	[Address(RVA = "0xC0D024", Offset = "0xC0D024", VA = "0xC0D024")]
	public AmplifyImpostorAsset()
	{
	}
}
[Token(Token = "0x2000008")]
public class ArcRenderer : MonoBehaviour
{
	[Token(Token = "0x400002B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int maxPoints;

	[Token(Token = "0x400002C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float timeStep;

	[Token(Token = "0x400002D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float velocity;

	[Token(Token = "0x400002E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float gravity;

	[Token(Token = "0x400002F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float floor;

	[Token(Token = "0x4000030")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public LineRenderer line;

	[Token(Token = "0x4000031")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float resultZ;

	[Token(Token = "0x6000007")]
	[Address(RVA = "0xC0F8DC", Offset = "0xC0F8DC", VA = "0xC0F8DC")]
	public Vector3 PlotTrajectoryAtTime(Vector3 startPos, Vector3 startVelocity, float time)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000008")]
	[Address(RVA = "0xC0F928", Offset = "0xC0F928", VA = "0xC0F928")]
	public void PlotTrajectoryPoints(Vector3 startPos, Vector3 startVelocity)
	{
	}

	[Token(Token = "0x6000009")]
	[Address(RVA = "0xC0FBC4", Offset = "0xC0FBC4", VA = "0xC0FBC4")]
	private void Start()
	{
	}

	[Token(Token = "0x600000A")]
	[Address(RVA = "0xC0FC58", Offset = "0xC0FC58", VA = "0xC0FC58")]
	private void Update()
	{
	}

	[Token(Token = "0x600000B")]
	[Address(RVA = "0xC0FD08", Offset = "0xC0FD08", VA = "0xC0FD08")]
	public ArcRenderer()
	{
	}
}
[Token(Token = "0x2000009")]
public class AutoRandomSpherePoint : MonoBehaviour
{
	[Token(Token = "0x4000032")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform _object;

	[Token(Token = "0x4000033")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float radius;

	[Token(Token = "0x4000034")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Vector2 minMaxTime;

	[Token(Token = "0x4000035")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool lerp;

	[Token(Token = "0x4000036")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5CE5A4", Offset = "0x5CE5A4")]
	public float lerpSpeed;

	[Token(Token = "0x4000037")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Vector3 targetPoint;

	[Token(Token = "0x4000038")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Vector3 scalar;

	[Token(Token = "0x4000039")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float timer;

	[Token(Token = "0x600000C")]
	[Address(RVA = "0xC125A8", Offset = "0xC125A8", VA = "0xC125A8")]
	private void Start()
	{
	}

	[Token(Token = "0x600000D")]
	[Address(RVA = "0xC12668", Offset = "0xC12668", VA = "0xC12668")]
	private void Update()
	{
	}

	[Token(Token = "0x600000E")]
	[Address(RVA = "0xC126C8", Offset = "0xC126C8", VA = "0xC126C8")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x600000F")]
	[Address(RVA = "0xC125AC", Offset = "0xC125AC", VA = "0xC125AC")]
	private void RandomPos()
	{
	}

	[Token(Token = "0x6000010")]
	[Address(RVA = "0xC1277C", Offset = "0xC1277C", VA = "0xC1277C")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x6000011")]
	[Address(RVA = "0xC12884", Offset = "0xC12884", VA = "0xC12884")]
	public AutoRandomSpherePoint()
	{
	}
}
[Token(Token = "0x200000A")]
[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x5C9734", Offset = "0x5C9734")]
[DisallowMultipleComponent]
[ExecuteInEditMode]
public class PolyverseSkies : MonoBehaviour
{
	[Token(Token = "0x400003A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject sunDirection;

	[Token(Token = "0x400003B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject moonDirection;

	[Token(Token = "0x400003C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector3 GlobalSunDirection;

	[Token(Token = "0x400003D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Vector3 GlobalMoonDirection;

	[Token(Token = "0x6000012")]
	[Address(RVA = "0x1205558", Offset = "0x1205558", VA = "0x1205558")]
	private void Update()
	{
	}

	[Token(Token = "0x6000013")]
	[Address(RVA = "0x12056E8", Offset = "0x12056E8", VA = "0x12056E8")]
	public PolyverseSkies()
	{
	}
}
[Token(Token = "0x200000B")]
public class BPMCalculator : MonoBehaviour
{
	[Token(Token = "0x400003E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float cooldownSeconds;

	[Token(Token = "0x400003F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool roundResult;

	[Token(Token = "0x4000040")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Image cooldownBar;

	[Token(Token = "0x4000041")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TextMeshProUGUI statusText;

	[Token(Token = "0x4000042")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public TextMeshProUGUI currentBpmText;

	[Token(Token = "0x4000043")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public TextMeshProUGUI resultBpmText;

	[Token(Token = "0x4000044")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Button setBPMButton;

	[Token(Token = "0x4000045")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float currentBpm;

	[Token(Token = "0x4000046")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float resultBpm;

	[Token(Token = "0x4000047")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool recording;

	[Token(Token = "0x4000048")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private float lastTapTime;

	[Token(Token = "0x4000049")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private int totaltaps;

	[Token(Token = "0x400004A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float avgSecondsPerTap;

	[Token(Token = "0x400004B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float totalSecondsPerTap;

	[Token(Token = "0x400004C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private float cooldown;

	[Token(Token = "0x6000014")]
	[Address(RVA = "0xC128D0", Offset = "0xC128D0", VA = "0xC128D0")]
	public void Tap()
	{
	}

	[Token(Token = "0x6000015")]
	[Address(RVA = "0xC12C20", Offset = "0xC12C20", VA = "0xC12C20")]
	public void SetBPM()
	{
	}

	[Token(Token = "0x6000016")]
	[Address(RVA = "0xC12CA8", Offset = "0xC12CA8", VA = "0xC12CA8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000017")]
	[Address(RVA = "0xC12D54", Offset = "0xC12D54", VA = "0xC12D54")]
	private void Update()
	{
	}

	[Token(Token = "0x6000018")]
	[Address(RVA = "0xC12CAC", Offset = "0xC12CAC", VA = "0xC12CAC")]
	private void Reset()
	{
	}

	[Token(Token = "0x6000019")]
	[Address(RVA = "0xC12DDC", Offset = "0xC12DDC", VA = "0xC12DDC")]
	public void ToggleRounding(bool on)
	{
	}

	[Token(Token = "0x600001A")]
	[Address(RVA = "0xC12DE8", Offset = "0xC12DE8", VA = "0xC12DE8")]
	public BPMCalculator()
	{
	}
}
[Token(Token = "0x200000C")]
public class Bob : MonoBehaviour
{
	[Token(Token = "0x400004D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationCurve curve;

	[Token(Token = "0x400004E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector3 axis;

	[Token(Token = "0x400004F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float speed;

	[Token(Token = "0x4000050")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Vector3 startPos;

	[Token(Token = "0x4000051")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float percent;

	[Token(Token = "0x600001B")]
	[Address(RVA = "0x10A09F4", Offset = "0x10A09F4", VA = "0x10A09F4")]
	private void Start()
	{
	}

	[Token(Token = "0x600001C")]
	[Address(RVA = "0x10A0A30", Offset = "0x10A0A30", VA = "0x10A0A30")]
	private void Update()
	{
	}

	[Token(Token = "0x600001D")]
	[Address(RVA = "0x10A0AF8", Offset = "0x10A0AF8", VA = "0x10A0AF8")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x600001E")]
	[Address(RVA = "0x10A0B98", Offset = "0x10A0B98", VA = "0x10A0B98")]
	public Bob()
	{
	}
}
[Token(Token = "0x200000D")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x5C9790", Offset = "0x5C9790")]
public class ControllerScrollArea : MonoBehaviour
{
	[Token(Token = "0x2000349")]
	public enum GrabbedState
	{
		[Token(Token = "0x40016F5")]
		Left,
		[Token(Token = "0x40016F6")]
		Right,
		[Token(Token = "0x40016F7")]
		None
	}

	[Token(Token = "0x200034A")]
	public enum GrabControl
	{
		[Token(Token = "0x40016F9")]
		Grip,
		[Token(Token = "0x40016FA")]
		Trigger,
		[Token(Token = "0x40016FB")]
		Button
	}

	[Token(Token = "0x4000052")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform leftController;

	[Token(Token = "0x4000053")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform rightController;

	[Token(Token = "0x4000054")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool x;

	[Token(Token = "0x4000055")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool y;

	[Token(Token = "0x4000056")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
	public bool z;

	[Token(Token = "0x4000057")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float multiplier;

	[Token(Token = "0x4000058")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector3 offset;

	[Token(Token = "0x4000059")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform scrollOrigin;

	[Token(Token = "0x400005A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Vector3 originStart;

	[Token(Token = "0x400005B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Collider col;

	[Token(Token = "0x400005C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private GameManager gm;

	[Token(Token = "0x400005D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Vector3 startPos;

	[Token(Token = "0x400005E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public GrabbedState grabState;

	[Token(Token = "0x400005F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public bool scrollActive;

	[Token(Token = "0x4000060")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
	public bool linked;

	[Token(Token = "0x4000061")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public Vector3 autoscroll;

	[Token(Token = "0x4000062")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public GrabControl control;

	[Token(Token = "0x4000063")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public List<ControllerScrollArea> linkedScrollers;

	[Token(Token = "0x4000064")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Transform lookAtWhileGrabbed;

	[Token(Token = "0x4000065")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public bool nodeScrollArea;

	[Token(Token = "0x4000066")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA1")]
	public bool disableWhenSongPlaying;

	[Token(Token = "0x4000067")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA2")]
	public bool lookAtOnStart;

	[Token(Token = "0x4000068")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA3")]
	public bool leftIn;

	[Token(Token = "0x4000069")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	public bool rightIn;

	[Token(Token = "0x400006A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public List<ControllerScrollArea> exclusiveScrollAreas;

	[Token(Token = "0x400006B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public bool countInScrollAreas;

	[Token(Token = "0x600001F")]
	[Address(RVA = "0xCBFD80", Offset = "0xCBFD80", VA = "0xCBFD80")]
	private void Start()
	{
	}

	[Token(Token = "0x6000020")]
	[Address(RVA = "0xCBFF24", Offset = "0xCBFF24", VA = "0xCBFF24")]
	public void SetOrigin()
	{
	}

	[Token(Token = "0x6000021")]
	[Address(RVA = "0xCBFFF0", Offset = "0xCBFFF0", VA = "0xCBFFF0")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000022")]
	[Address(RVA = "0xCC00A4", Offset = "0xCC00A4", VA = "0xCC00A4")]
	private void LeftControlDown()
	{
	}

	[Token(Token = "0x6000023")]
	[Address(RVA = "0xCC03F4", Offset = "0xCC03F4", VA = "0xCC03F4")]
	private void RightControlDown()
	{
	}

	[Token(Token = "0x6000024")]
	[Address(RVA = "0xCC0748", Offset = "0xCC0748", VA = "0xCC0748")]
	private void LeftControlUp()
	{
	}

	[Token(Token = "0x6000025")]
	[Address(RVA = "0xCC074C", Offset = "0xCC074C", VA = "0xCC074C")]
	private void RightControlUp()
	{
	}

	[Token(Token = "0x6000026")]
	[Address(RVA = "0xCC0750", Offset = "0xCC0750", VA = "0xCC0750")]
	private void Update()
	{
	}

	[Token(Token = "0x6000027")]
	[Address(RVA = "0xCC09F8", Offset = "0xCC09F8", VA = "0xCC09F8")]
	public void Reset()
	{
	}

	[Token(Token = "0x6000028")]
	[Address(RVA = "0xCC0A28", Offset = "0xCC0A28", VA = "0xCC0A28")]
	public void ScrollToLocal(Vector3 local)
	{
	}

	[Token(Token = "0x6000029")]
	[Address(RVA = "0xCBFF5C", Offset = "0xCBFF5C", VA = "0xCBFF5C")]
	public void LookAt()
	{
	}

	[Token(Token = "0x600002A")]
	[Address(RVA = "0xCC0A50", Offset = "0xCC0A50", VA = "0xCC0A50")]
	public void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600002B")]
	[Address(RVA = "0xCC0C94", Offset = "0xCC0C94", VA = "0xCC0C94")]
	public void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x600002C")]
	[Address(RVA = "0xCC0FC4", Offset = "0xCC0FC4", VA = "0xCC0FC4")]
	public ControllerScrollArea()
	{
	}
}
[Token(Token = "0x200000E")]
public class CubeBetween2Points : MonoBehaviour
{
	[Token(Token = "0x400006C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform pointA;

	[Token(Token = "0x400006D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform pointB;

	[Token(Token = "0x600002D")]
	[Address(RVA = "0xCC1F5C", Offset = "0xCC1F5C", VA = "0xCC1F5C")]
	private void Start()
	{
	}

	[Token(Token = "0x600002E")]
	[Address(RVA = "0xCC1F60", Offset = "0xCC1F60", VA = "0xCC1F60")]
	private void Update()
	{
	}

	[Token(Token = "0x600002F")]
	[Address(RVA = "0xCC20C8", Offset = "0xCC20C8", VA = "0xCC20C8")]
	public CubeBetween2Points()
	{
	}
}
[Token(Token = "0x200000F")]
public class CustomSongPreview : MonoBehaviour
{
	[Token(Token = "0x400006E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Lobby_CustomSongSelect songselect;

	[Token(Token = "0x400006F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject previewGameObject;

	[Token(Token = "0x4000070")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TextMeshProUGUI songName;

	[Token(Token = "0x4000071")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int songID;

	[Token(Token = "0x6000030")]
	[Address(RVA = "0xCC26E8", Offset = "0xCC26E8", VA = "0xCC26E8")]
	public void UpdateState(string fileName)
	{
	}

	[Token(Token = "0x6000031")]
	[Address(RVA = "0xCC2770", Offset = "0xCC2770", VA = "0xCC2770")]
	public CustomSongPreview()
	{
	}
}
[Token(Token = "0x2000010")]
public class Debug_Leaderboard_TExt : MonoBehaviour
{
	[Token(Token = "0x6000032")]
	[Address(RVA = "0xCC69FC", Offset = "0xCC69FC", VA = "0xCC69FC")]
	public Debug_Leaderboard_TExt()
	{
	}
}
[Token(Token = "0x2000011")]
public class DisableDelay : MonoBehaviour
{
	[Token(Token = "0x4000072")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float delay;

	[Token(Token = "0x6000033")]
	[Address(RVA = "0xCCD250", Offset = "0xCCD250", VA = "0xCCD250")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000034")]
	[Address(RVA = "0xCCD2A4", Offset = "0xCCD2A4", VA = "0xCCD2A4")]
	private void Hide()
	{
	}

	[Token(Token = "0x6000035")]
	[Address(RVA = "0xCCD2CC", Offset = "0xCCD2CC", VA = "0xCCD2CC")]
	public DisableDelay()
	{
	}
}
[Token(Token = "0x2000012")]
public class DisableOnStart : MonoBehaviour
{
	[Token(Token = "0x6000036")]
	[Address(RVA = "0xCCD2DC", Offset = "0xCCD2DC", VA = "0xCCD2DC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000037")]
	[Address(RVA = "0xCCD304", Offset = "0xCCD304", VA = "0xCCD304")]
	public DisableOnStart()
	{
	}
}
[Token(Token = "0x2000013")]
public class DisablePerSetting : MonoBehaviour
{
	[Token(Token = "0x200034B")]
	public enum GraphicsSetting
	{
		[Token(Token = "0x40016FD")]
		enableEnvironments,
		[Token(Token = "0x40016FE")]
		enableFog
	}

	[Token(Token = "0x4000073")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GraphicsSetting setting;

	[Token(Token = "0x6000038")]
	[Address(RVA = "0xCCD30C", Offset = "0xCCD30C", VA = "0xCCD30C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000039")]
	[Address(RVA = "0xCCD3F0", Offset = "0xCCD3F0", VA = "0xCCD3F0")]
	public DisablePerSetting()
	{
	}
}
[Token(Token = "0x2000014")]
public class Editor_UI_Panel : MonoBehaviour
{
	[Token(Token = "0x4000074")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string panelName;

	[Token(Token = "0x4000075")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector3 spawnOffset;

	[Token(Token = "0x4000076")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool open;

	[Token(Token = "0x4000077")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
	public bool closeOnStart;

	[Token(Token = "0x600003A")]
	[Address(RVA = "0x9FF4AC", Offset = "0x9FF4AC", VA = "0x9FF4AC")]
	private void Start()
	{
	}

	[Token(Token = "0x600003B")]
	[Address(RVA = "0x9FF4BC", Offset = "0x9FF4BC", VA = "0x9FF4BC")]
	public void Close()
	{
	}

	[Token(Token = "0x600003C")]
	[Address(RVA = "0x9FF5D0", Offset = "0x9FF5D0", VA = "0x9FF5D0")]
	public void Open()
	{
	}

	[Token(Token = "0x600003D")]
	[Address(RVA = "0x9FF7C8", Offset = "0x9FF7C8", VA = "0x9FF7C8")]
	public void ReOpen()
	{
	}

	[Token(Token = "0x600003E")]
	[Address(RVA = "0x9FF7D0", Offset = "0x9FF7D0", VA = "0x9FF7D0")]
	public Editor_UI_Panel()
	{
	}
}
[Token(Token = "0x2000015")]
public class IntroController : MonoBehaviour
{
	[Token(Token = "0x200034C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDA6C", Offset = "0x5CDA6C")]
	private sealed class <WaitToSkip>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40016FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001700")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001701")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public IntroController <>4__this;

		[Token(Token = "0x17000273")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60018B3")]
			[Address(RVA = "0x7EC1EC", Offset = "0x7EC1EC", VA = "0x7EC1EC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000274")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60018B5")]
			[Address(RVA = "0x7EC234", Offset = "0x7EC234", VA = "0x7EC234", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60018B0")]
		[Address(RVA = "0x7EC104", Offset = "0x7EC104", VA = "0x7EC104")]
		[DebuggerHidden]
		public <WaitToSkip>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x60018B1")]
		[Address(RVA = "0x7EC130", Offset = "0x7EC130", VA = "0x7EC130", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60018B2")]
		[Address(RVA = "0x7EC134", Offset = "0x7EC134", VA = "0x7EC134", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60018B4")]
		[Address(RVA = "0x7EC1F4", Offset = "0x7EC1F4", VA = "0x7EC1F4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200034D")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDA7C", Offset = "0x5CDA7C")]
	private sealed class <LoadScene>d__12 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001702")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001703")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001704")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string scene;

		[Token(Token = "0x4001705")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private AsyncOperation <asyncLoad>5__2;

		[Token(Token = "0x17000275")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60018B9")]
			[Address(RVA = "0x7EC0B4", Offset = "0x7EC0B4", VA = "0x7EC0B4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000276")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60018BB")]
			[Address(RVA = "0x7EC0FC", Offset = "0x7EC0FC", VA = "0x7EC0FC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60018B6")]
		[Address(RVA = "0x7EBF40", Offset = "0x7EBF40", VA = "0x7EBF40")]
		[DebuggerHidden]
		public <LoadScene>d__12(int <>1__state)
		{
		}

		[Token(Token = "0x60018B7")]
		[Address(RVA = "0x7EBF6C", Offset = "0x7EBF6C", VA = "0x7EBF6C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60018B8")]
		[Address(RVA = "0x7EBF70", Offset = "0x7EBF70", VA = "0x7EBF70", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60018BA")]
		[Address(RVA = "0x7EC0BC", Offset = "0x7EC0BC", VA = "0x7EC0BC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000078")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PlayableDirector director;

	[Token(Token = "0x4000079")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool skippable;

	[Token(Token = "0x400007A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject loadingText;

	[Token(Token = "0x400007B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject skipText;

	[Token(Token = "0x400007C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public List<GameObject> introObjects;

	[Token(Token = "0x600003F")]
	[Address(RVA = "0xA52754", Offset = "0xA52754", VA = "0xA52754")]
	private void Start()
	{
	}

	[Token(Token = "0x6000040")]
	[Address(RVA = "0xA52838", Offset = "0xA52838", VA = "0xA52838")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D73D8", Offset = "0x5D73D8")]
	private IEnumerator WaitToSkip()
	{
		return null;
	}

	[Token(Token = "0x6000041")]
	[Address(RVA = "0xA528B0", Offset = "0xA528B0", VA = "0xA528B0")]
	public void Play()
	{
	}

	[Token(Token = "0x6000042")]
	[Address(RVA = "0xA528CC", Offset = "0xA528CC", VA = "0xA528CC")]
	private void Skip(InputAction.CallbackContext context)
	{
	}

	[Token(Token = "0x6000043")]
	[Address(RVA = "0xA52B60", Offset = "0xA52B60", VA = "0xA52B60")]
	private void Update()
	{
	}

	[Token(Token = "0x6000044")]
	[Address(RVA = "0xA52978", Offset = "0xA52978", VA = "0xA52978")]
	public void Finish()
	{
	}

	[Token(Token = "0x6000045")]
	[Address(RVA = "0xA52B64", Offset = "0xA52B64", VA = "0xA52B64")]
	public void LaunchLobby()
	{
	}

	[Token(Token = "0x6000046")]
	[Address(RVA = "0xA52BBC", Offset = "0xA52BBC", VA = "0xA52BBC")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D7438", Offset = "0x5D7438")]
	private IEnumerator LoadScene(string scene = "dance collider lobby")
	{
		return null;
	}

	[Token(Token = "0x6000047")]
	[Address(RVA = "0xA52C34", Offset = "0xA52C34", VA = "0xA52C34")]
	public IntroController()
	{
	}
}
[Token(Token = "0x2000016")]
public class Lobby_Title : LobbyMenu_AbstractClass
{
	[Token(Token = "0x6000048")]
	[Address(RVA = "0xA6E1C4", Offset = "0xA6E1C4", VA = "0xA6E1C4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000049")]
	[Address(RVA = "0xA6E1D0", Offset = "0xA6E1D0", VA = "0xA6E1D0", Slot = "4")]
	public override void OpenWindow()
	{
	}

	[Token(Token = "0x600004A")]
	[Address(RVA = "0xA6E314", Offset = "0xA6E314", VA = "0xA6E314", Slot = "5")]
	public override void CloseWindow()
	{
	}

	[Token(Token = "0x600004B")]
	[Address(RVA = "0xA6E40C", Offset = "0xA6E40C", VA = "0xA6E40C")]
	public void LoadMain()
	{
	}

	[Token(Token = "0x600004C")]
	[Address(RVA = "0xA6E450", Offset = "0xA6E450", VA = "0xA6E450")]
	public void LoadTutorial()
	{
	}

	[Token(Token = "0x600004D")]
	[Address(RVA = "0xA6E520", Offset = "0xA6E520", VA = "0xA6E520")]
	public Lobby_Title()
	{
	}
}
[Token(Token = "0x2000017")]
public class Lobby_UrielMenu : LobbyMenu_AbstractClass
{
	[Token(Token = "0x400007D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject staticCrowd;

	[Token(Token = "0x400007E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject animatedCrowd;

	[Token(Token = "0x400007F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AudioSource atmos;

	[Token(Token = "0x4000080")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Image LoadingBar;

	[Token(Token = "0x4000081")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float loadingvalue;

	[Token(Token = "0x4000082")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private float loadingIncrease;

	[Token(Token = "0x4000083")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float timer;

	[Token(Token = "0x600004E")]
	[Address(RVA = "0xA6EEEC", Offset = "0xA6EEEC", VA = "0xA6EEEC", Slot = "5")]
	public override void CloseWindow()
	{
	}

	[Token(Token = "0x600004F")]
	[Address(RVA = "0xA6EEF4", Offset = "0xA6EEF4", VA = "0xA6EEF4", Slot = "4")]
	public override void OpenWindow()
	{
	}

	[Token(Token = "0x6000050")]
	[Address(RVA = "0xA6F06C", Offset = "0xA6F06C", VA = "0xA6F06C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000051")]
	[Address(RVA = "0xA6F15C", Offset = "0xA6F15C", VA = "0xA6F15C")]
	private void Uriel_Events()
	{
	}

	[Token(Token = "0x6000052")]
	[Address(RVA = "0xA6F284", Offset = "0xA6F284", VA = "0xA6F284")]
	public Lobby_UrielMenu()
	{
	}
}
[Token(Token = "0x2000018")]
[ExecuteInEditMode]
public class MobileBloom : MonoBehaviour
{
	[Token(Token = "0x4000084")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5CE5BC", Offset = "0x5CE5BC")]
	public int NumberOfPasses;

	[Token(Token = "0x4000085")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5CE5D4", Offset = "0x5CE5D4")]
	public float BlurAmount;

	[Token(Token = "0x4000086")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Color BloomColor;

	[Token(Token = "0x4000087")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5CE5EC", Offset = "0x5CE5EC")]
	public float BloomAmount;

	[Token(Token = "0x4000088")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5CE604", Offset = "0x5CE604")]
	public float BloomThreshold;

	[Token(Token = "0x4000089")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly int blurAmountString;

	[Token(Token = "0x400008A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static readonly int bloomColorString;

	[Token(Token = "0x400008B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static readonly int blAmountString;

	[Token(Token = "0x400008C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static readonly int thresholdString;

	[Token(Token = "0x400008D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static readonly int bloomTexString;

	[Token(Token = "0x400008E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Material material;

	[Token(Token = "0x6000053")]
	[Address(RVA = "0xDF4124", Offset = "0xDF4124", VA = "0xDF4124")]
	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
	}

	[Token(Token = "0x6000054")]
	[Address(RVA = "0xDF48DC", Offset = "0xDF48DC", VA = "0xDF48DC")]
	public MobileBloom()
	{
	}
}
[Token(Token = "0x2000019")]
public class OculusManager : MonoBehaviour
{
	[Token(Token = "0x6000056")]
	[Address(RVA = "0x1313B60", Offset = "0x1313B60", VA = "0x1313B60")]
	public OculusManager()
	{
	}
}
[Token(Token = "0x200001A")]
public class ParticleColourInit : MonoBehaviour
{
	[Token(Token = "0x200034E")]
	public enum Hand
	{
		[Token(Token = "0x4001707")]
		Left,
		[Token(Token = "0x4001708")]
		Right,
		[Token(Token = "0x4001709")]
		Double
	}

	[Token(Token = "0x400008F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Hand hand;

	[Token(Token = "0x4000090")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<ParticleSystem> colouredParticles;

	[Token(Token = "0x4000091")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float alpha;

	[Token(Token = "0x6000057")]
	[Address(RVA = "0x131BCF8", Offset = "0x131BCF8", VA = "0x131BCF8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000058")]
	[Address(RVA = "0x131BFEC", Offset = "0x131BFEC", VA = "0x131BFEC")]
	public ParticleColourInit()
	{
	}
}
[Token(Token = "0x200001B")]
[DisallowMultipleComponent]
public class Outline : MonoBehaviour
{
	[Token(Token = "0x200034F")]
	public enum Mode
	{
		[Token(Token = "0x400170B")]
		OutlineAll,
		[Token(Token = "0x400170C")]
		OutlineVisible,
		[Token(Token = "0x400170D")]
		OutlineHidden,
		[Token(Token = "0x400170E")]
		OutlineAndSilhouette,
		[Token(Token = "0x400170F")]
		SilhouetteOnly
	}

	[Serializable]
	[Token(Token = "0x2000350")]
	private class ListVector3
	{
		[Token(Token = "0x4001710")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<Vector3> data;

		[Token(Token = "0x60018BC")]
		[Address(RVA = "0xFEF6A4", Offset = "0xFEF6A4", VA = "0xFEF6A4")]
		public ListVector3()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x2000351")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDA8C", Offset = "0x5CDA8C")]
	private sealed class <>c
	{
		[Token(Token = "0x4001711")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly <>c <>9;

		[Token(Token = "0x4001712")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Func<Vector3, int, KeyValuePair<Vector3, int>> <>9__30_0;

		[Token(Token = "0x4001713")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static Func<KeyValuePair<Vector3, int>, Vector3> <>9__30_1;

		[Token(Token = "0x60018BE")]
		[Address(RVA = "0xFEF5AC", Offset = "0xFEF5AC", VA = "0xFEF5AC")]
		public <>c()
		{
		}

		[Token(Token = "0x60018BF")]
		[Address(RVA = "0xFEF5B4", Offset = "0xFEF5B4", VA = "0xFEF5B4")]
		internal KeyValuePair<Vector3, int> <SmoothNormals>b__30_0(Vector3 vertex, int index)
		{
			return default(KeyValuePair<Vector3, int>);
		}

		[Token(Token = "0x60018C0")]
		[Address(RVA = "0xFEF640", Offset = "0xFEF640", VA = "0xFEF640")]
		internal Vector3 <SmoothNormals>b__30_1(KeyValuePair<Vector3, int> pair)
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x4000092")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static HashSet<Mesh> registeredMeshes;

	[Token(Token = "0x4000093")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Mode outlineMode;

	[Token(Token = "0x4000094")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private Color outlineColor;

	[Token(Token = "0x4000095")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5CE63C", Offset = "0x5CE63C")]
	private float outlineWidth;

	[Token(Token = "0x4000096")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x5CE67C", Offset = "0x5CE67C")]
	[SerializeField]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5CE67C", Offset = "0x5CE67C")]
	private bool precomputeOutline;

	[Token(Token = "0x4000097")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	[HideInInspector]
	private List<Mesh> bakeKeys;

	[Token(Token = "0x4000098")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	[HideInInspector]
	private List<ListVector3> bakeValues;

	[Token(Token = "0x4000099")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Renderer[] renderers;

	[Token(Token = "0x400009A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Material outlineMaskMaterial;

	[Token(Token = "0x400009B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Material outlineFillMaterial;

	[Token(Token = "0x400009C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool needsUpdate;

	[Token(Token = "0x17000001")]
	public Mode OutlineMode
	{
		[Token(Token = "0x6000059")]
		[Address(RVA = "0x131521C", Offset = "0x131521C", VA = "0x131521C")]
		get
		{
			return default(Mode);
		}
		[Token(Token = "0x600005A")]
		[Address(RVA = "0x1315224", Offset = "0x1315224", VA = "0x1315224")]
		set
		{
		}
	}

	[Token(Token = "0x17000002")]
	public Color OutlineColor
	{
		[Token(Token = "0x600005B")]
		[Address(RVA = "0x1315234", Offset = "0x1315234", VA = "0x1315234")]
		get
		{
			return default(Color);
		}
		[Token(Token = "0x600005C")]
		[Address(RVA = "0x1315240", Offset = "0x1315240", VA = "0x1315240")]
		set
		{
		}
	}

	[Token(Token = "0x17000003")]
	public float OutlineWidth
	{
		[Token(Token = "0x600005D")]
		[Address(RVA = "0x1315254", Offset = "0x1315254", VA = "0x1315254")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600005E")]
		[Address(RVA = "0x131525C", Offset = "0x131525C", VA = "0x131525C")]
		set
		{
		}
	}

	[Token(Token = "0x600005F")]
	[Address(RVA = "0x131526C", Offset = "0x131526C", VA = "0x131526C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000060")]
	[Address(RVA = "0x1315710", Offset = "0x1315710", VA = "0x1315710")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000061")]
	[Address(RVA = "0x1315834", Offset = "0x1315834", VA = "0x1315834")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x6000062")]
	[Address(RVA = "0x1315B14", Offset = "0x1315B14", VA = "0x1315B14")]
	private void Update()
	{
	}

	[Token(Token = "0x6000063")]
	[Address(RVA = "0x1315CF4", Offset = "0x1315CF4", VA = "0x1315CF4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000064")]
	[Address(RVA = "0x1315E18", Offset = "0x1315E18", VA = "0x1315E18")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000065")]
	[Address(RVA = "0x131592C", Offset = "0x131592C", VA = "0x131592C")]
	private void Bake()
	{
	}

	[Token(Token = "0x6000066")]
	[Address(RVA = "0x1315418", Offset = "0x1315418", VA = "0x1315418")]
	private void LoadSmoothNormals()
	{
	}

	[Token(Token = "0x6000067")]
	[Address(RVA = "0x1315E8C", Offset = "0x1315E8C", VA = "0x1315E8C")]
	private List<Vector3> SmoothNormals(Mesh mesh)
	{
		return null;
	}

	[Token(Token = "0x6000068")]
	[Address(RVA = "0x1315B28", Offset = "0x1315B28", VA = "0x1315B28")]
	private void UpdateMaterialProperties()
	{
	}

	[Token(Token = "0x6000069")]
	[Address(RVA = "0x1316960", Offset = "0x1316960", VA = "0x1316960")]
	public Outline()
	{
	}
}
[Token(Token = "0x200001C")]
public class RankingManager : MonoBehaviour
{
	[Token(Token = "0x600006B")]
	[Address(RVA = "0x11F4C4C", Offset = "0x11F4C4C", VA = "0x11F4C4C")]
	private void Start()
	{
	}

	[Token(Token = "0x600006C")]
	[Address(RVA = "0x11F4C50", Offset = "0x11F4C50", VA = "0x11F4C50")]
	private void Update()
	{
	}

	[Token(Token = "0x600006D")]
	[Address(RVA = "0x11F4C54", Offset = "0x11F4C54", VA = "0x11F4C54")]
	public void SubmitDummyScore()
	{
	}

	[Token(Token = "0x600006E")]
	[Address(RVA = "0x11F4C58", Offset = "0x11F4C58", VA = "0x11F4C58")]
	public RankingManager()
	{
	}
}
[Token(Token = "0x200001D")]
[ExecuteInEditMode]
public class ColliderJsonConverter : MonoBehaviour
{
	[Token(Token = "0x400009D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string input;

	[Token(Token = "0x400009E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<string> colliderList;

	[Token(Token = "0x600006F")]
	[Address(RVA = "0x10AA4F8", Offset = "0x10AA4F8", VA = "0x10AA4F8")]
	public void GetCollidersInInput()
	{
	}

	[Token(Token = "0x6000070")]
	[Address(RVA = "0x10AA784", Offset = "0x10AA784", VA = "0x10AA784")]
	public void ConvertToJson()
	{
	}

	[Token(Token = "0x6000071")]
	[Address(RVA = "0x10AADB4", Offset = "0x10AADB4", VA = "0x10AADB4")]
	public ColliderJsonConverter()
	{
	}
}
[Token(Token = "0x200001E")]
public class BonesOnlyBlendSystem : BlendSystem
{
	[Token(Token = "0x6000072")]
	[Address(RVA = "0x10A0F24", Offset = "0x10A0F24", VA = "0x10A0F24", Slot = "6")]
	public override void OnVariableChanged()
	{
	}

	[Token(Token = "0x6000073")]
	[Address(RVA = "0x10A0F30", Offset = "0x10A0F30", VA = "0x10A0F30")]
	public BonesOnlyBlendSystem()
	{
	}
}
[Serializable]
[Token(Token = "0x200001F")]
public class GestureInstance
{
	[Token(Token = "0x400009F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[SerializeField]
	public string gesture;

	[Token(Token = "0x40000A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	public AnimationClip clip;

	[Token(Token = "0x40000A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	public string triggerName;

	[Token(Token = "0x6000074")]
	[Address(RVA = "0x13EC398", Offset = "0x13EC398", VA = "0x13EC398")]
	public GestureInstance(string gesture, AnimationClip clip, string triggerName)
	{
	}

	[Token(Token = "0x6000075")]
	[Address(RVA = "0x13EC3FC", Offset = "0x13EC3FC", VA = "0x13EC3FC")]
	public bool IsValid(Animator animator)
	{
		return default(bool);
	}
}
[Token(Token = "0x2000020")]
public class RoomOffset : MonoBehaviour
{
	[Token(Token = "0x6000076")]
	[Address(RVA = "0xCD08FC", Offset = "0xCD08FC", VA = "0xCD08FC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000077")]
	[Address(RVA = "0xCD0900", Offset = "0xCD0900", VA = "0xCD0900")]
	public void ApplyOffset()
	{
	}

	[Token(Token = "0x6000078")]
	[Address(RVA = "0xCD0AD4", Offset = "0xCD0AD4", VA = "0xCD0AD4")]
	public RoomOffset()
	{
	}
}
[Token(Token = "0x2000021")]
public class RotateAroundAxis : MonoBehaviour
{
	[Token(Token = "0x40000A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 axis;

	[Token(Token = "0x40000A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Vector2 speed;

	[Token(Token = "0x40000A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool worldSpace;

	[Token(Token = "0x40000A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float _speed;

	[Token(Token = "0x6000079")]
	[Address(RVA = "0xCD0ADC", Offset = "0xCD0ADC", VA = "0xCD0ADC")]
	private void Start()
	{
	}

	[Token(Token = "0x600007A")]
	[Address(RVA = "0xCD0B08", Offset = "0xCD0B08", VA = "0xCD0B08")]
	private void Update()
	{
	}

	[Token(Token = "0x600007B")]
	[Address(RVA = "0xCD0B7C", Offset = "0xCD0B7C", VA = "0xCD0B7C")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x600007C")]
	[Address(RVA = "0xCD0B80", Offset = "0xCD0B80", VA = "0xCD0B80")]
	public RotateAroundAxis()
	{
	}
}
[Token(Token = "0x2000022")]
public class Scaler : MonoBehaviour
{
	[Token(Token = "0x40000A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float currentScale;

	[Token(Token = "0x40000A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float scaleInterval;

	[Token(Token = "0x40000A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float maxScale;

	[Token(Token = "0x40000A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float minScale;

	[Token(Token = "0x600007D")]
	[Address(RVA = "0xCDFFC0", Offset = "0xCDFFC0", VA = "0xCDFFC0")]
	private void Start()
	{
	}

	[Token(Token = "0x600007E")]
	[Address(RVA = "0xCDFFFC", Offset = "0xCDFFFC", VA = "0xCDFFFC")]
	private void ScaleToCurrentScale()
	{
	}

	[Token(Token = "0x600007F")]
	[Address(RVA = "0xCE004C", Offset = "0xCE004C", VA = "0xCE004C")]
	public void ScaleUp()
	{
	}

	[Token(Token = "0x6000080")]
	[Address(RVA = "0xCE0084", Offset = "0xCE0084", VA = "0xCE0084")]
	public void ScaleDown()
	{
	}

	[Token(Token = "0x6000081")]
	[Address(RVA = "0xCE00BC", Offset = "0xCE00BC", VA = "0xCE00BC")]
	public void ResetScale()
	{
	}

	[Token(Token = "0x6000082")]
	[Address(RVA = "0xCE00C8", Offset = "0xCE00C8", VA = "0xCE00C8")]
	public Scaler()
	{
	}
}
[Token(Token = "0x2000023")]
public class SceneEditorNodeInteract : MonoBehaviour
{
	[Token(Token = "0x6000083")]
	[Address(RVA = "0xCE1904", Offset = "0xCE1904", VA = "0xCE1904")]
	public SceneEditorNodeInteract()
	{
	}
}
[Token(Token = "0x2000024")]
public class DirectorTrigger : MonoBehaviour
{
	[Token(Token = "0x40000AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private PlayableDirector director;

	[Token(Token = "0x6000084")]
	[Address(RVA = "0xCCD174", Offset = "0xCCD174", VA = "0xCCD174")]
	private void Start()
	{
	}

	[Token(Token = "0x6000085")]
	[Address(RVA = "0xCCD1D0", Offset = "0xCCD1D0", VA = "0xCCD1D0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000086")]
	[Address(RVA = "0xCCD248", Offset = "0xCCD248", VA = "0xCCD248")]
	public DirectorTrigger()
	{
	}
}
[Token(Token = "0x2000025")]
public class DisplayScoreText : MonoBehaviour
{
	[Token(Token = "0x6000087")]
	[Address(RVA = "0xCCD4F4", Offset = "0xCCD4F4", VA = "0xCCD4F4")]
	public void Display()
	{
	}

	[Token(Token = "0x6000088")]
	[Address(RVA = "0xCCD5D0", Offset = "0xCCD5D0", VA = "0xCCD5D0")]
	public DisplayScoreText()
	{
	}
}
[Token(Token = "0x2000026")]
public class ESCAPE : MonoBehaviour
{
	[Token(Token = "0x6000089")]
	[Address(RVA = "0x9F7F20", Offset = "0x9F7F20", VA = "0x9F7F20")]
	private void Update()
	{
	}

	[Token(Token = "0x600008A")]
	[Address(RVA = "0x9F7F4C", Offset = "0x9F7F4C", VA = "0x9F7F4C")]
	public ESCAPE()
	{
	}
}
[Token(Token = "0x2000027")]
public class EnableComponentsPerPlatform : MonoBehaviour
{
	[Token(Token = "0x40000AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<MonoBehaviour> components;

	[Token(Token = "0x40000AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x5CE78C", Offset = "0x5CE78C")]
	public bool steamVR;

	[Token(Token = "0x40000AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool oculus;

	[Token(Token = "0x40000AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
	public bool stove;

	[Token(Token = "0x40000AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x23")]
	public bool monster;

	[Token(Token = "0x40000B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool springboard;

	[Token(Token = "0x40000B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
	public bool viveport;

	[Token(Token = "0x600008B")]
	[Address(RVA = "0xA03874", Offset = "0xA03874", VA = "0xA03874")]
	private void Awake()
	{
	}

	[Token(Token = "0x600008C")]
	[Address(RVA = "0xA03A1C", Offset = "0xA03A1C", VA = "0xA03A1C")]
	public EnableComponentsPerPlatform()
	{
	}
}
[Token(Token = "0x2000028")]
public class EnablePerPlatform : MonoBehaviour
{
	[Token(Token = "0x40000B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x5CE7C4", Offset = "0x5CE7C4")]
	public bool steamVR;

	[Token(Token = "0x40000B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool oculus;

	[Token(Token = "0x40000B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	public bool stove;

	[Token(Token = "0x40000B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
	public bool monster;

	[Token(Token = "0x40000B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool springboard;

	[Token(Token = "0x40000B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	public bool viveport;

	[Token(Token = "0x40000B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x5CE7FC", Offset = "0x5CE7FC")]
	public bool destroy;

	[Token(Token = "0x600008D")]
	[Address(RVA = "0xA03A34", Offset = "0xA03A34", VA = "0xA03A34")]
	private void Awake()
	{
	}

	[Token(Token = "0x600008E")]
	[Address(RVA = "0xA03B54", Offset = "0xA03B54", VA = "0xA03B54")]
	public EnablePerPlatform()
	{
	}
}
[Token(Token = "0x2000029")]
public class CascadeVisuals : MonoBehaviour
{
	[Token(Token = "0x40000B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<Node> nodes;

	[Token(Token = "0x40000BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private MeshRenderer mesh;

	[Token(Token = "0x600008F")]
	[Address(RVA = "0x10A90B0", Offset = "0x10A90B0", VA = "0x10A90B0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000090")]
	[Address(RVA = "0x10A9124", Offset = "0x10A9124", VA = "0x10A9124")]
	public void Init()
	{
	}

	[Token(Token = "0x6000091")]
	[Address(RVA = "0x10A933C", Offset = "0x10A933C", VA = "0x10A933C")]
	public void TurnOnMesh()
	{
	}

	[Token(Token = "0x6000092")]
	[Address(RVA = "0x10A935C", Offset = "0x10A935C", VA = "0x10A935C")]
	public CascadeVisuals()
	{
	}
}
[Token(Token = "0x200002A")]
public class GameManager : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000352")]
	public class ObjectRefrences
	{
		[Token(Token = "0x4001714")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public LightShowManager lightManager;

		[Token(Token = "0x4001715")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PoolManager poolMananager;

		[Token(Token = "0x4001716")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject pinkNodePrefab;

		[Token(Token = "0x4001717")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject greenNodePrefab;

		[Token(Token = "0x4001718")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject yellowNodePrefab;

		[Token(Token = "0x4001719")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject pinkMiragePrefab;

		[Token(Token = "0x400171A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject greenMiragePrefab;

		[Token(Token = "0x400171B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject curveLeft;

		[Token(Token = "0x400171C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public GameObject curveRight;

		[Token(Token = "0x400171D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public GameObject straightLine;

		[Token(Token = "0x400171E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public GameObject leftController;

		[Token(Token = "0x400171F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public GameObject rightController;

		[Token(Token = "0x4001720")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public GameObject leftContChild;

		[Token(Token = "0x4001721")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public GameObject rightContChild;

		[Token(Token = "0x4001722")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Transform PlayerHeadMarker;

		[Token(Token = "0x4001723")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public GameObject cascadeVisualsGreenPrefab;

		[Token(Token = "0x4001724")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public GameObject cascadeVisualsPinkPrefab;

		[Token(Token = "0x4001725")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public GameObject cascadeShellPrefab;

		[Token(Token = "0x4001726")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public GameObject scoreEventSetPrefab;

		[Token(Token = "0x4001727")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public GameObject scoreEventCascadePrefab;

		[Token(Token = "0x4001728")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public GameObject scoreEventMultiPrefab;

		[Token(Token = "0x4001729")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public GameObject scoreEventStreakPrefab;

		[Token(Token = "0x400172A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public GameObject scoreEventGeneric;

		[Token(Token = "0x400172B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public GameObject setEndEffect;

		[Token(Token = "0x400172C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public GameObject cascadeEndEffectPink;

		[Token(Token = "0x400172D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public GameObject cascadeEndEffectGreen;

		[Token(Token = "0x400172E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public GameObject setIdentifierPrefab;

		[Token(Token = "0x400172F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public GameObject shockwavePrefab;

		[Token(Token = "0x4001730")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public GameObject starShatterPrefab;

		[Token(Token = "0x4001731")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public Transform beatPoint;

		[Token(Token = "0x4001732")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public GameObject godModeText;

		[Token(Token = "0x4001733")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public XRInteractorLineVisual leftPointer;

		[Token(Token = "0x4001734")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public XRInteractorLineVisual rightPointer;

		[Token(Token = "0x4001735")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public TextMeshProUGUI scoreText;

		[Token(Token = "0x4001736")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public TextMeshProUGUI streakText;

		[Token(Token = "0x4001737")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public TextMeshProUGUI multiText;

		[Token(Token = "0x4001738")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public Slider progressbar;

		[Token(Token = "0x4001739")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		public Image progressHandle;

		[Token(Token = "0x400173A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		public Image progressfill;

		[Token(Token = "0x400173B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		public Image multiImage;

		[Token(Token = "0x400173C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		public Image streakImage;

		[Token(Token = "0x400173D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		public Image majorImage;

		[Token(Token = "0x400173E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		public Image_Blinker handleBlinker;

		[Token(Token = "0x400173F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		public Image_Blinker fillBlinker;

		[Token(Token = "0x4001740")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		public Image_Blinker majorBlinker;

		[Token(Token = "0x4001741")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		public Sprite perfectHandle;

		[Token(Token = "0x4001742")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		public Sprite normalHandle;

		[Token(Token = "0x4001743")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		public Sprite warningHandle;

		[Token(Token = "0x4001744")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		public Sprite deathHandle;

		[Token(Token = "0x4001745")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		public TextMeshProUGUI resultsAcc;

		[Token(Token = "0x4001746")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		public TextMeshProUGUI resultsEnergy;

		[Token(Token = "0x4001747")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		public TextMeshProUGUI resultsStreak;

		[Token(Token = "0x4001748")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		public TextMeshProUGUI resultsMulti;

		[Token(Token = "0x4001749")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		public TextMeshProUGUI resultsSets;

		[Token(Token = "0x400174A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		public TextMeshProUGUI resultsCascade;

		[Token(Token = "0x400174B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		public TextMeshProUGUI resultsScore;

		[Token(Token = "0x400174C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		public TextMeshProUGUI resultsRank;

		[Token(Token = "0x400174D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		public GameObject failureCanvas;

		[Token(Token = "0x400174E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		public UI_Results resultsCanvas;

		[Token(Token = "0x400174F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		public GameObject intro_UI;

		[Token(Token = "0x4001750")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		public TextMeshPro intro_title1;

		[Token(Token = "0x4001751")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		public TextMeshPro intro_title2;

		[Token(Token = "0x4001752")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		public TextMeshPro intro_title3;

		[Token(Token = "0x4001753")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		public TextMeshProUGUI dancebuttonStageName;

		[Token(Token = "0x4001754")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		public UI_Pause pause_ui;

		[Token(Token = "0x4001755")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		public UI_Settings settings_ui;

		[Token(Token = "0x4001756")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		public GameObject editorButton;

		[Token(Token = "0x4001757")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		public Button startButton;

		[Token(Token = "0x4001758")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		public Image startButtonFillBar;

		[Token(Token = "0x4001759")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
		public GameObject uriel_button;

		[Token(Token = "0x400175A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		public GameObject results_lobby_button;

		[Token(Token = "0x400175B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
		public GameObject results_restart_button;

		[Token(Token = "0x400175C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
		public GameObject results_nextstage_button;

		[Token(Token = "0x400175D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
		public UI_Uriel_Progress uriel_progress;

		[Token(Token = "0x400175E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D5C44", Offset = "0x5D5C44")]
		public float dimChevAlpha;

		[Token(Token = "0x400175F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x264")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D5C5C", Offset = "0x5D5C5C")]
		public float onChevAlpha;

		[Token(Token = "0x4001760")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
		public float beatsPerChevron;

		[Token(Token = "0x4001761")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
		public List<RawImage> rightSideChevs;

		[Token(Token = "0x4001762")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
		public List<RawImage> rightSideChevs1;

		[Token(Token = "0x4001763")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
		public List<RawImage> middleChevs;

		[Token(Token = "0x4001764")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
		public List<RawImage> middleChevs1;

		[Token(Token = "0x4001765")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
		public List<RawImage> leftSideChevs;

		[Token(Token = "0x4001766")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
		public List<RawImage> leftSideChevs1;

		[Token(Token = "0x4001767")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
		public Transform viveCenter;

		[Token(Token = "0x4001768")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
		public Transform oculusCenter;

		[Token(Token = "0x4001769")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
		public Transform oculusLeftEye;

		[Token(Token = "0x400176A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B8")]
		public Transform oculusRightEye;

		[Token(Token = "0x400176B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C0")]
		public Transform leftPrecisionPoint;

		[Token(Token = "0x400176C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C8")]
		public Transform rightPrecisionPoint;

		[Token(Token = "0x60018C1")]
		[Address(RVA = "0x7EAC10", Offset = "0x7EAC10", VA = "0x7EAC10")]
		public void Example()
		{
		}

		[Token(Token = "0x60018C2")]
		[Address(RVA = "0x7EAC14", Offset = "0x7EAC14", VA = "0x7EAC14")]
		public ObjectRefrences()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x2000353")]
	public class NodePath
	{
		[Token(Token = "0x400176D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x400176E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SplineComputer spline;

		[Token(Token = "0x60018C3")]
		[Address(RVA = "0x7EAC08", Offset = "0x7EAC08", VA = "0x7EAC08")]
		public NodePath()
		{
		}
	}

	[Token(Token = "0x2000354")]
	public delegate void LightsPulse();

	[Token(Token = "0x2000355")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDA9C", Offset = "0x5CDA9C")]
	private sealed class <LateStart>d__76 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400176F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001770")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001771")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameManager <>4__this;

		[Token(Token = "0x17000277")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60018CB")]
			[Address(RVA = "0x7E9854", Offset = "0x7E9854", VA = "0x7E9854", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000278")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60018CD")]
			[Address(RVA = "0x7E989C", Offset = "0x7E989C", VA = "0x7E989C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60018C8")]
		[Address(RVA = "0x7E971C", Offset = "0x7E971C", VA = "0x7E971C")]
		[DebuggerHidden]
		public <LateStart>d__76(int <>1__state)
		{
		}

		[Token(Token = "0x60018C9")]
		[Address(RVA = "0x7E9748", Offset = "0x7E9748", VA = "0x7E9748", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60018CA")]
		[Address(RVA = "0x7E974C", Offset = "0x7E974C", VA = "0x7E974C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60018CC")]
		[Address(RVA = "0x7E985C", Offset = "0x7E985C", VA = "0x7E985C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000356")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDAAC", Offset = "0x5CDAAC")]
	private sealed class <StartupDelay>d__77 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001772")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001773")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001774")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float seconds;

		[Token(Token = "0x4001775")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameManager <>4__this;

		[Token(Token = "0x17000279")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60018D1")]
			[Address(RVA = "0x7EA960", Offset = "0x7EA960", VA = "0x7EA960", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700027A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60018D3")]
			[Address(RVA = "0x7EA9A8", Offset = "0x7EA9A8", VA = "0x7EA9A8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60018CE")]
		[Address(RVA = "0x7EA7C0", Offset = "0x7EA7C0", VA = "0x7EA7C0")]
		[DebuggerHidden]
		public <StartupDelay>d__77(int <>1__state)
		{
		}

		[Token(Token = "0x60018CF")]
		[Address(RVA = "0x7EA7EC", Offset = "0x7EA7EC", VA = "0x7EA7EC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60018D0")]
		[Address(RVA = "0x7EA7F0", Offset = "0x7EA7F0", VA = "0x7EA7F0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60018D2")]
		[Address(RVA = "0x7EA968", Offset = "0x7EA968", VA = "0x7EA968", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000357")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDABC", Offset = "0x5CDABC")]
	private sealed class <CalibrateRoutine>d__96 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001776")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001777")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001778")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Node[] <>7__wrap1;

		[Token(Token = "0x4001779")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <>7__wrap2;

		[Token(Token = "0x1700027B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60018D7")]
			[Address(RVA = "0x7E9290", Offset = "0x7E9290", VA = "0x7E9290", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700027C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60018D9")]
			[Address(RVA = "0x7E92D8", Offset = "0x7E92D8", VA = "0x7E92D8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60018D4")]
		[Address(RVA = "0x7E90FC", Offset = "0x7E90FC", VA = "0x7E90FC")]
		[DebuggerHidden]
		public <CalibrateRoutine>d__96(int <>1__state)
		{
		}

		[Token(Token = "0x60018D5")]
		[Address(RVA = "0x7E9128", Offset = "0x7E9128", VA = "0x7E9128", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60018D6")]
		[Address(RVA = "0x7E912C", Offset = "0x7E912C", VA = "0x7E912C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60018D8")]
		[Address(RVA = "0x7E9298", Offset = "0x7E9298", VA = "0x7E9298", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000358")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDACC", Offset = "0x5CDACC")]
	private sealed class <Countdowntimer>d__112 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400177A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400177B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400177C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float oneTime;

		[Token(Token = "0x400177D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameManager <>4__this;

		[Token(Token = "0x400177E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float twoTime;

		[Token(Token = "0x400177F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float threeTime;

		[Token(Token = "0x1700027D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60018DD")]
			[Address(RVA = "0x7E96CC", Offset = "0x7E96CC", VA = "0x7E96CC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700027E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60018DF")]
			[Address(RVA = "0x7E9714", Offset = "0x7E9714", VA = "0x7E9714", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60018DA")]
		[Address(RVA = "0x7E92E0", Offset = "0x7E92E0", VA = "0x7E92E0")]
		[DebuggerHidden]
		public <Countdowntimer>d__112(int <>1__state)
		{
		}

		[Token(Token = "0x60018DB")]
		[Address(RVA = "0x7E930C", Offset = "0x7E930C", VA = "0x7E930C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60018DC")]
		[Address(RVA = "0x7E9310", Offset = "0x7E9310", VA = "0x7E9310", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60018DE")]
		[Address(RVA = "0x7E96D4", Offset = "0x7E96D4", VA = "0x7E96D4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000359")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDADC", Offset = "0x5CDADC")]
	private sealed class <>c__DisplayClass122_0
	{
		[Token(Token = "0x4001780")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public MpegFile mpegFile;

		[Token(Token = "0x60018E0")]
		[Address(RVA = "0x7E9068", Offset = "0x7E9068", VA = "0x7E9068")]
		public <>c__DisplayClass122_0()
		{
		}

		[Token(Token = "0x60018E1")]
		[Address(RVA = "0x7E9070", Offset = "0x7E9070", VA = "0x7E9070")]
		internal void <GetAudioClipFromMusicString>b__0(float[] data)
		{
		}
	}

	[Token(Token = "0x200035A")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDAEC", Offset = "0x5CDAEC")]
	private sealed class <>c__DisplayClass129_0
	{
		[Token(Token = "0x4001781")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string splineName;

		[Token(Token = "0x60018E2")]
		[Address(RVA = "0x7E909C", Offset = "0x7E909C", VA = "0x7E909C")]
		public <>c__DisplayClass129_0()
		{
		}

		[Token(Token = "0x60018E3")]
		[Address(RVA = "0x7E90A4", Offset = "0x7E90A4", VA = "0x7E90A4")]
		internal bool <GetSpline>b__0(NodePath n)
		{
			return default(bool);
		}
	}

	[Token(Token = "0x200035B")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDAFC", Offset = "0x5CDAFC")]
	private sealed class <LoadArena>d__142 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001782")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001783")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001784")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameManager <>4__this;

		[Token(Token = "0x4001785")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private AsyncOperation <asyncLoad>5__2;

		[Token(Token = "0x1700027F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60018E7")]
			[Address(RVA = "0x7E9ACC", Offset = "0x7E9ACC", VA = "0x7E9ACC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000280")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60018E9")]
			[Address(RVA = "0x7E9B14", Offset = "0x7E9B14", VA = "0x7E9B14", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60018E4")]
		[Address(RVA = "0x7E98A4", Offset = "0x7E98A4", VA = "0x7E98A4")]
		[DebuggerHidden]
		public <LoadArena>d__142(int <>1__state)
		{
		}

		[Token(Token = "0x60018E5")]
		[Address(RVA = "0x7E98D0", Offset = "0x7E98D0", VA = "0x7E98D0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60018E6")]
		[Address(RVA = "0x7E98D4", Offset = "0x7E98D4", VA = "0x7E98D4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60018E8")]
		[Address(RVA = "0x7E9AD4", Offset = "0x7E9AD4", VA = "0x7E9AD4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200035C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDB0C", Offset = "0x5CDB0C")]
	private sealed class <LoadSceneDelayed>d__147 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001786")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001787")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001788")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float delay;

		[Token(Token = "0x4001789")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string scene;

		[Token(Token = "0x17000281")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60018ED")]
			[Address(RVA = "0x7E9CE8", Offset = "0x7E9CE8", VA = "0x7E9CE8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000282")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60018EF")]
			[Address(RVA = "0x7E9D30", Offset = "0x7E9D30", VA = "0x7E9D30", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60018EA")]
		[Address(RVA = "0x7E9B1C", Offset = "0x7E9B1C", VA = "0x7E9B1C")]
		[DebuggerHidden]
		public <LoadSceneDelayed>d__147(int <>1__state)
		{
		}

		[Token(Token = "0x60018EB")]
		[Address(RVA = "0x7E9B48", Offset = "0x7E9B48", VA = "0x7E9B48", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60018EC")]
		[Address(RVA = "0x7E9B4C", Offset = "0x7E9B4C", VA = "0x7E9B4C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60018EE")]
		[Address(RVA = "0x7E9CF0", Offset = "0x7E9CF0", VA = "0x7E9CF0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200035D")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDB1C", Offset = "0x5CDB1C")]
	private sealed class <RestartDelay>d__149 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400178A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400178B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400178C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameManager <>4__this;

		[Token(Token = "0x17000283")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60018F3")]
			[Address(RVA = "0x7E9E5C", Offset = "0x7E9E5C", VA = "0x7E9E5C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000284")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60018F5")]
			[Address(RVA = "0x7E9EA4", Offset = "0x7E9EA4", VA = "0x7E9EA4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60018F0")]
		[Address(RVA = "0x7E9D38", Offset = "0x7E9D38", VA = "0x7E9D38")]
		[DebuggerHidden]
		public <RestartDelay>d__149(int <>1__state)
		{
		}

		[Token(Token = "0x60018F1")]
		[Address(RVA = "0x7E9D64", Offset = "0x7E9D64", VA = "0x7E9D64", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60018F2")]
		[Address(RVA = "0x7E9D68", Offset = "0x7E9D68", VA = "0x7E9D68", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60018F4")]
		[Address(RVA = "0x7E9E64", Offset = "0x7E9E64", VA = "0x7E9E64", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200035E")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDB2C", Offset = "0x5CDB2C")]
	private sealed class <SpawnNodesIncremental>d__167 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400178D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400178E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400178F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<SongNode> nodes;

		[Token(Token = "0x4001790")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float time;

		[Token(Token = "0x4001791")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameManager <>4__this;

		[Token(Token = "0x4001792")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Node <previousNode>5__2;

		[Token(Token = "0x4001793")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Node <previousGreenCascadeNode>5__3;

		[Token(Token = "0x4001794")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Node <previousRedCascadeNode>5__4;

		[Token(Token = "0x4001795")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int <i>5__5;

		[Token(Token = "0x4001796")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private int <numFrameSpawned>5__6;

		[Token(Token = "0x4001797")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int <i1>5__7;

		[Token(Token = "0x17000285")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60018F9")]
			[Address(RVA = "0x7EA770", Offset = "0x7EA770", VA = "0x7EA770", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000286")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60018FB")]
			[Address(RVA = "0x7EA7B8", Offset = "0x7EA7B8", VA = "0x7EA7B8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60018F6")]
		[Address(RVA = "0x7E9EAC", Offset = "0x7E9EAC", VA = "0x7E9EAC")]
		[DebuggerHidden]
		public <SpawnNodesIncremental>d__167(int <>1__state)
		{
		}

		[Token(Token = "0x60018F7")]
		[Address(RVA = "0x7E9ED8", Offset = "0x7E9ED8", VA = "0x7E9ED8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60018F8")]
		[Address(RVA = "0x7E9EDC", Offset = "0x7E9EDC", VA = "0x7E9EDC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60018FA")]
		[Address(RVA = "0x7EA778", Offset = "0x7EA778", VA = "0x7EA778", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40000BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static GameManager instance;

	[Token(Token = "0x40000BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ObjectRefrences objectRefrences;

	[Token(Token = "0x40000BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<AudioClip> songList;

	[Token(Token = "0x40000BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<string> songStrings;

	[Token(Token = "0x40000BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public List<NodePath> paths;

	[Token(Token = "0x40000C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Persistence.Difficulty difficulty;

	[Token(Token = "0x40000C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float heightModifier;

	[Token(Token = "0x40000C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float spawnBuffer;

	[Token(Token = "0x40000C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Song currentSong;

	[Token(Token = "0x40000C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float songTime;

	[Token(Token = "0x40000C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float dspSongStartTime;

	[Token(Token = "0x40000C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private VideoPlayer video;

	[Token(Token = "0x40000C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public bool songPlaying;

	[Token(Token = "0x40000C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
	public bool gameIntro;

	[Token(Token = "0x40000C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
	private bool songIsBuiltIn;

	[Token(Token = "0x40000CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public int basicNodeScoreMin;

	[Token(Token = "0x40000CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public int basicNodeScoreMax;

	[Token(Token = "0x40000CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public int doubleNodeScore;

	[Token(Token = "0x40000CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public int setbonus;

	[Token(Token = "0x40000CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public int cascadeSingleHit;

	[Token(Token = "0x40000CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public int cascadeBonus;

	[Token(Token = "0x40000D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public float maxVelocity;

	[Token(Token = "0x40000D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public float minVelocity;

	[Token(Token = "0x40000D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public float minPrecision;

	[Token(Token = "0x40000D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public float maxPrecision;

	[Token(Token = "0x40000D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	public bool god;

	[Token(Token = "0x40000D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8D")]
	public bool loadArena;

	[Token(Token = "0x40000D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8E")]
	public bool doMissEffects;

	[Token(Token = "0x40000D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8F")]
	public bool inEditor;

	[Token(Token = "0x40000D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public bool isTutorial;

	[Token(Token = "0x40000D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
	public bool autoSetup;

	[Token(Token = "0x40000DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x92")]
	public bool autoNextStage;

	[Token(Token = "0x40000DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	public float channelThreshold;

	[Token(Token = "0x40000DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public float cascadeDamageMultiplier;

	[Token(Token = "0x40000DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Score score;

	[Token(Token = "0x40000DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public bool isTaunting;

	[Token(Token = "0x40000DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	public float tauntDuration;

	[Token(Token = "0x40000E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public int curTaunt;

	[Token(Token = "0x40000E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	private bool checkTauntHits;

	[Token(Token = "0x40000E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private string arenaLoaded;

	[Token(Token = "0x40000E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[HideInInspector]
	public HoloAnimationController holoCon;

	[Token(Token = "0x40000E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[HideInInspector]
	public VoiceOverManager voMan;

	[Token(Token = "0x40000E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	[HideInInspector]
	public TutorialManager tutMan;

	[Token(Token = "0x40000E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5CE864", Offset = "0x5CE864")]
	public float complimentThreshold;

	[Token(Token = "0x40000E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5CE880", Offset = "0x5CE880")]
	public float insultThreshold;

	[Token(Token = "0x40000E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public int currentChannel;

	[Token(Token = "0x40000E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	public float rightCountdown;

	[Token(Token = "0x40000EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public float middleCountdown;

	[Token(Token = "0x40000EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	public float leftCountdown;

	[Token(Token = "0x40000EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public float leftChevTime;

	[Token(Token = "0x40000ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	public float middleChevTime;

	[Token(Token = "0x40000EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public float rightChevTime;

	[Token(Token = "0x40000EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
	public int leftChevHits;

	[Token(Token = "0x40000F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public int middleChevHits;

	[Token(Token = "0x40000F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	public int rightChevHits;

	[Token(Token = "0x40000F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public bool leftChevIn;

	[Token(Token = "0x40000F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x109")]
	public bool leftChevOut;

	[Token(Token = "0x40000F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10A")]
	public bool rightChevIn;

	[Token(Token = "0x40000F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10B")]
	public bool rightChevOut;

	[Token(Token = "0x40000F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
	public bool midChevIn;

	[Token(Token = "0x40000F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10D")]
	public bool midChevOut;

	[Token(Token = "0x40000F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private UI_Settings settings;

	[Token(Token = "0x40000F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public float skipvalue;

	[Token(Token = "0x40000FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private ScoreEvent cascadeEvent;

	[Token(Token = "0x40000FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private ScoreEvent streakEvent;

	[Token(Token = "0x40000FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private ScoreEvent multiplierEvent;

	[Token(Token = "0x40000FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private float leftVibrationTime;

	[Token(Token = "0x40000FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
	private float rightVibrationTime;

	[Token(Token = "0x40000FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private bool waitingForOculus;

	[Token(Token = "0x4000100")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private GameObject avatar;

	[Token(Token = "0x4000101")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public Vector2 calibrationOffset;

	[Token(Token = "0x4000102")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	public int trailingScore;

	[Token(Token = "0x4000103")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
	private float lastNodeTime;

	[Token(Token = "0x4000104")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	private float songProgressPercent;

	[Token(Token = "0x4000105")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	public LightsPulse _pulse;

	[Token(Token = "0x4000106")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	public Vector3 countdownTimes;

	[Token(Token = "0x4000107")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
	public int musicNum;

	[Token(Token = "0x4000108")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	private bool perfect;

	[Token(Token = "0x4000109")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	public string fileName;

	[Token(Token = "0x400010A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	public SetCounter currentSetCounter;

	[Token(Token = "0x400010B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	public bool paused;

	[Token(Token = "0x6000093")]
	[Address(RVA = "0xBFDDCC", Offset = "0xBFDDCC", VA = "0xBFDDCC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000094")]
	[Address(RVA = "0xBFDEB8", Offset = "0xBFDEB8", VA = "0xBFDEB8")]
	public void Skip()
	{
	}

	[Token(Token = "0x6000095")]
	[Address(RVA = "0xBFDF8C", Offset = "0xBFDF8C", VA = "0xBFDF8C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000096")]
	[Address(RVA = "0xBFE578", Offset = "0xBFE578", VA = "0xBFE578")]
	private void UnmountPause()
	{
	}

	[Token(Token = "0x6000097")]
	[Address(RVA = "0xBFE784", Offset = "0xBFE784", VA = "0xBFE784")]
	public void ThrowCascadeEvent(Vector3 pos)
	{
	}

	[Token(Token = "0x6000098")]
	[Address(RVA = "0xBFE824", Offset = "0xBFE824", VA = "0xBFE824")]
	public void ThrowStreakEvent(Vector3 pos, string text)
	{
	}

	[Token(Token = "0x6000099")]
	[Address(RVA = "0xBFE964", Offset = "0xBFE964", VA = "0xBFE964")]
	public void ThrowMultiEvent(Vector3 pos, string text)
	{
	}

	[Token(Token = "0x600009A")]
	[Address(RVA = "0xBFE448", Offset = "0xBFE448", VA = "0xBFE448")]
	private void SetChevronsAlpha(List<RawImage> _chevs, float _alpha = 0f, bool reset = false)
	{
	}

	[Token(Token = "0x600009B")]
	[Address(RVA = "0xBFE3D0", Offset = "0xBFE3D0", VA = "0xBFE3D0")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D7498", Offset = "0x5D7498")]
	private IEnumerator LateStart()
	{
		return null;
	}

	[Token(Token = "0x600009C")]
	[Address(RVA = "0xBFEA1C", Offset = "0xBFEA1C", VA = "0xBFEA1C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D74F8", Offset = "0x5D74F8")]
	private IEnumerator StartupDelay(float seconds = 1f)
	{
		return null;
	}

	[Token(Token = "0x600009D")]
	[Address(RVA = "0xBFEAA4", Offset = "0xBFEAA4", VA = "0xBFEAA4")]
	private void Update()
	{
	}

	[Token(Token = "0x600009E")]
	[Address(RVA = "0xBFFC70", Offset = "0xBFFC70", VA = "0xBFFC70")]
	public void VibrateLeft(float time)
	{
	}

	[Token(Token = "0x600009F")]
	[Address(RVA = "0xBFFC90", Offset = "0xBFFC90", VA = "0xBFFC90")]
	public void VibrateRight(float time)
	{
	}

	[Token(Token = "0x60000A0")]
	[Address(RVA = "0xBFFC6C", Offset = "0xBFFC6C", VA = "0xBFFC6C")]
	private void CheckVibration()
	{
	}

	[Token(Token = "0x60000A1")]
	[Address(RVA = "0xBFFCB4", Offset = "0xBFFCB4", VA = "0xBFFCB4")]
	private void CheckPause()
	{
	}

	[Token(Token = "0x60000A2")]
	[Address(RVA = "0xBFFE10", Offset = "0xBFFE10", VA = "0xBFFE10")]
	private void CheckOculusInputStatus()
	{
	}

	[Token(Token = "0x60000A3")]
	[Address(RVA = "0xBFF200", Offset = "0xBFF200", VA = "0xBFF200")]
	private void DirectionalArrowCountdowns()
	{
	}

	[Token(Token = "0x60000A4")]
	[Address(RVA = "0xBFFE14", Offset = "0xBFFE14", VA = "0xBFFE14")]
	public void StartLeftChevrons(float _endTime)
	{
	}

	[Token(Token = "0x60000A5")]
	[Address(RVA = "0xBFFEB4", Offset = "0xBFFEB4", VA = "0xBFFEB4")]
	public void StartMiddleChevrons(float _endTime)
	{
	}

	[Token(Token = "0x60000A6")]
	[Address(RVA = "0xBFFF54", Offset = "0xBFFF54", VA = "0xBFFF54")]
	public void StartRightChevrons(float _endTime)
	{
	}

	[Token(Token = "0x60000A7")]
	[Address(RVA = "0xBFFFF4", Offset = "0xBFFFF4", VA = "0xBFFFF4")]
	private void ClearAllNodes()
	{
	}

	[Token(Token = "0x60000A8")]
	[Address(RVA = "0xC0013C", Offset = "0xC0013C", VA = "0xC0013C")]
	public void SetupGame()
	{
	}

	[Token(Token = "0x60000A9")]
	[Address(RVA = "0xC01184", Offset = "0xC01184", VA = "0xC01184")]
	public void Calibrate(bool setOffsets = false)
	{
	}

	[Token(Token = "0x60000AA")]
	[Address(RVA = "0xC01688", Offset = "0xC01688", VA = "0xC01688")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D7558", Offset = "0x5D7558")]
	private IEnumerator CalibrateRoutine()
	{
		return null;
	}

	[Token(Token = "0x60000AB")]
	[Address(RVA = "0xBFEB18", Offset = "0xBFEB18", VA = "0xBFEB18")]
	private float CheckSongTime()
	{
		return default(float);
	}

	[Token(Token = "0x60000AC")]
	[Address(RVA = "0xBFEBB4", Offset = "0xBFEBB4", VA = "0xBFEBB4")]
	private void UpdateUI()
	{
	}

	[Token(Token = "0x60000AD")]
	[Address(RVA = "0xC016E4", Offset = "0xC016E4", VA = "0xC016E4")]
	private void GetBlinkers()
	{
	}

	[Token(Token = "0x60000AE")]
	[Address(RVA = "0xC01884", Offset = "0xC01884", VA = "0xC01884")]
	public Score.Rank GetRank(float acc, float energy, float precision)
	{
		return default(Score.Rank);
	}

	[Token(Token = "0x60000AF")]
	[Address(RVA = "0xC01A48", Offset = "0xC01A48", VA = "0xC01A48")]
	private void PulseScore(float amount)
	{
	}

	[Token(Token = "0x60000B0")]
	[Address(RVA = "0xBFF1B4", Offset = "0xBFF1B4", VA = "0xBFF1B4")]
	private void UpdateTaunts()
	{
	}

	[Token(Token = "0x60000B1")]
	[Address(RVA = "0xC01A4C", Offset = "0xC01A4C", VA = "0xC01A4C")]
	public void StartTaunt(TauntInfo taunt)
	{
	}

	[Token(Token = "0x60000B2")]
	[Address(RVA = "0xC01A68", Offset = "0xC01A68", VA = "0xC01A68")]
	public void DanceButtonPressed()
	{
	}

	[Token(Token = "0x60000B3")]
	[Address(RVA = "0xC01FB8", Offset = "0xC01FB8", VA = "0xC01FB8")]
	public void StartCountdown()
	{
	}

	[Token(Token = "0x60000B4")]
	[Address(RVA = "0xC01FF0", Offset = "0xC01FF0", VA = "0xC01FF0")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D75B8", Offset = "0x5D75B8")]
	private IEnumerator Countdowntimer(float oneTime, float twoTime, float threeTime)
	{
		return null;
	}

	[Token(Token = "0x60000B5")]
	[Address(RVA = "0xC0208C", Offset = "0xC0208C", VA = "0xC0208C")]
	public void ThrowTutorialScoreCard(string _text)
	{
	}

	[Token(Token = "0x60000B6")]
	[Address(RVA = "0xC01D30", Offset = "0xC01D30", VA = "0xC01D30")]
	public void TogglePointers(bool toggle)
	{
	}

	[Token(Token = "0x60000B7")]
	[Address(RVA = "0xC01D88", Offset = "0xC01D88", VA = "0xC01D88")]
	public void StartSong()
	{
	}

	[Token(Token = "0x60000B8")]
	[Address(RVA = "0xC021A4", Offset = "0xC021A4", VA = "0xC021A4")]
	private void ControllerFix()
	{
	}

	[Token(Token = "0x60000B9")]
	[Address(RVA = "0xC025E0", Offset = "0xC025E0", VA = "0xC025E0")]
	private void StartYoutubeSong(string URL)
	{
	}

	[Token(Token = "0x60000BA")]
	[Address(RVA = "0xC026DC", Offset = "0xC026DC", VA = "0xC026DC")]
	public void YoutubeVideoStarted()
	{
	}

	[Token(Token = "0x60000BB")]
	[Address(RVA = "0xC02228", Offset = "0xC02228", VA = "0xC02228")]
	private void StartBuiltInSong(float startTime = 0f)
	{
	}

	[Token(Token = "0x60000BC")]
	[Address(RVA = "0xC02454", Offset = "0xC02454", VA = "0xC02454")]
	private void StartCustomSong(float startTime = 0f)
	{
	}

	[Token(Token = "0x60000BD")]
	[Address(RVA = "0xC00B04", Offset = "0xC00B04", VA = "0xC00B04")]
	public AudioClip GetAudioClipFromMusicString(string music)
	{
		return null;
	}

	[Token(Token = "0x60000BE")]
	[Address(RVA = "0xC026E0", Offset = "0xC026E0", VA = "0xC026E0")]
	private int TimeToSamples(float time)
	{
		return default(int);
	}

	[Token(Token = "0x60000BF")]
	[Address(RVA = "0xC02710", Offset = "0xC02710", VA = "0xC02710")]
	private int TimeToSamples(float time, int frequency)
	{
		return default(int);
	}

	[Token(Token = "0x60000C0")]
	[Address(RVA = "0xC02720", Offset = "0xC02720", VA = "0xC02720")]
	private float SamplesToTime(int samples)
	{
		return default(float);
	}

	[Token(Token = "0x60000C1")]
	[Address(RVA = "0xC02750", Offset = "0xC02750", VA = "0xC02750")]
	private float SamplesToTime(int samples, int frequency)
	{
		return default(float);
	}

	[Token(Token = "0x60000C2")]
	[Address(RVA = "0xC025F4", Offset = "0xC025F4", VA = "0xC025F4")]
	public void StopSong(bool mute = true)
	{
	}

	[Token(Token = "0x60000C3")]
	[Address(RVA = "0xC02760", Offset = "0xC02760", VA = "0xC02760")]
	public void NextStage()
	{
	}

	[Token(Token = "0x60000C4")]
	[Address(RVA = "0xC02E54", Offset = "0xC02E54", VA = "0xC02E54")]
	public SplineComputer GetSpline(string splineName)
	{
		return null;
	}

	[Token(Token = "0x60000C5")]
	[Address(RVA = "0xC02F5C", Offset = "0xC02F5C", VA = "0xC02F5C")]
	public void NodeFinished(NodeType type, bool hit, bool endOfSet = false, bool cascade = false, float velocity = 0f, float precision = 0f)
	{
	}

	[Token(Token = "0x60000C6")]
	[Address(RVA = "0xC033BC", Offset = "0xC033BC", VA = "0xC033BC")]
	public void LastNode()
	{
	}

	[Token(Token = "0x60000C7")]
	[Address(RVA = "0xC03514", Offset = "0xC03514", VA = "0xC03514")]
	public void ShowResults()
	{
	}

	[Token(Token = "0x60000C8")]
	[Address(RVA = "0xC03E98", Offset = "0xC03E98", VA = "0xC03E98")]
	public void Uriel_Update()
	{
	}

	[Token(Token = "0x60000C9")]
	[Address(RVA = "0xC041CC", Offset = "0xC041CC", VA = "0xC041CC")]
	private void Uriel_Abort()
	{
	}

	[Token(Token = "0x60000CA")]
	[Address(RVA = "0xC01F94", Offset = "0xC01F94", VA = "0xC01F94")]
	public int GetStageNum(int musicID)
	{
		return default(int);
	}

	[Token(Token = "0x60000CB")]
	[Address(RVA = "0xC042F8", Offset = "0xC042F8", VA = "0xC042F8")]
	public void CascadeNodeFinished(float percent, int count)
	{
	}

	[Token(Token = "0x60000CC")]
	[Address(RVA = "0xC043CC", Offset = "0xC043CC", VA = "0xC043CC")]
	public void SpawnShockwave()
	{
	}

	[Token(Token = "0x60000CD")]
	[Address(RVA = "0xC043D0", Offset = "0xC043D0", VA = "0xC043D0")]
	private void SetupObjectPool()
	{
	}

	[Token(Token = "0x60000CE")]
	[Address(RVA = "0xC006E4", Offset = "0xC006E4", VA = "0xC006E4")]
	public void LoadDance()
	{
	}

	[Token(Token = "0x60000CF")]
	[Address(RVA = "0xC045D4", Offset = "0xC045D4", VA = "0xC045D4")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D7618", Offset = "0x5D7618")]
	private IEnumerator LoadArena()
	{
		return null;
	}

	[Token(Token = "0x60000D0")]
	[Address(RVA = "0xC0464C", Offset = "0xC0464C", VA = "0xC0464C")]
	public void LoadLobby()
	{
	}

	[Token(Token = "0x60000D1")]
	[Address(RVA = "0xC04800", Offset = "0xC04800", VA = "0xC04800")]
	public void Load_UrielLobby()
	{
	}

	[Token(Token = "0x60000D2")]
	[Address(RVA = "0xBFBE58", Offset = "0xBFBE58", VA = "0xBFBE58")]
	public void StartFadeIn()
	{
	}

	[Token(Token = "0x60000D3")]
	[Address(RVA = "0xC046E8", Offset = "0xC046E8", VA = "0xC046E8")]
	public void StartFadeOut()
	{
	}

	[Token(Token = "0x60000D4")]
	[Address(RVA = "0xC04778", Offset = "0xC04778", VA = "0xC04778")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D7678", Offset = "0x5D7678")]
	private IEnumerator LoadSceneDelayed(string scene = "dance collider lobby", float delay = 1f)
	{
		return null;
	}

	[Token(Token = "0x60000D5")]
	[Address(RVA = "0xC02AE0", Offset = "0xC02AE0", VA = "0xC02AE0")]
	public void Reload()
	{
	}

	[Token(Token = "0x60000D6")]
	[Address(RVA = "0xC04890", Offset = "0xC04890", VA = "0xC04890")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D76D8", Offset = "0x5D76D8")]
	private IEnumerator RestartDelay()
	{
		return null;
	}

	[Token(Token = "0x60000D7")]
	[Address(RVA = "0xC04908", Offset = "0xC04908", VA = "0xC04908")]
	public void RestartTutorial()
	{
	}

	[Token(Token = "0x60000D8")]
	[Address(RVA = "0xC04964", Offset = "0xC04964", VA = "0xC04964")]
	public void Failure()
	{
	}

	[Token(Token = "0x60000D9")]
	[Address(RVA = "0xC04564", Offset = "0xC04564", VA = "0xC04564")]
	public string GetCustomDanceFilePath(string _fileName)
	{
		return null;
	}

	[Token(Token = "0x60000DA")]
	[Address(RVA = "0xC04A2C", Offset = "0xC04A2C", VA = "0xC04A2C")]
	public void SpawnStreakScoreEvent()
	{
	}

	[Token(Token = "0x60000DB")]
	[Address(RVA = "0xC04B0C", Offset = "0xC04B0C", VA = "0xC04B0C")]
	public void SpawnSetCounter(int numInSet)
	{
	}

	[Token(Token = "0x60000DC")]
	[Address(RVA = "0xC04D78", Offset = "0xC04D78", VA = "0xC04D78")]
	public void HitSet()
	{
	}

	[Token(Token = "0x60000DD")]
	[Address(RVA = "0xC04E54", Offset = "0xC04E54", VA = "0xC04E54")]
	public void BreakSet()
	{
	}

	[Token(Token = "0x60000DE")]
	[Address(RVA = "0xBFE580", Offset = "0xBFE580", VA = "0xBFE580")]
	public void Pause(bool pauseUI = true)
	{
	}

	[Token(Token = "0x60000DF")]
	[Address(RVA = "0xC04EF8", Offset = "0xC04EF8", VA = "0xC04EF8")]
	public void UnPause()
	{
	}

	[Token(Token = "0x60000E0")]
	[Address(RVA = "0xC050FC", Offset = "0xC050FC", VA = "0xC050FC")]
	private void MenuPressed(InputAction.CallbackContext context)
	{
	}

	[Token(Token = "0x60000E1")]
	[Address(RVA = "0xC05204", Offset = "0xC05204", VA = "0xC05204")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60000E2")]
	[Address(RVA = "0xC052D0", Offset = "0xC052D0", VA = "0xC052D0")]
	public void Scrub(float time)
	{
	}

	[Token(Token = "0x60000E3")]
	[Address(RVA = "0xC05424", Offset = "0xC05424", VA = "0xC05424")]
	public void LoadEditor()
	{
	}

	[Token(Token = "0x60000E4")]
	[Address(RVA = "0xC054E8", Offset = "0xC054E8", VA = "0xC054E8")]
	public void SetSongLoadProgress(float progress)
	{
	}

	[Token(Token = "0x60000E5")]
	[Address(RVA = "0xC055A0", Offset = "0xC055A0", VA = "0xC055A0")]
	public void StartIncrementalSpawn(List<SongNode> nodes, float time = 0f)
	{
	}

	[Token(Token = "0x60000E6")]
	[Address(RVA = "0xC055CC", Offset = "0xC055CC", VA = "0xC055CC")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D7738", Offset = "0x5D7738")]
	private IEnumerator SpawnNodesIncremental(List<SongNode> nodes, float time = 0f)
	{
		return null;
	}

	[Token(Token = "0x60000E7")]
	[Address(RVA = "0xC05670", Offset = "0xC05670", VA = "0xC05670")]
	public GameManager()
	{
	}
}
[Serializable]
[Token(Token = "0x200002B")]
public class Score
{
	[Token(Token = "0x200035F")]
	public enum Rank
	{
		[Token(Token = "0x4001799")]
		Splus,
		[Token(Token = "0x400179A")]
		S,
		[Token(Token = "0x400179B")]
		Sminus,
		[Token(Token = "0x400179C")]
		Aplus,
		[Token(Token = "0x400179D")]
		A,
		[Token(Token = "0x400179E")]
		Aminus,
		[Token(Token = "0x400179F")]
		Bplus,
		[Token(Token = "0x40017A0")]
		B,
		[Token(Token = "0x40017A1")]
		Bminus,
		[Token(Token = "0x40017A2")]
		Cplus,
		[Token(Token = "0x40017A3")]
		C,
		[Token(Token = "0x40017A4")]
		Cminus,
		[Token(Token = "0x40017A5")]
		Dplus,
		[Token(Token = "0x40017A6")]
		D,
		[Token(Token = "0x40017A7")]
		Dminus,
		[Token(Token = "0x40017A8")]
		Eplus,
		[Token(Token = "0x40017A9")]
		E,
		[Token(Token = "0x40017AA")]
		Eminus,
		[Token(Token = "0x40017AB")]
		Blank
	}

	[Token(Token = "0x400010C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int nodesHit;

	[Token(Token = "0x400010D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public int nodesMissed;

	[Token(Token = "0x400010E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int score;

	[Token(Token = "0x400010F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int sectionScore;

	[Token(Token = "0x4000110")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int multiplier;

	[Token(Token = "0x4000111")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int maxMultiplier;

	[Token(Token = "0x4000112")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int currentStreak;

	[Token(Token = "0x4000113")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int maxStreak;

	[Token(Token = "0x4000114")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int completeSets;

	[Token(Token = "0x4000115")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public int totalSets;

	[Token(Token = "0x4000116")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int perfectCascades;

	[Token(Token = "0x4000117")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public int totalCascades;

	[Token(Token = "0x4000118")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public int powerNodesHit;

	[Token(Token = "0x4000119")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float totalEnergy;

	[Token(Token = "0x400011A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float averageEnergy;

	[Token(Token = "0x400011B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float totalPrecision;

	[Token(Token = "0x400011C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float averagePrecision;

	[Token(Token = "0x400011D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5CE898", Offset = "0x5CE898")]
	public float health;

	[Token(Token = "0x60000E9")]
	[Address(RVA = "0xCE1C9C", Offset = "0xCE1C9C", VA = "0xCE1C9C")]
	public float GetAccuracy()
	{
		return default(float);
	}

	[Token(Token = "0x60000EA")]
	[Address(RVA = "0xCE1CDC", Offset = "0xCE1CDC", VA = "0xCE1CDC")]
	public float GetEnergyRating()
	{
		return default(float);
	}

	[Token(Token = "0x60000EB")]
	[Address(RVA = "0xCE1CF0", Offset = "0xCE1CF0", VA = "0xCE1CF0")]
	public float GetPrecisionRating()
	{
		return default(float);
	}

	[Token(Token = "0x60000EC")]
	[Address(RVA = "0xCE1D04", Offset = "0xCE1D04", VA = "0xCE1D04")]
	public void NodeHit(NodeType type, float velocity, float precision, float heal = 0.05f, bool cascade = false)
	{
	}

	[Token(Token = "0x60000ED")]
	[Address(RVA = "0xCE1F98", Offset = "0xCE1F98", VA = "0xCE1F98")]
	private int CalculateBaiscNodeScore(float velocity, float precision)
	{
		return default(int);
	}

	[Token(Token = "0x60000EE")]
	[Address(RVA = "0xCE20CC", Offset = "0xCE20CC", VA = "0xCE20CC")]
	public void NodeMissed(float damage = 0.05f)
	{
	}

	[Token(Token = "0x60000EF")]
	[Address(RVA = "0xCE2158", Offset = "0xCE2158", VA = "0xCE2158")]
	private void TakeDamage(float damage)
	{
	}

	[Token(Token = "0x60000F0")]
	[Address(RVA = "0xCE2258", Offset = "0xCE2258", VA = "0xCE2258")]
	public void ResetHealth()
	{
	}

	[Token(Token = "0x60000F1")]
	[Address(RVA = "0xCE2094", Offset = "0xCE2094", VA = "0xCE2094")]
	public void AddScore(int scoreToAdd)
	{
	}

	[Token(Token = "0x60000F2")]
	[Address(RVA = "0xCE2264", Offset = "0xCE2264", VA = "0xCE2264")]
	public void AwardCascadeScore(float percent, int count)
	{
	}

	[Token(Token = "0x60000F3")]
	[Address(RVA = "0xCE2324", Offset = "0xCE2324", VA = "0xCE2324")]
	public void CompleteSet()
	{
	}

	[Token(Token = "0x60000F4")]
	[Address(RVA = "0xCE2334", Offset = "0xCE2334", VA = "0xCE2334")]
	public void AddSet()
	{
	}

	[Token(Token = "0x60000F5")]
	[Address(RVA = "0xCE2344", Offset = "0xCE2344", VA = "0xCE2344")]
	public void PerfectCascade()
	{
	}

	[Token(Token = "0x60000F6")]
	[Address(RVA = "0xCE2354", Offset = "0xCE2354", VA = "0xCE2354")]
	public void AddCascade()
	{
	}

	[Token(Token = "0x60000F7")]
	[Address(RVA = "0xCE20B0", Offset = "0xCE20B0", VA = "0xCE20B0")]
	private void IncreaseMultiplier()
	{
	}

	[Token(Token = "0x60000F8")]
	[Address(RVA = "0xCE2124", Offset = "0xCE2124", VA = "0xCE2124")]
	private void DecreaseMultiplier()
	{
	}

	[Token(Token = "0x60000F9")]
	[Address(RVA = "0xCE2364", Offset = "0xCE2364", VA = "0xCE2364")]
	public void StartNewSection()
	{
	}

	[Token(Token = "0x60000FA")]
	[Address(RVA = "0xCE236C", Offset = "0xCE236C", VA = "0xCE236C")]
	public void ResetScore()
	{
	}

	[Token(Token = "0x60000FB")]
	[Address(RVA = "0xCE240C", Offset = "0xCE240C", VA = "0xCE240C")]
	public static string GetRankString(int rank)
	{
		return null;
	}

	[Token(Token = "0x60000FC")]
	[Address(RVA = "0xCE265C", Offset = "0xCE265C", VA = "0xCE265C")]
	public Score()
	{
	}
}
[Token(Token = "0x200002C")]
public class HandShield : MonoBehaviour
{
	[Token(Token = "0x400011E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public MeshRenderer pulsar;

	[Token(Token = "0x400011F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float baseEmissivePower;

	[Token(Token = "0x4000120")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float pulsePower;

	[Token(Token = "0x4000121")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Color baseEmissiveColor;

	[Token(Token = "0x4000122")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float fadeRate;

	[Token(Token = "0x4000123")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float velocityForLine;

	[Token(Token = "0x4000124")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float power;

	[Token(Token = "0x4000125")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Material mat;

	[Token(Token = "0x4000126")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private VelocityHolder velocity;

	[Token(Token = "0x4000127")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private TrailRenderer trail;

	[Token(Token = "0x4000128")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public ParticleSystem streakParticles;

	[Token(Token = "0x4000129")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private AudioSource _audio;

	[Token(Token = "0x400012A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public bool leftHand;

	[Token(Token = "0x400012B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public AudioClip cascadeSound;

	[Token(Token = "0x400012C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public AudioClip cascadeBreakSound;

	[Token(Token = "0x400012D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private bool playingCascade;

	[Token(Token = "0x400012E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private float cascadeDuration;

	[Token(Token = "0x400012F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Vector2 minMaxCascadePitch;

	[Token(Token = "0x60000FD")]
	[Address(RVA = "0xA4C8A4", Offset = "0xA4C8A4", VA = "0xA4C8A4")]
	private void Start()
	{
	}

	[Token(Token = "0x60000FE")]
	[Address(RVA = "0xA4CF1C", Offset = "0xA4CF1C", VA = "0xA4CF1C")]
	private void Update()
	{
	}

	[Token(Token = "0x60000FF")]
	[Address(RVA = "0xA4D150", Offset = "0xA4D150", VA = "0xA4D150")]
	public void PulseEmissive()
	{
	}

	[Token(Token = "0x6000100")]
	[Address(RVA = "0xA4D15C", Offset = "0xA4D15C", VA = "0xA4D15C")]
	public void StartCascadeSound(float _cascadeDuration = 1f)
	{
	}

	[Token(Token = "0x6000101")]
	[Address(RVA = "0xA4D23C", Offset = "0xA4D23C", VA = "0xA4D23C")]
	public void EndCascadeSound()
	{
	}

	[Token(Token = "0x6000102")]
	[Address(RVA = "0xA4D2DC", Offset = "0xA4D2DC", VA = "0xA4D2DC")]
	public void CancelCascadeSound()
	{
	}

	[Token(Token = "0x6000103")]
	[Address(RVA = "0xA4D3B4", Offset = "0xA4D3B4", VA = "0xA4D3B4")]
	public HandShield()
	{
	}
}
[Token(Token = "0x200002D")]
public enum NodeType
{
	[Token(Token = "0x4000131")]
	Green,
	[Token(Token = "0x4000132")]
	Pink,
	[Token(Token = "0x4000133")]
	Yellow,
	[Token(Token = "0x4000134")]
	GreenCascadeEnd,
	[Token(Token = "0x4000135")]
	PinkCascadeEnd,
	[Token(Token = "0x4000136")]
	TauntStart,
	[Token(Token = "0x4000137")]
	MirageGreen,
	[Token(Token = "0x4000138")]
	MiragePink,
	[Token(Token = "0x4000139")]
	HoloLight,
	[Token(Token = "0x400013A")]
	SetEnd,
	[Token(Token = "0x400013B")]
	LeftChannel,
	[Token(Token = "0x400013C")]
	Midchannel,
	[Token(Token = "0x400013D")]
	RightChannel
}
[Token(Token = "0x200002E")]
public enum VisualTreatment
{
	[Token(Token = "0x400013F")]
	None,
	[Token(Token = "0x4000140")]
	Flame,
	[Token(Token = "0x4000141")]
	LongTail,
	[Token(Token = "0x4000142")]
	ColorBlind,
	[Token(Token = "0x4000143")]
	ColourSwitch,
	[Token(Token = "0x4000144")]
	ColorBlind_Reverse,
	[Token(Token = "0x4000145")]
	Spin,
	[Token(Token = "0x4000146")]
	Yuri,
	[Token(Token = "0x4000147")]
	Pyro,
	[Token(Token = "0x4000148")]
	Lais,
	[Token(Token = "0x4000149")]
	Remi,
	[Token(Token = "0x400014A")]
	LiuWen,
	[Token(Token = "0x400014B")]
	Dre,
	[Token(Token = "0x400014C")]
	Sonya,
	[Token(Token = "0x400014D")]
	Core
}
[Token(Token = "0x200002F")]
public class Node : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000360")]
	public class NodeParticles
	{
		[Token(Token = "0x40017AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GameObject setParticles;

		[Token(Token = "0x40017AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject fireParticles;

		[Token(Token = "0x40017AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject LongTailParticles;

		[Token(Token = "0x40017AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject Yuri_Particles;

		[Token(Token = "0x40017B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject Pyro_Particles;

		[Token(Token = "0x40017B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject Lais_Particles;

		[Token(Token = "0x40017B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject Remi_Particles;

		[Token(Token = "0x40017B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject LiuWen_Particles;

		[Token(Token = "0x40017B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public GameObject Dre_Particles;

		[Token(Token = "0x40017B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public GameObject Sonya_Particles;

		[Token(Token = "0x40017B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public GameObject Core_Particles;

		[Token(Token = "0x60018FC")]
		[Address(RVA = "0xFED434", Offset = "0xFED434", VA = "0xFED434")]
		public NodeParticles()
		{
		}
	}

	[Token(Token = "0x2000361")]
	private enum NodeAudioType
	{
		[Token(Token = "0x40017B8")]
		Bounce,
		[Token(Token = "0x40017B9")]
		Hit,
		[Token(Token = "0x40017BA")]
		Smash,
		[Token(Token = "0x40017BB")]
		Set
	}

	[Token(Token = "0x400014E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public NodeType type;

	[Token(Token = "0x400014F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float beatTime;

	[Token(Token = "0x4000150")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector2 offset;

	[Token(Token = "0x4000151")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string path;

	[Token(Token = "0x4000152")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool set;

	[Token(Token = "0x4000153")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	public bool cascade;

	[Token(Token = "0x4000154")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float holoLight;

	[Token(Token = "0x4000155")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int holoNum;

	[Token(Token = "0x4000156")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public int danceID;

	[Token(Token = "0x4000157")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float bufferOverride;

	[Token(Token = "0x4000158")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public int minDifficulty;

	[Token(Token = "0x4000159")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private SplineFollower spline;

	[Token(Token = "0x400015A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public NodeParticles particles;

	[Token(Token = "0x400015B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float spawnBuffer;

	[Token(Token = "0x400015C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float secondsPerHalfBeat;

	[Token(Token = "0x400015D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public GameObject nodeHitPrefab;

	[Token(Token = "0x400015E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public GameObject setHitPrefab;

	[Token(Token = "0x400015F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public GameObject cascadeHitPrefab;

	[Token(Token = "0x4000160")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public GameObject spawnInPrefab;

	[Token(Token = "0x4000161")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public GameObject nodeBouncePrefab;

	[Token(Token = "0x4000162")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public GameObject nodeSmashPrefab;

	[Token(Token = "0x4000163")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public GameObject lastNodePrefab;

	[Token(Token = "0x4000164")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private bool doubleNodeFirstHit;

	[Token(Token = "0x4000165")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x99")]
	private bool finished;

	[Token(Token = "0x4000166")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9A")]
	private bool alive;

	[Token(Token = "0x4000167")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9B")]
	private bool hit;

	[Token(Token = "0x4000168")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	public bool endOfSet;

	[Token(Token = "0x4000169")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Node nextNeighbor;

	[Token(Token = "0x400016A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public Node previousNeighbor;

	[Token(Token = "0x400016B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public GameObject lightning;

	[Token(Token = "0x400016C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public GameObject batsuPrefab;

	[Token(Token = "0x400016D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public bool endOfCascade;

	[Token(Token = "0x400016E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public Node cascadeOwner;

	[Token(Token = "0x400016F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public Node cascadeChild;

	[Token(Token = "0x4000170")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public List<Node> cascadeChildren;

	[Token(Token = "0x4000171")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public int cascadeChildrenHits;

	[Token(Token = "0x4000172")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public List<string> lightPayloads;

	[Token(Token = "0x4000173")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public TauntInfo tauntInfo;

	[Token(Token = "0x4000174")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private GameManager gm;

	[Token(Token = "0x4000175")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public MeshRenderer shellMesh;

	[Token(Token = "0x4000176")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public MeshRenderer core;

	[Token(Token = "0x4000177")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public MeshRenderer outerParts;

	[Token(Token = "0x4000178")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public List<MeshRenderer> colourMeshes;

	[Token(Token = "0x4000179")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private bool firstInCascade;

	[Token(Token = "0x400017A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x121")]
	private bool utilityDone;

	[Token(Token = "0x400017B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private List<GameObject> activeParticles;

	[Token(Token = "0x400017C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private float angle;

	[Token(Token = "0x400017D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
	private float spinSpeed;

	[Token(Token = "0x400017E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private float spinRadius;

	[Token(Token = "0x400017F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
	private int readyToEnableVisuals;

	[Token(Token = "0x4000180")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool leftCascadeHaptic;

	[Token(Token = "0x4000181")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
	public static bool rightCascadeHaptic;

	[Token(Token = "0x4000182")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public bool cascadeCancelled;

	[Token(Token = "0x4000183")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static float lastCascadeTime;

	[Token(Token = "0x4000184")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public List<AudioClip> hitSounds;

	[Token(Token = "0x4000185")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public List<AudioClip> smashSounds;

	[Token(Token = "0x4000186")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	public List<AudioClip> bounceSounds;

	[Token(Token = "0x4000187")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	public List<AudioClip> setSounds;

	[Token(Token = "0x4000188")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	public bool pitchShift;

	[Token(Token = "0x4000189")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
	public Vector2 minMaxPitchShift;

	[Token(Token = "0x400018A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	public AudioMixerGroup nodeMixer;

	[Token(Token = "0x400018B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	public AudioMixerGroup setMixer;

	[Token(Token = "0x6000104")]
	[Address(RVA = "0xDF8FA4", Offset = "0xDF8FA4", VA = "0xDF8FA4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000105")]
	[Address(RVA = "0xDF9044", Offset = "0xDF9044", VA = "0xDF9044")]
	private void Start()
	{
	}

	[Token(Token = "0x6000106")]
	[Address(RVA = "0xDF9124", Offset = "0xDF9124", VA = "0xDF9124")]
	public bool isUtilityNode()
	{
		return default(bool);
	}

	[Token(Token = "0x6000107")]
	[Address(RVA = "0xDF915C", Offset = "0xDF915C", VA = "0xDF915C")]
	public void Init()
	{
	}

	[Token(Token = "0x6000108")]
	[Address(RVA = "0xDF93AC", Offset = "0xDF93AC", VA = "0xDF93AC")]
	public void SetOffsets()
	{
	}

	[Token(Token = "0x6000109")]
	[Address(RVA = "0xDF9BA0", Offset = "0xDF9BA0", VA = "0xDF9BA0")]
	public void InitSet()
	{
	}

	[Token(Token = "0x600010A")]
	[Address(RVA = "0xDF95F4", Offset = "0xDF95F4", VA = "0xDF95F4")]
	private void ActivateParticles()
	{
	}

	[Token(Token = "0x600010B")]
	[Address(RVA = "0xDF9A3C", Offset = "0xDF9A3C", VA = "0xDF9A3C")]
	private void EnableParticles(bool _enable)
	{
	}

	[Token(Token = "0x600010C")]
	[Address(RVA = "0xDF9C68", Offset = "0xDF9C68", VA = "0xDF9C68")]
	public void InitCascade(Node _cascadeowner)
	{
	}

	[Token(Token = "0x600010D")]
	[Address(RVA = "0xDF9D94", Offset = "0xDF9D94", VA = "0xDF9D94")]
	public void MakeEndOfCascade()
	{
	}

	[Token(Token = "0x600010E")]
	[Address(RVA = "0xDF9E14", Offset = "0xDF9E14", VA = "0xDF9E14")]
	public void SetUpCascadeVisuals()
	{
	}

	[Token(Token = "0x600010F")]
	[Address(RVA = "0xDF9934", Offset = "0xDF9934", VA = "0xDF9934")]
	private void SetColours()
	{
	}

	[Token(Token = "0x6000110")]
	[Address(RVA = "0xDFA01C", Offset = "0xDFA01C", VA = "0xDFA01C")]
	private void SetTrailColour(Color c)
	{
	}

	[Token(Token = "0x6000111")]
	[Address(RVA = "0xDFA248", Offset = "0xDFA248", VA = "0xDFA248")]
	private void SetMeshColour(Color c)
	{
	}

	[Token(Token = "0x6000112")]
	[Address(RVA = "0xDFA738", Offset = "0xDFA738", VA = "0xDFA738")]
	private void Update()
	{
	}

	[Token(Token = "0x6000113")]
	[Address(RVA = "0xDFB1F8", Offset = "0xDFB1F8", VA = "0xDFB1F8")]
	public void Activate()
	{
	}

	[Token(Token = "0x6000114")]
	[Address(RVA = "0xDFA9DC", Offset = "0xDFA9DC", VA = "0xDFA9DC")]
	private void EnableVisuals()
	{
	}

	[Token(Token = "0x6000115")]
	[Address(RVA = "0xDFAF18", Offset = "0xDFAF18", VA = "0xDFAF18")]
	private void HitMissPoint()
	{
	}

	[Token(Token = "0x6000116")]
	[Address(RVA = "0xDFB298", Offset = "0xDFB298", VA = "0xDFB298")]
	public void CancelSet()
	{
	}

	[Token(Token = "0x6000117")]
	[Address(RVA = "0xDFBA54", Offset = "0xDFBA54", VA = "0xDFBA54")]
	public void StartCascadeSound(bool left, bool firstInCascade)
	{
	}

	[Token(Token = "0x6000118")]
	[Address(RVA = "0xDFB360", Offset = "0xDFB360", VA = "0xDFB360")]
	public void CancelCascadeSound(bool left, bool _break = true)
	{
	}

	[Token(Token = "0x6000119")]
	[Address(RVA = "0xDFBD14", Offset = "0xDFBD14", VA = "0xDFBD14")]
	private void OnTriggerEnter(Collider col)
	{
	}

	[Token(Token = "0x600011A")]
	[Address(RVA = "0xDFCB78", Offset = "0xDFCB78", VA = "0xDFCB78")]
	private void HitEffects(NodeType type, float velocity = 1f)
	{
	}

	[Token(Token = "0x600011B")]
	[Address(RVA = "0xDFD718", Offset = "0xDFD718", VA = "0xDFD718")]
	private void PlayAudio(NodeAudioType audioType)
	{
	}

	[Token(Token = "0x600011C")]
	[Address(RVA = "0xDFD8F4", Offset = "0xDFD8F4", VA = "0xDFD8F4")]
	private void OnTriggerExit(Collider col)
	{
	}

	[Token(Token = "0x600011D")]
	[Address(RVA = "0xDF9428", Offset = "0xDF9428", VA = "0xDF9428")]
	private void SetPath()
	{
	}

	[Token(Token = "0x600011E")]
	[Address(RVA = "0xDFD9C0", Offset = "0xDFD9C0", VA = "0xDFD9C0")]
	public Node()
	{
	}
}
[Token(Token = "0x2000030")]
public enum DamageAnimationType
{
	[Token(Token = "0x400018D")]
	anim1,
	[Token(Token = "0x400018E")]
	anim2,
	[Token(Token = "0x400018F")]
	anim3
}
[Serializable]
[Token(Token = "0x2000031")]
public class TauntInfo
{
	[Token(Token = "0x4000190")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool isTaunt;

	[Token(Token = "0x4000191")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float tauntDuration;

	[Token(Token = "0x4000192")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<VisualTreatment> NodeEffects;

	[Token(Token = "0x4000193")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public DamageAnimationType damageAnimation;

	[Token(Token = "0x6000120")]
	[Address(RVA = "0xE8A344", Offset = "0xE8A344", VA = "0xE8A344")]
	public TauntInfo()
	{
	}

	[Token(Token = "0x6000121")]
	[Address(RVA = "0xE8A43C", Offset = "0xE8A43C", VA = "0xE8A43C")]
	public TauntInfo(SerTauntInfo _serInfo)
	{
	}
}
[Serializable]
[Token(Token = "0x2000032")]
public class SerTauntInfo
{
	[Token(Token = "0x4000194")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool isTaunt;

	[Token(Token = "0x4000195")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float tauntDuration;

	[Token(Token = "0x4000196")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<VisualTreatment> visualEffects;

	[Token(Token = "0x4000197")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public DamageAnimationType damageAnimation;

	[Token(Token = "0x6000122")]
	[Address(RVA = "0xA0C428", Offset = "0xA0C428", VA = "0xA0C428")]
	public SerTauntInfo()
	{
	}

	[Token(Token = "0x6000123")]
	[Address(RVA = "0xA0C4AC", Offset = "0xA0C4AC", VA = "0xA0C4AC")]
	public SerTauntInfo(TauntInfo _ti)
	{
	}
}
[Token(Token = "0x2000033")]
public class PoolManager : MonoBehaviour
{
	[Token(Token = "0x2000362")]
	private class Batsu
	{
		[Token(Token = "0x40017BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform tForm;

		[Token(Token = "0x40017BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Animator anim;

		[Token(Token = "0x40017BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AudioSource aSource;

		[Token(Token = "0x40017BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public RandomPitch pitch;

		[Token(Token = "0x60018FD")]
		[Address(RVA = "0xFF0F30", Offset = "0xFF0F30", VA = "0xFF0F30")]
		public Batsu()
		{
		}
	}

	[Token(Token = "0x4000198")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int poolSize;

	[Token(Token = "0x4000199")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float cascadeMissCooldown;

	[Token(Token = "0x400019A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector3 missOffset;

	[Token(Token = "0x400019B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject pinkCascadeHit;

	[Token(Token = "0x400019C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject greenCascadehit;

	[Token(Token = "0x400019D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject missPrefab;

	[Token(Token = "0x400019E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private List<ParticleSystem> pinkHits;

	[Token(Token = "0x400019F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private List<ParticleSystem> greenHits;

	[Token(Token = "0x40001A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private List<Batsu> batsus;

	[Token(Token = "0x40001A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float cascadeMissTimer;

	[Token(Token = "0x6000124")]
	[Address(RVA = "0x120572C", Offset = "0x120572C", VA = "0x120572C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000125")]
	[Address(RVA = "0x1205A4C", Offset = "0x1205A4C", VA = "0x1205A4C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000126")]
	[Address(RVA = "0x1205A8C", Offset = "0x1205A8C", VA = "0x1205A8C")]
	public void OnMiss(Vector3 _pos, Quaternion _rot, bool _isCascade = false)
	{
	}

	[Token(Token = "0x6000127")]
	[Address(RVA = "0x1205C34", Offset = "0x1205C34", VA = "0x1205C34")]
	public void OnCascadeHit(NodeType _type, Vector3 _pos, Quaternion _rot)
	{
	}

	[Token(Token = "0x6000128")]
	[Address(RVA = "0x1205DC8", Offset = "0x1205DC8", VA = "0x1205DC8")]
	public PoolManager()
	{
	}
}
[Serializable]
[Token(Token = "0x2000034")]
public class Song
{
	[Serializable]
	[Token(Token = "0x2000363")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDB3C", Offset = "0x5CDB3C")]
	private sealed class <>c
	{
		[Token(Token = "0x40017C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly <>c <>9;

		[Token(Token = "0x40017C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Comparison<SongNode> <>9__12_0;

		[Token(Token = "0x60018FF")]
		[Address(RVA = "0xFF5B5C", Offset = "0xFF5B5C", VA = "0xFF5B5C")]
		public <>c()
		{
		}

		[Token(Token = "0x6001900")]
		[Address(RVA = "0xFF5B64", Offset = "0xFF5B64", VA = "0xFF5B64")]
		internal int <SortNodes>b__12_0(SongNode n1, SongNode n2)
		{
			return default(int);
		}
	}

	[Token(Token = "0x40001A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public List<SongNode> nodes;

	[Token(Token = "0x40001A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string _music;

	[Token(Token = "0x40001A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string _arena;

	[Token(Token = "0x40001A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string _lightshow;

	[Token(Token = "0x40001A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float BPM;

	[Token(Token = "0x40001A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float firstBeatBuffer;

	[Token(Token = "0x40001A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public string title1;

	[Token(Token = "0x40001A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public string title2;

	[Token(Token = "0x40001AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public string title3;

	[Token(Token = "0x40001AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public int maxScore;

	[Token(Token = "0x40001AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public List<CascadeContainer> cascades;

	[Token(Token = "0x40001AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public string nodeDebug;

	[Token(Token = "0x6000129")]
	[Address(RVA = "0xA1133C", Offset = "0xA1133C", VA = "0xA1133C")]
	public string InitSong(float time = 0f, bool incremental = true)
	{
		return null;
	}

	[Token(Token = "0x600012A")]
	[Address(RVA = "0xA1150C", Offset = "0xA1150C", VA = "0xA1150C")]
	public void SortNodes()
	{
	}

	[Token(Token = "0x600012B")]
	[Address(RVA = "0xA11638", Offset = "0xA11638", VA = "0xA11638")]
	public void SpawnNodes(float time = 0f, bool incremental = true)
	{
	}

	[Token(Token = "0x600012C")]
	[Address(RVA = "0xA127E8", Offset = "0xA127E8", VA = "0xA127E8")]
	public void GrabNodeGroups()
	{
	}

	[Token(Token = "0x600012D")]
	[Address(RVA = "0xA13024", Offset = "0xA13024", VA = "0xA13024")]
	private void SpawnNodePool()
	{
	}

	[Token(Token = "0x600012E")]
	[Address(RVA = "0xA13028", Offset = "0xA13028", VA = "0xA13028")]
	public SongNode GetLastNode()
	{
		return null;
	}

	[Token(Token = "0x600012F")]
	[Address(RVA = "0xA1309C", Offset = "0xA1309C", VA = "0xA1309C")]
	public Song()
	{
	}
}
[Serializable]
[Token(Token = "0x2000035")]
public class SongNode
{
	[Token(Token = "0x40001AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float beatTime;

	[Token(Token = "0x40001AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float offsetX;

	[Token(Token = "0x40001B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float offsetY;

	[Token(Token = "0x40001B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public NodeType type;

	[Token(Token = "0x40001B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string path;

	[Token(Token = "0x40001B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool set;

	[Token(Token = "0x40001B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool cascade;

	[Token(Token = "0x40001B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float holoLight;

	[Token(Token = "0x40001B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int holoNum;

	[Token(Token = "0x40001B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public int danceID;

	[Token(Token = "0x40001B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float bufferOverride;

	[Token(Token = "0x40001B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public int minDifficulty;

	[Token(Token = "0x40001BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[HideInInspector]
	public SongNode cascadeChild;

	[Token(Token = "0x40001BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[HideInInspector]
	public bool endOfCascade;

	[Token(Token = "0x40001BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[HideInInspector]
	public SongNode nextNeighbor;

	[Token(Token = "0x40001BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public SerTauntInfo serTauntInfo;

	[Token(Token = "0x40001BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public List<string> lightPayloads;

	[Token(Token = "0x6000130")]
	[Address(RVA = "0xA179D0", Offset = "0xA179D0", VA = "0xA179D0")]
	public SongNode(float _beatTime, float _offsetX, float _offsetY, NodeType _type, string _path = "Default", bool _set = false, bool _cascade = false, float _holoLight = 0f, int _danceID = -1, float _bufferOverride = 0f, int _minDifficulty = 0)
	{
	}

	[Token(Token = "0x6000131")]
	[Address(RVA = "0xA17814", Offset = "0xA17814", VA = "0xA17814")]
	public SongNode(SceneEditorNode _sen)
	{
	}

	[Token(Token = "0x6000132")]
	[Address(RVA = "0xA12FF4", Offset = "0xA12FF4", VA = "0xA12FF4")]
	public bool isUtilityNode()
	{
		return default(bool);
	}
}
[Serializable]
[Token(Token = "0x2000036")]
public class TauntContainter
{
	[Token(Token = "0x40001BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public List<SongNode> tauntNodes;

	[Token(Token = "0x40001C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TauntInfo tauntInfo;

	[Token(Token = "0x40001C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float nodesHit;

	[Token(Token = "0x6000133")]
	[Address(RVA = "0xE8A24C", Offset = "0xE8A24C", VA = "0xE8A24C")]
	public TauntContainter()
	{
	}

	[Token(Token = "0x6000134")]
	[Address(RVA = "0xE8A3C8", Offset = "0xE8A3C8", VA = "0xE8A3C8")]
	public SongNode GetLastNode()
	{
		return null;
	}
}
[Serializable]
[Token(Token = "0x2000037")]
public class CascadeContainer
{
	[Token(Token = "0x40001C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public List<SongNode> cascadeNodes;

	[Token(Token = "0x6000135")]
	[Address(RVA = "0x10A902C", Offset = "0x10A902C", VA = "0x10A902C")]
	public CascadeContainer()
	{
	}
}
[Token(Token = "0x2000038")]
public enum HardwareType
{
	[Token(Token = "0x40001C4")]
	e_none,
	[Token(Token = "0x40001C5")]
	e_Oculus,
	[Token(Token = "0x40001C6")]
	e_Vive
}
[Token(Token = "0x2000039")]
public class HardwareID : MonoBehaviour
{
	[Token(Token = "0x40001C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public HardwareType type;

	[Token(Token = "0x6000136")]
	[Address(RVA = "0xA4D3BC", Offset = "0xA4D3BC", VA = "0xA4D3BC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000137")]
	[Address(RVA = "0xA4D3C0", Offset = "0xA4D3C0", VA = "0xA4D3C0")]
	public HardwareID()
	{
	}
}
[Token(Token = "0x200003A")]
public class DirectorDirector : MonoBehaviour
{
	[Token(Token = "0x40001C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PlayableAsset Round1Dance;

	[Token(Token = "0x40001C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public PlayableAsset Round2Dance;

	[Token(Token = "0x40001CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public PlayableAsset Round3Dance;

	[Token(Token = "0x40001CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public PlayableAsset Round4Dance;

	[Token(Token = "0x40001CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public PlayableAsset Round5Dance;

	[Token(Token = "0x40001CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private PlayableDirector director;

	[Token(Token = "0x40001CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x5CE8E0", Offset = "0x5CE8E0")]
	public bool debugDance;

	[Token(Token = "0x40001CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public int debugRound;

	[Token(Token = "0x6000138")]
	[Address(RVA = "0xCCCF44", Offset = "0xCCCF44", VA = "0xCCCF44")]
	private void Start()
	{
	}

	[Token(Token = "0x6000139")]
	[Address(RVA = "0xCCD168", Offset = "0xCCD168", VA = "0xCCD168")]
	private void Update()
	{
	}

	[Token(Token = "0x600013A")]
	[Address(RVA = "0xCCD040", Offset = "0xCCD040", VA = "0xCCD040")]
	public void StartDance(int roundNum)
	{
	}

	[Token(Token = "0x600013B")]
	[Address(RVA = "0xCCD16C", Offset = "0xCCD16C", VA = "0xCCD16C")]
	public DirectorDirector()
	{
	}
}
[Token(Token = "0x200003B")]
public class HoloAnimationController : MonoBehaviour
{
	[Token(Token = "0x2000364")]
	public enum AnimationType
	{
		[Token(Token = "0x40017C3")]
		Taunt,
		[Token(Token = "0x40017C4")]
		Dance,
		[Token(Token = "0x40017C5")]
		Victory,
		[Token(Token = "0x40017C6")]
		Defeat,
		[Token(Token = "0x40017C7")]
		None
	}

	[Token(Token = "0x40001D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Animator holo;

	[Token(Token = "0x40001D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public PlayableDirector director;

	[Token(Token = "0x40001D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<Renderer> renderers;

	[Token(Token = "0x40001D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5CE8F4", Offset = "0x5CE8F4")]
	public float opacity;

	[Token(Token = "0x40001D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool fading;

	[Token(Token = "0x40001D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float fadespeed;

	[Token(Token = "0x40001D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float fadeTarget;

	[Token(Token = "0x40001D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float fadeValue;

	[Token(Token = "0x40001D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Transform introPosition;

	[Token(Token = "0x40001D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3 dancePos;

	[Token(Token = "0x40001DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public AnimationType nextFadeAnim;

	[Token(Token = "0x600013C")]
	[Address(RVA = "0xA4DE18", Offset = "0xA4DE18", VA = "0xA4DE18")]
	private void Start()
	{
	}

	[Token(Token = "0x600013D")]
	[Address(RVA = "0xA4E144", Offset = "0xA4E144", VA = "0xA4E144")]
	private void Update()
	{
	}

	[Token(Token = "0x600013E")]
	[Address(RVA = "0xA4E000", Offset = "0xA4E000", VA = "0xA4E000")]
	public void ForceOpacity(float value)
	{
	}

	[Token(Token = "0x600013F")]
	[Address(RVA = "0xA4E4C0", Offset = "0xA4E4C0", VA = "0xA4E4C0")]
	public void Fade(float target, AnimationType animation)
	{
	}

	[Token(Token = "0x6000140")]
	[Address(RVA = "0xA4E304", Offset = "0xA4E304", VA = "0xA4E304")]
	private void FadeFinished()
	{
	}

	[Token(Token = "0x6000141")]
	[Address(RVA = "0xA4E628", Offset = "0xA4E628", VA = "0xA4E628")]
	public void EndHolo()
	{
	}

	[Token(Token = "0x6000142")]
	[Address(RVA = "0xA4E634", Offset = "0xA4E634", VA = "0xA4E634")]
	public void ShowHolo()
	{
	}

	[Token(Token = "0x6000143")]
	[Address(RVA = "0xA4E6E0", Offset = "0xA4E6E0", VA = "0xA4E6E0")]
	public void Taunt()
	{
	}

	[Token(Token = "0x6000144")]
	[Address(RVA = "0xA4E6EC", Offset = "0xA4E6EC", VA = "0xA4E6EC")]
	public void ReturnToDance()
	{
	}

	[Token(Token = "0x6000145")]
	[Address(RVA = "0xA4E6F8", Offset = "0xA4E6F8", VA = "0xA4E6F8")]
	public void Victory()
	{
	}

	[Token(Token = "0x6000146")]
	[Address(RVA = "0xA4E704", Offset = "0xA4E704", VA = "0xA4E704")]
	public void Defeat()
	{
	}

	[Token(Token = "0x6000147")]
	[Address(RVA = "0xA4E710", Offset = "0xA4E710", VA = "0xA4E710")]
	public HoloAnimationController()
	{
	}
}
[Token(Token = "0x200003C")]
public class HoloAnimationEnd : StateMachineBehaviour
{
	[Token(Token = "0x40001DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5CE90C", Offset = "0x5CE90C")]
	public float fadePoint;

	[Token(Token = "0x40001DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private bool canFade;

	[Token(Token = "0x40001DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	public bool startSong;

	[Token(Token = "0x40001DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5CE924", Offset = "0x5CE924")]
	public float startTime;

	[Token(Token = "0x40001DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool showScore;

	[Token(Token = "0x40001E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5CE93C", Offset = "0x5CE93C")]
	public float scoreTime;

	[Token(Token = "0x40001E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool showDance;

	[Token(Token = "0x6000148")]
	[Address(RVA = "0xA4E724", Offset = "0xA4E724", VA = "0xA4E724", Slot = "5")]
	public override void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000149")]
	[Address(RVA = "0xA4E8CC", Offset = "0xA4E8CC", VA = "0xA4E8CC")]
	public HoloAnimationEnd()
	{
	}
}
[Token(Token = "0x200003D")]
public class HoloDamageController : MonoBehaviour
{
	[Token(Token = "0x40001E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float totalDamage;

	[Token(Token = "0x40001E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float currentDamage;

	[Token(Token = "0x40001E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5CE954", Offset = "0x5CE954")]
	public float damagePercent;

	[Token(Token = "0x40001E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float dissolveBase;

	[Token(Token = "0x40001E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AnimationCurve dissolveCurve;

	[Token(Token = "0x40001E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float meshDeformBase;

	[Token(Token = "0x40001E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AnimationCurve meshDeformCurve;

	[Token(Token = "0x40001E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float shakeTimeBase;

	[Token(Token = "0x40001EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public AnimationCurve shakeTimeCurve;

	[Token(Token = "0x40001EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float shakeSpeedBase;

	[Token(Token = "0x40001EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public AnimationCurve shakeSpeedCurve;

	[Token(Token = "0x40001ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public float shakeBendBase;

	[Token(Token = "0x40001EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public AnimationCurve shakeBendCurve;

	[Token(Token = "0x40001EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public float fresnelBase;

	[Token(Token = "0x40001F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public AnimationCurve fresnelCurve;

	[Token(Token = "0x40001F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public float damageTime;

	[Token(Token = "0x40001F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public AnimationCurve damageCurve;

	[Token(Token = "0x40001F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public float dissolveMax;

	[Token(Token = "0x40001F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	public float meshDeformMax;

	[Token(Token = "0x40001F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public float shakeTimeMax;

	[Token(Token = "0x40001F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	public float shakeSpeedMax;

	[Token(Token = "0x40001F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public float shakeBendMax;

	[Token(Token = "0x40001F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	public float fresnelMax;

	[Token(Token = "0x40001F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Material mat;

	[Token(Token = "0x40001FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private bool damaging;

	[Token(Token = "0x40001FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	private float timer;

	[Token(Token = "0x40001FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[HideInInspector]
	public bool dead;

	[Token(Token = "0x600014A")]
	[Address(RVA = "0xA4E8DC", Offset = "0xA4E8DC", VA = "0xA4E8DC")]
	private void Start()
	{
	}

	[Token(Token = "0x600014B")]
	[Address(RVA = "0xA4E948", Offset = "0xA4E948", VA = "0xA4E948")]
	private void Update()
	{
	}

	[Token(Token = "0x600014C")]
	[Address(RVA = "0xA4E9B0", Offset = "0xA4E9B0", VA = "0xA4E9B0")]
	private void UpdateHolo()
	{
	}

	[Token(Token = "0x600014D")]
	[Address(RVA = "0xA4ED9C", Offset = "0xA4ED9C", VA = "0xA4ED9C")]
	private float UpdateValue(float _base, AnimationCurve _curve, string _shaderVar)
	{
		return default(float);
	}

	[Token(Token = "0x600014E")]
	[Address(RVA = "0xA4EACC", Offset = "0xA4EACC", VA = "0xA4EACC")]
	private void UpdateDamage()
	{
	}

	[Token(Token = "0x600014F")]
	[Address(RVA = "0xA4EE00", Offset = "0xA4EE00", VA = "0xA4EE00")]
	private void SetValue(string _shaderVar, float _val)
	{
	}

	[Token(Token = "0x6000150")]
	[Address(RVA = "0xA4ED7C", Offset = "0xA4ED7C", VA = "0xA4ED7C")]
	public void TakeDamage(float _damage)
	{
	}

	[Token(Token = "0x6000151")]
	[Address(RVA = "0xA4EE1C", Offset = "0xA4EE1C", VA = "0xA4EE1C")]
	public HoloDamageController()
	{
	}
}
[Token(Token = "0x200003E")]
public class LobbyVOManager : MonoBehaviour
{
	[Token(Token = "0x40001FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UI_Character_select charMan;

	[Token(Token = "0x40001FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<VoiceOverManager> VOMen;

	[Token(Token = "0x6000152")]
	[Address(RVA = "0xA69420", Offset = "0xA69420", VA = "0xA69420")]
	public void SelectPressed()
	{
	}

	[Token(Token = "0x6000153")]
	[Address(RVA = "0xA694A0", Offset = "0xA694A0", VA = "0xA694A0")]
	public LobbyVOManager()
	{
	}
}
[Serializable]
[Token(Token = "0x200003F")]
public class LookTarget
{
	[Token(Token = "0x40001FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Transform target;

	[Token(Token = "0x4000200")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float weight;

	[Token(Token = "0x6000154")]
	[Address(RVA = "0xF8E49C", Offset = "0xF8E49C", VA = "0xF8E49C")]
	public LookTarget()
	{
	}
}
[Token(Token = "0x2000040")]
public class LookAtManager : MonoBehaviour
{
	[Token(Token = "0x4000201")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5CE97C", Offset = "0x5CE97C")]
	public List<PerfectLookAt> lookAt;

	[Token(Token = "0x4000202")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<AnimationMiddleMan> midMen;

	[Token(Token = "0x4000203")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float playerTargetWeight;

	[Token(Token = "0x4000204")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private LookTarget playerTarget;

	[Token(Token = "0x4000205")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float noTargetWeight;

	[Token(Token = "0x4000206")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public List<LookTarget> lookTargets;

	[Token(Token = "0x4000207")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private LookTarget noTarget;

	[Token(Token = "0x4000208")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float minLookTime;

	[Token(Token = "0x4000209")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float maxLookTime;

	[Token(Token = "0x400020A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float currentLookTime;

	[Token(Token = "0x400020B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float weightTotal;

	[Token(Token = "0x6000155")]
	[Address(RVA = "0xF8D710", Offset = "0xF8D710", VA = "0xF8D710")]
	public void UpdateWeightTotal()
	{
	}

	[Token(Token = "0x6000156")]
	[Address(RVA = "0xF8D7E0", Offset = "0xF8D7E0", VA = "0xF8D7E0")]
	private bool CheckMaxTime(float _maxTime)
	{
		return default(bool);
	}

	[Token(Token = "0x6000157")]
	[Address(RVA = "0xF8D7F0", Offset = "0xF8D7F0", VA = "0xF8D7F0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000158")]
	[Address(RVA = "0xF8DE40", Offset = "0xF8DE40", VA = "0xF8DE40")]
	private void Update()
	{
	}

	[Token(Token = "0x6000159")]
	[Address(RVA = "0xF8DA54", Offset = "0xF8DA54", VA = "0xF8DA54")]
	private void PickRandomTarget()
	{
	}

	[Token(Token = "0x600015A")]
	[Address(RVA = "0xF8DEB4", Offset = "0xF8DEB4", VA = "0xF8DEB4")]
	private void SetTarget(Transform _tForm, float _duration = 0f)
	{
	}

	[Token(Token = "0x600015B")]
	[Address(RVA = "0xF8E1CC", Offset = "0xF8E1CC", VA = "0xF8E1CC")]
	public void ForceTargetPlayer(float _duration = 0f)
	{
	}

	[Token(Token = "0x600015C")]
	[Address(RVA = "0xF8E1E8", Offset = "0xF8E1E8", VA = "0xF8E1E8")]
	public void ForceNoTarget(float _duration = 0f)
	{
	}

	[Token(Token = "0x600015D")]
	[Address(RVA = "0xF8E1EC", Offset = "0xF8E1EC", VA = "0xF8E1EC")]
	public void ForceGenericTarget(int _targetNum, float _duration = 0f)
	{
	}

	[Token(Token = "0x600015E")]
	[Address(RVA = "0xF8E000", Offset = "0xF8E000", VA = "0xF8E000")]
	private void DisableLookAt(float _duration = 0f)
	{
	}

	[Token(Token = "0x600015F")]
	[Address(RVA = "0xF8E194", Offset = "0xF8E194", VA = "0xF8E194")]
	private void SetLookTime(float _duration = 0f)
	{
	}

	[Token(Token = "0x6000160")]
	[Address(RVA = "0xF8E32C", Offset = "0xF8E32C", VA = "0xF8E32C")]
	public LookAtManager()
	{
	}
}
[Token(Token = "0x2000041")]
public class PlayerTargetSetter : MonoBehaviour
{
	[Token(Token = "0x400020C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform vivePlayerTarget;

	[Token(Token = "0x400020D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform ocuPlayerTarget;

	[Token(Token = "0x6000161")]
	[Address(RVA = "0x1204DD0", Offset = "0x1204DD0", VA = "0x1204DD0")]
	public PlayerTargetSetter()
	{
	}
}
[Token(Token = "0x2000042")]
public class VoiceOverAnimTrigger : StateMachineBehaviour
{
	[Token(Token = "0x400020E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public VOType voType;

	[Token(Token = "0x400020F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5CE9B4", Offset = "0x5CE9B4")]
	public float triggerTime;

	[Token(Token = "0x4000210")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool played;

	[Token(Token = "0x4000211")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int forceLookAt;

	[Token(Token = "0x4000212")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float lookDuration;

	[Token(Token = "0x6000162")]
	[Address(RVA = "0xD0E20C", Offset = "0xD0E20C", VA = "0xD0E20C")]
	private bool CheckLookTarget()
	{
		return default(bool);
	}

	[Token(Token = "0x6000163")]
	[Address(RVA = "0xD0E21C", Offset = "0xD0E21C", VA = "0xD0E21C", Slot = "4")]
	public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000164")]
	[Address(RVA = "0xD0E29C", Offset = "0xD0E29C", VA = "0xD0E29C", Slot = "5")]
	public override void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000165")]
	[Address(RVA = "0xD0E348", Offset = "0xD0E348", VA = "0xD0E348")]
	public VoiceOverAnimTrigger()
	{
	}
}
[Serializable]
[Token(Token = "0x2000043")]
public class RoundVOs
{
	[Token(Token = "0x4000213")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public List<LipSyncData> introVOs;

	[Token(Token = "0x4000214")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<LipSyncData> winVOs;

	[Token(Token = "0x4000215")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<LipSyncData> loseVOs;

	[Token(Token = "0x4000216")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<LipSyncData> tauntVOs;

	[Token(Token = "0x6000166")]
	[Address(RVA = "0xCD15A8", Offset = "0xCD15A8", VA = "0xCD15A8")]
	public RoundVOs()
	{
	}

	[Token(Token = "0x6000167")]
	[Address(RVA = "0xCD16A0", Offset = "0xCD16A0", VA = "0xCD16A0")]
	public void LoadLipsyncAudio()
	{
	}

	[Token(Token = "0x6000168")]
	[Address(RVA = "0xCD16D8", Offset = "0xCD16D8", VA = "0xCD16D8")]
	private void LoadAudio(List<LipSyncData> _audio)
	{
	}
}
[Token(Token = "0x2000044")]
public enum VOType
{
	[Token(Token = "0x4000218")]
	e_intro,
	[Token(Token = "0x4000219")]
	e_win,
	[Token(Token = "0x400021A")]
	e_lose,
	[Token(Token = "0x400021B")]
	e_taunt,
	[Token(Token = "0x400021C")]
	e_compliment,
	[Token(Token = "0x400021D")]
	e_insult,
	[Token(Token = "0x400021E")]
	e_lobby
}
[Token(Token = "0x2000045")]
public class VoiceOverManager : MonoBehaviour
{
	[Token(Token = "0x400021F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<LipSync> lipSyncs;

	[Token(Token = "0x4000220")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public LipSync introLipSync;

	[Token(Token = "0x4000221")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[HideInInspector]
	public RoundVOs currentVOs;

	[Token(Token = "0x4000222")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public RoundVOs round1VOs;

	[Token(Token = "0x4000223")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[HideInInspector]
	public RoundVOs savedVOs;

	[Token(Token = "0x4000224")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public int debugVOs;

	[Token(Token = "0x4000225")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public List<LipSyncData> complimentVOs;

	[Token(Token = "0x4000226")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public List<LipSyncData> insultVOs;

	[Token(Token = "0x4000227")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[HideInInspector]
	public List<LipSyncData> savedCompliments;

	[Token(Token = "0x4000228")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[HideInInspector]
	public List<LipSyncData> savedInsults;

	[Token(Token = "0x4000229")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float voMinCooldown;

	[Token(Token = "0x400022A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public float voMaxCooldown;

	[Token(Token = "0x400022B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float voTimer;

	[Token(Token = "0x400022C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public float introDelay;

	[Token(Token = "0x400022D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float introTimer;

	[Token(Token = "0x400022E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public float outroDelay;

	[Token(Token = "0x400022F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public float lookAtPlayerTime;

	[Token(Token = "0x4000230")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private float outroTimer;

	[Token(Token = "0x4000231")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private VOType waitingForEnd;

	[Token(Token = "0x4000232")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private float endTimer;

	[Token(Token = "0x4000233")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x5CEA0C", Offset = "0x5CEA0C")]
	public List<LipSyncData> lobbyVOs;

	[Token(Token = "0x4000234")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x5CEA20", Offset = "0x5CEA20")]
	public AudioSource musicAS;

	[Token(Token = "0x4000235")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public AudioClip musicAC;

	[Token(Token = "0x4000236")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public AudioSource beepAS;

	[Token(Token = "0x4000237")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public AudioClip beepAC;

	[Token(Token = "0x4000238")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private bool fadeMusic;

	[Token(Token = "0x4000239")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB9")]
	private bool introFaded;

	[Token(Token = "0x400023A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBA")]
	private bool loaded;

	[Token(Token = "0x400023B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x5CEA58", Offset = "0x5CEA58")]
	public List<LipSyncData> manualVOs;

	[Token(Token = "0x400023C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x5CEA6C", Offset = "0x5CEA6C")]
	public VOType debugType;

	[Token(Token = "0x400023D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private HoloAnimationController animCon;

	[Token(Token = "0x400023E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private LookAtManager loMan;

	[Token(Token = "0x400023F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	[HideInInspector]
	private int curInsult;

	[Token(Token = "0x4000240")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	[HideInInspector]
	private int curCompliment;

	[Token(Token = "0x6000169")]
	[Address(RVA = "0xD0E35C", Offset = "0xD0E35C", VA = "0xD0E35C")]
	public void TestVoiceLine()
	{
	}

	[Token(Token = "0x600016A")]
	[Address(RVA = "0xD0E56C", Offset = "0xD0E56C", VA = "0xD0E56C")]
	private void Awake()
	{
	}

	[Token(Token = "0x600016B")]
	[Address(RVA = "0xD0E82C", Offset = "0xD0E82C", VA = "0xD0E82C")]
	public void LoadAll()
	{
	}

	[Token(Token = "0x600016C")]
	[Address(RVA = "0xD0E87C", Offset = "0xD0E87C", VA = "0xD0E87C")]
	private void LoadAudio(List<LipSyncData> _audio)
	{
	}

	[Token(Token = "0x600016D")]
	private List<LipSyncData> ShuffleList<LipSyncData>(List<LipSyncData> _toShuffle, [Optional] LipSyncData _last)
	{
		return null;
	}

	[Token(Token = "0x600016E")]
	[Address(RVA = "0xD0E91C", Offset = "0xD0E91C", VA = "0xD0E91C")]
	private void Update()
	{
	}

	[Token(Token = "0x600016F")]
	[Address(RVA = "0xD0EBFC", Offset = "0xD0EBFC", VA = "0xD0EBFC")]
	private void CheckEnd()
	{
	}

	[Token(Token = "0x6000170")]
	[Address(RVA = "0xD0E364", Offset = "0xD0E364", VA = "0xD0E364")]
	public void PlayVoiceLine(VOType _type)
	{
	}

	[Token(Token = "0x6000171")]
	[Address(RVA = "0xD0F078", Offset = "0xD0F078", VA = "0xD0F078")]
	private void PlayLipsync(List<LipSyncData> _data)
	{
	}

	[Token(Token = "0x6000172")]
	[Address(RVA = "0xD0EDD0", Offset = "0xD0EDD0", VA = "0xD0EDD0")]
	private void PlayLipsync(List<LipSyncData> _data, VOType _type)
	{
	}

	[Token(Token = "0x6000173")]
	[Address(RVA = "0xD0F120", Offset = "0xD0F120", VA = "0xD0F120")]
	private void PlayVOData(LipSyncData _data)
	{
	}

	[Token(Token = "0x6000174")]
	[Address(RVA = "0xD0ED84", Offset = "0xD0ED84", VA = "0xD0ED84")]
	public void PlaySound(AudioClip _clip, AudioSource _source)
	{
	}

	[Token(Token = "0x6000175")]
	[Address(RVA = "0xD0EA4C", Offset = "0xD0EA4C", VA = "0xD0EA4C")]
	private void StartGame()
	{
	}

	[Token(Token = "0x6000176")]
	[Address(RVA = "0xD0F1C8", Offset = "0xD0F1C8", VA = "0xD0F1C8")]
	public VoiceOverManager()
	{
	}
}
[Token(Token = "0x2000046")]
public class CubeSound : MonoBehaviour
{
	[Token(Token = "0x4000241")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SubbandBeatDetection selectedBeatDetection;

	[Token(Token = "0x4000242")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int[] subbandsToEar;

	[Token(Token = "0x4000243")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private MeshRenderer myMeshRenderer;

	[Token(Token = "0x4000244")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Color beatedColor;

	[Token(Token = "0x4000245")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float smoothnessChange;

	[Token(Token = "0x6000177")]
	[Address(RVA = "0xCC20D0", Offset = "0xCC20D0", VA = "0xCC20D0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000178")]
	[Address(RVA = "0xCC2210", Offset = "0xCC2210", VA = "0xCC2210")]
	private void Update()
	{
	}

	[Token(Token = "0x6000179")]
	[Address(RVA = "0xCC22E0", Offset = "0xCC22E0", VA = "0xCC22E0")]
	private void OnBeat()
	{
	}

	[Token(Token = "0x600017A")]
	[Address(RVA = "0xCC230C", Offset = "0xCC230C", VA = "0xCC230C")]
	public CubeSound()
	{
	}
}
[Token(Token = "0x2000047")]
public class CubesManager : MonoBehaviour
{
	[Token(Token = "0x4000246")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public CubeSound prefabObject;

	[Token(Token = "0x4000247")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public SubbandBeatDetection selectedBeatDetection;

	[Token(Token = "0x4000248")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int cubesToSpawn;

	[Token(Token = "0x600017B")]
	[Address(RVA = "0xCC2314", Offset = "0xCC2314", VA = "0xCC2314")]
	private void Awake()
	{
	}

	[Token(Token = "0x600017C")]
	[Address(RVA = "0xCC24D4", Offset = "0xCC24D4", VA = "0xCC24D4")]
	public CubesManager()
	{
	}
}
[Token(Token = "0x2000048")]
public class SubbandBeatDetection : MonoBehaviour
{
	[Token(Token = "0x2000365")]
	public class SubBand
	{
		[Token(Token = "0x20004F4")]
		public delegate void OnBeatHandler();

		[Token(Token = "0x40017C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float instantEnergy;

		[Token(Token = "0x40017CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float averageEnergy;

		[Token(Token = "0x40017CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float instantVariance;

		[Token(Token = "0x40017CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int frequencyWidth;

		[Token(Token = "0x40017CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float[] historyBuffer;

		[Token(Token = "0x1400001F")]
		public event OnBeatHandler OnBeat
		{
			[Token(Token = "0x6001901")]
			[Address(RVA = "0x138A63C", Offset = "0x138A63C", VA = "0x138A63C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5DA6E4", Offset = "0x5DA6E4")]
			add
			{
			}
			[Token(Token = "0x6001902")]
			[Address(RVA = "0x138A6DC", Offset = "0x138A6DC", VA = "0x138A6DC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5DA6F4", Offset = "0x5DA6F4")]
			remove
			{
			}
		}

		[Token(Token = "0x6001903")]
		[Address(RVA = "0x138A77C", Offset = "0x138A77C", VA = "0x138A77C")]
		public SubBand(int _index)
		{
		}

		[Token(Token = "0x6001904")]
		[Address(RVA = "0x138A818", Offset = "0x138A818", VA = "0x138A818")]
		public void ComputeInstantEnergy(int _start, int _end, float[] _samples0, float[] _samples1)
		{
		}

		[Token(Token = "0x6001905")]
		[Address(RVA = "0x138A950", Offset = "0x138A950", VA = "0x138A950")]
		public void ComputeAverageEnergy()
		{
		}

		[Token(Token = "0x6001906")]
		[Address(RVA = "0x138AB44", Offset = "0x138AB44", VA = "0x138AB44")]
		public void ComputeInstantVariance()
		{
		}

		[Token(Token = "0x6001907")]
		[Address(RVA = "0x138AC30", Offset = "0x138AC30", VA = "0x138AC30")]
		public void hasBeated()
		{
		}

		[Token(Token = "0x6001908")]
		[Address(RVA = "0x138AAD4", Offset = "0x138AAD4", VA = "0x138AAD4")]
		private void OverrideElementsToAnotherArray(float[] _from, float[] _to)
		{
		}

		[Token(Token = "0x6001909")]
		[Address(RVA = "0x138A9F8", Offset = "0x138A9F8", VA = "0x138A9F8")]
		private float[] ShiftArray(float[] _array, int amount)
		{
			return null;
		}
	}

	[Token(Token = "0x4000249")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioSource audioSource;

	[Token(Token = "0x400024A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x5CEAA0", Offset = "0x5CEAA0")]
	public int numSubbands;

	[Token(Token = "0x400024B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int numSamples;

	[Token(Token = "0x400024C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public FFTWindow FFTWindow;

	[Token(Token = "0x400024D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float[] samplesLeftChannel;

	[Token(Token = "0x400024E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float[] samplesRightChannel;

	[Token(Token = "0x400024F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CEAD8", Offset = "0x5CEAD8")]
	private SubBand[] <subBands>k__BackingField;

	[Token(Token = "0x4000250")]
	private const float a = 0.44f;

	[Token(Token = "0x4000251")]
	private const float b = 1.56f;

	[Token(Token = "0x4000252")]
	private const int beatSensivity = 5;

	[Token(Token = "0x4000253")]
	private const float varianceSensivity = 1E-05f;

	[Token(Token = "0x17000004")]
	public SubBand[] subBands
	{
		[Token(Token = "0x600017D")]
		[Address(RVA = "0x13B0490", Offset = "0x13B0490", VA = "0x13B0490")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D7798", Offset = "0x5D7798")]
		get
		{
			return null;
		}
		[Token(Token = "0x600017E")]
		[Address(RVA = "0x13B0498", Offset = "0x13B0498", VA = "0x13B0498")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D77A8", Offset = "0x5D77A8")]
		set
		{
		}
	}

	[Token(Token = "0x600017F")]
	[Address(RVA = "0x13B04A0", Offset = "0x13B04A0", VA = "0x13B04A0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000180")]
	[Address(RVA = "0x13B061C", Offset = "0x13B061C", VA = "0x13B061C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000181")]
	[Address(RVA = "0x13B07B8", Offset = "0x13B07B8", VA = "0x13B07B8")]
	public SubbandBeatDetection()
	{
	}
}
[Token(Token = "0x2000049")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5C9820", Offset = "0x5C9820")]
public class Effect_BlendShapes : LightShowEffect
{
	[Serializable]
	[Token(Token = "0x2000366")]
	public struct BlendShapeProperty
	{
		[Token(Token = "0x40017CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int index;

		[Token(Token = "0x40017CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public Vector2 startEnd;

		[Token(Token = "0x40017D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool gradientPulse;
	}

	[Token(Token = "0x4000254")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<BlendShapeProperty> properties;

	[Token(Token = "0x4000255")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<SkinnedMeshRenderer> renderers;

	[Token(Token = "0x4000256")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float pulseTime;

	[Token(Token = "0x4000257")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float timer;

	[Token(Token = "0x4000258")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool startOff;

	[Token(Token = "0x6000182")]
	[Address(RVA = "0x9FF7F8", Offset = "0x9FF7F8", VA = "0x9FF7F8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000183")]
	[Address(RVA = "0x9FF810", Offset = "0x9FF810", VA = "0x9FF810")]
	private void Update()
	{
	}

	[Token(Token = "0x6000184")]
	[Address(RVA = "0x9FFA6C", Offset = "0x9FFA6C", VA = "0x9FFA6C", Slot = "4")]
	public override void Pulse()
	{
	}

	[Token(Token = "0x6000185")]
	[Address(RVA = "0x9FFAA4", Offset = "0x9FFAA4", VA = "0x9FFAA4", Slot = "6")]
	public override void TurnOff()
	{
	}

	[Token(Token = "0x6000186")]
	[Address(RVA = "0x9FFBC8", Offset = "0x9FFBC8", VA = "0x9FFBC8", Slot = "5")]
	public override void TurnOn()
	{
	}

	[Token(Token = "0x6000187")]
	[Address(RVA = "0x9FFCEC", Offset = "0x9FFCEC", VA = "0x9FFCEC")]
	public void GetRenderersFromChildren()
	{
	}

	[Token(Token = "0x6000188")]
	[Address(RVA = "0x9FF9B4", Offset = "0x9FF9B4", VA = "0x9FF9B4")]
	private void SetValue(float value, int index)
	{
	}

	[Token(Token = "0x6000189")]
	[Address(RVA = "0x9FFDC4", Offset = "0x9FFDC4", VA = "0x9FFDC4")]
	public Effect_BlendShapes()
	{
	}
}
[Token(Token = "0x200004A")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5C985C", Offset = "0x5C985C")]
public class Effect_Rotation : LightShowEffect
{
	[Token(Token = "0x4000259")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<Transform> objects;

	[Token(Token = "0x400025A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector3 axis;

	[Token(Token = "0x400025B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool localSpace;

	[Token(Token = "0x400025C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float pulseDegrees;

	[Token(Token = "0x400025D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float pulseTime;

	[Token(Token = "0x400025E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float onSpeed;

	[Token(Token = "0x400025F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float offSpeed;

	[Token(Token = "0x4000260")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float rotateSpeed;

	[Token(Token = "0x4000261")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float timer;

	[Token(Token = "0x4000262")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public AnimationCurve curve;

	[Token(Token = "0x4000263")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private List<Quaternion> startPulseRots;

	[Token(Token = "0x4000264")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private List<Quaternion> endPulseRots;

	[Token(Token = "0x4000265")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public bool yellowOverride;

	[Token(Token = "0x600018A")]
	[Address(RVA = "0x9FFDD4", Offset = "0x9FFDD4", VA = "0x9FFDD4")]
	private void Start()
	{
	}

	[Token(Token = "0x600018B")]
	[Address(RVA = "0x9FFEE4", Offset = "0x9FFEE4", VA = "0x9FFEE4")]
	private void Update()
	{
	}

	[Token(Token = "0x600018C")]
	[Address(RVA = "0xA00150", Offset = "0xA00150", VA = "0xA00150", Slot = "4")]
	public override void Pulse()
	{
	}

	[Token(Token = "0x600018D")]
	[Address(RVA = "0xA0030C", Offset = "0xA0030C", VA = "0xA0030C", Slot = "6")]
	public override void TurnOff()
	{
	}

	[Token(Token = "0x600018E")]
	[Address(RVA = "0xA00338", Offset = "0xA00338", VA = "0xA00338", Slot = "5")]
	public override void TurnOn()
	{
	}

	[Token(Token = "0x600018F")]
	[Address(RVA = "0xA00364", Offset = "0xA00364", VA = "0xA00364")]
	public Effect_Rotation()
	{
	}
}
[Token(Token = "0x200004B")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5C9898", Offset = "0x5C9898")]
public class Effect_ShaderColour : LightShowEffect
{
	[Serializable]
	[Token(Token = "0x2000367")]
	public struct ShaderProperty
	{
		[Token(Token = "0x40017D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string property;

		[Token(Token = "0x40017D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Color startColour;

		[Token(Token = "0x40017D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Color endColour;

		[Token(Token = "0x40017D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool gradientPulse;
	}

	[Token(Token = "0x4000266")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<ShaderProperty> properties;

	[Token(Token = "0x4000267")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<Renderer> renderers;

	[Token(Token = "0x4000268")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float pulseTime;

	[Token(Token = "0x4000269")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float timer;

	[Token(Token = "0x400026A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool startOff;

	[Token(Token = "0x6000190")]
	[Address(RVA = "0xA00458", Offset = "0xA00458", VA = "0xA00458")]
	private void Start()
	{
	}

	[Token(Token = "0x6000191")]
	[Address(RVA = "0xA00470", Offset = "0xA00470", VA = "0xA00470")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000192")]
	[Address(RVA = "0xA0080C", Offset = "0xA0080C", VA = "0xA0080C", Slot = "4")]
	public override void Pulse()
	{
	}

	[Token(Token = "0x6000193")]
	[Address(RVA = "0xA00844", Offset = "0xA00844", VA = "0xA00844", Slot = "6")]
	public override void TurnOff()
	{
	}

	[Token(Token = "0x6000194")]
	[Address(RVA = "0xA00978", Offset = "0xA00978", VA = "0xA00978", Slot = "5")]
	public override void TurnOn()
	{
	}

	[Token(Token = "0x6000195")]
	[Address(RVA = "0xA00AAC", Offset = "0xA00AAC", VA = "0xA00AAC")]
	public void GetRenderersFromChildren()
	{
	}

	[Token(Token = "0x6000196")]
	[Address(RVA = "0xA005B8", Offset = "0xA005B8", VA = "0xA005B8")]
	private void SetValue(Color value, string prop)
	{
	}

	[Token(Token = "0x6000197")]
	[Address(RVA = "0xA00B84", Offset = "0xA00B84", VA = "0xA00B84")]
	public Effect_ShaderColour()
	{
	}
}
[Token(Token = "0x200004C")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5C98D4", Offset = "0x5C98D4")]
public class Effect_ShaderFloat : LightShowEffect
{
	[Serializable]
	[Token(Token = "0x2000368")]
	public struct ShaderProperty
	{
		[Token(Token = "0x40017D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string property;

		[Token(Token = "0x40017D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Vector2 startEnd;

		[Token(Token = "0x40017D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool gradientPulse;
	}

	[Token(Token = "0x400026B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<ShaderProperty> properties;

	[Token(Token = "0x400026C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<Renderer> renderers;

	[Token(Token = "0x400026D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float pulseTime;

	[Token(Token = "0x400026E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float timer;

	[Token(Token = "0x400026F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool startOff;

	[Token(Token = "0x6000198")]
	[Address(RVA = "0xA00B94", Offset = "0xA00B94", VA = "0xA00B94")]
	private void Start()
	{
	}

	[Token(Token = "0x6000199")]
	[Address(RVA = "0xA00BAC", Offset = "0xA00BAC", VA = "0xA00BAC")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x600019A")]
	[Address(RVA = "0xA00F10", Offset = "0xA00F10", VA = "0xA00F10", Slot = "4")]
	public override void Pulse()
	{
	}

	[Token(Token = "0x600019B")]
	[Address(RVA = "0xA00F48", Offset = "0xA00F48", VA = "0xA00F48", Slot = "6")]
	public override void TurnOff()
	{
	}

	[Token(Token = "0x600019C")]
	[Address(RVA = "0xA0107C", Offset = "0xA0107C", VA = "0xA0107C", Slot = "5")]
	public override void TurnOn()
	{
	}

	[Token(Token = "0x600019D")]
	[Address(RVA = "0xA011B0", Offset = "0xA011B0", VA = "0xA011B0")]
	public void GetRenderersFromChildren()
	{
	}

	[Token(Token = "0x600019E")]
	[Address(RVA = "0xA00CDC", Offset = "0xA00CDC", VA = "0xA00CDC")]
	private void SetValue(float value, string prop)
	{
	}

	[Token(Token = "0x600019F")]
	[Address(RVA = "0xA01288", Offset = "0xA01288", VA = "0xA01288")]
	public Effect_ShaderFloat()
	{
	}
}
[Token(Token = "0x200004D")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5C9910", Offset = "0x5C9910")]
public class Effect_ShaderTexture : LightShowEffect
{
	[Serializable]
	[Token(Token = "0x2000369")]
	public struct ShaderProperty
	{
		[Token(Token = "0x40017D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string property;

		[Token(Token = "0x40017D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Texture startTex;

		[Token(Token = "0x40017DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Texture endTex;
	}

	[Token(Token = "0x4000270")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<ShaderProperty> properties;

	[Token(Token = "0x4000271")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<Renderer> renderers;

	[Token(Token = "0x4000272")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float pulseTime;

	[Token(Token = "0x4000273")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float timer;

	[Token(Token = "0x4000274")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool startOff;

	[Token(Token = "0x60001A0")]
	[Address(RVA = "0xA01298", Offset = "0xA01298", VA = "0xA01298")]
	private void Start()
	{
	}

	[Token(Token = "0x60001A1")]
	[Address(RVA = "0xA012B0", Offset = "0xA012B0", VA = "0xA012B0")]
	private void Update()
	{
	}

	[Token(Token = "0x60001A2")]
	[Address(RVA = "0xA01330", Offset = "0xA01330", VA = "0xA01330", Slot = "4")]
	public override void Pulse()
	{
	}

	[Token(Token = "0x60001A3")]
	[Address(RVA = "0xA01368", Offset = "0xA01368", VA = "0xA01368", Slot = "6")]
	public override void TurnOff()
	{
	}

	[Token(Token = "0x60001A4")]
	[Address(RVA = "0xA015EC", Offset = "0xA015EC", VA = "0xA015EC", Slot = "5")]
	public override void TurnOn()
	{
	}

	[Token(Token = "0x60001A5")]
	[Address(RVA = "0xA0171C", Offset = "0xA0171C", VA = "0xA0171C")]
	public void GetRenderersFromChildren()
	{
	}

	[Token(Token = "0x60001A6")]
	[Address(RVA = "0xA0149C", Offset = "0xA0149C", VA = "0xA0149C")]
	private void SetValue(Texture value, string prop)
	{
	}

	[Token(Token = "0x60001A7")]
	[Address(RVA = "0xA017F4", Offset = "0xA017F4", VA = "0xA017F4")]
	public Effect_ShaderTexture()
	{
	}
}
[Token(Token = "0x200004E")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5C994C", Offset = "0x5C994C")]
public class Effect_ToggleGameObject : LightShowEffect
{
	[Token(Token = "0x4000275")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<GameObject> objects;

	[Token(Token = "0x4000276")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float pulseTime;

	[Token(Token = "0x4000277")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float timer;

	[Token(Token = "0x60001A8")]
	[Address(RVA = "0xA01804", Offset = "0xA01804", VA = "0xA01804")]
	private void Update()
	{
	}

	[Token(Token = "0x60001A9")]
	[Address(RVA = "0xA018D8", Offset = "0xA018D8", VA = "0xA018D8", Slot = "4")]
	public override void Pulse()
	{
	}

	[Token(Token = "0x60001AA")]
	[Address(RVA = "0xA01990", Offset = "0xA01990", VA = "0xA01990", Slot = "6")]
	public override void TurnOff()
	{
	}

	[Token(Token = "0x60001AB")]
	[Address(RVA = "0xA01A40", Offset = "0xA01A40", VA = "0xA01A40", Slot = "5")]
	public override void TurnOn()
	{
	}

	[Token(Token = "0x60001AC")]
	[Address(RVA = "0xA01AF0", Offset = "0xA01AF0", VA = "0xA01AF0")]
	public Effect_ToggleGameObject()
	{
	}
}
[Token(Token = "0x200004F")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5C9988", Offset = "0x5C9988")]
public class Effect_Translate : LightShowEffect
{
	[Token(Token = "0x4000278")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform _object;

	[Token(Token = "0x4000279")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform onPos;

	[Token(Token = "0x400027A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float lerpValue;

	[Token(Token = "0x400027B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Vector3 targetPos;

	[Token(Token = "0x400027C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector3 startPos;

	[Token(Token = "0x400027D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float pulseTime;

	[Token(Token = "0x400027E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public AnimationCurve curve;

	[Token(Token = "0x400027F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float timer;

	[Token(Token = "0x4000280")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public bool yellowOverride;

	[Token(Token = "0x60001AD")]
	[Address(RVA = "0xA01B00", Offset = "0xA01B00", VA = "0xA01B00", Slot = "4")]
	public override void Pulse()
	{
	}

	[Token(Token = "0x60001AE")]
	[Address(RVA = "0xA01B2C", Offset = "0xA01B2C", VA = "0xA01B2C", Slot = "6")]
	public override void TurnOff()
	{
	}

	[Token(Token = "0x60001AF")]
	[Address(RVA = "0xA01B60", Offset = "0xA01B60", VA = "0xA01B60", Slot = "5")]
	public override void TurnOn()
	{
	}

	[Token(Token = "0x60001B0")]
	[Address(RVA = "0xA01BA0", Offset = "0xA01BA0", VA = "0xA01BA0")]
	private void Start()
	{
	}

	[Token(Token = "0x60001B1")]
	[Address(RVA = "0xA01CD8", Offset = "0xA01CD8", VA = "0xA01CD8")]
	private void Update()
	{
	}

	[Token(Token = "0x60001B2")]
	[Address(RVA = "0xA01E70", Offset = "0xA01E70", VA = "0xA01E70")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x60001B3")]
	[Address(RVA = "0xA01F18", Offset = "0xA01F18", VA = "0xA01F18")]
	public Effect_Translate()
	{
	}
}
[Token(Token = "0x2000050")]
public class LightShowEffect : MonoBehaviour
{
	[Token(Token = "0x60001B4")]
	[Address(RVA = "0x102ECE8", Offset = "0x102ECE8", VA = "0x102ECE8", Slot = "4")]
	public virtual void Pulse()
	{
	}

	[Token(Token = "0x60001B5")]
	[Address(RVA = "0x102ECEC", Offset = "0x102ECEC", VA = "0x102ECEC", Slot = "5")]
	public virtual void TurnOn()
	{
	}

	[Token(Token = "0x60001B6")]
	[Address(RVA = "0x102ECF0", Offset = "0x102ECF0", VA = "0x102ECF0", Slot = "6")]
	public virtual void TurnOff()
	{
	}

	[Token(Token = "0x60001B7")]
	[Address(RVA = "0x102ECF4", Offset = "0x102ECF4", VA = "0x102ECF4")]
	public void Trigger(LightShowManager.e_EffectType type)
	{
	}

	[Token(Token = "0x60001B8")]
	[Address(RVA = "0x102ED30", Offset = "0x102ED30", VA = "0x102ED30")]
	public LightShowEffect()
	{
	}
}
[Token(Token = "0x2000051")]
public class LightShowManager : MonoBehaviour
{
	[Token(Token = "0x200036A")]
	public enum e_EffectType
	{
		[Token(Token = "0x40017DC")]
		Pulse,
		[Token(Token = "0x40017DD")]
		On,
		[Token(Token = "0x40017DE")]
		Off,
		[Token(Token = "0x40017DF")]
		None
	}

	[Token(Token = "0x200036B")]
	public enum e_EffectGroup
	{
		[Token(Token = "0x40017E1")]
		Double,
		[Token(Token = "0x40017E2")]
		SetComplete,
		[Token(Token = "0x40017E3")]
		SetHit,
		[Token(Token = "0x40017E4")]
		LeftCascadeStart,
		[Token(Token = "0x40017E5")]
		LeftCascadeComplete,
		[Token(Token = "0x40017E6")]
		LeftCascadeBreak,
		[Token(Token = "0x40017E7")]
		RightCascadeStart,
		[Token(Token = "0x40017E8")]
		RightCascadeComplete,
		[Token(Token = "0x40017E9")]
		RightCascadeBreak
	}

	[Serializable]
	[Token(Token = "0x200036C")]
	public class Instruction
	{
		[Token(Token = "0x40017EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public LightShowEffect effect;

		[Token(Token = "0x40017EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public e_EffectType type;

		[Token(Token = "0x600190A")]
		[Address(RVA = "0x7EF210", Offset = "0x7EF210", VA = "0x7EF210")]
		public void Trigger()
		{
		}

		[Token(Token = "0x600190B")]
		[Address(RVA = "0x7EF234", Offset = "0x7EF234", VA = "0x7EF234")]
		public Instruction()
		{
		}
	}

	[Token(Token = "0x4000281")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<Instruction> DoubleGroup;

	[Token(Token = "0x4000282")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x5CEAE8", Offset = "0x5CEAE8")]
	public List<Instruction> SetCompleteGroup;

	[Token(Token = "0x4000283")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<Instruction> SetHitGroup;

	[Token(Token = "0x4000284")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x5CEB20", Offset = "0x5CEB20")]
	public List<Instruction> LeftCascadeStartGroup;

	[Token(Token = "0x4000285")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public List<Instruction> LeftCascadeEndGroup;

	[Token(Token = "0x4000286")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public List<Instruction> LeftCascadeBreakGroup;

	[Token(Token = "0x4000287")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public List<Instruction> RightCascadeStartGroup;

	[Token(Token = "0x4000288")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public List<Instruction> RightCascadeEndGroup;

	[Token(Token = "0x4000289")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public List<Instruction> RightCascadeBreakGroup;

	[Token(Token = "0x60001B9")]
	[Address(RVA = "0x102ED38", Offset = "0x102ED38", VA = "0x102ED38")]
	private void Start()
	{
	}

	[Token(Token = "0x60001BA")]
	[Address(RVA = "0x102EDB8", Offset = "0x102EDB8", VA = "0x102EDB8")]
	public void Trigger(e_EffectGroup group)
	{
	}

	[Token(Token = "0x60001BB")]
	[Address(RVA = "0x102EEF4", Offset = "0x102EEF4", VA = "0x102EEF4")]
	private void TriggerGroup(List<Instruction> instructions)
	{
	}

	[Token(Token = "0x60001BC")]
	[Address(RVA = "0x102EF8C", Offset = "0x102EF8C", VA = "0x102EF8C")]
	public void TestDouble()
	{
	}

	[Token(Token = "0x60001BD")]
	[Address(RVA = "0x102EF94", Offset = "0x102EF94", VA = "0x102EF94")]
	public void TestSetHit()
	{
	}

	[Token(Token = "0x60001BE")]
	[Address(RVA = "0x102EF9C", Offset = "0x102EF9C", VA = "0x102EF9C")]
	public void TestSetComplete()
	{
	}

	[Token(Token = "0x60001BF")]
	[Address(RVA = "0x102EFA4", Offset = "0x102EFA4", VA = "0x102EFA4")]
	public void TestLeftCascadeStart()
	{
	}

	[Token(Token = "0x60001C0")]
	[Address(RVA = "0x102EFAC", Offset = "0x102EFAC", VA = "0x102EFAC")]
	public void TestRightCascadeStart()
	{
	}

	[Token(Token = "0x60001C1")]
	[Address(RVA = "0x102EFB4", Offset = "0x102EFB4", VA = "0x102EFB4")]
	public void TestLeftCascadeBreak()
	{
	}

	[Token(Token = "0x60001C2")]
	[Address(RVA = "0x102EFBC", Offset = "0x102EFBC", VA = "0x102EFBC")]
	public void TestRightCascadeBreak()
	{
	}

	[Token(Token = "0x60001C3")]
	[Address(RVA = "0x102EFC4", Offset = "0x102EFC4", VA = "0x102EFC4")]
	public void TestLeftCascadeComplete()
	{
	}

	[Token(Token = "0x60001C4")]
	[Address(RVA = "0x102EFCC", Offset = "0x102EFCC", VA = "0x102EFCC")]
	public void TestRightCascadeComplete()
	{
	}

	[Token(Token = "0x60001C5")]
	[Address(RVA = "0x102EFD4", Offset = "0x102EFD4", VA = "0x102EFD4")]
	public LightShowManager()
	{
	}
}
[Token(Token = "0x2000052")]
public class LookAt_PerAxis : MonoBehaviour
{
	[Token(Token = "0x400028A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform target;

	[Token(Token = "0x400028B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool x;

	[Token(Token = "0x400028C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool y;

	[Token(Token = "0x400028D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
	public bool z;

	[Token(Token = "0x60001C6")]
	[Address(RVA = "0xF8E4DC", Offset = "0xF8E4DC", VA = "0xF8E4DC")]
	private void Start()
	{
	}

	[Token(Token = "0x60001C7")]
	[Address(RVA = "0xF8E4E0", Offset = "0xF8E4E0", VA = "0xF8E4E0")]
	private void Update()
	{
	}

	[Token(Token = "0x60001C8")]
	[Address(RVA = "0xF8E620", Offset = "0xF8E620", VA = "0xF8E620")]
	public LookAt_PerAxis()
	{
	}
}
[Token(Token = "0x2000053")]
public class NodePreviewManager : MonoBehaviour
{
	[Token(Token = "0x60001C9")]
	[Address(RVA = "0x16F8028", Offset = "0x16F8028", VA = "0x16F8028")]
	private void Start()
	{
	}

	[Token(Token = "0x60001CA")]
	[Address(RVA = "0x16F802C", Offset = "0x16F802C", VA = "0x16F802C")]
	private void Update()
	{
	}

	[Token(Token = "0x60001CB")]
	[Address(RVA = "0x16F8030", Offset = "0x16F8030", VA = "0x16F8030")]
	public void PlayPreview(string previewFileName)
	{
	}

	[Token(Token = "0x60001CC")]
	[Address(RVA = "0x16F80DC", Offset = "0x16F80DC", VA = "0x16F80DC")]
	public NodePreviewManager()
	{
	}
}
[Token(Token = "0x2000054")]
public class OpenURL : MonoBehaviour
{
	[Token(Token = "0x400028E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string URL;

	[Token(Token = "0x60001CD")]
	[Address(RVA = "0x13148F0", Offset = "0x13148F0", VA = "0x13148F0")]
	public void Open()
	{
	}

	[Token(Token = "0x60001CE")]
	[Address(RVA = "0x13148FC", Offset = "0x13148FC", VA = "0x13148FC")]
	public OpenURL()
	{
	}
}
[Token(Token = "0x2000055")]
public class Persistence : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x200036D")]
	public class Difficulty
	{
		[Token(Token = "0x40017EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int delay;

		[Token(Token = "0x40017ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float sizeMod;

		[Token(Token = "0x40017EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float offsetMod;

		[Token(Token = "0x40017EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float damage;

		[Token(Token = "0x40017F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float heal;

		[Token(Token = "0x600190C")]
		[Address(RVA = "0xFF0D44", Offset = "0xFF0D44", VA = "0xFF0D44")]
		public Difficulty()
		{
		}
	}

	[Token(Token = "0x200036E")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDB4C", Offset = "0x5CDB4C")]
	private sealed class <SetaudioLate>d__33 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40017F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40017F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x17000287")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001910")]
			[Address(RVA = "0xFF0CF4", Offset = "0xFF0CF4", VA = "0xFF0CF4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000288")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001912")]
			[Address(RVA = "0xFF0D3C", Offset = "0xFF0D3C", VA = "0xFF0D3C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600190D")]
		[Address(RVA = "0xFF0C1C", Offset = "0xFF0C1C", VA = "0xFF0C1C")]
		[DebuggerHidden]
		public <SetaudioLate>d__33(int <>1__state)
		{
		}

		[Token(Token = "0x600190E")]
		[Address(RVA = "0xFF0C48", Offset = "0xFF0C48", VA = "0xFF0C48", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600190F")]
		[Address(RVA = "0xFF0C4C", Offset = "0xFF0C4C", VA = "0xFF0C4C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001911")]
		[Address(RVA = "0xFF0CFC", Offset = "0xFF0CFC", VA = "0xFF0CFC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400028F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Persistence instance;

	[Token(Token = "0x4000290")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	public string currentSongFilename;

	[Token(Token = "0x4000291")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	public bool builtInSong;

	[Token(Token = "0x4000292")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private LeaderboardManager lbMan;

	[Token(Token = "0x4000293")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public SaveManager svMan;

	[Token(Token = "0x4000294")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AchievementsManager achMan;

	[Token(Token = "0x4000295")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AudioMixer masterMix;

	[Token(Token = "0x4000296")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Terminal console;

	[Token(Token = "0x4000297")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[HideInInspector]
	public bool oculusInitialised;

	[Token(Token = "0x4000298")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
	public bool devConsoleEnabled;

	[Token(Token = "0x4000299")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
	public bool fromEditor;

	[Token(Token = "0x400029A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public InputAction PauseAction;

	[Token(Token = "0x400029B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public InputAction SkipAction;

	[Token(Token = "0x400029C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public string songName;

	[Token(Token = "0x400029D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public string characterName;

	[Token(Token = "0x400029E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public int currentDifficulty;

	[Token(Token = "0x400029F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Difficulty Easy;

	[Token(Token = "0x40002A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Difficulty Normal;

	[Token(Token = "0x40002A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Difficulty Hard;

	[Token(Token = "0x40002A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Difficulty Extreme;

	[Token(Token = "0x40002A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public int lobbyscreen;

	[Token(Token = "0x40002A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	public bool nofail;

	[Token(Token = "0x40002A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Vector3Int minAuraValues;

	[Token(Token = "0x40002A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	private Vector3Int maxAuraValues;

	[Token(Token = "0x40002A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private bool lastPause;

	[Token(Token = "0x60001CF")]
	[Address(RVA = "0x1201F38", Offset = "0x1201F38", VA = "0x1201F38")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001D0")]
	[Address(RVA = "0x1202270", Offset = "0x1202270", VA = "0x1202270")]
	public void ToggleOverlay(bool toggle)
	{
	}

	[Token(Token = "0x60001D1")]
	[Address(RVA = "0x1202274", Offset = "0x1202274", VA = "0x1202274")]
	private void SetupLIV()
	{
	}

	[Token(Token = "0x60001D2")]
	[Address(RVA = "0x1202278", Offset = "0x1202278", VA = "0x1202278")]
	public Difficulty GetDifficuty()
	{
		return null;
	}

	[Token(Token = "0x60001D3")]
	[Address(RVA = "0x12022BC", Offset = "0x12022BC", VA = "0x12022BC")]
	private void Start()
	{
	}

	[Token(Token = "0x60001D4")]
	[Address(RVA = "0x12022C0", Offset = "0x12022C0", VA = "0x12022C0")]
	private void Update()
	{
	}

	[Token(Token = "0x60001D5")]
	[Address(RVA = "0x1202208", Offset = "0x1202208", VA = "0x1202208")]
	private void LevelLoaded(Scene scene, LoadSceneMode mode)
	{
	}

	[Token(Token = "0x60001D6")]
	[Address(RVA = "0x12022C4", Offset = "0x12022C4", VA = "0x12022C4")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D77B8", Offset = "0x5D77B8")]
	private IEnumerator SetaudioLate()
	{
		return null;
	}

	[Token(Token = "0x60001D7")]
	[Address(RVA = "0x1202320", Offset = "0x1202320", VA = "0x1202320")]
	public void ToggleTerminal(bool toggle)
	{
	}

	[Token(Token = "0x60001D8")]
	[Address(RVA = "0x120235C", Offset = "0x120235C", VA = "0x120235C")]
	public void SetLeaderboardTarget()
	{
	}

	[Token(Token = "0x60001D9")]
	[Address(RVA = "0x1202360", Offset = "0x1202360", VA = "0x1202360")]
	public void UpdateLeaderboard()
	{
	}

	[Token(Token = "0x60001DA")]
	[Address(RVA = "0x120245C", Offset = "0x120245C", VA = "0x120245C")]
	public void UploadScore(int _score, Score.Rank _grade)
	{
	}

	[Token(Token = "0x60001DB")]
	[Address(RVA = "0x1202460", Offset = "0x1202460", VA = "0x1202460")]
	public void ResetLeaderboardManager()
	{
	}

	[Token(Token = "0x60001DC")]
	[Address(RVA = "0x120247C", Offset = "0x120247C", VA = "0x120247C")]
	public string GetPlayerName()
	{
		return null;
	}

	[Token(Token = "0x60001DD")]
	[Address(RVA = "0x12024C0", Offset = "0x12024C0", VA = "0x12024C0")]
	public void InitPlayerName()
	{
	}

	[Token(Token = "0x60001DE")]
	[Address(RVA = "0x12024DC", Offset = "0x12024DC", VA = "0x12024DC")]
	public void UpdateAchievements()
	{
	}

	[Token(Token = "0x60001DF")]
	[Address(RVA = "0x12024F8", Offset = "0x12024F8", VA = "0x12024F8")]
	public void CheckDevConsole()
	{
	}

	[Token(Token = "0x60001E0")]
	[Address(RVA = "0x12024FC", Offset = "0x12024FC", VA = "0x12024FC")]
	public Vector3Int GetAuraResolution()
	{
		return default(Vector3Int);
	}

	[Token(Token = "0x60001E1")]
	[Address(RVA = "0x1202608", Offset = "0x1202608", VA = "0x1202608")]
	public void SetAA()
	{
	}

	[Token(Token = "0x60001E2")]
	[Address(RVA = "0x1202674", Offset = "0x1202674", VA = "0x1202674")]
	public Persistence()
	{
	}
}
[Token(Token = "0x2000056")]
public class PlatformManager : MonoBehaviour
{
	[Token(Token = "0x40002A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static PlatformManager inst;

	[Token(Token = "0x40002A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LeaderboardManager lbMan;

	[Token(Token = "0x40002AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool paused;

	[Token(Token = "0x40002AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	private bool waitingForOculus;

	[Token(Token = "0x40002AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
	private bool waitingForSteamVR;

	[Token(Token = "0x40002AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x23")]
	private bool waitingForStove;

	[Token(Token = "0x40002AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private HardwareType hardware;

	[Token(Token = "0x40002AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private GameObject avatar;

	[Token(Token = "0x40002B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static readonly string VIVEPORT_ID;

	[Token(Token = "0x40002B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static readonly string VIVEPORT_KEY;

	[Token(Token = "0x60001E3")]
	[Address(RVA = "0x1204AC0", Offset = "0x1204AC0", VA = "0x1204AC0")]
	public PlatformManager()
	{
	}
}
[Token(Token = "0x2000057")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x5C99C4", Offset = "0x5C99C4")]
public class RandomPitch : MonoBehaviour
{
	[Token(Token = "0x40002B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector2 range;

	[Token(Token = "0x60001E5")]
	[Address(RVA = "0x11F4A94", Offset = "0x11F4A94", VA = "0x11F4A94")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60001E6")]
	[Address(RVA = "0x11F4B04", Offset = "0x11F4B04", VA = "0x11F4B04")]
	public void RandomisePitch(AudioSource _aSource)
	{
	}

	[Token(Token = "0x60001E7")]
	[Address(RVA = "0x11F4B3C", Offset = "0x11F4B3C", VA = "0x11F4B3C")]
	public RandomPitch()
	{
	}
}
[Token(Token = "0x2000058")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x5C9A24", Offset = "0x5C9A24")]
public class RawImageScroller : MonoBehaviour
{
	[Token(Token = "0x40002B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private RawImage img;

	[Token(Token = "0x40002B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector2 scrollamount;

	[Token(Token = "0x40002B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Rect r;

	[Token(Token = "0x60001E8")]
	[Address(RVA = "0x11F4C60", Offset = "0x11F4C60", VA = "0x11F4C60")]
	private void Start()
	{
	}

	[Token(Token = "0x60001E9")]
	[Address(RVA = "0x11F4D78", Offset = "0x11F4D78", VA = "0x11F4D78")]
	private void Update()
	{
	}

	[Token(Token = "0x60001EA")]
	[Address(RVA = "0x11F4E30", Offset = "0x11F4E30", VA = "0x11F4E30")]
	public RawImageScroller()
	{
	}
}
[Token(Token = "0x2000059")]
public class SceneLauncher : MonoBehaviour
{
	[Token(Token = "0x200036F")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDB5C", Offset = "0x5CDB5C")]
	private sealed class <LoadScene>d__1 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40017F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40017F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40017F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string scene;

		[Token(Token = "0x40017F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private AsyncOperation <asyncLoad>5__2;

		[Token(Token = "0x17000289")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001916")]
			[Address(RVA = "0xFF22C0", Offset = "0xFF22C0", VA = "0xFF22C0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700028A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001918")]
			[Address(RVA = "0xFF2308", Offset = "0xFF2308", VA = "0xFF2308", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001913")]
		[Address(RVA = "0xFF214C", Offset = "0xFF214C", VA = "0xFF214C")]
		[DebuggerHidden]
		public <LoadScene>d__1(int <>1__state)
		{
		}

		[Token(Token = "0x6001914")]
		[Address(RVA = "0xFF2178", Offset = "0xFF2178", VA = "0xFF2178", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001915")]
		[Address(RVA = "0xFF217C", Offset = "0xFF217C", VA = "0xFF217C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001917")]
		[Address(RVA = "0xFF22C8", Offset = "0xFF22C8", VA = "0xFF22C8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x60001EB")]
	[Address(RVA = "0xCE190C", Offset = "0xCE190C", VA = "0xCE190C")]
	public void LaunchLobby()
	{
	}

	[Token(Token = "0x60001EC")]
	[Address(RVA = "0xCE1964", Offset = "0xCE1964", VA = "0xCE1964")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D7818", Offset = "0x5D7818")]
	private IEnumerator LoadScene(string scene = "intro cutscene")
	{
		return null;
	}

	[Token(Token = "0x60001ED")]
	[Address(RVA = "0xCE19DC", Offset = "0xCE19DC", VA = "0xCE19DC")]
	public SceneLauncher()
	{
	}
}
[Token(Token = "0x200005A")]
public class SetConnector : MonoBehaviour
{
	[Token(Token = "0x40002B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private LineRenderer lr;

	[Token(Token = "0x40002B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform target;

	[Token(Token = "0x60001EE")]
	[Address(RVA = "0xA0C7FC", Offset = "0xA0C7FC", VA = "0xA0C7FC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001EF")]
	[Address(RVA = "0xA0CB78", Offset = "0xA0CB78", VA = "0xA0CB78")]
	private void Start()
	{
	}

	[Token(Token = "0x60001F0")]
	[Address(RVA = "0xA0CB7C", Offset = "0xA0CB7C", VA = "0xA0CB7C")]
	private void Update()
	{
	}

	[Token(Token = "0x60001F1")]
	[Address(RVA = "0xA0CC4C", Offset = "0xA0CC4C", VA = "0xA0CC4C")]
	public SetConnector()
	{
	}
}
[Token(Token = "0x200005B")]
public class SetCounter : MonoBehaviour
{
	[Token(Token = "0x40002B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int numInSet;

	[Token(Token = "0x40002B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int numHit;

	[Token(Token = "0x40002BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextMeshProUGUI text;

	[Token(Token = "0x40002BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<string> coolWords;

	[Token(Token = "0x60001F2")]
	[Address(RVA = "0xA0CC54", Offset = "0xA0CC54", VA = "0xA0CC54")]
	public void Init(int num)
	{
	}

	[Token(Token = "0x60001F3")]
	[Address(RVA = "0xA0CCF8", Offset = "0xA0CCF8", VA = "0xA0CCF8")]
	public void Hit()
	{
	}

	[Token(Token = "0x60001F4")]
	[Address(RVA = "0xA0CDE4", Offset = "0xA0CDE4", VA = "0xA0CDE4")]
	public void Miss()
	{
	}

	[Token(Token = "0x60001F5")]
	[Address(RVA = "0xA0CC5C", Offset = "0xA0CC5C", VA = "0xA0CC5C")]
	private void UpdateText()
	{
	}

	[Token(Token = "0x60001F6")]
	[Address(RVA = "0xA0CE58", Offset = "0xA0CE58", VA = "0xA0CE58")]
	public void DestroyThis()
	{
	}

	[Token(Token = "0x60001F7")]
	[Address(RVA = "0xA0CEBC", Offset = "0xA0CEBC", VA = "0xA0CEBC")]
	public void ShowCoolWord()
	{
	}

	[Token(Token = "0x60001F8")]
	[Address(RVA = "0xA0CF70", Offset = "0xA0CF70", VA = "0xA0CF70")]
	public SetCounter()
	{
	}
}
[Token(Token = "0x200005C")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x5C9A84", Offset = "0x5C9A84")]
public class SiliderValueDisplay : MonoBehaviour
{
	[Token(Token = "0x40002BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TextMeshProUGUI display;

	[Token(Token = "0x40002BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Slider slider;

	[Token(Token = "0x60001F9")]
	[Address(RVA = "0xA0E144", Offset = "0xA0E144", VA = "0xA0E144")]
	private void Start()
	{
	}

	[Token(Token = "0x60001FA")]
	[Address(RVA = "0xA0E1A0", Offset = "0xA0E1A0", VA = "0xA0E1A0")]
	public void UpdateDisplay()
	{
	}

	[Token(Token = "0x60001FB")]
	[Address(RVA = "0xA0E268", Offset = "0xA0E268", VA = "0xA0E268")]
	public SiliderValueDisplay()
	{
	}
}
[Token(Token = "0x200005D")]
public class EditorManager : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000370")]
	public class ObjectRefrences
	{
		[Token(Token = "0x40017F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GameObject fakeNodePrefab;

		[Token(Token = "0x40017F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject leftController;

		[Token(Token = "0x40017F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject rightController;

		[Token(Token = "0x40017FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject leftMarker;

		[Token(Token = "0x40017FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject rightMarker;

		[Token(Token = "0x40017FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject yellowMarker;

		[Token(Token = "0x40017FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject beatMarker;

		[Token(Token = "0x40017FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public TMP_InputField filenameInput;

		[Token(Token = "0x40017FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public TMP_InputField bpmInput;

		[Token(Token = "0x4001800")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public TMP_InputField offsetInput;

		[Token(Token = "0x4001801")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public TMP_InputField durationInput;

		[Token(Token = "0x4001802")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public TMP_InputField title1Input;

		[Token(Token = "0x4001803")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public TMP_InputField title2Input;

		[Token(Token = "0x4001804")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public TMP_InputField title3Input;

		[Token(Token = "0x4001805")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public TextMeshProUGUI infoText;

		[Token(Token = "0x4001806")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public TextMeshProUGUI timeText;

		[Token(Token = "0x4001807")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public TextMeshProUGUI musicText;

		[Token(Token = "0x4001808")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public TextMeshProUGUI browserPathText;

		[Token(Token = "0x4001809")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Button clearButton;

		[Token(Token = "0x400180A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Button loadButton;

		[Token(Token = "0x400180B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public Button saveButton;

		[Token(Token = "0x400180C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Button testButton;

		[Token(Token = "0x400180D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public Button newButton;

		[Token(Token = "0x400180E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public Toggle additiveToggle;

		[Token(Token = "0x400180F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Toggle timeSelectToggle;

		[Token(Token = "0x4001810")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public Toggle holdForCascadesToggle;

		[Token(Token = "0x4001811")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public Toggle loadBackgroundArenaToggle;

		[Token(Token = "0x4001812")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public TextMeshPro leftHandInfo;

		[Token(Token = "0x4001813")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public TextMeshPro rightHandInfo;

		[Token(Token = "0x4001814")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public GameObject browser;

		[Token(Token = "0x4001815")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public GameObject browserButton;

		[Token(Token = "0x4001816")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public GameObject browserExplorerButton;

		[Token(Token = "0x4001817")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public GameObject browserExplorerText;

		[Token(Token = "0x4001818")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public TMP_Dropdown musicTypeDropdown;

		[Token(Token = "0x4001819")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public TMP_Dropdown arenaDropdown;

		[Token(Token = "0x400181A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public SongEditor songEditor;

		[Token(Token = "0x400181B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public ControllerScrollArea mainScrollArea;

		[Token(Token = "0x400181C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		public UI_NodeSettings nodeSettingsUI;

		[Token(Token = "0x400181D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		public ArcRenderer leftArc;

		[Token(Token = "0x400181E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		public ArcRenderer rightArc;

		[Token(Token = "0x400181F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		public Editor_UI_Panel nodeInspectorPanel;

		[Token(Token = "0x4001820")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		public Editor_UI_Panel navigationPanel;

		[Token(Token = "0x4001821")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		public Editor_UI_Panel keyboardPanel;

		[Token(Token = "0x4001822")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		public Editor_UI_Panel bpmPanel;

		[Token(Token = "0x4001823")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		public Editor_UI_Panel testPanel;

		[Token(Token = "0x4001824")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		public UI_Editor_EditTools editTools;

		[Token(Token = "0x6001919")]
		[Address(RVA = "0x7E7A4C", Offset = "0x7E7A4C", VA = "0x7E7A4C")]
		public ObjectRefrences()
		{
		}
	}

	[Token(Token = "0x2000371")]
	public enum TriggerMode
	{
		[Token(Token = "0x4001826")]
		Select,
		[Token(Token = "0x4001827")]
		BoxSelect,
		[Token(Token = "0x4001828")]
		TimeSelect,
		[Token(Token = "0x4001829")]
		Add
	}

	[Token(Token = "0x2000372")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDB6C", Offset = "0x5CDB6C")]
	private sealed class <CalibrateWhenReady>d__23 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400182A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400182B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400182C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EditorManager <>4__this;

		[Token(Token = "0x1700028B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600191D")]
			[Address(RVA = "0x7E71E0", Offset = "0x7E71E0", VA = "0x7E71E0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700028C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600191F")]
			[Address(RVA = "0x7E7228", Offset = "0x7E7228", VA = "0x7E7228", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600191A")]
		[Address(RVA = "0x7E70F4", Offset = "0x7E70F4", VA = "0x7E70F4")]
		[DebuggerHidden]
		public <CalibrateWhenReady>d__23(int <>1__state)
		{
		}

		[Token(Token = "0x600191B")]
		[Address(RVA = "0x7E7120", Offset = "0x7E7120", VA = "0x7E7120", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600191C")]
		[Address(RVA = "0x7E7124", Offset = "0x7E7124", VA = "0x7E7124", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600191E")]
		[Address(RVA = "0x7E71E8", Offset = "0x7E71E8", VA = "0x7E71E8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000373")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDB7C", Offset = "0x5CDB7C")]
	private sealed class <LoadSceneDelayed>d__27 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400182D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400182E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400182F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float delay;

		[Token(Token = "0x4001830")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string scene;

		[Token(Token = "0x1700028D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001923")]
			[Address(RVA = "0x7E783C", Offset = "0x7E783C", VA = "0x7E783C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700028E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001925")]
			[Address(RVA = "0x7E7884", Offset = "0x7E7884", VA = "0x7E7884", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001920")]
		[Address(RVA = "0x7E7698", Offset = "0x7E7698", VA = "0x7E7698")]
		[DebuggerHidden]
		public <LoadSceneDelayed>d__27(int <>1__state)
		{
		}

		[Token(Token = "0x6001921")]
		[Address(RVA = "0x7E76C4", Offset = "0x7E76C4", VA = "0x7E76C4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001922")]
		[Address(RVA = "0x7E76C8", Offset = "0x7E76C8", VA = "0x7E76C8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001924")]
		[Address(RVA = "0x7E7844", Offset = "0x7E7844", VA = "0x7E7844", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000374")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDB8C", Offset = "0x5CDB8C")]
	private sealed class <LoadArena>d__30 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001831")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001832")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001833")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string arena;

		[Token(Token = "0x4001834")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private AsyncOperation <asyncLoad>5__2;

		[Token(Token = "0x1700028F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001929")]
			[Address(RVA = "0x7E7648", Offset = "0x7E7648", VA = "0x7E7648", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000290")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600192B")]
			[Address(RVA = "0x7E7690", Offset = "0x7E7690", VA = "0x7E7690", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001926")]
		[Address(RVA = "0x7E7498", Offset = "0x7E7498", VA = "0x7E7498")]
		[DebuggerHidden]
		public <LoadArena>d__30(int <>1__state)
		{
		}

		[Token(Token = "0x6001927")]
		[Address(RVA = "0x7E74C4", Offset = "0x7E74C4", VA = "0x7E74C4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001928")]
		[Address(RVA = "0x7E74C8", Offset = "0x7E74C8", VA = "0x7E74C8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600192A")]
		[Address(RVA = "0x7E7650", Offset = "0x7E7650", VA = "0x7E7650", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000375")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDB9C", Offset = "0x5CDB9C")]
	private sealed class <UnLoadArena>d__31 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001835")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001836")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001837")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string arena;

		[Token(Token = "0x4001838")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private AsyncOperation <asyncLoad>5__2;

		[Token(Token = "0x17000291")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600192F")]
			[Address(RVA = "0x7E79FC", Offset = "0x7E79FC", VA = "0x7E79FC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000292")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001931")]
			[Address(RVA = "0x7E7A44", Offset = "0x7E7A44", VA = "0x7E7A44", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600192C")]
		[Address(RVA = "0x7E788C", Offset = "0x7E788C", VA = "0x7E788C")]
		[DebuggerHidden]
		public <UnLoadArena>d__31(int <>1__state)
		{
		}

		[Token(Token = "0x600192D")]
		[Address(RVA = "0x7E78B8", Offset = "0x7E78B8", VA = "0x7E78B8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600192E")]
		[Address(RVA = "0x7E78BC", Offset = "0x7E78BC", VA = "0x7E78BC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001930")]
		[Address(RVA = "0x7E7A04", Offset = "0x7E7A04", VA = "0x7E7A04", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000376")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDBAC", Offset = "0x5CDBAC")]
	private sealed class <CreateLeftCascadeNodes>d__71 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001839")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400183A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400183B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EditorManager <>4__this;

		[Token(Token = "0x17000293")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001935")]
			[Address(RVA = "0x7E7314", Offset = "0x7E7314", VA = "0x7E7314", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000294")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001937")]
			[Address(RVA = "0x7E735C", Offset = "0x7E735C", VA = "0x7E735C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001932")]
		[Address(RVA = "0x7E7230", Offset = "0x7E7230", VA = "0x7E7230")]
		[DebuggerHidden]
		public <CreateLeftCascadeNodes>d__71(int <>1__state)
		{
		}

		[Token(Token = "0x6001933")]
		[Address(RVA = "0x7E725C", Offset = "0x7E725C", VA = "0x7E725C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001934")]
		[Address(RVA = "0x7E7260", Offset = "0x7E7260", VA = "0x7E7260", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001936")]
		[Address(RVA = "0x7E731C", Offset = "0x7E731C", VA = "0x7E731C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000377")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDBBC", Offset = "0x5CDBBC")]
	private sealed class <CreateRightCascadeNodes>d__72 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400183C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400183D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400183E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EditorManager <>4__this;

		[Token(Token = "0x17000295")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600193B")]
			[Address(RVA = "0x7E7448", Offset = "0x7E7448", VA = "0x7E7448", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000296")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600193D")]
			[Address(RVA = "0x7E7490", Offset = "0x7E7490", VA = "0x7E7490", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001938")]
		[Address(RVA = "0x7E7364", Offset = "0x7E7364", VA = "0x7E7364")]
		[DebuggerHidden]
		public <CreateRightCascadeNodes>d__72(int <>1__state)
		{
		}

		[Token(Token = "0x6001939")]
		[Address(RVA = "0x7E7390", Offset = "0x7E7390", VA = "0x7E7390", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600193A")]
		[Address(RVA = "0x7E7394", Offset = "0x7E7394", VA = "0x7E7394", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600193C")]
		[Address(RVA = "0x7E7450", Offset = "0x7E7450", VA = "0x7E7450", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000378")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDBCC", Offset = "0x5CDBCC")]
	private sealed class <>c__DisplayClass88_0
	{
		[Token(Token = "0x400183F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string fileName;

		[Token(Token = "0x4001840")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public EditorManager <>4__this;

		[Token(Token = "0x600193E")]
		[Address(RVA = "0x7E704C", Offset = "0x7E704C", VA = "0x7E704C")]
		public <>c__DisplayClass88_0()
		{
		}

		[Token(Token = "0x600193F")]
		[Address(RVA = "0x7E7054", Offset = "0x7E7054", VA = "0x7E7054")]
		internal void <GetColliders>b__0()
		{
		}
	}

	[Token(Token = "0x2000379")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDBDC", Offset = "0x5CDBDC")]
	private sealed class <>c__DisplayClass89_0
	{
		[Token(Token = "0x4001841")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public FileInfo file;

		[Token(Token = "0x4001842")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public EditorManager <>4__this;

		[Token(Token = "0x6001940")]
		[Address(RVA = "0x7E7078", Offset = "0x7E7078", VA = "0x7E7078")]
		public <>c__DisplayClass89_0()
		{
		}

		[Token(Token = "0x6001941")]
		[Address(RVA = "0x7E7080", Offset = "0x7E7080", VA = "0x7E7080")]
		internal void <GetLocalAudio>b__0()
		{
		}
	}

	[Token(Token = "0x200037A")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDBEC", Offset = "0x5CDBEC")]
	private sealed class <>c__DisplayClass90_0
	{
		[Token(Token = "0x4001843")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int copy;

		[Token(Token = "0x4001844")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public EditorManager <>4__this;

		[Token(Token = "0x6001942")]
		[Address(RVA = "0x7E70C8", Offset = "0x7E70C8", VA = "0x7E70C8")]
		public <>c__DisplayClass90_0()
		{
		}

		[Token(Token = "0x6001943")]
		[Address(RVA = "0x7E70D0", Offset = "0x7E70D0", VA = "0x7E70D0")]
		internal void <GetSoundtrackAudio>b__0()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x200037B")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDBFC", Offset = "0x5CDBFC")]
	private sealed class <>c
	{
		[Token(Token = "0x4001845")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly <>c <>9;

		[Token(Token = "0x4001846")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Func<SceneEditorNode, float> <>9__104_0;

		[Token(Token = "0x6001945")]
		[Address(RVA = "0x7E702C", Offset = "0x7E702C", VA = "0x7E702C")]
		public <>c()
		{
		}

		[Token(Token = "0x6001946")]
		[Address(RVA = "0x7E7034", Offset = "0x7E7034", VA = "0x7E7034")]
		internal float <PasteNodesFromClipboard>b__104_0(SceneEditorNode p)
		{
			return default(float);
		}
	}

	[Token(Token = "0x40002BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static EditorManager instance;

	[Token(Token = "0x40002BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private GameManager gm;

	[Token(Token = "0x40002C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int handsInScrollAreas;

	[Token(Token = "0x40002C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ObjectRefrences objectRefrences;

	[Token(Token = "0x40002C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool handsClose;

	[Token(Token = "0x40002C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public Color pinkNodeColour;

	[Token(Token = "0x40002C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public Color greenNodeColour;

	[Token(Token = "0x40002C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public Color yellowNodeColour;

	[Token(Token = "0x40002C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public float handsCloseThreshold;

	[Token(Token = "0x40002C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float cascadeInterval;

	[Token(Token = "0x40002C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public bool singleSelectAdditive;

	[Token(Token = "0x40002C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6D")]
	public bool multiSelectTimeSelect;

	[Token(Token = "0x40002CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6E")]
	public bool holdForCascades;

	[Token(Token = "0x40002CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6F")]
	public bool loadBackgroundArena;

	[Token(Token = "0x40002CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public TriggerMode triggerMode;

	[Token(Token = "0x40002CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public bool loading;

	[Token(Token = "0x40002CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float songDuration;

	[Token(Token = "0x40002CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private float dragCounter;

	[Token(Token = "0x40002D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private bool leftDragStart;

	[Token(Token = "0x40002D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
	private bool rightDragStart;

	[Token(Token = "0x40002D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x82")]
	private bool leftDragActive;

	[Token(Token = "0x40002D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x83")]
	private bool rightDragActive;

	[Token(Token = "0x40002D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public float dragDelay;

	[Token(Token = "0x40002D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public CubeBetween2Points selectionCube;

	[Token(Token = "0x40002D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Transform pointA;

	[Token(Token = "0x40002D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Transform pointB;

	[Token(Token = "0x40002D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public GameObject textPopupPrefab;

	[Token(Token = "0x40002D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private List<string> messageQueue;

	[Token(Token = "0x40002DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private float messagedelay;

	[Token(Token = "0x40002DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	private float messagedelaytimer;

	[Token(Token = "0x40002DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private SceneEditorNode leftCascadeStartNode;

	[Token(Token = "0x40002DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private SceneEditorNode rightCascadeStartNode;

	[Token(Token = "0x40002DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private List<Vector3> leftCascadePositions;

	[Token(Token = "0x40002DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private List<Vector3> rightCascadePositions;

	[Token(Token = "0x40002E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private float leftCascadeTimer;

	[Token(Token = "0x40002E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	private float rightCascadeTimer;

	[Token(Token = "0x40002E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public float cascadeThreshold;

	[Token(Token = "0x40002E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	private bool leftCascade;

	[Token(Token = "0x40002E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE5")]
	private bool rightCascade;

	[Token(Token = "0x40002E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private SceneEditorNode lastSpawnedNode;

	[Token(Token = "0x40002E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private string[] soundtrackNames;

	[Token(Token = "0x40002E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public List<SceneEditorNode> clipboard;

	[Token(Token = "0x40002E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public GameObject clipboard_Object;

	[Token(Token = "0x17000005")]
	public int HandsInScrollAreas
	{
		[Token(Token = "0x60001FC")]
		[Address(RVA = "0x9F87F4", Offset = "0x9F87F4", VA = "0x9F87F4")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60001FD")]
		[Address(RVA = "0x9F87FC", Offset = "0x9F87FC", VA = "0x9F87FC")]
		set
		{
		}
	}

	[Token(Token = "0x60001FE")]
	[Address(RVA = "0x9F8830", Offset = "0x9F8830", VA = "0x9F8830")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001FF")]
	[Address(RVA = "0x9F99C0", Offset = "0x9F99C0", VA = "0x9F99C0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000200")]
	[Address(RVA = "0x9F9A38", Offset = "0x9F9A38", VA = "0x9F9A38")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D7878", Offset = "0x5D7878")]
	private IEnumerator CalibrateWhenReady()
	{
		return null;
	}

	[Token(Token = "0x6000201")]
	[Address(RVA = "0x9F9AB0", Offset = "0x9F9AB0", VA = "0x9F9AB0")]
	public void StartSong()
	{
	}

	[Token(Token = "0x6000202")]
	[Address(RVA = "0x9F9C1C", Offset = "0x9F9C1C", VA = "0x9F9C1C")]
	public void PlayDance()
	{
	}

	[Token(Token = "0x6000203")]
	[Address(RVA = "0x9F9F10", Offset = "0x9F9F10", VA = "0x9F9F10")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D78D8", Offset = "0x5D78D8")]
	private IEnumerator LoadSceneDelayed(string scene = "dance collider lobby", float delay = 1f)
	{
		return null;
	}

	[Token(Token = "0x6000204")]
	[Address(RVA = "0x9F9968", Offset = "0x9F9968", VA = "0x9F9968")]
	public void LoadBackground()
	{
	}

	[Token(Token = "0x6000205")]
	[Address(RVA = "0x9FA010", Offset = "0x9FA010", VA = "0x9FA010")]
	public void UnLoadBackground()
	{
	}

	[Token(Token = "0x6000206")]
	[Address(RVA = "0x9F9F98", Offset = "0x9F9F98", VA = "0x9F9F98")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D7938", Offset = "0x5D7938")]
	private IEnumerator LoadArena(string arena)
	{
		return null;
	}

	[Token(Token = "0x6000207")]
	[Address(RVA = "0x9FA068", Offset = "0x9FA068", VA = "0x9FA068")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D7998", Offset = "0x5D7998")]
	private IEnumerator UnLoadArena(string arena)
	{
		return null;
	}

	[Token(Token = "0x6000208")]
	[Address(RVA = "0x9FA0E0", Offset = "0x9FA0E0", VA = "0x9FA0E0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000209")]
	[Address(RVA = "0x9FA8E8", Offset = "0x9FA8E8", VA = "0x9FA8E8")]
	public float GetCurrentTime()
	{
		return default(float);
	}

	[Token(Token = "0x600020A")]
	[Address(RVA = "0x9FA9A0", Offset = "0x9FA9A0", VA = "0x9FA9A0")]
	public void Scrub()
	{
	}

	[Token(Token = "0x600020B")]
	[Address(RVA = "0x9FAB5C", Offset = "0x9FAB5C", VA = "0x9FAB5C")]
	public void SkipToStart()
	{
	}

	[Token(Token = "0x600020C")]
	[Address(RVA = "0x9FAC50", Offset = "0x9FAC50", VA = "0x9FAC50")]
	public void SkipToEnd()
	{
	}

	[Token(Token = "0x600020D")]
	[Address(RVA = "0x9FAB64", Offset = "0x9FAB64", VA = "0x9FAB64")]
	public void SkipToSeconds(float seconds)
	{
	}

	[Token(Token = "0x600020E")]
	[Address(RVA = "0x9FAC78", Offset = "0x9FAC78", VA = "0x9FAC78")]
	private void TouchpadClicked()
	{
	}

	[Token(Token = "0x600020F")]
	[Address(RVA = "0x9FAC80", Offset = "0x9FAC80", VA = "0x9FAC80")]
	public void SwapTriggerMode([Optional] TriggerMode? mode)
	{
	}

	[Token(Token = "0x6000210")]
	[Address(RVA = "0x9FB004", Offset = "0x9FB004", VA = "0x9FB004")]
	public void DisplayMessage(string message)
	{
	}

	[Token(Token = "0x6000211")]
	[Address(RVA = "0x9FA718", Offset = "0x9FA718", VA = "0x9FA718")]
	private void SpawnMessage(string message)
	{
	}

	[Token(Token = "0x6000212")]
	[Address(RVA = "0x9FB068", Offset = "0x9FB068", VA = "0x9FB068")]
	private void StartSelectCounter(bool leftDown)
	{
	}

	[Token(Token = "0x6000213")]
	[Address(RVA = "0x9FB0AC", Offset = "0x9FB0AC", VA = "0x9FB0AC")]
	private void DragStart(bool left)
	{
	}

	[Token(Token = "0x6000214")]
	[Address(RVA = "0x9FB2E0", Offset = "0x9FB2E0", VA = "0x9FB2E0")]
	private void StopDrag(bool left = true)
	{
	}

	[Token(Token = "0x6000215")]
	[Address(RVA = "0x9FB750", Offset = "0x9FB750", VA = "0x9FB750")]
	private void TriggerReleased()
	{
	}

	[Token(Token = "0x6000216")]
	[Address(RVA = "0x9FB754", Offset = "0x9FB754", VA = "0x9FB754")]
	private void TriggerClicked()
	{
	}

	[Token(Token = "0x6000217")]
	[Address(RVA = "0x9FA348", Offset = "0x9FA348", VA = "0x9FA348")]
	private void CascadeStart(bool leftHand)
	{
	}

	[Token(Token = "0x6000218")]
	[Address(RVA = "0x9FBCE4", Offset = "0x9FBCE4", VA = "0x9FBCE4")]
	private void CascadeFinish(bool leftHand)
	{
	}

	[Token(Token = "0x6000219")]
	[Address(RVA = "0x9FBDF0", Offset = "0x9FBDF0", VA = "0x9FBDF0")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D79F8", Offset = "0x5D79F8")]
	private IEnumerator CreateLeftCascadeNodes()
	{
		return null;
	}

	[Token(Token = "0x600021A")]
	[Address(RVA = "0x9FBE68", Offset = "0x9FBE68", VA = "0x9FBE68")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D7A58", Offset = "0x5D7A58")]
	private IEnumerator CreateRightCascadeNodes()
	{
		return null;
	}

	[Token(Token = "0x600021B")]
	[Address(RVA = "0x9FBEE0", Offset = "0x9FBEE0", VA = "0x9FBEE0")]
	private void ButtonOneDown()
	{
	}

	[Token(Token = "0x600021C")]
	[Address(RVA = "0x9FBEE4", Offset = "0x9FBEE4", VA = "0x9FBEE4")]
	public void TogglePlayPause()
	{
	}

	[Token(Token = "0x600021D")]
	[Address(RVA = "0x9F9D50", Offset = "0x9F9D50", VA = "0x9F9D50")]
	public void SaveDance()
	{
	}

	[Token(Token = "0x600021E")]
	[Address(RVA = "0x9FC114", Offset = "0x9FC114", VA = "0x9FC114")]
	public void SetFileInput_NoDifficulty(string filename)
	{
	}

	[Token(Token = "0x600021F")]
	[Address(RVA = "0x9FC13C", Offset = "0x9FC13C", VA = "0x9FC13C")]
	public void SetAdditiveSelect()
	{
	}

	[Token(Token = "0x6000220")]
	[Address(RVA = "0x9FC1E4", Offset = "0x9FC1E4", VA = "0x9FC1E4")]
	public void SetTimeSelect()
	{
	}

	[Token(Token = "0x6000221")]
	[Address(RVA = "0x9FC28C", Offset = "0x9FC28C", VA = "0x9FC28C")]
	public void SetHoldCascades()
	{
	}

	[Token(Token = "0x6000222")]
	[Address(RVA = "0x9FC334", Offset = "0x9FC334", VA = "0x9FC334")]
	public void SetLoadArena()
	{
	}

	[Token(Token = "0x6000223")]
	[Address(RVA = "0x9FC3F4", Offset = "0x9FC3F4", VA = "0x9FC3F4")]
	public void LoadDance()
	{
	}

	[Token(Token = "0x6000224")]
	[Address(RVA = "0x9FCCC8", Offset = "0x9FCCC8", VA = "0x9FCCC8")]
	public void NewDance()
	{
	}

	[Token(Token = "0x6000225")]
	[Address(RVA = "0x9FCF78", Offset = "0x9FCF78", VA = "0x9FCF78")]
	public void SetLoading(bool _loading)
	{
	}

	[Token(Token = "0x6000226")]
	[Address(RVA = "0x9FC718", Offset = "0x9FC718", VA = "0x9FC718")]
	public string GetCleanMusicString(string input)
	{
		return null;
	}

	[Token(Token = "0x6000227")]
	[Address(RVA = "0x9FD04C", Offset = "0x9FD04C", VA = "0x9FD04C")]
	public void ClearDance()
	{
	}

	[Token(Token = "0x6000228")]
	[Address(RVA = "0x9FB758", Offset = "0x9FB758", VA = "0x9FB758")]
	private SceneEditorNode CreateNode(bool leftHand, bool cascade = false, [Optional] NodeType? type, [Optional] Vector3? pos)
	{
		return null;
	}

	[Token(Token = "0x6000229")]
	[Address(RVA = "0x9FD0EC", Offset = "0x9FD0EC", VA = "0x9FD0EC")]
	public void GetColliders()
	{
	}

	[Token(Token = "0x600022A")]
	[Address(RVA = "0x9FD79C", Offset = "0x9FD79C", VA = "0x9FD79C")]
	public void GetLocalAudio()
	{
	}

	[Token(Token = "0x600022B")]
	[Address(RVA = "0x9FDE64", Offset = "0x9FDE64", VA = "0x9FDE64")]
	public void GetSoundtrackAudio()
	{
	}

	[Token(Token = "0x600022C")]
	[Address(RVA = "0x9FE494", Offset = "0x9FE494", VA = "0x9FE494")]
	public void SetFilenameInput(string input)
	{
	}

	[Token(Token = "0x600022D")]
	[Address(RVA = "0x9FE4BC", Offset = "0x9FE4BC", VA = "0x9FE4BC")]
	public void SetCustomAudioInput(string input)
	{
	}

	[Token(Token = "0x600022E")]
	[Address(RVA = "0x9FE5F4", Offset = "0x9FE5F4", VA = "0x9FE5F4")]
	public void SetSoundtrackAudioInput(int input)
	{
	}

	[Token(Token = "0x600022F")]
	[Address(RVA = "0x9FBFFC", Offset = "0x9FBFFC", VA = "0x9FBFFC")]
	public string GetArenaString(int arenaIndex)
	{
		return null;
	}

	[Token(Token = "0x6000230")]
	[Address(RVA = "0x9FC824", Offset = "0x9FC824", VA = "0x9FC824")]
	public int GetArenaIndex(string arenaString)
	{
		return default(int);
	}

	[Token(Token = "0x6000231")]
	[Address(RVA = "0x9FE7A0", Offset = "0x9FE7A0", VA = "0x9FE7A0")]
	public void OpenCustomInWindowsExplorer()
	{
	}

	[Token(Token = "0x6000232")]
	[Address(RVA = "0x9FE90C", Offset = "0x9FE90C", VA = "0x9FE90C")]
	public void Cut()
	{
	}

	[Token(Token = "0x6000233")]
	[Address(RVA = "0x9FECF0", Offset = "0x9FECF0", VA = "0x9FECF0")]
	public void Copy()
	{
	}

	[Token(Token = "0x6000234")]
	[Address(RVA = "0x9FECF4", Offset = "0x9FECF4", VA = "0x9FECF4")]
	public void Paste()
	{
	}

	[Token(Token = "0x6000235")]
	[Address(RVA = "0x9FE944", Offset = "0x9FE944", VA = "0x9FE944")]
	private void CopySelectedNodes()
	{
	}

	[Token(Token = "0x6000236")]
	[Address(RVA = "0x9FECF8", Offset = "0x9FECF8", VA = "0x9FECF8")]
	private void PasteNodesFromClipboard()
	{
	}

	[Token(Token = "0x6000237")]
	[Address(RVA = "0x9FF278", Offset = "0x9FF278", VA = "0x9FF278")]
	private void ClearClipboard()
	{
	}

	[Token(Token = "0x6000238")]
	[Address(RVA = "0x9FF374", Offset = "0x9FF374", VA = "0x9FF374")]
	public EditorManager()
	{
	}
}
[Token(Token = "0x200005E")]
public class PlayPoint : MonoBehaviour
{
	[Token(Token = "0x600023A")]
	[Address(RVA = "0x1204B54", Offset = "0x1204B54", VA = "0x1204B54")]
	public void UpdatePlayPoint()
	{
	}

	[Token(Token = "0x600023B")]
	[Address(RVA = "0x1204C38", Offset = "0x1204C38", VA = "0x1204C38")]
	public PlayPoint()
	{
	}
}
[Token(Token = "0x200005F")]
public class SceneEditorNode : MonoBehaviour
{
	[Token(Token = "0x40002E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SongEditor editor;

	[Token(Token = "0x40002EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public NodeType type;

	[Token(Token = "0x40002EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float beatTime;

	[Token(Token = "0x40002EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Vector2 offset;

	[Token(Token = "0x40002ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public string path;

	[Token(Token = "0x40002EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool set;

	[Token(Token = "0x40002EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	public bool cascade;

	[Token(Token = "0x40002F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float holoLight;

	[Token(Token = "0x40002F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public int holoNum;

	[Token(Token = "0x40002F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public int danceID;

	[Token(Token = "0x40002F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float bufferOverride;

	[Token(Token = "0x40002F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public int minDifficulty;

	[Token(Token = "0x40002F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Material green;

	[Token(Token = "0x40002F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Material red;

	[Token(Token = "0x40002F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Material yellow;

	[Token(Token = "0x40002F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Material utility;

	[Token(Token = "0x40002F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public TauntInfo tauntInfo;

	[Token(Token = "0x40002FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public List<string> lightPayloads;

	[Token(Token = "0x40002FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public bool selected;

	[Token(Token = "0x40002FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public ControllerScrollArea scrollXY;

	[Token(Token = "0x40002FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public ControllerScrollArea scrollZpos;

	[Token(Token = "0x40002FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public ControllerScrollArea scrollZneg;

	[Token(Token = "0x40002FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private Outline outline;

	[Token(Token = "0x4000300")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private MeshRenderer mesh;

	[Token(Token = "0x4000301")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public Mesh sphere_mesh;

	[Token(Token = "0x4000302")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public Mesh triangle_mesh;

	[Token(Token = "0x4000303")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public Mesh cube_mesh;

	[Token(Token = "0x4000304")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public SpriteRenderer Arrow_Right_1;

	[Token(Token = "0x4000305")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public SpriteRenderer Arrow_Right_2;

	[Token(Token = "0x4000306")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public SpriteRenderer Arrow_Left_1;

	[Token(Token = "0x4000307")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public SpriteRenderer Arrow_Left_2;

	[Token(Token = "0x4000308")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public SpriteRenderer Set_Icon;

	[Token(Token = "0x4000309")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public SpriteRenderer Cascade_Icon;

	[Token(Token = "0x400030A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public TextMeshPro utilityText;

	[Token(Token = "0x400030B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public GameObject ui_root;

	[Token(Token = "0x400030C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private Collider col;

	[Token(Token = "0x400030D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private readonly float visibilityThreshold;

	[Token(Token = "0x600023C")]
	[Address(RVA = "0xCE00DC", Offset = "0xCE00DC", VA = "0xCE00DC")]
	public void Init()
	{
	}

	[Token(Token = "0x600023D")]
	[Address(RVA = "0xCE08DC", Offset = "0xCE08DC", VA = "0xCE08DC")]
	private void SetToUtilityCube(string text = "Utility")
	{
	}

	[Token(Token = "0x600023E")]
	[Address(RVA = "0xCE09D4", Offset = "0xCE09D4", VA = "0xCE09D4")]
	private void Update()
	{
	}

	[Token(Token = "0x600023F")]
	[Address(RVA = "0xCE07BC", Offset = "0xCE07BC", VA = "0xCE07BC")]
	public void DisableAllUI()
	{
	}

	[Token(Token = "0x6000240")]
	[Address(RVA = "0xCE0A84", Offset = "0xCE0A84", VA = "0xCE0A84")]
	public void LeftTriggerDown()
	{
	}

	[Token(Token = "0x6000241")]
	[Address(RVA = "0xCE0A88", Offset = "0xCE0A88", VA = "0xCE0A88")]
	public void RightTriggerDown()
	{
	}

	[Token(Token = "0x6000242")]
	[Address(RVA = "0xCE0A8C", Offset = "0xCE0A8C", VA = "0xCE0A8C")]
	public void Delete()
	{
	}

	[Token(Token = "0x6000243")]
	[Address(RVA = "0xCE0B04", Offset = "0xCE0B04", VA = "0xCE0B04")]
	public void Select(bool multi = false)
	{
	}

	[Token(Token = "0x6000244")]
	[Address(RVA = "0xCE0D5C", Offset = "0xCE0D5C", VA = "0xCE0D5C")]
	public void Deselect()
	{
	}

	[Token(Token = "0x6000245")]
	[Address(RVA = "0xCE0CF0", Offset = "0xCE0CF0", VA = "0xCE0CF0")]
	private void SelectedHighlight(bool on = true)
	{
	}

	[Token(Token = "0x6000246")]
	[Address(RVA = "0xCE1138", Offset = "0xCE1138", VA = "0xCE1138")]
	public void Highlight(bool on = true)
	{
	}

	[Token(Token = "0x6000247")]
	[Address(RVA = "0xCE11DC", Offset = "0xCE11DC", VA = "0xCE11DC")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x5D7AB8", Offset = "0x5D7AB8")]
	public void LinkScrollAreas(SceneEditorNode node)
	{
	}

	[Token(Token = "0x6000248")]
	[Address(RVA = "0xCE0F24", Offset = "0xCE0F24", VA = "0xCE0F24")]
	public void ClearScrollAreas()
	{
	}

	[Token(Token = "0x6000249")]
	[Address(RVA = "0xCE133C", Offset = "0xCE133C", VA = "0xCE133C")]
	public void SetExclusiveScrollAreas(bool set = true)
	{
	}

	[Token(Token = "0x600024A")]
	[Address(RVA = "0xCE148C", Offset = "0xCE148C", VA = "0xCE148C")]
	public void UpdateValues()
	{
	}

	[Token(Token = "0x600024B")]
	[Address(RVA = "0xCE1518", Offset = "0xCE1518", VA = "0xCE1518")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x600024C")]
	[Address(RVA = "0xCE151C", Offset = "0xCE151C", VA = "0xCE151C")]
	public void SnapToNearestBeat()
	{
	}

	[Token(Token = "0x600024D")]
	[Address(RVA = "0xCE16A8", Offset = "0xCE16A8", VA = "0xCE16A8")]
	public void SnapToNearestHalfBeat()
	{
	}

	[Token(Token = "0x600024E")]
	[Address(RVA = "0xCE16D0", Offset = "0xCE16D0", VA = "0xCE16D0")]
	public void SnapToNearestQuarterBeat()
	{
	}

	[Token(Token = "0x600024F")]
	[Address(RVA = "0xCE1544", Offset = "0xCE1544", VA = "0xCE1544")]
	private void Snap(float interval)
	{
	}

	[Token(Token = "0x6000250")]
	[Address(RVA = "0xCE16F8", Offset = "0xCE16F8", VA = "0xCE16F8")]
	private List<string> GetEditorPathList()
	{
		return null;
	}

	[Token(Token = "0x6000251")]
	[Address(RVA = "0xCE18E4", Offset = "0xCE18E4", VA = "0xCE18E4")]
	public SceneEditorNode()
	{
	}
}
[Token(Token = "0x2000060")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x5C9AE4", Offset = "0x5C9AE4")]
public class SongEditor : MonoBehaviour
{
	[Token(Token = "0x200037C")]
	public enum DifficultySelect
	{
		[Token(Token = "0x4001848")]
		Easy,
		[Token(Token = "0x4001849")]
		Normal,
		[Token(Token = "0x400184A")]
		Hard
	}

	[Token(Token = "0x200037D")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDC0C", Offset = "0x5CDC0C")]
	private sealed class <SpawnEditorNodesIncrement>d__67 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400184B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400184C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400184D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SongEditor <>4__this;

		[Token(Token = "0x400184E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Stopwatch <watch>5__2;

		[Token(Token = "0x400184F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int <i>5__3;

		[Token(Token = "0x17000297")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600194A")]
			[Address(RVA = "0xFF62D8", Offset = "0xFF62D8", VA = "0xFF62D8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000298")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600194C")]
			[Address(RVA = "0xFF6320", Offset = "0xFF6320", VA = "0xFF6320", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001947")]
		[Address(RVA = "0xFF5B8C", Offset = "0xFF5B8C", VA = "0xFF5B8C")]
		[DebuggerHidden]
		public <SpawnEditorNodesIncrement>d__67(int <>1__state)
		{
		}

		[Token(Token = "0x6001948")]
		[Address(RVA = "0xFF5BB8", Offset = "0xFF5BB8", VA = "0xFF5BB8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001949")]
		[Address(RVA = "0xFF5BBC", Offset = "0xFF5BBC", VA = "0xFF5BBC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600194B")]
		[Address(RVA = "0xFF62E0", Offset = "0xFF62E0", VA = "0xFF62E0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400030E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Song currentSong;

	[Token(Token = "0x400030F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string filename;

	[Token(Token = "0x4000310")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float playBackTime;

	[Token(Token = "0x4000311")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private readonly bool TheTruth;

	[Token(Token = "0x4000312")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
	private bool playingBack;

	[Token(Token = "0x4000313")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float startZ;

	[Token(Token = "0x4000314")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float dspSongStartTime;

	[Token(Token = "0x4000315")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float startPlaybackTime;

	[Token(Token = "0x4000316")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float unitsPerSecond;

	[Token(Token = "0x4000317")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject sceneEditorNode;

	[Token(Token = "0x4000318")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float BPM;

	[Token(Token = "0x4000319")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float firstBeatBuffer;

	[Token(Token = "0x400031A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float songDuration;

	[Token(Token = "0x400031B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Transform playBackPoint;

	[Token(Token = "0x400031C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public DifficultySelect difficulty;

	[Token(Token = "0x400031D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private bool saveError;

	[Token(Token = "0x400031E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
	private bool loadError;

	[Token(Token = "0x400031F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[HideInInspector]
	public float secondsPerBeat;

	[Token(Token = "0x4000320")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[HideInInspector]
	public float totalbeats;

	[Token(Token = "0x4000321")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public List<SceneEditorNode> selectedNodes;

	[Token(Token = "0x4000322")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public ControllerScrollArea scrollArea;

	[Token(Token = "0x4000323")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public int MAX_SPAWN_BATCH_MILLISECONDS;

	[Token(Token = "0x4000324")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public bool useIncrementalLoad;

	[Token(Token = "0x4000325")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public LineRenderer line;

	[Token(Token = "0x4000326")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public int num_beats_on_line;

	[Token(Token = "0x4000327")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	public Color lineBaseColour;

	[Token(Token = "0x4000328")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	public float lineOpacityStart;

	[Token(Token = "0x4000329")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public float lineOpacityEnd;

	[Token(Token = "0x400032A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	public float lineWidth;

	[Token(Token = "0x400032B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public float majorBeatSize;

	[Token(Token = "0x400032C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	public float halfBeatSize;

	[Token(Token = "0x400032D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private List<LineRenderer> lines;

	[Token(Token = "0x400032E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private LineRenderer mainLine;

	[Token(Token = "0x400032F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public Transform lineParent;

	[Token(Token = "0x4000330")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public Material lineMaterial;

	[Token(Token = "0x6000252")]
	[Address(RVA = "0xA13284", Offset = "0xA13284", VA = "0xA13284")]
	public void Load()
	{
	}

	[Token(Token = "0x6000253")]
	[Address(RVA = "0xA13694", Offset = "0xA13694", VA = "0xA13694")]
	public void Save()
	{
	}

	[Token(Token = "0x6000254")]
	[Address(RVA = "0xA138E4", Offset = "0xA138E4", VA = "0xA138E4")]
	public void Clear()
	{
	}

	[Token(Token = "0x6000255")]
	[Address(RVA = "0xA13DF4", Offset = "0xA13DF4", VA = "0xA13DF4")]
	public bool HasNoChildren()
	{
		return default(bool);
	}

	[Token(Token = "0x6000256")]
	[Address(RVA = "0xA13E24", Offset = "0xA13E24", VA = "0xA13E24")]
	public void StartPlayback()
	{
	}

	[Token(Token = "0x6000257")]
	[Address(RVA = "0xA13F40", Offset = "0xA13F40", VA = "0xA13F40")]
	public void EndPlayback()
	{
	}

	[Token(Token = "0x6000258")]
	[Address(RVA = "0xA13FD0", Offset = "0xA13FD0", VA = "0xA13FD0")]
	private void CheckPlayback()
	{
	}

	[Token(Token = "0x6000259")]
	[Address(RVA = "0xA14094", Offset = "0xA14094", VA = "0xA14094")]
	private float GetSongTime()
	{
		return default(float);
	}

	[Token(Token = "0x600025A")]
	[Address(RVA = "0xA13F10", Offset = "0xA13F10", VA = "0xA13F10")]
	private int TimeToSamples(float time)
	{
		return default(int);
	}

	[Token(Token = "0x600025B")]
	[Address(RVA = "0xA140CC", Offset = "0xA140CC", VA = "0xA140CC")]
	private float SamplesToTime(int samples)
	{
		return default(float);
	}

	[Token(Token = "0x600025C")]
	[Address(RVA = "0xA140FC", Offset = "0xA140FC", VA = "0xA140FC")]
	private void SnapAllToHalfBeat()
	{
	}

	[Token(Token = "0x600025D")]
	[Address(RVA = "0xA14418", Offset = "0xA14418", VA = "0xA14418")]
	public void SetBPM(float bpm)
	{
	}

	[Token(Token = "0x600025E")]
	[Address(RVA = "0xA14BAC", Offset = "0xA14BAC", VA = "0xA14BAC")]
	private string GetDifficultyString(DifficultySelect diff)
	{
		return null;
	}

	[Token(Token = "0x600025F")]
	[Address(RVA = "0xA14C24", Offset = "0xA14C24", VA = "0xA14C24")]
	private void LoadYuri1()
	{
	}

	[Token(Token = "0x6000260")]
	[Address(RVA = "0xA14CA0", Offset = "0xA14CA0", VA = "0xA14CA0")]
	private void LoadYuri2()
	{
	}

	[Token(Token = "0x6000261")]
	[Address(RVA = "0xA14D1C", Offset = "0xA14D1C", VA = "0xA14D1C")]
	private void LoadYuri3()
	{
	}

	[Token(Token = "0x6000262")]
	[Address(RVA = "0xA14D98", Offset = "0xA14D98", VA = "0xA14D98")]
	private void LoadPyro1()
	{
	}

	[Token(Token = "0x6000263")]
	[Address(RVA = "0xA14E14", Offset = "0xA14E14", VA = "0xA14E14")]
	private void LoadPyro2()
	{
	}

	[Token(Token = "0x6000264")]
	[Address(RVA = "0xA14E90", Offset = "0xA14E90", VA = "0xA14E90")]
	private void LoadPyro3()
	{
	}

	[Token(Token = "0x6000265")]
	[Address(RVA = "0xA14F0C", Offset = "0xA14F0C", VA = "0xA14F0C")]
	private void LoadLais1()
	{
	}

	[Token(Token = "0x6000266")]
	[Address(RVA = "0xA14F88", Offset = "0xA14F88", VA = "0xA14F88")]
	private void LoadLais2()
	{
	}

	[Token(Token = "0x6000267")]
	[Address(RVA = "0xA15004", Offset = "0xA15004", VA = "0xA15004")]
	private void LoadLais3()
	{
	}

	[Token(Token = "0x6000268")]
	[Address(RVA = "0xA15080", Offset = "0xA15080", VA = "0xA15080")]
	private void LoadRemi1()
	{
	}

	[Token(Token = "0x6000269")]
	[Address(RVA = "0xA150FC", Offset = "0xA150FC", VA = "0xA150FC")]
	private void LoadRemi2()
	{
	}

	[Token(Token = "0x600026A")]
	[Address(RVA = "0xA15178", Offset = "0xA15178", VA = "0xA15178")]
	private void LoadRemi3()
	{
	}

	[Token(Token = "0x600026B")]
	[Address(RVA = "0xA151F4", Offset = "0xA151F4", VA = "0xA151F4")]
	private void LoadLiu1()
	{
	}

	[Token(Token = "0x600026C")]
	[Address(RVA = "0xA15270", Offset = "0xA15270", VA = "0xA15270")]
	private void LoadLiu2()
	{
	}

	[Token(Token = "0x600026D")]
	[Address(RVA = "0xA152EC", Offset = "0xA152EC", VA = "0xA152EC")]
	private void LoadLiu3()
	{
	}

	[Token(Token = "0x600026E")]
	[Address(RVA = "0xA15368", Offset = "0xA15368", VA = "0xA15368")]
	private void LoadDre1()
	{
	}

	[Token(Token = "0x600026F")]
	[Address(RVA = "0xA153E4", Offset = "0xA153E4", VA = "0xA153E4")]
	private void LoadDre2()
	{
	}

	[Token(Token = "0x6000270")]
	[Address(RVA = "0xA15460", Offset = "0xA15460", VA = "0xA15460")]
	private void LoadDre3()
	{
	}

	[Token(Token = "0x6000271")]
	[Address(RVA = "0xA154DC", Offset = "0xA154DC", VA = "0xA154DC")]
	private void LoadSonya1()
	{
	}

	[Token(Token = "0x6000272")]
	[Address(RVA = "0xA15558", Offset = "0xA15558", VA = "0xA15558")]
	private void LoadSonya2()
	{
	}

	[Token(Token = "0x6000273")]
	[Address(RVA = "0xA155D4", Offset = "0xA155D4", VA = "0xA155D4")]
	private void LoadSonya3()
	{
	}

	[Token(Token = "0x6000274")]
	[Address(RVA = "0xA15650", Offset = "0xA15650", VA = "0xA15650")]
	private void LoadCore1()
	{
	}

	[Token(Token = "0x6000275")]
	[Address(RVA = "0xA156CC", Offset = "0xA156CC", VA = "0xA156CC")]
	private void LoadCore2()
	{
	}

	[Token(Token = "0x6000276")]
	[Address(RVA = "0xA15748", Offset = "0xA15748", VA = "0xA15748")]
	private void LoadCore3()
	{
	}

	[Token(Token = "0x6000277")]
	[Address(RVA = "0xA157C4", Offset = "0xA157C4", VA = "0xA157C4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000278")]
	[Address(RVA = "0xA1580C", Offset = "0xA1580C", VA = "0xA1580C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000279")]
	[Address(RVA = "0xA13698", Offset = "0xA13698", VA = "0xA13698")]
	public void SaveDance()
	{
	}

	[Token(Token = "0x600027A")]
	[Address(RVA = "0xA13288", Offset = "0xA13288", VA = "0xA13288")]
	public void LoadDance()
	{
	}

	[Token(Token = "0x600027B")]
	[Address(RVA = "0xA15E3C", Offset = "0xA15E3C", VA = "0xA15E3C")]
	public string GetDanceFilePath(string _fileName)
	{
		return null;
	}

	[Token(Token = "0x600027C")]
	[Address(RVA = "0xA15EAC", Offset = "0xA15EAC", VA = "0xA15EAC")]
	private void SpawnEditorNodes()
	{
	}

	[Token(Token = "0x600027D")]
	[Address(RVA = "0xA16284", Offset = "0xA16284", VA = "0xA16284")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D7AC8", Offset = "0x5D7AC8")]
	private IEnumerator SpawnEditorNodesIncrement()
	{
		return null;
	}

	[Token(Token = "0x600027E")]
	[Address(RVA = "0xA162FC", Offset = "0xA162FC", VA = "0xA162FC")]
	public void SelectNode(SceneEditorNode node)
	{
	}

	[Token(Token = "0x600027F")]
	[Address(RVA = "0xA1645C", Offset = "0xA1645C", VA = "0xA1645C")]
	public void DeselectNode(SceneEditorNode node, bool remove = true)
	{
	}

	[Token(Token = "0x6000280")]
	[Address(RVA = "0xA1664C", Offset = "0xA1664C", VA = "0xA1664C")]
	public void SelectAllNodes()
	{
	}

	[Token(Token = "0x6000281")]
	[Address(RVA = "0xA16A14", Offset = "0xA16A14", VA = "0xA16A14")]
	public void DeselectAllNodes()
	{
	}

	[Token(Token = "0x6000282")]
	[Address(RVA = "0xA13948", Offset = "0xA13948", VA = "0xA13948")]
	private void RemoveEditorNodes()
	{
	}

	[Token(Token = "0x6000283")]
	[Address(RVA = "0xA16BBC", Offset = "0xA16BBC", VA = "0xA16BBC")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6000284")]
	[Address(RVA = "0xA170C4", Offset = "0xA170C4", VA = "0xA170C4")]
	private void SetupLineRenderer()
	{
	}

	[Token(Token = "0x6000285")]
	[Address(RVA = "0xA14510", Offset = "0xA14510", VA = "0xA14510")]
	private void SetUpNewLine()
	{
	}

	[Token(Token = "0x6000286")]
	[Address(RVA = "0xA173D0", Offset = "0xA173D0", VA = "0xA173D0")]
	private LineRenderer CreateNewLine(float length)
	{
		return null;
	}

	[Token(Token = "0x6000287")]
	[Address(RVA = "0xA17580", Offset = "0xA17580", VA = "0xA17580")]
	private Gradient SimpleLineColour(Color color, float alpha)
	{
		return null;
	}

	[Token(Token = "0x6000288")]
	[Address(RVA = "0xA17784", Offset = "0xA17784", VA = "0xA17784")]
	private float GetLineOffset()
	{
		return default(float);
	}

	[Token(Token = "0x6000289")]
	[Address(RVA = "0xA15830", Offset = "0xA15830", VA = "0xA15830")]
	private void UpdateLines()
	{
	}

	[Token(Token = "0x600028A")]
	[Address(RVA = "0xA15A68", Offset = "0xA15A68", VA = "0xA15A68")]
	private void SaveEditorNodesToLocalSong()
	{
	}

	[Token(Token = "0x600028B")]
	[Address(RVA = "0xA17904", Offset = "0xA17904", VA = "0xA17904")]
	public SongEditor()
	{
	}
}
[Token(Token = "0x2000061")]
public class AchievementFunctions : MonoBehaviour
{
	[Token(Token = "0x4000331")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<Achievement> achievements;

	[Token(Token = "0x600028C")]
	[Address(RVA = "0xC067FC", Offset = "0xC067FC", VA = "0xC067FC")]
	private void Start()
	{
	}

	[Token(Token = "0x600028D")]
	[Address(RVA = "0xC06800", Offset = "0xC06800", VA = "0xC06800")]
	private void Update()
	{
	}

	[Token(Token = "0x600028E")]
	[Address(RVA = "0xC06804", Offset = "0xC06804", VA = "0xC06804", Slot = "4")]
	public virtual void UnlockAchievement(string _achID)
	{
	}

	[Token(Token = "0x600028F")]
	[Address(RVA = "0xC06808", Offset = "0xC06808", VA = "0xC06808", Slot = "5")]
	public virtual void PopulateAchievements(List<string> _IDs)
	{
	}

	[Token(Token = "0x6000290")]
	[Address(RVA = "0xC0680C", Offset = "0xC0680C", VA = "0xC0680C")]
	public Achievement GetAchievement(string _achID)
	{
		return null;
	}

	[Token(Token = "0x6000291")]
	[Address(RVA = "0xC0693C", Offset = "0xC0693C", VA = "0xC0693C")]
	public AchievementFunctions()
	{
	}
}
[Serializable]
[Token(Token = "0x2000062")]
public class Achievement
{
	[Token(Token = "0x4000332")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string achievementID;

	[Token(Token = "0x4000333")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string name;

	[Token(Token = "0x4000334")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string description;

	[Token(Token = "0x4000335")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool achieved;

	[Token(Token = "0x6000292")]
	[Address(RVA = "0xC06780", Offset = "0xC06780", VA = "0xC06780")]
	public Achievement(string _id, string _name, string _desc, bool _ach = false)
	{
	}
}
[Token(Token = "0x2000063")]
public class AchievementsManager : MonoBehaviour
{
	[Token(Token = "0x4000336")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AchievementFunctions aFun;

	[Token(Token = "0x4000337")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<string> achievementIDs;

	[Token(Token = "0x4000338")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool disableAchievements;

	[Token(Token = "0x4000339")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private SaveManager sMan;

	[Token(Token = "0x400033A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private List<string> sessionClears;

	[Token(Token = "0x400033B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool gotAchievements;

	[Token(Token = "0x6000293")]
	[Address(RVA = "0xC069C0", Offset = "0xC069C0", VA = "0xC069C0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000294")]
	[Address(RVA = "0xC06A4C", Offset = "0xC06A4C", VA = "0xC06A4C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000295")]
	[Address(RVA = "0xC06A50", Offset = "0xC06A50", VA = "0xC06A50")]
	public void UnlockAchievement(string _achID)
	{
	}

	[Token(Token = "0x6000296")]
	[Address(RVA = "0xC06A54", Offset = "0xC06A54", VA = "0xC06A54")]
	public void UpdateAchievements()
	{
	}

	[Token(Token = "0x6000297")]
	[Address(RVA = "0xC06A58", Offset = "0xC06A58", VA = "0xC06A58")]
	private bool CheckAchievement(string _id)
	{
		return default(bool);
	}

	[Token(Token = "0x6000298")]
	[Address(RVA = "0xC06A60", Offset = "0xC06A60", VA = "0xC06A60")]
	private void CheckAllClearAchievements()
	{
	}

	[Token(Token = "0x6000299")]
	[Address(RVA = "0xC06A64", Offset = "0xC06A64", VA = "0xC06A64")]
	public AchievementsManager()
	{
	}
}
[Token(Token = "0x2000064")]
public class LeaderboardFinder : MonoBehaviour
{
	[Token(Token = "0x200037E")]
	public enum ScoreTextType
	{
		[Token(Token = "0x4001851")]
		e_stageTitle,
		[Token(Token = "0x4001852")]
		e_ranks,
		[Token(Token = "0x4001853")]
		e_names,
		[Token(Token = "0x4001854")]
		e_scores,
		[Token(Token = "0x4001855")]
		e_grades
	}

	[Token(Token = "0x600029A")]
	[Address(RVA = "0x102C670", Offset = "0x102C670", VA = "0x102C670")]
	public LeaderboardFinder()
	{
	}
}
[Token(Token = "0x2000065")]
public enum LBState
{
	[Token(Token = "0x400033D")]
	e_noBoard,
	[Token(Token = "0x400033E")]
	e_hasBoard,
	[Token(Token = "0x400033F")]
	e_hasScores,
	[Token(Token = "0x4000340")]
	e_scoreUploaded,
	[Token(Token = "0x4000341")]
	e_boardError
}
[Token(Token = "0x2000066")]
public class LeaderboardFunctions : MonoBehaviour
{
	[Token(Token = "0x4000342")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool ready;

	[Token(Token = "0x4000343")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public LBState state;

	[Token(Token = "0x4000344")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int currentPlayerRank;

	[Token(Token = "0x4000345")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<ScoreEntry> scores;

	[Token(Token = "0x4000346")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public string playerName;

	[Token(Token = "0x600029B")]
	[Address(RVA = "0x102C678", Offset = "0x102C678", VA = "0x102C678", Slot = "4")]
	public virtual void GetLeaderboard(string _boardName)
	{
	}

	[Token(Token = "0x600029C")]
	[Address(RVA = "0x102C67C", Offset = "0x102C67C", VA = "0x102C67C", Slot = "5")]
	public virtual void GetScores(int _count, LBRange _range = LBRange.e_global, int _startPoint = 1)
	{
	}

	[Token(Token = "0x600029D")]
	[Address(RVA = "0x102C680", Offset = "0x102C680", VA = "0x102C680", Slot = "6")]
	public virtual void UploadScore(int _score, int[] _grade)
	{
	}

	[Token(Token = "0x600029E")]
	[Address(RVA = "0x102C684", Offset = "0x102C684", VA = "0x102C684", Slot = "7")]
	public virtual void GetPlayerName()
	{
	}

	[Token(Token = "0x600029F")]
	[Address(RVA = "0x102C688", Offset = "0x102C688", VA = "0x102C688")]
	public LeaderboardFunctions()
	{
	}
}
[Serializable]
[Token(Token = "0x2000067")]
public class ScoreEntry
{
	[Token(Token = "0x4000347")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int rank;

	[Token(Token = "0x4000348")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string name;

	[Token(Token = "0x4000349")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int score;

	[Token(Token = "0x400034A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int grade;

	[Token(Token = "0x400034B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ulong ocuID;

	[Token(Token = "0x60002A0")]
	[Address(RVA = "0xCE2674", Offset = "0xCE2674", VA = "0xCE2674")]
	public ScoreEntry()
	{
	}
}
[Token(Token = "0x2000068")]
public class LeaderboardFunctionsOculus : LeaderboardFunctions
{
	[Token(Token = "0x60002A1")]
	[Address(RVA = "0x102C714", Offset = "0x102C714", VA = "0x102C714")]
	public LeaderboardFunctionsOculus()
	{
	}
}
[Token(Token = "0x2000069")]
public enum LBManState
{
	[Token(Token = "0x400034D")]
	e_none,
	[Token(Token = "0x400034E")]
	e_uploadScore,
	[Token(Token = "0x400034F")]
	e_downloadScores
}
[Token(Token = "0x200006A")]
public enum LBRange
{
	[Token(Token = "0x4000351")]
	e_global,
	[Token(Token = "0x4000352")]
	e_friends,
	[Token(Token = "0x4000353")]
	e_nearby
}
[Serializable]
[Token(Token = "0x200006B")]
public class LeaderboardUI
{
	[Token(Token = "0x4000354")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public TextMeshProUGUI stageText;

	[Token(Token = "0x4000355")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TextMeshProUGUI rankText;

	[Token(Token = "0x4000356")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextMeshProUGUI scoreText;

	[Token(Token = "0x4000357")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TextMeshProUGUI nameText;

	[Token(Token = "0x4000358")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public TextMeshProUGUI gradeText;

	[Token(Token = "0x60002A2")]
	[Address(RVA = "0x102DEFC", Offset = "0x102DEFC", VA = "0x102DEFC")]
	public LeaderboardUI()
	{
	}
}
[Token(Token = "0x200006C")]
public class LeaderboardManager : MonoBehaviour
{
	[Token(Token = "0x4000359")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private LeaderboardFunctions lFun;

	[Token(Token = "0x400035A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public LBManState state;

	[Token(Token = "0x400035B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public LBRange curRange;

	[Token(Token = "0x400035C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public LeaderboardUI topScoresUI;

	[Token(Token = "0x400035D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public LeaderboardUI nearbyScoresUI;

	[Token(Token = "0x400035E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public string targetBoard;

	[Token(Token = "0x400035F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public string title;

	[Token(Token = "0x4000360")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public int defaultScoresToGet;

	[Token(Token = "0x4000361")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public int friendScoresToGet;

	[Token(Token = "0x4000362")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public int nearbyScoresToGet;

	[Token(Token = "0x4000363")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public int scoresToGet;

	[Token(Token = "0x4000364")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public int scoreStartPoint;

	[Token(Token = "0x4000365")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public int scoreToUpload;

	[Token(Token = "0x4000366")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public int gradeToUpload;

	[Token(Token = "0x4000367")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public bool disableSubmission;

	[Token(Token = "0x4000368")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[HideInInspector]
	public int curBoard;

	[Token(Token = "0x4000369")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private bool waiting;

	[Token(Token = "0x60002A3")]
	[Address(RVA = "0x102C718", Offset = "0x102C718", VA = "0x102C718")]
	private void Start()
	{
	}

	[Token(Token = "0x60002A4")]
	[Address(RVA = "0x102C9EC", Offset = "0x102C9EC", VA = "0x102C9EC")]
	private void Update()
	{
	}

	[Token(Token = "0x60002A5")]
	[Address(RVA = "0x102CCAC", Offset = "0x102CCAC", VA = "0x102CCAC")]
	public void UpdateScoreboard()
	{
	}

	[Token(Token = "0x60002A6")]
	[Address(RVA = "0x102C77C", Offset = "0x102C77C", VA = "0x102C77C")]
	public void SetTargetBoard()
	{
	}

	[Token(Token = "0x60002A7")]
	[Address(RVA = "0x102CDA4", Offset = "0x102CDA4", VA = "0x102CDA4")]
	public void DisplayScores(List<ScoreEntry> _scores)
	{
	}

	[Token(Token = "0x60002A8")]
	[Address(RVA = "0x102DCEC", Offset = "0x102DCEC", VA = "0x102DCEC")]
	private void SetText(TextMeshProUGUI _mesh, string _text)
	{
	}

	[Token(Token = "0x60002A9")]
	[Address(RVA = "0x102D9F8", Offset = "0x102D9F8", VA = "0x102D9F8")]
	private void DisplayError()
	{
	}

	[Token(Token = "0x60002AA")]
	[Address(RVA = "0x102DA60", Offset = "0x102DA60", VA = "0x102DA60")]
	public void GetTopScores()
	{
	}

	[Token(Token = "0x60002AB")]
	[Address(RVA = "0x102DA70", Offset = "0x102DA70", VA = "0x102DA70")]
	public void GetFriendScores()
	{
	}

	[Token(Token = "0x60002AC")]
	[Address(RVA = "0x102D9E4", Offset = "0x102D9E4", VA = "0x102D9E4")]
	public void GetNearbyScores(bool _getBoard = true)
	{
	}

	[Token(Token = "0x60002AD")]
	[Address(RVA = "0x102DD94", Offset = "0x102DD94", VA = "0x102DD94")]
	private void GetScores(int _count, LBRange _range = LBRange.e_global, bool _getBoard = true)
	{
	}

	[Token(Token = "0x60002AE")]
	[Address(RVA = "0x102DDD8", Offset = "0x102DDD8", VA = "0x102DDD8")]
	public void UploadScore(int _score, Score.Rank _grade)
	{
	}

	[Token(Token = "0x60002AF")]
	[Address(RVA = "0x102DE34", Offset = "0x102DE34", VA = "0x102DE34")]
	public string GetDanceFilePath(string _fileName)
	{
		return null;
	}

	[Token(Token = "0x60002B0")]
	[Address(RVA = "0x102DA80", Offset = "0x102DA80", VA = "0x102DA80")]
	public static string GetGrade(int _grade)
	{
		return null;
	}

	[Token(Token = "0x60002B1")]
	[Address(RVA = "0x102DEA4", Offset = "0x102DEA4", VA = "0x102DEA4")]
	public string GetPlayerName()
	{
		return null;
	}

	[Token(Token = "0x60002B2")]
	[Address(RVA = "0x102DEC0", Offset = "0x102DEC0", VA = "0x102DEC0")]
	public void InitPlayerName()
	{
	}

	[Token(Token = "0x60002B3")]
	[Address(RVA = "0x102DEE0", Offset = "0x102DEE0", VA = "0x102DEE0")]
	public LeaderboardManager()
	{
	}
}
[Serializable]
[Token(Token = "0x200006D")]
public class DCSaveData
{
	[Token(Token = "0x400036A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float uriel_unlock;

	[Token(Token = "0x400036B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<CharacterData> characters;

	[Token(Token = "0x400036C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int prevRank;

	[Token(Token = "0x400036D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int consistentCount;

	[Token(Token = "0x400036E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<string> ARanks;

	[Token(Token = "0x400036F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public List<string> DRanks;

	[Token(Token = "0x60002B4")]
	[Address(RVA = "0xCC4A78", Offset = "0xCC4A78", VA = "0xCC4A78")]
	public DCSaveData()
	{
	}

	[Token(Token = "0x60002B5")]
	[Address(RVA = "0xCC4C9C", Offset = "0xCC4C9C", VA = "0xCC4C9C")]
	private void AddCharacter(string _name)
	{
	}

	[Token(Token = "0x60002B6")]
	[Address(RVA = "0xCC4D3C", Offset = "0xCC4D3C", VA = "0xCC4D3C")]
	public CharacterData GetCharacter(string _charName)
	{
		return null;
	}

	[Token(Token = "0x60002B7")]
	[Address(RVA = "0xCC4E4C", Offset = "0xCC4E4C", VA = "0xCC4E4C")]
	public StageData GetStage(CharacterData _charData, string _stageNum)
	{
		return null;
	}

	[Token(Token = "0x60002B8")]
	[Address(RVA = "0xCC4F60", Offset = "0xCC4F60", VA = "0xCC4F60")]
	public DifficultyData GetDifficulty(StageData _stage, string _difficulty)
	{
		return null;
	}

	[Token(Token = "0x60002B9")]
	[Address(RVA = "0xCC510C", Offset = "0xCC510C", VA = "0xCC510C")]
	public LocalLeaderboard GetLocalLeaderboard(string _collider)
	{
		return null;
	}

	[Token(Token = "0x60002BA")]
	[Address(RVA = "0xCC52AC", Offset = "0xCC52AC", VA = "0xCC52AC")]
	public void SubmitScore(string _collider, string _name, int _score, int _grade)
	{
	}

	[Token(Token = "0x60002BB")]
	[Address(RVA = "0xCC54B4", Offset = "0xCC54B4", VA = "0xCC54B4")]
	public void ResetPersonalLeaderboard(string _collider)
	{
	}

	[Token(Token = "0x60002BC")]
	[Address(RVA = "0xCC54D4", Offset = "0xCC54D4", VA = "0xCC54D4")]
	public void ResetPersonalLeaderboardsALL()
	{
	}

	[Token(Token = "0x60002BD")]
	[Address(RVA = "0xCC564C", Offset = "0xCC564C", VA = "0xCC564C")]
	public int GetCharacterRank(string _collider)
	{
		return default(int);
	}

	[Token(Token = "0x60002BE")]
	[Address(RVA = "0xCC5704", Offset = "0xCC5704", VA = "0xCC5704")]
	public int GetStageRank(string _collider)
	{
		return default(int);
	}

	[Token(Token = "0x60002BF")]
	[Address(RVA = "0xCC57D8", Offset = "0xCC57D8", VA = "0xCC57D8")]
	public int GetDifficultyRank(string _collider)
	{
		return default(int);
	}
}
[Serializable]
[Token(Token = "0x200006E")]
public class CharacterData
{
	[Token(Token = "0x4000370")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string name;

	[Token(Token = "0x4000371")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int averageGrade;

	[Token(Token = "0x4000372")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<StageData> stages;

	[Token(Token = "0x4000373")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool easyCleared;

	[Token(Token = "0x4000374")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool normalCleared;

	[Token(Token = "0x4000375")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
	public bool hardCleared;

	[Token(Token = "0x60002C0")]
	[Address(RVA = "0x10A94A8", Offset = "0x10A94A8", VA = "0x10A94A8")]
	public CharacterData()
	{
	}

	[Token(Token = "0x60002C1")]
	[Address(RVA = "0x10A95F8", Offset = "0x10A95F8", VA = "0x10A95F8")]
	private void AddStage(string _name)
	{
	}

	[Token(Token = "0x60002C2")]
	[Address(RVA = "0x10A9698", Offset = "0x10A9698", VA = "0x10A9698")]
	public void CheckGrade()
	{
	}
}
[Serializable]
[Token(Token = "0x200006F")]
public class StageData
{
	[Token(Token = "0x4000376")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string name;

	[Token(Token = "0x4000377")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool cleared;

	[Token(Token = "0x4000378")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int bestGrade;

	[Token(Token = "0x4000379")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<DifficultyData> difficulties;

	[Token(Token = "0x60002C3")]
	[Address(RVA = "0x13AF820", Offset = "0x13AF820", VA = "0x13AF820")]
	public StageData()
	{
	}

	[Token(Token = "0x60002C4")]
	[Address(RVA = "0x13AF950", Offset = "0x13AF950", VA = "0x13AF950")]
	private void AddDifficulty(string _name)
	{
	}

	[Token(Token = "0x60002C5")]
	[Address(RVA = "0x13AF9F0", Offset = "0x13AF9F0", VA = "0x13AF9F0")]
	public void CheckGrade()
	{
	}
}
[Serializable]
[Token(Token = "0x2000070")]
public class DifficultyData
{
	[Token(Token = "0x400037A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string name;

	[Token(Token = "0x400037B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool cleared;

	[Token(Token = "0x400037C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int bestGrade;

	[Token(Token = "0x400037D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public LocalLeaderboard leaderboard;

	[Token(Token = "0x60002C6")]
	[Address(RVA = "0xCC5070", Offset = "0xCC5070", VA = "0xCC5070")]
	public DifficultyData()
	{
	}

	[Token(Token = "0x60002C7")]
	[Address(RVA = "0xCC54A0", Offset = "0xCC54A0", VA = "0xCC54A0")]
	public void CheckGrade(int _grade)
	{
	}
}
[Serializable]
[Token(Token = "0x2000071")]
public class LocalLeaderboard
{
	[Token(Token = "0x400037E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public List<LocalLeaderboardEntry> entries;

	[Token(Token = "0x60002C8")]
	[Address(RVA = "0xA6F298", Offset = "0xA6F298", VA = "0xA6F298")]
	public LocalLeaderboard()
	{
	}

	[Token(Token = "0x60002C9")]
	[Address(RVA = "0xA6F31C", Offset = "0xA6F31C", VA = "0xA6F31C")]
	public void SubmitScore(LocalLeaderboardEntry _entry)
	{
	}

	[Token(Token = "0x60002CA")]
	[Address(RVA = "0xA6F454", Offset = "0xA6F454", VA = "0xA6F454")]
	private int SortByScore(LocalLeaderboardEntry _e1, LocalLeaderboardEntry _e2)
	{
		return default(int);
	}

	[Token(Token = "0x60002CB")]
	[Address(RVA = "0xA6F488", Offset = "0xA6F488", VA = "0xA6F488")]
	public void Reset()
	{
	}
}
[Serializable]
[Token(Token = "0x2000072")]
public class LocalLeaderboardEntry
{
	[Token(Token = "0x400037F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string name;

	[Token(Token = "0x4000380")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int score;

	[Token(Token = "0x4000381")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int grade;

	[Token(Token = "0x60002CC")]
	[Address(RVA = "0xA6F4DC", Offset = "0xA6F4DC", VA = "0xA6F4DC")]
	public LocalLeaderboardEntry()
	{
	}

	[Token(Token = "0x60002CD")]
	[Address(RVA = "0xA6F540", Offset = "0xA6F540", VA = "0xA6F540")]
	public LocalLeaderboardEntry(string _name, int _score, int _grade)
	{
	}
}
[Token(Token = "0x2000073")]
public class SaveManager : MonoBehaviour
{
	[Token(Token = "0x4000382")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public DCSaveData curSave;

	[Token(Token = "0x4000383")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private DCSaveData localLeaders;

	[Token(Token = "0x4000384")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public SettingsSave settingsSave;

	[Token(Token = "0x4000385")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private string userFilePath;

	[Token(Token = "0x4000386")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private string localFilePath;

	[Token(Token = "0x4000387")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private string settingsPath;

	[Token(Token = "0x4000388")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool disableProgress;

	[Token(Token = "0x4000389")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x5CEBB8", Offset = "0x5CEBB8")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5CEBB8", Offset = "0x5CEBB8")]
	public float auraDebug;

	[Token(Token = "0x400038A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static string[] Colliders;

	[Token(Token = "0x400038B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float localUrielProgress;

	[Token(Token = "0x60002CE")]
	[Address(RVA = "0xCDBC44", Offset = "0xCDBC44", VA = "0xCDBC44")]
	private void Start()
	{
	}

	[Token(Token = "0x60002CF")]
	[Address(RVA = "0xCDBF18", Offset = "0xCDBF18", VA = "0xCDBF18")]
	public void PopulateLocalPrefs()
	{
	}

	[Token(Token = "0x60002D0")]
	[Address(RVA = "0xCDBC68", Offset = "0xCDBC68", VA = "0xCDBC68")]
	public void LoadSettings()
	{
	}

	[Token(Token = "0x60002D1")]
	[Address(RVA = "0xCDBFE0", Offset = "0xCDBFE0", VA = "0xCDBFE0")]
	public void SaveSettings()
	{
	}

	[Token(Token = "0x60002D2")]
	[Address(RVA = "0xCDBFB8", Offset = "0xCDBFB8", VA = "0xCDBFB8")]
	private bool GetBool(string name, bool _default = true)
	{
		return default(bool);
	}

	[Token(Token = "0x60002D3")]
	[Address(RVA = "0xCDC24C", Offset = "0xCDC24C", VA = "0xCDC24C")]
	private void SetBool(string name, bool value)
	{
	}

	[Token(Token = "0x60002D4")]
	[Address(RVA = "0xCDC260", Offset = "0xCDC260", VA = "0xCDC260")]
	public void SavePrefs()
	{
	}

	[Token(Token = "0x60002D5")]
	[Address(RVA = "0xCDC2DC", Offset = "0xCDC2DC", VA = "0xCDC2DC")]
	public void ClearSave()
	{
	}

	[Token(Token = "0x60002D6")]
	[Address(RVA = "0xCDC50C", Offset = "0xCDC50C", VA = "0xCDC50C")]
	public Score.Rank GetColliderRank(string collider)
	{
		return default(Score.Rank);
	}

	[Token(Token = "0x60002D7")]
	[Address(RVA = "0xCDC62C", Offset = "0xCDC62C", VA = "0xCDC62C")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x5D7B28", Offset = "0x5D7B28")]
	public Score.Rank GetLocalColliderRank(string collider)
	{
		return default(Score.Rank);
	}

	[Token(Token = "0x60002D8")]
	[Address(RVA = "0xCDC39C", Offset = "0xCDC39C", VA = "0xCDC39C")]
	public void SetColliderRank(string collider, Score.Rank rank)
	{
	}

	[Token(Token = "0x60002D9")]
	[Address(RVA = "0xCDC634", Offset = "0xCDC634", VA = "0xCDC634")]
	public int GetStageRank(string _collider)
	{
		return default(int);
	}

	[Token(Token = "0x60002DA")]
	[Address(RVA = "0xCDC638", Offset = "0xCDC638", VA = "0xCDC638")]
	public void IncreaseUrielUnlock(float amount)
	{
	}

	[Token(Token = "0x60002DB")]
	[Address(RVA = "0xCDC4BC", Offset = "0xCDC4BC", VA = "0xCDC4BC")]
	public void ResetUrielProgress()
	{
	}

	[Token(Token = "0x60002DC")]
	[Address(RVA = "0xCDC6AC", Offset = "0xCDC6AC", VA = "0xCDC6AC")]
	public SaveManager()
	{
	}
}
[Serializable]
[Token(Token = "0x2000074")]
public class SettingsSave
{
	[Token(Token = "0x400038C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float masterVolume;

	[Token(Token = "0x400038D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float gameMusicVolume;

	[Token(Token = "0x400038E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float ambientMusicVolume;

	[Token(Token = "0x400038F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float sfxVolume;

	[Token(Token = "0x4000390")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float voVolume;

	[Token(Token = "0x4000391")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float auraQuality;

	[Token(Token = "0x4000392")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int language;

	[Token(Token = "0x4000393")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool enableDanceholograms;

	[Token(Token = "0x4000394")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
	public bool enableLightshows;

	[Token(Token = "0x4000395")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2E")]
	public bool enableTauntParticles;

	[Token(Token = "0x4000396")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2F")]
	public bool enableNodeSounds;

	[Token(Token = "0x4000397")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool enableAura;

	[Token(Token = "0x4000398")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	public bool skipIntros;

	[Token(Token = "0x4000399")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
	public bool postProcessing;

	[Token(Token = "0x400039A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public int antiAliasing;

	[Token(Token = "0x400039B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool smoothCamera;

	[Token(Token = "0x400039C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float smoothCamera_Smoothness;

	[Token(Token = "0x400039D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float smoothCamera_FOV;

	[Token(Token = "0x400039E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public bool smoothCamera_postProcessing;

	[Token(Token = "0x400039F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float left_Colour;

	[Token(Token = "0x40003A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float right_Colour;

	[Token(Token = "0x40003A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float double_colour;

	[Token(Token = "0x40003A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float room_xOffset;

	[Token(Token = "0x40003A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float room_zOffset;

	[Token(Token = "0x40003A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float room_rotation;

	[Token(Token = "0x40003A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public bool autoCalibration;

	[Token(Token = "0x40003A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public float calibrationHeight;

	[Token(Token = "0x40003A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public bool enableFog;

	[Token(Token = "0x40003A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
	public bool enableEnvironments;

	[Token(Token = "0x40003A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6A")]
	public bool enableParticles;

	[Token(Token = "0x40003AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6B")]
	public bool enableUI;

	[Token(Token = "0x60002DE")]
	[Address(RVA = "0xA0D3DC", Offset = "0xA0D3DC", VA = "0xA0D3DC")]
	public SettingsSave()
	{
	}
}
[Serializable]
[Token(Token = "0x2000075")]
public class TutorialChunk
{
	[Token(Token = "0x40003AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string title;

	[Token(Token = "0x40003AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TutorialInfo intro;

	[Token(Token = "0x40003AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject demoObject;

	[Token(Token = "0x40003AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string colliderFileName;

	[Token(Token = "0x40003AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public List<TutorialScoreCard> scoreCards;

	[Token(Token = "0x40003B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public List<TutorialResults> results;

	[Token(Token = "0x40003B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool done;

	[Token(Token = "0x40003B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	public bool passed;

	[Token(Token = "0x40003B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
	public bool fadeAudio;

	[Token(Token = "0x40003B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x43")]
	public bool ignorePower;

	[Token(Token = "0x40003B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private GlobalTutorialObjects gto;

	[Token(Token = "0x40003B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private GameManager gMan;

	[Token(Token = "0x40003B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float introTimer;

	[Token(Token = "0x40003B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float resultsTimer;

	[Token(Token = "0x60002DF")]
	[Address(RVA = "0xBCF874", Offset = "0xBCF874", VA = "0xBCF874")]
	public void StartChunk(GlobalTutorialObjects _gto)
	{
	}

	[Token(Token = "0x60002E0")]
	[Address(RVA = "0xBCFCE0", Offset = "0xBCFCE0", VA = "0xBCFCE0")]
	public void RepeatChunk()
	{
	}

	[Token(Token = "0x60002E1")]
	[Address(RVA = "0xBCFACC", Offset = "0xBCFACC", VA = "0xBCFACC")]
	private void SetupChunk()
	{
	}

	[Token(Token = "0x60002E2")]
	[Address(RVA = "0xBCFD04", Offset = "0xBCFD04", VA = "0xBCFD04")]
	public void UpdateChunk()
	{
	}

	[Token(Token = "0x60002E3")]
	[Address(RVA = "0xBCFE00", Offset = "0xBCFE00", VA = "0xBCFE00")]
	public void StartDance()
	{
	}

	[Token(Token = "0x60002E4")]
	[Address(RVA = "0xBCFF94", Offset = "0xBCFF94", VA = "0xBCFF94")]
	public void EndDance()
	{
	}

	[Token(Token = "0x60002E5")]
	[Address(RVA = "0xBCFBB0", Offset = "0xBCFBB0", VA = "0xBCFBB0")]
	private void SetInfo(TutorialInfo _info)
	{
	}

	[Token(Token = "0x60002E6")]
	[Address(RVA = "0xBD0364", Offset = "0xBD0364", VA = "0xBD0364")]
	public TutorialInfo GetCard(float _power)
	{
		return null;
	}

	[Token(Token = "0x60002E7")]
	[Address(RVA = "0xBD04E0", Offset = "0xBD04E0", VA = "0xBD04E0")]
	public void SkipText()
	{
	}

	[Token(Token = "0x60002E8")]
	[Address(RVA = "0xBD0504", Offset = "0xBD0504", VA = "0xBD0504")]
	public TutorialChunk()
	{
	}
}
[Serializable]
[Token(Token = "0x2000076")]
public class TutorialResults
{
	[Token(Token = "0x40003B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public TutorialInfo result;

	[Token(Token = "0x40003BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector2 reqAccuracy;

	[Token(Token = "0x40003BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector2 reqPower;

	[Token(Token = "0x40003BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int reqCascades;

	[Token(Token = "0x40003BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool passing;

	[Token(Token = "0x60002E9")]
	[Address(RVA = "0xBD022C", Offset = "0xBD022C", VA = "0xBD022C")]
	public bool Cleared(float _acc, float _pow, int _casc)
	{
		return default(bool);
	}

	[Token(Token = "0x60002EA")]
	[Address(RVA = "0xBD0F44", Offset = "0xBD0F44", VA = "0xBD0F44")]
	public TutorialResults()
	{
	}
}
[Serializable]
[Token(Token = "0x2000077")]
public class TutorialInfo
{
	[Token(Token = "0x40003BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public AudioClip VO;

	[Token(Token = "0x40003BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "MultilineAttribute", RVA = "0x5CEBFC", Offset = "0x5CEBFC")]
	public string text;

	[Token(Token = "0x40003C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float extradelay;

	[Token(Token = "0x60002EB")]
	[Address(RVA = "0xBD035C", Offset = "0xBD035C", VA = "0xBD035C")]
	public TutorialInfo()
	{
	}
}
[Serializable]
[Token(Token = "0x2000078")]
public class TutorialScoreCard
{
	[Token(Token = "0x40003C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public List<TutorialInfo> cardInfo;

	[Token(Token = "0x40003C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector2 reqPower;

	[Token(Token = "0x60002EC")]
	[Address(RVA = "0xBD0F4C", Offset = "0xBD0F4C", VA = "0xBD0F4C")]
	public TutorialScoreCard()
	{
	}
}
[Serializable]
[Token(Token = "0x2000079")]
public class GlobalTutorialObjects
{
	[Token(Token = "0x40003C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public AudioSource audioS;

	[Token(Token = "0x40003C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioSource musicSource;

	[Token(Token = "0x40003C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float audioFadeRate;

	[Token(Token = "0x40003C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TextMeshProUGUI title;

	[Token(Token = "0x40003C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public TextMeshProUGUI info;

	[Token(Token = "0x40003C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float universalDelay;

	[Token(Token = "0x40003C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject skipButton;

	[Token(Token = "0x60002ED")]
	[Address(RVA = "0x13ECFB8", Offset = "0x13ECFB8", VA = "0x13ECFB8")]
	public GlobalTutorialObjects()
	{
	}
}
[Token(Token = "0x200007A")]
public class TutorialManager : MonoBehaviour
{
	[Token(Token = "0x40003CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GlobalTutorialObjects globalObjects;

	[Token(Token = "0x40003CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<TutorialChunk> tutorialSections;

	[Token(Token = "0x40003CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[HideInInspector]
	public bool throwCards;

	[Token(Token = "0x40003CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private int curChunk;

	[Token(Token = "0x40003CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float cooldown;

	[Token(Token = "0x40003CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float timer;

	[Token(Token = "0x60002EE")]
	[Address(RVA = "0xBD05DC", Offset = "0xBD05DC", VA = "0xBD05DC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60002EF")]
	[Address(RVA = "0xBD0808", Offset = "0xBD0808", VA = "0xBD0808")]
	private void LoadAudio(TutorialInfo _info)
	{
	}

	[Token(Token = "0x60002F0")]
	[Address(RVA = "0xBD089C", Offset = "0xBD089C", VA = "0xBD089C")]
	private void Update()
	{
	}

	[Token(Token = "0x60002F1")]
	[Address(RVA = "0xBD0A94", Offset = "0xBD0A94", VA = "0xBD0A94")]
	public void StartTutorial()
	{
	}

	[Token(Token = "0x60002F2")]
	[Address(RVA = "0xBD0B00", Offset = "0xBD0B00", VA = "0xBD0B00")]
	public void EndDance()
	{
	}

	[Token(Token = "0x60002F3")]
	[Address(RVA = "0xBD0994", Offset = "0xBD0994", VA = "0xBD0994")]
	private void EndChunk()
	{
	}

	[Token(Token = "0x60002F4")]
	[Address(RVA = "0xBD0C0C", Offset = "0xBD0C0C", VA = "0xBD0C0C")]
	public void ThrowScoreCard(float _power)
	{
	}

	[Token(Token = "0x60002F5")]
	[Address(RVA = "0xBD0B70", Offset = "0xBD0B70", VA = "0xBD0B70")]
	public void BackToLobby()
	{
	}

	[Token(Token = "0x60002F6")]
	[Address(RVA = "0xBD0E1C", Offset = "0xBD0E1C", VA = "0xBD0E1C")]
	public void SkipText()
	{
	}

	[Token(Token = "0x60002F7")]
	[Address(RVA = "0xBD0EAC", Offset = "0xBD0EAC", VA = "0xBD0EAC")]
	public TutorialManager()
	{
	}
}
[Token(Token = "0x200007B")]
public class Keyboard : MonoBehaviour
{
	[Token(Token = "0x40003D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TextMeshProUGUI nameText;

	[Token(Token = "0x40003D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string input;

	[Token(Token = "0x40003D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool submitted;

	[Token(Token = "0x40003D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AudioClip keyPressClip;

	[Token(Token = "0x40003D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AudioClip backspaceClip;

	[Token(Token = "0x40003D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AudioClip submitClip;

	[Token(Token = "0x40003D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public AudioClip errorClip;

	[Token(Token = "0x40003D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private AudioSource _audio;

	[Token(Token = "0x40003D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Color confirmColour;

	[Token(Token = "0x40003D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public int maxLength;

	[Token(Token = "0x60002F8")]
	[Address(RVA = "0xA57FF4", Offset = "0xA57FF4", VA = "0xA57FF4")]
	private void Start()
	{
	}

	[Token(Token = "0x60002F9")]
	[Address(RVA = "0xA58084", Offset = "0xA58084", VA = "0xA58084")]
	private void UpdateString()
	{
	}

	[Token(Token = "0x60002FA")]
	[Address(RVA = "0xA581D0", Offset = "0xA581D0", VA = "0xA581D0")]
	public void SubmitKey(string key)
	{
	}

	[Token(Token = "0x60002FB")]
	[Address(RVA = "0xA582BC", Offset = "0xA582BC", VA = "0xA582BC")]
	public void Backspace()
	{
	}

	[Token(Token = "0x60002FC")]
	[Address(RVA = "0xA58348", Offset = "0xA58348", VA = "0xA58348")]
	public void Submit()
	{
	}

	[Token(Token = "0x60002FD")]
	[Address(RVA = "0xA58268", Offset = "0xA58268", VA = "0xA58268")]
	private void PlayClip(AudioClip clip)
	{
	}

	[Token(Token = "0x60002FE")]
	[Address(RVA = "0xA58478", Offset = "0xA58478", VA = "0xA58478")]
	private void HideKeyboard()
	{
	}

	[Token(Token = "0x60002FF")]
	[Address(RVA = "0xA584A0", Offset = "0xA584A0", VA = "0xA584A0")]
	public Keyboard()
	{
	}
}
[Token(Token = "0x200007C")]
public class Lobby_UI_Manager : MonoBehaviour
{
	[Token(Token = "0x200037F")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDC1C", Offset = "0x5CDC1C")]
	private sealed class <LoadSceneDelayed>d__13 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001856")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001857")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001858")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string scene;

		[Token(Token = "0x17000299")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001950")]
			[Address(RVA = "0x7EFA9C", Offset = "0x7EFA9C", VA = "0x7EFA9C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700029A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001952")]
			[Address(RVA = "0x7EFAE4", Offset = "0x7EFAE4", VA = "0x7EFAE4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600194D")]
		[Address(RVA = "0x7EF8F8", Offset = "0x7EF8F8", VA = "0x7EF8F8")]
		[DebuggerHidden]
		public <LoadSceneDelayed>d__13(int <>1__state)
		{
		}

		[Token(Token = "0x600194E")]
		[Address(RVA = "0x7EF924", Offset = "0x7EF924", VA = "0x7EF924", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600194F")]
		[Address(RVA = "0x7EF928", Offset = "0x7EF928", VA = "0x7EF928", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001951")]
		[Address(RVA = "0x7EFAA4", Offset = "0x7EFAA4", VA = "0x7EFAA4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40003DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Lobby_UI_Manager instance;

	[Token(Token = "0x40003DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<UI_Screen> screens;

	[Token(Token = "0x40003DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject settings;

	[Token(Token = "0x40003DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool lastPause;

	[Token(Token = "0x40003DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public List<AudioClip> musicPreviews;

	[Token(Token = "0x40003DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AudioClip lobbyMusic;

	[Token(Token = "0x40003E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AudioSource _audio;

	[Token(Token = "0x6000300")]
	[Address(RVA = "0xA6E528", Offset = "0xA6E528", VA = "0xA6E528")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000301")]
	[Address(RVA = "0xA6E5E0", Offset = "0xA6E5E0", VA = "0xA6E5E0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000302")]
	[Address(RVA = "0xA6E708", Offset = "0xA6E708", VA = "0xA6E708")]
	private void Update()
	{
	}

	[Token(Token = "0x6000303")]
	[Address(RVA = "0xA6E780", Offset = "0xA6E780", VA = "0xA6E780")]
	private void DisableAllScreens()
	{
	}

	[Token(Token = "0x6000304")]
	[Address(RVA = "0xA6E8A0", Offset = "0xA6E8A0", VA = "0xA6E8A0")]
	public void TransitionTo(UI_Screen screen)
	{
	}

	[Token(Token = "0x6000305")]
	[Address(RVA = "0xA6E8D8", Offset = "0xA6E8D8", VA = "0xA6E8D8")]
	public void LoadGame()
	{
	}

	[Token(Token = "0x6000306")]
	[Address(RVA = "0xA6EA40", Offset = "0xA6EA40", VA = "0xA6EA40")]
	public void LoadGameCustom()
	{
	}

	[Token(Token = "0x6000307")]
	[Address(RVA = "0xA6EB2C", Offset = "0xA6EB2C", VA = "0xA6EB2C")]
	public void LoadTutorial()
	{
	}

	[Token(Token = "0x6000308")]
	[Address(RVA = "0xA6EC74", Offset = "0xA6EC74", VA = "0xA6EC74")]
	public void LoadEditor()
	{
	}

	[Token(Token = "0x6000309")]
	[Address(RVA = "0xA6E9C8", Offset = "0xA6E9C8", VA = "0xA6E9C8")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D7B38", Offset = "0x5D7B38")]
	private IEnumerator LoadSceneDelayed(string scene)
	{
		return null;
	}

	[Token(Token = "0x600030A")]
	[Address(RVA = "0xA6ED60", Offset = "0xA6ED60", VA = "0xA6ED60")]
	public void SetLanguage(string _language)
	{
	}

	[Token(Token = "0x600030B")]
	[Address(RVA = "0xA6EE0C", Offset = "0xA6EE0C", VA = "0xA6EE0C")]
	public void ChangeMusic(int music)
	{
	}

	[Token(Token = "0x600030C")]
	[Address(RVA = "0xA6EEC4", Offset = "0xA6EEC4", VA = "0xA6EEC4")]
	public void ToggleSettings(bool on)
	{
	}

	[Token(Token = "0x600030D")]
	[Address(RVA = "0xA6EEE4", Offset = "0xA6EEE4", VA = "0xA6EEE4")]
	public Lobby_UI_Manager()
	{
	}
}
[Token(Token = "0x200007D")]
public class UI_Screen : MonoBehaviour
{
	[Token(Token = "0x600030E")]
	[Address(RVA = "0xD05A68", Offset = "0xD05A68", VA = "0xD05A68", Slot = "4")]
	public virtual void Transition(bool on)
	{
	}

	[Token(Token = "0x600030F")]
	[Address(RVA = "0xD05A9C", Offset = "0xD05A9C", VA = "0xD05A9C")]
	public UI_Screen()
	{
	}
}
[Token(Token = "0x200007E")]
public class GetSongData : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000380")]
	public class CharacterSongData
	{
		[Token(Token = "0x4001859")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x5D5C84", Offset = "0x5D5C84")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x5D5C84", Offset = "0x5D5C84")]
		public string songName;

		[Token(Token = "0x400185A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string songDuration;

		[Token(Token = "0x400185B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string songBPM;

		[Token(Token = "0x400185C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string filename;

		[Token(Token = "0x400185D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AudioClip songPreview;

		[Token(Token = "0x6001953")]
		[Address(RVA = "0x7EAE0C", Offset = "0x7EAE0C", VA = "0x7EAE0C")]
		public CharacterSongData()
		{
		}
	}

	[Token(Token = "0x40003E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string songName;

	[Token(Token = "0x40003E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string songDuration;

	[Token(Token = "0x40003E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string songBPM;

	[Token(Token = "0x40003E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int songRank;

	[Token(Token = "0x40003E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public List<CharacterSongData> _DreSongData;

	[Token(Token = "0x40003E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public List<CharacterSongData> _CoreSongData;

	[Token(Token = "0x40003E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public List<CharacterSongData> _LaisSongData;

	[Token(Token = "0x40003E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public List<CharacterSongData> _LuiwenSongData;

	[Token(Token = "0x40003E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public List<CharacterSongData> _PyrosSongData;

	[Token(Token = "0x40003EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public List<CharacterSongData> _RemiSongData;

	[Token(Token = "0x40003EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public List<CharacterSongData> _SonyaSongData;

	[Token(Token = "0x40003EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public List<CharacterSongData> _YuriSongData;

	[Token(Token = "0x40003ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public List<CharacterSongData> _UrielSongData;

	[Token(Token = "0x6000310")]
	[Address(RVA = "0x13EC580", Offset = "0x13EC580", VA = "0x13EC580")]
	public CharacterSongData GetBuiltInSongData(int characterID, int songID)
	{
		return null;
	}

	[Token(Token = "0x6000311")]
	[Address(RVA = "0x13EC6A0", Offset = "0x13EC6A0", VA = "0x13EC6A0")]
	public GetSongData()
	{
	}
}
[Token(Token = "0x200007F")]
public class LobbyMainMenuManager : MonoBehaviour
{
	[Token(Token = "0x2000381")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDC2C", Offset = "0x5CDC2C")]
	private sealed class <LateStart>d__36 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400185E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400185F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x1700029B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001957")]
			[Address(RVA = "0x7EF6A4", Offset = "0x7EF6A4", VA = "0x7EF6A4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700029C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001959")]
			[Address(RVA = "0x7EF6EC", Offset = "0x7EF6EC", VA = "0x7EF6EC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001954")]
		[Address(RVA = "0x7EF5D8", Offset = "0x7EF5D8", VA = "0x7EF5D8")]
		[DebuggerHidden]
		public <LateStart>d__36(int <>1__state)
		{
		}

		[Token(Token = "0x6001955")]
		[Address(RVA = "0x7EF604", Offset = "0x7EF604", VA = "0x7EF604", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001956")]
		[Address(RVA = "0x7EF608", Offset = "0x7EF608", VA = "0x7EF608", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001958")]
		[Address(RVA = "0x7EF6AC", Offset = "0x7EF6AC", VA = "0x7EF6AC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000382")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDC3C", Offset = "0x5CDC3C")]
	private sealed class <LoadSceneDelayed>d__54 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001860")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001861")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001862")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string scene;

		[Token(Token = "0x1700029D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600195D")]
			[Address(RVA = "0x7EF898", Offset = "0x7EF898", VA = "0x7EF898", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700029E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600195F")]
			[Address(RVA = "0x7EF8E0", Offset = "0x7EF8E0", VA = "0x7EF8E0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600195A")]
		[Address(RVA = "0x7EF6F4", Offset = "0x7EF6F4", VA = "0x7EF6F4")]
		[DebuggerHidden]
		public <LoadSceneDelayed>d__54(int <>1__state)
		{
		}

		[Token(Token = "0x600195B")]
		[Address(RVA = "0x7EF720", Offset = "0x7EF720", VA = "0x7EF720", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600195C")]
		[Address(RVA = "0x7EF724", Offset = "0x7EF724", VA = "0x7EF724", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600195E")]
		[Address(RVA = "0x7EF8A0", Offset = "0x7EF8A0", VA = "0x7EF8A0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40003EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static LobbyMainMenuManager instance;

	[Token(Token = "0x40003EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<LobbyMenu_AbstractClass> windows;

	[Token(Token = "0x40003F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[HideInInspector]
	public List<LobbyMenu_AbstractClass> settingsWindows;

	[Token(Token = "0x40003F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[HideInInspector]
	public LobbyMenu_AbstractClass currentWindow;

	[Token(Token = "0x40003F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	public LobbyMenu_AbstractClass previousWindow;

	[Token(Token = "0x40003F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[HideInInspector]
	public LobbyMenu_AbstractClass settingsPreviousWindow;

	[Token(Token = "0x40003F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Lobby_Title title;

	[Token(Token = "0x40003F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Lobby_CharacterSelect characterSelect;

	[Token(Token = "0x40003F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Lobby_SongSelect songSelect;

	[Token(Token = "0x40003F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Lobby_Leaderboards leaderboards;

	[Token(Token = "0x40003F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Lobby_CharacterBio characterBio;

	[Token(Token = "0x40003F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Lobby_CustomSongSelect customSongSelect;

	[Token(Token = "0x40003FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Lobby_Settings_Graphics settingsMenu;

	[Token(Token = "0x40003FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Lobby_Settings_Credits credits;

	[Token(Token = "0x40003FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Lobby_Settings_Language languageSettings;

	[Token(Token = "0x40003FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Lobby_Setting_Audio audioSettings;

	[Token(Token = "0x40003FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public TextMeshProUGUI currentMenuDescription;

	[Token(Token = "0x40003FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Button backButton;

	[Token(Token = "0x4000400")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Button settingsButton;

	[Token(Token = "0x4000401")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public GameObject discordButton;

	[Token(Token = "0x4000402")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[HideInInspector]
	public bool settingsBackButton_Toggle;

	[Token(Token = "0x4000403")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[HideInInspector]
	public UnityEvent goBack;

	[Token(Token = "0x4000404")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[HideInInspector]
	public UnityEvent goBack_Settings;

	[Token(Token = "0x4000405")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public AudioSource music;

	[Token(Token = "0x4000406")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public AudioClip defaultMusic;

	[Token(Token = "0x4000407")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public GameObject yuriObject;

	[Token(Token = "0x4000408")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public GameObject pyroObject;

	[Token(Token = "0x4000409")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public GameObject laisObject;

	[Token(Token = "0x400040A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public GameObject dreObject;

	[Token(Token = "0x400040B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public GameObject liuObject;

	[Token(Token = "0x400040C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public GameObject remiObject;

	[Token(Token = "0x400040D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public GameObject sonyaObject;

	[Token(Token = "0x400040E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public GameObject coreObject;

	[Token(Token = "0x400040F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public int selectedCharacter;

	[Token(Token = "0x4000410")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public LipSyncData[] yuriVO;

	[Token(Token = "0x4000411")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	public LipSyncData[] pyroVO;

	[Token(Token = "0x4000412")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	public LipSyncData[] laisVO;

	[Token(Token = "0x4000413")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public LipSyncData[] dreVO;

	[Token(Token = "0x4000414")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public LipSyncData[] liuVO;

	[Token(Token = "0x4000415")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public LipSyncData[] remiVO;

	[Token(Token = "0x4000416")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public LipSyncData[] sonyaVO;

	[Token(Token = "0x4000417")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	public LipSyncData[] coreVO;

	[Token(Token = "0x6000312")]
	[Address(RVA = "0xA67CD0", Offset = "0xA67CD0", VA = "0xA67CD0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000313")]
	[Address(RVA = "0xA67D88", Offset = "0xA67D88", VA = "0xA67D88")]
	private void Start()
	{
	}

	[Token(Token = "0x6000314")]
	[Address(RVA = "0xA68090", Offset = "0xA68090", VA = "0xA68090")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D7B98", Offset = "0x5D7B98")]
	private IEnumerator LateStart()
	{
		return null;
	}

	[Token(Token = "0x6000315")]
	[Address(RVA = "0xA680EC", Offset = "0xA680EC", VA = "0xA680EC")]
	public void GoBack()
	{
	}

	[Token(Token = "0x6000316")]
	[Address(RVA = "0xA68194", Offset = "0xA68194", VA = "0xA68194")]
	public void OpenSettings()
	{
	}

	[Token(Token = "0x6000317")]
	[Address(RVA = "0xA6824C", Offset = "0xA6824C", VA = "0xA6824C")]
	public void OpenCustom()
	{
	}

	[Token(Token = "0x6000318")]
	[Address(RVA = "0xA68304", Offset = "0xA68304", VA = "0xA68304")]
	public void OpenAudio()
	{
	}

	[Token(Token = "0x6000319")]
	[Address(RVA = "0xA683BC", Offset = "0xA683BC", VA = "0xA683BC")]
	public void OpenLanguage()
	{
	}

	[Token(Token = "0x600031A")]
	[Address(RVA = "0xA68474", Offset = "0xA68474", VA = "0xA68474")]
	public void CloseAllBut(LobbyMenu_AbstractClass current)
	{
	}

	[Token(Token = "0x600031B")]
	[Address(RVA = "0xA68658", Offset = "0xA68658", VA = "0xA68658")]
	public void SetMenuDescription(string description)
	{
	}

	[Token(Token = "0x600031C")]
	[Address(RVA = "0xA68698", Offset = "0xA68698", VA = "0xA68698")]
	public static string ParseString(string input)
	{
		return null;
	}

	[Token(Token = "0x600031D")]
	[Address(RVA = "0xA68828", Offset = "0xA68828", VA = "0xA68828")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600031E")]
	[Address(RVA = "0xA68878", Offset = "0xA68878", VA = "0xA68878")]
	public void LoadTutorial()
	{
	}

	[Token(Token = "0x600031F")]
	[Address(RVA = "0xA688EC", Offset = "0xA688EC", VA = "0xA688EC")]
	public void TurnOffAllCharacters()
	{
	}

	[Token(Token = "0x6000320")]
	[Address(RVA = "0xA68AD0", Offset = "0xA68AD0", VA = "0xA68AD0")]
	public void PlayMusic(AudioClip clip)
	{
	}

	[Token(Token = "0x6000321")]
	[Address(RVA = "0xA68B24", Offset = "0xA68B24", VA = "0xA68B24")]
	public void PlayLobbyMusic()
	{
	}

	[Token(Token = "0x6000322")]
	[Address(RVA = "0xA68BD4", Offset = "0xA68BD4", VA = "0xA68BD4")]
	public void ClearSave()
	{
	}

	[Token(Token = "0x6000323")]
	[Address(RVA = "0xA68D14", Offset = "0xA68D14", VA = "0xA68D14")]
	public void IncreaseUriel()
	{
	}

	[Token(Token = "0x6000324")]
	[Address(RVA = "0xA68D7C", Offset = "0xA68D7C", VA = "0xA68D7C")]
	public void SubmitDummyScore()
	{
	}

	[Token(Token = "0x6000325")]
	[Address(RVA = "0xA68D80", Offset = "0xA68D80", VA = "0xA68D80")]
	public void TestGetRanks()
	{
	}

	[Token(Token = "0x6000326")]
	[Address(RVA = "0xA68D84", Offset = "0xA68D84", VA = "0xA68D84")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D7BF8", Offset = "0x5D7BF8")]
	private IEnumerator LoadSceneDelayed(string scene)
	{
		return null;
	}

	[Token(Token = "0x6000327")]
	[Address(RVA = "0xA68C58", Offset = "0xA68C58", VA = "0xA68C58")]
	public void LoadScene(string scene)
	{
	}

	[Token(Token = "0x6000328")]
	[Address(RVA = "0xA68DFC", Offset = "0xA68DFC", VA = "0xA68DFC")]
	public void PlayYuriVO()
	{
	}

	[Token(Token = "0x6000329")]
	[Address(RVA = "0xA68EA0", Offset = "0xA68EA0", VA = "0xA68EA0")]
	public void PlayPyroVO()
	{
	}

	[Token(Token = "0x600032A")]
	[Address(RVA = "0xA68F44", Offset = "0xA68F44", VA = "0xA68F44")]
	public void PlayLaisVO()
	{
	}

	[Token(Token = "0x600032B")]
	[Address(RVA = "0xA68FE8", Offset = "0xA68FE8", VA = "0xA68FE8")]
	public void PlayDreVO()
	{
	}

	[Token(Token = "0x600032C")]
	[Address(RVA = "0xA6908C", Offset = "0xA6908C", VA = "0xA6908C")]
	public void PlayLiuVO()
	{
	}

	[Token(Token = "0x600032D")]
	[Address(RVA = "0xA69130", Offset = "0xA69130", VA = "0xA69130")]
	public void PlayRemiVO()
	{
	}

	[Token(Token = "0x600032E")]
	[Address(RVA = "0xA691D4", Offset = "0xA691D4", VA = "0xA691D4")]
	public void PlaySonyaVO()
	{
	}

	[Token(Token = "0x600032F")]
	[Address(RVA = "0xA69278", Offset = "0xA69278", VA = "0xA69278")]
	public void PlayCoreVO()
	{
	}

	[Token(Token = "0x6000330")]
	[Address(RVA = "0xA6931C", Offset = "0xA6931C", VA = "0xA6931C")]
	public LobbyMainMenuManager()
	{
	}
}
[Token(Token = "0x2000080")]
public abstract class LobbyMenu_AbstractClass : MonoBehaviour
{
	[Token(Token = "0x4000418")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string menuDescription;

	[Token(Token = "0x4000419")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[HideInInspector]
	public LobbyMainMenuManager mainMenuManager;

	[Token(Token = "0x400041A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Text descriptionText;

	[Token(Token = "0x6000331")]
	public abstract void OpenWindow();

	[Token(Token = "0x6000332")]
	public abstract void CloseWindow();

	[Token(Token = "0x6000333")]
	[Address(RVA = "0xA69324", Offset = "0xA69324", VA = "0xA69324", Slot = "6")]
	public virtual void Transition(bool activeState)
	{
	}

	[Token(Token = "0x6000334")]
	[Address(RVA = "0xA693F0", Offset = "0xA693F0", VA = "0xA693F0")]
	private void SetActiveState()
	{
	}

	[Token(Token = "0x6000335")]
	[Address(RVA = "0xA69418", Offset = "0xA69418", VA = "0xA69418")]
	protected LobbyMenu_AbstractClass()
	{
	}
}
[Token(Token = "0x2000081")]
public class Lobby_CharacterBio : LobbyMenu_AbstractClass
{
	[Token(Token = "0x6000336")]
	[Address(RVA = "0xA69524", Offset = "0xA69524", VA = "0xA69524", Slot = "5")]
	public override void CloseWindow()
	{
	}

	[Token(Token = "0x6000337")]
	[Address(RVA = "0xA6952C", Offset = "0xA6952C", VA = "0xA6952C", Slot = "4")]
	public override void OpenWindow()
	{
	}

	[Token(Token = "0x6000338")]
	[Address(RVA = "0xA6957C", Offset = "0xA6957C", VA = "0xA6957C")]
	public Lobby_CharacterBio()
	{
	}
}
[Serializable]
[Token(Token = "0x2000082")]
public class CharacterInfo
{
	[Token(Token = "0x400041B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Sprite characterBG;

	[Token(Token = "0x400041C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Sprite characterPortrait;

	[Token(Token = "0x400041D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string CharacterName;

	[Token(Token = "0x400041E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string CharacterDescription;

	[Token(Token = "0x400041F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public string CharacterStyle;

	[Token(Token = "0x4000420")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public string CharacterOrigin;

	[Token(Token = "0x6000339")]
	[Address(RVA = "0x10A9918", Offset = "0x10A9918", VA = "0x10A9918")]
	public CharacterInfo()
	{
	}
}
[Token(Token = "0x2000083")]
public class Lobby_CharacterSelect : LobbyMenu_AbstractClass
{
	[Token(Token = "0x4000421")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Image characterInfo_characterBG;

	[Token(Token = "0x4000422")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Image characterInfo_characterPortrait;

	[Token(Token = "0x4000423")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public TextMeshProUGUI characterInfo_CharacterName;

	[Token(Token = "0x4000424")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public TextMeshProUGUI characterInfo_CharacterRealName;

	[Token(Token = "0x4000425")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public TextMeshProUGUI characterInfo_CharacterDescription;

	[Token(Token = "0x4000426")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public TextMeshProUGUI characterInfo_CharacterAge;

	[Token(Token = "0x4000427")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Image selectedCharacterProfile;

	[Token(Token = "0x4000428")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Button selectButton;

	[Token(Token = "0x4000429")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Button bioButton;

	[Token(Token = "0x400042A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public List<CharacterInfo> _characterinfos;

	[Token(Token = "0x400042B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Button urielButton;

	[Token(Token = "0x400042C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public GameObject[] uriel_locked_objects;

	[Token(Token = "0x400042D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public GameObject[] uriel_unlocked_objects;

	[Token(Token = "0x400042E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Image urielBar;

	[Token(Token = "0x400042F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public GameObject yuriObject;

	[Token(Token = "0x4000430")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public GameObject pyroObject;

	[Token(Token = "0x4000431")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public GameObject laisObject;

	[Token(Token = "0x4000432")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public GameObject dreObject;

	[Token(Token = "0x4000433")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public GameObject liuObject;

	[Token(Token = "0x4000434")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public GameObject remiObject;

	[Token(Token = "0x4000435")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public GameObject sonyaObject;

	[Token(Token = "0x4000436")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public GameObject coreObject;

	[Token(Token = "0x4000437")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public GameObject urielObject;

	[Token(Token = "0x600033A")]
	[Address(RVA = "0xA69584", Offset = "0xA69584", VA = "0xA69584", Slot = "4")]
	public override void OpenWindow()
	{
	}

	[Token(Token = "0x600033B")]
	[Address(RVA = "0xA69854", Offset = "0xA69854", VA = "0xA69854", Slot = "5")]
	public override void CloseWindow()
	{
	}

	[Token(Token = "0x600033C")]
	[Address(RVA = "0xA6985C", Offset = "0xA6985C", VA = "0xA6985C")]
	private void HideAllCharacterBioObjects()
	{
	}

	[Token(Token = "0x600033D")]
	[Address(RVA = "0xA6992C", Offset = "0xA6992C", VA = "0xA6992C")]
	public void characterSelected()
	{
	}

	[Token(Token = "0x600033E")]
	[Address(RVA = "0xA69A18", Offset = "0xA69A18", VA = "0xA69A18")]
	public void CharacterBio()
	{
	}

	[Token(Token = "0x600033F")]
	[Address(RVA = "0xA69A5C", Offset = "0xA69A5C", VA = "0xA69A5C")]
	public void Yuri_Button()
	{
	}

	[Token(Token = "0x6000340")]
	[Address(RVA = "0xA69D5C", Offset = "0xA69D5C", VA = "0xA69D5C")]
	public void Pyros_Button()
	{
	}

	[Token(Token = "0x6000341")]
	[Address(RVA = "0xA69DEC", Offset = "0xA69DEC", VA = "0xA69DEC")]
	public void Lais_Button()
	{
	}

	[Token(Token = "0x6000342")]
	[Address(RVA = "0xA69E7C", Offset = "0xA69E7C", VA = "0xA69E7C")]
	public void Remis_Button()
	{
	}

	[Token(Token = "0x6000343")]
	[Address(RVA = "0xA69F0C", Offset = "0xA69F0C", VA = "0xA69F0C")]
	public void Liuwen_Button()
	{
	}

	[Token(Token = "0x6000344")]
	[Address(RVA = "0xA69F9C", Offset = "0xA69F9C", VA = "0xA69F9C")]
	public void Dre_Button()
	{
	}

	[Token(Token = "0x6000345")]
	[Address(RVA = "0xA6A02C", Offset = "0xA6A02C", VA = "0xA6A02C")]
	public void Sonya_Button()
	{
	}

	[Token(Token = "0x6000346")]
	[Address(RVA = "0xA6A0BC", Offset = "0xA6A0BC", VA = "0xA6A0BC")]
	public void Kores_Button()
	{
	}

	[Token(Token = "0x6000347")]
	[Address(RVA = "0xA6A14C", Offset = "0xA6A14C", VA = "0xA6A14C")]
	public void Uriel_Button()
	{
	}

	[Token(Token = "0x6000348")]
	[Address(RVA = "0xA69AEC", Offset = "0xA69AEC", VA = "0xA69AEC")]
	private void SetCharacterButton(int index)
	{
	}

	[Token(Token = "0x6000349")]
	[Address(RVA = "0xA6A18C", Offset = "0xA6A18C", VA = "0xA6A18C")]
	public Lobby_CharacterSelect()
	{
	}
}
[Token(Token = "0x2000084")]
public class Lobby_CustomSongSelect : LobbyMenu_AbstractClass
{
	[Token(Token = "0x4000438")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public List<Sprite> _ratingSprites;

	[Token(Token = "0x4000439")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int numcolliders;

	[Token(Token = "0x400043A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public int selectedSongIndex;

	[Token(Token = "0x400043B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int contextRange;

	[Token(Token = "0x400043C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public TextMeshProUGUI currentSong_Name;

	[Token(Token = "0x400043D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GetSongData songData;

	[Token(Token = "0x400043E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Button ScrollUpButton;

	[Token(Token = "0x400043F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Button ScrollDownButton;

	[Token(Token = "0x4000440")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Button danceButton;

	[Token(Token = "0x4000441")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Toggle easyToggle;

	[Token(Token = "0x4000442")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Toggle normalToggle;

	[Token(Token = "0x4000443")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Toggle proToggle;

	[Token(Token = "0x4000444")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Toggle expertToggle;

	[Token(Token = "0x4000445")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Toggle noFailtoggle;

	[Token(Token = "0x4000446")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public List<CustomSongPreview> top_SongPreviews;

	[Token(Token = "0x4000447")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public List<CustomSongPreview> bottom_SongPreviews;

	[Token(Token = "0x4000448")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public List<string> colliders;

	[Token(Token = "0x4000449")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public GameObject noSongsDisplay;

	[Token(Token = "0x400044A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public GameObject songList;

	[Token(Token = "0x600034A")]
	[Address(RVA = "0xA6A210", Offset = "0xA6A210", VA = "0xA6A210", Slot = "4")]
	public override void OpenWindow()
	{
	}

	[Token(Token = "0x600034B")]
	[Address(RVA = "0xA6A7CC", Offset = "0xA6A7CC", VA = "0xA6A7CC", Slot = "5")]
	public override void CloseWindow()
	{
	}

	[Token(Token = "0x600034C")]
	[Address(RVA = "0xA6A7D4", Offset = "0xA6A7D4", VA = "0xA6A7D4")]
	public void OpenLeaderboards()
	{
	}

	[Token(Token = "0x600034D")]
	[Address(RVA = "0xA6A790", Offset = "0xA6A790", VA = "0xA6A790")]
	private void RefreshUI()
	{
	}

	[Token(Token = "0x600034E")]
	[Address(RVA = "0xA6A9AC", Offset = "0xA6A9AC", VA = "0xA6A9AC")]
	private void UpdateSongPreviews()
	{
	}

	[Token(Token = "0x600034F")]
	[Address(RVA = "0xA6AC00", Offset = "0xA6AC00", VA = "0xA6AC00")]
	private void UpdateCurrentSong()
	{
	}

	[Token(Token = "0x6000350")]
	[Address(RVA = "0xA6AC8C", Offset = "0xA6AC8C", VA = "0xA6AC8C")]
	private void UpdateScrollButtons()
	{
	}

	[Token(Token = "0x6000351")]
	[Address(RVA = "0xA6A818", Offset = "0xA6A818", VA = "0xA6A818")]
	private void InitDifficultyToggles()
	{
	}

	[Token(Token = "0x6000352")]
	[Address(RVA = "0xA6ACE4", Offset = "0xA6ACE4", VA = "0xA6ACE4")]
	public void UpdateDifficulty(int diff)
	{
	}

	[Token(Token = "0x6000353")]
	[Address(RVA = "0xA6ADEC", Offset = "0xA6ADEC", VA = "0xA6ADEC")]
	public void Scroll(bool scrollDown)
	{
	}

	[Token(Token = "0x6000354")]
	[Address(RVA = "0xA6AE1C", Offset = "0xA6AE1C", VA = "0xA6AE1C")]
	public void Dance()
	{
	}

	[Token(Token = "0x6000355")]
	[Address(RVA = "0xA6A90C", Offset = "0xA6A90C", VA = "0xA6A90C")]
	public void SetSongFileName()
	{
	}

	[Token(Token = "0x6000356")]
	[Address(RVA = "0xA6AEBC", Offset = "0xA6AEBC", VA = "0xA6AEBC")]
	private string GetDifficultySuffix()
	{
		return null;
	}

	[Token(Token = "0x6000357")]
	[Address(RVA = "0xA6AFA8", Offset = "0xA6AFA8", VA = "0xA6AFA8")]
	public void LoadSongEditor()
	{
	}

	[Token(Token = "0x6000358")]
	[Address(RVA = "0xA6A554", Offset = "0xA6A554", VA = "0xA6A554")]
	private void GetColliders()
	{
	}

	[Token(Token = "0x6000359")]
	[Address(RVA = "0xA6AFFC", Offset = "0xA6AFFC", VA = "0xA6AFFC")]
	public Lobby_CustomSongSelect()
	{
	}
}
[Token(Token = "0x2000085")]
public class Lobby_Leaderboards : LobbyMenu_AbstractClass
{
	[Serializable]
	[Token(Token = "0x2000383")]
	public class LeaderboardEntry
	{
		[Token(Token = "0x4001863")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x5D5CBC", Offset = "0x5D5CBC")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x5D5CBC", Offset = "0x5D5CBC")]
		public GameObject entryObject;

		[Token(Token = "0x4001864")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TextMeshProUGUI position;

		[Token(Token = "0x4001865")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TextMeshProUGUI playerName;

		[Token(Token = "0x4001866")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TextMeshProUGUI playerScore;

		[Token(Token = "0x6001960")]
		[Address(RVA = "0x7EF8E8", Offset = "0x7EF8E8", VA = "0x7EF8E8")]
		public LeaderboardEntry()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x2000384")]
	public class LeaderboardScores
	{
		[Token(Token = "0x4001867")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x5D5CF4", Offset = "0x5D5CF4")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x5D5CF4", Offset = "0x5D5CF4")]
		public int position;

		[Token(Token = "0x4001868")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string playerName;

		[Token(Token = "0x4001869")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float playerScore;

		[Token(Token = "0x6001961")]
		[Address(RVA = "0x7EF8F0", Offset = "0x7EF8F0", VA = "0x7EF8F0")]
		public LeaderboardScores()
		{
		}
	}

	[Token(Token = "0x400044B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public List<LeaderboardEntry> _leaderboardEntrys;

	[Token(Token = "0x400044C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public List<LeaderboardScores> _leaderboardScores;

	[Token(Token = "0x400044D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Image characterIcon;

	[Token(Token = "0x400044E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Image characterBG;

	[Token(Token = "0x400044F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public TextMeshProUGUI characterName;

	[Token(Token = "0x4000450")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public TextMeshProUGUI songName;

	[Token(Token = "0x4000451")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public TextMeshProUGUI difficultyName;

	[Token(Token = "0x4000452")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public GameObject loadingText;

	[Token(Token = "0x4000453")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public GameObject previewLoadingText;

	[Token(Token = "0x4000454")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public LeaderboardEntry playerentry;

	[Token(Token = "0x4000455")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public LeaderboardEntry preview_above;

	[Token(Token = "0x4000456")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public LeaderboardEntry preview_player;

	[Token(Token = "0x4000457")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public LeaderboardEntry preview_below;

	[Token(Token = "0x4000458")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public int leaderboardIndex;

	[Token(Token = "0x600035A")]
	[Address(RVA = "0xA6B108", Offset = "0xA6B108", VA = "0xA6B108", Slot = "5")]
	public override void CloseWindow()
	{
	}

	[Token(Token = "0x600035B")]
	[Address(RVA = "0xA6B110", Offset = "0xA6B110", VA = "0xA6B110", Slot = "4")]
	public override void OpenWindow()
	{
	}

	[Token(Token = "0x600035C")]
	[Address(RVA = "0xA6B160", Offset = "0xA6B160", VA = "0xA6B160")]
	public void LoadLeaderboard()
	{
	}

	[Token(Token = "0x600035D")]
	[Address(RVA = "0xA6B164", Offset = "0xA6B164", VA = "0xA6B164")]
	public void UpdateEntryList(int startAt = 0)
	{
	}

	[Token(Token = "0x600035E")]
	[Address(RVA = "0xA6B168", Offset = "0xA6B168", VA = "0xA6B168")]
	public void ScrollUp()
	{
	}

	[Token(Token = "0x600035F")]
	[Address(RVA = "0xA6B16C", Offset = "0xA6B16C", VA = "0xA6B16C")]
	public void ScrollDown()
	{
	}

	[Token(Token = "0x6000360")]
	[Address(RVA = "0xA6B170", Offset = "0xA6B170", VA = "0xA6B170")]
	public void UpdateNearbyScores(LeaderboardScores _playerScore, LeaderboardScores _previewAbove, LeaderboardScores _previewPlayer, LeaderboardScores _previewBelow)
	{
	}

	[Token(Token = "0x6000361")]
	[Address(RVA = "0xA6B174", Offset = "0xA6B174", VA = "0xA6B174")]
	private void ResetScoreDisplays()
	{
	}

	[Token(Token = "0x6000362")]
	[Address(RVA = "0xA6B178", Offset = "0xA6B178", VA = "0xA6B178")]
	public Lobby_Leaderboards()
	{
	}
}
[Token(Token = "0x2000086")]
public class Lobby_MainMenu : LobbyMenu_AbstractClass
{
	[Token(Token = "0x6000363")]
	[Address(RVA = "0xA6B248", Offset = "0xA6B248", VA = "0xA6B248")]
	private void Start()
	{
	}

	[Token(Token = "0x6000364")]
	[Address(RVA = "0xA6B24C", Offset = "0xA6B24C", VA = "0xA6B24C", Slot = "4")]
	public override void OpenWindow()
	{
	}

	[Token(Token = "0x6000365")]
	[Address(RVA = "0xA6B354", Offset = "0xA6B354", VA = "0xA6B354", Slot = "5")]
	public override void CloseWindow()
	{
	}

	[Token(Token = "0x6000366")]
	[Address(RVA = "0xA6B35C", Offset = "0xA6B35C", VA = "0xA6B35C")]
	public void Arcade_Button()
	{
	}

	[Token(Token = "0x6000367")]
	[Address(RVA = "0xA6B3A0", Offset = "0xA6B3A0", VA = "0xA6B3A0")]
	public void CustomSongs_Button()
	{
	}

	[Token(Token = "0x6000368")]
	[Address(RVA = "0xA6B3AC", Offset = "0xA6B3AC", VA = "0xA6B3AC")]
	public void HowToPlay_Button()
	{
	}

	[Token(Token = "0x6000369")]
	[Address(RVA = "0xA6B47C", Offset = "0xA6B47C", VA = "0xA6B47C")]
	public Lobby_MainMenu()
	{
	}
}
[Token(Token = "0x2000087")]
public class Lobby_Setting_Audio : LobbyMenu_AbstractClass
{
	[Token(Token = "0x4000459")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Slider slider_MasterVolume;

	[Token(Token = "0x400045A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Slider slider_GameMusic;

	[Token(Token = "0x400045B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Slider slider_AmbientMusic;

	[Token(Token = "0x400045C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Slider slider_SFXVolume;

	[Token(Token = "0x400045D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Slider slider_VoiceVolume;

	[Token(Token = "0x400045E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Toggle nodeHits;

	[Token(Token = "0x600036A")]
	[Address(RVA = "0xA6B484", Offset = "0xA6B484", VA = "0xA6B484", Slot = "4")]
	public override void OpenWindow()
	{
	}

	[Token(Token = "0x600036B")]
	[Address(RVA = "0xA6B688", Offset = "0xA6B688", VA = "0xA6B688", Slot = "5")]
	public override void CloseWindow()
	{
	}

	[Token(Token = "0x600036C")]
	[Address(RVA = "0xA6B4DC", Offset = "0xA6B4DC", VA = "0xA6B4DC")]
	public void LoadSettings()
	{
	}

	[Token(Token = "0x600036D")]
	[Address(RVA = "0xA6B714", Offset = "0xA6B714", VA = "0xA6B714")]
	private void SaveSettings()
	{
	}

	[Token(Token = "0x600036E")]
	[Address(RVA = "0xA6B8E0", Offset = "0xA6B8E0", VA = "0xA6B8E0")]
	public void UpdateAudio()
	{
	}

	[Token(Token = "0x600036F")]
	[Address(RVA = "0xA6BB50", Offset = "0xA6BB50", VA = "0xA6BB50")]
	public Lobby_Setting_Audio()
	{
	}
}
[Token(Token = "0x2000088")]
public class Lobby_SettingsMenu : LobbyMenu_AbstractClass
{
	[Token(Token = "0x6000370")]
	[Address(RVA = "0xA6BB58", Offset = "0xA6BB58", VA = "0xA6BB58", Slot = "4")]
	public override void OpenWindow()
	{
	}

	[Token(Token = "0x6000371")]
	[Address(RVA = "0xA6BB90", Offset = "0xA6BB90", VA = "0xA6BB90", Slot = "5")]
	public override void CloseWindow()
	{
	}

	[Token(Token = "0x6000372")]
	[Address(RVA = "0xA6BBC4", Offset = "0xA6BBC4", VA = "0xA6BBC4")]
	public void Graphics_Button()
	{
	}

	[Token(Token = "0x6000373")]
	[Address(RVA = "0xA6BBD0", Offset = "0xA6BBD0", VA = "0xA6BBD0")]
	public void Audio_Button()
	{
	}

	[Token(Token = "0x6000374")]
	[Address(RVA = "0xA6BC14", Offset = "0xA6BC14", VA = "0xA6BC14")]
	public void Language_Button()
	{
	}

	[Token(Token = "0x6000375")]
	[Address(RVA = "0xA6BC58", Offset = "0xA6BC58", VA = "0xA6BC58")]
	public void Credits_Button()
	{
	}

	[Token(Token = "0x6000376")]
	[Address(RVA = "0xA6BC9C", Offset = "0xA6BC9C", VA = "0xA6BC9C")]
	public void Gameplay_Button()
	{
	}

	[Token(Token = "0x6000377")]
	[Address(RVA = "0xA6BCA8", Offset = "0xA6BCA8", VA = "0xA6BCA8")]
	public Lobby_SettingsMenu()
	{
	}
}
[Token(Token = "0x2000089")]
public class Lobby_Settings_Credits : LobbyMenu_AbstractClass
{
	[Token(Token = "0x6000378")]
	[Address(RVA = "0xA6BCB0", Offset = "0xA6BCB0", VA = "0xA6BCB0", Slot = "4")]
	public override void OpenWindow()
	{
	}

	[Token(Token = "0x6000379")]
	[Address(RVA = "0xA6BD00", Offset = "0xA6BD00", VA = "0xA6BD00", Slot = "5")]
	public override void CloseWindow()
	{
	}

	[Token(Token = "0x600037A")]
	[Address(RVA = "0xA6BD08", Offset = "0xA6BD08", VA = "0xA6BD08")]
	public Lobby_Settings_Credits()
	{
	}
}
[Token(Token = "0x200008A")]
public class Lobby_Settings_Graphics : LobbyMenu_AbstractClass
{
	[Token(Token = "0x400045F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x5CEC9C", Offset = "0x5CEC9C")]
	public GameObject SettingsMenu;

	[Token(Token = "0x4000460")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Toggle toggle_CharacterHologram;

	[Token(Token = "0x4000461")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Toggle toggle_SkipIntro;

	[Token(Token = "0x4000462")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Toggle toggle_gameui;

	[Token(Token = "0x4000463")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Toggle toggle_particles;

	[Token(Token = "0x4000464")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x5CECD4", Offset = "0x5CECD4")]
	public GameObject coloursMenu;

	[Token(Token = "0x4000465")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Slider slider_leftColour;

	[Token(Token = "0x4000466")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Slider slider_rightColour;

	[Token(Token = "0x4000467")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Slider slider_doubleColour;

	[Token(Token = "0x4000468")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Image leftColourPreview;

	[Token(Token = "0x4000469")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Image rightColourPreview;

	[Token(Token = "0x400046A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Image doubleColourPreview;

	[Token(Token = "0x600037B")]
	[Address(RVA = "0xA6BD10", Offset = "0xA6BD10", VA = "0xA6BD10", Slot = "4")]
	public override void OpenWindow()
	{
	}

	[Token(Token = "0x600037C")]
	[Address(RVA = "0xA6BE94", Offset = "0xA6BE94", VA = "0xA6BE94")]
	public void Start()
	{
	}

	[Token(Token = "0x600037D")]
	[Address(RVA = "0xA6BED8", Offset = "0xA6BED8", VA = "0xA6BED8", Slot = "5")]
	public override void CloseWindow()
	{
	}

	[Token(Token = "0x600037E")]
	[Address(RVA = "0xA6BD84", Offset = "0xA6BD84", VA = "0xA6BD84")]
	public void LoadSettings()
	{
	}

	[Token(Token = "0x600037F")]
	[Address(RVA = "0xA6BF20", Offset = "0xA6BF20", VA = "0xA6BF20")]
	public void SaveSettings()
	{
	}

	[Token(Token = "0x6000380")]
	[Address(RVA = "0xA6C174", Offset = "0xA6C174", VA = "0xA6C174")]
	public void UpdateAA()
	{
	}

	[Token(Token = "0x6000381")]
	[Address(RVA = "0xA6C1D8", Offset = "0xA6C1D8", VA = "0xA6C1D8")]
	public void UpdatePost()
	{
	}

	[Token(Token = "0x6000382")]
	[Address(RVA = "0xA6C08C", Offset = "0xA6C08C", VA = "0xA6C08C")]
	public void UpdateSliders()
	{
	}

	[Token(Token = "0x6000383")]
	[Address(RVA = "0xA6C1DC", Offset = "0xA6C1DC", VA = "0xA6C1DC")]
	public void ResetColour()
	{
	}

	[Token(Token = "0x6000384")]
	[Address(RVA = "0xA6C338", Offset = "0xA6C338", VA = "0xA6C338")]
	public void ApplyOffset()
	{
	}

	[Token(Token = "0x6000385")]
	[Address(RVA = "0xA6C3C4", Offset = "0xA6C3C4", VA = "0xA6C3C4")]
	public void ToggleCalibration()
	{
	}

	[Token(Token = "0x6000386")]
	[Address(RVA = "0xA6C3C8", Offset = "0xA6C3C8", VA = "0xA6C3C8")]
	public void CalibrateHeight()
	{
	}

	[Token(Token = "0x6000387")]
	[Address(RVA = "0xA6C3CC", Offset = "0xA6C3CC", VA = "0xA6C3CC")]
	public void OpenGameplay()
	{
	}

	[Token(Token = "0x6000388")]
	[Address(RVA = "0xA6C3D0", Offset = "0xA6C3D0", VA = "0xA6C3D0")]
	public void OpenGraphics()
	{
	}

	[Token(Token = "0x6000389")]
	[Address(RVA = "0xA6C3D4", Offset = "0xA6C3D4", VA = "0xA6C3D4")]
	public Lobby_Settings_Graphics()
	{
	}
}
[Token(Token = "0x200008B")]
public class Lobby_Settings_Language : LobbyMenu_AbstractClass
{
	[Token(Token = "0x400046B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject[] highlights;

	[Token(Token = "0x400046C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Image currentLanguageFlag;

	[Token(Token = "0x400046D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public TextMeshProUGUI currentLanguageText;

	[Token(Token = "0x400046E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Sprite[] flags;

	[Token(Token = "0x600038A")]
	[Address(RVA = "0xA6C3DC", Offset = "0xA6C3DC", VA = "0xA6C3DC", Slot = "4")]
	public override void OpenWindow()
	{
	}

	[Token(Token = "0x600038B")]
	[Address(RVA = "0xA6C6E4", Offset = "0xA6C6E4", VA = "0xA6C6E4", Slot = "5")]
	public override void CloseWindow()
	{
	}

	[Token(Token = "0x600038C")]
	[Address(RVA = "0xA6C6EC", Offset = "0xA6C6EC", VA = "0xA6C6EC")]
	private void ResetHighlights()
	{
	}

	[Token(Token = "0x600038D")]
	[Address(RVA = "0xA6C434", Offset = "0xA6C434", VA = "0xA6C434")]
	private void CheckCurrentLanguage()
	{
	}

	[Token(Token = "0x600038E")]
	[Address(RVA = "0xA6C7C4", Offset = "0xA6C7C4", VA = "0xA6C7C4")]
	public void SetCurrentLanguages(int _langInt)
	{
	}

	[Token(Token = "0x600038F")]
	[Address(RVA = "0xA6CE94", Offset = "0xA6CE94", VA = "0xA6CE94")]
	public Lobby_Settings_Language()
	{
	}
}
[Token(Token = "0x200008C")]
public class Lobby_SongSelect : LobbyMenu_AbstractClass
{
	[Token(Token = "0x400046F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public List<Sprite> _ratingSprites;

	[Token(Token = "0x4000470")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int maxNumberOfSongs;

	[Token(Token = "0x4000471")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public int songInt;

	[Token(Token = "0x4000472")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int contextRange;

	[Token(Token = "0x4000473")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public TextMeshProUGUI currentSong_Name;

	[Token(Token = "0x4000474")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public TextMeshProUGUI currentSong_Duration;

	[Token(Token = "0x4000475")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public TextMeshProUGUI currentSong_BPM;

	[Token(Token = "0x4000476")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public TextMeshProUGUI currentSong_Ranking;

	[Token(Token = "0x4000477")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public GetSongData songData;

	[Token(Token = "0x4000478")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Button ScrollUpButton;

	[Token(Token = "0x4000479")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Button ScrollDownButton;

	[Token(Token = "0x400047A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Toggle easyToggle;

	[Token(Token = "0x400047B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Toggle normalToggle;

	[Token(Token = "0x400047C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Toggle proToggle;

	[Token(Token = "0x400047D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Toggle xToggle;

	[Token(Token = "0x400047E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Toggle noFailtoggle;

	[Token(Token = "0x400047F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public Image characterIcon;

	[Token(Token = "0x4000480")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public Image characterBG;

	[Token(Token = "0x4000481")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public TextMeshProUGUI characterName;

	[Token(Token = "0x4000482")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public TextMeshProUGUI characterRank;

	[Token(Token = "0x4000483")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public GameObject moreButton;

	[Token(Token = "0x4000484")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public List<SongPreviews> top_SongPreviews;

	[Token(Token = "0x4000485")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public List<SongPreviews> bottom_SongPreviews;

	[Token(Token = "0x4000486")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public TextMeshProUGUI rankingPreview1_rank;

	[Token(Token = "0x4000487")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public TextMeshProUGUI rankingPreview1_name;

	[Token(Token = "0x4000488")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public TextMeshProUGUI rankingPreview1_score;

	[Token(Token = "0x4000489")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public TextMeshProUGUI rankingPreview2_rank;

	[Token(Token = "0x400048A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public TextMeshProUGUI rankingPreview2_name;

	[Token(Token = "0x400048B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public TextMeshProUGUI rankingPreview2_score;

	[Token(Token = "0x400048C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public TextMeshProUGUI rankingPreview3_rank;

	[Token(Token = "0x400048D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public TextMeshProUGUI rankingPreview3_name;

	[Token(Token = "0x400048E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public TextMeshProUGUI rankingPreview3_score;

	[Token(Token = "0x400048F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	public GameObject networkError;

	[Token(Token = "0x6000390")]
	[Address(RVA = "0xA6CE9C", Offset = "0xA6CE9C", VA = "0xA6CE9C", Slot = "4")]
	public override void OpenWindow()
	{
	}

	[Token(Token = "0x6000391")]
	[Address(RVA = "0xA6D458", Offset = "0xA6D458", VA = "0xA6D458", Slot = "5")]
	public override void CloseWindow()
	{
	}

	[Token(Token = "0x6000392")]
	[Address(RVA = "0xA6D460", Offset = "0xA6D460", VA = "0xA6D460")]
	public void OpenLeaderboards()
	{
	}

	[Token(Token = "0x6000393")]
	[Address(RVA = "0xA6D2B8", Offset = "0xA6D2B8", VA = "0xA6D2B8")]
	private void RefreshUI()
	{
	}

	[Token(Token = "0x6000394")]
	[Address(RVA = "0xA6D7DC", Offset = "0xA6D7DC", VA = "0xA6D7DC")]
	private void UpdateSongPreviews()
	{
	}

	[Token(Token = "0x6000395")]
	[Address(RVA = "0xA6D994", Offset = "0xA6D994", VA = "0xA6D994")]
	private void UpdateCurrentSong()
	{
	}

	[Token(Token = "0x6000396")]
	[Address(RVA = "0xA6DB30", Offset = "0xA6DB30", VA = "0xA6DB30")]
	private void UpdateScrollButtons()
	{
	}

	[Token(Token = "0x6000397")]
	[Address(RVA = "0xA6D4A4", Offset = "0xA6D4A4", VA = "0xA6D4A4")]
	private void InitDifficultyToggles()
	{
	}

	[Token(Token = "0x6000398")]
	[Address(RVA = "0xA6DBE8", Offset = "0xA6DBE8", VA = "0xA6DBE8")]
	public void UpdateDifficulty(int diff)
	{
	}

	[Token(Token = "0x6000399")]
	[Address(RVA = "0xA6DCF0", Offset = "0xA6DCF0", VA = "0xA6DCF0")]
	public void Scroll(bool scrollDown)
	{
	}

	[Token(Token = "0x600039A")]
	[Address(RVA = "0xA6DD20", Offset = "0xA6DD20", VA = "0xA6DD20")]
	public void Dance()
	{
	}

	[Token(Token = "0x600039B")]
	[Address(RVA = "0xA6D5E4", Offset = "0xA6D5E4", VA = "0xA6D5E4")]
	public void SetSongFileName()
	{
	}

	[Token(Token = "0x600039C")]
	[Address(RVA = "0xA6DDC4", Offset = "0xA6DDC4", VA = "0xA6DDC4")]
	private string GetDifficultySuffix()
	{
		return null;
	}

	[Token(Token = "0x600039D")]
	[Address(RVA = "0xA6DEBC", Offset = "0xA6DEBC", VA = "0xA6DEBC")]
	public void UpdateRankingPreview()
	{
	}

	[Token(Token = "0x600039E")]
	[Address(RVA = "0xA6E014", Offset = "0xA6E014", VA = "0xA6E014")]
	public void ShowLeaderboardError()
	{
	}

	[Token(Token = "0x600039F")]
	[Address(RVA = "0xA6DF3C", Offset = "0xA6DF3C", VA = "0xA6DF3C")]
	private void HideLeaderboardError()
	{
	}

	[Token(Token = "0x60003A0")]
	[Address(RVA = "0xA6E100", Offset = "0xA6E100", VA = "0xA6E100")]
	public void TestSubmitScore()
	{
	}

	[Token(Token = "0x60003A1")]
	[Address(RVA = "0xA6E104", Offset = "0xA6E104", VA = "0xA6E104")]
	public Lobby_SongSelect()
	{
	}
}
[Token(Token = "0x200008D")]
public class SongPreviews : MonoBehaviour
{
	[Token(Token = "0x4000490")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Lobby_SongSelect songselect;

	[Token(Token = "0x4000491")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject previewGameObject;

	[Token(Token = "0x4000492")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TextMeshProUGUI songName;

	[Token(Token = "0x4000493")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int songID;

	[Token(Token = "0x4000494")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public TextMeshProUGUI ratingDisplay;

	[Token(Token = "0x60003A2")]
	[Address(RVA = "0xA17AD4", Offset = "0xA17AD4", VA = "0xA17AD4")]
	public void UpdateState()
	{
	}

	[Token(Token = "0x60003A3")]
	[Address(RVA = "0xA17ED0", Offset = "0xA17ED0", VA = "0xA17ED0")]
	public SongPreviews()
	{
	}
}
[Token(Token = "0x200008E")]
public class ScoreEvent : MonoBehaviour
{
	[Token(Token = "0x4000495")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TextMeshProUGUI text;

	[Token(Token = "0x4000496")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Image icon;

	[Token(Token = "0x4000497")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<string> words;

	[Token(Token = "0x60003A4")]
	[Address(RVA = "0xCE26D0", Offset = "0xCE26D0", VA = "0xCE26D0")]
	private void Start()
	{
	}

	[Token(Token = "0x60003A5")]
	[Address(RVA = "0xCE26D4", Offset = "0xCE26D4", VA = "0xCE26D4")]
	public void SetRandomWord()
	{
	}

	[Token(Token = "0x60003A6")]
	[Address(RVA = "0xCE2788", Offset = "0xCE2788", VA = "0xCE2788")]
	private void Update()
	{
	}

	[Token(Token = "0x60003A7")]
	[Address(RVA = "0xCE278C", Offset = "0xCE278C", VA = "0xCE278C")]
	public void DestroyThis()
	{
	}

	[Token(Token = "0x60003A8")]
	[Address(RVA = "0xCE2804", Offset = "0xCE2804", VA = "0xCE2804")]
	public void Restart()
	{
	}

	[Token(Token = "0x60003A9")]
	[Address(RVA = "0xCE2878", Offset = "0xCE2878", VA = "0xCE2878")]
	public ScoreEvent()
	{
	}
}
[Token(Token = "0x200008F")]
public class UI_Character_select : UI_Screen
{
	[Token(Token = "0x4000498")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TextMeshProUGUI yuri_rank;

	[Token(Token = "0x4000499")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextMeshProUGUI pyro_rank;

	[Token(Token = "0x400049A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TextMeshProUGUI lais_rank;

	[Token(Token = "0x400049B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public TextMeshProUGUI dre_rank;

	[Token(Token = "0x400049C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public TextMeshProUGUI liu_rank;

	[Token(Token = "0x400049D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public TextMeshProUGUI remi_rank;

	[Token(Token = "0x400049E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public TextMeshProUGUI sonya_rank;

	[Token(Token = "0x400049F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public TextMeshProUGUI core_rank;

	[Token(Token = "0x40004A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public int selectedCharacter;

	[Token(Token = "0x40004A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public List<GameObject> characterPreviews;

	[Token(Token = "0x40004A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Button selectButton;

	[Token(Token = "0x40004A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public UI_SongSelect songSelect;

	[Token(Token = "0x60003AA")]
	[Address(RVA = "0xBD2934", Offset = "0xBD2934", VA = "0xBD2934", Slot = "4")]
	public override void Transition(bool on)
	{
	}

	[Token(Token = "0x60003AB")]
	[Address(RVA = "0xBD2B20", Offset = "0xBD2B20", VA = "0xBD2B20")]
	public void SelectCharacter(int character)
	{
	}

	[Token(Token = "0x60003AC")]
	[Address(RVA = "0xBD2B64", Offset = "0xBD2B64", VA = "0xBD2B64")]
	private void SetCharacterPreview(int character)
	{
	}

	[Token(Token = "0x60003AD")]
	[Address(RVA = "0xBD2A04", Offset = "0xBD2A04", VA = "0xBD2A04")]
	private void DisableCharacterPreviews()
	{
	}

	[Token(Token = "0x60003AE")]
	[Address(RVA = "0xBD2C04", Offset = "0xBD2C04", VA = "0xBD2C04")]
	public void SubmitCharacter()
	{
	}

	[Token(Token = "0x60003AF")]
	[Address(RVA = "0xBD2C88", Offset = "0xBD2C88", VA = "0xBD2C88")]
	public UI_Character_select()
	{
	}
}
[Token(Token = "0x2000090")]
public class UI_Display : UI_Screen
{
	[Token(Token = "0x60003B0")]
	[Address(RVA = "0xBD2C98", Offset = "0xBD2C98", VA = "0xBD2C98")]
	private void Start()
	{
	}

	[Token(Token = "0x60003B1")]
	[Address(RVA = "0xBD2C9C", Offset = "0xBD2C9C", VA = "0xBD2C9C")]
	private void Update()
	{
	}

	[Token(Token = "0x60003B2")]
	[Address(RVA = "0xBD2CA0", Offset = "0xBD2CA0", VA = "0xBD2CA0")]
	public UI_Display()
	{
	}
}
[Token(Token = "0x2000091")]
public class UI_Leaderboard : MonoBehaviour
{
	[Token(Token = "0x40004A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private LeaderboardManager lbMan;

	[Token(Token = "0x40004A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private SaveManager svMan;

	[Token(Token = "0x40004A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public LeaderboardUI topScoresUI;

	[Token(Token = "0x40004A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public LeaderboardUI nearbyScoresUI;

	[Token(Token = "0x40004A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Keyboard keyboard;

	[Token(Token = "0x40004A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private List<ScoreEntry> localScores;

	[Token(Token = "0x60003B3")]
	[Address(RVA = "0xBD3A68", Offset = "0xBD3A68", VA = "0xBD3A68")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60003B4")]
	[Address(RVA = "0xBD3A6C", Offset = "0xBD3A6C", VA = "0xBD3A6C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60003B5")]
	[Address(RVA = "0xBD3A70", Offset = "0xBD3A70", VA = "0xBD3A70")]
	public void DisplayScores()
	{
	}

	[Token(Token = "0x60003B6")]
	[Address(RVA = "0xBD3A74", Offset = "0xBD3A74", VA = "0xBD3A74")]
	private void SetText(TextMeshProUGUI _mesh, string _text)
	{
	}

	[Token(Token = "0x60003B7")]
	[Address(RVA = "0xBD3B1C", Offset = "0xBD3B1C", VA = "0xBD3B1C")]
	public void GetGlobalScores()
	{
	}

	[Token(Token = "0x60003B8")]
	[Address(RVA = "0xBD3B20", Offset = "0xBD3B20", VA = "0xBD3B20")]
	public void GetFriendsScores()
	{
	}

	[Token(Token = "0x60003B9")]
	[Address(RVA = "0xBD3B24", Offset = "0xBD3B24", VA = "0xBD3B24")]
	public void GetLocalScores()
	{
	}

	[Token(Token = "0x60003BA")]
	[Address(RVA = "0xBD3B28", Offset = "0xBD3B28", VA = "0xBD3B28")]
	private void ShowLocalScores()
	{
	}

	[Token(Token = "0x60003BB")]
	[Address(RVA = "0xBD3B2C", Offset = "0xBD3B2C", VA = "0xBD3B2C")]
	public void SubmitLocalScore(string _name)
	{
	}

	[Token(Token = "0x60003BC")]
	[Address(RVA = "0xBD3B30", Offset = "0xBD3B30", VA = "0xBD3B30")]
	public void SetLoading()
	{
	}

	[Token(Token = "0x60003BD")]
	[Address(RVA = "0xBD3CCC", Offset = "0xBD3CCC", VA = "0xBD3CCC")]
	public UI_Leaderboard()
	{
	}
}
[Token(Token = "0x2000092")]
public class UI_MainMenu : UI_Screen
{
	[Token(Token = "0x60003BE")]
	[Address(RVA = "0xBD3D50", Offset = "0xBD3D50", VA = "0xBD3D50", Slot = "4")]
	public override void Transition(bool on)
	{
	}

	[Token(Token = "0x60003BF")]
	[Address(RVA = "0xBD3DE0", Offset = "0xBD3DE0", VA = "0xBD3DE0")]
	public UI_MainMenu()
	{
	}
}
[Serializable]
[Token(Token = "0x2000093")]
public class RankObject
{
	[Token(Token = "0x40004AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public GameObject gObject;

	[Token(Token = "0x40004AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioClip SFX;

	[Token(Token = "0x60003C0")]
	[Address(RVA = "0x11F4C44", Offset = "0x11F4C44", VA = "0x11F4C44")]
	public RankObject()
	{
	}
}
[Serializable]
[Token(Token = "0x2000094")]
public class ScoreSound
{
	[Token(Token = "0x40004AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public AudioClip SFX;

	[Token(Token = "0x40004AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool started;

	[Token(Token = "0x60003C1")]
	[Address(RVA = "0xCE2880", Offset = "0xCE2880", VA = "0xCE2880")]
	public ScoreSound()
	{
	}
}
[Token(Token = "0x2000095")]
public class UI_Results : MonoBehaviour
{
	[Token(Token = "0x2000385")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDC4C", Offset = "0x5CDC4C")]
	private sealed class <NextStageCountdown>d__65 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400186A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400186B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400186C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int seconds;

		[Token(Token = "0x400186D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UI_Results <>4__this;

		[Token(Token = "0x400186E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int <counter>5__2;

		[Token(Token = "0x1700029F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001965")]
			[Address(RVA = "0x138C92C", Offset = "0x138C92C", VA = "0x138C92C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002A0")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001967")]
			[Address(RVA = "0x138C974", Offset = "0x138C974", VA = "0x138C974", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001962")]
		[Address(RVA = "0x138C5D4", Offset = "0x138C5D4", VA = "0x138C5D4")]
		[DebuggerHidden]
		public <NextStageCountdown>d__65(int <>1__state)
		{
		}

		[Token(Token = "0x6001963")]
		[Address(RVA = "0x138C600", Offset = "0x138C600", VA = "0x138C600", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001964")]
		[Address(RVA = "0x138C604", Offset = "0x138C604", VA = "0x138C604", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001966")]
		[Address(RVA = "0x138C934", Offset = "0x138C934", VA = "0x138C934", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40004AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TextMeshProUGUI title;

	[Token(Token = "0x40004AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextMeshProUGUI scoreText;

	[Token(Token = "0x40004B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TextMeshProUGUI accText;

	[Token(Token = "0x40004B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public TextMeshProUGUI energyText;

	[Token(Token = "0x40004B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public TextMeshProUGUI streakText;

	[Token(Token = "0x40004B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public TextMeshProUGUI maxMultiText;

	[Token(Token = "0x40004B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public TextMeshProUGUI setsText;

	[Token(Token = "0x40004B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public TextMeshProUGUI cascadeText;

	[Token(Token = "0x40004B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public TextMeshProUGUI rankText;

	[Token(Token = "0x40004B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public TextMeshProUGUI precisionText;

	[Token(Token = "0x40004B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float score;

	[Token(Token = "0x40004B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public float accuracy;

	[Token(Token = "0x40004BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public float energy;

	[Token(Token = "0x40004BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public float streak;

	[Token(Token = "0x40004BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public float maxMulti;

	[Token(Token = "0x40004BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public float sets;

	[Token(Token = "0x40004BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public float cascades;

	[Token(Token = "0x40004BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public float precision;

	[Token(Token = "0x40004C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Score.Rank rank;

	[Token(Token = "0x40004C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	public int stageNum;

	[Token(Token = "0x40004C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public GameObject nextStageUI;

	[Token(Token = "0x40004C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public TextMeshProUGUI nextStageAutoText;

	[Token(Token = "0x40004C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public AudioSource audio;

	[Token(Token = "0x40004C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public GameObject Subpanel_R1;

	[Token(Token = "0x40004C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public GameObject Subpanel_R2;

	[Token(Token = "0x40004C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public GameObject Subpanel_L1;

	[Token(Token = "0x40004C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public GameObject Subpanel_L2;

	[Token(Token = "0x40004C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public TextMeshProUGUI R1_Stage;

	[Token(Token = "0x40004CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public TextMeshProUGUI R1_Rank;

	[Token(Token = "0x40004CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public TextMeshProUGUI R2_Stage;

	[Token(Token = "0x40004CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public TextMeshProUGUI R2_Rank;

	[Token(Token = "0x40004CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public TextMeshProUGUI L1_Stage;

	[Token(Token = "0x40004CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public TextMeshProUGUI L1_Rank;

	[Token(Token = "0x40004CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public TextMeshProUGUI L2_Stage;

	[Token(Token = "0x40004D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public TextMeshProUGUI L2_Rank;

	[Token(Token = "0x40004D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x5CED0C", Offset = "0x5CED0C")]
	public float totalAnimationTime;

	[Token(Token = "0x40004D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
	public Vector2 scoreTiming;

	[Token(Token = "0x40004D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
	public Vector2 accuracyTiming;

	[Token(Token = "0x40004D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
	public Vector2 energyTiming;

	[Token(Token = "0x40004D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
	public Vector2 streakTiming;

	[Token(Token = "0x40004D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
	public Vector2 maxMultiTiming;

	[Token(Token = "0x40004D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
	public Vector2 setsTiming;

	[Token(Token = "0x40004D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
	public Vector2 cascadesTiming;

	[Token(Token = "0x40004D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public RankObject rank_s;

	[Token(Token = "0x40004DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public RankObject rank_a;

	[Token(Token = "0x40004DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	public RankObject rank_b;

	[Token(Token = "0x40004DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	public RankObject rank_c;

	[Token(Token = "0x40004DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	public RankObject rank_d;

	[Token(Token = "0x40004DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	public RankObject rank_e;

	[Token(Token = "0x40004DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	public RankObject rank_plus;

	[Token(Token = "0x40004E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	public RankObject rank_minus;

	[Token(Token = "0x40004E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	public RankObject rank_error;

	[Token(Token = "0x40004E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	public GameObject sParticles;

	[Token(Token = "0x40004E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	public GameObject goldParticles;

	[Token(Token = "0x40004E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	public GameObject silverParticles;

	[Token(Token = "0x40004E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	public GameObject leaderboard;

	[Token(Token = "0x40004E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	public Animator anim;

	[Token(Token = "0x40004E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	public ScoreSound mainScoreSound;

	[Token(Token = "0x40004E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	private float timer;

	[Token(Token = "0x40004E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C4")]
	private float progress;

	[Token(Token = "0x40004EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
	private bool animating;

	[Token(Token = "0x40004EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C9")]
	private bool finished;

	[Token(Token = "0x60003C2")]
	[Address(RVA = "0xBD6BA4", Offset = "0xBD6BA4", VA = "0xBD6BA4")]
	private void Update()
	{
	}

	[Token(Token = "0x60003C3")]
	[Address(RVA = "0xBD7600", Offset = "0xBD7600", VA = "0xBD7600")]
	public void Display()
	{
	}

	[Token(Token = "0x60003C4")]
	[Address(RVA = "0xBD743C", Offset = "0xBD743C", VA = "0xBD743C")]
	private void Finish()
	{
	}

	[Token(Token = "0x60003C5")]
	[Address(RVA = "0xBD7844", Offset = "0xBD7844", VA = "0xBD7844")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D7C58", Offset = "0x5D7C58")]
	private IEnumerator NextStageCountdown(int seconds)
	{
		return null;
	}

	[Token(Token = "0x60003C6")]
	[Address(RVA = "0xBD762C", Offset = "0xBD762C", VA = "0xBD762C")]
	private void HideAll()
	{
	}

	[Token(Token = "0x60003C7")]
	[Address(RVA = "0xBD7030", Offset = "0xBD7030", VA = "0xBD7030")]
	private void ShowRank(Score.Rank _rank)
	{
	}

	[Token(Token = "0x60003C8")]
	[Address(RVA = "0xBD78CC", Offset = "0xBD78CC", VA = "0xBD78CC")]
	public void Impact()
	{
	}

	[Token(Token = "0x60003C9")]
	[Address(RVA = "0xBD7918", Offset = "0xBD7918", VA = "0xBD7918")]
	public UI_Results()
	{
	}
}
[Token(Token = "0x2000096")]
public class UI_Shaker : MonoBehaviour
{
	[Token(Token = "0x40004EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float _time;

	[Token(Token = "0x40004ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float _size;

	[Token(Token = "0x40004EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float shakeTime;

	[Token(Token = "0x40004EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float shakeSize;

	[Token(Token = "0x40004F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float shakeTimecontainer;

	[Token(Token = "0x40004F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float shakeSizecontainer;

	[Token(Token = "0x40004F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float shakePercent;

	[Token(Token = "0x60003CA")]
	[Address(RVA = "0xD0654C", Offset = "0xD0654C", VA = "0xD0654C")]
	private void Start()
	{
	}

	[Token(Token = "0x60003CB")]
	[Address(RVA = "0xD06550", Offset = "0xD06550", VA = "0xD06550")]
	private void Update()
	{
	}

	[Token(Token = "0x60003CC")]
	[Address(RVA = "0xD06554", Offset = "0xD06554", VA = "0xD06554")]
	public void TestShake()
	{
	}

	[Token(Token = "0x60003CD")]
	[Address(RVA = "0xD06558", Offset = "0xD06558", VA = "0xD06558")]
	public void Shake(float time, float size)
	{
	}

	[Token(Token = "0x60003CE")]
	[Address(RVA = "0xD0655C", Offset = "0xD0655C", VA = "0xD0655C")]
	public UI_Shaker()
	{
	}
}
[Token(Token = "0x2000097")]
public class UI_SongSelect : UI_Screen
{
	[Token(Token = "0x40004F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TextMeshPro infoName;

	[Token(Token = "0x40004F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextMeshPro infoBio;

	[Token(Token = "0x40004F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TextMeshProUGUI stage1Title;

	[Token(Token = "0x40004F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public TextMeshProUGUI stage1Duration;

	[Token(Token = "0x40004F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public TextMeshProUGUI stage1BPM;

	[Token(Token = "0x40004F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public TextMeshProUGUI stage1Rank;

	[Token(Token = "0x40004F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public TextMeshProUGUI stage2Title;

	[Token(Token = "0x40004FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public TextMeshProUGUI stage2Duration;

	[Token(Token = "0x40004FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public TextMeshProUGUI stage2BPM;

	[Token(Token = "0x40004FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public TextMeshProUGUI stage2Rank;

	[Token(Token = "0x40004FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public TextMeshProUGUI stage3Title;

	[Token(Token = "0x40004FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public TextMeshProUGUI stage3Duration;

	[Token(Token = "0x40004FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public TextMeshProUGUI stage3BPM;

	[Token(Token = "0x4000500")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public TextMeshProUGUI stage3Rank;

	[Token(Token = "0x4000501")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public TextMeshProUGUI stage4Title;

	[Token(Token = "0x4000502")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public TextMeshProUGUI stage4Duration;

	[Token(Token = "0x4000503")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public TextMeshProUGUI stage4BPM;

	[Token(Token = "0x4000504")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public TextMeshProUGUI stage4Rank;

	[Token(Token = "0x4000505")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public Image stage1Pulse;

	[Token(Token = "0x4000506")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public Image stage2Pulse;

	[Token(Token = "0x4000507")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public Image stage3Pulse;

	[Token(Token = "0x4000508")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public Image stage4Pulse;

	[Token(Token = "0x4000509")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private Color pulseBaseColour;

	[Token(Token = "0x400050A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public int selectedCharacter;

	[Token(Token = "0x400050B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	public int selectedStage;

	[Token(Token = "0x400050C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public List<AudioClip> yuriVoiceLines;

	[Token(Token = "0x400050D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public List<AudioClip> pyroVoiceLines;

	[Token(Token = "0x400050E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public List<AudioClip> laisVoiceLines;

	[Token(Token = "0x400050F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public List<AudioClip> remiVoicelines;

	[Token(Token = "0x4000510")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public List<AudioClip> liuweiVoiceLines;

	[Token(Token = "0x4000511")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public List<AudioClip> dreVoiceLines;

	[Token(Token = "0x4000512")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public List<AudioClip> sonyaVoiceLines;

	[Token(Token = "0x4000513")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public List<AudioClip> coreVoiceLines;

	[Token(Token = "0x4000514")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public List<GameObject> characterUI;

	[Token(Token = "0x4000515")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	public Toggle easyToggle;

	[Token(Token = "0x4000516")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	public Toggle normalToggle;

	[Token(Token = "0x4000517")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public Toggle hardToggle;

	[Token(Token = "0x60003CF")]
	[Address(RVA = "0xD06E5C", Offset = "0xD06E5C", VA = "0xD06E5C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60003D0")]
	[Address(RVA = "0xD06E9C", Offset = "0xD06E9C", VA = "0xD06E9C", Slot = "4")]
	public override void Transition(bool on)
	{
	}

	[Token(Token = "0x60003D1")]
	[Address(RVA = "0xD08E00", Offset = "0xD08E00", VA = "0xD08E00")]
	public void UpdateDifficulty()
	{
	}

	[Token(Token = "0x60003D2")]
	[Address(RVA = "0xD08F3C", Offset = "0xD08F3C", VA = "0xD08F3C")]
	private void Update()
	{
	}

	[Token(Token = "0x60003D3")]
	[Address(RVA = "0xD074A4", Offset = "0xD074A4", VA = "0xD074A4")]
	public void PressStage1()
	{
	}

	[Token(Token = "0x60003D4")]
	[Address(RVA = "0xD0909C", Offset = "0xD0909C", VA = "0xD0909C")]
	public void PressStage2()
	{
	}

	[Token(Token = "0x60003D5")]
	[Address(RVA = "0xD09424", Offset = "0xD09424", VA = "0xD09424")]
	public void PressStage3()
	{
	}

	[Token(Token = "0x60003D6")]
	[Address(RVA = "0xD097AC", Offset = "0xD097AC", VA = "0xD097AC")]
	public void PressStage4()
	{
	}

	[Token(Token = "0x60003D7")]
	[Address(RVA = "0xD09B34", Offset = "0xD09B34", VA = "0xD09B34")]
	private string GetDifficultySuffix()
	{
		return null;
	}

	[Token(Token = "0x60003D8")]
	[Address(RVA = "0xD09C20", Offset = "0xD09C20", VA = "0xD09C20")]
	public void Battle()
	{
	}

	[Token(Token = "0x60003D9")]
	[Address(RVA = "0xD0782C", Offset = "0xD0782C", VA = "0xD0782C")]
	private void UpdateRoundButtons()
	{
	}

	[Token(Token = "0x60003DA")]
	[Address(RVA = "0xD09C98", Offset = "0xD09C98", VA = "0xD09C98")]
	private string FormatInfo(string bpm, string duration)
	{
		return null;
	}

	[Token(Token = "0x60003DB")]
	[Address(RVA = "0xD087B8", Offset = "0xD087B8", VA = "0xD087B8")]
	private void UpdateRanks()
	{
	}

	[Token(Token = "0x60003DC")]
	[Address(RVA = "0xD09E74", Offset = "0xD09E74", VA = "0xD09E74")]
	public UI_SongSelect()
	{
	}
}
[Token(Token = "0x2000098")]
public class UI_SoundManager : MonoBehaviour
{
	[Token(Token = "0x4000518")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioSource sfxPlayer;

	[Token(Token = "0x4000519")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<AudioClip> startSFX;

	[Token(Token = "0x400051A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<AudioClip> danceSFX;

	[Token(Token = "0x400051B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public List<AudioClip> confirmSFX;

	[Token(Token = "0x400051C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public List<AudioClip> backSFX;

	[Token(Token = "0x400051D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public List<AudioClip> denySFX;

	[Token(Token = "0x400051E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public List<AudioClip> scoreEventSFX;

	[Token(Token = "0x60003DD")]
	[Address(RVA = "0xD09E7C", Offset = "0xD09E7C", VA = "0xD09E7C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60003DE")]
	[Address(RVA = "0xD09EC4", Offset = "0xD09EC4", VA = "0xD09EC4")]
	private void LoadAudio(List<AudioClip> _clips)
	{
	}

	[Token(Token = "0x60003DF")]
	[Address(RVA = "0xD09F5C", Offset = "0xD09F5C", VA = "0xD09F5C")]
	public void PlayStartEffect()
	{
	}

	[Token(Token = "0x60003E0")]
	[Address(RVA = "0xD0A064", Offset = "0xD0A064", VA = "0xD0A064")]
	public void PlayConfirmEffect()
	{
	}

	[Token(Token = "0x60003E1")]
	[Address(RVA = "0xD0A070", Offset = "0xD0A070", VA = "0xD0A070")]
	public void PlayBackEffect()
	{
	}

	[Token(Token = "0x60003E2")]
	[Address(RVA = "0xD0A07C", Offset = "0xD0A07C", VA = "0xD0A07C")]
	public void PlayDenyEffect()
	{
	}

	[Token(Token = "0x60003E3")]
	[Address(RVA = "0xD0A088", Offset = "0xD0A088", VA = "0xD0A088")]
	public void PlayScoreEventEffect()
	{
	}

	[Token(Token = "0x60003E4")]
	[Address(RVA = "0xD0A08C", Offset = "0xD0A08C", VA = "0xD0A08C")]
	public void PlayDanceEffect()
	{
	}

	[Token(Token = "0x60003E5")]
	[Address(RVA = "0xD09F68", Offset = "0xD09F68", VA = "0xD09F68")]
	private void PlaySFX(List<AudioClip> _clips, float _pitchRange = 0f)
	{
	}

	[Token(Token = "0x60003E6")]
	[Address(RVA = "0xD0A098", Offset = "0xD0A098", VA = "0xD0A098")]
	public UI_SoundManager()
	{
	}
}
[Token(Token = "0x2000099")]
public class UI_Pause : MonoBehaviour
{
	[Token(Token = "0x400051F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject buttons;

	[Token(Token = "0x4000520")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Image fillbar;

	[Token(Token = "0x4000521")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TextMeshProUGUI currentTimeText;

	[Token(Token = "0x4000522")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float unpauseTime;

	[Token(Token = "0x4000523")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float unpauseTimer;

	[Token(Token = "0x4000524")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool unpausing;

	[Token(Token = "0x60003E7")]
	[Address(RVA = "0xBD6960", Offset = "0xBD6960", VA = "0xBD6960")]
	public void Reset()
	{
	}

	[Token(Token = "0x60003E8")]
	[Address(RVA = "0xBD6A40", Offset = "0xBD6A40", VA = "0xBD6A40")]
	public void StartUnpause()
	{
	}

	[Token(Token = "0x60003E9")]
	[Address(RVA = "0xBD6A7C", Offset = "0xBD6A7C", VA = "0xBD6A7C")]
	private void Update()
	{
	}

	[Token(Token = "0x60003EA")]
	[Address(RVA = "0xBD6B00", Offset = "0xBD6B00", VA = "0xBD6B00")]
	private void Unpause()
	{
	}

	[Token(Token = "0x60003EB")]
	[Address(RVA = "0xBD6B94", Offset = "0xBD6B94", VA = "0xBD6B94")]
	public UI_Pause()
	{
	}
}
[Token(Token = "0x200009A")]
public class UI_Settings : MonoBehaviour
{
	[Token(Token = "0x4000525")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject main;

	[Token(Token = "0x4000526")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject audio;

	[Token(Token = "0x4000527")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject graphics;

	[Token(Token = "0x4000528")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject other;

	[Token(Token = "0x4000529")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject credits;

	[Token(Token = "0x400052A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Slider audio_master;

	[Token(Token = "0x400052B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Slider audio_game;

	[Token(Token = "0x400052C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Slider audio_ambient;

	[Token(Token = "0x400052D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Slider audio_sfx;

	[Token(Token = "0x400052E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Slider audio_voice;

	[Token(Token = "0x400052F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Slider graphics_aura;

	[Token(Token = "0x4000530")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Toggle audio_nodeSounds;

	[Token(Token = "0x4000531")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Toggle other_console;

	[Token(Token = "0x4000532")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Toggle other_danceHolograms;

	[Token(Token = "0x4000533")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Toggle other_skipIntros;

	[Token(Token = "0x4000534")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Toggle graphics_lightshows;

	[Token(Token = "0x4000535")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Toggle graphics_tauntParticles;

	[Token(Token = "0x4000536")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Toggle graphics_enableAura;

	[Token(Token = "0x4000537")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public TMP_Dropdown other_language;

	[Token(Token = "0x60003EC")]
	[Address(RVA = "0xD05AA4", Offset = "0xD05AA4", VA = "0xD05AA4")]
	private void Start()
	{
	}

	[Token(Token = "0x60003ED")]
	[Address(RVA = "0xD05AA8", Offset = "0xD05AA8", VA = "0xD05AA8")]
	public void LoadSettings()
	{
	}

	[Token(Token = "0x60003EE")]
	[Address(RVA = "0xD05DF8", Offset = "0xD05DF8", VA = "0xD05DF8")]
	public void SaveSettings()
	{
	}

	[Token(Token = "0x60003EF")]
	[Address(RVA = "0xD06160", Offset = "0xD06160", VA = "0xD06160")]
	private void UpdateAudioSliders()
	{
	}

	[Token(Token = "0x60003F0")]
	[Address(RVA = "0xD0624C", Offset = "0xD0624C", VA = "0xD0624C")]
	public void OpenMain()
	{
	}

	[Token(Token = "0x60003F1")]
	[Address(RVA = "0xD062D4", Offset = "0xD062D4", VA = "0xD062D4")]
	public void OpenAudio()
	{
	}

	[Token(Token = "0x60003F2")]
	[Address(RVA = "0xD0635C", Offset = "0xD0635C", VA = "0xD0635C")]
	public void OpenGraphics()
	{
	}

	[Token(Token = "0x60003F3")]
	[Address(RVA = "0xD063DC", Offset = "0xD063DC", VA = "0xD063DC")]
	public void OpenOther()
	{
	}

	[Token(Token = "0x60003F4")]
	[Address(RVA = "0xD0645C", Offset = "0xD0645C", VA = "0xD0645C")]
	public void OpenCredits()
	{
	}

	[Token(Token = "0x60003F5")]
	[Address(RVA = "0xD05CC4", Offset = "0xD05CC4", VA = "0xD05CC4")]
	private void UpdateAudio()
	{
	}

	[Token(Token = "0x60003F6")]
	[Address(RVA = "0xD05D38", Offset = "0xD05D38", VA = "0xD05D38")]
	private void UpdateLanguage()
	{
	}

	[Token(Token = "0x60003F7")]
	[Address(RVA = "0xD064DC", Offset = "0xD064DC", VA = "0xD064DC")]
	public void ToggleDevConsole()
	{
	}

	[Token(Token = "0x60003F8")]
	[Address(RVA = "0xD06544", Offset = "0xD06544", VA = "0xD06544")]
	public UI_Settings()
	{
	}
}
[Token(Token = "0x200009B")]
public class UVScroller : MonoBehaviour
{
	[Token(Token = "0x4000538")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Renderer rend;

	[Token(Token = "0x4000539")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<Vector2> scrollValues;

	[Token(Token = "0x400053A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool randomise;

	[Token(Token = "0x400053B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public Vector2 scrollInterval;

	[Token(Token = "0x400053C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float timer;

	[Token(Token = "0x400053D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int index;

	[Token(Token = "0x60003F9")]
	[Address(RVA = "0xD0AAC4", Offset = "0xD0AAC4", VA = "0xD0AAC4")]
	private void Start()
	{
	}

	[Token(Token = "0x60003FA")]
	[Address(RVA = "0xD0AB64", Offset = "0xD0AB64", VA = "0xD0AB64")]
	private void Update()
	{
	}

	[Token(Token = "0x60003FB")]
	[Address(RVA = "0xD0ABC4", Offset = "0xD0ABC4", VA = "0xD0ABC4")]
	private void Scroll()
	{
	}

	[Token(Token = "0x60003FC")]
	[Address(RVA = "0xD0AB38", Offset = "0xD0AB38", VA = "0xD0AB38")]
	private void ResetTimer()
	{
	}

	[Token(Token = "0x60003FD")]
	[Address(RVA = "0xD0ACC0", Offset = "0xD0ACC0", VA = "0xD0ACC0")]
	public UVScroller()
	{
	}
}
[Token(Token = "0x200009C")]
public class AnimationMiddleMan : MonoBehaviour
{
	[Token(Token = "0x400053E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public HoloAnimationController animCon;

	[Token(Token = "0x400053F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[HideInInspector]
	public VoiceOverManager voManager;

	[Token(Token = "0x4000540")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[HideInInspector]
	public LookAtManager laManager;

	[Token(Token = "0x4000541")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform blankLookTarget;

	[Token(Token = "0x60003FE")]
	[Address(RVA = "0xC0DA18", Offset = "0xC0DA18", VA = "0xC0DA18")]
	private void Awake()
	{
	}

	[Token(Token = "0x60003FF")]
	[Address(RVA = "0xC0DB40", Offset = "0xC0DB40", VA = "0xC0DB40")]
	public void EndHolo()
	{
	}

	[Token(Token = "0x6000400")]
	[Address(RVA = "0xC0DB5C", Offset = "0xC0DB5C", VA = "0xC0DB5C")]
	public void PlayVoiceLine(VOType _type)
	{
	}

	[Token(Token = "0x6000401")]
	[Address(RVA = "0xC0DC00", Offset = "0xC0DC00", VA = "0xC0DC00")]
	public void SetLookAt(int _id, float _duration)
	{
	}

	[Token(Token = "0x6000402")]
	[Address(RVA = "0xC0DC4C", Offset = "0xC0DC4C", VA = "0xC0DC4C")]
	public void ShowDance()
	{
	}

	[Token(Token = "0x6000403")]
	[Address(RVA = "0xC0DC50", Offset = "0xC0DC50", VA = "0xC0DC50")]
	public AnimationMiddleMan()
	{
	}
}
[Token(Token = "0x200009D")]
public class AnimationSelectENUM : MonoBehaviour
{
	[Token(Token = "0x2000386")]
	public enum Animations
	{
		[Token(Token = "0x4001870")]
		Anim0,
		[Token(Token = "0x4001871")]
		Anim1,
		[Token(Token = "0x4001872")]
		Anim2,
		[Token(Token = "0x4001873")]
		Anim3,
		[Token(Token = "0x4001874")]
		Anim4,
		[Token(Token = "0x4001875")]
		Anim5,
		[Token(Token = "0x4001876")]
		Anim6,
		[Token(Token = "0x4001877")]
		Anim7,
		[Token(Token = "0x4001878")]
		Anim8,
		[Token(Token = "0x4001879")]
		Anim9,
		[Token(Token = "0x400187A")]
		Anim10,
		[Token(Token = "0x400187B")]
		Anim11,
		[Token(Token = "0x400187C")]
		Anim12,
		[Token(Token = "0x400187D")]
		Anim13,
		[Token(Token = "0x400187E")]
		Anim14,
		[Token(Token = "0x400187F")]
		Anim15,
		[Token(Token = "0x4001880")]
		Anim16,
		[Token(Token = "0x4001881")]
		Anim17,
		[Token(Token = "0x4001882")]
		Anim18,
		[Token(Token = "0x4001883")]
		Anim19,
		[Token(Token = "0x4001884")]
		Anim20
	}

	[Token(Token = "0x4000542")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Animations animations;

	[Token(Token = "0x4000543")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<AnimationClip> _animNames;

	[Token(Token = "0x6000404")]
	[Address(RVA = "0xC0DC58", Offset = "0xC0DC58", VA = "0xC0DC58")]
	private void Start()
	{
	}

	[Token(Token = "0x6000405")]
	[Address(RVA = "0xC0DC5C", Offset = "0xC0DC5C", VA = "0xC0DC5C")]
	public void AnimSet()
	{
	}

	[Token(Token = "0x6000406")]
	[Address(RVA = "0xC0E090", Offset = "0xC0E090", VA = "0xC0E090")]
	public AnimationSelectENUM()
	{
	}
}
[Token(Token = "0x200009E")]
public class AudioLoader : MonoBehaviour
{
	[Token(Token = "0x4000544")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<AudioClip> toLoad;

	[Token(Token = "0x4000545")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<VoiceOverManager> voMans;

	[Token(Token = "0x4000546")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<LipSync> lipSyncs;

	[Token(Token = "0x6000407")]
	[Address(RVA = "0xC11190", Offset = "0xC11190", VA = "0xC11190")]
	private void Start()
	{
	}

	[Token(Token = "0x6000408")]
	[Address(RVA = "0xC113C8", Offset = "0xC113C8", VA = "0xC113C8")]
	public AudioLoader()
	{
	}
}
[Token(Token = "0x200009F")]
public class BobScript : MonoBehaviour
{
	[Token(Token = "0x4000547")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 axis;

	[Token(Token = "0x4000548")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Vector3 startPos;

	[Token(Token = "0x4000549")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float speed;

	[Token(Token = "0x400054A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float amplitude;

	[Token(Token = "0x400054B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float cycleOffset;

	[Token(Token = "0x6000409")]
	[Address(RVA = "0x10A0BA0", Offset = "0x10A0BA0", VA = "0x10A0BA0")]
	private void Start()
	{
	}

	[Token(Token = "0x600040A")]
	[Address(RVA = "0x10A0BDC", Offset = "0x10A0BDC", VA = "0x10A0BDC")]
	private void Update()
	{
	}

	[Token(Token = "0x600040B")]
	[Address(RVA = "0x10A0C84", Offset = "0x10A0C84", VA = "0x10A0C84")]
	public BobScript()
	{
	}
}
[Token(Token = "0x20000A0")]
public class CopyRotation : MonoBehaviour
{
	[Token(Token = "0x400054C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform target;

	[Token(Token = "0x400054D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool copyX;

	[Token(Token = "0x400054E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool copyY;

	[Token(Token = "0x400054F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
	public bool copyZ;

	[Token(Token = "0x600040C")]
	[Address(RVA = "0xCC1014", Offset = "0xCC1014", VA = "0xCC1014")]
	private void Start()
	{
	}

	[Token(Token = "0x600040D")]
	[Address(RVA = "0xCC1018", Offset = "0xCC1018", VA = "0xCC1018")]
	private void Update()
	{
	}

	[Token(Token = "0x600040E")]
	[Address(RVA = "0xCC1148", Offset = "0xCC1148", VA = "0xCC1148")]
	public CopyRotation()
	{
	}
}
[Token(Token = "0x20000A1")]
public class FadeFinder : MonoBehaviour
{
	[Token(Token = "0x4000550")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<TextFader> faders;

	[Token(Token = "0x4000551")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<GameObject> toggles;

	[Token(Token = "0x600040F")]
	[Address(RVA = "0xBFA598", Offset = "0xBFA598", VA = "0xBFA598")]
	public void FadeIn()
	{
	}

	[Token(Token = "0x6000410")]
	[Address(RVA = "0xBFA6A4", Offset = "0xBFA6A4", VA = "0xBFA6A4")]
	public void FadeOut()
	{
	}

	[Token(Token = "0x6000411")]
	[Address(RVA = "0xBFA7B0", Offset = "0xBFA7B0", VA = "0xBFA7B0")]
	public FadeFinder()
	{
	}
}
[Token(Token = "0x20000A2")]
public class FadeInOut : MonoBehaviour
{
	[Token(Token = "0x4000552")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public MeshRenderer ocuFader;

	[Token(Token = "0x4000553")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float value;

	[Token(Token = "0x4000554")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float target;

	[Token(Token = "0x4000555")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool startFade;

	[Token(Token = "0x4000556")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	private bool fading;

	[Token(Token = "0x4000557")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float fadeRate;

	[Token(Token = "0x4000558")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Texture2D blackTexture;

	[Token(Token = "0x6000412")]
	[Address(RVA = "0xBFA880", Offset = "0xBFA880", VA = "0xBFA880")]
	public void Fade()
	{
	}

	[Token(Token = "0x6000413")]
	[Address(RVA = "0xBFA9BC", Offset = "0xBFA9BC", VA = "0xBFA9BC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000414")]
	[Address(RVA = "0xBFAAF4", Offset = "0xBFAAF4", VA = "0xBFAAF4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000415")]
	[Address(RVA = "0xBFAC34", Offset = "0xBFAC34", VA = "0xBFAC34")]
	public FadeInOut()
	{
	}
}
[Token(Token = "0x20000A3")]
public class FogSetter : MonoBehaviour
{
	[Token(Token = "0x6000416")]
	[Address(RVA = "0xBFBD04", Offset = "0xBFBD04", VA = "0xBFBD04")]
	private void Start()
	{
	}

	[Token(Token = "0x6000417")]
	[Address(RVA = "0xBFBEE4", Offset = "0xBFBEE4", VA = "0xBFBEE4")]
	private void TutorialDelay()
	{
	}

	[Token(Token = "0x6000418")]
	[Address(RVA = "0xBFBF50", Offset = "0xBFBF50", VA = "0xBFBF50")]
	public FogSetter()
	{
	}
}
[Token(Token = "0x20000A4")]
public class GraphyGrabber : MonoBehaviour
{
	[Token(Token = "0x6000419")]
	[Address(RVA = "0x13FAE1C", Offset = "0x13FAE1C", VA = "0x13FAE1C")]
	public void LogData(int _scm)
	{
	}

	[Token(Token = "0x600041A")]
	[Address(RVA = "0x13FAEA4", Offset = "0x13FAEA4", VA = "0x13FAEA4")]
	public GraphyGrabber()
	{
	}
}
[Token(Token = "0x20000A5")]
public class HoloKiller : MonoBehaviour
{
	[Token(Token = "0x600041B")]
	[Address(RVA = "0xA4EE24", Offset = "0xA4EE24", VA = "0xA4EE24")]
	public void KILLKILLKILL()
	{
	}

	[Token(Token = "0x600041C")]
	[Address(RVA = "0xA4EF24", Offset = "0xA4EF24", VA = "0xA4EF24")]
	public HoloKiller()
	{
	}
}
[Token(Token = "0x20000A6")]
public class Image_Blinker : MonoBehaviour
{
	[Token(Token = "0x2000387")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDC5C", Offset = "0x5CDC5C")]
	private sealed class <Blink>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001885")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001886")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001887")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Image_Blinker <>4__this;

		[Token(Token = "0x170002A1")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600196B")]
			[Address(RVA = "0x7EBD80", Offset = "0x7EBD80", VA = "0x7EBD80", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002A2")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600196D")]
			[Address(RVA = "0x7EBDC8", Offset = "0x7EBDC8", VA = "0x7EBDC8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001968")]
		[Address(RVA = "0x7EBC20", Offset = "0x7EBC20", VA = "0x7EBC20")]
		[DebuggerHidden]
		public <Blink>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x6001969")]
		[Address(RVA = "0x7EBC4C", Offset = "0x7EBC4C", VA = "0x7EBC4C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600196A")]
		[Address(RVA = "0x7EBC50", Offset = "0x7EBC50", VA = "0x7EBC50", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600196C")]
		[Address(RVA = "0x7EBD88", Offset = "0x7EBD88", VA = "0x7EBD88", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000559")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Image image;

	[Token(Token = "0x400055A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float blinkTime;

	[Token(Token = "0x400055B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool blink;

	[Token(Token = "0x400055C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Color startCol;

	[Token(Token = "0x600041D")]
	[Address(RVA = "0xA51998", Offset = "0xA51998", VA = "0xA51998")]
	private void Awake()
	{
	}

	[Token(Token = "0x600041E")]
	[Address(RVA = "0xA519D8", Offset = "0xA519D8", VA = "0xA519D8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600041F")]
	[Address(RVA = "0xA51A04", Offset = "0xA51A04", VA = "0xA51A04")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D7CB8", Offset = "0x5D7CB8")]
	private IEnumerator Blink()
	{
		return null;
	}

	[Token(Token = "0x6000420")]
	[Address(RVA = "0xA51A7C", Offset = "0xA51A7C", VA = "0xA51A7C")]
	public Image_Blinker()
	{
	}
}
[Token(Token = "0x20000A7")]
public class LBButtonUpdater : MonoBehaviour
{
	[Token(Token = "0x2000388")]
	public enum ButtonType
	{
		[Token(Token = "0x4001889")]
		e_Global,
		[Token(Token = "0x400188A")]
		e_Friends,
		[Token(Token = "0x400188B")]
		e_Local
	}

	[Token(Token = "0x400055D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private LeaderboardManager lbMan;

	[Token(Token = "0x400055E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Button button;

	[Token(Token = "0x400055F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ButtonType type;

	[Token(Token = "0x6000421")]
	[Address(RVA = "0xA59C8C", Offset = "0xA59C8C", VA = "0xA59C8C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000422")]
	[Address(RVA = "0xA59D40", Offset = "0xA59D40", VA = "0xA59D40")]
	private void Update()
	{
	}

	[Token(Token = "0x6000423")]
	[Address(RVA = "0xA59E24", Offset = "0xA59E24", VA = "0xA59E24")]
	public LBButtonUpdater()
	{
	}
}
[Token(Token = "0x20000A8")]
public class LerpToPosition : MonoBehaviour
{
	[Token(Token = "0x4000560")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform objectToFollow;

	[Token(Token = "0x4000561")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float lerpRate;

	[Token(Token = "0x6000424")]
	[Address(RVA = "0x102E1B0", Offset = "0x102E1B0", VA = "0x102E1B0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000425")]
	[Address(RVA = "0x102E27C", Offset = "0x102E27C", VA = "0x102E27C")]
	public LerpToPosition()
	{
	}
}
[Token(Token = "0x20000A9")]
public class LookAt : MonoBehaviour
{
	[Token(Token = "0x4000562")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform target;

	[Token(Token = "0x4000563")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector3 offset;

	[Token(Token = "0x6000426")]
	[Address(RVA = "0xF8D66C", Offset = "0xF8D66C", VA = "0xF8D66C")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000427")]
	[Address(RVA = "0xF8D6DC", Offset = "0xF8D6DC", VA = "0xF8D6DC")]
	public LookAt()
	{
	}
}
[Token(Token = "0x20000AA")]
public class MoveInDirection : MonoBehaviour
{
	[Token(Token = "0x4000564")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 direction;

	[Token(Token = "0x4000565")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float speed;

	[Token(Token = "0x6000428")]
	[Address(RVA = "0xDF64D0", Offset = "0xDF64D0", VA = "0xDF64D0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000429")]
	[Address(RVA = "0xDF6558", Offset = "0xDF6558", VA = "0xDF6558")]
	public MoveInDirection()
	{
	}
}
[Token(Token = "0x20000AB")]
public class ObservePosition : MonoBehaviour
{
	[Token(Token = "0x4000566")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform oculusFollow;

	[Token(Token = "0x4000567")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform viveFollow;

	[Token(Token = "0x4000568")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool followX;

	[Token(Token = "0x4000569")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool followY;

	[Token(Token = "0x400056A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
	public bool followZ;

	[Token(Token = "0x600042A")]
	[Address(RVA = "0x1313918", Offset = "0x1313918", VA = "0x1313918")]
	private void Update()
	{
	}

	[Token(Token = "0x600042B")]
	[Address(RVA = "0x1313B58", Offset = "0x1313B58", VA = "0x1313B58")]
	public ObservePosition()
	{
	}
}
[Token(Token = "0x20000AC")]
public class OffsetPosition : MonoBehaviour
{
	[Token(Token = "0x400056B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform targetTransform;

	[Token(Token = "0x400056C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector3 offset;

	[Token(Token = "0x600042C")]
	[Address(RVA = "0x1314178", Offset = "0x1314178", VA = "0x1314178")]
	private void Update()
	{
	}

	[Token(Token = "0x600042D")]
	[Address(RVA = "0x13141D8", Offset = "0x13141D8", VA = "0x13141D8")]
	public OffsetPosition()
	{
	}
}
[Token(Token = "0x20000AD")]
public static class ParseLoc
{
	[Token(Token = "0x600042E")]
	[Address(RVA = "0x1319E6C", Offset = "0x1319E6C", VA = "0x1319E6C")]
	public static string Parse(string input)
	{
		return null;
	}
}
[Token(Token = "0x20000AE")]
public class ParticleAttractor : MonoBehaviour
{
	[Token(Token = "0x600042F")]
	[Address(RVA = "0x131BAAC", Offset = "0x131BAAC", VA = "0x131BAAC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000430")]
	[Address(RVA = "0x131BAB0", Offset = "0x131BAB0", VA = "0x131BAB0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000431")]
	[Address(RVA = "0x131BAB4", Offset = "0x131BAB4", VA = "0x131BAB4")]
	public ParticleAttractor()
	{
	}
}
[Token(Token = "0x20000AF")]
public enum SceneCloseMethod
{
	[Token(Token = "0x400056E")]
	e_Back,
	[Token(Token = "0x400056F")]
	e_Stop,
	[Token(Token = "0x4000570")]
	e_Restart,
	[Token(Token = "0x4000571")]
	e_Next,
	[Token(Token = "0x4000572")]
	e_Timer,
	[Token(Token = "0x4000573")]
	e_Battle
}
[Token(Token = "0x20000B0")]
public class PerformanceLogger : MonoBehaviour
{
	[Token(Token = "0x4000574")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private GraphyManager graMan;

	[Token(Token = "0x4000575")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private string outputString;

	[Token(Token = "0x4000576")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private string filename;

	[Token(Token = "0x4000577")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Canvas graphyCanvas;

	[Token(Token = "0x6000432")]
	[Address(RVA = "0x1200124", Offset = "0x1200124", VA = "0x1200124")]
	private void Start()
	{
	}

	[Token(Token = "0x6000433")]
	[Address(RVA = "0x1200984", Offset = "0x1200984", VA = "0x1200984")]
	private void Update()
	{
	}

	[Token(Token = "0x6000434")]
	[Address(RVA = "0x1200A04", Offset = "0x1200A04", VA = "0x1200A04")]
	private void OnLevelWasLoaded(int level)
	{
	}

	[Token(Token = "0x6000435")]
	[Address(RVA = "0x1200D34", Offset = "0x1200D34", VA = "0x1200D34")]
	public void SceneLeft(SceneCloseMethod _method)
	{
	}

	[Token(Token = "0x6000436")]
	[Address(RVA = "0x1201C58", Offset = "0x1201C58", VA = "0x1201C58")]
	public PerformanceLogger()
	{
	}
}
[Serializable]
[Token(Token = "0x20000B1")]
public class ManualVO
{
	[Token(Token = "0x4000578")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public LipSyncData vo;

	[Token(Token = "0x4000579")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public KeyCode key;

	[Token(Token = "0x400057A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool useTimer;

	[Token(Token = "0x400057B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float playAfter;

	[Token(Token = "0x400057C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float timer;

	[Token(Token = "0x6000437")]
	[Address(RVA = "0xDEBF14", Offset = "0xDEBF14", VA = "0xDEBF14")]
	public bool CheckPress()
	{
		return default(bool);
	}

	[Token(Token = "0x6000438")]
	[Address(RVA = "0xDEBF20", Offset = "0xDEBF20", VA = "0xDEBF20")]
	public bool UpdateTimer()
	{
		return default(bool);
	}

	[Token(Token = "0x6000439")]
	[Address(RVA = "0xDEBF80", Offset = "0xDEBF80", VA = "0xDEBF80")]
	public ManualVO()
	{
	}
}
[Token(Token = "0x20000B2")]
public class PlayVoiceline : MonoBehaviour
{
	[Token(Token = "0x400057D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LipSync lipSync;

	[Token(Token = "0x400057E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<ManualVO> voiceOvers;

	[Token(Token = "0x600043A")]
	[Address(RVA = "0x1204C40", Offset = "0x1204C40", VA = "0x1204C40")]
	private void Update()
	{
	}

	[Token(Token = "0x600043B")]
	[Address(RVA = "0x1204D80", Offset = "0x1204D80", VA = "0x1204D80")]
	private void PlayLine(LipSyncData _data)
	{
	}

	[Token(Token = "0x600043C")]
	[Address(RVA = "0x1204DC8", Offset = "0x1204DC8", VA = "0x1204DC8")]
	public PlayVoiceline()
	{
	}
}
[Token(Token = "0x20000B3")]
public class SelfDestruct : MonoBehaviour
{
	[Token(Token = "0x400057F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float lifetime;

	[Token(Token = "0x600043D")]
	[Address(RVA = "0xA0C07C", Offset = "0xA0C07C", VA = "0xA0C07C")]
	private void Start()
	{
	}

	[Token(Token = "0x600043E")]
	[Address(RVA = "0xA0C0D0", Offset = "0xA0C0D0", VA = "0xA0C0D0")]
	private void Destruct()
	{
	}

	[Token(Token = "0x600043F")]
	[Address(RVA = "0xA0C148", Offset = "0xA0C148", VA = "0xA0C148")]
	public SelfDestruct()
	{
	}
}
[Token(Token = "0x20000B4")]
public class Shrinker : MonoBehaviour
{
	[Token(Token = "0x4000580")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Vector3 startScale;

	[Token(Token = "0x6000440")]
	[Address(RVA = "0xA0E130", Offset = "0xA0E130", VA = "0xA0E130")]
	public void Awake()
	{
	}

	[Token(Token = "0x6000441")]
	[Address(RVA = "0xA0E134", Offset = "0xA0E134", VA = "0xA0E134")]
	public void Shrink()
	{
	}

	[Token(Token = "0x6000442")]
	[Address(RVA = "0xA0E138", Offset = "0xA0E138", VA = "0xA0E138")]
	public void Unshrink()
	{
	}

	[Token(Token = "0x6000443")]
	[Address(RVA = "0xA0E13C", Offset = "0xA0E13C", VA = "0xA0E13C")]
	public Shrinker()
	{
	}
}
[Token(Token = "0x20000B5")]
public class StayBetweenTwoObjects : MonoBehaviour
{
	[Token(Token = "0x4000581")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform obj1;

	[Token(Token = "0x4000582")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform obj2;

	[Token(Token = "0x4000583")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5CED64", Offset = "0x5CED64")]
	public float percentage;

	[Token(Token = "0x6000444")]
	[Address(RVA = "0x13AFC94", Offset = "0x13AFC94", VA = "0x13AFC94")]
	private void Update()
	{
	}

	[Token(Token = "0x6000445")]
	[Address(RVA = "0x13AFD50", Offset = "0x13AFD50", VA = "0x13AFD50")]
	public StayBetweenTwoObjects()
	{
	}
}
[Token(Token = "0x20000B6")]
public class TextFader : MonoBehaviour
{
	[Token(Token = "0x2000389")]
	private enum FadeState
	{
		[Token(Token = "0x400188D")]
		e_None,
		[Token(Token = "0x400188E")]
		e_FadeIn,
		[Token(Token = "0x400188F")]
		e_FadeOut
	}

	[Token(Token = "0x4000584")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private TMP_Text text;

	[Token(Token = "0x4000585")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float fadeTime;

	[Token(Token = "0x4000586")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private FadeState state;

	[Token(Token = "0x4000587")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float progress;

	[Token(Token = "0x4000588")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AnimationCurve fadeCurve;

	[Token(Token = "0x4000589")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool fadeTransition;

	[Token(Token = "0x400058A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private string textToSet;

	[Token(Token = "0x6000446")]
	[Address(RVA = "0xE8D5D8", Offset = "0xE8D5D8", VA = "0xE8D5D8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000447")]
	[Address(RVA = "0xE8D6C4", Offset = "0xE8D6C4", VA = "0xE8D6C4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000448")]
	[Address(RVA = "0xE8D864", Offset = "0xE8D864", VA = "0xE8D864")]
	public void FadeIn()
	{
	}

	[Token(Token = "0x6000449")]
	[Address(RVA = "0xE8D8C0", Offset = "0xE8D8C0", VA = "0xE8D8C0")]
	public void FadeOut()
	{
	}

	[Token(Token = "0x600044A")]
	[Address(RVA = "0xE8D91C", Offset = "0xE8D91C", VA = "0xE8D91C")]
	public void FadeTransition(string _text)
	{
	}

	[Token(Token = "0x600044B")]
	[Address(RVA = "0xE8D79C", Offset = "0xE8D79C", VA = "0xE8D79C")]
	private void SetAlpha(float _alpha)
	{
	}

	[Token(Token = "0x600044C")]
	[Address(RVA = "0xE8D9BC", Offset = "0xE8D9BC", VA = "0xE8D9BC")]
	public TextFader()
	{
	}
}
[Token(Token = "0x20000B7")]
public class VelocityHolder : MonoBehaviour
{
	[Token(Token = "0x400058B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int framesBuffer;

	[Token(Token = "0x400058C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float velocity;

	[Token(Token = "0x400058D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool usebuffer;

	[Token(Token = "0x400058E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private List<float> frames;

	[Token(Token = "0x400058F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Vector3 oldPos;

	[Token(Token = "0x600044D")]
	[Address(RVA = "0xD0D43C", Offset = "0xD0D43C", VA = "0xD0D43C")]
	private void Awake()
	{
	}

	[Token(Token = "0x600044E")]
	[Address(RVA = "0xD0D4B4", Offset = "0xD0D4B4", VA = "0xD0D4B4")]
	private void Update()
	{
	}

	[Token(Token = "0x600044F")]
	[Address(RVA = "0xD0D638", Offset = "0xD0D638", VA = "0xD0D638")]
	public VelocityHolder()
	{
	}
}
[Token(Token = "0x20000B8")]
public class SmoothCamera : MonoBehaviour
{
	[Token(Token = "0x4000590")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Camera oculusTarget;

	[Token(Token = "0x4000591")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Camera viveTarget;

	[Token(Token = "0x4000592")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Transform target;

	[Token(Token = "0x6000450")]
	[Address(RVA = "0xA10424", Offset = "0xA10424", VA = "0xA10424")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000451")]
	[Address(RVA = "0xA10428", Offset = "0xA10428", VA = "0xA10428")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000452")]
	[Address(RVA = "0xA10600", Offset = "0xA10600", VA = "0xA10600")]
	public void ApplySettings()
	{
	}

	[Token(Token = "0x6000453")]
	[Address(RVA = "0xA106B4", Offset = "0xA106B4", VA = "0xA106B4")]
	public SmoothCamera()
	{
	}
}
[Token(Token = "0x20000B9")]
public class SmoothCameraController : MonoBehaviour
{
	[Token(Token = "0x200038A")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDC6C", Offset = "0x5CDC6C")]
	private sealed class <lateStart>d__2 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001890")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001891")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001892")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SmoothCameraController <>4__this;

		[Token(Token = "0x170002A3")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001971")]
			[Address(RVA = "0xFF5AA8", Offset = "0xFF5AA8", VA = "0xFF5AA8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002A4")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001973")]
			[Address(RVA = "0xFF5AF0", Offset = "0xFF5AF0", VA = "0xFF5AF0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600196E")]
		[Address(RVA = "0xFF59C8", Offset = "0xFF59C8", VA = "0xFF59C8")]
		[DebuggerHidden]
		public <lateStart>d__2(int <>1__state)
		{
		}

		[Token(Token = "0x600196F")]
		[Address(RVA = "0xFF59F4", Offset = "0xFF59F4", VA = "0xFF59F4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001970")]
		[Address(RVA = "0xFF59F8", Offset = "0xFF59F8", VA = "0xFF59F8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001972")]
		[Address(RVA = "0xFF5AB0", Offset = "0xFF5AB0", VA = "0xFF5AB0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000593")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject smoothCamera;

	[Token(Token = "0x6000454")]
	[Address(RVA = "0xA106BC", Offset = "0xA106BC", VA = "0xA106BC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000455")]
	[Address(RVA = "0xA106E8", Offset = "0xA106E8", VA = "0xA106E8")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D7D18", Offset = "0x5D7D18")]
	private IEnumerator lateStart()
	{
		return null;
	}

	[Token(Token = "0x6000456")]
	[Address(RVA = "0xA10760", Offset = "0xA10760", VA = "0xA10760")]
	public void UpdateSettings()
	{
	}

	[Token(Token = "0x6000457")]
	[Address(RVA = "0xA10804", Offset = "0xA10804", VA = "0xA10804")]
	public SmoothCameraController()
	{
	}
}
[Token(Token = "0x20000BA")]
public class SplashManager : MonoBehaviour
{
	[Token(Token = "0x200038B")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDC7C", Offset = "0x5CDC7C")]
	private sealed class <LoadYourAsyncScene>d__2 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001893")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001894")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001895")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SplashManager <>4__this;

		[Token(Token = "0x4001896")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private AsyncOperation <asyncLoad>5__2;

		[Token(Token = "0x170002A5")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001977")]
			[Address(RVA = "0x138419C", Offset = "0x138419C", VA = "0x138419C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002A6")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001979")]
			[Address(RVA = "0x13841E4", Offset = "0x13841E4", VA = "0x13841E4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001974")]
		[Address(RVA = "0x138400C", Offset = "0x138400C", VA = "0x138400C")]
		[DebuggerHidden]
		public <LoadYourAsyncScene>d__2(int <>1__state)
		{
		}

		[Token(Token = "0x6001975")]
		[Address(RVA = "0x1384038", Offset = "0x1384038", VA = "0x1384038", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001976")]
		[Address(RVA = "0x138403C", Offset = "0x138403C", VA = "0x138403C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001978")]
		[Address(RVA = "0x13841A4", Offset = "0x13841A4", VA = "0x13841A4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000594")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float delay;

	[Token(Token = "0x6000458")]
	[Address(RVA = "0xA192D4", Offset = "0xA192D4", VA = "0xA192D4")]
	public void Start()
	{
	}

	[Token(Token = "0x6000459")]
	[Address(RVA = "0xA19300", Offset = "0xA19300", VA = "0xA19300")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D7D78", Offset = "0x5D7D78")]
	private IEnumerator LoadYourAsyncScene()
	{
		return null;
	}

	[Token(Token = "0x600045A")]
	[Address(RVA = "0xA19378", Offset = "0xA19378", VA = "0xA19378")]
	public SplashManager()
	{
	}
}
[Token(Token = "0x20000BB")]
public class SteamVR_ControllerFix : MonoBehaviour
{
	[Token(Token = "0x4000595")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 newPos;

	[Token(Token = "0x4000596")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Vector3 newRot;

	[Token(Token = "0x600045B")]
	[Address(RVA = "0x13AFD58", Offset = "0x13AFD58", VA = "0x13AFD58")]
	private void Start()
	{
	}

	[Token(Token = "0x600045C")]
	[Address(RVA = "0x13AFD5C", Offset = "0x13AFD5C", VA = "0x13AFD5C")]
	public SteamVR_ControllerFix()
	{
	}
}
[Token(Token = "0x20000BC")]
public class TextPopup : MonoBehaviour
{
	[Token(Token = "0x4000597")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float time;

	[Token(Token = "0x4000598")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float floatSpeed;

	[Token(Token = "0x4000599")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float timer;

	[Token(Token = "0x400059A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TextMeshPro text;

	[Token(Token = "0x600045D")]
	[Address(RVA = "0xE8DCE8", Offset = "0xE8DCE8", VA = "0xE8DCE8")]
	private void Start()
	{
	}

	[Token(Token = "0x600045E")]
	[Address(RVA = "0xE8DD8C", Offset = "0xE8DD8C", VA = "0xE8DD8C")]
	public void SetText(string message)
	{
	}

	[Token(Token = "0x600045F")]
	[Address(RVA = "0xE8DDB0", Offset = "0xE8DDB0", VA = "0xE8DDB0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000460")]
	[Address(RVA = "0xE8DFA0", Offset = "0xE8DFA0", VA = "0xE8DFA0")]
	public TextPopup()
	{
	}
}
[Token(Token = "0x20000BD")]
public class TriggerObjectEnabler : MonoBehaviour
{
	[Token(Token = "0x400059B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<GameObject> objects;

	[Token(Token = "0x400059C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform leftController;

	[Token(Token = "0x400059D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform rightController;

	[Token(Token = "0x400059E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private GameManager gm;

	[Token(Token = "0x400059F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Collider col;

	[Token(Token = "0x40005A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool inBounds;

	[Token(Token = "0x6000461")]
	[Address(RVA = "0xBCC670", Offset = "0xBCC670", VA = "0xBCC670")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000462")]
	[Address(RVA = "0xBCC710", Offset = "0xBCC710", VA = "0xBCC710")]
	private void Start()
	{
	}

	[Token(Token = "0x6000463")]
	[Address(RVA = "0xBCC790", Offset = "0xBCC790", VA = "0xBCC790")]
	public void DisableAllObjects()
	{
	}

	[Token(Token = "0x6000464")]
	[Address(RVA = "0xBCC834", Offset = "0xBCC834", VA = "0xBCC834")]
	private void Update()
	{
	}

	[Token(Token = "0x6000465")]
	[Address(RVA = "0xBCC97C", Offset = "0xBCC97C", VA = "0xBCC97C")]
	public TriggerObjectEnabler()
	{
	}
}
[Token(Token = "0x20000BE")]
public class ExampleCardItemAction : MonoBehaviour
{
	[Token(Token = "0x40005A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform title;

	[Token(Token = "0x40005A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform description;

	[Token(Token = "0x40005A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Text titleText;

	[Token(Token = "0x40005A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Text descriptionText;

	[Token(Token = "0x6000466")]
	[Address(RVA = "0xA03CC8", Offset = "0xA03CC8", VA = "0xA03CC8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000467")]
	[Address(RVA = "0xA03DE0", Offset = "0xA03DE0", VA = "0xA03DE0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000468")]
	[Address(RVA = "0xA03E98", Offset = "0xA03E98", VA = "0xA03E98")]
	private void ShowDescription(Card card)
	{
	}

	[Token(Token = "0x6000469")]
	[Address(RVA = "0xA03F98", Offset = "0xA03F98", VA = "0xA03F98")]
	public ExampleCardItemAction()
	{
	}
}
[Token(Token = "0x20000BF")]
public class ExampleDynamicCardList : MonoBehaviour
{
	[Token(Token = "0x40005A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public CardListManager clm;

	[Token(Token = "0x600046A")]
	[Address(RVA = "0xA03FA0", Offset = "0xA03FA0", VA = "0xA03FA0")]
	private void Start()
	{
	}

	[Token(Token = "0x600046B")]
	[Address(RVA = "0xA03FA4", Offset = "0xA03FA4", VA = "0xA03FA4")]
	public void UpdateList()
	{
	}

	[Token(Token = "0x600046C")]
	[Address(RVA = "0xA040F0", Offset = "0xA040F0", VA = "0xA040F0")]
	public ExampleDynamicCardList()
	{
	}
}
[Token(Token = "0x20000C0")]
public class ExampleOptionControl : MonoBehaviour
{
	[Token(Token = "0x40005A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private OptionsManager optionsManager;

	[Token(Token = "0x600046D")]
	[Address(RVA = "0xA040F8", Offset = "0xA040F8", VA = "0xA040F8")]
	private void Start()
	{
	}

	[Token(Token = "0x600046E")]
	[Address(RVA = "0xA041BC", Offset = "0xA041BC", VA = "0xA041BC")]
	private void SwitchInteractionMode(int i)
	{
	}

	[Token(Token = "0x600046F")]
	[Address(RVA = "0xA043F8", Offset = "0xA043F8", VA = "0xA043F8")]
	public ExampleOptionControl()
	{
	}
}
[Token(Token = "0x20000C1")]
public class InvokeKeyboard : MonoBehaviour, ISelectHandler, IEventSystemHandler, IDeselectHandler
{
	[Token(Token = "0x40005A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject keyboard;

	[Token(Token = "0x40005A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool hideKeyboardOnDeslect;

	[Token(Token = "0x6000470")]
	[Address(RVA = "0xA52C3C", Offset = "0xA52C3C", VA = "0xA52C3C", Slot = "4")]
	public void OnSelect(BaseEventData eventData)
	{
	}

	[Token(Token = "0x6000471")]
	[Address(RVA = "0xA52C8C", Offset = "0xA52C8C", VA = "0xA52C8C", Slot = "5")]
	public void OnDeselect(BaseEventData eventData)
	{
	}

	[Token(Token = "0x6000472")]
	[Address(RVA = "0xA52CE4", Offset = "0xA52CE4", VA = "0xA52CE4")]
	public InvokeKeyboard()
	{
	}
}
[Token(Token = "0x20000C2")]
public class SwitchUI : MonoBehaviour
{
	[Token(Token = "0x40005A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<GameObject> canvas;

	[Token(Token = "0x40005AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int currentIndex;

	[Token(Token = "0x6000473")]
	[Address(RVA = "0xE857FC", Offset = "0xE857FC", VA = "0xE857FC")]
	public void NextUI()
	{
	}

	[Token(Token = "0x6000474")]
	[Address(RVA = "0xE858F4", Offset = "0xE858F4", VA = "0xE858F4")]
	public SwitchUI()
	{
	}
}
[Token(Token = "0x20000C3")]
public class UI_Browser : MonoBehaviour
{
	[Token(Token = "0x200038C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDC8C", Offset = "0x5CDC8C")]
	private sealed class <>c__DisplayClass2_0
	{
		[Token(Token = "0x4001897")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string fileName;

		[Token(Token = "0x4001898")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UI_Browser <>4__this;

		[Token(Token = "0x600197A")]
		[Address(RVA = "0x138C49C", Offset = "0x138C49C", VA = "0x138C49C")]
		public <>c__DisplayClass2_0()
		{
		}

		[Token(Token = "0x600197B")]
		[Address(RVA = "0x138C4A4", Offset = "0x138C4A4", VA = "0x138C4A4")]
		internal void <GetColliders>b__0()
		{
		}
	}

	[Token(Token = "0x40005AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject browserButton;

	[Token(Token = "0x40005AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UI_Editor_Display manager;

	[Token(Token = "0x6000475")]
	[Address(RVA = "0xBD20E4", Offset = "0xBD20E4", VA = "0xBD20E4")]
	public void GetColliders()
	{
	}

	[Token(Token = "0x6000476")]
	[Address(RVA = "0xBD2768", Offset = "0xBD2768", VA = "0xBD2768")]
	private void SetCustomSong(string name)
	{
	}

	[Token(Token = "0x6000477")]
	[Address(RVA = "0xBD27C0", Offset = "0xBD27C0", VA = "0xBD27C0")]
	public void OpenCustomInWindowsExplorer()
	{
	}

	[Token(Token = "0x6000478")]
	[Address(RVA = "0xBD292C", Offset = "0xBD292C", VA = "0xBD292C")]
	public UI_Browser()
	{
	}
}
[Token(Token = "0x20000C4")]
public class UI_Editor_Display : UI_Screen
{
	[Token(Token = "0x40005AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UI_Browser browser;

	[Token(Token = "0x40005AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Toggle easytoggle;

	[Token(Token = "0x40005AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Toggle normalToggle;

	[Token(Token = "0x40005B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Toggle hardToggle;

	[Token(Token = "0x40005B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public TextMeshProUGUI selectedSong;

	[Token(Token = "0x40005B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Button danceButton;

	[Token(Token = "0x6000479")]
	[Address(RVA = "0xBD2CA8", Offset = "0xBD2CA8", VA = "0xBD2CA8", Slot = "4")]
	public override void Transition(bool on)
	{
	}

	[Token(Token = "0x600047A")]
	[Address(RVA = "0xBD2DF0", Offset = "0xBD2DF0", VA = "0xBD2DF0")]
	public void UpdateDifficulty(int diff)
	{
	}

	[Token(Token = "0x600047B")]
	[Address(RVA = "0xBD2E4C", Offset = "0xBD2E4C", VA = "0xBD2E4C")]
	public void LoadCustomSong()
	{
	}

	[Token(Token = "0x600047C")]
	[Address(RVA = "0xBD2EF4", Offset = "0xBD2EF4", VA = "0xBD2EF4")]
	public UI_Editor_Display()
	{
	}
}
[Token(Token = "0x20000C5")]
public class UI_Editor_EditTools : MonoBehaviour
{
	[Token(Token = "0x40005B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public EditorManager editorManager;

	[Token(Token = "0x40005B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Button cut_button;

	[Token(Token = "0x40005B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Button copy_button;

	[Token(Token = "0x40005B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Button paste_button;

	[Token(Token = "0x40005B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public TextMeshProUGUI clipboardText;

	[Token(Token = "0x40005B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Image trigger_select_highlight;

	[Token(Token = "0x40005B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Image trigger_multi_highlight;

	[Token(Token = "0x40005BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Image trigger_add_highlight;

	[Token(Token = "0x600047D")]
	[Address(RVA = "0xBD2EFC", Offset = "0xBD2EFC", VA = "0xBD2EFC")]
	private void Start()
	{
	}

	[Token(Token = "0x600047E")]
	[Address(RVA = "0xBD2F00", Offset = "0xBD2F00", VA = "0xBD2F00")]
	public void RefreshUI()
	{
	}

	[Token(Token = "0x600047F")]
	[Address(RVA = "0xBD30A4", Offset = "0xBD30A4", VA = "0xBD30A4")]
	public void Cut()
	{
	}

	[Token(Token = "0x6000480")]
	[Address(RVA = "0xBD30D8", Offset = "0xBD30D8", VA = "0xBD30D8")]
	public void Copy()
	{
	}

	[Token(Token = "0x6000481")]
	[Address(RVA = "0xBD310C", Offset = "0xBD310C", VA = "0xBD310C")]
	public void Paste()
	{
	}

	[Token(Token = "0x6000482")]
	[Address(RVA = "0xBD3140", Offset = "0xBD3140", VA = "0xBD3140")]
	public void Trigger_Select()
	{
	}

	[Token(Token = "0x6000483")]
	[Address(RVA = "0xBD31BC", Offset = "0xBD31BC", VA = "0xBD31BC")]
	public void Trigger_Multi()
	{
	}

	[Token(Token = "0x6000484")]
	[Address(RVA = "0xBD3244", Offset = "0xBD3244", VA = "0xBD3244")]
	public void Trigger_Add()
	{
	}

	[Token(Token = "0x6000485")]
	[Address(RVA = "0xBD32C0", Offset = "0xBD32C0", VA = "0xBD32C0")]
	public UI_Editor_EditTools()
	{
	}
}
[Token(Token = "0x20000C6")]
public class UI_Editor_Info : MonoBehaviour
{
	[Token(Token = "0x40005BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Dictionary<string, string> texts;

	[Token(Token = "0x40005BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextMeshProUGUI text;

	[Token(Token = "0x6000486")]
	[Address(RVA = "0xBD32C8", Offset = "0xBD32C8", VA = "0xBD32C8")]
	public void SetText(string key)
	{
	}

	[Token(Token = "0x6000487")]
	[Address(RVA = "0xBD336C", Offset = "0xBD336C", VA = "0xBD336C")]
	public UI_Editor_Info()
	{
	}
}
[Token(Token = "0x20000C7")]
public class UI_Editor_TestPanel : MonoBehaviour
{
	[Token(Token = "0x40005BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TextMeshProUGUI infoText;

	[Token(Token = "0x40005BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Toggle easytoggle;

	[Token(Token = "0x40005BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Toggle normalToggle;

	[Token(Token = "0x40005C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Toggle proToggle;

	[Token(Token = "0x40005C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Toggle godToggle;

	[Token(Token = "0x40005C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Toggle arenaToggle;

	[Token(Token = "0x40005C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Button testButton;

	[Token(Token = "0x40005C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private GameManager gm;

	[Token(Token = "0x40005C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private EditorManager em;

	[Token(Token = "0x40005C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private SongEditor editor;

	[Token(Token = "0x40005C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private int difficulty;

	[Token(Token = "0x6000488")]
	[Address(RVA = "0xBD3374", Offset = "0xBD3374", VA = "0xBD3374")]
	private void Start()
	{
	}

	[Token(Token = "0x6000489")]
	[Address(RVA = "0xBD3498", Offset = "0xBD3498", VA = "0xBD3498")]
	private void Update()
	{
	}

	[Token(Token = "0x600048A")]
	[Address(RVA = "0xBD38A4", Offset = "0xBD38A4", VA = "0xBD38A4")]
	public void UpdateDifficulty()
	{
	}

	[Token(Token = "0x600048B")]
	[Address(RVA = "0xBD3900", Offset = "0xBD3900", VA = "0xBD3900")]
	public void Test()
	{
	}

	[Token(Token = "0x600048C")]
	[Address(RVA = "0xBD3974", Offset = "0xBD3974", VA = "0xBD3974")]
	public UI_Editor_TestPanel()
	{
	}
}
[Token(Token = "0x20000C8")]
public class UI_IncrementalValue : MonoBehaviour
{
	[Token(Token = "0x40005C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Button up_Button;

	[Token(Token = "0x40005C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Button down_Button;

	[Token(Token = "0x40005CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TextMeshProUGUI valueText;

	[Token(Token = "0x40005CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float increment;

	[Token(Token = "0x40005CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public Vector2 minMaxValue;

	[Token(Token = "0x40005CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float value;

	[Token(Token = "0x40005CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public string format;

	[Token(Token = "0x600048D")]
	[Address(RVA = "0xBD3984", Offset = "0xBD3984", VA = "0xBD3984")]
	public void SetValue(float _value)
	{
	}

	[Token(Token = "0x600048E")]
	[Address(RVA = "0xBD3A2C", Offset = "0xBD3A2C", VA = "0xBD3A2C")]
	public void Up()
	{
	}

	[Token(Token = "0x600048F")]
	[Address(RVA = "0xBD3A40", Offset = "0xBD3A40", VA = "0xBD3A40")]
	public void Down()
	{
	}

	[Token(Token = "0x6000490")]
	[Address(RVA = "0xBD398C", Offset = "0xBD398C", VA = "0xBD398C")]
	private void UpdateValues()
	{
	}

	[Token(Token = "0x6000491")]
	[Address(RVA = "0xBD3A54", Offset = "0xBD3A54", VA = "0xBD3A54")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000492")]
	[Address(RVA = "0xBD3A58", Offset = "0xBD3A58", VA = "0xBD3A58")]
	public UI_IncrementalValue()
	{
	}
}
[Token(Token = "0x20000C9")]
public class UI_Navigation : MonoBehaviour
{
	[Token(Token = "0x40005CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Slider progressBar;

	[Token(Token = "0x40005D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextMeshProUGUI timer;

	[Token(Token = "0x40005D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Button skipToStart;

	[Token(Token = "0x40005D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Button skipToEnd;

	[Token(Token = "0x40005D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Button playPause;

	[Token(Token = "0x40005D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Sprite playSprite;

	[Token(Token = "0x40005D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Sprite pauseSprite;

	[Token(Token = "0x6000493")]
	[Address(RVA = "0xBD3DE8", Offset = "0xBD3DE8", VA = "0xBD3DE8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000494")]
	[Address(RVA = "0xBD3DEC", Offset = "0xBD3DEC", VA = "0xBD3DEC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000495")]
	[Address(RVA = "0xBD42DC", Offset = "0xBD42DC", VA = "0xBD42DC")]
	public void OnSliderValuechange()
	{
	}

	[Token(Token = "0x6000496")]
	[Address(RVA = "0xBD4214", Offset = "0xBD4214", VA = "0xBD4214")]
	public void TogglePlayPauseSprite()
	{
	}

	[Token(Token = "0x6000497")]
	[Address(RVA = "0xBD43A8", Offset = "0xBD43A8", VA = "0xBD43A8")]
	public UI_Navigation()
	{
	}
}
[Token(Token = "0x20000CA")]
public class UI_NodeSettings : MonoBehaviour
{
	[Token(Token = "0x200038D")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDC9C", Offset = "0x5CDC9C")]
	private sealed class <>c__DisplayClass53_0
	{
		[Token(Token = "0x4001899")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public NodeType baseType;

		[Token(Token = "0x600197C")]
		[Address(RVA = "0x138C4C8", Offset = "0x138C4C8", VA = "0x138C4C8")]
		public <>c__DisplayClass53_0()
		{
		}

		[Token(Token = "0x600197D")]
		[Address(RVA = "0x138C4D0", Offset = "0x138C4D0", VA = "0x138C4D0")]
		internal bool <CheckIfSameNodeType>b__0(SceneEditorNode n)
		{
			return default(bool);
		}
	}

	[Token(Token = "0x200038E")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDCAC", Offset = "0x5CDCAC")]
	private sealed class <>c__DisplayClass54_0
	{
		[Token(Token = "0x400189A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool baseGameplay;

		[Token(Token = "0x600197E")]
		[Address(RVA = "0x138C4F4", Offset = "0x138C4F4", VA = "0x138C4F4")]
		public <>c__DisplayClass54_0()
		{
		}

		[Token(Token = "0x600197F")]
		[Address(RVA = "0x138C4FC", Offset = "0x138C4FC", VA = "0x138C4FC")]
		internal bool <CheckIfAllGameplayUtilitySame>b__0(SceneEditorNode n)
		{
			return default(bool);
		}
	}

	[Token(Token = "0x200038F")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDCBC", Offset = "0x5CDCBC")]
	private sealed class <>c__DisplayClass55_0
	{
		[Token(Token = "0x400189B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string basePath;

		[Token(Token = "0x6001980")]
		[Address(RVA = "0x138C540", Offset = "0x138C540", VA = "0x138C540")]
		public <>c__DisplayClass55_0()
		{
		}

		[Token(Token = "0x6001981")]
		[Address(RVA = "0x138C548", Offset = "0x138C548", VA = "0x138C548")]
		internal bool <CheckIfSamePath>b__0(SceneEditorNode n)
		{
			return default(bool);
		}
	}

	[Token(Token = "0x2000390")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDCCC", Offset = "0x5CDCCC")]
	private sealed class <>c__DisplayClass56_0
	{
		[Token(Token = "0x400189C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool baseSet;

		[Token(Token = "0x400189D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool baseCascade;

		[Token(Token = "0x6001982")]
		[Address(RVA = "0x138C56C", Offset = "0x138C56C", VA = "0x138C56C")]
		public <>c__DisplayClass56_0()
		{
		}

		[Token(Token = "0x6001983")]
		[Address(RVA = "0x138C574", Offset = "0x138C574", VA = "0x138C574")]
		internal bool <CheckIfSameSetCascade>b__0(SceneEditorNode s)
		{
			return default(bool);
		}

		[Token(Token = "0x6001984")]
		[Address(RVA = "0x138C5A4", Offset = "0x138C5A4", VA = "0x138C5A4")]
		internal bool <CheckIfSameSetCascade>b__1(SceneEditorNode c)
		{
			return default(bool);
		}
	}

	[Token(Token = "0x40005D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool isutility;

	[Token(Token = "0x40005D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<SceneEditorNode> selectedNodes;

	[Token(Token = "0x40005D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject gameplayPanel;

	[Token(Token = "0x40005D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject utilityPanel;

	[Token(Token = "0x40005DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject nothingPanel;

	[Token(Token = "0x40005DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject deleteButton;

	[Token(Token = "0x40005DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject deselectButton;

	[Token(Token = "0x40005DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public TMP_Dropdown colourDropdown;

	[Token(Token = "0x40005DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public TMP_Dropdown pathDropdown;

	[Token(Token = "0x40005DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public TMP_Dropdown utilityTypeDropdown;

	[Token(Token = "0x40005E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Toggle setToggle;

	[Token(Token = "0x40005E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Toggle cascadeToggle;

	[Token(Token = "0x40005E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public TextMeshProUGUI utilityInfo;

	[Token(Token = "0x40005E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public TextMeshProUGUI nodeCount;

	[Token(Token = "0x40005E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public LineRenderer line;

	[Token(Token = "0x40005E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Toggle toggle_colour_green;

	[Token(Token = "0x40005E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Toggle toggle_colour_pink;

	[Token(Token = "0x40005E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Toggle toggle_colour_yellow;

	[Token(Token = "0x40005E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public Toggle toggle_node_normal;

	[Token(Token = "0x40005E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public Toggle toggle_node_set;

	[Token(Token = "0x40005EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public Toggle toggle_node_cascade;

	[Token(Token = "0x40005EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public Toggle toggle_path_wideLeft;

	[Token(Token = "0x40005EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public Toggle toggle_path_curveLeft;

	[Token(Token = "0x40005ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public Toggle toggle_path_center;

	[Token(Token = "0x40005EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public Toggle toggle_path_curveRight;

	[Token(Token = "0x40005EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public Toggle toggle_path_wideRight;

	[Token(Token = "0x40005F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public Toggle toggle_path_default;

	[Token(Token = "0x40005F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public Image path_wideLeft;

	[Token(Token = "0x40005F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public Image path_curveLeft;

	[Token(Token = "0x40005F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public Image path_center;

	[Token(Token = "0x40005F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public Image path_curveRight;

	[Token(Token = "0x40005F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public Image path_wideRight;

	[Token(Token = "0x40005F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public GameObject tooltip;

	[Token(Token = "0x40005F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public TextMeshProUGUI tooltipText;

	[Token(Token = "0x40005F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private float tooltipTimer;

	[Token(Token = "0x17000006")]
	private SongEditor editor
	{
		[Token(Token = "0x6000498")]
		[Address(RVA = "0xBD43B0", Offset = "0xBD43B0", VA = "0xBD43B0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000499")]
	[Address(RVA = "0xBD4428", Offset = "0xBD4428", VA = "0xBD4428")]
	private void Start()
	{
	}

	[Token(Token = "0x600049A")]
	[Address(RVA = "0xBD442C", Offset = "0xBD442C", VA = "0xBD442C")]
	private void Update()
	{
	}

	[Token(Token = "0x600049B")]
	[Address(RVA = "0xBD4780", Offset = "0xBD4780", VA = "0xBD4780")]
	public void SetNodeToUtility()
	{
	}

	[Token(Token = "0x600049C")]
	[Address(RVA = "0xBD5694", Offset = "0xBD5694", VA = "0xBD5694")]
	public void SetNodeToGameplay()
	{
	}

	[Token(Token = "0x600049D")]
	[Address(RVA = "0xBD5708", Offset = "0xBD5708", VA = "0xBD5708")]
	public void SwitchToUtility()
	{
	}

	[Token(Token = "0x600049E")]
	[Address(RVA = "0xBD57E0", Offset = "0xBD57E0", VA = "0xBD57E0")]
	public void SwitchToGameplay()
	{
	}

	[Token(Token = "0x600049F")]
	[Address(RVA = "0xBD58B4", Offset = "0xBD58B4", VA = "0xBD58B4")]
	public void SwitchToNothing()
	{
	}

	[Token(Token = "0x60004A0")]
	[Address(RVA = "0xBD5928", Offset = "0xBD5928", VA = "0xBD5928")]
	public void SnapToBeat()
	{
	}

	[Token(Token = "0x60004A1")]
	[Address(RVA = "0xBD59D8", Offset = "0xBD59D8", VA = "0xBD59D8")]
	public void SnapToHalfBeat()
	{
	}

	[Token(Token = "0x60004A2")]
	[Address(RVA = "0xBD5A88", Offset = "0xBD5A88", VA = "0xBD5A88")]
	public void DeleteNode()
	{
	}

	[Token(Token = "0x60004A3")]
	[Address(RVA = "0xBD4F80", Offset = "0xBD4F80", VA = "0xBD4F80")]
	public void UpdateNode()
	{
	}

	[Token(Token = "0x60004A4")]
	[Address(RVA = "0xBD5B98", Offset = "0xBD5B98", VA = "0xBD5B98")]
	public void UpdateUI()
	{
	}

	[Token(Token = "0x60004A5")]
	[Address(RVA = "0xBD4EC0", Offset = "0xBD4EC0", VA = "0xBD4EC0")]
	private void SetSetCascadeButtons(bool set, bool cascade)
	{
	}

	[Token(Token = "0x60004A6")]
	[Address(RVA = "0xBD4984", Offset = "0xBD4984", VA = "0xBD4984")]
	private void SetPathButtons(string path)
	{
	}

	[Token(Token = "0x60004A7")]
	[Address(RVA = "0xBD47F8", Offset = "0xBD47F8", VA = "0xBD47F8")]
	private void SetTypeButtons(NodeType type)
	{
	}

	[Token(Token = "0x60004A8")]
	[Address(RVA = "0xBD4494", Offset = "0xBD4494", VA = "0xBD4494")]
	public void UpdateLineRenderer()
	{
	}

	[Token(Token = "0x60004A9")]
	[Address(RVA = "0xBD632C", Offset = "0xBD632C", VA = "0xBD632C")]
	public bool CheckIfSameNodeType(List<SceneEditorNode> nodes)
	{
		return default(bool);
	}

	[Token(Token = "0x60004AA")]
	[Address(RVA = "0xBD67B4", Offset = "0xBD67B4", VA = "0xBD67B4")]
	public bool CheckIfAllGameplayUtilitySame(List<SceneEditorNode> nodes)
	{
		return default(bool);
	}

	[Token(Token = "0x60004AB")]
	[Address(RVA = "0xBD6698", Offset = "0xBD6698", VA = "0xBD6698")]
	public bool CheckIfSamePath(List<SceneEditorNode> nodes)
	{
		return default(bool);
	}

	[Token(Token = "0x60004AC")]
	[Address(RVA = "0xBD6508", Offset = "0xBD6508", VA = "0xBD6508")]
	public bool CheckIfSameSetCascade(List<SceneEditorNode> nodes)
	{
		return default(bool);
	}

	[Token(Token = "0x60004AD")]
	[Address(RVA = "0xBD68E0", Offset = "0xBD68E0", VA = "0xBD68E0")]
	public static bool IsUtilityType(NodeType type)
	{
		return default(bool);
	}

	[Token(Token = "0x60004AE")]
	[Address(RVA = "0xBD64A4", Offset = "0xBD64A4", VA = "0xBD64A4")]
	public void SetDropdownValueNoCallback(TMP_Dropdown dropdown, int value)
	{
	}

	[Token(Token = "0x60004AF")]
	[Address(RVA = "0xBD6440", Offset = "0xBD6440", VA = "0xBD6440")]
	public void SetToggleValueNoCallback(Toggle toggle, bool value)
	{
	}

	[Token(Token = "0x60004B0")]
	[Address(RVA = "0xBD68F4", Offset = "0xBD68F4", VA = "0xBD68F4")]
	public void ShowTooltip(string tip)
	{
	}

	[Token(Token = "0x60004B1")]
	[Address(RVA = "0xBD6950", Offset = "0xBD6950", VA = "0xBD6950")]
	public UI_NodeSettings()
	{
	}
}
[Token(Token = "0x20000CB")]
public class UI_SongEditor_Keyboard : MonoBehaviour
{
	[Token(Token = "0x40005F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TMP_InputField inputField;

	[Token(Token = "0x40005FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool shift;

	[Token(Token = "0x40005FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<Button> buttons;

	[Token(Token = "0x40005FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public LineRenderer line;

	[Token(Token = "0x60004B2")]
	[Address(RVA = "0xD06564", Offset = "0xD06564", VA = "0xD06564")]
	private void Start()
	{
	}

	[Token(Token = "0x60004B3")]
	[Address(RVA = "0xD06608", Offset = "0xD06608", VA = "0xD06608")]
	private void Update()
	{
	}

	[Token(Token = "0x60004B4")]
	[Address(RVA = "0xD066FC", Offset = "0xD066FC", VA = "0xD066FC")]
	public void ClickKey(string character)
	{
	}

	[Token(Token = "0x60004B5")]
	[Address(RVA = "0xD06AE0", Offset = "0xD06AE0", VA = "0xD06AE0")]
	public void Backspace()
	{
	}

	[Token(Token = "0x60004B6")]
	[Address(RVA = "0xD06BA0", Offset = "0xD06BA0", VA = "0xD06BA0")]
	public void Shift()
	{
	}

	[Token(Token = "0x60004B7")]
	[Address(RVA = "0xD067E0", Offset = "0xD067E0", VA = "0xD067E0")]
	public void CheckForInput()
	{
	}

	[Token(Token = "0x60004B8")]
	[Address(RVA = "0xD06DA8", Offset = "0xD06DA8", VA = "0xD06DA8")]
	private void ToggleButtons(bool toggle)
	{
	}

	[Token(Token = "0x60004B9")]
	[Address(RVA = "0xD06E54", Offset = "0xD06E54", VA = "0xD06E54")]
	public UI_SongEditor_Keyboard()
	{
	}
}
[Token(Token = "0x20000CC")]
public class UI_Uriel_Progress : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000391")]
	public struct NewsStory
	{
		[Token(Token = "0x400189E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float threshold;

		[Token(Token = "0x400189F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[AttributeAttribute(Name = "MultilineAttribute", RVA = "0x5D5D2C", Offset = "0x5D5D2C")]
		public string title;

		[Token(Token = "0x40018A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "MultilineAttribute", RVA = "0x5D5D40", Offset = "0x5D5D40")]
		public string subtitle;

		[Token(Token = "0x40018A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VideoClip clip;
	}

	[Serializable]
	[Token(Token = "0x2000392")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDCDC", Offset = "0x5CDCDC")]
	private sealed class <>c
	{
		[Token(Token = "0x40018A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly <>c <>9;

		[Token(Token = "0x40018A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Func<NewsStory, float> <>9__33_0;

		[Token(Token = "0x6001986")]
		[Address(RVA = "0x138C9E0", Offset = "0x138C9E0", VA = "0x138C9E0")]
		public <>c()
		{
		}

		[Token(Token = "0x6001987")]
		[Address(RVA = "0x138C9E8", Offset = "0x138C9E8", VA = "0x138C9E8")]
		internal float <Init>b__33_0(NewsStory x)
		{
			return default(float);
		}
	}

	[Token(Token = "0x40005FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool _update;

	[Token(Token = "0x40005FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float value;

	[Token(Token = "0x40005FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float targetValue;

	[Token(Token = "0x4000600")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float speed;

	[Token(Token = "0x4000601")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float speedIncrease;

	[Token(Token = "0x4000602")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float speedValue;

	[Token(Token = "0x4000603")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Image progressBar;

	[Token(Token = "0x4000604")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public TextMeshProUGUI progressText;

	[Token(Token = "0x4000605")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public List<Image> baseImages;

	[Token(Token = "0x4000606")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public List<Image> highlightImages;

	[Token(Token = "0x4000607")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Image icon_info;

	[Token(Token = "0x4000608")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Image icon_warn;

	[Token(Token = "0x4000609")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Image icon_skull;

	[Token(Token = "0x400060A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Image bar_background;

	[Token(Token = "0x400060B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Color colour_info_base;

	[Token(Token = "0x400060C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Color colour_info_highlight;

	[Token(Token = "0x400060D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Color colour_warn_base;

	[Token(Token = "0x400060E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Color colour_warn_highlight;

	[Token(Token = "0x400060F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public Color colour_skull_base;

	[Token(Token = "0x4000610")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public Color colour_skull_highlight;

	[Token(Token = "0x4000611")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public TextMeshProUGUI title;

	[Token(Token = "0x4000612")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public TextMeshProUGUI subtitle;

	[Token(Token = "0x4000613")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public string info_title;

	[Token(Token = "0x4000614")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public string info_subtitle;

	[Token(Token = "0x4000615")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public string warn_title;

	[Token(Token = "0x4000616")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public string warn_subtitle;

	[Token(Token = "0x4000617")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public string skull_title;

	[Token(Token = "0x4000618")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public string skull_subtitle;

	[Token(Token = "0x4000619")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public TextMeshProUGUI news_title;

	[Token(Token = "0x400061A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public TextMeshProUGUI news_subtitle;

	[Token(Token = "0x400061B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public VideoPlayer videoPlayer;

	[Token(Token = "0x400061C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	public List<NewsStory> newsStories;

	[Token(Token = "0x60004BA")]
	[Address(RVA = "0xD0A1D8", Offset = "0xD0A1D8", VA = "0xD0A1D8")]
	public void Init(float startValue, float endValue)
	{
	}

	[Token(Token = "0x60004BB")]
	[Address(RVA = "0xD0A6E8", Offset = "0xD0A6E8", VA = "0xD0A6E8")]
	private void Update()
	{
	}

	[Token(Token = "0x60004BC")]
	[Address(RVA = "0xD0A7E8", Offset = "0xD0A7E8", VA = "0xD0A7E8")]
	private void SetColours(Color _base, Color _highlight)
	{
	}

	[Token(Token = "0x60004BD")]
	[Address(RVA = "0xD0A490", Offset = "0xD0A490", VA = "0xD0A490")]
	public void SetInfo()
	{
	}

	[Token(Token = "0x60004BE")]
	[Address(RVA = "0xD0A558", Offset = "0xD0A558", VA = "0xD0A558")]
	public void SetWarn()
	{
	}

	[Token(Token = "0x60004BF")]
	[Address(RVA = "0xD0A620", Offset = "0xD0A620", VA = "0xD0A620")]
	public void SetSkull()
	{
	}

	[Token(Token = "0x60004C0")]
	[Address(RVA = "0xD0AAB0", Offset = "0xD0AAB0", VA = "0xD0AAB0")]
	public void StartUpdate()
	{
	}

	[Token(Token = "0x60004C1")]
	[Address(RVA = "0xD0AABC", Offset = "0xD0AABC", VA = "0xD0AABC")]
	public UI_Uriel_Progress()
	{
	}
}
[Token(Token = "0x20000CD")]
public class UrielAnimationEvent : MonoBehaviour
{
	[Token(Token = "0x400061D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UI_Uriel_Progress progressbar;

	[Token(Token = "0x400061E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioClip audio1;

	[Token(Token = "0x400061F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioClip audio2;

	[Token(Token = "0x4000620")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AudioClip audio3;

	[Token(Token = "0x60004C2")]
	[Address(RVA = "0xD0AE1C", Offset = "0xD0AE1C", VA = "0xD0AE1C")]
	public void ProgressBarStart()
	{
	}

	[Token(Token = "0x60004C3")]
	[Address(RVA = "0xD0AE3C", Offset = "0xD0AE3C", VA = "0xD0AE3C")]
	public void StartAnimation()
	{
	}

	[Token(Token = "0x60004C4")]
	[Address(RVA = "0xD0AEB0", Offset = "0xD0AEB0", VA = "0xD0AEB0")]
	public void PlayAudio1()
	{
	}

	[Token(Token = "0x60004C5")]
	[Address(RVA = "0xD0AF28", Offset = "0xD0AF28", VA = "0xD0AF28")]
	public void PlayAudio2()
	{
	}

	[Token(Token = "0x60004C6")]
	[Address(RVA = "0xD0AFA0", Offset = "0xD0AFA0", VA = "0xD0AFA0")]
	public void PlayAudio3()
	{
	}

	[Token(Token = "0x60004C7")]
	[Address(RVA = "0xD0B018", Offset = "0xD0B018", VA = "0xD0B018")]
	public UrielAnimationEvent()
	{
	}
}
[Token(Token = "0x20000CE")]
public class Uriel_Countdown : MonoBehaviour
{
	[Token(Token = "0x4000621")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TextMeshProUGUI timerText;

	[Token(Token = "0x4000622")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float countdownTime;

	[Token(Token = "0x4000623")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float timer;

	[Token(Token = "0x60004C8")]
	[Address(RVA = "0xD0B020", Offset = "0xD0B020", VA = "0xD0B020")]
	private void Start()
	{
	}

	[Token(Token = "0x60004C9")]
	[Address(RVA = "0xD0B02C", Offset = "0xD0B02C", VA = "0xD0B02C")]
	private void Update()
	{
	}

	[Token(Token = "0x60004CA")]
	[Address(RVA = "0xD0B1C0", Offset = "0xD0B1C0", VA = "0xD0B1C0")]
	public Uriel_Countdown()
	{
	}
}
[Token(Token = "0x20000CF")]
public class DynamicBoneDemo1 : MonoBehaviour
{
	[Token(Token = "0x4000624")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject m_Player;

	[Token(Token = "0x60004CB")]
	[Address(RVA = "0x9F77E8", Offset = "0x9F77E8", VA = "0x9F77E8")]
	private void Update()
	{
	}

	[Token(Token = "0x60004CC")]
	[Address(RVA = "0x9F7930", Offset = "0x9F7930", VA = "0x9F7930")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x60004CD")]
	[Address(RVA = "0x9F7C60", Offset = "0x9F7C60", VA = "0x9F7C60")]
	public DynamicBoneDemo1()
	{
	}
}
[Token(Token = "0x20000D0")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5C9B44", Offset = "0x5C9B44")]
public class DynamicBone : MonoBehaviour
{
	[Token(Token = "0x2000393")]
	public enum UpdateMode
	{
		[Token(Token = "0x40018A5")]
		Normal,
		[Token(Token = "0x40018A6")]
		AnimatePhysics,
		[Token(Token = "0x40018A7")]
		UnscaledTime
	}

	[Token(Token = "0x2000394")]
	public enum FreezeAxis
	{
		[Token(Token = "0x40018A9")]
		None,
		[Token(Token = "0x40018AA")]
		X,
		[Token(Token = "0x40018AB")]
		Y,
		[Token(Token = "0x40018AC")]
		Z
	}

	[Token(Token = "0x2000395")]
	private class Particle
	{
		[Token(Token = "0x40018AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform m_Transform;

		[Token(Token = "0x40018AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int m_ParentIndex;

		[Token(Token = "0x40018AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float m_Damping;

		[Token(Token = "0x40018B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float m_Elasticity;

		[Token(Token = "0x40018B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float m_Stiffness;

		[Token(Token = "0x40018B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float m_Inert;

		[Token(Token = "0x40018B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float m_Radius;

		[Token(Token = "0x40018B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float m_BoneLength;

		[Token(Token = "0x40018B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector3 m_Position;

		[Token(Token = "0x40018B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector3 m_PrevPosition;

		[Token(Token = "0x40018B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public Vector3 m_EndOffset;

		[Token(Token = "0x40018B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Vector3 m_InitLocalPosition;

		[Token(Token = "0x40018B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public Quaternion m_InitLocalRotation;

		[Token(Token = "0x6001988")]
		[Address(RVA = "0x7E6F4C", Offset = "0x7E6F4C", VA = "0x7E6F4C")]
		public Particle()
		{
		}
	}

	[Token(Token = "0x4000625")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform m_Root;

	[Token(Token = "0x4000626")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float m_UpdateRate;

	[Token(Token = "0x4000627")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public UpdateMode m_UpdateMode;

	[Token(Token = "0x4000628")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5CED7C", Offset = "0x5CED7C")]
	public float m_Damping;

	[Token(Token = "0x4000629")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AnimationCurve m_DampingDistrib;

	[Token(Token = "0x400062A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5CED94", Offset = "0x5CED94")]
	public float m_Elasticity;

	[Token(Token = "0x400062B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AnimationCurve m_ElasticityDistrib;

	[Token(Token = "0x400062C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5CEDAC", Offset = "0x5CEDAC")]
	public float m_Stiffness;

	[Token(Token = "0x400062D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public AnimationCurve m_StiffnessDistrib;

	[Token(Token = "0x400062E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5CEDC4", Offset = "0x5CEDC4")]
	public float m_Inert;

	[Token(Token = "0x400062F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public AnimationCurve m_InertDistrib;

	[Token(Token = "0x4000630")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float m_Radius;

	[Token(Token = "0x4000631")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public AnimationCurve m_RadiusDistrib;

	[Token(Token = "0x4000632")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public float m_EndLength;

	[Token(Token = "0x4000633")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public Vector3 m_EndOffset;

	[Token(Token = "0x4000634")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Vector3 m_Gravity;

	[Token(Token = "0x4000635")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	public Vector3 m_Force;

	[Token(Token = "0x4000636")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public List<DynamicBoneColliderBase> m_Colliders;

	[Token(Token = "0x4000637")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public List<Transform> m_Exclusions;

	[Token(Token = "0x4000638")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public FreezeAxis m_FreezeAxis;

	[Token(Token = "0x4000639")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	public bool m_DistantDisable;

	[Token(Token = "0x400063A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public Transform m_ReferenceObject;

	[Token(Token = "0x400063B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public float m_DistanceToObject;

	[Token(Token = "0x400063C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	private Vector3 m_LocalGravity;

	[Token(Token = "0x400063D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private Vector3 m_ObjectMove;

	[Token(Token = "0x400063E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	private Vector3 m_ObjectPrevPosition;

	[Token(Token = "0x400063F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private float m_BoneTotalLength;

	[Token(Token = "0x4000640")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	private float m_ObjectScale;

	[Token(Token = "0x4000641")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private float m_Time;

	[Token(Token = "0x4000642")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	private float m_Weight;

	[Token(Token = "0x4000643")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private bool m_DistantDisabled;

	[Token(Token = "0x4000644")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private List<Particle> m_Particles;

	[Token(Token = "0x60004CE")]
	[Address(RVA = "0xCCDD54", Offset = "0xCCDD54", VA = "0xCCDD54")]
	private void Start()
	{
	}

	[Token(Token = "0x60004CF")]
	[Address(RVA = "0xCCDE8C", Offset = "0xCCDE8C", VA = "0xCCDE8C")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60004D0")]
	[Address(RVA = "0xCCDEE0", Offset = "0xCCDEE0", VA = "0xCCDEE0")]
	private void Update()
	{
	}

	[Token(Token = "0x60004D1")]
	[Address(RVA = "0xCCDF10", Offset = "0xCCDF10", VA = "0xCCDF10")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60004D2")]
	[Address(RVA = "0xCCDEBC", Offset = "0xCCDEBC", VA = "0xCCDEBC")]
	private void PreUpdate()
	{
	}

	[Token(Token = "0x60004D3")]
	[Address(RVA = "0xCCDF70", Offset = "0xCCDF70", VA = "0xCCDF70")]
	private void CheckDistance()
	{
	}

	[Token(Token = "0x60004D4")]
	[Address(RVA = "0xCCE540", Offset = "0xCCE540", VA = "0xCCE540")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60004D5")]
	[Address(RVA = "0xCCE544", Offset = "0xCCE544", VA = "0xCCE544")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60004D6")]
	[Address(RVA = "0xCCE548", Offset = "0xCCE548", VA = "0xCCE548")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x60004D7")]
	[Address(RVA = "0xCCE610", Offset = "0xCCE610", VA = "0xCCE610")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x60004D8")]
	[Address(RVA = "0xCCE7C8", Offset = "0xCCE7C8", VA = "0xCCE7C8")]
	public void SetWeight(float w)
	{
	}

	[Token(Token = "0x60004D9")]
	[Address(RVA = "0xCCE824", Offset = "0xCCE824", VA = "0xCCE824")]
	public float GetWeight()
	{
		return default(float);
	}

	[Token(Token = "0x60004DA")]
	[Address(RVA = "0xCCE128", Offset = "0xCCE128", VA = "0xCCE128")]
	private void UpdateDynamicBones(float t)
	{
	}

	[Token(Token = "0x60004DB")]
	[Address(RVA = "0xCCDD58", Offset = "0xCCDD58", VA = "0xCCDD58")]
	private void SetupParticles()
	{
	}

	[Token(Token = "0x60004DC")]
	[Address(RVA = "0xCCF5F4", Offset = "0xCCF5F4", VA = "0xCCF5F4")]
	private void AppendParticles(Transform b, int parentIndex, float boneLength)
	{
	}

	[Token(Token = "0x60004DD")]
	[Address(RVA = "0xCCFB50", Offset = "0xCCFB50", VA = "0xCCFB50")]
	public void UpdateParameters()
	{
	}

	[Token(Token = "0x60004DE")]
	[Address(RVA = "0xCCE2BC", Offset = "0xCCE2BC", VA = "0xCCE2BC")]
	private void InitTransforms()
	{
	}

	[Token(Token = "0x60004DF")]
	[Address(RVA = "0xCCE3D0", Offset = "0xCCE3D0", VA = "0xCCE3D0")]
	private void ResetParticlesPosition()
	{
	}

	[Token(Token = "0x60004E0")]
	[Address(RVA = "0xCCE82C", Offset = "0xCCE82C", VA = "0xCCE82C")]
	private void UpdateParticles1()
	{
	}

	[Token(Token = "0x60004E1")]
	[Address(RVA = "0xCCEA0C", Offset = "0xCCEA0C", VA = "0xCCEA0C")]
	private void UpdateParticles2()
	{
	}

	[Token(Token = "0x60004E2")]
	[Address(RVA = "0xCCEF9C", Offset = "0xCCEF9C", VA = "0xCCEF9C")]
	private void SkipUpdateParticles()
	{
	}

	[Token(Token = "0x60004E3")]
	[Address(RVA = "0xCCFE20", Offset = "0xCCFE20", VA = "0xCCFE20")]
	private static Vector3 MirrorVector(Vector3 v, Vector3 axis)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60004E4")]
	[Address(RVA = "0xCCF3B0", Offset = "0xCCF3B0", VA = "0xCCF3B0")]
	private void ApplyParticlesToTransforms()
	{
	}

	[Token(Token = "0x60004E5")]
	[Address(RVA = "0xCCFE54", Offset = "0xCCFE54", VA = "0xCCFE54")]
	public DynamicBone()
	{
	}
}
[Token(Token = "0x20000D1")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5C9B7C", Offset = "0x5C9B7C")]
public class DynamicBoneCollider : DynamicBoneColliderBase
{
	[Token(Token = "0x4000645")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float m_Radius;

	[Token(Token = "0x4000646")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float m_Height;

	[Token(Token = "0x60004E6")]
	[Address(RVA = "0xCCFF68", Offset = "0xCCFF68", VA = "0xCCFF68")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x60004E7")]
	[Address(RVA = "0xCCFFB0", Offset = "0xCCFFB0", VA = "0xCCFFB0", Slot = "4")]
	public override void Collide(ref Vector3 particlePosition, float particleRadius)
	{
	}

	[Token(Token = "0x60004E8")]
	[Address(RVA = "0xCD01BC", Offset = "0xCD01BC", VA = "0xCD01BC")]
	private static void OutsideSphere(ref Vector3 particlePosition, float particleRadius, Vector3 sphereCenter, float sphereRadius)
	{
	}

	[Token(Token = "0x60004E9")]
	[Address(RVA = "0xCD027C", Offset = "0xCD027C", VA = "0xCD027C")]
	private static void InsideSphere(ref Vector3 particlePosition, float particleRadius, Vector3 sphereCenter, float sphereRadius)
	{
	}

	[Token(Token = "0x60004EA")]
	[Address(RVA = "0xCD032C", Offset = "0xCD032C", VA = "0xCD032C")]
	private static void OutsideCapsule(ref Vector3 particlePosition, float particleRadius, Vector3 capsuleP0, Vector3 capsuleP1, float capsuleRadius)
	{
	}

	[Token(Token = "0x60004EB")]
	[Address(RVA = "0xCD0544", Offset = "0xCD0544", VA = "0xCD0544")]
	private static void InsideCapsule(ref Vector3 particlePosition, float particleRadius, Vector3 capsuleP0, Vector3 capsuleP1, float capsuleRadius)
	{
	}

	[Token(Token = "0x60004EC")]
	[Address(RVA = "0xCD0750", Offset = "0xCD0750", VA = "0xCD0750")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x60004ED")]
	[Address(RVA = "0xCD08EC", Offset = "0xCD08EC", VA = "0xCD08EC")]
	public DynamicBoneCollider()
	{
	}
}
[Token(Token = "0x20000D2")]
public class DynamicBoneColliderBase : MonoBehaviour
{
	[Token(Token = "0x2000396")]
	public enum Direction
	{
		[Token(Token = "0x40018BB")]
		X,
		[Token(Token = "0x40018BC")]
		Y,
		[Token(Token = "0x40018BD")]
		Z
	}

	[Token(Token = "0x2000397")]
	public enum Bound
	{
		[Token(Token = "0x40018BF")]
		Outside,
		[Token(Token = "0x40018C0")]
		Inside
	}

	[Token(Token = "0x4000647")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Direction m_Direction;

	[Token(Token = "0x4000648")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Vector3 m_Center;

	[Token(Token = "0x4000649")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Bound m_Bound;

	[Token(Token = "0x60004EE")]
	[Address(RVA = "0x9F77A8", Offset = "0x9F77A8", VA = "0x9F77A8", Slot = "4")]
	public virtual void Collide(ref Vector3 particlePosition, float particleRadius)
	{
	}

	[Token(Token = "0x60004EF")]
	[Address(RVA = "0x9F77AC", Offset = "0x9F77AC", VA = "0x9F77AC")]
	public DynamicBoneColliderBase()
	{
	}
}
[Token(Token = "0x20000D3")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5C9BB4", Offset = "0x5C9BB4")]
public class DynamicBonePlaneCollider : DynamicBoneColliderBase
{
	[Token(Token = "0x60004F0")]
	[Address(RVA = "0x9F7C68", Offset = "0x9F7C68", VA = "0x9F7C68")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x60004F1")]
	[Address(RVA = "0x9F7C6C", Offset = "0x9F7C6C", VA = "0x9F7C6C", Slot = "4")]
	public override void Collide(ref Vector3 particlePosition, float particleRadius)
	{
	}

	[Token(Token = "0x60004F2")]
	[Address(RVA = "0x9F7DC4", Offset = "0x9F7DC4", VA = "0x9F7DC4")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x60004F3")]
	[Address(RVA = "0x9F7EE4", Offset = "0x9F7EE4", VA = "0x9F7EE4")]
	public DynamicBonePlaneCollider()
	{
	}
}
[Token(Token = "0x20000D4")]
public class DecalDestroyer : MonoBehaviour
{
	[Token(Token = "0x2000398")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDCEC", Offset = "0x5CDCEC")]
	private sealed class <Start>d__1 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40018C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40018C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40018C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DecalDestroyer <>4__this;

		[Token(Token = "0x170002A7")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600198C")]
			[Address(RVA = "0x7E6C58", Offset = "0x7E6C58", VA = "0x7E6C58", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002A8")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600198E")]
			[Address(RVA = "0x7E6CA0", Offset = "0x7E6CA0", VA = "0x7E6CA0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001989")]
		[Address(RVA = "0x7E6B28", Offset = "0x7E6B28", VA = "0x7E6B28")]
		[DebuggerHidden]
		public <Start>d__1(int <>1__state)
		{
		}

		[Token(Token = "0x600198A")]
		[Address(RVA = "0x7E6B54", Offset = "0x7E6B54", VA = "0x7E6B54", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600198B")]
		[Address(RVA = "0x7E6B58", Offset = "0x7E6B58", VA = "0x7E6B58", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600198D")]
		[Address(RVA = "0x7E6C60", Offset = "0x7E6C60", VA = "0x7E6C60", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400064A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float lifeTime;

	[Token(Token = "0x60004F4")]
	[Address(RVA = "0xCC6A04", Offset = "0xCC6A04", VA = "0xCC6A04")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D7DD8", Offset = "0x5D7DD8")]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x60004F5")]
	[Address(RVA = "0xCC6A7C", Offset = "0xCC6A7C", VA = "0xCC6A7C")]
	public DecalDestroyer()
	{
	}
}
[Token(Token = "0x20000D5")]
public class ExtinguishableFire : MonoBehaviour
{
	[Token(Token = "0x2000399")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDCFC", Offset = "0x5CDCFC")]
	private sealed class <Extinguishing>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40018C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40018C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40018C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ExtinguishableFire <>4__this;

		[Token(Token = "0x40018C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <elapsedTime>5__2;

		[Token(Token = "0x170002A9")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001992")]
			[Address(RVA = "0x7E7CFC", Offset = "0x7E7CFC", VA = "0x7E7CFC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002AA")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001994")]
			[Address(RVA = "0x7E7D44", Offset = "0x7E7D44", VA = "0x7E7D44", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600198F")]
		[Address(RVA = "0x7E7A88", Offset = "0x7E7A88", VA = "0x7E7A88")]
		[DebuggerHidden]
		public <Extinguishing>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x6001990")]
		[Address(RVA = "0x7E7AB4", Offset = "0x7E7AB4", VA = "0x7E7AB4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001991")]
		[Address(RVA = "0x7E7AB8", Offset = "0x7E7AB8", VA = "0x7E7AB8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001993")]
		[Address(RVA = "0x7E7D04", Offset = "0x7E7D04", VA = "0x7E7D04", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200039A")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDD0C", Offset = "0x5CDD0C")]
	private sealed class <StartingFire>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40018C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40018C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40018CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ExtinguishableFire <>4__this;

		[Token(Token = "0x40018CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <elapsedTime>5__2;

		[Token(Token = "0x170002AB")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001998")]
			[Address(RVA = "0x7E7EE8", Offset = "0x7E7EE8", VA = "0x7E7EE8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002AC")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600199A")]
			[Address(RVA = "0x7E7F30", Offset = "0x7E7F30", VA = "0x7E7F30", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001995")]
		[Address(RVA = "0x7E7D4C", Offset = "0x7E7D4C", VA = "0x7E7D4C")]
		[DebuggerHidden]
		public <StartingFire>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x6001996")]
		[Address(RVA = "0x7E7D78", Offset = "0x7E7D78", VA = "0x7E7D78", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001997")]
		[Address(RVA = "0x7E7D7C", Offset = "0x7E7D7C", VA = "0x7E7D7C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001999")]
		[Address(RVA = "0x7E7EF0", Offset = "0x7E7EF0", VA = "0x7E7EF0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400064B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ParticleSystem fireParticleSystem;

	[Token(Token = "0x400064C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ParticleSystem smokeParticleSystem;

	[Token(Token = "0x400064D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected bool m_isExtinguished;

	[Token(Token = "0x400064E")]
	private const float m_FireStartingTime = 2f;

	[Token(Token = "0x60004F6")]
	[Address(RVA = "0xA05820", Offset = "0xA05820", VA = "0xA05820")]
	private void Start()
	{
	}

	[Token(Token = "0x60004F7")]
	[Address(RVA = "0xA058F4", Offset = "0xA058F4", VA = "0xA058F4")]
	public void Extinguish()
	{
	}

	[Token(Token = "0x60004F8")]
	[Address(RVA = "0xA05934", Offset = "0xA05934", VA = "0xA05934")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D7E38", Offset = "0x5D7E38")]
	private IEnumerator Extinguishing()
	{
		return null;
	}

	[Token(Token = "0x60004F9")]
	[Address(RVA = "0xA0587C", Offset = "0xA0587C", VA = "0xA0587C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D7E98", Offset = "0x5D7E98")]
	private IEnumerator StartingFire()
	{
		return null;
	}

	[Token(Token = "0x60004FA")]
	[Address(RVA = "0xA059AC", Offset = "0xA059AC", VA = "0xA059AC")]
	public ExtinguishableFire()
	{
	}
}
[Token(Token = "0x20000D6")]
public class GunAim : MonoBehaviour
{
	[Token(Token = "0x400064F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int borderLeft;

	[Token(Token = "0x4000650")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int borderRight;

	[Token(Token = "0x4000651")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int borderTop;

	[Token(Token = "0x4000652")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int borderBottom;

	[Token(Token = "0x4000653")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Camera parentCamera;

	[Token(Token = "0x4000654")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool isOutOfBounds;

	[Token(Token = "0x60004FB")]
	[Address(RVA = "0x13FC89C", Offset = "0x13FC89C", VA = "0x13FC89C")]
	private void Start()
	{
	}

	[Token(Token = "0x60004FC")]
	[Address(RVA = "0x13FC8F8", Offset = "0x13FC8F8", VA = "0x13FC8F8")]
	private void Update()
	{
	}

	[Token(Token = "0x60004FD")]
	[Address(RVA = "0x13FC9E8", Offset = "0x13FC9E8", VA = "0x13FC9E8")]
	public bool GetIsOutOfBounds()
	{
		return default(bool);
	}

	[Token(Token = "0x60004FE")]
	[Address(RVA = "0x13FC9F0", Offset = "0x13FC9F0", VA = "0x13FC9F0")]
	public GunAim()
	{
	}
}
[Token(Token = "0x20000D7")]
public class GunShoot : MonoBehaviour
{
	[Token(Token = "0x4000655")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float fireRate;

	[Token(Token = "0x4000656")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float weaponRange;

	[Token(Token = "0x4000657")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform gunEnd;

	[Token(Token = "0x4000658")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ParticleSystem muzzleFlash;

	[Token(Token = "0x4000659")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ParticleSystem cartridgeEjection;

	[Token(Token = "0x400065A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject metalHitEffect;

	[Token(Token = "0x400065B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject sandHitEffect;

	[Token(Token = "0x400065C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject stoneHitEffect;

	[Token(Token = "0x400065D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject waterLeakEffect;

	[Token(Token = "0x400065E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject waterLeakExtinguishEffect;

	[Token(Token = "0x400065F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public GameObject[] fleshHitEffects;

	[Token(Token = "0x4000660")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public GameObject woodHitEffect;

	[Token(Token = "0x4000661")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float nextFire;

	[Token(Token = "0x4000662")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Animator anim;

	[Token(Token = "0x4000663")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private GunAim gunAim;

	[Token(Token = "0x60004FF")]
	[Address(RVA = "0x13FC9F8", Offset = "0x13FC9F8", VA = "0x13FC9F8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000500")]
	[Address(RVA = "0x13FCA84", Offset = "0x13FCA84", VA = "0x13FCA84")]
	private void Update()
	{
	}

	[Token(Token = "0x6000501")]
	[Address(RVA = "0x13FCBF8", Offset = "0x13FCBF8", VA = "0x13FCBF8")]
	private void HandleHit(RaycastHit hit)
	{
	}

	[Token(Token = "0x6000502")]
	[Address(RVA = "0x13FD054", Offset = "0x13FD054", VA = "0x13FD054")]
	private void SpawnDecal(RaycastHit hit, GameObject prefab)
	{
	}

	[Token(Token = "0x6000503")]
	[Address(RVA = "0x13FD190", Offset = "0x13FD190", VA = "0x13FD190")]
	public GunShoot()
	{
	}
}
[Token(Token = "0x20000D8")]
public class ParticleCollision : MonoBehaviour
{
	[Token(Token = "0x4000664")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private List<ParticleCollisionEvent> m_CollisionEvents;

	[Token(Token = "0x4000665")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ParticleSystem m_ParticleSystem;

	[Token(Token = "0x6000504")]
	[Address(RVA = "0x131BABC", Offset = "0x131BABC", VA = "0x131BABC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000505")]
	[Address(RVA = "0x131BB18", Offset = "0x131BB18", VA = "0x131BB18")]
	private void OnParticleCollision(GameObject other)
	{
	}

	[Token(Token = "0x6000506")]
	[Address(RVA = "0x131BC74", Offset = "0x131BC74", VA = "0x131BC74")]
	public ParticleCollision()
	{
	}
}
[Serializable]
[Token(Token = "0x20000D9")]
public class ParticleExamples
{
	[Token(Token = "0x4000666")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string title;

	[Token(Token = "0x4000667")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "TextAreaAttribute", RVA = "0x5CEDDC", Offset = "0x5CEDDC")]
	public string description;

	[Token(Token = "0x4000668")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool isWeaponEffect;

	[Token(Token = "0x4000669")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject particleSystemGO;

	[Token(Token = "0x400066A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector3 particlePosition;

	[Token(Token = "0x400066B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public Vector3 particleRotation;

	[Token(Token = "0x6000507")]
	[Address(RVA = "0x131D70C", Offset = "0x131D70C", VA = "0x131D70C")]
	public ParticleExamples()
	{
	}
}
[Token(Token = "0x20000DA")]
public class ParticleMenu : MonoBehaviour
{
	[Token(Token = "0x400066C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ParticleExamples[] particleSystems;

	[Token(Token = "0x400066D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject gunGameObject;

	[Token(Token = "0x400066E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int currentIndex;

	[Token(Token = "0x400066F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private GameObject currentGO;

	[Token(Token = "0x4000670")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform spawnLocation;

	[Token(Token = "0x4000671")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Text title;

	[Token(Token = "0x4000672")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Text description;

	[Token(Token = "0x4000673")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Text navigationDetails;

	[Token(Token = "0x6000508")]
	[Address(RVA = "0x11FABC8", Offset = "0x11FABC8", VA = "0x11FABC8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000509")]
	[Address(RVA = "0x11FABF0", Offset = "0x11FABF0", VA = "0x11FABF0")]
	public void Navigate(int i)
	{
	}

	[Token(Token = "0x600050A")]
	[Address(RVA = "0x11FAF38", Offset = "0x11FAF38", VA = "0x11FAF38")]
	public ParticleMenu()
	{
	}
}
[Token(Token = "0x20000DB")]
public class ButtonScript : MonoBehaviour
{
	[Token(Token = "0x4000674")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject Button;

	[Token(Token = "0x4000675")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Text MyButtonText;

	[Token(Token = "0x4000676")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private string projectileParticleName;

	[Token(Token = "0x4000677")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private FireProjectile effectScript;

	[Token(Token = "0x4000678")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private ProjectileScript projectileScript;

	[Token(Token = "0x4000679")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float buttonsX;

	[Token(Token = "0x400067A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float buttonsY;

	[Token(Token = "0x400067B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float buttonsSizeX;

	[Token(Token = "0x400067C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float buttonsSizeY;

	[Token(Token = "0x400067D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float buttonsDistance;

	[Token(Token = "0x600050B")]
	[Address(RVA = "0x10A1098", Offset = "0x10A1098", VA = "0x10A1098")]
	private void Start()
	{
	}

	[Token(Token = "0x600050C")]
	[Address(RVA = "0x10A1264", Offset = "0x10A1264", VA = "0x10A1264")]
	private void Update()
	{
	}

	[Token(Token = "0x600050D")]
	[Address(RVA = "0x10A11A4", Offset = "0x10A11A4", VA = "0x10A11A4")]
	public void getProjectileNames()
	{
	}

	[Token(Token = "0x600050E")]
	[Address(RVA = "0x10A1290", Offset = "0x10A1290", VA = "0x10A1290")]
	public bool overButton()
	{
		return default(bool);
	}

	[Token(Token = "0x600050F")]
	[Address(RVA = "0x10A1374", Offset = "0x10A1374", VA = "0x10A1374")]
	public void LoadStage1()
	{
	}

	[Token(Token = "0x6000510")]
	[Address(RVA = "0x10A13E8", Offset = "0x10A13E8", VA = "0x10A13E8")]
	public void LoadStage2()
	{
	}

	[Token(Token = "0x6000511")]
	[Address(RVA = "0x10A145C", Offset = "0x10A145C", VA = "0x10A145C")]
	public void LoadStage3()
	{
	}

	[Token(Token = "0x6000512")]
	[Address(RVA = "0x10A14D0", Offset = "0x10A14D0", VA = "0x10A14D0")]
	public void LoadStage4()
	{
	}

	[Token(Token = "0x6000513")]
	[Address(RVA = "0x10A1544", Offset = "0x10A1544", VA = "0x10A1544")]
	public void LoadStage5()
	{
	}

	[Token(Token = "0x6000514")]
	[Address(RVA = "0x10A15B8", Offset = "0x10A15B8", VA = "0x10A15B8")]
	public void LoadStage6()
	{
	}

	[Token(Token = "0x6000515")]
	[Address(RVA = "0x10A162C", Offset = "0x10A162C", VA = "0x10A162C")]
	public void LoadStage7()
	{
	}

	[Token(Token = "0x6000516")]
	[Address(RVA = "0x10A16A0", Offset = "0x10A16A0", VA = "0x10A16A0")]
	public ButtonScript()
	{
	}
}
[Token(Token = "0x20000DC")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5C9BEC", Offset = "0x5C9BEC")]
public class DragMouseOrbit : MonoBehaviour
{
	[Token(Token = "0x400067E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform target;

	[Token(Token = "0x400067F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float distance;

	[Token(Token = "0x4000680")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float xSpeed;

	[Token(Token = "0x4000681")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float ySpeed;

	[Token(Token = "0x4000682")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float yMinLimit;

	[Token(Token = "0x4000683")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float yMaxLimit;

	[Token(Token = "0x4000684")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float distanceMin;

	[Token(Token = "0x4000685")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float distanceMax;

	[Token(Token = "0x4000686")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float smoothTime;

	[Token(Token = "0x4000687")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float rotationYAxis;

	[Token(Token = "0x4000688")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float rotationXAxis;

	[Token(Token = "0x4000689")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float velocityX;

	[Token(Token = "0x400068A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float velocityY;

	[Token(Token = "0x6000517")]
	[Address(RVA = "0xCCD788", Offset = "0xCCD788", VA = "0xCCD788")]
	private void Start()
	{
	}

	[Token(Token = "0x6000518")]
	[Address(RVA = "0xCCD86C", Offset = "0xCCD86C", VA = "0xCCD86C")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000519")]
	[Address(RVA = "0xCCDBC0", Offset = "0xCCDBC0", VA = "0xCCDBC0")]
	public static float ClampAngle(float angle, float min, float max)
	{
		return default(float);
	}

	[Token(Token = "0x600051A")]
	[Address(RVA = "0xCCDBF0", Offset = "0xCCDBF0", VA = "0xCCDBF0")]
	public DragMouseOrbit()
	{
	}
}
[Token(Token = "0x20000DD")]
public class FireProjectile : MonoBehaviour
{
	[Token(Token = "0x400068B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private RaycastHit hit;

	[Token(Token = "0x400068C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject[] projectiles;

	[Token(Token = "0x400068D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Transform spawnPosition;

	[Token(Token = "0x400068E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[HideInInspector]
	public int currentProjectile;

	[Token(Token = "0x400068F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float speed;

	[Token(Token = "0x4000690")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private ButtonScript selectedProjectileButton;

	[Token(Token = "0x600051B")]
	[Address(RVA = "0xBFAC48", Offset = "0xBFAC48", VA = "0xBFAC48")]
	private void Start()
	{
	}

	[Token(Token = "0x600051C")]
	[Address(RVA = "0xBFACC8", Offset = "0xBFACC8", VA = "0xBFACC8")]
	private void Update()
	{
	}

	[Token(Token = "0x600051D")]
	[Address(RVA = "0xBFB11C", Offset = "0xBFB11C", VA = "0xBFB11C")]
	public void nextEffect()
	{
	}

	[Token(Token = "0x600051E")]
	[Address(RVA = "0xBFB14C", Offset = "0xBFB14C", VA = "0xBFB14C")]
	public void previousEffect()
	{
	}

	[Token(Token = "0x600051F")]
	[Address(RVA = "0xBFB17C", Offset = "0xBFB17C", VA = "0xBFB17C")]
	public void AdjustSpeed(float newSpeed)
	{
	}

	[Token(Token = "0x6000520")]
	[Address(RVA = "0xBFB184", Offset = "0xBFB184", VA = "0xBFB184")]
	public FireProjectile()
	{
	}
}
[Token(Token = "0x20000DE")]
public class LoadSceneOnClick : MonoBehaviour
{
	[Token(Token = "0x6000521")]
	[Address(RVA = "0xA67758", Offset = "0xA67758", VA = "0xA67758")]
	public void CollectionFlamethrower()
	{
	}

	[Token(Token = "0x6000522")]
	[Address(RVA = "0xA677CC", Offset = "0xA677CC", VA = "0xA677CC")]
	public void CollectionFull()
	{
	}

	[Token(Token = "0x6000523")]
	[Address(RVA = "0xA67840", Offset = "0xA67840", VA = "0xA67840")]
	public void CollectionMissiles()
	{
	}

	[Token(Token = "0x6000524")]
	[Address(RVA = "0xA678B4", Offset = "0xA678B4", VA = "0xA678B4")]
	public void CollectionSmall()
	{
	}

	[Token(Token = "0x6000525")]
	[Address(RVA = "0xA67928", Offset = "0xA67928", VA = "0xA67928")]
	public void FX1Fire()
	{
	}

	[Token(Token = "0x6000526")]
	[Address(RVA = "0xA6799C", Offset = "0xA6799C", VA = "0xA6799C")]
	public void FX1FireFull()
	{
	}

	[Token(Token = "0x6000527")]
	[Address(RVA = "0xA67A10", Offset = "0xA67A10", VA = "0xA67A10")]
	public void FX1Flamethrower()
	{
	}

	[Token(Token = "0x6000528")]
	[Address(RVA = "0xA67A84", Offset = "0xA67A84", VA = "0xA67A84")]
	public void FX1Missiles()
	{
	}

	[Token(Token = "0x6000529")]
	[Address(RVA = "0xA67AF8", Offset = "0xA67AF8", VA = "0xA67AF8")]
	public void FX2Fire()
	{
	}

	[Token(Token = "0x600052A")]
	[Address(RVA = "0xA67B6C", Offset = "0xA67B6C", VA = "0xA67B6C")]
	public void FX2FireFull()
	{
	}

	[Token(Token = "0x600052B")]
	[Address(RVA = "0xA67BE0", Offset = "0xA67BE0", VA = "0xA67BE0")]
	public void FX2Flamethrower()
	{
	}

	[Token(Token = "0x600052C")]
	[Address(RVA = "0xA67C54", Offset = "0xA67C54", VA = "0xA67C54")]
	public void FX2Missiles()
	{
	}

	[Token(Token = "0x600052D")]
	[Address(RVA = "0xA67CC8", Offset = "0xA67CC8", VA = "0xA67CC8")]
	public LoadSceneOnClick()
	{
	}
}
[Token(Token = "0x20000DF")]
public class Projectile : MonoBehaviour
{
	[Token(Token = "0x600052E")]
	[Address(RVA = "0x1208614", Offset = "0x1208614", VA = "0x1208614")]
	private void Start()
	{
	}

	[Token(Token = "0x600052F")]
	[Address(RVA = "0x1208618", Offset = "0x1208618", VA = "0x1208618")]
	private void Update()
	{
	}

	[Token(Token = "0x6000530")]
	[Address(RVA = "0x120861C", Offset = "0x120861C", VA = "0x120861C")]
	public Projectile()
	{
	}
}
[Token(Token = "0x20000E0")]
public class ProjectileScript : MonoBehaviour
{
	[Token(Token = "0x4000691")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject impactParticle;

	[Token(Token = "0x4000692")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject projectileParticle;

	[Token(Token = "0x4000693")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject[] trailParticles;

	[Token(Token = "0x4000694")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	public Vector3 impactNormal;

	[Token(Token = "0x6000531")]
	[Address(RVA = "0x1208624", Offset = "0x1208624", VA = "0x1208624")]
	private void Start()
	{
	}

	[Token(Token = "0x6000532")]
	[Address(RVA = "0x120877C", Offset = "0x120877C", VA = "0x120877C")]
	private void OnCollisionEnter(Collision hit)
	{
	}

	[Token(Token = "0x6000533")]
	[Address(RVA = "0x1208A8C", Offset = "0x1208A8C", VA = "0x1208A8C")]
	public ProjectileScript()
	{
	}
}
[Token(Token = "0x20000E1")]
public class lightScript : MonoBehaviour
{
	[Token(Token = "0x4000695")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool Impact;

	[Token(Token = "0x4000696")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float Sqr;

	[Token(Token = "0x6000534")]
	[Address(RVA = "0xD15184", Offset = "0xD15184", VA = "0xD15184")]
	private void Start()
	{
	}

	[Token(Token = "0x6000535")]
	[Address(RVA = "0xD15294", Offset = "0xD15294", VA = "0xD15294")]
	private void Update()
	{
	}

	[Token(Token = "0x6000536")]
	[Address(RVA = "0xD153DC", Offset = "0xD153DC", VA = "0xD153DC")]
	public lightScript()
	{
	}
}
[Token(Token = "0x20000E2")]
public class loopScript : MonoBehaviour
{
	[Token(Token = "0x200039B")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDD1C", Offset = "0x5CDD1C")]
	private sealed class <EffectLoop>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40018CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40018CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40018CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public loopScript <>4__this;

		[Token(Token = "0x40018CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GameObject <effectPlayer>5__2;

		[Token(Token = "0x170002AD")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600199E")]
			[Address(RVA = "0x138D030", Offset = "0x138D030", VA = "0x138D030", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002AE")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60019A0")]
			[Address(RVA = "0x138D078", Offset = "0x138D078", VA = "0x138D078", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600199B")]
		[Address(RVA = "0x138CE24", Offset = "0x138CE24", VA = "0x138CE24")]
		[DebuggerHidden]
		public <EffectLoop>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x600199C")]
		[Address(RVA = "0x138CE50", Offset = "0x138CE50", VA = "0x138CE50", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600199D")]
		[Address(RVA = "0x138CE54", Offset = "0x138CE54", VA = "0x138CE54", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600199F")]
		[Address(RVA = "0x138D038", Offset = "0x138D038", VA = "0x138D038", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000697")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject chosenEffect;

	[Token(Token = "0x4000698")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float loopTimeLimit;

	[Token(Token = "0x6000537")]
	[Address(RVA = "0xD153E4", Offset = "0xD153E4", VA = "0xD153E4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000538")]
	[Address(RVA = "0xD153E8", Offset = "0xD153E8", VA = "0xD153E8")]
	public void PlayEffect()
	{
	}

	[Token(Token = "0x6000539")]
	[Address(RVA = "0xD15438", Offset = "0xD15438", VA = "0xD15438")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D7EF8", Offset = "0x5D7EF8")]
	private IEnumerator EffectLoop()
	{
		return null;
	}

	[Token(Token = "0x600053A")]
	[Address(RVA = "0xD154B0", Offset = "0xD154B0", VA = "0xD154B0")]
	public loopScript()
	{
	}
}
[Token(Token = "0x20000E3")]
public class ZE_MagicSphereDemoGUI : MonoBehaviour
{
	[Token(Token = "0x200039C")]
	public struct HSBColor
	{
		[Token(Token = "0x40018D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float h;

		[Token(Token = "0x40018D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float s;

		[Token(Token = "0x40018D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float b;

		[Token(Token = "0x40018D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float a;

		[Token(Token = "0x60019A1")]
		[Address(RVA = "0x138CC8C", Offset = "0x138CC8C", VA = "0x138CC8C")]
		public HSBColor(float h, float s, float b, float a)
		{
		}
	}

	[Token(Token = "0x4000699")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] Prefabs;

	[Token(Token = "0x400069A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Texture HUETexture;

	[Token(Token = "0x400069B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int currentNomber;

	[Token(Token = "0x400069C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private GameObject currentInstance;

	[Token(Token = "0x400069D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private GUIStyle guiStyleHeader;

	[Token(Token = "0x400069E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float oldIntensity;

	[Token(Token = "0x400069F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private Color oldAmbientColor;

	[Token(Token = "0x40006A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private float dpiScale;

	[Token(Token = "0x40006A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool isDay;

	[Token(Token = "0x40006A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float colorHUE;

	[Token(Token = "0x600053B")]
	[Address(RVA = "0xD1332C", Offset = "0xD1332C", VA = "0xD1332C")]
	private void Start()
	{
	}

	[Token(Token = "0x600053C")]
	[Address(RVA = "0xD135FC", Offset = "0xD135FC", VA = "0xD135FC")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x600053D")]
	[Address(RVA = "0xD13414", Offset = "0xD13414", VA = "0xD13414")]
	private void ChangeCurrent(int delta)
	{
	}

	[Token(Token = "0x600053E")]
	[Address(RVA = "0xD13BD4", Offset = "0xD13BD4", VA = "0xD13BD4")]
	private void Reactivate()
	{
	}

	[Token(Token = "0x600053F")]
	[Address(RVA = "0xD13C18", Offset = "0xD13C18", VA = "0xD13C18")]
	private Color Hue(float H)
	{
		return default(Color);
	}

	[Token(Token = "0x6000540")]
	[Address(RVA = "0xD13D80", Offset = "0xD13D80", VA = "0xD13D80")]
	public HSBColor ColorToHSV(Color color)
	{
		return default(HSBColor);
	}

	[Token(Token = "0x6000541")]
	[Address(RVA = "0xD13EE0", Offset = "0xD13EE0", VA = "0xD13EE0")]
	public Color HSVToColor(HSBColor hsbColor)
	{
		return default(Color);
	}

	[Token(Token = "0x6000542")]
	[Address(RVA = "0xD140C0", Offset = "0xD140C0", VA = "0xD140C0")]
	private Material SetMatHUEColor(Material mat, string name, float hueColor)
	{
		return null;
	}

	[Token(Token = "0x6000543")]
	[Address(RVA = "0xD13848", Offset = "0xD13848", VA = "0xD13848")]
	private void ChangeColor()
	{
	}

	[Token(Token = "0x6000544")]
	[Address(RVA = "0xD14180", Offset = "0xD14180", VA = "0xD14180")]
	public ZE_MagicSphereDemoGUI()
	{
	}
}
[Token(Token = "0x20000E4")]
internal class ZE_UVTextureAnimator : MonoBehaviour
{
	[Token(Token = "0x200039D")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDD2C", Offset = "0x5CDD2C")]
	private sealed class <UpdateCorutine>d__29 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40018D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40018D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40018D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ZE_UVTextureAnimator <>4__this;

		[Token(Token = "0x170002AF")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60019A5")]
			[Address(RVA = "0x138CDD4", Offset = "0x138CDD4", VA = "0x138CDD4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002B0")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60019A7")]
			[Address(RVA = "0x138CE1C", Offset = "0x138CE1C", VA = "0x138CE1C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60019A2")]
		[Address(RVA = "0x138CC98", Offset = "0x138CC98", VA = "0x138CC98")]
		[DebuggerHidden]
		public <UpdateCorutine>d__29(int <>1__state)
		{
		}

		[Token(Token = "0x60019A3")]
		[Address(RVA = "0x138CCC4", Offset = "0x138CCC4", VA = "0x138CCC4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60019A4")]
		[Address(RVA = "0x138CCC8", Offset = "0x138CCC8", VA = "0x138CCC8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60019A6")]
		[Address(RVA = "0x138CDDC", Offset = "0x138CDDC", VA = "0x138CDDC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40006A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Material[] AnimatedMaterialsNotInstance;

	[Token(Token = "0x40006A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int Rows;

	[Token(Token = "0x40006A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int Columns;

	[Token(Token = "0x40006A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float Fps;

	[Token(Token = "0x40006A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int OffsetMat;

	[Token(Token = "0x40006A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector2 SelfTiling;

	[Token(Token = "0x40006A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool IsLoop;

	[Token(Token = "0x40006AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	public bool IsReverse;

	[Token(Token = "0x40006AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
	public bool IsRandomOffsetForInctance;

	[Token(Token = "0x40006AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3B")]
	public bool IsBump;

	[Token(Token = "0x40006AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public bool IsHeight;

	[Token(Token = "0x40006AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
	public bool IsCutOut;

	[Token(Token = "0x40006AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3E")]
	private bool isInizialised;

	[Token(Token = "0x40006B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int index;

	[Token(Token = "0x40006B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private int count;

	[Token(Token = "0x40006B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int allCount;

	[Token(Token = "0x40006B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float deltaFps;

	[Token(Token = "0x40006B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool isVisible;

	[Token(Token = "0x40006B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
	private bool isCorutineStarted;

	[Token(Token = "0x40006B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Renderer currentRenderer;

	[Token(Token = "0x40006B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Material instanceMaterial;

	[Token(Token = "0x6000545")]
	[Address(RVA = "0xD141F0", Offset = "0xD141F0", VA = "0xD141F0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000546")]
	[Address(RVA = "0xD14A94", Offset = "0xD14A94", VA = "0xD14A94")]
	public void SetInstanceMaterial(Material mat, Vector2 offsetMat)
	{
	}

	[Token(Token = "0x6000547")]
	[Address(RVA = "0xD14454", Offset = "0xD14454", VA = "0xD14454")]
	private void InitDefaultVariables()
	{
	}

	[Token(Token = "0x6000548")]
	[Address(RVA = "0xD14238", Offset = "0xD14238", VA = "0xD14238")]
	private void InitMaterial()
	{
	}

	[Token(Token = "0x6000549")]
	[Address(RVA = "0xD14ABC", Offset = "0xD14ABC", VA = "0xD14ABC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600054A")]
	[Address(RVA = "0xD14B14", Offset = "0xD14B14", VA = "0xD14B14")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600054B")]
	[Address(RVA = "0xD14B20", Offset = "0xD14B20", VA = "0xD14B20")]
	private void OnBecameVisible()
	{
	}

	[Token(Token = "0x600054C")]
	[Address(RVA = "0xD14B68", Offset = "0xD14B68", VA = "0xD14B68")]
	private void OnBecameInvisible()
	{
	}

	[Token(Token = "0x600054D")]
	[Address(RVA = "0xD14A1C", Offset = "0xD14A1C", VA = "0xD14A1C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D7F58", Offset = "0x5D7F58")]
	private IEnumerator UpdateCorutine()
	{
		return null;
	}

	[Token(Token = "0x600054E")]
	[Address(RVA = "0xD14B70", Offset = "0xD14B70", VA = "0xD14B70")]
	private void UpdateCorutineFrame()
	{
	}

	[Token(Token = "0x600054F")]
	[Address(RVA = "0xD15068", Offset = "0xD15068", VA = "0xD15068")]
	public ZE_UVTextureAnimator()
	{
	}
}
[Token(Token = "0x20000E5")]
public class RFX1_DemoGUI : MonoBehaviour
{
	[Token(Token = "0x40006B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int Current;

	[Token(Token = "0x40006B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject[] Prefabs;

	[Token(Token = "0x40006BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool[] IsShield;

	[Token(Token = "0x40006BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject ShieldProjectile;

	[Token(Token = "0x40006BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject ShieldProjectile2;

	[Token(Token = "0x40006BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float ShieldProjectileReactiovationTime;

	[Token(Token = "0x40006BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Light Sun;

	[Token(Token = "0x40006BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public ReflectionProbe ReflectionProbe;

	[Token(Token = "0x40006C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Light[] NightLights;

	[Token(Token = "0x40006C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Texture HUETexture;

	[Token(Token = "0x40006C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public bool UseMobileVersion;

	[Token(Token = "0x40006C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public GameObject MobileCharacter;

	[Token(Token = "0x40006C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public GameObject Target;

	[Token(Token = "0x40006C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Color guiColor;

	[Token(Token = "0x40006C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public RFX1_DistortionAndBloom RFX1_DistortionAndBloom;

	[Token(Token = "0x40006C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private int currentNomber;

	[Token(Token = "0x40006C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private GameObject currentInstance;

	[Token(Token = "0x40006C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private GUIStyle guiStyleHeader;

	[Token(Token = "0x40006CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private GUIStyle guiStyleHeaderMobile;

	[Token(Token = "0x40006CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private float dpiScale;

	[Token(Token = "0x40006CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private bool isDay;

	[Token(Token = "0x40006CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private float colorHUE;

	[Token(Token = "0x40006CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	private float startSunIntensity;

	[Token(Token = "0x40006CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private Quaternion startSunRotation;

	[Token(Token = "0x40006D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private Color startAmbientLight;

	[Token(Token = "0x40006D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private float startAmbientIntencity;

	[Token(Token = "0x40006D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	private float startReflectionIntencity;

	[Token(Token = "0x40006D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private LightShadows startLightShadows;

	[Token(Token = "0x40006D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	private float currentSpeed;

	[Token(Token = "0x40006D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private GameObject mobileCharacterInstance;

	[Token(Token = "0x40006D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private bool isButtonPressed;

	[Token(Token = "0x40006D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private GameObject instanceShieldProjectile;

	[Token(Token = "0x6000550")]
	[Address(RVA = "0x11E6CC0", Offset = "0x11E6CC0", VA = "0x11E6CC0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000551")]
	[Address(RVA = "0x11E7300", Offset = "0x11E7300", VA = "0x11E7300")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000552")]
	[Address(RVA = "0x11E6E54", Offset = "0x11E6E54", VA = "0x11E6E54")]
	private void ChangeCurrent(int delta)
	{
	}

	[Token(Token = "0x6000553")]
	[Address(RVA = "0x11E7D5C", Offset = "0x11E7D5C", VA = "0x11E7D5C")]
	private void RemoveClones()
	{
	}

	[Token(Token = "0x6000554")]
	[Address(RVA = "0x11E7F24", Offset = "0x11E7F24", VA = "0x11E7F24")]
	private void ReactivateShieldProjectile()
	{
	}

	[Token(Token = "0x6000555")]
	[Address(RVA = "0x11E8058", Offset = "0x11E8058", VA = "0x11E8058")]
	private void ReactivateEffect()
	{
	}

	[Token(Token = "0x6000556")]
	[Address(RVA = "0x11E809C", Offset = "0x11E809C", VA = "0x11E809C")]
	public RFX1_DemoGUI()
	{
	}

	[Token(Token = "0x6000557")]
	[Address(RVA = "0x11E8188", Offset = "0x11E8188", VA = "0x11E8188")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D7FB8", Offset = "0x5D7FB8")]
	private void <ChangeCurrent>b__34_0(object sender, RFX1_TransformMotion.RFX1_CollisionInfo info)
	{
	}
}
[Token(Token = "0x20000E6")]
public class RFX1_FPS : MonoBehaviour
{
	[Token(Token = "0x40006D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GUIStyle guiStyleHeader;

	[Token(Token = "0x40006D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float timeleft;

	[Token(Token = "0x40006DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float timeleft2;

	[Token(Token = "0x40006DB")]
	private const float updateTime = 0.5f;

	[Token(Token = "0x40006DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float fps;

	[Token(Token = "0x40006DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private int frames;

	[Token(Token = "0x6000558")]
	[Address(RVA = "0x11E9890", Offset = "0x11E9890", VA = "0x11E9890")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000559")]
	[Address(RVA = "0x11E9980", Offset = "0x11E9980", VA = "0x11E9980")]
	private void Update()
	{
	}

	[Token(Token = "0x600055A")]
	[Address(RVA = "0x11E99E0", Offset = "0x11E99E0", VA = "0x11E99E0")]
	public RFX1_FPS()
	{
	}
}
[Token(Token = "0x20000E7")]
public class RFX1_MouseOrbit : MonoBehaviour
{
	[Token(Token = "0x40006DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject target;

	[Token(Token = "0x40006DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float distance;

	[Token(Token = "0x40006E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float xSpeed;

	[Token(Token = "0x40006E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float ySpeed;

	[Token(Token = "0x40006E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float yMinLimit;

	[Token(Token = "0x40006E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float yMaxLimit;

	[Token(Token = "0x40006E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float x;

	[Token(Token = "0x40006E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float y;

	[Token(Token = "0x40006E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float prevDistance;

	[Token(Token = "0x600055B")]
	[Address(RVA = "0x11EA104", Offset = "0x11EA104", VA = "0x11EA104")]
	private void Start()
	{
	}

	[Token(Token = "0x600055C")]
	[Address(RVA = "0x11EA13C", Offset = "0x11EA13C", VA = "0x11EA13C")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x600055D")]
	[Address(RVA = "0x11EA584", Offset = "0x11EA584", VA = "0x11EA584")]
	private static float ClampAngle(float angle, float min, float max)
	{
		return default(float);
	}

	[Token(Token = "0x600055E")]
	[Address(RVA = "0x11EA5B4", Offset = "0x11EA5B4", VA = "0x11EA5B4")]
	public RFX1_MouseOrbit()
	{
	}
}
[Token(Token = "0x20000E8")]
public class RFX1_RealtimeReflection : MonoBehaviour
{
	[Token(Token = "0x40006E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ReflectionProbe probe;

	[Token(Token = "0x40006E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Transform camT;

	[Token(Token = "0x600055F")]
	[Address(RVA = "0x11EC010", Offset = "0x11EC010", VA = "0x11EC010")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000560")]
	[Address(RVA = "0x11EC094", Offset = "0x11EC094", VA = "0x11EC094")]
	private void Update()
	{
	}

	[Token(Token = "0x6000561")]
	[Address(RVA = "0x11EC114", Offset = "0x11EC114", VA = "0x11EC114")]
	public RFX1_RealtimeReflection()
	{
	}
}
[Token(Token = "0x20000E9")]
[ExecuteInEditMode]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x5C9C24", Offset = "0x5C9C24")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5C9C24", Offset = "0x5C9C24")]
public class RFX1_DistortionAndBloom : MonoBehaviour
{
	[Token(Token = "0x40006E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5CEE0C", Offset = "0x5CEE0C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5CEE0C", Offset = "0x5CEE0C")]
	public float RenderTextureResolutoinFactor;

	[Token(Token = "0x40006EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool UseBloom;

	[Token(Token = "0x40006EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5CEE64", Offset = "0x5CEE64")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5CEE64", Offset = "0x5CEE64")]
	public float Threshold;

	[Token(Token = "0x40006EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5CEEBC", Offset = "0x5CEEBC")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5CEEBC", Offset = "0x5CEEBC")]
	public float SoftKnee;

	[Token(Token = "0x40006ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5CEF20", Offset = "0x5CEF20")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5CEF20", Offset = "0x5CEF20")]
	public float Radius;

	[Token(Token = "0x40006EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5CEF74", Offset = "0x5CEF74")]
	public float Intensity;

	[Token(Token = "0x40006EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5CEFAC", Offset = "0x5CEFAC")]
	public bool HighQuality;

	[Token(Token = "0x40006F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5CEFE4", Offset = "0x5CEFE4")]
	public bool AntiFlicker;

	[Token(Token = "0x40006F1")]
	private const string shaderName = "Hidden/KriptoFX/PostEffects/RFX1_Bloom";

	[Token(Token = "0x40006F2")]
	private const string shaderAdditiveName = "Hidden/KriptoFX/PostEffects/RFX1_BloomAdditive";

	[Token(Token = "0x40006F3")]
	private const string cameraName = "MobileCamera(Distort_Bloom_Depth)";

	[Token(Token = "0x40006F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private RenderTexture source;

	[Token(Token = "0x40006F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private RenderTexture depth;

	[Token(Token = "0x40006F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private RenderTexture destination;

	[Token(Token = "0x40006F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private int previuosFrameWidth;

	[Token(Token = "0x40006F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private int previuosFrameHeight;

	[Token(Token = "0x40006F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float previousScale;

	[Token(Token = "0x40006FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Camera addCamera;

	[Token(Token = "0x40006FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private GameObject tempGO;

	[Token(Token = "0x40006FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private bool HDRSupported;

	[Token(Token = "0x40006FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Material m_Material;

	[Token(Token = "0x40006FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Material m_MaterialAdditive;

	[Token(Token = "0x40006FF")]
	private const int kMaxIterations = 16;

	[Token(Token = "0x4000700")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private readonly RenderTexture[] m_blurBuffer1;

	[Token(Token = "0x4000701")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private readonly RenderTexture[] m_blurBuffer2;

	[Token(Token = "0x4000702")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public GUIStyle guiStyleHeader;

	[Token(Token = "0x17000007")]
	public Material mat
	{
		[Token(Token = "0x6000562")]
		[Address(RVA = "0x11E81DC", Offset = "0x11E81DC", VA = "0x11E81DC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000008")]
	public Material matAdditive
	{
		[Token(Token = "0x6000563")]
		[Address(RVA = "0x11E835C", Offset = "0x11E835C", VA = "0x11E835C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000564")]
	[Address(RVA = "0x11E8288", Offset = "0x11E8288", VA = "0x11E8288")]
	public static Material CheckShaderAndCreateMaterial(Shader s)
	{
		return null;
	}

	[Token(Token = "0x6000565")]
	[Address(RVA = "0x11E8420", Offset = "0x11E8420", VA = "0x11E8420")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000566")]
	[Address(RVA = "0x11E85D8", Offset = "0x11E85D8", VA = "0x11E85D8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000567")]
	[Address(RVA = "0x11E87E0", Offset = "0x11E87E0", VA = "0x11E87E0")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000568")]
	[Address(RVA = "0x11E93AC", Offset = "0x11E93AC", VA = "0x11E93AC")]
	private void OnPostRender()
	{
	}

	[Token(Token = "0x6000569")]
	[Address(RVA = "0x11E85DC", Offset = "0x11E85DC", VA = "0x11E85DC")]
	private void InitializeRenderTarget()
	{
	}

	[Token(Token = "0x600056A")]
	[Address(RVA = "0x11E8BB0", Offset = "0x11E8BB0", VA = "0x11E8BB0")]
	private void UpdateBloom()
	{
	}

	[Token(Token = "0x600056B")]
	[Address(RVA = "0x11E894C", Offset = "0x11E894C", VA = "0x11E894C")]
	private void GrabImage()
	{
	}

	[Token(Token = "0x600056C")]
	[Address(RVA = "0x11E942C", Offset = "0x11E942C", VA = "0x11E942C")]
	public RFX1_DistortionAndBloom()
	{
	}
}
[Token(Token = "0x20000EA")]
public class RFX1_AudioPitchCurves : MonoBehaviour
{
	[Token(Token = "0x4000703")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationCurve AudioCurve;

	[Token(Token = "0x4000704")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float GraphTimeMultiplier;

	[Token(Token = "0x4000705")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float GraphPitchMultiplier;

	[Token(Token = "0x4000706")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool IsLoop;

	[Token(Token = "0x4000707")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	private bool canUpdate;

	[Token(Token = "0x4000708")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float startTime;

	[Token(Token = "0x4000709")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private AudioSource audioSource;

	[Token(Token = "0x400070A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float startPitch;

	[Token(Token = "0x600056D")]
	[Address(RVA = "0x120A6D8", Offset = "0x120A6D8", VA = "0x120A6D8")]
	private void Awake()
	{
	}

	[Token(Token = "0x600056E")]
	[Address(RVA = "0x120A77C", Offset = "0x120A77C", VA = "0x120A77C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600056F")]
	[Address(RVA = "0x120A840", Offset = "0x120A840", VA = "0x120A840")]
	private void Update()
	{
	}

	[Token(Token = "0x6000570")]
	[Address(RVA = "0x120A8EC", Offset = "0x120A8EC", VA = "0x120A8EC")]
	public RFX1_AudioPitchCurves()
	{
	}
}
[Token(Token = "0x20000EB")]
public class RFX1_AudioVolumeCurves : MonoBehaviour
{
	[Token(Token = "0x400070B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationCurve AudioCurve;

	[Token(Token = "0x400070C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float GraphTimeMultiplier;

	[Token(Token = "0x400070D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool IsLoop;

	[Token(Token = "0x400070E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
	private bool canUpdate;

	[Token(Token = "0x400070F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float startTime;

	[Token(Token = "0x4000710")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private AudioSource audioSource;

	[Token(Token = "0x4000711")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float startVolume;

	[Token(Token = "0x6000571")]
	[Address(RVA = "0x120A940", Offset = "0x120A940", VA = "0x120A940")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000572")]
	[Address(RVA = "0x120A9DC", Offset = "0x120A9DC", VA = "0x120A9DC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000573")]
	[Address(RVA = "0x120AA98", Offset = "0x120AA98", VA = "0x120AA98")]
	private void Update()
	{
	}

	[Token(Token = "0x6000574")]
	[Address(RVA = "0x120AB3C", Offset = "0x120AB3C", VA = "0x120AB3C")]
	public RFX1_AudioVolumeCurves()
	{
	}
}
[Token(Token = "0x20000EC")]
public class RFX1_LightCurves : MonoBehaviour
{
	[Token(Token = "0x4000712")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationCurve LightCurve;

	[Token(Token = "0x4000713")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float GraphTimeMultiplier;

	[Token(Token = "0x4000714")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float GraphIntensityMultiplier;

	[Token(Token = "0x4000715")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool IsLoop;

	[Token(Token = "0x4000716")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	[HideInInspector]
	public bool canUpdate;

	[Token(Token = "0x4000717")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float startTime;

	[Token(Token = "0x4000718")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Light lightSource;

	[Token(Token = "0x6000575")]
	[Address(RVA = "0x11E9E84", Offset = "0x11E9E84", VA = "0x11E9E84")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000576")]
	[Address(RVA = "0x11E9F14", Offset = "0x11E9F14", VA = "0x11E9F14")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000577")]
	[Address(RVA = "0x11E9FD8", Offset = "0x11E9FD8", VA = "0x11E9FD8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000578")]
	[Address(RVA = "0x11EA07C", Offset = "0x11EA07C", VA = "0x11EA07C")]
	public RFX1_LightCurves()
	{
	}
}
[Token(Token = "0x20000ED")]
public class RFX1_ProjectorSizeCurves : MonoBehaviour
{
	[Token(Token = "0x4000719")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationCurve ProjectorSize;

	[Token(Token = "0x400071A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float GraphTimeMultiplier;

	[Token(Token = "0x400071B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float GraphIntensityMultiplier;

	[Token(Token = "0x400071C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool IsLoop;

	[Token(Token = "0x400071D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	private bool canUpdate;

	[Token(Token = "0x400071E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float startTime;

	[Token(Token = "0x400071F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Projector projector;

	[Token(Token = "0x6000579")]
	[Address(RVA = "0x11EBCD4", Offset = "0x11EBCD4", VA = "0x11EBCD4")]
	private void Awake()
	{
	}

	[Token(Token = "0x600057A")]
	[Address(RVA = "0x11EBD5C", Offset = "0x11EBD5C", VA = "0x11EBD5C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600057B")]
	[Address(RVA = "0x11EBD8C", Offset = "0x11EBD8C", VA = "0x11EBD8C")]
	private void Update()
	{
	}

	[Token(Token = "0x600057C")]
	[Address(RVA = "0x11EBE30", Offset = "0x11EBE30", VA = "0x11EBE30")]
	public RFX1_ProjectorSizeCurves()
	{
	}
}
[Token(Token = "0x20000EE")]
public class RFX1_ScaleCurves : MonoBehaviour
{
	[Token(Token = "0x4000720")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationCurve FloatCurve;

	[Token(Token = "0x4000721")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float GraphTimeMultiplier;

	[Token(Token = "0x4000722")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float GraphIntensityMultiplier;

	[Token(Token = "0x4000723")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool IsLoop;

	[Token(Token = "0x4000724")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	private bool canUpdate;

	[Token(Token = "0x4000725")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float startTime;

	[Token(Token = "0x4000726")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform t;

	[Token(Token = "0x4000727")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int nameId;

	[Token(Token = "0x4000728")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Projector proj;

	[Token(Token = "0x4000729")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Vector3 startScale;

	[Token(Token = "0x600057D")]
	[Address(RVA = "0x11EC6A4", Offset = "0x11EC6A4", VA = "0x11EC6A4")]
	private void Awake()
	{
	}

	[Token(Token = "0x600057E")]
	[Address(RVA = "0x11EC768", Offset = "0x11EC768", VA = "0x11EC768")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600057F")]
	[Address(RVA = "0x11EC7B4", Offset = "0x11EC7B4", VA = "0x11EC7B4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000580")]
	[Address(RVA = "0x11EC8E0", Offset = "0x11EC8E0", VA = "0x11EC8E0")]
	public RFX1_ScaleCurves()
	{
	}
}
[Token(Token = "0x20000EF")]
public class RFX1_ShaderColorGradient : MonoBehaviour
{
	[Token(Token = "0x400072A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public RFX1_ShaderProperties ShaderColorProperty;

	[Token(Token = "0x400072B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Gradient Color;

	[Token(Token = "0x400072C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float TimeMultiplier;

	[Token(Token = "0x400072D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool IsLoop;

	[Token(Token = "0x400072E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
	public bool UseSharedMaterial;

	[Token(Token = "0x400072F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	public float HUE;

	[Token(Token = "0x4000730")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[HideInInspector]
	public bool canUpdate;

	[Token(Token = "0x4000731")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Material mat;

	[Token(Token = "0x4000732")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int propertyID;

	[Token(Token = "0x4000733")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float startTime;

	[Token(Token = "0x4000734")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Color startColor;

	[Token(Token = "0x4000735")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool isInitialized;

	[Token(Token = "0x4000736")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private string shaderProperty;

	[Token(Token = "0x6000581")]
	[Address(RVA = "0x11EC934", Offset = "0x11EC934", VA = "0x11EC934")]
	private void Start()
	{
	}

	[Token(Token = "0x6000582")]
	[Address(RVA = "0x11EC938", Offset = "0x11EC938", VA = "0x11EC938")]
	private void Init()
	{
	}

	[Token(Token = "0x6000583")]
	[Address(RVA = "0x11ECCB8", Offset = "0x11ECCB8", VA = "0x11ECCB8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000584")]
	[Address(RVA = "0x11ECCF0", Offset = "0x11ECCF0", VA = "0x11ECCF0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000585")]
	[Address(RVA = "0x11ECE08", Offset = "0x11ECE08", VA = "0x11ECE08")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000586")]
	[Address(RVA = "0x11ECEC8", Offset = "0x11ECEC8", VA = "0x11ECEC8")]
	public RFX1_ShaderColorGradient()
	{
	}
}
[Token(Token = "0x20000F0")]
public class RFX1_ShaderFloatCurve : MonoBehaviour
{
	[Token(Token = "0x4000737")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public RFX1_ShaderProperties ShaderFloatProperty;

	[Token(Token = "0x4000738")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AnimationCurve FloatCurve;

	[Token(Token = "0x4000739")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float GraphTimeMultiplier;

	[Token(Token = "0x400073A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float GraphIntensityMultiplier;

	[Token(Token = "0x400073B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool IsLoop;

	[Token(Token = "0x400073C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	public bool UseSharedMaterial;

	[Token(Token = "0x400073D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
	private bool canUpdate;

	[Token(Token = "0x400073E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float startTime;

	[Token(Token = "0x400073F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Material mat;

	[Token(Token = "0x4000740")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float startFloat;

	[Token(Token = "0x4000741")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private int propertyID;

	[Token(Token = "0x4000742")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private string shaderProperty;

	[Token(Token = "0x4000743")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool isInitialized;

	[Token(Token = "0x6000587")]
	[Address(RVA = "0x11ECF48", Offset = "0x11ECF48", VA = "0x11ECF48")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000588")]
	[Address(RVA = "0x11ED24C", Offset = "0x11ED24C", VA = "0x11ED24C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000589")]
	[Address(RVA = "0x11ED2C0", Offset = "0x11ED2C0", VA = "0x11ED2C0")]
	private void Update()
	{
	}

	[Token(Token = "0x600058A")]
	[Address(RVA = "0x11ED368", Offset = "0x11ED368", VA = "0x11ED368")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600058B")]
	[Address(RVA = "0x11ED39C", Offset = "0x11ED39C", VA = "0x11ED39C")]
	public RFX1_ShaderFloatCurve()
	{
	}
}
[Token(Token = "0x20000F1")]
public enum RFX1_ShaderProperties
{
	[Token(Token = "0x4000745")]
	_TintColor,
	[Token(Token = "0x4000746")]
	_Cutoff,
	[Token(Token = "0x4000747")]
	_Color,
	[Token(Token = "0x4000748")]
	_EmissionColor,
	[Token(Token = "0x4000749")]
	_MaskPow,
	[Token(Token = "0x400074A")]
	_Cutout,
	[Token(Token = "0x400074B")]
	_Speed,
	[Token(Token = "0x400074C")]
	_BumpAmt,
	[Token(Token = "0x400074D")]
	_AlphaPow,
	[Token(Token = "0x400074E")]
	_Distortion,
	[Token(Token = "0x400074F")]
	_MainColor
}
[Token(Token = "0x20000F2")]
public class RFX1_WindCurves : MonoBehaviour
{
	[Token(Token = "0x4000750")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationCurve WindCurve;

	[Token(Token = "0x4000751")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float GraphTimeMultiplier;

	[Token(Token = "0x4000752")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float GraphIntensityMultiplier;

	[Token(Token = "0x4000753")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool IsLoop;

	[Token(Token = "0x4000754")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	private bool canUpdate;

	[Token(Token = "0x4000755")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float startTime;

	[Token(Token = "0x4000756")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private WindZone windZone;

	[Token(Token = "0x600058C")]
	[Address(RVA = "0x11F0128", Offset = "0x11F0128", VA = "0x11F0128")]
	private void Awake()
	{
	}

	[Token(Token = "0x600058D")]
	[Address(RVA = "0x11F01B0", Offset = "0x11F01B0", VA = "0x11F01B0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600058E")]
	[Address(RVA = "0x11F01E0", Offset = "0x11F01E0", VA = "0x11F01E0")]
	private void Update()
	{
	}

	[Token(Token = "0x600058F")]
	[Address(RVA = "0x11F0284", Offset = "0x11F0284", VA = "0x11F0284")]
	public RFX1_WindCurves()
	{
	}
}
[Token(Token = "0x20000F3")]
public class RFX1_EffectSettingColor : MonoBehaviour
{
	[Token(Token = "0x4000757")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Color Color;

	[Token(Token = "0x4000758")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Color previousColor;

	[Token(Token = "0x6000590")]
	[Address(RVA = "0x11E950C", Offset = "0x11E950C", VA = "0x11E950C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000591")]
	[Address(RVA = "0x11E9638", Offset = "0x11E9638", VA = "0x11E9638")]
	private void Update()
	{
	}

	[Token(Token = "0x6000592")]
	[Address(RVA = "0x11E9510", Offset = "0x11E9510", VA = "0x11E9510")]
	private void UpdateColor()
	{
	}

	[Token(Token = "0x6000593")]
	[Address(RVA = "0x11E9680", Offset = "0x11E9680", VA = "0x11E9680")]
	public RFX1_EffectSettingColor()
	{
	}
}
[Token(Token = "0x20000F4")]
public class RFX1_EffectSettingProjectile : MonoBehaviour
{
	[Token(Token = "0x4000759")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float FlyDistanceForProjectiles;

	[Token(Token = "0x400075A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float SpeedMultiplier;

	[Token(Token = "0x400075B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public LayerMask CollidesWith;

	[Token(Token = "0x400075C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float startSpeed;

	[Token(Token = "0x400075D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float oldSpeedMultiplier;

	[Token(Token = "0x6000594")]
	[Address(RVA = "0x11E96B4", Offset = "0x11E96B4", VA = "0x11E96B4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000595")]
	[Address(RVA = "0x11E9768", Offset = "0x11E9768", VA = "0x11E9768")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000596")]
	[Address(RVA = "0x11E982C", Offset = "0x11E982C", VA = "0x11E982C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000597")]
	[Address(RVA = "0x11E9850", Offset = "0x11E9850", VA = "0x11E9850")]
	public RFX1_EffectSettingProjectile()
	{
	}
}
[Token(Token = "0x20000F5")]
public class RFX1_ShieldInteraction : MonoBehaviour
{
	[Token(Token = "0x400075E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private RFX1_TransformMotion transformMotion;

	[Token(Token = "0x400075F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private SphereCollider coll;

	[Token(Token = "0x6000598")]
	[Address(RVA = "0x11EDACC", Offset = "0x11EDACC", VA = "0x11EDACC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000599")]
	[Address(RVA = "0x11EDC64", Offset = "0x11EDC64", VA = "0x11EDC64")]
	private void TransformMotion_CollisionEnter(object sender, RFX1_TransformMotion.RFX1_CollisionInfo e)
	{
	}

	[Token(Token = "0x600059A")]
	[Address(RVA = "0x11EDD78", Offset = "0x11EDD78", VA = "0x11EDD78")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600059B")]
	[Address(RVA = "0x11EDE0C", Offset = "0x11EDE0C", VA = "0x11EDE0C")]
	private void Update()
	{
	}

	[Token(Token = "0x600059C")]
	[Address(RVA = "0x11EDE10", Offset = "0x11EDE10", VA = "0x11EDE10")]
	public RFX1_ShieldInteraction()
	{
	}
}
[Token(Token = "0x20000F6")]
public class RFX1_Target : MonoBehaviour
{
	[Token(Token = "0x4000760")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject Target;

	[Token(Token = "0x4000761")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private GameObject currentTarget;

	[Token(Token = "0x4000762")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private RFX1_TransformMotion transformMotion;

	[Token(Token = "0x600059D")]
	[Address(RVA = "0x11EE0B0", Offset = "0x11EE0B0", VA = "0x11EE0B0")]
	private void Start()
	{
	}

	[Token(Token = "0x600059E")]
	[Address(RVA = "0x11EE284", Offset = "0x11EE284", VA = "0x11EE284")]
	private void Update()
	{
	}

	[Token(Token = "0x600059F")]
	[Address(RVA = "0x11EE114", Offset = "0x11EE114", VA = "0x11EE114")]
	private void UpdateTarget()
	{
	}

	[Token(Token = "0x60005A0")]
	[Address(RVA = "0x11EE288", Offset = "0x11EE288", VA = "0x11EE288")]
	public RFX1_Target()
	{
	}
}
[Token(Token = "0x20000F7")]
public class RFX1_ActivateGravityAfterCollision : MonoBehaviour
{
	[Token(Token = "0x4000763")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public RFX1_TransformMotion TransformMotion;

	[Token(Token = "0x4000764")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector2 Gravity;

	[Token(Token = "0x4000765")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ParticleSystem ps;

	[Token(Token = "0x4000766")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private ParticleSystem.MinMaxCurve startGravity;

	[Token(Token = "0x4000767")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool isInitialized;

	[Token(Token = "0x60005A1")]
	[Address(RVA = "0x1209998", Offset = "0x1209998", VA = "0x1209998")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60005A2")]
	[Address(RVA = "0x1209AEC", Offset = "0x1209AEC", VA = "0x1209AEC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60005A3")]
	[Address(RVA = "0x1209B94", Offset = "0x1209B94", VA = "0x1209B94")]
	private void TransformMotion_CollisionEnter(object sender, RFX1_TransformMotion.RFX1_CollisionInfo e)
	{
	}

	[Token(Token = "0x60005A4")]
	[Address(RVA = "0x1209C04", Offset = "0x1209C04", VA = "0x1209C04")]
	public RFX1_ActivateGravityAfterCollision()
	{
	}
}
[Token(Token = "0x20000F8")]
public class RFX1_AnimatorEvents : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x200039E")]
	public class RFX1_EffectAnimatorProperty
	{
		[Token(Token = "0x40018D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GameObject Prefab;

		[Token(Token = "0x40018D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform BonePosition;

		[Token(Token = "0x40018D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform BoneRotation;

		[Token(Token = "0x40018DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float DestroyTime;

		[Token(Token = "0x40018DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[HideInInspector]
		public GameObject CurrentInstance;

		[Token(Token = "0x60019A8")]
		[Address(RVA = "0xFF1514", Offset = "0xFF1514", VA = "0xFF1514")]
		public RFX1_EffectAnimatorProperty()
		{
		}
	}

	[Token(Token = "0x4000768")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public RFX1_EffectAnimatorProperty Effect1;

	[Token(Token = "0x4000769")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public RFX1_EffectAnimatorProperty Effect2;

	[Token(Token = "0x400076A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public RFX1_EffectAnimatorProperty Effect3;

	[Token(Token = "0x400076B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject Target;

	[Token(Token = "0x400076C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[HideInInspector]
	public float HUE;

	[Token(Token = "0x400076D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[HideInInspector]
	public float Speed;

	[Token(Token = "0x400076E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float oldHUE;

	[Token(Token = "0x400076F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float oldSpeed;

	[Token(Token = "0x60005A5")]
	[Address(RVA = "0x1209C14", Offset = "0x1209C14", VA = "0x1209C14")]
	private void InstantiateEffect(RFX1_EffectAnimatorProperty effect)
	{
	}

	[Token(Token = "0x60005A6")]
	[Address(RVA = "0x120A0E0", Offset = "0x120A0E0", VA = "0x120A0E0")]
	public void ActivateEffect1()
	{
	}

	[Token(Token = "0x60005A7")]
	[Address(RVA = "0x120A0E8", Offset = "0x120A0E8", VA = "0x120A0E8")]
	public void ActivateEffect2()
	{
	}

	[Token(Token = "0x60005A8")]
	[Address(RVA = "0x120A0F0", Offset = "0x120A0F0", VA = "0x120A0F0")]
	public void ActivateEffect3()
	{
	}

	[Token(Token = "0x60005A9")]
	[Address(RVA = "0x120A0F8", Offset = "0x120A0F8", VA = "0x120A0F8")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60005AA")]
	[Address(RVA = "0x120A130", Offset = "0x120A130", VA = "0x120A130")]
	private void UpdateInstance(RFX1_EffectAnimatorProperty effect)
	{
	}

	[Token(Token = "0x60005AB")]
	[Address(RVA = "0x1209FEC", Offset = "0x1209FEC", VA = "0x1209FEC")]
	private void UpdateSpeed(RFX1_EffectAnimatorProperty effect)
	{
	}

	[Token(Token = "0x60005AC")]
	[Address(RVA = "0x1209EA0", Offset = "0x1209EA0", VA = "0x1209EA0")]
	private void UpdateColor(RFX1_EffectAnimatorProperty effect)
	{
	}

	[Token(Token = "0x60005AD")]
	[Address(RVA = "0x120A6C8", Offset = "0x120A6C8", VA = "0x120A6C8")]
	public RFX1_AnimatorEvents()
	{
	}
}
[Token(Token = "0x20000F9")]
public static class RFX1_ColorHelper
{
	[Token(Token = "0x200039F")]
	public struct HSBColor
	{
		[Token(Token = "0x40018DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float H;

		[Token(Token = "0x40018DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float S;

		[Token(Token = "0x40018DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float B;

		[Token(Token = "0x40018DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float A;

		[Token(Token = "0x60019A9")]
		[Address(RVA = "0xFF15F4", Offset = "0xFF15F4", VA = "0xFF15F4")]
		public HSBColor(float h, float s, float b, float a)
		{
		}
	}

	[Token(Token = "0x4000770")]
	private const float TOLERANCE = 0.0001f;

	[Token(Token = "0x4000771")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static string[] colorProperties;

	[Token(Token = "0x60005AE")]
	[Address(RVA = "0x120A2A0", Offset = "0x120A2A0", VA = "0x120A2A0")]
	public static HSBColor ColorToHSV(Color color)
	{
		return default(HSBColor);
	}

	[Token(Token = "0x60005AF")]
	[Address(RVA = "0x120A488", Offset = "0x120A488", VA = "0x120A488")]
	public static Color HSVToColor(HSBColor hsbColor)
	{
		return default(Color);
	}

	[Token(Token = "0x60005B0")]
	[Address(RVA = "0x120B7A0", Offset = "0x120B7A0", VA = "0x120B7A0")]
	public static Color ConvertRGBColorByHUE(Color rgbColor, float hue)
	{
		return default(Color);
	}

	[Token(Token = "0x60005B1")]
	[Address(RVA = "0x120B8BC", Offset = "0x120B8BC", VA = "0x120B8BC")]
	public static void ChangeObjectColorByHUE(GameObject go, float hue)
	{
	}

	[Token(Token = "0x60005B2")]
	[Address(RVA = "0x120C49C", Offset = "0x120C49C", VA = "0x120C49C")]
	private static Material setMatHUEColor(Material mat, string name, float hueColor)
	{
		return null;
	}

	[Token(Token = "0x60005B3")]
	[Address(RVA = "0x120C574", Offset = "0x120C574", VA = "0x120C574")]
	private static Material setMatAlphaColor(Material mat, string name, float alpha)
	{
		return null;
	}
}
[Token(Token = "0x20000FA")]
public class RFX1_DeactivateByTime : MonoBehaviour
{
	[Token(Token = "0x4000772")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float DeactivateTime;

	[Token(Token = "0x60005B5")]
	[Address(RVA = "0x11E6BE4", Offset = "0x11E6BE4", VA = "0x11E6BE4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60005B6")]
	[Address(RVA = "0x11E6C38", Offset = "0x11E6C38", VA = "0x11E6C38")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60005B7")]
	[Address(RVA = "0x11E6C88", Offset = "0x11E6C88", VA = "0x11E6C88")]
	private void DeactivateThis()
	{
	}

	[Token(Token = "0x60005B8")]
	[Address(RVA = "0x11E6CB0", Offset = "0x11E6CB0", VA = "0x11E6CB0")]
	public RFX1_DeactivateByTime()
	{
	}
}
[Token(Token = "0x20000FB")]
[ExecuteInEditMode]
public class RFX1_ParticleCollisionDecal : MonoBehaviour
{
	[Token(Token = "0x4000773")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ParticleSystem DecalParticles;

	[Token(Token = "0x4000774")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool IsBilboard;

	[Token(Token = "0x4000775")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool InstantiateWhenZeroSpeed;

	[Token(Token = "0x4000776")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float MaxGroundAngleDeviation;

	[Token(Token = "0x4000777")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float MinDistanceBetweenDecals;

	[Token(Token = "0x4000778")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float MinDistanceBetweenSurface;

	[Token(Token = "0x4000779")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private List<ParticleCollisionEvent> collisionEvents;

	[Token(Token = "0x400077A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private ParticleSystem.Particle[] particles;

	[Token(Token = "0x400077B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private ParticleSystem initiatorPS;

	[Token(Token = "0x400077C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private List<GameObject> collidedGameObjects;

	[Token(Token = "0x60005B9")]
	[Address(RVA = "0x11EA5D0", Offset = "0x11EA5D0", VA = "0x11EA5D0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60005BA")]
	[Address(RVA = "0x11EA718", Offset = "0x11EA718", VA = "0x11EA718")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60005BB")]
	[Address(RVA = "0x11EA77C", Offset = "0x11EA77C", VA = "0x11EA77C")]
	private void CollisionDetect()
	{
	}

	[Token(Token = "0x60005BC")]
	[Address(RVA = "0x11EA8BC", Offset = "0x11EA8BC", VA = "0x11EA8BC")]
	private void OnParticleCollisionManual(GameObject other, int aliveParticles = -1)
	{
	}

	[Token(Token = "0x60005BD")]
	[Address(RVA = "0x11EACB8", Offset = "0x11EACB8", VA = "0x11EACB8")]
	private void OnParticleCollision(GameObject other)
	{
	}

	[Token(Token = "0x60005BE")]
	[Address(RVA = "0x11EAD7C", Offset = "0x11EAD7C", VA = "0x11EAD7C")]
	public RFX1_ParticleCollisionDecal()
	{
	}
}
[Token(Token = "0x20000FC")]
public class RFX1_ParticleCollisionGameObject : MonoBehaviour
{
	[Token(Token = "0x400077D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject InstancedGO;

	[Token(Token = "0x400077E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float DestroyDelay;

	[Token(Token = "0x400077F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private List<ParticleCollisionEvent> collisionEvents;

	[Token(Token = "0x4000780")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private ParticleSystem initiatorPS;

	[Token(Token = "0x60005BF")]
	[Address(RVA = "0x11EAE64", Offset = "0x11EAE64", VA = "0x11EAE64")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60005C0")]
	[Address(RVA = "0x11EAEE8", Offset = "0x11EAEE8", VA = "0x11EAEE8")]
	private void OnParticleCollision(GameObject other)
	{
	}

	[Token(Token = "0x60005C1")]
	[Address(RVA = "0x11EB060", Offset = "0x11EB060", VA = "0x11EB060")]
	public RFX1_ParticleCollisionGameObject()
	{
	}
}
[Token(Token = "0x20000FD")]
[ExecuteInEditMode]
public class RFX1_ParticleGravityPoint : MonoBehaviour
{
	[Token(Token = "0x4000781")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform target;

	[Token(Token = "0x4000782")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float Force;

	[Token(Token = "0x4000783")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AnimationCurve ForceByTime;

	[Token(Token = "0x4000784")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float ForceLifeTime;

	[Token(Token = "0x4000785")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private ParticleSystem ps;

	[Token(Token = "0x4000786")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private ParticleSystem.Particle[] particles;

	[Token(Token = "0x4000787")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private ParticleSystem.MainModule mainModule;

	[Token(Token = "0x4000788")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float startTime;

	[Token(Token = "0x60005C2")]
	[Address(RVA = "0x11EB0EC", Offset = "0x11EB0EC", VA = "0x11EB0EC")]
	private void Start()
	{
	}

	[Token(Token = "0x60005C3")]
	[Address(RVA = "0x11EB16C", Offset = "0x11EB16C", VA = "0x11EB16C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60005C4")]
	[Address(RVA = "0x11EB194", Offset = "0x11EB194", VA = "0x11EB194")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60005C5")]
	[Address(RVA = "0x11EB40C", Offset = "0x11EB40C", VA = "0x11EB40C")]
	public RFX1_ParticleGravityPoint()
	{
	}
}
[Token(Token = "0x20000FE")]
public class RFX1_ParticleInfinite : MonoBehaviour
{
	[Token(Token = "0x4000789")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float Delay;

	[Token(Token = "0x400078A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ParticleSystem ps;

	[Token(Token = "0x400078B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ParticleSystem.MainModule main;

	[Token(Token = "0x400078C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float oldSimulation;

	[Token(Token = "0x60005C6")]
	[Address(RVA = "0x11EB464", Offset = "0x11EB464", VA = "0x11EB464")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60005C7")]
	[Address(RVA = "0x11EB594", Offset = "0x11EB594", VA = "0x11EB594")]
	private void UpdateParticles()
	{
	}

	[Token(Token = "0x60005C8")]
	[Address(RVA = "0x11EB5A4", Offset = "0x11EB5A4", VA = "0x11EB5A4")]
	public RFX1_ParticleInfinite()
	{
	}
}
[Token(Token = "0x20000FF")]
public class RFX1_ParticlePositionPoint : MonoBehaviour
{
	[Token(Token = "0x400078D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	public Vector3 Position;

	[Token(Token = "0x400078E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public RFX1_ShieldCollisionTrigger ShieldCollisionTrigger;

	[Token(Token = "0x400078F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float Force;

	[Token(Token = "0x4000790")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AnimationCurve ForceByTime;

	[Token(Token = "0x4000791")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float ForceLifeTime;

	[Token(Token = "0x4000792")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private bool canUpdate;

	[Token(Token = "0x4000793")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private ParticleSystem ps;

	[Token(Token = "0x4000794")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private ParticleSystem.Particle[] particles;

	[Token(Token = "0x4000795")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private ParticleSystem.MainModule mainModule;

	[Token(Token = "0x4000796")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float startTime;

	[Token(Token = "0x60005C9")]
	[Address(RVA = "0x11EB5B4", Offset = "0x11EB5B4", VA = "0x11EB5B4")]
	private void Start()
	{
	}

	[Token(Token = "0x60005CA")]
	[Address(RVA = "0x11EB854", Offset = "0x11EB854", VA = "0x11EB854")]
	private void ShieldCollisionTrigger_Detected(object sender, RFX1_ShieldDetectInfo e)
	{
	}

	[Token(Token = "0x60005CB")]
	[Address(RVA = "0x11EB9A8", Offset = "0x11EB9A8", VA = "0x11EB9A8")]
	private void ShieldCollisionTrigger_CollisionEnter(object sender, RFX1_ShieldCollisionInfo e)
	{
	}

	[Token(Token = "0x60005CC")]
	[Address(RVA = "0x11EB930", Offset = "0x11EB930", VA = "0x11EB930")]
	public void ManualOnEnable()
	{
	}

	[Token(Token = "0x60005CD")]
	[Address(RVA = "0x11EB9E4", Offset = "0x11EB9E4", VA = "0x11EB9E4")]
	private void ManualOnDisable()
	{
	}

	[Token(Token = "0x60005CE")]
	[Address(RVA = "0x11EB9EC", Offset = "0x11EB9EC", VA = "0x11EB9EC")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60005CF")]
	[Address(RVA = "0x11EBC7C", Offset = "0x11EBC7C", VA = "0x11EBC7C")]
	public RFX1_ParticlePositionPoint()
	{
	}
}
[Token(Token = "0x2000100")]
public class RFX1_RandomRotate : MonoBehaviour
{
	[Token(Token = "0x4000797")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int x;

	[Token(Token = "0x4000798")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int y;

	[Token(Token = "0x4000799")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int z;

	[Token(Token = "0x400079A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float rangeX;

	[Token(Token = "0x400079B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float rangeY;

	[Token(Token = "0x400079C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float rangeZ;

	[Token(Token = "0x60005D0")]
	[Address(RVA = "0x11EBE84", Offset = "0x11EBE84", VA = "0x11EBE84")]
	private void Start()
	{
	}

	[Token(Token = "0x60005D1")]
	[Address(RVA = "0x11EBF04", Offset = "0x11EBF04", VA = "0x11EBF04")]
	private void Update()
	{
	}

	[Token(Token = "0x60005D2")]
	[Address(RVA = "0x11EBFF8", Offset = "0x11EBFF8", VA = "0x11EBFF8")]
	public RFX1_RandomRotate()
	{
	}
}
[Token(Token = "0x2000101")]
public class RFX1_RotationFreeze : MonoBehaviour
{
	[Token(Token = "0x400079D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool LockX;

	[Token(Token = "0x400079E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool LockY;

	[Token(Token = "0x400079F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	public bool LockZ;

	[Token(Token = "0x40007A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private Vector3 startRotation;

	[Token(Token = "0x60005D3")]
	[Address(RVA = "0x11EC500", Offset = "0x11EC500", VA = "0x11EC500")]
	private void Start()
	{
	}

	[Token(Token = "0x60005D4")]
	[Address(RVA = "0x11EC55C", Offset = "0x11EC55C", VA = "0x11EC55C")]
	private void Update()
	{
	}

	[Token(Token = "0x60005D5")]
	[Address(RVA = "0x11EC68C", Offset = "0x11EC68C", VA = "0x11EC68C")]
	public RFX1_RotationFreeze()
	{
	}
}
[Token(Token = "0x2000102")]
public class RFX1_ShieldCollisionTrigger : MonoBehaviour
{
	[Token(Token = "0x40007A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float DetectRange;

	[Token(Token = "0x40007A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject[] EffectOnCollision;

	[Token(Token = "0x40007A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float DestroyTimeDelay;

	[Token(Token = "0x40007A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public bool CollisionEffectInWorldSpace;

	[Token(Token = "0x40007A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float CollisionOffset;

	[Token(Token = "0x40007A8")]
	private const string layerName = "Collision";

	[Token(Token = "0x14000001")]
	public event EventHandler<RFX1_ShieldCollisionInfo> CollisionEnter
	{
		[Token(Token = "0x60005D6")]
		[Address(RVA = "0x11EB714", Offset = "0x11EB714", VA = "0x11EB714")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D7FC8", Offset = "0x5D7FC8")]
		add
		{
		}
		[Token(Token = "0x60005D7")]
		[Address(RVA = "0x11ED45C", Offset = "0x11ED45C", VA = "0x11ED45C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D7FD8", Offset = "0x5D7FD8")]
		remove
		{
		}
	}

	[Token(Token = "0x14000002")]
	public event EventHandler<RFX1_ShieldDetectInfo> Detected
	{
		[Token(Token = "0x60005D8")]
		[Address(RVA = "0x11EB7B4", Offset = "0x11EB7B4", VA = "0x11EB7B4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D7FE8", Offset = "0x5D7FE8")]
		add
		{
		}
		[Token(Token = "0x60005D9")]
		[Address(RVA = "0x11ED4FC", Offset = "0x11ED4FC", VA = "0x11ED4FC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D7FF8", Offset = "0x5D7FF8")]
		remove
		{
		}
	}

	[Token(Token = "0x60005DA")]
	[Address(RVA = "0x11ED59C", Offset = "0x11ED59C", VA = "0x11ED59C")]
	private void Start()
	{
	}

	[Token(Token = "0x60005DB")]
	[Address(RVA = "0x11ED5A0", Offset = "0x11ED5A0", VA = "0x11ED5A0")]
	private void Update()
	{
	}

	[Token(Token = "0x60005DC")]
	[Address(RVA = "0x11ED780", Offset = "0x11ED780", VA = "0x11ED780")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x60005DD")]
	[Address(RVA = "0x11ED7E8", Offset = "0x11ED7E8", VA = "0x11ED7E8")]
	public void OnCollision(RaycastHit hit, [Optional] GameObject sender)
	{
	}

	[Token(Token = "0x60005DE")]
	[Address(RVA = "0x11EDAB4", Offset = "0x11EDAB4", VA = "0x11EDAB4")]
	public RFX1_ShieldCollisionTrigger()
	{
	}
}
[Token(Token = "0x2000103")]
public class RFX1_ShieldCollisionInfo : EventArgs
{
	[Token(Token = "0x40007A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public RaycastHit Hit;

	[Token(Token = "0x60005DF")]
	[Address(RVA = "0x11ED3F8", Offset = "0x11ED3F8", VA = "0x11ED3F8")]
	public RFX1_ShieldCollisionInfo()
	{
	}
}
[Token(Token = "0x2000104")]
public class RFX1_ShieldDetectInfo : EventArgs
{
	[Token(Token = "0x40007AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public GameObject DetectedGameObject;

	[Token(Token = "0x60005E0")]
	[Address(RVA = "0x11ED71C", Offset = "0x11ED71C", VA = "0x11ED71C")]
	public RFX1_ShieldDetectInfo()
	{
	}
}
[Token(Token = "0x2000105")]
public class RFX1_SimpleDecal : MonoBehaviour
{
	[Token(Token = "0x40007AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float Offset;

	[Token(Token = "0x40007AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Transform t;

	[Token(Token = "0x40007AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private RaycastHit hit;

	[Token(Token = "0x60005E1")]
	[Address(RVA = "0x11EDE18", Offset = "0x11EDE18", VA = "0x11EDE18")]
	private void Awake()
	{
	}

	[Token(Token = "0x60005E2")]
	[Address(RVA = "0x11EDE48", Offset = "0x11EDE48", VA = "0x11EDE48")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60005E3")]
	[Address(RVA = "0x11EDFB0", Offset = "0x11EDFB0", VA = "0x11EDFB0")]
	public RFX1_SimpleDecal()
	{
	}
}
[Token(Token = "0x2000106")]
public class RFX1_StartDelay : MonoBehaviour
{
	[Token(Token = "0x40007AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject ActivatedGameObject;

	[Token(Token = "0x40007AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float Delay;

	[Token(Token = "0x60005E4")]
	[Address(RVA = "0x11EDFC4", Offset = "0x11EDFC4", VA = "0x11EDFC4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60005E5")]
	[Address(RVA = "0x11EE030", Offset = "0x11EE030", VA = "0x11EE030")]
	private void ActivateGO()
	{
	}

	[Token(Token = "0x60005E6")]
	[Address(RVA = "0x11EE050", Offset = "0x11EE050", VA = "0x11EE050")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60005E7")]
	[Address(RVA = "0x11EE0A0", Offset = "0x11EE0A0", VA = "0x11EE0A0")]
	public RFX1_StartDelay()
	{
	}
}
[Token(Token = "0x2000107")]
public enum RFX1_TextureShaderProperties
{
	[Token(Token = "0x40007B1")]
	_MainTex,
	[Token(Token = "0x40007B2")]
	_DistortTex,
	[Token(Token = "0x40007B3")]
	_Mask,
	[Token(Token = "0x40007B4")]
	_Cutout,
	[Token(Token = "0x40007B5")]
	_CutoutTex,
	[Token(Token = "0x40007B6")]
	_Bump,
	[Token(Token = "0x40007B7")]
	_BumpTex,
	[Token(Token = "0x40007B8")]
	_EmissionTex
}
[Token(Token = "0x2000108")]
public class RFX1_TransformMotion : MonoBehaviour
{
	[Token(Token = "0x20003A0")]
	public enum RFX4_SimulationSpace
	{
		[Token(Token = "0x40018E1")]
		Local,
		[Token(Token = "0x40018E2")]
		World
	}

	[Token(Token = "0x20003A1")]
	public class RFX1_CollisionInfo : EventArgs
	{
		[Token(Token = "0x40018E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public RaycastHit Hit;

		[Token(Token = "0x60019AA")]
		[Address(RVA = "0xFF1600", Offset = "0xFF1600", VA = "0xFF1600")]
		public RFX1_CollisionInfo()
		{
		}
	}

	[Token(Token = "0x40007B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float Distance;

	[Token(Token = "0x40007BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float Speed;

	[Token(Token = "0x40007BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float TimeDelay;

	[Token(Token = "0x40007BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float RandomMoveRadius;

	[Token(Token = "0x40007BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float RandomMoveSpeedScale;

	[Token(Token = "0x40007BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject Target;

	[Token(Token = "0x40007BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public LayerMask CollidesWith;

	[Token(Token = "0x40007C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject[] EffectsOnCollision;

	[Token(Token = "0x40007C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float CollisionOffset;

	[Token(Token = "0x40007C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float DestroyTimeDelay;

	[Token(Token = "0x40007C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public bool CollisionEffectInWorldSpace;

	[Token(Token = "0x40007C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject[] DeactivatedObjectsOnCollision;

	[Token(Token = "0x40007C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[HideInInspector]
	public float HUE;

	[Token(Token = "0x40007C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[HideInInspector]
	public List<GameObject> CollidedInstances;

	[Token(Token = "0x40007C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Vector3 startPosition;

	[Token(Token = "0x40007C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private Vector3 startPositionLocal;

	[Token(Token = "0x40007C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Transform t;

	[Token(Token = "0x40007CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Transform targetT;

	[Token(Token = "0x40007CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Vector3 oldPos;

	[Token(Token = "0x40007CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private bool isCollided;

	[Token(Token = "0x40007CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA5")]
	private bool isOutDistance;

	[Token(Token = "0x40007CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Quaternion startQuaternion;

	[Token(Token = "0x40007CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private float currentDelay;

	[Token(Token = "0x40007D0")]
	private const float RayCastTolerance = 0.15f;

	[Token(Token = "0x40007D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private bool isInitialized;

	[Token(Token = "0x40007D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBD")]
	private bool dropFirstFrameForFixUnityBugWithParticles;

	[Token(Token = "0x40007D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private Vector3 randomTimeOffset;

	[Token(Token = "0x14000003")]
	public event EventHandler<RFX1_CollisionInfo> CollisionEnter
	{
		[Token(Token = "0x60005E8")]
		[Address(RVA = "0x11E7E84", Offset = "0x11E7E84", VA = "0x11E7E84")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D8008", Offset = "0x5D8008")]
		add
		{
		}
		[Token(Token = "0x60005E9")]
		[Address(RVA = "0x11EE290", Offset = "0x11EE290", VA = "0x11EE290")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D8018", Offset = "0x5D8018")]
		remove
		{
		}
	}

	[Token(Token = "0x60005EA")]
	[Address(RVA = "0x11EE330", Offset = "0x11EE330", VA = "0x11EE330")]
	private void Start()
	{
	}

	[Token(Token = "0x60005EB")]
	[Address(RVA = "0x11EE514", Offset = "0x11EE514", VA = "0x11EE514")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60005EC")]
	[Address(RVA = "0x11EE524", Offset = "0x11EE524", VA = "0x11EE524")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60005ED")]
	[Address(RVA = "0x11EE468", Offset = "0x11EE468", VA = "0x11EE468")]
	private void Initialize()
	{
	}

	[Token(Token = "0x60005EE")]
	[Address(RVA = "0x11EE61C", Offset = "0x11EE61C", VA = "0x11EE61C")]
	private void Update()
	{
	}

	[Token(Token = "0x60005EF")]
	[Address(RVA = "0x11EE630", Offset = "0x11EE630", VA = "0x11EE630")]
	private void UpdateWorldPosition()
	{
	}

	[Token(Token = "0x60005F0")]
	[Address(RVA = "0x11EEDD0", Offset = "0x11EEDD0", VA = "0x11EEDD0")]
	private Vector3 GetRadiusRandomVector()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60005F1")]
	[Address(RVA = "0x11EEF14", Offset = "0x11EEF14", VA = "0x11EEF14")]
	private void OnCollisionBehaviour(RaycastHit hit)
	{
	}

	[Token(Token = "0x60005F2")]
	[Address(RVA = "0x11EE534", Offset = "0x11EE534", VA = "0x11EE534")]
	private void OnCollisionDeactivateBehaviour(bool active)
	{
	}

	[Token(Token = "0x60005F3")]
	[Address(RVA = "0x11EF2E4", Offset = "0x11EF2E4", VA = "0x11EF2E4")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x60005F4")]
	[Address(RVA = "0x11EF3E4", Offset = "0x11EF3E4", VA = "0x11EF3E4")]
	public RFX1_TransformMotion()
	{
	}
}
[Token(Token = "0x2000109")]
public class RFX1_UVAnimation : MonoBehaviour
{
	[Token(Token = "0x40007D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int TilesX;

	[Token(Token = "0x40007D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int TilesY;

	[Token(Token = "0x40007D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int FPS;

	[Token(Token = "0x40007D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float StartDelay;

	[Token(Token = "0x40007D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool IsLoop;

	[Token(Token = "0x40007DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool IsReverse;

	[Token(Token = "0x40007DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
	public bool IsInterpolateFrames;

	[Token(Token = "0x40007DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B")]
	public bool IsParticleSystemTrail;

	[Token(Token = "0x40007DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public RFX1_TextureShaderProperties[] TextureNames;

	[Token(Token = "0x40007DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AnimationCurve FrameOverTime;

	[Token(Token = "0x40007DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Renderer currentRenderer;

	[Token(Token = "0x40007E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Projector projector;

	[Token(Token = "0x40007E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Material instanceMaterial;

	[Token(Token = "0x40007E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float animationStartTime;

	[Token(Token = "0x40007E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private bool canUpdate;

	[Token(Token = "0x40007E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private int previousIndex;

	[Token(Token = "0x40007E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private int totalFrames;

	[Token(Token = "0x40007E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float currentInterpolatedTime;

	[Token(Token = "0x40007E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private int currentIndex;

	[Token(Token = "0x40007E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Vector2 size;

	[Token(Token = "0x40007E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private bool isInitialized;

	[Token(Token = "0x40007EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
	private bool startDelayIsBroken;

	[Token(Token = "0x40007EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private ParticleSystemRenderer pr;

	[Token(Token = "0x60005F5")]
	[Address(RVA = "0x11EF43C", Offset = "0x11EF43C", VA = "0x11EF43C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60005F6")]
	[Address(RVA = "0x11EF688", Offset = "0x11EF688", VA = "0x11EF688")]
	private void Start()
	{
	}

	[Token(Token = "0x60005F7")]
	[Address(RVA = "0x11EF6B0", Offset = "0x11EF6B0", VA = "0x11EF6B0")]
	private void Update()
	{
	}

	[Token(Token = "0x60005F8")]
	[Address(RVA = "0x11EF6C0", Offset = "0x11EF6C0", VA = "0x11EF6C0")]
	private void ManualUpdate()
	{
	}

	[Token(Token = "0x60005F9")]
	[Address(RVA = "0x11EFCB8", Offset = "0x11EFCB8", VA = "0x11EFCB8")]
	private void StartDelayFunc()
	{
	}

	[Token(Token = "0x60005FA")]
	[Address(RVA = "0x11EF44C", Offset = "0x11EF44C", VA = "0x11EF44C")]
	private void InitDefaultVariables()
	{
	}

	[Token(Token = "0x60005FB")]
	[Address(RVA = "0x11EFCE8", Offset = "0x11EFCE8", VA = "0x11EFCE8")]
	private void InitializeMaterial()
	{
	}

	[Token(Token = "0x60005FC")]
	[Address(RVA = "0x11EF708", Offset = "0x11EF708", VA = "0x11EF708")]
	private void UpdateMaterial()
	{
	}

	[Token(Token = "0x60005FD")]
	[Address(RVA = "0x11EF8EC", Offset = "0x11EF8EC", VA = "0x11EF8EC")]
	private void SetSpriteAnimation()
	{
	}

	[Token(Token = "0x60005FE")]
	[Address(RVA = "0x11EFB38", Offset = "0x11EFB38", VA = "0x11EFB38")]
	private void SetSpriteAnimationIterpolated()
	{
	}

	[Token(Token = "0x60005FF")]
	[Address(RVA = "0x11F0080", Offset = "0x11F0080", VA = "0x11F0080")]
	public RFX1_UVAnimation()
	{
	}
}
[Token(Token = "0x200010A")]
[ExecuteInEditMode]
public class RFX4_LocalSpaceFix : MonoBehaviour
{
	[Token(Token = "0x6000600")]
	[Address(RVA = "0x11F02D8", Offset = "0x11F02D8", VA = "0x11F02D8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000601")]
	[Address(RVA = "0x11F0464", Offset = "0x11F0464", VA = "0x11F0464")]
	public RFX4_LocalSpaceFix()
	{
	}
}
[Token(Token = "0x200010B")]
public class LoadSceneButton : MonoBehaviour
{
	[Token(Token = "0x6000602")]
	[Address(RVA = "0xA67520", Offset = "0xA67520", VA = "0xA67520")]
	public void LoadPrevious(UnityEngine.Object scene)
	{
	}

	[Token(Token = "0x6000603")]
	[Address(RVA = "0xA67638", Offset = "0xA67638", VA = "0xA67638")]
	public void LoadNext(UnityEngine.Object scene)
	{
	}

	[Token(Token = "0x6000604")]
	[Address(RVA = "0xA67750", Offset = "0xA67750", VA = "0xA67750")]
	public LoadSceneButton()
	{
	}
}
[Token(Token = "0x200010C")]
public class ExampleShowToPoint : MonoBehaviour
{
	[Token(Token = "0x6000605")]
	[Address(RVA = "0xA04400", Offset = "0xA04400", VA = "0xA04400")]
	public void ShowToPoint(LightningObject lightning)
	{
	}

	[Token(Token = "0x6000606")]
	[Address(RVA = "0xA04474", Offset = "0xA04474", VA = "0xA04474")]
	public ExampleShowToPoint()
	{
	}
}
[Token(Token = "0x200010D")]
public class ExampleShowToTarget : MonoBehaviour
{
	[Token(Token = "0x40007EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LightningObject lightning;

	[Token(Token = "0x6000607")]
	[Address(RVA = "0xA0447C", Offset = "0xA0447C", VA = "0xA0447C")]
	public void ShowToTarget(Transform target)
	{
	}

	[Token(Token = "0x6000608")]
	[Address(RVA = "0xA044F8", Offset = "0xA044F8", VA = "0xA044F8")]
	public ExampleShowToTarget()
	{
	}
}
[Token(Token = "0x200010E")]
public class ExampleTimeScaler : BaseLightningTimer
{
	[Token(Token = "0x40007ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text timeScaleText;

	[Token(Token = "0x6000609")]
	[Address(RVA = "0xA04500", Offset = "0xA04500", VA = "0xA04500", Slot = "4")]
	public override float GetDeltaTime()
	{
		return default(float);
	}

	[Token(Token = "0x600060A")]
	[Address(RVA = "0xA04518", Offset = "0xA04518", VA = "0xA04518")]
	public void SetTimeScale(Slider slider)
	{
	}

	[Token(Token = "0x600060B")]
	[Address(RVA = "0xA04560", Offset = "0xA04560", VA = "0xA04560")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600060C")]
	[Address(RVA = "0xA04610", Offset = "0xA04610", VA = "0xA04610")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600060D")]
	[Address(RVA = "0xA0461C", Offset = "0xA0461C", VA = "0xA0461C")]
	public ExampleTimeScaler()
	{
	}
}
[Token(Token = "0x200010F")]
public class ExampleToggleGameObjectState : MonoBehaviour
{
	[Token(Token = "0x600060E")]
	[Address(RVA = "0xA04624", Offset = "0xA04624", VA = "0xA04624")]
	public void ToggleState(GameObject toggleGameObject)
	{
	}

	[Token(Token = "0x600060F")]
	[Address(RVA = "0xA04664", Offset = "0xA04664", VA = "0xA04664")]
	public ExampleToggleGameObjectState()
	{
	}
}
[Token(Token = "0x2000110")]
public class randomrotation : MonoBehaviour
{
	[Token(Token = "0x40007EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Vector3 rotationAxis;

	[Token(Token = "0x40007EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float speed;

	[Token(Token = "0x40007F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Transform mineTransform;

	[Token(Token = "0x6000610")]
	[Address(RVA = "0x7E4800", Offset = "0x7E4800", VA = "0x7E4800")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000611")]
	[Address(RVA = "0x7E485C", Offset = "0x7E485C", VA = "0x7E485C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000612")]
	[Address(RVA = "0x7E48C4", Offset = "0x7E48C4", VA = "0x7E48C4")]
	public randomrotation()
	{
	}
}
[Token(Token = "0x2000111")]
public class BakeTexturesAtRuntime : MonoBehaviour
{
	[Token(Token = "0x40007F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject target;

	[Token(Token = "0x40007F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float elapsedTime;

	[Token(Token = "0x40007F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private MB3_TextureBaker.CreateAtlasesCoroutineResult result;

	[Token(Token = "0x6000613")]
	[Address(RVA = "0xC12E00", Offset = "0xC12E00", VA = "0xC12E00")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000614")]
	[Address(RVA = "0xC133F8", Offset = "0xC133F8", VA = "0xC133F8")]
	private void OnBuiltAtlasesSuccess()
	{
	}

	[Token(Token = "0x6000615")]
	[Address(RVA = "0xC13600", Offset = "0xC13600", VA = "0xC13600")]
	public BakeTexturesAtRuntime()
	{
	}
}
[Token(Token = "0x2000112")]
public class MB_BatchPrepareObjectsForDynamicBatchingDescription : MonoBehaviour
{
	[Token(Token = "0x6000616")]
	[Address(RVA = "0xF44868", Offset = "0xF44868", VA = "0xF44868")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000617")]
	[Address(RVA = "0xF44948", Offset = "0xF44948", VA = "0xF44948")]
	public MB_BatchPrepareObjectsForDynamicBatchingDescription()
	{
	}
}
[Token(Token = "0x2000113")]
public class MB_SwapShirts : MonoBehaviour
{
	[Token(Token = "0x40007F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public MB3_MeshBaker meshBaker;

	[Token(Token = "0x40007F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Renderer[] clothingAndBodyPartsBareTorso;

	[Token(Token = "0x40007F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Renderer[] clothingAndBodyPartsBareTorsoDamagedArm;

	[Token(Token = "0x40007F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Renderer[] clothingAndBodyPartsHoodie;

	[Token(Token = "0x6000618")]
	[Address(RVA = "0xF467B4", Offset = "0xF467B4", VA = "0xF467B4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000619")]
	[Address(RVA = "0xF46914", Offset = "0xF46914", VA = "0xF46914")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x600061A")]
	[Address(RVA = "0xF46B88", Offset = "0xF46B88", VA = "0xF46B88")]
	private void ChangeOutfit(Renderer[] outfit)
	{
	}

	[Token(Token = "0x600061B")]
	[Address(RVA = "0xF47114", Offset = "0xF47114", VA = "0xF47114")]
	public MB_SwapShirts()
	{
	}
}
[Token(Token = "0x2000114")]
public class MB_PrepareObjectsForDynamicBatchingDescription : MonoBehaviour
{
	[Token(Token = "0x600061C")]
	[Address(RVA = "0xF45720", Offset = "0xF45720", VA = "0xF45720")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x600061D")]
	[Address(RVA = "0xF45800", Offset = "0xF45800", VA = "0xF45800")]
	public MB_PrepareObjectsForDynamicBatchingDescription()
	{
	}
}
[Token(Token = "0x2000115")]
public class MB_DynamicAddDeleteExample : MonoBehaviour
{
	[Token(Token = "0x20003A2")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDD3C", Offset = "0x5CDD3C")]
	private sealed class <largeNumber>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40018E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40018E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40018E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MB_DynamicAddDeleteExample <>4__this;

		[Token(Token = "0x170002B1")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60019AE")]
			[Address(RVA = "0xFEC0D0", Offset = "0xFEC0D0", VA = "0xFEC0D0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002B2")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60019B0")]
			[Address(RVA = "0xFEC118", Offset = "0xFEC118", VA = "0xFEC118", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60019AB")]
		[Address(RVA = "0xFEBF24", Offset = "0xFEBF24", VA = "0xFEBF24")]
		[DebuggerHidden]
		public <largeNumber>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x60019AC")]
		[Address(RVA = "0xFEBF50", Offset = "0xFEBF50", VA = "0xFEBF50", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60019AD")]
		[Address(RVA = "0xFEBF54", Offset = "0xFEBF54", VA = "0xFEBF54", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60019AF")]
		[Address(RVA = "0xFEC0D8", Offset = "0xFEC0D8", VA = "0xFEC0D8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40007F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject prefab;

	[Token(Token = "0x40007F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<GameObject> objsInCombined;

	[Token(Token = "0x40007FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private MB3_MultiMeshBaker mbd;

	[Token(Token = "0x40007FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private GameObject[] objs;

	[Token(Token = "0x600061E")]
	[Address(RVA = "0xF44950", Offset = "0xF44950", VA = "0xF44950")]
	private float GaussianValue()
	{
		return default(float);
	}

	[Token(Token = "0x600061F")]
	[Address(RVA = "0xF449E8", Offset = "0xF449E8", VA = "0xF449E8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000620")]
	[Address(RVA = "0xF44DF8", Offset = "0xF44DF8", VA = "0xF44DF8")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D8028", Offset = "0x5D8028")]
	private IEnumerator largeNumber()
	{
		return null;
	}

	[Token(Token = "0x6000621")]
	[Address(RVA = "0xF44E70", Offset = "0xF44E70", VA = "0xF44E70")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000622")]
	[Address(RVA = "0xF44F50", Offset = "0xF44F50", VA = "0xF44F50")]
	public MB_DynamicAddDeleteExample()
	{
	}
}
[Token(Token = "0x2000116")]
public class MB_Example : MonoBehaviour
{
	[Token(Token = "0x40007FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public MB3_MeshBaker meshbaker;

	[Token(Token = "0x40007FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject[] objsToCombine;

	[Token(Token = "0x6000623")]
	[Address(RVA = "0xF44FD4", Offset = "0xF44FD4", VA = "0xF44FD4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000624")]
	[Address(RVA = "0xF45030", Offset = "0xF45030", VA = "0xF45030")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000625")]
	[Address(RVA = "0xF450E4", Offset = "0xF450E4", VA = "0xF450E4")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000626")]
	[Address(RVA = "0xF451C4", Offset = "0xF451C4", VA = "0xF451C4")]
	public MB_Example()
	{
	}
}
[Token(Token = "0x2000117")]
public class MB_ExampleMover : MonoBehaviour
{
	[Token(Token = "0x40007FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int axis;

	[Token(Token = "0x6000627")]
	[Address(RVA = "0xF451CC", Offset = "0xF451CC", VA = "0xF451CC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000628")]
	[Address(RVA = "0xF45264", Offset = "0xF45264", VA = "0xF45264")]
	public MB_ExampleMover()
	{
	}
}
[Token(Token = "0x2000118")]
public class MB_ExampleSkinnedMeshDescription : MonoBehaviour
{
	[Token(Token = "0x6000629")]
	[Address(RVA = "0xF4526C", Offset = "0xF4526C", VA = "0xF4526C")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x600062A")]
	[Address(RVA = "0xF4534C", Offset = "0xF4534C", VA = "0xF4534C")]
	public MB_ExampleSkinnedMeshDescription()
	{
	}
}
[Token(Token = "0x2000119")]
public class MB_SkinnedMeshSceneController : MonoBehaviour
{
	[Token(Token = "0x40007FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject swordPrefab;

	[Token(Token = "0x4000800")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject hatPrefab;

	[Token(Token = "0x4000801")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject glassesPrefab;

	[Token(Token = "0x4000802")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject workerPrefab;

	[Token(Token = "0x4000803")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject targetCharacter;

	[Token(Token = "0x4000804")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public MB3_MeshBaker skinnedMeshBaker;

	[Token(Token = "0x4000805")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private GameObject swordInstance;

	[Token(Token = "0x4000806")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private GameObject glassesInstance;

	[Token(Token = "0x4000807")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private GameObject hatInstance;

	[Token(Token = "0x600062B")]
	[Address(RVA = "0xF45808", Offset = "0xF45808", VA = "0xF45808")]
	private void Start()
	{
	}

	[Token(Token = "0x600062C")]
	[Address(RVA = "0xF45A08", Offset = "0xF45A08", VA = "0xF45A08")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x600062D")]
	[Address(RVA = "0xF46694", Offset = "0xF46694", VA = "0xF46694")]
	public Transform SearchHierarchyForBone(Transform current, string name)
	{
		return null;
	}

	[Token(Token = "0x600062E")]
	[Address(RVA = "0xF467AC", Offset = "0xF467AC", VA = "0xF467AC")]
	public MB_SkinnedMeshSceneController()
	{
	}
}
[Serializable]
[Token(Token = "0x200011A")]
public class MB_AtlasesAndRects
{
	[Token(Token = "0x4000808")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Texture2D[] atlases;

	[NonSerialized]
	[Token(Token = "0x4000809")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<MB_MaterialAndUVRect> mat2rect_map;

	[Token(Token = "0x400080A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string[] texPropertyNames;

	[Token(Token = "0x600062F")]
	[Address(RVA = "0xF44860", Offset = "0xF44860", VA = "0xF44860")]
	public MB_AtlasesAndRects()
	{
	}
}
[Serializable]
[Token(Token = "0x200011B")]
public class MB_MultiMaterial
{
	[Token(Token = "0x400080B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Material combinedMaterial;

	[Token(Token = "0x400080C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool considerMeshUVs;

	[Token(Token = "0x400080D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<Material> sourceMaterials;

	[Token(Token = "0x6000630")]
	[Address(RVA = "0xF4569C", Offset = "0xF4569C", VA = "0xF4569C")]
	public MB_MultiMaterial()
	{
	}
}
[Serializable]
[Token(Token = "0x200011C")]
public class MB_MaterialAndUVRect
{
	[Token(Token = "0x400080E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Material material;

	[Token(Token = "0x400080F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Rect atlasRect;

	[Token(Token = "0x4000810")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string srcObjName;

	[Token(Token = "0x4000811")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool allPropsUseSameTiling;

	[Token(Token = "0x4000812")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x5CF0CC", Offset = "0x5CF0CC")]
	public Rect allPropsUseSameTiling_sourceMaterialTiling;

	[Token(Token = "0x4000813")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x5CF104", Offset = "0x5CF104")]
	public Rect allPropsUseSameTiling_samplingEncapsulatinRect;

	[Token(Token = "0x4000814")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public Rect propsUseDifferntTiling_srcUVsamplingRect;

	[Token(Token = "0x4000815")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public MB_TextureTilingTreatment tilingTreatment;

	[Token(Token = "0x6000631")]
	[Address(RVA = "0xF45354", Offset = "0xF45354", VA = "0xF45354")]
	public MB_MaterialAndUVRect(Material mat, Rect destRect, bool allPropsUseSameTiling, Rect sourceMaterialTiling, Rect samplingEncapsulatingRect, Rect srcUVsamplingRect, MB_TextureTilingTreatment treatment, string objName)
	{
	}

	[Token(Token = "0x6000632")]
	[Address(RVA = "0xF45448", Offset = "0xF45448", VA = "0xF45448", Slot = "2")]
	public override int GetHashCode()
	{
		return default(int);
	}

	[Token(Token = "0x6000633")]
	[Address(RVA = "0xF454A8", Offset = "0xF454A8", VA = "0xF454A8", Slot = "0")]
	public override bool Equals(object obj)
	{
		return default(bool);
	}

	[Token(Token = "0x6000634")]
	[Address(RVA = "0xF455F0", Offset = "0xF455F0", VA = "0xF455F0")]
	public Rect GetEncapsulatingRect()
	{
		return default(Rect);
	}

	[Token(Token = "0x6000635")]
	[Address(RVA = "0xF45630", Offset = "0xF45630", VA = "0xF45630")]
	public Rect GetMaterialTilingRect()
	{
		return default(Rect);
	}
}
[Token(Token = "0x200011D")]
public class MB2_TextureBakeResults : ScriptableObject
{
	[Token(Token = "0x20003A3")]
	public class Material2AtlasRectangleMapper
	{
		[Token(Token = "0x40018E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private MB2_TextureBakeResults tbr;

		[Token(Token = "0x40018E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int[] numTimesMatAppearsInAtlas;

		[Token(Token = "0x40018E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private MB_MaterialAndUVRect[] matsAndSrcUVRect;

		[Token(Token = "0x60019B1")]
		[Address(RVA = "0x7F0890", Offset = "0x7F0890", VA = "0x7F0890")]
		public Material2AtlasRectangleMapper(MB2_TextureBakeResults res)
		{
		}

		[Token(Token = "0x60019B2")]
		[Address(RVA = "0x7F0B20", Offset = "0x7F0B20", VA = "0x7F0B20")]
		public bool TryMapMaterialToUVRect(Material mat, Mesh m, int submeshIdx, int idxInResultMats, MB3_MeshCombinerSingle.MeshChannelsCache meshChannelCache, Dictionary<int, MB_Utility.MeshAnalysisResult[]> meshAnalysisCache, out MB_TextureTilingTreatment tilingTreatment, out Rect rectInAtlas, out Rect encapsulatingRectOut, out Rect sourceMaterialTilingOut, ref string errorMsg, MB2_LogLevel logLevel)
		{
			return default(bool);
		}

		[Token(Token = "0x60019B3")]
		[Address(RVA = "0x7F13CC", Offset = "0x7F13CC", VA = "0x7F13CC")]
		private void UpgradeToCurrentVersion(MB2_TextureBakeResults tbr)
		{
		}
	}

	[Token(Token = "0x4000816")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int version;

	[Token(Token = "0x4000817")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MB_MaterialAndUVRect[] materialsAndUVRects;

	[Token(Token = "0x4000818")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public MB_MultiMaterial[] resultMaterials;

	[Token(Token = "0x4000819")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool doMultiMaterial;

	[Token(Token = "0x17000009")]
	public static int VERSION
	{
		[Token(Token = "0x6000636")]
		[Address(RVA = "0xF91A88", Offset = "0xF91A88", VA = "0xF91A88")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x6000637")]
	[Address(RVA = "0xF91A90", Offset = "0xF91A90", VA = "0xF91A90")]
	public MB2_TextureBakeResults()
	{
	}

	[Token(Token = "0x6000638")]
	[Address(RVA = "0xF91ABC", Offset = "0xF91ABC", VA = "0xF91ABC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000639")]
	[Address(RVA = "0xF91B30", Offset = "0xF91B30", VA = "0xF91B30")]
	public static MB2_TextureBakeResults CreateForMaterialsOnRenderer(GameObject[] gos, List<Material> matsOnTargetRenderer)
	{
		return null;
	}

	[Token(Token = "0x600063A")]
	[Address(RVA = "0xF92354", Offset = "0xF92354", VA = "0xF92354")]
	public bool DoAnyResultMatsUseConsiderMeshUVs()
	{
		return default(bool);
	}

	[Token(Token = "0x600063B")]
	[Address(RVA = "0xF923C0", Offset = "0xF923C0", VA = "0xF923C0")]
	public bool ContainsMaterial(Material m)
	{
		return default(bool);
	}

	[Token(Token = "0x600063C")]
	[Address(RVA = "0xF9249C", Offset = "0xF9249C", VA = "0xF9249C")]
	public string GetDescription()
	{
		return null;
	}

	[Token(Token = "0x600063D")]
	[Address(RVA = "0xF928B4", Offset = "0xF928B4", VA = "0xF928B4")]
	public static bool IsMeshAndMaterialRectEnclosedByAtlasRect(MB_TextureTilingTreatment tilingTreatment, Rect uvR, Rect sourceMaterialTiling, Rect samplingEncapsulatinRect, MB2_LogLevel logLevel)
	{
		return default(bool);
	}
}
[Token(Token = "0x200011E")]
public class MB2_UpdateSkinnedMeshBoundsFromBones : MonoBehaviour
{
	[Token(Token = "0x400081A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private SkinnedMeshRenderer smr;

	[Token(Token = "0x400081B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Transform[] bones;

	[Token(Token = "0x600063E")]
	[Address(RVA = "0xF9A500", Offset = "0xF9A500", VA = "0xF9A500")]
	private void Start()
	{
	}

	[Token(Token = "0x600063F")]
	[Address(RVA = "0xF9A668", Offset = "0xF9A668", VA = "0xF9A668")]
	private void Update()
	{
	}

	[Token(Token = "0x6000640")]
	[Address(RVA = "0xF9A6F0", Offset = "0xF9A6F0", VA = "0xF9A6F0")]
	public MB2_UpdateSkinnedMeshBoundsFromBones()
	{
	}
}
[Token(Token = "0x200011F")]
public class MB2_UpdateSkinnedMeshBoundsFromBounds : MonoBehaviour
{
	[Token(Token = "0x400081C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<GameObject> objects;

	[Token(Token = "0x400081D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private SkinnedMeshRenderer smr;

	[Token(Token = "0x6000641")]
	[Address(RVA = "0xF9A6F8", Offset = "0xF9A6F8", VA = "0xF9A6F8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000642")]
	[Address(RVA = "0xF9AA2C", Offset = "0xF9AA2C", VA = "0xF9AA2C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000643")]
	[Address(RVA = "0xF9AABC", Offset = "0xF9AABC", VA = "0xF9AABC")]
	public MB2_UpdateSkinnedMeshBoundsFromBounds()
	{
	}
}
[Token(Token = "0x2000120")]
public class MB3_BatchPrefabBaker : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x20003A4")]
	public class MB3_PrefabBakerRow
	{
		[Token(Token = "0x40018EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GameObject sourcePrefab;

		[Token(Token = "0x40018EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject resultPrefab;

		[Token(Token = "0x60019B4")]
		[Address(RVA = "0x7F222C", Offset = "0x7F222C", VA = "0x7F222C")]
		public MB3_PrefabBakerRow()
		{
		}
	}

	[Token(Token = "0x400081E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public MB2_LogLevel LOG_LEVEL;

	[Token(Token = "0x400081F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MB3_PrefabBakerRow[] prefabRows;

	[Token(Token = "0x4000820")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string outputPrefabFolder;

	[Token(Token = "0x6000644")]
	[Address(RVA = "0xF9C5E8", Offset = "0xF9C5E8", VA = "0xF9C5E8")]
	public MB3_BatchPrefabBaker()
	{
	}
}
[Token(Token = "0x2000121")]
public class MB3_BoneWeightCopier : MonoBehaviour
{
	[Token(Token = "0x4000821")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject inputGameObject;

	[Token(Token = "0x4000822")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject outputPrefab;

	[Token(Token = "0x4000823")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float radius;

	[Token(Token = "0x4000824")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public SkinnedMeshRenderer seamMesh;

	[Token(Token = "0x4000825")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public string outputFolder;

	[Token(Token = "0x6000645")]
	[Address(RVA = "0xF9C5F8", Offset = "0xF9C5F8", VA = "0xF9C5F8")]
	public MB3_BoneWeightCopier()
	{
	}
}
[Token(Token = "0x2000122")]
public class MB3_DisableHiddenAnimations : MonoBehaviour
{
	[Token(Token = "0x4000826")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<Animation> animationsToCull;

	[Token(Token = "0x6000646")]
	[Address(RVA = "0xF9CFBC", Offset = "0xF9CFBC", VA = "0xF9CFBC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000647")]
	[Address(RVA = "0xF9D0E8", Offset = "0xF9D0E8", VA = "0xF9D0E8")]
	private void OnBecameVisible()
	{
	}

	[Token(Token = "0x6000648")]
	[Address(RVA = "0xF9D1FC", Offset = "0xF9D1FC", VA = "0xF9D1FC")]
	private void OnBecameInvisible()
	{
	}

	[Token(Token = "0x6000649")]
	[Address(RVA = "0xF9D310", Offset = "0xF9D310", VA = "0xF9D310")]
	public MB3_DisableHiddenAnimations()
	{
	}
}
[Token(Token = "0x2000123")]
public class MB3_MeshBaker : MB3_MeshBakerCommon
{
	[Token(Token = "0x4000827")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	protected MB3_MeshCombinerSingle _meshCombiner;

	[Token(Token = "0x1700000A")]
	public override MB3_MeshCombiner meshCombiner
	{
		[Token(Token = "0x600064A")]
		[Address(RVA = "0xF9E1AC", Offset = "0xF9E1AC", VA = "0xF9E1AC", Slot = "7")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600064B")]
	[Address(RVA = "0xF9E1B4", Offset = "0xF9E1B4", VA = "0xF9E1B4")]
	public void BuildSceneMeshObject()
	{
	}

	[Token(Token = "0x600064C")]
	[Address(RVA = "0xF9E1D8", Offset = "0xF9E1D8", VA = "0xF9E1D8", Slot = "23")]
	public virtual bool ShowHide(GameObject[] gos, GameObject[] deleteGOs)
	{
		return default(bool);
	}

	[Token(Token = "0x600064D")]
	[Address(RVA = "0xF9E1F4", Offset = "0xF9E1F4", VA = "0xF9E1F4", Slot = "24")]
	public virtual void ApplyShowHide()
	{
	}

	[Token(Token = "0x600064E")]
	[Address(RVA = "0xF9E218", Offset = "0xF9E218", VA = "0xF9E218", Slot = "13")]
	public override bool AddDeleteGameObjects(GameObject[] gos, GameObject[] deleteGOs, bool disableRendererInSource)
	{
		return default(bool);
	}

	[Token(Token = "0x600064F")]
	[Address(RVA = "0xF9E2CC", Offset = "0xF9E2CC", VA = "0xF9E2CC", Slot = "14")]
	public override bool AddDeleteGameObjectsByID(GameObject[] gos, int[] deleteGOinstanceIDs, bool disableRendererInSource)
	{
		return default(bool);
	}

	[Token(Token = "0x6000650")]
	[Address(RVA = "0xF9E380", Offset = "0xF9E380", VA = "0xF9E380")]
	public MB3_MeshBaker()
	{
	}
}
[Token(Token = "0x2000124")]
public abstract class MB3_MeshBakerCommon : MB3_MeshBakerRoot
{
	[Token(Token = "0x4000828")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<GameObject> objsToMesh;

	[Token(Token = "0x4000829")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool useObjsToMeshFromTexBaker;

	[Token(Token = "0x400082A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	public bool clearBuffersAfterBake;

	[Token(Token = "0x400082B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public string bakeAssetsInPlaceFolderPath;

	[Token(Token = "0x400082C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[HideInInspector]
	public GameObject resultPrefab;

	[Token(Token = "0x1700000B")]
	public abstract MB3_MeshCombiner meshCombiner
	{
		[Token(Token = "0x6000651")]
		get;
	}

	[Token(Token = "0x1700000C")]
	public override MB2_TextureBakeResults textureBakeResults
	{
		[Token(Token = "0x6000652")]
		[Address(RVA = "0xF9E458", Offset = "0xF9E458", VA = "0xF9E458", Slot = "4")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000653")]
		[Address(RVA = "0xF9E484", Offset = "0xF9E484", VA = "0xF9E484", Slot = "5")]
		set
		{
		}
	}

	[Token(Token = "0x6000654")]
	[Address(RVA = "0xF9E4C4", Offset = "0xF9E4C4", VA = "0xF9E4C4", Slot = "6")]
	public override List<GameObject> GetObjectsToCombine()
	{
		return null;
	}

	[Token(Token = "0x6000655")]
	[Address(RVA = "0xF9E6E0", Offset = "0xF9E6E0", VA = "0xF9E6E0")]
	public void EnableDisableSourceObjectRenderers(bool show)
	{
	}

	[Token(Token = "0x6000656")]
	[Address(RVA = "0xF9E9E0", Offset = "0xF9E9E0", VA = "0xF9E9E0", Slot = "8")]
	public virtual void ClearMesh()
	{
	}

	[Token(Token = "0x6000657")]
	[Address(RVA = "0xF9EA10", Offset = "0xF9EA10", VA = "0xF9EA10", Slot = "9")]
	public virtual void DestroyMesh()
	{
	}

	[Token(Token = "0x6000658")]
	[Address(RVA = "0xF9EA40", Offset = "0xF9EA40", VA = "0xF9EA40", Slot = "10")]
	public virtual void DestroyMeshEditor(MB2_EditorMethodsInterface editorMethods)
	{
	}

	[Token(Token = "0x6000659")]
	[Address(RVA = "0xF9EA84", Offset = "0xF9EA84", VA = "0xF9EA84", Slot = "11")]
	public virtual int GetNumObjectsInCombined()
	{
		return default(int);
	}

	[Token(Token = "0x600065A")]
	[Address(RVA = "0xF9EAB4", Offset = "0xF9EAB4", VA = "0xF9EAB4", Slot = "12")]
	public virtual int GetNumVerticesFor(GameObject go)
	{
		return default(int);
	}

	[Token(Token = "0x600065B")]
	[Address(RVA = "0xF9EAF8", Offset = "0xF9EAF8", VA = "0xF9EAF8")]
	public MB3_TextureBaker GetTextureBaker()
	{
		return null;
	}

	[Token(Token = "0x600065C")]
	public abstract bool AddDeleteGameObjects(GameObject[] gos, GameObject[] deleteGOs, bool disableRendererInSource = true);

	[Token(Token = "0x600065D")]
	public abstract bool AddDeleteGameObjectsByID(GameObject[] gos, int[] deleteGOinstanceIDs, bool disableRendererInSource = true);

	[Token(Token = "0x600065E")]
	[Address(RVA = "0xF9EC18", Offset = "0xF9EC18", VA = "0xF9EC18", Slot = "15")]
	public virtual void Apply([Optional] MB3_MeshCombiner.GenerateUV2Delegate uv2GenerationMethod)
	{
	}

	[Token(Token = "0x600065F")]
	[Address(RVA = "0xF9ECD0", Offset = "0xF9ECD0", VA = "0xF9ECD0", Slot = "16")]
	public virtual void Apply(bool triangles, bool vertices, bool normals, bool tangents, bool uvs, bool uv2, bool uv3, bool uv4, bool colors, bool bones = false, bool blendShapesFlag = false, [Optional] MB3_MeshCombiner.GenerateUV2Delegate uv2GenerationMethod)
	{
	}

	[Token(Token = "0x6000660")]
	[Address(RVA = "0xF9EE20", Offset = "0xF9EE20", VA = "0xF9EE20", Slot = "17")]
	public virtual bool CombinedMeshContains(GameObject go)
	{
		return default(bool);
	}

	[Token(Token = "0x6000661")]
	[Address(RVA = "0xF9EE64", Offset = "0xF9EE64", VA = "0xF9EE64", Slot = "18")]
	public virtual void UpdateGameObjects(GameObject[] gos, bool recalcBounds = true, bool updateVertices = true, bool updateNormals = true, bool updateTangents = true, bool updateUV = false, bool updateUV1 = false, bool updateUV2 = false, bool updateColors = false, bool updateSkinningInfo = false)
	{
	}

	[Token(Token = "0x6000662")]
	[Address(RVA = "0xF9EF9C", Offset = "0xF9EF9C", VA = "0xF9EF9C", Slot = "19")]
	public virtual void UpdateSkinnedMeshApproximateBounds()
	{
	}

	[Token(Token = "0x6000663")]
	[Address(RVA = "0xF9EFFC", Offset = "0xF9EFFC", VA = "0xF9EFFC", Slot = "20")]
	public virtual void UpdateSkinnedMeshApproximateBoundsFromBones()
	{
	}

	[Token(Token = "0x6000664")]
	[Address(RVA = "0xF9F05C", Offset = "0xF9F05C", VA = "0xF9F05C", Slot = "21")]
	public virtual void UpdateSkinnedMeshApproximateBoundsFromBounds()
	{
	}

	[Token(Token = "0x6000665")]
	[Address(RVA = "0xF9F0BC", Offset = "0xF9F0BC", VA = "0xF9F0BC", Slot = "22")]
	protected virtual bool _ValidateForUpdateSkinnedMeshBounds()
	{
		return default(bool);
	}

	[Token(Token = "0x6000666")]
	[Address(RVA = "0xF9E3EC", Offset = "0xF9E3EC", VA = "0xF9E3EC")]
	protected MB3_MeshBakerCommon()
	{
	}
}
[Token(Token = "0x2000125")]
public class MB3_MeshBakerGrouper : MonoBehaviour
{
	[Token(Token = "0x20003A5")]
	public enum ClusterType
	{
		[Token(Token = "0x40018ED")]
		none,
		[Token(Token = "0x40018EE")]
		grid,
		[Token(Token = "0x40018EF")]
		pie,
		[Token(Token = "0x40018F0")]
		agglomerative
	}

	[Token(Token = "0x400082D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public MB3_MeshBakerGrouperCore grouper;

	[Token(Token = "0x400082E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ClusterType clusterType;

	[Token(Token = "0x400082F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GrouperData data;

	[Token(Token = "0x4000830")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	public Bounds sourceObjectBounds;

	[Token(Token = "0x6000667")]
	[Address(RVA = "0xF9F2C8", Offset = "0xF9F2C8", VA = "0xF9F2C8")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x6000668")]
	[Address(RVA = "0xF9F398", Offset = "0xF9F398", VA = "0xF9F398")]
	public MB3_MeshBakerGrouperCore CreateGrouper(ClusterType t, GrouperData data)
	{
		return null;
	}

	[Token(Token = "0x6000669")]
	[Address(RVA = "0xF9F634", Offset = "0xF9F634", VA = "0xF9F634")]
	public MB3_MeshBakerGrouper()
	{
	}
}
[Token(Token = "0x2000126")]
public abstract class MB3_MeshBakerRoot : MonoBehaviour
{
	[Token(Token = "0x20003A6")]
	public class ZSortObjects
	{
		[Token(Token = "0x20004F5")]
		public class Item
		{
			[Token(Token = "0x4001EF9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public GameObject go;

			[Token(Token = "0x4001EFA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Vector3 point;

			[Token(Token = "0x6001DA3")]
			[Address(RVA = "0x138D080", Offset = "0x138D080", VA = "0x138D080")]
			public Item()
			{
			}
		}

		[Token(Token = "0x20004F6")]
		public class ItemComparer : IComparer<Item>
		{
			[Token(Token = "0x6001DA4")]
			[Address(RVA = "0x138D088", Offset = "0x138D088", VA = "0x138D088", Slot = "4")]
			public int Compare(Item a, Item b)
			{
				return default(int);
			}

			[Token(Token = "0x6001DA5")]
			[Address(RVA = "0x138D0BC", Offset = "0x138D0BC", VA = "0x138D0BC")]
			public ItemComparer()
			{
			}
		}

		[Token(Token = "0x40018F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 sortAxis;

		[Token(Token = "0x60019B5")]
		[Address(RVA = "0x7F24E0", Offset = "0x7F24E0", VA = "0x7F24E0")]
		public void SortByDistanceAlongAxis(List<GameObject> gos)
		{
		}

		[Token(Token = "0x60019B6")]
		[Address(RVA = "0x7F2904", Offset = "0x7F2904", VA = "0x7F2904")]
		public ZSortObjects()
		{
		}
	}

	[Token(Token = "0x4000831")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool DO_INTEGRITY_CHECKS;

	[Token(Token = "0x4000832")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 sortAxis;

	[Token(Token = "0x1700000D")]
	[HideInInspector]
	public abstract MB2_TextureBakeResults textureBakeResults
	{
		[Token(Token = "0x600066A")]
		get;
		[Token(Token = "0x600066B")]
		set;
	}

	[Token(Token = "0x600066C")]
	[Address(RVA = "0x1294790", Offset = "0x1294790", VA = "0x1294790", Slot = "6")]
	public virtual List<GameObject> GetObjectsToCombine()
	{
		return null;
	}

	[Token(Token = "0x600066D")]
	[Address(RVA = "0x1294798", Offset = "0x1294798", VA = "0x1294798")]
	public static bool DoCombinedValidate(MB3_MeshBakerRoot mom, MB_ObjsToCombineTypes objToCombineType, MB2_EditorMethodsInterface editorMethods, MB2_ValidationLevel validationLevel)
	{
		return default(bool);
	}

	[Token(Token = "0x600066E")]
	[Address(RVA = "0x1295144", Offset = "0x1295144", VA = "0x1295144")]
	protected MB3_MeshBakerRoot()
	{
	}
}
[Token(Token = "0x2000127")]
public class MB3_MultiMeshBaker : MB3_MeshBakerCommon
{
	[Token(Token = "0x4000833")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	protected MB3_MultiMeshCombiner _meshCombiner;

	[Token(Token = "0x1700000E")]
	public override MB3_MeshCombiner meshCombiner
	{
		[Token(Token = "0x6000670")]
		[Address(RVA = "0x12A5418", Offset = "0x12A5418", VA = "0x12A5418", Slot = "7")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000671")]
	[Address(RVA = "0x12A5420", Offset = "0x12A5420", VA = "0x12A5420", Slot = "13")]
	public override bool AddDeleteGameObjects(GameObject[] gos, GameObject[] deleteGOs, bool disableRendererInSource)
	{
		return default(bool);
	}

	[Token(Token = "0x6000672")]
	[Address(RVA = "0x12A55CC", Offset = "0x12A55CC", VA = "0x12A55CC", Slot = "14")]
	public override bool AddDeleteGameObjectsByID(GameObject[] gos, int[] deleteGOs, bool disableRendererInSource)
	{
		return default(bool);
	}

	[Token(Token = "0x6000673")]
	[Address(RVA = "0x12A5778", Offset = "0x12A5778", VA = "0x12A5778")]
	public MB3_MultiMeshBaker()
	{
	}
}
[Token(Token = "0x2000128")]
public class MB3_TextureBaker : MB3_MeshBakerRoot
{
	[Token(Token = "0x20003A7")]
	public delegate void OnCombinedTexturesCoroutineSuccess();

	[Token(Token = "0x20003A8")]
	public delegate void OnCombinedTexturesCoroutineFail();

	[Token(Token = "0x20003A9")]
	public class CreateAtlasesCoroutineResult
	{
		[Token(Token = "0x40018F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool success;

		[Token(Token = "0x40018F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool isFinished;

		[Token(Token = "0x60019BF")]
		[Address(RVA = "0x7F7CCC", Offset = "0x7F7CCC", VA = "0x7F7CCC")]
		public CreateAtlasesCoroutineResult()
		{
		}
	}

	[Token(Token = "0x20003AA")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDD4C", Offset = "0x5CDD4C")]
	private sealed class <CreateAtlasesCoroutine>d__94 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40018F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40018F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40018F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CreateAtlasesCoroutineResult coroutineResult;

		[Token(Token = "0x40018F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public MB3_TextureBaker <>4__this;

		[Token(Token = "0x40018F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float maxTimePerFrame;

		[Token(Token = "0x40018F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool saveAtlasesAsAssets;

		[Token(Token = "0x40018FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public ProgressUpdateDelegate progressInfo;

		[Token(Token = "0x40018FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public MB2_EditorMethodsInterface editorMethods;

		[Token(Token = "0x40018FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private MB3_TextureCombiner <combiner>5__2;

		[Token(Token = "0x40018FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int <i>5__3;

		[Token(Token = "0x40018FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private MB3_TextureCombiner.CombineTexturesIntoAtlasesCoroutineResult <coroutineResult2>5__4;

		[Token(Token = "0x170002B3")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60019C3")]
			[Address(RVA = "0x7F7C7C", Offset = "0x7F7C7C", VA = "0x7F7C7C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002B4")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60019C5")]
			[Address(RVA = "0x7F7CC4", Offset = "0x7F7CC4", VA = "0x7F7CC4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60019C0")]
		[Address(RVA = "0x7F6B44", Offset = "0x7F6B44", VA = "0x7F6B44")]
		[DebuggerHidden]
		public <CreateAtlasesCoroutine>d__94(int <>1__state)
		{
		}

		[Token(Token = "0x60019C1")]
		[Address(RVA = "0x7F6B70", Offset = "0x7F6B70", VA = "0x7F6B70", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60019C2")]
		[Address(RVA = "0x7F6B74", Offset = "0x7F6B74", VA = "0x7F6B74", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60019C4")]
		[Address(RVA = "0x7F7C84", Offset = "0x7F7C84", VA = "0x7F7C84", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000834")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public MB2_LogLevel LOG_LEVEL;

	[Token(Token = "0x4000835")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	protected MB2_TextureBakeResults _textureBakeResults;

	[Token(Token = "0x4000836")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	protected int _atlasPadding;

	[Token(Token = "0x4000837")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	protected int _maxAtlasSize;

	[Token(Token = "0x4000838")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	protected bool _useMaxAtlasWidthOverride;

	[Token(Token = "0x4000839")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SerializeField]
	protected int _maxAtlasWidthOverride;

	[Token(Token = "0x400083A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	protected bool _useMaxAtlasHeightOverride;

	[Token(Token = "0x400083B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	protected int _maxAtlasHeightOverride;

	[Token(Token = "0x400083C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	protected bool _resizePowerOfTwoTextures;

	[Token(Token = "0x400083D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	[SerializeField]
	protected bool _fixOutOfBoundsUVs;

	[Token(Token = "0x400083E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[SerializeField]
	protected int _maxTilingBakeSize;

	[Token(Token = "0x400083F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	protected MB2_PackingAlgorithmEnum _packingAlgorithm;

	[Token(Token = "0x4000840")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[SerializeField]
	protected bool _meshBakerTexturePackerForcePowerOfTwo;

	[Token(Token = "0x4000841")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	protected List<ShaderTextureProperty> _customShaderProperties;

	[Token(Token = "0x4000842")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	protected List<string> _customShaderPropNames_Depricated;

	[Token(Token = "0x4000843")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	protected bool _doMultiMaterial;

	[Token(Token = "0x4000844")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
	[SerializeField]
	protected bool _doMultiMaterialSplitAtlasesIfTooBig;

	[Token(Token = "0x4000845")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6A")]
	[SerializeField]
	protected bool _doMultiMaterialSplitAtlasesIfOBUVs;

	[Token(Token = "0x4000846")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	protected Material _resultMaterial;

	[Token(Token = "0x4000847")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	protected bool _considerNonTextureProperties;

	[Token(Token = "0x4000848")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
	[SerializeField]
	protected bool _doSuggestTreatment;

	[Token(Token = "0x4000849")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private CreateAtlasesCoroutineResult _coroutineResult;

	[Token(Token = "0x400084A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public MB_MultiMaterial[] resultMaterials;

	[Token(Token = "0x400084B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public List<GameObject> objsToMesh;

	[Token(Token = "0x400084C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public OnCombinedTexturesCoroutineSuccess onBuiltAtlasesSuccess;

	[Token(Token = "0x400084D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public OnCombinedTexturesCoroutineFail onBuiltAtlasesFail;

	[Token(Token = "0x400084E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public MB_AtlasesAndRects[] OnCombinedTexturesCoroutineAtlasesAndRects;

	[Token(Token = "0x1700000F")]
	public override MB2_TextureBakeResults textureBakeResults
	{
		[Token(Token = "0x6000674")]
		[Address(RVA = "0xF32188", Offset = "0xF32188", VA = "0xF32188", Slot = "4")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000675")]
		[Address(RVA = "0xF32190", Offset = "0xF32190", VA = "0xF32190", Slot = "5")]
		set
		{
		}
	}

	[Token(Token = "0x17000010")]
	public virtual int atlasPadding
	{
		[Token(Token = "0x6000676")]
		[Address(RVA = "0xF32198", Offset = "0xF32198", VA = "0xF32198", Slot = "7")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000677")]
		[Address(RVA = "0xF321A0", Offset = "0xF321A0", VA = "0xF321A0", Slot = "8")]
		set
		{
		}
	}

	[Token(Token = "0x17000011")]
	public virtual int maxAtlasSize
	{
		[Token(Token = "0x6000678")]
		[Address(RVA = "0xF321A8", Offset = "0xF321A8", VA = "0xF321A8", Slot = "9")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000679")]
		[Address(RVA = "0xF321B0", Offset = "0xF321B0", VA = "0xF321B0", Slot = "10")]
		set
		{
		}
	}

	[Token(Token = "0x17000012")]
	public virtual bool useMaxAtlasWidthOverride
	{
		[Token(Token = "0x600067A")]
		[Address(RVA = "0xF321B8", Offset = "0xF321B8", VA = "0xF321B8", Slot = "11")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600067B")]
		[Address(RVA = "0xF321C0", Offset = "0xF321C0", VA = "0xF321C0", Slot = "12")]
		set
		{
		}
	}

	[Token(Token = "0x17000013")]
	public virtual int maxAtlasWidthOverride
	{
		[Token(Token = "0x600067C")]
		[Address(RVA = "0xF321CC", Offset = "0xF321CC", VA = "0xF321CC", Slot = "13")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x600067D")]
		[Address(RVA = "0xF321D4", Offset = "0xF321D4", VA = "0xF321D4", Slot = "14")]
		set
		{
		}
	}

	[Token(Token = "0x17000014")]
	public virtual bool useMaxAtlasHeightOverride
	{
		[Token(Token = "0x600067E")]
		[Address(RVA = "0xF321DC", Offset = "0xF321DC", VA = "0xF321DC", Slot = "15")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600067F")]
		[Address(RVA = "0xF321E4", Offset = "0xF321E4", VA = "0xF321E4", Slot = "16")]
		set
		{
		}
	}

	[Token(Token = "0x17000015")]
	public virtual int maxAtlasHeightOverride
	{
		[Token(Token = "0x6000680")]
		[Address(RVA = "0xF321F0", Offset = "0xF321F0", VA = "0xF321F0", Slot = "17")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000681")]
		[Address(RVA = "0xF321F8", Offset = "0xF321F8", VA = "0xF321F8", Slot = "18")]
		set
		{
		}
	}

	[Token(Token = "0x17000016")]
	public virtual bool resizePowerOfTwoTextures
	{
		[Token(Token = "0x6000682")]
		[Address(RVA = "0xF32200", Offset = "0xF32200", VA = "0xF32200", Slot = "19")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000683")]
		[Address(RVA = "0xF32208", Offset = "0xF32208", VA = "0xF32208", Slot = "20")]
		set
		{
		}
	}

	[Token(Token = "0x17000017")]
	public virtual bool fixOutOfBoundsUVs
	{
		[Token(Token = "0x6000684")]
		[Address(RVA = "0xF32214", Offset = "0xF32214", VA = "0xF32214", Slot = "21")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000685")]
		[Address(RVA = "0xF3221C", Offset = "0xF3221C", VA = "0xF3221C", Slot = "22")]
		set
		{
		}
	}

	[Token(Token = "0x17000018")]
	public virtual int maxTilingBakeSize
	{
		[Token(Token = "0x6000686")]
		[Address(RVA = "0xF32228", Offset = "0xF32228", VA = "0xF32228", Slot = "23")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000687")]
		[Address(RVA = "0xF32230", Offset = "0xF32230", VA = "0xF32230", Slot = "24")]
		set
		{
		}
	}

	[Token(Token = "0x17000019")]
	public virtual MB2_PackingAlgorithmEnum packingAlgorithm
	{
		[Token(Token = "0x6000688")]
		[Address(RVA = "0xF32238", Offset = "0xF32238", VA = "0xF32238", Slot = "25")]
		get
		{
			return default(MB2_PackingAlgorithmEnum);
		}
		[Token(Token = "0x6000689")]
		[Address(RVA = "0xF32240", Offset = "0xF32240", VA = "0xF32240", Slot = "26")]
		set
		{
		}
	}

	[Token(Token = "0x1700001A")]
	public bool meshBakerTexturePackerForcePowerOfTwo
	{
		[Token(Token = "0x600068A")]
		[Address(RVA = "0xF32248", Offset = "0xF32248", VA = "0xF32248")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600068B")]
		[Address(RVA = "0xF32250", Offset = "0xF32250", VA = "0xF32250")]
		set
		{
		}
	}

	[Token(Token = "0x1700001B")]
	public virtual List<ShaderTextureProperty> customShaderProperties
	{
		[Token(Token = "0x600068C")]
		[Address(RVA = "0xF3225C", Offset = "0xF3225C", VA = "0xF3225C", Slot = "27")]
		get
		{
			return null;
		}
		[Token(Token = "0x600068D")]
		[Address(RVA = "0xF32264", Offset = "0xF32264", VA = "0xF32264", Slot = "28")]
		set
		{
		}
	}

	[Token(Token = "0x1700001C")]
	public virtual List<string> customShaderPropNames
	{
		[Token(Token = "0x600068E")]
		[Address(RVA = "0xF3226C", Offset = "0xF3226C", VA = "0xF3226C", Slot = "29")]
		get
		{
			return null;
		}
		[Token(Token = "0x600068F")]
		[Address(RVA = "0xF32274", Offset = "0xF32274", VA = "0xF32274", Slot = "30")]
		set
		{
		}
	}

	[Token(Token = "0x1700001D")]
	public virtual bool doMultiMaterial
	{
		[Token(Token = "0x6000690")]
		[Address(RVA = "0xF3227C", Offset = "0xF3227C", VA = "0xF3227C", Slot = "31")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000691")]
		[Address(RVA = "0xF32284", Offset = "0xF32284", VA = "0xF32284", Slot = "32")]
		set
		{
		}
	}

	[Token(Token = "0x1700001E")]
	public virtual bool doMultiMaterialSplitAtlasesIfTooBig
	{
		[Token(Token = "0x6000692")]
		[Address(RVA = "0xF32290", Offset = "0xF32290", VA = "0xF32290", Slot = "33")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000693")]
		[Address(RVA = "0xF32298", Offset = "0xF32298", VA = "0xF32298", Slot = "34")]
		set
		{
		}
	}

	[Token(Token = "0x1700001F")]
	public virtual bool doMultiMaterialSplitAtlasesIfOBUVs
	{
		[Token(Token = "0x6000694")]
		[Address(RVA = "0xF322A4", Offset = "0xF322A4", VA = "0xF322A4", Slot = "35")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000695")]
		[Address(RVA = "0xF322AC", Offset = "0xF322AC", VA = "0xF322AC", Slot = "36")]
		set
		{
		}
	}

	[Token(Token = "0x17000020")]
	public virtual Material resultMaterial
	{
		[Token(Token = "0x6000696")]
		[Address(RVA = "0xF322B8", Offset = "0xF322B8", VA = "0xF322B8", Slot = "37")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000697")]
		[Address(RVA = "0xF322C0", Offset = "0xF322C0", VA = "0xF322C0", Slot = "38")]
		set
		{
		}
	}

	[Token(Token = "0x17000021")]
	public bool considerNonTextureProperties
	{
		[Token(Token = "0x6000698")]
		[Address(RVA = "0xF322C8", Offset = "0xF322C8", VA = "0xF322C8")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000699")]
		[Address(RVA = "0xF322D0", Offset = "0xF322D0", VA = "0xF322D0")]
		set
		{
		}
	}

	[Token(Token = "0x17000022")]
	public bool doSuggestTreatment
	{
		[Token(Token = "0x600069A")]
		[Address(RVA = "0xF322DC", Offset = "0xF322DC", VA = "0xF322DC")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600069B")]
		[Address(RVA = "0xF322E4", Offset = "0xF322E4", VA = "0xF322E4")]
		set
		{
		}
	}

	[Token(Token = "0x17000023")]
	public CreateAtlasesCoroutineResult CoroutineResult
	{
		[Token(Token = "0x600069C")]
		[Address(RVA = "0xF322F0", Offset = "0xF322F0", VA = "0xF322F0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600069D")]
	[Address(RVA = "0xF322F8", Offset = "0xF322F8", VA = "0xF322F8", Slot = "6")]
	public override List<GameObject> GetObjectsToCombine()
	{
		return null;
	}

	[Token(Token = "0x600069E")]
	[Address(RVA = "0xF32380", Offset = "0xF32380", VA = "0xF32380")]
	public MB_AtlasesAndRects[] CreateAtlases()
	{
		return null;
	}

	[Token(Token = "0x600069F")]
	[Address(RVA = "0xF327D0", Offset = "0xF327D0", VA = "0xF327D0")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D8088", Offset = "0x5D8088")]
	public IEnumerator CreateAtlasesCoroutine(ProgressUpdateDelegate progressInfo, CreateAtlasesCoroutineResult coroutineResult, bool saveAtlasesAsAssets = false, [Optional] MB2_EditorMethodsInterface editorMethods, float maxTimePerFrame = 0.01f)
	{
		return null;
	}

	[Token(Token = "0x60006A0")]
	[Address(RVA = "0xF32390", Offset = "0xF32390", VA = "0xF32390")]
	public MB_AtlasesAndRects[] CreateAtlases(ProgressUpdateDelegate progressInfo, bool saveAtlasesAsAssets = false, [Optional] MB2_EditorMethodsInterface editorMethods)
	{
		return null;
	}

	[Token(Token = "0x60006A1")]
	[Address(RVA = "0xF32BE0", Offset = "0xF32BE0", VA = "0xF32BE0")]
	private void unpackMat2RectMap(MB2_TextureBakeResults tbr)
	{
	}

	[Token(Token = "0x60006A2")]
	[Address(RVA = "0xF32E94", Offset = "0xF32E94", VA = "0xF32E94")]
	public MB3_TextureCombiner CreateAndConfigureTextureCombiner()
	{
		return null;
	}

	[Token(Token = "0x60006A3")]
	[Address(RVA = "0xF33090", Offset = "0xF33090", VA = "0xF33090")]
	public static void ConfigureNewMaterialToMatchOld(Material newMat, Material original)
	{
	}

	[Token(Token = "0x60006A4")]
	[Address(RVA = "0xF33338", Offset = "0xF33338", VA = "0xF33338")]
	private string PrintSet(HashSet<Material> s)
	{
		return null;
	}

	[Token(Token = "0x60006A5")]
	[Address(RVA = "0xF334F8", Offset = "0xF334F8", VA = "0xF334F8")]
	private bool _ValidateResultMaterials()
	{
		return default(bool);
	}

	[Token(Token = "0x60006A6")]
	[Address(RVA = "0xF33E24", Offset = "0xF33E24", VA = "0xF33E24")]
	public MB3_TextureBaker()
	{
	}
}
[Token(Token = "0x2000129")]
public class MB2_TestShowHide : MonoBehaviour
{
	[Token(Token = "0x400084F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public MB3_MeshBaker mb;

	[Token(Token = "0x4000850")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject[] objs;

	[Token(Token = "0x60006A7")]
	[Address(RVA = "0xF912D0", Offset = "0xF912D0", VA = "0xF912D0")]
	private void Update()
	{
	}

	[Token(Token = "0x60006A8")]
	[Address(RVA = "0xF91428", Offset = "0xF91428", VA = "0xF91428")]
	public MB2_TestShowHide()
	{
	}
}
[Token(Token = "0x200012A")]
public class MB2_TestUpdate : MonoBehaviour
{
	[Token(Token = "0x4000851")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public MB3_MeshBaker meshbaker;

	[Token(Token = "0x4000852")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MB3_MultiMeshBaker multiMeshBaker;

	[Token(Token = "0x4000853")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject[] objsToMove;

	[Token(Token = "0x4000854")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject objWithChangingUVs;

	[Token(Token = "0x4000855")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector2[] uvs;

	[Token(Token = "0x4000856")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Mesh m;

	[Token(Token = "0x60006A9")]
	[Address(RVA = "0xF91430", Offset = "0xF91430", VA = "0xF91430")]
	private void Start()
	{
	}

	[Token(Token = "0x60006AA")]
	[Address(RVA = "0xF916B8", Offset = "0xF916B8", VA = "0xF916B8")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60006AB")]
	[Address(RVA = "0xF91A80", Offset = "0xF91A80", VA = "0xF91A80")]
	public MB2_TestUpdate()
	{
	}
}
[Token(Token = "0x200012B")]
public class MB3_TestAddingRemovingSkinnedMeshes : MonoBehaviour
{
	[Token(Token = "0x20003AB")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDD5C", Offset = "0x5CDD5C")]
	private sealed class <TestScript>d__3 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40018FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001900")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001901")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MB3_TestAddingRemovingSkinnedMeshes <>4__this;

		[Token(Token = "0x170002B5")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60019C9")]
			[Address(RVA = "0x7F6AF4", Offset = "0x7F6AF4", VA = "0x7F6AF4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002B6")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60019CB")]
			[Address(RVA = "0x7F6B3C", Offset = "0x7F6B3C", VA = "0x7F6B3C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60019C6")]
		[Address(RVA = "0x7F608C", Offset = "0x7F608C", VA = "0x7F608C")]
		[DebuggerHidden]
		public <TestScript>d__3(int <>1__state)
		{
		}

		[Token(Token = "0x60019C7")]
		[Address(RVA = "0x7F60B8", Offset = "0x7F60B8", VA = "0x7F60B8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60019C8")]
		[Address(RVA = "0x7F60BC", Offset = "0x7F60BC", VA = "0x7F60BC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60019CA")]
		[Address(RVA = "0x7F6AFC", Offset = "0x7F6AFC", VA = "0x7F6AFC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000857")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public MB3_MeshBaker meshBaker;

	[Token(Token = "0x4000858")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject[] g;

	[Token(Token = "0x60006AC")]
	[Address(RVA = "0xF30F68", Offset = "0xF30F68", VA = "0xF30F68")]
	private void Start()
	{
	}

	[Token(Token = "0x60006AD")]
	[Address(RVA = "0xF30F94", Offset = "0xF30F94", VA = "0xF30F94")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D80E8", Offset = "0x5D80E8")]
	private IEnumerator TestScript()
	{
		return null;
	}

	[Token(Token = "0x60006AE")]
	[Address(RVA = "0xF3100C", Offset = "0xF3100C", VA = "0xF3100C")]
	public MB3_TestAddingRemovingSkinnedMeshes()
	{
	}
}
[Token(Token = "0x200012C")]
public class MB3_TestBakeAllWithSameMaterial : MonoBehaviour
{
	[Token(Token = "0x4000859")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] listOfObjsToCombineGood;

	[Token(Token = "0x400085A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject[] listOfObjsToCombineBad;

	[Token(Token = "0x60006AF")]
	[Address(RVA = "0xF31014", Offset = "0xF31014", VA = "0xF31014")]
	private void Start()
	{
	}

	[Token(Token = "0x60006B0")]
	[Address(RVA = "0xF31018", Offset = "0xF31018", VA = "0xF31018")]
	private void testCombine()
	{
	}

	[Token(Token = "0x60006B1")]
	[Address(RVA = "0xF313DC", Offset = "0xF313DC", VA = "0xF313DC")]
	public MB3_TestBakeAllWithSameMaterial()
	{
	}
}
[Token(Token = "0x200012D")]
public class MB3_TestRenderTextureTestHarness : MonoBehaviour
{
	[Token(Token = "0x400085B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Texture2D input;

	[Token(Token = "0x400085C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool doColor;

	[Token(Token = "0x400085D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Color32 color;

	[Token(Token = "0x60006B2")]
	[Address(RVA = "0xF313E4", Offset = "0xF313E4", VA = "0xF313E4")]
	public Texture2D Create3x3Tex()
	{
		return null;
	}

	[Token(Token = "0x60006B3")]
	[Address(RVA = "0xF3150C", Offset = "0xF3150C", VA = "0xF3150C")]
	public Texture2D Create3x3Clone()
	{
		return null;
	}

	[Token(Token = "0x60006B4")]
	[Address(RVA = "0xF317A4", Offset = "0xF317A4", VA = "0xF317A4")]
	public static void TestRender(Texture2D input, Texture2D output)
	{
	}

	[Token(Token = "0x60006B5")]
	[Address(RVA = "0xF32180", Offset = "0xF32180", VA = "0xF32180")]
	public MB3_TestRenderTextureTestHarness()
	{
	}
}
[Token(Token = "0x200012E")]
public class MB3_KMeansClustering
{
	[Token(Token = "0x20003AC")]
	private class DataPoint
	{
		[Token(Token = "0x4001902")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 center;

		[Token(Token = "0x4001903")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject gameObject;

		[Token(Token = "0x4001904")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int Cluster;

		[Token(Token = "0x60019CC")]
		[Address(RVA = "0x7F2234", Offset = "0x7F2234", VA = "0x7F2234")]
		public DataPoint(GameObject go)
		{
		}
	}

	[Token(Token = "0x400085E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private List<DataPoint> _normalizedDataToCluster;

	[Token(Token = "0x400085F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Vector3[] _clusters;

	[Token(Token = "0x4000860")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int _numberOfClusters;

	[Token(Token = "0x60006B6")]
	[Address(RVA = "0xF9D394", Offset = "0xF9D394", VA = "0xF9D394")]
	public MB3_KMeansClustering(List<GameObject> gos, int numClusters)
	{
	}

	[Token(Token = "0x60006B7")]
	[Address(RVA = "0xF9D718", Offset = "0xF9D718", VA = "0xF9D718")]
	private void InitializeCentroids()
	{
	}

	[Token(Token = "0x60006B8")]
	[Address(RVA = "0xF9D818", Offset = "0xF9D818", VA = "0xF9D818")]
	private bool UpdateDataPointMeans(bool force)
	{
		return default(bool);
	}

	[Token(Token = "0x60006B9")]
	[Address(RVA = "0xF9DA64", Offset = "0xF9DA64", VA = "0xF9DA64")]
	private bool AnyAreEmpty(List<DataPoint> data)
	{
		return default(bool);
	}

	[Token(Token = "0x60006BA")]
	[Address(RVA = "0xF9DB90", Offset = "0xF9DB90", VA = "0xF9DB90")]
	private bool UpdateClusterMembership()
	{
		return default(bool);
	}

	[Token(Token = "0x60006BB")]
	[Address(RVA = "0xF9DD6C", Offset = "0xF9DD6C", VA = "0xF9DD6C")]
	private float ElucidanDistance(DataPoint dataPoint, Vector3 mean)
	{
		return default(float);
	}

	[Token(Token = "0x60006BC")]
	[Address(RVA = "0xF9DD98", Offset = "0xF9DD98", VA = "0xF9DD98")]
	private int MinIndex(float[] distances)
	{
		return default(int);
	}

	[Token(Token = "0x60006BD")]
	[Address(RVA = "0xF9DE08", Offset = "0xF9DE08", VA = "0xF9DE08")]
	public List<Renderer> GetCluster(int idx, out Vector3 mean, out float size)
	{
		return null;
	}

	[Token(Token = "0x60006BE")]
	[Address(RVA = "0xF9E110", Offset = "0xF9E110", VA = "0xF9E110")]
	public void Cluster()
	{
	}
}
[Token(Token = "0x200012F")]
public class MB_TextureCombinerRenderTexture
{
	[Token(Token = "0x4000861")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public MB2_LogLevel LOG_LEVEL;

	[Token(Token = "0x4000862")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Material mat;

	[Token(Token = "0x4000863")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private RenderTexture _destinationTexture;

	[Token(Token = "0x4000864")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Camera myCamera;

	[Token(Token = "0x4000865")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int _padding;

	[Token(Token = "0x4000866")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private bool _isNormalMap;

	[Token(Token = "0x4000867")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
	private bool _fixOutOfBoundsUVs;

	[Token(Token = "0x4000868")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x36")]
	private bool _doRenderAtlas;

	[Token(Token = "0x4000869")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Rect[] rs;

	[Token(Token = "0x400086A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private List<MB_TexSet> textureSets;

	[Token(Token = "0x400086B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int indexOfTexSetToRender;

	[Token(Token = "0x400086C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private ShaderTextureProperty _texPropertyName;

	[Token(Token = "0x400086D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private MB3_TextureCombinerNonTextureProperties _resultMaterialTextureBlender;

	[Token(Token = "0x400086E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Texture2D targTex;

	[Token(Token = "0x60006BF")]
	[Address(RVA = "0xF47FB8", Offset = "0xF47FB8", VA = "0xF47FB8")]
	public Texture2D DoRenderAtlas(GameObject gameObject, int width, int height, int padding, Rect[] rss, List<MB_TexSet> textureSetss, int indexOfTexSetToRenders, ShaderTextureProperty texPropertyname, MB3_TextureCombinerNonTextureProperties resultMaterialTextureBlender, bool isNormalMap, bool fixOutOfBoundsUVs, bool considerNonTextureProperties, MB3_TextureCombiner texCombiner, MB2_LogLevel LOG_LEV)
	{
		return null;
	}

	[Token(Token = "0x60006C0")]
	[Address(RVA = "0xF4868C", Offset = "0xF4868C", VA = "0xF4868C")]
	public void OnRenderObject()
	{
	}

	[Token(Token = "0x60006C1")]
	[Address(RVA = "0xF4A7B0", Offset = "0xF4A7B0", VA = "0xF4A7B0")]
	private Color32 ConvertNormalFormatFromUnity_ToStandard(Color32 c)
	{
		return default(Color32);
	}

	[Token(Token = "0x60006C2")]
	[Address(RVA = "0xF4A888", Offset = "0xF4A888", VA = "0xF4A888")]
	private bool IsOpenGL()
	{
		return default(bool);
	}

	[Token(Token = "0x60006C3")]
	[Address(RVA = "0xF49404", Offset = "0xF49404", VA = "0xF49404")]
	private void CopyScaledAndTiledToAtlas(MB_TexSet texSet, MeshBakerMaterialTexture source, Vector2 obUVoffset, Vector2 obUVscale, Rect rec, ShaderTextureProperty texturePropertyName, MB3_TextureCombinerNonTextureProperties resultMatTexBlender)
	{
	}

	[Token(Token = "0x60006C4")]
	[Address(RVA = "0xF4A498", Offset = "0xF4A498", VA = "0xF4A498")]
	private void _printTexture(Texture2D t)
	{
	}

	[Token(Token = "0x60006C5")]
	[Address(RVA = "0xF4A8E0", Offset = "0xF4A8E0", VA = "0xF4A8E0")]
	public MB_TextureCombinerRenderTexture()
	{
	}
}
[Token(Token = "0x2000130")]
[ExecuteInEditMode]
public class MB3_AtlasPackerRenderTexture : MonoBehaviour
{
	[Token(Token = "0x400086F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private MB_TextureCombinerRenderTexture fastRenderer;

	[Token(Token = "0x4000870")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool _doRenderAtlas;

	[Token(Token = "0x4000871")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int width;

	[Token(Token = "0x4000872")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int height;

	[Token(Token = "0x4000873")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int padding;

	[Token(Token = "0x4000874")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool isNormalMap;

	[Token(Token = "0x4000875")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	public bool fixOutOfBoundsUVs;

	[Token(Token = "0x4000876")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
	public bool considerNonTextureProperties;

	[Token(Token = "0x4000877")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public MB3_TextureCombinerNonTextureProperties resultMaterialTextureBlender;

	[Token(Token = "0x4000878")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Rect[] rects;

	[Token(Token = "0x4000879")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Texture2D tex1;

	[Token(Token = "0x400087A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public List<MB_TexSet> textureSets;

	[Token(Token = "0x400087B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public int indexOfTexSetToRender;

	[Token(Token = "0x400087C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public ShaderTextureProperty texPropertyName;

	[Token(Token = "0x400087D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public MB2_LogLevel LOG_LEVEL;

	[Token(Token = "0x400087E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Texture2D testTex;

	[Token(Token = "0x400087F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Material testMat;

	[Token(Token = "0x60006C6")]
	[Address(RVA = "0xF9C4A8", Offset = "0xF9C4A8", VA = "0xF9C4A8")]
	public Texture2D OnRenderAtlas(MB3_TextureCombiner combiner)
	{
		return null;
	}

	[Token(Token = "0x60006C7")]
	[Address(RVA = "0xF9C59C", Offset = "0xF9C59C", VA = "0xF9C59C")]
	private void OnRenderObject()
	{
	}

	[Token(Token = "0x60006C8")]
	[Address(RVA = "0xF9C5D8", Offset = "0xF9C5D8", VA = "0xF9C5D8")]
	public MB3_AtlasPackerRenderTexture()
	{
	}
}
[Token(Token = "0x2000131")]
public class ParticleForceFieldsDemo : MonoBehaviour
{
	[Token(Token = "0x4000880")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x5CF2BC", Offset = "0x5CF2BC")]
	public Text FPSText;

	[Token(Token = "0x4000881")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text particleCountText;

	[Token(Token = "0x4000882")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Toggle postProcessingToggle;

	[Token(Token = "0x4000883")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public MonoBehaviour postProcessing;

	[Token(Token = "0x4000884")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x5CF2F4", Offset = "0x5CF2F4")]
	public ParticleSystem particleSystem;

	[Token(Token = "0x4000885")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private ParticleSystem.MainModule particleSystemMainModule;

	[Token(Token = "0x4000886")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private ParticleSystem.EmissionModule particleSystemEmissionModule;

	[Token(Token = "0x4000887")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Text maxParticlesText;

	[Token(Token = "0x4000888")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Text particlesPerSecondText;

	[Token(Token = "0x4000889")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Slider maxParticlesSlider;

	[Token(Token = "0x400088A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Slider particlesPerSecondSlider;

	[Token(Token = "0x400088B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x5CF32C", Offset = "0x5CF32C")]
	public AttractionParticleForceField attractionParticleForceField;

	[Token(Token = "0x400088C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Text attractionParticleForceFieldRadiusText;

	[Token(Token = "0x400088D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Text attractionParticleForceFieldMaxForceText;

	[Token(Token = "0x400088E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Text attractionParticleForceFieldArrivalRadiusText;

	[Token(Token = "0x400088F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Text attractionParticleForceFieldArrivedRadiusText;

	[Token(Token = "0x4000890")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Text attractionParticleForceFieldPositionTextX;

	[Token(Token = "0x4000891")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Text attractionParticleForceFieldPositionTextY;

	[Token(Token = "0x4000892")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public Text attractionParticleForceFieldPositionTextZ;

	[Token(Token = "0x4000893")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public Slider attractionParticleForceFieldRadiusSlider;

	[Token(Token = "0x4000894")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public Slider attractionParticleForceFieldMaxForceSlider;

	[Token(Token = "0x4000895")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public Slider attractionParticleForceFieldArrivalRadiusSlider;

	[Token(Token = "0x4000896")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public Slider attractionParticleForceFieldArrivedRadiusSlider;

	[Token(Token = "0x4000897")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public Slider attractionParticleForceFieldPositionSliderX;

	[Token(Token = "0x4000898")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public Slider attractionParticleForceFieldPositionSliderY;

	[Token(Token = "0x4000899")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public Slider attractionParticleForceFieldPositionSliderZ;

	[Token(Token = "0x400089A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x5CF364", Offset = "0x5CF364")]
	public VortexParticleForceField vortexParticleForceField;

	[Token(Token = "0x400089B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public Text vortexParticleForceFieldRadiusText;

	[Token(Token = "0x400089C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public Text vortexParticleForceFieldMaxForceText;

	[Token(Token = "0x400089D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public Text vortexParticleForceFieldRotationTextX;

	[Token(Token = "0x400089E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public Text vortexParticleForceFieldRotationTextY;

	[Token(Token = "0x400089F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public Text vortexParticleForceFieldRotationTextZ;

	[Token(Token = "0x40008A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public Text vortexParticleForceFieldPositionTextX;

	[Token(Token = "0x40008A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public Text vortexParticleForceFieldPositionTextY;

	[Token(Token = "0x40008A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	public Text vortexParticleForceFieldPositionTextZ;

	[Token(Token = "0x40008A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	public Slider vortexParticleForceFieldRadiusSlider;

	[Token(Token = "0x40008A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public Slider vortexParticleForceFieldMaxForceSlider;

	[Token(Token = "0x40008A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public Slider vortexParticleForceFieldRotationSliderX;

	[Token(Token = "0x40008A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public Slider vortexParticleForceFieldRotationSliderY;

	[Token(Token = "0x40008A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public Slider vortexParticleForceFieldRotationSliderZ;

	[Token(Token = "0x40008A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	public Slider vortexParticleForceFieldPositionSliderX;

	[Token(Token = "0x40008A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	public Slider vortexParticleForceFieldPositionSliderY;

	[Token(Token = "0x40008AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	public Slider vortexParticleForceFieldPositionSliderZ;

	[Token(Token = "0x60006C9")]
	[Address(RVA = "0x131F538", Offset = "0x131F538", VA = "0x131F538")]
	private void Start()
	{
	}

	[Token(Token = "0x60006CA")]
	[Address(RVA = "0x131FFFC", Offset = "0x131FFFC", VA = "0x131FFFC")]
	private void Update()
	{
	}

	[Token(Token = "0x60006CB")]
	[Address(RVA = "0x132010C", Offset = "0x132010C", VA = "0x132010C")]
	public void ReloadScene()
	{
	}

	[Token(Token = "0x60006CC")]
	[Address(RVA = "0x1320188", Offset = "0x1320188", VA = "0x1320188")]
	public void SetMaxParticles(float value)
	{
	}

	[Token(Token = "0x60006CD")]
	[Address(RVA = "0x1320230", Offset = "0x1320230", VA = "0x1320230")]
	public void SetParticleEmissionPerSecond(float value)
	{
	}

	[Token(Token = "0x60006CE")]
	[Address(RVA = "0x13202FC", Offset = "0x13202FC", VA = "0x13202FC")]
	public void SetAttractionParticleForceFieldRadius(float value)
	{
	}

	[Token(Token = "0x60006CF")]
	[Address(RVA = "0x13203A0", Offset = "0x13203A0", VA = "0x13203A0")]
	public void SetAttractionParticleForceFieldMaxForce(float value)
	{
	}

	[Token(Token = "0x60006D0")]
	[Address(RVA = "0x1320444", Offset = "0x1320444", VA = "0x1320444")]
	public void SetAttractionParticleForceFieldArrivalRadius(float value)
	{
	}

	[Token(Token = "0x60006D1")]
	[Address(RVA = "0x13204E8", Offset = "0x13204E8", VA = "0x13204E8")]
	public void SetAttractionParticleForceFieldArrivedRadius(float value)
	{
	}

	[Token(Token = "0x60006D2")]
	[Address(RVA = "0x132058C", Offset = "0x132058C", VA = "0x132058C")]
	public void SetAttractionParticleForceFieldPositionX(float value)
	{
	}

	[Token(Token = "0x60006D3")]
	[Address(RVA = "0x1320678", Offset = "0x1320678", VA = "0x1320678")]
	public void SetAttractionParticleForceFieldPositionY(float value)
	{
	}

	[Token(Token = "0x60006D4")]
	[Address(RVA = "0x1320764", Offset = "0x1320764", VA = "0x1320764")]
	public void SetAttractionParticleForceFieldPositionZ(float value)
	{
	}

	[Token(Token = "0x60006D5")]
	[Address(RVA = "0x1320850", Offset = "0x1320850", VA = "0x1320850")]
	public void SetVortexParticleForceFieldRadius(float value)
	{
	}

	[Token(Token = "0x60006D6")]
	[Address(RVA = "0x13208F4", Offset = "0x13208F4", VA = "0x13208F4")]
	public void SetVortexParticleForceFieldMaxForce(float value)
	{
	}

	[Token(Token = "0x60006D7")]
	[Address(RVA = "0x1320998", Offset = "0x1320998", VA = "0x1320998")]
	public void SetVortexParticleForceFieldRotationX(float value)
	{
	}

	[Token(Token = "0x60006D8")]
	[Address(RVA = "0x1320A84", Offset = "0x1320A84", VA = "0x1320A84")]
	public void SetVortexParticleForceFieldRotationY(float value)
	{
	}

	[Token(Token = "0x60006D9")]
	[Address(RVA = "0x1320B70", Offset = "0x1320B70", VA = "0x1320B70")]
	public void SetVortexParticleForceFieldRotationZ(float value)
	{
	}

	[Token(Token = "0x60006DA")]
	[Address(RVA = "0x1320C5C", Offset = "0x1320C5C", VA = "0x1320C5C")]
	public void SetVortexParticleForceFieldPositionX(float value)
	{
	}

	[Token(Token = "0x60006DB")]
	[Address(RVA = "0x1320D48", Offset = "0x1320D48", VA = "0x1320D48")]
	public void SetVortexParticleForceFieldPositionY(float value)
	{
	}

	[Token(Token = "0x60006DC")]
	[Address(RVA = "0x1320E34", Offset = "0x1320E34", VA = "0x1320E34")]
	public void SetVortexParticleForceFieldPositionZ(float value)
	{
	}

	[Token(Token = "0x60006DD")]
	[Address(RVA = "0x1320F20", Offset = "0x1320F20", VA = "0x1320F20")]
	public ParticleForceFieldsDemo()
	{
	}
}
[Token(Token = "0x2000132")]
public class ParticleForceFieldsDemo_CameraRig : MonoBehaviour
{
	[Token(Token = "0x40008AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform pivot;

	[Token(Token = "0x40008AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Vector3 targetRotation;

	[Token(Token = "0x40008AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5CF39C", Offset = "0x5CF39C")]
	public float rotationLimit;

	[Token(Token = "0x40008AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float rotationSpeed;

	[Token(Token = "0x40008AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float rotationLerpSpeed;

	[Token(Token = "0x40008B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector3 startRotation;

	[Token(Token = "0x60006DE")]
	[Address(RVA = "0x1320F28", Offset = "0x1320F28", VA = "0x1320F28")]
	private void Start()
	{
	}

	[Token(Token = "0x60006DF")]
	[Address(RVA = "0x1320F68", Offset = "0x1320F68", VA = "0x1320F68")]
	private void Update()
	{
	}

	[Token(Token = "0x60006E0")]
	[Address(RVA = "0x13210E4", Offset = "0x13210E4", VA = "0x13210E4")]
	public ParticleForceFieldsDemo_CameraRig()
	{
	}
}
[Token(Token = "0x2000133")]
public class ParticlePlexusDemo_CameraRig : MonoBehaviour
{
	[Token(Token = "0x40008B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform pivot;

	[Token(Token = "0x40008B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Vector3 targetRotation;

	[Token(Token = "0x40008B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5CF3B8", Offset = "0x5CF3B8")]
	public float rotationLimit;

	[Token(Token = "0x40008B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float rotationSpeed;

	[Token(Token = "0x40008B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float rotationLerpSpeed;

	[Token(Token = "0x40008B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector3 startRotation;

	[Token(Token = "0x60006E1")]
	[Address(RVA = "0x11FC0BC", Offset = "0x11FC0BC", VA = "0x11FC0BC")]
	private void Start()
	{
	}

	[Token(Token = "0x60006E2")]
	[Address(RVA = "0x11FC0FC", Offset = "0x11FC0FC", VA = "0x11FC0FC")]
	private void Update()
	{
	}

	[Token(Token = "0x60006E3")]
	[Address(RVA = "0x11FC278", Offset = "0x11FC278", VA = "0x11FC278")]
	public ParticlePlexusDemo_CameraRig()
	{
	}
}
[Token(Token = "0x2000134")]
public class Presentation : MonoBehaviour
{
	[Token(Token = "0x40008B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool left;

	[Token(Token = "0x40008B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	private bool rotated;

	[Token(Token = "0x40008B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	private bool move;

	[Token(Token = "0x40008BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float speed;

	[Token(Token = "0x40008BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int maxX;

	[Token(Token = "0x60006E4")]
	[Address(RVA = "0x120777C", Offset = "0x120777C", VA = "0x120777C")]
	private void Start()
	{
	}

	[Token(Token = "0x60006E5")]
	[Address(RVA = "0x1207780", Offset = "0x1207780", VA = "0x1207780")]
	private void Update()
	{
	}

	[Token(Token = "0x60006E6")]
	[Address(RVA = "0x12078DC", Offset = "0x12078DC", VA = "0x12078DC")]
	public Presentation()
	{
	}
}
[Token(Token = "0x2000135")]
public class Doors : MonoBehaviour
{
	[Token(Token = "0x40008BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Animator animator;

	[Token(Token = "0x40008BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool doorOpen;

	[Token(Token = "0x60006E7")]
	[Address(RVA = "0xCCD5D8", Offset = "0xCCD5D8", VA = "0xCCD5D8")]
	private void Start()
	{
	}

	[Token(Token = "0x60006E8")]
	[Address(RVA = "0xCCD638", Offset = "0xCCD638", VA = "0xCCD638")]
	private void OnTriggerEnter(Collider col)
	{
	}

	[Token(Token = "0x60006E9")]
	[Address(RVA = "0xCCD710", Offset = "0xCCD710", VA = "0xCCD710")]
	private void OnTriggerExit(Collider col)
	{
	}

	[Token(Token = "0x60006EA")]
	[Address(RVA = "0xCCD6F4", Offset = "0xCCD6F4", VA = "0xCCD6F4")]
	private void DoorControl(string direction)
	{
	}

	[Token(Token = "0x60006EB")]
	[Address(RVA = "0xCCD780", Offset = "0xCCD780", VA = "0xCCD780")]
	public Doors()
	{
	}
}
[Token(Token = "0x2000136")]
public class ScrollingUVs : MonoBehaviour
{
	[Token(Token = "0x40008BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int materialIndex;

	[Token(Token = "0x40008BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Vector2 uvAnimationRate;

	[Token(Token = "0x40008C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string textureName;

	[Token(Token = "0x40008C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Vector2 uvOffset;

	[Token(Token = "0x60006EC")]
	[Address(RVA = "0xA0BF20", Offset = "0xA0BF20", VA = "0xA0BF20")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60006ED")]
	[Address(RVA = "0xA0C008", Offset = "0xA0C008", VA = "0xA0C008")]
	public ScrollingUVs()
	{
	}
}
[Token(Token = "0x2000137")]
public class BasicCommands
{
	[Token(Token = "0x60006EE")]
	[Address(RVA = "0xC13CE0", Offset = "0xC13CE0", VA = "0xC13CE0")]
	[AttributeAttribute(Name = "CommandAttribute", RVA = "0x5D8148", Offset = "0x5D8148")]
	public void ClearTerminal()
	{
	}

	[Token(Token = "0x60006EF")]
	[Address(RVA = "0xC13D38", Offset = "0xC13D38", VA = "0xC13D38")]
	[AttributeAttribute(Name = "CommandAttribute", RVA = "0x5D8194", Offset = "0x5D8194")]
	public string Help()
	{
		return null;
	}

	[Token(Token = "0x60006F0")]
	[Address(RVA = "0xC14190", Offset = "0xC14190", VA = "0xC14190")]
	[AttributeAttribute(Name = "CommandAttribute", RVA = "0x5D81E0", Offset = "0x5D81E0")]
	public void Hide()
	{
	}

	[Token(Token = "0x60006F1")]
	[Address(RVA = "0xC141E8", Offset = "0xC141E8", VA = "0xC141E8")]
	public BasicCommands()
	{
	}
}
[Token(Token = "0x2000138")]
[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0x5C9CF8", Offset = "0x5C9CF8")]
public class TerminalConfig : ScriptableObject
{
	[Token(Token = "0x40008C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string arrow;

	[Token(Token = "0x40008C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string backslash;

	[Token(Token = "0x40008C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string console;

	[Token(Token = "0x40008C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Font font;

	[Token(Token = "0x40008C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Color commandColor;

	[Token(Token = "0x40008C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Color autoCompleteHoverColor;

	[Token(Token = "0x60006F2")]
	[Address(RVA = "0xE8D478", Offset = "0xE8D478", VA = "0xE8D478")]
	public TerminalConfig()
	{
	}
}
[Token(Token = "0x2000139")]
public class SampleCommand
{
	[Token(Token = "0x60006F3")]
	[Address(RVA = "0xCDBBD8", Offset = "0xCDBBD8", VA = "0xCDBBD8")]
	[AttributeAttribute(Name = "CommandAttribute", RVA = "0x5D822C", Offset = "0x5D822C")]
	public void SampleDebug(string input)
	{
	}

	[Token(Token = "0x60006F4")]
	[Address(RVA = "0xCDBC3C", Offset = "0xCDBC3C", VA = "0xCDBC3C")]
	public SampleCommand()
	{
	}
}
[Token(Token = "0x200013A")]
public class Terminal : MonoBehaviour
{
	[Token(Token = "0x20003AD")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDD6C", Offset = "0x5CDD6C")]
	private sealed class <ClearTerminalCoroutine>d__42 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001905")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001906")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001907")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Terminal <>4__this;

		[Token(Token = "0x170002B7")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60019D0")]
			[Address(RVA = "0x138B320", Offset = "0x138B320", VA = "0x138B320", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002B8")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60019D2")]
			[Address(RVA = "0x138B368", Offset = "0x138B368", VA = "0x138B368", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60019CD")]
		[Address(RVA = "0x138B22C", Offset = "0x138B22C", VA = "0x138B22C")]
		[DebuggerHidden]
		public <ClearTerminalCoroutine>d__42(int <>1__state)
		{
		}

		[Token(Token = "0x60019CE")]
		[Address(RVA = "0x138B258", Offset = "0x138B258", VA = "0x138B258", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60019CF")]
		[Address(RVA = "0x138B25C", Offset = "0x138B25C", VA = "0x138B25C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60019D1")]
		[Address(RVA = "0x138B328", Offset = "0x138B328", VA = "0x138B328", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40008C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Terminal instance;

	[Token(Token = "0x40008C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	public TerminalConfig config;

	[Token(Token = "0x40008CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CF3E4", Offset = "0x5CF3E4")]
	private bool <displayTerminal>k__BackingField;

	[Token(Token = "0x40008CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CF3F4", Offset = "0x5CF3F4")]
	private string <inputText>k__BackingField;

	[Token(Token = "0x40008CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CF404", Offset = "0x5CF404")]
	private string <history>k__BackingField;

	[Token(Token = "0x40008CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CF414", Offset = "0x5CF414")]
	private List<string> <autoCompList>k__BackingField;

	[Token(Token = "0x40008CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CF424", Offset = "0x5CF424")]
	private int <autoCompIndex>k__BackingField;

	[Token(Token = "0x40008CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public TerminalMethods terminalMethods;

	[Token(Token = "0x40008D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private TerminalInputHandler inputHandler;

	[Token(Token = "0x40008D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private TerminalGUI terminalGui;

	[Token(Token = "0x40008D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public TouchScreenKeyboard touchScreenKeyboard;

	[Token(Token = "0x40008D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public int mobileTouchCount;

	[Token(Token = "0x17000024")]
	public bool displayTerminal
	{
		[Token(Token = "0x60006F5")]
		[Address(RVA = "0xE8B1B4", Offset = "0xE8B1B4", VA = "0xE8B1B4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D8278", Offset = "0x5D8278")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60006F6")]
		[Address(RVA = "0xE8B1BC", Offset = "0xE8B1BC", VA = "0xE8B1BC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D8288", Offset = "0x5D8288")]
		private set
		{
		}
	}

	[Token(Token = "0x17000025")]
	public string inputText
	{
		[Token(Token = "0x60006F7")]
		[Address(RVA = "0xE8B1C8", Offset = "0xE8B1C8", VA = "0xE8B1C8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D8298", Offset = "0x5D8298")]
		get
		{
			return null;
		}
		[Token(Token = "0x60006F8")]
		[Address(RVA = "0xE8B1D0", Offset = "0xE8B1D0", VA = "0xE8B1D0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D82A8", Offset = "0x5D82A8")]
		private set
		{
		}
	}

	[Token(Token = "0x17000026")]
	public string history
	{
		[Token(Token = "0x60006F9")]
		[Address(RVA = "0xE8B1D8", Offset = "0xE8B1D8", VA = "0xE8B1D8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D82B8", Offset = "0x5D82B8")]
		get
		{
			return null;
		}
		[Token(Token = "0x60006FA")]
		[Address(RVA = "0xE8B1E0", Offset = "0xE8B1E0", VA = "0xE8B1E0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D82C8", Offset = "0x5D82C8")]
		private set
		{
		}
	}

	[Token(Token = "0x17000027")]
	public List<string> autoCompList
	{
		[Token(Token = "0x60006FB")]
		[Address(RVA = "0xE8B1E8", Offset = "0xE8B1E8", VA = "0xE8B1E8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D82D8", Offset = "0x5D82D8")]
		get
		{
			return null;
		}
		[Token(Token = "0x60006FC")]
		[Address(RVA = "0xE8B1F0", Offset = "0xE8B1F0", VA = "0xE8B1F0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D82E8", Offset = "0x5D82E8")]
		private set
		{
		}
	}

	[Token(Token = "0x17000028")]
	public int autoCompIndex
	{
		[Token(Token = "0x60006FD")]
		[Address(RVA = "0xE8B1F8", Offset = "0xE8B1F8", VA = "0xE8B1F8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D82F8", Offset = "0x5D82F8")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60006FE")]
		[Address(RVA = "0xE8B200", Offset = "0xE8B200", VA = "0xE8B200")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D8308", Offset = "0x5D8308")]
		private set
		{
		}
	}

	[Token(Token = "0x17000029")]
	public string consoleLine
	{
		[Token(Token = "0x60006FF")]
		[Address(RVA = "0xE8B208", Offset = "0xE8B208", VA = "0xE8B208")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000700")]
	[Address(RVA = "0xE8B268", Offset = "0xE8B268", VA = "0xE8B268")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000701")]
	[Address(RVA = "0xE8BB7C", Offset = "0xE8BB7C", VA = "0xE8BB7C")]
	internal void Hide()
	{
	}

	[Token(Token = "0x6000702")]
	[Address(RVA = "0xE8BB84", Offset = "0xE8BB84", VA = "0xE8BB84")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000703")]
	[Address(RVA = "0xE8BF74", Offset = "0xE8BF74", VA = "0xE8BF74")]
	private void Update()
	{
	}

	[Token(Token = "0x6000704")]
	[Address(RVA = "0xE8C16C", Offset = "0xE8C16C", VA = "0xE8C16C")]
	internal void SetInputText(string inputString)
	{
	}

	[Token(Token = "0x6000705")]
	[Address(RVA = "0xE8C174", Offset = "0xE8C174", VA = "0xE8C174")]
	public void UpdateInputText(string input)
	{
	}

	[Token(Token = "0x6000706")]
	[Address(RVA = "0xE8C1A8", Offset = "0xE8C1A8", VA = "0xE8C1A8")]
	public void OnUpArrowPressed()
	{
	}

	[Token(Token = "0x6000707")]
	[Address(RVA = "0xE8C21C", Offset = "0xE8C21C", VA = "0xE8C21C")]
	internal void ChangeInput(string input)
	{
	}

	[Token(Token = "0x6000708")]
	[Address(RVA = "0xE8C224", Offset = "0xE8C224", VA = "0xE8C224")]
	public void OnDownArrowPressed()
	{
	}

	[Token(Token = "0x6000709")]
	[Address(RVA = "0xE8C298", Offset = "0xE8C298", VA = "0xE8C298")]
	public void PreExecute()
	{
	}

	[Token(Token = "0x600070A")]
	[Address(RVA = "0xE8D050", Offset = "0xE8D050", VA = "0xE8D050")]
	public void OnTabPressed()
	{
	}

	[Token(Token = "0x600070B")]
	[Address(RVA = "0xE8C4DC", Offset = "0xE8C4DC", VA = "0xE8C4DC")]
	private string ExecuteCommand(string inputText)
	{
		return null;
	}

	[Token(Token = "0x600070C")]
	[Address(RVA = "0xE8D2E4", Offset = "0xE8D2E4", VA = "0xE8D2E4")]
	internal void Clear()
	{
	}

	[Token(Token = "0x600070D")]
	[Address(RVA = "0xE8D310", Offset = "0xE8D310", VA = "0xE8D310")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D8318", Offset = "0x5D8318")]
	private IEnumerator ClearTerminalCoroutine()
	{
		return null;
	}

	[Token(Token = "0x600070E")]
	[Address(RVA = "0xE8D388", Offset = "0xE8D388", VA = "0xE8D388")]
	internal void ToggleTerminal()
	{
	}

	[Token(Token = "0x600070F")]
	[Address(RVA = "0xE8D398", Offset = "0xE8D398", VA = "0xE8D398")]
	public void DisplayTouchScreenKeyboard()
	{
	}

	[Token(Token = "0x6000710")]
	[Address(RVA = "0xE8D410", Offset = "0xE8D410", VA = "0xE8D410")]
	internal void OnBackSpacePressed()
	{
	}

	[Token(Token = "0x6000711")]
	[Address(RVA = "0xE8D108", Offset = "0xE8D108", VA = "0xE8D108")]
	internal void OnEnterPressed()
	{
	}

	[Token(Token = "0x6000712")]
	[Address(RVA = "0xE8D468", Offset = "0xE8D468", VA = "0xE8D468")]
	public Terminal()
	{
	}
}
[Token(Token = "0x200013B")]
[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x5C9D08", Offset = "0x5C9D08")]
public class CommandAttribute : Attribute
{
	[Token(Token = "0x40008D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string commandName;

	[Token(Token = "0x40008D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string commandDesc;

	[Token(Token = "0x6000713")]
	[Address(RVA = "0x10AD664", Offset = "0x10AD664", VA = "0x10AD664")]
	public CommandAttribute(string name)
	{
	}

	[Token(Token = "0x6000714")]
	[Address(RVA = "0x10AD698", Offset = "0x10AD698", VA = "0x10AD698")]
	public CommandAttribute(string name, string desc)
	{
	}
}
[Token(Token = "0x200013C")]
public class TerminalGUI
{
	[Token(Token = "0x40008D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Terminal terminal;

	[Token(Token = "0x40008D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private TerminalConfig config;

	[Token(Token = "0x40008D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CF434", Offset = "0x5CF434")]
	private GUIStyle <terminalStyle>k__BackingField;

	[Token(Token = "0x1700002A")]
	public GUIStyle terminalStyle
	{
		[Token(Token = "0x6000715")]
		[Address(RVA = "0xE8D480", Offset = "0xE8D480", VA = "0xE8D480")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D8378", Offset = "0x5D8378")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000716")]
		[Address(RVA = "0xE8D488", Offset = "0xE8D488", VA = "0xE8D488")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D8388", Offset = "0x5D8388")]
		private set
		{
		}
	}

	[Token(Token = "0x6000717")]
	[Address(RVA = "0xE8B9B4", Offset = "0xE8B9B4", VA = "0xE8B9B4")]
	public TerminalGUI(Terminal terminal)
	{
	}

	[Token(Token = "0x6000718")]
	[Address(RVA = "0xE8BBA8", Offset = "0xE8BBA8", VA = "0xE8BBA8")]
	internal void OnGUI()
	{
	}
}
[Token(Token = "0x200013D")]
public class TerminalInputHandler
{
	[Token(Token = "0x40008D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Terminal terminal;

	[Token(Token = "0x40008DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int touchCounter;

	[Token(Token = "0x40008DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float touchDelay;

	[Token(Token = "0x40008DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float ellapsedTime;

	[Token(Token = "0x6000719")]
	[Address(RVA = "0xE8B978", Offset = "0xE8B978", VA = "0xE8B978")]
	public TerminalInputHandler(Terminal t)
	{
	}

	[Token(Token = "0x600071A")]
	[Address(RVA = "0xE8BF8C", Offset = "0xE8BF8C", VA = "0xE8BF8C")]
	public void Update()
	{
	}

	[Token(Token = "0x600071B")]
	[Address(RVA = "0xE8D490", Offset = "0xE8D490", VA = "0xE8D490")]
	private bool MobileInput()
	{
		return default(bool);
	}
}
[Token(Token = "0x200013E")]
public class TerminalMethods
{
	[Serializable]
	[Token(Token = "0x20003AE")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDD7C", Offset = "0x5CDD7C")]
	private sealed class <>c
	{
		[Token(Token = "0x4001908")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly <>c <>9;

		[Token(Token = "0x4001909")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Func<Type, IEnumerable<MethodInfo>> <>9__5_0;

		[Token(Token = "0x400190A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static Func<MethodInfo, bool> <>9__5_1;

		[Token(Token = "0x60019D4")]
		[Address(RVA = "0x138B3D4", Offset = "0x138B3D4", VA = "0x138B3D4")]
		public <>c()
		{
		}

		[Token(Token = "0x60019D5")]
		[Address(RVA = "0x138B3DC", Offset = "0x138B3DC", VA = "0x138B3DC")]
		internal IEnumerable<MethodInfo> <.ctor>b__5_0(Type x)
		{
			return null;
		}

		[Token(Token = "0x60019D6")]
		[Address(RVA = "0x138B3F8", Offset = "0x138B3F8", VA = "0x138B3F8")]
		internal bool <.ctor>b__5_1(MethodInfo y)
		{
			return default(bool);
		}
	}

	[Token(Token = "0x20003AF")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDD8C", Offset = "0x5CDD8C")]
	private sealed class <>c__DisplayClass6_0
	{
		[Token(Token = "0x400190B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string input;

		[Token(Token = "0x60019D7")]
		[Address(RVA = "0x138B478", Offset = "0x138B478", VA = "0x138B478")]
		public <>c__DisplayClass6_0()
		{
		}

		[Token(Token = "0x60019D8")]
		[Address(RVA = "0x138B480", Offset = "0x138B480", VA = "0x138B480")]
		internal bool <GetCommandsContaining>b__0(string k)
		{
			return default(bool);
		}
	}

	[Token(Token = "0x40008DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CF444", Offset = "0x5CF444")]
	private List<MethodInfo> <methods>k__BackingField;

	[Token(Token = "0x40008DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private List<string> methodNames;

	[Token(Token = "0x1700002B")]
	public List<MethodInfo> methods
	{
		[Token(Token = "0x600071C")]
		[Address(RVA = "0xE8D57C", Offset = "0xE8D57C", VA = "0xE8D57C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D8398", Offset = "0x5D8398")]
		get
		{
			return null;
		}
		[Token(Token = "0x600071D")]
		[Address(RVA = "0xE8D584", Offset = "0xE8D584", VA = "0xE8D584")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D83A8", Offset = "0x5D83A8")]
		private set
		{
		}
	}

	[Token(Token = "0x600071E")]
	[Address(RVA = "0xE8B470", Offset = "0xE8B470", VA = "0xE8B470")]
	public TerminalMethods()
	{
	}

	[Token(Token = "0x600071F")]
	[Address(RVA = "0xE8D1D0", Offset = "0xE8D1D0", VA = "0xE8D1D0")]
	public string[] GetCommandsContaining(string input)
	{
		return null;
	}
}
[Token(Token = "0x200013F")]
public class TerminalStrings
{
	[Token(Token = "0x40008DF")]
	public const string COMMAND_NOT_FOUND = "Command not found! type \"help\" for list of available commands!";

	[Token(Token = "0x40008E0")]
	public const string MULTIPLE_COMMAND_NAMES = "Multiple commands are defined with: ";

	[Token(Token = "0x40008E1")]
	public const string ARGUMENT_COUNT_MISSMATCH = "Method {0} needs {1} arguments, passed {2}";

	[Token(Token = "0x6000720")]
	[Address(RVA = "0xE8D58C", Offset = "0xE8D58C", VA = "0xE8D58C")]
	public TerminalStrings()
	{
	}
}
[Token(Token = "0x2000140")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x5C9D1C", Offset = "0x5C9D1C")]
public class particleAttractorLinear : MonoBehaviour
{
	[Token(Token = "0x40008E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ParticleSystem ps;

	[Token(Token = "0x40008E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ParticleSystem.Particle[] m_Particles;

	[Token(Token = "0x40008E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform target;

	[Token(Token = "0x40008E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float speed;

	[Token(Token = "0x40008E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private int numParticlesAlive;

	[Token(Token = "0x6000721")]
	[Address(RVA = "0xD154C0", Offset = "0xD154C0", VA = "0xD154C0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000722")]
	[Address(RVA = "0xD155A4", Offset = "0xD155A4", VA = "0xD155A4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000723")]
	[Address(RVA = "0xD15748", Offset = "0xD15748", VA = "0xD15748")]
	public particleAttractorLinear()
	{
	}
}
[Token(Token = "0x2000141")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x5C9D7C", Offset = "0x5C9D7C")]
public class particleAttractorMove : MonoBehaviour
{
	[Token(Token = "0x40008E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ParticleSystem ps;

	[Token(Token = "0x40008E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ParticleSystem.Particle[] m_Particles;

	[Token(Token = "0x40008E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform target;

	[Token(Token = "0x40008EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float speed;

	[Token(Token = "0x40008EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private int numParticlesAlive;

	[Token(Token = "0x6000724")]
	[Address(RVA = "0xD15758", Offset = "0xD15758", VA = "0xD15758")]
	private void Start()
	{
	}

	[Token(Token = "0x6000725")]
	[Address(RVA = "0xD1583C", Offset = "0xD1583C", VA = "0xD1583C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000726")]
	[Address(RVA = "0xD159E0", Offset = "0xD159E0", VA = "0xD159E0")]
	public particleAttractorMove()
	{
	}
}
[Token(Token = "0x2000142")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x5C9DDC", Offset = "0x5C9DDC")]
public class particleAttractorSelf : MonoBehaviour
{
	[Token(Token = "0x40008EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ParticleSystem ps;

	[Token(Token = "0x40008ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ParticleSystem.Particle[] m_Particles;

	[Token(Token = "0x40008EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float speed;

	[Token(Token = "0x40008EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private int numParticlesAlive;

	[Token(Token = "0x6000727")]
	[Address(RVA = "0xD159F0", Offset = "0xD159F0", VA = "0xD159F0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000728")]
	[Address(RVA = "0xD15AD4", Offset = "0xD15AD4", VA = "0xD15AD4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000729")]
	[Address(RVA = "0xD15C94", Offset = "0xD15C94", VA = "0xD15C94")]
	public particleAttractorSelf()
	{
	}
}
[Token(Token = "0x2000143")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x5C9E3C", Offset = "0x5C9E3C")]
public class particleAttractorSpherical : MonoBehaviour
{
	[Token(Token = "0x40008F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ParticleSystem ps;

	[Token(Token = "0x40008F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ParticleSystem.Particle[] m_Particles;

	[Token(Token = "0x40008F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform target;

	[Token(Token = "0x40008F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float speed;

	[Token(Token = "0x40008F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private int numParticlesAlive;

	[Token(Token = "0x600072A")]
	[Address(RVA = "0xD15CA4", Offset = "0xD15CA4", VA = "0xD15CA4")]
	private void Start()
	{
	}

	[Token(Token = "0x600072B")]
	[Address(RVA = "0xD15D88", Offset = "0xD15D88", VA = "0xD15D88")]
	private void Update()
	{
	}

	[Token(Token = "0x600072C")]
	[Address(RVA = "0xD15F2C", Offset = "0xD15F2C", VA = "0xD15F2C")]
	public particleAttractorSpherical()
	{
	}
}
[Token(Token = "0x2000144")]
public class rotation : MonoBehaviour
{
	[Token(Token = "0x40008F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float xRotation;

	[Token(Token = "0x40008F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float yRotation;

	[Token(Token = "0x40008F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float zRotation;

	[Token(Token = "0x600072D")]
	[Address(RVA = "0x7E48CC", Offset = "0x7E48CC", VA = "0x7E48CC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600072E")]
	[Address(RVA = "0x7E4928", Offset = "0x7E4928", VA = "0x7E4928")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600072F")]
	[Address(RVA = "0x7E4930", Offset = "0x7E4930", VA = "0x7E4930")]
	public void clickOn()
	{
	}

	[Token(Token = "0x6000730")]
	[Address(RVA = "0x7E498C", Offset = "0x7E498C", VA = "0x7E498C")]
	public void clickOff()
	{
	}

	[Token(Token = "0x6000731")]
	[Address(RVA = "0x7E4994", Offset = "0x7E4994", VA = "0x7E4994")]
	private void rotate()
	{
	}

	[Token(Token = "0x6000732")]
	[Address(RVA = "0x7E49E8", Offset = "0x7E49E8", VA = "0x7E49E8")]
	public rotation()
	{
	}
}
[Token(Token = "0x2000145")]
public class PL_RandomMovement : MonoBehaviour
{
	[Token(Token = "0x20003B0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDD9C", Offset = "0x5CDD9C")]
	private sealed class <Start>d__5 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400190C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400190D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400190E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PL_RandomMovement <>4__this;

		[Token(Token = "0x170002B9")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60019DC")]
			[Address(RVA = "0xFEFA50", Offset = "0xFEFA50", VA = "0xFEFA50", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002BA")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60019DE")]
			[Address(RVA = "0xFEFA98", Offset = "0xFEFA98", VA = "0xFEFA98", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60019D9")]
		[Address(RVA = "0xFEF844", Offset = "0xFEF844", VA = "0xFEF844")]
		[DebuggerHidden]
		public <Start>d__5(int <>1__state)
		{
		}

		[Token(Token = "0x60019DA")]
		[Address(RVA = "0xFEF870", Offset = "0xFEF870", VA = "0xFEF870", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60019DB")]
		[Address(RVA = "0xFEF874", Offset = "0xFEF874", VA = "0xFEF874", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60019DD")]
		[Address(RVA = "0xFEFA58", Offset = "0xFEFA58", VA = "0xFEFA58", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20003B1")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDDAC", Offset = "0x5CDDAC")]
	private sealed class <Spawn>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400190F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001910")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001911")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PL_RandomMovement <>4__this;

		[Token(Token = "0x170002BB")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60019E2")]
			[Address(RVA = "0xFEF7F4", Offset = "0xFEF7F4", VA = "0xFEF7F4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002BC")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60019E4")]
			[Address(RVA = "0xFEF83C", Offset = "0xFEF83C", VA = "0xFEF83C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60019DF")]
		[Address(RVA = "0xFEF6AC", Offset = "0xFEF6AC", VA = "0xFEF6AC")]
		[DebuggerHidden]
		public <Spawn>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x60019E0")]
		[Address(RVA = "0xFEF6D8", Offset = "0xFEF6D8", VA = "0xFEF6D8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60019E1")]
		[Address(RVA = "0xFEF6DC", Offset = "0xFEF6DC", VA = "0xFEF6DC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60019E3")]
		[Address(RVA = "0xFEF7FC", Offset = "0xFEF7FC", VA = "0xFEF7FC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40008F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 rp;

	[Token(Token = "0x40008F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int counter;

	[Token(Token = "0x40008FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float speed;

	[Token(Token = "0x40008FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int duplicate;

	[Token(Token = "0x40008FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool duped;

	[Token(Token = "0x6000733")]
	[Address(RVA = "0x1316AD4", Offset = "0x1316AD4", VA = "0x1316AD4")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D83B8", Offset = "0x5D83B8")]
	public IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x6000734")]
	[Address(RVA = "0x1316B4C", Offset = "0x1316B4C", VA = "0x1316B4C")]
	public void RandomPos()
	{
	}

	[Token(Token = "0x6000735")]
	[Address(RVA = "0x1316BA0", Offset = "0x1316BA0", VA = "0x1316BA0")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D8418", Offset = "0x5D8418")]
	public IEnumerator Spawn()
	{
		return null;
	}

	[Token(Token = "0x6000736")]
	[Address(RVA = "0x1316C18", Offset = "0x1316C18", VA = "0x1316C18")]
	public void Update()
	{
	}

	[Token(Token = "0x6000737")]
	[Address(RVA = "0x1316CF0", Offset = "0x1316CF0", VA = "0x1316CF0")]
	public PL_RandomMovement()
	{
	}
}
[Token(Token = "0x2000146")]
public class PL_RandomRotate : MonoBehaviour
{
	[Token(Token = "0x40008FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Quaternion rotTarget;

	[Token(Token = "0x40008FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float rotateEverySecond;

	[Token(Token = "0x6000738")]
	[Address(RVA = "0x1316CF8", Offset = "0x1316CF8", VA = "0x1316CF8")]
	public void Start()
	{
	}

	[Token(Token = "0x6000739")]
	[Address(RVA = "0x1316D8C", Offset = "0x1316D8C", VA = "0x1316D8C")]
	public void Update()
	{
	}

	[Token(Token = "0x600073A")]
	[Address(RVA = "0x1316D60", Offset = "0x1316D60", VA = "0x1316D60")]
	public void randomRot()
	{
	}

	[Token(Token = "0x600073B")]
	[Address(RVA = "0x1316E50", Offset = "0x1316E50", VA = "0x1316E50")]
	public PL_RandomRotate()
	{
	}
}
[Token(Token = "0x2000147")]
public class ParticleLineSpawner : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x20003B2")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDDBC", Offset = "0x5CDDBC")]
	private sealed class <>c
	{
		[Token(Token = "0x4001912")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly <>c <>9;

		[Token(Token = "0x4001913")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Func<GameObject, string> <>9__14_0;

		[Token(Token = "0x60019E6")]
		[Address(RVA = "0xFF09A0", Offset = "0xFF09A0", VA = "0xFF09A0")]
		public <>c()
		{
		}

		[Token(Token = "0x60019E7")]
		[Address(RVA = "0xFF09A8", Offset = "0xFF09A8", VA = "0xFF09A8")]
		internal string <Start>b__14_0(GameObject go)
		{
			return null;
		}
	}

	[Token(Token = "0x40008FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] particles;

	[Token(Token = "0x4000900")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int maxButtons;

	[Token(Token = "0x4000901")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool spawnOnAwake;

	[Token(Token = "0x4000902")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string removeTextFromButton;

	[Token(Token = "0x4000903")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public string removeTextFromMaterialButton;

	[Token(Token = "0x4000904")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float autoChangeDelay;

	[Token(Token = "0x4000905")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private int page;

	[Token(Token = "0x4000906")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int pages;

	[Token(Token = "0x4000907")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private GameObject currentGO;

	[Token(Token = "0x4000908")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Color currentColor;

	[Token(Token = "0x4000909")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool isPS;

	[Token(Token = "0x400090A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
	private bool _active;

	[Token(Token = "0x400090B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private int counter;

	[Token(Token = "0x400090C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public GUIStyle bigStyle;

	[Token(Token = "0x600073C")]
	[Address(RVA = "0x132171C", Offset = "0x132171C", VA = "0x132171C")]
	public void Start()
	{
	}

	[Token(Token = "0x600073D")]
	[Address(RVA = "0x1321A00", Offset = "0x1321A00", VA = "0x1321A00")]
	public void Update()
	{
	}

	[Token(Token = "0x600073E")]
	[Address(RVA = "0x1321AC0", Offset = "0x1321AC0", VA = "0x1321AC0")]
	public void NextModel()
	{
	}

	[Token(Token = "0x600073F")]
	[Address(RVA = "0x1321B20", Offset = "0x1321B20", VA = "0x1321B20")]
	public void AddMovement()
	{
	}

	[Token(Token = "0x6000740")]
	[Address(RVA = "0x1321B84", Offset = "0x1321B84", VA = "0x1321B84")]
	public void Duplicate()
	{
	}

	[Token(Token = "0x6000741")]
	[Address(RVA = "0x1321C94", Offset = "0x1321C94", VA = "0x1321C94")]
	public void DestroyAll()
	{
	}

	[Token(Token = "0x6000742")]
	[Address(RVA = "0x1321E0C", Offset = "0x1321E0C", VA = "0x1321E0C")]
	public void OnGUI()
	{
	}

	[Token(Token = "0x6000743")]
	[Address(RVA = "0x1321914", Offset = "0x1321914", VA = "0x1321914")]
	public void ReplaceGO(GameObject _go)
	{
	}

	[Token(Token = "0x6000744")]
	[Address(RVA = "0x1322388", Offset = "0x1322388", VA = "0x1322388")]
	public void PlayPS(ParticleSystem _ps, int _nr)
	{
	}

	[Token(Token = "0x6000745")]
	[Address(RVA = "0x13223C0", Offset = "0x13223C0", VA = "0x13223C0")]
	public ParticleLineSpawner()
	{
	}
}
[Token(Token = "0x2000148")]
public class SBCrossfadeAnimations : MonoBehaviour
{
	[Token(Token = "0x400090D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Animation a;

	[Token(Token = "0x400090E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ArrayList animations;

	[Token(Token = "0x400090F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int current;

	[Token(Token = "0x6000746")]
	[Address(RVA = "0xCD1F24", Offset = "0xCD1F24", VA = "0xCD1F24")]
	private void Start()
	{
	}

	[Token(Token = "0x6000747")]
	[Address(RVA = "0xCD1FAC", Offset = "0xCD1FAC", VA = "0xCD1FAC")]
	private void CreateAnimationList()
	{
	}

	[Token(Token = "0x6000748")]
	[Address(RVA = "0xCD22C8", Offset = "0xCD22C8", VA = "0xCD22C8")]
	private void CrossfadeRandom()
	{
	}

	[Token(Token = "0x6000749")]
	[Address(RVA = "0xCD23CC", Offset = "0xCD23CC", VA = "0xCD23CC")]
	public SBCrossfadeAnimations()
	{
	}
}
[Token(Token = "0x2000149")]
public class SBDemoRotate : MonoBehaviour
{
	[Token(Token = "0x4000910")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float speed;

	[Token(Token = "0x600074A")]
	[Address(RVA = "0xCD23D4", Offset = "0xCD23D4", VA = "0xCD23D4")]
	private void Update()
	{
	}

	[Token(Token = "0x600074B")]
	[Address(RVA = "0xCD2458", Offset = "0xCD2458", VA = "0xCD2458")]
	public SBDemoRotate()
	{
	}
}
[Token(Token = "0x200014A")]
public class VertexColorToonLight : MonoBehaviour
{
	[Token(Token = "0x4000911")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform lig;

	[Token(Token = "0x4000912")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Renderer ren;

	[Token(Token = "0x4000913")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float distanceMultiplier;

	[Token(Token = "0x4000914")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Material mat;

	[Token(Token = "0x600074C")]
	[Address(RVA = "0xD0D950", Offset = "0xD0D950", VA = "0xD0D950")]
	private void Start()
	{
	}

	[Token(Token = "0x600074D")]
	[Address(RVA = "0xD0D98C", Offset = "0xD0D98C", VA = "0xD0D98C")]
	private void Update()
	{
	}

	[Token(Token = "0x600074E")]
	[Address(RVA = "0xD0DB14", Offset = "0xD0DB14", VA = "0xD0DB14")]
	public VertexColorToonLight()
	{
	}
}
[Token(Token = "0x200014B")]
[ExecuteInEditMode]
public class ParticleLines : MonoBehaviour
{
	[Token(Token = "0x4000915")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SimpleLineRenderer _line;

	[Token(Token = "0x4000916")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ParticleSystem _ps;

	[Token(Token = "0x4000917")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool _sortParticleOnLife;

	[Token(Token = "0x4000918")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool _sortParticleOnDistance;

	[Token(Token = "0x4000919")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
	public bool _freezeZeroParticle;

	[Token(Token = "0x400091A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public Color startColor;

	[Token(Token = "0x400091B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public Color endColor;

	[Token(Token = "0x400091C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public bool _gradients;

	[Token(Token = "0x400091D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Gradient _gradientStart;

	[Token(Token = "0x400091E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Gradient _gradientEnd;

	[Token(Token = "0x400091F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public float _gradientSpeed;

	[Token(Token = "0x4000920")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public bool _randomGradientStart;

	[Token(Token = "0x4000921")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
	public bool _gradientLight;

	[Token(Token = "0x4000922")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Light _light;

	[Token(Token = "0x4000923")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public bool _vertexCountIntensity;

	[Token(Token = "0x4000924")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public float _vertexCountIntensityMultiplier;

	[Token(Token = "0x4000925")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public bool _flicker;

	[Token(Token = "0x4000926")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public AnimationCurve _lightFlicker;

	[Token(Token = "0x4000927")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public string _positionLight;

	[Token(Token = "0x4000928")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public bool _tileLineMaterial;

	[Token(Token = "0x4000929")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	public float _tileMultiplier;

	[Token(Token = "0x400092A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public bool _fixedTileMaterial;

	[Token(Token = "0x400092B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x99")]
	public bool _tileAnimate;

	[Token(Token = "0x400092C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	public float _tileAnimateSpeed;

	[Token(Token = "0x400092D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public bool animateScale;

	[Token(Token = "0x400092E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	public float startScaleMultiplier;

	[Token(Token = "0x400092F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public AnimationCurve startScale;

	[Token(Token = "0x4000930")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public float endScaleMultiplier;

	[Token(Token = "0x4000931")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public AnimationCurve endScale;

	[Token(Token = "0x4000932")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public float _scaleSpeed;

	[Token(Token = "0x4000933")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	public Vector3 _rotationSpeed;

	[Token(Token = "0x4000934")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public int _sortInterval;

	[Token(Token = "0x4000935")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	private int _lineVertex;

	[Token(Token = "0x4000936")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private ParticleSystem.Particle[] myParticles;

	[Token(Token = "0x4000937")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private ParticleSystem.Particle[] myParticlesX;

	[Token(Token = "0x4000938")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private ParticleSystem.Particle[] myParticlesY;

	[Token(Token = "0x4000939")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private float _gradientCounter;

	[Token(Token = "0x400093A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	private float _randomNumber;

	[Token(Token = "0x400093B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private float _saveLightIntensity;

	[Token(Token = "0x400093C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
	private int _randomInt;

	[Token(Token = "0x400093D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public int _cutEndSegments;

	[Token(Token = "0x400093E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	public int _lineResolution;

	[Token(Token = "0x400093F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public int _currentResolution;

	[Token(Token = "0x4000940")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
	public int sorted;

	[Token(Token = "0x4000941")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public Material lineMaterial;

	[Token(Token = "0x4000942")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public MeshRenderer cacheMeshRenderer;

	[Token(Token = "0x600074F")]
	[Address(RVA = "0x13223E4", Offset = "0x13223E4", VA = "0x13223E4")]
	public void Start()
	{
	}

	[Token(Token = "0x6000750")]
	[Address(RVA = "0x13226F0", Offset = "0x13226F0", VA = "0x13226F0")]
	public int GetFrameCount()
	{
		return default(int);
	}

	[Token(Token = "0x6000751")]
	[Address(RVA = "0x132271C", Offset = "0x132271C", VA = "0x132271C")]
	public int Compare(float first, float second)
	{
		return default(int);
	}

	[Token(Token = "0x6000752")]
	[Address(RVA = "0x1322744", Offset = "0x1322744", VA = "0x1322744")]
	public void SetLine()
	{
	}

	[Token(Token = "0x6000753")]
	[Address(RVA = "0x1322818", Offset = "0x1322818", VA = "0x1322818")]
	public void SortLifetime()
	{
	}

	[Token(Token = "0x6000754")]
	[Address(RVA = "0x1322A50", Offset = "0x1322A50", VA = "0x1322A50")]
	public void SortDistance()
	{
	}

	[Token(Token = "0x6000755")]
	[Address(RVA = "0x13228E8", Offset = "0x13228E8", VA = "0x13228E8")]
	public void CreateLine()
	{
	}

	[Token(Token = "0x6000756")]
	[Address(RVA = "0x1322B20", Offset = "0x1322B20", VA = "0x1322B20")]
	public void LerpLine()
	{
	}

	[Token(Token = "0x6000757")]
	[Address(RVA = "0x1322C9C", Offset = "0x1322C9C", VA = "0x1322C9C")]
	public void SetLineResolution()
	{
	}

	[Token(Token = "0x6000758")]
	[Address(RVA = "0x1322D7C", Offset = "0x1322D7C", VA = "0x1322D7C")]
	public void LinePos()
	{
	}

	[Token(Token = "0x6000759")]
	[Address(RVA = "0x1322F38", Offset = "0x1322F38", VA = "0x1322F38")]
	public void Update()
	{
	}

	[Token(Token = "0x600075A")]
	[Address(RVA = "0x1323594", Offset = "0x1323594", VA = "0x1323594")]
	public ParticleLines()
	{
	}

	[Token(Token = "0x600075B")]
	[Address(RVA = "0x1323670", Offset = "0x1323670", VA = "0x1323670")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D8478", Offset = "0x5D8478")]
	private int <SortLifetime>b__50_0(ParticleSystem.Particle g1, ParticleSystem.Particle g2)
	{
		return default(int);
	}

	[Token(Token = "0x600075C")]
	[Address(RVA = "0x13236CC", Offset = "0x13236CC", VA = "0x13236CC")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D8488", Offset = "0x5D8488")]
	private int <SortDistance>b__51_0(ParticleSystem.Particle g1, ParticleSystem.Particle g2)
	{
		return default(int);
	}
}
[Token(Token = "0x200014C")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x5C9EAC", Offset = "0x5C9EAC")]
[ExecuteInEditMode]
public class SimpleLineRenderer : MonoBehaviour
{
	[Token(Token = "0x4000943")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Mesh mesh;

	[Token(Token = "0x4000944")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int[] triangles;

	[Token(Token = "0x4000945")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector2[] uvs;

	[Token(Token = "0x4000946")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public List<Vertex> points;

	[Token(Token = "0x4000947")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int currentVertexPointCount;

	[Token(Token = "0x4000948")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[HideInInspector]
	public Transform cacheTransform;

	[Token(Token = "0x4000949")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public LayerMask layerMask;

	[Token(Token = "0x400094A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public bool hardEdge;

	[Token(Token = "0x600075D")]
	[Address(RVA = "0xA0E270", Offset = "0xA0E270", VA = "0xA0E270")]
	private void Awake()
	{
	}

	[Token(Token = "0x600075E")]
	[Address(RVA = "0xA0E370", Offset = "0xA0E370", VA = "0xA0E370")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x600075F")]
	[Address(RVA = "0xA0EC68", Offset = "0xA0EC68", VA = "0xA0EC68")]
	private void EditorInit()
	{
	}

	[Token(Token = "0x6000760")]
	[Address(RVA = "0xA0ED68", Offset = "0xA0ED68", VA = "0xA0ED68")]
	public void SetPosition(int index, Vector3 position)
	{
	}

	[Token(Token = "0x6000761")]
	[Address(RVA = "0xA0EE18", Offset = "0xA0EE18", VA = "0xA0EE18")]
	public void SetWidth(int index, float width)
	{
	}

	[Token(Token = "0x6000762")]
	[Address(RVA = "0xA0EEB4", Offset = "0xA0EEB4", VA = "0xA0EEB4")]
	public void SetWidth(float startWidth, float endWidth)
	{
	}

	[Token(Token = "0x6000763")]
	[Address(RVA = "0xA0EFA8", Offset = "0xA0EFA8", VA = "0xA0EFA8")]
	public void SetColor(Color startColor, Color endColor)
	{
	}

	[Token(Token = "0x6000764")]
	[Address(RVA = "0xA0F0F4", Offset = "0xA0F0F4", VA = "0xA0F0F4")]
	public void SetColor(int index, Color color)
	{
	}

	[Token(Token = "0x6000765")]
	[Address(RVA = "0xA0E47C", Offset = "0xA0E47C", VA = "0xA0E47C")]
	public void UpdateLineMesh(Camera targetCamera)
	{
	}

	[Token(Token = "0x6000766")]
	[Address(RVA = "0xA0F1A8", Offset = "0xA0F1A8", VA = "0xA0F1A8")]
	public void SetVertexCount(int vertexPointCount)
	{
	}

	[Token(Token = "0x6000767")]
	[Address(RVA = "0xA0F65C", Offset = "0xA0F65C", VA = "0xA0F65C")]
	public SimpleLineRenderer()
	{
	}
}
[Token(Token = "0x200014D")]
public class Vertex
{
	[Token(Token = "0x400094B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Vector3 position;

	[Token(Token = "0x400094C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Color color;

	[Token(Token = "0x400094D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float width;

	[Token(Token = "0x6000768")]
	[Address(RVA = "0xD0D904", Offset = "0xD0D904", VA = "0xD0D904")]
	public Vertex()
	{
	}
}
[Token(Token = "0x200014E")]
public class MoveObjectTestCode : MonoBehaviour
{
	[Token(Token = "0x400094E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private PerfectLookAt m_PerfectLookAt;

	[Token(Token = "0x400094F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private GUIStyle m_Style;

	[Token(Token = "0x4000950")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Animator m_Anim;

	[Token(Token = "0x4000951")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool m_switch;

	[Token(Token = "0x6000769")]
	[Address(RVA = "0xDF6560", Offset = "0xDF6560", VA = "0xDF6560")]
	private void Start()
	{
	}

	[Token(Token = "0x600076A")]
	[Address(RVA = "0xDF66A0", Offset = "0xDF66A0", VA = "0xDF66A0")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x600076B")]
	[Address(RVA = "0xDF6758", Offset = "0xDF6758", VA = "0xDF6758")]
	private void Update()
	{
	}

	[Token(Token = "0x600076C")]
	[Address(RVA = "0xDF6D08", Offset = "0xDF6D08", VA = "0xDF6D08")]
	public MoveObjectTestCode()
	{
	}
}
[Token(Token = "0x200014F")]
public class PerfectLookAt : MonoBehaviour
{
	[Token(Token = "0x4000952")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject m_TargetObject;

	[Token(Token = "0x4000953")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector3 m_UpVector;

	[Token(Token = "0x4000954")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float m_Weight;

	[Token(Token = "0x4000955")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float m_LookAtBlendSpeed;

	[Token(Token = "0x4000956")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float m_BlendSpeed;

	[Token(Token = "0x4000957")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool m_DrawDebugLookAtLines;

	[Token(Token = "0x4000958")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	private bool m_IsValid;

	[Token(Token = "0x4000959")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public PerfectLookAtData[] m_LookAtBones;

	[Token(Token = "0x400095A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Quaternion[] m_BlendedRotations;

	[Token(Token = "0x400095B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Quaternion[] m_LastFrameRotations;

	[Token(Token = "0x600076D")]
	[Address(RVA = "0x11FE15C", Offset = "0x11FE15C", VA = "0x11FE15C")]
	public float GetLookAtWeight()
	{
		return default(float);
	}

	[Token(Token = "0x600076E")]
	[Address(RVA = "0x11FE164", Offset = "0x11FE164", VA = "0x11FE164")]
	public void SetLookAtWeight(float weight)
	{
	}

	[Token(Token = "0x600076F")]
	[Address(RVA = "0x11FE198", Offset = "0x11FE198", VA = "0x11FE198")]
	public void EnablePerfectLookat(float time, bool cancelCurrentTransition = true)
	{
	}

	[Token(Token = "0x6000770")]
	[Address(RVA = "0x11FE240", Offset = "0x11FE240", VA = "0x11FE240")]
	public void DisablePerfectLookat(float time, bool cancelCurrentTransition = true)
	{
	}

	[Token(Token = "0x6000771")]
	[Address(RVA = "0x11FE2DC", Offset = "0x11FE2DC", VA = "0x11FE2DC")]
	public bool IsInTransition()
	{
		return default(bool);
	}

	[Token(Token = "0x6000772")]
	[Address(RVA = "0x11FE33C", Offset = "0x11FE33C", VA = "0x11FE33C")]
	public float GetTimeToFinishTransition()
	{
		return default(float);
	}

	[Token(Token = "0x6000773")]
	[Address(RVA = "0x11FE3C0", Offset = "0x11FE3C0", VA = "0x11FE3C0")]
	private Quaternion GetWorldLookAtRotation(Vector3 targetVector, Vector3 fwdVectorInWorldSpace)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x6000774")]
	[Address(RVA = "0x11FE57C", Offset = "0x11FE57C", VA = "0x11FE57C")]
	private Quaternion PerfectLookAtSlerp(Quaternion a, Quaternion b, float weight)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x6000775")]
	[Address(RVA = "0x11FE4E0", Offset = "0x11FE4E0", VA = "0x11FE4E0")]
	private Quaternion QuaternionFromAngleAxis(ref Vector3 rotationAxis, float angleRad)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x6000776")]
	[Address(RVA = "0x11FE67C", Offset = "0x11FE67C", VA = "0x11FE67C")]
	private void CheckForForceDefaultRotation()
	{
	}

	[Token(Token = "0x6000777")]
	[Address(RVA = "0x11FE780", Offset = "0x11FE780", VA = "0x11FE780")]
	private bool CheckValidity()
	{
		return default(bool);
	}

	[Token(Token = "0x6000778")]
	[Address(RVA = "0x11FE8CC", Offset = "0x11FE8CC", VA = "0x11FE8CC")]
	private float GetAngleFromQuaternionDeg(ref Quaternion inputQuat)
	{
		return default(float);
	}

	[Token(Token = "0x6000779")]
	[Address(RVA = "0x11FE8F4", Offset = "0x11FE8F4", VA = "0x11FE8F4")]
	private float GetAngleFromQuaternionDeg(Quaternion inputQuat)
	{
		return default(float);
	}

	[Token(Token = "0x600077A")]
	[Address(RVA = "0x11FE91C", Offset = "0x11FE91C", VA = "0x11FE91C")]
	private float GetAngleFromQuaternionRad(Quaternion inputQuat)
	{
		return default(float);
	}

	[Token(Token = "0x600077B")]
	[Address(RVA = "0x11FE938", Offset = "0x11FE938", VA = "0x11FE938")]
	private float GetAngleFromQuaternionRad(ref Quaternion inputQuat)
	{
		return default(float);
	}

	[Token(Token = "0x600077C")]
	[Address(RVA = "0x11FE954", Offset = "0x11FE954", VA = "0x11FE954")]
	private Vector3 GetForwardVector(ref Transform inputTr, FwdDirection inputAxis)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600077D")]
	[Address(RVA = "0x11FEA08", Offset = "0x11FEA08", VA = "0x11FEA08")]
	private Vector3 BlendTowardTargetVector(ref Transform inputTr, FwdDirection inputAxis)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600077E")]
	[Address(RVA = "0x11FEABC", Offset = "0x11FEABC", VA = "0x11FEABC")]
	private void Start()
	{
	}

	[Token(Token = "0x600077F")]
	[Address(RVA = "0x11FED44", Offset = "0x11FED44", VA = "0x11FED44")]
	private void Update()
	{
	}

	[Token(Token = "0x6000780")]
	[Address(RVA = "0x11FEF60", Offset = "0x11FEF60", VA = "0x11FEF60")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000781")]
	[Address(RVA = "0x12000B4", Offset = "0x12000B4", VA = "0x12000B4")]
	public PerfectLookAt()
	{
	}
}
[Token(Token = "0x2000150")]
public enum FwdDirection
{
	[Token(Token = "0x400095D")]
	X_AXIS,
	[Token(Token = "0x400095E")]
	Y_AXIS,
	[Token(Token = "0x400095F")]
	Z_AXIS,
	[Token(Token = "0x4000960")]
	MINUS_X_AXIS,
	[Token(Token = "0x4000961")]
	MINUS_Y_AXIS,
	[Token(Token = "0x4000962")]
	MINUS_Z_AXIS
}
[Serializable]
[Token(Token = "0x2000151")]
public class PerfectLookAtData
{
	[Token(Token = "0x4000963")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Quaternion m_DefaultRotation;

	[Token(Token = "0x4000964")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform m_Bone;

	[Token(Token = "0x4000965")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float m_RotationLimit;

	[Token(Token = "0x4000966")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float m_RotateAroundUpVectorWeight;

	[Token(Token = "0x4000967")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public FwdDirection m_ForwardAxis;

	[Token(Token = "0x4000968")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public FwdDirection m_ParentBoneForwardAxis;

	[Token(Token = "0x4000969")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool m_ResetToDefaultRotation;

	[Token(Token = "0x400096A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public PerfecLookAtLinkedBones[] m_LinkedBones;

	[Token(Token = "0x6000782")]
	[Address(RVA = "0x12000FC", Offset = "0x12000FC", VA = "0x12000FC")]
	public void SetDefaultRotation(Quaternion rot)
	{
	}

	[Token(Token = "0x6000783")]
	[Address(RVA = "0x1200108", Offset = "0x1200108", VA = "0x1200108")]
	public Quaternion GetDefaultRotation()
	{
		return default(Quaternion);
	}

	[Token(Token = "0x6000784")]
	[Address(RVA = "0x11FEC94", Offset = "0x11FEC94", VA = "0x11FEC94")]
	public void CheckJointRotation()
	{
	}

	[Token(Token = "0x6000785")]
	[Address(RVA = "0x1200114", Offset = "0x1200114", VA = "0x1200114")]
	public PerfectLookAtData()
	{
	}
}
[Serializable]
[Token(Token = "0x2000152")]
public class PerfecLookAtLinkedBones
{
	[Token(Token = "0x400096B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Quaternion m_DefaultRotation;

	[Token(Token = "0x400096C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Quaternion m_LastFrameRotation;

	[Token(Token = "0x400096D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform m_Bone;

	[Token(Token = "0x400096E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool m_ResetToDefaultRotation;

	[Token(Token = "0x6000786")]
	[Address(RVA = "0x11FE124", Offset = "0x11FE124", VA = "0x11FE124")]
	public void SetDefaultRotation(Quaternion rot)
	{
	}

	[Token(Token = "0x6000787")]
	[Address(RVA = "0x11FE130", Offset = "0x11FE130", VA = "0x11FE130")]
	public Quaternion GetDefaultRotation()
	{
		return default(Quaternion);
	}

	[Token(Token = "0x6000788")]
	[Address(RVA = "0x11FE13C", Offset = "0x11FE13C", VA = "0x11FE13C")]
	public void SetLastFrameRotation(Quaternion rotation)
	{
	}

	[Token(Token = "0x6000789")]
	[Address(RVA = "0x11FE148", Offset = "0x11FE148", VA = "0x11FE148")]
	public Quaternion GetLastFrameRotation()
	{
		return default(Quaternion);
	}

	[Token(Token = "0x600078A")]
	[Address(RVA = "0x11FE154", Offset = "0x11FE154", VA = "0x11FE154")]
	public PerfecLookAtLinkedBones()
	{
	}
}
[Token(Token = "0x2000153")]
public class HighlightNearestFace : MonoBehaviour
{
	[Token(Token = "0x400096F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float travel;

	[Token(Token = "0x4000970")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float speed;

	[Token(Token = "0x4000971")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private pb_Object target;

	[Token(Token = "0x4000972")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private pb_Face nearest;

	[Token(Token = "0x600078B")]
	[Address(RVA = "0xA4D3C8", Offset = "0xA4D3C8", VA = "0xA4D3C8")]
	private void Start()
	{
	}

	[Token(Token = "0x600078C")]
	[Address(RVA = "0xA4D580", Offset = "0xA4D580", VA = "0xA4D580")]
	private void Update()
	{
	}

	[Token(Token = "0x600078D")]
	[Address(RVA = "0xA4D878", Offset = "0xA4D878", VA = "0xA4D878")]
	private Vector3 FaceCenter(pb_Object pb, pb_Face face)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600078E")]
	[Address(RVA = "0xA4D960", Offset = "0xA4D960", VA = "0xA4D960")]
	public HighlightNearestFace()
	{
	}
}
[Token(Token = "0x2000154")]
public class CharacterSelector : MonoBehaviour
{
	[Token(Token = "0x4000973")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float orbitSpeed;

	[Token(Token = "0x4000974")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float upDownAmplitude;

	[Token(Token = "0x4000975")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float upDownSpeed;

	[Token(Token = "0x4000976")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject makeHumanGO;

	[Token(Token = "0x4000977")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject autodeskGO;

	[Token(Token = "0x4000978")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject mixamoGO;

	[Token(Token = "0x4000979")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Button makeHumanButton;

	[Token(Token = "0x400097A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Button autodeskButton;

	[Token(Token = "0x400097B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Button mixamoButton;

	[Token(Token = "0x400097C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private GameObject activeGameObject;

	[Token(Token = "0x400097D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private LookTargetController lookTargetController;

	[Token(Token = "0x400097E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Transform sphereAnchorXform;

	[Token(Token = "0x400097F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Transform sphereXform;

	[Token(Token = "0x4000980")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Transform leftCubeXform;

	[Token(Token = "0x4000981")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Transform rightCubeXform;

	[Token(Token = "0x4000982")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private float timeToChangeLeftRightTarget;

	[Token(Token = "0x4000983")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Transform leftRightTargetXform;

	[Token(Token = "0x4000984")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private float sphereUpDownTime;

	[Token(Token = "0x4000985")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private bool isSphereOrbiting;

	[Token(Token = "0x4000986")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9D")]
	private bool isSphereUpAndDown;

	[Token(Token = "0x4000987")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9E")]
	private bool isLookingLeftRight;

	[Token(Token = "0x600078F")]
	[Address(RVA = "0x10A9920", Offset = "0x10A9920", VA = "0x10A9920")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000790")]
	[Address(RVA = "0x10A9C38", Offset = "0x10A9C38", VA = "0x10A9C38")]
	public void OnAutodeskSelected()
	{
	}

	[Token(Token = "0x6000791")]
	[Address(RVA = "0x10A9C68", Offset = "0x10A9C68", VA = "0x10A9C68")]
	public void OnLookAtPlayerSelected()
	{
	}

	[Token(Token = "0x6000792")]
	[Address(RVA = "0x10A9C98", Offset = "0x10A9C98", VA = "0x10A9C98")]
	public void OnLookAtSphereSelected()
	{
	}

	[Token(Token = "0x6000793")]
	[Address(RVA = "0x10A9CCC", Offset = "0x10A9CCC", VA = "0x10A9CCC")]
	public void OnLookIdlySelected()
	{
	}

	[Token(Token = "0x6000794")]
	[Address(RVA = "0x10A9CF0", Offset = "0x10A9CF0", VA = "0x10A9CF0")]
	public void OnMakeHumanSelected()
	{
	}

	[Token(Token = "0x6000795")]
	[Address(RVA = "0x10A9D20", Offset = "0x10A9D20", VA = "0x10A9D20")]
	public void OnMixamoSelected()
	{
	}

	[Token(Token = "0x6000796")]
	[Address(RVA = "0x10A9D50", Offset = "0x10A9D50", VA = "0x10A9D50")]
	public void OnLeftRightSelected()
	{
	}

	[Token(Token = "0x6000797")]
	[Address(RVA = "0x10A9E20", Offset = "0x10A9E20", VA = "0x10A9E20")]
	public void OnToggleSphereOribiting(bool toggle)
	{
	}

	[Token(Token = "0x6000798")]
	[Address(RVA = "0x10A9E30", Offset = "0x10A9E30", VA = "0x10A9E30")]
	public void OnToggleSphereUpAndDown(bool toggle)
	{
	}

	[Token(Token = "0x6000799")]
	[Address(RVA = "0x10A9E40", Offset = "0x10A9E40", VA = "0x10A9E40")]
	private void Update()
	{
	}

	[Token(Token = "0x600079A")]
	[Address(RVA = "0x10A9AB0", Offset = "0x10A9AB0", VA = "0x10A9AB0")]
	private void UpdateCharacters()
	{
	}

	[Token(Token = "0x600079B")]
	[Address(RVA = "0x10A9FF8", Offset = "0x10A9FF8", VA = "0x10A9FF8")]
	public CharacterSelector()
	{
	}
}
[Token(Token = "0x2000155")]
public class ActivateSong : MonoBehaviour
{
	[Token(Token = "0x4000988")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	public int pos;

	[Token(Token = "0x4000989")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text songName;

	[Token(Token = "0x400098A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text duration;

	[Token(Token = "0x400098B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Image activeSongImage;

	[Token(Token = "0x400098C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private MusicPlayer musicPlayer;

	[Token(Token = "0x600079C")]
	[Address(RVA = "0xC06AE8", Offset = "0xC06AE8", VA = "0xC06AE8")]
	private void Awake()
	{
	}

	[Token(Token = "0x600079D")]
	[Address(RVA = "0xC06B44", Offset = "0xC06B44", VA = "0xC06B44")]
	public void ChangeToThisSong()
	{
	}

	[Token(Token = "0x600079E")]
	[Address(RVA = "0xC06B68", Offset = "0xC06B68", VA = "0xC06B68")]
	public void ShowSongData(string _artist, string _songName, int _pos, int minutes, int seconds)
	{
	}

	[Token(Token = "0x600079F")]
	[Address(RVA = "0xC06CB4", Offset = "0xC06CB4", VA = "0xC06CB4")]
	public ActivateSong()
	{
	}
}
[Token(Token = "0x2000156")]
public class MusicPlayer : MonoBehaviour
{
	[Token(Token = "0x20003B3")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDDCC", Offset = "0x5CDDCC")]
	private sealed class <HideAnimation>d__30 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001914")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001915")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001916")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MusicPlayer <>4__this;

		[Token(Token = "0x170002BD")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60019EB")]
			[Address(RVA = "0xFED164", Offset = "0xFED164", VA = "0xFED164", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002BE")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60019ED")]
			[Address(RVA = "0xFED1AC", Offset = "0xFED1AC", VA = "0xFED1AC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60019E8")]
		[Address(RVA = "0xFECFA0", Offset = "0xFECFA0", VA = "0xFECFA0")]
		[DebuggerHidden]
		public <HideAnimation>d__30(int <>1__state)
		{
		}

		[Token(Token = "0x60019E9")]
		[Address(RVA = "0xFECFCC", Offset = "0xFECFCC", VA = "0xFECFCC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60019EA")]
		[Address(RVA = "0xFECFD0", Offset = "0xFECFD0", VA = "0xFECFD0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60019EC")]
		[Address(RVA = "0xFED16C", Offset = "0xFED16C", VA = "0xFED16C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20003B4")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDDDC", Offset = "0x5CDDDC")]
	private sealed class <LoadSong>d__41 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001917")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001918")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001919")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SongData song;

		[Token(Token = "0x400191A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public MusicPlayer <>4__this;

		[Token(Token = "0x400191B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AudioClip <a>5__2;

		[Token(Token = "0x170002BF")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60019F1")]
			[Address(RVA = "0xFED3E4", Offset = "0xFED3E4", VA = "0xFED3E4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002C0")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60019F3")]
			[Address(RVA = "0xFED42C", Offset = "0xFED42C", VA = "0xFED42C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60019EE")]
		[Address(RVA = "0xFED1B4", Offset = "0xFED1B4", VA = "0xFED1B4")]
		[DebuggerHidden]
		public <LoadSong>d__41(int <>1__state)
		{
		}

		[Token(Token = "0x60019EF")]
		[Address(RVA = "0xFED1E0", Offset = "0xFED1E0", VA = "0xFED1E0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60019F0")]
		[Address(RVA = "0xFED1E4", Offset = "0xFED1E4", VA = "0xFED1E4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60019F2")]
		[Address(RVA = "0xFED3EC", Offset = "0xFED3EC", VA = "0xFED3EC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400098D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	public bool PrimaryMusicPlayer;

	[Token(Token = "0x400098E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public SongData actualSong;

	[Token(Token = "0x400098F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x5CF484", Offset = "0x5CF484")]
	public AudioSource audioSource;

	[Token(Token = "0x4000990")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Sprite playSprite;

	[Token(Token = "0x4000991")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Sprite pauseSprite;

	[Token(Token = "0x4000992")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public InputField searchSong;

	[Token(Token = "0x4000993")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x5CF4BC", Offset = "0x5CF4BC")]
	public Image playPauseButton;

	[Token(Token = "0x4000994")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Text songName;

	[Token(Token = "0x4000995")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Image playerBar;

	[Token(Token = "0x4000996")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Slider sliderBar;

	[Token(Token = "0x4000997")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Text actualTime;

	[Token(Token = "0x4000998")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Text totalTime;

	[Token(Token = "0x4000999")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x5CF4F4", Offset = "0x5CF4F4")]
	public GameObject songList;

	[Token(Token = "0x400099A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public List<SongData> songs;

	[Token(Token = "0x400099B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public List<GameObject> songSearchList;

	[Token(Token = "0x400099C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x5CF52C", Offset = "0x5CF52C")]
	public GameObject songPrefab;

	[Token(Token = "0x400099D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public GameObject songSelectionPanel;

	[Token(Token = "0x400099E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Transform songsSelectionTransform;

	[Token(Token = "0x400099F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private int actualPos;

	[Token(Token = "0x40009A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private float amount;

	[Token(Token = "0x40009A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private bool playing;

	[Token(Token = "0x40009A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB1")]
	private bool active;

	[Token(Token = "0x40009A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB2")]
	public bool animateSearch;

	[Token(Token = "0x40009A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public Animator contentAnim;

	[Token(Token = "0x40009A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static MusicPlayer instance;

	[Token(Token = "0x60007A0")]
	[Address(RVA = "0xDF75A0", Offset = "0xDF75A0", VA = "0xDF75A0")]
	private void Awake()
	{
	}

	[Token(Token = "0x60007A1")]
	[Address(RVA = "0xDF7748", Offset = "0xDF7748", VA = "0xDF7748")]
	private void CreateSongSelectionList()
	{
	}

	[Token(Token = "0x60007A2")]
	[Address(RVA = "0xDF7C40", Offset = "0xDF7C40", VA = "0xDF7C40")]
	public void SearchSongByName()
	{
	}

	[Token(Token = "0x60007A3")]
	[Address(RVA = "0xDF7DF4", Offset = "0xDF7DF4", VA = "0xDF7DF4")]
	public void OrderList()
	{
	}

	[Token(Token = "0x60007A4")]
	[Address(RVA = "0xDF80D0", Offset = "0xDF80D0", VA = "0xDF80D0")]
	public void ActivateOrDeactivate()
	{
	}

	[Token(Token = "0x60007A5")]
	[Address(RVA = "0xDF81D8", Offset = "0xDF81D8", VA = "0xDF81D8")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D8498", Offset = "0x5D8498")]
	private IEnumerator HideAnimation()
	{
		return null;
	}

	[Token(Token = "0x60007A6")]
	[Address(RVA = "0xDF8250", Offset = "0xDF8250", VA = "0xDF8250")]
	private void SetActiveSongImage()
	{
	}

	[Token(Token = "0x60007A7")]
	[Address(RVA = "0xDF7ABC", Offset = "0xDF7ABC", VA = "0xDF7ABC")]
	public void ChangeSong(int pos)
	{
	}

	[Token(Token = "0x60007A8")]
	[Address(RVA = "0xDF85DC", Offset = "0xDF85DC", VA = "0xDF85DC")]
	private void Update()
	{
	}

	[Token(Token = "0x60007A9")]
	[Address(RVA = "0xDF89D0", Offset = "0xDF89D0", VA = "0xDF89D0")]
	private void CalculateActualTime()
	{
	}

	[Token(Token = "0x60007AA")]
	[Address(RVA = "0xDF8B8C", Offset = "0xDF8B8C", VA = "0xDF8B8C")]
	public void ChangePosition()
	{
	}

	[Token(Token = "0x60007AB")]
	[Address(RVA = "0xDF841C", Offset = "0xDF841C", VA = "0xDF841C")]
	public void StopSong()
	{
	}

	[Token(Token = "0x60007AC")]
	[Address(RVA = "0xDF8900", Offset = "0xDF8900", VA = "0xDF8900")]
	public void PlayOrPauseSong()
	{
	}

	[Token(Token = "0x60007AD")]
	[Address(RVA = "0xDF8AD4", Offset = "0xDF8AD4", VA = "0xDF8AD4")]
	public void NextSong()
	{
	}

	[Token(Token = "0x60007AE")]
	[Address(RVA = "0xDF8CBC", Offset = "0xDF8CBC", VA = "0xDF8CBC")]
	public void PreviousSong()
	{
	}

	[Token(Token = "0x60007AF")]
	[Address(RVA = "0xDF8530", Offset = "0xDF8530", VA = "0xDF8530")]
	private void PrepareToLoadSong(int pos)
	{
	}

	[Token(Token = "0x60007B0")]
	[Address(RVA = "0xDF8D6C", Offset = "0xDF8D6C", VA = "0xDF8D6C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D84F8", Offset = "0x5D84F8")]
	private IEnumerator LoadSong(SongData song)
	{
		return null;
	}

	[Token(Token = "0x60007B1")]
	[Address(RVA = "0xDF8E00", Offset = "0xDF8E00", VA = "0xDF8E00")]
	public MusicPlayer()
	{
	}
}
[Token(Token = "0x2000157")]
public class OrderSongs : IComparer
{
	[Token(Token = "0x60007B2")]
	[Address(RVA = "0x1315134", Offset = "0x1315134", VA = "0x1315134", Slot = "4")]
	private int System.Collections.IComparer.Compare(object x, object y)
	{
		return default(int);
	}

	[Token(Token = "0x60007B3")]
	[Address(RVA = "0x1315214", Offset = "0x1315214", VA = "0x1315214")]
	public OrderSongs()
	{
	}
}
[Token(Token = "0x2000158")]
public class SongData : MonoBehaviour
{
	[Token(Token = "0x40009A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string title;

	[Token(Token = "0x40009A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string artist;

	[Token(Token = "0x40009A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioClip songClip;

	[Token(Token = "0x60007B4")]
	[Address(RVA = "0xA1321C", Offset = "0xA1321C", VA = "0xA1321C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60007B5")]
	[Address(RVA = "0xA1327C", Offset = "0xA1327C", VA = "0xA1327C")]
	public SongData()
	{
	}
}
[Token(Token = "0x2000159")]
public class RhythmVisualizatorPro : MonoBehaviour
{
	[Token(Token = "0x20003B5")]
	public enum ScaleFrom
	{
		[Token(Token = "0x400191D")]
		Center,
		[Token(Token = "0x400191E")]
		Downside
	}

	[Token(Token = "0x20003B6")]
	public enum Visualizations
	{
		[Token(Token = "0x4001920")]
		Line,
		[Token(Token = "0x4001921")]
		Circle,
		[Token(Token = "0x4001922")]
		ExpansibleCircle,
		[Token(Token = "0x4001923")]
		Sphere
	}

	[Token(Token = "0x20003B7")]
	public enum Channels
	{
		[Token(Token = "0x4001925")]
		n512,
		[Token(Token = "0x4001926")]
		n1024,
		[Token(Token = "0x4001927")]
		n2048,
		[Token(Token = "0x4001928")]
		n4096,
		[Token(Token = "0x4001929")]
		n8192
	}

	[Token(Token = "0x40009A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject soundBarPrefabCenter;

	[Token(Token = "0x40009AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject soundBarPrefabDownside;

	[Token(Token = "0x40009AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform soundBarsTransform;

	[Token(Token = "0x40009AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x5CF564", Offset = "0x5CF564")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5CF564", Offset = "0x5CF564")]
	public bool listenAllSounds;

	[Token(Token = "0x40009AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AudioSource audioSource;

	[Token(Token = "0x40009AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x5CF5C4", Offset = "0x5CF5C4")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x5CF5C4", Offset = "0x5CF5C4")]
	public List<GameObject> soundBars;

	[Token(Token = "0x40009AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5CF614", Offset = "0x5CF614")]
	public int barsQuantity;

	[Token(Token = "0x40009B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private int usedSoundBars;

	[Token(Token = "0x40009B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public ScaleFrom scaleFrom;

	[Token(Token = "0x40009B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5CF634", Offset = "0x5CF634")]
	public float soundBarsWidth;

	[Token(Token = "0x40009B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x5CF650", Offset = "0x5CF650")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5CF650", Offset = "0x5CF650")]
	public Transform center;

	[Token(Token = "0x40009B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public bool cameraControl;

	[Token(Token = "0x40009B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5CF6B0", Offset = "0x5CF6B0")]
	public bool rotateCamera;

	[Token(Token = "0x40009B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
	public bool UseDefaultCameraOnChange;

	[Token(Token = "0x40009B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5CF6E8", Offset = "0x5CF6E8")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5CF6E8", Offset = "0x5CF6E8")]
	public float velocity;

	[Token(Token = "0x40009B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5CF744", Offset = "0x5CF744")]
	public float height;

	[Token(Token = "0x40009B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5CF760", Offset = "0x5CF760")]
	public float orbitDistance;

	[Token(Token = "0x40009BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5CF77C", Offset = "0x5CF77C")]
	public int fieldOfView;

	[Token(Token = "0x40009BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x5CF798", Offset = "0x5CF798")]
	public bool ScaleByRhythm;

	[Token(Token = "0x40009BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5CF7D0", Offset = "0x5CF7D0")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5CF7D0", Offset = "0x5CF7D0")]
	public float length;

	[Token(Token = "0x40009BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5CF828", Offset = "0x5CF828")]
	public Visualizations visualization;

	[Token(Token = "0x40009BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5CF860", Offset = "0x5CF860")]
	public float extraScaleVelocity;

	[Token(Token = "0x40009BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x5CF87C", Offset = "0x5CF87C")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5CF87C", Offset = "0x5CF87C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5CF87C", Offset = "0x5CF87C")]
	public float globalScale;

	[Token(Token = "0x40009C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5CF8F4", Offset = "0x5CF8F4")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5CF8F4", Offset = "0x5CF8F4")]
	public int smoothVelocity;

	[Token(Token = "0x40009C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5CF948", Offset = "0x5CF948")]
	public float minHeight;

	[Token(Token = "0x40009C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5CF960", Offset = "0x5CF960")]
	public Channels channels;

	[Token(Token = "0x40009C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5CF998", Offset = "0x5CF998")]
	public FFTWindow method;

	[Token(Token = "0x40009C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private int channelValue;

	[Token(Token = "0x40009C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x5CF9D0", Offset = "0x5CF9D0")]
	public ParticleSystem rhythmParticleSystem;

	[Token(Token = "0x40009C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public bool autoRhythmParticles;

	[Token(Token = "0x40009C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5CFA08", Offset = "0x5CFA08")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5CFA08", Offset = "0x5CFA08")]
	public float rhythmSensibility;

	[Token(Token = "0x40009C8")]
	private const float minRhythmSensibility = 1.5f;

	[Token(Token = "0x40009C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5CFA60", Offset = "0x5CFA60")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5CFA60", Offset = "0x5CFA60")]
	public int amountToEmit;

	[Token(Token = "0x40009CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5CFAB8", Offset = "0x5CFAB8")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5CFAB8", Offset = "0x5CFAB8")]
	public float rhythmParticlesMaxInterval;

	[Token(Token = "0x40009CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private float remainingRhythmParticlesTime;

	[Token(Token = "0x40009CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private bool rhythmSurpassed;

	[Token(Token = "0x40009CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x5CFB10", Offset = "0x5CFB10")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5CFB10", Offset = "0x5CFB10")]
	public float bassSensibility;

	[Token(Token = "0x40009CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5CFB68", Offset = "0x5CFB68")]
	public float bassHeight;

	[Token(Token = "0x40009CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5CFB80", Offset = "0x5CFB80")]
	public int bassHorizontalScale;

	[Token(Token = "0x40009D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5CFB98", Offset = "0x5CFB98")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5CFB98", Offset = "0x5CFB98")]
	public int bassOffset;

	[Token(Token = "0x40009D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x5CFBF0", Offset = "0x5CFBF0")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5CFBF0", Offset = "0x5CFBF0")]
	public float trebleSensibility;

	[Token(Token = "0x40009D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5CFC48", Offset = "0x5CFC48")]
	public float trebleHeight;

	[Token(Token = "0x40009D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5CFC60", Offset = "0x5CFC60")]
	public int trebleHorizontalScale;

	[Token(Token = "0x40009D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5CFC78", Offset = "0x5CFC78")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5CFC78", Offset = "0x5CFC78")]
	public int trebleOffset;

	[Token(Token = "0x40009D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x5CFCD0", Offset = "0x5CFCD0")]
	public bool soundBarsParticles;

	[Token(Token = "0x40009D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5CFD08", Offset = "0x5CFD08")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5CFD08", Offset = "0x5CFD08")]
	public float particlesMaxInterval;

	[Token(Token = "0x40009D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private float remainingParticlesTime;

	[Token(Token = "0x40009D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	private bool surpassed;

	[Token(Token = "0x40009D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5CFD60", Offset = "0x5CFD60")]
	public float minParticleSensibility;

	[Token(Token = "0x40009DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	public bool lerpColor;

	[Token(Token = "0x40009DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public Color[] colors;

	[Token(Token = "0x40009DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5CFD7C", Offset = "0x5CFD7C")]
	public float colorIntervalTime;

	[Token(Token = "0x40009DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5CFD98", Offset = "0x5CFD98")]
	public float colorLerpTime;

	[Token(Token = "0x40009DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public bool useGradient;

	[Token(Token = "0x40009DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public Gradient gradient;

	[Token(Token = "0x40009E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public Color rhythmParticleSystemColor;

	[Token(Token = "0x40009E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x5CFDB4", Offset = "0x5CFDB4")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5CFDB4", Offset = "0x5CFDB4")]
	public float raysLenght;

	[Token(Token = "0x40009E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5CFE08", Offset = "0x5CFE08")]
	public float raysAlpha;

	[Token(Token = "0x40009E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private int posColor;

	[Token(Token = "0x40009E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
	[HideInInspector]
	public Color actualColor;

	[Token(Token = "0x40009E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
	private Vector3 prevLeftScale;

	[Token(Token = "0x40009E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	private Vector3 prevRightScale;

	[Token(Token = "0x40009E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
	private Vector3 rightScale;

	[Token(Token = "0x40009E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	private Vector3 leftScale;

	[Token(Token = "0x40009E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
	private float timeChange;

	[Token(Token = "0x40009EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	private int halfBarsValue;

	[Token(Token = "0x40009EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
	private int visualizationNumber;

	[Token(Token = "0x40009EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	private float newLeftScale;

	[Token(Token = "0x40009ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
	private float newRightScale;

	[Token(Token = "0x40009EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	private float rhythmAverage;

	[Token(Token = "0x40009EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
	private Visualizations lastVisualizationForm;

	[Token(Token = "0x40009F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	private int lastVisualization;

	[Token(Token = "0x40009F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
	private Color currentColor;

	[Token(Token = "0x40009F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
	private bool colorUpdated;

	[Token(Token = "0x60007B6")]
	[Address(RVA = "0x11F727C", Offset = "0x11F727C", VA = "0x11F727C")]
	public void EmitIfThereAreRhythm()
	{
	}

	[Token(Token = "0x60007B7")]
	[Address(RVA = "0x11F73B0", Offset = "0x11F73B0", VA = "0x11F73B0")]
	public void Restart()
	{
	}

	[Token(Token = "0x60007B8")]
	[Address(RVA = "0x11F7B60", Offset = "0x11F7B60", VA = "0x11F7B60")]
	private void Awake()
	{
	}

	[Token(Token = "0x60007B9")]
	[Address(RVA = "0x11F75D4", Offset = "0x11F75D4", VA = "0x11F75D4")]
	private void CreateCubes()
	{
	}

	[Token(Token = "0x60007BA")]
	[Address(RVA = "0x11F82D8", Offset = "0x11F82D8", VA = "0x11F82D8")]
	public void NextForm(bool next)
	{
	}

	[Token(Token = "0x60007BB")]
	[Address(RVA = "0x11F8328", Offset = "0x11F8328", VA = "0x11F8328")]
	private void UpdateChannels()
	{
	}

	[Token(Token = "0x60007BC")]
	[Address(RVA = "0x11F8348", Offset = "0x11F8348", VA = "0x11F8348")]
	private void CameraPosition()
	{
	}

	[Token(Token = "0x60007BD")]
	[Address(RVA = "0x11F86B8", Offset = "0x11F86B8", VA = "0x11F86B8")]
	private void SetVisualizationPredefinedValues()
	{
	}

	[Token(Token = "0x60007BE")]
	[Address(RVA = "0x11F86E8", Offset = "0x11F86E8", VA = "0x11F86E8")]
	private void CameraMovement()
	{
	}

	[Token(Token = "0x60007BF")]
	[Address(RVA = "0x11F8884", Offset = "0x11F8884", VA = "0x11F8884")]
	private void ChangeColor()
	{
	}

	[Token(Token = "0x60007C0")]
	[Address(RVA = "0x11F8CCC", Offset = "0x11F8CCC", VA = "0x11F8CCC")]
	private void NextColor()
	{
	}

	[Token(Token = "0x60007C1")]
	[Address(RVA = "0x11F7B64", Offset = "0x11F7B64", VA = "0x11F7B64")]
	public void UpdateVisualizations()
	{
	}

	[Token(Token = "0x60007C2")]
	[Address(RVA = "0x11F8D10", Offset = "0x11F8D10", VA = "0x11F8D10")]
	private Vector3[] UniformPointsOnSphere(float verticlesNum, float scale)
	{
		return null;
	}

	[Token(Token = "0x60007C3")]
	[Address(RVA = "0x11F8E94", Offset = "0x11F8E94", VA = "0x11F8E94")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60007C4")]
	[Address(RVA = "0x11F9988", Offset = "0x11F9988", VA = "0x11F9988")]
	private void EmitParticle(int index, float spectrumValue)
	{
	}

	[Token(Token = "0x60007C5")]
	[Address(RVA = "0x11F9A5C", Offset = "0x11F9A5C", VA = "0x11F9A5C")]
	public RhythmVisualizatorPro()
	{
	}
}
[Token(Token = "0x200015A")]
public class SoundBar : MonoBehaviour
{
	[Token(Token = "0x40009F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Renderer cube;

	[Token(Token = "0x40009F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Renderer ray;

	[Token(Token = "0x40009F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ParticleSystem particleSystem;

	[Token(Token = "0x60007C6")]
	[Address(RVA = "0xA17ED8", Offset = "0xA17ED8", VA = "0xA17ED8")]
	public SoundBar()
	{
	}
}
[Token(Token = "0x200015B")]
public class AlleyDemoControl : MonoBehaviour
{
	[Token(Token = "0x40009F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x5CFE30", Offset = "0x5CFE30")]
	public float width;

	[Token(Token = "0x40009F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float height;

	[Token(Token = "0x40009F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float depth;

	[Token(Token = "0x40009F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float speed;

	[Token(Token = "0x40009FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x5CFE68", Offset = "0x5CFE68")]
	public int maxBlocks;

	[Token(Token = "0x40009FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int maxPebbles;

	[Token(Token = "0x40009FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int maxWires;

	[Token(Token = "0x40009FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public int maxSigns;

	[Token(Token = "0x40009FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x5CFEA0", Offset = "0x5CFEA0")]
	public Color fogColor;

	[Token(Token = "0x40009FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Material blockMaterial;

	[Token(Token = "0x4000A00")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Material pebbleMaterial;

	[Token(Token = "0x4000A01")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Material wireMaterial;

	[Token(Token = "0x4000A02")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public SSFSGenerator ssfsGenerator;

	[Token(Token = "0x4000A03")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Light sun;

	[Token(Token = "0x4000A04")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Transform[] leftblocks;

	[Token(Token = "0x4000A05")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Transform[] rightblocks;

	[Token(Token = "0x4000A06")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Transform[] pebbles;

	[Token(Token = "0x4000A07")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Transform[] signs;

	[Token(Token = "0x4000A08")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private List<Transform> wires;

	[Token(Token = "0x4000A09")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public int maxWireVerts;

	[Token(Token = "0x1700002C")]
	private Vector3 tunnelMovement
	{
		[Token(Token = "0x60007C7")]
		[Address(RVA = "0xC09100", Offset = "0xC09100", VA = "0xC09100")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x60007C8")]
	[Address(RVA = "0xC091A4", Offset = "0xC091A4", VA = "0xC091A4")]
	private void Start()
	{
	}

	[Token(Token = "0x60007C9")]
	[Address(RVA = "0xC09DF8", Offset = "0xC09DF8", VA = "0xC09DF8")]
	private void Update()
	{
	}

	[Token(Token = "0x60007CA")]
	[Address(RVA = "0xC09304", Offset = "0xC09304", VA = "0xC09304")]
	private void CreateSun()
	{
	}

	[Token(Token = "0x60007CB")]
	[Address(RVA = "0xC0A7AC", Offset = "0xC0A7AC", VA = "0xC0A7AC")]
	private void RandColor(ref Transform block, float minValue = 0.2f, float valueRange = 0.4f)
	{
	}

	[Token(Token = "0x60007CC")]
	[Address(RVA = "0xC094A4", Offset = "0xC094A4", VA = "0xC094A4")]
	private void CreateWall(Vector3 up, Vector3 pos, Vector3 scl, bool noshadow = false)
	{
	}

	[Token(Token = "0x60007CD")]
	[Address(RVA = "0xC095E8", Offset = "0xC095E8", VA = "0xC095E8")]
	private void PopulateBlockList(ref Transform[] blocks, float side)
	{
	}

	[Token(Token = "0x60007CE")]
	[Address(RVA = "0xC09C04", Offset = "0xC09C04", VA = "0xC09C04")]
	private void PopulatePebbles()
	{
	}

	[Token(Token = "0x60007CF")]
	[Address(RVA = "0xC0A8B8", Offset = "0xC0A8B8", VA = "0xC0A8B8")]
	private void ScaleBlock(ref Transform block, bool bridge)
	{
	}

	[Token(Token = "0x60007D0")]
	[Address(RVA = "0xC0A988", Offset = "0xC0A988", VA = "0xC0A988")]
	private void PositionBlock(ref Transform block, float xpos, bool bridge)
	{
	}

	[Token(Token = "0x60007D1")]
	[Address(RVA = "0xC0AB20", Offset = "0xC0AB20", VA = "0xC0AB20")]
	private void TripBlock(ref Transform block, float side)
	{
	}

	[Token(Token = "0x60007D2")]
	[Address(RVA = "0xC098A4", Offset = "0xC098A4", VA = "0xC098A4")]
	private void PopulateSigns()
	{
	}

	[Token(Token = "0x60007D3")]
	[Address(RVA = "0xC0AFC4", Offset = "0xC0AFC4", VA = "0xC0AFC4")]
	private Vector3 NewSignPosition(bool atEnd = false)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60007D4")]
	[Address(RVA = "0xC0A0A4", Offset = "0xC0A0A4", VA = "0xC0A0A4")]
	private void UpdateBlocks(ref Transform[] blocks, float side)
	{
	}

	[Token(Token = "0x60007D5")]
	[Address(RVA = "0xC0AA08", Offset = "0xC0AA08", VA = "0xC0AA08")]
	private void NewPebblePos(ref Transform pebble, bool randomDepth = false)
	{
	}

	[Token(Token = "0x60007D6")]
	[Address(RVA = "0xC0A1F0", Offset = "0xC0A1F0", VA = "0xC0A1F0")]
	private void UpdateDetail()
	{
	}

	[Token(Token = "0x60007D7")]
	[Address(RVA = "0xC0ACE4", Offset = "0xC0ACE4", VA = "0xC0ACE4")]
	private void CreateWire(Vector3 p1, Vector3 p2)
	{
	}

	[Token(Token = "0x60007D8")]
	[Address(RVA = "0xC0B150", Offset = "0xC0B150", VA = "0xC0B150")]
	public AlleyDemoControl()
	{
	}
}
[Token(Token = "0x200015C")]
public class Demo_SignSwitcher : MonoBehaviour
{
	[Token(Token = "0x20003B8")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDDEC", Offset = "0x5CDDEC")]
	private sealed class <GoToMaterial>d__12 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400192A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400192B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400192C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Demo_SignSwitcher <>4__this;

		[Token(Token = "0x400192D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Material <nextMat>5__2;

		[Token(Token = "0x170002C1")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60019F7")]
			[Address(RVA = "0x7E6EFC", Offset = "0x7E6EFC", VA = "0x7E6EFC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002C2")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60019F9")]
			[Address(RVA = "0x7E6F44", Offset = "0x7E6F44", VA = "0x7E6F44", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60019F4")]
		[Address(RVA = "0x7E6CA8", Offset = "0x7E6CA8", VA = "0x7E6CA8")]
		[DebuggerHidden]
		public <GoToMaterial>d__12(int <>1__state)
		{
		}

		[Token(Token = "0x60019F5")]
		[Address(RVA = "0x7E6CD4", Offset = "0x7E6CD4", VA = "0x7E6CD4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60019F6")]
		[Address(RVA = "0x7E6CD8", Offset = "0x7E6CD8", VA = "0x7E6CD8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60019F8")]
		[Address(RVA = "0x7E6F04", Offset = "0x7E6F04", VA = "0x7E6F04", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000A0A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Material[] materials;

	[Token(Token = "0x4000A0B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool autoswitch;

	[Token(Token = "0x4000A0C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float delay;

	[Token(Token = "0x4000A0D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float transitionTime;

	[Token(Token = "0x4000A0E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public KeyCode nextKey;

	[Token(Token = "0x4000A0F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public KeyCode prevKey;

	[Token(Token = "0x4000A10")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private bool isswitching;

	[Token(Token = "0x4000A11")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int currentId;

	[Token(Token = "0x4000A12")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float cphase;

	[Token(Token = "0x4000A13")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Renderer r;

	[Token(Token = "0x4000A14")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float t;

	[Token(Token = "0x60007D9")]
	[Address(RVA = "0xCC8174", Offset = "0xCC8174", VA = "0xCC8174")]
	private void Start()
	{
	}

	[Token(Token = "0x60007DA")]
	[Address(RVA = "0xCC81F0", Offset = "0xCC81F0", VA = "0xCC81F0")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D8558", Offset = "0x5D8558")]
	public IEnumerator GoToMaterial()
	{
		return null;
	}

	[Token(Token = "0x60007DB")]
	[Address(RVA = "0xCC8268", Offset = "0xCC8268", VA = "0xCC8268")]
	private void ShiftMaterial(int offset)
	{
	}

	[Token(Token = "0x60007DC")]
	[Address(RVA = "0xCC82C8", Offset = "0xCC82C8", VA = "0xCC82C8")]
	private void Update()
	{
	}

	[Token(Token = "0x60007DD")]
	[Address(RVA = "0xCC83C8", Offset = "0xCC83C8", VA = "0xCC83C8")]
	public Demo_SignSwitcher()
	{
	}
}
[Token(Token = "0x200015D")]
[ExecuteInEditMode]
internal class LightColorFromTexture : MonoBehaviour
{
	[Token(Token = "0x4000A15")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Renderer r;

	[Token(Token = "0x4000A16")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5CFED8", Offset = "0x5CFED8")]
	public float colorIntensity;

	[NonSerialized]
	[Token(Token = "0x4000A17")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Light _l;

	[NonSerialized]
	[Token(Token = "0x4000A18")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Material m;

	[NonSerialized]
	[Token(Token = "0x4000A19")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Texture2D t1;

	[NonSerialized]
	[Token(Token = "0x4000A1A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Texture2D t2;

	[NonSerialized]
	[Token(Token = "0x4000A1B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Color c1;

	[NonSerialized]
	[Token(Token = "0x4000A1C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Color c2;

	[Token(Token = "0x4000A1D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Dictionary<Texture, Color> cachedEvaluations;

	[Token(Token = "0x1700002D")]
	private Light l
	{
		[Token(Token = "0x60007DE")]
		[Address(RVA = "0x102E284", Offset = "0x102E284", VA = "0x102E284")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700002E")]
	private bool hasSwap
	{
		[Token(Token = "0x60007DF")]
		[Address(RVA = "0x102E338", Offset = "0x102E338", VA = "0x102E338")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60007E0")]
	[Address(RVA = "0x102E3A4", Offset = "0x102E3A4", VA = "0x102E3A4")]
	private void Update()
	{
	}

	[Token(Token = "0x60007E1")]
	[Address(RVA = "0x102E844", Offset = "0x102E844", VA = "0x102E844")]
	public bool FindTexture(string propertyName, ref Texture2D texture)
	{
		return default(bool);
	}

	[Token(Token = "0x60007E2")]
	[Address(RVA = "0x102E5D8", Offset = "0x102E5D8", VA = "0x102E5D8")]
	public bool CheckUpdate()
	{
		return default(bool);
	}

	[Token(Token = "0x60007E3")]
	[Address(RVA = "0x102E7B4", Offset = "0x102E7B4", VA = "0x102E7B4")]
	public void Intensify(ref Color c)
	{
	}

	[Token(Token = "0x60007E4")]
	[Address(RVA = "0x102E974", Offset = "0x102E974", VA = "0x102E974")]
	public Color EvaluateColor(Texture2D texture)
	{
		return default(Color);
	}

	[Token(Token = "0x60007E5")]
	[Address(RVA = "0x102EC5C", Offset = "0x102EC5C", VA = "0x102EC5C")]
	public LightColorFromTexture()
	{
	}
}
[Serializable]
[Token(Token = "0x200015E")]
public class MaterialParameter
{
	[Token(Token = "0x20003B9")]
	public enum MaterialParamType
	{
		[Token(Token = "0x400192F")]
		number,
		[Token(Token = "0x4001930")]
		color,
		[Token(Token = "0x4001931")]
		texture,
		[Token(Token = "0x4001932")]
		vector
	}

	[Token(Token = "0x4000A1E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string parameterName;

	[Token(Token = "0x4000A1F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string displayName;

	[Token(Token = "0x4000A20")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int repeat;

	[Token(Token = "0x4000A21")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public MaterialParamType type;

	[Token(Token = "0x4000A22")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float min;

	[Token(Token = "0x4000A23")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float max;

	[Token(Token = "0x4000A24")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public string label_x;

	[Token(Token = "0x4000A25")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public string label_y;

	[Token(Token = "0x4000A26")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public string label_z;

	[Token(Token = "0x4000A27")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public string label_w;

	[Token(Token = "0x4000A28")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Vector4 min4;

	[Token(Token = "0x4000A29")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Vector4 max4;

	[Token(Token = "0x4000A2A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public List<Texture> textures;

	[NonSerialized]
	[Token(Token = "0x4000A2B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public float value;

	[NonSerialized]
	[Token(Token = "0x4000A2C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public Color valueC;

	[NonSerialized]
	[Token(Token = "0x4000A2D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	public Vector4 value4;

	[Token(Token = "0x1700002F")]
	public int texID
	{
		[Token(Token = "0x60007E6")]
		[Address(RVA = "0xDEC62C", Offset = "0xDEC62C", VA = "0xDEC62C")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x60007E7")]
	[Address(RVA = "0xDEC690", Offset = "0xDEC690", VA = "0xDEC690")]
	public MaterialParameter()
	{
	}

	[Token(Token = "0x60007E8")]
	[Address(RVA = "0xDEC8C0", Offset = "0xDEC8C0", VA = "0xDEC8C0")]
	public MaterialParameter(MaterialParameter other)
	{
	}
}
[Token(Token = "0x200015F")]
public class ParameterFiddler : MonoBehaviour
{
	[Token(Token = "0x20003BA")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDDFC", Offset = "0x5CDDFC")]
	private sealed class <FiddleFloat>d__21 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001933")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001934")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001935")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ParameterFiddler <>4__this;

		[Token(Token = "0x4001936")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public MaterialParameter p;

		[Token(Token = "0x4001937")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <o>5__2;

		[Token(Token = "0x4001938")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <i>5__3;

		[Token(Token = "0x170002C3")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60019FD")]
			[Address(RVA = "0xFF01BC", Offset = "0xFF01BC", VA = "0xFF01BC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002C4")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60019FF")]
			[Address(RVA = "0xFF0204", Offset = "0xFF0204", VA = "0xFF0204", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60019FA")]
		[Address(RVA = "0xFEFE70", Offset = "0xFEFE70", VA = "0xFEFE70")]
		[DebuggerHidden]
		public <FiddleFloat>d__21(int <>1__state)
		{
		}

		[Token(Token = "0x60019FB")]
		[Address(RVA = "0xFEFE9C", Offset = "0xFEFE9C", VA = "0xFEFE9C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60019FC")]
		[Address(RVA = "0xFEFEA0", Offset = "0xFEFEA0", VA = "0xFEFEA0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60019FE")]
		[Address(RVA = "0xFF01C4", Offset = "0xFF01C4", VA = "0xFF01C4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20003BB")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDE0C", Offset = "0x5CDE0C")]
	private sealed class <FiddleColor>d__22 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001939")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400193A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400193B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ParameterFiddler <>4__this;

		[Token(Token = "0x400193C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public MaterialParameter param;

		[Token(Token = "0x400193D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Color <o>5__2;

		[Token(Token = "0x400193E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Color <c>5__3;

		[Token(Token = "0x400193F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float <i>5__4;

		[Token(Token = "0x170002C5")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001A03")]
			[Address(RVA = "0xFEFE20", Offset = "0xFEFE20", VA = "0xFEFE20", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002C6")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001A05")]
			[Address(RVA = "0xFEFE68", Offset = "0xFEFE68", VA = "0xFEFE68", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001A00")]
		[Address(RVA = "0xFEFAA0", Offset = "0xFEFAA0", VA = "0xFEFAA0")]
		[DebuggerHidden]
		public <FiddleColor>d__22(int <>1__state)
		{
		}

		[Token(Token = "0x6001A01")]
		[Address(RVA = "0xFEFACC", Offset = "0xFEFACC", VA = "0xFEFACC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001A02")]
		[Address(RVA = "0xFEFAD0", Offset = "0xFEFAD0", VA = "0xFEFAD0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001A04")]
		[Address(RVA = "0xFEFE28", Offset = "0xFEFE28", VA = "0xFEFE28", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20003BC")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDE1C", Offset = "0x5CDE1C")]
	private sealed class <FiddleTexture>d__23 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001940")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001941")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001942")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ParameterFiddler <>4__this;

		[Token(Token = "0x4001943")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public MaterialParameter param;

		[Token(Token = "0x4001944")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Texture <o>5__2;

		[Token(Token = "0x170002C7")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001A09")]
			[Address(RVA = "0xFF0420", Offset = "0xFF0420", VA = "0xFF0420", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002C8")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001A0B")]
			[Address(RVA = "0xFF0468", Offset = "0xFF0468", VA = "0xFF0468", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001A06")]
		[Address(RVA = "0xFF020C", Offset = "0xFF020C", VA = "0xFF020C")]
		[DebuggerHidden]
		public <FiddleTexture>d__23(int <>1__state)
		{
		}

		[Token(Token = "0x6001A07")]
		[Address(RVA = "0xFF0238", Offset = "0xFF0238", VA = "0xFF0238", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001A08")]
		[Address(RVA = "0xFF023C", Offset = "0xFF023C", VA = "0xFF023C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001A0A")]
		[Address(RVA = "0xFF0428", Offset = "0xFF0428", VA = "0xFF0428", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20003BD")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDE2C", Offset = "0x5CDE2C")]
	private sealed class <FiddleVector>d__24 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001945")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001946")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001947")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ParameterFiddler <>4__this;

		[Token(Token = "0x4001948")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public MaterialParameter param;

		[Token(Token = "0x4001949")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector4 <o>5__2;

		[Token(Token = "0x170002C9")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001A0F")]
			[Address(RVA = "0xFF0674", Offset = "0xFF0674", VA = "0xFF0674", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002CA")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001A11")]
			[Address(RVA = "0xFF06BC", Offset = "0xFF06BC", VA = "0xFF06BC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001A0C")]
		[Address(RVA = "0xFF0470", Offset = "0xFF0470", VA = "0xFF0470")]
		[DebuggerHidden]
		public <FiddleVector>d__24(int <>1__state)
		{
		}

		[Token(Token = "0x6001A0D")]
		[Address(RVA = "0xFF049C", Offset = "0xFF049C", VA = "0xFF049C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001A0E")]
		[Address(RVA = "0xFF04A0", Offset = "0xFF04A0", VA = "0xFF04A0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001A10")]
		[Address(RVA = "0xFF067C", Offset = "0xFF067C", VA = "0xFF067C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20003BE")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDE3C", Offset = "0x5CDE3C")]
	private sealed class <Unfiddle>d__25 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400194A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400194B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400194C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ParameterFiddler <>4__this;

		[Token(Token = "0x170002CB")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001A15")]
			[Address(RVA = "0xFF07B8", Offset = "0xFF07B8", VA = "0xFF07B8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002CC")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001A17")]
			[Address(RVA = "0xFF0800", Offset = "0xFF0800", VA = "0xFF0800", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001A12")]
		[Address(RVA = "0xFF06C4", Offset = "0xFF06C4", VA = "0xFF06C4")]
		[DebuggerHidden]
		public <Unfiddle>d__25(int <>1__state)
		{
		}

		[Token(Token = "0x6001A13")]
		[Address(RVA = "0xFF06F0", Offset = "0xFF06F0", VA = "0xFF06F0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001A14")]
		[Address(RVA = "0xFF06F4", Offset = "0xFF06F4", VA = "0xFF06F4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001A16")]
		[Address(RVA = "0xFF07C0", Offset = "0xFF07C0", VA = "0xFF07C0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000A2E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Material sourceMaterial;

	[Token(Token = "0x4000A2F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Material material;

	[Token(Token = "0x4000A30")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool automatic;

	[Token(Token = "0x4000A31")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool showMenu;

	[Token(Token = "0x4000A32")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float menuVis;

	[Token(Token = "0x4000A33")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5CFEF0", Offset = "0x5CFEF0")]
	public float fiddleTime;

	[Token(Token = "0x4000A34")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public List<MaterialParameter> parameters;

	[Token(Token = "0x4000A35")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Texture sliderBar;

	[Token(Token = "0x4000A36")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Texture sliderThumb;

	[Token(Token = "0x4000A37")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private GUIStyle sliderStyle;

	[Token(Token = "0x4000A38")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private GUIStyle sliderThumbStyle;

	[Token(Token = "0x4000A39")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private int currentParameterIndex;

	[Token(Token = "0x4000A3A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private float t;

	[Token(Token = "0x4000A3B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private bool fiddling;

	[Token(Token = "0x4000A3C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private GUIStyle nameStyle;

	[Token(Token = "0x4000A3D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private GUIStyle nameStyle2;

	[Token(Token = "0x4000A3E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private GUIStyle buttonStyle;

	[Token(Token = "0x4000A3F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private GUIStyle scrollStyle;

	[Token(Token = "0x4000A40")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private GUIStyle boxStyle;

	[Token(Token = "0x4000A41")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Color baseGUIColor;

	[Token(Token = "0x17000030")]
	private float tf
	{
		[Token(Token = "0x60007E9")]
		[Address(RVA = "0x1317360", Offset = "0x1317360", VA = "0x1317360")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x60007EA")]
	[Address(RVA = "0x1317370", Offset = "0x1317370", VA = "0x1317370")]
	private void Start()
	{
	}

	[Token(Token = "0x60007EB")]
	[Address(RVA = "0x13175DC", Offset = "0x13175DC", VA = "0x13175DC")]
	private void Update()
	{
	}

	[Token(Token = "0x60007EC")]
	[Address(RVA = "0x13174D8", Offset = "0x13174D8", VA = "0x13174D8")]
	public void ManualRead()
	{
	}

	[Token(Token = "0x60007ED")]
	[Address(RVA = "0x1317808", Offset = "0x1317808", VA = "0x1317808")]
	public void ManualFiddle()
	{
	}

	[Token(Token = "0x60007EE")]
	[Address(RVA = "0x13179B4", Offset = "0x13179B4", VA = "0x13179B4")]
	public void FiddleParameter()
	{
	}

	[Token(Token = "0x60007EF")]
	[Address(RVA = "0x1317B2C", Offset = "0x1317B2C", VA = "0x1317B2C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D85B8", Offset = "0x5D85B8")]
	public IEnumerator FiddleFloat(MaterialParameter p)
	{
		return null;
	}

	[Token(Token = "0x60007F0")]
	[Address(RVA = "0x1317BC0", Offset = "0x1317BC0", VA = "0x1317BC0")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D8618", Offset = "0x5D8618")]
	public IEnumerator FiddleColor(MaterialParameter param)
	{
		return null;
	}

	[Token(Token = "0x60007F1")]
	[Address(RVA = "0x1317C54", Offset = "0x1317C54", VA = "0x1317C54")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D8678", Offset = "0x5D8678")]
	public IEnumerator FiddleTexture(MaterialParameter param)
	{
		return null;
	}

	[Token(Token = "0x60007F2")]
	[Address(RVA = "0x1317CE8", Offset = "0x1317CE8", VA = "0x1317CE8")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D86D8", Offset = "0x5D86D8")]
	public IEnumerator FiddleVector(MaterialParameter param)
	{
		return null;
	}

	[Token(Token = "0x60007F3")]
	[Address(RVA = "0x1317460", Offset = "0x1317460", VA = "0x1317460")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D8738", Offset = "0x5D8738")]
	private IEnumerator Unfiddle()
	{
		return null;
	}

	[Token(Token = "0x60007F4")]
	[Address(RVA = "0x1317D7C", Offset = "0x1317D7C", VA = "0x1317D7C")]
	public void SetupGUIStyles()
	{
	}

	[Token(Token = "0x60007F5")]
	[Address(RVA = "0x1318538", Offset = "0x1318538", VA = "0x1318538")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x60007F6")]
	[Address(RVA = "0x1319650", Offset = "0x1319650", VA = "0x1319650")]
	public void Slider(Color color)
	{
	}

	[Token(Token = "0x60007F7")]
	[Address(RVA = "0x1319BE4", Offset = "0x1319BE4", VA = "0x1319BE4")]
	public void Slider(ref Color color)
	{
	}

	[Token(Token = "0x60007F8")]
	[Address(RVA = "0x1319534", Offset = "0x1319534", VA = "0x1319534")]
	public void Slider(Vector4 v, Vector4 min4, Vector4 max4)
	{
	}

	[Token(Token = "0x60007F9")]
	[Address(RVA = "0x1319AA4", Offset = "0x1319AA4", VA = "0x1319AA4")]
	public void Slider(ref Vector4 v, Vector4 min4, Vector4 max4, string xLabel = "X", string yLabel = "Y", string zLabel = "Z", string wLabel = "W")
	{
	}

	[Token(Token = "0x60007FA")]
	[Address(RVA = "0x13192DC", Offset = "0x13192DC", VA = "0x13192DC")]
	public void Slider(string label, float v, float min = 0f, float max = 1f)
	{
	}

	[Token(Token = "0x60007FB")]
	[Address(RVA = "0x131983C", Offset = "0x131983C", VA = "0x131983C")]
	public void Slider(string label, ref float v, float min = 0f, float max = 1f)
	{
	}

	[Token(Token = "0x60007FC")]
	[Address(RVA = "0x1319DC8", Offset = "0x1319DC8", VA = "0x1319DC8")]
	public ParameterFiddler()
	{
	}
}
[Token(Token = "0x2000160")]
public class AppCoreControl : MonoBehaviour
{
	[Token(Token = "0x20003BF")]
	public enum AASetting
	{
		[Token(Token = "0x400194E")]
		None,
		[Token(Token = "0x400194F")]
		x2,
		[Token(Token = "0x4001950")]
		x4,
		[Token(Token = "0x4001951")]
		x8
	}

	[Token(Token = "0x4000A42")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int frameRateLimit;

	[Token(Token = "0x4000A43")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool showFps;

	[Token(Token = "0x4000A44")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	public bool enableVsync;

	[Token(Token = "0x4000A45")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int maxQueuedFrames;

	[Token(Token = "0x4000A46")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool pauseOnFocusLoss;

	[Token(Token = "0x4000A47")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AASetting antialiasing;

	[Token(Token = "0x60007FD")]
	[Address(RVA = "0xC0E954", Offset = "0xC0E954", VA = "0xC0E954")]
	[AttributeAttribute(Name = "ContextMenu", RVA = "0x5D8798", Offset = "0x5D8798")]
	private void Start()
	{
	}

	[Token(Token = "0x60007FE")]
	[Address(RVA = "0xC0E9C0", Offset = "0xC0E9C0", VA = "0xC0E9C0")]
	private void Update()
	{
	}

	[Token(Token = "0x60007FF")]
	[Address(RVA = "0xC0E9EC", Offset = "0xC0E9EC", VA = "0xC0E9EC")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000800")]
	[Address(RVA = "0xC0EB94", Offset = "0xC0EB94", VA = "0xC0EB94")]
	public AppCoreControl()
	{
	}
}
[Token(Token = "0x2000161")]
public class CameraOrbit : MonoBehaviour
{
	[Token(Token = "0x4000A48")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform target;

	[Token(Token = "0x4000A49")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float distance;

	[Token(Token = "0x4000A4A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float lerpSpeed;

	[Token(Token = "0x4000A4B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float scrollSpeed;

	[Token(Token = "0x4000A4C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float minDist;

	[Token(Token = "0x4000A4D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float maxDist;

	[Token(Token = "0x4000A4E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool raycastedDistance;

	[Token(Token = "0x4000A4F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float wdist;

	[Token(Token = "0x4000A50")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float cdist;

	[Token(Token = "0x4000A51")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Vector3 wrot;

	[Token(Token = "0x4000A52")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private Vector3 crot;

	[Token(Token = "0x4000A53")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Vector3 worigin;

	[Token(Token = "0x4000A54")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private Vector3 corigin;

	[Token(Token = "0x6000801")]
	[Address(RVA = "0x10A7370", Offset = "0x10A7370", VA = "0x10A7370")]
	private void Start()
	{
	}

	[Token(Token = "0x6000802")]
	[Address(RVA = "0x10A73FC", Offset = "0x10A73FC", VA = "0x10A73FC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000803")]
	[Address(RVA = "0x10A77DC", Offset = "0x10A77DC", VA = "0x10A77DC")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x6000804")]
	[Address(RVA = "0x10A78D8", Offset = "0x10A78D8", VA = "0x10A78D8")]
	public CameraOrbit()
	{
	}
}
[Token(Token = "0x2000162")]
public class ConstantTransform : MonoBehaviour
{
	[Token(Token = "0x4000A55")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 translation;

	[Token(Token = "0x4000A56")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Space translationSpace;

	[Token(Token = "0x4000A57")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Vector3 rotation;

	[Token(Token = "0x4000A58")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public Space rotationSpace;

	[Token(Token = "0x6000805")]
	[Address(RVA = "0x10AD6E8", Offset = "0x10AD6E8", VA = "0x10AD6E8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000806")]
	[Address(RVA = "0x10AD798", Offset = "0x10AD798", VA = "0x10AD798")]
	public ConstantTransform()
	{
	}
}
[Token(Token = "0x2000163")]
public class StepRotation : MonoBehaviour
{
	[Token(Token = "0x4000A59")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int segments;

	[Token(Token = "0x4000A5A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float delay;

	[Token(Token = "0x4000A5B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float i;

	[Token(Token = "0x4000A5C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float t;

	[Token(Token = "0x4000A5D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Quaternion targetRotation;

	[Token(Token = "0x6000807")]
	[Address(RVA = "0x13AFD64", Offset = "0x13AFD64", VA = "0x13AFD64")]
	private void Update()
	{
	}

	[Token(Token = "0x6000808")]
	[Address(RVA = "0x13AFE7C", Offset = "0x13AFE7C", VA = "0x13AFE7C")]
	public void Rotate()
	{
	}

	[Token(Token = "0x6000809")]
	[Address(RVA = "0x13AFF1C", Offset = "0x13AFF1C", VA = "0x13AFF1C")]
	public StepRotation()
	{
	}
}
[Token(Token = "0x2000164")]
[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0x5C9F5C", Offset = "0x5C9F5C")]
public class SSFSGenerator : ScriptableObject
{
	[Token(Token = "0x4000A5E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TextureList textures;

	[Token(Token = "0x4000A5F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextureList scatters;

	[Token(Token = "0x4000A60")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public RandomColor baseTint;

	[Token(Token = "0x4000A61")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public RandomColor transitionTint;

	[Token(Token = "0x4000A62")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public boolchance useTextureSwap;

	[Token(Token = "0x4000A63")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public boolchance useImageAsScatter;

	[Token(Token = "0x4000A64")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public boolchance useRandomTileCount;

	[Token(Token = "0x4000A65")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public boolchance allowIdleAnimation;

	[Token(Token = "0x4000A66")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public boolchance allowIdleNoise;

	[Token(Token = "0x4000A67")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public RandomRange idleNoiseStrength;

	[Token(Token = "0x4000A68")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public RandomRange idleIntensity;

	[Token(Token = "0x4000A69")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public RandomRange idleSpeed;

	[Token(Token = "0x4000A6A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public boolchance allowIdleReverse;

	[Token(Token = "0x4000A6B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public boolchance allowTileClipping;

	[Token(Token = "0x4000A6C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public boolchance allowRadial;

	[Token(Token = "0x4000A6D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public RandomRange phaseDirection;

	[Token(Token = "0x4000A6E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public boolchance separateTileCounts;

	[Token(Token = "0x4000A6F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public RandomRangeInt tileCountUniform;

	[Token(Token = "0x4000A70")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public RandomRangeInt tileCountX;

	[Token(Token = "0x4000A71")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public RandomRangeInt tileCountY;

	[Token(Token = "0x4000A72")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public boolchance separateAxisScaling;

	[Token(Token = "0x4000A73")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public boolchance allowTileCentricScaling;

	[Token(Token = "0x4000A74")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public RandomRange scalingUniform;

	[Token(Token = "0x4000A75")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public RandomRange scalingX;

	[Token(Token = "0x4000A76")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public RandomRange scalingY;

	[Token(Token = "0x4000A77")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public RandomRange scattering;

	[Token(Token = "0x4000A78")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public RandomRange phaseSharpness;

	[Token(Token = "0x4000A79")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public RandomRange overbright;

	[Token(Token = "0x4000A7A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public RandomRange aberration;

	[Token(Token = "0x4000A7B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public RandomRange effectAberration;

	[Token(Token = "0x4000A7C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public RandomRange scanlineIntensity;

	[Token(Token = "0x4000A7D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public RandomRange scanlineDistortion;

	[Token(Token = "0x4000A7E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public RandomRange scanlineScale;

	[Token(Token = "0x4000A7F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public RandomRange scanlineSpeed;

	[Token(Token = "0x4000A80")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	public RandomRange flash;

	[Token(Token = "0x4000A81")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	public RandomRange flicker;

	[Token(Token = "0x600080A")]
	[Address(RVA = "0xCD26C8", Offset = "0xCD26C8", VA = "0xCD26C8")]
	public Material GenerateMaterial()
	{
		return null;
	}

	[Token(Token = "0x600080B")]
	[Address(RVA = "0xCD3204", Offset = "0xCD3204", VA = "0xCD3204")]
	public void GenerateMaterial(ref Material existingMaterial)
	{
	}

	[Token(Token = "0x600080C")]
	[Address(RVA = "0xCD3310", Offset = "0xCD3310", VA = "0xCD3310")]
	private bool SyncKeyword(ref Material m, string keyword, bool value)
	{
		return default(bool);
	}

	[Token(Token = "0x600080D")]
	[Address(RVA = "0xCD26FC", Offset = "0xCD26FC", VA = "0xCD26FC")]
	private void genmat(ref Material m)
	{
	}

	[Token(Token = "0x600080E")]
	[Address(RVA = "0xCD3354", Offset = "0xCD3354", VA = "0xCD3354")]
	public SSFSGenerator()
	{
	}
}
[Serializable]
[Token(Token = "0x2000165")]
[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x5C9FC8", Offset = "0x5C9FC8")]
public class TextureList
{
	[Token(Token = "0x4000A82")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public List<Texture2D> list;

	[Token(Token = "0x17000031")]
	public Texture2D texture
	{
		[Token(Token = "0x600080F")]
		[Address(RVA = "0xE940AC", Offset = "0xE940AC", VA = "0xE940AC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000032")]
	public Texture2D Item
	{
		[Token(Token = "0x6000811")]
		[Address(RVA = "0xE941F0", Offset = "0xE941F0", VA = "0xE941F0")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000812")]
		[Address(RVA = "0xE94264", Offset = "0xE94264", VA = "0xE94264")]
		set
		{
		}
	}

	[Token(Token = "0x17000033")]
	public int Count
	{
		[Token(Token = "0x6000813")]
		[Address(RVA = "0xE942D0", Offset = "0xE942D0", VA = "0xE942D0")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x6000810")]
	[Address(RVA = "0xE94134", Offset = "0xE94134", VA = "0xE94134")]
	public TextureList()
	{
	}

	[Token(Token = "0x6000814")]
	[Address(RVA = "0xE9431C", Offset = "0xE9431C", VA = "0xE9431C")]
	public void Add(Texture2D tex)
	{
	}

	[Token(Token = "0x6000815")]
	[Address(RVA = "0xE94380", Offset = "0xE94380", VA = "0xE94380")]
	public void Remove(Texture2D tex)
	{
	}

	[Token(Token = "0x6000816")]
	[Address(RVA = "0xE943E4", Offset = "0xE943E4", VA = "0xE943E4")]
	public void RemoveAt(int index)
	{
	}

	[Token(Token = "0x6000817")]
	[Address(RVA = "0xE94448", Offset = "0xE94448", VA = "0xE94448")]
	public void Clear()
	{
	}
}
[Serializable]
[Token(Token = "0x2000166")]
public class boolchance
{
	[Token(Token = "0x4000A83")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool boolean;

	[Token(Token = "0x4000A84")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float chance;

	[Token(Token = "0x17000034")]
	public bool check
	{
		[Token(Token = "0x6000818")]
		[Address(RVA = "0xD15088", Offset = "0xD15088", VA = "0xD15088")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000819")]
	[Address(RVA = "0xD150C8", Offset = "0xD150C8", VA = "0xD150C8")]
	public boolchance(bool boolean, float chance)
	{
	}
}
[Serializable]
[Token(Token = "0x2000167")]
public class RandomColor
{
	[Token(Token = "0x4000A85")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool useRandom;

	[Token(Token = "0x4000A86")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float minHue;

	[Token(Token = "0x4000A87")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float minSaturation;

	[Token(Token = "0x4000A88")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float minValue;

	[Token(Token = "0x4000A89")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float maxHue;

	[Token(Token = "0x4000A8A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float maxSaturation;

	[Token(Token = "0x4000A8B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float maxValue;

	[Token(Token = "0x4000A8C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public Color fixedColor;

	[Token(Token = "0x4000A8D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public Color testcolor;

	[Token(Token = "0x17000035")]
	public Color get_color
	{
		[Token(Token = "0x600081B")]
		[Address(RVA = "0x11F4A20", Offset = "0x11F4A20", VA = "0x11F4A20")]
		get
		{
			return default(Color);
		}
	}

	[Token(Token = "0x600081A")]
	[Address(RVA = "0x11F4970", Offset = "0x11F4970", VA = "0x11F4970")]
	public RandomColor(float minHue = 0f, float maxHue = 1f, float minSaturation = 0f, float maxSaturation = 1f, float minValue = 0f, float maxValue = 1f)
	{
	}
}
[Serializable]
[Token(Token = "0x2000168")]
public class RandomRange
{
	[Token(Token = "0x4000A8E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool useRandom;

	[Token(Token = "0x4000A8F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float min;

	[Token(Token = "0x4000A90")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float max;

	[Token(Token = "0x4000A91")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float def;

	[Token(Token = "0x4000A92")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float test;

	[Token(Token = "0x17000036")]
	public float get_float
	{
		[Token(Token = "0x600081C")]
		[Address(RVA = "0x11F4B44", Offset = "0x11F4B44", VA = "0x11F4B44")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x600081D")]
	[Address(RVA = "0x11F4B60", Offset = "0x11F4B60", VA = "0x11F4B60")]
	public RandomRange(float def = 1f, float min = 0f, float max = 1f)
	{
	}
}
[Serializable]
[Token(Token = "0x2000169")]
public class RandomRangeInt
{
	[Token(Token = "0x4000A93")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool useRandom;

	[Token(Token = "0x4000A94")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public int min;

	[Token(Token = "0x4000A95")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int max;

	[Token(Token = "0x4000A96")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int def;

	[Token(Token = "0x4000A97")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int test;

	[Token(Token = "0x17000037")]
	public int get_int
	{
		[Token(Token = "0x600081E")]
		[Address(RVA = "0x11F4BBC", Offset = "0x11F4BBC", VA = "0x11F4BBC")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x600081F")]
	[Address(RVA = "0x11F4BDC", Offset = "0x11F4BDC", VA = "0x11F4BDC")]
	public RandomRangeInt(int def = 26, int min = 10, int max = 100)
	{
	}
}
[Token(Token = "0x200016A")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x5CA000", Offset = "0x5CA000")]
public class EnableCameraDepthInForward : MonoBehaviour
{
	[Token(Token = "0x6000820")]
	[Address(RVA = "0xA037E0", Offset = "0xA037E0", VA = "0xA037E0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000821")]
	[Address(RVA = "0xA037E4", Offset = "0xA037E4", VA = "0xA037E4")]
	private void Set()
	{
	}

	[Token(Token = "0x6000822")]
	[Address(RVA = "0xA0386C", Offset = "0xA0386C", VA = "0xA0386C")]
	public EnableCameraDepthInForward()
	{
	}
}
[Token(Token = "0x200016B")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x5CA060", Offset = "0x5CA060")]
public class SoftNormalsToVertexColor : MonoBehaviour
{
	[Token(Token = "0x20003C0")]
	public enum Method
	{
		[Token(Token = "0x4001953")]
		Simple,
		[Token(Token = "0x4001954")]
		AngularDeviation
	}

	[Token(Token = "0x4000A98")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Method method;

	[Token(Token = "0x4000A99")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool generateOnAwake;

	[Token(Token = "0x4000A9A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	public bool generateNow;

	[Token(Token = "0x6000823")]
	[Address(RVA = "0xA1080C", Offset = "0xA1080C", VA = "0xA1080C")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6000824")]
	[Address(RVA = "0xA10A30", Offset = "0xA10A30", VA = "0xA10A30")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000825")]
	[Address(RVA = "0xA10820", Offset = "0xA10820", VA = "0xA10820")]
	private void TryGenerate()
	{
	}

	[Token(Token = "0x6000826")]
	[Address(RVA = "0xA10A40", Offset = "0xA10A40", VA = "0xA10A40")]
	private void Generate(Mesh m)
	{
	}

	[Token(Token = "0x6000827")]
	[Address(RVA = "0xA1132C", Offset = "0xA1132C", VA = "0xA1132C")]
	public SoftNormalsToVertexColor()
	{
	}
}
[Token(Token = "0x200016C")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x5CA0C0", Offset = "0x5CA0C0")]
public class ParticleSeekOptimized : MonoBehaviour
{
	[Token(Token = "0x4000A9B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform target;

	[Token(Token = "0x4000A9C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float force;

	[Token(Token = "0x4000A9D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ParticleSystem particleSystem;

	[Token(Token = "0x4000A9E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private ParticleSystem.Particle[] particles;

	[Token(Token = "0x4000A9F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private ParticleSystem.MainModule particleSystemMainModule;

	[Token(Token = "0x6000828")]
	[Address(RVA = "0x11FC294", Offset = "0x11FC294", VA = "0x11FC294")]
	private void Start()
	{
	}

	[Token(Token = "0x6000829")]
	[Address(RVA = "0x11FC314", Offset = "0x11FC314", VA = "0x11FC314")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x600082A")]
	[Address(RVA = "0x11FC680", Offset = "0x11FC680", VA = "0x11FC680")]
	public ParticleSeekOptimized()
	{
	}
}
[Token(Token = "0x200016D")]
public class LipSyncTest : MonoBehaviour
{
	[Token(Token = "0x4000AA0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LipSync ls;

	[Token(Token = "0x4000AA1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public LipSyncData data1;

	[Token(Token = "0x4000AA2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public LipSyncData data2;

	[Token(Token = "0x4000AA3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public LipSyncData data3;

	[Token(Token = "0x4000AA4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public LipSyncData data4;

	[Token(Token = "0x4000AA5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public LipSyncData data5;

	[Token(Token = "0x600082B")]
	[Address(RVA = "0xA67084", Offset = "0xA67084", VA = "0xA67084")]
	public void Play1()
	{
	}

	[Token(Token = "0x600082C")]
	[Address(RVA = "0xA670A8", Offset = "0xA670A8", VA = "0xA670A8")]
	public void Play2()
	{
	}

	[Token(Token = "0x600082D")]
	[Address(RVA = "0xA670CC", Offset = "0xA670CC", VA = "0xA670CC")]
	public void Play3()
	{
	}

	[Token(Token = "0x600082E")]
	[Address(RVA = "0xA670F0", Offset = "0xA670F0", VA = "0xA670F0")]
	public void Play4()
	{
	}

	[Token(Token = "0x600082F")]
	[Address(RVA = "0xA67114", Offset = "0xA67114", VA = "0xA67114")]
	public void Play5()
	{
	}

	[Token(Token = "0x6000830")]
	[Address(RVA = "0xA67138", Offset = "0xA67138", VA = "0xA67138")]
	public LipSyncTest()
	{
	}
}
[Token(Token = "0x200016E")]
public class enableDelay : MonoBehaviour
{
	[Token(Token = "0x4000AA6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float time;

	[Token(Token = "0x4000AA7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Camera cam;

	[Token(Token = "0x6000831")]
	[Address(RVA = "0xD15108", Offset = "0xD15108", VA = "0xD15108")]
	private void Update()
	{
	}

	[Token(Token = "0x6000832")]
	[Address(RVA = "0xD15174", Offset = "0xD15174", VA = "0xD15174")]
	public enableDelay()
	{
	}
}
[Token(Token = "0x200016F")]
public class pulse : MonoBehaviour
{
	[Token(Token = "0x4000AA8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Color pulseColour;

	[Token(Token = "0x4000AA9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Color _pulseColour;

	[Token(Token = "0x4000AAA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Color startColour;

	[Token(Token = "0x4000AAB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float pulseDuration;

	[Token(Token = "0x4000AAC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float _timer;

	[Token(Token = "0x4000AAD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Renderer _renderer;

	[Token(Token = "0x6000833")]
	[Address(RVA = "0xD15F3C", Offset = "0xD15F3C", VA = "0xD15F3C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000834")]
	[Address(RVA = "0xD16110", Offset = "0xD16110", VA = "0xD16110")]
	private void Update()
	{
	}

	[Token(Token = "0x6000835")]
	[Address(RVA = "0xD16278", Offset = "0xD16278", VA = "0xD16278")]
	public void Pulse()
	{
	}

	[Token(Token = "0x6000836")]
	[Address(RVA = "0xD1630C", Offset = "0xD1630C", VA = "0xD1630C")]
	public pulse()
	{
	}
}
namespace Tayx.Graphy
{
	[Token(Token = "0x2000170")]
	public class GraphyDebugger : Singleton<GraphyDebugger>
	{
		[Token(Token = "0x20003C1")]
		public enum DebugVariable
		{
			[Token(Token = "0x4001956")]
			Fps,
			[Token(Token = "0x4001957")]
			Fps_Min,
			[Token(Token = "0x4001958")]
			Fps_Max,
			[Token(Token = "0x4001959")]
			Fps_Avg,
			[Token(Token = "0x400195A")]
			Ram_Allocated,
			[Token(Token = "0x400195B")]
			Ram_Reserved,
			[Token(Token = "0x400195C")]
			Ram_Mono,
			[Token(Token = "0x400195D")]
			Audio_DB
		}

		[Token(Token = "0x20003C2")]
		public enum DebugComparer
		{
			[Token(Token = "0x400195F")]
			Less_than,
			[Token(Token = "0x4001960")]
			Equals_or_less_than,
			[Token(Token = "0x4001961")]
			Equals,
			[Token(Token = "0x4001962")]
			Equals_or_greater_than,
			[Token(Token = "0x4001963")]
			Greater_than
		}

		[Token(Token = "0x20003C3")]
		public enum ConditionEvaluation
		{
			[Token(Token = "0x4001965")]
			All_conditions_must_be_met,
			[Token(Token = "0x4001966")]
			Only_one_condition_has_to_be_met
		}

		[Token(Token = "0x20003C4")]
		public enum MessageType
		{
			[Token(Token = "0x4001968")]
			Log,
			[Token(Token = "0x4001969")]
			Warning,
			[Token(Token = "0x400196A")]
			Error
		}

		[Serializable]
		[Token(Token = "0x20003C5")]
		public struct DebugCondition
		{
			[Token(Token = "0x400196B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5D5D64", Offset = "0x5D5D64")]
			public DebugVariable Variable;

			[Token(Token = "0x400196C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5D5D9C", Offset = "0x5D5D9C")]
			public DebugComparer Comparer;

			[Token(Token = "0x400196D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5D5DD4", Offset = "0x5D5DD4")]
			public float Value;
		}

		[Serializable]
		[Token(Token = "0x20003C6")]
		public class DebugPacket
		{
			[Token(Token = "0x400196E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5D5E0C", Offset = "0x5D5E0C")]
			public bool Active;

			[Token(Token = "0x400196F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5D5E44", Offset = "0x5D5E44")]
			public int Id;

			[Token(Token = "0x4001970")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5D5E7C", Offset = "0x5D5E7C")]
			public bool ExecuteOnce;

			[Token(Token = "0x4001971")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5D5EB4", Offset = "0x5D5EB4")]
			public float InitSleepTime;

			[Token(Token = "0x4001972")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5D5EEC", Offset = "0x5D5EEC")]
			public float ExecuteSleepTime;

			[Token(Token = "0x4001973")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public ConditionEvaluation ConditionEvaluation;

			[Token(Token = "0x4001974")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5D5F24", Offset = "0x5D5F24")]
			public List<DebugCondition> DebugConditions;

			[Token(Token = "0x4001975")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public MessageType MessageType;

			[Token(Token = "0x4001976")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[AttributeAttribute(Name = "MultilineAttribute", RVA = "0x5D5F5C", Offset = "0x5D5F5C")]
			public string Message;

			[Token(Token = "0x4001977")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public bool TakeScreenshot;

			[Token(Token = "0x4001978")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public string ScreenshotFileName;

			[Token(Token = "0x4001979")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5D5F6C", Offset = "0x5D5F6C")]
			public bool DebugBreak;

			[Token(Token = "0x400197A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public UnityEvent UnityEvents;

			[Token(Token = "0x400197B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public List<Action> Callbacks;

			[Token(Token = "0x400197C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			private bool canBeChecked;

			[Token(Token = "0x400197D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
			private bool executed;

			[Token(Token = "0x400197E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			private float timePassed;

			[Token(Token = "0x170002CD")]
			public bool Check
			{
				[Token(Token = "0x6001A18")]
				[Address(RVA = "0x7EB980", Offset = "0x7EB980", VA = "0x7EB980")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6001A19")]
			[Address(RVA = "0x7EB988", Offset = "0x7EB988", VA = "0x7EB988")]
			public void Update()
			{
			}

			[Token(Token = "0x6001A1A")]
			[Address(RVA = "0x7EB9F0", Offset = "0x7EB9F0", VA = "0x7EB9F0")]
			public void Executed()
			{
			}

			[Token(Token = "0x6001A1B")]
			[Address(RVA = "0x7EB9FC", Offset = "0x7EB9FC", VA = "0x7EB9FC")]
			public DebugPacket()
			{
			}
		}

		[Token(Token = "0x20003C7")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDE4C", Offset = "0x5CDE4C")]
		private sealed class <>c__DisplayClass18_0
		{
			[Token(Token = "0x400197F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int packetId;

			[Token(Token = "0x6001A1C")]
			[Address(RVA = "0x7EB8FC", Offset = "0x7EB8FC", VA = "0x7EB8FC")]
			public <>c__DisplayClass18_0()
			{
			}

			[Token(Token = "0x6001A1D")]
			[Address(RVA = "0x7EB904", Offset = "0x7EB904", VA = "0x7EB904")]
			internal bool <GetFirstDebugPacketWithId>b__0(DebugPacket x)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x20003C8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDE5C", Offset = "0x5CDE5C")]
		private sealed class <>c__DisplayClass19_0
		{
			[Token(Token = "0x4001980")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int packetId;

			[Token(Token = "0x6001A1E")]
			[Address(RVA = "0x7EB928", Offset = "0x7EB928", VA = "0x7EB928")]
			public <>c__DisplayClass19_0()
			{
			}

			[Token(Token = "0x6001A1F")]
			[Address(RVA = "0x7EB930", Offset = "0x7EB930", VA = "0x7EB930")]
			internal bool <GetAllDebugPacketsWithId>b__0(DebugPacket x)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x20003C9")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDE6C", Offset = "0x5CDE6C")]
		private sealed class <>c__DisplayClass21_0
		{
			[Token(Token = "0x4001981")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int packetId;

			[Token(Token = "0x6001A20")]
			[Address(RVA = "0x7EB954", Offset = "0x7EB954", VA = "0x7EB954")]
			public <>c__DisplayClass21_0()
			{
			}

			[Token(Token = "0x6001A21")]
			[Address(RVA = "0x7EB95C", Offset = "0x7EB95C", VA = "0x7EB95C")]
			internal bool <RemoveAllDebugPacketsWithId>b__0(DebugPacket x)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4000AAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private FpsMonitor m_fpsMonitor;

		[Token(Token = "0x4000AAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private RamMonitor m_ramMonitor;

		[Token(Token = "0x4000AB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private AudioMonitor m_audioMonitor;

		[Token(Token = "0x4000AB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private List<DebugPacket> m_debugPackets;

		[Token(Token = "0x6000837")]
		[Address(RVA = "0x13F98B0", Offset = "0x13F98B0", VA = "0x13F98B0")]
		protected GraphyDebugger()
		{
		}

		[Token(Token = "0x6000838")]
		[Address(RVA = "0x13F9928", Offset = "0x13F9928", VA = "0x13F9928")]
		private void Start()
		{
		}

		[Token(Token = "0x6000839")]
		[Address(RVA = "0x13F99E4", Offset = "0x13F99E4", VA = "0x13F99E4")]
		private void Update()
		{
		}

		[Token(Token = "0x600083A")]
		[Address(RVA = "0x13F9F98", Offset = "0x13F9F98", VA = "0x13F9F98")]
		public void AddNewDebugPacket(DebugPacket newDebugPacket)
		{
		}

		[Token(Token = "0x600083B")]
		[Address(RVA = "0x13F9FFC", Offset = "0x13F9FFC", VA = "0x13F9FFC")]
		public void AddNewDebugPacket(int newId, DebugCondition newDebugCondition, MessageType newMessageType, string newMessage, bool newDebugBreak, Action newCallback)
		{
		}

		[Token(Token = "0x600083C")]
		[Address(RVA = "0x13FA118", Offset = "0x13FA118", VA = "0x13FA118")]
		public void AddNewDebugPacket(int newId, List<DebugCondition> newDebugConditions, MessageType newMessageType, string newMessage, bool newDebugBreak, Action newCallback)
		{
		}

		[Token(Token = "0x600083D")]
		[Address(RVA = "0x13FA20C", Offset = "0x13FA20C", VA = "0x13FA20C")]
		public void AddNewDebugPacket(int newId, DebugCondition newDebugCondition, MessageType newMessageType, string newMessage, bool newDebugBreak, List<Action> newCallbacks)
		{
		}

		[Token(Token = "0x600083E")]
		[Address(RVA = "0x13FA30C", Offset = "0x13FA30C", VA = "0x13FA30C")]
		public void AddNewDebugPacket(int newId, List<DebugCondition> newDebugConditions, MessageType newMessageType, string newMessage, bool newDebugBreak, List<Action> newCallbacks)
		{
		}

		[Token(Token = "0x600083F")]
		[Address(RVA = "0x13FA3E4", Offset = "0x13FA3E4", VA = "0x13FA3E4")]
		public DebugPacket GetFirstDebugPacketWithId(int packetId)
		{
			return null;
		}

		[Token(Token = "0x6000840")]
		[Address(RVA = "0x13FA4D0", Offset = "0x13FA4D0", VA = "0x13FA4D0")]
		public List<DebugPacket> GetAllDebugPacketsWithId(int packetId)
		{
			return null;
		}

		[Token(Token = "0x6000841")]
		[Address(RVA = "0x13FA5C0", Offset = "0x13FA5C0", VA = "0x13FA5C0")]
		public void RemoveFirstDebugPacketWithId(int packetId)
		{
		}

		[Token(Token = "0x6000842")]
		[Address(RVA = "0x13FA634", Offset = "0x13FA634", VA = "0x13FA634")]
		public void RemoveAllDebugPacketsWithId(int packetId)
		{
		}

		[Token(Token = "0x6000843")]
		[Address(RVA = "0x13FA724", Offset = "0x13FA724", VA = "0x13FA724")]
		public void AddCallbackToFirstDebugPacketWithId(Action callback, int id)
		{
		}

		[Token(Token = "0x6000844")]
		[Address(RVA = "0x13FA79C", Offset = "0x13FA79C", VA = "0x13FA79C")]
		public void AddCallbackToAllDebugPacketWithId(Action callback, int id)
		{
		}

		[Token(Token = "0x6000845")]
		[Address(RVA = "0x13F99E8", Offset = "0x13F99E8", VA = "0x13F99E8")]
		private void CheckDebugPackets()
		{
		}

		[Token(Token = "0x6000846")]
		[Address(RVA = "0x13FA8F4", Offset = "0x13FA8F4", VA = "0x13FA8F4")]
		private bool CheckIfConditionIsMet(DebugCondition debugCondition)
		{
			return default(bool);
		}

		[Token(Token = "0x6000847")]
		[Address(RVA = "0x13FAD84", Offset = "0x13FAD84", VA = "0x13FAD84")]
		private float GetRequestedValueFromDebugVariable(DebugVariable debugVariable)
		{
			return default(float);
		}

		[Token(Token = "0x6000848")]
		[Address(RVA = "0x13FA99C", Offset = "0x13FA99C", VA = "0x13FA99C")]
		private void ExecuteOperationsInDebugPacket(DebugPacket debugPacket)
		{
		}
	}
	[Token(Token = "0x2000171")]
	public class GraphyManager : Singleton<GraphyManager>
	{
		[Token(Token = "0x20003CA")]
		public enum Mode
		{
			[Token(Token = "0x4001983")]
			FULL,
			[Token(Token = "0x4001984")]
			LIGHT
		}

		[Token(Token = "0x20003CB")]
		public enum ModuleType
		{
			[Token(Token = "0x4001986")]
			FPS,
			[Token(Token = "0x4001987")]
			RAM,
			[Token(Token = "0x4001988")]
			AUDIO,
			[Token(Token = "0x4001989")]
			ADVANCED
		}

		[Token(Token = "0x20003CC")]
		public enum ModuleState
		{
			[Token(Token = "0x400198B")]
			FULL,
			[Token(Token = "0x400198C")]
			TEXT,
			[Token(Token = "0x400198D")]
			BASIC,
			[Token(Token = "0x400198E")]
			BACKGROUND,
			[Token(Token = "0x400198F")]
			OFF
		}

		[Token(Token = "0x20003CD")]
		public enum ModulePosition
		{
			[Token(Token = "0x4001991")]
			TOP_RIGHT,
			[Token(Token = "0x4001992")]
			TOP_LEFT,
			[Token(Token = "0x4001993")]
			BOTTOM_RIGHT,
			[Token(Token = "0x4001994")]
			BOTTOM_LEFT
		}

		[Token(Token = "0x20003CE")]
		public enum LookForAudioListener
		{
			[Token(Token = "0x4001996")]
			ALWAYS,
			[Token(Token = "0x4001997")]
			ON_SCENE_LOAD,
			[Token(Token = "0x4001998")]
			NEVER
		}

		[Token(Token = "0x20003CF")]
		public enum ModulePreset
		{
			[Token(Token = "0x400199A")]
			FPS_BASIC,
			[Token(Token = "0x400199B")]
			FPS_TEXT,
			[Token(Token = "0x400199C")]
			FPS_FULL,
			[Token(Token = "0x400199D")]
			FPS_TEXT_RAM_TEXT,
			[Token(Token = "0x400199E")]
			FPS_FULL_RAM_TEXT,
			[Token(Token = "0x400199F")]
			FPS_FULL_RAM_FULL,
			[Token(Token = "0x40019A0")]
			FPS_TEXT_RAM_TEXT_AUDIO_TEXT,
			[Token(Token = "0x40019A1")]
			FPS_FULL_RAM_TEXT_AUDIO_TEXT,
			[Token(Token = "0x40019A2")]
			FPS_FULL_RAM_FULL_AUDIO_TEXT,
			[Token(Token = "0x40019A3")]
			FPS_FULL_RAM_FULL_AUDIO_FULL,
			[Token(Token = "0x40019A4")]
			FPS_FULL_RAM_FULL_AUDIO_FULL_ADVANCED_FULL,
			[Token(Token = "0x40019A5")]
			FPS_BASIC_ADVANCED_FULL
		}

		[Token(Token = "0x4000AB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private FpsManager m_fpsManager;

		[Token(Token = "0x4000AB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private RamManager m_ramManager;

		[Token(Token = "0x4000AB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private AudioManager m_audioManager;

		[Token(Token = "0x4000AB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AdvancedData m_advancedData;

		[Token(Token = "0x4000AB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private FpsMonitor m_fpsMonitor;

		[Token(Token = "0x4000AB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private RamMonitor m_ramMonitor;

		[Token(Token = "0x4000AB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private AudioMonitor m_audioMonitor;

		[Token(Token = "0x4000AB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private Mode m_graphyMode;

		[Token(Token = "0x4000ABA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private ModulePreset m_modulePresetState;

		[Token(Token = "0x4000ABB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool m_active;

		[Token(Token = "0x4000ABC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		[SerializeField]
		private bool m_keepAlive;

		[Token(Token = "0x4000ABD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5A")]
		[SerializeField]
		private bool m_background;

		[Token(Token = "0x4000ABE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[SerializeField]
		private Color m_backgroundColor;

		[Token(Token = "0x4000ABF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[SerializeField]
		private KeyCode m_toggleModeKeyCode;

		[Token(Token = "0x4000AC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private bool m_toggleModeCtrl;

		[Token(Token = "0x4000AC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		[SerializeField]
		private bool m_toggleModeAlt;

		[Token(Token = "0x4000AC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[SerializeField]
		private KeyCode m_toggleActiveKeyCode;

		[Token(Token = "0x4000AC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private bool m_toggleActiveCtrl;

		[Token(Token = "0x4000AC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
		[SerializeField]
		private bool m_toggleActiveAlt;

		[Token(Token = "0x4000AC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[SerializeField]
		private ModulePosition m_graphModulePosition;

		[Token(Token = "0x4000AC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private ModuleState m_fpsModuleState;

		[Token(Token = "0x4000AC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5CFFD8", Offset = "0x5CFFD8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5CFFD8", Offset = "0x5CFFD8")]
		[SerializeField]
		private int m_timeToResetMinMaxFps;

		[Token(Token = "0x4000AC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private Color m_goodFpsColor;

		[Token(Token = "0x4000AC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		private int m_goodFpsThreshold;

		[Token(Token = "0x4000ACA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[SerializeField]
		private Color m_cautionFpsColor;

		[Token(Token = "0x4000ACB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[SerializeField]
		private int m_cautionFpsThreshold;

		[Token(Token = "0x4000ACC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		private Color m_criticalFpsColor;

		[Token(Token = "0x4000ACD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D0090", Offset = "0x5D0090")]
		[SerializeField]
		private int m_fpsGraphResolution;

		[Token(Token = "0x4000ACE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D00D4", Offset = "0x5D00D4")]
		[SerializeField]
		private int m_fpsTextUpdateRate;

		[Token(Token = "0x4000ACF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		private ModuleState m_ramModuleState;

		[Token(Token = "0x4000AD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[SerializeField]
		private Color m_allocatedRamColor;

		[Token(Token = "0x4000AD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[SerializeField]
		private Color m_reservedRamColor;

		[Token(Token = "0x4000AD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		[SerializeField]
		private Color m_monoRamColor;

		[Token(Token = "0x4000AD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D0158", Offset = "0x5D0158")]
		[SerializeField]
		private int m_ramGraphResolution;

		[Token(Token = "0x4000AD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D019C", Offset = "0x5D019C")]
		[SerializeField]
		private int m_ramTextUpdateRate;

		[Token(Token = "0x4000AD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		[SerializeField]
		private ModuleState m_audioModuleState;

		[Token(Token = "0x4000AD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[SerializeField]
		private LookForAudioListener m_findAudioListenerInCameraIfNull;

		[Token(Token = "0x4000AD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[SerializeField]
		private AudioListener m_audioListener;

		[Token(Token = "0x4000AD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[SerializeField]
		private Color m_audioGraphColor;

		[Token(Token = "0x4000AD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D0220", Offset = "0x5D0220")]
		[SerializeField]
		private int m_audioGraphResolution;

		[Token(Token = "0x4000ADA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D0264", Offset = "0x5D0264")]
		[SerializeField]
		private int m_audioTextUpdateRate;

		[Token(Token = "0x4000ADB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[SerializeField]
		private FFTWindow m_FFTWindow;

		[Token(Token = "0x4000ADC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5D02B8", Offset = "0x5D02B8")]
		[SerializeField]
		private int m_spectrumSize;

		[Token(Token = "0x4000ADD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[SerializeField]
		private ModulePosition m_advancedModulePosition;

		[Token(Token = "0x4000ADE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		[SerializeField]
		private ModuleState m_advancedModuleState;

		[Token(Token = "0x17000038")]
		public Mode GraphyMode
		{
			[Token(Token = "0x600084A")]
			[Address(RVA = "0x13FB12C", Offset = "0x13FB12C", VA = "0x13FB12C")]
			get
			{
				return default(Mode);
			}
			[Token(Token = "0x600084B")]
			[Address(RVA = "0x13FB134", Offset = "0x13FB134", VA = "0x13FB134")]
			set
			{
			}
		}

		[Token(Token = "0x17000039")]
		public bool KeepAlive
		{
			[Token(Token = "0x600084C")]
			[Address(RVA = "0x13FB198", Offset = "0x13FB198", VA = "0x13FB198")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700003A")]
		public bool Background
		{
			[Token(Token = "0x600084D")]
			[Address(RVA = "0x13FB1A0", Offset = "0x13FB1A0", VA = "0x13FB1A0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600084E")]
			[Address(RVA = "0x13FB1A8", Offset = "0x13FB1A8", VA = "0x13FB1A8")]
			set
			{
			}
		}

		[Token(Token = "0x1700003B")]
		public Color BackgroundColor
		{
			[Token(Token = "0x600084F")]
			[Address(RVA = "0x13FB1B4", Offset = "0x13FB1B4", VA = "0x13FB1B4")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6000850")]
			[Address(RVA = "0x13FB1C0", Offset = "0x13FB1C0", VA = "0x13FB1C0")]
			set
			{
			}
		}

		[Token(Token = "0x1700003C")]
		public ModulePosition GraphModulePosition
		{
			[Token(Token = "0x6000851")]
			[Address(RVA = "0x13FB1CC", Offset = "0x13FB1CC", VA = "0x13FB1CC")]
			get
			{
				return default(ModulePosition);
			}
			[Token(Token = "0x6000852")]
			[Address(RVA = "0x13FB1D4", Offset = "0x13FB1D4", VA = "0x13FB1D4")]
			set
			{
			}
		}

		[Token(Token = "0x1700003D")]
		public ModuleState FpsModuleState
		{
			[Token(Token = "0x6000853")]
			[Address(RVA = "0x13FB22C", Offset = "0x13FB22C", VA = "0x13FB22C")]
			get
			{
				return default(ModuleState);
			}
			[Token(Token = "0x6000854")]
			[Address(RVA = "0x13FB234", Offset = "0x13FB234", VA = "0x13FB234")]
			set
			{
			}
		}

		[Token(Token = "0x1700003E")]
		public int TimeToResetMinMaxFps
		{
			[Token(Token = "0x6000855")]
			[Address(RVA = "0x13FB258", Offset = "0x13FB258", VA = "0x13FB258")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000856")]
			[Address(RVA = "0x13FB260", Offset = "0x13FB260", VA = "0x13FB260")]
			set
			{
			}
		}

		[Token(Token = "0x1700003F")]
		public Color GoodFPSColor
		{
			[Token(Token = "0x6000857")]
			[Address(RVA = "0x13FB284", Offset = "0x13FB284", VA = "0x13FB284")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6000858")]
			[Address(RVA = "0x13FB290", Offset = "0x13FB290", VA = "0x13FB290")]
			set
			{
			}
		}

		[Token(Token = "0x17000040")]
		public Color CautionFPSColor
		{
			[Token(Token = "0x6000859")]
			[Address(RVA = "0x13FB2B8", Offset = "0x13FB2B8", VA = "0x13FB2B8")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x600085A")]
			[Address(RVA = "0x13FB2C4", Offset = "0x13FB2C4", VA = "0x13FB2C4")]
			set
			{
			}
		}

		[Token(Token = "0x17000041")]
		public Color CriticalFPSColor
		{
			[Token(Token = "0x600085B")]
			[Address(RVA = "0x13FB2EC", Offset = "0x13FB2EC", VA = "0x13FB2EC")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x600085C")]
			[Address(RVA = "0x13FB2F8", Offset = "0x13FB2F8", VA = "0x13FB2F8")]
			set
			{
			}
		}

		[Token(Token = "0x17000042")]
		public int GoodFPSThreshold
		{
			[Token(Token = "0x600085D")]
			[Address(RVA = "0x13FB320", Offset = "0x13FB320", VA = "0x13FB320")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600085E")]
			[Address(RVA = "0x13FB328", Offset = "0x13FB328", VA = "0x13FB328")]
			set
			{
			}
		}

		[Token(Token = "0x17000043")]
		public int CautionFPSThreshold
		{
			[Token(Token = "0x600085F")]
			[Address(RVA = "0x13FB34C", Offset = "0x13FB34C", VA = "0x13FB34C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000860")]
			[Address(RVA = "0x13FB354", Offset = "0x13FB354", VA = "0x13FB354")]
			set
			{
			}
		}

		[Token(Token = "0x17000044")]
		public int FpsGraphResolution
		{
			[Token(Token = "0x6000861")]
			[Address(RVA = "0x13FB378", Offset = "0x13FB378", VA = "0x13FB378")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000862")]
			[Address(RVA = "0x13FB380", Offset = "0x13FB380", VA = "0x13FB380")]
			set
			{
			}
		}

		[Token(Token = "0x17000045")]
		public int FpsTextUpdateRate
		{
			[Token(Token = "0x6000863")]
			[Address(RVA = "0x13FB3A4", Offset = "0x13FB3A4", VA = "0x13FB3A4")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000864")]
			[Address(RVA = "0x13FB3AC", Offset = "0x13FB3AC", VA = "0x13FB3AC")]
			set
			{
			}
		}

		[Token(Token = "0x17000046")]
		public float CurrentFPS
		{
			[Token(Token = "0x6000865")]
			[Address(RVA = "0x13FB3D0", Offset = "0x13FB3D0", VA = "0x13FB3D0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000047")]
		public float AverageFPS
		{
			[Token(Token = "0x6000866")]
			[Address(RVA = "0x13FB3EC", Offset = "0x13FB3EC", VA = "0x13FB3EC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000048")]
		public float MinFPS
		{
			[Token(Token = "0x6000867")]
			[Address(RVA = "0x13FB408", Offset = "0x13FB408", VA = "0x13FB408")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000049")]
		public float MaxFPS
		{
			[Token(Token = "0x6000868")]
			[Address(RVA = "0x13FB424", Offset = "0x13FB424", VA = "0x13FB424")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700004A")]
		public ModuleState RamModuleState
		{
			[Token(Token = "0x6000869")]
			[Address(RVA = "0x13FB440", Offset = "0x13FB440", VA = "0x13FB440")]
			get
			{
				return default(ModuleState);
			}
			[Token(Token = "0x600086A")]
			[Address(RVA = "0x13FB448", Offset = "0x13FB448", VA = "0x13FB448")]
			set
			{
			}
		}

		[Token(Token = "0x1700004B")]
		public Color AllocatedRamColor
		{
			[Token(Token = "0x600086B")]
			[Address(RVA = "0x13FB46C", Offset = "0x13FB46C", VA = "0x13FB46C")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x600086C")]
			[Address(RVA = "0x13FB478", Offset = "0x13FB478", VA = "0x13FB478")]
			set
			{
			}
		}

		[Token(Token = "0x1700004C")]
		public Color ReservedRamColor
		{
			[Token(Token = "0x600086D")]
			[Address(RVA = "0x13FB4A0", Offset = "0x13FB4A0", VA = "0x13FB4A0")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x600086E")]
			[Address(RVA = "0x13FB4AC", Offset = "0x13FB4AC", VA = "0x13FB4AC")]
			set
			{
			}
		}

		[Token(Token = "0x1700004D")]
		public Color MonoRamColor
		{
			[Token(Token = "0x600086F")]
			[Address(RVA = "0x13FB4D4", Offset = "0x13FB4D4", VA = "0x13FB4D4")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6000870")]
			[Address(RVA = "0x13FB4E0", Offset = "0x13FB4E0", VA = "0x13FB4E0")]
			set
			{
			}
		}

		[Token(Token = "0x1700004E")]
		public int RamGraphResolution
		{
			[Token(Token = "0x6000871")]
			[Address(RVA = "0x13FB508", Offset = "0x13FB508", VA = "0x13FB508")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000872")]
			[Address(RVA = "0x13FB510", Offset = "0x13FB510", VA = "0x13FB510")]
			set
			{
			}
		}

		[Token(Token = "0x1700004F")]
		public int RamTextUpdateRate
		{
			[Token(Token = "0x6000873")]
			[Address(RVA = "0x13FB534", Offset = "0x13FB534", VA = "0x13FB534")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000874")]
			[Address(RVA = "0x13FB53C", Offset = "0x13FB53C", VA = "0x13FB53C")]
			set
			{
			}
		}

		[Token(Token = "0x17000050")]
		public float AllocatedRam
		{
			[Token(Token = "0x6000875")]
			[Address(RVA = "0x13FB560", Offset = "0x13FB560", VA = "0x13FB560")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000051")]
		public float ReservedRam
		{
			[Token(Token = "0x6000876")]
			[Address(RVA = "0x13FB57C", Offset = "0x13FB57C", VA = "0x13FB57C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000052")]
		public float MonoRam
		{
			[Token(Token = "0x6000877")]
			[Address(RVA = "0x13FB598", Offset = "0x13FB598", VA = "0x13FB598")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000053")]
		public ModuleState AudioModuleState
		{
			[Token(Token = "0x6000878")]
			[Address(RVA = "0x13FB5B4", Offset = "0x13FB5B4", VA = "0x13FB5B4")]
			get
			{
				return default(ModuleState);
			}
			[Token(Token = "0x6000879")]
			[Address(RVA = "0x13FB5BC", Offset = "0x13FB5BC", VA = "0x13FB5BC")]
			set
			{
			}
		}

		[Token(Token = "0x17000054")]
		public AudioListener AudioListener
		{
			[Token(Token = "0x600087A")]
			[Address(RVA = "0x13FB5E0", Offset = "0x13FB5E0", VA = "0x13FB5E0")]
			get
			{
				return null;
			}
			[Token(Token = "0x600087B")]
			[Address(RVA = "0x13FB5E8", Offset = "0x13FB5E8", VA = "0x13FB5E8")]
			set
			{
			}
		}

		[Token(Token = "0x17000055")]
		public LookForAudioListener FindAudioListenerInCameraIfNull
		{
			[Token(Token = "0x600087C")]
			[Address(RVA = "0x13FB620", Offset = "0x13FB620", VA = "0x13FB620")]
			get
			{
				return default(LookForAudioListener);
			}
			[Token(Token = "0x600087D")]
			[Address(RVA = "0x13FB628", Offset = "0x13FB628", VA = "0x13FB628")]
			set
			{
			}
		}

		[Token(Token = "0x17000056")]
		public Color AudioGraphColor
		{
			[Token(Token = "0x600087E")]
			[Address(RVA = "0x13FB64C", Offset = "0x13FB64C", VA = "0x13FB64C")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x600087F")]
			[Address(RVA = "0x13FB660", Offset = "0x13FB660", VA = "0x13FB660")]
			set
			{
			}
		}

		[Token(Token = "0x17000057")]
		public int AudioGraphResolution
		{
			[Token(Token = "0x6000880")]
			[Address(RVA = "0x13FB690", Offset = "0x13FB690", VA = "0x13FB690")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000881")]
			[Address(RVA = "0x13FB698", Offset = "0x13FB698", VA = "0x13FB698")]
			set
			{
			}
		}

		[Token(Token = "0x17000058")]
		public int AudioTextUpdateRate
		{
			[Token(Token = "0x6000882")]
			[Address(RVA = "0x13FB6BC", Offset = "0x13FB6BC", VA = "0x13FB6BC")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000883")]
			[Address(RVA = "0x13FB6C4", Offset = "0x13FB6C4", VA = "0x13FB6C4")]
			set
			{
			}
		}

		[Token(Token = "0x17000059")]
		public FFTWindow FftWindow
		{
			[Token(Token = "0x6000884")]
			[Address(RVA = "0x13FB6E8", Offset = "0x13FB6E8", VA = "0x13FB6E8")]
			get
			{
				return default(FFTWindow);
			}
			[Token(Token = "0x6000885")]
			[Address(RVA = "0x13FB6F0", Offset = "0x13FB6F0", VA = "0x13FB6F0")]
			set
			{
			}
		}

		[Token(Token = "0x1700005A")]
		public int SpectrumSize
		{
			[Token(Token = "0x6000886")]
			[Address(RVA = "0x13FB714", Offset = "0x13FB714", VA = "0x13FB714")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000887")]
			[Address(RVA = "0x13FB71C", Offset = "0x13FB71C", VA = "0x13FB71C")]
			set
			{
			}
		}

		[Token(Token = "0x1700005B")]
		public float[] Spectrum
		{
			[Token(Token = "0x6000888")]
			[Address(RVA = "0x13FB740", Offset = "0x13FB740", VA = "0x13FB740")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700005C")]
		public float MaxDB
		{
			[Token(Token = "0x6000889")]
			[Address(RVA = "0x13FB75C", Offset = "0x13FB75C", VA = "0x13FB75C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700005D")]
		public ModuleState AdvancedModuleState
		{
			[Token(Token = "0x600088A")]
			[Address(RVA = "0x13FB778", Offset = "0x13FB778", VA = "0x13FB778")]
			get
			{
				return default(ModuleState);
			}
			[Token(Token = "0x600088B")]
			[Address(RVA = "0x13FB780", Offset = "0x13FB780", VA = "0x13FB780")]
			set
			{
			}
		}

		[Token(Token = "0x1700005E")]
		public ModulePosition AdvancedModulePosition
		{
			[Token(Token = "0x600088C")]
			[Address(RVA = "0x13FB7A4", Offset = "0x13FB7A4", VA = "0x13FB7A4")]
			get
			{
				return default(ModulePosition);
			}
			[Token(Token = "0x600088D")]
			[Address(RVA = "0x13FB7AC", Offset = "0x13FB7AC", VA = "0x13FB7AC")]
			set
			{
			}
		}

		[Token(Token = "0x6000849")]
		[Address(RVA = "0x13FAEAC", Offset = "0x13FAEAC", VA = "0x13FAEAC")]
		protected GraphyManager()
		{
		}

		[Token(Token = "0x600088E")]
		[Address(RVA = "0x13FB7D0", Offset = "0x13FB7D0", VA = "0x13FB7D0")]
		private void Start()
		{
		}

		[Token(Token = "0x600088F")]
		[Address(RVA = "0x13FBD18", Offset = "0x13FBD18", VA = "0x13FBD18")]
		private void Update()
		{
		}

		[Token(Token = "0x6000890")]
		[Address(RVA = "0x13FBEA4", Offset = "0x13FBEA4", VA = "0x13FBEA4")]
		public void SetModulePosition(ModuleType moduleType, ModulePosition modulePosition)
		{
		}

		[Token(Token = "0x6000891")]
		[Address(RVA = "0x13FBF38", Offset = "0x13FBF38", VA = "0x13FBF38")]
		public void SetModuleMode(ModuleType moduleType, ModuleState moduleState)
		{
		}

		[Token(Token = "0x6000892")]
		[Address(RVA = "0x13FBFCC", Offset = "0x13FBFCC", VA = "0x13FBFCC")]
		public void ToggleModes()
		{
		}

		[Token(Token = "0x6000893")]
		[Address(RVA = "0x13FC0C8", Offset = "0x13FC0C8", VA = "0x13FC0C8")]
		public void SetPreset(ModulePreset modulePreset)
		{
		}

		[Token(Token = "0x6000894")]
		[Address(RVA = "0x13FC304", Offset = "0x13FC304", VA = "0x13FC304")]
		public void ToggleActive()
		{
		}

		[Token(Token = "0x6000895")]
		[Address(RVA = "0x13FB7D4", Offset = "0x13FB7D4", VA = "0x13FB7D4")]
		private void Init()
		{
		}

		[Token(Token = "0x6000896")]
		[Address(RVA = "0x13FBD1C", Offset = "0x13FBD1C", VA = "0x13FBD1C")]
		private void CheckForHotkeyPresses()
		{
		}

		[Token(Token = "0x6000897")]
		[Address(RVA = "0x13FC500", Offset = "0x13FC500", VA = "0x13FC500")]
		private bool CheckFor1KeyPress(KeyCode key)
		{
			return default(bool);
		}

		[Token(Token = "0x6000898")]
		[Address(RVA = "0x13FC490", Offset = "0x13FC490", VA = "0x13FC490")]
		private bool CheckFor2KeyPress(KeyCode key1, KeyCode key2)
		{
			return default(bool);
		}

		[Token(Token = "0x6000899")]
		[Address(RVA = "0x13FC3C0", Offset = "0x13FC3C0", VA = "0x13FC3C0")]
		private bool CheckFor3KeyPress(KeyCode key1, KeyCode key2, KeyCode key3)
		{
			return default(bool);
		}

		[Token(Token = "0x600089A")]
		[Address(RVA = "0x13FB13C", Offset = "0x13FB13C", VA = "0x13FB13C")]
		private void UpdateAllParameters()
		{
		}
	}
	[Token(Token = "0x2000172")]
	public class ShaderGraph
	{
		[Token(Token = "0x4000ADF")]
		public const int ArrayMaxSizeFull = 512;

		[Token(Token = "0x4000AE0")]
		public const int ArrayMaxSizeLight = 128;

		[Token(Token = "0x4000AE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int ArrayMaxSize;

		[Token(Token = "0x4000AE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Image Image;

		[Token(Token = "0x4000AE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private string Name;

		[Token(Token = "0x4000AE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string Name_Length;

		[Token(Token = "0x4000AE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float[] Array;

		[Token(Token = "0x4000AE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float Average;

		[Token(Token = "0x4000AE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private int averagePropertyId;

		[Token(Token = "0x4000AE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float GoodThreshold;

		[Token(Token = "0x4000AE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float CautionThreshold;

		[Token(Token = "0x4000AEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int goodThresholdPropertyId;

		[Token(Token = "0x4000AEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private int cautionThresholdPropertyId;

		[Token(Token = "0x4000AEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Color GoodColor;

		[Token(Token = "0x4000AED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Color CautionColor;

		[Token(Token = "0x4000AEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Color CriticalColor;

		[Token(Token = "0x4000AEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int goodColorPropertyId;

		[Token(Token = "0x4000AF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private int cautionColorPropertyId;

		[Token(Token = "0x4000AF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private int criticalColorPropertyId;

		[Token(Token = "0x600089B")]
		[Address(RVA = "0xA0D544", Offset = "0xA0D544", VA = "0xA0D544")]
		public void InitializeShader()
		{
		}

		[Token(Token = "0x600089C")]
		[Address(RVA = "0xA0D6B4", Offset = "0xA0D6B4", VA = "0xA0D6B4")]
		public void UpdateArray()
		{
		}

		[Token(Token = "0x600089D")]
		[Address(RVA = "0xA0D704", Offset = "0xA0D704", VA = "0xA0D704")]
		public void UpdateAverage()
		{
		}

		[Token(Token = "0x600089E")]
		[Address(RVA = "0xA0D74C", Offset = "0xA0D74C", VA = "0xA0D74C")]
		public void UpdateThresholds()
		{
		}

		[Token(Token = "0x600089F")]
		[Address(RVA = "0xA0D7C0", Offset = "0xA0D7C0", VA = "0xA0D7C0")]
		public void UpdateColors()
		{
		}

		[Token(Token = "0x60008A0")]
		[Address(RVA = "0xA0D86C", Offset = "0xA0D86C", VA = "0xA0D86C")]
		public void UpdatePoints()
		{
		}

		[Token(Token = "0x60008A1")]
		[Address(RVA = "0xA0D8B4", Offset = "0xA0D8B4", VA = "0xA0D8B4")]
		public ShaderGraph()
		{
		}
	}
}
namespace Tayx.Graphy.Utils
{
	[Token(Token = "0x2000173")]
	public static class ExtensionMethods
	{
		[Token(Token = "0x60008A2")]
		[Address(RVA = "0xA054EC", Offset = "0xA054EC", VA = "0xA054EC")]
		public static List<GameObject> SetAllActive(this List<GameObject> gameObjects, bool active)
		{
			return null;
		}

		[Token(Token = "0x60008A3")]
		[Address(RVA = "0xA0561C", Offset = "0xA0561C", VA = "0xA0561C")]
		public static List<Image> SetOneActive(this List<Image> images, int active)
		{
			return null;
		}

		[Token(Token = "0x60008A4")]
		[Address(RVA = "0xA056D8", Offset = "0xA056D8", VA = "0xA056D8")]
		public static List<Image> SetAllActive(this List<Image> images, bool active)
		{
			return null;
		}
	}
	[Token(Token = "0x2000174")]
	public static class IntString
	{
		[Token(Token = "0x4000AF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static string[] positiveBuffer;

		[Token(Token = "0x4000AF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static string[] negativeBuffer;

		[Token(Token = "0x1700005F")]
		public static float maxValue
		{
			[Token(Token = "0x60008A5")]
			[Address(RVA = "0xA52174", Offset = "0xA52174", VA = "0xA52174")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000060")]
		public static float minValue
		{
			[Token(Token = "0x60008A6")]
			[Address(RVA = "0xA521E8", Offset = "0xA521E8", VA = "0xA521E8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000061")]
		public static bool Inited
		{
			[Token(Token = "0x60008A7")]
			[Address(RVA = "0xA5225C", Offset = "0xA5225C", VA = "0xA5225C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60008A8")]
		[Address(RVA = "0xA52308", Offset = "0xA52308", VA = "0xA52308")]
		public static void Init(int minNegativeValue, int maxPositiveValue)
		{
		}

		[Token(Token = "0x60008A9")]
		[Address(RVA = "0xA5257C", Offset = "0xA5257C", VA = "0xA5257C")]
		public static string ToStringNonAlloc(this int value)
		{
			return null;
		}
	}
	[Token(Token = "0x2000175")]
	public static class FloatString
	{
		[Token(Token = "0x4000AF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static float decimalMultiplayer;

		[Token(Token = "0x4000AF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static string[] positiveBuffer;

		[Token(Token = "0x4000AF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static string[] negativeBuffer;

		[Token(Token = "0x17000062")]
		public static bool Inited
		{
			[Token(Token = "0x60008AB")]
			[Address(RVA = "0xBFB39C", Offset = "0xBFB39C", VA = "0xBFB39C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000063")]
		public static float maxValue
		{
			[Token(Token = "0x60008AC")]
			[Address(RVA = "0xBFB448", Offset = "0xBFB448", VA = "0xBFB448")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000064")]
		public static float minValue
		{
			[Token(Token = "0x60008AD")]
			[Address(RVA = "0xBFB52C", Offset = "0xBFB52C", VA = "0xBFB52C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x60008AE")]
		[Address(RVA = "0xBFB5A8", Offset = "0xBFB5A8", VA = "0xBFB5A8")]
		public static void Init(float minNegativeValue, float maxPositiveValue, int deciminals = 1)
		{
		}

		[Token(Token = "0x60008AF")]
		[Address(RVA = "0xBFB95C", Offset = "0xBFB95C", VA = "0xBFB95C")]
		public static string ToStringNonAlloc(this float value)
		{
			return null;
		}

		[Token(Token = "0x60008B0")]
		[Address(RVA = "0xBFBAC8", Offset = "0xBFBAC8", VA = "0xBFBAC8")]
		public static string ToStringNonAlloc(this float value, string format)
		{
			return null;
		}

		[Token(Token = "0x60008B1")]
		[Address(RVA = "0xBFB8C4", Offset = "0xBFB8C4", VA = "0xBFB8C4")]
		private static int Pow(int f, int p)
		{
			return default(int);
		}

		[Token(Token = "0x60008B2")]
		[Address(RVA = "0xBFB8E0", Offset = "0xBFB8E0", VA = "0xBFB8E0")]
		private static int ToIndex(this float f)
		{
			return default(int);
		}

		[Token(Token = "0x60008B3")]
		[Address(RVA = "0xBFB4BC", Offset = "0xBFB4BC", VA = "0xBFB4BC")]
		private static float FromIndex(this int i)
		{
			return default(float);
		}

		[Token(Token = "0x60008B4")]
		[Address(RVA = "0xBFBC4C", Offset = "0xBFBC4C", VA = "0xBFBC4C")]
		public static int ToInt(this float f)
		{
			return default(int);
		}

		[Token(Token = "0x60008B5")]
		[Address(RVA = "0xBFBC54", Offset = "0xBFBC54", VA = "0xBFBC54")]
		public static float ToFloat(this int i)
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000176")]
	public class Singleton<T> : MonoBehaviour where T : MonoBehaviour
	{
		[Token(Token = "0x4000AF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static T _instance;

		[Token(Token = "0x4000AF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static object _lock;

		[Token(Token = "0x4000AF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool _applicationIsQuitting;

		[Token(Token = "0x17000065")]
		public static T Instance
		{
			[Token(Token = "0x60008B7")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60008B8")]
		private void Awake()
		{
		}

		[Token(Token = "0x60008B9")]
		public void OnDestroy()
		{
		}

		[Token(Token = "0x60008BA")]
		public Singleton()
		{
		}
	}
}
namespace Tayx.Graphy.UI
{
	[Token(Token = "0x2000177")]
	public interface IModifiableState
	{
		[Token(Token = "0x60008BC")]
		void SetState(GraphyManager.ModuleState newState);
	}
	[Token(Token = "0x2000178")]
	public interface IMovable
	{
		[Token(Token = "0x60008BD")]
		void SetPosition(GraphyManager.ModulePosition newModulePosition);
	}
}
namespace Tayx.Graphy.Ram
{
	[Token(Token = "0x2000179")]
	public class RamGraph : Tayx.Graphy.Graph.Graph
	{
		[Token(Token = "0x4000AFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private GraphyManager m_graphyManager;

		[Token(Token = "0x4000AFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private RamMonitor m_ramMonitor;

		[Token(Token = "0x4000AFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Image m_imageAllocated;

		[Token(Token = "0x4000AFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Image m_imageReserved;

		[Token(Token = "0x4000AFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Image m_imageMono;

		[Token(Token = "0x4000AFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int m_resolution;

		[Token(Token = "0x4000B00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private ShaderGraph m_shaderGraphAllocated;

		[Token(Token = "0x4000B01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private ShaderGraph m_shaderGraphReserved;

		[Token(Token = "0x4000B02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private ShaderGraph m_shaderGraphMono;

		[Token(Token = "0x4000B03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Shader ShaderFull;

		[Token(Token = "0x4000B04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Shader ShaderLight;

		[Token(Token = "0x4000B05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float[] m_allocatedArray;

		[Token(Token = "0x4000B06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float[] m_reservedArray;

		[Token(Token = "0x4000B07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float[] m_monoArray;

		[Token(Token = "0x4000B08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float m_highestMemory;

		[Token(Token = "0x60008BE")]
		[Address(RVA = "0x11F30B4", Offset = "0x11F30B4", VA = "0x11F30B4")]
		private void Awake()
		{
		}

		[Token(Token = "0x60008BF")]
		[Address(RVA = "0x11F322C", Offset = "0x11F322C", VA = "0x11F322C")]
		private void Update()
		{
		}

		[Token(Token = "0x60008C0")]
		[Address(RVA = "0x11F3238", Offset = "0x11F3238", VA = "0x11F3238")]
		public void UpdateParameters()
		{
		}

		[Token(Token = "0x60008C1")]
		[Address(RVA = "0x11F34CC", Offset = "0x11F34CC", VA = "0x11F34CC", Slot = "4")]
		protected override void UpdateGraph()
		{
		}

		[Token(Token = "0x60008C2")]
		[Address(RVA = "0x11F3770", Offset = "0x11F3770", VA = "0x11F3770", Slot = "5")]
		protected override void CreatePoints()
		{
		}

		[Token(Token = "0x60008C3")]
		[Address(RVA = "0x11F30B8", Offset = "0x11F30B8", VA = "0x11F30B8")]
		private void Init()
		{
		}

		[Token(Token = "0x60008C4")]
		[Address(RVA = "0x11F3B14", Offset = "0x11F3B14", VA = "0x11F3B14")]
		public RamGraph()
		{
		}
	}
	[Token(Token = "0x200017A")]
	public class RamManager : MonoBehaviour, IMovable, IModifiableState
	{
		[Token(Token = "0x4000B09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private GraphyManager m_graphyManager;

		[Token(Token = "0x4000B0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private RamGraph m_ramGraph;

		[Token(Token = "0x4000B0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private RamText m_ramText;

		[Token(Token = "0x4000B0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private RectTransform m_rectTransform;

		[Token(Token = "0x4000B0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private GameObject m_ramGraphGameObject;

		[Token(Token = "0x4000B0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<GameObject> m_childrenGameObjects;

		[Token(Token = "0x4000B0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private List<Image> m_backgroundImages;

		[Token(Token = "0x4000B10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private GraphyManager.ModuleState m_previousModuleState;

		[Token(Token = "0x4000B11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private GraphyManager.ModuleState m_currentModuleState;

		[Token(Token = "0x60008C5")]
		[Address(RVA = "0x11F3B24", Offset = "0x11F3B24", VA = "0x11F3B24")]
		private void Awake()
		{
		}

		[Token(Token = "0x60008C6")]
		[Address(RVA = "0x11F3F58", Offset = "0x11F3F58", VA = "0x11F3F58")]
		private void Start()
		{
		}

		[Token(Token = "0x60008C7")]
		[Address(RVA = "0x11F40C0", Offset = "0x11F40C0", VA = "0x11F40C0", Slot = "4")]
		public void SetPosition(GraphyManager.ModulePosition newModulePosition)
		{
		}

		[Token(Token = "0x60008C8")]
		[Address(RVA = "0x11F4274", Offset = "0x11F4274", VA = "0x11F4274", Slot = "5")]
		public void SetState(GraphyManager.ModuleState state)
		{
		}

		[Token(Token = "0x60008C9")]
		[Address(RVA = "0x11F442C", Offset = "0x11F442C", VA = "0x11F442C")]
		public void RestorePreviousState()
		{
		}

		[Token(Token = "0x60008CA")]
		[Address(RVA = "0x11F3F5C", Offset = "0x11F3F5C", VA = "0x11F3F5C")]
		public void UpdateParameters()
		{
		}

		[Token(Token = "0x60008CB")]
		[Address(RVA = "0x11F3B28", Offset = "0x11F3B28", VA = "0x11F3B28")]
		private void Init()
		{
		}

		[Token(Token = "0x60008CC")]
		[Address(RVA = "0x11F43E4", Offset = "0x11F43E4", VA = "0x11F43E4")]
		private void SetGraphActive(bool active)
		{
		}

		[Token(Token = "0x60008CD")]
		[Address(RVA = "0x11F44E0", Offset = "0x11F44E0", VA = "0x11F44E0")]
		public RamManager()
		{
		}
	}
	[Token(Token = "0x200017B")]
	public class RamMonitor : MonoBehaviour
	{
		[Token(Token = "0x4000B12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float m_allocatedRam;

		[Token(Token = "0x4000B13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float m_reservedRam;

		[Token(Token = "0x4000B14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float m_monoRam;

		[Token(Token = "0x17000066")]
		public float AllocatedRam
		{
			[Token(Token = "0x60008CE")]
			[Address(RVA = "0x11F45B0", Offset = "0x11F45B0", VA = "0x11F45B0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000067")]
		public float ReservedRam
		{
			[Token(Token = "0x60008CF")]
			[Address(RVA = "0x11F45B8", Offset = "0x11F45B8", VA = "0x11F45B8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000068")]
		public float MonoRam
		{
			[Token(Token = "0x60008D0")]
			[Address(RVA = "0x11F45C0", Offset = "0x11F45C0", VA = "0x11F45C0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x60008D1")]
		[Address(RVA = "0x11F45C8", Offset = "0x11F45C8", VA = "0x11F45C8")]
		private void Update()
		{
		}

		[Token(Token = "0x60008D2")]
		[Address(RVA = "0x11F4630", Offset = "0x11F4630", VA = "0x11F4630")]
		public RamMonitor()
		{
		}
	}
	[Token(Token = "0x200017C")]
	public class RamText : MonoBehaviour
	{
		[Token(Token = "0x4000B15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private GraphyManager m_graphyManager;

		[Token(Token = "0x4000B16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private RamMonitor m_ramMonitor;

		[Token(Token = "0x4000B17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Text m_allocatedSystemMemorySizeText;

		[Token(Token = "0x4000B18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Text m_reservedSystemMemorySizeText;

		[Token(Token = "0x4000B19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Text m_monoSystemMemorySizeText;

		[Token(Token = "0x4000B1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float m_updateRate;

		[Token(Token = "0x4000B1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float m_deltaTime;

		[Token(Token = "0x4000B1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly string m_memoryStringFormat;

		[Token(Token = "0x60008D3")]
		[Address(RVA = "0x11F4638", Offset = "0x11F4638", VA = "0x11F4638")]
		private void Awake()
		{
		}

		[Token(Token = "0x60008D4")]
		[Address(RVA = "0x11F47B8", Offset = "0x11F47B8", VA = "0x11F47B8")]
		private void Update()
		{
		}

		[Token(Token = "0x60008D5")]
		[Address(RVA = "0x11F4434", Offset = "0x11F4434", VA = "0x11F4434")]
		public void UpdateParameters()
		{
		}

		[Token(Token = "0x60008D6")]
		[Address(RVA = "0x11F463C", Offset = "0x11F463C", VA = "0x11F463C")]
		private void Init()
		{
		}

		[Token(Token = "0x60008D7")]
		[Address(RVA = "0x11F490C", Offset = "0x11F490C", VA = "0x11F490C")]
		public RamText()
		{
		}
	}
}
namespace Tayx.Graphy.Graph
{
	[Token(Token = "0x200017D")]
	public abstract class Graph : MonoBehaviour
	{
		[Token(Token = "0x60008D8")]
		protected abstract void UpdateGraph();

		[Token(Token = "0x60008D9")]
		protected abstract void CreatePoints();

		[Token(Token = "0x60008DA")]
		[Address(RVA = "0x13F98A8", Offset = "0x13F98A8", VA = "0x13F98A8")]
		protected Graph()
		{
		}
	}
}
namespace Tayx.Graphy.Fps
{
	[Token(Token = "0x200017E")]
	public class FpsGraph : Tayx.Graphy.Graph.Graph
	{
		[Token(Token = "0x4000B1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private GraphyManager m_graphyManager;

		[Token(Token = "0x4000B1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private FpsMonitor m_fpsMonitor;

		[Token(Token = "0x4000B1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Image m_imageGraph;

		[Token(Token = "0x4000B20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int m_resolution;

		[Token(Token = "0x4000B21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private ShaderGraph m_shaderGraph;

		[Token(Token = "0x4000B22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Shader ShaderFull;

		[Token(Token = "0x4000B23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader ShaderLight;

		[Token(Token = "0x4000B24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int[] m_fpsArray;

		[Token(Token = "0x4000B25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int m_highestFps;

		[Token(Token = "0x60008DB")]
		[Address(RVA = "0xBFC5C0", Offset = "0xBFC5C0", VA = "0xBFC5C0")]
		private void Awake()
		{
		}

		[Token(Token = "0x60008DC")]
		[Address(RVA = "0xBFC6C0", Offset = "0xBFC6C0", VA = "0xBFC6C0")]
		private void Update()
		{
		}

		[Token(Token = "0x60008DD")]
		[Address(RVA = "0xBFC6CC", Offset = "0xBFC6CC", VA = "0xBFC6CC")]
		public void UpdateParameters()
		{
		}

		[Token(Token = "0x60008DE")]
		[Address(RVA = "0xBFC7F0", Offset = "0xBFC7F0", VA = "0xBFC7F0", Slot = "4")]
		protected override void UpdateGraph()
		{
		}

		[Token(Token = "0x60008DF")]
		[Address(RVA = "0xBFC9FC", Offset = "0xBFC9FC", VA = "0xBFC9FC", Slot = "5")]
		protected override void CreatePoints()
		{
		}

		[Token(Token = "0x60008E0")]
		[Address(RVA = "0xBFC5C4", Offset = "0xBFC5C4", VA = "0xBFC5C4")]
		private void Init()
		{
		}

		[Token(Token = "0x60008E1")]
		[Address(RVA = "0xBFCB4C", Offset = "0xBFCB4C", VA = "0xBFCB4C")]
		public FpsGraph()
		{
		}
	}
	[Token(Token = "0x200017F")]
	public class FpsManager : MonoBehaviour, IMovable, IModifiableState
	{
		[Token(Token = "0x4000B26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private GraphyManager m_graphyManager;

		[Token(Token = "0x4000B27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private FpsGraph m_fpsGraph;

		[Token(Token = "0x4000B28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private FpsMonitor m_fpsMonitor;

		[Token(Token = "0x4000B29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private FpsText m_fpsText;

		[Token(Token = "0x4000B2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private RectTransform m_rectTransform;

		[Token(Token = "0x4000B2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private GameObject m_fpsGraphGameObject;

		[Token(Token = "0x4000B2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private List<GameObject> m_nonBasicTextGameObjects;

		[Token(Token = "0x4000B2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private List<Image> m_backgroundImages;

		[Token(Token = "0x4000B2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private List<GameObject> m_childrenGameObjects;

		[Token(Token = "0x4000B2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GraphyManager.ModuleState m_previousModuleState;

		[Token(Token = "0x4000B30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private GraphyManager.ModuleState m_currentModuleState;

		[Token(Token = "0x60008E2")]
		[Address(RVA = "0xBFCB5C", Offset = "0xBFCB5C", VA = "0xBFCB5C")]
		private void Awake()
		{
		}

		[Token(Token = "0x60008E3")]
		[Address(RVA = "0xBFCFC0", Offset = "0xBFCFC0", VA = "0xBFCFC0")]
		private void Start()
		{
		}

		[Token(Token = "0x60008E4")]
		[Address(RVA = "0xBFD15C", Offset = "0xBFD15C", VA = "0xBFD15C", Slot = "4")]
		public void SetPosition(GraphyManager.ModulePosition newModulePosition)
		{
		}

		[Token(Token = "0x60008E5")]
		[Address(RVA = "0xBFD310", Offset = "0xBFD310", VA = "0xBFD310", Slot = "5")]
		public void SetState(GraphyManager.ModuleState state)
		{
		}

		[Token(Token = "0x60008E6")]
		[Address(RVA = "0xBFD530", Offset = "0xBFD530", VA = "0xBFD530")]
		public void RestorePreviousState()
		{
		}

		[Token(Token = "0x60008E7")]
		[Address(RVA = "0xBFCFC4", Offset = "0xBFCFC4", VA = "0xBFCFC4")]
		public void UpdateParameters()
		{
		}

		[Token(Token = "0x60008E8")]
		[Address(RVA = "0xBFCB60", Offset = "0xBFCB60", VA = "0xBFCB60")]
		private void Init()
		{
		}

		[Token(Token = "0x60008E9")]
		[Address(RVA = "0xBFD4E8", Offset = "0xBFD4E8", VA = "0xBFD4E8")]
		private void SetGraphActive(bool active)
		{
		}

		[Token(Token = "0x60008EA")]
		[Address(RVA = "0xBFD578", Offset = "0xBFD578", VA = "0xBFD578")]
		public FpsManager()
		{
		}
	}
	[Token(Token = "0x2000180")]
	public class FpsMonitor : MonoBehaviour
	{
		[Token(Token = "0x4000B31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private GraphyManager m_graphyManager;

		[Token(Token = "0x4000B32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float m_currentFps;

		[Token(Token = "0x4000B33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float m_avgFps;

		[Token(Token = "0x4000B34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float m_minFps;

		[Token(Token = "0x4000B35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float m_maxFps;

		[Token(Token = "0x4000B36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private int m_averageSamples;

		[Token(Token = "0x4000B37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<float> m_averageFpsSamples;

		[Token(Token = "0x4000B38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int m_timeToResetMinMaxFps;

		[Token(Token = "0x4000B39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float m_timeToResetMinFpsPassed;

		[Token(Token = "0x4000B3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float m_timeToResetMaxFpsPassed;

		[Token(Token = "0x4000B3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float unscaledDeltaTime;

		[Token(Token = "0x17000069")]
		public float CurrentFPS
		{
			[Token(Token = "0x60008EB")]
			[Address(RVA = "0xBFD674", Offset = "0xBFD674", VA = "0xBFD674")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700006A")]
		public float AverageFPS
		{
			[Token(Token = "0x60008EC")]
			[Address(RVA = "0xBFD67C", Offset = "0xBFD67C", VA = "0xBFD67C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700006B")]
		public float MinFPS
		{
			[Token(Token = "0x60008ED")]
			[Address(RVA = "0xBFD684", Offset = "0xBFD684", VA = "0xBFD684")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700006C")]
		public float MaxFPS
		{
			[Token(Token = "0x60008EE")]
			[Address(RVA = "0xBFD68C", Offset = "0xBFD68C", VA = "0xBFD68C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x60008EF")]
		[Address(RVA = "0xBFD694", Offset = "0xBFD694", VA = "0xBFD694")]
		private void Awake()
		{
		}

		[Token(Token = "0x60008F0")]
		[Address(RVA = "0xBFD77C", Offset = "0xBFD77C", VA = "0xBFD77C")]
		private void Update()
		{
		}

		[Token(Token = "0x60008F1")]
		[Address(RVA = "0xBFD538", Offset = "0xBFD538", VA = "0xBFD538")]
		public void UpdateParameters()
		{
		}

		[Token(Token = "0x60008F2")]
		[Address(RVA = "0xBFD698", Offset = "0xBFD698", VA = "0xBFD698")]
		private void Init()
		{
		}

		[Token(Token = "0x60008F3")]
		[Address(RVA = "0xBFD944", Offset = "0xBFD944", VA = "0xBFD944")]
		public FpsMonitor()
		{
		}
	}
	[Token(Token = "0x2000181")]
	public class FpsText : MonoBehaviour
	{
		[Token(Token = "0x4000B3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private GraphyManager m_graphyManager;

		[Token(Token = "0x4000B3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private FpsMonitor m_fpsMonitor;

		[Token(Token = "0x4000B3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Text m_fpsText;

		[Token(Token = "0x4000B3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Text m_msText;

		[Token(Token = "0x4000B40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Text m_avgFpsText;

		[Token(Token = "0x4000B41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Text m_minFpsText;

		[Token(Token = "0x4000B42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private Text m_maxFpsText;

		[Token(Token = "0x4000B43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int m_updateRate;

		[Token(Token = "0x4000B44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private int m_frameCount;

		[Token(Token = "0x4000B45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float m_deltaTime;

		[Token(Token = "0x4000B46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float m_fps;

		[Token(Token = "0x4000B47")]
		private const string m_msStringFormat = "0.0";

		[Token(Token = "0x60008F4")]
		[Address(RVA = "0xBFD964", Offset = "0xBFD964", VA = "0xBFD964")]
		private void Awake()
		{
		}

		[Token(Token = "0x60008F5")]
		[Address(RVA = "0xBFDAE4", Offset = "0xBFDAE4", VA = "0xBFDAE4")]
		private void Update()
		{
		}

		[Token(Token = "0x60008F6")]
		[Address(RVA = "0xBFD558", Offset = "0xBFD558", VA = "0xBFD558")]
		public void UpdateParameters()
		{
		}

		[Token(Token = "0x60008F7")]
		[Address(RVA = "0xBFDD3C", Offset = "0xBFDD3C", VA = "0xBFDD3C")]
		private void SetFpsRelatedTextColor(Text text, float fps)
		{
		}

		[Token(Token = "0x60008F8")]
		[Address(RVA = "0xBFD968", Offset = "0xBFD968", VA = "0xBFD968")]
		private void Init()
		{
		}

		[Token(Token = "0x60008F9")]
		[Address(RVA = "0xBFDDBC", Offset = "0xBFDDBC", VA = "0xBFDDBC")]
		public FpsText()
		{
		}
	}
}
namespace Tayx.Graphy.Audio
{
	[Token(Token = "0x2000182")]
	public class AudioGraph : Tayx.Graphy.Graph.Graph
	{
		[Token(Token = "0x4000B48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private GraphyManager m_graphyManager;

		[Token(Token = "0x4000B49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private AudioMonitor m_audioMonitor;

		[Token(Token = "0x4000B4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Image m_imageGraph;

		[Token(Token = "0x4000B4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Image m_imageGraphHighestValues;

		[Token(Token = "0x4000B4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int m_resolution;

		[Token(Token = "0x4000B4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private ShaderGraph m_shaderGraph;

		[Token(Token = "0x4000B4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private ShaderGraph m_shaderGraphHighestValues;

		[Token(Token = "0x4000B4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Shader ShaderFull;

		[Token(Token = "0x4000B50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Shader ShaderLight;

		[Token(Token = "0x4000B51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float[] m_graphArray;

		[Token(Token = "0x4000B52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float[] m_graphArrayHighestValue;

		[Token(Token = "0x60008FA")]
		[Address(RVA = "0xC10574", Offset = "0xC10574", VA = "0xC10574")]
		private void Awake()
		{
		}

		[Token(Token = "0x60008FB")]
		[Address(RVA = "0xC106B8", Offset = "0xC106B8", VA = "0xC106B8")]
		private void Update()
		{
		}

		[Token(Token = "0x60008FC")]
		[Address(RVA = "0xC1076C", Offset = "0xC1076C", VA = "0xC1076C")]
		public void UpdateParameters()
		{
		}

		[Token(Token = "0x60008FD")]
		[Address(RVA = "0xC10950", Offset = "0xC10950", VA = "0xC10950", Slot = "4")]
		protected override void UpdateGraph()
		{
		}

		[Token(Token = "0x60008FE")]
		[Address(RVA = "0xC10ED0", Offset = "0xC10ED0", VA = "0xC10ED0", Slot = "5")]
		protected override void CreatePoints()
		{
		}

		[Token(Token = "0x60008FF")]
		[Address(RVA = "0xC10578", Offset = "0xC10578", VA = "0xC10578")]
		private void Init()
		{
		}

		[Token(Token = "0x6000900")]
		[Address(RVA = "0xC11180", Offset = "0xC11180", VA = "0xC11180")]
		public AudioGraph()
		{
		}
	}
	[Token(Token = "0x2000183")]
	public class AudioManager : MonoBehaviour, IMovable, IModifiableState
	{
		[Token(Token = "0x4000B53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private GraphyManager m_graphyManager;

		[Token(Token = "0x4000B54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private AudioGraph m_audioGraph;

		[Token(Token = "0x4000B55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private AudioMonitor m_audioMonitor;

		[Token(Token = "0x4000B56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AudioText m_audioText;

		[Token(Token = "0x4000B57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private RectTransform m_rectTransform;

		[Token(Token = "0x4000B58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private GameObject m_audioGraphGameObject;

		[Token(Token = "0x4000B59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private Text m_audioDbText;

		[Token(Token = "0x4000B5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private List<GameObject> m_childrenGameObjects;

		[Token(Token = "0x4000B5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private List<Image> m_backgroundImages;

		[Token(Token = "0x4000B5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GraphyManager.ModuleState m_previousModuleState;

		[Token(Token = "0x4000B5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private GraphyManager.ModuleState m_currentModuleState;

		[Token(Token = "0x6000901")]
		[Address(RVA = "0xC113D0", Offset = "0xC113D0", VA = "0xC113D0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000902")]
		[Address(RVA = "0xC11834", Offset = "0xC11834", VA = "0xC11834")]
		private void Start()
		{
		}

		[Token(Token = "0x6000903")]
		[Address(RVA = "0xC119C4", Offset = "0xC119C4", VA = "0xC119C4", Slot = "4")]
		public void SetPosition(GraphyManager.ModulePosition newModulePosition)
		{
		}

		[Token(Token = "0x6000904")]
		[Address(RVA = "0xC11BA4", Offset = "0xC11BA4", VA = "0xC11BA4", Slot = "5")]
		public void SetState(GraphyManager.ModuleState state)
		{
		}

		[Token(Token = "0x6000905")]
		[Address(RVA = "0xC11D5C", Offset = "0xC11D5C", VA = "0xC11D5C")]
		public void RestorePreviousState()
		{
		}

		[Token(Token = "0x6000906")]
		[Address(RVA = "0xC11838", Offset = "0xC11838", VA = "0xC11838")]
		public void UpdateParameters()
		{
		}

		[Token(Token = "0x6000907")]
		[Address(RVA = "0xC113D4", Offset = "0xC113D4", VA = "0xC113D4")]
		private void Init()
		{
		}

		[Token(Token = "0x6000908")]
		[Address(RVA = "0xC11D14", Offset = "0xC11D14", VA = "0xC11D14")]
		private void SetGraphActive(bool active)
		{
		}

		[Token(Token = "0x6000909")]
		[Address(RVA = "0xC11E78", Offset = "0xC11E78", VA = "0xC11E78")]
		public AudioManager()
		{
		}
	}
	[Token(Token = "0x2000184")]
	public class AudioMonitor : MonoBehaviour
	{
		[Token(Token = "0x4000B5E")]
		private const float m_refValue = 1f;

		[Token(Token = "0x4000B5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private GraphyManager m_graphyManager;

		[Token(Token = "0x4000B60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private AudioListener m_audioListener;

		[Token(Token = "0x4000B61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GraphyManager.LookForAudioListener m_findAudioListenerInCameraIfNull;

		[Token(Token = "0x4000B62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private FFTWindow m_FFTWindow;

		[Token(Token = "0x4000B63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int m_spectrumSize;

		[Token(Token = "0x4000B64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float[] m_spectrum;

		[Token(Token = "0x4000B65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float[] m_spectrumHighestValues;

		[Token(Token = "0x4000B66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float m_maxDB;

		[Token(Token = "0x1700006D")]
		public float[] Spectrum
		{
			[Token(Token = "0x600090A")]
			[Address(RVA = "0xC11F48", Offset = "0xC11F48", VA = "0xC11F48")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700006E")]
		public float[] SpectrumHighestValues
		{
			[Token(Token = "0x600090B")]
			[Address(RVA = "0xC11F50", Offset = "0xC11F50", VA = "0xC11F50")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700006F")]
		public float MaxDB
		{
			[Token(Token = "0x600090C")]
			[Address(RVA = "0xC11F58", Offset = "0xC11F58", VA = "0xC11F58")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000070")]
		public bool SpectrumDataAvailable
		{
			[Token(Token = "0x600090D")]
			[Address(RVA = "0xC10700", Offset = "0xC10700", VA = "0xC10700")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600090E")]
		[Address(RVA = "0xC11F60", Offset = "0xC11F60", VA = "0xC11F60")]
		private void Awake()
		{
		}

		[Token(Token = "0x600090F")]
		[Address(RVA = "0xC12074", Offset = "0xC12074", VA = "0xC12074")]
		private void Update()
		{
		}

		[Token(Token = "0x6000910")]
		[Address(RVA = "0xC11D64", Offset = "0xC11D64", VA = "0xC11D64")]
		public void UpdateParameters()
		{
		}

		[Token(Token = "0x6000911")]
		[Address(RVA = "0xC10E90", Offset = "0xC10E90", VA = "0xC10E90")]
		public float lin2dB(float linear)
		{
			return default(float);
		}

		[Token(Token = "0x6000912")]
		[Address(RVA = "0xC10EBC", Offset = "0xC10EBC", VA = "0xC10EBC")]
		public float dBNormalized(float db)
		{
			return default(float);
		}

		[Token(Token = "0x6000913")]
		[Address(RVA = "0xC1227C", Offset = "0xC1227C", VA = "0xC1227C")]
		private void FindAudioListener()
		{
		}

		[Token(Token = "0x6000914")]
		[Address(RVA = "0xC11F64", Offset = "0xC11F64", VA = "0xC11F64")]
		private void Init()
		{
		}

		[Token(Token = "0x6000915")]
		[Address(RVA = "0xC12280", Offset = "0xC12280", VA = "0xC12280")]
		public AudioMonitor()
		{
		}

		[Token(Token = "0x6000916")]
		[Address(RVA = "0xC1229C", Offset = "0xC1229C", VA = "0xC1229C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D8870", Offset = "0x5D8870")]
		private void <Init>b__23_0(Scene scene, LoadSceneMode loadMode)
		{
		}
	}
	[Token(Token = "0x2000185")]
	public class AudioText : MonoBehaviour
	{
		[Token(Token = "0x4000B67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private GraphyManager m_graphyManager;

		[Token(Token = "0x4000B68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private AudioMonitor m_audioMonitor;

		[Token(Token = "0x4000B69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Text m_DBText;

		[Token(Token = "0x4000B6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int m_updateRate;

		[Token(Token = "0x4000B6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float m_deltaTimeOffset;

		[Token(Token = "0x6000917")]
		[Address(RVA = "0xC122A0", Offset = "0xC122A0", VA = "0xC122A0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000918")]
		[Address(RVA = "0xC12430", Offset = "0xC12430", VA = "0xC12430")]
		private void Update()
		{
		}

		[Token(Token = "0x6000919")]
		[Address(RVA = "0xC11E58", Offset = "0xC11E58", VA = "0xC11E58")]
		public void UpdateParameters()
		{
		}

		[Token(Token = "0x600091A")]
		[Address(RVA = "0xC122A4", Offset = "0xC122A4", VA = "0xC122A4")]
		private void Init()
		{
		}

		[Token(Token = "0x600091B")]
		[Address(RVA = "0xC12530", Offset = "0xC12530", VA = "0xC12530")]
		public AudioText()
		{
		}
	}
}
namespace Tayx.Graphy.Advanced
{
	[Token(Token = "0x2000186")]
	public class AdvancedData : MonoBehaviour, IMovable, IModifiableState
	{
		[Token(Token = "0x4000B6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private GraphyManager m_graphyManager;

		[Token(Token = "0x4000B6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private RectTransform m_rectTransform;

		[Token(Token = "0x4000B6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private List<Image> m_backgroundImages;

		[Token(Token = "0x4000B6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Text m_graphicsDeviceVersionText;

		[Token(Token = "0x4000B70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Text m_processorTypeText;

		[Token(Token = "0x4000B71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Text m_operatingSystemText;

		[Token(Token = "0x4000B72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private Text m_systemMemoryText;

		[Token(Token = "0x4000B73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private Text m_graphicsDeviceNameText;

		[Token(Token = "0x4000B74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private Text m_graphicsMemorySizeText;

		[Token(Token = "0x4000B75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private Text m_screenResolutionText;

		[Token(Token = "0x4000B76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private Text m_gameWindowResolutionText;

		[Token(Token = "0x4000B77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D0534", Offset = "0x5D0534")]
		[SerializeField]
		private float m_updateRate;

		[Token(Token = "0x4000B78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float m_deltaTime;

		[Token(Token = "0x4000B79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private StringBuilder m_sb;

		[Token(Token = "0x4000B7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private GraphyManager.ModuleState m_previousModuleState;

		[Token(Token = "0x4000B7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private GraphyManager.ModuleState m_currentModuleState;

		[Token(Token = "0x4000B7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private readonly string[] m_windowStrings;

		[Token(Token = "0x600091C")]
		[Address(RVA = "0xC07620", Offset = "0xC07620", VA = "0xC07620")]
		private void Awake()
		{
		}

		[Token(Token = "0x600091D")]
		[Address(RVA = "0xC0849C", Offset = "0xC0849C", VA = "0xC0849C")]
		private void Update()
		{
		}

		[Token(Token = "0x600091E")]
		[Address(RVA = "0xC08770", Offset = "0xC08770", VA = "0xC08770", Slot = "4")]
		public void SetPosition(GraphyManager.ModulePosition newModulePosition)
		{
		}

		[Token(Token = "0x600091F")]
		[Address(RVA = "0xC08C5C", Offset = "0xC08C5C", VA = "0xC08C5C", Slot = "5")]
		public void SetState(GraphyManager.ModuleState state)
		{
		}

		[Token(Token = "0x6000920")]
		[Address(RVA = "0xC08CD0", Offset = "0xC08CD0", VA = "0xC08CD0")]
		public void RestorePreviousState()
		{
		}

		[Token(Token = "0x6000921")]
		[Address(RVA = "0xC08CD8", Offset = "0xC08CD8", VA = "0xC08CD8")]
		public void UpdateParameters()
		{
		}

		[Token(Token = "0x6000922")]
		[Address(RVA = "0xC07624", Offset = "0xC07624", VA = "0xC07624")]
		private void Init()
		{
		}

		[Token(Token = "0x6000923")]
		[Address(RVA = "0xC08E38", Offset = "0xC08E38", VA = "0xC08E38")]
		public AdvancedData()
		{
		}
	}
}
namespace Tayx.Graphy.CustomizationScene
{
	[Token(Token = "0x2000187")]
	public class CUIColorPicker : MonoBehaviour
	{
		[Token(Token = "0x20003D0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDE7C", Offset = "0x5CDE7C")]
		private sealed class <>c__DisplayClass13_0
		{
			[Token(Token = "0x40019A6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Texture2D satvalTex;

			[Token(Token = "0x40019A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Color[] satvalColors;

			[Token(Token = "0x40019A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float Hue;

			[Token(Token = "0x40019A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Color[] hueColors;

			[Token(Token = "0x40019AA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Action resetSatValTexture;

			[Token(Token = "0x40019AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public float Saturation;

			[Token(Token = "0x40019AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public float Value;

			[Token(Token = "0x40019AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public GameObject result;

			[Token(Token = "0x40019AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public CUIColorPicker <>4__this;

			[Token(Token = "0x40019AF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public GameObject hueGO;

			[Token(Token = "0x40019B0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public Action dragH;

			[Token(Token = "0x40019B1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public GameObject satvalGO;

			[Token(Token = "0x40019B2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public Action dragSV;

			[Token(Token = "0x40019B3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			public Vector2 hueSz;

			[Token(Token = "0x40019B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			public Action applyHue;

			[Token(Token = "0x40019B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			public Action applySaturationValue;

			[Token(Token = "0x40019B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			public GameObject hueKnob;

			[Token(Token = "0x40019B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			public Action idle;

			[Token(Token = "0x40019B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			public Vector2 satvalSz;

			[Token(Token = "0x40019B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			public GameObject satvalKnob;

			[Token(Token = "0x6001A22")]
			[Address(RVA = "0x7E4C7C", Offset = "0x7E4C7C", VA = "0x7E4C7C")]
			public <>c__DisplayClass13_0()
			{
			}

			[Token(Token = "0x6001A23")]
			[Address(RVA = "0x7E4C84", Offset = "0x7E4C84", VA = "0x7E4C84")]
			internal void <Setup>b__0()
			{
			}

			[Token(Token = "0x6001A24")]
			[Address(RVA = "0x7E4D24", Offset = "0x7E4D24", VA = "0x7E4D24")]
			internal void <Setup>b__1()
			{
			}

			[Token(Token = "0x6001A25")]
			[Address(RVA = "0x7E4E14", Offset = "0x7E4E14", VA = "0x7E4E14")]
			internal void <Setup>b__2()
			{
			}

			[Token(Token = "0x6001A26")]
			[Address(RVA = "0x7E50EC", Offset = "0x7E50EC", VA = "0x7E50EC")]
			internal void <Setup>b__3()
			{
			}

			[Token(Token = "0x6001A27")]
			[Address(RVA = "0x7E516C", Offset = "0x7E516C", VA = "0x7E516C")]
			internal void <Setup>b__4()
			{
			}

			[Token(Token = "0x6001A28")]
			[Address(RVA = "0x7E5250", Offset = "0x7E5250", VA = "0x7E5250")]
			internal void <Setup>b__5()
			{
			}
		}

		[Token(Token = "0x4000B7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Slider alphaSlider;

		[Token(Token = "0x4000B7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Image alphaSliderBGImage;

		[Token(Token = "0x4000B7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Color _color;

		[Token(Token = "0x4000B80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Action<Color> _onValueChange;

		[Token(Token = "0x4000B81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Action _update;

		[Token(Token = "0x17000071")]
		public Color Color
		{
			[Token(Token = "0x6000924")]
			[Address(RVA = "0x10A38F8", Offset = "0x10A38F8", VA = "0x10A38F8")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6000925")]
			[Address(RVA = "0x10A3904", Offset = "0x10A3904", VA = "0x10A3904")]
			set
			{
			}
		}

		[Token(Token = "0x6000926")]
		[Address(RVA = "0x10A4120", Offset = "0x10A4120", VA = "0x10A4120")]
		public void SetOnValueChangeCallback(Action<Color> onValueChange)
		{
		}

		[Token(Token = "0x6000927")]
		[Address(RVA = "0x10A4128", Offset = "0x10A4128", VA = "0x10A4128")]
		private static void RGBToHSV(Color color, out float h, out float s, out float v)
		{
		}

		[Token(Token = "0x6000928")]
		[Address(RVA = "0x10A42A4", Offset = "0x10A42A4", VA = "0x10A42A4")]
		private static bool GetLocalMouse(GameObject go, out Vector2 result)
		{
			return default(bool);
		}

		[Token(Token = "0x6000929")]
		[Address(RVA = "0x10A4454", Offset = "0x10A4454", VA = "0x10A4454")]
		private static Vector2 GetWidgetSize(GameObject go)
		{
			return default(Vector2);
		}

		[Token(Token = "0x600092A")]
		[Address(RVA = "0x10A44EC", Offset = "0x10A44EC", VA = "0x10A44EC")]
		private GameObject GO(string name)
		{
			return null;
		}

		[Token(Token = "0x600092B")]
		[Address(RVA = "0x10A3908", Offset = "0x10A3908", VA = "0x10A3908")]
		private void Setup(Color inputColor)
		{
		}

		[Token(Token = "0x600092C")]
		[Address(RVA = "0x10A452C", Offset = "0x10A452C", VA = "0x10A452C")]
		public void SetRandomColor()
		{
		}

		[Token(Token = "0x600092D")]
		[Address(RVA = "0x10A466C", Offset = "0x10A466C", VA = "0x10A466C")]
		private void Awake()
		{
		}

		[Token(Token = "0x600092E")]
		[Address(RVA = "0x10A46BC", Offset = "0x10A46BC", VA = "0x10A46BC")]
		private void Start()
		{
		}

		[Token(Token = "0x600092F")]
		[Address(RVA = "0x10A4780", Offset = "0x10A4780", VA = "0x10A4780")]
		private void Update()
		{
		}

		[Token(Token = "0x6000930")]
		[Address(RVA = "0x10A479C", Offset = "0x10A479C", VA = "0x10A479C")]
		public CUIColorPicker()
		{
		}

		[Token(Token = "0x6000931")]
		[Address(RVA = "0x10A47F8", Offset = "0x10A47F8", VA = "0x10A47F8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D8880", Offset = "0x5D8880")]
		private void <Start>b__16_0(float value)
		{
		}
	}
	[Token(Token = "0x2000188")]
	public class CustomizeGraphy : MonoBehaviour
	{
		[Token(Token = "0x4000B82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x5D0598", Offset = "0x5D0598")]
		[SerializeField]
		private CUIColorPicker m_colorPicker;

		[Token(Token = "0x4000B83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Toggle m_backgroundToggle;

		[Token(Token = "0x4000B84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Dropdown m_graphyModeDropdown;

		[Token(Token = "0x4000B85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Button m_backgroundColorButton;

		[Token(Token = "0x4000B86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Dropdown m_graphModulePositionDropdown;

		[Token(Token = "0x4000B87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x5D0624", Offset = "0x5D0624")]
		[SerializeField]
		private Dropdown m_fpsModuleStateDropdown;

		[Token(Token = "0x4000B88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private InputField m_goodInputField;

		[Token(Token = "0x4000B89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private InputField m_cautionInputField;

		[Token(Token = "0x4000B8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private Button m_goodColorButton;

		[Token(Token = "0x4000B8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private Button m_cautionColorButton;

		[Token(Token = "0x4000B8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private Button m_criticalColorButton;

		[Token(Token = "0x4000B8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private Slider m_timeToResetMinMaxSlider;

		[Token(Token = "0x4000B8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private Slider m_fpsGraphResolutionSlider;

		[Token(Token = "0x4000B8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private Slider m_fpsTextUpdateRateSlider;

		[Token(Token = "0x4000B90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x5D06F0", Offset = "0x5D06F0")]
		[SerializeField]
		private Dropdown m_ramModuleStateDropdown;

		[Token(Token = "0x4000B91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		private Button m_reservedColorButton;

		[Token(Token = "0x4000B92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		private Button m_allocatedColorButton;

		[Token(Token = "0x4000B93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		private Button m_monoColorButton;

		[Token(Token = "0x4000B94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		private Slider m_ramGraphResolutionSlider;

		[Token(Token = "0x4000B95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		private Slider m_ramTextUpdateRateSlider;

		[Token(Token = "0x4000B96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x5D078C", Offset = "0x5D078C")]
		[SerializeField]
		private Dropdown m_audioModuleStateDropdown;

		[Token(Token = "0x4000B97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		private Button m_audioGraphColorButton;

		[Token(Token = "0x4000B98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		private Dropdown m_findAudioListenerDropdown;

		[Token(Token = "0x4000B99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		private Dropdown m_fttWindowDropdown;

		[Token(Token = "0x4000B9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		private Slider m_spectrumSizeSlider;

		[Token(Token = "0x4000B9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[SerializeField]
		private Slider m_audioGraphResolutionSlider;

		[Token(Token = "0x4000B9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[SerializeField]
		private Slider m_audioTextUpdateRateSlider;

		[Token(Token = "0x4000B9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x5D0838", Offset = "0x5D0838")]
		[SerializeField]
		private Dropdown m_advancedModulePositionDropdown;

		[Token(Token = "0x4000B9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[SerializeField]
		private Toggle m_advancedModuleToggle;

		[Token(Token = "0x4000B9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x5D0894", Offset = "0x5D0894")]
		[SerializeField]
		private Button m_musicButton;

		[Token(Token = "0x4000BA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[SerializeField]
		private Button m_sfxButton;

		[Token(Token = "0x4000BA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[SerializeField]
		private Slider m_musicVolumeSlider;

		[Token(Token = "0x4000BA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[SerializeField]
		private Slider m_sfxVolumeSlider;

		[Token(Token = "0x4000BA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[SerializeField]
		private AudioSource m_musicAudioSource;

		[Token(Token = "0x4000BA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[SerializeField]
		private AudioSource m_sfxAudioSource;

		[Token(Token = "0x4000BA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[SerializeField]
		private List<AudioClip> m_sfxAudioClips;

		[Token(Token = "0x4000BA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private GraphyManager m_graphyManager;

		[Token(Token = "0x6000932")]
		[Address(RVA = "0xCC2B40", Offset = "0xCC2B40", VA = "0xCC2B40")]
		private void Start()
		{
		}

		[Token(Token = "0x6000933")]
		[Address(RVA = "0xCC2BCC", Offset = "0xCC2BCC", VA = "0xCC2BCC")]
		private void SetupCallbacks()
		{
		}

		[Token(Token = "0x6000934")]
		[Address(RVA = "0xCC3738", Offset = "0xCC3738", VA = "0xCC3738")]
		private void ToggleMusic()
		{
		}

		[Token(Token = "0x6000935")]
		[Address(RVA = "0xCC3790", Offset = "0xCC3790", VA = "0xCC3790")]
		private void PlayRandomSFX()
		{
		}

		[Token(Token = "0x6000936")]
		[Address(RVA = "0xCC3858", Offset = "0xCC3858", VA = "0xCC3858")]
		public CustomizeGraphy()
		{
		}

		[Token(Token = "0x6000937")]
		[Address(RVA = "0xCC38DC", Offset = "0xCC38DC", VA = "0xCC38DC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D8890", Offset = "0x5D8890")]
		private void <SetupCallbacks>b__38_0(bool value)
		{
		}

		[Token(Token = "0x6000938")]
		[Address(RVA = "0xCC38FC", Offset = "0xCC38FC", VA = "0xCC38FC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D88A0", Offset = "0x5D88A0")]
		private void <SetupCallbacks>b__38_1()
		{
		}

		[Token(Token = "0x6000939")]
		[Address(RVA = "0xCC3A04", Offset = "0xCC3A04", VA = "0xCC3A04")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D88B0", Offset = "0x5D88B0")]
		private void <SetupCallbacks>b__38_30(Color color)
		{
		}

		[Token(Token = "0x600093A")]
		[Address(RVA = "0xCC3ABC", Offset = "0xCC3ABC", VA = "0xCC3ABC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D88C0", Offset = "0x5D88C0")]
		private void <SetupCallbacks>b__38_2(int value)
		{
		}

		[Token(Token = "0x600093B")]
		[Address(RVA = "0xCC3B5C", Offset = "0xCC3B5C", VA = "0xCC3B5C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D88D0", Offset = "0x5D88D0")]
		private void <SetupCallbacks>b__38_3(int value)
		{
		}

		[Token(Token = "0x600093C")]
		[Address(RVA = "0xCC3B78", Offset = "0xCC3B78", VA = "0xCC3B78")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D88E0", Offset = "0x5D88E0")]
		private void <SetupCallbacks>b__38_4(int value)
		{
		}

		[Token(Token = "0x600093D")]
		[Address(RVA = "0xCC3B94", Offset = "0xCC3B94", VA = "0xCC3B94")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D88F0", Offset = "0x5D88F0")]
		private void <SetupCallbacks>b__38_5(string value)
		{
		}

		[Token(Token = "0x600093E")]
		[Address(RVA = "0xCC3BE4", Offset = "0xCC3BE4", VA = "0xCC3BE4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D8900", Offset = "0x5D8900")]
		private void <SetupCallbacks>b__38_6(string value)
		{
		}

		[Token(Token = "0x600093F")]
		[Address(RVA = "0xCC3C34", Offset = "0xCC3C34", VA = "0xCC3C34")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D8910", Offset = "0x5D8910")]
		private void <SetupCallbacks>b__38_7()
		{
		}

		[Token(Token = "0x6000940")]
		[Address(RVA = "0xCC3D3C", Offset = "0xCC3D3C", VA = "0xCC3D3C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D8920", Offset = "0x5D8920")]
		private void <SetupCallbacks>b__38_31(Color color)
		{
		}

		[Token(Token = "0x6000941")]
		[Address(RVA = "0xCC3DF4", Offset = "0xCC3DF4", VA = "0xCC3DF4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D8930", Offset = "0x5D8930")]
		private void <SetupCallbacks>b__38_8()
		{
		}

		[Token(Token = "0x6000942")]
		[Address(RVA = "0xCC3EFC", Offset = "0xCC3EFC", VA = "0xCC3EFC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D8940", Offset = "0x5D8940")]
		private void <SetupCallbacks>b__38_32(Color color)
		{
		}

		[Token(Token = "0x6000943")]
		[Address(RVA = "0xCC3FB4", Offset = "0xCC3FB4", VA = "0xCC3FB4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D8950", Offset = "0x5D8950")]
		private void <SetupCallbacks>b__38_9()
		{
		}

		[Token(Token = "0x6000944")]
		[Address(RVA = "0xCC40BC", Offset = "0xCC40BC", VA = "0xCC40BC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D8960", Offset = "0x5D8960")]
		private void <SetupCallbacks>b__38_33(Color color)
		{
		}

		[Token(Token = "0x6000945")]
		[Address(RVA = "0xCC4174", Offset = "0xCC4174", VA = "0xCC4174")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D8970", Offset = "0x5D8970")]
		private void <SetupCallbacks>b__38_10(float value)
		{
		}

		[Token(Token = "0x6000946")]
		[Address(RVA = "0xCC4194", Offset = "0xCC4194", VA = "0xCC4194")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D8980", Offset = "0x5D8980")]
		private void <SetupCallbacks>b__38_11(float value)
		{
		}

		[Token(Token = "0x6000947")]
		[Address(RVA = "0xCC41B4", Offset = "0xCC41B4", VA = "0xCC41B4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D8990", Offset = "0x5D8990")]
		private void <SetupCallbacks>b__38_12(float value)
		{
		}

		[Token(Token = "0x6000948")]
		[Address(RVA = "0xCC41D4", Offset = "0xCC41D4", VA = "0xCC41D4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D89A0", Offset = "0x5D89A0")]
		private void <SetupCallbacks>b__38_13(int value)
		{
		}

		[Token(Token = "0x6000949")]
		[Address(RVA = "0xCC41F0", Offset = "0xCC41F0", VA = "0xCC41F0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D89B0", Offset = "0x5D89B0")]
		private void <SetupCallbacks>b__38_14()
		{
		}

		[Token(Token = "0x600094A")]
		[Address(RVA = "0xCC42F8", Offset = "0xCC42F8", VA = "0xCC42F8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D89C0", Offset = "0x5D89C0")]
		private void <SetupCallbacks>b__38_34(Color color)
		{
		}

		[Token(Token = "0x600094B")]
		[Address(RVA = "0xCC43B0", Offset = "0xCC43B0", VA = "0xCC43B0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D89D0", Offset = "0x5D89D0")]
		private void <SetupCallbacks>b__38_15()
		{
		}

		[Token(Token = "0x600094C")]
		[Address(RVA = "0xCC44B8", Offset = "0xCC44B8", VA = "0xCC44B8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D89E0", Offset = "0x5D89E0")]
		private void <SetupCallbacks>b__38_35(Color color)
		{
		}

		[Token(Token = "0x600094D")]
		[Address(RVA = "0xCC4570", Offset = "0xCC4570", VA = "0xCC4570")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D89F0", Offset = "0x5D89F0")]
		private void <SetupCallbacks>b__38_16()
		{
		}

		[Token(Token = "0x600094E")]
		[Address(RVA = "0xCC4678", Offset = "0xCC4678", VA = "0xCC4678")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D8A00", Offset = "0x5D8A00")]
		private void <SetupCallbacks>b__38_36(Color color)
		{
		}

		[Token(Token = "0x600094F")]
		[Address(RVA = "0xCC4730", Offset = "0xCC4730", VA = "0xCC4730")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D8A10", Offset = "0x5D8A10")]
		private void <SetupCallbacks>b__38_17(float value)
		{
		}

		[Token(Token = "0x6000950")]
		[Address(RVA = "0xCC4750", Offset = "0xCC4750", VA = "0xCC4750")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D8A20", Offset = "0x5D8A20")]
		private void <SetupCallbacks>b__38_18(float value)
		{
		}

		[Token(Token = "0x6000951")]
		[Address(RVA = "0xCC4770", Offset = "0xCC4770", VA = "0xCC4770")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D8A30", Offset = "0x5D8A30")]
		private void <SetupCallbacks>b__38_19(int value)
		{
		}

		[Token(Token = "0x6000952")]
		[Address(RVA = "0xCC478C", Offset = "0xCC478C", VA = "0xCC478C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D8A40", Offset = "0x5D8A40")]
		private void <SetupCallbacks>b__38_20()
		{
		}

		[Token(Token = "0x6000953")]
		[Address(RVA = "0xCC4894", Offset = "0xCC4894", VA = "0xCC4894")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D8A50", Offset = "0x5D8A50")]
		private void <SetupCallbacks>b__38_37(Color color)
		{
		}

		[Token(Token = "0x6000954")]
		[Address(RVA = "0xCC494C", Offset = "0xCC494C", VA = "0xCC494C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D8A60", Offset = "0x5D8A60")]
		private void <SetupCallbacks>b__38_21(int value)
		{
		}

		[Token(Token = "0x6000955")]
		[Address(RVA = "0xCC4968", Offset = "0xCC4968", VA = "0xCC4968")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D8A70", Offset = "0x5D8A70")]
		private void <SetupCallbacks>b__38_22(int value)
		{
		}

		[Token(Token = "0x6000956")]
		[Address(RVA = "0xCC4984", Offset = "0xCC4984", VA = "0xCC4984")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D8A80", Offset = "0x5D8A80")]
		private void <SetupCallbacks>b__38_23(float value)
		{
		}

		[Token(Token = "0x6000957")]
		[Address(RVA = "0xCC49A4", Offset = "0xCC49A4", VA = "0xCC49A4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D8A90", Offset = "0x5D8A90")]
		private void <SetupCallbacks>b__38_24(float value)
		{
		}

		[Token(Token = "0x6000958")]
		[Address(RVA = "0xCC49C4", Offset = "0xCC49C4", VA = "0xCC49C4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D8AA0", Offset = "0x5D8AA0")]
		private void <SetupCallbacks>b__38_25(float value)
		{
		}

		[Token(Token = "0x6000959")]
		[Address(RVA = "0xCC49E4", Offset = "0xCC49E4", VA = "0xCC49E4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D8AB0", Offset = "0x5D8AB0")]
		private void <SetupCallbacks>b__38_26(int value)
		{
		}

		[Token(Token = "0x600095A")]
		[Address(RVA = "0xCC4A00", Offset = "0xCC4A00", VA = "0xCC4A00")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D8AC0", Offset = "0x5D8AC0")]
		private void <SetupCallbacks>b__38_27(bool value)
		{
		}

		[Token(Token = "0x600095B")]
		[Address(RVA = "0xCC4A28", Offset = "0xCC4A28", VA = "0xCC4A28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D8AD0", Offset = "0x5D8AD0")]
		private void <SetupCallbacks>b__38_28(float value)
		{
		}

		[Token(Token = "0x600095C")]
		[Address(RVA = "0xCC4A50", Offset = "0xCC4A50", VA = "0xCC4A50")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D8AE0", Offset = "0x5D8AE0")]
		private void <SetupCallbacks>b__38_29(float value)
		{
		}
	}
	[Token(Token = "0x2000189")]
	public class ForceSliderToMultipleOf3 : MonoBehaviour
	{
		[Token(Token = "0x4000BA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Slider m_slider;

		[Token(Token = "0x600095D")]
		[Address(RVA = "0xBFBF58", Offset = "0xBFBF58", VA = "0xBFBF58")]
		private void Start()
		{
		}

		[Token(Token = "0x600095E")]
		[Address(RVA = "0xBFC01C", Offset = "0xBFC01C", VA = "0xBFC01C")]
		private void UpdateValue(float value)
		{
		}

		[Token(Token = "0x600095F")]
		[Address(RVA = "0xBFC084", Offset = "0xBFC084", VA = "0xBFC084")]
		public ForceSliderToMultipleOf3()
		{
		}
	}
	[Token(Token = "0x200018A")]
	public class ForceSliderToPowerOf2 : MonoBehaviour
	{
		[Token(Token = "0x4000BA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Slider m_slider;

		[Token(Token = "0x4000BA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int[] m_powerOf2Values;

		[Token(Token = "0x4000BAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Text m_text;

		[Token(Token = "0x6000960")]
		[Address(RVA = "0xBFC08C", Offset = "0xBFC08C", VA = "0xBFC08C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000961")]
		[Address(RVA = "0xBFC150", Offset = "0xBFC150", VA = "0xBFC150")]
		private void UpdateValue(float value)
		{
		}

		[Token(Token = "0x6000962")]
		[Address(RVA = "0xBFC210", Offset = "0xBFC210", VA = "0xBFC210")]
		public ForceSliderToPowerOf2()
		{
		}
	}
	[Token(Token = "0x200018B")]
	public class UpdateTextWithSliderValue : MonoBehaviour
	{
		[Token(Token = "0x4000BAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Slider m_slider;

		[Token(Token = "0x4000BAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Text m_text;

		[Token(Token = "0x6000963")]
		[Address(RVA = "0xD0ACD4", Offset = "0xD0ACD4", VA = "0xD0ACD4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000964")]
		[Address(RVA = "0xD0ADC8", Offset = "0xD0ADC8", VA = "0xD0ADC8")]
		private void UpdateText(float value)
		{
		}

		[Token(Token = "0x6000965")]
		[Address(RVA = "0xD0AE14", Offset = "0xD0AE14", VA = "0xD0AE14")]
		public UpdateTextWithSliderValue()
		{
		}
	}
}
namespace SSFS
{
	[Token(Token = "0x200018C")]
	public enum TextureSwapMode
	{
		[Token(Token = "0x4000BAE")]
		Manual,
		[Token(Token = "0x4000BAF")]
		Automatic,
		[Token(Token = "0x4000BB0")]
		External
	}
	[Token(Token = "0x200018D")]
	public class TextureSwapper : MonoBehaviour
	{
		[Token(Token = "0x20003D1")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDE8C", Offset = "0x5CDE8C")]
		private sealed class <Transition>d__25 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40019BA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40019BB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40019BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TextureSwapper <>4__this;

			[Token(Token = "0x40019BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public int nextIndex;

			[Token(Token = "0x40019BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <p>5__2;

			[Token(Token = "0x170002CE")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001A2C")]
				[Address(RVA = "0x138BC9C", Offset = "0x138BC9C", VA = "0x138BC9C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002CF")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001A2E")]
				[Address(RVA = "0x138BCE4", Offset = "0x138BCE4", VA = "0x138BCE4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001A29")]
			[Address(RVA = "0x138B8FC", Offset = "0x138B8FC", VA = "0x138B8FC")]
			[DebuggerHidden]
			public <Transition>d__25(int <>1__state)
			{
			}

			[Token(Token = "0x6001A2A")]
			[Address(RVA = "0x138B928", Offset = "0x138B928", VA = "0x138B928", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001A2B")]
			[Address(RVA = "0x138B92C", Offset = "0x138B92C", VA = "0x138B92C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001A2D")]
			[Address(RVA = "0x138BCA4", Offset = "0x138BCA4", VA = "0x138BCA4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20003D2")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDE9C", Offset = "0x5CDE9C")]
		private sealed class <Toggle>d__26 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40019BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40019C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40019C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TextureSwapper <>4__this;

			[Token(Token = "0x40019C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <p>5__2;

			[Token(Token = "0x170002D0")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001A32")]
				[Address(RVA = "0x138B8AC", Offset = "0x138B8AC", VA = "0x138B8AC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002D1")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001A34")]
				[Address(RVA = "0x138B8F4", Offset = "0x138B8F4", VA = "0x138B8F4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001A2F")]
			[Address(RVA = "0x138B658", Offset = "0x138B658", VA = "0x138B658")]
			[DebuggerHidden]
			public <Toggle>d__26(int <>1__state)
			{
			}

			[Token(Token = "0x6001A30")]
			[Address(RVA = "0x138B684", Offset = "0x138B684", VA = "0x138B684", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001A31")]
			[Address(RVA = "0x138B688", Offset = "0x138B688", VA = "0x138B688", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001A33")]
			[Address(RVA = "0x138B8B4", Offset = "0x138B8B4", VA = "0x138B8B4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000BB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool off;

		[Token(Token = "0x4000BB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public TextureSwapMode mode;

		[Token(Token = "0x4000BB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool remote;

		[Token(Token = "0x4000BB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Renderer targetRenderer;

		[NonSerialized]
		[Token(Token = "0x4000BB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Renderer _r;

		[NonSerialized]
		[Token(Token = "0x4000BB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Material _m;

		[Token(Token = "0x4000BB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public List<Texture> textures;

		[Token(Token = "0x4000BB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D0970", Offset = "0x5D0970")]
		public float transitionSpeed;

		[Token(Token = "0x4000BB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float transitionDelay;

		[Token(Token = "0x4000BBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public KeyCode swapKey;

		[Token(Token = "0x4000BBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public bool randomOrder;

		[Token(Token = "0x4000BBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
		private bool _swapping;

		[Token(Token = "0x4000BBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float t;

		[Token(Token = "0x4000BBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float tr;

		[Token(Token = "0x4000BBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int i;

		[Token(Token = "0x4000BC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private int ni;

		[Token(Token = "0x17000072")]
		public Renderer r
		{
			[Token(Token = "0x6000966")]
			[Address(RVA = "0xE95370", Offset = "0xE95370", VA = "0xE95370")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000073")]
		public Material m
		{
			[Token(Token = "0x6000967")]
			[Address(RVA = "0xE95444", Offset = "0xE95444", VA = "0xE95444")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000074")]
		public bool swapping
		{
			[Token(Token = "0x6000968")]
			[Address(RVA = "0xE955E8", Offset = "0xE955E8", VA = "0xE955E8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000969")]
		[Address(RVA = "0xE955F0", Offset = "0xE955F0", VA = "0xE955F0")]
		public void Update()
		{
		}

		[Token(Token = "0x600096A")]
		[Address(RVA = "0xE95680", Offset = "0xE95680", VA = "0xE95680")]
		public void SwapTexture(int id = -1)
		{
		}

		[Token(Token = "0x600096B")]
		[Address(RVA = "0xE957E4", Offset = "0xE957E4", VA = "0xE957E4")]
		public void ToggleState()
		{
		}

		[Token(Token = "0x600096C")]
		[Address(RVA = "0xE9575C", Offset = "0xE9575C", VA = "0xE9575C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D8AF0", Offset = "0x5D8AF0")]
		private IEnumerator Transition(int nextIndex)
		{
			return null;
		}

		[Token(Token = "0x600096D")]
		[Address(RVA = "0xE95810", Offset = "0xE95810", VA = "0xE95810")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D8B50", Offset = "0x5D8B50")]
		private IEnumerator Toggle()
		{
			return null;
		}

		[Token(Token = "0x600096E")]
		[Address(RVA = "0xE95888", Offset = "0xE95888", VA = "0xE95888")]
		public TextureSwapper()
		{
		}
	}
	[Token(Token = "0x200018E")]
	public static class MaterialExtensions
	{
		[Token(Token = "0x20003D3")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDEAC", Offset = "0x5CDEAC")]
		private sealed class <SSFSPhaseTo>d__0 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40019C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40019C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40019C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Material m;

			[Token(Token = "0x40019C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float time;

			[Token(Token = "0x40019C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float endPhase;

			[Token(Token = "0x40019C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <o>5__2;

			[Token(Token = "0x170002D2")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001A38")]
				[Address(RVA = "0xFECE6C", Offset = "0xFECE6C", VA = "0xFECE6C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002D3")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001A3A")]
				[Address(RVA = "0xFECEB4", Offset = "0xFECEB4", VA = "0xFECEB4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001A35")]
			[Address(RVA = "0xFECD30", Offset = "0xFECD30", VA = "0xFECD30")]
			[DebuggerHidden]
			public <SSFSPhaseTo>d__0(int <>1__state)
			{
			}

			[Token(Token = "0x6001A36")]
			[Address(RVA = "0xFECD5C", Offset = "0xFECD5C", VA = "0xFECD5C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001A37")]
			[Address(RVA = "0xFECD60", Offset = "0xFECD60", VA = "0xFECD60", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001A39")]
			[Address(RVA = "0xFECE74", Offset = "0xFECE74", VA = "0xFECE74", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x600096F")]
		[Address(RVA = "0xDEC41C", Offset = "0xDEC41C", VA = "0xDEC41C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D8BB0", Offset = "0x5D8BB0")]
		public static IEnumerator SSFSPhaseTo(this Material m, float endPhase, float time = 1f)
		{
			return null;
		}

		[Token(Token = "0x6000970")]
		[Address(RVA = "0xDEC4A8", Offset = "0xDEC4A8", VA = "0xDEC4A8")]
		public static void SyncKeyword(this Material m, string keyword, bool state)
		{
		}

		[Token(Token = "0x6000971")]
		[Address(RVA = "0xDEC560", Offset = "0xDEC560", VA = "0xDEC560")]
		public static void SetVector(this Material m, string name, Vector2 v1, Vector2 v2)
		{
		}

		[Token(Token = "0x6000972")]
		[Address(RVA = "0xDEC5B8", Offset = "0xDEC5B8", VA = "0xDEC5B8")]
		public static void GetVector(this Material m, string name, out Vector2 v1, out Vector2 v2)
		{
		}

		[Token(Token = "0x6000973")]
		[Address(RVA = "0xDEC5F0", Offset = "0xDEC5F0", VA = "0xDEC5F0")]
		public static Vector4 Append(this Vector2 v1, Vector2 v2)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6000974")]
		[Address(RVA = "0xDEC620", Offset = "0xDEC620", VA = "0xDEC620")]
		public static void Split(this Vector4 v0, out Vector2 v1, out Vector2 v2)
		{
		}
	}
	[Token(Token = "0x200018F")]
	public static class SSFSCore
	{
		[Token(Token = "0x17000075")]
		public static string shaderPath
		{
			[Token(Token = "0x6000975")]
			[Address(RVA = "0xCD2468", Offset = "0xCD2468", VA = "0xCD2468")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000076")]
		public static Shader shader
		{
			[Token(Token = "0x6000976")]
			[Address(RVA = "0xCD24AC", Offset = "0xCD24AC", VA = "0xCD24AC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000077")]
		public static Material newMaterial
		{
			[Token(Token = "0x6000977")]
			[Address(RVA = "0xCD25A4", Offset = "0xCD25A4", VA = "0xCD25A4")]
			get
			{
				return null;
			}
		}
	}
	[Token(Token = "0x2000190")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x5CA160", Offset = "0x5CA160")]
	public class SSFS_GeneratorTester : MonoBehaviour
	{
		[Token(Token = "0x4000BC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private MeshRenderer _mr;

		[Token(Token = "0x4000BC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Material mat;

		[Token(Token = "0x4000BC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public SSFSGenerator generator;

		[Token(Token = "0x4000BC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public KeyCode key;

		[Token(Token = "0x17000078")]
		private MeshRenderer mr
		{
			[Token(Token = "0x6000978")]
			[Address(RVA = "0xCD3ABC", Offset = "0xCD3ABC", VA = "0xCD3ABC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000979")]
		[Address(RVA = "0xCD3B70", Offset = "0xCD3B70", VA = "0xCD3B70")]
		private void Start()
		{
		}

		[Token(Token = "0x600097A")]
		[Address(RVA = "0xCD3BE0", Offset = "0xCD3BE0", VA = "0xCD3BE0")]
		private void Update()
		{
		}

		[Token(Token = "0x600097B")]
		[Address(RVA = "0xCD3CD4", Offset = "0xCD3CD4", VA = "0xCD3CD4")]
		public SSFS_GeneratorTester()
		{
		}
	}
	[Token(Token = "0x2000191")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x5CA1C0", Offset = "0x5CA1C0")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5CA1C0", Offset = "0x5CA1C0")]
	public class SSFS_PostEffect : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20003D4")]
		public class SSFSShellVars
		{
			[Token(Token = "0x40019C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Color mainColor;

			[Token(Token = "0x40019CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Color effectColor;

			[Token(Token = "0x40019CB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Vector2 mainTextureOffset;

			[Token(Token = "0x40019CC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Vector2 mainTextureScale;

			[Token(Token = "0x40019CD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public Vector2 mainTexture2Offset;

			[Token(Token = "0x40019CE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Vector2 mainTexture2Scale;

			[Token(Token = "0x40019CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public Texture mainTexture;

			[Token(Token = "0x40019D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public Texture mainTexture2;

			[Token(Token = "0x40019D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public Texture noiseTexture;

			[Token(Token = "0x40019D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public Vector2 tileCount;

			[Token(Token = "0x40019D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			public Vector2 scaling;

			[Token(Token = "0x40019D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			public Vector2 scalingCenter;

			[Token(Token = "0x40019D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			public Vector2 RotationRadial;

			[Token(Token = "0x40019D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			public float phase;

			[Token(Token = "0x40019D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
			public float sharpness;

			[Token(Token = "0x40019D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			public float overbright;

			[Token(Token = "0x40019D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
			public float aberration;

			[Token(Token = "0x40019DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			public float effectAberration;

			[Token(Token = "0x40019DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
			public float flash;

			[Token(Token = "0x40019DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			public float flicker;

			[Token(Token = "0x40019DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
			public float idleAmount;

			[Token(Token = "0x40019DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			public float idleSpeed;

			[Token(Token = "0x40019DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
			public float idleRand;

			[Token(Token = "0x40019E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			public float scattering;

			[Token(Token = "0x40019E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
			public float scanlineIntensity;

			[Token(Token = "0x40019E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
			public float scanlineScale;

			[Token(Token = "0x40019E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
			public float scanlineShift;

			[Token(Token = "0x40019E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			public float scanlineSpeed;

			[Token(Token = "0x40019E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
			public float scaleAroundTile;

			[Token(Token = "0x40019E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
			public float backfaceVisibility;

			[Token(Token = "0x40019E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
			public bool complex;

			[Token(Token = "0x40019E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xCD")]
			public bool squareTiles;

			[Token(Token = "0x40019E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xCE")]
			public bool invertPhase;

			[Token(Token = "0x40019EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xCF")]
			public bool invertIdle;

			[Token(Token = "0x40019EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
			public bool clipTiles;

			[Token(Token = "0x40019EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD1")]
			public bool roundClipping;

			[Token(Token = "0x40019ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD2")]
			public bool twoSided;

			[Token(Token = "0x6001A3B")]
			[Address(RVA = "0xFF16E0", Offset = "0xFF16E0", VA = "0xFF16E0")]
			public SSFSShellVars()
			{
			}

			[Token(Token = "0x6001A3C")]
			[Address(RVA = "0xFF180C", Offset = "0xFF180C", VA = "0xFF180C")]
			public void Apply(ref Material m)
			{
			}
		}

		[Token(Token = "0x4000BC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Camera transitionCamera;

		[Token(Token = "0x4000BC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool forceUpdate;

		[Token(Token = "0x4000BC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Material _m;

		[Token(Token = "0x4000BC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public SSFSShellVars vars;

		[Token(Token = "0x17000079")]
		private Material m
		{
			[Token(Token = "0x600097C")]
			[Address(RVA = "0xCD3CE4", Offset = "0xCD3CE4", VA = "0xCD3CE4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600097D")]
		[Address(RVA = "0xCD3EB4", Offset = "0xCD3EB4", VA = "0xCD3EB4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600097E")]
		[Address(RVA = "0xCD4040", Offset = "0xCD4040", VA = "0xCD4040")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600097F")]
		[Address(RVA = "0xCD3EB8", Offset = "0xCD3EB8", VA = "0xCD3EB8")]
		public void UpdateMaterialVars()
		{
		}

		[Token(Token = "0x6000980")]
		[Address(RVA = "0xCD40F0", Offset = "0xCD40F0", VA = "0xCD40F0")]
		private void OnRenderImage(RenderTexture src, RenderTexture dst)
		{
		}

		[Token(Token = "0x6000981")]
		[Address(RVA = "0xCD4258", Offset = "0xCD4258", VA = "0xCD4258")]
		public SSFS_PostEffect()
		{
		}
	}
	[Token(Token = "0x2000192")]
	public class SimpleSSFSToggle : MonoBehaviour
	{
		[Token(Token = "0x20003D5")]
		public enum TargetMode
		{
			[Token(Token = "0x40019EF")]
			Material,
			[Token(Token = "0x40019F0")]
			Renderer
		}

		[Token(Token = "0x20003D6")]
		public enum ToggleMode
		{
			[Token(Token = "0x40019F2")]
			KeyPress,
			[Token(Token = "0x40019F3")]
			KeyHold,
			[Token(Token = "0x40019F4")]
			Boolean,
			[Token(Token = "0x40019F5")]
			Timer
		}

		[Token(Token = "0x4000BC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TargetMode targetMode;

		[Token(Token = "0x4000BCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public ToggleMode toggleMode;

		[Token(Token = "0x4000BCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Material material;

		[Token(Token = "0x4000BCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Renderer targetRenderer;

		[Token(Token = "0x4000BCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool phaseOn;

		[Token(Token = "0x4000BCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public KeyCode key;

		[Token(Token = "0x4000BCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float timerDelay;

		[Token(Token = "0x4000BD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float transitionLength;

		[Token(Token = "0x4000BD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float targetPhase;

		[Token(Token = "0x4000BD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float timer;

		[Token(Token = "0x4000BD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool transitioning;

		[Token(Token = "0x4000BD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Material _mat;

		[Token(Token = "0x1700007A")]
		private Material mat
		{
			[Token(Token = "0x6000982")]
			[Address(RVA = "0xA0F690", Offset = "0xA0F690", VA = "0xA0F690")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000983")]
		[Address(RVA = "0xA0F754", Offset = "0xA0F754", VA = "0xA0F754")]
		private void Update()
		{
		}

		[Token(Token = "0x6000984")]
		[Address(RVA = "0xA0F928", Offset = "0xA0F928", VA = "0xA0F928")]
		public SimpleSSFSToggle()
		{
		}
	}
}
namespace RealisticEyeMovements
{
	[Serializable]
	[Token(Token = "0x2000193")]
	public class EyeRotationLimiter
	{
		[Serializable]
		[Token(Token = "0x20003D7")]
		public class EyeRotationLimiterForExport
		{
			[Token(Token = "0x40019F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string transformPath;

			[Token(Token = "0x40019F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public SerializableQuaternion defaultQ;

			[Token(Token = "0x40019F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public SerializableQuaternion lookUpQ;

			[Token(Token = "0x40019F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public SerializableQuaternion lookDownQ;

			[Token(Token = "0x40019FA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public bool isLookUpSet;

			[Token(Token = "0x40019FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
			public bool isLookDownSet;

			[Token(Token = "0x6001A3D")]
			[Address(RVA = "0x7E9058", Offset = "0x7E9058", VA = "0x7E9058")]
			public EyeRotationLimiterForExport()
			{
			}
		}

		[Token(Token = "0x4000BD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private Transform transform;

		[Token(Token = "0x4000BD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Quaternion defaultQ;

		[Token(Token = "0x4000BD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Quaternion lookUpQ;

		[Token(Token = "0x4000BD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Quaternion lookDownQ;

		[Token(Token = "0x4000BD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float maxUpAngle;

		[Token(Token = "0x4000BDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float maxDownAngle;

		[Token(Token = "0x4000BDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private bool isLookUpSet;

		[Token(Token = "0x4000BDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		[SerializeField]
		private bool isLookDownSet;

		[Token(Token = "0x6000985")]
		[Address(RVA = "0xBF8FCC", Offset = "0xBF8FCC", VA = "0xBF8FCC")]
		public bool CanImport(EyeRotationLimiterForExport import, Transform startXform)
		{
			return default(bool);
		}

		[Token(Token = "0x6000986")]
		[Address(RVA = "0xBF904C", Offset = "0xBF904C", VA = "0xBF904C")]
		public float ClampAngle(float angle)
		{
			return default(float);
		}

		[Token(Token = "0x6000987")]
		[Address(RVA = "0xBF90CC", Offset = "0xBF90CC", VA = "0xBF90CC")]
		public EyeRotationLimiterForExport GetExport(Transform startXform)
		{
			return null;
		}

		[Token(Token = "0x6000988")]
		[Address(RVA = "0xBF91E4", Offset = "0xBF91E4", VA = "0xBF91E4")]
		public float GetEyeUp01(float angle)
		{
			return default(float);
		}

		[Token(Token = "0x6000989")]
		[Address(RVA = "0xBF9208", Offset = "0xBF9208", VA = "0xBF9208")]
		public float GetEyeDown01(float angle)
		{
			return default(float);
		}

		[Token(Token = "0x600098A")]
		[Address(RVA = "0xBF922C", Offset = "0xBF922C", VA = "0xBF922C")]
		public void Import(EyeRotationLimiterForExport import, Transform startXform)
		{
		}

		[Token(Token = "0x600098B")]
		[Address(RVA = "0xBF94B0", Offset = "0xBF94B0", VA = "0xBF94B0")]
		public void RestoreDefault()
		{
		}

		[Token(Token = "0x600098C")]
		[Address(RVA = "0xBF94D8", Offset = "0xBF94D8", VA = "0xBF94D8")]
		public void RestoreLookDown()
		{
		}

		[Token(Token = "0x600098D")]
		[Address(RVA = "0xBF9500", Offset = "0xBF9500", VA = "0xBF9500")]
		public void RestoreLookUp()
		{
		}

		[Token(Token = "0x600098E")]
		[Address(RVA = "0xBF9528", Offset = "0xBF9528", VA = "0xBF9528")]
		public void SaveDefault(Transform t)
		{
		}

		[Token(Token = "0x600098F")]
		[Address(RVA = "0xBF9630", Offset = "0xBF9630", VA = "0xBF9630")]
		public void SaveLookDown()
		{
		}

		[Token(Token = "0x6000990")]
		[Address(RVA = "0xBF9678", Offset = "0xBF9678", VA = "0xBF9678")]
		public void SaveLookUp()
		{
		}

		[Token(Token = "0x6000991")]
		[Address(RVA = "0xBF9320", Offset = "0xBF9320", VA = "0xBF9320")]
		private void UpdateMaxAngles()
		{
		}

		[Token(Token = "0x6000992")]
		[Address(RVA = "0xBF96C0", Offset = "0xBF96C0", VA = "0xBF96C0")]
		public EyeRotationLimiter()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000194")]
	public class EyelidRotationLimiter
	{
		[Serializable]
		[Token(Token = "0x20003D8")]
		public class EyelidRotationLimiterForExport
		{
			[Token(Token = "0x40019FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string transformPath;

			[Token(Token = "0x40019FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public SerializableQuaternion defaultQ;

			[Token(Token = "0x40019FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public SerializableQuaternion closedQ;

			[Token(Token = "0x40019FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public SerializableQuaternion lookUpQ;

			[Token(Token = "0x4001A00")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public SerializableQuaternion lookDownQ;

			[Token(Token = "0x4001A01")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public float eyeMaxDownAngle;

			[Token(Token = "0x4001A02")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public float eyeMaxUpAngle;

			[Token(Token = "0x4001A03")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public SerializableVector3 defaultPos;

			[Token(Token = "0x4001A04")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			public SerializableVector3 closedPos;

			[Token(Token = "0x4001A05")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			public SerializableVector3 lookUpPos;

			[Token(Token = "0x4001A06")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			public SerializableVector3 lookDownPos;

			[Token(Token = "0x4001A07")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			public bool isLookUpSet;

			[Token(Token = "0x4001A08")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
			public bool isLookDownSet;

			[Token(Token = "0x4001A09")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x92")]
			public bool isDefaultPosSet;

			[Token(Token = "0x4001A0A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x93")]
			public bool isClosedPosSet;

			[Token(Token = "0x4001A0B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
			public bool isLookUpPosSet;

			[Token(Token = "0x4001A0C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x95")]
			public bool isLookDownPosSet;

			[Token(Token = "0x6001A3E")]
			[Address(RVA = "0x7E9060", Offset = "0x7E9060", VA = "0x7E9060")]
			public EyelidRotationLimiterForExport()
			{
			}
		}

		[Token(Token = "0x4000BDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private Transform transform;

		[Token(Token = "0x4000BDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Quaternion defaultQ;

		[Token(Token = "0x4000BDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Quaternion closedQ;

		[Token(Token = "0x4000BE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Quaternion lookUpQ;

		[Token(Token = "0x4000BE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private Quaternion lookDownQ;

		[Token(Token = "0x4000BE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private float eyeMaxDownAngle;

		[Token(Token = "0x4000BE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[SerializeField]
		private float eyeMaxUpAngle;

		[Token(Token = "0x4000BE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private Vector3 defaultPos;

		[Token(Token = "0x4000BE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[SerializeField]
		private Vector3 closedPos;

		[Token(Token = "0x4000BE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private Vector3 lookUpPos;

		[Token(Token = "0x4000BE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[SerializeField]
		private Vector3 lookDownPos;

		[Token(Token = "0x4000BE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		private bool isLookUpSet;

		[Token(Token = "0x4000BE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
		[SerializeField]
		private bool isLookDownSet;

		[Token(Token = "0x4000BEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x92")]
		[SerializeField]
		private bool isDefaultPosSet;

		[Token(Token = "0x4000BEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x93")]
		[SerializeField]
		private bool isClosedPosSet;

		[Token(Token = "0x4000BEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[SerializeField]
		private bool isLookUpPosSet;

		[Token(Token = "0x4000BED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x95")]
		[SerializeField]
		private bool isLookDownPosSet;

		[Token(Token = "0x6000993")]
		[Address(RVA = "0xBF96C8", Offset = "0xBF96C8", VA = "0xBF96C8")]
		public bool CanImport(EyelidRotationLimiterForExport import, Transform startXform)
		{
			return default(bool);
		}

		[Token(Token = "0x6000994")]
		[Address(RVA = "0xBF9748", Offset = "0xBF9748", VA = "0xBF9748")]
		public EyelidRotationLimiterForExport GetExport(Transform startXform)
		{
			return null;
		}

		[Token(Token = "0x6000995")]
		[Address(RVA = "0xBF9908", Offset = "0xBF9908", VA = "0xBF9908")]
		public void GetRotationAndPosition(float eyeAngle, float blink01, float eyeWidenOrSquint, bool isUpper, out Quaternion rotation, ref Vector3 position, ControlData.EyelidBoneMode eyelidBoneMode)
		{
		}

		[Token(Token = "0x6000996")]
		[Address(RVA = "0xBF9BE8", Offset = "0xBF9BE8", VA = "0xBF9BE8")]
		public void Import(EyelidRotationLimiterForExport import, Transform startXform)
		{
		}

		[Token(Token = "0x6000997")]
		[Address(RVA = "0xBF9D80", Offset = "0xBF9D80", VA = "0xBF9D80")]
		public void RestoreClosed(ControlData.EyelidBoneMode eyelidBoneMode)
		{
		}

		[Token(Token = "0x6000998")]
		[Address(RVA = "0xBF9E04", Offset = "0xBF9E04", VA = "0xBF9E04")]
		public void RestoreDefault(ControlData.EyelidBoneMode eyelidBoneMode)
		{
		}

		[Token(Token = "0x6000999")]
		[Address(RVA = "0xBF9E88", Offset = "0xBF9E88", VA = "0xBF9E88")]
		public void RestoreLookDown(ControlData.EyelidBoneMode eyelidBoneMode)
		{
		}

		[Token(Token = "0x600099A")]
		[Address(RVA = "0xBF9F0C", Offset = "0xBF9F0C", VA = "0xBF9F0C")]
		public void RestoreLookUp(ControlData.EyelidBoneMode eyelidBoneMode)
		{
		}

		[Token(Token = "0x600099B")]
		[Address(RVA = "0xBF9F90", Offset = "0xBF9F90", VA = "0xBF9F90")]
		public void SaveClosed()
		{
		}

		[Token(Token = "0x600099C")]
		[Address(RVA = "0xBF9FE8", Offset = "0xBF9FE8", VA = "0xBF9FE8")]
		public void SaveDefault(Transform t)
		{
		}

		[Token(Token = "0x600099D")]
		[Address(RVA = "0xBFA138", Offset = "0xBFA138", VA = "0xBFA138")]
		public void SaveLookDown(float eyeMaxDownAngle)
		{
		}

		[Token(Token = "0x600099E")]
		[Address(RVA = "0xBFA198", Offset = "0xBFA198", VA = "0xBFA198")]
		public void SaveLookUp(float eyeMaxUpAngle)
		{
		}

		[Token(Token = "0x600099F")]
		[Address(RVA = "0xBFA1F8", Offset = "0xBFA1F8", VA = "0xBFA1F8")]
		public EyelidRotationLimiter()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000195")]
	public class ControlData
	{
		[Serializable]
		[Token(Token = "0x20003D9")]
		public class ControlDataForExport
		{
			[Token(Token = "0x4001A0D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public EyeControl eyeControl;

			[Token(Token = "0x4001A0E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public EyelidBoneMode eyelidBoneMode;

			[Token(Token = "0x4001A0F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string leftEyePath;

			[Token(Token = "0x4001A10")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string rightEyePath;

			[Token(Token = "0x4001A11")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float maxEyeUpBoneAngle;

			[Token(Token = "0x4001A12")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float maxEyeDownBoneAngle;

			[Token(Token = "0x4001A13")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float maxEyeUpEyeballAngle;

			[Token(Token = "0x4001A14")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public float maxEyeDownEyeballAngle;

			[Token(Token = "0x4001A15")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public bool isEyeBallDefaultSet;

			[Token(Token = "0x4001A16")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
			public bool isEyeBoneDefaultSet;

			[Token(Token = "0x4001A17")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
			public bool isEyeBallLookUpSet;

			[Token(Token = "0x4001A18")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3B")]
			public bool isEyeBoneLookUpSet;

			[Token(Token = "0x4001A19")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public bool isEyeBallLookDownSet;

			[Token(Token = "0x4001A1A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
			public bool isEyeBoneLookDownSet;

			[Token(Token = "0x4001A1B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public EyeRotationLimiter.EyeRotationLimiterForExport leftBoneEyeRotationLimiter;

			[Token(Token = "0x4001A1C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public EyeRotationLimiter.EyeRotationLimiterForExport rightBoneEyeRotationLimiter;

			[Token(Token = "0x4001A1D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public EyeRotationLimiter.EyeRotationLimiterForExport leftEyeballEyeRotationLimiter;

			[Token(Token = "0x4001A1E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public EyeRotationLimiter.EyeRotationLimiterForExport rightEyeballEyeRotationLimiter;

			[Token(Token = "0x4001A1F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public EyelidControl eyelidControl;

			[Token(Token = "0x4001A20")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			public bool eyelidsFollowEyesVertically;

			[Token(Token = "0x4001A21")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public string upperEyeLidLeftPath;

			[Token(Token = "0x4001A22")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			public string upperEyeLidRightPath;

			[Token(Token = "0x4001A23")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			public string lowerEyeLidLeftPath;

			[Token(Token = "0x4001A24")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			public string lowerEyeLidRightPath;

			[Token(Token = "0x4001A25")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			public bool isEyelidBonesDefaultSet;

			[Token(Token = "0x4001A26")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x89")]
			public bool isEyelidBonesClosedSet;

			[Token(Token = "0x4001A27")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8A")]
			public bool isEyelidBonesLookUpSet;

			[Token(Token = "0x4001A28")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8B")]
			public bool isEyelidBonesLookDownSet;

			[Token(Token = "0x4001A29")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			public EyelidRotationLimiter.EyelidRotationLimiterForExport upperLeftLimiter;

			[Token(Token = "0x4001A2A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			public EyelidRotationLimiter.EyelidRotationLimiterForExport upperRightLimiter;

			[Token(Token = "0x4001A2B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			public EyelidRotationLimiter.EyelidRotationLimiterForExport lowerLeftLimiter;

			[Token(Token = "0x4001A2C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			public EyelidRotationLimiter.EyelidRotationLimiterForExport lowerRightLimiter;

			[Token(Token = "0x4001A2D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			public float eyeWidenOrSquint;

			[Token(Token = "0x4001A2E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
			public EyelidPositionBlendshapeForExport[] blendshapesForBlinking;

			[Token(Token = "0x4001A2F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			public EyelidPositionBlendshapeForExport[] blendshapesForLookingUp;

			[Token(Token = "0x4001A30")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
			public EyelidPositionBlendshapeForExport[] blendshapesForLookingDown;

			[Token(Token = "0x4001A31")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
			public BlendshapesConfigForExport[] blendshapesConfigs;

			[Token(Token = "0x4001A32")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
			public bool isEyelidBlendshapeDefaultSet;

			[Token(Token = "0x4001A33")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD9")]
			public bool isEyelidBlendshapeClosedSet;

			[Token(Token = "0x4001A34")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xDA")]
			public bool isEyelidBlendshapeLookUpSet;

			[Token(Token = "0x4001A35")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xDB")]
			public bool isEyelidBlendshapeLookDownSet;

			[Token(Token = "0x6001A3F")]
			[Address(RVA = "0x7E6620", Offset = "0x7E6620", VA = "0x7E6620")]
			public ControlDataForExport()
			{
			}
		}

		[Token(Token = "0x20003DA")]
		public enum EyeControl
		{
			[Token(Token = "0x4001A37")]
			None,
			[Token(Token = "0x4001A38")]
			MecanimEyeBones,
			[Token(Token = "0x4001A39")]
			SelectedObjects
		}

		[Token(Token = "0x20003DB")]
		public enum EyelidControl
		{
			[Token(Token = "0x4001A3B")]
			None,
			[Token(Token = "0x4001A3C")]
			Bones,
			[Token(Token = "0x4001A3D")]
			Blendshapes,
			[Token(Token = "0x4001A3E")]
			MCS_Blendshapes
		}

		[Token(Token = "0x20003DC")]
		public enum EyelidBoneMode
		{
			[Token(Token = "0x4001A40")]
			RotationAndPosition,
			[Token(Token = "0x4001A41")]
			Rotation,
			[Token(Token = "0x4001A42")]
			Position
		}

		[Serializable]
		[Token(Token = "0x20003DD")]
		public class EyelidPositionBlendshapeForExport
		{
			[Token(Token = "0x4001A43")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string skinnedMeshRendererPath;

			[Token(Token = "0x4001A44")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float defaultWeight;

			[Token(Token = "0x4001A45")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public float positionWeight;

			[Token(Token = "0x4001A46")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public int index;

			[Token(Token = "0x4001A47")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string name;

			[Token(Token = "0x4001A48")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public bool isUsedInEalierConfig;

			[Token(Token = "0x6001A40")]
			[Address(RVA = "0x7E6954", Offset = "0x7E6954", VA = "0x7E6954")]
			public EyelidPositionBlendshapeForExport()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20003DE")]
		public class EyelidPositionBlendshape
		{
			[Token(Token = "0x4001A49")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public SkinnedMeshRenderer skinnedMeshRenderer;

			[Token(Token = "0x4001A4A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float defaultWeight;

			[Token(Token = "0x4001A4B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public float positionWeight;

			[Token(Token = "0x4001A4C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public int index;

			[Token(Token = "0x4001A4D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string name;

			[Token(Token = "0x4001A4E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public bool isUsedInEalierConfig;

			[Token(Token = "0x6001A41")]
			[Address(RVA = "0x7E6628", Offset = "0x7E6628", VA = "0x7E6628")]
			public static bool CanImport(EyelidPositionBlendshapeForExport import, Transform startXform, EyelidControl eyelidControl)
			{
				return default(bool);
			}

			[Token(Token = "0x6001A42")]
			[Address(RVA = "0x7E6808", Offset = "0x7E6808", VA = "0x7E6808")]
			public EyelidPositionBlendshapeForExport GetExport(Transform startXform)
			{
				return null;
			}

			[Token(Token = "0x6001A43")]
			[Address(RVA = "0x7E695C", Offset = "0x7E695C", VA = "0x7E695C")]
			public void Import(EyelidPositionBlendshapeForExport export, Transform startXform)
			{
			}

			[Token(Token = "0x6001A44")]
			[Address(RVA = "0x7E6B20", Offset = "0x7E6B20", VA = "0x7E6B20")]
			public EyelidPositionBlendshape()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20003DF")]
		public class BlendshapesConfigForExport
		{
			[Token(Token = "0x4001A4F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string skinnedMeshRendererPath;

			[Token(Token = "0x4001A50")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int blendShapeCount;

			[Token(Token = "0x4001A51")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string[] blendshapeNames;

			[Token(Token = "0x4001A52")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float[] blendshapeWeights;

			[Token(Token = "0x6001A45")]
			[Address(RVA = "0x7E6524", Offset = "0x7E6524", VA = "0x7E6524")]
			public BlendshapesConfigForExport()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20003E0")]
		public class BlendshapesConfig
		{
			[Token(Token = "0x4001A53")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public SkinnedMeshRenderer skinnedMeshRenderer;

			[Token(Token = "0x4001A54")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int blendShapeCount;

			[Token(Token = "0x4001A55")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string[] blendshapeNames;

			[Token(Token = "0x4001A56")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float[] blendshapeWeights;

			[Token(Token = "0x6001A46")]
			[Address(RVA = "0x7E61EC", Offset = "0x7E61EC", VA = "0x7E61EC")]
			public static bool CanImport(BlendshapesConfigForExport import, Transform startXform)
			{
				return default(bool);
			}

			[Token(Token = "0x6001A47")]
			[Address(RVA = "0x7E63E0", Offset = "0x7E63E0", VA = "0x7E63E0")]
			public BlendshapesConfigForExport GetExport(Transform startXform)
			{
				return null;
			}

			[Token(Token = "0x6001A48")]
			[Address(RVA = "0x7E652C", Offset = "0x7E652C", VA = "0x7E652C")]
			public void Import(Transform startXform, BlendshapesConfigForExport import)
			{
			}

			[Token(Token = "0x6001A49")]
			[Address(RVA = "0x7E6618", Offset = "0x7E6618", VA = "0x7E6618")]
			public BlendshapesConfig()
			{
			}
		}

		[Token(Token = "0x4000BEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public EyeControl eyeControl;

		[Token(Token = "0x4000BEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform leftEye;

		[Token(Token = "0x4000BF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform rightEye;

		[Token(Token = "0x4000BF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float maxEyeUpBoneAngle;

		[Token(Token = "0x4000BF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float maxEyeDownBoneAngle;

		[Token(Token = "0x4000BF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float maxEyeUpEyeballAngle;

		[Token(Token = "0x4000BF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float maxEyeDownEyeballAngle;

		[Token(Token = "0x4000BF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool isEyeBallDefaultSet;

		[Token(Token = "0x4000BF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		public bool isEyeBoneDefaultSet;

		[Token(Token = "0x4000BF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
		public bool isEyeBallLookUpSet;

		[Token(Token = "0x4000BF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B")]
		public bool isEyeBoneLookUpSet;

		[Token(Token = "0x4000BF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public bool isEyeBallLookDownSet;

		[Token(Token = "0x4000BFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
		public bool isEyeBoneLookDownSet;

		[Token(Token = "0x4000BFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private EyeRotationLimiter leftBoneEyeRotationLimiter;

		[Token(Token = "0x4000BFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private EyeRotationLimiter rightBoneEyeRotationLimiter;

		[Token(Token = "0x4000BFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private EyeRotationLimiter leftEyeballEyeRotationLimiter;

		[Token(Token = "0x4000BFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private EyeRotationLimiter rightEyeballEyeRotationLimiter;

		[Token(Token = "0x4000BFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public EyelidControl eyelidControl;

		[Token(Token = "0x4000C00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public EyelidBoneMode eyelidBoneMode;

		[Token(Token = "0x4000C01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool eyelidsFollowEyesVertically;

		[Token(Token = "0x4000C02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Transform upperEyeLidLeft;

		[Token(Token = "0x4000C03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Transform upperEyeLidRight;

		[Token(Token = "0x4000C04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Transform lowerEyeLidLeft;

		[Token(Token = "0x4000C05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Transform lowerEyeLidRight;

		[Token(Token = "0x4000C06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public bool isEyelidBonesDefaultSet;

		[Token(Token = "0x4000C07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
		public bool isEyelidBonesClosedSet;

		[Token(Token = "0x4000C08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x92")]
		public bool isEyelidBonesLookUpSet;

		[Token(Token = "0x4000C09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x93")]
		public bool isEyelidBonesLookDownSet;

		[Token(Token = "0x4000C0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		private EyelidRotationLimiter upperLeftLimiter;

		[Token(Token = "0x4000C0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		private EyelidRotationLimiter upperRightLimiter;

		[Token(Token = "0x4000C0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		private EyelidRotationLimiter lowerLeftLimiter;

		[Token(Token = "0x4000C0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		private EyelidRotationLimiter lowerRightLimiter;

		[Token(Token = "0x4000C0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5D0B78", Offset = "0x5D0B78")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D0B78", Offset = "0x5D0B78")]
		public float eyeWidenOrSquint;

		[Token(Token = "0x4000C0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		private EyelidPositionBlendshape[] blendshapesForBlinking;

		[Token(Token = "0x4000C10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		private EyelidPositionBlendshape[] blendshapesForLookingUp;

		[Token(Token = "0x4000C11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		private EyelidPositionBlendshape[] blendshapesForLookingDown;

		[Token(Token = "0x4000C12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		private BlendshapesConfig[] blendshapesConfigs;

		[Token(Token = "0x4000C13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public bool isEyelidBlendshapeDefaultSet;

		[Token(Token = "0x4000C14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE1")]
		public bool isEyelidBlendshapeClosedSet;

		[Token(Token = "0x4000C15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE2")]
		public bool isEyelidBlendshapeLookUpSet;

		[Token(Token = "0x4000C16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE3")]
		public bool isEyelidBlendshapeLookDownSet;

		[Token(Token = "0x60009A0")]
		[Address(RVA = "0x10AE85C", Offset = "0x10AE85C", VA = "0x10AE85C")]
		public bool CanImport(ControlDataForExport import, Transform startXform)
		{
			return default(bool);
		}

		[Token(Token = "0x60009A1")]
		[Address(RVA = "0x10AEC20", Offset = "0x10AEC20", VA = "0x10AEC20")]
		public void CheckConsistency(Animator animator, EyeAndHeadAnimator eyeAndHeadAnimator)
		{
		}

		[Token(Token = "0x60009A2")]
		[Address(RVA = "0x10AF45C", Offset = "0x10AF45C", VA = "0x10AF45C")]
		public float ClampLeftVertEyeAngle(float angle)
		{
			return default(float);
		}

		[Token(Token = "0x60009A3")]
		[Address(RVA = "0x10AF4A0", Offset = "0x10AF4A0", VA = "0x10AF4A0")]
		public float ClampRightVertEyeAngle(float angle)
		{
			return default(float);
		}

		[Token(Token = "0x60009A4")]
		[Address(RVA = "0x10AF4E4", Offset = "0x10AF4E4", VA = "0x10AF4E4")]
		public ControlDataForExport GetExport(Transform startXform)
		{
			return null;
		}

		[Token(Token = "0x60009A5")]
		[Address(RVA = "0x10AFB3C", Offset = "0x10AFB3C", VA = "0x10AFB3C")]
		public void Import(ControlDataForExport import, Transform startXform)
		{
		}

		[Token(Token = "0x60009A6")]
		[Address(RVA = "0x10B0274", Offset = "0x10B0274", VA = "0x10B0274")]
		public void Initialize(Transform startXform)
		{
		}

		[Token(Token = "0x60009A7")]
		[Address(RVA = "0x10B04BC", Offset = "0x10B04BC", VA = "0x10B04BC")]
		private void LerpBlendshapeConfig(EyelidPositionBlendshape[] blendshapes, float lerpValue, bool relativeToCurrentValueIfUsedInOtherConfig = false)
		{
		}

		[Token(Token = "0x60009A8")]
		[Address(RVA = "0x10B05E4", Offset = "0x10B05E4", VA = "0x10B05E4")]
		public bool NeedsSaveDefaultBlendshapeConfig()
		{
			return default(bool);
		}

		[Token(Token = "0x60009A9")]
		[Address(RVA = "0x10B0604", Offset = "0x10B0604", VA = "0x10B0604")]
		public void OnDestroy()
		{
		}

		[Token(Token = "0x60009AA")]
		[Address(RVA = "0x10B0608", Offset = "0x10B0608", VA = "0x10B0608")]
		private void ResetBlendshapeConfig(EyelidPositionBlendshape[] blendshapes)
		{
		}

		[Token(Token = "0x60009AB")]
		[Address(RVA = "0x10B06EC", Offset = "0x10B06EC", VA = "0x10B06EC")]
		private void ResetAllBlendshapesToDefault()
		{
		}

		[Token(Token = "0x60009AC")]
		[Address(RVA = "0x10B071C", Offset = "0x10B071C", VA = "0x10B071C")]
		public void RestoreClosed()
		{
		}

		[Token(Token = "0x60009AD")]
		[Address(RVA = "0x10B0970", Offset = "0x10B0970", VA = "0x10B0970")]
		public void RestoreDefault(bool withEyelids = true)
		{
		}

		[Token(Token = "0x60009AE")]
		[Address(RVA = "0x10B0B00", Offset = "0x10B0B00", VA = "0x10B0B00")]
		public void RestoreLookDown()
		{
		}

		[Token(Token = "0x60009AF")]
		[Address(RVA = "0x10B0D54", Offset = "0x10B0D54", VA = "0x10B0D54")]
		public void RestoreLookUp()
		{
		}

		[Token(Token = "0x60009B0")]
		[Address(RVA = "0x10B0FA8", Offset = "0x10B0FA8", VA = "0x10B0FA8")]
		private void SaveBlendshapesForEyelidPosition(ref EyelidPositionBlendshape[] blendshapesForPosition, UnityEngine.Object rootObject, string positionName)
		{
		}

		[Token(Token = "0x60009B1")]
		[Address(RVA = "0x10B13B0", Offset = "0x10B13B0", VA = "0x10B13B0")]
		public void SaveClosed(UnityEngine.Object rootObject)
		{
		}

		[Token(Token = "0x60009B2")]
		[Address(RVA = "0x10AEFD8", Offset = "0x10AEFD8", VA = "0x10AEFD8")]
		public void SaveDefault(UnityEngine.Object rootObject)
		{
		}

		[Token(Token = "0x60009B3")]
		[Address(RVA = "0x10B14F4", Offset = "0x10B14F4", VA = "0x10B14F4")]
		public void SaveLookDown(UnityEngine.Object rootObject)
		{
		}

		[Token(Token = "0x60009B4")]
		[Address(RVA = "0x10B16E4", Offset = "0x10B16E4", VA = "0x10B16E4")]
		public void SaveLookUp(UnityEngine.Object rootObject)
		{
		}

		[Token(Token = "0x60009B5")]
		[Address(RVA = "0x10B18D4", Offset = "0x10B18D4", VA = "0x10B18D4")]
		public void UpdateEyelids(float leftEyeAngle, float rightEyeAngle, float blink01, bool eyelidsFollowEyesVertically)
		{
		}

		[Token(Token = "0x60009B6")]
		[Address(RVA = "0x10B1D34", Offset = "0x10B1D34", VA = "0x10B1D34")]
		public ControlData()
		{
		}
	}
	[Token(Token = "0x2000196")]
	internal struct CritDampTweenQuaternion
	{
		[StructLayout(2)]
		[Token(Token = "0x20003E1")]
		private struct QVUnion
		{
			[Token(Token = "0x4001A57")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector4 v;

			[Token(Token = "0x4001A58")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Quaternion q;
		}

		[Token(Token = "0x4000C17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private QVUnion _rotation;

		[Token(Token = "0x4000C18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector4 velocity;

		[Token(Token = "0x4000C19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float omega;

		[Token(Token = "0x4000C1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private readonly float maxSpeed;

		[Token(Token = "0x1700007B")]
		public Quaternion rotation
		{
			[Token(Token = "0x60009B8")]
			[Address(RVA = "0xCC1C60", Offset = "0xCC1C60", VA = "0xCC1C60")]
			get
			{
				return default(Quaternion);
			}
			[Token(Token = "0x60009B9")]
			[Address(RVA = "0xCC1C6C", Offset = "0xCC1C6C", VA = "0xCC1C6C")]
			set
			{
			}
		}

		[Token(Token = "0x60009B7")]
		[Address(RVA = "0xCC1C30", Offset = "0xCC1C30", VA = "0xCC1C30")]
		private static Vector4 q2v(Quaternion q)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60009BA")]
		[Address(RVA = "0xCC1C78", Offset = "0xCC1C78", VA = "0xCC1C78")]
		public CritDampTweenQuaternion(Quaternion rotation, float omega, float maxSpeed)
		{
		}

		[Token(Token = "0x60009BB")]
		[Address(RVA = "0xCC1CE8", Offset = "0xCC1CE8", VA = "0xCC1CE8")]
		public void Step(Quaternion target)
		{
		}

		[Token(Token = "0x60009BC")]
		[Address(RVA = "0xCC1F50", Offset = "0xCC1F50", VA = "0xCC1F50")]
		public static implicit operator Quaternion(CritDampTweenQuaternion m)
		{
			return default(Quaternion);
		}
	}
	[Token(Token = "0x2000197")]
	public class DestroyNotifier : MonoBehaviour
	{
		[Token(Token = "0x14000004")]
		public event Action<DestroyNotifier> OnDestroyedEvent
		{
			[Token(Token = "0x60009BD")]
			[Address(RVA = "0xCCC4EC", Offset = "0xCCC4EC", VA = "0xCCC4EC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D8C70", Offset = "0x5D8C70")]
			add
			{
			}
			[Token(Token = "0x60009BE")]
			[Address(RVA = "0xCCC58C", Offset = "0xCCC58C", VA = "0xCCC58C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D8C80", Offset = "0x5D8C80")]
			remove
			{
			}
		}

		[Token(Token = "0x60009BF")]
		[Address(RVA = "0xCCC62C", Offset = "0xCCC62C", VA = "0xCCC62C")]
		private void OnDestroyed()
		{
		}

		[Token(Token = "0x60009C0")]
		[Address(RVA = "0xCCC68C", Offset = "0xCCC68C", VA = "0xCCC68C")]
		public DestroyNotifier()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000198")]
	public class EyeAndHeadAnimatorForExport
	{
		[Token(Token = "0x4000C1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string headBonePath;

		[Token(Token = "0x4000C1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float headSpeedModifier;

		[Token(Token = "0x4000C1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float headWeight;

		[Token(Token = "0x4000C1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool useMicroSaccades;

		[Token(Token = "0x4000C20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool useMacroSaccades;

		[Token(Token = "0x4000C21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		public bool kDrawSightlinesInEditor;

		[Token(Token = "0x4000C22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ControlData.ControlDataForExport controlData;

		[Token(Token = "0x4000C23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float kMinNextBlinkTime;

		[Token(Token = "0x4000C24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float kMaxNextBlinkTime;

		[Token(Token = "0x4000C25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool eyelidsFollowEyesVertically;

		[Token(Token = "0x4000C26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float maxEyeHorizAngle;

		[Token(Token = "0x4000C27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float maxEyeHorizAngleTowardsNose;

		[Token(Token = "0x4000C28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float crossEyeCorrection;

		[Token(Token = "0x4000C29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float nervousness;

		[Token(Token = "0x4000C2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float limitHeadAngle;

		[Token(Token = "0x60009C1")]
		[Address(RVA = "0xBF366C", Offset = "0xBF366C", VA = "0xBF366C")]
		public EyeAndHeadAnimatorForExport()
		{
		}
	}
	[Token(Token = "0x2000199")]
	public class EyeAndHeadAnimator : MonoBehaviour
	{
		[Token(Token = "0x20003E2")]
		private enum HeadControl
		{
			[Token(Token = "0x4001A5A")]
			None,
			[Token(Token = "0x4001A5B")]
			Mecanim,
			[Token(Token = "0x4001A5C")]
			FinalIK,
			[Token(Token = "0x4001A5D")]
			Transform
		}

		[Token(Token = "0x20003E3")]
		private enum HeadTweenMethod
		{
			[Token(Token = "0x4001A5F")]
			SmoothDamping,
			[Token(Token = "0x4001A60")]
			CriticalDamping
		}

		[Token(Token = "0x20003E4")]
		private enum BlinkState
		{
			[Token(Token = "0x4001A62")]
			Idle,
			[Token(Token = "0x4001A63")]
			Closing,
			[Token(Token = "0x4001A64")]
			KeepingClosed,
			[Token(Token = "0x4001A65")]
			Opening
		}

		[Token(Token = "0x20003E5")]
		public enum HeadSpeed
		{
			[Token(Token = "0x4001A67")]
			Slow,
			[Token(Token = "0x4001A68")]
			Fast
		}

		[Token(Token = "0x20003E6")]
		public enum EyeDelay
		{
			[Token(Token = "0x4001A6A")]
			Simultaneous,
			[Token(Token = "0x4001A6B")]
			EyesFirst,
			[Token(Token = "0x4001A6C")]
			HeadFirst
		}

		[Token(Token = "0x20003E7")]
		private enum LookTarget
		{
			[Token(Token = "0x4001A6E")]
			StraightAhead,
			[Token(Token = "0x4001A6F")]
			ClearingTargetPhase1,
			[Token(Token = "0x4001A70")]
			ClearingTargetPhase2,
			[Token(Token = "0x4001A71")]
			GeneralDirection,
			[Token(Token = "0x4001A72")]
			SpecificThing,
			[Token(Token = "0x4001A73")]
			Face
		}

		[Token(Token = "0x20003E8")]
		private enum FaceLookTarget
		{
			[Token(Token = "0x4001A75")]
			EyesCenter,
			[Token(Token = "0x4001A76")]
			LeftEye,
			[Token(Token = "0x4001A77")]
			RightEye,
			[Token(Token = "0x4001A78")]
			Mouth
		}

		[Token(Token = "0x4000C2B")]
		private const float kMaxLimitedHorizontalHeadAngle = 55f;

		[Token(Token = "0x4000C2C")]
		private const float kMaxLimitedVerticalHeadAngle = 40f;

		[Token(Token = "0x4000C2D")]
		private const float kMaxHorizViewAngle = 100f;

		[Token(Token = "0x4000C2E")]
		private const float kMaxVertViewAngle = 60f;

		[Token(Token = "0x4000C33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		public float headSpeedModifier;

		[Token(Token = "0x4000C34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[HideInInspector]
		public float headWeight;

		[Token(Token = "0x4000C35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public Transform headBoneNonMecanimXform;

		[Token(Token = "0x4000C36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Quaternion headBoneNonMecanimFromRootQ;

		[Token(Token = "0x4000C37")]
		private const float kHeadJitterFrequency = 0.2f;

		[Token(Token = "0x4000C38")]
		private const float kHeadJitterAmount = 1f;

		[Token(Token = "0x4000C39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector3 headJitterRotationComponents;

		[Token(Token = "0x4000C3A")]
		private const int kHeadJitterOctave = 3;

		[Token(Token = "0x4000C3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float headJitterTime;

		[Token(Token = "0x4000C3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector2[] headJitterNoiseVectors;

		[Token(Token = "0x4000C3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private HeadControl headControl;

		[Token(Token = "0x4000C3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private HeadTweenMethod headTweenMethod;

		[Token(Token = "0x4000C3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public bool allowHeadMotion;

		[Token(Token = "0x4000C40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
		public bool useMicroSaccades;

		[Token(Token = "0x4000C41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7A")]
		public bool useMacroSaccades;

		[Token(Token = "0x4000C42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7B")]
		public bool useHeadJitter;

		[Token(Token = "0x4000C43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public bool kDrawSightlinesInEditor;

		[Token(Token = "0x4000C44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7D")]
		public bool areUpdatedControlledExternally;

		[Token(Token = "0x4000C45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[HideInInspector]
		public ControlData controlData;

		[Token(Token = "0x4000C46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5D0C9C", Offset = "0x5D0C9C")]
		public float kMinNextBlinkTime;

		[Token(Token = "0x4000C47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5D0CD4", Offset = "0x5D0CD4")]
		public float kMaxNextBlinkTime;

		[Token(Token = "0x4000C48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5D0D0C", Offset = "0x5D0D0C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D0D0C", Offset = "0x5D0D0C")]
		public float blinkSpeed;

		[Token(Token = "0x4000C49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5D0D64", Offset = "0x5D0D64")]
		public bool eyelidsFollowEyesVertically;

		[Token(Token = "0x4000C4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D0D9C", Offset = "0x5D0D9C")]
		private float <blink01>k__BackingField;

		[Token(Token = "0x4000C4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private bool useUpperEyelids;

		[Token(Token = "0x4000C4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9D")]
		private bool useLowerEyelids;

		[Token(Token = "0x4000C4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private float timeOfNextBlink;

		[Token(Token = "0x4000C4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private BlinkState blinkState;

		[Token(Token = "0x4000C4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private float blinkStateTime;

		[Token(Token = "0x4000C50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private float blinkDuration;

		[Token(Token = "0x4000C51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private bool isShortBlink;

		[Token(Token = "0x4000C52")]
		private const float kBlinkCloseTimeShort = 0.036f;

		[Token(Token = "0x4000C53")]
		private const float kBlinkOpenTimeShort = 0.072f;

		[Token(Token = "0x4000C54")]
		private const float kBlinkCloseTimeLong = 0.072f;

		[Token(Token = "0x4000C55")]
		private const float kBlinkOpenTimeLong = 0.144f;

		[Token(Token = "0x4000C56")]
		private const float kBlinkKeepingClosedTime = 0.008f;

		[Token(Token = "0x4000C57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D0DAC", Offset = "0x5D0DAC")]
		public float headWeightOverride;

		[Token(Token = "0x4000C58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5D0DC4", Offset = "0x5D0DC4")]
		public float maxEyeHorizAngle;

		[Token(Token = "0x4000C59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5D0DFC", Offset = "0x5D0DFC")]
		public float maxEyeHorizAngleTowardsNose;

		[Token(Token = "0x4000C5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5D0E34", Offset = "0x5D0E34")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D0E34", Offset = "0x5D0E34")]
		public float crossEyeCorrection;

		[Token(Token = "0x4000C5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5D0E88", Offset = "0x5D0E88")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D0E88", Offset = "0x5D0E88")]
		public float nervousness;

		[Token(Token = "0x4000C5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5D0EDC", Offset = "0x5D0EDC")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D0EDC", Offset = "0x5D0EDC")]
		public float limitHeadAngle;

		[Token(Token = "0x4000C5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D0F30", Offset = "0x5D0F30")]
		private float <eyeDistance>k__BackingField;

		[Token(Token = "0x4000C5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D0F40", Offset = "0x5D0F40")]
		private float <eyeDistanceScale>k__BackingField;

		[Token(Token = "0x4000C5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Transform leftEyeAnchor;

		[Token(Token = "0x4000C60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Transform rightEyeAnchor;

		[Token(Token = "0x4000C61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private float leftMaxSpeedHoriz;

		[Token(Token = "0x4000C62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private float leftHorizDuration;

		[Token(Token = "0x4000C63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private float leftMaxSpeedVert;

		[Token(Token = "0x4000C64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private float leftVertDuration;

		[Token(Token = "0x4000C65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private float leftCurrentSpeedX;

		[Token(Token = "0x4000C66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		private float leftCurrentSpeedY;

		[Token(Token = "0x4000C67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private float rightMaxSpeedHoriz;

		[Token(Token = "0x4000C68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		private float rightHorizDuration;

		[Token(Token = "0x4000C69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private float rightMaxSpeedVert;

		[Token(Token = "0x4000C6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		private float rightVertDuration;

		[Token(Token = "0x4000C6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private float rightCurrentSpeedX;

		[Token(Token = "0x4000C6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		private float rightCurrentSpeedY;

		[Token(Token = "0x4000C6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private float startLeftEyeHorizDuration;

		[Token(Token = "0x4000C6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		private float startLeftEyeVertDuration;

		[Token(Token = "0x4000C6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private float startLeftEyeMaxSpeedHoriz;

		[Token(Token = "0x4000C70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		private float startLeftEyeMaxSpeedVert;

		[Token(Token = "0x4000C71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private float startRightEyeHorizDuration;

		[Token(Token = "0x4000C72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		private float startRightEyeVertDuration;

		[Token(Token = "0x4000C73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private float startRightEyeMaxSpeedHoriz;

		[Token(Token = "0x4000C74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		private float startRightEyeMaxSpeedVert;

		[Token(Token = "0x4000C75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private float timeOfEyeMovementStart;

		[Token(Token = "0x4000C76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		private float timeOfHeadMovementStart;

		[Token(Token = "0x4000C77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private float headMaxSpeedHoriz;

		[Token(Token = "0x4000C78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
		private float headMaxSpeedVert;

		[Token(Token = "0x4000C79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private float headHorizDuration;

		[Token(Token = "0x4000C7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		private float headVertDuration;

		[Token(Token = "0x4000C7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private float startHeadHorizDuration;

		[Token(Token = "0x4000C7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
		private float startHeadVertDuration;

		[Token(Token = "0x4000C7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private float startHeadMaxSpeedHoriz;

		[Token(Token = "0x4000C7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
		private float startHeadMaxSpeedVert;

		[Token(Token = "0x4000C7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private float currentHeadHorizSpeed;

		[Token(Token = "0x4000C80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		private float currentHeadVertSpeed;

		[Token(Token = "0x4000C81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private float currentHeadZSpeed;

		[Token(Token = "0x4000C82")]
		private const float kMaxHeadVelocity = 2f;

		[Token(Token = "0x4000C83")]
		private const float kHeadOmega = 3.5f;

		[Token(Token = "0x4000C84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		private CritDampTweenQuaternion critDampTween;

		[Token(Token = "0x4000C85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
		private Vector3 headEulerSpeed;

		[Token(Token = "0x4000C86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		private Vector3 lastHeadEuler;

		[Token(Token = "0x4000C87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
		private float maxHeadHorizSpeedSinceSaccadeStart;

		[Token(Token = "0x4000C88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		private float maxHeadVertSpeedSinceSaccadeStart;

		[Token(Token = "0x4000C89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B4")]
		private bool isHeadTracking;

		[Token(Token = "0x4000C8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		private float headTrackingFactor;

		[Token(Token = "0x4000C8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1BC")]
		private float headLatency;

		[Token(Token = "0x4000C8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		private float eyeLatency;

		[Token(Token = "0x4000C8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C4")]
		private float ikWeight;

		[Token(Token = "0x4000C8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		private Animator animator;

		[Token(Token = "0x4000C8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		private bool hasLateUpdateRunThisFrame;

		[Token(Token = "0x4000C90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		private Transform currentHeadTargetPOI;

		[Token(Token = "0x4000C91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		private Transform currentEyeTargetPOI;

		[Token(Token = "0x4000C92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		private Transform nextHeadTargetPOI;

		[Token(Token = "0x4000C93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		private Transform nextEyeTargetPOI;

		[Token(Token = "0x4000C94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		private Transform currentTargetLeftEyeXform;

		[Token(Token = "0x4000C95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		private Transform currentTargetRightEyeXform;

		[Token(Token = "0x4000C96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		private Transform nextTargetLeftEyeXform;

		[Token(Token = "0x4000C97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		private Transform nextTargetRightEyeXform;

		[Token(Token = "0x4000C98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		private readonly Transform[] createdTargetXforms;

		[Token(Token = "0x4000C99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		private int createdTargetXformIndex;

		[Token(Token = "0x4000C9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D0F50", Offset = "0x5D0F50")]
		private Transform <eyesRootXform>k__BackingField;

		[Token(Token = "0x4000C9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D0F60", Offset = "0x5D0F60")]
		private Transform <headParentXform>k__BackingField;

		[Token(Token = "0x4000C9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
		private Transform headTargetPivotXform;

		[Token(Token = "0x4000C9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		private Transform headXform;

		[Token(Token = "0x4000C9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
		private Quaternion leftEyeRootFromAnchorQ;

		[Token(Token = "0x4000C9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
		private Quaternion rightEyeRootFromAnchorQ;

		[Token(Token = "0x4000CA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
		private Quaternion leftAnchorFromEyeRootQ;

		[Token(Token = "0x4000CA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
		private Quaternion rightAnchorFromEyeRootQ;

		[Token(Token = "0x4000CA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
		private Vector3 currentLeftEyeLocalEuler;

		[Token(Token = "0x4000CA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x294")]
		private Vector3 currentRightEyeLocalEuler;

		[Token(Token = "0x4000CA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
		private Quaternion originalLeftEyeLocalQ;

		[Token(Token = "0x4000CA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
		private Quaternion originalRightEyeLocalQ;

		[Token(Token = "0x4000CA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C0")]
		private Quaternion lastLeftEyeLocalRotation;

		[Token(Token = "0x4000CA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D0")]
		private Quaternion lastRightEyeLocalQ;

		[Token(Token = "0x4000CA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E0")]
		private Quaternion headBoneInAvatarQ;

		[Token(Token = "0x4000CA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F0")]
		private Vector3 macroSaccadeTargetLocal;

		[Token(Token = "0x4000CAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2FC")]
		private Vector3 microSaccadeTargetLocal;

		[Token(Token = "0x4000CAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x308")]
		private float timeOfEnteringClearingPhase;

		[Token(Token = "0x4000CAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30C")]
		private float timeOfLastMacroSaccade;

		[Token(Token = "0x4000CAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x310")]
		private float timeToMicroSaccade;

		[Token(Token = "0x4000CAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x314")]
		private float timeToMacroSaccade;

		[Token(Token = "0x4000CAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x318")]
		private bool isInitialized;

		[Token(Token = "0x4000CB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31C")]
		private int lastFrameOfUpdate1;

		[Token(Token = "0x4000CB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x320")]
		private int lastFrameOfUpdate2;

		[Token(Token = "0x4000CB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x324")]
		private HeadSpeed headSpeed;

		[Token(Token = "0x4000CB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x328")]
		private LookTarget lookTarget;

		[Token(Token = "0x4000CB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32C")]
		private FaceLookTarget faceLookTarget;

		[Token(Token = "0x1700007C")]
		public float blink01
		{
			[Token(Token = "0x60009CA")]
			[Address(RVA = "0xA05EB4", Offset = "0xA05EB4", VA = "0xA05EB4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D8D10", Offset = "0x5D8D10")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60009CB")]
			[Address(RVA = "0xA05EBC", Offset = "0xA05EBC", VA = "0xA05EBC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D8D20", Offset = "0x5D8D20")]
			private set
			{
			}
		}

		[Token(Token = "0x1700007D")]
		public float eyeDistance
		{
			[Token(Token = "0x60009CC")]
			[Address(RVA = "0xA05EC4", Offset = "0xA05EC4", VA = "0xA05EC4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D8D30", Offset = "0x5D8D30")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60009CD")]
			[Address(RVA = "0xA05ECC", Offset = "0xA05ECC", VA = "0xA05ECC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D8D40", Offset = "0x5D8D40")]
			private set
			{
			}
		}

		[Token(Token = "0x1700007E")]
		public float eyeDistanceScale
		{
			[Token(Token = "0x60009CE")]
			[Address(RVA = "0xA05ED4", Offset = "0xA05ED4", VA = "0xA05ED4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D8D50", Offset = "0x5D8D50")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60009CF")]
			[Address(RVA = "0xA05EDC", Offset = "0xA05EDC", VA = "0xA05EDC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D8D60", Offset = "0x5D8D60")]
			private set
			{
			}
		}

		[Token(Token = "0x1700007F")]
		public Transform eyesRootXform
		{
			[Token(Token = "0x60009D0")]
			[Address(RVA = "0xA05EE4", Offset = "0xA05EE4", VA = "0xA05EE4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D8D70", Offset = "0x5D8D70")]
			get
			{
				return null;
			}
			[Token(Token = "0x60009D1")]
			[Address(RVA = "0xA05EEC", Offset = "0xA05EEC", VA = "0xA05EEC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D8D80", Offset = "0x5D8D80")]
			private set
			{
			}
		}

		[Token(Token = "0x17000080")]
		public Transform headParentXform
		{
			[Token(Token = "0x60009D2")]
			[Address(RVA = "0xA05EFC", Offset = "0xA05EFC", VA = "0xA05EFC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D8D90", Offset = "0x5D8D90")]
			get
			{
				return null;
			}
			[Token(Token = "0x60009D3")]
			[Address(RVA = "0xA05F04", Offset = "0xA05F04", VA = "0xA05F04")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D8DA0", Offset = "0x5D8DA0")]
			private set
			{
			}
		}

		[Token(Token = "0x14000005")]
		public event Action OnCannotGetTargetIntoView
		{
			[Token(Token = "0x60009C2")]
			[Address(RVA = "0xA059B4", Offset = "0xA059B4", VA = "0xA059B4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D8C90", Offset = "0x5D8C90")]
			add
			{
			}
			[Token(Token = "0x60009C3")]
			[Address(RVA = "0xA05A54", Offset = "0xA05A54", VA = "0xA05A54")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D8CA0", Offset = "0x5D8CA0")]
			remove
			{
			}
		}

		[Token(Token = "0x14000006")]
		public event Action OnTargetDestroyed
		{
			[Token(Token = "0x60009C4")]
			[Address(RVA = "0xA05AF4", Offset = "0xA05AF4", VA = "0xA05AF4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D8CB0", Offset = "0x5D8CB0")]
			add
			{
			}
			[Token(Token = "0x60009C5")]
			[Address(RVA = "0xA05B94", Offset = "0xA05B94", VA = "0xA05B94")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D8CC0", Offset = "0x5D8CC0")]
			remove
			{
			}
		}

		[Token(Token = "0x14000007")]
		public event Action OnTargetOutOfSight
		{
			[Token(Token = "0x60009C6")]
			[Address(RVA = "0xA05C34", Offset = "0xA05C34", VA = "0xA05C34")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D8CD0", Offset = "0x5D8CD0")]
			add
			{
			}
			[Token(Token = "0x60009C7")]
			[Address(RVA = "0xA05CD4", Offset = "0xA05CD4", VA = "0xA05CD4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D8CE0", Offset = "0x5D8CE0")]
			remove
			{
			}
		}

		[Token(Token = "0x14000008")]
		public event Action OnUpdate2Finished
		{
			[Token(Token = "0x60009C8")]
			[Address(RVA = "0xA05D74", Offset = "0xA05D74", VA = "0xA05D74")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D8CF0", Offset = "0x5D8CF0")]
			add
			{
			}
			[Token(Token = "0x60009C9")]
			[Address(RVA = "0xA05E14", Offset = "0xA05E14", VA = "0xA05E14")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D8D00", Offset = "0x5D8D00")]
			remove
			{
			}
		}

		[Token(Token = "0x60009D4")]
		[Address(RVA = "0xA05F14", Offset = "0xA05F14", VA = "0xA05F14")]
		private void Awake()
		{
		}

		[Token(Token = "0x60009D5")]
		[Address(RVA = "0xA071BC", Offset = "0xA071BC", VA = "0xA071BC")]
		public void Blink(bool isShortBlink = true)
		{
		}

		[Token(Token = "0x60009D6")]
		[Address(RVA = "0xA07208", Offset = "0xA07208", VA = "0xA07208")]
		public bool CanGetIntoView(Vector3 point)
		{
			return default(bool);
		}

		[Token(Token = "0x60009D7")]
		[Address(RVA = "0xA07524", Offset = "0xA07524", VA = "0xA07524")]
		public bool CanChangePointOfAttention()
		{
			return default(bool);
		}

		[Token(Token = "0x60009D8")]
		[Address(RVA = "0xA0756C", Offset = "0xA0756C", VA = "0xA0756C")]
		public bool CanImportFromFile(string filename)
		{
			return default(bool);
		}

		[Token(Token = "0x60009D9")]
		[Address(RVA = "0xA077F8", Offset = "0xA077F8", VA = "0xA077F8")]
		private void CheckLatencies()
		{
		}

		[Token(Token = "0x60009DA")]
		[Address(RVA = "0xA07B6C", Offset = "0xA07B6C", VA = "0xA07B6C")]
		private void CheckMacroSaccades()
		{
		}

		[Token(Token = "0x60009DB")]
		[Address(RVA = "0xA08280", Offset = "0xA08280", VA = "0xA08280")]
		private void CheckMicroSaccades()
		{
		}

		[Token(Token = "0x60009DC")]
		[Address(RVA = "0xA088A8", Offset = "0xA088A8", VA = "0xA088A8")]
		private float ClampLeftHorizEyeAngle(float angle)
		{
			return default(float);
		}

		[Token(Token = "0x60009DD")]
		[Address(RVA = "0xA08938", Offset = "0xA08938", VA = "0xA08938")]
		private float ClampRightHorizEyeAngle(float angle)
		{
			return default(float);
		}

		[Token(Token = "0x60009DE")]
		[Address(RVA = "0xA089C8", Offset = "0xA089C8", VA = "0xA089C8")]
		public void ClearLookTarget()
		{
		}

		[Token(Token = "0x60009DF")]
		[Address(RVA = "0xA08B24", Offset = "0xA08B24", VA = "0xA08B24")]
		private void DrawSightlinesInEditor()
		{
		}

		[Token(Token = "0x60009E0")]
		[Address(RVA = "0xA08E50", Offset = "0xA08E50", VA = "0xA08E50")]
		public void ExportToFile(string filename)
		{
		}

		[Token(Token = "0x60009E1")]
		[Address(RVA = "0xA07DF8", Offset = "0xA07DF8", VA = "0xA07DF8")]
		private Vector3 GetCurrentEyeTargetPos()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60009E2")]
		[Address(RVA = "0xA09050", Offset = "0xA09050", VA = "0xA09050")]
		private Vector3 GetCurrentHeadTargetPos()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60009E3")]
		[Address(RVA = "0xA09134", Offset = "0xA09134", VA = "0xA09134")]
		public Vector3 GetHeadDirection()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60009E4")]
		[Address(RVA = "0xA091C4", Offset = "0xA091C4", VA = "0xA091C4")]
		public Vector3 GetLeftEyeDirection()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60009E5")]
		[Address(RVA = "0xA07FD4", Offset = "0xA07FD4", VA = "0xA07FD4")]
		private Vector3 GetLookTargetPosForSocialTriangle(FaceLookTarget playerFaceLookTarget)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60009E6")]
		[Address(RVA = "0xA08A78", Offset = "0xA08A78", VA = "0xA08A78")]
		public Vector3 GetOwnEyeCenter()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60009E7")]
		[Address(RVA = "0xA09320", Offset = "0xA09320", VA = "0xA09320")]
		private Vector3 GetOwnLookDirection()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60009E8")]
		[Address(RVA = "0xA094D8", Offset = "0xA094D8", VA = "0xA094D8")]
		public Vector3 GetRightEyeDirection()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60009E9")]
		[Address(RVA = "0xA09634", Offset = "0xA09634", VA = "0xA09634")]
		public float GetStareAngleMeAtTarget(Vector3 target)
		{
			return default(float);
		}

		[Token(Token = "0x60009EA")]
		[Address(RVA = "0xA096B4", Offset = "0xA096B4", VA = "0xA096B4")]
		public float GetStareAngleTargetAtMe(Transform targetXform)
		{
			return default(float);
		}

		[Token(Token = "0x60009EB")]
		[Address(RVA = "0xA09750", Offset = "0xA09750", VA = "0xA09750")]
		public void ImportFromFile(string filename)
		{
		}

		[Token(Token = "0x60009EC")]
		[Address(RVA = "0xA05F48", Offset = "0xA05F48", VA = "0xA05F48")]
		public void Initialize()
		{
		}

		[Token(Token = "0x60009ED")]
		[Address(RVA = "0xA09B08", Offset = "0xA09B08", VA = "0xA09B08")]
		public bool IsInView(Vector3 target)
		{
			return default(bool);
		}

		[Token(Token = "0x60009EE")]
		[Address(RVA = "0xA09F74", Offset = "0xA09F74", VA = "0xA09F74")]
		public bool IsLookingAtFace()
		{
			return default(bool);
		}

		[Token(Token = "0x60009EF")]
		[Address(RVA = "0xA09F84", Offset = "0xA09F84", VA = "0xA09F84")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60009F0")]
		[Address(RVA = "0xA07370", Offset = "0xA07370", VA = "0xA07370")]
		private float LimitHorizontalHeadAngle(float headAngle)
		{
			return default(float);
		}

		[Token(Token = "0x60009F1")]
		[Address(RVA = "0xA0744C", Offset = "0xA0744C", VA = "0xA0744C")]
		private float LimitVerticalHeadAngle(float headAngle)
		{
			return default(float);
		}

		[Token(Token = "0x60009F2")]
		[Address(RVA = "0xA0A380", Offset = "0xA0A380", VA = "0xA0A380")]
		public void LookAtFace(Transform eyeCenterXform, float headLatency = 0.075f)
		{
		}

		[Token(Token = "0x60009F3")]
		[Address(RVA = "0xA0A408", Offset = "0xA0A408", VA = "0xA0A408")]
		public void LookAtFace(Transform leftEyeXform, Transform rightEyeXform, float headLatency = 0.075f)
		{
		}

		[Token(Token = "0x60009F4")]
		[Address(RVA = "0xA0A488", Offset = "0xA0A488", VA = "0xA0A488")]
		public void LookAtSpecificThing(Transform poi, float headLatency = 0.075f)
		{
		}

		[Token(Token = "0x60009F5")]
		[Address(RVA = "0xA0A500", Offset = "0xA0A500", VA = "0xA0A500")]
		public void LookAtSpecificThing(Vector3 point, float headLatency = 0.075f)
		{
		}

		[Token(Token = "0x60009F6")]
		[Address(RVA = "0xA0A5A0", Offset = "0xA0A5A0", VA = "0xA0A5A0")]
		public void LookAtAreaAround(Transform poi)
		{
		}

		[Token(Token = "0x60009F7")]
		[Address(RVA = "0xA08A94", Offset = "0xA08A94", VA = "0xA08A94")]
		public void LookAtAreaAround(Vector3 point)
		{
		}

		[Token(Token = "0x60009F8")]
		[Address(RVA = "0xA0A644", Offset = "0xA0A644", VA = "0xA0A644")]
		private void OnAnimatorIK()
		{
		}

		[Token(Token = "0x60009F9")]
		[Address(RVA = "0xA0A740", Offset = "0xA0A740", VA = "0xA0A740")]
		private void OnCreatedXformDestroyed(DestroyNotifier destroyNotifer)
		{
		}

		[Token(Token = "0x60009FA")]
		[Address(RVA = "0xA0A85C", Offset = "0xA0A85C", VA = "0xA0A85C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60009FB")]
		[Address(RVA = "0xA0A878", Offset = "0xA0A878", VA = "0xA0A878")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60009FC")]
		[Address(RVA = "0xA07EDC", Offset = "0xA07EDC", VA = "0xA07EDC")]
		private void SetMacroSaccadeTarget(Vector3 targetGlobal)
		{
		}

		[Token(Token = "0x60009FD")]
		[Address(RVA = "0xA08470", Offset = "0xA08470", VA = "0xA08470")]
		private void SetMicroSaccadeTarget(Vector3 targetGlobal)
		{
		}

		[Token(Token = "0x60009FE")]
		[Address(RVA = "0xA0A87C", Offset = "0xA0A87C", VA = "0xA0A87C")]
		private void Start()
		{
		}

		[Token(Token = "0x60009FF")]
		[Address(RVA = "0xA0A880", Offset = "0xA0A880", VA = "0xA0A880")]
		private void StartEyeMovement([Optional] Transform targetXform)
		{
		}

		[Token(Token = "0x6000A00")]
		[Address(RVA = "0xA078B8", Offset = "0xA078B8", VA = "0xA078B8")]
		private void StartHeadMovement([Optional] Transform targetXform)
		{
		}

		[Token(Token = "0x6000A01")]
		[Address(RVA = "0xA0A9B0", Offset = "0xA0A9B0", VA = "0xA0A9B0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A02")]
		[Address(RVA = "0xA09F94", Offset = "0xA09F94", VA = "0xA09F94")]
		public void Update1()
		{
		}

		[Token(Token = "0x6000A03")]
		[Address(RVA = "0xA0B19C", Offset = "0xA0B19C", VA = "0xA0B19C")]
		public void Update2()
		{
		}

		[Token(Token = "0x6000A04")]
		[Address(RVA = "0xA0A9C4", Offset = "0xA0A9C4", VA = "0xA0A9C4")]
		private void UpdateBlinking()
		{
		}

		[Token(Token = "0x6000A05")]
		[Address(RVA = "0xA0ABF4", Offset = "0xA0ABF4", VA = "0xA0ABF4")]
		private void UpdateEyelids()
		{
		}

		[Token(Token = "0x6000A06")]
		[Address(RVA = "0xA0B2AC", Offset = "0xA0B2AC", VA = "0xA0B2AC")]
		private void UpdateEyeMovement()
		{
		}

		[Token(Token = "0x6000A07")]
		[Address(RVA = "0xA0AC30", Offset = "0xA0AC30", VA = "0xA0AC30")]
		private void UpdateHeadMovement()
		{
		}

		[Token(Token = "0x6000A08")]
		[Address(RVA = "0xA0BC38", Offset = "0xA0BC38", VA = "0xA0BC38")]
		public EyeAndHeadAnimator()
		{
		}
	}
	[Token(Token = "0x200019A")]
	public class LookTargetController : MonoBehaviour
	{
		[Token(Token = "0x20003E9")]
		private enum State
		{
			[Token(Token = "0x4001A7A")]
			LookingAtPlayer,
			[Token(Token = "0x4001A7B")]
			LookingAroundIdly,
			[Token(Token = "0x4001A7C")]
			LookingAtPoiDirectly,
			[Token(Token = "0x4001A7D")]
			LookingAwayFromPlayer
		}

		[Token(Token = "0x4000CB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform viveEye;

		[Token(Token = "0x4000CB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform oculusCenter;

		[Token(Token = "0x4000CB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform oculusLeftEye;

		[Token(Token = "0x4000CB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform oculusRightEye;

		[Token(Token = "0x4000CB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5D0F70", Offset = "0x5D0F70")]
		public Transform[] pointsOfInterest;

		[Token(Token = "0x4000CBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5D0FA8", Offset = "0x5D0FA8")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D0FA8", Offset = "0x5D0FA8")]
		public float lookAtPlayerRatio;

		[Token(Token = "0x4000CBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5D0FFC", Offset = "0x5D0FFC")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D0FFC", Offset = "0x5D0FFC")]
		public float stareBackFactor;

		[Token(Token = "0x4000CBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5D1050", Offset = "0x5D1050")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D1050", Offset = "0x5D1050")]
		public float noticePlayerDistance;

		[Token(Token = "0x4000CBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5D10A8", Offset = "0x5D10A8")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D10A8", Offset = "0x5D10A8")]
		public float personalSpaceDistance;

		[Token(Token = "0x4000CBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5D10FC", Offset = "0x5D10FC")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D10FC", Offset = "0x5D10FC")]
		public float minLookTime;

		[Token(Token = "0x4000CBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5D1154", Offset = "0x5D1154")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D1154", Offset = "0x5D1154")]
		public float maxLookTime;

		[Token(Token = "0x4000CC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5D11AC", Offset = "0x5D11AC")]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x5D11AC", Offset = "0x5D11AC")]
		public Transform thirdPersonPlayerEyeCenter;

		[Token(Token = "0x4000CC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5D120C", Offset = "0x5D120C")]
		public bool keepTargetEvenWhenLost;

		[Token(Token = "0x4000CC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x5D1244", Offset = "0x5D1244")]
		public UnityEvent OnStartLookingAtPlayer;

		[Token(Token = "0x4000CC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public UnityEvent OnStopLookingAtPlayer;

		[Token(Token = "0x4000CC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private EyeAndHeadAnimator eyeAndHeadAnimator;

		[Token(Token = "0x4000CC5")]
		private const float minLookAtMeTimeToReact = 4f;

		[Token(Token = "0x4000CC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Transform targetPOI;

		[Token(Token = "0x4000CC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Transform playerEyeCenterXform;

		[Token(Token = "0x4000CC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Transform playerLeftEyeXform;

		[Token(Token = "0x4000CC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Transform playerRightEyeXform;

		[Token(Token = "0x4000CCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Transform usedThirdPersonPlayerEyeCenter;

		[Token(Token = "0x4000CCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private GameObject createdVRParentGO;

		[Token(Token = "0x4000CCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private GameObject createdPlayerEyeCenterGO;

		[Token(Token = "0x4000CCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private GameObject createdPlayerLeftEyeGO;

		[Token(Token = "0x4000CCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private GameObject createdPlayerRightEyeGO;

		[Token(Token = "0x4000CCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private float lastDistanceToPlayer;

		[Token(Token = "0x4000CD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private float playerLookingAtMeTime;

		[Token(Token = "0x4000CD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private float nextChangePOITime;

		[Token(Token = "0x4000CD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private float stareBackDeadtime;

		[Token(Token = "0x4000CD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private float timeOfLastNoticeCheck;

		[Token(Token = "0x4000CD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private float timeOfLastLookBackCheck;

		[Token(Token = "0x4000CD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private float timeOutsideOfAwarenessZone;

		[Token(Token = "0x4000CD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private float timeInsidePersonalSpace;

		[Token(Token = "0x4000CD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private bool useNativeVRSupport;

		[Token(Token = "0x4000CD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE9")]
		private bool useVR;

		[Token(Token = "0x4000CD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEA")]
		private bool isInitialized;

		[Token(Token = "0x4000CDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private State state;

		[Token(Token = "0x6000A09")]
		[Address(RVA = "0xF8E628", Offset = "0xF8E628", VA = "0xF8E628")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000A0A")]
		[Address(RVA = "0xF8E834", Offset = "0xF8E834", VA = "0xF8E834")]
		public void Blink()
		{
		}

		[Token(Token = "0x6000A0B")]
		[Address(RVA = "0xF8E854", Offset = "0xF8E854", VA = "0xF8E854")]
		private void ChangeStateTo(State newState)
		{
		}

		[Token(Token = "0x6000A0C")]
		[Address(RVA = "0xF8E8B0", Offset = "0xF8E8B0", VA = "0xF8E8B0")]
		private Vector3 ChooseNextHeadTargetPoint()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000A0D")]
		[Address(RVA = "0xF8EA08", Offset = "0xF8EA08", VA = "0xF8EA08")]
		private Transform ChooseNextHeadTargetPOI()
		{
			return null;
		}

		[Token(Token = "0x6000A0E")]
		[Address(RVA = "0xF8ED28", Offset = "0xF8ED28", VA = "0xF8ED28")]
		public void ClearLookTarget()
		{
		}

		[Token(Token = "0x6000A0F")]
		[Address(RVA = "0xF8ED60", Offset = "0xF8ED60", VA = "0xF8ED60")]
		private Transform FindPlayerCamera()
		{
			return null;
		}

		[Token(Token = "0x6000A10")]
		[Address(RVA = "0xF8EF18", Offset = "0xF8EF18", VA = "0xF8EF18")]
		public void Initialize()
		{
		}

		[Token(Token = "0x6000A11")]
		[Address(RVA = "0xF8F3C0", Offset = "0xF8F3C0", VA = "0xF8F3C0")]
		public bool IsLookingAtPlayer()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A12")]
		[Address(RVA = "0xF8F3D0", Offset = "0xF8F3D0", VA = "0xF8F3D0")]
		public bool IsPlayerInView()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A13")]
		[Address(RVA = "0xF8F478", Offset = "0xF8F478", VA = "0xF8F478")]
		public void LookAtPlayer(float duration = -1f, float headLatency = 0.075f)
		{
		}

		[Token(Token = "0x6000A14")]
		[Address(RVA = "0xF8F264", Offset = "0xF8F264", VA = "0xF8F264")]
		public void LookAroundIdly()
		{
		}

		[Token(Token = "0x6000A15")]
		[Address(RVA = "0xF8F5F0", Offset = "0xF8F5F0", VA = "0xF8F5F0")]
		public void LookAtPoiDirectly(Transform poiXform, float duration = -1f, float headLatency = 0.075f)
		{
		}

		[Token(Token = "0x6000A16")]
		[Address(RVA = "0xF8F670", Offset = "0xF8F670", VA = "0xF8F670")]
		public void LookAtPoiDirectly(Vector3 poi, float duration = -1f, float headLatency = 0.075f)
		{
		}

		[Token(Token = "0x6000A17")]
		[Address(RVA = "0xF8F6F0", Offset = "0xF8F6F0", VA = "0xF8F6F0")]
		private void LookAwayFromPlayer()
		{
		}

		[Token(Token = "0x6000A18")]
		[Address(RVA = "0xF8F8F4", Offset = "0xF8F8F4", VA = "0xF8F8F4")]
		private void OnCannotGetTargetIntoView()
		{
		}

		[Token(Token = "0x6000A19")]
		[Address(RVA = "0xF8F9F4", Offset = "0xF8F9F4", VA = "0xF8F9F4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000A1A")]
		[Address(RVA = "0xF8FBEC", Offset = "0xF8FBEC", VA = "0xF8FBEC")]
		private void OnPlayerEyesParentDestroyed(DestroyNotifier destroyNotifier)
		{
		}

		[Token(Token = "0x6000A1B")]
		[Address(RVA = "0xF8FD78", Offset = "0xF8FD78", VA = "0xF8FD78")]
		private void OnSceneLoaded(Scene scene, LoadSceneMode loadSceneMode)
		{
		}

		[Token(Token = "0x6000A1C")]
		[Address(RVA = "0xF8FD80", Offset = "0xF8FD80", VA = "0xF8FD80")]
		private void OnTargetDestroyed()
		{
		}

		[Token(Token = "0x6000A1D")]
		[Address(RVA = "0xF8F960", Offset = "0xF8F960", VA = "0xF8F960")]
		private void OnTargetLost()
		{
		}

		[Token(Token = "0x6000A1E")]
		[Address(RVA = "0xF8FD84", Offset = "0xF8FD84", VA = "0xF8FD84")]
		private void OnTargetOutOfSight()
		{
		}

		[Token(Token = "0x6000A1F")]
		[Address(RVA = "0xF8FD98", Offset = "0xF8FD98", VA = "0xF8FD98")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A20")]
		[Address(RVA = "0xF8FDA8", Offset = "0xF8FDA8", VA = "0xF8FDA8")]
		private void UpdateNativeVREyePositions()
		{
		}

		[Token(Token = "0x6000A21")]
		[Address(RVA = "0xF8FF1C", Offset = "0xF8FF1C", VA = "0xF8FF1C")]
		private void UpdatePlayerEyeTransformReferences()
		{
		}

		[Token(Token = "0x6000A22")]
		[Address(RVA = "0xF9028C", Offset = "0xF9028C", VA = "0xF9028C")]
		private void VeryLateUpdate()
		{
		}

		[Token(Token = "0x6000A23")]
		[Address(RVA = "0xF908AC", Offset = "0xF908AC", VA = "0xF908AC")]
		public LookTargetController()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200019B")]
	public struct SerializableQuaternion
	{
		[Token(Token = "0x4000CDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float x;

		[Token(Token = "0x4000CDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float y;

		[Token(Token = "0x4000CDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float z;

		[Token(Token = "0x4000CDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float w;

		[Token(Token = "0x6000A24")]
		[Address(RVA = "0xA0C4F8", Offset = "0xA0C4F8", VA = "0xA0C4F8")]
		public SerializableQuaternion(float rX, float rY, float rZ, float rW)
		{
		}

		[Token(Token = "0x6000A25")]
		[Address(RVA = "0xA0C504", Offset = "0xA0C504", VA = "0xA0C504", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000A26")]
		[Address(RVA = "0xA0C6EC", Offset = "0xA0C6EC", VA = "0xA0C6EC")]
		public static implicit operator Quaternion(SerializableQuaternion rValue)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000A27")]
		[Address(RVA = "0xA0C71C", Offset = "0xA0C71C", VA = "0xA0C71C")]
		public static implicit operator SerializableQuaternion(Quaternion rValue)
		{
			return default(SerializableQuaternion);
		}
	}
	[Serializable]
	[Token(Token = "0x200019C")]
	public struct SerializableVector3
	{
		[Token(Token = "0x4000CDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float x;

		[Token(Token = "0x4000CE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float y;

		[Token(Token = "0x4000CE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float z;

		[Token(Token = "0x6000A28")]
		[Address(RVA = "0xA0C720", Offset = "0xA0C720", VA = "0xA0C720")]
		public SerializableVector3(float rX, float rY, float rZ)
		{
		}

		[Token(Token = "0x6000A29")]
		[Address(RVA = "0xA0C72C", Offset = "0xA0C72C", VA = "0xA0C72C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000A2A")]
		[Address(RVA = "0xA0C7F4", Offset = "0xA0C7F4", VA = "0xA0C7F4")]
		public static implicit operator Vector3(SerializableVector3 rValue)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000A2B")]
		[Address(RVA = "0xA0C7F8", Offset = "0xA0C7F8", VA = "0xA0C7F8")]
		public static implicit operator SerializableVector3(Vector3 rValue)
		{
			return default(SerializableVector3);
		}
	}
	[Token(Token = "0x200019D")]
	public class Utils
	{
		[Token(Token = "0x4000CE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Dictionary<string, GameObject> dummyObjects;

		[Token(Token = "0x6000A2C")]
		[Address(RVA = "0xD0B2DC", Offset = "0xD0B2DC", VA = "0xD0B2DC")]
		public static bool CanGetTransformFromPath(Transform startXform, string path)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A2D")]
		[Address(RVA = "0xD0B494", Offset = "0xD0B494", VA = "0xD0B494")]
		public static float EaseSineIn(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6000A2E")]
		[Address(RVA = "0xD0B4D4", Offset = "0xD0B4D4", VA = "0xD0B4D4")]
		public static float Fbm(Vector2 coord, int octave)
		{
			return default(float);
		}

		[Token(Token = "0x6000A2F")]
		[Address(RVA = "0xD0B564", Offset = "0xD0B564", VA = "0xD0B564")]
		public static GameObject FindChildInHierarchy(GameObject go, string name)
		{
			return null;
		}

		[Token(Token = "0x6000A30")]
		[Address(RVA = "0xD0B8E8", Offset = "0xD0B8E8", VA = "0xD0B8E8")]
		public static Transform GetCommonAncestor(Transform xform1, Transform xform2)
		{
			return null;
		}

		[Token(Token = "0x6000A31")]
		[Address(RVA = "0xD0BAAC", Offset = "0xD0BAAC", VA = "0xD0BAAC")]
		public static string GetPathForTransform(Transform startXform, Transform targetXform)
		{
			return null;
		}

		[Token(Token = "0x6000A32")]
		[Address(RVA = "0xD0B440", Offset = "0xD0B440", VA = "0xD0B440")]
		public static Transform GetTransformFromPath(Transform startXform, string path)
		{
			return null;
		}

		[Token(Token = "0x6000A33")]
		[Address(RVA = "0xD0BC50", Offset = "0xD0BC50", VA = "0xD0BC50")]
		public static bool IsEqualOrDescendant(Transform ancestor, Transform descendant)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A34")]
		[Address(RVA = "0xD0BFB4", Offset = "0xD0BFB4", VA = "0xD0BFB4")]
		public static float NormalizedDegAngle(float degrees)
		{
			return default(float);
		}

		[Token(Token = "0x6000A35")]
		[Address(RVA = "0xD0C008", Offset = "0xD0C008", VA = "0xD0C008")]
		public static void PlaceDummyObject(string name, Vector3 pos, float scale = 0.1f, [Optional] Quaternion? rotation)
		{
		}

		[Token(Token = "0x6000A36")]
		[Address(RVA = "0xD0C33C", Offset = "0xD0C33C", VA = "0xD0C33C")]
		public Utils()
		{
		}
	}
}
namespace ProBuilder2.Examples
{
	[Token(Token = "0x200019E")]
	public class CameraControls : MonoBehaviour
	{
		[Token(Token = "0x4000CE3")]
		private const string INPUT_MOUSE_SCROLLWHEEL = "Mouse ScrollWheel";

		[Token(Token = "0x4000CE4")]
		private const string INPUT_MOUSE_X = "Mouse X";

		[Token(Token = "0x4000CE5")]
		private const string INPUT_MOUSE_Y = "Mouse Y";

		[Token(Token = "0x4000CE6")]
		private const float MIN_CAM_DISTANCE = 10f;

		[Token(Token = "0x4000CE7")]
		private const float MAX_CAM_DISTANCE = 40f;

		[Token(Token = "0x4000CE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D127C", Offset = "0x5D127C")]
		public float orbitSpeed;

		[Token(Token = "0x4000CE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D1294", Offset = "0x5D1294")]
		public float zoomSpeed;

		[Token(Token = "0x4000CEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float distance;

		[Token(Token = "0x4000CEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float idleRotation;

		[Token(Token = "0x4000CEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector2 dir;

		[Token(Token = "0x6000A38")]
		[Address(RVA = "0x10A49D0", Offset = "0x10A49D0", VA = "0x10A49D0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A39")]
		[Address(RVA = "0x10A4A4C", Offset = "0x10A4A4C", VA = "0x10A4A4C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000A3A")]
		[Address(RVA = "0x10A4D50", Offset = "0x10A4D50", VA = "0x10A4D50")]
		public CameraControls()
		{
		}
	}
}
namespace MirzaBeig.Shaders.ImageEffects
{
	[Serializable]
	[Token(Token = "0x200019F")]
	[ExecuteInEditMode]
	public class Sharpen : IEBase
	{
		[Token(Token = "0x4000CED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D12B0", Offset = "0x5D12B0")]
		public float strength;

		[Token(Token = "0x4000CEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D12C8", Offset = "0x5D12C8")]
		public float edgeMult;

		[Token(Token = "0x6000A3B")]
		[Address(RVA = "0xA0DEC0", Offset = "0xA0DEC0", VA = "0xA0DEC0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000A3C")]
		[Address(RVA = "0xA0DF1C", Offset = "0xA0DF1C", VA = "0xA0DF1C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A3D")]
		[Address(RVA = "0xA0DF20", Offset = "0xA0DF20", VA = "0xA0DF20")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A3E")]
		[Address(RVA = "0xA0DF24", Offset = "0xA0DF24", VA = "0xA0DF24")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000A3F")]
		[Address(RVA = "0xA0DFE0", Offset = "0xA0DFE0", VA = "0xA0DFE0")]
		public Sharpen()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001A0")]
	[ExecuteInEditMode]
	public class IEBase : MonoBehaviour
	{
		[Token(Token = "0x4000CEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Material _material;

		[Token(Token = "0x4000CF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D12E0", Offset = "0x5D12E0")]
		private Shader <shader>k__BackingField;

		[Token(Token = "0x4000CF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Camera _camera;

		[Token(Token = "0x17000081")]
		protected Material material
		{
			[Token(Token = "0x6000A40")]
			[Address(RVA = "0xA50D38", Offset = "0xA50D38", VA = "0xA50D38")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000082")]
		protected Shader shader
		{
			[Token(Token = "0x6000A41")]
			[Address(RVA = "0xA50E10", Offset = "0xA50E10", VA = "0xA50E10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D8DB0", Offset = "0x5D8DB0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A42")]
			[Address(RVA = "0xA50E18", Offset = "0xA50E18", VA = "0xA50E18")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D8DC0", Offset = "0x5D8DC0")]
			set
			{
			}
		}

		[Token(Token = "0x17000083")]
		protected Camera camera
		{
			[Token(Token = "0x6000A43")]
			[Address(RVA = "0xA50E20", Offset = "0xA50E20", VA = "0xA50E20")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A44")]
		[Address(RVA = "0xA50ED0", Offset = "0xA50ED0", VA = "0xA50ED0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000A45")]
		[Address(RVA = "0xA50ED4", Offset = "0xA50ED4", VA = "0xA50ED4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A46")]
		[Address(RVA = "0xA50ED8", Offset = "0xA50ED8", VA = "0xA50ED8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A47")]
		[Address(RVA = "0xA50EDC", Offset = "0xA50EDC", VA = "0xA50EDC")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000A48")]
		[Address(RVA = "0xA50EE0", Offset = "0xA50EE0", VA = "0xA50EE0")]
		protected void blit(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000A49")]
		[Address(RVA = "0xA50F6C", Offset = "0xA50F6C", VA = "0xA50F6C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000A4A")]
		[Address(RVA = "0xA51018", Offset = "0xA51018", VA = "0xA51018")]
		public IEBase()
		{
		}
	}
}
namespace MirzaBeig.Scripting.Effects
{
	[Token(Token = "0x20001A1")]
	public class AttractionParticleAffector : ParticleAffector
	{
		[Token(Token = "0x4000CF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x5D12F0", Offset = "0x5D12F0")]
		public float arrivalRadius;

		[Token(Token = "0x4000CF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public float arrivedRadius;

		[Token(Token = "0x4000CF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private float arrivalRadiusSqr;

		[Token(Token = "0x4000CF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private float arrivedRadiusSqr;

		[Token(Token = "0x6000A4B")]
		[Address(RVA = "0xC1017C", Offset = "0xC1017C", VA = "0xC1017C", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000A4C")]
		[Address(RVA = "0xC10184", Offset = "0xC10184", VA = "0xC10184", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000A4D")]
		[Address(RVA = "0xC1018C", Offset = "0xC1018C", VA = "0xC1018C", Slot = "8")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6000A4E")]
		[Address(RVA = "0xC10194", Offset = "0xC10194", VA = "0xC10194", Slot = "9")]
		protected override void LateUpdate()
		{
		}

		[Token(Token = "0x6000A4F")]
		[Address(RVA = "0xC101E0", Offset = "0xC101E0", VA = "0xC101E0", Slot = "7")]
		protected override Vector3 GetForce()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000A50")]
		[Address(RVA = "0xC1025C", Offset = "0xC1025C", VA = "0xC1025C", Slot = "10")]
		protected override void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000A51")]
		[Address(RVA = "0xC10364", Offset = "0xC10364", VA = "0xC10364")]
		public AttractionParticleAffector()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001A2")]
	public class ParticleAffectorMT : MonoBehaviour
	{
		[Token(Token = "0x4000CF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float force;

		[Token(Token = "0x4000CF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float speed;

		[Token(Token = "0x4000CF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ParticleSystem particleSystem;

		[Token(Token = "0x4000CF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ParticleSystem.Particle[] particles;

		[Token(Token = "0x4000CFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float randomX;

		[Token(Token = "0x4000CFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float randomY;

		[Token(Token = "0x4000CFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float randomZ;

		[Token(Token = "0x4000CFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float offsetX;

		[Token(Token = "0x4000CFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float offsetY;

		[Token(Token = "0x4000CFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float offsetZ;

		[Token(Token = "0x4000D00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float deltaTime;

		[Token(Token = "0x4000D01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Thread t;

		[Token(Token = "0x4000D02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly object locker;

		[Token(Token = "0x4000D03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool processing;

		[Token(Token = "0x4000D04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		private bool isDoneAssigning;

		[Token(Token = "0x6000A52")]
		[Address(RVA = "0x131B2D0", Offset = "0x131B2D0", VA = "0x131B2D0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000A53")]
		[Address(RVA = "0x131B2D4", Offset = "0x131B2D4", VA = "0x131B2D4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A54")]
		[Address(RVA = "0x131B42C", Offset = "0x131B42C", VA = "0x131B42C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000A55")]
		[Address(RVA = "0x131B768", Offset = "0x131B768", VA = "0x131B768")]
		private void process()
		{
		}

		[Token(Token = "0x6000A56")]
		[Address(RVA = "0x131BA2C", Offset = "0x131BA2C", VA = "0x131BA2C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000A57")]
		[Address(RVA = "0x131BA30", Offset = "0x131BA30", VA = "0x131BA30")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x6000A58")]
		[Address(RVA = "0x131BA34", Offset = "0x131BA34", VA = "0x131BA34")]
		public ParticleAffectorMT()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001A3")]
	public class TurbulenceParticleAffectorMT : MonoBehaviour
	{
		[Token(Token = "0x4000D05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float force;

		[Token(Token = "0x4000D06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float speed;

		[Token(Token = "0x4000D07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ParticleSystem particleSystem;

		[Token(Token = "0x4000D08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ParticleSystem.Particle[] particles;

		[Token(Token = "0x4000D09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float randomX;

		[Token(Token = "0x4000D0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float randomY;

		[Token(Token = "0x4000D0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float randomZ;

		[Token(Token = "0x4000D0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float offsetX;

		[Token(Token = "0x4000D0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float offsetY;

		[Token(Token = "0x4000D0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float offsetZ;

		[Token(Token = "0x4000D0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float deltaTime;

		[Token(Token = "0x4000D10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Thread t;

		[Token(Token = "0x4000D11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly object locker;

		[Token(Token = "0x4000D12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool processing;

		[Token(Token = "0x4000D13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		private bool isDoneAssigning;

		[Token(Token = "0x6000A59")]
		[Address(RVA = "0xBCEA98", Offset = "0xBCEA98", VA = "0xBCEA98")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000A5A")]
		[Address(RVA = "0xBCEA9C", Offset = "0xBCEA9C", VA = "0xBCEA9C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A5B")]
		[Address(RVA = "0xBCEBF4", Offset = "0xBCEBF4", VA = "0xBCEBF4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000A5C")]
		[Address(RVA = "0xBCEF30", Offset = "0xBCEF30", VA = "0xBCEF30")]
		private void process()
		{
		}

		[Token(Token = "0x6000A5D")]
		[Address(RVA = "0xBCF1F4", Offset = "0xBCF1F4", VA = "0xBCF1F4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000A5E")]
		[Address(RVA = "0xBCF1F8", Offset = "0xBCF1F8", VA = "0xBCF1F8")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x6000A5F")]
		[Address(RVA = "0xBCF1FC", Offset = "0xBCF1FC", VA = "0xBCF1FC")]
		public TurbulenceParticleAffectorMT()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001A4")]
	public static class Noise
	{
		[Token(Token = "0x4000D14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static float F3;

		[Token(Token = "0x4000D15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static float G3;

		[Token(Token = "0x4000D16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static byte[] perm;

		[Token(Token = "0x6000A60")]
		[Address(RVA = "0x16F80E4", Offset = "0x16F80E4", VA = "0x16F80E4")]
		private static float smooth(float t)
		{
			return default(float);
		}

		[Token(Token = "0x6000A61")]
		[Address(RVA = "0x16F80FC", Offset = "0x16F80FC", VA = "0x16F80FC")]
		private static float fade(float t)
		{
			return default(float);
		}

		[Token(Token = "0x6000A62")]
		[Address(RVA = "0x16F8128", Offset = "0x16F8128", VA = "0x16F8128")]
		private static int floor(float x)
		{
			return default(int);
		}

		[Token(Token = "0x6000A63")]
		[Address(RVA = "0x16F813C", Offset = "0x16F813C", VA = "0x16F813C")]
		private static float lerp(float from, float to, float t)
		{
			return default(float);
		}

		[Token(Token = "0x6000A64")]
		[Address(RVA = "0x16F814C", Offset = "0x16F814C", VA = "0x16F814C")]
		private static float grad(int hash, float x, float y, float z)
		{
			return default(float);
		}

		[Token(Token = "0x6000A65")]
		[Address(RVA = "0x16F81BC", Offset = "0x16F81BC", VA = "0x16F81BC")]
		public static float perlin(float x, float y, float z)
		{
			return default(float);
		}

		[Token(Token = "0x6000A66")]
		[Address(RVA = "0x16F8C0C", Offset = "0x16F8C0C", VA = "0x16F8C0C")]
		public static float simplex(float x, float y, float z)
		{
			return default(float);
		}

		[Token(Token = "0x6000A67")]
		[Address(RVA = "0x16F93C4", Offset = "0x16F93C4", VA = "0x16F93C4")]
		public static float octavePerlin(float x, float y, float z, float frequency, int octaves, float lacunarity, float persistence)
		{
			return default(float);
		}

		[Token(Token = "0x6000A68")]
		[Address(RVA = "0x16F94F8", Offset = "0x16F94F8", VA = "0x16F94F8")]
		public static float octaveSimplex(float x, float y, float z, float frequency, int octaves, float lacunarity, float persistence)
		{
			return default(float);
		}

		[Token(Token = "0x6000A69")]
		[Address(RVA = "0x16F962C", Offset = "0x16F962C", VA = "0x16F962C")]
		public static float perlinUnoptimized(float x, float y, float z)
		{
			return default(float);
		}

		[Token(Token = "0x6000A6A")]
		[Address(RVA = "0x16F99F8", Offset = "0x16F99F8", VA = "0x16F99F8")]
		public static float simplexUnoptimized(float x, float y, float z)
		{
			return default(float);
		}
	}
	[Token(Token = "0x20001A5")]
	public abstract class ParticleAffector : MonoBehaviour
	{
		[Token(Token = "0x20003EA")]
		protected struct GetForceParameters
		{
			[Token(Token = "0x4001A7E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public float distanceToAffectorCenterSqr;

			[Token(Token = "0x4001A7F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public Vector3 scaledDirectionToAffectorCenter;

			[Token(Token = "0x4001A80")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3 particlePosition;
		}

		[Token(Token = "0x4000D17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x5D1328", Offset = "0x5D1328")]
		public float radius;

		[Token(Token = "0x4000D18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float force;

		[Token(Token = "0x4000D19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 offset;

		[Token(Token = "0x4000D1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float _radius;

		[Token(Token = "0x4000D1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float radiusSqr;

		[Token(Token = "0x4000D1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float forceDeltaTime;

		[Token(Token = "0x4000D1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 transformPosition;

		[Token(Token = "0x4000D1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float[] particleSystemExternalForcesMultipliers;

		[Token(Token = "0x4000D1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AnimationCurve scaleForceByDistance;

		[Token(Token = "0x4000D20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private ParticleSystem particleSystem;

		[Token(Token = "0x4000D21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public List<ParticleSystem> _particleSystems;

		[Token(Token = "0x4000D22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int particleSystemsCount;

		[Token(Token = "0x4000D23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private List<ParticleSystem> particleSystems;

		[Token(Token = "0x4000D24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private ParticleSystem.Particle[][] particleSystemParticles;

		[Token(Token = "0x4000D25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private ParticleSystem.MainModule[] particleSystemMainModules;

		[Token(Token = "0x4000D26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Renderer[] particleSystemRenderers;

		[Token(Token = "0x4000D27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected ParticleSystem currentParticleSystem;

		[Token(Token = "0x4000D28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected GetForceParameters parameters;

		[Token(Token = "0x4000D29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public bool alwaysUpdate;

		[Token(Token = "0x17000084")]
		public float scaledRadius
		{
			[Token(Token = "0x6000A6C")]
			[Address(RVA = "0x131A190", Offset = "0x131A190", VA = "0x131A190")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000A6D")]
		[Address(RVA = "0x131A1C8", Offset = "0x131A1C8", VA = "0x131A1C8", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000A6E")]
		[Address(RVA = "0x131A1CC", Offset = "0x131A1CC", VA = "0x131A1CC", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000A6F")]
		[Address(RVA = "0x131A228", Offset = "0x131A228", VA = "0x131A228", Slot = "6")]
		protected virtual void PerParticleSystemSetup()
		{
		}

		[Token(Token = "0x6000A70")]
		[Address(RVA = "0x131A22C", Offset = "0x131A22C", VA = "0x131A22C", Slot = "7")]
		protected virtual Vector3 GetForce()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000A71")]
		[Address(RVA = "0x131A234", Offset = "0x131A234", VA = "0x131A234", Slot = "8")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000A72")]
		[Address(RVA = "0x131A238", Offset = "0x131A238", VA = "0x131A238")]
		public void AddParticleSystem(ParticleSystem particleSystem)
		{
		}

		[Token(Token = "0x6000A73")]
		[Address(RVA = "0x131A29C", Offset = "0x131A29C", VA = "0x131A29C")]
		public void RemoveParticleSystem(ParticleSystem particleSystem)
		{
		}

		[Token(Token = "0x6000A74")]
		[Address(RVA = "0x131A300", Offset = "0x131A300", VA = "0x131A300", Slot = "9")]
		protected virtual void LateUpdate()
		{
		}

		[Token(Token = "0x6000A75")]
		[Address(RVA = "0x131B088", Offset = "0x131B088", VA = "0x131B088")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x6000A76")]
		[Address(RVA = "0x131B08C", Offset = "0x131B08C", VA = "0x131B08C", Slot = "10")]
		protected virtual void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000A77")]
		[Address(RVA = "0x131B114", Offset = "0x131B114", VA = "0x131B114")]
		protected ParticleAffector()
		{
		}
	}
	[Token(Token = "0x20001A6")]
	public class TurbulenceParticleAffector : ParticleAffector
	{
		[Token(Token = "0x20003EB")]
		public enum NoiseType
		{
			[Token(Token = "0x4001A82")]
			PseudoPerlin,
			[Token(Token = "0x4001A83")]
			Perlin,
			[Token(Token = "0x4001A84")]
			Simplex,
			[Token(Token = "0x4001A85")]
			OctavePerlin,
			[Token(Token = "0x4001A86")]
			OctaveSimplex
		}

		[Token(Token = "0x4000D2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x5D1360", Offset = "0x5D1360")]
		public float speed;

		[Token(Token = "0x4000D2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D1398", Offset = "0x5D1398")]
		public float frequency;

		[Token(Token = "0x4000D2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public NoiseType noiseType;

		[Token(Token = "0x4000D2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x5D13B0", Offset = "0x5D13B0")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D13B0", Offset = "0x5D13B0")]
		public int octaves;

		[Token(Token = "0x4000D2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D1404", Offset = "0x5D1404")]
		public float lacunarity;

		[Token(Token = "0x4000D2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D141C", Offset = "0x5D141C")]
		public float persistence;

		[Token(Token = "0x4000D30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private float time;

		[Token(Token = "0x4000D31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private float randomX;

		[Token(Token = "0x4000D32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private float randomY;

		[Token(Token = "0x4000D33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private float randomZ;

		[Token(Token = "0x4000D34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private float offsetX;

		[Token(Token = "0x4000D35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private float offsetY;

		[Token(Token = "0x4000D36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private float offsetZ;

		[Token(Token = "0x6000A78")]
		[Address(RVA = "0xBCE56C", Offset = "0xBCE56C", VA = "0xBCE56C", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000A79")]
		[Address(RVA = "0xBCE574", Offset = "0xBCE574", VA = "0xBCE574", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000A7A")]
		[Address(RVA = "0xBCE5EC", Offset = "0xBCE5EC", VA = "0xBCE5EC", Slot = "8")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6000A7B")]
		[Address(RVA = "0xBCE61C", Offset = "0xBCE61C", VA = "0xBCE61C", Slot = "9")]
		protected override void LateUpdate()
		{
		}

		[Token(Token = "0x6000A7C")]
		[Address(RVA = "0xBCE64C", Offset = "0xBCE64C", VA = "0xBCE64C", Slot = "7")]
		protected override Vector3 GetForce()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000A7D")]
		[Address(RVA = "0xBCEA3C", Offset = "0xBCEA3C", VA = "0xBCEA3C", Slot = "10")]
		protected override void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000A7E")]
		[Address(RVA = "0xBCEA78", Offset = "0xBCEA78", VA = "0xBCEA78")]
		public TurbulenceParticleAffector()
		{
		}
	}
	[Token(Token = "0x20001A7")]
	public class VortexParticleAffector : ParticleAffector
	{
		[Token(Token = "0x4000D37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Vector3 axisOfRotation;

		[Token(Token = "0x4000D38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x5D1434", Offset = "0x5D1434")]
		public Vector3 axisOfRotationOffset;

		[Token(Token = "0x6000A7F")]
		[Address(RVA = "0xD0F3EC", Offset = "0xD0F3EC", VA = "0xD0F3EC", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000A80")]
		[Address(RVA = "0xD0F3F4", Offset = "0xD0F3F4", VA = "0xD0F3F4", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000A81")]
		[Address(RVA = "0xD0F3FC", Offset = "0xD0F3FC", VA = "0xD0F3FC", Slot = "8")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6000A82")]
		[Address(RVA = "0xD0F404", Offset = "0xD0F404", VA = "0xD0F404", Slot = "9")]
		protected override void LateUpdate()
		{
		}

		[Token(Token = "0x6000A83")]
		[Address(RVA = "0xD0F40C", Offset = "0xD0F40C", VA = "0xD0F40C")]
		private void UpdateAxisOfRotation()
		{
		}

		[Token(Token = "0x6000A84")]
		[Address(RVA = "0xD0F4A0", Offset = "0xD0F4A0", VA = "0xD0F4A0", Slot = "6")]
		protected override void PerParticleSystemSetup()
		{
		}

		[Token(Token = "0x6000A85")]
		[Address(RVA = "0xD0F4A4", Offset = "0xD0F4A4", VA = "0xD0F4A4", Slot = "7")]
		protected override Vector3 GetForce()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000A86")]
		[Address(RVA = "0xD0F4D0", Offset = "0xD0F4D0", VA = "0xD0F4D0", Slot = "10")]
		protected override void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000A87")]
		[Address(RVA = "0xD0F688", Offset = "0xD0F688", VA = "0xD0F688")]
		public VortexParticleAffector()
		{
		}
	}
	[Token(Token = "0x20001A8")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x5CA274", Offset = "0x5CA274")]
	public class ParticleFlocking : MonoBehaviour
	{
		[Token(Token = "0x20003EC")]
		public struct Voxel
		{
			[Token(Token = "0x4001A87")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Bounds bounds;

			[Token(Token = "0x4001A88")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int[] particles;

			[Token(Token = "0x4001A89")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public int particleCount;
		}

		[Token(Token = "0x4000D39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x5D146C", Offset = "0x5D146C")]
		public float maxDistance;

		[Token(Token = "0x4000D3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x5D14A4", Offset = "0x5D14A4")]
		public float cohesion;

		[Token(Token = "0x4000D3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float separation;

		[Token(Token = "0x4000D3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x5D14DC", Offset = "0x5D14DC")]
		public bool useVoxels;

		[Token(Token = "0x4000D3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		public bool voxelLocalCenterFromBounds;

		[Token(Token = "0x4000D3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float voxelVolume;

		[Token(Token = "0x4000D3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int voxelsPerAxis;

		[Token(Token = "0x4000D40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int previousVoxelsPerAxisValue;

		[Token(Token = "0x4000D41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Voxel[] voxels;

		[Token(Token = "0x4000D42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private ParticleSystem particleSystem;

		[Token(Token = "0x4000D43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private ParticleSystem.Particle[] particles;

		[Token(Token = "0x4000D44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Vector3[] particlePositions;

		[Token(Token = "0x4000D45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private ParticleSystem.MainModule particleSystemMainModule;

		[Token(Token = "0x4000D46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x5D1514", Offset = "0x5D1514")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D1514", Offset = "0x5D1514")]
		public float delay;

		[Token(Token = "0x4000D47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float timer;

		[Token(Token = "0x4000D48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool alwaysUpdate;

		[Token(Token = "0x4000D49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		private bool visible;

		[Token(Token = "0x6000A88")]
		[Address(RVA = "0x131D714", Offset = "0x131D714", VA = "0x131D714")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A89")]
		[Address(RVA = "0x131D794", Offset = "0x131D794", VA = "0x131D794")]
		private void OnBecameVisible()
		{
		}

		[Token(Token = "0x6000A8A")]
		[Address(RVA = "0x131D7A0", Offset = "0x131D7A0", VA = "0x131D7A0")]
		private void OnBecameInvisible()
		{
		}

		[Token(Token = "0x6000A8B")]
		[Address(RVA = "0x131D7A8", Offset = "0x131D7A8", VA = "0x131D7A8")]
		private void buildVoxelGrid()
		{
		}

		[Token(Token = "0x6000A8C")]
		[Address(RVA = "0x131D9C0", Offset = "0x131D9C0", VA = "0x131D9C0")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000A8D")]
		[Address(RVA = "0x131E250", Offset = "0x131E250", VA = "0x131E250")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000A8E")]
		[Address(RVA = "0x131E3CC", Offset = "0x131E3CC", VA = "0x131E3CC")]
		public ParticleFlocking()
		{
		}
	}
	[Token(Token = "0x20001A9")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5CA2D4", Offset = "0x5CA2D4")]
	public class AttractionParticleForceField : ParticleForceField
	{
		[Token(Token = "0x4000D4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x5D1568", Offset = "0x5D1568")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5D1568", Offset = "0x5D1568")]
		public float arrivalRadius;

		[Token(Token = "0x4000D4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5D15C8", Offset = "0x5D15C8")]
		public float arrivedRadius;

		[Token(Token = "0x4000D4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private float arrivalRadiusSqr;

		[Token(Token = "0x4000D4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private float arrivedRadiusSqr;

		[Token(Token = "0x6000A8F")]
		[Address(RVA = "0xC10378", Offset = "0xC10378", VA = "0xC10378", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000A90")]
		[Address(RVA = "0xC10380", Offset = "0xC10380", VA = "0xC10380", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000A91")]
		[Address(RVA = "0xC10388", Offset = "0xC10388", VA = "0xC10388", Slot = "8")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6000A92")]
		[Address(RVA = "0xC10390", Offset = "0xC10390", VA = "0xC10390", Slot = "9")]
		protected override void LateUpdate()
		{
		}

		[Token(Token = "0x6000A93")]
		[Address(RVA = "0xC103DC", Offset = "0xC103DC", VA = "0xC103DC", Slot = "7")]
		protected override Vector3 GetForce()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000A94")]
		[Address(RVA = "0xC10458", Offset = "0xC10458", VA = "0xC10458", Slot = "10")]
		protected override void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000A95")]
		[Address(RVA = "0xC10560", Offset = "0xC10560", VA = "0xC10560")]
		public AttractionParticleForceField()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001AA")]
	public static class Noise2
	{
		[Token(Token = "0x4000D4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static float F3;

		[Token(Token = "0x4000D4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static float G3;

		[Token(Token = "0x4000D50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static byte[] perm;

		[Token(Token = "0x6000A96")]
		[Address(RVA = "0x16FA09C", Offset = "0x16FA09C", VA = "0x16FA09C")]
		private static float smooth(float t)
		{
			return default(float);
		}

		[Token(Token = "0x6000A97")]
		[Address(RVA = "0x16FA0B4", Offset = "0x16FA0B4", VA = "0x16FA0B4")]
		private static float fade(float t)
		{
			return default(float);
		}

		[Token(Token = "0x6000A98")]
		[Address(RVA = "0x16FA0E0", Offset = "0x16FA0E0", VA = "0x16FA0E0")]
		private static int floor(float x)
		{
			return default(int);
		}

		[Token(Token = "0x6000A99")]
		[Address(RVA = "0x16FA0F4", Offset = "0x16FA0F4", VA = "0x16FA0F4")]
		private static float lerp(float from, float to, float t)
		{
			return default(float);
		}

		[Token(Token = "0x6000A9A")]
		[Address(RVA = "0x16FA104", Offset = "0x16FA104", VA = "0x16FA104")]
		private static float grad(int hash, float x, float y, float z)
		{
			return default(float);
		}

		[Token(Token = "0x6000A9B")]
		[Address(RVA = "0x16FA174", Offset = "0x16FA174", VA = "0x16FA174")]
		public static float perlin(float x, float y, float z)
		{
			return default(float);
		}

		[Token(Token = "0x6000A9C")]
		[Address(RVA = "0x16FABC4", Offset = "0x16FABC4", VA = "0x16FABC4")]
		public static float simplex(float x, float y, float z)
		{
			return default(float);
		}

		[Token(Token = "0x6000A9D")]
		[Address(RVA = "0x16FB37C", Offset = "0x16FB37C", VA = "0x16FB37C")]
		public static float octavePerlin(float x, float y, float z, float frequency, int octaves, float lacunarity, float persistence)
		{
			return default(float);
		}

		[Token(Token = "0x6000A9E")]
		[Address(RVA = "0x16FB4B0", Offset = "0x16FB4B0", VA = "0x16FB4B0")]
		public static float octaveSimplex(float x, float y, float z, float frequency, int octaves, float lacunarity, float persistence)
		{
			return default(float);
		}

		[Token(Token = "0x6000A9F")]
		[Address(RVA = "0x16FB5E4", Offset = "0x16FB5E4", VA = "0x16FB5E4")]
		public static float perlinUnoptimized(float x, float y, float z)
		{
			return default(float);
		}

		[Token(Token = "0x6000AA0")]
		[Address(RVA = "0x16FB9B0", Offset = "0x16FB9B0", VA = "0x16FB9B0")]
		public static float simplexUnoptimized(float x, float y, float z)
		{
			return default(float);
		}
	}
	[Token(Token = "0x20001AB")]
	public abstract class ParticleForceField : MonoBehaviour
	{
		[Token(Token = "0x20003ED")]
		protected struct GetForceParameters
		{
			[Token(Token = "0x4001A8A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public float distanceToForceFieldCenterSqr;

			[Token(Token = "0x4001A8B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public Vector3 scaledDirectionToForceFieldCenter;

			[Token(Token = "0x4001A8C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3 particlePosition;
		}

		[Token(Token = "0x4000D51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x5D1600", Offset = "0x5D1600")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5D1600", Offset = "0x5D1600")]
		public float radius;

		[Token(Token = "0x4000D52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5D1660", Offset = "0x5D1660")]
		public float force;

		[Token(Token = "0x4000D53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5D1698", Offset = "0x5D1698")]
		public Vector3 center;

		[Token(Token = "0x4000D54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float _radius;

		[Token(Token = "0x4000D55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float radiusSqr;

		[Token(Token = "0x4000D56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float forceDeltaTime;

		[Token(Token = "0x4000D57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 transformPosition;

		[Token(Token = "0x4000D58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float[] particleSystemExternalForcesMultipliers;

		[Token(Token = "0x4000D59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5D16D0", Offset = "0x5D16D0")]
		public AnimationCurve forceOverDistance;

		[Token(Token = "0x4000D5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private ParticleSystem particleSystem;

		[Token(Token = "0x4000D5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5D1708", Offset = "0x5D1708")]
		public List<ParticleSystem> _particleSystems;

		[Token(Token = "0x4000D5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int particleSystemsCount;

		[Token(Token = "0x4000D5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private List<ParticleSystem> particleSystems;

		[Token(Token = "0x4000D5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private ParticleSystem.Particle[][] particleSystemParticles;

		[Token(Token = "0x4000D5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private ParticleSystem.MainModule[] particleSystemMainModules;

		[Token(Token = "0x4000D60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Renderer[] particleSystemRenderers;

		[Token(Token = "0x4000D61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected ParticleSystem currentParticleSystem;

		[Token(Token = "0x4000D62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected GetForceParameters parameters;

		[Token(Token = "0x4000D63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5D1740", Offset = "0x5D1740")]
		public bool alwaysUpdate;

		[Token(Token = "0x17000085")]
		public float scaledRadius
		{
			[Token(Token = "0x6000AA2")]
			[Address(RVA = "0x131E3F8", Offset = "0x131E3F8", VA = "0x131E3F8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000AA3")]
		[Address(RVA = "0x131E430", Offset = "0x131E430", VA = "0x131E430", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000AA4")]
		[Address(RVA = "0x131E434", Offset = "0x131E434", VA = "0x131E434", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000AA5")]
		[Address(RVA = "0x131E490", Offset = "0x131E490", VA = "0x131E490", Slot = "6")]
		protected virtual void PerParticleSystemSetup()
		{
		}

		[Token(Token = "0x6000AA6")]
		[Address(RVA = "0x131E494", Offset = "0x131E494", VA = "0x131E494", Slot = "7")]
		protected virtual Vector3 GetForce()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000AA7")]
		[Address(RVA = "0x131E49C", Offset = "0x131E49C", VA = "0x131E49C", Slot = "8")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000AA8")]
		[Address(RVA = "0x131E4A0", Offset = "0x131E4A0", VA = "0x131E4A0")]
		public void AddParticleSystem(ParticleSystem particleSystem)
		{
		}

		[Token(Token = "0x6000AA9")]
		[Address(RVA = "0x131E504", Offset = "0x131E504", VA = "0x131E504")]
		public void RemoveParticleSystem(ParticleSystem particleSystem)
		{
		}

		[Token(Token = "0x6000AAA")]
		[Address(RVA = "0x131E568", Offset = "0x131E568", VA = "0x131E568", Slot = "9")]
		protected virtual void LateUpdate()
		{
		}

		[Token(Token = "0x6000AAB")]
		[Address(RVA = "0x131F2F0", Offset = "0x131F2F0", VA = "0x131F2F0")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x6000AAC")]
		[Address(RVA = "0x131F2F4", Offset = "0x131F2F4", VA = "0x131F2F4", Slot = "10")]
		protected virtual void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000AAD")]
		[Address(RVA = "0x131F37C", Offset = "0x131F37C", VA = "0x131F37C")]
		protected ParticleForceField()
		{
		}
	}
	[Token(Token = "0x20001AC")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5CA30C", Offset = "0x5CA30C")]
	public class TurbulenceParticleForceField : ParticleForceField
	{
		[Token(Token = "0x20003EE")]
		public enum NoiseType
		{
			[Token(Token = "0x4001A8E")]
			PseudoPerlin,
			[Token(Token = "0x4001A8F")]
			Perlin,
			[Token(Token = "0x4001A90")]
			Simplex,
			[Token(Token = "0x4001A91")]
			OctavePerlin,
			[Token(Token = "0x4001A92")]
			OctaveSimplex
		}

		[Token(Token = "0x4000D64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x5D1778", Offset = "0x5D1778")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5D1778", Offset = "0x5D1778")]
		public float scrollSpeed;

		[Token(Token = "0x4000D65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D17D8", Offset = "0x5D17D8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5D17D8", Offset = "0x5D17D8")]
		public float frequency;

		[Token(Token = "0x4000D66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public NoiseType noiseType;

		[Token(Token = "0x4000D67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x5D182C", Offset = "0x5D182C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D182C", Offset = "0x5D182C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5D182C", Offset = "0x5D182C")]
		public int octaves;

		[Token(Token = "0x4000D68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D18A4", Offset = "0x5D18A4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5D18A4", Offset = "0x5D18A4")]
		public float octaveMultiplier;

		[Token(Token = "0x4000D69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D18F8", Offset = "0x5D18F8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5D18F8", Offset = "0x5D18F8")]
		public float octaveScale;

		[Token(Token = "0x4000D6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private float time;

		[Token(Token = "0x4000D6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private float randomX;

		[Token(Token = "0x4000D6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private float randomY;

		[Token(Token = "0x4000D6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private float randomZ;

		[Token(Token = "0x4000D6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private float offsetX;

		[Token(Token = "0x4000D6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private float offsetY;

		[Token(Token = "0x4000D70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private float offsetZ;

		[Token(Token = "0x6000AAE")]
		[Address(RVA = "0xBCF274", Offset = "0xBCF274", VA = "0xBCF274", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000AAF")]
		[Address(RVA = "0xBCF27C", Offset = "0xBCF27C", VA = "0xBCF27C", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000AB0")]
		[Address(RVA = "0xBCF2F4", Offset = "0xBCF2F4", VA = "0xBCF2F4", Slot = "8")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6000AB1")]
		[Address(RVA = "0xBCF324", Offset = "0xBCF324", VA = "0xBCF324", Slot = "9")]
		protected override void LateUpdate()
		{
		}

		[Token(Token = "0x6000AB2")]
		[Address(RVA = "0xBCF354", Offset = "0xBCF354", VA = "0xBCF354", Slot = "7")]
		protected override Vector3 GetForce()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000AB3")]
		[Address(RVA = "0xBCF744", Offset = "0xBCF744", VA = "0xBCF744", Slot = "10")]
		protected override void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000AB4")]
		[Address(RVA = "0xBCF780", Offset = "0xBCF780", VA = "0xBCF780")]
		public TurbulenceParticleForceField()
		{
		}
	}
	[Token(Token = "0x20001AD")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5CA344", Offset = "0x5CA344")]
	public class VortexParticleForceField : ParticleForceField
	{
		[Token(Token = "0x4000D71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Vector3 axisOfRotation;

		[Token(Token = "0x4000D72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x5D194C", Offset = "0x5D194C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5D194C", Offset = "0x5D194C")]
		public Vector3 axisOfRotationOffset;

		[Token(Token = "0x6000AB5")]
		[Address(RVA = "0xD0F6BC", Offset = "0xD0F6BC", VA = "0xD0F6BC", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000AB6")]
		[Address(RVA = "0xD0F6C4", Offset = "0xD0F6C4", VA = "0xD0F6C4", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000AB7")]
		[Address(RVA = "0xD0F6CC", Offset = "0xD0F6CC", VA = "0xD0F6CC", Slot = "8")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6000AB8")]
		[Address(RVA = "0xD0F6D4", Offset = "0xD0F6D4", VA = "0xD0F6D4", Slot = "9")]
		protected override void LateUpdate()
		{
		}

		[Token(Token = "0x6000AB9")]
		[Address(RVA = "0xD0F6DC", Offset = "0xD0F6DC", VA = "0xD0F6DC")]
		private void UpdateAxisOfRotation()
		{
		}

		[Token(Token = "0x6000ABA")]
		[Address(RVA = "0xD0F770", Offset = "0xD0F770", VA = "0xD0F770", Slot = "6")]
		protected override void PerParticleSystemSetup()
		{
		}

		[Token(Token = "0x6000ABB")]
		[Address(RVA = "0xD0F774", Offset = "0xD0F774", VA = "0xD0F774", Slot = "7")]
		protected override Vector3 GetForce()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000ABC")]
		[Address(RVA = "0xD0F7A0", Offset = "0xD0F7A0", VA = "0xD0F7A0", Slot = "10")]
		protected override void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000ABD")]
		[Address(RVA = "0xD0F910", Offset = "0xD0F910", VA = "0xD0F910")]
		public VortexParticleForceField()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001AE")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x5CA37C", Offset = "0x5CA37C")]
	public class ParticleLights : MonoBehaviour
	{
		[Token(Token = "0x4000D73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ParticleSystem ps;

		[Token(Token = "0x4000D74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<Light> lights;

		[Token(Token = "0x4000D75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float scale;

		[Token(Token = "0x4000D76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D19AC", Offset = "0x5D19AC")]
		public float intensity;

		[Token(Token = "0x4000D77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Color colour;

		[Token(Token = "0x4000D78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D19C4", Offset = "0x5D19C4")]
		public float colourFromParticle;

		[Token(Token = "0x4000D79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public LightShadows shadows;

		[Token(Token = "0x4000D7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private GameObject template;

		[Token(Token = "0x6000ABE")]
		[Address(RVA = "0x1321100", Offset = "0x1321100", VA = "0x1321100")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000ABF")]
		[Address(RVA = "0x1321104", Offset = "0x1321104", VA = "0x1321104")]
		private void Start()
		{
		}

		[Token(Token = "0x6000AC0")]
		[Address(RVA = "0x1321204", Offset = "0x1321204", VA = "0x1321204")]
		private void Update()
		{
		}

		[Token(Token = "0x6000AC1")]
		[Address(RVA = "0x1321208", Offset = "0x1321208", VA = "0x1321208")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000AC2")]
		[Address(RVA = "0x1321674", Offset = "0x1321674", VA = "0x1321674")]
		public ParticleLights()
		{
		}
	}
	[Token(Token = "0x20001AF")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x5CA3DC", Offset = "0x5CA3DC")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5CA3DC", Offset = "0x5CA3DC")]
	public class ParticlePlexus : MonoBehaviour
	{
		[Token(Token = "0x4000D7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float maxDistance;

		[Token(Token = "0x4000D7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int maxConnections;

		[Token(Token = "0x4000D7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int maxLineRenderers;

		[Token(Token = "0x4000D7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D19DC", Offset = "0x5D19DC")]
		public float widthFromParticle;

		[Token(Token = "0x4000D7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D19F4", Offset = "0x5D19F4")]
		public float colourFromParticle;

		[Token(Token = "0x4000D80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D1A0C", Offset = "0x5D1A0C")]
		public float alphaFromParticle;

		[Token(Token = "0x4000D81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private ParticleSystem particleSystem;

		[Token(Token = "0x4000D82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private ParticleSystem.Particle[] particles;

		[Token(Token = "0x4000D83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3[] particlePositions;

		[Token(Token = "0x4000D84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Color[] particleColours;

		[Token(Token = "0x4000D85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float[] particleSizes;

		[Token(Token = "0x4000D86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private ParticleSystem.MainModule particleSystemMainModule;

		[Token(Token = "0x4000D87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public LineRenderer lineRendererTemplate;

		[Token(Token = "0x4000D88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private List<LineRenderer> lineRenderers;

		[Token(Token = "0x4000D89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Transform _transform;

		[Token(Token = "0x4000D8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x5D1A24", Offset = "0x5D1A24")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D1A24", Offset = "0x5D1A24")]
		public float delay;

		[Token(Token = "0x4000D8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float timer;

		[Token(Token = "0x4000D8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public bool alwaysUpdate;

		[Token(Token = "0x4000D8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
		private bool visible;

		[Token(Token = "0x6000AC3")]
		[Address(RVA = "0x11FAF40", Offset = "0x11FAF40", VA = "0x11FAF40")]
		private void Start()
		{
		}

		[Token(Token = "0x6000AC4")]
		[Address(RVA = "0x11FAFE0", Offset = "0x11FAFE0", VA = "0x11FAFE0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000AC5")]
		[Address(RVA = "0x11FB084", Offset = "0x11FB084", VA = "0x11FB084")]
		private void OnBecameVisible()
		{
		}

		[Token(Token = "0x6000AC6")]
		[Address(RVA = "0x11FB090", Offset = "0x11FB090", VA = "0x11FB090")]
		private void OnBecameInvisible()
		{
		}

		[Token(Token = "0x6000AC7")]
		[Address(RVA = "0x11FB098", Offset = "0x11FB098", VA = "0x11FB098")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000AC8")]
		[Address(RVA = "0x11FC014", Offset = "0x11FC014", VA = "0x11FC014")]
		public ParticlePlexus()
		{
		}
	}
	[Token(Token = "0x20001B0")]
	public static class CreateLUT
	{
		[Token(Token = "0x6000AC9")]
		[Address(RVA = "0xCC1848", Offset = "0xCC1848", VA = "0xCC1848")]
		public static void fromGradient(int steps, Gradient gradient, ref Texture2D texture)
		{
		}

		[Token(Token = "0x6000ACA")]
		[Address(RVA = "0xCC19F8", Offset = "0xCC19F8", VA = "0xCC19F8")]
		public static void fromAnimationCurve(int steps, AnimationCurve curve, ref Texture2D texture)
		{
		}
	}
}
namespace MirzaBeig.ParticleSystems
{
	[Token(Token = "0x20001B1")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x5CA460", Offset = "0x5CA460")]
	public class AnimatedLight : MonoBehaviour
	{
		[Token(Token = "0x4000D8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Light light;

		[Token(Token = "0x4000D8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D1A78", Offset = "0x5D1A78")]
		private float <time>k__BackingField;

		[Token(Token = "0x4000D90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float duration;

		[Token(Token = "0x4000D91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool evaluating;

		[Token(Token = "0x4000D92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Gradient colourOverLifetime;

		[Token(Token = "0x4000D93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AnimationCurve intensityOverLifetime;

		[Token(Token = "0x4000D94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool loop;

		[Token(Token = "0x4000D95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		public bool autoDestruct;

		[Token(Token = "0x4000D96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Color startColour;

		[Token(Token = "0x4000D97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float startIntensity;

		[Token(Token = "0x17000086")]
		public float time
		{
			[Token(Token = "0x6000ACB")]
			[Address(RVA = "0xC0D480", Offset = "0xC0D480", VA = "0xC0D480")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D8DD0", Offset = "0x5D8DD0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000ACC")]
			[Address(RVA = "0xC0D488", Offset = "0xC0D488", VA = "0xC0D488")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D8DE0", Offset = "0x5D8DE0")]
			set
			{
			}
		}

		[Token(Token = "0x6000ACD")]
		[Address(RVA = "0xC0D490", Offset = "0xC0D490", VA = "0xC0D490")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000ACE")]
		[Address(RVA = "0xC0D4EC", Offset = "0xC0D4EC", VA = "0xC0D4EC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000ACF")]
		[Address(RVA = "0xC0D5CC", Offset = "0xC0D5CC", VA = "0xC0D5CC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000AD0")]
		[Address(RVA = "0xC0D5D0", Offset = "0xC0D5D0", VA = "0xC0D5D0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000AD1")]
		[Address(RVA = "0xC0D6BC", Offset = "0xC0D6BC", VA = "0xC0D6BC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000AD2")]
		[Address(RVA = "0xC0D85C", Offset = "0xC0D85C", VA = "0xC0D85C")]
		public AnimatedLight()
		{
		}
	}
	[Token(Token = "0x20001B2")]
	public class Billboard : MonoBehaviour
	{
		[Token(Token = "0x6000AD3")]
		[Address(RVA = "0xC141F0", Offset = "0xC141F0", VA = "0xC141F0")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000AD4")]
		[Address(RVA = "0xC14244", Offset = "0xC14244", VA = "0xC14244")]
		public Billboard()
		{
		}
	}
	[Token(Token = "0x20001B3")]
	public class DestroyAfterTime : MonoBehaviour
	{
		[Token(Token = "0x4000D98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float time;

		[Token(Token = "0x6000AD5")]
		[Address(RVA = "0xCCC454", Offset = "0xCCC454", VA = "0xCCC454")]
		private void Start()
		{
		}

		[Token(Token = "0x6000AD6")]
		[Address(RVA = "0xCCC4DC", Offset = "0xCCC4DC", VA = "0xCCC4DC")]
		public DestroyAfterTime()
		{
		}
	}
	[Token(Token = "0x20001B4")]
	public class DestroyOnParticlesDead : ParticleSystems
	{
		[Token(Token = "0x6000AD7")]
		[Address(RVA = "0xCCC694", Offset = "0xCCC694", VA = "0xCCC694", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000AD8")]
		[Address(RVA = "0xCCC69C", Offset = "0xCCC69C", VA = "0xCCC69C", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000AD9")]
		[Address(RVA = "0xCCC728", Offset = "0xCCC728", VA = "0xCCC728")]
		private void onParticleSystemsDead()
		{
		}

		[Token(Token = "0x6000ADA")]
		[Address(RVA = "0xCCC7A0", Offset = "0xCCC7A0", VA = "0xCCC7A0", Slot = "6")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6000ADB")]
		[Address(RVA = "0xCCC7A8", Offset = "0xCCC7A8", VA = "0xCCC7A8", Slot = "7")]
		protected override void LateUpdate()
		{
		}

		[Token(Token = "0x6000ADC")]
		[Address(RVA = "0xCCC7B0", Offset = "0xCCC7B0", VA = "0xCCC7B0")]
		public DestroyOnParticlesDead()
		{
		}
	}
	[Token(Token = "0x20001B5")]
	public class DestroyOnTrailsDestroyed : TrailRenderers
	{
		[Token(Token = "0x6000ADD")]
		[Address(RVA = "0xCCC7B8", Offset = "0xCCC7B8", VA = "0xCCC7B8", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000ADE")]
		[Address(RVA = "0xCCC7C0", Offset = "0xCCC7C0", VA = "0xCCC7C0", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000ADF")]
		[Address(RVA = "0xCCC7C8", Offset = "0xCCC7C8", VA = "0xCCC7C8", Slot = "6")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6000AE0")]
		[Address(RVA = "0xCCC8D4", Offset = "0xCCC8D4", VA = "0xCCC8D4")]
		public DestroyOnTrailsDestroyed()
		{
		}
	}
	[Token(Token = "0x20001B6")]
	public class IgnoreTimeScale : MonoBehaviour
	{
		[Token(Token = "0x4000D99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ParticleSystem particleSystem;

		[Token(Token = "0x6000AE1")]
		[Address(RVA = "0xA51030", Offset = "0xA51030", VA = "0xA51030")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000AE2")]
		[Address(RVA = "0xA51034", Offset = "0xA51034", VA = "0xA51034")]
		private void Start()
		{
		}

		[Token(Token = "0x6000AE3")]
		[Address(RVA = "0xA51090", Offset = "0xA51090", VA = "0xA51090")]
		private void Update()
		{
		}

		[Token(Token = "0x6000AE4")]
		[Address(RVA = "0xA510CC", Offset = "0xA510CC", VA = "0xA510CC")]
		public IgnoreTimeScale()
		{
		}
	}
	[Token(Token = "0x20001B7")]
	public class ParticleSystems : MonoBehaviour
	{
		[Token(Token = "0x20003EF")]
		public delegate void onParticleSystemsDeadEventHandler();

		[Token(Token = "0x4000D9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D1A88", Offset = "0x5D1A88")]
		private ParticleSystem[] <particleSystems>k__BackingField;

		[Token(Token = "0x17000087")]
		public ParticleSystem[] particleSystems
		{
			[Token(Token = "0x6000AE5")]
			[Address(RVA = "0x11FC690", Offset = "0x11FC690", VA = "0x11FC690")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D8DF0", Offset = "0x5D8DF0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000AE6")]
			[Address(RVA = "0x11FC698", Offset = "0x11FC698", VA = "0x11FC698")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D8E00", Offset = "0x5D8E00")]
			set
			{
			}
		}

		[Token(Token = "0x14000009")]
		public event onParticleSystemsDeadEventHandler onParticleSystemsDeadEvent
		{
			[Token(Token = "0x6000AE7")]
			[Address(RVA = "0x11FC6A0", Offset = "0x11FC6A0", VA = "0x11FC6A0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D8E10", Offset = "0x5D8E10")]
			add
			{
			}
			[Token(Token = "0x6000AE8")]
			[Address(RVA = "0x11FC740", Offset = "0x11FC740", VA = "0x11FC740")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D8E20", Offset = "0x5D8E20")]
			remove
			{
			}
		}

		[Token(Token = "0x6000AE9")]
		[Address(RVA = "0x11FC7E0", Offset = "0x11FC7E0", VA = "0x11FC7E0", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000AEA")]
		[Address(RVA = "0x11FC83C", Offset = "0x11FC83C", VA = "0x11FC83C", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000AEB")]
		[Address(RVA = "0x11FC840", Offset = "0x11FC840", VA = "0x11FC840", Slot = "6")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000AEC")]
		[Address(RVA = "0x11FC844", Offset = "0x11FC844", VA = "0x11FC844", Slot = "7")]
		protected virtual void LateUpdate()
		{
		}

		[Token(Token = "0x6000AED")]
		[Address(RVA = "0x11FC980", Offset = "0x11FC980", VA = "0x11FC980")]
		public void reset()
		{
		}

		[Token(Token = "0x6000AEE")]
		[Address(RVA = "0x11FC9F0", Offset = "0x11FC9F0", VA = "0x11FC9F0")]
		public void play()
		{
		}

		[Token(Token = "0x6000AEF")]
		[Address(RVA = "0x11FCA60", Offset = "0x11FCA60", VA = "0x11FCA60")]
		public void pause()
		{
		}

		[Token(Token = "0x6000AF0")]
		[Address(RVA = "0x11FCAD0", Offset = "0x11FCAD0", VA = "0x11FCAD0")]
		public void stop()
		{
		}

		[Token(Token = "0x6000AF1")]
		[Address(RVA = "0x11FCB40", Offset = "0x11FCB40", VA = "0x11FCB40")]
		public void clear()
		{
		}

		[Token(Token = "0x6000AF2")]
		[Address(RVA = "0x11FCBB0", Offset = "0x11FCBB0", VA = "0x11FCBB0")]
		public void setLoop(bool loop)
		{
		}

		[Token(Token = "0x6000AF3")]
		[Address(RVA = "0x11FCC40", Offset = "0x11FCC40", VA = "0x11FCC40")]
		public void setPlaybackSpeed(float speed)
		{
		}

		[Token(Token = "0x6000AF4")]
		[Address(RVA = "0x11FCCD0", Offset = "0x11FCCD0", VA = "0x11FCCD0")]
		public void simulate(float time, bool reset = false)
		{
		}

		[Token(Token = "0x6000AF5")]
		[Address(RVA = "0x11FC88C", Offset = "0x11FC88C", VA = "0x11FC88C")]
		public bool isAlive()
		{
			return default(bool);
		}

		[Token(Token = "0x6000AF6")]
		[Address(RVA = "0x11FCD60", Offset = "0x11FCD60", VA = "0x11FCD60")]
		public bool isPlaying(bool checkAll = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AF7")]
		[Address(RVA = "0x11FCDB4", Offset = "0x11FCDB4", VA = "0x11FCDB4")]
		public int getParticleCount()
		{
			return default(int);
		}

		[Token(Token = "0x6000AF8")]
		[Address(RVA = "0x11FCEA4", Offset = "0x11FCEA4", VA = "0x11FCEA4")]
		public ParticleSystems()
		{
		}
	}
	[Token(Token = "0x20001B8")]
	public class ParticleSystemsSimulationSpeed : ParticleSystems
	{
		[Token(Token = "0x4000D9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float speed;

		[Token(Token = "0x6000AF9")]
		[Address(RVA = "0x11FCEAC", Offset = "0x11FCEAC", VA = "0x11FCEAC", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000AFA")]
		[Address(RVA = "0x11FCEB0", Offset = "0x11FCEB0", VA = "0x11FCEB0", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000AFB")]
		[Address(RVA = "0x11FCEB4", Offset = "0x11FCEB4", VA = "0x11FCEB4", Slot = "6")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6000AFC")]
		[Address(RVA = "0x11FCEBC", Offset = "0x11FCEBC", VA = "0x11FCEBC", Slot = "7")]
		protected override void LateUpdate()
		{
		}

		[Token(Token = "0x6000AFD")]
		[Address(RVA = "0x11FCEC0", Offset = "0x11FCEC0", VA = "0x11FCEC0")]
		public ParticleSystemsSimulationSpeed()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001B9")]
	public class PerlinNoise
	{
		[Token(Token = "0x4000D9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Vector2 offset;

		[Token(Token = "0x4000D9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float amplitude;

		[Token(Token = "0x4000D9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float frequency;

		[Token(Token = "0x4000DA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool unscaledTime;

		[Token(Token = "0x6000AFE")]
		[Address(RVA = "0x1201CC4", Offset = "0x1201CC4", VA = "0x1201CC4")]
		public void init()
		{
		}

		[Token(Token = "0x6000AFF")]
		[Address(RVA = "0x1201D20", Offset = "0x1201D20", VA = "0x1201D20")]
		public float GetValue(float time)
		{
			return default(float);
		}

		[Token(Token = "0x6000B00")]
		[Address(RVA = "0x1201D68", Offset = "0x1201D68", VA = "0x1201D68")]
		public PerlinNoise()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001BA")]
	public class PerlinNoiseXYZ
	{
		[Token(Token = "0x4000DA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PerlinNoise x;

		[Token(Token = "0x4000DA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PerlinNoise y;

		[Token(Token = "0x4000DA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PerlinNoise z;

		[Token(Token = "0x4000DA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool unscaledTime;

		[Token(Token = "0x4000DA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float amplitudeScale;

		[Token(Token = "0x4000DA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float frequencyScale;

		[Token(Token = "0x6000B01")]
		[Address(RVA = "0x1201D78", Offset = "0x1201D78", VA = "0x1201D78")]
		public void init()
		{
		}

		[Token(Token = "0x6000B02")]
		[Address(RVA = "0x1201E40", Offset = "0x1201E40", VA = "0x1201E40")]
		public Vector3 GetXYZ(float time)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000B03")]
		[Address(RVA = "0x1201F28", Offset = "0x1201F28", VA = "0x1201F28")]
		public PerlinNoiseXYZ()
		{
		}
	}
	[Token(Token = "0x20001BB")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x5CA4C0", Offset = "0x5CA4C0")]
	public class RendererSortingOrder : MonoBehaviour
	{
		[Token(Token = "0x4000DA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int sortingOrder;

		[Token(Token = "0x6000B04")]
		[Address(RVA = "0x11F6780", Offset = "0x11F6780", VA = "0x11F6780")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000B05")]
		[Address(RVA = "0x11F6784", Offset = "0x11F6784", VA = "0x11F6784")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B06")]
		[Address(RVA = "0x11F67E4", Offset = "0x11F67E4", VA = "0x11F67E4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B07")]
		[Address(RVA = "0x11F67E8", Offset = "0x11F67E8", VA = "0x11F67E8")]
		public RendererSortingOrder()
		{
		}
	}
	[Token(Token = "0x20001BC")]
	public class Rotator : MonoBehaviour
	{
		[Token(Token = "0x4000DA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 localRotationSpeed;

		[Token(Token = "0x4000DA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector3 worldRotationSpeed;

		[Token(Token = "0x4000DAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool executeInEditMode;

		[Token(Token = "0x4000DAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool unscaledTime;

		[Token(Token = "0x6000B08")]
		[Address(RVA = "0xCD13F8", Offset = "0xCD13F8", VA = "0xCD13F8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000B09")]
		[Address(RVA = "0xCD13FC", Offset = "0xCD13FC", VA = "0xCD13FC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B0A")]
		[Address(RVA = "0xCD1400", Offset = "0xCD1400", VA = "0xCD1400")]
		private void OnRenderObject()
		{
		}

		[Token(Token = "0x6000B0B")]
		[Address(RVA = "0xCD1568", Offset = "0xCD1568", VA = "0xCD1568")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B0C")]
		[Address(RVA = "0xCD1440", Offset = "0xCD1440", VA = "0xCD1440")]
		private void rotate()
		{
		}

		[Token(Token = "0x6000B0D")]
		[Address(RVA = "0xCD15A0", Offset = "0xCD15A0", VA = "0xCD15A0")]
		public Rotator()
		{
		}
	}
	[Token(Token = "0x20001BD")]
	public class TrailRenderers : MonoBehaviour
	{
		[Token(Token = "0x4000DAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public TrailRenderer[] trailRenderers;

		[Token(Token = "0x6000B0E")]
		[Address(RVA = "0xE97020", Offset = "0xE97020", VA = "0xE97020", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000B0F")]
		[Address(RVA = "0xE97024", Offset = "0xE97024", VA = "0xE97024", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000B10")]
		[Address(RVA = "0xE97080", Offset = "0xE97080", VA = "0xE97080", Slot = "6")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000B11")]
		[Address(RVA = "0xE97084", Offset = "0xE97084", VA = "0xE97084")]
		public void setAutoDestruct(bool value)
		{
		}

		[Token(Token = "0x6000B12")]
		[Address(RVA = "0xE97100", Offset = "0xE97100", VA = "0xE97100")]
		public TrailRenderers()
		{
		}
	}
	[Token(Token = "0x20001BE")]
	public class TransformNoise : MonoBehaviour
	{
		[Token(Token = "0x4000DAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PerlinNoiseXYZ positionNoise;

		[Token(Token = "0x4000DAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PerlinNoiseXYZ rotationNoise;

		[Token(Token = "0x4000DAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool unscaledTime;

		[Token(Token = "0x4000DB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float time;

		[Token(Token = "0x6000B13")]
		[Address(RVA = "0xBC925C", Offset = "0xBC925C", VA = "0xBC925C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B14")]
		[Address(RVA = "0xBC9298", Offset = "0xBC9298", VA = "0xBC9298")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B15")]
		[Address(RVA = "0xBC9344", Offset = "0xBC9344", VA = "0xBC9344")]
		public TransformNoise()
		{
		}
	}
}
namespace MirzaBeig.ParticleSystems.Demos
{
	[Serializable]
	[Token(Token = "0x20001BF")]
	public class DemoManager_XPTitles : MonoBehaviour
	{
		[Token(Token = "0x4000DB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private LoopingParticleSystemsManager list;

		[Token(Token = "0x4000DB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Text particleCountText;

		[Token(Token = "0x4000DB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Text currentParticleSystemText;

		[Token(Token = "0x4000DB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Rotator cameraRotator;

		[Token(Token = "0x6000B16")]
		[Address(RVA = "0xCC7BA8", Offset = "0xCC7BA8", VA = "0xCC7BA8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000B17")]
		[Address(RVA = "0xCC7C1C", Offset = "0xCC7C1C", VA = "0xCC7C1C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B18")]
		[Address(RVA = "0xCC7D3C", Offset = "0xCC7D3C", VA = "0xCC7D3C")]
		public void ToggleRotation()
		{
		}

		[Token(Token = "0x6000B19")]
		[Address(RVA = "0xCC7D7C", Offset = "0xCC7D7C", VA = "0xCC7D7C")]
		public void ResetRotation()
		{
		}

		[Token(Token = "0x6000B1A")]
		[Address(RVA = "0xCC7DC0", Offset = "0xCC7DC0", VA = "0xCC7DC0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B1B")]
		[Address(RVA = "0xCC7EBC", Offset = "0xCC7EBC", VA = "0xCC7EBC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000B1C")]
		[Address(RVA = "0xCC7E4C", Offset = "0xCC7E4C", VA = "0xCC7E4C")]
		public void Next()
		{
		}

		[Token(Token = "0x6000B1D")]
		[Address(RVA = "0xCC7E84", Offset = "0xCC7E84", VA = "0xCC7E84")]
		public void previous()
		{
		}

		[Token(Token = "0x6000B1E")]
		[Address(RVA = "0xCC7C8C", Offset = "0xCC7C8C", VA = "0xCC7C8C")]
		private void updateCurrentParticleSystemNameText()
		{
		}

		[Token(Token = "0x6000B1F")]
		[Address(RVA = "0xCC7FDC", Offset = "0xCC7FDC", VA = "0xCC7FDC")]
		public DemoManager_XPTitles()
		{
		}
	}
	[Token(Token = "0x20001C0")]
	public enum CameraShakeTarget
	{
		[Token(Token = "0x4000DB6")]
		Position,
		[Token(Token = "0x4000DB7")]
		Rotation
	}
	[Token(Token = "0x20001C1")]
	public enum CameraShakeAmplitudeCurve
	{
		[Token(Token = "0x4000DB9")]
		Constant,
		[Token(Token = "0x4000DBA")]
		FadeInOut25,
		[Token(Token = "0x4000DBB")]
		FadeInOut50,
		[Token(Token = "0x4000DBC")]
		FadeInOut75
	}
	[Token(Token = "0x20001C2")]
	public enum CameraShakeAmplitudeOverDistanceCurve
	{
		[Token(Token = "0x4000DBE")]
		Constant,
		[Token(Token = "0x4000DBF")]
		LinearFadeIn,
		[Token(Token = "0x4000DC0")]
		LinearFadeOut
	}
	[Token(Token = "0x20001C3")]
	public class CameraShake : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20003F0")]
		public class Shake
		{
			[Token(Token = "0x4001A93")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float amplitude;

			[Token(Token = "0x4001A94")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float frequency;

			[Token(Token = "0x4001A95")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float duration;

			[Token(Token = "0x4001A96")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[HideInInspector]
			public CameraShakeTarget target;

			[Token(Token = "0x4001A97")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private float timeRemaining;

			[Token(Token = "0x4001A98")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			private Vector2 perlinNoiseX;

			[Token(Token = "0x4001A99")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private Vector2 perlinNoiseY;

			[Token(Token = "0x4001A9A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private Vector2 perlinNoiseZ;

			[Token(Token = "0x4001A9B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			[HideInInspector]
			public Vector3 noise;

			[Token(Token = "0x4001A9C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public AnimationCurve amplitudeOverLifetimeCurve;

			[Token(Token = "0x6001A4E")]
			[Address(RVA = "0x7E5388", Offset = "0x7E5388", VA = "0x7E5388")]
			public void Init()
			{
			}

			[Token(Token = "0x6001A4F")]
			[Address(RVA = "0x7E5440", Offset = "0x7E5440", VA = "0x7E5440")]
			private void Init(float amplitude, float frequency, float duration, CameraShakeTarget target)
			{
			}

			[Token(Token = "0x6001A50")]
			[Address(RVA = "0x7E5394", Offset = "0x7E5394", VA = "0x7E5394")]
			public void ApplyRandomSeed()
			{
			}

			[Token(Token = "0x6001A51")]
			[Address(RVA = "0x7E5454", Offset = "0x7E5454", VA = "0x7E5454")]
			public Shake(float amplitude, float frequency, float duration, CameraShakeTarget target, AnimationCurve amplitudeOverLifetimeCurve)
			{
			}

			[Token(Token = "0x6001A52")]
			[Address(RVA = "0x7E5608", Offset = "0x7E5608", VA = "0x7E5608")]
			public Shake(float amplitude, float frequency, float duration, CameraShakeTarget target, CameraShakeAmplitudeCurve amplitudeOverLifetimeCurve)
			{
			}

			[Token(Token = "0x6001A53")]
			[Address(RVA = "0x7E5378", Offset = "0x7E5378", VA = "0x7E5378")]
			public bool IsAlive()
			{
				return default(bool);
			}

			[Token(Token = "0x6001A54")]
			[Address(RVA = "0x7E5B50", Offset = "0x7E5B50", VA = "0x7E5B50")]
			public void Update()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20003F1")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDEBC", Offset = "0x5CDEBC")]
		private sealed class <>c
		{
			[Token(Token = "0x4001A9D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4001A9E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Predicate<Shake> <>9__10_0;

			[Token(Token = "0x6001A56")]
			[Address(RVA = "0x7E5350", Offset = "0x7E5350", VA = "0x7E5350")]
			public <>c()
			{
			}

			[Token(Token = "0x6001A57")]
			[Address(RVA = "0x7E5358", Offset = "0x7E5358", VA = "0x7E5358")]
			internal bool <Update>b__10_0(Shake x)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4000DC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float smoothDampTime;

		[Token(Token = "0x4000DC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private Vector3 smoothDampPositionVelocity;

		[Token(Token = "0x4000DC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float smoothDampRotationVelocityX;

		[Token(Token = "0x4000DC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float smoothDampRotationVelocityY;

		[Token(Token = "0x4000DC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float smoothDampRotationVelocityZ;

		[Token(Token = "0x4000DC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<Shake> shakes;

		[Token(Token = "0x6000B20")]
		[Address(RVA = "0x10A78F4", Offset = "0x10A78F4", VA = "0x10A78F4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B21")]
		[Address(RVA = "0x10A78F8", Offset = "0x10A78F8", VA = "0x10A78F8")]
		public void Add(float amplitude, float frequency, float duration, CameraShakeTarget target, AnimationCurve amplitudeOverLifetimeCurve)
		{
		}

		[Token(Token = "0x6000B22")]
		[Address(RVA = "0x10A79BC", Offset = "0x10A79BC", VA = "0x10A79BC")]
		public void Add(float amplitude, float frequency, float duration, CameraShakeTarget target, CameraShakeAmplitudeCurve amplitudeOverLifetimeCurve)
		{
		}

		[Token(Token = "0x6000B23")]
		[Address(RVA = "0x10A7A80", Offset = "0x10A7A80", VA = "0x10A7A80")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B24")]
		[Address(RVA = "0x10A7E1C", Offset = "0x10A7E1C", VA = "0x10A7E1C")]
		public CameraShake()
		{
		}
	}
	[Token(Token = "0x20001C4")]
	public class DemoManager : MonoBehaviour
	{
		[Token(Token = "0x20003F2")]
		public enum ParticleMode
		{
			[Token(Token = "0x4001AA0")]
			looping,
			[Token(Token = "0x4001AA1")]
			oneshot
		}

		[Token(Token = "0x20003F3")]
		public enum Level
		{
			[Token(Token = "0x4001AA3")]
			none,
			[Token(Token = "0x4001AA4")]
			basic
		}

		[Token(Token = "0x4000DC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform cameraRotationTransform;

		[Token(Token = "0x4000DC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform cameraTranslationTransform;

		[Token(Token = "0x4000DC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 cameraLookAtPosition;

		[Token(Token = "0x4000DCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public MouseFollow mouse;

		[Token(Token = "0x4000DCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 targetCameraPosition;

		[Token(Token = "0x4000DCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 targetCameraRotation;

		[Token(Token = "0x4000DCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector3 cameraPositionStart;

		[Token(Token = "0x4000DCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private Vector3 cameraRotationStart;

		[Token(Token = "0x4000DCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Vector2 input;

		[Token(Token = "0x4000DD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 cameraRotation;

		[Token(Token = "0x4000DD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public float cameraMoveAmount;

		[Token(Token = "0x4000DD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float cameraRotateAmount;

		[Token(Token = "0x4000DD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float cameraMoveSpeed;

		[Token(Token = "0x4000DD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float cameraRotationSpeed;

		[Token(Token = "0x4000DD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public Vector2 cameraAngleLimits;

		[Token(Token = "0x4000DD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public GameObject[] levels;

		[Token(Token = "0x4000DD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Level currentLevel;

		[Token(Token = "0x4000DD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public ParticleMode particleMode;

		[Token(Token = "0x4000DD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public bool advancedRendering;

		[Token(Token = "0x4000DDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Toggle loopingParticleModeToggle;

		[Token(Token = "0x4000DDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public Toggle oneshotParticleModeToggle;

		[Token(Token = "0x4000DDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public Toggle advancedRenderingToggle;

		[Token(Token = "0x4000DDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Toggle[] levelToggles;

		[Token(Token = "0x4000DDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public ToggleGroup levelTogglesContainer;

		[Token(Token = "0x4000DDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private LoopingParticleSystemsManager loopingParticleSystems;

		[Token(Token = "0x4000DE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private OneshotParticleSystemsManager oneshotParticleSystems;

		[Token(Token = "0x4000DE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public GameObject ui;

		[Token(Token = "0x4000DE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public Text particleCountText;

		[Token(Token = "0x4000DE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public Text currentParticleSystemText;

		[Token(Token = "0x4000DE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public Text particleSpawnInstructionText;

		[Token(Token = "0x4000DE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public Slider timeScaleSlider;

		[Token(Token = "0x4000DE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public Text timeScaleSliderValueText;

		[Token(Token = "0x4000DE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public Camera mainCamera;

		[Token(Token = "0x4000DE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public MonoBehaviour[] mainCameraPostEffects;

		[Token(Token = "0x4000DE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private Vector3 cameraPositionSmoothDampVelocity;

		[Token(Token = "0x4000DEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		private Vector3 cameraRotationSmoothDampVelocity;

		[Token(Token = "0x6000B25")]
		[Address(RVA = "0xCC6B9C", Offset = "0xCC6B9C", VA = "0xCC6B9C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000B26")]
		[Address(RVA = "0xCC6C74", Offset = "0xCC6C74", VA = "0xCC6C74")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B27")]
		[Address(RVA = "0xCC72B0", Offset = "0xCC72B0", VA = "0xCC72B0")]
		public void OnTimeScaleSliderValueChanged(float value)
		{
		}

		[Token(Token = "0x6000B28")]
		[Address(RVA = "0xCC6F68", Offset = "0xCC6F68", VA = "0xCC6F68")]
		public void SetToLoopingParticleMode(bool set)
		{
		}

		[Token(Token = "0x6000B29")]
		[Address(RVA = "0xCC7010", Offset = "0xCC7010", VA = "0xCC7010")]
		public void SetToOneshotParticleMode(bool set)
		{
		}

		[Token(Token = "0x6000B2A")]
		[Address(RVA = "0xCC7344", Offset = "0xCC7344", VA = "0xCC7344")]
		public void SetLevel(Level level)
		{
		}

		[Token(Token = "0x6000B2B")]
		[Address(RVA = "0xCC73D4", Offset = "0xCC73D4", VA = "0xCC73D4")]
		public void SetLevelFromToggle(Toggle toggle)
		{
		}

		[Token(Token = "0x6000B2C")]
		[Address(RVA = "0xCC70AC", Offset = "0xCC70AC", VA = "0xCC70AC")]
		public void SetAdvancedRendering(bool value)
		{
		}

		[Token(Token = "0x6000B2D")]
		[Address(RVA = "0xCC745C", Offset = "0xCC745C", VA = "0xCC745C")]
		public static Vector3 DampVector3(Vector3 from, Vector3 to, float speed, float dt)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000B2E")]
		[Address(RVA = "0xCC74D8", Offset = "0xCC74D8", VA = "0xCC74D8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B2F")]
		[Address(RVA = "0xCC7A54", Offset = "0xCC7A54", VA = "0xCC7A54")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000B30")]
		[Address(RVA = "0xCC6F54", Offset = "0xCC6F54", VA = "0xCC6F54")]
		private void ResetCameraTransformTargets()
		{
		}

		[Token(Token = "0x6000B31")]
		[Address(RVA = "0xCC7238", Offset = "0xCC7238", VA = "0xCC7238")]
		private void UpdateCurrentParticleSystemNameText()
		{
		}

		[Token(Token = "0x6000B32")]
		[Address(RVA = "0xCC79B4", Offset = "0xCC79B4", VA = "0xCC79B4")]
		public void Next()
		{
		}

		[Token(Token = "0x6000B33")]
		[Address(RVA = "0xCC7A04", Offset = "0xCC7A04", VA = "0xCC7A04")]
		public void Previous()
		{
		}

		[Token(Token = "0x6000B34")]
		[Address(RVA = "0xCC7B6C", Offset = "0xCC7B6C", VA = "0xCC7B6C")]
		public DemoManager()
		{
		}
	}
	[Token(Token = "0x20001C5")]
	public class FPSDisplay : MonoBehaviour
	{
		[Token(Token = "0x4000DEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float timer;

		[Token(Token = "0x4000DEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float updateTime;

		[Token(Token = "0x4000DED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int frameCount;

		[Token(Token = "0x4000DEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float fpsAccum;

		[Token(Token = "0x4000DEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Text fpsText;

		[Token(Token = "0x6000B35")]
		[Address(RVA = "0xBFA200", Offset = "0xBFA200", VA = "0xBFA200")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000B36")]
		[Address(RVA = "0xBFA204", Offset = "0xBFA204", VA = "0xBFA204")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B37")]
		[Address(RVA = "0xBFA260", Offset = "0xBFA260", VA = "0xBFA260")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B38")]
		[Address(RVA = "0xBFA364", Offset = "0xBFA364", VA = "0xBFA364")]
		public FPSDisplay()
		{
		}
	}
	[Token(Token = "0x20001C6")]
	public class FPSTest : MonoBehaviour
	{
		[Token(Token = "0x4000DF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int targetFPS1;

		[Token(Token = "0x4000DF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int targetFPS2;

		[Token(Token = "0x4000DF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int previousVSyncCount;

		[Token(Token = "0x6000B39")]
		[Address(RVA = "0xBFA374", Offset = "0xBFA374", VA = "0xBFA374")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000B3A")]
		[Address(RVA = "0xBFA378", Offset = "0xBFA378", VA = "0xBFA378")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B3B")]
		[Address(RVA = "0xBFA37C", Offset = "0xBFA37C", VA = "0xBFA37C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B3C")]
		[Address(RVA = "0xBFA3F8", Offset = "0xBFA3F8", VA = "0xBFA3F8")]
		public FPSTest()
		{
		}
	}
	[Token(Token = "0x20001C7")]
	public class LoopingParticleSystemsManager : ParticleManager
	{
		[Token(Token = "0x6000B3D")]
		[Address(RVA = "0xF908F4", Offset = "0xF908F4", VA = "0xF908F4", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000B3E")]
		[Address(RVA = "0xF908FC", Offset = "0xF908FC", VA = "0xF908FC", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000B3F")]
		[Address(RVA = "0xF9098C", Offset = "0xF9098C", VA = "0xF9098C", Slot = "6")]
		public override void Next()
		{
		}

		[Token(Token = "0x6000B40")]
		[Address(RVA = "0xF90A6C", Offset = "0xF90A6C", VA = "0xF90A6C", Slot = "7")]
		public override void Previous()
		{
		}

		[Token(Token = "0x6000B41")]
		[Address(RVA = "0xF90B4C", Offset = "0xF90B4C", VA = "0xF90B4C", Slot = "9")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6000B42")]
		[Address(RVA = "0xF90B54", Offset = "0xF90B54", VA = "0xF90B54", Slot = "8")]
		public override int GetParticleCount()
		{
			return default(int);
		}

		[Token(Token = "0x6000B43")]
		[Address(RVA = "0xF90BC8", Offset = "0xF90BC8", VA = "0xF90BC8")]
		public LoopingParticleSystemsManager()
		{
		}
	}
	[Token(Token = "0x20001C8")]
	public class MouseFollow : MonoBehaviour
	{
		[Token(Token = "0x4000DF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float speed;

		[Token(Token = "0x4000DF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float distanceFromCamera;

		[Token(Token = "0x4000DF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool ignoreTimeScale;

		[Token(Token = "0x6000B44")]
		[Address(RVA = "0xDF5650", Offset = "0xDF5650", VA = "0xDF5650")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000B45")]
		[Address(RVA = "0xDF5654", Offset = "0xDF5654", VA = "0xDF5654")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B46")]
		[Address(RVA = "0xDF5658", Offset = "0xDF5658", VA = "0xDF5658")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B47")]
		[Address(RVA = "0xDF5770", Offset = "0xDF5770", VA = "0xDF5770")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000B48")]
		[Address(RVA = "0xDF5774", Offset = "0xDF5774", VA = "0xDF5774")]
		public MouseFollow()
		{
		}
	}
	[Token(Token = "0x20001C9")]
	public class OneshotParticleSystemsManager : ParticleManager
	{
		[Token(Token = "0x4000DF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public LayerMask mouseRaycastLayerMask;

		[Token(Token = "0x4000DF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<ParticleSystems> spawnedPrefabs;

		[Token(Token = "0x4000DF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D1AB8", Offset = "0x5D1AB8")]
		private bool <disableSpawn>k__BackingField;

		[Token(Token = "0x17000088")]
		public bool disableSpawn
		{
			[Token(Token = "0x6000B49")]
			[Address(RVA = "0x13141E0", Offset = "0x13141E0", VA = "0x13141E0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D8E30", Offset = "0x5D8E30")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000B4A")]
			[Address(RVA = "0x13141E8", Offset = "0x13141E8", VA = "0x13141E8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D8E40", Offset = "0x5D8E40")]
			set
			{
			}
		}

		[Token(Token = "0x6000B4B")]
		[Address(RVA = "0x13141F4", Offset = "0x13141F4", VA = "0x13141F4", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000B4C")]
		[Address(RVA = "0x13141FC", Offset = "0x13141FC", VA = "0x13141FC", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000B4D")]
		[Address(RVA = "0x1314298", Offset = "0x1314298", VA = "0x1314298")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000B4E")]
		[Address(RVA = "0x131429C", Offset = "0x131429C", VA = "0x131429C")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000B4F")]
		[Address(RVA = "0x1314404", Offset = "0x1314404", VA = "0x1314404", Slot = "9")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6000B50")]
		[Address(RVA = "0x131440C", Offset = "0x131440C", VA = "0x131440C")]
		public void InstantiateParticlePrefab(Vector2 mousePosition, float maxDistance)
		{
		}

		[Token(Token = "0x6000B51")]
		[Address(RVA = "0x131471C", Offset = "0x131471C", VA = "0x131471C")]
		public void Randomize()
		{
		}

		[Token(Token = "0x6000B52")]
		[Address(RVA = "0x1314778", Offset = "0x1314778", VA = "0x1314778", Slot = "8")]
		public override int GetParticleCount()
		{
			return default(int);
		}

		[Token(Token = "0x6000B53")]
		[Address(RVA = "0x13148C0", Offset = "0x13148C0", VA = "0x13148C0")]
		public OneshotParticleSystemsManager()
		{
		}
	}
	[Token(Token = "0x20001CA")]
	public class ParticleManager : MonoBehaviour
	{
		[Token(Token = "0x4000DF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected List<ParticleSystems> particlePrefabs;

		[Token(Token = "0x4000DFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int currentParticlePrefabIndex;

		[Token(Token = "0x4000DFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<ParticleSystems> particlePrefabsAppend;

		[Token(Token = "0x4000DFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int prefabNameUnderscoreCountCutoff;

		[Token(Token = "0x4000DFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool disableChildrenAtStart;

		[Token(Token = "0x4000DFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		private bool initialized;

		[Token(Token = "0x6000B54")]
		[Address(RVA = "0x13237C0", Offset = "0x13237C0", VA = "0x13237C0")]
		public void Init()
		{
		}

		[Token(Token = "0x6000B55")]
		[Address(RVA = "0x13141F8", Offset = "0x13141F8", VA = "0x13141F8", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000B56")]
		[Address(RVA = "0x1314288", Offset = "0x1314288", VA = "0x1314288", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000B57")]
		[Address(RVA = "0x13238FC", Offset = "0x13238FC", VA = "0x13238FC", Slot = "6")]
		public virtual void Next()
		{
		}

		[Token(Token = "0x6000B58")]
		[Address(RVA = "0x1323964", Offset = "0x1323964", VA = "0x1323964", Slot = "7")]
		public virtual void Previous()
		{
		}

		[Token(Token = "0x6000B59")]
		[Address(RVA = "0x13239C8", Offset = "0x13239C8", VA = "0x13239C8")]
		public string GetCurrentPrefabName(bool shorten = false)
		{
			return null;
		}

		[Token(Token = "0x6000B5A")]
		[Address(RVA = "0x1323D88", Offset = "0x1323D88", VA = "0x1323D88", Slot = "8")]
		public virtual int GetParticleCount()
		{
			return default(int);
		}

		[Token(Token = "0x6000B5B")]
		[Address(RVA = "0x1314408", Offset = "0x1314408", VA = "0x1314408", Slot = "9")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000B5C")]
		[Address(RVA = "0x13148D8", Offset = "0x13148D8", VA = "0x13148D8")]
		public ParticleManager()
		{
		}
	}
}
namespace MirzaBeig.Demos
{
	[Token(Token = "0x20001CB")]
	public class MouseRotateCamera : MonoBehaviour
	{
		[Token(Token = "0x4000DFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float maxRotation;

		[Token(Token = "0x4000E00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float speed;

		[Token(Token = "0x4000E01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool unscaledTime;

		[Token(Token = "0x6000B5D")]
		[Address(RVA = "0xDF6354", Offset = "0xDF6354", VA = "0xDF6354")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000B5E")]
		[Address(RVA = "0xDF6358", Offset = "0xDF6358", VA = "0xDF6358")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B5F")]
		[Address(RVA = "0xDF635C", Offset = "0xDF635C", VA = "0xDF635C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B60")]
		[Address(RVA = "0xDF6360", Offset = "0xDF6360", VA = "0xDF6360")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000B61")]
		[Address(RVA = "0xDF64BC", Offset = "0xDF64BC", VA = "0xDF64BC")]
		public MouseRotateCamera()
		{
		}
	}
}
namespace MirzaBeig.Demos.Wallpapers
{
	[Token(Token = "0x20001CC")]
	public class GravityClockInteractivityUVFX : MonoBehaviour
	{
		[Token(Token = "0x4000E02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject forceAffectors;

		[Token(Token = "0x4000E03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject forceAffectors2;

		[Token(Token = "0x4000E04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ParticleSystem gravityClockPrefab;

		[Token(Token = "0x4000E05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private ParticleSystem gravityClock;

		[Token(Token = "0x4000E06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool enableGravityClockVisualEffects;

		[Token(Token = "0x4000E07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		public bool enableGravityClockAttractionForce;

		[Token(Token = "0x6000B62")]
		[Address(RVA = "0x13FC50C", Offset = "0x13FC50C", VA = "0x13FC50C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000B63")]
		[Address(RVA = "0x13FC510", Offset = "0x13FC510", VA = "0x13FC510")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B64")]
		[Address(RVA = "0x13FC514", Offset = "0x13FC514", VA = "0x13FC514")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B65")]
		[Address(RVA = "0x13FC518", Offset = "0x13FC518", VA = "0x13FC518")]
		public void SetGravityClockVisualEffectsActive(bool value)
		{
		}

		[Token(Token = "0x6000B66")]
		[Address(RVA = "0x13FC688", Offset = "0x13FC688", VA = "0x13FC688")]
		public void SetGravityClockAttractionForceActive(bool value)
		{
		}

		[Token(Token = "0x6000B67")]
		[Address(RVA = "0x13FC738", Offset = "0x13FC738", VA = "0x13FC738")]
		public GravityClockInteractivityUVFX()
		{
		}
	}
}
namespace MirzaBeig.Demos.ParticlePlayground
{
	[Token(Token = "0x20001CD")]
	public class BillboardCameraPlaneUVFX : MonoBehaviour
	{
		[Token(Token = "0x4000E08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Transform cameraTransform;

		[Token(Token = "0x6000B68")]
		[Address(RVA = "0xC1424C", Offset = "0xC1424C", VA = "0xC1424C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000B69")]
		[Address(RVA = "0xC14250", Offset = "0xC14250", VA = "0xC14250")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B6A")]
		[Address(RVA = "0xC14290", Offset = "0xC14290", VA = "0xC14290")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B6B")]
		[Address(RVA = "0xC14294", Offset = "0xC14294", VA = "0xC14294")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000B6C")]
		[Address(RVA = "0xC142EC", Offset = "0xC142EC", VA = "0xC142EC")]
		public BillboardCameraPlaneUVFX()
		{
		}
	}
}
namespace DigitalOpus.MB.Core
{
	[Token(Token = "0x20001CE")]
	public class MBVersionConcrete : MBVersionInterface
	{
		[Token(Token = "0x4000E09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Vector2 _HALF_UV;

		[Token(Token = "0x6000B6D")]
		[Address(RVA = "0xF43B78", Offset = "0xF43B78", VA = "0xF43B78", Slot = "4")]
		public string version()
		{
			return null;
		}

		[Token(Token = "0x6000B6E")]
		[Address(RVA = "0xF43BBC", Offset = "0xF43BBC", VA = "0xF43BBC", Slot = "5")]
		public int GetMajorVersion()
		{
			return default(int);
		}

		[Token(Token = "0x6000B6F")]
		[Address(RVA = "0xF43C64", Offset = "0xF43C64", VA = "0xF43C64", Slot = "6")]
		public int GetMinorVersion()
		{
			return default(int);
		}

		[Token(Token = "0x6000B70")]
		[Address(RVA = "0xF43D10", Offset = "0xF43D10", VA = "0xF43D10", Slot = "7")]
		public bool GetActive(GameObject go)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B71")]
		[Address(RVA = "0xF43D2C", Offset = "0xF43D2C", VA = "0xF43D2C", Slot = "8")]
		public void SetActive(GameObject go, bool isActive)
		{
		}

		[Token(Token = "0x6000B72")]
		[Address(RVA = "0xF43D4C", Offset = "0xF43D4C", VA = "0xF43D4C", Slot = "9")]
		public void SetActiveRecursively(GameObject go, bool isActive)
		{
		}

		[Token(Token = "0x6000B73")]
		[Address(RVA = "0xF43D6C", Offset = "0xF43D6C", VA = "0xF43D6C", Slot = "10")]
		public UnityEngine.Object[] FindSceneObjectsOfType(Type t)
		{
			return null;
		}

		[Token(Token = "0x6000B74")]
		[Address(RVA = "0xF43DD0", Offset = "0xF43DD0", VA = "0xF43DD0", Slot = "18")]
		public void OptimizeMesh(Mesh m)
		{
		}

		[Token(Token = "0x6000B75")]
		[Address(RVA = "0xF43DD4", Offset = "0xF43DD4", VA = "0xF43DD4", Slot = "11")]
		public bool IsRunningAndMeshNotReadWriteable(Mesh m)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B76")]
		[Address(RVA = "0xF43E20", Offset = "0xF43E20", VA = "0xF43E20")]
		public Vector2[] GetMeshUV1s(Mesh m, MB2_LogLevel LOG_LEVEL)
		{
			return null;
		}

		[Token(Token = "0x6000B77")]
		[Address(RVA = "0xF44140", Offset = "0xF44140", VA = "0xF44140", Slot = "12")]
		public Vector2[] GetMeshUV3orUV4(Mesh m, bool get3, MB2_LogLevel LOG_LEVEL)
		{
			return null;
		}

		[Token(Token = "0x6000B78")]
		[Address(RVA = "0xF444C0", Offset = "0xF444C0", VA = "0xF444C0", Slot = "13")]
		public void MeshClear(Mesh m, bool t)
		{
		}

		[Token(Token = "0x6000B79")]
		[Address(RVA = "0xF444E0", Offset = "0xF444E0", VA = "0xF444E0", Slot = "14")]
		public void MeshAssignUV3(Mesh m, Vector2[] uv3s)
		{
		}

		[Token(Token = "0x6000B7A")]
		[Address(RVA = "0xF44500", Offset = "0xF44500", VA = "0xF44500", Slot = "15")]
		public void MeshAssignUV4(Mesh m, Vector2[] uv4s)
		{
		}

		[Token(Token = "0x6000B7B")]
		[Address(RVA = "0xF44520", Offset = "0xF44520", VA = "0xF44520", Slot = "16")]
		public Vector4 GetLightmapTilingOffset(Renderer r)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6000B7C")]
		[Address(RVA = "0xF4453C", Offset = "0xF4453C", VA = "0xF4453C", Slot = "17")]
		public Transform[] GetBones(Renderer r)
		{
			return null;
		}

		[Token(Token = "0x6000B7D")]
		[Address(RVA = "0xF446D8", Offset = "0xF446D8", VA = "0xF446D8", Slot = "19")]
		public int GetBlendShapeFrameCount(Mesh m, int shapeIndex)
		{
			return default(int);
		}

		[Token(Token = "0x6000B7E")]
		[Address(RVA = "0xF446F8", Offset = "0xF446F8", VA = "0xF446F8", Slot = "20")]
		public float GetBlendShapeFrameWeight(Mesh m, int shapeIndex, int frameIndex)
		{
			return default(float);
		}

		[Token(Token = "0x6000B7F")]
		[Address(RVA = "0xF4471C", Offset = "0xF4471C", VA = "0xF4471C", Slot = "21")]
		public void GetBlendShapeFrameVertices(Mesh m, int shapeIndex, int frameIndex, Vector3[] vs, Vector3[] ns, Vector3[] ts)
		{
		}

		[Token(Token = "0x6000B80")]
		[Address(RVA = "0xF4474C", Offset = "0xF4474C", VA = "0xF4474C", Slot = "22")]
		public void ClearBlendShapes(Mesh m)
		{
		}

		[Token(Token = "0x6000B81")]
		[Address(RVA = "0xF44768", Offset = "0xF44768", VA = "0xF44768", Slot = "23")]
		public void AddBlendShapeFrame(Mesh m, string nm, float wt, Vector3[] vs, Vector3[] ns, Vector3[] ts)
		{
		}

		[Token(Token = "0x6000B82")]
		[Address(RVA = "0xF44794", Offset = "0xF44794", VA = "0xF44794", Slot = "24")]
		public int MaxMeshVertexCount()
		{
			return default(int);
		}

		[Token(Token = "0x6000B83")]
		[Address(RVA = "0xF4479C", Offset = "0xF4479C", VA = "0xF4479C", Slot = "25")]
		public void SetMeshIndexFormatAndClearMesh(Mesh m, int numVerts, bool vertices, bool justClearTriangles)
		{
		}

		[Token(Token = "0x6000B84")]
		[Address(RVA = "0xF44850", Offset = "0xF44850", VA = "0xF44850")]
		public MBVersionConcrete()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001CF")]
	public class GrouperData
	{
		[Token(Token = "0x4000E0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool clusterOnLMIndex;

		[Token(Token = "0x4000E0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool clusterByLODLevel;

		[Token(Token = "0x4000E0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Vector3 origin;

		[Token(Token = "0x4000E0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 cellSize;

		[Token(Token = "0x4000E0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int pieNumSegments;

		[Token(Token = "0x4000E0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 pieAxis;

		[Token(Token = "0x4000E10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public int height;

		[Token(Token = "0x4000E11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float maxDistBetweenClusters;

		[Token(Token = "0x4000E12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public bool includeCellsWithOnlyOneRenderer;

		[Token(Token = "0x6000B85")]
		[Address(RVA = "0x13FC84C", Offset = "0x13FC84C", VA = "0x13FC84C")]
		public GrouperData()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001D0")]
	public abstract class MB3_MeshBakerGrouperCore
	{
		[Token(Token = "0x20003F4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDECC", Offset = "0x5CDECC")]
		private sealed class <>c__DisplayClass3_0
		{
			[Token(Token = "0x4001AA5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Renderer r;

			[Token(Token = "0x4001AA6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Predicate<Renderer> <>9__0;

			[Token(Token = "0x6001A58")]
			[Address(RVA = "0x7F2460", Offset = "0x7F2460", VA = "0x7F2460")]
			public <>c__DisplayClass3_0()
			{
			}

			[Token(Token = "0x6001A59")]
			[Address(RVA = "0x7F2468", Offset = "0x7F2468", VA = "0x7F2468")]
			internal bool <DoClustering>b__0(Renderer x)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4000E13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GrouperData d;

		[Token(Token = "0x6000B86")]
		public abstract Dictionary<string, List<Renderer>> FilterIntoGroups(List<GameObject> selection);

		[Token(Token = "0x6000B87")]
		public abstract void DrawGizmos(Bounds sourceObjectBounds);

		[Token(Token = "0x6000B88")]
		[Address(RVA = "0x1291688", Offset = "0x1291688", VA = "0x1291688")]
		public void DoClustering(MB3_TextureBaker tb, MB3_MeshBakerGrouper grouper)
		{
		}

		[Token(Token = "0x6000B89")]
		[Address(RVA = "0x1292500", Offset = "0x1292500", VA = "0x1292500")]
		private Dictionary<int, List<Renderer>> GroupByLightmapIndex(List<Renderer> gaws)
		{
			return null;
		}

		[Token(Token = "0x6000B8A")]
		[Address(RVA = "0x1292754", Offset = "0x1292754", VA = "0x1292754")]
		private void AddMeshBaker(MB3_TextureBaker tb, string key, List<Renderer> gaws)
		{
		}

		[Token(Token = "0x6000B8B")]
		[Address(RVA = "0x1292A68", Offset = "0x1292A68", VA = "0x1292A68")]
		protected MB3_MeshBakerGrouperCore()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001D1")]
	public class MB3_MeshBakerGrouperNone : MB3_MeshBakerGrouperCore
	{
		[Token(Token = "0x6000B8C")]
		[Address(RVA = "0x1293AE4", Offset = "0x1293AE4", VA = "0x1293AE4")]
		public MB3_MeshBakerGrouperNone(GrouperData d)
		{
		}

		[Token(Token = "0x6000B8D")]
		[Address(RVA = "0x1293B18", Offset = "0x1293B18", VA = "0x1293B18", Slot = "4")]
		public override Dictionary<string, List<Renderer>> FilterIntoGroups(List<GameObject> selection)
		{
			return null;
		}

		[Token(Token = "0x6000B8E")]
		[Address(RVA = "0x1293D74", Offset = "0x1293D74", VA = "0x1293D74", Slot = "5")]
		public override void DrawGizmos(Bounds sourceObjectBounds)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001D2")]
	public class MB3_MeshBakerGrouperGrid : MB3_MeshBakerGrouperCore
	{
		[Token(Token = "0x6000B8F")]
		[Address(RVA = "0x1292A70", Offset = "0x1292A70", VA = "0x1292A70")]
		public MB3_MeshBakerGrouperGrid(GrouperData d)
		{
		}

		[Token(Token = "0x6000B90")]
		[Address(RVA = "0x1292AA4", Offset = "0x1292AA4", VA = "0x1292AA4", Slot = "4")]
		public override Dictionary<string, List<Renderer>> FilterIntoGroups(List<GameObject> selection)
		{
			return null;
		}

		[Token(Token = "0x6000B91")]
		[Address(RVA = "0x1292FB0", Offset = "0x1292FB0", VA = "0x1292FB0", Slot = "5")]
		public override void DrawGizmos(Bounds sourceObjectBounds)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001D3")]
	public class MB3_MeshBakerGrouperPie : MB3_MeshBakerGrouperCore
	{
		[Token(Token = "0x6000B92")]
		[Address(RVA = "0x1293D78", Offset = "0x1293D78", VA = "0x1293D78")]
		public MB3_MeshBakerGrouperPie(GrouperData data)
		{
		}

		[Token(Token = "0x6000B93")]
		[Address(RVA = "0x1293DAC", Offset = "0x1293DAC", VA = "0x1293DAC", Slot = "4")]
		public override Dictionary<string, List<Renderer>> FilterIntoGroups(List<GameObject> selection)
		{
			return null;
		}

		[Token(Token = "0x6000B94")]
		[Address(RVA = "0x1294428", Offset = "0x1294428", VA = "0x1294428", Slot = "5")]
		public override void DrawGizmos(Bounds sourceObjectBounds)
		{
		}

		[Token(Token = "0x6000B95")]
		[Address(RVA = "0x129465C", Offset = "0x129465C", VA = "0x129465C")]
		public static void DrawCircle(Vector3 axis, Vector3 center, float radius, int subdiv)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001D4")]
	public class MB3_MeshBakerGrouperKMeans : MB3_MeshBakerGrouperCore
	{
		[Token(Token = "0x4000E14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int numClusters;

		[Token(Token = "0x4000E15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3[] clusterCenters;

		[Token(Token = "0x4000E16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float[] clusterSizes;

		[Token(Token = "0x6000B96")]
		[Address(RVA = "0x12934D8", Offset = "0x12934D8", VA = "0x12934D8")]
		public MB3_MeshBakerGrouperKMeans(GrouperData data)
		{
		}

		[Token(Token = "0x6000B97")]
		[Address(RVA = "0x1293594", Offset = "0x1293594", VA = "0x1293594", Slot = "4")]
		public override Dictionary<string, List<Renderer>> FilterIntoGroups(List<GameObject> selection)
		{
			return null;
		}

		[Token(Token = "0x6000B98")]
		[Address(RVA = "0x1293A28", Offset = "0x1293A28", VA = "0x1293A28", Slot = "5")]
		public override void DrawGizmos(Bounds sceneObjectBounds)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001D5")]
	public class MB3_MeshBakerGrouperCluster : MB3_MeshBakerGrouperCore
	{
		[Token(Token = "0x20003F5")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDEDC", Offset = "0x5CDEDC")]
		private sealed class <>c__DisplayClass8_0
		{
			[Token(Token = "0x4001AA7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public List<GameObject> gos;

			[Token(Token = "0x4001AA8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int i;

			[Token(Token = "0x4001AA9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Predicate<MB3_AgglomerativeClustering.item_s> <>9__0;

			[Token(Token = "0x6001A5A")]
			[Address(RVA = "0x7F23A0", Offset = "0x7F23A0", VA = "0x7F23A0")]
			public <>c__DisplayClass8_0()
			{
			}

			[Token(Token = "0x6001A5B")]
			[Address(RVA = "0x7F23A8", Offset = "0x7F23A8", VA = "0x7F23A8")]
			internal bool <BuildClusters>b__0(MB3_AgglomerativeClustering.item_s x)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4000E17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MB3_AgglomerativeClustering cluster;

		[Token(Token = "0x4000E18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float _lastMaxDistBetweenClusters;

		[Token(Token = "0x4000E19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float _ObjsExtents;

		[Token(Token = "0x4000E1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float _minDistBetweenClusters;

		[Token(Token = "0x4000E1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<MB3_AgglomerativeClustering.ClusterNode> _clustersToDraw;

		[Token(Token = "0x4000E1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float[] _radii;

		[Token(Token = "0x6000B99")]
		[Address(RVA = "0xF9F588", Offset = "0xF9F588", VA = "0xF9F588")]
		public MB3_MeshBakerGrouperCluster(GrouperData data, List<GameObject> gos)
		{
		}

		[Token(Token = "0x6000B9A")]
		[Address(RVA = "0xF9F718", Offset = "0xF9F718", VA = "0xF9F718", Slot = "4")]
		public override Dictionary<string, List<Renderer>> FilterIntoGroups(List<GameObject> selection)
		{
			return null;
		}

		[Token(Token = "0x6000B9B")]
		[Address(RVA = "0xF9F9F4", Offset = "0xF9F9F4", VA = "0xF9F9F4")]
		public void BuildClusters(List<GameObject> gos, ProgressUpdateCancelableDelegate progFunc)
		{
		}

		[Token(Token = "0x6000B9C")]
		[Address(RVA = "0xF9FEF0", Offset = "0xF9FEF0", VA = "0xF9FEF0")]
		private void _BuildListOfClustersToDraw(ProgressUpdateCancelableDelegate progFunc, out float smallest, out float largest)
		{
		}

		[Token(Token = "0x6000B9D")]
		[Address(RVA = "0xFA0500", Offset = "0xFA0500", VA = "0xFA0500", Slot = "5")]
		public override void DrawGizmos(Bounds sceneObjectBounds)
		{
		}
	}
	[Token(Token = "0x20001D6")]
	public interface TextureBlender
	{
		[Token(Token = "0x6000B9E")]
		bool DoesShaderNameMatch(string shaderName);

		[Token(Token = "0x6000B9F")]
		void OnBeforeTintTexture(Material sourceMat, string shaderTexturePropertyName);

		[Token(Token = "0x6000BA0")]
		Color OnBlendTexturePixel(string shaderPropertyName, Color pixelColor);

		[Token(Token = "0x6000BA1")]
		bool NonTexturePropertiesAreEqual(Material a, Material b);

		[Token(Token = "0x6000BA2")]
		void SetNonTexturePropertyValuesOnResultMaterial(Material resultMaterial);

		[Token(Token = "0x6000BA3")]
		Color GetColorIfNoTexture(Material m, ShaderTextureProperty texPropertyName);
	}
	[Token(Token = "0x20001D7")]
	public class TextureBlenderFallback : TextureBlender
	{
		[Token(Token = "0x4000E1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool m_doTintColor;

		[Token(Token = "0x4000E1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private Color m_tintColor;

		[Token(Token = "0x4000E1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Color m_defaultColor;

		[Token(Token = "0x6000BA4")]
		[Address(RVA = "0xE8DFB4", Offset = "0xE8DFB4", VA = "0xE8DFB4", Slot = "4")]
		public bool DoesShaderNameMatch(string shaderName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BA5")]
		[Address(RVA = "0xE8DFBC", Offset = "0xE8DFBC", VA = "0xE8DFBC", Slot = "5")]
		public void OnBeforeTintTexture(Material sourceMat, string shaderTexturePropertyName)
		{
		}

		[Token(Token = "0x6000BA6")]
		[Address(RVA = "0xE8E0B8", Offset = "0xE8E0B8", VA = "0xE8E0B8", Slot = "6")]
		public Color OnBlendTexturePixel(string shaderPropertyName, Color pixelColor)
		{
			return default(Color);
		}

		[Token(Token = "0x6000BA7")]
		[Address(RVA = "0xE8E114", Offset = "0xE8E114", VA = "0xE8E114", Slot = "7")]
		public bool NonTexturePropertiesAreEqual(Material a, Material b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BA8")]
		[Address(RVA = "0xE8E2E0", Offset = "0xE8E2E0", VA = "0xE8E2E0", Slot = "8")]
		public void SetNonTexturePropertyValuesOnResultMaterial(Material resultMaterial)
		{
		}

		[Token(Token = "0x6000BA9")]
		[Address(RVA = "0xE8E398", Offset = "0xE8E398", VA = "0xE8E398", Slot = "9")]
		public Color GetColorIfNoTexture(Material mat, ShaderTextureProperty texProperty)
		{
			return default(Color);
		}

		[Token(Token = "0x6000BAA")]
		[Address(RVA = "0xE8E1D4", Offset = "0xE8E1D4", VA = "0xE8E1D4")]
		public static bool _compareColor(Material a, Material b, Color defaultVal, string propertyName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BAB")]
		[Address(RVA = "0xE8EEC0", Offset = "0xE8EEC0", VA = "0xE8EEC0")]
		public static bool _compareFloat(Material a, Material b, float defaultVal, string propertyName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BAC")]
		[Address(RVA = "0xE8EF5C", Offset = "0xE8EF5C", VA = "0xE8EF5C")]
		public TextureBlenderFallback()
		{
		}
	}
	[Token(Token = "0x20001D8")]
	public class TextureBlenderLegacyBumpDiffuse : TextureBlender
	{
		[Token(Token = "0x4000E20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool doColor;

		[Token(Token = "0x4000E21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private Color m_tintColor;

		[Token(Token = "0x4000E22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Color m_defaultTintColor;

		[Token(Token = "0x6000BAD")]
		[Address(RVA = "0xE8EF90", Offset = "0xE8EF90", VA = "0xE8EF90", Slot = "4")]
		public bool DoesShaderNameMatch(string shaderName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BAE")]
		[Address(RVA = "0xE8F020", Offset = "0xE8F020", VA = "0xE8F020", Slot = "5")]
		public void OnBeforeTintTexture(Material sourceMat, string shaderTexturePropertyName)
		{
		}

		[Token(Token = "0x6000BAF")]
		[Address(RVA = "0xE8F0D0", Offset = "0xE8F0D0", VA = "0xE8F0D0", Slot = "6")]
		public Color OnBlendTexturePixel(string propertyToDoshaderPropertyName, Color pixelColor)
		{
			return default(Color);
		}

		[Token(Token = "0x6000BB0")]
		[Address(RVA = "0xE8F12C", Offset = "0xE8F12C", VA = "0xE8F12C", Slot = "7")]
		public bool NonTexturePropertiesAreEqual(Material a, Material b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BB1")]
		[Address(RVA = "0xE8F194", Offset = "0xE8F194", VA = "0xE8F194", Slot = "8")]
		public void SetNonTexturePropertyValuesOnResultMaterial(Material resultMaterial)
		{
		}

		[Token(Token = "0x6000BB2")]
		[Address(RVA = "0xE8F1F4", Offset = "0xE8F1F4", VA = "0xE8F1F4", Slot = "9")]
		public Color GetColorIfNoTexture(Material m, ShaderTextureProperty texPropertyName)
		{
			return default(Color);
		}

		[Token(Token = "0x6000BB3")]
		[Address(RVA = "0xE8F3D4", Offset = "0xE8F3D4", VA = "0xE8F3D4")]
		public TextureBlenderLegacyBumpDiffuse()
		{
		}
	}
	[Token(Token = "0x20001D9")]
	public class TextureBlenderLegacyDiffuse : TextureBlender
	{
		[Token(Token = "0x4000E23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool doColor;

		[Token(Token = "0x4000E24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private Color m_tintColor;

		[Token(Token = "0x4000E25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Color m_defaultTintColor;

		[Token(Token = "0x6000BB4")]
		[Address(RVA = "0xE8F408", Offset = "0xE8F408", VA = "0xE8F408", Slot = "4")]
		public bool DoesShaderNameMatch(string shaderName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BB5")]
		[Address(RVA = "0xE8F498", Offset = "0xE8F498", VA = "0xE8F498", Slot = "5")]
		public void OnBeforeTintTexture(Material sourceMat, string shaderTexturePropertyName)
		{
		}

		[Token(Token = "0x6000BB6")]
		[Address(RVA = "0xE8F548", Offset = "0xE8F548", VA = "0xE8F548", Slot = "6")]
		public Color OnBlendTexturePixel(string propertyToDoshaderPropertyName, Color pixelColor)
		{
			return default(Color);
		}

		[Token(Token = "0x6000BB7")]
		[Address(RVA = "0xE8F5A4", Offset = "0xE8F5A4", VA = "0xE8F5A4", Slot = "7")]
		public bool NonTexturePropertiesAreEqual(Material a, Material b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BB8")]
		[Address(RVA = "0xE8F60C", Offset = "0xE8F60C", VA = "0xE8F60C", Slot = "8")]
		public void SetNonTexturePropertyValuesOnResultMaterial(Material resultMaterial)
		{
		}

		[Token(Token = "0x6000BB9")]
		[Address(RVA = "0xE8F66C", Offset = "0xE8F66C", VA = "0xE8F66C", Slot = "9")]
		public Color GetColorIfNoTexture(Material m, ShaderTextureProperty texPropertyName)
		{
			return default(Color);
		}

		[Token(Token = "0x6000BBA")]
		[Address(RVA = "0xE8F800", Offset = "0xE8F800", VA = "0xE8F800")]
		public TextureBlenderLegacyDiffuse()
		{
		}
	}
	[Token(Token = "0x20001DA")]
	public class TextureBlenderMaterialPropertyCacheHelper
	{
		[Token(Token = "0x20003F6")]
		private struct MaterialPropertyPair
		{
			[Token(Token = "0x4001AAA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Material material;

			[Token(Token = "0x4001AAB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public string property;

			[Token(Token = "0x6001A5C")]
			[Address(RVA = "0x138B4A4", Offset = "0x138B4A4", VA = "0x138B4A4")]
			public MaterialPropertyPair(Material m, string prop)
			{
			}

			[Token(Token = "0x6001A5D")]
			[Address(RVA = "0x138B4D8", Offset = "0x138B4D8", VA = "0x138B4D8", Slot = "0")]
			public override bool Equals(object obj)
			{
				return default(bool);
			}

			[Token(Token = "0x6001A5E")]
			[Address(RVA = "0x138B588", Offset = "0x138B588", VA = "0x138B588", Slot = "2")]
			public override int GetHashCode()
			{
				return default(int);
			}
		}

		[Token(Token = "0x4000E26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Dictionary<MaterialPropertyPair, object> nonTexturePropertyValuesForSourceMaterials;

		[Token(Token = "0x6000BBB")]
		[Address(RVA = "0xE8F834", Offset = "0xE8F834", VA = "0xE8F834")]
		private bool AllNonTexturePropertyValuesAreEqual(string prop)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BBC")]
		[Address(RVA = "0xE8FA58", Offset = "0xE8FA58", VA = "0xE8FA58")]
		public void CacheMaterialProperty(Material m, string property, object value)
		{
		}

		[Token(Token = "0x6000BBD")]
		[Address(RVA = "0xE8FAF8", Offset = "0xE8FAF8", VA = "0xE8FAF8")]
		public object GetValueIfAllSourceAreTheSameOrDefault(string property, object defaultValue)
		{
			return null;
		}

		[Token(Token = "0x6000BBE")]
		[Address(RVA = "0xE8FCC4", Offset = "0xE8FCC4", VA = "0xE8FCC4")]
		public TextureBlenderMaterialPropertyCacheHelper()
		{
		}
	}
	[Token(Token = "0x20001DB")]
	public class TextureBlenderStandardMetallic : TextureBlender
	{
		[Token(Token = "0x20003F7")]
		private enum Prop
		{
			[Token(Token = "0x4001AAD")]
			doColor,
			[Token(Token = "0x4001AAE")]
			doMetallic,
			[Token(Token = "0x4001AAF")]
			doEmission,
			[Token(Token = "0x4001AB0")]
			doBump,
			[Token(Token = "0x4001AB1")]
			doNone
		}

		[Token(Token = "0x4000E27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Color NeutralNormalMap;

		[Token(Token = "0x4000E28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private TextureBlenderMaterialPropertyCacheHelper sourceMaterialPropertyCache;

		[Token(Token = "0x4000E29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Color m_tintColor;

		[Token(Token = "0x4000E2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float m_glossiness;

		[Token(Token = "0x4000E2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float m_glossMapScale;

		[Token(Token = "0x4000E2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float m_metallic;

		[Token(Token = "0x4000E2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private bool m_hasMetallicGlossMap;

		[Token(Token = "0x4000E2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float m_bumpScale;

		[Token(Token = "0x4000E2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private bool m_shaderDoesEmission;

		[Token(Token = "0x4000E30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Color m_emissionColor;

		[Token(Token = "0x4000E31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Prop propertyToDo;

		[Token(Token = "0x4000E32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Color m_generatingTintedAtlasColor;

		[Token(Token = "0x4000E33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float m_generatingTintedAtlasMetallic;

		[Token(Token = "0x4000E34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float m_generatingTintedAtlasGlossiness;

		[Token(Token = "0x4000E35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float m_generatingTintedAtlasGlossMapScale;

		[Token(Token = "0x4000E36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float m_generatingTintedAtlasBumpScale;

		[Token(Token = "0x4000E37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private Color m_generatingTintedAtlasEmission;

		[Token(Token = "0x4000E38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private Color m_notGeneratingAtlasDefaultColor;

		[Token(Token = "0x4000E39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private float m_notGeneratingAtlasDefaultMetallic;

		[Token(Token = "0x4000E3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float m_notGeneratingAtlasDefaultGlossiness;

		[Token(Token = "0x4000E3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private Color m_notGeneratingAtlasDefaultEmisionColor;

		[Token(Token = "0x6000BBF")]
		[Address(RVA = "0xE8FD48", Offset = "0xE8FD48", VA = "0xE8FD48", Slot = "4")]
		public bool DoesShaderNameMatch(string shaderName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BC0")]
		[Address(RVA = "0xE8FDA0", Offset = "0xE8FDA0", VA = "0xE8FDA0", Slot = "5")]
		public void OnBeforeTintTexture(Material sourceMat, string shaderTexturePropertyName)
		{
		}

		[Token(Token = "0x6000BC1")]
		[Address(RVA = "0xE90118", Offset = "0xE90118", VA = "0xE90118", Slot = "6")]
		public Color OnBlendTexturePixel(string propertyToDoshaderPropertyName, Color pixelColor)
		{
			return default(Color);
		}

		[Token(Token = "0x6000BC2")]
		[Address(RVA = "0xE902A0", Offset = "0xE902A0", VA = "0xE902A0", Slot = "7")]
		public bool NonTexturePropertiesAreEqual(Material a, Material b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BC3")]
		[Address(RVA = "0xE9052C", Offset = "0xE9052C", VA = "0xE9052C", Slot = "8")]
		public void SetNonTexturePropertyValuesOnResultMaterial(Material resultMaterial)
		{
		}

		[Token(Token = "0x6000BC4")]
		[Address(RVA = "0xE909FC", Offset = "0xE909FC", VA = "0xE909FC", Slot = "9")]
		public Color GetColorIfNoTexture(Material mat, ShaderTextureProperty texPropertyName)
		{
			return default(Color);
		}

		[Token(Token = "0x6000BC5")]
		[Address(RVA = "0xE91168", Offset = "0xE91168", VA = "0xE91168")]
		public TextureBlenderStandardMetallic()
		{
		}
	}
	[Token(Token = "0x20001DC")]
	public class TextureBlenderStandardMetallicRoughness : TextureBlender
	{
		[Token(Token = "0x20003F8")]
		private enum Prop
		{
			[Token(Token = "0x4001AB3")]
			doColor,
			[Token(Token = "0x4001AB4")]
			doMetallic,
			[Token(Token = "0x4001AB5")]
			doRoughness,
			[Token(Token = "0x4001AB6")]
			doEmission,
			[Token(Token = "0x4001AB7")]
			doBump,
			[Token(Token = "0x4001AB8")]
			doNone
		}

		[Token(Token = "0x4000E3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Color NeutralNormalMap;

		[Token(Token = "0x4000E3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private TextureBlenderMaterialPropertyCacheHelper sourceMaterialPropertyCache;

		[Token(Token = "0x4000E3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Color m_tintColor;

		[Token(Token = "0x4000E3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float m_roughness;

		[Token(Token = "0x4000E40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float m_metallic;

		[Token(Token = "0x4000E41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool m_hasMetallicGlossMap;

		[Token(Token = "0x4000E42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool m_hasSpecGlossMap;

		[Token(Token = "0x4000E43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float m_bumpScale;

		[Token(Token = "0x4000E44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool m_shaderDoesEmission;

		[Token(Token = "0x4000E45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Color m_emissionColor;

		[Token(Token = "0x4000E46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Prop propertyToDo;

		[Token(Token = "0x4000E47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Color m_generatingTintedAtlasColor;

		[Token(Token = "0x4000E48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float m_generatingTintedAtlasMetallic;

		[Token(Token = "0x4000E49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float m_generatingTintedAtlasRoughness;

		[Token(Token = "0x4000E4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float m_generatingTintedAtlasBumpScale;

		[Token(Token = "0x4000E4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Color m_generatingTintedAtlasEmission;

		[Token(Token = "0x4000E4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private Color m_notGeneratingAtlasDefaultColor;

		[Token(Token = "0x4000E4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float m_notGeneratingAtlasDefaultMetallic;

		[Token(Token = "0x4000E4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float m_notGeneratingAtlasDefaultGlossiness;

		[Token(Token = "0x4000E4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private Color m_notGeneratingAtlasDefaultEmisionColor;

		[Token(Token = "0x6000BC7")]
		[Address(RVA = "0xE912A8", Offset = "0xE912A8", VA = "0xE912A8", Slot = "4")]
		public bool DoesShaderNameMatch(string shaderName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BC8")]
		[Address(RVA = "0xE91300", Offset = "0xE91300", VA = "0xE91300", Slot = "5")]
		public void OnBeforeTintTexture(Material sourceMat, string shaderTexturePropertyName)
		{
		}

		[Token(Token = "0x6000BC9")]
		[Address(RVA = "0xE916CC", Offset = "0xE916CC", VA = "0xE916CC", Slot = "6")]
		public Color OnBlendTexturePixel(string propertyToDoshaderPropertyName, Color pixelColor)
		{
			return default(Color);
		}

		[Token(Token = "0x6000BCA")]
		[Address(RVA = "0xE9184C", Offset = "0xE9184C", VA = "0xE9184C", Slot = "7")]
		public bool NonTexturePropertiesAreEqual(Material a, Material b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BCB")]
		[Address(RVA = "0xE91BEC", Offset = "0xE91BEC", VA = "0xE91BEC", Slot = "8")]
		public void SetNonTexturePropertyValuesOnResultMaterial(Material resultMaterial)
		{
		}

		[Token(Token = "0x6000BCC")]
		[Address(RVA = "0xE920D4", Offset = "0xE920D4", VA = "0xE920D4", Slot = "9")]
		public Color GetColorIfNoTexture(Material mat, ShaderTextureProperty texPropertyName)
		{
			return default(Color);
		}

		[Token(Token = "0x6000BCD")]
		[Address(RVA = "0xE9295C", Offset = "0xE9295C", VA = "0xE9295C")]
		public TextureBlenderStandardMetallicRoughness()
		{
		}
	}
	[Token(Token = "0x20001DD")]
	public class TextureBlenderStandardSpecular : TextureBlender
	{
		[Token(Token = "0x20003F9")]
		private enum Prop
		{
			[Token(Token = "0x4001ABA")]
			doColor,
			[Token(Token = "0x4001ABB")]
			doSpecular,
			[Token(Token = "0x4001ABC")]
			doEmission,
			[Token(Token = "0x4001ABD")]
			doBump,
			[Token(Token = "0x4001ABE")]
			doNone
		}

		[Token(Token = "0x4000E50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Color NeutralNormalMap;

		[Token(Token = "0x4000E51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private TextureBlenderMaterialPropertyCacheHelper sourceMaterialPropertyCache;

		[Token(Token = "0x4000E52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Color m_tintColor;

		[Token(Token = "0x4000E53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float m_glossiness;

		[Token(Token = "0x4000E54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float m_SpecGlossMapScale;

		[Token(Token = "0x4000E55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Color m_specColor;

		[Token(Token = "0x4000E56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool m_hasSpecGlossMap;

		[Token(Token = "0x4000E57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float m_bumpScale;

		[Token(Token = "0x4000E58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool m_shaderDoesEmission;

		[Token(Token = "0x4000E59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Color m_emissionColor;

		[Token(Token = "0x4000E5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Prop propertyToDo;

		[Token(Token = "0x4000E5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Color m_generatingTintedAtlaColor;

		[Token(Token = "0x4000E5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Color m_generatingTintedAtlaSpecular;

		[Token(Token = "0x4000E5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float m_generatingTintedAtlaGlossiness;

		[Token(Token = "0x4000E5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private float m_generatingTintedAtlaSpecGlossMapScale;

		[Token(Token = "0x4000E5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float m_generatingTintedAtlaBumpScale;

		[Token(Token = "0x4000E60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private Color m_generatingTintedAtlaEmission;

		[Token(Token = "0x4000E61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private Color m_notGeneratingAtlasDefaultColor;

		[Token(Token = "0x4000E62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private Color m_notGeneratingAtlasDefaultSpecularColor;

		[Token(Token = "0x4000E63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private float m_notGeneratingAtlasDefaultGlossiness;

		[Token(Token = "0x4000E64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Color m_notGeneratingAtlasDefaultEmisionColor;

		[Token(Token = "0x6000BCF")]
		[Address(RVA = "0xE92A98", Offset = "0xE92A98", VA = "0xE92A98", Slot = "4")]
		public bool DoesShaderNameMatch(string shaderName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BD0")]
		[Address(RVA = "0xE92AF0", Offset = "0xE92AF0", VA = "0xE92AF0", Slot = "5")]
		public void OnBeforeTintTexture(Material sourceMat, string shaderTexturePropertyName)
		{
		}

		[Token(Token = "0x6000BD1")]
		[Address(RVA = "0xE92E9C", Offset = "0xE92E9C", VA = "0xE92E9C", Slot = "6")]
		public Color OnBlendTexturePixel(string propertyToDoshaderPropertyName, Color pixelColor)
		{
			return default(Color);
		}

		[Token(Token = "0x6000BD2")]
		[Address(RVA = "0xE93020", Offset = "0xE93020", VA = "0xE93020", Slot = "7")]
		public bool NonTexturePropertiesAreEqual(Material a, Material b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BD3")]
		[Address(RVA = "0xE932DC", Offset = "0xE932DC", VA = "0xE932DC", Slot = "8")]
		public void SetNonTexturePropertyValuesOnResultMaterial(Material resultMaterial)
		{
		}

		[Token(Token = "0x6000BD4")]
		[Address(RVA = "0xE937B8", Offset = "0xE937B8", VA = "0xE937B8", Slot = "9")]
		public Color GetColorIfNoTexture(Material mat, ShaderTextureProperty texPropertyName)
		{
			return default(Color);
		}

		[Token(Token = "0x6000BD5")]
		[Address(RVA = "0xE93F28", Offset = "0xE93F28", VA = "0xE93F28")]
		public TextureBlenderStandardSpecular()
		{
		}
	}
	[Token(Token = "0x20001DE")]
	public delegate void ProgressUpdateDelegate(string msg, float progress);
	[Token(Token = "0x20001DF")]
	public delegate bool ProgressUpdateCancelableDelegate(string msg, float progress);
	[Token(Token = "0x20001E0")]
	public enum MB_ObjsToCombineTypes
	{
		[Token(Token = "0x4000E66")]
		prefabOnly,
		[Token(Token = "0x4000E67")]
		sceneObjOnly,
		[Token(Token = "0x4000E68")]
		dontCare
	}
	[Token(Token = "0x20001E1")]
	public enum MB_OutputOptions
	{
		[Token(Token = "0x4000E6A")]
		bakeIntoPrefab,
		[Token(Token = "0x4000E6B")]
		bakeMeshsInPlace,
		[Token(Token = "0x4000E6C")]
		bakeTextureAtlasesOnly,
		[Token(Token = "0x4000E6D")]
		bakeIntoSceneObject
	}
	[Token(Token = "0x20001E2")]
	public enum MB_RenderType
	{
		[Token(Token = "0x4000E6F")]
		meshRenderer,
		[Token(Token = "0x4000E70")]
		skinnedMeshRenderer
	}
	[Token(Token = "0x20001E3")]
	public enum MB2_OutputOptions
	{
		[Token(Token = "0x4000E72")]
		bakeIntoSceneObject,
		[Token(Token = "0x4000E73")]
		bakeMeshAssetsInPlace,
		[Token(Token = "0x4000E74")]
		bakeIntoPrefab
	}
	[Token(Token = "0x20001E4")]
	public enum MB2_LightmapOptions
	{
		[Token(Token = "0x4000E76")]
		preserve_current_lightmapping,
		[Token(Token = "0x4000E77")]
		ignore_UV2,
		[Token(Token = "0x4000E78")]
		copy_UV2_unchanged,
		[Token(Token = "0x4000E79")]
		generate_new_UV2_layout,
		[Token(Token = "0x4000E7A")]
		copy_UV2_unchanged_to_separate_rects
	}
	[Token(Token = "0x20001E5")]
	public enum MB2_PackingAlgorithmEnum
	{
		[Token(Token = "0x4000E7C")]
		UnitysPackTextures,
		[Token(Token = "0x4000E7D")]
		MeshBakerTexturePacker,
		[Token(Token = "0x4000E7E")]
		MeshBakerTexturePacker_Fast,
		[Token(Token = "0x4000E7F")]
		MeshBakerTexturePacker_Horizontal,
		[Token(Token = "0x4000E80")]
		MeshBakerTexturePacker_Vertical
	}
	[Token(Token = "0x20001E6")]
	public enum MB_TextureTilingTreatment
	{
		[Token(Token = "0x4000E82")]
		none,
		[Token(Token = "0x4000E83")]
		considerUVs,
		[Token(Token = "0x4000E84")]
		edgeToEdgeX,
		[Token(Token = "0x4000E85")]
		edgeToEdgeY,
		[Token(Token = "0x4000E86")]
		edgeToEdgeXY,
		[Token(Token = "0x4000E87")]
		unknown
	}
	[Token(Token = "0x20001E7")]
	public enum MB2_ValidationLevel
	{
		[Token(Token = "0x4000E89")]
		none,
		[Token(Token = "0x4000E8A")]
		quick,
		[Token(Token = "0x4000E8B")]
		robust
	}
	[Token(Token = "0x20001E8")]
	public interface MB2_EditorMethodsInterface
	{
		[Token(Token = "0x6000BDF")]
		void Clear();

		[Token(Token = "0x6000BE0")]
		void RestoreReadFlagsAndFormats(ProgressUpdateDelegate progressInfo);

		[Token(Token = "0x6000BE1")]
		void SetReadWriteFlag(Texture2D tx, bool isReadable, bool addToList);

		[Token(Token = "0x6000BE2")]
		void AddTextureFormat(Texture2D tx, bool isNormalMap);

		[Token(Token = "0x6000BE3")]
		void SaveAtlasToAssetDatabase(Texture2D atlas, ShaderTextureProperty texPropertyName, int atlasNum, Material resMat);

		[Token(Token = "0x6000BE4")]
		bool IsNormalMap(Texture2D tx);

		[Token(Token = "0x6000BE5")]
		string GetPlatformString();

		[Token(Token = "0x6000BE6")]
		void SetTextureSize(Texture2D tx, int size);

		[Token(Token = "0x6000BE7")]
		bool IsCompressed(Texture2D tx);

		[Token(Token = "0x6000BE8")]
		void CheckBuildSettings(long estimatedAtlasSize);

		[Token(Token = "0x6000BE9")]
		bool CheckPrefabTypes(MB_ObjsToCombineTypes prefabType, List<GameObject> gos);

		[Token(Token = "0x6000BEA")]
		bool ValidateSkinnedMeshes(List<GameObject> mom);

		[Token(Token = "0x6000BEB")]
		void CommitChangesToAssets();

		[Token(Token = "0x6000BEC")]
		void OnPreTextureBake();

		[Token(Token = "0x6000BED")]
		void OnPostTextureBake();

		[Token(Token = "0x6000BEE")]
		void Destroy(UnityEngine.Object o);
	}
	[Token(Token = "0x20001E9")]
	public enum MB2_LogLevel
	{
		[Token(Token = "0x4000E8D")]
		none,
		[Token(Token = "0x4000E8E")]
		error,
		[Token(Token = "0x4000E8F")]
		warn,
		[Token(Token = "0x4000E90")]
		info,
		[Token(Token = "0x4000E91")]
		debug,
		[Token(Token = "0x4000E92")]
		trace
	}
	[Token(Token = "0x20001EA")]
	public class MB2_Log
	{
		[Token(Token = "0x6000BEF")]
		[Address(RVA = "0xF90BD0", Offset = "0xF90BD0", VA = "0xF90BD0")]
		public static void Log(MB2_LogLevel l, string msg, MB2_LogLevel currentThreshold)
		{
		}

		[Token(Token = "0x6000BF0")]
		[Address(RVA = "0xF90E18", Offset = "0xF90E18", VA = "0xF90E18")]
		public static string Error(string msg, params object[] args)
		{
			return null;
		}

		[Token(Token = "0x6000BF1")]
		[Address(RVA = "0xF90F08", Offset = "0xF90F08", VA = "0xF90F08")]
		public static string Warn(string msg, params object[] args)
		{
			return null;
		}

		[Token(Token = "0x6000BF2")]
		[Address(RVA = "0xF90FF8", Offset = "0xF90FF8", VA = "0xF90FF8")]
		public static string Info(string msg, params object[] args)
		{
			return null;
		}

		[Token(Token = "0x6000BF3")]
		[Address(RVA = "0xF910E8", Offset = "0xF910E8", VA = "0xF910E8")]
		public static string LogDebug(string msg, params object[] args)
		{
			return null;
		}

		[Token(Token = "0x6000BF4")]
		[Address(RVA = "0xF911D8", Offset = "0xF911D8", VA = "0xF911D8")]
		public static string Trace(string msg, params object[] args)
		{
			return null;
		}

		[Token(Token = "0x6000BF5")]
		[Address(RVA = "0xF912C8", Offset = "0xF912C8", VA = "0xF912C8")]
		public MB2_Log()
		{
		}
	}
	[Token(Token = "0x20001EB")]
	public class ObjectLog
	{
		[Token(Token = "0x4000E93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int pos;

		[Token(Token = "0x4000E94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string[] logMessages;

		[Token(Token = "0x6000BF6")]
		[Address(RVA = "0x13135B0", Offset = "0x13135B0", VA = "0x13135B0")]
		private void _CacheLogMessage(string msg)
		{
		}

		[Token(Token = "0x6000BF7")]
		[Address(RVA = "0x1313660", Offset = "0x1313660", VA = "0x1313660")]
		public ObjectLog(short bufferSize)
		{
		}

		[Token(Token = "0x6000BF8")]
		[Address(RVA = "0x13136D4", Offset = "0x13136D4", VA = "0x13136D4")]
		public void Log(MB2_LogLevel l, string msg, MB2_LogLevel currentThreshold)
		{
		}

		[Token(Token = "0x6000BF9")]
		[Address(RVA = "0x1313710", Offset = "0x1313710", VA = "0x1313710")]
		public void Error(string msg, params object[] args)
		{
		}

		[Token(Token = "0x6000BFA")]
		[Address(RVA = "0x1313744", Offset = "0x1313744", VA = "0x1313744")]
		public void Warn(string msg, params object[] args)
		{
		}

		[Token(Token = "0x6000BFB")]
		[Address(RVA = "0x1313778", Offset = "0x1313778", VA = "0x1313778")]
		public void Info(string msg, params object[] args)
		{
		}

		[Token(Token = "0x6000BFC")]
		[Address(RVA = "0x13137AC", Offset = "0x13137AC", VA = "0x13137AC")]
		public void LogDebug(string msg, params object[] args)
		{
		}

		[Token(Token = "0x6000BFD")]
		[Address(RVA = "0x13137E0", Offset = "0x13137E0", VA = "0x13137E0")]
		public void Trace(string msg, params object[] args)
		{
		}

		[Token(Token = "0x6000BFE")]
		[Address(RVA = "0x1313814", Offset = "0x1313814", VA = "0x1313814")]
		public string Dump()
		{
			return null;
		}
	}
	[Token(Token = "0x20001EC")]
	public interface MBVersionInterface
	{
		[Token(Token = "0x6000BFF")]
		string version();

		[Token(Token = "0x6000C00")]
		int GetMajorVersion();

		[Token(Token = "0x6000C01")]
		int GetMinorVersion();

		[Token(Token = "0x6000C02")]
		bool GetActive(GameObject go);

		[Token(Token = "0x6000C03")]
		void SetActive(GameObject go, bool isActive);

		[Token(Token = "0x6000C04")]
		void SetActiveRecursively(GameObject go, bool isActive);

		[Token(Token = "0x6000C05")]
		UnityEngine.Object[] FindSceneObjectsOfType(Type t);

		[Token(Token = "0x6000C06")]
		bool IsRunningAndMeshNotReadWriteable(Mesh m);

		[Token(Token = "0x6000C07")]
		Vector2[] GetMeshUV3orUV4(Mesh m, bool get3, MB2_LogLevel LOG_LEVEL);

		[Token(Token = "0x6000C08")]
		void MeshClear(Mesh m, bool t);

		[Token(Token = "0x6000C09")]
		void MeshAssignUV3(Mesh m, Vector2[] uv3s);

		[Token(Token = "0x6000C0A")]
		void MeshAssignUV4(Mesh m, Vector2[] uv4s);

		[Token(Token = "0x6000C0B")]
		Vector4 GetLightmapTilingOffset(Renderer r);

		[Token(Token = "0x6000C0C")]
		Transform[] GetBones(Renderer r);

		[Token(Token = "0x6000C0D")]
		void OptimizeMesh(Mesh m);

		[Token(Token = "0x6000C0E")]
		int GetBlendShapeFrameCount(Mesh m, int shapeIndex);

		[Token(Token = "0x6000C0F")]
		float GetBlendShapeFrameWeight(Mesh m, int shapeIndex, int frameIndex);

		[Token(Token = "0x6000C10")]
		void GetBlendShapeFrameVertices(Mesh m, int shapeIndex, int frameIndex, Vector3[] vs, Vector3[] ns, Vector3[] ts);

		[Token(Token = "0x6000C11")]
		void ClearBlendShapes(Mesh m);

		[Token(Token = "0x6000C12")]
		void AddBlendShapeFrame(Mesh m, string nm, float wt, Vector3[] vs, Vector3[] ns, Vector3[] ts);

		[Token(Token = "0x6000C13")]
		int MaxMeshVertexCount();

		[Token(Token = "0x6000C14")]
		void SetMeshIndexFormatAndClearMesh(Mesh m, int numVerts, bool vertices, bool justClearTriangles);
	}
	[Token(Token = "0x20001ED")]
	public class MBVersion
	{
		[Token(Token = "0x4000E95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static MBVersionInterface _MBVersion;

		[Token(Token = "0x6000C15")]
		[Address(RVA = "0xF423A8", Offset = "0xF423A8", VA = "0xF423A8")]
		private static MBVersionInterface _CreateMBVersionConcrete()
		{
			return null;
		}

		[Token(Token = "0x6000C16")]
		[Address(RVA = "0xF42464", Offset = "0xF42464", VA = "0xF42464")]
		public static string version()
		{
			return null;
		}

		[Token(Token = "0x6000C17")]
		[Address(RVA = "0xF42554", Offset = "0xF42554", VA = "0xF42554")]
		public static int GetMajorVersion()
		{
			return default(int);
		}

		[Token(Token = "0x6000C18")]
		[Address(RVA = "0xF42648", Offset = "0xF42648", VA = "0xF42648")]
		public static int GetMinorVersion()
		{
			return default(int);
		}

		[Token(Token = "0x6000C19")]
		[Address(RVA = "0xF4273C", Offset = "0xF4273C", VA = "0xF4273C")]
		public static bool GetActive(GameObject go)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C1A")]
		[Address(RVA = "0xF42840", Offset = "0xF42840", VA = "0xF42840")]
		public static void SetActive(GameObject go, bool isActive)
		{
		}

		[Token(Token = "0x6000C1B")]
		[Address(RVA = "0xF4294C", Offset = "0xF4294C", VA = "0xF4294C")]
		public static void SetActiveRecursively(GameObject go, bool isActive)
		{
		}

		[Token(Token = "0x6000C1C")]
		[Address(RVA = "0xF42A58", Offset = "0xF42A58", VA = "0xF42A58")]
		public static UnityEngine.Object[] FindSceneObjectsOfType(Type t)
		{
			return null;
		}

		[Token(Token = "0x6000C1D")]
		[Address(RVA = "0xF42B5C", Offset = "0xF42B5C", VA = "0xF42B5C")]
		public static bool IsRunningAndMeshNotReadWriteable(Mesh m)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C1E")]
		[Address(RVA = "0xF42C60", Offset = "0xF42C60", VA = "0xF42C60")]
		public static Vector2[] GetMeshUV3orUV4(Mesh m, bool get3, MB2_LogLevel LOG_LEVEL)
		{
			return null;
		}

		[Token(Token = "0x6000C1F")]
		[Address(RVA = "0xF42D7C", Offset = "0xF42D7C", VA = "0xF42D7C")]
		public static void MeshClear(Mesh m, bool t)
		{
		}

		[Token(Token = "0x6000C20")]
		[Address(RVA = "0xF42E88", Offset = "0xF42E88", VA = "0xF42E88")]
		public static void MeshAssignUV3(Mesh m, Vector2[] uv3s)
		{
		}

		[Token(Token = "0x6000C21")]
		[Address(RVA = "0xF42F94", Offset = "0xF42F94", VA = "0xF42F94")]
		public static void MeshAssignUV4(Mesh m, Vector2[] uv4s)
		{
		}

		[Token(Token = "0x6000C22")]
		[Address(RVA = "0xF430A0", Offset = "0xF430A0", VA = "0xF430A0")]
		public static Vector4 GetLightmapTilingOffset(Renderer r)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6000C23")]
		[Address(RVA = "0xF431A4", Offset = "0xF431A4", VA = "0xF431A4")]
		public static Transform[] GetBones(Renderer r)
		{
			return null;
		}

		[Token(Token = "0x6000C24")]
		[Address(RVA = "0xF432A8", Offset = "0xF432A8", VA = "0xF432A8")]
		public static void OptimizeMesh(Mesh m)
		{
		}

		[Token(Token = "0x6000C25")]
		[Address(RVA = "0xF433AC", Offset = "0xF433AC", VA = "0xF433AC")]
		public static int GetBlendShapeFrameCount(Mesh m, int shapeIndex)
		{
			return default(int);
		}

		[Token(Token = "0x6000C26")]
		[Address(RVA = "0xF434B8", Offset = "0xF434B8", VA = "0xF434B8")]
		public static float GetBlendShapeFrameWeight(Mesh m, int shapeIndex, int frameIndex)
		{
			return default(float);
		}

		[Token(Token = "0x6000C27")]
		[Address(RVA = "0xF435D4", Offset = "0xF435D4", VA = "0xF435D4")]
		public static void GetBlendShapeFrameVertices(Mesh m, int shapeIndex, int frameIndex, Vector3[] vs, Vector3[] ns, Vector3[] ts)
		{
		}

		[Token(Token = "0x6000C28")]
		[Address(RVA = "0xF43710", Offset = "0xF43710", VA = "0xF43710")]
		public static void ClearBlendShapes(Mesh m)
		{
		}

		[Token(Token = "0x6000C29")]
		[Address(RVA = "0xF43814", Offset = "0xF43814", VA = "0xF43814")]
		public static void AddBlendShapeFrame(Mesh m, string nm, float wt, Vector3[] vs, Vector3[] ns, Vector3[] ts)
		{
		}

		[Token(Token = "0x6000C2A")]
		[Address(RVA = "0xF43958", Offset = "0xF43958", VA = "0xF43958")]
		public static int MaxMeshVertexCount()
		{
			return default(int);
		}

		[Token(Token = "0x6000C2B")]
		[Address(RVA = "0xF43A4C", Offset = "0xF43A4C", VA = "0xF43A4C")]
		public static void SetMeshIndexFormatAndClearMesh(Mesh m, int numVerts, bool vertices, bool justClearTriangles)
		{
		}

		[Token(Token = "0x6000C2C")]
		[Address(RVA = "0xF43B70", Offset = "0xF43B70", VA = "0xF43B70")]
		public MBVersion()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001EE")]
	public class MB3_AgglomerativeClustering
	{
		[Serializable]
		[Token(Token = "0x20003FA")]
		public class ClusterNode
		{
			[Token(Token = "0x4001ABF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public item_s leaf;

			[Token(Token = "0x4001AC0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public ClusterNode cha;

			[Token(Token = "0x4001AC1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ClusterNode chb;

			[Token(Token = "0x4001AC2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public int height;

			[Token(Token = "0x4001AC3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float distToMergedCentroid;

			[Token(Token = "0x4001AC4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Vector3 centroid;

			[Token(Token = "0x4001AC5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public int[] leafs;

			[Token(Token = "0x4001AC6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public int idx;

			[Token(Token = "0x4001AC7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			public bool isUnclustered;

			[Token(Token = "0x6001A5F")]
			[Address(RVA = "0x7F1F74", Offset = "0x7F1F74", VA = "0x7F1F74")]
			public ClusterNode(item_s ii, int index)
			{
			}

			[Token(Token = "0x6001A60")]
			[Address(RVA = "0x7F204C", Offset = "0x7F204C", VA = "0x7F204C")]
			public ClusterNode(ClusterNode a, ClusterNode b, int index, int h, float dist, ClusterNode[] clusters)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20003FB")]
		public class item_s
		{
			[Token(Token = "0x4001AC8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public GameObject go;

			[Token(Token = "0x4001AC9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Vector3 coord;

			[Token(Token = "0x6001A61")]
			[Address(RVA = "0x7F2224", Offset = "0x7F2224", VA = "0x7F2224")]
			public item_s()
			{
			}
		}

		[Token(Token = "0x20003FC")]
		public class ClusterDistance
		{
			[Token(Token = "0x4001ACA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public ClusterNode a;

			[Token(Token = "0x4001ACB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public ClusterNode b;

			[Token(Token = "0x6001A62")]
			[Address(RVA = "0x7F1F24", Offset = "0x7F1F24", VA = "0x7F1F24")]
			public ClusterDistance(ClusterNode aa, ClusterNode bb)
			{
			}
		}

		[Token(Token = "0x4000E96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<item_s> items;

		[Token(Token = "0x4000E97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ClusterNode[] clusters;

		[Token(Token = "0x4000E98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool wasCanceled;

		[Token(Token = "0x4000E99")]
		private const int MAX_PRIORITY_Q_SIZE = 2048;

		[Token(Token = "0x6000C2D")]
		[Address(RVA = "0xF9AAC4", Offset = "0xF9AAC4", VA = "0xF9AAC4")]
		private float euclidean_distance(Vector3 a, Vector3 b)
		{
			return default(float);
		}

		[Token(Token = "0x6000C2E")]
		[Address(RVA = "0xF9AACC", Offset = "0xF9AACC", VA = "0xF9AACC")]
		public bool agglomerate(ProgressUpdateCancelableDelegate progFunc)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C2F")]
		[Address(RVA = "0xF9BC60", Offset = "0xF9BC60", VA = "0xF9BC60")]
		private float _RefillPriorityQWithSome(PriorityQueue<float, ClusterDistance> pq, List<ClusterNode> unclustered, ClusterNode[] clusters, ProgressUpdateCancelableDelegate progFunc)
		{
			return default(float);
		}

		[Token(Token = "0x6000C30")]
		[Address(RVA = "0xF9C0D8", Offset = "0xF9C0D8", VA = "0xF9C0D8")]
		public int TestRun(List<GameObject> gos)
		{
			return default(int);
		}

		[Token(Token = "0x6000C31")]
		[Address(RVA = "0xF9C2A8", Offset = "0xF9C2A8", VA = "0xF9C2A8")]
		public static void Main()
		{
		}

		[Token(Token = "0x6000C32")]
		public static T NthSmallestElement<T>(List<T> array, int n) where T : IComparable<T>
		{
			return (T)null;
		}

		[Token(Token = "0x6000C33")]
		private static List<T> QuickSelectSmallest<T>(List<T> input, int n) where T : IComparable<T>
		{
			return null;
		}

		[Token(Token = "0x6000C34")]
		private static int QuickSelectPartition<T>(List<T> array, int startIndex, int endIndex, int pivotIndex) where T : IComparable<T>
		{
			return default(int);
		}

		[Token(Token = "0x6000C35")]
		private static void Swap<T>(List<T> array, int index1, int index2)
		{
		}

		[Token(Token = "0x6000C36")]
		[Address(RVA = "0xF9C424", Offset = "0xF9C424", VA = "0xF9C424")]
		public MB3_AgglomerativeClustering()
		{
		}
	}
	[Token(Token = "0x20001EF")]
	public class MB3_CopyBoneWeights
	{
		[Token(Token = "0x6000C37")]
		[Address(RVA = "0xF9C60C", Offset = "0xF9C60C", VA = "0xF9C60C")]
		public static void CopyBoneWeightsFromSeamMeshToOtherMeshes(float radius, Mesh seamMesh, Mesh[] targetMeshes)
		{
		}

		[Token(Token = "0x6000C38")]
		[Address(RVA = "0xF9CFB4", Offset = "0xF9CFB4", VA = "0xF9CFB4")]
		public MB3_CopyBoneWeights()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001F0")]
	public abstract class MB3_MeshCombiner
	{
		[Token(Token = "0x20003FD")]
		public delegate void GenerateUV2Delegate(Mesh m, float hardAngle, float packMargin);

		[Token(Token = "0x20003FE")]
		public class MBBlendShapeKey
		{
			[Token(Token = "0x4001ACC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int gameObjecID;

			[Token(Token = "0x4001ACD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int blendShapeIndexInSrc;

			[Token(Token = "0x6001A67")]
			[Address(RVA = "0x7F2D90", Offset = "0x7F2D90", VA = "0x7F2D90")]
			public MBBlendShapeKey(int srcSkinnedMeshRenderGameObjectID, int blendShapeIndexInSource)
			{
			}

			[Token(Token = "0x6001A68")]
			[Address(RVA = "0x7F2DC8", Offset = "0x7F2DC8", VA = "0x7F2DC8", Slot = "0")]
			public override bool Equals(object obj)
			{
				return default(bool);
			}

			[Token(Token = "0x6001A69")]
			[Address(RVA = "0x7F2E70", Offset = "0x7F2E70", VA = "0x7F2E70", Slot = "2")]
			public override int GetHashCode()
			{
				return default(int);
			}
		}

		[Token(Token = "0x20003FF")]
		public class MBBlendShapeValue
		{
			[Token(Token = "0x4001ACE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public GameObject combinedMeshGameObject;

			[Token(Token = "0x4001ACF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int blendShapeIndex;

			[Token(Token = "0x6001A6A")]
			[Address(RVA = "0x7F2E8C", Offset = "0x7F2E8C", VA = "0x7F2E8C")]
			public MBBlendShapeValue()
			{
			}
		}

		[Token(Token = "0x4000E9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		protected MB2_LogLevel _LOG_LEVEL;

		[Token(Token = "0x4000E9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		protected MB2_ValidationLevel _validationLevel;

		[Token(Token = "0x4000E9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		protected string _name;

		[Token(Token = "0x4000E9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		protected MB2_TextureBakeResults _textureBakeResults;

		[Token(Token = "0x4000E9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		protected GameObject _resultSceneObject;

		[Token(Token = "0x4000E9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		protected Renderer _targetRenderer;

		[Token(Token = "0x4000EA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		protected MB_RenderType _renderType;

		[Token(Token = "0x4000EA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		protected MB2_OutputOptions _outputOption;

		[Token(Token = "0x4000EA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		protected MB2_LightmapOptions _lightmapOption;

		[Token(Token = "0x4000EA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[SerializeField]
		protected bool _doNorm;

		[Token(Token = "0x4000EA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
		[SerializeField]
		protected bool _doTan;

		[Token(Token = "0x4000EA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x46")]
		[SerializeField]
		protected bool _doCol;

		[Token(Token = "0x4000EA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x47")]
		[SerializeField]
		protected bool _doUV;

		[Token(Token = "0x4000EA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		protected bool _doUV3;

		[Token(Token = "0x4000EA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		[SerializeField]
		protected bool _doUV4;

		[Token(Token = "0x4000EA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
		[SerializeField]
		protected bool _doBlendShapes;

		[Token(Token = "0x4000EAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4B")]
		[SerializeField]
		protected bool _recenterVertsToBoundsCenter;

		[Token(Token = "0x4000EAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[SerializeField]
		public bool _optimizeAfterBake;

		[Token(Token = "0x4000EAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		public float uv2UnwrappingParamsHardAngle;

		[Token(Token = "0x4000EAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[SerializeField]
		public float uv2UnwrappingParamsPackMargin;

		[Token(Token = "0x4000EAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected bool _usingTemporaryTextureBakeResult;

		[Token(Token = "0x17000089")]
		public static bool EVAL_VERSION
		{
			[Token(Token = "0x6000C39")]
			[Address(RVA = "0x1295150", Offset = "0x1295150", VA = "0x1295150")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700008A")]
		public virtual MB2_LogLevel LOG_LEVEL
		{
			[Token(Token = "0x6000C3A")]
			[Address(RVA = "0x1295158", Offset = "0x1295158", VA = "0x1295158", Slot = "4")]
			get
			{
				return default(MB2_LogLevel);
			}
			[Token(Token = "0x6000C3B")]
			[Address(RVA = "0x1295160", Offset = "0x1295160", VA = "0x1295160", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x1700008B")]
		public virtual MB2_ValidationLevel validationLevel
		{
			[Token(Token = "0x6000C3C")]
			[Address(RVA = "0x1295168", Offset = "0x1295168", VA = "0x1295168", Slot = "6")]
			get
			{
				return default(MB2_ValidationLevel);
			}
			[Token(Token = "0x6000C3D")]
			[Address(RVA = "0x1295170", Offset = "0x1295170", VA = "0x1295170", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x1700008C")]
		public string name
		{
			[Token(Token = "0x6000C3E")]
			[Address(RVA = "0x1295178", Offset = "0x1295178", VA = "0x1295178")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C3F")]
			[Address(RVA = "0x1295180", Offset = "0x1295180", VA = "0x1295180")]
			set
			{
			}
		}

		[Token(Token = "0x1700008D")]
		public virtual MB2_TextureBakeResults textureBakeResults
		{
			[Token(Token = "0x6000C40")]
			[Address(RVA = "0x1295188", Offset = "0x1295188", VA = "0x1295188", Slot = "8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C41")]
			[Address(RVA = "0x1295190", Offset = "0x1295190", VA = "0x1295190", Slot = "9")]
			set
			{
			}
		}

		[Token(Token = "0x1700008E")]
		public virtual GameObject resultSceneObject
		{
			[Token(Token = "0x6000C42")]
			[Address(RVA = "0x1295198", Offset = "0x1295198", VA = "0x1295198", Slot = "10")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C43")]
			[Address(RVA = "0x12951A0", Offset = "0x12951A0", VA = "0x12951A0", Slot = "11")]
			set
			{
			}
		}

		[Token(Token = "0x1700008F")]
		public virtual Renderer targetRenderer
		{
			[Token(Token = "0x6000C44")]
			[Address(RVA = "0x12951A8", Offset = "0x12951A8", VA = "0x12951A8", Slot = "12")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C45")]
			[Address(RVA = "0x12951B0", Offset = "0x12951B0", VA = "0x12951B0", Slot = "13")]
			set
			{
			}
		}

		[Token(Token = "0x17000090")]
		public virtual MB_RenderType renderType
		{
			[Token(Token = "0x6000C46")]
			[Address(RVA = "0x12952B8", Offset = "0x12952B8", VA = "0x12952B8", Slot = "14")]
			get
			{
				return default(MB_RenderType);
			}
			[Token(Token = "0x6000C47")]
			[Address(RVA = "0x12952C0", Offset = "0x12952C0", VA = "0x12952C0", Slot = "15")]
			set
			{
			}
		}

		[Token(Token = "0x17000091")]
		public virtual MB2_OutputOptions outputOption
		{
			[Token(Token = "0x6000C48")]
			[Address(RVA = "0x12952C8", Offset = "0x12952C8", VA = "0x12952C8", Slot = "16")]
			get
			{
				return default(MB2_OutputOptions);
			}
			[Token(Token = "0x6000C49")]
			[Address(RVA = "0x12952D0", Offset = "0x12952D0", VA = "0x12952D0", Slot = "17")]
			set
			{
			}
		}

		[Token(Token = "0x17000092")]
		public virtual MB2_LightmapOptions lightmapOption
		{
			[Token(Token = "0x6000C4A")]
			[Address(RVA = "0x12952D8", Offset = "0x12952D8", VA = "0x12952D8", Slot = "18")]
			get
			{
				return default(MB2_LightmapOptions);
			}
			[Token(Token = "0x6000C4B")]
			[Address(RVA = "0x12952E0", Offset = "0x12952E0", VA = "0x12952E0", Slot = "19")]
			set
			{
			}
		}

		[Token(Token = "0x17000093")]
		public virtual bool doNorm
		{
			[Token(Token = "0x6000C4C")]
			[Address(RVA = "0x12952E8", Offset = "0x12952E8", VA = "0x12952E8", Slot = "20")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000C4D")]
			[Address(RVA = "0x12952F0", Offset = "0x12952F0", VA = "0x12952F0", Slot = "21")]
			set
			{
			}
		}

		[Token(Token = "0x17000094")]
		public virtual bool doTan
		{
			[Token(Token = "0x6000C4E")]
			[Address(RVA = "0x12952FC", Offset = "0x12952FC", VA = "0x12952FC", Slot = "22")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000C4F")]
			[Address(RVA = "0x1295304", Offset = "0x1295304", VA = "0x1295304", Slot = "23")]
			set
			{
			}
		}

		[Token(Token = "0x17000095")]
		public virtual bool doCol
		{
			[Token(Token = "0x6000C50")]
			[Address(RVA = "0x1295310", Offset = "0x1295310", VA = "0x1295310", Slot = "24")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000C51")]
			[Address(RVA = "0x1295318", Offset = "0x1295318", VA = "0x1295318", Slot = "25")]
			set
			{
			}
		}

		[Token(Token = "0x17000096")]
		public virtual bool doUV
		{
			[Token(Token = "0x6000C52")]
			[Address(RVA = "0x1295324", Offset = "0x1295324", VA = "0x1295324", Slot = "26")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000C53")]
			[Address(RVA = "0x129532C", Offset = "0x129532C", VA = "0x129532C", Slot = "27")]
			set
			{
			}
		}

		[Token(Token = "0x17000097")]
		public virtual bool doUV1
		{
			[Token(Token = "0x6000C54")]
			[Address(RVA = "0x1295338", Offset = "0x1295338", VA = "0x1295338", Slot = "28")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000C55")]
			[Address(RVA = "0x1295340", Offset = "0x1295340", VA = "0x1295340", Slot = "29")]
			set
			{
			}
		}

		[Token(Token = "0x17000098")]
		public virtual bool doUV3
		{
			[Token(Token = "0x6000C57")]
			[Address(RVA = "0x1295368", Offset = "0x1295368", VA = "0x1295368", Slot = "31")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000C58")]
			[Address(RVA = "0x1295370", Offset = "0x1295370", VA = "0x1295370", Slot = "32")]
			set
			{
			}
		}

		[Token(Token = "0x17000099")]
		public virtual bool doUV4
		{
			[Token(Token = "0x6000C59")]
			[Address(RVA = "0x129537C", Offset = "0x129537C", VA = "0x129537C", Slot = "33")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000C5A")]
			[Address(RVA = "0x1295384", Offset = "0x1295384", VA = "0x1295384", Slot = "34")]
			set
			{
			}
		}

		[Token(Token = "0x1700009A")]
		public virtual bool doBlendShapes
		{
			[Token(Token = "0x6000C5B")]
			[Address(RVA = "0x1295390", Offset = "0x1295390", VA = "0x1295390", Slot = "35")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000C5C")]
			[Address(RVA = "0x1295398", Offset = "0x1295398", VA = "0x1295398", Slot = "36")]
			set
			{
			}
		}

		[Token(Token = "0x1700009B")]
		public virtual bool recenterVertsToBoundsCenter
		{
			[Token(Token = "0x6000C5D")]
			[Address(RVA = "0x12953A4", Offset = "0x12953A4", VA = "0x12953A4", Slot = "37")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000C5E")]
			[Address(RVA = "0x12953AC", Offset = "0x12953AC", VA = "0x12953AC", Slot = "38")]
			set
			{
			}
		}

		[Token(Token = "0x1700009C")]
		public bool optimizeAfterBake
		{
			[Token(Token = "0x6000C5F")]
			[Address(RVA = "0x12953B8", Offset = "0x12953B8", VA = "0x12953B8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000C60")]
			[Address(RVA = "0x12953C0", Offset = "0x12953C0", VA = "0x12953C0")]
			set
			{
			}
		}

		[Token(Token = "0x6000C56")]
		[Address(RVA = "0x1295344", Offset = "0x1295344", VA = "0x1295344", Slot = "30")]
		public virtual bool doUV2()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C61")]
		public abstract int GetLightmapIndex();

		[Token(Token = "0x6000C62")]
		public abstract void ClearBuffers();

		[Token(Token = "0x6000C63")]
		public abstract void ClearMesh();

		[Token(Token = "0x6000C64")]
		public abstract void DestroyMesh();

		[Token(Token = "0x6000C65")]
		public abstract void DestroyMeshEditor(MB2_EditorMethodsInterface editorMethods);

		[Token(Token = "0x6000C66")]
		public abstract List<GameObject> GetObjectsInCombined();

		[Token(Token = "0x6000C67")]
		public abstract int GetNumObjectsInCombined();

		[Token(Token = "0x6000C68")]
		public abstract int GetNumVerticesFor(GameObject go);

		[Token(Token = "0x6000C69")]
		public abstract int GetNumVerticesFor(int instanceID);

		[Token(Token = "0x6000C6A")]
		public abstract Dictionary<MBBlendShapeKey, MBBlendShapeValue> BuildSourceBlendShapeToCombinedIndexMap();

		[Token(Token = "0x6000C6B")]
		[Address(RVA = "0x12953CC", Offset = "0x12953CC", VA = "0x12953CC", Slot = "49")]
		public virtual void Apply()
		{
		}

		[Token(Token = "0x6000C6C")]
		public abstract void Apply(GenerateUV2Delegate uv2GenerationMethod);

		[Token(Token = "0x6000C6D")]
		public abstract void Apply(bool triangles, bool vertices, bool normals, bool tangents, bool uvs, bool uv2, bool uv3, bool uv4, bool colors, bool bones = false, bool blendShapeFlag = false, [Optional] GenerateUV2Delegate uv2GenerationMethod);

		[Token(Token = "0x6000C6E")]
		public abstract void UpdateGameObjects(GameObject[] gos, bool recalcBounds = true, bool updateVertices = true, bool updateNormals = true, bool updateTangents = true, bool updateUV = false, bool updateUV2 = false, bool updateUV3 = false, bool updateUV4 = false, bool updateColors = false, bool updateSkinningInfo = false);

		[Token(Token = "0x6000C6F")]
		public abstract bool AddDeleteGameObjects(GameObject[] gos, GameObject[] deleteGOs, bool disableRendererInSource = true);

		[Token(Token = "0x6000C70")]
		public abstract bool AddDeleteGameObjectsByID(GameObject[] gos, int[] deleteGOinstanceIDs, bool disableRendererInSource);

		[Token(Token = "0x6000C71")]
		public abstract bool CombinedMeshContains(GameObject go);

		[Token(Token = "0x6000C72")]
		public abstract void UpdateSkinnedMeshApproximateBounds();

		[Token(Token = "0x6000C73")]
		public abstract void UpdateSkinnedMeshApproximateBoundsFromBones();

		[Token(Token = "0x6000C74")]
		public abstract void CheckIntegrity();

		[Token(Token = "0x6000C75")]
		public abstract void UpdateSkinnedMeshApproximateBoundsFromBounds();

		[Token(Token = "0x6000C76")]
		[Address(RVA = "0x12953E0", Offset = "0x12953E0", VA = "0x12953E0")]
		public static void UpdateSkinnedMeshApproximateBoundsFromBonesStatic(Transform[] bs, SkinnedMeshRenderer smr)
		{
		}

		[Token(Token = "0x6000C77")]
		[Address(RVA = "0x1295624", Offset = "0x1295624", VA = "0x1295624")]
		public static void UpdateSkinnedMeshApproximateBoundsFromBoundsStatic(List<GameObject> objectsInCombined, SkinnedMeshRenderer smr)
		{
		}

		[Token(Token = "0x6000C78")]
		[Address(RVA = "0x1295818", Offset = "0x1295818", VA = "0x1295818", Slot = "60")]
		protected virtual bool _CreateTemporaryTextrueBakeResult(GameObject[] gos, List<Material> matsOnTargetRenderer)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C79")]
		public abstract List<Material> GetMaterialsOnTargetRenderer();

		[Token(Token = "0x6000C7A")]
		[Address(RVA = "0x12958F4", Offset = "0x12958F4", VA = "0x12958F4")]
		protected MB3_MeshCombiner()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001F1")]
	public class MB3_MeshCombinerSingle : MB3_MeshCombiner
	{
		[Serializable]
		[Token(Token = "0x2000400")]
		public class SerializableIntArray
		{
			[Token(Token = "0x4001AD0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int[] data;

			[Token(Token = "0x6001A6B")]
			[Address(RVA = "0x7F5CB8", Offset = "0x7F5CB8", VA = "0x7F5CB8")]
			public SerializableIntArray()
			{
			}

			[Token(Token = "0x6001A6C")]
			[Address(RVA = "0x7F5CC0", Offset = "0x7F5CC0", VA = "0x7F5CC0")]
			public SerializableIntArray(int len)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000401")]
		public class MB_DynamicGameObject : IComparable<MB_DynamicGameObject>
		{
			[Token(Token = "0x4001AD1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int instanceID;

			[Token(Token = "0x4001AD2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string name;

			[Token(Token = "0x4001AD3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public int vertIdx;

			[Token(Token = "0x4001AD4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public int blendShapeIdx;

			[Token(Token = "0x4001AD5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public int numVerts;

			[Token(Token = "0x4001AD6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public int numBlendShapes;

			[Token(Token = "0x4001AD7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public int[] indexesOfBonesUsed;

			[Token(Token = "0x4001AD8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public int lightmapIndex;

			[Token(Token = "0x4001AD9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public Vector4 lightmapTilingOffset;

			[Token(Token = "0x4001ADA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			public Vector3 meshSize;

			[Token(Token = "0x4001ADB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public bool show;

			[Token(Token = "0x4001ADC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
			public bool invertTriangles;

			[Token(Token = "0x4001ADD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public int[] submeshTriIdxs;

			[Token(Token = "0x4001ADE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public int[] submeshNumTris;

			[Token(Token = "0x4001ADF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			public int[] targetSubmeshIdxs;

			[Token(Token = "0x4001AE0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			public Rect[] uvRects;

			[Token(Token = "0x4001AE1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			public Rect[] encapsulatingRect;

			[Token(Token = "0x4001AE2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			public Rect[] sourceMaterialTiling;

			[Token(Token = "0x4001AE3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			public Rect[] obUVRects;

			[Token(Token = "0x4001AE4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			public bool _beingDeleted;

			[Token(Token = "0x4001AE5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
			public int _triangleIdxAdjustment;

			[NonSerialized]
			[Token(Token = "0x4001AE6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			public SerializableIntArray[] _tmpSubmeshTris;

			[NonSerialized]
			[Token(Token = "0x4001AE7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			public Transform[] _tmpCachedBones;

			[NonSerialized]
			[Token(Token = "0x4001AE8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			public Matrix4x4[] _tmpCachedBindposes;

			[NonSerialized]
			[Token(Token = "0x4001AE9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
			public BoneWeight[] _tmpCachedBoneWeights;

			[NonSerialized]
			[Token(Token = "0x4001AEA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			public int[] _tmpIndexesOfSourceBonesUsed;

			[Token(Token = "0x6001A6D")]
			[Address(RVA = "0x7F3114", Offset = "0x7F3114", VA = "0x7F3114", Slot = "4")]
			public int CompareTo(MB_DynamicGameObject b)
			{
				return default(int);
			}

			[Token(Token = "0x6001A6E")]
			[Address(RVA = "0x7F3134", Offset = "0x7F3134", VA = "0x7F3134")]
			public MB_DynamicGameObject()
			{
			}
		}

		[Token(Token = "0x2000402")]
		public class MeshChannels
		{
			[Token(Token = "0x4001AEB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3[] vertices;

			[Token(Token = "0x4001AEC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Vector3[] normals;

			[Token(Token = "0x4001AED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector4[] tangents;

			[Token(Token = "0x4001AEE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector2[] uv0raw;

			[Token(Token = "0x4001AEF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Vector2[] uv0modified;

			[Token(Token = "0x4001AF0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Vector2[] uv2;

			[Token(Token = "0x4001AF1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public Vector2[] uv3;

			[Token(Token = "0x4001AF2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Vector2[] uv4;

			[Token(Token = "0x4001AF3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public Color[] colors;

			[Token(Token = "0x4001AF4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public BoneWeight[] boneWeights;

			[Token(Token = "0x4001AF5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public Matrix4x4[] bindPoses;

			[Token(Token = "0x4001AF6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public int[] triangles;

			[Token(Token = "0x4001AF7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			public MBBlendShape[] blendShapes;

			[Token(Token = "0x6001A6F")]
			[Address(RVA = "0x7F31F0", Offset = "0x7F31F0", VA = "0x7F31F0")]
			public MeshChannels()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000403")]
		public class MBBlendShapeFrame
		{
			[Token(Token = "0x4001AF8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float frameWeight;

			[Token(Token = "0x4001AF9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Vector3[] vertices;

			[Token(Token = "0x4001AFA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector3[] normals;

			[Token(Token = "0x4001AFB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3[] tangents;

			[Token(Token = "0x6001A70")]
			[Address(RVA = "0x7F310C", Offset = "0x7F310C", VA = "0x7F310C")]
			public MBBlendShapeFrame()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000404")]
		public class MBBlendShape
		{
			[Token(Token = "0x4001AFC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int gameObjectID;

			[Token(Token = "0x4001AFD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string name;

			[Token(Token = "0x4001AFE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public int indexInSource;

			[Token(Token = "0x4001AFF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public MBBlendShapeFrame[] frames;

			[Token(Token = "0x6001A71")]
			[Address(RVA = "0x7F3104", Offset = "0x7F3104", VA = "0x7F3104")]
			public MBBlendShape()
			{
			}
		}

		[Token(Token = "0x2000405")]
		public class MeshChannelsCache
		{
			[Token(Token = "0x4001B00")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private MB3_MeshCombinerSingle mc;

			[Token(Token = "0x4001B01")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			protected Dictionary<int, MeshChannels> meshID2MeshChannels;

			[Token(Token = "0x4001B02")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private Vector2 _HALF_UV;

			[Token(Token = "0x6001A72")]
			[Address(RVA = "0x7F31F8", Offset = "0x7F31F8", VA = "0x7F31F8")]
			public MeshChannelsCache(MB3_MeshCombinerSingle mcs)
			{
			}

			[Token(Token = "0x6001A73")]
			[Address(RVA = "0x7F32A0", Offset = "0x7F32A0", VA = "0x7F32A0")]
			internal Vector3[] GetVertices(Mesh m)
			{
				return null;
			}

			[Token(Token = "0x6001A74")]
			[Address(RVA = "0x7F33CC", Offset = "0x7F33CC", VA = "0x7F33CC")]
			internal Vector3[] GetNormals(Mesh m)
			{
				return null;
			}

			[Token(Token = "0x6001A75")]
			[Address(RVA = "0x7F37C0", Offset = "0x7F37C0", VA = "0x7F37C0")]
			internal Vector4[] GetTangents(Mesh m)
			{
				return null;
			}

			[Token(Token = "0x6001A76")]
			[Address(RVA = "0x7F143C", Offset = "0x7F143C", VA = "0x7F143C")]
			internal Vector2[] GetUv0Raw(Mesh m)
			{
				return null;
			}

			[Token(Token = "0x6001A77")]
			[Address(RVA = "0x7F3E58", Offset = "0x7F3E58", VA = "0x7F3E58")]
			internal Vector2[] GetUv0Modified(Mesh m)
			{
				return null;
			}

			[Token(Token = "0x6001A78")]
			[Address(RVA = "0x7F3F74", Offset = "0x7F3F74", VA = "0x7F3F74")]
			internal Vector2[] GetUv2(Mesh m)
			{
				return null;
			}

			[Token(Token = "0x6001A79")]
			[Address(RVA = "0x7F43BC", Offset = "0x7F43BC", VA = "0x7F43BC")]
			internal Vector2[] GetUv3(Mesh m)
			{
				return null;
			}

			[Token(Token = "0x6001A7A")]
			[Address(RVA = "0x7F4504", Offset = "0x7F4504", VA = "0x7F4504")]
			internal Vector2[] GetUv4(Mesh m)
			{
				return null;
			}

			[Token(Token = "0x6001A7B")]
			[Address(RVA = "0x7F464C", Offset = "0x7F464C", VA = "0x7F464C")]
			internal Color[] GetColors(Mesh m)
			{
				return null;
			}

			[Token(Token = "0x6001A7C")]
			[Address(RVA = "0x7F4A1C", Offset = "0x7F4A1C", VA = "0x7F4A1C")]
			internal Matrix4x4[] GetBindposes(Renderer r)
			{
				return null;
			}

			[Token(Token = "0x6001A7D")]
			[Address(RVA = "0x7F4D54", Offset = "0x7F4D54", VA = "0x7F4D54")]
			internal BoneWeight[] GetBoneWeights(Renderer r, int numVertsInMeshBeingAdded)
			{
				return null;
			}

			[Token(Token = "0x6001A7E")]
			[Address(RVA = "0x7F5110", Offset = "0x7F5110", VA = "0x7F5110")]
			internal int[] GetTriangles(Mesh m)
			{
				return null;
			}

			[Token(Token = "0x6001A7F")]
			[Address(RVA = "0x7F523C", Offset = "0x7F523C", VA = "0x7F523C")]
			internal MBBlendShape[] GetBlendShapes(Mesh m, int gameObjectID)
			{
				return null;
			}

			[Token(Token = "0x6001A80")]
			[Address(RVA = "0x7F4778", Offset = "0x7F4778", VA = "0x7F4778")]
			private Color[] _getMeshColors(Mesh m)
			{
				return null;
			}

			[Token(Token = "0x6001A81")]
			[Address(RVA = "0x7F34F8", Offset = "0x7F34F8", VA = "0x7F34F8")]
			private Vector3[] _getMeshNormals(Mesh m)
			{
				return null;
			}

			[Token(Token = "0x6001A82")]
			[Address(RVA = "0x7F38EC", Offset = "0x7F38EC", VA = "0x7F38EC")]
			private Vector4[] _getMeshTangents(Mesh m)
			{
				return null;
			}

			[Token(Token = "0x6001A83")]
			[Address(RVA = "0x7F3BC8", Offset = "0x7F3BC8", VA = "0x7F3BC8")]
			private Vector2[] _getMeshUVs(Mesh m)
			{
				return null;
			}

			[Token(Token = "0x6001A84")]
			[Address(RVA = "0x7F40A0", Offset = "0x7F40A0", VA = "0x7F40A0")]
			private Vector2[] _getMeshUV2s(Mesh m)
			{
				return null;
			}

			[Token(Token = "0x6001A85")]
			[Address(RVA = "0x7F4B9C", Offset = "0x7F4B9C", VA = "0x7F4B9C")]
			public static Matrix4x4[] _getBindPoses(Renderer r)
			{
				return null;
			}

			[Token(Token = "0x6001A86")]
			[Address(RVA = "0x7F4EDC", Offset = "0x7F4EDC", VA = "0x7F4EDC")]
			public static BoneWeight[] _getBoneWeights(Renderer r, int numVertsInMeshBeingAdded)
			{
				return null;
			}

			[Token(Token = "0x6001A87")]
			[Address(RVA = "0x7F57D8", Offset = "0x7F57D8", VA = "0x7F57D8")]
			private void _generateTangents(int[] triangles, Vector3[] verts, Vector2[] uvs, Vector3[] normals, Vector4[] outTangents)
			{
			}
		}

		[Token(Token = "0x2000406")]
		public struct BoneAndBindpose
		{
			[Token(Token = "0x4001B03")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Transform bone;

			[Token(Token = "0x4001B04")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Matrix4x4 bindPose;

			[Token(Token = "0x6001A88")]
			[Address(RVA = "0x7F2EFC", Offset = "0x7F2EFC", VA = "0x7F2EFC")]
			public BoneAndBindpose(Transform t, Matrix4x4 bp)
			{
			}

			[Token(Token = "0x6001A89")]
			[Address(RVA = "0x7F2F3C", Offset = "0x7F2F3C", VA = "0x7F2F3C", Slot = "0")]
			public override bool Equals(object obj)
			{
				return default(bool);
			}

			[Token(Token = "0x6001A8A")]
			[Address(RVA = "0x7F3098", Offset = "0x7F3098", VA = "0x7F3098", Slot = "2")]
			public override int GetHashCode()
			{
				return default(int);
			}
		}

		[Token(Token = "0x2000407")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDEEC", Offset = "0x5CDEEC")]
		private sealed class <>c__DisplayClass56_0
		{
			[Token(Token = "0x4001B05")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public GameObject[] _goToAdd;

			[Token(Token = "0x4001B06")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int i;

			[Token(Token = "0x4001B07")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Predicate<int> <>9__0;

			[Token(Token = "0x6001A8B")]
			[Address(RVA = "0x7F2E94", Offset = "0x7F2E94", VA = "0x7F2E94")]
			public <>c__DisplayClass56_0()
			{
			}

			[Token(Token = "0x6001A8C")]
			[Address(RVA = "0x7F2E9C", Offset = "0x7F2E9C", VA = "0x7F2E9C")]
			internal bool <_addToCombined>b__0(int o)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4000EAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		protected List<GameObject> objectsInCombinedMesh;

		[Token(Token = "0x4000EB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private int lightmapIndex;

		[Token(Token = "0x4000EB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private List<MB_DynamicGameObject> mbDynamicObjectsInCombinedMesh;

		[Token(Token = "0x4000EB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Dictionary<int, MB_DynamicGameObject> _instance2combined_map;

		[Token(Token = "0x4000EB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private Vector3[] verts;

		[Token(Token = "0x4000EB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private Vector3[] normals;

		[Token(Token = "0x4000EB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		private Vector4[] tangents;

		[Token(Token = "0x4000EB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		private Vector2[] uvs;

		[Token(Token = "0x4000EB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		private Vector2[] uv2s;

		[Token(Token = "0x4000EB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		private Vector2[] uv3s;

		[Token(Token = "0x4000EB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		private Vector2[] uv4s;

		[Token(Token = "0x4000EBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		private Color[] colors;

		[Token(Token = "0x4000EBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		private Matrix4x4[] bindPoses;

		[Token(Token = "0x4000EBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		private Transform[] bones;

		[Token(Token = "0x4000EBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		internal MBBlendShape[] blendShapes;

		[Token(Token = "0x4000EBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		internal MBBlendShape[] blendShapesInCombined;

		[Token(Token = "0x4000EBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[SerializeField]
		private SerializableIntArray[] submeshTris;

		[Token(Token = "0x4000EC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[SerializeField]
		private Mesh _mesh;

		[Token(Token = "0x4000EC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private BoneWeight[] boneWeights;

		[Token(Token = "0x4000EC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private GameObject[] empty;

		[Token(Token = "0x4000EC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private int[] emptyIDs;

		[Token(Token = "0x1700009D")]
		public override MB2_TextureBakeResults textureBakeResults
		{
			[Token(Token = "0x6000C7B")]
			[Address(RVA = "0x129592C", Offset = "0x129592C", VA = "0x129592C", Slot = "9")]
			set
			{
			}
		}

		[Token(Token = "0x1700009E")]
		public override MB_RenderType renderType
		{
			[Token(Token = "0x6000C7C")]
			[Address(RVA = "0x1295A7C", Offset = "0x1295A7C", VA = "0x1295A7C", Slot = "15")]
			set
			{
			}
		}

		[Token(Token = "0x1700009F")]
		public override GameObject resultSceneObject
		{
			[Token(Token = "0x6000C7D")]
			[Address(RVA = "0x1295B3C", Offset = "0x1295B3C", VA = "0x1295B3C", Slot = "11")]
			set
			{
			}
		}

		[Token(Token = "0x6000C7E")]
		[Address(RVA = "0x1295C70", Offset = "0x1295C70", VA = "0x1295C70")]
		private MB_DynamicGameObject instance2Combined_MapGet(int gameObjectID)
		{
			return null;
		}

		[Token(Token = "0x6000C7F")]
		[Address(RVA = "0x1295CD4", Offset = "0x1295CD4", VA = "0x1295CD4")]
		private void instance2Combined_MapAdd(int gameObjectID, MB_DynamicGameObject dgo)
		{
		}

		[Token(Token = "0x6000C80")]
		[Address(RVA = "0x1295D40", Offset = "0x1295D40", VA = "0x1295D40")]
		private void instance2Combined_MapRemove(int gameObjectID)
		{
		}

		[Token(Token = "0x6000C81")]
		[Address(RVA = "0x1295DA4", Offset = "0x1295DA4", VA = "0x1295DA4")]
		private bool instance2Combined_MapTryGetValue(int gameObjectID, out MB_DynamicGameObject dgo)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C82")]
		[Address(RVA = "0x1295E10", Offset = "0x1295E10", VA = "0x1295E10")]
		private int instance2Combined_MapCount()
		{
			return default(int);
		}

		[Token(Token = "0x6000C83")]
		[Address(RVA = "0x1295E64", Offset = "0x1295E64", VA = "0x1295E64")]
		private void instance2Combined_MapClear()
		{
		}

		[Token(Token = "0x6000C84")]
		[Address(RVA = "0x1295EB8", Offset = "0x1295EB8", VA = "0x1295EB8")]
		private bool instance2Combined_MapContainsKey(int gameObjectID)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C85")]
		[Address(RVA = "0x1295F1C", Offset = "0x1295F1C", VA = "0x1295F1C", Slot = "45")]
		public override int GetNumObjectsInCombined()
		{
			return default(int);
		}

		[Token(Token = "0x6000C86")]
		[Address(RVA = "0x1295F68", Offset = "0x1295F68", VA = "0x1295F68", Slot = "44")]
		public override List<GameObject> GetObjectsInCombined()
		{
			return null;
		}

		[Token(Token = "0x6000C87")]
		[Address(RVA = "0x1296004", Offset = "0x1296004", VA = "0x1296004")]
		public Mesh GetMesh()
		{
			return null;
		}

		[Token(Token = "0x6000C88")]
		[Address(RVA = "0x12960B4", Offset = "0x12960B4", VA = "0x12960B4")]
		public void SetMesh(Mesh m)
		{
		}

		[Token(Token = "0x6000C89")]
		[Address(RVA = "0x12960BC", Offset = "0x12960BC", VA = "0x12960BC")]
		public Transform[] GetBones()
		{
			return null;
		}

		[Token(Token = "0x6000C8A")]
		[Address(RVA = "0x12960C4", Offset = "0x12960C4", VA = "0x12960C4", Slot = "39")]
		public override int GetLightmapIndex()
		{
			return default(int);
		}

		[Token(Token = "0x6000C8B")]
		[Address(RVA = "0x129611C", Offset = "0x129611C", VA = "0x129611C", Slot = "46")]
		public override int GetNumVerticesFor(GameObject go)
		{
			return default(int);
		}

		[Token(Token = "0x6000C8C")]
		[Address(RVA = "0x1296160", Offset = "0x1296160", VA = "0x1296160", Slot = "47")]
		public override int GetNumVerticesFor(int instanceID)
		{
			return default(int);
		}

		[Token(Token = "0x6000C8D")]
		[Address(RVA = "0x12961A0", Offset = "0x12961A0", VA = "0x12961A0", Slot = "48")]
		public override Dictionary<MBBlendShapeKey, MBBlendShapeValue> BuildSourceBlendShapeToCombinedIndexMap()
		{
			return null;
		}

		[Token(Token = "0x6000C8E")]
		[Address(RVA = "0x129633C", Offset = "0x129633C", VA = "0x129633C")]
		private void _initialize(int numResultMats)
		{
		}

		[Token(Token = "0x6000C8F")]
		[Address(RVA = "0x1296B00", Offset = "0x1296B00", VA = "0x1296B00")]
		private bool _collectMaterialTriangles(Mesh m, MB_DynamicGameObject dgo, Material[] sharedMaterials, OrderedDictionary sourceMats2submeshIdx_map)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C90")]
		[Address(RVA = "0x1297230", Offset = "0x1297230", VA = "0x1297230")]
		private bool _collectOutOfBoundsUVRects2(Mesh m, MB_DynamicGameObject dgo, Material[] sharedMaterials, OrderedDictionary sourceMats2submeshIdx_map, Dictionary<int, MB_Utility.MeshAnalysisResult[]> meshAnalysisResults, MeshChannelsCache meshChannelCache)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C91")]
		[Address(RVA = "0x12975DC", Offset = "0x12975DC", VA = "0x12975DC")]
		private bool _validateTextureBakeResults()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C92")]
		[Address(RVA = "0x1297744", Offset = "0x1297744", VA = "0x1297744")]
		private bool _validateMeshFlags()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C93")]
		[Address(RVA = "0x1297958", Offset = "0x1297958", VA = "0x1297958")]
		private bool _showHide(GameObject[] goToShow, GameObject[] goToHide)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C94")]
		[Address(RVA = "0x1297C7C", Offset = "0x1297C7C", VA = "0x1297C7C")]
		private bool _addToCombined(GameObject[] goToAdd, int[] goToDelete, bool disableRendererInSource)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C95")]
		[Address(RVA = "0x129D90C", Offset = "0x129D90C", VA = "0x129D90C")]
		private void _copyAndAdjustUVsFromMesh(MB_DynamicGameObject dgo, Mesh mesh, int vertsIdx, MeshChannelsCache meshChannelsCache)
		{
		}

		[Token(Token = "0x6000C96")]
		[Address(RVA = "0x129DF18", Offset = "0x129DF18", VA = "0x129DF18")]
		private void _copyAndAdjustUV2FromMesh(MB_DynamicGameObject dgo, Mesh mesh, int vertsIdx, MeshChannelsCache meshChannelsCache)
		{
		}

		[Token(Token = "0x6000C97")]
		[Address(RVA = "0x129EACC", Offset = "0x129EACC", VA = "0x129EACC", Slot = "56")]
		public override void UpdateSkinnedMeshApproximateBounds()
		{
		}

		[Token(Token = "0x6000C98")]
		[Address(RVA = "0x129EADC", Offset = "0x129EADC", VA = "0x129EADC", Slot = "57")]
		public override void UpdateSkinnedMeshApproximateBoundsFromBones()
		{
		}

		[Token(Token = "0x6000C99")]
		[Address(RVA = "0x129EDFC", Offset = "0x129EDFC", VA = "0x129EDFC", Slot = "59")]
		public override void UpdateSkinnedMeshApproximateBoundsFromBounds()
		{
		}

		[Token(Token = "0x6000C9A")]
		[Address(RVA = "0x129F128", Offset = "0x129F128", VA = "0x129F128")]
		private int _getNumBones(Renderer r)
		{
			return default(int);
		}

		[Token(Token = "0x6000C9B")]
		[Address(RVA = "0x129F270", Offset = "0x129F270", VA = "0x129F270")]
		private Transform[] _getBones(Renderer r)
		{
			return null;
		}

		[Token(Token = "0x6000C9C")]
		[Address(RVA = "0x129F27C", Offset = "0x129F27C", VA = "0x129F27C", Slot = "50")]
		public override void Apply(GenerateUV2Delegate uv2GenerationMethod)
		{
		}

		[Token(Token = "0x6000C9D")]
		[Address(RVA = "0x129F384", Offset = "0x129F384", VA = "0x129F384", Slot = "62")]
		public virtual void ApplyShowHide()
		{
		}

		[Token(Token = "0x6000C9E")]
		[Address(RVA = "0x129FDAC", Offset = "0x129FDAC", VA = "0x129FDAC", Slot = "51")]
		public override void Apply(bool triangles, bool vertices, bool normals, bool tangents, bool uvs, bool uv2, bool uv3, bool uv4, bool colors, bool bones = false, bool blendShapesFlag = false, [Optional] GenerateUV2Delegate uv2GenerationMethod)
		{
		}

		[Token(Token = "0x6000C9F")]
		[Address(RVA = "0x129FB68", Offset = "0x129FB68", VA = "0x129FB68")]
		private int _numNonZeroLengthSubmeshTris(SerializableIntArray[] subTris)
		{
			return default(int);
		}

		[Token(Token = "0x6000CA0")]
		[Address(RVA = "0x129FBDC", Offset = "0x129FBDC", VA = "0x129FBDC")]
		private void _updateMaterialsOnTargetRenderer(SerializableIntArray[] subTris, int numNonZeroLengthSubmeshTris)
		{
		}

		[Token(Token = "0x6000CA1")]
		[Address(RVA = "0x129F76C", Offset = "0x129F76C", VA = "0x129F76C")]
		public SerializableIntArray[] GetSubmeshTrisWithShowHideApplied()
		{
			return null;
		}

		[Token(Token = "0x6000CA2")]
		[Address(RVA = "0x12A15C8", Offset = "0x12A15C8", VA = "0x12A15C8", Slot = "52")]
		public override void UpdateGameObjects(GameObject[] gos, bool recalcBounds = true, bool updateVertices = true, bool updateNormals = true, bool updateTangents = true, bool updateUV = false, bool updateUV2 = false, bool updateUV3 = false, bool updateUV4 = false, bool updateColors = false, bool updateSkinningInfo = false)
		{
		}

		[Token(Token = "0x6000CA3")]
		[Address(RVA = "0x12A1614", Offset = "0x12A1614", VA = "0x12A1614")]
		private void _updateGameObjects(GameObject[] gos, bool recalcBounds, bool updateVertices, bool updateNormals, bool updateTangents, bool updateUV, bool updateUV2, bool updateUV3, bool updateUV4, bool updateColors, bool updateSkinningInfo)
		{
		}

		[Token(Token = "0x6000CA4")]
		[Address(RVA = "0x12A1920", Offset = "0x12A1920", VA = "0x12A1920")]
		private void _updateGameObject(GameObject go, bool updateVertices, bool updateNormals, bool updateTangents, bool updateUV, bool updateUV2, bool updateUV3, bool updateUV4, bool updateColors, bool updateSkinningInfo, MeshChannelsCache meshChannelCache)
		{
		}

		[Token(Token = "0x6000CA5")]
		[Address(RVA = "0x12A22D8", Offset = "0x12A22D8", VA = "0x12A22D8")]
		public bool ShowHideGameObjects(GameObject[] toShow, GameObject[] toHide)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CA6")]
		[Address(RVA = "0x12A23DC", Offset = "0x12A23DC", VA = "0x12A23DC", Slot = "53")]
		public override bool AddDeleteGameObjects(GameObject[] gos, GameObject[] deleteGOs, bool disableRendererInSource = true)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CA7")]
		[Address(RVA = "0x12A25F0", Offset = "0x12A25F0", VA = "0x12A25F0", Slot = "54")]
		public override bool AddDeleteGameObjectsByID(GameObject[] gos, int[] deleteGOinstanceIDs, bool disableRendererInSource)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CA8")]
		[Address(RVA = "0x12A2D04", Offset = "0x12A2D04", VA = "0x12A2D04", Slot = "55")]
		public override bool CombinedMeshContains(GameObject go)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CA9")]
		[Address(RVA = "0x12A2D68", Offset = "0x12A2D68", VA = "0x12A2D68", Slot = "40")]
		public override void ClearBuffers()
		{
		}

		[Token(Token = "0x6000CAA")]
		[Address(RVA = "0x12A31EC", Offset = "0x12A31EC", VA = "0x12A31EC", Slot = "41")]
		public override void ClearMesh()
		{
		}

		[Token(Token = "0x6000CAB")]
		[Address(RVA = "0x12A32C8", Offset = "0x12A32C8", VA = "0x12A32C8", Slot = "42")]
		public override void DestroyMesh()
		{
		}

		[Token(Token = "0x6000CAC")]
		[Address(RVA = "0x12A349C", Offset = "0x12A349C", VA = "0x12A349C", Slot = "43")]
		public override void DestroyMeshEditor(MB2_EditorMethodsInterface editorMethods)
		{
		}

		[Token(Token = "0x6000CAD")]
		[Address(RVA = "0x129C878", Offset = "0x129C878", VA = "0x129C878")]
		public bool ValidateTargRendererAndMeshAndResultSceneObj()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CAE")]
		[Address(RVA = "0x12A36C8", Offset = "0x12A36C8", VA = "0x12A36C8")]
		internal static Renderer BuildSceneHierarchPreBake(MB3_MeshCombinerSingle mom, GameObject root, Mesh m, bool createNewChild = false, [Optional] GameObject[] objsToBeAdded)
		{
			return null;
		}

		[Token(Token = "0x6000CAF")]
		[Address(RVA = "0x12A4390", Offset = "0x12A4390", VA = "0x12A4390")]
		public static void BuildPrefabHierarchy(MB3_MeshCombinerSingle mom, GameObject instantiatedPrefabRoot, Mesh m, bool createNewChild = false, [Optional] GameObject[] objsToBeAdded)
		{
		}

		[Token(Token = "0x6000CB0")]
		[Address(RVA = "0x12A403C", Offset = "0x12A403C", VA = "0x12A403C")]
		private static void _ConfigureSceneHierarch(MB3_MeshCombinerSingle mom, GameObject root, MeshRenderer mr, MeshFilter mf, SkinnedMeshRenderer smr, Mesh m, [Optional] GameObject[] objsToBeAdded)
		{
		}

		[Token(Token = "0x6000CB1")]
		[Address(RVA = "0x12A2BDC", Offset = "0x12A2BDC", VA = "0x12A2BDC")]
		public void BuildSceneMeshObject([Optional] GameObject[] gos, bool createNewChild = false)
		{
		}

		[Token(Token = "0x6000CB2")]
		[Address(RVA = "0x129D340", Offset = "0x129D340", VA = "0x129D340")]
		private bool IsMirrored(Matrix4x4 tm)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CB3")]
		[Address(RVA = "0x12A4A1C", Offset = "0x12A4A1C", VA = "0x12A4A1C", Slot = "58")]
		public override void CheckIntegrity()
		{
		}

		[Token(Token = "0x6000CB4")]
		[Address(RVA = "0x12A1548", Offset = "0x12A1548", VA = "0x12A1548")]
		private void _ZeroArray(Vector3[] arr, int idx, int length)
		{
		}

		[Token(Token = "0x6000CB5")]
		[Address(RVA = "0x129CC48", Offset = "0x129CC48", VA = "0x129CC48")]
		private List<MB_DynamicGameObject>[] _buildBoneIdx2dgoMap()
		{
			return null;
		}

		[Token(Token = "0x6000CB6")]
		[Address(RVA = "0x129CE44", Offset = "0x129CE44", VA = "0x129CE44")]
		private void _CollectBonesToAddForDGO(MB_DynamicGameObject dgo, Dictionary<Transform, int> bone2idx, HashSet<int> boneIdxsToDelete, HashSet<BoneAndBindpose> bonesToAdd, Renderer r, MeshChannelsCache meshChannelCache)
		{
		}

		[Token(Token = "0x6000CB7")]
		[Address(RVA = "0x129D424", Offset = "0x129D424", VA = "0x129D424")]
		private void _CopyBonesWeAreKeepingToNewBonesArrayAndAdjustBWIndexes(HashSet<int> boneIdxsToDeleteHS, HashSet<BoneAndBindpose> bonesToAdd, Transform[] nbones, Matrix4x4[] nbindPoses, BoneWeight[] nboneWeights, int totalDeleteVerts)
		{
		}

		[Token(Token = "0x6000CB8")]
		[Address(RVA = "0x129E120", Offset = "0x129E120", VA = "0x129E120")]
		private void _AddBonesToNewBonesArrayAndAdjustBWIndexes(MB_DynamicGameObject dgo, Renderer r, int vertsIdx, Transform[] nbones, BoneWeight[] nboneWeights, MeshChannelsCache meshChannelCache)
		{
		}

		[Token(Token = "0x6000CB9")]
		[Address(RVA = "0x129E670", Offset = "0x129E670", VA = "0x129E670")]
		private void _copyUV2unchangedToSeparateRects()
		{
		}

		[Token(Token = "0x6000CBA")]
		[Address(RVA = "0x12A4F30", Offset = "0x12A4F30", VA = "0x12A4F30", Slot = "61")]
		public override List<Material> GetMaterialsOnTargetRenderer()
		{
			return null;
		}

		[Token(Token = "0x6000CBB")]
		[Address(RVA = "0x12A5028", Offset = "0x12A5028", VA = "0x12A5028")]
		public MB3_MeshCombinerSingle()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001F2")]
	public class MB3_MultiMeshCombiner : MB3_MeshCombiner
	{
		[Serializable]
		[Token(Token = "0x2000408")]
		public class CombinedMesh
		{
			[Token(Token = "0x4001B08")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public MB3_MeshCombinerSingle combinedMesh;

			[Token(Token = "0x4001B09")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int extraSpace;

			[Token(Token = "0x4001B0A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public int numVertsInListToDelete;

			[Token(Token = "0x4001B0B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public int numVertsInListToAdd;

			[Token(Token = "0x4001B0C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public List<GameObject> gosToAdd;

			[Token(Token = "0x4001B0D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public List<int> gosToDelete;

			[Token(Token = "0x4001B0E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public List<GameObject> gosToUpdate;

			[Token(Token = "0x4001B0F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public bool isDirty;

			[Token(Token = "0x6001A8D")]
			[Address(RVA = "0x7F5D34", Offset = "0x7F5D34", VA = "0x7F5D34")]
			public CombinedMesh(int maxNumVertsInMesh, GameObject resultSceneObject, MB2_LogLevel ll)
			{
			}

			[Token(Token = "0x6001A8E")]
			[Address(RVA = "0x7F5EC4", Offset = "0x7F5EC4", VA = "0x7F5EC4")]
			public bool isEmpty()
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4000EC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static GameObject[] empty;

		[Token(Token = "0x4000EC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static int[] emptyIDs;

		[Token(Token = "0x4000EC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Dictionary<int, CombinedMesh> obj2MeshCombinerMap;

		[Token(Token = "0x4000EC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		public List<CombinedMesh> meshCombiners;

		[Token(Token = "0x4000EC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private int _maxVertsInMesh;

		[Token(Token = "0x170000A0")]
		public override MB2_LogLevel LOG_LEVEL
		{
			[Token(Token = "0x6000CBC")]
			[Address(RVA = "0x12A58EC", Offset = "0x12A58EC", VA = "0x12A58EC", Slot = "4")]
			get
			{
				return default(MB2_LogLevel);
			}
			[Token(Token = "0x6000CBD")]
			[Address(RVA = "0x12A58F4", Offset = "0x12A58F4", VA = "0x12A58F4", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x170000A1")]
		public override MB2_ValidationLevel validationLevel
		{
			[Token(Token = "0x6000CBF")]
			[Address(RVA = "0x12A5A64", Offset = "0x12A5A64", VA = "0x12A5A64", Slot = "6")]
			get
			{
				return default(MB2_ValidationLevel);
			}
			[Token(Token = "0x6000CBE")]
			[Address(RVA = "0x12A59AC", Offset = "0x12A59AC", VA = "0x12A59AC", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x170000A2")]
		public int maxVertsInMesh
		{
			[Token(Token = "0x6000CC0")]
			[Address(RVA = "0x12A5A6C", Offset = "0x12A5A6C", VA = "0x12A5A6C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000CC1")]
			[Address(RVA = "0x12A5A74", Offset = "0x12A5A74", VA = "0x12A5A74")]
			set
			{
			}
		}

		[Token(Token = "0x6000CC2")]
		[Address(RVA = "0x12A5BD8", Offset = "0x12A5BD8", VA = "0x12A5BD8", Slot = "45")]
		public override int GetNumObjectsInCombined()
		{
			return default(int);
		}

		[Token(Token = "0x6000CC3")]
		[Address(RVA = "0x12A5C2C", Offset = "0x12A5C2C", VA = "0x12A5C2C", Slot = "46")]
		public override int GetNumVerticesFor(GameObject go)
		{
			return default(int);
		}

		[Token(Token = "0x6000CC4")]
		[Address(RVA = "0x12A5CE0", Offset = "0x12A5CE0", VA = "0x12A5CE0", Slot = "47")]
		public override int GetNumVerticesFor(int gameObjectID)
		{
			return default(int);
		}

		[Token(Token = "0x6000CC5")]
		[Address(RVA = "0x12A5D80", Offset = "0x12A5D80", VA = "0x12A5D80", Slot = "44")]
		public override List<GameObject> GetObjectsInCombined()
		{
			return null;
		}

		[Token(Token = "0x6000CC6")]
		[Address(RVA = "0x12A5EA0", Offset = "0x12A5EA0", VA = "0x12A5EA0", Slot = "39")]
		public override int GetLightmapIndex()
		{
			return default(int);
		}

		[Token(Token = "0x6000CC7")]
		[Address(RVA = "0x12A5F30", Offset = "0x12A5F30", VA = "0x12A5F30", Slot = "55")]
		public override bool CombinedMeshContains(GameObject go)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CC8")]
		[Address(RVA = "0x12A5FA8", Offset = "0x12A5FA8", VA = "0x12A5FA8")]
		private bool _validateTextureBakeResults()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CC9")]
		[Address(RVA = "0x12A6110", Offset = "0x12A6110", VA = "0x12A6110", Slot = "50")]
		public override void Apply(GenerateUV2Delegate uv2GenerationMethod)
		{
		}

		[Token(Token = "0x6000CCA")]
		[Address(RVA = "0x12A622C", Offset = "0x12A622C", VA = "0x12A622C", Slot = "51")]
		public override void Apply(bool triangles, bool vertices, bool normals, bool tangents, bool uvs, bool uv2, bool uv3, bool uv4, bool colors, bool bones = false, bool blendShapesFlag = false, [Optional] GenerateUV2Delegate uv2GenerationMethod)
		{
		}

		[Token(Token = "0x6000CCB")]
		[Address(RVA = "0x12A63F8", Offset = "0x12A63F8", VA = "0x12A63F8", Slot = "56")]
		public override void UpdateSkinnedMeshApproximateBounds()
		{
		}

		[Token(Token = "0x6000CCC")]
		[Address(RVA = "0x12A64A8", Offset = "0x12A64A8", VA = "0x12A64A8", Slot = "57")]
		public override void UpdateSkinnedMeshApproximateBoundsFromBones()
		{
		}

		[Token(Token = "0x6000CCD")]
		[Address(RVA = "0x12A6558", Offset = "0x12A6558", VA = "0x12A6558", Slot = "59")]
		public override void UpdateSkinnedMeshApproximateBoundsFromBounds()
		{
		}

		[Token(Token = "0x6000CCE")]
		[Address(RVA = "0x12A6608", Offset = "0x12A6608", VA = "0x12A6608", Slot = "52")]
		public override void UpdateGameObjects(GameObject[] gos, bool recalcBounds = true, bool updateVertices = true, bool updateNormals = true, bool updateTangents = true, bool updateUV = false, bool updateUV2 = false, bool updateUV3 = false, bool updateUV4 = false, bool updateColors = false, bool updateSkinningInfo = false)
		{
		}

		[Token(Token = "0x6000CCF")]
		[Address(RVA = "0x12A6AB8", Offset = "0x12A6AB8", VA = "0x12A6AB8", Slot = "53")]
		public override bool AddDeleteGameObjects(GameObject[] gos, GameObject[] deleteGOs, bool disableRendererInSource = true)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CD0")]
		[Address(RVA = "0x12A6CCC", Offset = "0x12A6CCC", VA = "0x12A6CCC", Slot = "54")]
		public override bool AddDeleteGameObjectsByID(GameObject[] gos, int[] deleteGOinstanceIDs, bool disableRendererInSource = true)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CD1")]
		[Address(RVA = "0x12A72C8", Offset = "0x12A72C8", VA = "0x12A72C8")]
		private bool _validate(GameObject[] gos, int[] deleteGOinstanceIDs)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CD2")]
		[Address(RVA = "0x12A788C", Offset = "0x12A788C", VA = "0x12A788C")]
		private void _distributeAmongBakers(GameObject[] gos, int[] deleteGOinstanceIDs)
		{
		}

		[Token(Token = "0x6000CD3")]
		[Address(RVA = "0x12A823C", Offset = "0x12A823C", VA = "0x12A823C")]
		private bool _bakeStep1(GameObject[] gos, int[] deleteGOinstanceIDs, bool disableRendererInSource)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CD4")]
		[Address(RVA = "0x12A92C8", Offset = "0x12A92C8", VA = "0x12A92C8", Slot = "48")]
		public override Dictionary<MBBlendShapeKey, MBBlendShapeValue> BuildSourceBlendShapeToCombinedIndexMap()
		{
			return null;
		}

		[Token(Token = "0x6000CD5")]
		[Address(RVA = "0x12A9544", Offset = "0x12A9544", VA = "0x12A9544", Slot = "40")]
		public override void ClearBuffers()
		{
		}

		[Token(Token = "0x6000CD6")]
		[Address(RVA = "0x12A9618", Offset = "0x12A9618", VA = "0x12A9618", Slot = "41")]
		public override void ClearMesh()
		{
		}

		[Token(Token = "0x6000CD7")]
		[Address(RVA = "0x12A9628", Offset = "0x12A9628", VA = "0x12A9628", Slot = "42")]
		public override void DestroyMesh()
		{
		}

		[Token(Token = "0x6000CD8")]
		[Address(RVA = "0x12A9834", Offset = "0x12A9834", VA = "0x12A9834", Slot = "43")]
		public override void DestroyMeshEditor(MB2_EditorMethodsInterface editorMethods)
		{
		}

		[Token(Token = "0x6000CD9")]
		[Address(RVA = "0x12A9080", Offset = "0x12A9080", VA = "0x12A9080")]
		private void _setMBValues(MB3_MeshCombinerSingle targ)
		{
		}

		[Token(Token = "0x6000CDA")]
		[Address(RVA = "0x12A9A9C", Offset = "0x12A9A9C", VA = "0x12A9A9C", Slot = "61")]
		public override List<Material> GetMaterialsOnTargetRenderer()
		{
			return null;
		}

		[Token(Token = "0x6000CDB")]
		[Address(RVA = "0x12A9BFC", Offset = "0x12A9BFC", VA = "0x12A9BFC", Slot = "58")]
		public override void CheckIntegrity()
		{
		}

		[Token(Token = "0x6000CDC")]
		[Address(RVA = "0x12A57E4", Offset = "0x12A57E4", VA = "0x12A57E4")]
		public MB3_MultiMeshCombiner()
		{
		}
	}
	[Token(Token = "0x20001F3")]
	public class PriorityQueue<TPriority, TValue> : ICollection<KeyValuePair<TPriority, TValue>>, IEnumerable<KeyValuePair<TPriority, TValue>>, IEnumerable
	{
		[Token(Token = "0x4000EC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public List<KeyValuePair<TPriority, TValue>> _baseHeap;

		[Token(Token = "0x4000ECA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IComparer<TPriority> _comparer;

		[Token(Token = "0x170000A3")]
		public bool IsEmpty
		{
			[Token(Token = "0x6000CEB")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000A4")]
		public int Count
		{
			[Token(Token = "0x6000CF5")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000A5")]
		public bool IsReadOnly
		{
			[Token(Token = "0x6000CF7")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000CDE")]
		public PriorityQueue()
		{
		}

		[Token(Token = "0x6000CDF")]
		public PriorityQueue(int capacity)
		{
		}

		[Token(Token = "0x6000CE0")]
		public PriorityQueue(int capacity, IComparer<TPriority> comparer)
		{
		}

		[Token(Token = "0x6000CE1")]
		public PriorityQueue(IComparer<TPriority> comparer)
		{
		}

		[Token(Token = "0x6000CE2")]
		public PriorityQueue(IEnumerable<KeyValuePair<TPriority, TValue>> data)
		{
		}

		[Token(Token = "0x6000CE3")]
		public PriorityQueue(IEnumerable<KeyValuePair<TPriority, TValue>> data, IComparer<TPriority> comparer)
		{
		}

		[Token(Token = "0x6000CE4")]
		public static PriorityQueue<TPriority, TValue> MergeQueues(PriorityQueue<TPriority, TValue> pq1, PriorityQueue<TPriority, TValue> pq2)
		{
			return null;
		}

		[Token(Token = "0x6000CE5")]
		public static PriorityQueue<TPriority, TValue> MergeQueues(PriorityQueue<TPriority, TValue> pq1, PriorityQueue<TPriority, TValue> pq2, IComparer<TPriority> comparer)
		{
			return null;
		}

		[Token(Token = "0x6000CE6")]
		public void Enqueue(TPriority priority, TValue value)
		{
		}

		[Token(Token = "0x6000CE7")]
		public KeyValuePair<TPriority, TValue> Dequeue()
		{
			return default(KeyValuePair<TPriority, TValue>);
		}

		[Token(Token = "0x6000CE8")]
		public TValue DequeueValue()
		{
			return (TValue)null;
		}

		[Token(Token = "0x6000CE9")]
		public KeyValuePair<TPriority, TValue> Peek()
		{
			return default(KeyValuePair<TPriority, TValue>);
		}

		[Token(Token = "0x6000CEA")]
		public TValue PeekValue()
		{
			return (TValue)null;
		}

		[Token(Token = "0x6000CEC")]
		private void ExchangeElements(int pos1, int pos2)
		{
		}

		[Token(Token = "0x6000CED")]
		private void Insert(TPriority priority, TValue value)
		{
		}

		[Token(Token = "0x6000CEE")]
		private int HeapifyFromEndToBeginning(int pos)
		{
			return default(int);
		}

		[Token(Token = "0x6000CEF")]
		private void DeleteRoot()
		{
		}

		[Token(Token = "0x6000CF0")]
		private void HeapifyFromBeginningToEnd(int pos)
		{
		}

		[Token(Token = "0x6000CF1")]
		public void Add(KeyValuePair<TPriority, TValue> item)
		{
		}

		[Token(Token = "0x6000CF2")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000CF3")]
		public bool Contains(KeyValuePair<TPriority, TValue> item)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CF4")]
		public bool TryFindValue(TPriority item, out TValue foundVersion)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CF6")]
		public void CopyTo(KeyValuePair<TPriority, TValue>[] array, int arrayIndex)
		{
		}

		[Token(Token = "0x6000CF8")]
		public bool Remove(KeyValuePair<TPriority, TValue> item)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CF9")]
		public IEnumerator<KeyValuePair<TPriority, TValue>> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000CFA")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}
	}
	[Token(Token = "0x20001F4")]
	public struct DVector2
	{
		[Token(Token = "0x4000ECB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static double epsilon;

		[Token(Token = "0x4000ECC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public double x;

		[Token(Token = "0x4000ECD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public double y;

		[Token(Token = "0x6000CFB")]
		[Address(RVA = "0xCC6614", Offset = "0xCC6614", VA = "0xCC6614")]
		public static DVector2 Subtract(DVector2 a, DVector2 b)
		{
			return default(DVector2);
		}

		[Token(Token = "0x6000CFC")]
		[Address(RVA = "0xCC60E8", Offset = "0xCC60E8", VA = "0xCC60E8")]
		public DVector2(double xx, double yy)
		{
		}

		[Token(Token = "0x6000CFD")]
		[Address(RVA = "0xCC6620", Offset = "0xCC6620", VA = "0xCC6620")]
		public DVector2(DVector2 r)
		{
		}

		[Token(Token = "0x6000CFE")]
		[Address(RVA = "0xCC6628", Offset = "0xCC6628", VA = "0xCC6628")]
		public Vector2 GetVector2()
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000CFF")]
		[Address(RVA = "0xCC6638", Offset = "0xCC6638", VA = "0xCC6638")]
		public bool IsContainedIn(DRect r)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D00")]
		[Address(RVA = "0xCC6678", Offset = "0xCC6678", VA = "0xCC6678")]
		public bool IsContainedInWithMargin(DRect r)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D01")]
		[Address(RVA = "0xCC67BC", Offset = "0xCC67BC", VA = "0xCC67BC", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000D02")]
		[Address(RVA = "0xCC6868", Offset = "0xCC6868", VA = "0xCC6868")]
		public string ToString(string formatS)
		{
			return null;
		}

		[Token(Token = "0x6000D03")]
		[Address(RVA = "0xCC68F0", Offset = "0xCC68F0", VA = "0xCC68F0")]
		public static double Distance(DVector2 a, DVector2 b)
		{
			return default(double);
		}
	}
	[Token(Token = "0x20001F5")]
	public struct DRect
	{
		[Token(Token = "0x4000ECE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public double x;

		[Token(Token = "0x4000ECF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public double y;

		[Token(Token = "0x4000ED0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public double width;

		[Token(Token = "0x4000ED1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public double height;

		[Token(Token = "0x170000A6")]
		public DVector2 minD
		{
			[Token(Token = "0x6000D0B")]
			[Address(RVA = "0xCC60E0", Offset = "0xCC60E0", VA = "0xCC60E0")]
			get
			{
				return default(DVector2);
			}
		}

		[Token(Token = "0x170000A7")]
		public DVector2 maxD
		{
			[Token(Token = "0x6000D0C")]
			[Address(RVA = "0xCC60F0", Offset = "0xCC60F0", VA = "0xCC60F0")]
			get
			{
				return default(DVector2);
			}
		}

		[Token(Token = "0x170000A8")]
		public Vector2 min
		{
			[Token(Token = "0x6000D0D")]
			[Address(RVA = "0xCC6100", Offset = "0xCC6100", VA = "0xCC6100")]
			get
			{
				return default(Vector2);
			}
		}

		[Token(Token = "0x170000A9")]
		public Vector2 max
		{
			[Token(Token = "0x6000D0E")]
			[Address(RVA = "0xCC6110", Offset = "0xCC6110", VA = "0xCC6110")]
			get
			{
				return default(Vector2);
			}
		}

		[Token(Token = "0x170000AA")]
		public Vector2 size
		{
			[Token(Token = "0x6000D0F")]
			[Address(RVA = "0xCC6124", Offset = "0xCC6124", VA = "0xCC6124")]
			get
			{
				return default(Vector2);
			}
		}

		[Token(Token = "0x170000AB")]
		public DVector2 center
		{
			[Token(Token = "0x6000D10")]
			[Address(RVA = "0xCC6134", Offset = "0xCC6134", VA = "0xCC6134")]
			get
			{
				return default(DVector2);
			}
		}

		[Token(Token = "0x6000D05")]
		[Address(RVA = "0xCC5FCC", Offset = "0xCC5FCC", VA = "0xCC5FCC")]
		public DRect(Rect r)
		{
		}

		[Token(Token = "0x6000D06")]
		[Address(RVA = "0xCC6048", Offset = "0xCC6048", VA = "0xCC6048")]
		public DRect(Vector2 o, Vector2 s)
		{
		}

		[Token(Token = "0x6000D07")]
		[Address(RVA = "0xCC6064", Offset = "0xCC6064", VA = "0xCC6064")]
		public DRect(DRect r)
		{
		}

		[Token(Token = "0x6000D08")]
		[Address(RVA = "0xCC6070", Offset = "0xCC6070", VA = "0xCC6070")]
		public DRect(float xx, float yy, float w, float h)
		{
		}

		[Token(Token = "0x6000D09")]
		[Address(RVA = "0xCC608C", Offset = "0xCC608C", VA = "0xCC608C")]
		public DRect(double xx, double yy, double w, double h)
		{
		}

		[Token(Token = "0x6000D0A")]
		[Address(RVA = "0xCC6098", Offset = "0xCC6098", VA = "0xCC6098")]
		public Rect GetRect()
		{
			return default(Rect);
		}

		[Token(Token = "0x6000D11")]
		[Address(RVA = "0xCC614C", Offset = "0xCC614C", VA = "0xCC614C", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D12")]
		[Address(RVA = "0xCC6214", Offset = "0xCC6214", VA = "0xCC6214")]
		public static bool operator ==(DRect a, DRect b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D13")]
		[Address(RVA = "0xCC62AC", Offset = "0xCC62AC", VA = "0xCC62AC")]
		public static bool operator !=(DRect a, DRect b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D14")]
		[Address(RVA = "0xCC6348", Offset = "0xCC6348", VA = "0xCC6348", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000D15")]
		[Address(RVA = "0xCC6514", Offset = "0xCC6514", VA = "0xCC6514")]
		public void Expand(float amt)
		{
		}

		[Token(Token = "0x6000D16")]
		[Address(RVA = "0xCC653C", Offset = "0xCC653C", VA = "0xCC653C")]
		public bool Encloses(DRect smallToTestIfFits)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D17")]
		[Address(RVA = "0xCC65AC", Offset = "0xCC65AC", VA = "0xCC65AC", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001F6")]
	public class MB3_UVTransformUtility
	{
		[Token(Token = "0x6000D18")]
		[Address(RVA = "0xF418C8", Offset = "0xF418C8", VA = "0xF418C8")]
		public static void Test()
		{
		}

		[Token(Token = "0x6000D19")]
		[Address(RVA = "0xF41BF8", Offset = "0xF41BF8", VA = "0xF41BF8")]
		public static float TransformX(DRect r, double x)
		{
			return default(float);
		}

		[Token(Token = "0x6000D1A")]
		[Address(RVA = "0xF385C0", Offset = "0xF385C0", VA = "0xF385C0")]
		public static DRect CombineTransforms(ref DRect r1, ref DRect r2)
		{
			return default(DRect);
		}

		[Token(Token = "0x6000D1B")]
		[Address(RVA = "0xF41C08", Offset = "0xF41C08", VA = "0xF41C08")]
		public static Rect CombineTransforms(ref Rect r1, ref Rect r2)
		{
			return default(Rect);
		}

		[Token(Token = "0x6000D1C")]
		[Address(RVA = "0xF38598", Offset = "0xF38598", VA = "0xF38598")]
		public static DRect InverseTransform(ref DRect t)
		{
			return default(DRect);
		}

		[Token(Token = "0x6000D1D")]
		[Address(RVA = "0xF3861C", Offset = "0xF3861C", VA = "0xF3861C")]
		public static DRect GetShiftTransformToFitBinA(ref DRect A, ref DRect B)
		{
			return default(DRect);
		}

		[Token(Token = "0x6000D1E")]
		[Address(RVA = "0xF3A314", Offset = "0xF3A314", VA = "0xF3A314")]
		public static DRect GetEncapsulatingRectShifted(ref DRect uvRect1, ref DRect willBeIn)
		{
			return default(DRect);
		}

		[Token(Token = "0x6000D1F")]
		[Address(RVA = "0xF41D20", Offset = "0xF41D20", VA = "0xF41D20")]
		public static DRect GetEncapsulatingRect(ref DRect uvRect1, ref DRect uvRect2)
		{
			return default(DRect);
		}

		[Token(Token = "0x6000D20")]
		[Address(RVA = "0xF41DBC", Offset = "0xF41DBC", VA = "0xF41DBC")]
		public static bool RectContainsShifted(ref DRect bucket, ref DRect tryFit)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D21")]
		[Address(RVA = "0xF41F10", Offset = "0xF41F10", VA = "0xF41F10")]
		public static bool RectContainsShifted(ref Rect bucket, ref Rect tryFit)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D22")]
		[Address(RVA = "0xF421C8", Offset = "0xF421C8", VA = "0xF421C8")]
		public static bool LineSegmentContainsShifted(float bucketOffset, float bucketLength, float tryFitOffset, float tryFitLength)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D23")]
		[Address(RVA = "0xF422BC", Offset = "0xF422BC", VA = "0xF422BC")]
		public static bool RectContains(ref DRect bigRect, ref DRect smallToTestIfFits)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D24")]
		[Address(RVA = "0xF42038", Offset = "0xF42038", VA = "0xF42038")]
		public static bool RectContains(ref Rect bigRect, ref Rect smallToTestIfFits)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D25")]
		[Address(RVA = "0xF41BD8", Offset = "0xF41BD8", VA = "0xF41BD8")]
		public static Vector2 TransformPoint(ref DRect r, Vector2 p)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000D26")]
		[Address(RVA = "0xF4235C", Offset = "0xF4235C", VA = "0xF4235C")]
		public static DVector2 TransformPoint(ref DRect r, DVector2 p)
		{
			return default(DVector2);
		}

		[Token(Token = "0x6000D27")]
		[Address(RVA = "0xF423A0", Offset = "0xF423A0", VA = "0xF423A0")]
		public MB3_UVTransformUtility()
		{
		}
	}
	[Token(Token = "0x20001F7")]
	public static class MB_TGAWriter
	{
		[Token(Token = "0x6000D28")]
		[Address(RVA = "0xF4711C", Offset = "0xF4711C", VA = "0xF4711C")]
		public static void Write(Color[] pixels, int width, int height, string path)
		{
		}

		[Token(Token = "0x6000D29")]
		[Address(RVA = "0xF47184", Offset = "0xF47184", VA = "0xF47184")]
		public static void Write(Color[] pixels, int width, int height, Stream output)
		{
		}
	}
	[Token(Token = "0x20001F8")]
	public class MB_Utility
	{
		[Token(Token = "0x2000409")]
		public struct MeshAnalysisResult
		{
			[Token(Token = "0x4001B10")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Rect uvRect;

			[Token(Token = "0x4001B11")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool hasOutOfBoundsUVs;

			[Token(Token = "0x4001B12")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
			public bool hasOverlappingSubmeshVerts;

			[Token(Token = "0x4001B13")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
			public bool hasOverlappingSubmeshTris;

			[Token(Token = "0x4001B14")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x13")]
			public bool hasUVs;

			[Token(Token = "0x4001B15")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float submeshArea;
		}

		[Token(Token = "0x200040A")]
		private class MB_Triangle
		{
			[Token(Token = "0x4001B16")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int submeshIdx;

			[Token(Token = "0x4001B17")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private int[] vs;

			[Token(Token = "0x6001A8F")]
			[Address(RVA = "0xFEC968", Offset = "0xFEC968", VA = "0xFEC968")]
			public bool isSame(object obj)
			{
				return default(bool);
			}

			[Token(Token = "0x6001A90")]
			[Address(RVA = "0xFECA90", Offset = "0xFECA90", VA = "0xFECA90")]
			public bool sharesVerts(MB_Triangle obj)
			{
				return default(bool);
			}

			[Token(Token = "0x6001A91")]
			[Address(RVA = "0xFECBC0", Offset = "0xFECBC0", VA = "0xFECBC0")]
			public void Initialize(int[] ts, int idx, int sIdx)
			{
			}

			[Token(Token = "0x6001A92")]
			[Address(RVA = "0xFECCC8", Offset = "0xFECCC8", VA = "0xFECCC8")]
			public MB_Triangle()
			{
			}
		}

		[Token(Token = "0x4000ED2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool DO_INTEGRITY_CHECKS;

		[Token(Token = "0x6000D2A")]
		[Address(RVA = "0xDEA3CC", Offset = "0xDEA3CC", VA = "0xDEA3CC")]
		public static Texture2D createTextureCopy(Texture2D source)
		{
			return null;
		}

		[Token(Token = "0x6000D2B")]
		[Address(RVA = "0xDEA494", Offset = "0xDEA494", VA = "0xDEA494")]
		public static bool ArrayBIsSubsetOfA(object[] a, object[] b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D2C")]
		[Address(RVA = "0xDEA538", Offset = "0xDEA538", VA = "0xDEA538")]
		public static Material[] GetGOMaterials(GameObject go)
		{
			return null;
		}

		[Token(Token = "0x6000D2D")]
		[Address(RVA = "0xDEABBC", Offset = "0xDEABBC", VA = "0xDEABBC")]
		public static Mesh GetMesh(GameObject go)
		{
			return null;
		}

		[Token(Token = "0x6000D2E")]
		[Address(RVA = "0xDEAD20", Offset = "0xDEAD20", VA = "0xDEAD20")]
		public static void SetMesh(GameObject go, Mesh m)
		{
		}

		[Token(Token = "0x6000D2F")]
		[Address(RVA = "0xDEAE8C", Offset = "0xDEAE8C", VA = "0xDEAE8C")]
		public static Renderer GetRenderer(GameObject go)
		{
			return null;
		}

		[Token(Token = "0x6000D30")]
		[Address(RVA = "0xDEAFC4", Offset = "0xDEAFC4", VA = "0xDEAFC4")]
		public static void DisableRendererInSource(GameObject go)
		{
		}

		[Token(Token = "0x6000D31")]
		[Address(RVA = "0xDEB118", Offset = "0xDEB118", VA = "0xDEB118")]
		public static bool hasOutOfBoundsUVs(Mesh m, ref Rect uvBounds)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D32")]
		[Address(RVA = "0xDEB1B0", Offset = "0xDEB1B0", VA = "0xDEB1B0")]
		public static bool hasOutOfBoundsUVs(Mesh m, ref MeshAnalysisResult putResultHere, int submeshIndex = -1, int uvChannel = 0)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D33")]
		[Address(RVA = "0xDEB2FC", Offset = "0xDEB2FC", VA = "0xDEB2FC")]
		public static bool hasOutOfBoundsUVs(Vector2[] uvs, Mesh m, ref MeshAnalysisResult putResultHere, int submeshIndex = -1)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D34")]
		[Address(RVA = "0xDEB520", Offset = "0xDEB520", VA = "0xDEB520")]
		public static void setSolidColor(Texture2D t, Color c)
		{
		}

		[Token(Token = "0x6000D35")]
		[Address(RVA = "0xDEB5D0", Offset = "0xDEB5D0", VA = "0xDEB5D0")]
		public static Texture2D resampleTexture(Texture2D source, int newWidth, int newHeight)
		{
			return null;
		}

		[Token(Token = "0x6000D36")]
		[Address(RVA = "0xDEB768", Offset = "0xDEB768", VA = "0xDEB768")]
		public static bool AreAllSharedMaterialsDistinct(Material[] sharedMaterials)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D37")]
		[Address(RVA = "0xDEB88C", Offset = "0xDEB88C", VA = "0xDEB88C")]
		public static int doSubmeshesShareVertsOrTris(Mesh m, ref MeshAnalysisResult mar)
		{
			return default(int);
		}

		[Token(Token = "0x6000D38")]
		[Address(RVA = "0xDEBBAC", Offset = "0xDEBBAC", VA = "0xDEBBAC")]
		public static bool GetBounds(GameObject go, out Bounds b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D39")]
		[Address(RVA = "0xDEBE68", Offset = "0xDEBE68", VA = "0xDEBE68")]
		public static void Destroy(UnityEngine.Object o)
		{
		}

		[Token(Token = "0x6000D3A")]
		[Address(RVA = "0xDEBF08", Offset = "0xDEBF08", VA = "0xDEBF08")]
		public MB_Utility()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001F9")]
	public struct AtlasPadding
	{
		[Token(Token = "0x4000ED3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int topBottom;

		[Token(Token = "0x4000ED4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int leftRight;

		[Token(Token = "0x6000D3C")]
		[Address(RVA = "0xC1016C", Offset = "0xC1016C", VA = "0xC1016C")]
		public AtlasPadding(int p)
		{
		}

		[Token(Token = "0x6000D3D")]
		[Address(RVA = "0xC10174", Offset = "0xC10174", VA = "0xC10174")]
		public AtlasPadding(int px, int py)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001FA")]
	public class AtlasPackingResult
	{
		[Token(Token = "0x4000ED5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int atlasX;

		[Token(Token = "0x4000ED6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int atlasY;

		[Token(Token = "0x4000ED7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int usedW;

		[Token(Token = "0x4000ED8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int usedH;

		[Token(Token = "0x4000ED9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Rect[] rects;

		[Token(Token = "0x4000EDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AtlasPadding[] padding;

		[Token(Token = "0x4000EDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int[] srcImgIdxs;

		[Token(Token = "0x4000EDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public object data;

		[Token(Token = "0x6000D3E")]
		[Address(RVA = "0xC0FD30", Offset = "0xC0FD30", VA = "0xC0FD30")]
		public AtlasPackingResult(AtlasPadding[] pds)
		{
		}

		[Token(Token = "0x6000D3F")]
		[Address(RVA = "0xC0FD64", Offset = "0xC0FD64", VA = "0xC0FD64")]
		public void CalcUsedWidthAndHeight()
		{
		}

		[Token(Token = "0x6000D40")]
		[Address(RVA = "0xC0FF30", Offset = "0xC0FF30", VA = "0xC0FF30", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20001FB")]
	public abstract class MB2_TexturePacker
	{
		[Token(Token = "0x200040B")]
		internal enum NodeType
		{
			[Token(Token = "0x4001B19")]
			Container,
			[Token(Token = "0x4001B1A")]
			maxDim,
			[Token(Token = "0x4001B1B")]
			regular
		}

		[Token(Token = "0x200040C")]
		internal class PixRect
		{
			[Token(Token = "0x4001B1C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int x;

			[Token(Token = "0x4001B1D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int y;

			[Token(Token = "0x4001B1E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int w;

			[Token(Token = "0x4001B1F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public int h;

			[Token(Token = "0x6001A93")]
			[Address(RVA = "0x7F1760", Offset = "0x7F1760", VA = "0x7F1760")]
			public PixRect()
			{
			}

			[Token(Token = "0x6001A94")]
			[Address(RVA = "0x7F1768", Offset = "0x7F1768", VA = "0x7F1768")]
			public PixRect(int xx, int yy, int ww, int hh)
			{
			}

			[Token(Token = "0x6001A95")]
			[Address(RVA = "0x7F17B4", Offset = "0x7F17B4", VA = "0x7F17B4", Slot = "3")]
			public override string ToString()
			{
				return null;
			}
		}

		[Token(Token = "0x200040D")]
		internal class Image
		{
			[Token(Token = "0x4001B20")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int imgId;

			[Token(Token = "0x4001B21")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int w;

			[Token(Token = "0x4001B22")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int h;

			[Token(Token = "0x4001B23")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public int x;

			[Token(Token = "0x4001B24")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public int y;

			[Token(Token = "0x6001A96")]
			[Address(RVA = "0x7F1568", Offset = "0x7F1568", VA = "0x7F1568")]
			public Image(int id, int tw, int th, AtlasPadding padding, int minImageSizeX, int minImageSizeY)
			{
			}

			[Token(Token = "0x6001A97")]
			[Address(RVA = "0x7F15F0", Offset = "0x7F15F0", VA = "0x7F15F0")]
			public Image(Image im)
			{
			}
		}

		[Token(Token = "0x200040E")]
		internal class ImgIDComparer : IComparer<Image>
		{
			[Token(Token = "0x6001A98")]
			[Address(RVA = "0x7F171C", Offset = "0x7F171C", VA = "0x7F171C", Slot = "4")]
			public int Compare(Image x, Image y)
			{
				return default(int);
			}

			[Token(Token = "0x6001A99")]
			[Address(RVA = "0x7F1758", Offset = "0x7F1758", VA = "0x7F1758")]
			public ImgIDComparer()
			{
			}
		}

		[Token(Token = "0x200040F")]
		internal class ImageHeightComparer : IComparer<Image>
		{
			[Token(Token = "0x6001A9A")]
			[Address(RVA = "0x7F1694", Offset = "0x7F1694", VA = "0x7F1694", Slot = "4")]
			public int Compare(Image x, Image y)
			{
				return default(int);
			}

			[Token(Token = "0x6001A9B")]
			[Address(RVA = "0x7F16D0", Offset = "0x7F16D0", VA = "0x7F16D0")]
			public ImageHeightComparer()
			{
			}
		}

		[Token(Token = "0x2000410")]
		internal class ImageWidthComparer : IComparer<Image>
		{
			[Token(Token = "0x6001A9C")]
			[Address(RVA = "0x7F16D8", Offset = "0x7F16D8", VA = "0x7F16D8", Slot = "4")]
			public int Compare(Image x, Image y)
			{
				return default(int);
			}

			[Token(Token = "0x6001A9D")]
			[Address(RVA = "0x7F1714", Offset = "0x7F1714", VA = "0x7F1714")]
			public ImageWidthComparer()
			{
			}
		}

		[Token(Token = "0x2000411")]
		internal class ImageAreaComparer : IComparer<Image>
		{
			[Token(Token = "0x6001A9E")]
			[Address(RVA = "0x7F1648", Offset = "0x7F1648", VA = "0x7F1648", Slot = "4")]
			public int Compare(Image x, Image y)
			{
				return default(int);
			}

			[Token(Token = "0x6001A9F")]
			[Address(RVA = "0x7F168C", Offset = "0x7F168C", VA = "0x7F168C")]
			public ImageAreaComparer()
			{
			}
		}

		[Token(Token = "0x4000EDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public MB2_LogLevel LOG_LEVEL;

		[Token(Token = "0x4000EDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool atlasMustBePowerOfTwo;

		[Token(Token = "0x6000D41")]
		[Address(RVA = "0xF92D90", Offset = "0xF92D90", VA = "0xF92D90")]
		public static int RoundToNearestPositivePowerOfTwo(int x)
		{
			return default(int);
		}

		[Token(Token = "0x6000D42")]
		[Address(RVA = "0xF92DD4", Offset = "0xF92DD4", VA = "0xF92DD4")]
		public static int CeilToNearestPowerOfTwo(int x)
		{
			return default(int);
		}

		[Token(Token = "0x6000D43")]
		public abstract AtlasPackingResult[] GetRects(List<Vector2> imgWidthHeights, int maxDimensionX, int maxDimensionY, int padding);

		[Token(Token = "0x6000D44")]
		public abstract AtlasPackingResult[] GetRects(List<Vector2> imgWidthHeights, List<AtlasPadding> paddings, int maxDimensionX, int maxDimensionY, bool doMultiAtlas);

		[Token(Token = "0x6000D45")]
		[Address(RVA = "0xF92E10", Offset = "0xF92E10", VA = "0xF92E10")]
		internal bool ScaleAtlasToFitMaxDim(Vector2 rootWH, List<Image> images, int maxDimensionX, int maxDimensionY, AtlasPadding padding, int minImageSizeX, int minImageSizeY, int masterImageSizeX, int masterImageSizeY, ref int outW, ref int outH, out float padX, out float padY, out int newMinSizeX, out int newMinSizeY)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D46")]
		[Address(RVA = "0xF93268", Offset = "0xF93268", VA = "0xF93268")]
		public void normalizeRects(AtlasPackingResult rr, AtlasPadding padding)
		{
		}

		[Token(Token = "0x6000D47")]
		[Address(RVA = "0xF93424", Offset = "0xF93424", VA = "0xF93424")]
		protected MB2_TexturePacker()
		{
		}
	}
	[Token(Token = "0x20001FC")]
	public class MB2_TexturePackerRegular : MB2_TexturePacker
	{
		[Token(Token = "0x2000412")]
		private class ProbeResult
		{
			[Token(Token = "0x4001B25")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int w;

			[Token(Token = "0x4001B26")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int h;

			[Token(Token = "0x4001B27")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int outW;

			[Token(Token = "0x4001B28")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public int outH;

			[Token(Token = "0x4001B29")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Node root;

			[Token(Token = "0x4001B2A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public bool largerOrEqualToMaxDim;

			[Token(Token = "0x4001B2B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float efficiency;

			[Token(Token = "0x4001B2C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float squareness;

			[Token(Token = "0x4001B2D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public float totalAtlasArea;

			[Token(Token = "0x4001B2E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public int numAtlases;

			[Token(Token = "0x6001AA0")]
			[Address(RVA = "0x7F1E40", Offset = "0x7F1E40", VA = "0x7F1E40")]
			public void Set(int ww, int hh, int outw, int outh, Node r, bool fits, float e, float sq)
			{
			}

			[Token(Token = "0x6001AA1")]
			[Address(RVA = "0x7F1E94", Offset = "0x7F1E94", VA = "0x7F1E94")]
			public float GetScore(bool doPowerOfTwoScore)
			{
				return default(float);
			}

			[Token(Token = "0x6001AA2")]
			[Address(RVA = "0x7F1ECC", Offset = "0x7F1ECC", VA = "0x7F1ECC")]
			public void PrintTree()
			{
			}

			[Token(Token = "0x6001AA3")]
			[Address(RVA = "0x7F1F1C", Offset = "0x7F1F1C", VA = "0x7F1F1C")]
			public ProbeResult()
			{
			}
		}

		[Token(Token = "0x2000413")]
		internal class Node
		{
			[Token(Token = "0x4001B2F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal NodeType isFullAtlas;

			[Token(Token = "0x4001B30")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal Node[] child;

			[Token(Token = "0x4001B31")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal PixRect r;

			[Token(Token = "0x4001B32")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal Image img;

			[Token(Token = "0x4001B33")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private ProbeResult bestRoot;

			[Token(Token = "0x6001AA4")]
			[Address(RVA = "0x7F199C", Offset = "0x7F199C", VA = "0x7F199C")]
			internal Node(NodeType rootType)
			{
			}

			[Token(Token = "0x6001AA5")]
			[Address(RVA = "0x7F1A18", Offset = "0x7F1A18", VA = "0x7F1A18")]
			private bool isLeaf()
			{
				return default(bool);
			}

			[Token(Token = "0x6001AA6")]
			[Address(RVA = "0x7F1A70", Offset = "0x7F1A70", VA = "0x7F1A70")]
			internal Node Insert(Image im, bool handed)
			{
				return null;
			}
		}

		[Token(Token = "0x4000EDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ProbeResult bestRoot;

		[Token(Token = "0x4000EE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int atlasY;

		[Token(Token = "0x6000D48")]
		[Address(RVA = "0xF95D20", Offset = "0xF95D20", VA = "0xF95D20")]
		private static void printTree(Node r, string spc)
		{
		}

		[Token(Token = "0x6000D49")]
		[Address(RVA = "0xF96000", Offset = "0xF96000", VA = "0xF96000")]
		private static void flattenTree(Node r, List<Image> putHere)
		{
		}

		[Token(Token = "0x6000D4A")]
		[Address(RVA = "0xF960E8", Offset = "0xF960E8", VA = "0xF960E8")]
		private static void drawGizmosNode(Node r)
		{
		}

		[Token(Token = "0x6000D4B")]
		[Address(RVA = "0xF962D0", Offset = "0xF962D0", VA = "0xF962D0")]
		private static Texture2D createFilledTex(Color c, int w, int h)
		{
			return null;
		}

		[Token(Token = "0x6000D4C")]
		[Address(RVA = "0xF963D4", Offset = "0xF963D4", VA = "0xF963D4")]
		public void DrawGizmos()
		{
		}

		[Token(Token = "0x6000D4D")]
		[Address(RVA = "0xF96454", Offset = "0xF96454", VA = "0xF96454")]
		private bool ProbeSingleAtlas(Image[] imgsToAdd, int idealAtlasW, int idealAtlasH, float imgArea, int maxAtlasDimX, int maxAtlasDimY, ProbeResult pr)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D4E")]
		[Address(RVA = "0xF96C88", Offset = "0xF96C88", VA = "0xF96C88")]
		private bool ProbeMultiAtlas(Image[] imgsToAdd, int idealAtlasW, int idealAtlasH, float imgArea, int maxAtlasDimX, int maxAtlasDimY, ProbeResult pr)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D4F")]
		[Address(RVA = "0xF96BA8", Offset = "0xF96BA8", VA = "0xF96BA8")]
		internal void GetExtent(Node r, ref int x, ref int y)
		{
		}

		[Token(Token = "0x6000D50")]
		[Address(RVA = "0xF970D0", Offset = "0xF970D0", VA = "0xF970D0")]
		private int StepWidthHeight(int oldVal, int step, int maxDim)
		{
			return default(int);
		}

		[Token(Token = "0x6000D51")]
		[Address(RVA = "0xF97100", Offset = "0xF97100", VA = "0xF97100", Slot = "4")]
		public override AtlasPackingResult[] GetRects(List<Vector2> imgWidthHeights, int maxDimensionX, int maxDimensionY, int atPadding)
		{
			return null;
		}

		[Token(Token = "0x6000D52")]
		[Address(RVA = "0xF97218", Offset = "0xF97218", VA = "0xF97218", Slot = "5")]
		public override AtlasPackingResult[] GetRects(List<Vector2> imgWidthHeights, List<AtlasPadding> paddings, int maxDimensionX, int maxDimensionY, bool doMultiAtlas)
		{
			return null;
		}

		[Token(Token = "0x6000D53")]
		[Address(RVA = "0xF9880C", Offset = "0xF9880C", VA = "0xF9880C")]
		private AtlasPackingResult _GetRectsSingleAtlas(List<Vector2> imgWidthHeights, List<AtlasPadding> paddings, int maxDimensionX, int maxDimensionY, int minImageSizeX, int minImageSizeY, int masterImageSizeX, int masterImageSizeY, int recursionDepth)
		{
			return null;
		}

		[Token(Token = "0x6000D54")]
		[Address(RVA = "0xF97414", Offset = "0xF97414", VA = "0xF97414")]
		private AtlasPackingResult[] _GetRectsMultiAtlas(List<Vector2> imgWidthHeights, List<AtlasPadding> paddings, int maxDimensionPassedX, int maxDimensionPassedY, int minImageSizeX, int minImageSizeY, int masterImageSizeX, int masterImageSizeY)
		{
			return null;
		}

		[Token(Token = "0x6000D55")]
		[Address(RVA = "0xF9A4E8", Offset = "0xF9A4E8", VA = "0xF9A4E8")]
		public MB2_TexturePackerRegular()
		{
		}
	}
	[Token(Token = "0x20001FD")]
	public class MB2_TexturePackerHorizontalVert : MB2_TexturePacker
	{
		[Token(Token = "0x2000414")]
		public enum TexturePackingOrientation
		{
			[Token(Token = "0x4001B35")]
			horizontal,
			[Token(Token = "0x4001B36")]
			vertical
		}

		[Token(Token = "0x4000EE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TexturePackingOrientation packingOrientation;

		[Token(Token = "0x4000EE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool stretchImagesToEdges;

		[Token(Token = "0x6000D56")]
		[Address(RVA = "0xF9343C", Offset = "0xF9343C", VA = "0xF9343C", Slot = "4")]
		public override AtlasPackingResult[] GetRects(List<Vector2> imgWidthHeights, int maxDimensionX, int maxDimensionY, int padding)
		{
			return null;
		}

		[Token(Token = "0x6000D57")]
		[Address(RVA = "0xF93560", Offset = "0xF93560", VA = "0xF93560", Slot = "5")]
		public override AtlasPackingResult[] GetRects(List<Vector2> imgWidthHeights, List<AtlasPadding> paddings, int maxDimensionX, int maxDimensionY, bool doMultiAtlas)
		{
			return null;
		}

		[Token(Token = "0x6000D58")]
		[Address(RVA = "0xF94C24", Offset = "0xF94C24", VA = "0xF94C24")]
		private AtlasPackingResult _GetRectsSingleAtlas(List<Vector2> imgWidthHeights, List<AtlasPadding> paddings, int maxDimensionX, int maxDimensionY, int minImageSizeX, int minImageSizeY, int masterImageSizeX, int masterImageSizeY, int recursionDepth)
		{
			return null;
		}

		[Token(Token = "0x6000D59")]
		[Address(RVA = "0xF93788", Offset = "0xF93788", VA = "0xF93788")]
		private AtlasPackingResult[] _GetRectsMultiAtlasVertical(List<Vector2> imgWidthHeights, List<AtlasPadding> paddings, int maxDimensionPassedX, int maxDimensionPassedY, int minImageSizeX, int minImageSizeY, int masterImageSizeX, int masterImageSizeY)
		{
			return null;
		}

		[Token(Token = "0x6000D5A")]
		[Address(RVA = "0xF941E4", Offset = "0xF941E4", VA = "0xF941E4")]
		private AtlasPackingResult[] _GetRectsMultiAtlasHorizontal(List<Vector2> imgWidthHeights, List<AtlasPadding> paddings, int maxDimensionPassedX, int maxDimensionPassedY, int minImageSizeX, int minImageSizeY, int masterImageSizeX, int masterImageSizeY)
		{
			return null;
		}

		[Token(Token = "0x6000D5B")]
		[Address(RVA = "0xF95BEC", Offset = "0xF95BEC", VA = "0xF95BEC")]
		private Image PopLargestThatFits(List<Image> images, int spaceRemaining, int maxDim, bool emptyAtlas)
		{
			return null;
		}

		[Token(Token = "0x6000D5C")]
		[Address(RVA = "0xF95D04", Offset = "0xF95D04", VA = "0xF95D04")]
		public MB2_TexturePackerHorizontalVert()
		{
		}
	}
	[Token(Token = "0x20001FE")]
	internal interface MB_ITextureCombinerPacker
	{
		[Token(Token = "0x6000D5D")]
		IEnumerator ConvertTexturesToReadableFormats(ProgressUpdateDelegate progressInfo, MB3_TextureCombiner.CombineTexturesIntoAtlasesCoroutineResult result, MB3_TextureCombinerPipeline.TexturePipelineData data, MB3_TextureCombiner combiner, MB2_EditorMethodsInterface textureEditorMethods, MB2_LogLevel LOG_LEVEL);

		[Token(Token = "0x6000D5E")]
		AtlasPackingResult[] CalculateAtlasRectangles(MB3_TextureCombinerPipeline.TexturePipelineData data, bool doMultiAtlas, MB2_LogLevel LOG_LEVEL);

		[Token(Token = "0x6000D5F")]
		IEnumerator CreateAtlases(ProgressUpdateDelegate progressInfo, MB3_TextureCombinerPipeline.TexturePipelineData data, MB3_TextureCombiner combiner, AtlasPackingResult packedAtlasRects, Texture2D[] atlases, MB2_EditorMethodsInterface textureEditorMethods, MB2_LogLevel LOG_LEVEL);
	}
	[Token(Token = "0x20001FF")]
	internal abstract class MB3_TextureCombinerPackerRoot : MB_ITextureCombinerPacker
	{
		[Token(Token = "0x2000415")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDEFC", Offset = "0x5CDEFC")]
		private sealed class <ConvertTexturesToReadableFormats>d__3 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001B37")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001B38")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001B39")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MB3_TextureCombinerPipeline.TexturePipelineData data;

			[Token(Token = "0x4001B3A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public MB2_EditorMethodsInterface textureEditorMethods;

			[Token(Token = "0x4001B3B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public ProgressUpdateDelegate progressInfo;

			[Token(Token = "0x170002D4")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001AAA")]
				[Address(RVA = "0xFE6CC0", Offset = "0xFE6CC0", VA = "0xFE6CC0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002D5")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001AAC")]
				[Address(RVA = "0xFE6D08", Offset = "0xFE6D08", VA = "0xFE6D08", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001AA7")]
			[Address(RVA = "0xFE69D4", Offset = "0xFE69D4", VA = "0xFE69D4")]
			[DebuggerHidden]
			public <ConvertTexturesToReadableFormats>d__3(int <>1__state)
			{
			}

			[Token(Token = "0x6001AA8")]
			[Address(RVA = "0xFE6A00", Offset = "0xFE6A00", VA = "0xFE6A00", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001AA9")]
			[Address(RVA = "0xFE6A04", Offset = "0xFE6A04", VA = "0xFE6A04", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001AAB")]
			[Address(RVA = "0xFE6CC8", Offset = "0xFE6CC8", VA = "0xFE6CC8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x6000D60")]
		[Address(RVA = "0xF3E31C", Offset = "0xF3E31C", VA = "0xF3E31C")]
		internal static void CreateTemporaryTexturesForAtlas(List<MB_TexSet> distinctMaterialTextures, MB3_TextureCombiner combiner, int propIdx, MB3_TextureCombinerPipeline.TexturePipelineData data)
		{
		}

		[Token(Token = "0x6000D61")]
		[Address(RVA = "0xF3C2B8", Offset = "0xF3C2B8", VA = "0xF3C2B8")]
		public static AtlasPackingResult[] CalculateAtlasRectanglesStatic(MB3_TextureCombinerPipeline.TexturePipelineData data, bool doMultiAtlas, MB2_LogLevel LOG_LEVEL)
		{
			return null;
		}

		[Token(Token = "0x6000D62")]
		[Address(RVA = "0xF3E630", Offset = "0xF3E630", VA = "0xF3E630")]
		public static void MakeProceduralTexturesReadable(ProgressUpdateDelegate progressInfo, MB3_TextureCombiner.CombineTexturesIntoAtlasesCoroutineResult result, MB3_TextureCombinerPipeline.TexturePipelineData data, MB3_TextureCombiner combiner, MB2_EditorMethodsInterface textureEditorMethods, MB2_LogLevel LOG_LEVEL)
		{
		}

		[Token(Token = "0x6000D63")]
		[Address(RVA = "0xF3E6A4", Offset = "0xF3E6A4", VA = "0xF3E6A4", Slot = "7")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D8E50", Offset = "0x5D8E50")]
		public virtual IEnumerator ConvertTexturesToReadableFormats(ProgressUpdateDelegate progressInfo, MB3_TextureCombiner.CombineTexturesIntoAtlasesCoroutineResult result, MB3_TextureCombinerPipeline.TexturePipelineData data, MB3_TextureCombiner combiner, MB2_EditorMethodsInterface textureEditorMethods, MB2_LogLevel LOG_LEVEL)
		{
			return null;
		}

		[Token(Token = "0x6000D64")]
		[Address(RVA = "0xF3E74C", Offset = "0xF3E74C", VA = "0xF3E74C", Slot = "8")]
		public virtual AtlasPackingResult[] CalculateAtlasRectangles(MB3_TextureCombinerPipeline.TexturePipelineData data, bool doMultiAtlas, MB2_LogLevel LOG_LEVEL)
		{
			return null;
		}

		[Token(Token = "0x6000D65")]
		public abstract IEnumerator CreateAtlases(ProgressUpdateDelegate progressInfo, MB3_TextureCombinerPipeline.TexturePipelineData data, MB3_TextureCombiner combiner, AtlasPackingResult packedAtlasRects, Texture2D[] atlases, MB2_EditorMethodsInterface textureEditorMethods, MB2_LogLevel LOG_LEVEL);

		[Token(Token = "0x6000D66")]
		[Address(RVA = "0xF3C248", Offset = "0xF3C248", VA = "0xF3C248")]
		protected MB3_TextureCombinerPackerRoot()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000200")]
	public class ShaderTextureProperty
	{
		[Token(Token = "0x4000EE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x4000EE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool isNormalMap;

		[Token(Token = "0x6000D67")]
		[Address(RVA = "0xA0D93C", Offset = "0xA0D93C", VA = "0xA0D93C")]
		public ShaderTextureProperty(string n, bool norm)
		{
		}

		[Token(Token = "0x6000D68")]
		[Address(RVA = "0xA0D988", Offset = "0xA0D988", VA = "0xA0D988", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D69")]
		[Address(RVA = "0xA0DA48", Offset = "0xA0DA48", VA = "0xA0DA48", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000D6A")]
		[Address(RVA = "0xA0DA50", Offset = "0xA0DA50", VA = "0xA0DA50")]
		public static string[] GetNames(List<ShaderTextureProperty> props)
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x2000201")]
	public class MB3_TextureCombiner
	{
		[Token(Token = "0x2000416")]
		private class TemporaryTexture
		{
			[Token(Token = "0x4001B3C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal string property;

			[Token(Token = "0x4001B3D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal Texture2D texture;

			[Token(Token = "0x6001AAD")]
			[Address(RVA = "0xFE1518", Offset = "0xFE1518", VA = "0xFE1518")]
			public TemporaryTexture(string prop, Texture2D tex)
			{
			}
		}

		[Token(Token = "0x2000417")]
		public class CombineTexturesIntoAtlasesCoroutineResult
		{
			[Token(Token = "0x4001B3E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool success;

			[Token(Token = "0x4001B3F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
			public bool isFinished;

			[Token(Token = "0x6001AAE")]
			[Address(RVA = "0xFE1508", Offset = "0xFE1508", VA = "0xFE1508")]
			public CombineTexturesIntoAtlasesCoroutineResult()
			{
			}
		}

		[Token(Token = "0x2000418")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDF0C", Offset = "0x5CDF0C")]
		private sealed class <CombineTexturesIntoAtlasesCoroutine>d__68 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001B40")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001B41")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001B42")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public CombineTexturesIntoAtlasesCoroutineResult coroutineResult;

			[Token(Token = "0x4001B43")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float maxTimePerFrame;

			[Token(Token = "0x4001B44")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public MB3_TextureCombiner <>4__this;

			[Token(Token = "0x4001B45")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public ProgressUpdateDelegate progressInfo;

			[Token(Token = "0x4001B46")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public MB_AtlasesAndRects resultAtlasesAndRects;

			[Token(Token = "0x4001B47")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Material resultMaterial;

			[Token(Token = "0x4001B48")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public List<GameObject> objsToMesh;

			[Token(Token = "0x4001B49")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public List<Material> allowedMaterialsFilter;

			[Token(Token = "0x4001B4A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public MB2_EditorMethodsInterface textureEditorMethods;

			[Token(Token = "0x4001B4B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public List<AtlasPackingResult> packingResults;

			[Token(Token = "0x4001B4C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			public bool onlyPackRects;

			[Token(Token = "0x170002D6")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001AB2")]
				[Address(RVA = "0x7F7FD0", Offset = "0x7F7FD0", VA = "0x7F7FD0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002D7")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001AB4")]
				[Address(RVA = "0x7F8018", Offset = "0x7F8018", VA = "0x7F8018", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001AAF")]
			[Address(RVA = "0x7F7D74", Offset = "0x7F7D74", VA = "0x7F7D74")]
			[DebuggerHidden]
			public <CombineTexturesIntoAtlasesCoroutine>d__68(int <>1__state)
			{
			}

			[Token(Token = "0x6001AB0")]
			[Address(RVA = "0x7F7DA0", Offset = "0x7F7DA0", VA = "0x7F7DA0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001AB1")]
			[Address(RVA = "0x7F7DA4", Offset = "0x7F7DA4", VA = "0x7F7DA4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001AB3")]
			[Address(RVA = "0x7F7FD8", Offset = "0x7F7FD8", VA = "0x7F7FD8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000419")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDF1C", Offset = "0x5CDF1C")]
		private sealed class <_CombineTexturesIntoAtlases>d__69 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001B4D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001B4E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001B4F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MB3_TextureCombiner <>4__this;

			[Token(Token = "0x4001B50")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public MB2_EditorMethodsInterface textureEditorMethods;

			[Token(Token = "0x4001B51")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public List<GameObject> objsToMesh;

			[Token(Token = "0x4001B52")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public CombineTexturesIntoAtlasesCoroutineResult result;

			[Token(Token = "0x4001B53")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public ProgressUpdateDelegate progressInfo;

			[Token(Token = "0x4001B54")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Material resultMaterial;

			[Token(Token = "0x4001B55")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public List<Material> allowedMaterialsFilter;

			[Token(Token = "0x4001B56")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public bool onlyPackRects;

			[Token(Token = "0x4001B57")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public List<AtlasPackingResult> atlasPackingResult;

			[Token(Token = "0x4001B58")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public MB_AtlasesAndRects resultAtlasesAndRects;

			[Token(Token = "0x4001B59")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			private Stopwatch <sw>5__2;

			[Token(Token = "0x170002D8")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001AB9")]
				[Address(RVA = "0x7F8B2C", Offset = "0x7F8B2C", VA = "0x7F8B2C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002D9")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001ABB")]
				[Address(RVA = "0x7F8B74", Offset = "0x7F8B74", VA = "0x7F8B74", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001AB5")]
			[Address(RVA = "0x7F8020", Offset = "0x7F8020", VA = "0x7F8020")]
			[DebuggerHidden]
			public <_CombineTexturesIntoAtlases>d__69(int <>1__state)
			{
			}

			[Token(Token = "0x6001AB6")]
			[Address(RVA = "0x7F804C", Offset = "0x7F804C", VA = "0x7F804C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001AB7")]
			[Address(RVA = "0x7F82AC", Offset = "0x7F82AC", VA = "0x7F82AC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001AB8")]
			[Address(RVA = "0x7F8078", Offset = "0x7F8078", VA = "0x7F8078")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6001ABA")]
			[Address(RVA = "0x7F8B34", Offset = "0x7F8B34", VA = "0x7F8B34", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200041A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDF2C", Offset = "0x5CDF2C")]
		private sealed class <__CombineTexturesIntoAtlases>d__71 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001B5A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001B5B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001B5C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MB3_TextureCombiner <>4__this;

			[Token(Token = "0x4001B5D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public MB3_TextureCombinerPipeline.TexturePipelineData data;

			[Token(Token = "0x4001B5E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public ProgressUpdateDelegate progressInfo;

			[Token(Token = "0x4001B5F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public CombineTexturesIntoAtlasesCoroutineResult result;

			[Token(Token = "0x4001B60")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public MB2_EditorMethodsInterface textureEditorMethods;

			[Token(Token = "0x4001B61")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public MB_AtlasesAndRects resultAtlasesAndRects;

			[Token(Token = "0x4001B62")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private StringBuilder <report>5__2;

			[Token(Token = "0x4001B63")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private MB_ITextureCombinerPacker <texturePaker>5__3;

			[Token(Token = "0x170002DA")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001ABF")]
				[Address(RVA = "0x7F96AC", Offset = "0x7F96AC", VA = "0x7F96AC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002DB")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001AC1")]
				[Address(RVA = "0x7F96F4", Offset = "0x7F96F4", VA = "0x7F96F4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001ABC")]
			[Address(RVA = "0x7F8B7C", Offset = "0x7F8B7C", VA = "0x7F8B7C")]
			[DebuggerHidden]
			public <__CombineTexturesIntoAtlases>d__71(int <>1__state)
			{
			}

			[Token(Token = "0x6001ABD")]
			[Address(RVA = "0x7F8BA8", Offset = "0x7F8BA8", VA = "0x7F8BA8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001ABE")]
			[Address(RVA = "0x7F8BAC", Offset = "0x7F8BAC", VA = "0x7F8BAC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001AC0")]
			[Address(RVA = "0x7F96B4", Offset = "0x7F96B4", VA = "0x7F96B4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200041B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDF3C", Offset = "0x5CDF3C")]
		private sealed class <__RunTexturePacker>d__72 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001B64")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001B65")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001B66")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MB3_TextureCombiner <>4__this;

			[Token(Token = "0x4001B67")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public MB3_TextureCombinerPipeline.TexturePipelineData data;

			[Token(Token = "0x4001B68")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public CombineTexturesIntoAtlasesCoroutineResult result;

			[Token(Token = "0x4001B69")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public MB2_EditorMethodsInterface textureEditorMethods;

			[Token(Token = "0x4001B6A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public List<AtlasPackingResult> packingResult;

			[Token(Token = "0x170002DC")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001AC5")]
				[Address(RVA = "0x7F9CA8", Offset = "0x7F9CA8", VA = "0x7F9CA8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002DD")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001AC7")]
				[Address(RVA = "0x7F9CF0", Offset = "0x7F9CF0", VA = "0x7F9CF0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001AC2")]
			[Address(RVA = "0x7F96FC", Offset = "0x7F96FC", VA = "0x7F96FC")]
			[DebuggerHidden]
			public <__RunTexturePacker>d__72(int <>1__state)
			{
			}

			[Token(Token = "0x6001AC3")]
			[Address(RVA = "0x7F9728", Offset = "0x7F9728", VA = "0x7F9728", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001AC4")]
			[Address(RVA = "0x7F972C", Offset = "0x7F972C", VA = "0x7F972C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001AC6")]
			[Address(RVA = "0x7F9CB0", Offset = "0x7F9CB0", VA = "0x7F9CB0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000EE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public MB2_LogLevel LOG_LEVEL;

		[Token(Token = "0x4000EE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		protected MB2_TextureBakeResults _textureBakeResults;

		[Token(Token = "0x4000EE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		protected int _atlasPadding;

		[Token(Token = "0x4000EE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		protected int _maxAtlasSize;

		[Token(Token = "0x4000EE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		protected int _maxAtlasWidthOverride;

		[Token(Token = "0x4000EEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		protected int _maxAtlasHeightOverride;

		[Token(Token = "0x4000EEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		protected bool _useMaxAtlasWidthOverride;

		[Token(Token = "0x4000EEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		[SerializeField]
		protected bool _useMaxAtlasHeightOverride;

		[Token(Token = "0x4000EED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		[SerializeField]
		protected bool _resizePowerOfTwoTextures;

		[Token(Token = "0x4000EEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x33")]
		[SerializeField]
		protected bool _fixOutOfBoundsUVs;

		[Token(Token = "0x4000EEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		protected int _maxTilingBakeSize;

		[Token(Token = "0x4000EF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		protected bool _saveAtlasesAsAssets;

		[Token(Token = "0x4000EF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		protected MB2_PackingAlgorithmEnum _packingAlgorithm;

		[Token(Token = "0x4000EF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		protected bool _meshBakerTexturePackerForcePowerOfTwo;

		[Token(Token = "0x4000EF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		protected List<ShaderTextureProperty> _customShaderPropNames;

		[Token(Token = "0x4000EF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		protected bool _normalizeTexelDensity;

		[Token(Token = "0x4000EF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		[SerializeField]
		protected bool _considerNonTextureProperties;

		[Token(Token = "0x4000EF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private List<TemporaryTexture> _temporaryTextures;

		[Token(Token = "0x4000EF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool _RunCorutineWithoutPauseIsRunning;

		[Token(Token = "0x170000AC")]
		public MB2_TextureBakeResults textureBakeResults
		{
			[Token(Token = "0x6000D6B")]
			[Address(RVA = "0xF33F98", Offset = "0xF33F98", VA = "0xF33F98")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D6C")]
			[Address(RVA = "0xF33FA0", Offset = "0xF33FA0", VA = "0xF33FA0")]
			set
			{
			}
		}

		[Token(Token = "0x170000AD")]
		public int atlasPadding
		{
			[Token(Token = "0x6000D6D")]
			[Address(RVA = "0xF33FA8", Offset = "0xF33FA8", VA = "0xF33FA8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000D6E")]
			[Address(RVA = "0xF33FB0", Offset = "0xF33FB0", VA = "0xF33FB0")]
			set
			{
			}
		}

		[Token(Token = "0x170000AE")]
		public int maxAtlasSize
		{
			[Token(Token = "0x6000D6F")]
			[Address(RVA = "0xF33FB8", Offset = "0xF33FB8", VA = "0xF33FB8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000D70")]
			[Address(RVA = "0xF33FC0", Offset = "0xF33FC0", VA = "0xF33FC0")]
			set
			{
			}
		}

		[Token(Token = "0x170000AF")]
		public virtual int maxAtlasWidthOverride
		{
			[Token(Token = "0x6000D71")]
			[Address(RVA = "0xF33FC8", Offset = "0xF33FC8", VA = "0xF33FC8", Slot = "4")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000D72")]
			[Address(RVA = "0xF33FD0", Offset = "0xF33FD0", VA = "0xF33FD0", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x170000B0")]
		public virtual int maxAtlasHeightOverride
		{
			[Token(Token = "0x6000D73")]
			[Address(RVA = "0xF33FD8", Offset = "0xF33FD8", VA = "0xF33FD8", Slot = "6")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000D74")]
			[Address(RVA = "0xF33FE0", Offset = "0xF33FE0", VA = "0xF33FE0", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x170000B1")]
		public virtual bool useMaxAtlasWidthOverride
		{
			[Token(Token = "0x6000D75")]
			[Address(RVA = "0xF33FE8", Offset = "0xF33FE8", VA = "0xF33FE8", Slot = "8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D76")]
			[Address(RVA = "0xF33FF0", Offset = "0xF33FF0", VA = "0xF33FF0", Slot = "9")]
			set
			{
			}
		}

		[Token(Token = "0x170000B2")]
		public virtual bool useMaxAtlasHeightOverride
		{
			[Token(Token = "0x6000D77")]
			[Address(RVA = "0xF33FFC", Offset = "0xF33FFC", VA = "0xF33FFC", Slot = "10")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D78")]
			[Address(RVA = "0xF34004", Offset = "0xF34004", VA = "0xF34004", Slot = "11")]
			set
			{
			}
		}

		[Token(Token = "0x170000B3")]
		public bool resizePowerOfTwoTextures
		{
			[Token(Token = "0x6000D79")]
			[Address(RVA = "0xF34010", Offset = "0xF34010", VA = "0xF34010")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D7A")]
			[Address(RVA = "0xF34018", Offset = "0xF34018", VA = "0xF34018")]
			set
			{
			}
		}

		[Token(Token = "0x170000B4")]
		public bool fixOutOfBoundsUVs
		{
			[Token(Token = "0x6000D7B")]
			[Address(RVA = "0xF34024", Offset = "0xF34024", VA = "0xF34024")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D7C")]
			[Address(RVA = "0xF3402C", Offset = "0xF3402C", VA = "0xF3402C")]
			set
			{
			}
		}

		[Token(Token = "0x170000B5")]
		public int maxTilingBakeSize
		{
			[Token(Token = "0x6000D7D")]
			[Address(RVA = "0xF34038", Offset = "0xF34038", VA = "0xF34038")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000D7E")]
			[Address(RVA = "0xF34040", Offset = "0xF34040", VA = "0xF34040")]
			set
			{
			}
		}

		[Token(Token = "0x170000B6")]
		public bool saveAtlasesAsAssets
		{
			[Token(Token = "0x6000D7F")]
			[Address(RVA = "0xF34048", Offset = "0xF34048", VA = "0xF34048")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D80")]
			[Address(RVA = "0xF34050", Offset = "0xF34050", VA = "0xF34050")]
			set
			{
			}
		}

		[Token(Token = "0x170000B7")]
		public MB2_PackingAlgorithmEnum packingAlgorithm
		{
			[Token(Token = "0x6000D81")]
			[Address(RVA = "0xF3405C", Offset = "0xF3405C", VA = "0xF3405C")]
			get
			{
				return default(MB2_PackingAlgorithmEnum);
			}
			[Token(Token = "0x6000D82")]
			[Address(RVA = "0xF34064", Offset = "0xF34064", VA = "0xF34064")]
			set
			{
			}
		}

		[Token(Token = "0x170000B8")]
		public bool meshBakerTexturePackerForcePowerOfTwo
		{
			[Token(Token = "0x6000D83")]
			[Address(RVA = "0xF3406C", Offset = "0xF3406C", VA = "0xF3406C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D84")]
			[Address(RVA = "0xF34074", Offset = "0xF34074", VA = "0xF34074")]
			set
			{
			}
		}

		[Token(Token = "0x170000B9")]
		public List<ShaderTextureProperty> customShaderPropNames
		{
			[Token(Token = "0x6000D85")]
			[Address(RVA = "0xF34080", Offset = "0xF34080", VA = "0xF34080")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D86")]
			[Address(RVA = "0xF34088", Offset = "0xF34088", VA = "0xF34088")]
			set
			{
			}
		}

		[Token(Token = "0x170000BA")]
		public bool considerNonTextureProperties
		{
			[Token(Token = "0x6000D87")]
			[Address(RVA = "0xF34090", Offset = "0xF34090", VA = "0xF34090")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D88")]
			[Address(RVA = "0xF34098", Offset = "0xF34098", VA = "0xF34098")]
			set
			{
			}
		}

		[Token(Token = "0x6000D89")]
		[Address(RVA = "0xF328B0", Offset = "0xF328B0", VA = "0xF328B0")]
		public static void RunCorutineWithoutPause(IEnumerator cor, int recursionDepth)
		{
		}

		[Token(Token = "0x6000D8A")]
		[Address(RVA = "0xF340A4", Offset = "0xF340A4", VA = "0xF340A4")]
		public bool CombineTexturesIntoAtlases(ProgressUpdateDelegate progressInfo, MB_AtlasesAndRects resultAtlasesAndRects, Material resultMaterial, List<GameObject> objsToMesh, List<Material> allowedMaterialsFilter, [Optional] MB2_EditorMethodsInterface textureEditorMethods, [Optional] List<AtlasPackingResult> packingResults, bool onlyPackRects = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D8B")]
		[Address(RVA = "0xF34314", Offset = "0xF34314", VA = "0xF34314")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D8EB0", Offset = "0x5D8EB0")]
		public IEnumerator CombineTexturesIntoAtlasesCoroutine(ProgressUpdateDelegate progressInfo, MB_AtlasesAndRects resultAtlasesAndRects, Material resultMaterial, List<GameObject> objsToMesh, List<Material> allowedMaterialsFilter, [Optional] MB2_EditorMethodsInterface textureEditorMethods, [Optional] CombineTexturesIntoAtlasesCoroutineResult coroutineResult, float maxTimePerFrame = 0.01f, [Optional] List<AtlasPackingResult> packingResults, bool onlyPackRects = false)
		{
			return null;
		}

		[Token(Token = "0x6000D8C")]
		[Address(RVA = "0xF341C0", Offset = "0xF341C0", VA = "0xF341C0")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D8F10", Offset = "0x5D8F10")]
		private IEnumerator _CombineTexturesIntoAtlases(ProgressUpdateDelegate progressInfo, CombineTexturesIntoAtlasesCoroutineResult result, MB_AtlasesAndRects resultAtlasesAndRects, Material resultMaterial, List<GameObject> objsToMesh, List<Material> allowedMaterialsFilter, MB2_EditorMethodsInterface textureEditorMethods, List<AtlasPackingResult> atlasPackingResult, bool onlyPackRects)
		{
			return null;
		}

		[Token(Token = "0x6000D8D")]
		[Address(RVA = "0xF34470", Offset = "0xF34470", VA = "0xF34470")]
		private MB3_TextureCombinerPipeline.TexturePipelineData LoadPipelineData(Material resultMaterial, List<ShaderTextureProperty> texPropertyNames, List<GameObject> objsToMesh, List<Material> allowedMaterialsFilter, List<MB_TexSet> distinctMaterialTextures)
		{
			return null;
		}

		[Token(Token = "0x6000D8E")]
		[Address(RVA = "0xF34FA8", Offset = "0xF34FA8", VA = "0xF34FA8")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D8F70", Offset = "0x5D8F70")]
		private IEnumerator __CombineTexturesIntoAtlases(ProgressUpdateDelegate progressInfo, CombineTexturesIntoAtlasesCoroutineResult result, MB_AtlasesAndRects resultAtlasesAndRects, MB3_TextureCombinerPipeline.TexturePipelineData data, MB2_EditorMethodsInterface textureEditorMethods)
		{
			return null;
		}

		[Token(Token = "0x6000D8F")]
		[Address(RVA = "0xF3509C", Offset = "0xF3509C", VA = "0xF3509C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D8FD0", Offset = "0x5D8FD0")]
		private IEnumerator __RunTexturePacker(CombineTexturesIntoAtlasesCoroutineResult result, MB3_TextureCombinerPipeline.TexturePipelineData data, MB2_EditorMethodsInterface textureEditorMethods, List<AtlasPackingResult> packingResult)
		{
			return null;
		}

		[Token(Token = "0x6000D90")]
		[Address(RVA = "0xF35174", Offset = "0xF35174", VA = "0xF35174")]
		internal int _getNumTemporaryTextures()
		{
			return default(int);
		}

		[Token(Token = "0x6000D91")]
		[Address(RVA = "0xF351C0", Offset = "0xF351C0", VA = "0xF351C0")]
		public Texture2D _createTemporaryTexture(string propertyName, int w, int h, TextureFormat texFormat, bool mipMaps)
		{
			return null;
		}

		[Token(Token = "0x6000D92")]
		[Address(RVA = "0xF353D4", Offset = "0xF353D4", VA = "0xF353D4")]
		internal Texture2D _createTextureCopy(string propertyName, Texture2D t)
		{
			return null;
		}

		[Token(Token = "0x6000D93")]
		[Address(RVA = "0xF35590", Offset = "0xF35590", VA = "0xF35590")]
		internal Texture2D _resizeTexture(string propertyName, Texture2D t, int w, int h)
		{
			return null;
		}

		[Token(Token = "0x6000D94")]
		[Address(RVA = "0xF3573C", Offset = "0xF3573C", VA = "0xF3573C")]
		internal void _destroyAllTemporaryTextures()
		{
		}

		[Token(Token = "0x6000D95")]
		[Address(RVA = "0xF358E4", Offset = "0xF358E4", VA = "0xF358E4")]
		internal void _destroyTemporaryTextures(string propertyName)
		{
		}

		[Token(Token = "0x6000D96")]
		[Address(RVA = "0xF35CA8", Offset = "0xF35CA8", VA = "0xF35CA8")]
		public void _restoreProceduralMaterials()
		{
		}

		[Token(Token = "0x6000D97")]
		[Address(RVA = "0xF35CAC", Offset = "0xF35CAC", VA = "0xF35CAC")]
		public void SuggestTreatment(List<GameObject> objsToMesh, Material[] resultMaterials, List<ShaderTextureProperty> _customShaderPropNames)
		{
		}

		[Token(Token = "0x6000D98")]
		[Address(RVA = "0xF38270", Offset = "0xF38270", VA = "0xF38270")]
		private string PrintList(List<GameObject> gos)
		{
			return null;
		}

		[Token(Token = "0x6000D99")]
		[Address(RVA = "0xF32F9C", Offset = "0xF32F9C", VA = "0xF32F9C")]
		public MB3_TextureCombiner()
		{
		}
	}
	[Token(Token = "0x2000202")]
	public class MeshBakerMaterialTexture
	{
		[Token(Token = "0x4000EF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Texture2D _t;

		[Token(Token = "0x4000EF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float texelDensity;

		[Token(Token = "0x4000EFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static bool readyToBuildAtlases;

		[Token(Token = "0x4000EFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private DRect encapsulatingSamplingRect;

		[Token(Token = "0x4000EFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D1E38", Offset = "0x5D1E38")]
		private DRect <matTilingRect>k__BackingField;

		[Token(Token = "0x170000BB")]
		public Texture2D t
		{
			[Token(Token = "0x6000D9B")]
			[Address(RVA = "0xDECC80", Offset = "0xDECC80", VA = "0xDECC80")]
			set
			{
			}
		}

		[Token(Token = "0x170000BC")]
		public DRect matTilingRect
		{
			[Token(Token = "0x6000D9C")]
			[Address(RVA = "0xDECC88", Offset = "0xDECC88", VA = "0xDECC88")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D9030", Offset = "0x5D9030")]
			get
			{
				return default(DRect);
			}
			[Token(Token = "0x6000D9D")]
			[Address(RVA = "0xDECC94", Offset = "0xDECC94", VA = "0xDECC94")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D9040", Offset = "0x5D9040")]
			private set
			{
			}
		}

		[Token(Token = "0x170000BD")]
		public bool isNull
		{
			[Token(Token = "0x6000DA4")]
			[Address(RVA = "0xDED0CC", Offset = "0xDED0CC", VA = "0xDED0CC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000BE")]
		public int width
		{
			[Token(Token = "0x6000DA5")]
			[Address(RVA = "0xDED138", Offset = "0xDED138", VA = "0xDED138")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000BF")]
		public int height
		{
			[Token(Token = "0x6000DA6")]
			[Address(RVA = "0xDED208", Offset = "0xDED208", VA = "0xDED208")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000D9E")]
		[Address(RVA = "0xDECCA0", Offset = "0xDECCA0", VA = "0xDECCA0")]
		public MeshBakerMaterialTexture()
		{
		}

		[Token(Token = "0x6000D9F")]
		[Address(RVA = "0xDECCA8", Offset = "0xDECCA8", VA = "0xDECCA8")]
		public MeshBakerMaterialTexture(Texture tx)
		{
		}

		[Token(Token = "0x6000DA0")]
		[Address(RVA = "0xDECE04", Offset = "0xDECE04", VA = "0xDECE04")]
		public MeshBakerMaterialTexture(Texture tx, Vector2 matTilingOffset, Vector2 matTilingScale, float texelDens)
		{
		}

		[Token(Token = "0x6000DA1")]
		[Address(RVA = "0xDECFB0", Offset = "0xDECFB0", VA = "0xDECFB0")]
		public DRect GetEncapsulatingSamplingRect()
		{
			return default(DRect);
		}

		[Token(Token = "0x6000DA2")]
		[Address(RVA = "0xDECFBC", Offset = "0xDECFBC", VA = "0xDECFBC")]
		public void SetEncapsulatingSamplingRect(MB_TexSet ts, DRect r)
		{
		}

		[Token(Token = "0x6000DA3")]
		[Address(RVA = "0xDECFC8", Offset = "0xDECFC8", VA = "0xDECFC8")]
		public Texture2D GetTexture2D()
		{
			return null;
		}

		[Token(Token = "0x6000DA7")]
		[Address(RVA = "0xDED2D8", Offset = "0xDED2D8", VA = "0xDED2D8")]
		public string GetTexName()
		{
			return null;
		}

		[Token(Token = "0x6000DA8")]
		[Address(RVA = "0xDED380", Offset = "0xDED380", VA = "0xDED380")]
		public bool AreTexturesEqual(MeshBakerMaterialTexture b)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000203")]
	public class MatAndTransformToMerged
	{
		[Token(Token = "0x4000EFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Material mat;

		[Token(Token = "0x4000EFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D1E48", Offset = "0x5D1E48")]
		private DRect <obUVRectIfTilingSame>k__BackingField;

		[Token(Token = "0x4000EFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D1E58", Offset = "0x5D1E58")]
		private DRect <samplingRectMatAndUVTiling>k__BackingField;

		[Token(Token = "0x4000F00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D1E68", Offset = "0x5D1E68")]
		private DRect <materialTiling>k__BackingField;

		[Token(Token = "0x4000F01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public string objName;

		[Token(Token = "0x170000C0")]
		public DRect obUVRectIfTilingSame
		{
			[Token(Token = "0x6000DAA")]
			[Address(RVA = "0xDEBF88", Offset = "0xDEBF88", VA = "0xDEBF88")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D9050", Offset = "0x5D9050")]
			get
			{
				return default(DRect);
			}
			[Token(Token = "0x6000DAB")]
			[Address(RVA = "0xDEBF94", Offset = "0xDEBF94", VA = "0xDEBF94")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D9060", Offset = "0x5D9060")]
			private set
			{
			}
		}

		[Token(Token = "0x170000C1")]
		public DRect samplingRectMatAndUVTiling
		{
			[Token(Token = "0x6000DAC")]
			[Address(RVA = "0xDEBFA0", Offset = "0xDEBFA0", VA = "0xDEBFA0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D9070", Offset = "0x5D9070")]
			get
			{
				return default(DRect);
			}
			[Token(Token = "0x6000DAD")]
			[Address(RVA = "0xDEBFAC", Offset = "0xDEBFAC", VA = "0xDEBFAC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D9080", Offset = "0x5D9080")]
			private set
			{
			}
		}

		[Token(Token = "0x170000C2")]
		public DRect materialTiling
		{
			[Token(Token = "0x6000DAE")]
			[Address(RVA = "0xDEBFB8", Offset = "0xDEBFB8", VA = "0xDEBFB8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D9090", Offset = "0x5D9090")]
			get
			{
				return default(DRect);
			}
			[Token(Token = "0x6000DAF")]
			[Address(RVA = "0xDEBFC4", Offset = "0xDEBFC4", VA = "0xDEBFC4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D90A0", Offset = "0x5D90A0")]
			private set
			{
			}
		}

		[Token(Token = "0x6000DB0")]
		[Address(RVA = "0xDEBFD0", Offset = "0xDEBFD0", VA = "0xDEBFD0")]
		public MatAndTransformToMerged(DRect obUVrect, bool fixOutOfBoundsUVs)
		{
		}

		[Token(Token = "0x6000DB1")]
		[Address(RVA = "0xDEC0AC", Offset = "0xDEC0AC", VA = "0xDEC0AC")]
		public MatAndTransformToMerged(DRect obUVrect, bool fixOutOfBoundsUVs, Material m)
		{
		}

		[Token(Token = "0x6000DB2")]
		[Address(RVA = "0xDEC034", Offset = "0xDEC034", VA = "0xDEC034")]
		private void _init(DRect obUVrect, bool fixOutOfBoundsUVs, Material m)
		{
		}

		[Token(Token = "0x6000DB3")]
		[Address(RVA = "0xDEC11C", Offset = "0xDEC11C", VA = "0xDEC11C", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DB4")]
		[Address(RVA = "0xDEC20C", Offset = "0xDEC20C", VA = "0xDEC20C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000DB5")]
		[Address(RVA = "0xDEC298", Offset = "0xDEC298", VA = "0xDEC298")]
		public string GetMaterialName()
		{
			return null;
		}

		[Token(Token = "0x6000DB6")]
		[Address(RVA = "0xDEC370", Offset = "0xDEC370", VA = "0xDEC370")]
		public void AssignInitialValuesForMaterialTilingAndSamplingRectMatAndUVTiling(bool allTexturesUseSameMatTiling, DRect matTiling)
		{
		}
	}
	[Token(Token = "0x2000204")]
	public class MatsAndGOs
	{
		[Token(Token = "0x4000F02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<MatAndTransformToMerged> mats;

		[Token(Token = "0x4000F03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<GameObject> gos;

		[Token(Token = "0x6000DB7")]
		[Address(RVA = "0xDECB0C", Offset = "0xDECB0C", VA = "0xDECB0C")]
		public MatsAndGOs()
		{
		}
	}
	[Token(Token = "0x2000205")]
	public class MB_TexSet
	{
		[Token(Token = "0x200041C")]
		private interface PipelineVariation
		{
			[Token(Token = "0x6001AC8")]
			void GetRectsForTextureBakeResults(out Rect allPropsUseSameTiling_encapsulatingSamplingRect, out Rect propsUseDifferntTiling_obUVRect);

			[Token(Token = "0x6001AC9")]
			void SetTilingTreatmentAndAdjustEncapsulatingSamplingRect(MB_TextureTilingTreatment newTilingTreatment);

			[Token(Token = "0x6001ACA")]
			Rect GetMaterialTilingRectForTextureBakerResults(int materialIndex);

			[Token(Token = "0x6001ACB")]
			void AdjustResultMaterialNonTextureProperties(Material resultMaterial, List<ShaderTextureProperty> props);
		}

		[Token(Token = "0x200041D")]
		private class PipelineVariationAllTexturesUseSameMatTiling : PipelineVariation
		{
			[Token(Token = "0x4001B6B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private MB_TexSet texSet;

			[Token(Token = "0x6001ACC")]
			[Address(RVA = "0xFEC120", Offset = "0xFEC120", VA = "0xFEC120")]
			public PipelineVariationAllTexturesUseSameMatTiling(MB_TexSet ts)
			{
			}

			[Token(Token = "0x6001ACD")]
			[Address(RVA = "0xFEC154", Offset = "0xFEC154", VA = "0xFEC154", Slot = "4")]
			public void GetRectsForTextureBakeResults(out Rect allPropsUseSameTiling_encapsulatingSamplingRect, out Rect propsUseDifferntTiling_obUVRect)
			{
			}

			[Token(Token = "0x6001ACE")]
			[Address(RVA = "0xFEC260", Offset = "0xFEC260", VA = "0xFEC260", Slot = "5")]
			public void SetTilingTreatmentAndAdjustEncapsulatingSamplingRect(MB_TextureTilingTreatment newTilingTreatment)
			{
			}

			[Token(Token = "0x6001ACF")]
			[Address(RVA = "0xFEC3D0", Offset = "0xFEC3D0", VA = "0xFEC3D0", Slot = "6")]
			public Rect GetMaterialTilingRectForTextureBakerResults(int materialIndex)
			{
				return default(Rect);
			}

			[Token(Token = "0x6001AD0")]
			[Address(RVA = "0xFEC480", Offset = "0xFEC480", VA = "0xFEC480", Slot = "7")]
			public void AdjustResultMaterialNonTextureProperties(Material resultMaterial, List<ShaderTextureProperty> props)
			{
			}
		}

		[Token(Token = "0x200041E")]
		private class PipelineVariationSomeTexturesUseDifferentMatTiling : PipelineVariation
		{
			[Token(Token = "0x4001B6C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private MB_TexSet texSet;

			[Token(Token = "0x6001AD1")]
			[Address(RVA = "0xFEC484", Offset = "0xFEC484", VA = "0xFEC484")]
			public PipelineVariationSomeTexturesUseDifferentMatTiling(MB_TexSet ts)
			{
			}

			[Token(Token = "0x6001AD2")]
			[Address(RVA = "0xFEC4B8", Offset = "0xFEC4B8", VA = "0xFEC4B8", Slot = "4")]
			public void GetRectsForTextureBakeResults(out Rect allPropsUseSameTiling_encapsulatingSamplingRect, out Rect propsUseDifferntTiling_obUVRect)
			{
			}

			[Token(Token = "0x6001AD3")]
			[Address(RVA = "0xFEC5E0", Offset = "0xFEC5E0", VA = "0xFEC5E0", Slot = "5")]
			public void SetTilingTreatmentAndAdjustEncapsulatingSamplingRect(MB_TextureTilingTreatment newTilingTreatment)
			{
			}

			[Token(Token = "0x6001AD4")]
			[Address(RVA = "0xFEC750", Offset = "0xFEC750", VA = "0xFEC750", Slot = "6")]
			public Rect GetMaterialTilingRectForTextureBakerResults(int materialIndex)
			{
				return default(Rect);
			}

			[Token(Token = "0x6001AD5")]
			[Address(RVA = "0xFEC790", Offset = "0xFEC790", VA = "0xFEC790", Slot = "7")]
			public void AdjustResultMaterialNonTextureProperties(Material resultMaterial, List<ShaderTextureProperty> props)
			{
			}
		}

		[Token(Token = "0x4000F04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public MeshBakerMaterialTexture[] ts;

		[Token(Token = "0x4000F05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MatsAndGOs matsAndGOs;

		[Token(Token = "0x4000F06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D1E78", Offset = "0x5D1E78")]
		private bool <allTexturesUseSameMatTiling>k__BackingField;

		[Token(Token = "0x4000F07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D1E88", Offset = "0x5D1E88")]
		private bool <thisIsOnlyTexSetInAtlas>k__BackingField;

		[Token(Token = "0x4000F08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D1E98", Offset = "0x5D1E98")]
		private MB_TextureTilingTreatment <tilingTreatment>k__BackingField;

		[Token(Token = "0x4000F09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D1EA8", Offset = "0x5D1EA8")]
		private Vector2 <obUVoffset>k__BackingField;

		[Token(Token = "0x4000F0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D1EB8", Offset = "0x5D1EB8")]
		private Vector2 <obUVscale>k__BackingField;

		[Token(Token = "0x4000F0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int idealWidth;

		[Token(Token = "0x4000F0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public int idealHeight;

		[Token(Token = "0x4000F0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private PipelineVariation pipelineVariation;

		[Token(Token = "0x170000C3")]
		public bool allTexturesUseSameMatTiling
		{
			[Token(Token = "0x6000DB8")]
			[Address(RVA = "0xF474DC", Offset = "0xF474DC", VA = "0xF474DC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D90B0", Offset = "0x5D90B0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000DB9")]
			[Address(RVA = "0xF474E4", Offset = "0xF474E4", VA = "0xF474E4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D90C0", Offset = "0x5D90C0")]
			private set
			{
			}
		}

		[Token(Token = "0x170000C4")]
		public bool thisIsOnlyTexSetInAtlas
		{
			[Token(Token = "0x6000DBA")]
			[Address(RVA = "0xF474F0", Offset = "0xF474F0", VA = "0xF474F0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D90D0", Offset = "0x5D90D0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000DBB")]
			[Address(RVA = "0xF474F8", Offset = "0xF474F8", VA = "0xF474F8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D90E0", Offset = "0x5D90E0")]
			private set
			{
			}
		}

		[Token(Token = "0x170000C5")]
		public MB_TextureTilingTreatment tilingTreatment
		{
			[Token(Token = "0x6000DBC")]
			[Address(RVA = "0xF47504", Offset = "0xF47504", VA = "0xF47504")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D90F0", Offset = "0x5D90F0")]
			get
			{
				return default(MB_TextureTilingTreatment);
			}
			[Token(Token = "0x6000DBD")]
			[Address(RVA = "0xF4750C", Offset = "0xF4750C", VA = "0xF4750C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D9100", Offset = "0x5D9100")]
			private set
			{
			}
		}

		[Token(Token = "0x170000C6")]
		public Vector2 obUVoffset
		{
			[Token(Token = "0x6000DBE")]
			[Address(RVA = "0xF47514", Offset = "0xF47514", VA = "0xF47514")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D9110", Offset = "0x5D9110")]
			get
			{
				return default(Vector2);
			}
			[Token(Token = "0x6000DBF")]
			[Address(RVA = "0xF4751C", Offset = "0xF4751C", VA = "0xF4751C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D9120", Offset = "0x5D9120")]
			private set
			{
			}
		}

		[Token(Token = "0x170000C7")]
		public Vector2 obUVscale
		{
			[Token(Token = "0x6000DC0")]
			[Address(RVA = "0xF47524", Offset = "0xF47524", VA = "0xF47524")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D9130", Offset = "0x5D9130")]
			get
			{
				return default(Vector2);
			}
			[Token(Token = "0x6000DC1")]
			[Address(RVA = "0xF4752C", Offset = "0xF4752C", VA = "0xF4752C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D9140", Offset = "0x5D9140")]
			private set
			{
			}
		}

		[Token(Token = "0x170000C8")]
		internal DRect obUVrect
		{
			[Token(Token = "0x6000DC2")]
			[Address(RVA = "0xF47534", Offset = "0xF47534", VA = "0xF47534")]
			get
			{
				return default(DRect);
			}
		}

		[Token(Token = "0x6000DC3")]
		[Address(RVA = "0xF31FD0", Offset = "0xF31FD0", VA = "0xF31FD0")]
		public MB_TexSet(MeshBakerMaterialTexture[] tss, Vector2 uvOffset, Vector2 uvScale, MB_TextureTilingTreatment treatment)
		{
		}

		[Token(Token = "0x6000DC4")]
		[Address(RVA = "0xF47570", Offset = "0xF47570", VA = "0xF47570")]
		internal bool IsEqual(object obj, bool fixOutOfBoundsUVs, MB3_TextureCombinerNonTextureProperties resultMaterialTextureBlender)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DC5")]
		[Address(RVA = "0xF477C8", Offset = "0xF477C8", VA = "0xF477C8")]
		private Rect GetEncapsulatingSamplingRectIfTilingSame()
		{
			return default(Rect);
		}

		[Token(Token = "0x6000DC6")]
		[Address(RVA = "0xF3A4D4", Offset = "0xF3A4D4", VA = "0xF3A4D4")]
		public void SetEncapsulatingSamplingRectWhenMergingTexSets(DRect newEncapsulatingSamplingRect)
		{
		}

		[Token(Token = "0x6000DC7")]
		[Address(RVA = "0xF4785C", Offset = "0xF4785C", VA = "0xF4785C")]
		public void SetEncapsulatingSamplingRectForTesting(int propIdx, DRect newEncapsulatingSamplingRect)
		{
		}

		[Token(Token = "0x6000DC8")]
		[Address(RVA = "0xF478A8", Offset = "0xF478A8", VA = "0xF478A8")]
		public void SetEncapsulatingRect(int propIdx, bool considerMeshUVs)
		{
		}

		[Token(Token = "0x6000DC9")]
		[Address(RVA = "0xF3E50C", Offset = "0xF3E50C", VA = "0xF3E50C")]
		public void CreateColoredTexToReplaceNull(string propName, int propIdx, bool considerMeshUVs, MB3_TextureCombiner combiner, Color col)
		{
		}

		[Token(Token = "0x6000DCA")]
		[Address(RVA = "0xF47964", Offset = "0xF47964", VA = "0xF47964")]
		public void SetThisIsOnlyTexSetInAtlasTrue()
		{
		}

		[Token(Token = "0x6000DCB")]
		[Address(RVA = "0xF39CF0", Offset = "0xF39CF0", VA = "0xF39CF0")]
		public void SetAllTexturesUseSameMatTilingTrue()
		{
		}

		[Token(Token = "0x6000DCC")]
		[Address(RVA = "0xF47970", Offset = "0xF47970", VA = "0xF47970")]
		public void AdjustResultMaterialNonTextureProperties(Material resultMaterial, List<ShaderTextureProperty> props)
		{
		}

		[Token(Token = "0x6000DCD")]
		[Address(RVA = "0xF3D548", Offset = "0xF3D548", VA = "0xF3D548")]
		public void SetTilingTreatmentAndAdjustEncapsulatingSamplingRect(MB_TextureTilingTreatment newTilingTreatment)
		{
		}

		[Token(Token = "0x6000DCE")]
		[Address(RVA = "0xF47A38", Offset = "0xF47A38", VA = "0xF47A38")]
		internal void GetRectsForTextureBakeResults(out Rect allPropsUseSameTiling_encapsulatingSamplingRect, out Rect propsUseDifferntTiling_obUVRect)
		{
		}

		[Token(Token = "0x6000DCF")]
		[Address(RVA = "0xF47AFC", Offset = "0xF47AFC", VA = "0xF47AFC")]
		internal Rect GetMaterialTilingRectForTextureBakerResults(int materialIndex)
		{
			return default(Rect);
		}

		[Token(Token = "0x6000DD0")]
		[Address(RVA = "0xF39D60", Offset = "0xF39D60", VA = "0xF39D60")]
		internal void CalcInitialFullSamplingRects(bool fixOutOfBoundsUVs)
		{
		}

		[Token(Token = "0x6000DD1")]
		[Address(RVA = "0xF39F68", Offset = "0xF39F68", VA = "0xF39F68")]
		internal void CalcMatAndUVSamplingRects()
		{
		}

		[Token(Token = "0x6000DD2")]
		[Address(RVA = "0xF3A0C8", Offset = "0xF3A0C8", VA = "0xF3A0C8")]
		public bool AllTexturesAreSameForMerge(MB_TexSet other, bool considerNonTextureProperties, MB3_TextureCombinerNonTextureProperties resultMaterialTextureBlender)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DD3")]
		[Address(RVA = "0xF47BBC", Offset = "0xF47BBC", VA = "0xF47BBC")]
		internal void DrawRectsToMergeGizmos(Color encC, Color innerC)
		{
		}

		[Token(Token = "0x6000DD4")]
		[Address(RVA = "0xF399D4", Offset = "0xF399D4", VA = "0xF399D4")]
		internal string GetDescription()
		{
			return null;
		}

		[Token(Token = "0x6000DD5")]
		[Address(RVA = "0xF47E24", Offset = "0xF47E24", VA = "0xF47E24")]
		internal string GetMatSubrectDescriptions()
		{
			return null;
		}
	}
	[Token(Token = "0x2000206")]
	public class MB3_TextureCombinerMerging
	{
		[Token(Token = "0x4000F0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool _considerNonTextureProperties;

		[Token(Token = "0x4000F0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private MB3_TextureCombinerNonTextureProperties resultMaterialTextureBlender;

		[Token(Token = "0x4000F10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool fixOutOfBoundsUVs;

		[Token(Token = "0x4000F11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public MB2_LogLevel LOG_LEVEL;

		[Token(Token = "0x4000F12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool LOG_LEVEL_TRACE_MERGE_MAT_SUBRECTS;

		[Token(Token = "0x6000DD6")]
		[Address(RVA = "0xF383A8", Offset = "0xF383A8", VA = "0xF383A8")]
		public static Rect BuildTransformMeshUV2AtlasRect(bool considerMeshUVs, Rect _atlasRect, Rect _obUVRect, Rect _sourceMaterialTiling, Rect _encapsulatingRect)
		{
			return default(Rect);
		}

		[Token(Token = "0x6000DD7")]
		[Address(RVA = "0xF38758", Offset = "0xF38758", VA = "0xF38758")]
		public MB3_TextureCombinerMerging(bool considerNonTextureProps, MB3_TextureCombinerNonTextureProperties resultMaterialTexBlender, bool fixObUVs, MB2_LogLevel logLevel)
		{
		}

		[Token(Token = "0x6000DD8")]
		[Address(RVA = "0xF387D0", Offset = "0xF387D0", VA = "0xF387D0")]
		public void MergeOverlappingDistinctMaterialTexturesAndCalcMaterialSubrects(List<MB_TexSet> distinctMaterialTextures)
		{
		}

		[Token(Token = "0x6000DD9")]
		[Address(RVA = "0xF3A574", Offset = "0xF3A574", VA = "0xF3A574")]
		public void DoIntegrityCheckMergedEncapsulatingSamplingRects(List<MB_TexSet> distinctMaterialTextures)
		{
		}
	}
	[Token(Token = "0x2000207")]
	public class MB3_TextureCombinerNonTextureProperties
	{
		[Token(Token = "0x200041F")]
		public interface MaterialProperty
		{
			[Token(Token = "0x170002DE")]
			string PropertyName
			{
				[Token(Token = "0x6001AD6")]
				get;
				[Token(Token = "0x6001AD7")]
				set;
			}

			[Token(Token = "0x6001AD8")]
			MaterialPropertyValueAveraged GetAverageCalculator();

			[Token(Token = "0x6001AD9")]
			object GetDefaultValue();
		}

		[Token(Token = "0x2000420")]
		public class MaterialPropertyFloat : MaterialProperty
		{
			[Token(Token = "0x4001B6D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D5FC4", Offset = "0x5D5FC4")]
			private string <PropertyName>k__BackingField;

			[Token(Token = "0x4001B6E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private MaterialPropertyValueAveragedFloat _averageCalc;

			[Token(Token = "0x4001B6F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private float _defaultValue;

			[Token(Token = "0x170002DF")]
			public string PropertyName
			{
				[Token(Token = "0x6001ADA")]
				[Address(RVA = "0xFE169C", Offset = "0xFE169C", VA = "0xFE169C", Slot = "4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5DB474", Offset = "0x5DB474")]
				get
				{
					return null;
				}
				[Token(Token = "0x6001ADB")]
				[Address(RVA = "0xFE16A4", Offset = "0xFE16A4", VA = "0xFE16A4", Slot = "5")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5DB484", Offset = "0x5DB484")]
				set
				{
				}
			}

			[Token(Token = "0x6001ADC")]
			[Address(RVA = "0xFE16AC", Offset = "0xFE16AC", VA = "0xFE16AC")]
			public MaterialPropertyFloat(string name, float defValue)
			{
			}

			[Token(Token = "0x6001ADD")]
			[Address(RVA = "0xFE1750", Offset = "0xFE1750", VA = "0xFE1750", Slot = "6")]
			public MaterialPropertyValueAveraged GetAverageCalculator()
			{
				return null;
			}

			[Token(Token = "0x6001ADE")]
			[Address(RVA = "0xFE1758", Offset = "0xFE1758", VA = "0xFE1758", Slot = "7")]
			public object GetDefaultValue()
			{
				return null;
			}
		}

		[Token(Token = "0x2000421")]
		public class MaterialPropertyColor : MaterialProperty
		{
			[Token(Token = "0x4001B70")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D5FD4", Offset = "0x5D5FD4")]
			private string <PropertyName>k__BackingField;

			[Token(Token = "0x4001B71")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private MaterialPropertyValueAveragedColor _averageCalc;

			[Token(Token = "0x4001B72")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private Color _defaultValue;

			[Token(Token = "0x170002E0")]
			public string PropertyName
			{
				[Token(Token = "0x6001ADF")]
				[Address(RVA = "0xFE1568", Offset = "0xFE1568", VA = "0xFE1568", Slot = "4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5DB494", Offset = "0x5DB494")]
				get
				{
					return null;
				}
				[Token(Token = "0x6001AE0")]
				[Address(RVA = "0xFE1570", Offset = "0xFE1570", VA = "0xFE1570", Slot = "5")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5DB4A4", Offset = "0x5DB4A4")]
				set
				{
				}
			}

			[Token(Token = "0x6001AE1")]
			[Address(RVA = "0xFE1578", Offset = "0xFE1578", VA = "0xFE1578")]
			public MaterialPropertyColor(string name, Color defaultVal)
			{
			}

			[Token(Token = "0x6001AE2")]
			[Address(RVA = "0xFE1634", Offset = "0xFE1634", VA = "0xFE1634", Slot = "6")]
			public MaterialPropertyValueAveraged GetAverageCalculator()
			{
				return null;
			}

			[Token(Token = "0x6001AE3")]
			[Address(RVA = "0xFE163C", Offset = "0xFE163C", VA = "0xFE163C", Slot = "7")]
			public object GetDefaultValue()
			{
				return null;
			}
		}

		[Token(Token = "0x2000422")]
		public interface MaterialPropertyValueAveraged
		{
			[Token(Token = "0x6001AE4")]
			void TryGetPropValueFromMaterialAndBlendIntoAverage(Material mat, MaterialProperty property);

			[Token(Token = "0x6001AE5")]
			object GetAverage();

			[Token(Token = "0x6001AE6")]
			int NumValues();

			[Token(Token = "0x6001AE7")]
			void SetAverageValueOrDefaultOnMaterial(Material mat, MaterialProperty property);
		}

		[Token(Token = "0x2000423")]
		public class MaterialPropertyValueAveragedFloat : MaterialPropertyValueAveraged
		{
			[Token(Token = "0x4001B73")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float averageVal;

			[Token(Token = "0x4001B74")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int numValues;

			[Token(Token = "0x6001AE8")]
			[Address(RVA = "0xFE1C4C", Offset = "0xFE1C4C", VA = "0xFE1C4C", Slot = "4")]
			public void TryGetPropValueFromMaterialAndBlendIntoAverage(Material mat, MaterialProperty property)
			{
			}

			[Token(Token = "0x6001AE9")]
			[Address(RVA = "0xFE1DBC", Offset = "0xFE1DBC", VA = "0xFE1DBC", Slot = "5")]
			public object GetAverage()
			{
				return null;
			}

			[Token(Token = "0x6001AEA")]
			[Address(RVA = "0xFE1E1C", Offset = "0xFE1E1C", VA = "0xFE1E1C", Slot = "6")]
			public int NumValues()
			{
				return default(int);
			}

			[Token(Token = "0x6001AEB")]
			[Address(RVA = "0xFE1E24", Offset = "0xFE1E24", VA = "0xFE1E24", Slot = "7")]
			public void SetAverageValueOrDefaultOnMaterial(Material mat, MaterialProperty property)
			{
			}

			[Token(Token = "0x6001AEC")]
			[Address(RVA = "0xFE1748", Offset = "0xFE1748", VA = "0xFE1748")]
			public MaterialPropertyValueAveragedFloat()
			{
			}
		}

		[Token(Token = "0x2000424")]
		public class MaterialPropertyValueAveragedColor : MaterialPropertyValueAveraged
		{
			[Token(Token = "0x4001B75")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Color averageVal;

			[Token(Token = "0x4001B76")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public int numValues;

			[Token(Token = "0x6001AED")]
			[Address(RVA = "0xFE17B8", Offset = "0xFE17B8", VA = "0xFE17B8", Slot = "4")]
			public void TryGetPropValueFromMaterialAndBlendIntoAverage(Material mat, MaterialProperty property)
			{
			}

			[Token(Token = "0x6001AEE")]
			[Address(RVA = "0xFE19C8", Offset = "0xFE19C8", VA = "0xFE19C8", Slot = "5")]
			public object GetAverage()
			{
				return null;
			}

			[Token(Token = "0x6001AEF")]
			[Address(RVA = "0xFE1A28", Offset = "0xFE1A28", VA = "0xFE1A28", Slot = "6")]
			public int NumValues()
			{
				return default(int);
			}

			[Token(Token = "0x6001AF0")]
			[Address(RVA = "0xFE1A30", Offset = "0xFE1A30", VA = "0xFE1A30", Slot = "7")]
			public void SetAverageValueOrDefaultOnMaterial(Material mat, MaterialProperty property)
			{
			}

			[Token(Token = "0x6001AF1")]
			[Address(RVA = "0xFE162C", Offset = "0xFE162C", VA = "0xFE162C")]
			public MaterialPropertyValueAveragedColor()
			{
			}
		}

		[Token(Token = "0x2000425")]
		public struct TexPropertyNameColorPair
		{
			[Token(Token = "0x4001B77")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public string name;

			[Token(Token = "0x4001B78")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Color color;

			[Token(Token = "0x6001AF2")]
			[Address(RVA = "0xFE2EA0", Offset = "0xFE2EA0", VA = "0xFE2EA0")]
			public TexPropertyNameColorPair(string nm, Color col)
			{
			}
		}

		[Token(Token = "0x2000426")]
		private interface NonTextureProperties
		{
			[Token(Token = "0x6001AF3")]
			bool NonTexturePropertiesAreEqual(Material a, Material b);

			[Token(Token = "0x6001AF4")]
			Texture2D TintTextureWithTextureCombiner(Texture2D t, MB_TexSet sourceMaterial, ShaderTextureProperty shaderPropertyName);

			[Token(Token = "0x6001AF5")]
			void AdjustNonTextureProperties(Material resultMat, List<ShaderTextureProperty> texPropertyNames, List<MB_TexSet> distinctMaterialTextures, MB2_EditorMethodsInterface editorMethods);

			[Token(Token = "0x6001AF6")]
			Color GetColorForTemporaryTexture(Material matIfBlender, ShaderTextureProperty texProperty);

			[Token(Token = "0x6001AF7")]
			Color GetColorAsItWouldAppearInAtlasIfNoTexture(Material matIfBlender, ShaderTextureProperty texProperty);
		}

		[Token(Token = "0x2000427")]
		private class NonTexturePropertiesDontBlendProps : NonTextureProperties
		{
			[Token(Token = "0x4001B79")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private MB3_TextureCombinerNonTextureProperties _textureProperties;

			[Token(Token = "0x6001AF8")]
			[Address(RVA = "0xFE29AC", Offset = "0xFE29AC", VA = "0xFE29AC")]
			public NonTexturePropertiesDontBlendProps(MB3_TextureCombinerNonTextureProperties textureProperties)
			{
			}

			[Token(Token = "0x6001AF9")]
			[Address(RVA = "0xFE29E0", Offset = "0xFE29E0", VA = "0xFE29E0", Slot = "4")]
			public bool NonTexturePropertiesAreEqual(Material a, Material b)
			{
				return default(bool);
			}

			[Token(Token = "0x6001AFA")]
			[Address(RVA = "0xFE29E8", Offset = "0xFE29E8", VA = "0xFE29E8", Slot = "5")]
			public Texture2D TintTextureWithTextureCombiner(Texture2D t, MB_TexSet sourceMaterial, ShaderTextureProperty shaderPropertyName)
			{
				return null;
			}

			[Token(Token = "0x6001AFB")]
			[Address(RVA = "0xFE2A68", Offset = "0xFE2A68", VA = "0xFE2A68", Slot = "6")]
			public void AdjustNonTextureProperties(Material resultMat, List<ShaderTextureProperty> texPropertyNames, List<MB_TexSet> distinctMaterialTextures, MB2_EditorMethodsInterface editorMethods)
			{
			}

			[Token(Token = "0x6001AFC")]
			[Address(RVA = "0xFE2D54", Offset = "0xFE2D54", VA = "0xFE2D54", Slot = "8")]
			public Color GetColorAsItWouldAppearInAtlasIfNoTexture(Material matIfBlender, ShaderTextureProperty texProperty)
			{
				return default(Color);
			}

			[Token(Token = "0x6001AFD")]
			[Address(RVA = "0xFE2D5C", Offset = "0xFE2D5C", VA = "0xFE2D5C", Slot = "7")]
			public Color GetColorForTemporaryTexture(Material matIfBlender, ShaderTextureProperty texProperty)
			{
				return default(Color);
			}
		}

		[Token(Token = "0x2000428")]
		private class NonTexturePropertiesBlendProps : NonTextureProperties
		{
			[Token(Token = "0x4001B7A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private MB3_TextureCombinerNonTextureProperties _textureProperties;

			[Token(Token = "0x4001B7B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private TextureBlender resultMaterialTextureBlender;

			[Token(Token = "0x6001AFE")]
			[Address(RVA = "0xFE2038", Offset = "0xFE2038", VA = "0xFE2038")]
			public NonTexturePropertiesBlendProps(MB3_TextureCombinerNonTextureProperties textureProperties, TextureBlender resultMats)
			{
			}

			[Token(Token = "0x6001AFF")]
			[Address(RVA = "0xFE2088", Offset = "0xFE2088", VA = "0xFE2088", Slot = "4")]
			public bool NonTexturePropertiesAreEqual(Material a, Material b)
			{
				return default(bool);
			}

			[Token(Token = "0x6001B00")]
			[Address(RVA = "0xFE2150", Offset = "0xFE2150", VA = "0xFE2150", Slot = "5")]
			public Texture2D TintTextureWithTextureCombiner(Texture2D t, MB_TexSet sourceMaterial, ShaderTextureProperty shaderPropertyName)
			{
				return null;
			}

			[Token(Token = "0x6001B01")]
			[Address(RVA = "0xFE251C", Offset = "0xFE251C", VA = "0xFE251C", Slot = "6")]
			public void AdjustNonTextureProperties(Material resultMat, List<ShaderTextureProperty> texPropertyNames, List<MB_TexSet> distinctMaterialTextures, MB2_EditorMethodsInterface editorMethods)
			{
			}

			[Token(Token = "0x6001B02")]
			[Address(RVA = "0xFE2758", Offset = "0xFE2758", VA = "0xFE2758", Slot = "8")]
			public Color GetColorAsItWouldAppearInAtlasIfNoTexture(Material matIfBlender, ShaderTextureProperty texProperty)
			{
				return default(Color);
			}

			[Token(Token = "0x6001B03")]
			[Address(RVA = "0xFE28E4", Offset = "0xFE28E4", VA = "0xFE28E4", Slot = "7")]
			public Color GetColorForTemporaryTexture(Material matIfBlender, ShaderTextureProperty texProperty)
			{
				return default(Color);
			}
		}

		[Token(Token = "0x4000F13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Color NEUTRAL_NORMAL_MAP_COLOR;

		[Token(Token = "0x4000F14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private TexPropertyNameColorPair[] defaultTextureProperty2DefaultColorMap;

		[Token(Token = "0x4000F15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private MaterialProperty[] _nonTextureProperties;

		[Token(Token = "0x4000F16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private MB2_LogLevel LOG_LEVEL;

		[Token(Token = "0x4000F17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private bool _considerNonTextureProperties;

		[Token(Token = "0x4000F18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private TextureBlender resultMaterialTextureBlender;

		[Token(Token = "0x4000F19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private TextureBlender[] textureBlenders;

		[Token(Token = "0x4000F1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Dictionary<string, Color> textureProperty2DefaultColorMap;

		[Token(Token = "0x4000F1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private NonTextureProperties _nonTexturePropertiesBlender;

		[Token(Token = "0x6000DDB")]
		[Address(RVA = "0xF34660", Offset = "0xF34660", VA = "0xF34660")]
		public MB3_TextureCombinerNonTextureProperties(MB2_LogLevel ll, bool considerNonTextureProps)
		{
		}

		[Token(Token = "0x6000DDC")]
		[Address(RVA = "0xF3AF80", Offset = "0xF3AF80", VA = "0xF3AF80")]
		internal void CollectAverageValuesOfNonTextureProperties(Material resultMaterial, Material mat)
		{
		}

		[Token(Token = "0x6000DDD")]
		[Address(RVA = "0xF3B188", Offset = "0xF3B188", VA = "0xF3B188")]
		internal void LoadTextureBlendersIfNeeded(Material resultMaterial)
		{
		}

		[Token(Token = "0x6000DDE")]
		[Address(RVA = "0xF3B974", Offset = "0xF3B974", VA = "0xF3B974")]
		private static bool InterfaceFilter(Type typeObj, object criteriaObj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DDF")]
		[Address(RVA = "0xF3B7AC", Offset = "0xF3B7AC", VA = "0xF3B7AC")]
		private void FindBestTextureBlender(Material resultMaterial)
		{
		}

		[Token(Token = "0x6000DE0")]
		[Address(RVA = "0xF3B1C0", Offset = "0xF3B1C0", VA = "0xF3B1C0")]
		private void LoadTextureBlenders()
		{
		}

		[Token(Token = "0x6000DE1")]
		[Address(RVA = "0xF3BAF8", Offset = "0xF3BAF8", VA = "0xF3BAF8")]
		internal bool NonTexturePropertiesAreEqual(Material a, Material b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DE2")]
		[Address(RVA = "0xF3BBBC", Offset = "0xF3BBBC", VA = "0xF3BBBC")]
		internal Texture2D TintTextureWithTextureCombiner(Texture2D t, MB_TexSet sourceMaterial, ShaderTextureProperty shaderPropertyName)
		{
			return null;
		}

		[Token(Token = "0x6000DE3")]
		[Address(RVA = "0xF3BC94", Offset = "0xF3BC94", VA = "0xF3BC94")]
		internal void AdjustNonTextureProperties(Material resultMat, List<ShaderTextureProperty> texPropertyNames, List<MB_TexSet> distinctMaterialTextures, MB2_EditorMethodsInterface editorMethods)
		{
		}

		[Token(Token = "0x6000DE4")]
		[Address(RVA = "0xF3BDCC", Offset = "0xF3BDCC", VA = "0xF3BDCC")]
		internal Color GetColorAsItWouldAppearInAtlasIfNoTexture(Material matIfBlender, ShaderTextureProperty texProperty)
		{
			return default(Color);
		}

		[Token(Token = "0x6000DE5")]
		[Address(RVA = "0xF3BE94", Offset = "0xF3BE94", VA = "0xF3BE94")]
		internal Color GetColorForTemporaryTexture(Material matIfBlender, ShaderTextureProperty texProperty)
		{
			return default(Color);
		}

		[Token(Token = "0x6000DE6")]
		[Address(RVA = "0xF3B9C8", Offset = "0xF3B9C8", VA = "0xF3B9C8")]
		private TextureBlender FindMatchingTextureBlender(string shaderName)
		{
			return null;
		}
	}
	[Token(Token = "0x2000208")]
	internal class MB3_TextureCombinerPackerMeshBaker : MB3_TextureCombinerPackerRoot
	{
		[Token(Token = "0x2000429")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDF4C", Offset = "0x5CDF4C")]
		private sealed class <CreateAtlases>d__0 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001B7C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001B7D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001B7E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public AtlasPackingResult packedAtlasRects;

			[Token(Token = "0x4001B7F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public MB2_LogLevel LOG_LEVEL;

			[Token(Token = "0x4001B80")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public MB3_TextureCombinerPipeline.TexturePipelineData data;

			[Token(Token = "0x4001B81")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public MB3_TextureCombiner combiner;

			[Token(Token = "0x4001B82")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public ProgressUpdateDelegate progressInfo;

			[Token(Token = "0x4001B83")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public MB2_EditorMethodsInterface textureEditorMethods;

			[Token(Token = "0x4001B84")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public Texture2D[] atlases;

			[Token(Token = "0x4001B85")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private Rect[] <uvRects>5__2;

			[Token(Token = "0x4001B86")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private int <atlasSizeX>5__3;

			[Token(Token = "0x4001B87")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			private int <atlasSizeY>5__4;

			[Token(Token = "0x4001B88")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			private int <propIdx>5__5;

			[Token(Token = "0x4001B89")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			private ShaderTextureProperty <property>5__6;

			[Token(Token = "0x4001B8A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			private Color[][] <atlasPixels>5__7;

			[Token(Token = "0x4001B8B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			private bool <isNormalMap>5__8;

			[Token(Token = "0x4001B8C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			private int <texSetIdx>5__9;

			[Token(Token = "0x170002E1")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001B07")]
				[Address(RVA = "0xFE4C90", Offset = "0xFE4C90", VA = "0xFE4C90", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002E2")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001B09")]
				[Address(RVA = "0xFE4CD8", Offset = "0xFE4CD8", VA = "0xFE4CD8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001B04")]
			[Address(RVA = "0xFE39E8", Offset = "0xFE39E8", VA = "0xFE39E8")]
			[DebuggerHidden]
			public <CreateAtlases>d__0(int <>1__state)
			{
			}

			[Token(Token = "0x6001B05")]
			[Address(RVA = "0xFE3A14", Offset = "0xFE3A14", VA = "0xFE3A14", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001B06")]
			[Address(RVA = "0xFE3A18", Offset = "0xFE3A18", VA = "0xFE3A18", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001B08")]
			[Address(RVA = "0xFE4C98", Offset = "0xFE4C98", VA = "0xFE4C98", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200042A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDF5C", Offset = "0x5CDF5C")]
		private sealed class <CopyScaledAndTiledToAtlas>d__1 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001B8D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001B8E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001B8F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MeshBakerMaterialTexture source;

			[Token(Token = "0x4001B90")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public MB2_LogLevel LOG_LEVEL;

			[Token(Token = "0x4001B91")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public int targX;

			[Token(Token = "0x4001B92")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public int targY;

			[Token(Token = "0x4001B93")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public int targW;

			[Token(Token = "0x4001B94")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public int targH;

			[Token(Token = "0x4001B95")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public AtlasPadding padding;

			[Token(Token = "0x4001B96")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public DRect srcSamplingRect;

			[Token(Token = "0x4001B97")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public MB3_TextureCombinerPipeline.TexturePipelineData data;

			[Token(Token = "0x4001B98")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			public MB3_TextureCombiner combiner;

			[Token(Token = "0x4001B99")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			public ShaderTextureProperty shaderPropertyName;

			[Token(Token = "0x4001B9A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			public MB_TexSet sourceMaterial;

			[Token(Token = "0x4001B9B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			public ProgressUpdateDelegate progressInfo;

			[Token(Token = "0x4001B9C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			public Color[][] atlasPixels;

			[Token(Token = "0x4001B9D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			private int <w>5__2;

			[Token(Token = "0x4001B9E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
			private int <h>5__3;

			[Token(Token = "0x4001B9F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			private int <i>5__4;

			[Token(Token = "0x4001BA0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
			private int <j>5__5;

			[Token(Token = "0x170002E3")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001B0D")]
				[Address(RVA = "0xFE3998", Offset = "0xFE3998", VA = "0xFE3998", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002E4")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001B0F")]
				[Address(RVA = "0xFE39E0", Offset = "0xFE39E0", VA = "0xFE39E0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001B0A")]
			[Address(RVA = "0xFE2EEC", Offset = "0xFE2EEC", VA = "0xFE2EEC")]
			[DebuggerHidden]
			public <CopyScaledAndTiledToAtlas>d__1(int <>1__state)
			{
			}

			[Token(Token = "0x6001B0B")]
			[Address(RVA = "0xFE2F18", Offset = "0xFE2F18", VA = "0xFE2F18", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001B0C")]
			[Address(RVA = "0xFE2F1C", Offset = "0xFE2F1C", VA = "0xFE2F1C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001B0E")]
			[Address(RVA = "0xFE39A0", Offset = "0xFE39A0", VA = "0xFE39A0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x6000DE8")]
		[Address(RVA = "0xF3BFD0", Offset = "0xF3BFD0", VA = "0xF3BFD0", Slot = "9")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D9150", Offset = "0x5D9150")]
		public override IEnumerator CreateAtlases(ProgressUpdateDelegate progressInfo, MB3_TextureCombinerPipeline.TexturePipelineData data, MB3_TextureCombiner combiner, AtlasPackingResult packedAtlasRects, Texture2D[] atlases, MB2_EditorMethodsInterface textureEditorMethods, MB2_LogLevel LOG_LEVEL)
		{
			return null;
		}

		[Token(Token = "0x6000DE9")]
		[Address(RVA = "0xF3C0CC", Offset = "0xF3C0CC", VA = "0xF3C0CC")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D91B0", Offset = "0x5D91B0")]
		internal static IEnumerator CopyScaledAndTiledToAtlas(MeshBakerMaterialTexture source, MB_TexSet sourceMaterial, ShaderTextureProperty shaderPropertyName, DRect srcSamplingRect, int targX, int targY, int targW, int targH, AtlasPadding padding, Color[][] atlasPixels, bool isNormalMap, MB3_TextureCombinerPipeline.TexturePipelineData data, MB3_TextureCombiner combiner, [Optional] ProgressUpdateDelegate progressInfo, MB2_LogLevel LOG_LEVEL = MB2_LogLevel.info)
		{
			return null;
		}

		[Token(Token = "0x6000DEA")]
		[Address(RVA = "0xF3C240", Offset = "0xF3C240", VA = "0xF3C240")]
		public MB3_TextureCombinerPackerMeshBaker()
		{
		}
	}
	[Token(Token = "0x2000209")]
	internal class MB3_TextureCombinerPackerMeshBakerFast : MB_ITextureCombinerPacker
	{
		[Token(Token = "0x200042B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDF6C", Offset = "0x5CDF6C")]
		private sealed class <ConvertTexturesToReadableFormats>d__0 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001BA1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001BA2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x170002E5")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001B13")]
				[Address(RVA = "0xFE4D28", Offset = "0xFE4D28", VA = "0xFE4D28", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002E6")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001B15")]
				[Address(RVA = "0xFE4D70", Offset = "0xFE4D70", VA = "0xFE4D70", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001B10")]
			[Address(RVA = "0xFE4CE0", Offset = "0xFE4CE0", VA = "0xFE4CE0")]
			[DebuggerHidden]
			public <ConvertTexturesToReadableFormats>d__0(int <>1__state)
			{
			}

			[Token(Token = "0x6001B11")]
			[Address(RVA = "0xFE4D0C", Offset = "0xFE4D0C", VA = "0xFE4D0C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001B12")]
			[Address(RVA = "0xFE4D10", Offset = "0xFE4D10", VA = "0xFE4D10", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001B14")]
			[Address(RVA = "0xFE4D30", Offset = "0xFE4D30", VA = "0xFE4D30", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200042C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDF7C", Offset = "0x5CDF7C")]
		private sealed class <CreateAtlases>d__2 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001BA3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001BA4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001BA5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public AtlasPackingResult packedAtlasRects;

			[Token(Token = "0x4001BA6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public MB2_LogLevel LOG_LEVEL;

			[Token(Token = "0x4001BA7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public MB3_TextureCombinerPipeline.TexturePipelineData data;

			[Token(Token = "0x4001BA8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public MB3_TextureCombiner combiner;

			[Token(Token = "0x4001BA9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public ProgressUpdateDelegate progressInfo;

			[Token(Token = "0x4001BAA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Texture2D[] atlases;

			[Token(Token = "0x4001BAB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public MB2_EditorMethodsInterface textureEditorMethods;

			[Token(Token = "0x170002E7")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001B19")]
				[Address(RVA = "0xFE601C", Offset = "0xFE601C", VA = "0xFE601C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002E8")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001B1B")]
				[Address(RVA = "0xFE6064", Offset = "0xFE6064", VA = "0xFE6064", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001B16")]
			[Address(RVA = "0xFE4D78", Offset = "0xFE4D78", VA = "0xFE4D78")]
			[DebuggerHidden]
			public <CreateAtlases>d__2(int <>1__state)
			{
			}

			[Token(Token = "0x6001B17")]
			[Address(RVA = "0xFE4DA4", Offset = "0xFE4DA4", VA = "0xFE4DA4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001B18")]
			[Address(RVA = "0xFE4DA8", Offset = "0xFE4DA8", VA = "0xFE4DA8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001B1A")]
			[Address(RVA = "0xFE6024", Offset = "0xFE6024", VA = "0xFE6024", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x6000DEB")]
		[Address(RVA = "0xF3C250", Offset = "0xF3C250", VA = "0xF3C250", Slot = "4")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D9210", Offset = "0x5D9210")]
		public IEnumerator ConvertTexturesToReadableFormats(ProgressUpdateDelegate progressInfo, MB3_TextureCombiner.CombineTexturesIntoAtlasesCoroutineResult result, MB3_TextureCombinerPipeline.TexturePipelineData data, MB3_TextureCombiner combiner, MB2_EditorMethodsInterface textureEditorMethods, MB2_LogLevel LOG_LEVEL)
		{
			return null;
		}

		[Token(Token = "0x6000DEC")]
		[Address(RVA = "0xF3C2AC", Offset = "0xF3C2AC", VA = "0xF3C2AC", Slot = "7")]
		public virtual AtlasPackingResult[] CalculateAtlasRectangles(MB3_TextureCombinerPipeline.TexturePipelineData data, bool doMultiAtlas, MB2_LogLevel LOG_LEVEL)
		{
			return null;
		}

		[Token(Token = "0x6000DED")]
		[Address(RVA = "0xF3C53C", Offset = "0xF3C53C", VA = "0xF3C53C", Slot = "6")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D9270", Offset = "0x5D9270")]
		public IEnumerator CreateAtlases(ProgressUpdateDelegate progressInfo, MB3_TextureCombinerPipeline.TexturePipelineData data, MB3_TextureCombiner combiner, AtlasPackingResult packedAtlasRects, Texture2D[] atlases, MB2_EditorMethodsInterface textureEditorMethods, MB2_LogLevel LOG_LEVEL)
		{
			return null;
		}

		[Token(Token = "0x6000DEE")]
		[Address(RVA = "0xF3C638", Offset = "0xF3C638", VA = "0xF3C638")]
		public MB3_TextureCombinerPackerMeshBakerFast()
		{
		}
	}
	[Token(Token = "0x200020A")]
	internal class MB3_TextureCombinerPackerMeshBakerHorizontalVertical : MB3_TextureCombinerPackerMeshBaker
	{
		[Token(Token = "0x200042D")]
		private interface IPipeline
		{
			[Token(Token = "0x6001B1C")]
			MB2_PackingAlgorithmEnum GetPackingAlg();

			[Token(Token = "0x6001B1D")]
			void SortTexSetIntoBins(MB_TexSet texSet, List<MB_TexSet> horizontalVert, List<MB_TexSet> regular, int maxAtlasWidth, int maxAtlasHeight);

			[Token(Token = "0x6001B1E")]
			MB_TextureTilingTreatment GetEdge2EdgeTreatment();

			[Token(Token = "0x6001B1F")]
			void InitializeAtlasPadding(ref AtlasPadding padding, int paddingValue);

			[Token(Token = "0x6001B20")]
			void MergeAtlasPackingResultStackBonAInternal(AtlasPackingResult a, AtlasPackingResult b, out Rect AatlasToFinal, out Rect BatlasToFinal, bool stretchBToAtlasWidth, int maxWidthDim, int maxHeightDim, out int atlasX, out int atlasY);

			[Token(Token = "0x6001B21")]
			void GetExtraRoomForRegularAtlas(int usedHorizontalVertWidth, int usedHorizontalVertHeight, int maxAtlasWidth, int maxAtlasHeight, out int atlasRegularMaxWidth, out int atlasRegularMaxHeight);
		}

		[Token(Token = "0x200042E")]
		private class VerticalPipeline : IPipeline
		{
			[Token(Token = "0x6001B22")]
			[Address(RVA = "0xFE6328", Offset = "0xFE6328", VA = "0xFE6328", Slot = "4")]
			public MB2_PackingAlgorithmEnum GetPackingAlg()
			{
				return default(MB2_PackingAlgorithmEnum);
			}

			[Token(Token = "0x6001B23")]
			[Address(RVA = "0xFE6330", Offset = "0xFE6330", VA = "0xFE6330", Slot = "5")]
			public void SortTexSetIntoBins(MB_TexSet texSet, List<MB_TexSet> horizontalVert, List<MB_TexSet> regular, int maxAtlasWidth, int maxAtlasHeight)
			{
			}

			[Token(Token = "0x6001B24")]
			[Address(RVA = "0xFE63FC", Offset = "0xFE63FC", VA = "0xFE63FC", Slot = "6")]
			public MB_TextureTilingTreatment GetEdge2EdgeTreatment()
			{
				return default(MB_TextureTilingTreatment);
			}

			[Token(Token = "0x6001B25")]
			[Address(RVA = "0xFE6404", Offset = "0xFE6404", VA = "0xFE6404", Slot = "7")]
			public void InitializeAtlasPadding(ref AtlasPadding padding, int paddingValue)
			{
			}

			[Token(Token = "0x6001B26")]
			[Address(RVA = "0xFE640C", Offset = "0xFE640C", VA = "0xFE640C", Slot = "8")]
			public void MergeAtlasPackingResultStackBonAInternal(AtlasPackingResult a, AtlasPackingResult b, out Rect AatlasToFinal, out Rect BatlasToFinal, bool stretchBToAtlasWidth, int maxWidthDim, int maxHeightDim, out int atlasX, out int atlasY)
			{
			}

			[Token(Token = "0x6001B27")]
			[Address(RVA = "0xFE65CC", Offset = "0xFE65CC", VA = "0xFE65CC", Slot = "9")]
			public void GetExtraRoomForRegularAtlas(int usedHorizontalVertWidth, int usedHorizontalVertHeight, int maxAtlasWidth, int maxAtlasHeight, out int atlasRegularMaxWidth, out int atlasRegularMaxHeight)
			{
			}

			[Token(Token = "0x6001B28")]
			[Address(RVA = "0xFE65DC", Offset = "0xFE65DC", VA = "0xFE65DC")]
			public VerticalPipeline()
			{
			}
		}

		[Token(Token = "0x200042F")]
		private class HorizontalPipeline : IPipeline
		{
			[Token(Token = "0x6001B29")]
			[Address(RVA = "0xFE606C", Offset = "0xFE606C", VA = "0xFE606C", Slot = "4")]
			public MB2_PackingAlgorithmEnum GetPackingAlg()
			{
				return default(MB2_PackingAlgorithmEnum);
			}

			[Token(Token = "0x6001B2A")]
			[Address(RVA = "0xFE6074", Offset = "0xFE6074", VA = "0xFE6074", Slot = "5")]
			public void SortTexSetIntoBins(MB_TexSet texSet, List<MB_TexSet> horizontalVert, List<MB_TexSet> regular, int maxAtlasWidth, int maxAtlasHeight)
			{
			}

			[Token(Token = "0x6001B2B")]
			[Address(RVA = "0xFE6140", Offset = "0xFE6140", VA = "0xFE6140", Slot = "6")]
			public MB_TextureTilingTreatment GetEdge2EdgeTreatment()
			{
				return default(MB_TextureTilingTreatment);
			}

			[Token(Token = "0x6001B2C")]
			[Address(RVA = "0xFE6148", Offset = "0xFE6148", VA = "0xFE6148", Slot = "7")]
			public void InitializeAtlasPadding(ref AtlasPadding padding, int paddingValue)
			{
			}

			[Token(Token = "0x6001B2D")]
			[Address(RVA = "0xFE6150", Offset = "0xFE6150", VA = "0xFE6150", Slot = "8")]
			public void MergeAtlasPackingResultStackBonAInternal(AtlasPackingResult a, AtlasPackingResult b, out Rect AatlasToFinal, out Rect BatlasToFinal, bool stretchBToAtlasWidth, int maxWidthDim, int maxHeightDim, out int atlasX, out int atlasY)
			{
			}

			[Token(Token = "0x6001B2E")]
			[Address(RVA = "0xFE6310", Offset = "0xFE6310", VA = "0xFE6310", Slot = "9")]
			public void GetExtraRoomForRegularAtlas(int usedHorizontalVertWidth, int usedHorizontalVertHeight, int maxAtlasWidth, int maxAtlasHeight, out int atlasRegularMaxWidth, out int atlasRegularMaxHeight)
			{
			}

			[Token(Token = "0x6001B2F")]
			[Address(RVA = "0xFE6320", Offset = "0xFE6320", VA = "0xFE6320")]
			public HorizontalPipeline()
			{
			}
		}

		[Token(Token = "0x2000430")]
		public enum AtlasDirection
		{
			[Token(Token = "0x4001BAD")]
			horizontal,
			[Token(Token = "0x4001BAE")]
			vertical
		}

		[Token(Token = "0x4000F1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private AtlasDirection _atlasDirection;

		[Token(Token = "0x6000DEF")]
		[Address(RVA = "0xF3C640", Offset = "0xF3C640", VA = "0xF3C640")]
		public MB3_TextureCombinerPackerMeshBakerHorizontalVertical(AtlasDirection ad)
		{
		}

		[Token(Token = "0x6000DF0")]
		[Address(RVA = "0xF3C66C", Offset = "0xF3C66C", VA = "0xF3C66C", Slot = "8")]
		public override AtlasPackingResult[] CalculateAtlasRectangles(MB3_TextureCombinerPipeline.TexturePipelineData data, bool doMultiAtlas, MB2_LogLevel LOG_LEVEL)
		{
			return null;
		}

		[Token(Token = "0x6000DF1")]
		[Address(RVA = "0xF3DD38", Offset = "0xF3DD38", VA = "0xF3DD38")]
		public static AtlasPackingResult TestStackRectanglesHorizontal(AtlasPackingResult a, AtlasPackingResult b, int maxHeightDim, int maxWidthDim, bool stretchBToAtlasWidth)
		{
			return null;
		}

		[Token(Token = "0x6000DF2")]
		[Address(RVA = "0xF3DDC8", Offset = "0xF3DDC8", VA = "0xF3DDC8")]
		public static AtlasPackingResult TestStackRectanglesVertical(AtlasPackingResult a, AtlasPackingResult b, int maxHeightDim, int maxWidthDim, bool stretchBToAtlasWidth)
		{
			return null;
		}

		[Token(Token = "0x6000DF3")]
		[Address(RVA = "0xF3D740", Offset = "0xF3D740", VA = "0xF3D740")]
		private static AtlasPackingResult MergeAtlasPackingResultStackBonA(AtlasPackingResult a, AtlasPackingResult b, int maxWidthDim, int maxHeightDim, bool stretchBToAtlasWidth, IPipeline pipeline)
		{
			return null;
		}
	}
	[Token(Token = "0x200020B")]
	internal class MB3_TextureCombinerPackerOneTextureInAtlas : MB_ITextureCombinerPacker
	{
		[Token(Token = "0x2000431")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDF8C", Offset = "0x5CDF8C")]
		private sealed class <ConvertTexturesToReadableFormats>d__0 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001BAF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001BB0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x170002E9")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001B33")]
				[Address(RVA = "0xFE662C", Offset = "0xFE662C", VA = "0xFE662C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002EA")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001B35")]
				[Address(RVA = "0xFE6674", Offset = "0xFE6674", VA = "0xFE6674", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001B30")]
			[Address(RVA = "0xFE65E4", Offset = "0xFE65E4", VA = "0xFE65E4")]
			[DebuggerHidden]
			public <ConvertTexturesToReadableFormats>d__0(int <>1__state)
			{
			}

			[Token(Token = "0x6001B31")]
			[Address(RVA = "0xFE6610", Offset = "0xFE6610", VA = "0xFE6610", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001B32")]
			[Address(RVA = "0xFE6614", Offset = "0xFE6614", VA = "0xFE6614", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001B34")]
			[Address(RVA = "0xFE6634", Offset = "0xFE6634", VA = "0xFE6634", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000432")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDF9C", Offset = "0x5CDF9C")]
		private sealed class <CreateAtlases>d__2 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001BB1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001BB2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001BB3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MB2_LogLevel LOG_LEVEL;

			[Token(Token = "0x4001BB4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public MB3_TextureCombinerPipeline.TexturePipelineData data;

			[Token(Token = "0x4001BB5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Texture2D[] atlases;

			[Token(Token = "0x170002EB")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001B39")]
				[Address(RVA = "0xFE6984", Offset = "0xFE6984", VA = "0xFE6984", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002EC")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001B3B")]
				[Address(RVA = "0xFE69CC", Offset = "0xFE69CC", VA = "0xFE69CC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001B36")]
			[Address(RVA = "0xFE667C", Offset = "0xFE667C", VA = "0xFE667C")]
			[DebuggerHidden]
			public <CreateAtlases>d__2(int <>1__state)
			{
			}

			[Token(Token = "0x6001B37")]
			[Address(RVA = "0xFE66A8", Offset = "0xFE66A8", VA = "0xFE66A8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001B38")]
			[Address(RVA = "0xFE66AC", Offset = "0xFE66AC", VA = "0xFE66AC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001B3A")]
			[Address(RVA = "0xFE698C", Offset = "0xFE698C", VA = "0xFE698C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x6000DF4")]
		[Address(RVA = "0xF3DE58", Offset = "0xF3DE58", VA = "0xF3DE58", Slot = "4")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D92D0", Offset = "0x5D92D0")]
		public IEnumerator ConvertTexturesToReadableFormats(ProgressUpdateDelegate progressInfo, MB3_TextureCombiner.CombineTexturesIntoAtlasesCoroutineResult result, MB3_TextureCombinerPipeline.TexturePipelineData data, MB3_TextureCombiner combiner, MB2_EditorMethodsInterface textureEditorMethods, MB2_LogLevel LOG_LEVEL)
		{
			return null;
		}

		[Token(Token = "0x6000DF5")]
		[Address(RVA = "0xF3DEB4", Offset = "0xF3DEB4", VA = "0xF3DEB4", Slot = "5")]
		public AtlasPackingResult[] CalculateAtlasRectangles(MB3_TextureCombinerPipeline.TexturePipelineData data, bool doMultiAtlas, MB2_LogLevel LOG_LEVEL)
		{
			return null;
		}

		[Token(Token = "0x6000DF6")]
		[Address(RVA = "0xF3E278", Offset = "0xF3E278", VA = "0xF3E278", Slot = "6")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D9330", Offset = "0x5D9330")]
		public IEnumerator CreateAtlases(ProgressUpdateDelegate progressInfo, MB3_TextureCombinerPipeline.TexturePipelineData data, MB3_TextureCombiner combiner, AtlasPackingResult packedAtlasRects, Texture2D[] atlases, MB2_EditorMethodsInterface textureEditorMethods, MB2_LogLevel LOG_LEVEL)
		{
			return null;
		}

		[Token(Token = "0x6000DF7")]
		[Address(RVA = "0xF3E314", Offset = "0xF3E314", VA = "0xF3E314")]
		public MB3_TextureCombinerPackerOneTextureInAtlas()
		{
		}
	}
	[Token(Token = "0x200020C")]
	internal class MB3_TextureCombinerPackerUnity : MB3_TextureCombinerPackerRoot
	{
		[Token(Token = "0x2000433")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDFAC", Offset = "0x5CDFAC")]
		private sealed class <CreateAtlases>d__1 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001BB6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001BB7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001BB8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public AtlasPackingResult packedAtlasRects;

			[Token(Token = "0x4001BB9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public MB3_TextureCombinerPipeline.TexturePipelineData data;

			[Token(Token = "0x4001BBA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public MB2_LogLevel LOG_LEVEL;

			[Token(Token = "0x4001BBB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public MB3_TextureCombiner combiner;

			[Token(Token = "0x4001BBC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public ProgressUpdateDelegate progressInfo;

			[Token(Token = "0x4001BBD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public MB2_EditorMethodsInterface textureEditorMethods;

			[Token(Token = "0x4001BBE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public Texture2D[] atlases;

			[Token(Token = "0x170002ED")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001B3F")]
				[Address(RVA = "0xFE7DCC", Offset = "0xFE7DCC", VA = "0xFE7DCC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002EE")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001B41")]
				[Address(RVA = "0xFE7E14", Offset = "0xFE7E14", VA = "0xFE7E14", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001B3C")]
			[Address(RVA = "0xFE6D10", Offset = "0xFE6D10", VA = "0xFE6D10")]
			[DebuggerHidden]
			public <CreateAtlases>d__1(int <>1__state)
			{
			}

			[Token(Token = "0x6001B3D")]
			[Address(RVA = "0xFE6D3C", Offset = "0xFE6D3C", VA = "0xFE6D3C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001B3E")]
			[Address(RVA = "0xFE6D40", Offset = "0xFE6D40", VA = "0xFE6D40", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001B40")]
			[Address(RVA = "0xFE7DD4", Offset = "0xFE7DD4", VA = "0xFE7DD4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x6000DF8")]
		[Address(RVA = "0xF3E758", Offset = "0xF3E758", VA = "0xF3E758", Slot = "8")]
		public override AtlasPackingResult[] CalculateAtlasRectangles(MB3_TextureCombinerPipeline.TexturePipelineData data, bool doMultiAtlas, MB2_LogLevel LOG_LEVEL)
		{
			return null;
		}

		[Token(Token = "0x6000DF9")]
		[Address(RVA = "0xF3E85C", Offset = "0xF3E85C", VA = "0xF3E85C", Slot = "9")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D9390", Offset = "0x5D9390")]
		public override IEnumerator CreateAtlases(ProgressUpdateDelegate progressInfo, MB3_TextureCombinerPipeline.TexturePipelineData data, MB3_TextureCombiner combiner, AtlasPackingResult packedAtlasRects, Texture2D[] atlases, MB2_EditorMethodsInterface textureEditorMethods, MB2_LogLevel LOG_LEVEL)
		{
			return null;
		}

		[Token(Token = "0x6000DFA")]
		[Address(RVA = "0xF3E958", Offset = "0xF3E958", VA = "0xF3E958")]
		internal static Texture2D _copyTexturesIntoAtlas(Texture2D[] texToPack, int padding, Rect[] rs, int w, int h, MB3_TextureCombiner combiner)
		{
			return null;
		}

		[Token(Token = "0x6000DFB")]
		[Address(RVA = "0xF3EC70", Offset = "0xF3EC70", VA = "0xF3EC70")]
		internal static Texture2D GetAdjustedForScaleAndOffset2(string propertyName, MeshBakerMaterialTexture source, Vector2 obUVoffset, Vector2 obUVscale, MB3_TextureCombinerPipeline.TexturePipelineData data, MB3_TextureCombiner combiner, MB2_LogLevel LOG_LEVEL)
		{
			return null;
		}

		[Token(Token = "0x6000DFC")]
		[Address(RVA = "0xF3F558", Offset = "0xF3F558", VA = "0xF3F558")]
		public MB3_TextureCombinerPackerUnity()
		{
		}
	}
	[Token(Token = "0x200020D")]
	public class MB3_TextureCombinerPipeline
	{
		[Token(Token = "0x2000434")]
		public struct CreateAtlasForProperty
		{
			[Token(Token = "0x4001BBF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool allTexturesAreNull;

			[Token(Token = "0x4001BC0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
			public bool allTexturesAreSame;

			[Token(Token = "0x4001BC1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
			public bool allNonTexturePropsAreSame;

			[Token(Token = "0x6001B42")]
			[Address(RVA = "0xFEBD2C", Offset = "0xFEBD2C", VA = "0xFEBD2C", Slot = "3")]
			public override string ToString()
			{
				return null;
			}
		}

		[Token(Token = "0x2000435")]
		internal class TexturePipelineData
		{
			[Token(Token = "0x4001BC2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal MB2_TextureBakeResults _textureBakeResults;

			[Token(Token = "0x4001BC3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal int _atlasPadding;

			[Token(Token = "0x4001BC4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			internal int _maxAtlasWidth;

			[Token(Token = "0x4001BC5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal int _maxAtlasHeight;

			[Token(Token = "0x4001BC6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			internal bool _useMaxAtlasHeightOverride;

			[Token(Token = "0x4001BC7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
			internal bool _useMaxAtlasWidthOverride;

			[Token(Token = "0x4001BC8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
			internal bool _resizePowerOfTwoTextures;

			[Token(Token = "0x4001BC9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x27")]
			internal bool _fixOutOfBoundsUVs;

			[Token(Token = "0x4001BCA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal int _maxTilingBakeSize;

			[Token(Token = "0x4001BCB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			internal bool _saveAtlasesAsAssets;

			[Token(Token = "0x4001BCC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal MB2_PackingAlgorithmEnum _packingAlgorithm;

			[Token(Token = "0x4001BCD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			internal bool _meshBakerTexturePackerForcePowerOfTwo;

			[Token(Token = "0x4001BCE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			internal List<ShaderTextureProperty> _customShaderPropNames;

			[Token(Token = "0x4001BCF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			internal bool _normalizeTexelDensity;

			[Token(Token = "0x4001BD0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
			internal bool _considerNonTextureProperties;

			[Token(Token = "0x4001BD1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			internal MB3_TextureCombinerNonTextureProperties nonTexturePropertyBlender;

			[Token(Token = "0x4001BD2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			internal List<MB_TexSet> distinctMaterialTextures;

			[Token(Token = "0x4001BD3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			internal List<GameObject> allObjsToMesh;

			[Token(Token = "0x4001BD4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			internal List<Material> allowedMaterialsFilter;

			[Token(Token = "0x4001BD5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			internal List<ShaderTextureProperty> texPropertyNames;

			[Token(Token = "0x4001BD6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			internal CreateAtlasForProperty[] allTexturesAreNullAndSameColor;

			[Token(Token = "0x4001BD7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			internal Material resultMaterial;

			[Token(Token = "0x170002EF")]
			internal int numAtlases
			{
				[Token(Token = "0x6001B43")]
				[Address(RVA = "0xFE4C40", Offset = "0xFE4C40", VA = "0xFE4C40")]
				get
				{
					return default(int);
				}
			}

			[Token(Token = "0x6001B44")]
			[Address(RVA = "0xFEBDF4", Offset = "0xFEBDF4", VA = "0xFEBDF4")]
			internal bool OnlyOneTextureInAtlasReuseTextures()
			{
				return default(bool);
			}

			[Token(Token = "0x6001B45")]
			[Address(RVA = "0xFEBE84", Offset = "0xFEBE84", VA = "0xFEBE84")]
			public TexturePipelineData()
			{
			}
		}

		[Token(Token = "0x2000436")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDFBC", Offset = "0x5CDFBC")]
		private sealed class <>c__DisplayClass5_0
		{
			[Token(Token = "0x4001BD8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public TexturePipelineData data;

			[Token(Token = "0x4001BD9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int i;

			[Token(Token = "0x4001BDA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Predicate<ShaderTextureProperty> <>9__0;

			[Token(Token = "0x6001B46")]
			[Address(RVA = "0xFE7E1C", Offset = "0xFE7E1C", VA = "0xFE7E1C")]
			public <>c__DisplayClass5_0()
			{
			}

			[Token(Token = "0x6001B47")]
			[Address(RVA = "0xFE7E24", Offset = "0xFE7E24", VA = "0xFE7E24")]
			internal bool <_CollectPropertyNames>b__0(ShaderTextureProperty x)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x2000437")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDFCC", Offset = "0x5CDFCC")]
		private sealed class <>c__DisplayClass8_0
		{
			[Token(Token = "0x4001BDB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public TexturePipelineData data;

			[Token(Token = "0x6001B48")]
			[Address(RVA = "0xFE7EC0", Offset = "0xFE7EC0", VA = "0xFE7EC0")]
			public <>c__DisplayClass8_0()
			{
			}
		}

		[Token(Token = "0x2000438")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDFDC", Offset = "0x5CDFDC")]
		private sealed class <>c__DisplayClass8_1
		{
			[Token(Token = "0x4001BDC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public MB_TexSet setOfTexs;

			[Token(Token = "0x4001BDD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public <>c__DisplayClass8_0 CS$<>8__locals1;

			[Token(Token = "0x6001B49")]
			[Address(RVA = "0xFE7EC8", Offset = "0xFE7EC8", VA = "0xFE7EC8")]
			public <>c__DisplayClass8_1()
			{
			}

			[Token(Token = "0x6001B4A")]
			[Address(RVA = "0xFE7ED0", Offset = "0xFE7ED0", VA = "0xFE7ED0")]
			internal bool <__Step1_CollectDistinctMatTexturesAndUsedObjects>b__0(MB_TexSet x)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x2000439")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDFEC", Offset = "0x5CDFEC")]
		private sealed class <__Step1_CollectDistinctMatTexturesAndUsedObjects>d__8 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001BDE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001BDF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001BE0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TexturePipelineData data;

			[Token(Token = "0x4001BE1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public ProgressUpdateDelegate progressInfo;

			[Token(Token = "0x4001BE2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public MB2_LogLevel LOG_LEVEL;

			[Token(Token = "0x4001BE3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public MB3_TextureCombiner.CombineTexturesIntoAtlasesCoroutineResult result;

			[Token(Token = "0x4001BE4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public MB2_EditorMethodsInterface textureEditorMethods;

			[Token(Token = "0x4001BE5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public List<GameObject> usedObjsToMesh;

			[Token(Token = "0x170002F0")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001B4E")]
				[Address(RVA = "0xFEAE84", Offset = "0xFEAE84", VA = "0xFEAE84", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002F1")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001B50")]
				[Address(RVA = "0xFEAECC", Offset = "0xFEAECC", VA = "0xFEAECC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001B4B")]
			[Address(RVA = "0xFE9124", Offset = "0xFE9124", VA = "0xFE9124")]
			[DebuggerHidden]
			public <__Step1_CollectDistinctMatTexturesAndUsedObjects>d__8(int <>1__state)
			{
			}

			[Token(Token = "0x6001B4C")]
			[Address(RVA = "0xFE9150", Offset = "0xFE9150", VA = "0xFE9150", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001B4D")]
			[Address(RVA = "0xFE9154", Offset = "0xFE9154", VA = "0xFE9154", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001B4F")]
			[Address(RVA = "0xFEAE8C", Offset = "0xFEAE8C", VA = "0xFEAE8C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200043A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CDFFC", Offset = "0x5CDFFC")]
		private sealed class <CalculateIdealSizesForTexturesInAtlasAndPadding>d__10 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001BE6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001BE7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001BE8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TexturePipelineData data;

			[Token(Token = "0x4001BE9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public MB2_LogLevel LOG_LEVEL;

			[Token(Token = "0x170002F2")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001B54")]
				[Address(RVA = "0xFE90D4", Offset = "0xFE90D4", VA = "0xFE90D4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002F3")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001B56")]
				[Address(RVA = "0xFE911C", Offset = "0xFE911C", VA = "0xFE911C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001B51")]
			[Address(RVA = "0xFE7F10", Offset = "0xFE7F10", VA = "0xFE7F10")]
			[DebuggerHidden]
			public <CalculateIdealSizesForTexturesInAtlasAndPadding>d__10(int <>1__state)
			{
			}

			[Token(Token = "0x6001B52")]
			[Address(RVA = "0xFE7F3C", Offset = "0xFE7F3C", VA = "0xFE7F3C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001B53")]
			[Address(RVA = "0xFE7F40", Offset = "0xFE7F40", VA = "0xFE7F40", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001B55")]
			[Address(RVA = "0xFE90DC", Offset = "0xFE90DC", VA = "0xFE90DC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200043B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CE00C", Offset = "0x5CE00C")]
		private sealed class <__Step3_BuildAndSaveAtlasesAndStoreResults>d__13 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001BEA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001BEB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001BEC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TexturePipelineData data;

			[Token(Token = "0x4001BED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public MB2_LogLevel LOG_LEVEL;

			[Token(Token = "0x4001BEE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public MB_ITextureCombinerPacker packer;

			[Token(Token = "0x4001BEF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public ProgressUpdateDelegate progressInfo;

			[Token(Token = "0x4001BF0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public MB3_TextureCombiner combiner;

			[Token(Token = "0x4001BF1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public AtlasPackingResult atlasPackingResult;

			[Token(Token = "0x4001BF2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public MB2_EditorMethodsInterface textureEditorMethods;

			[Token(Token = "0x4001BF3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public StringBuilder report;

			[Token(Token = "0x4001BF4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public MB_AtlasesAndRects resultAtlasesAndRects;

			[Token(Token = "0x4001BF5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			private Stopwatch <sw>5__2;

			[Token(Token = "0x4001BF6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			private Texture2D[] <atlases>5__3;

			[Token(Token = "0x170002F4")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001B5A")]
				[Address(RVA = "0xFEBCDC", Offset = "0xFEBCDC", VA = "0xFEBCDC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002F5")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001B5C")]
				[Address(RVA = "0xFEBD24", Offset = "0xFEBD24", VA = "0xFEBD24", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001B57")]
			[Address(RVA = "0xFEAED4", Offset = "0xFEAED4", VA = "0xFEAED4")]
			[DebuggerHidden]
			public <__Step3_BuildAndSaveAtlasesAndStoreResults>d__13(int <>1__state)
			{
			}

			[Token(Token = "0x6001B58")]
			[Address(RVA = "0xFEAF00", Offset = "0xFEAF00", VA = "0xFEAF00", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001B59")]
			[Address(RVA = "0xFEAF04", Offset = "0xFEAF04", VA = "0xFEAF04", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001B5B")]
			[Address(RVA = "0xFEBCE4", Offset = "0xFEBCE4", VA = "0xFEBCE4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000F1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool USE_EXPERIMENTAL_HOIZONTALVERTICAL;

		[Token(Token = "0x4000F1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static ShaderTextureProperty[] shaderTexPropertyNames;

		[Token(Token = "0x6000DFD")]
		[Address(RVA = "0xF3F560", Offset = "0xF3F560", VA = "0xF3F560")]
		internal static bool _ShouldWeCreateAtlasForThisProperty(int propertyIndex, bool considerNonTextureProperties, CreateAtlasForProperty[] allTexturesAreNullAndSameColor)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DFE")]
		[Address(RVA = "0xF37894", Offset = "0xF37894", VA = "0xF37894")]
		internal static bool _CollectPropertyNames(TexturePipelineData data, MB2_LogLevel LOG_LEVEL)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DFF")]
		[Address(RVA = "0xF3F5C8", Offset = "0xF3F5C8", VA = "0xF3F5C8")]
		internal static bool _ShouldWeCreateAtlasForThisProperty(int propertyIndex, CreateAtlasForProperty[] allTexturesAreNullAndSameColor, TexturePipelineData data)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E00")]
		[Address(RVA = "0xF38134", Offset = "0xF38134", VA = "0xF38134")]
		public static Texture GetTextureConsideringStandardShaderKeywords(string shaderName, Material mat, string propertyName)
		{
			return null;
		}

		[Token(Token = "0x6000E01")]
		[Address(RVA = "0xF3F638", Offset = "0xF3F638", VA = "0xF3F638")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D93F0", Offset = "0x5D93F0")]
		internal static IEnumerator __Step1_CollectDistinctMatTexturesAndUsedObjects(ProgressUpdateDelegate progressInfo, MB3_TextureCombiner.CombineTexturesIntoAtlasesCoroutineResult result, TexturePipelineData data, MB3_TextureCombiner combiner, MB2_EditorMethodsInterface textureEditorMethods, List<GameObject> usedObjsToMesh, MB2_LogLevel LOG_LEVEL)
		{
			return null;
		}

		[Token(Token = "0x6000E02")]
		[Address(RVA = "0xF3F720", Offset = "0xF3F720", VA = "0xF3F720")]
		private static CreateAtlasForProperty[] CalculateAllTexturesAreNullAndSameColor(TexturePipelineData data, MB2_LogLevel LOG_LEVEL)
		{
			return null;
		}

		[Token(Token = "0x6000E03")]
		[Address(RVA = "0xF3FCB0", Offset = "0xF3FCB0", VA = "0xF3FCB0")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D9450", Offset = "0x5D9450")]
		internal static IEnumerator CalculateIdealSizesForTexturesInAtlasAndPadding(ProgressUpdateDelegate progressInfo, MB3_TextureCombiner.CombineTexturesIntoAtlasesCoroutineResult result, TexturePipelineData data, MB3_TextureCombiner combiner, MB2_EditorMethodsInterface textureEditorMethods, MB2_LogLevel LOG_LEVEL)
		{
			return null;
		}

		[Token(Token = "0x6000E04")]
		[Address(RVA = "0xF3FD38", Offset = "0xF3FD38", VA = "0xF3FD38")]
		internal static AtlasPackingResult[] __Step3_RunTexturePacker(TexturePipelineData data, MB_ITextureCombinerPacker texturePacker, MB2_LogLevel LOG_LEVEL)
		{
			return null;
		}

		[Token(Token = "0x6000E05")]
		[Address(RVA = "0xF3FF64", Offset = "0xF3FF64", VA = "0xF3FF64")]
		internal static MB_ITextureCombinerPacker CreatePacker(bool onlyOneTextureInAtlasReuseTextures, MB2_PackingAlgorithmEnum packingAlgorithm)
		{
			return null;
		}

		[Token(Token = "0x6000E06")]
		[Address(RVA = "0xF400FC", Offset = "0xF400FC", VA = "0xF400FC")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D94B0", Offset = "0x5D94B0")]
		internal static IEnumerator __Step3_BuildAndSaveAtlasesAndStoreResults(MB3_TextureCombiner.CombineTexturesIntoAtlasesCoroutineResult result, ProgressUpdateDelegate progressInfo, TexturePipelineData data, MB3_TextureCombiner combiner, MB_ITextureCombinerPacker packer, AtlasPackingResult atlasPackingResult, MB2_EditorMethodsInterface textureEditorMethods, MB_AtlasesAndRects resultAtlasesAndRects, StringBuilder report, MB2_LogLevel LOG_LEVEL)
		{
			return null;
		}

		[Token(Token = "0x6000E07")]
		[Address(RVA = "0xF40228", Offset = "0xF40228", VA = "0xF40228")]
		internal static StringBuilder GenerateReport(TexturePipelineData data)
		{
			return null;
		}

		[Token(Token = "0x6000E08")]
		[Address(RVA = "0xF3D60C", Offset = "0xF3D60C", VA = "0xF3D60C")]
		internal static MB2_TexturePacker CreateTexturePacker(MB2_PackingAlgorithmEnum _packingAlgorithm)
		{
			return null;
		}

		[Token(Token = "0x6000E09")]
		[Address(RVA = "0xF3F174", Offset = "0xF3F174", VA = "0xF3F174")]
		internal static Vector2 GetAdjustedForScaleAndOffset2Dimensions(MeshBakerMaterialTexture source, Vector2 obUVoffset, Vector2 obUVscale, TexturePipelineData data, MB2_LogLevel LOG_LEVEL)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000E0A")]
		[Address(RVA = "0xF40E20", Offset = "0xF40E20", VA = "0xF40E20")]
		internal static Color32 ConvertNormalFormatFromUnity_ToStandard(Color32 c)
		{
			return default(Color32);
		}

		[Token(Token = "0x6000E0B")]
		[Address(RVA = "0xF40EF8", Offset = "0xF40EF8", VA = "0xF40EF8")]
		internal static float GetSubmeshArea(Mesh m, int submeshIdx)
		{
			return default(float);
		}

		[Token(Token = "0x6000E0C")]
		[Address(RVA = "0xF41088", Offset = "0xF41088", VA = "0xF41088")]
		internal static bool IsPowerOfTwo(int x)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E0D")]
		[Address(RVA = "0xF41098", Offset = "0xF41098", VA = "0xF41098")]
		public MB3_TextureCombinerPipeline()
		{
		}
	}
}
namespace UnityStandardAssets.Water
{
	[Token(Token = "0x200020E")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x5CA530", Offset = "0x5CA530")]
	public class Displace : MonoBehaviour
	{
		[Token(Token = "0x6000E0F")]
		[Address(RVA = "0xCCD3F8", Offset = "0xCCD3F8", VA = "0xCCD3F8")]
		public void Awake()
		{
		}

		[Token(Token = "0x6000E10")]
		[Address(RVA = "0xCCD41C", Offset = "0xCCD41C", VA = "0xCCD41C")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x6000E11")]
		[Address(RVA = "0xCCD484", Offset = "0xCCD484", VA = "0xCCD484")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x6000E12")]
		[Address(RVA = "0xCCD4EC", Offset = "0xCCD4EC", VA = "0xCCD4EC")]
		public Displace()
		{
		}
	}
	[Token(Token = "0x200020F")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x5CA5A0", Offset = "0x5CA5A0")]
	public class GerstnerDisplace : Displace
	{
		[Token(Token = "0x6000E13")]
		[Address(RVA = "0x13EC390", Offset = "0x13EC390", VA = "0x13EC390")]
		public GerstnerDisplace()
		{
		}
	}
	[Token(Token = "0x2000210")]
	public class MeshContainer
	{
		[Token(Token = "0x4000F1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Mesh mesh;

		[Token(Token = "0x4000F20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3[] vertices;

		[Token(Token = "0x4000F21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3[] normals;

		[Token(Token = "0x6000E14")]
		[Address(RVA = "0xDED408", Offset = "0xDED408", VA = "0xDED408")]
		public MeshContainer(Mesh m)
		{
		}

		[Token(Token = "0x6000E15")]
		[Address(RVA = "0xDED47C", Offset = "0xDED47C", VA = "0xDED47C")]
		public void Update()
		{
		}
	}
	[Token(Token = "0x2000211")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x5CA610", Offset = "0x5CA610")]
	public class PlanarReflection : MonoBehaviour
	{
		[Token(Token = "0x4000F22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LayerMask reflectionMask;

		[Token(Token = "0x4000F23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool reflectSkybox;

		[Token(Token = "0x4000F24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Color clearColor;

		[Token(Token = "0x4000F25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string reflectionSampler;

		[Token(Token = "0x4000F26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float clipPlaneOffset;

		[Token(Token = "0x4000F27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Vector3 m_Oldpos;

		[Token(Token = "0x4000F28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Camera m_ReflectionCamera;

		[Token(Token = "0x4000F29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Material m_SharedMaterial;

		[Token(Token = "0x4000F2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Dictionary<Camera, bool> m_HelperCameras;

		[Token(Token = "0x6000E16")]
		[Address(RVA = "0x1203344", Offset = "0x1203344", VA = "0x1203344")]
		public void Start()
		{
		}

		[Token(Token = "0x6000E17")]
		[Address(RVA = "0x120344C", Offset = "0x120344C", VA = "0x120344C")]
		private Camera CreateReflectionCameraFor(Camera cam)
		{
			return null;
		}

		[Token(Token = "0x6000E18")]
		[Address(RVA = "0x12037A4", Offset = "0x12037A4", VA = "0x12037A4")]
		private void SetStandardCameraParameter(Camera cam, LayerMask mask)
		{
		}

		[Token(Token = "0x6000E19")]
		[Address(RVA = "0x1203854", Offset = "0x1203854", VA = "0x1203854")]
		private RenderTexture CreateTextureFor(Camera cam)
		{
			return null;
		}

		[Token(Token = "0x6000E1A")]
		[Address(RVA = "0x1203930", Offset = "0x1203930", VA = "0x1203930")]
		public void RenderHelpCameras(Camera currentCam)
		{
		}

		[Token(Token = "0x6000E1B")]
		[Address(RVA = "0x12041FC", Offset = "0x12041FC", VA = "0x12041FC")]
		public void LateUpdate()
		{
		}

		[Token(Token = "0x6000E1C")]
		[Address(RVA = "0x1204258", Offset = "0x1204258", VA = "0x1204258")]
		public void WaterTileBeingRendered(Transform tr, Camera currentCam)
		{
		}

		[Token(Token = "0x6000E1D")]
		[Address(RVA = "0x120434C", Offset = "0x120434C", VA = "0x120434C")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x6000E1E")]
		[Address(RVA = "0x12043B4", Offset = "0x12043B4", VA = "0x12043B4")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x6000E1F")]
		[Address(RVA = "0x1203AF4", Offset = "0x1203AF4", VA = "0x1203AF4")]
		private void RenderReflectionFor(Camera cam, Camera reflectCamera)
		{
		}

		[Token(Token = "0x6000E20")]
		[Address(RVA = "0x120441C", Offset = "0x120441C", VA = "0x120441C")]
		private void SaneCameraSettings(Camera helperCam)
		{
		}

		[Token(Token = "0x6000E21")]
		[Address(RVA = "0x1204864", Offset = "0x1204864", VA = "0x1204864")]
		private static Matrix4x4 CalculateObliqueMatrix(Matrix4x4 projection, Vector4 clipPlane)
		{
			return default(Matrix4x4);
		}

		[Token(Token = "0x6000E22")]
		[Address(RVA = "0x1204480", Offset = "0x1204480", VA = "0x1204480")]
		private static Matrix4x4 CalculateReflectionMatrix(Matrix4x4 reflectionMat, Vector4 plane)
		{
			return default(Matrix4x4);
		}

		[Token(Token = "0x6000E23")]
		[Address(RVA = "0x1204A28", Offset = "0x1204A28", VA = "0x1204A28")]
		private static float Sgn(float a)
		{
			return default(float);
		}

		[Token(Token = "0x6000E24")]
		[Address(RVA = "0x1204738", Offset = "0x1204738", VA = "0x1204738")]
		private Vector4 CameraSpacePlane(Camera cam, Vector3 pos, Vector3 normal, float sideSign)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6000E25")]
		[Address(RVA = "0x1204A48", Offset = "0x1204A48", VA = "0x1204A48")]
		public PlanarReflection()
		{
		}
	}
	[Token(Token = "0x2000212")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x5CA680", Offset = "0x5CA680")]
	[ExecuteInEditMode]
	public class SpecularLighting : MonoBehaviour
	{
		[Token(Token = "0x4000F2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform specularLight;

		[Token(Token = "0x4000F2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private WaterBase m_WaterBase;

		[Token(Token = "0x6000E26")]
		[Address(RVA = "0xA18A90", Offset = "0xA18A90", VA = "0xA18A90")]
		public void Start()
		{
		}

		[Token(Token = "0x6000E27")]
		[Address(RVA = "0xA18BA0", Offset = "0xA18BA0", VA = "0xA18BA0")]
		public void Update()
		{
		}

		[Token(Token = "0x6000E28")]
		[Address(RVA = "0xA18DC8", Offset = "0xA18DC8", VA = "0xA18DC8")]
		public SpecularLighting()
		{
		}
	}
	[Token(Token = "0x2000213")]
	[ExecuteInEditMode]
	public class Water : MonoBehaviour
	{
		[Token(Token = "0x200043C")]
		public enum WaterMode
		{
			[Token(Token = "0x4001BF8")]
			Simple,
			[Token(Token = "0x4001BF9")]
			Reflective,
			[Token(Token = "0x4001BFA")]
			Refractive
		}

		[Token(Token = "0x4000F2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public WaterMode waterMode;

		[Token(Token = "0x4000F2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool disablePixelLights;

		[Token(Token = "0x4000F2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int textureSize;

		[Token(Token = "0x4000F30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float clipPlaneOffset;

		[Token(Token = "0x4000F31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LayerMask reflectLayers;

		[Token(Token = "0x4000F32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public LayerMask refractLayers;

		[Token(Token = "0x4000F33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Dictionary<Camera, Camera> m_ReflectionCameras;

		[Token(Token = "0x4000F34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Dictionary<Camera, Camera> m_RefractionCameras;

		[Token(Token = "0x4000F35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private RenderTexture m_ReflectionTexture;

		[Token(Token = "0x4000F36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private RenderTexture m_RefractionTexture;

		[Token(Token = "0x4000F37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private WaterMode m_HardwareWaterSupport;

		[Token(Token = "0x4000F38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private int m_OldReflectionTextureSize;

		[Token(Token = "0x4000F39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int m_OldRefractionTextureSize;

		[Token(Token = "0x4000F3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool s_InsideWater;

		[Token(Token = "0x6000E29")]
		[Address(RVA = "0xD0F944", Offset = "0xD0F944", VA = "0xD0F944")]
		public void OnWillRenderObject()
		{
		}

		[Token(Token = "0x6000E2A")]
		[Address(RVA = "0xD1145C", Offset = "0xD1145C", VA = "0xD1145C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000E2B")]
		[Address(RVA = "0xD117F4", Offset = "0xD117F4", VA = "0xD117F4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E2C")]
		[Address(RVA = "0xD10E28", Offset = "0xD10E28", VA = "0xD10E28")]
		private void UpdateCameraModes(Camera src, Camera dest)
		{
		}

		[Token(Token = "0x6000E2D")]
		[Address(RVA = "0xD1047C", Offset = "0xD1047C", VA = "0xD1047C")]
		private void CreateWaterObjects(Camera currentCamera, out Camera reflectionCamera, out Camera refractionCamera)
		{
		}

		[Token(Token = "0x6000E2E")]
		[Address(RVA = "0xD10468", Offset = "0xD10468", VA = "0xD10468")]
		private WaterMode GetWaterMode()
		{
			return default(WaterMode);
		}

		[Token(Token = "0x6000E2F")]
		[Address(RVA = "0xD102F4", Offset = "0xD102F4", VA = "0xD102F4")]
		private WaterMode FindHardwareWaterSupport()
		{
			return default(WaterMode);
		}

		[Token(Token = "0x6000E30")]
		[Address(RVA = "0xD11330", Offset = "0xD11330", VA = "0xD11330")]
		private Vector4 CameraSpacePlane(Camera cam, Vector3 pos, Vector3 normal, float sideSign)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6000E31")]
		[Address(RVA = "0xD1108C", Offset = "0xD1108C", VA = "0xD1108C")]
		private static void CalculateReflectionMatrix(ref Matrix4x4 reflectionMat, Vector4 plane)
		{
		}

		[Token(Token = "0x6000E32")]
		[Address(RVA = "0xD11AC4", Offset = "0xD11AC4", VA = "0xD11AC4")]
		public Water()
		{
		}
	}
	[Token(Token = "0x2000214")]
	public enum WaterQuality
	{
		[Token(Token = "0x4000F3C")]
		High = 2,
		[Token(Token = "0x4000F3D")]
		Medium = 1,
		[Token(Token = "0x4000F3E")]
		Low = 0
	}
	[Token(Token = "0x2000215")]
	[ExecuteInEditMode]
	public class WaterBase : MonoBehaviour
	{
		[Token(Token = "0x4000F3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Material sharedMaterial;

		[Token(Token = "0x4000F40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public WaterQuality waterQuality;

		[Token(Token = "0x4000F41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool edgeBlend;

		[Token(Token = "0x6000E33")]
		[Address(RVA = "0xD11BC0", Offset = "0xD11BC0", VA = "0xD11BC0")]
		public void UpdateShader()
		{
		}

		[Token(Token = "0x6000E34")]
		[Address(RVA = "0xD11D54", Offset = "0xD11D54", VA = "0xD11D54")]
		public void WaterTileBeingRendered(Transform tr, Camera currentCam)
		{
		}

		[Token(Token = "0x6000E35")]
		[Address(RVA = "0xD11E04", Offset = "0xD11E04", VA = "0xD11E04")]
		public void Update()
		{
		}

		[Token(Token = "0x6000E36")]
		[Address(RVA = "0xD11E84", Offset = "0xD11E84", VA = "0xD11E84")]
		public WaterBase()
		{
		}
	}
	[Token(Token = "0x2000216")]
	[ExecuteInEditMode]
	public class WaterTile : MonoBehaviour
	{
		[Token(Token = "0x4000F42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PlanarReflection reflection;

		[Token(Token = "0x4000F43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public WaterBase waterBase;

		[Token(Token = "0x6000E37")]
		[Address(RVA = "0xD11E9C", Offset = "0xD11E9C", VA = "0xD11E9C")]
		public void Start()
		{
		}

		[Token(Token = "0x6000E38")]
		[Address(RVA = "0xD11EA0", Offset = "0xD11EA0", VA = "0xD11EA0")]
		private void AcquireComponents()
		{
		}

		[Token(Token = "0x6000E39")]
		[Address(RVA = "0xD12084", Offset = "0xD12084", VA = "0xD12084")]
		public void OnWillRenderObject()
		{
		}

		[Token(Token = "0x6000E3A")]
		[Address(RVA = "0xD12194", Offset = "0xD12194", VA = "0xD12194")]
		public WaterTile()
		{
		}
	}
}
namespace UnityStandardAssets.ImageEffects
{
	[Token(Token = "0x2000217")]
	public enum AAMode
	{
		[Token(Token = "0x4000F45")]
		FXAA2,
		[Token(Token = "0x4000F46")]
		FXAA3Console,
		[Token(Token = "0x4000F47")]
		FXAA1PresetA,
		[Token(Token = "0x4000F48")]
		FXAA1PresetB,
		[Token(Token = "0x4000F49")]
		NFAA,
		[Token(Token = "0x4000F4A")]
		SSAA,
		[Token(Token = "0x4000F4B")]
		DLAA
	}
	[Token(Token = "0x2000218")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x5CA720", Offset = "0x5CA720")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5CA720", Offset = "0x5CA720")]
	public class Antialiasing : PostEffectsBase
	{
		[Token(Token = "0x4000F4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AAMode mode;

		[Token(Token = "0x4000F4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool showGeneratedNormals;

		[Token(Token = "0x4000F4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float offsetScale;

		[Token(Token = "0x4000F4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float blurRadius;

		[Token(Token = "0x4000F50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float edgeThresholdMin;

		[Token(Token = "0x4000F51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float edgeThreshold;

		[Token(Token = "0x4000F52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float edgeSharpness;

		[Token(Token = "0x4000F53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public bool dlaaSharp;

		[Token(Token = "0x4000F54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader ssaaShader;

		[Token(Token = "0x4000F55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Material ssaa;

		[Token(Token = "0x4000F56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Shader dlaaShader;

		[Token(Token = "0x4000F57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material dlaa;

		[Token(Token = "0x4000F58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Shader nfaaShader;

		[Token(Token = "0x4000F59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Material nfaa;

		[Token(Token = "0x4000F5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Shader shaderFXAAPreset2;

		[Token(Token = "0x4000F5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Material materialFXAAPreset2;

		[Token(Token = "0x4000F5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Shader shaderFXAAPreset3;

		[Token(Token = "0x4000F5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Material materialFXAAPreset3;

		[Token(Token = "0x4000F5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Shader shaderFXAAII;

		[Token(Token = "0x4000F5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Material materialFXAAII;

		[Token(Token = "0x4000F60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Shader shaderFXAAIII;

		[Token(Token = "0x4000F61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Material materialFXAAIII;

		[Token(Token = "0x6000E3B")]
		[Address(RVA = "0xC0E1CC", Offset = "0xC0E1CC", VA = "0xC0E1CC")]
		public Material CurrentAAMaterial()
		{
			return null;
		}

		[Token(Token = "0x6000E3C")]
		[Address(RVA = "0xC0E230", Offset = "0xC0E230", VA = "0xC0E230", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E3D")]
		[Address(RVA = "0xC0E3A4", Offset = "0xC0E3A4", VA = "0xC0E3A4")]
		public void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000E3E")]
		[Address(RVA = "0xC0E930", Offset = "0xC0E930", VA = "0xC0E930")]
		public Antialiasing()
		{
		}
	}
	[Token(Token = "0x2000219")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x5CA7B4", Offset = "0x5CA7B4")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5CA7B4", Offset = "0x5CA7B4")]
	public class Bloom : PostEffectsBase
	{
		[Token(Token = "0x200043D")]
		public enum LensFlareStyle
		{
			[Token(Token = "0x4001BFC")]
			Ghosting,
			[Token(Token = "0x4001BFD")]
			Anamorphic,
			[Token(Token = "0x4001BFE")]
			Combined
		}

		[Token(Token = "0x200043E")]
		public enum TweakMode
		{
			[Token(Token = "0x4001C00")]
			Basic,
			[Token(Token = "0x4001C01")]
			Complex
		}

		[Token(Token = "0x200043F")]
		public enum HDRBloomMode
		{
			[Token(Token = "0x4001C03")]
			Auto,
			[Token(Token = "0x4001C04")]
			On,
			[Token(Token = "0x4001C05")]
			Off
		}

		[Token(Token = "0x2000440")]
		public enum BloomScreenBlendMode
		{
			[Token(Token = "0x4001C07")]
			Screen,
			[Token(Token = "0x4001C08")]
			Add
		}

		[Token(Token = "0x2000441")]
		public enum BloomQuality
		{
			[Token(Token = "0x4001C0A")]
			Cheap,
			[Token(Token = "0x4001C0B")]
			High
		}

		[Token(Token = "0x4000F62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TweakMode tweakMode;

		[Token(Token = "0x4000F63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public BloomScreenBlendMode screenBlendMode;

		[Token(Token = "0x4000F64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public HDRBloomMode hdr;

		[Token(Token = "0x4000F65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private bool doHdr;

		[Token(Token = "0x4000F66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float sepBlurSpread;

		[Token(Token = "0x4000F67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public BloomQuality quality;

		[Token(Token = "0x4000F68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float bloomIntensity;

		[Token(Token = "0x4000F69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float bloomThreshold;

		[Token(Token = "0x4000F6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Color bloomThresholdColor;

		[Token(Token = "0x4000F6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public int bloomBlurIterations;

		[Token(Token = "0x4000F6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public int hollywoodFlareBlurIterations;

		[Token(Token = "0x4000F6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float flareRotation;

		[Token(Token = "0x4000F6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public LensFlareStyle lensflareMode;

		[Token(Token = "0x4000F6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float hollyStretchWidth;

		[Token(Token = "0x4000F70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float lensflareIntensity;

		[Token(Token = "0x4000F71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float lensflareThreshold;

		[Token(Token = "0x4000F72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public float lensFlareSaturation;

		[Token(Token = "0x4000F73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Color flareColorA;

		[Token(Token = "0x4000F74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Color flareColorB;

		[Token(Token = "0x4000F75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Color flareColorC;

		[Token(Token = "0x4000F76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Color flareColorD;

		[Token(Token = "0x4000F77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Texture2D lensFlareVignetteMask;

		[Token(Token = "0x4000F78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public Shader lensFlareShader;

		[Token(Token = "0x4000F79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Material lensFlareMaterial;

		[Token(Token = "0x4000F7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Shader screenBlendShader;

		[Token(Token = "0x4000F7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Material screenBlend;

		[Token(Token = "0x4000F7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public Shader blurAndFlaresShader;

		[Token(Token = "0x4000F7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Material blurAndFlaresMaterial;

		[Token(Token = "0x4000F7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public Shader brightPassFilterShader;

		[Token(Token = "0x4000F7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Material brightPassFilterMaterial;

		[Token(Token = "0x6000E3F")]
		[Address(RVA = "0xC15204", Offset = "0xC15204", VA = "0xC15204", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E40")]
		[Address(RVA = "0xC152F4", Offset = "0xC152F4", VA = "0xC152F4")]
		public void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000E41")]
		[Address(RVA = "0xC167A4", Offset = "0xC167A4", VA = "0xC167A4")]
		private void AddTo(float intensity_, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x6000E42")]
		[Address(RVA = "0xC16524", Offset = "0xC16524", VA = "0xC16524")]
		private void BlendFlares(RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x6000E43")]
		[Address(RVA = "0xC16210", Offset = "0xC16210", VA = "0xC16210")]
		private void BrightFilter(float thresh, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x6000E44")]
		[Address(RVA = "0xC16124", Offset = "0xC16124", VA = "0xC16124")]
		private void BrightFilter(Color threshColor, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x6000E45")]
		[Address(RVA = "0xC16304", Offset = "0xC16304", VA = "0xC16304")]
		private void Vignette(float amount, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x6000E46")]
		[Address(RVA = "0xC16874", Offset = "0xC16874", VA = "0xC16874")]
		public Bloom()
		{
		}
	}
	[Token(Token = "0x200021A")]
	public enum LensflareStyle34
	{
		[Token(Token = "0x4000F81")]
		Ghosting,
		[Token(Token = "0x4000F82")]
		Anamorphic,
		[Token(Token = "0x4000F83")]
		Combined
	}
	[Token(Token = "0x200021B")]
	public enum TweakMode34
	{
		[Token(Token = "0x4000F85")]
		Basic,
		[Token(Token = "0x4000F86")]
		Complex
	}
	[Token(Token = "0x200021C")]
	public enum HDRBloomMode
	{
		[Token(Token = "0x4000F88")]
		Auto,
		[Token(Token = "0x4000F89")]
		On,
		[Token(Token = "0x4000F8A")]
		Off
	}
	[Token(Token = "0x200021D")]
	public enum BloomScreenBlendMode
	{
		[Token(Token = "0x4000F8C")]
		Screen,
		[Token(Token = "0x4000F8D")]
		Add
	}
	[Token(Token = "0x200021E")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x5CA848", Offset = "0x5CA848")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5CA848", Offset = "0x5CA848")]
	public class BloomAndFlares : PostEffectsBase
	{
		[Token(Token = "0x4000F8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TweakMode34 tweakMode;

		[Token(Token = "0x4000F8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public BloomScreenBlendMode screenBlendMode;

		[Token(Token = "0x4000F90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public HDRBloomMode hdr;

		[Token(Token = "0x4000F91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private bool doHdr;

		[Token(Token = "0x4000F92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float sepBlurSpread;

		[Token(Token = "0x4000F93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float useSrcAlphaAsMask;

		[Token(Token = "0x4000F94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float bloomIntensity;

		[Token(Token = "0x4000F95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float bloomThreshold;

		[Token(Token = "0x4000F96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public int bloomBlurIterations;

		[Token(Token = "0x4000F97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool lensflares;

		[Token(Token = "0x4000F98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int hollywoodFlareBlurIterations;

		[Token(Token = "0x4000F99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public LensflareStyle34 lensflareMode;

		[Token(Token = "0x4000F9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float hollyStretchWidth;

		[Token(Token = "0x4000F9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float lensflareIntensity;

		[Token(Token = "0x4000F9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float lensflareThreshold;

		[Token(Token = "0x4000F9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public Color flareColorA;

		[Token(Token = "0x4000F9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public Color flareColorB;

		[Token(Token = "0x4000F9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public Color flareColorC;

		[Token(Token = "0x4000FA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public Color flareColorD;

		[Token(Token = "0x4000FA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Texture2D lensFlareVignetteMask;

		[Token(Token = "0x4000FA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public Shader lensFlareShader;

		[Token(Token = "0x4000FA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Material lensFlareMaterial;

		[Token(Token = "0x4000FA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public Shader vignetteShader;

		[Token(Token = "0x4000FA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Material vignetteMaterial;

		[Token(Token = "0x4000FA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Shader separableBlurShader;

		[Token(Token = "0x4000FA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Material separableBlurMaterial;

		[Token(Token = "0x4000FA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public Shader addBrightStuffOneOneShader;

		[Token(Token = "0x4000FA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Material addBrightStuffBlendOneOneMaterial;

		[Token(Token = "0x4000FAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public Shader screenBlendShader;

		[Token(Token = "0x4000FAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Material screenBlend;

		[Token(Token = "0x4000FAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public Shader hollywoodFlaresShader;

		[Token(Token = "0x4000FAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Material hollywoodFlaresMaterial;

		[Token(Token = "0x4000FAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public Shader brightPassFilterShader;

		[Token(Token = "0x4000FAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private Material brightPassFilterMaterial;

		[Token(Token = "0x6000E47")]
		[Address(RVA = "0xC169B4", Offset = "0xC169B4", VA = "0xC169B4", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E48")]
		[Address(RVA = "0xC16B14", Offset = "0xC16B14", VA = "0xC16B14")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000E49")]
		[Address(RVA = "0xC17B80", Offset = "0xC17B80", VA = "0xC17B80")]
		private void AddTo(float intensity_, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x6000E4A")]
		[Address(RVA = "0xC17910", Offset = "0xC17910", VA = "0xC17910")]
		private void BlendFlares(RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x6000E4B")]
		[Address(RVA = "0xC17660", Offset = "0xC17660", VA = "0xC17660")]
		private void BrightFilter(float thresh, float useAlphaAsMask, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x6000E4C")]
		[Address(RVA = "0xC1779C", Offset = "0xC1779C", VA = "0xC1779C")]
		private void Vignette(float amount, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x6000E4D")]
		[Address(RVA = "0xC17C3C", Offset = "0xC17C3C", VA = "0xC17C3C")]
		public BloomAndFlares()
		{
		}
	}
	[Token(Token = "0x200021F")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x5CA8DC", Offset = "0x5CA8DC")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5CA8DC", Offset = "0x5CA8DC")]
	public class BloomOptimized : PostEffectsBase
	{
		[Token(Token = "0x2000442")]
		public enum Resolution
		{
			[Token(Token = "0x4001C0D")]
			Low,
			[Token(Token = "0x4001C0E")]
			High
		}

		[Token(Token = "0x2000443")]
		public enum BlurType
		{
			[Token(Token = "0x4001C10")]
			Standard,
			[Token(Token = "0x4001C11")]
			Sgx
		}

		[Token(Token = "0x4000FB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D1EC8", Offset = "0x5D1EC8")]
		public float threshold;

		[Token(Token = "0x4000FB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D1EE0", Offset = "0x5D1EE0")]
		public float intensity;

		[Token(Token = "0x4000FB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D1EF8", Offset = "0x5D1EF8")]
		public float blurSize;

		[Token(Token = "0x4000FB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Resolution resolution;

		[Token(Token = "0x4000FB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D1F10", Offset = "0x5D1F10")]
		public int blurIterations;

		[Token(Token = "0x4000FB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public BlurType blurType;

		[Token(Token = "0x4000FB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Shader fastBloomShader;

		[Token(Token = "0x4000FB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Material fastBloomMaterial;

		[Token(Token = "0x6000E4E")]
		[Address(RVA = "0x109F914", Offset = "0x109F914", VA = "0x109F914", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E4F")]
		[Address(RVA = "0x109F98C", Offset = "0x109F98C", VA = "0x109F98C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000E50")]
		[Address(RVA = "0x109FA38", Offset = "0x109FA38", VA = "0x109FA38")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000E51")]
		[Address(RVA = "0x109FE18", Offset = "0x109FE18", VA = "0x109FE18")]
		public BloomOptimized()
		{
		}
	}
	[Token(Token = "0x2000220")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5CA970", Offset = "0x5CA970")]
	public class Blur : MonoBehaviour
	{
		[Token(Token = "0x4000FB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D1F28", Offset = "0x5D1F28")]
		public int iterations;

		[Token(Token = "0x4000FB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D1F40", Offset = "0x5D1F40")]
		public float blurSpread;

		[Token(Token = "0x4000FBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Shader blurShader;

		[Token(Token = "0x4000FBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Material m_Material;

		[Token(Token = "0x170000C9")]
		protected Material material
		{
			[Token(Token = "0x6000E52")]
			[Address(RVA = "0x109FE3C", Offset = "0x109FE3C", VA = "0x109FE3C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E53")]
		[Address(RVA = "0x109FF90", Offset = "0x109FF90", VA = "0x109FF90")]
		protected void OnDisable()
		{
		}

		[Token(Token = "0x6000E54")]
		[Address(RVA = "0x10A0094", Offset = "0x10A0094", VA = "0x10A0094")]
		protected void Start()
		{
		}

		[Token(Token = "0x6000E55")]
		[Address(RVA = "0x10A0150", Offset = "0x10A0150", VA = "0x10A0150")]
		public void FourTapCone(RenderTexture source, RenderTexture dest, int iteration)
		{
		}

		[Token(Token = "0x6000E56")]
		[Address(RVA = "0x10A0274", Offset = "0x10A0274", VA = "0x10A0274")]
		private void DownSample4x(RenderTexture source, RenderTexture dest)
		{
		}

		[Token(Token = "0x6000E57")]
		[Address(RVA = "0x10A0384", Offset = "0x10A0384", VA = "0x10A0384")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000E58")]
		[Address(RVA = "0x10A04EC", Offset = "0x10A04EC", VA = "0x10A04EC")]
		public Blur()
		{
		}
	}
	[Token(Token = "0x2000221")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x5CA9BC", Offset = "0x5CA9BC")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5CA9BC", Offset = "0x5CA9BC")]
	public class BlurOptimized : PostEffectsBase
	{
		[Token(Token = "0x2000444")]
		public enum BlurType
		{
			[Token(Token = "0x4001C13")]
			StandardGauss,
			[Token(Token = "0x4001C14")]
			SgxGauss
		}

		[Token(Token = "0x4000FBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D1F58", Offset = "0x5D1F58")]
		public int downsample;

		[Token(Token = "0x4000FBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D1F70", Offset = "0x5D1F70")]
		public float blurSize;

		[Token(Token = "0x4000FBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D1F88", Offset = "0x5D1F88")]
		public int blurIterations;

		[Token(Token = "0x4000FBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public BlurType blurType;

		[Token(Token = "0x4000FC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Shader blurShader;

		[Token(Token = "0x4000FC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material blurMaterial;

		[Token(Token = "0x6000E5A")]
		[Address(RVA = "0x10A0508", Offset = "0x10A0508", VA = "0x10A0508", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E5B")]
		[Address(RVA = "0x10A0580", Offset = "0x10A0580", VA = "0x10A0580")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x6000E5C")]
		[Address(RVA = "0x10A062C", Offset = "0x10A062C", VA = "0x10A062C")]
		public void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000E5D")]
		[Address(RVA = "0x10A09D8", Offset = "0x10A09D8", VA = "0x10A09D8")]
		public BlurOptimized()
		{
		}
	}
	[Token(Token = "0x2000222")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x5CAA50", Offset = "0x5CAA50")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5CAA50", Offset = "0x5CAA50")]
	public class CameraMotionBlur : PostEffectsBase
	{
		[Token(Token = "0x2000445")]
		public enum MotionBlurFilter
		{
			[Token(Token = "0x4001C16")]
			CameraMotion,
			[Token(Token = "0x4001C17")]
			LocalBlur,
			[Token(Token = "0x4001C18")]
			Reconstruction,
			[Token(Token = "0x4001C19")]
			ReconstructionDX11,
			[Token(Token = "0x4001C1A")]
			ReconstructionDisc
		}

		[Token(Token = "0x4000FC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static float MAX_RADIUS;

		[Token(Token = "0x4000FC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public MotionBlurFilter filterType;

		[Token(Token = "0x4000FC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool preview;

		[Token(Token = "0x4000FC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 previewScale;

		[Token(Token = "0x4000FC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float movementScale;

		[Token(Token = "0x4000FC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float rotationScale;

		[Token(Token = "0x4000FC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float maxVelocity;

		[Token(Token = "0x4000FC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float minVelocity;

		[Token(Token = "0x4000FCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float velocityScale;

		[Token(Token = "0x4000FCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float softZDistance;

		[Token(Token = "0x4000FCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public int velocityDownsample;

		[Token(Token = "0x4000FCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public LayerMask excludeLayers;

		[Token(Token = "0x4000FCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GameObject tmpCam;

		[Token(Token = "0x4000FCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Shader shader;

		[Token(Token = "0x4000FD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Shader dx11MotionBlurShader;

		[Token(Token = "0x4000FD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Shader replacementClear;

		[Token(Token = "0x4000FD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Material motionBlurMaterial;

		[Token(Token = "0x4000FD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Material dx11MotionBlurMaterial;

		[Token(Token = "0x4000FD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Texture2D noiseTexture;

		[Token(Token = "0x4000FD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public float jitter;

		[Token(Token = "0x4000FD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public bool showVelocity;

		[Token(Token = "0x4000FD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public float showVelocityScale;

		[Token(Token = "0x4000FD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private Matrix4x4 currentViewProjMat;

		[Token(Token = "0x4000FD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Matrix4x4[] currentStereoViewProjMat;

		[Token(Token = "0x4000FDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Matrix4x4 prevViewProjMat;

		[Token(Token = "0x4000FDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private Matrix4x4[] prevStereoViewProjMat;

		[Token(Token = "0x4000FDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private int prevFrameCount;

		[Token(Token = "0x4000FDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		private bool wasActive;

		[Token(Token = "0x4000FDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private Vector3 prevFrameForward;

		[Token(Token = "0x4000FDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		private Vector3 prevFrameUp;

		[Token(Token = "0x4000FE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private Vector3 prevFramePos;

		[Token(Token = "0x4000FE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private Camera _camera;

		[Token(Token = "0x6000E5E")]
		[Address(RVA = "0x10A4D7C", Offset = "0x10A4D7C", VA = "0x10A4D7C")]
		private void CalculateViewProjection()
		{
		}

		[Token(Token = "0x6000E5F")]
		[Address(RVA = "0x10A4FD8", Offset = "0x10A4FD8", VA = "0x10A4FD8")]
		private new void Start()
		{
		}

		[Token(Token = "0x6000E60")]
		[Address(RVA = "0x10A5270", Offset = "0x10A5270", VA = "0x10A5270")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000E61")]
		[Address(RVA = "0x10A5344", Offset = "0x10A5344", VA = "0x10A5344")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000E62")]
		[Address(RVA = "0x10A54DC", Offset = "0x10A54DC", VA = "0x10A54DC", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E63")]
		[Address(RVA = "0x10A5594", Offset = "0x10A5594", VA = "0x10A5594")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000E64")]
		[Address(RVA = "0x10A5114", Offset = "0x10A5114", VA = "0x10A5114")]
		private void Remember()
		{
		}

		[Token(Token = "0x6000E65")]
		[Address(RVA = "0x10A6EB4", Offset = "0x10A6EB4", VA = "0x10A6EB4")]
		private Camera GetTmpCam()
		{
			return null;
		}

		[Token(Token = "0x6000E66")]
		[Address(RVA = "0x10A6E24", Offset = "0x10A6E24", VA = "0x10A6E24")]
		private void StartFrame()
		{
		}

		[Token(Token = "0x6000E67")]
		[Address(RVA = "0x10A6EA4", Offset = "0x10A6EA4", VA = "0x10A6EA4")]
		private static int divRoundUp(int x, int d)
		{
			return default(int);
		}

		[Token(Token = "0x6000E68")]
		[Address(RVA = "0x10A7268", Offset = "0x10A7268", VA = "0x10A7268")]
		public CameraMotionBlur()
		{
		}
	}
	[Token(Token = "0x2000223")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5CAAE4", Offset = "0x5CAAE4")]
	public class ColorCorrectionCurves : PostEffectsBase
	{
		[Token(Token = "0x2000446")]
		public enum ColorCorrectionMode
		{
			[Token(Token = "0x4001C1C")]
			Simple,
			[Token(Token = "0x4001C1D")]
			Advanced
		}

		[Token(Token = "0x4000FE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimationCurve redChannel;

		[Token(Token = "0x4000FE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimationCurve greenChannel;

		[Token(Token = "0x4000FE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AnimationCurve blueChannel;

		[Token(Token = "0x4000FE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool useDepthCorrection;

		[Token(Token = "0x4000FE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public AnimationCurve zCurve;

		[Token(Token = "0x4000FE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AnimationCurve depthRedChannel;

		[Token(Token = "0x4000FE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public AnimationCurve depthGreenChannel;

		[Token(Token = "0x4000FE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public AnimationCurve depthBlueChannel;

		[Token(Token = "0x4000FEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Material ccMaterial;

		[Token(Token = "0x4000FEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Material ccDepthMaterial;

		[Token(Token = "0x4000FEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Material selectiveCcMaterial;

		[Token(Token = "0x4000FED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Texture2D rgbChannelTex;

		[Token(Token = "0x4000FEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Texture2D rgbDepthChannelTex;

		[Token(Token = "0x4000FEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Texture2D zCurveTex;

		[Token(Token = "0x4000FF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public float saturation;

		[Token(Token = "0x4000FF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public bool selectiveCc;

		[Token(Token = "0x4000FF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Color selectiveFromColor;

		[Token(Token = "0x4000FF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public Color selectiveToColor;

		[Token(Token = "0x4000FF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public ColorCorrectionMode mode;

		[Token(Token = "0x4000FF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public bool updateTextures;

		[Token(Token = "0x4000FF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public Shader colorCorrectionCurvesShader;

		[Token(Token = "0x4000FF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Shader simpleColorCorrectionCurvesShader;

		[Token(Token = "0x4000FF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public Shader colorCorrectionSelectiveShader;

		[Token(Token = "0x4000FF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private bool updateTexturesOnStartup;

		[Token(Token = "0x6000E6A")]
		[Address(RVA = "0x10AB50C", Offset = "0x10AB50C", VA = "0x10AB50C")]
		private new void Start()
		{
		}

		[Token(Token = "0x6000E6B")]
		[Address(RVA = "0x10AB538", Offset = "0x10AB538", VA = "0x10AB538")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000E6C")]
		[Address(RVA = "0x10AB53C", Offset = "0x10AB53C", VA = "0x10AB53C", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E6D")]
		[Address(RVA = "0x10AB820", Offset = "0x10AB820", VA = "0x10AB820")]
		public void UpdateParameters()
		{
		}

		[Token(Token = "0x6000E6E")]
		[Address(RVA = "0x10ABBC4", Offset = "0x10ABBC4", VA = "0x10ABBC4")]
		private void UpdateTextures()
		{
		}

		[Token(Token = "0x6000E6F")]
		[Address(RVA = "0x10ABBC8", Offset = "0x10ABBC8", VA = "0x10ABBC8")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000E70")]
		[Address(RVA = "0x10ABF14", Offset = "0x10ABF14", VA = "0x10ABF14")]
		public ColorCorrectionCurves()
		{
		}
	}
	[Token(Token = "0x2000224")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5CAB30", Offset = "0x5CAB30")]
	public class ColorCorrectionLookup : PostEffectsBase
	{
		[Token(Token = "0x4000FFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Shader shader;

		[Token(Token = "0x4000FFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Material material;

		[Token(Token = "0x4000FFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Texture3D converted3DLut;

		[Token(Token = "0x4000FFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string basedOnTempTex;

		[Token(Token = "0x6000E71")]
		[Address(RVA = "0x10AC5A4", Offset = "0x10AC5A4", VA = "0x10AC5A4", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E72")]
		[Address(RVA = "0x10AC618", Offset = "0x10AC618", VA = "0x10AC618")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000E73")]
		[Address(RVA = "0x10AC6D4", Offset = "0x10AC6D4", VA = "0x10AC6D4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000E74")]
		[Address(RVA = "0x10AC780", Offset = "0x10AC780", VA = "0x10AC780")]
		public void SetIdentityLut()
		{
		}

		[Token(Token = "0x6000E75")]
		[Address(RVA = "0x10AC9B4", Offset = "0x10AC9B4", VA = "0x10AC9B4")]
		public bool ValidDimensions(Texture2D tex2d)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E76")]
		[Address(RVA = "0x10ACA7C", Offset = "0x10ACA7C", VA = "0x10ACA7C")]
		public void Convert(Texture2D temp2DTex, string path)
		{
		}

		[Token(Token = "0x6000E77")]
		[Address(RVA = "0x10ACE00", Offset = "0x10ACE00", VA = "0x10ACE00")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000E78")]
		[Address(RVA = "0x10AD018", Offset = "0x10AD018", VA = "0x10AD018")]
		public ColorCorrectionLookup()
		{
		}
	}
	[Token(Token = "0x2000225")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5CAB7C", Offset = "0x5CAB7C")]
	public class ColorCorrectionRamp : ImageEffectBase
	{
		[Token(Token = "0x4000FFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Texture textureRamp;

		[Token(Token = "0x6000E79")]
		[Address(RVA = "0x10AD074", Offset = "0x10AD074", VA = "0x10AD074")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000E7A")]
		[Address(RVA = "0x10AD13C", Offset = "0x10AD13C", VA = "0x10AD13C")]
		public ColorCorrectionRamp()
		{
		}
	}
	[Token(Token = "0x2000226")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x5CABC8", Offset = "0x5CABC8")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5CABC8", Offset = "0x5CABC8")]
	public class ContrastEnhance : PostEffectsBase
	{
		[Token(Token = "0x4000FFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D1FA0", Offset = "0x5D1FA0")]
		public float intensity;

		[Token(Token = "0x4001000")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D1FB8", Offset = "0x5D1FB8")]
		public float threshold;

		[Token(Token = "0x4001001")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Material separableBlurMaterial;

		[Token(Token = "0x4001002")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Material contrastCompositeMaterial;

		[Token(Token = "0x4001003")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D1FD4", Offset = "0x5D1FD4")]
		public float blurSpread;

		[Token(Token = "0x4001004")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader separableBlurShader;

		[Token(Token = "0x4001005")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Shader contrastCompositeShader;

		[Token(Token = "0x6000E7B")]
		[Address(RVA = "0x10AD7A0", Offset = "0x10AD7A0", VA = "0x10AD7A0", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E7C")]
		[Address(RVA = "0x10AD840", Offset = "0x10AD840", VA = "0x10AD840")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000E7D")]
		[Address(RVA = "0x10ADBD4", Offset = "0x10ADBD4", VA = "0x10ADBD4")]
		public ContrastEnhance()
		{
		}
	}
	[Token(Token = "0x2000227")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5CAC5C", Offset = "0x5CAC5C")]
	public class ContrastStretch : MonoBehaviour
	{
		[Token(Token = "0x4001006")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D1FEC", Offset = "0x5D1FEC")]
		public float adaptationSpeed;

		[Token(Token = "0x4001007")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D2008", Offset = "0x5D2008")]
		public float limitMinimum;

		[Token(Token = "0x4001008")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D2020", Offset = "0x5D2020")]
		public float limitMaximum;

		[Token(Token = "0x4001009")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private RenderTexture[] adaptRenderTex;

		[Token(Token = "0x400100A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int curAdaptIndex;

		[Token(Token = "0x400100B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Shader shaderLum;

		[Token(Token = "0x400100C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material m_materialLum;

		[Token(Token = "0x400100D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader shaderReduce;

		[Token(Token = "0x400100E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Material m_materialReduce;

		[Token(Token = "0x400100F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Shader shaderAdapt;

		[Token(Token = "0x4001010")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material m_materialAdapt;

		[Token(Token = "0x4001011")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Shader shaderApply;

		[Token(Token = "0x4001012")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Material m_materialApply;

		[Token(Token = "0x170000CA")]
		protected Material materialLum
		{
			[Token(Token = "0x6000E7E")]
			[Address(RVA = "0x10ADBEC", Offset = "0x10ADBEC", VA = "0x10ADBEC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000CB")]
		protected Material materialReduce
		{
			[Token(Token = "0x6000E7F")]
			[Address(RVA = "0x10ADCC8", Offset = "0x10ADCC8", VA = "0x10ADCC8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000CC")]
		protected Material materialAdapt
		{
			[Token(Token = "0x6000E80")]
			[Address(RVA = "0x10ADDA4", Offset = "0x10ADDA4", VA = "0x10ADDA4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000CD")]
		protected Material materialApply
		{
			[Token(Token = "0x6000E81")]
			[Address(RVA = "0x10ADE80", Offset = "0x10ADE80", VA = "0x10ADE80")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E82")]
		[Address(RVA = "0x10ADF5C", Offset = "0x10ADF5C", VA = "0x10ADF5C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E83")]
		[Address(RVA = "0x10ADFF0", Offset = "0x10ADFF0", VA = "0x10ADFF0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000E84")]
		[Address(RVA = "0x10AE150", Offset = "0x10AE150", VA = "0x10AE150")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000E85")]
		[Address(RVA = "0x10AE37C", Offset = "0x10AE37C", VA = "0x10AE37C")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000E86")]
		[Address(RVA = "0x10AE5E0", Offset = "0x10AE5E0", VA = "0x10AE5E0")]
		private void CalculateAdaptation(Texture curTexture)
		{
		}

		[Token(Token = "0x6000E87")]
		[Address(RVA = "0x10AE7DC", Offset = "0x10AE7DC", VA = "0x10AE7DC")]
		public ContrastStretch()
		{
		}
	}
	[Token(Token = "0x2000228")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x5CACA8", Offset = "0x5CACA8")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5CACA8", Offset = "0x5CACA8")]
	public class CreaseShading : PostEffectsBase
	{
		[Token(Token = "0x4001013")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float intensity;

		[Token(Token = "0x4001014")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int softness;

		[Token(Token = "0x4001015")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float spread;

		[Token(Token = "0x4001016")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Shader blurShader;

		[Token(Token = "0x4001017")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material blurMaterial;

		[Token(Token = "0x4001018")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader depthFetchShader;

		[Token(Token = "0x4001019")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Material depthFetchMaterial;

		[Token(Token = "0x400101A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Shader creaseApplyShader;

		[Token(Token = "0x400101B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material creaseApplyMaterial;

		[Token(Token = "0x6000E88")]
		[Address(RVA = "0xCC1388", Offset = "0xCC1388", VA = "0xCC1388", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E89")]
		[Address(RVA = "0xCC1458", Offset = "0xCC1458", VA = "0xCC1458")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000E8A")]
		[Address(RVA = "0xCC182C", Offset = "0xCC182C", VA = "0xCC182C")]
		public CreaseShading()
		{
		}
	}
	[Token(Token = "0x2000229")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x5CAD3C", Offset = "0x5CAD3C")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5CAD3C", Offset = "0x5CAD3C")]
	public class DepthOfField : PostEffectsBase
	{
		[Token(Token = "0x2000447")]
		public enum BlurType
		{
			[Token(Token = "0x4001C1F")]
			DiscBlur,
			[Token(Token = "0x4001C20")]
			DX11
		}

		[Token(Token = "0x2000448")]
		public enum BlurSampleCount
		{
			[Token(Token = "0x4001C22")]
			Low,
			[Token(Token = "0x4001C23")]
			Medium,
			[Token(Token = "0x4001C24")]
			High
		}

		[Token(Token = "0x400101C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool visualizeFocus;

		[Token(Token = "0x400101D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float focalLength;

		[Token(Token = "0x400101E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float focalSize;

		[Token(Token = "0x400101F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float aperture;

		[Token(Token = "0x4001020")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform focalTransform;

		[Token(Token = "0x4001021")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float maxBlurSize;

		[Token(Token = "0x4001022")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public bool highResolution;

		[Token(Token = "0x4001023")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public BlurType blurType;

		[Token(Token = "0x4001024")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public BlurSampleCount blurSampleCount;

		[Token(Token = "0x4001025")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool nearBlur;

		[Token(Token = "0x4001026")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float foregroundOverlap;

		[Token(Token = "0x4001027")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Shader dofHdrShader;

		[Token(Token = "0x4001028")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material dofHdrMaterial;

		[Token(Token = "0x4001029")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Shader dx11BokehShader;

		[Token(Token = "0x400102A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Material dx11bokehMaterial;

		[Token(Token = "0x400102B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float dx11BokehThreshold;

		[Token(Token = "0x400102C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float dx11SpawnHeuristic;

		[Token(Token = "0x400102D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Texture2D dx11BokehTexture;

		[Token(Token = "0x400102E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float dx11BokehScale;

		[Token(Token = "0x400102F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float dx11BokehIntensity;

		[Token(Token = "0x4001030")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float focalDistance01;

		[Token(Token = "0x4001031")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private ComputeBuffer cbDrawArgs;

		[Token(Token = "0x4001032")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private ComputeBuffer cbPoints;

		[Token(Token = "0x4001033")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private float internalBlurWidth;

		[Token(Token = "0x4001034")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Camera cachedCamera;

		[Token(Token = "0x6000E8B")]
		[Address(RVA = "0xCC83E8", Offset = "0xCC83E8", VA = "0xCC83E8", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E8C")]
		[Address(RVA = "0xCC85F8", Offset = "0xCC85F8", VA = "0xCC85F8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000E8D")]
		[Address(RVA = "0xCC867C", Offset = "0xCC867C", VA = "0xCC867C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000E8E")]
		[Address(RVA = "0xCC8798", Offset = "0xCC8798", VA = "0xCC8798")]
		private void ReleaseComputeResources()
		{
		}

		[Token(Token = "0x6000E8F")]
		[Address(RVA = "0xCC84A4", Offset = "0xCC84A4", VA = "0xCC84A4")]
		private void CreateComputeResources()
		{
		}

		[Token(Token = "0x6000E90")]
		[Address(RVA = "0xCC87F4", Offset = "0xCC87F4", VA = "0xCC87F4")]
		private float FocalDistance01(float worldDist)
		{
			return default(float);
		}

		[Token(Token = "0x6000E91")]
		[Address(RVA = "0xCC88E4", Offset = "0xCC88E4", VA = "0xCC88E4")]
		private void WriteCoc(RenderTexture fromTo, bool fgDilate)
		{
		}

		[Token(Token = "0x6000E92")]
		[Address(RVA = "0xCC8C18", Offset = "0xCC8C18", VA = "0xCC8C18")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000E93")]
		[Address(RVA = "0xCCA238", Offset = "0xCCA238", VA = "0xCCA238")]
		public DepthOfField()
		{
		}
	}
	[Token(Token = "0x200022A")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x5CADD0", Offset = "0x5CADD0")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5CADD0", Offset = "0x5CADD0")]
	public class DepthOfFieldDeprecated : PostEffectsBase
	{
		[Token(Token = "0x2000449")]
		public enum Dof34QualitySetting
		{
			[Token(Token = "0x4001C26")]
			OnlyBackground = 1,
			[Token(Token = "0x4001C27")]
			BackgroundAndForeground
		}

		[Token(Token = "0x200044A")]
		public enum DofResolution
		{
			[Token(Token = "0x4001C29")]
			High = 2,
			[Token(Token = "0x4001C2A")]
			Medium,
			[Token(Token = "0x4001C2B")]
			Low
		}

		[Token(Token = "0x200044B")]
		public enum DofBlurriness
		{
			[Token(Token = "0x4001C2D")]
			Low = 1,
			[Token(Token = "0x4001C2E")]
			High = 2,
			[Token(Token = "0x4001C2F")]
			VeryHigh = 4
		}

		[Token(Token = "0x200044C")]
		public enum BokehDestination
		{
			[Token(Token = "0x4001C31")]
			Background = 1,
			[Token(Token = "0x4001C32")]
			Foreground,
			[Token(Token = "0x4001C33")]
			BackgroundAndForeground
		}

		[Token(Token = "0x4001035")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int SMOOTH_DOWNSAMPLE_PASS;

		[Token(Token = "0x4001036")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static float BOKEH_EXTRA_BLUR;

		[Token(Token = "0x4001037")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Dof34QualitySetting quality;

		[Token(Token = "0x4001038")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public DofResolution resolution;

		[Token(Token = "0x4001039")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool simpleTweakMode;

		[Token(Token = "0x400103A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float focalPoint;

		[Token(Token = "0x400103B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float smoothness;

		[Token(Token = "0x400103C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float focalZDistance;

		[Token(Token = "0x400103D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float focalZStartCurve;

		[Token(Token = "0x400103E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float focalZEndCurve;

		[Token(Token = "0x400103F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float focalStartCurve;

		[Token(Token = "0x4001040")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float focalEndCurve;

		[Token(Token = "0x4001041")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float focalDistance01;

		[Token(Token = "0x4001042")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform objectFocus;

		[Token(Token = "0x4001043")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float focalSize;

		[Token(Token = "0x4001044")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public DofBlurriness bluriness;

		[Token(Token = "0x4001045")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float maxBlurSpread;

		[Token(Token = "0x4001046")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float foregroundBlurExtrude;

		[Token(Token = "0x4001047")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Shader dofBlurShader;

		[Token(Token = "0x4001048")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Material dofBlurMaterial;

		[Token(Token = "0x4001049")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Shader dofShader;

		[Token(Token = "0x400104A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Material dofMaterial;

		[Token(Token = "0x400104B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public bool visualize;

		[Token(Token = "0x400104C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public BokehDestination bokehDestination;

		[Token(Token = "0x400104D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float widthOverHeight;

		[Token(Token = "0x400104E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private float oneOverBaseSize;

		[Token(Token = "0x400104F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public bool bokeh;

		[Token(Token = "0x4001050")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA1")]
		public bool bokehSupport;

		[Token(Token = "0x4001051")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Shader bokehShader;

		[Token(Token = "0x4001052")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public Texture2D bokehTexture;

		[Token(Token = "0x4001053")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public float bokehScale;

		[Token(Token = "0x4001054")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public float bokehIntensity;

		[Token(Token = "0x4001055")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public float bokehThresholdContrast;

		[Token(Token = "0x4001056")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public float bokehThresholdLuminance;

		[Token(Token = "0x4001057")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public int bokehDownsample;

		[Token(Token = "0x4001058")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Material bokehMaterial;

		[Token(Token = "0x4001059")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Camera _camera;

		[Token(Token = "0x400105A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private RenderTexture foregroundTexture;

		[Token(Token = "0x400105B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private RenderTexture mediumRezWorkTexture;

		[Token(Token = "0x400105C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private RenderTexture finalDefocus;

		[Token(Token = "0x400105D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private RenderTexture lowRezWorkTexture;

		[Token(Token = "0x400105E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private RenderTexture bokehSource;

		[Token(Token = "0x400105F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private RenderTexture bokehSource2;

		[Token(Token = "0x6000E94")]
		[Address(RVA = "0xCCA290", Offset = "0xCCA290", VA = "0xCCA290")]
		private void CreateMaterials()
		{
		}

		[Token(Token = "0x6000E95")]
		[Address(RVA = "0xCCA3A8", Offset = "0xCCA3A8", VA = "0xCCA3A8", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E96")]
		[Address(RVA = "0xCCA4F0", Offset = "0xCCA4F0", VA = "0xCCA4F0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000E97")]
		[Address(RVA = "0xCCA54C", Offset = "0xCCA54C", VA = "0xCCA54C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000E98")]
		[Address(RVA = "0xCCA5D0", Offset = "0xCCA5D0", VA = "0xCCA5D0")]
		private float FocalDistance01(float worldDist)
		{
			return default(float);
		}

		[Token(Token = "0x6000E99")]
		[Address(RVA = "0xCCA6C0", Offset = "0xCCA6C0", VA = "0xCCA6C0")]
		private int GetDividerBasedOnQuality()
		{
			return default(int);
		}

		[Token(Token = "0x6000E9A")]
		[Address(RVA = "0xCCA6E4", Offset = "0xCCA6E4", VA = "0xCCA6E4")]
		private int GetLowResolutionDividerBasedOnQuality(int baseDivider)
		{
			return default(int);
		}

		[Token(Token = "0x6000E9B")]
		[Address(RVA = "0xCCA708", Offset = "0xCCA708", VA = "0xCCA708")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000E9C")]
		[Address(RVA = "0xCCB5E0", Offset = "0xCCB5E0", VA = "0xCCB5E0")]
		private void Blur(RenderTexture from, RenderTexture to, DofBlurriness iterations, int blurPass, float spread)
		{
		}

		[Token(Token = "0x6000E9D")]
		[Address(RVA = "0xCCBCD4", Offset = "0xCCBCD4", VA = "0xCCBCD4")]
		private void BlurFg(RenderTexture from, RenderTexture to, DofBlurriness iterations, int blurPass, float spread)
		{
		}

		[Token(Token = "0x6000E9E")]
		[Address(RVA = "0xCCC14C", Offset = "0xCCC14C", VA = "0xCCC14C")]
		private void BlurHex(RenderTexture from, RenderTexture to, int blurPass, float spread, RenderTexture tmp)
		{
		}

		[Token(Token = "0x6000E9F")]
		[Address(RVA = "0xCCB480", Offset = "0xCCB480", VA = "0xCCB480")]
		private void Downsample(RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x6000EA0")]
		[Address(RVA = "0xCCB884", Offset = "0xCCB884", VA = "0xCCB884")]
		private void AddBokeh(RenderTexture bokehInfo, RenderTexture tempTex, RenderTexture finalTarget)
		{
		}

		[Token(Token = "0x6000EA1")]
		[Address(RVA = "0xCCBFA4", Offset = "0xCCBFA4", VA = "0xCCBFA4")]
		private void ReleaseTextures()
		{
		}

		[Token(Token = "0x6000EA2")]
		[Address(RVA = "0xCCB0B4", Offset = "0xCCB0B4", VA = "0xCCB0B4")]
		private void AllocateTextures(bool blurForeground, RenderTexture source, int divider, int lowTexDivider)
		{
		}

		[Token(Token = "0x6000EA3")]
		[Address(RVA = "0xCCC37C", Offset = "0xCCC37C", VA = "0xCCC37C")]
		public DepthOfFieldDeprecated()
		{
		}
	}
	[Token(Token = "0x200022B")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x5CAE64", Offset = "0x5CAE64")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5CAE64", Offset = "0x5CAE64")]
	public class EdgeDetection : PostEffectsBase
	{
		[Token(Token = "0x200044D")]
		public enum EdgeDetectMode
		{
			[Token(Token = "0x4001C35")]
			TriangleDepthNormals,
			[Token(Token = "0x4001C36")]
			RobertsCrossDepthNormals,
			[Token(Token = "0x4001C37")]
			SobelDepth,
			[Token(Token = "0x4001C38")]
			SobelDepthThin,
			[Token(Token = "0x4001C39")]
			TriangleLuminance
		}

		[Token(Token = "0x4001060")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public EdgeDetectMode mode;

		[Token(Token = "0x4001061")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float sensitivityDepth;

		[Token(Token = "0x4001062")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float sensitivityNormals;

		[Token(Token = "0x4001063")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float lumThreshold;

		[Token(Token = "0x4001064")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float edgeExp;

		[Token(Token = "0x4001065")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float sampleDist;

		[Token(Token = "0x4001066")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float edgesOnly;

		[Token(Token = "0x4001067")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Color edgesOnlyBgColor;

		[Token(Token = "0x4001068")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Shader edgeDetectShader;

		[Token(Token = "0x4001069")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material edgeDetectMaterial;

		[Token(Token = "0x400106A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private EdgeDetectMode oldMode;

		[Token(Token = "0x6000EA5")]
		[Address(RVA = "0x9F8414", Offset = "0x9F8414", VA = "0x9F8414", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000EA6")]
		[Address(RVA = "0x9F8568", Offset = "0x9F8568", VA = "0x9F8568")]
		private new void Start()
		{
		}

		[Token(Token = "0x6000EA7")]
		[Address(RVA = "0x9F84AC", Offset = "0x9F84AC", VA = "0x9F84AC")]
		private void SetCameraFlag()
		{
		}

		[Token(Token = "0x6000EA8")]
		[Address(RVA = "0x9F8574", Offset = "0x9F8574", VA = "0x9F8574")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000EA9")]
		[Address(RVA = "0x9F8578", Offset = "0x9F8578", VA = "0x9F8578")]
		[ImageEffectOpaque]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000EAA")]
		[Address(RVA = "0x9F87A0", Offset = "0x9F87A0", VA = "0x9F87A0")]
		public EdgeDetection()
		{
		}
	}
	[Token(Token = "0x200022C")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x5CAEF8", Offset = "0x5CAEF8")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5CAEF8", Offset = "0x5CAEF8")]
	public class Fisheye : PostEffectsBase
	{
		[Token(Token = "0x400106B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D2038", Offset = "0x5D2038")]
		public float strengthX;

		[Token(Token = "0x400106C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D2050", Offset = "0x5D2050")]
		public float strengthY;

		[Token(Token = "0x400106D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Shader fishEyeShader;

		[Token(Token = "0x400106E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Material fisheyeMaterial;

		[Token(Token = "0x6000EAB")]
		[Address(RVA = "0xBFB194", Offset = "0xBFB194", VA = "0xBFB194", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000EAC")]
		[Address(RVA = "0xBFB20C", Offset = "0xBFB20C", VA = "0xBFB20C")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000EAD")]
		[Address(RVA = "0xBFB384", Offset = "0xBFB384", VA = "0xBFB384")]
		public Fisheye()
		{
		}
	}
	[Token(Token = "0x200022D")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x5CAF8C", Offset = "0x5CAF8C")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5CAF8C", Offset = "0x5CAF8C")]
	internal class GlobalFog : PostEffectsBase
	{
		[Token(Token = "0x400106F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5D2068", Offset = "0x5D2068")]
		public bool distanceFog;

		[Token(Token = "0x4001070")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5D20A0", Offset = "0x5D20A0")]
		public bool excludeFarPixels;

		[Token(Token = "0x4001071")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5D20D8", Offset = "0x5D20D8")]
		public bool useRadialDistance;

		[Token(Token = "0x4001072")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5D2110", Offset = "0x5D2110")]
		public bool heightFog;

		[Token(Token = "0x4001073")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5D2148", Offset = "0x5D2148")]
		public float height;

		[Token(Token = "0x4001074")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D2180", Offset = "0x5D2180")]
		public float heightDensity;

		[Token(Token = "0x4001075")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5D219C", Offset = "0x5D219C")]
		public float startDistance;

		[Token(Token = "0x4001076")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Shader fogShader;

		[Token(Token = "0x4001077")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material fogMaterial;

		[Token(Token = "0x6000EAE")]
		[Address(RVA = "0x13EC84C", Offset = "0x13EC84C", VA = "0x13EC84C", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000EAF")]
		[Address(RVA = "0x13EC8CC", Offset = "0x13EC8CC", VA = "0x13EC8CC")]
		[ImageEffectOpaque]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000EB0")]
		[Address(RVA = "0x13ECEC8", Offset = "0x13ECEC8", VA = "0x13ECEC8")]
		public GlobalFog()
		{
		}
	}
	[Token(Token = "0x200022E")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5CB020", Offset = "0x5CB020")]
	public class Grayscale : ImageEffectBase
	{
		[Token(Token = "0x4001078")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Texture textureRamp;

		[Token(Token = "0x4001079")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D21D4", Offset = "0x5D21D4")]
		public float rampOffset;

		[Token(Token = "0x6000EB1")]
		[Address(RVA = "0x13FC748", Offset = "0x13FC748", VA = "0x13FC748")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000EB2")]
		[Address(RVA = "0x13FC844", Offset = "0x13FC844", VA = "0x13FC844")]
		public Grayscale()
		{
		}
	}
	[Token(Token = "0x200022F")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x5CB06C", Offset = "0x5CB06C")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5CB06C", Offset = "0x5CB06C")]
	public class ImageEffectBase : MonoBehaviour
	{
		[Token(Token = "0x400107A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Shader shader;

		[Token(Token = "0x400107B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Material m_Material;

		[Token(Token = "0x170000CE")]
		protected Material material
		{
			[Token(Token = "0x6000EB4")]
			[Address(RVA = "0xA51180", Offset = "0xA51180", VA = "0xA51180")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000EB3")]
		[Address(RVA = "0xA510D4", Offset = "0xA510D4", VA = "0xA510D4", Slot = "4")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000EB5")]
		[Address(RVA = "0xA5125C", Offset = "0xA5125C", VA = "0xA5125C", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6000EB6")]
		[Address(RVA = "0xA51308", Offset = "0xA51308", VA = "0xA51308")]
		public ImageEffectBase()
		{
		}
	}
	[Token(Token = "0x2000230")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5CB0F0", Offset = "0x5CB0F0")]
	public class ImageEffects
	{
		[Token(Token = "0x6000EB7")]
		[Address(RVA = "0xA51310", Offset = "0xA51310", VA = "0xA51310")]
		public static void RenderDistortion(Material material, RenderTexture source, RenderTexture destination, float angle, Vector2 center, Vector2 radius)
		{
		}

		[Token(Token = "0x6000EB8")]
		[Address(RVA = "0xA5155C", Offset = "0xA5155C", VA = "0xA5155C")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x5D9530", Offset = "0x5D9530")]
		public static void Blit(RenderTexture source, RenderTexture dest)
		{
		}

		[Token(Token = "0x6000EB9")]
		[Address(RVA = "0xA515D0", Offset = "0xA515D0", VA = "0xA515D0")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x5D9568", Offset = "0x5D9568")]
		public static void BlitWithMaterial(Material material, RenderTexture source, RenderTexture dest)
		{
		}

		[Token(Token = "0x6000EBA")]
		[Address(RVA = "0xA5164C", Offset = "0xA5164C", VA = "0xA5164C")]
		public ImageEffects()
		{
		}
	}
	[Token(Token = "0x2000231")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5CB128", Offset = "0x5CB128")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x5CB128", Offset = "0x5CB128")]
	public class MotionBlur : ImageEffectBase
	{
		[Token(Token = "0x400107C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D21EC", Offset = "0x5D21EC")]
		public float blurAmount;

		[Token(Token = "0x400107D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool extraBlur;

		[Token(Token = "0x400107E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private RenderTexture accumTexture;

		[Token(Token = "0x6000EBB")]
		[Address(RVA = "0xDF5218", Offset = "0xDF5218", VA = "0xDF5218", Slot = "4")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000EBC")]
		[Address(RVA = "0xDF5220", Offset = "0xDF5220", VA = "0xDF5220", Slot = "5")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x6000EBD")]
		[Address(RVA = "0xDF5294", Offset = "0xDF5294", VA = "0xDF5294")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000EBE")]
		[Address(RVA = "0xDF563C", Offset = "0xDF563C", VA = "0xDF563C")]
		public MotionBlur()
		{
		}
	}
	[Token(Token = "0x2000232")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x5CB1BC", Offset = "0x5CB1BC")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5CB1BC", Offset = "0x5CB1BC")]
	public class NoiseAndGrain : PostEffectsBase
	{
		[Token(Token = "0x400107F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float intensityMultiplier;

		[Token(Token = "0x4001080")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float generalIntensity;

		[Token(Token = "0x4001081")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float blackIntensity;

		[Token(Token = "0x4001082")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float whiteIntensity;

		[Token(Token = "0x4001083")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float midGrey;

		[Token(Token = "0x4001084")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public bool dx11Grain;

		[Token(Token = "0x4001085")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float softness;

		[Token(Token = "0x4001086")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public bool monochrome;

		[Token(Token = "0x4001087")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector3 intensities;

		[Token(Token = "0x4001088")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public Vector3 tiling;

		[Token(Token = "0x4001089")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float monochromeTiling;

		[Token(Token = "0x400108A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public FilterMode filterMode;

		[Token(Token = "0x400108B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Texture2D noiseTexture;

		[Token(Token = "0x400108C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Shader noiseShader;

		[Token(Token = "0x400108D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Material noiseMaterial;

		[Token(Token = "0x400108E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Shader dx11NoiseShader;

		[Token(Token = "0x400108F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Material dx11NoiseMaterial;

		[Token(Token = "0x4001090")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static float TILE_AMOUNT;

		[Token(Token = "0x6000EBF")]
		[Address(RVA = "0x16FC054", Offset = "0x16FC054", VA = "0x16FC054", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000EC0")]
		[Address(RVA = "0x16FC104", Offset = "0x16FC104", VA = "0x16FC104")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000EC1")]
		[Address(RVA = "0x16FC8C0", Offset = "0x16FC8C0", VA = "0x16FC8C0")]
		private static void DrawNoiseQuadGrid(RenderTexture source, RenderTexture dest, Material fxMaterial, Texture2D noise, int passNr)
		{
		}

		[Token(Token = "0x6000EC2")]
		[Address(RVA = "0x16FCC14", Offset = "0x16FCC14", VA = "0x16FCC14")]
		public NoiseAndGrain()
		{
		}
	}
	[Token(Token = "0x2000233")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x5CB250", Offset = "0x5CB250")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5CB250", Offset = "0x5CB250")]
	public class NoiseAndScratches : MonoBehaviour
	{
		[Token(Token = "0x4001091")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool monochrome;

		[Token(Token = "0x4001092")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		private bool rgbFallback;

		[Token(Token = "0x4001093")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D2208", Offset = "0x5D2208")]
		public float grainIntensityMin;

		[Token(Token = "0x4001094")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D2220", Offset = "0x5D2220")]
		public float grainIntensityMax;

		[Token(Token = "0x4001095")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D2238", Offset = "0x5D2238")]
		public float grainSize;

		[Token(Token = "0x4001096")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D2258", Offset = "0x5D2258")]
		public float scratchIntensityMin;

		[Token(Token = "0x4001097")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D2270", Offset = "0x5D2270")]
		public float scratchIntensityMax;

		[Token(Token = "0x4001098")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D2288", Offset = "0x5D2288")]
		public float scratchFPS;

		[Token(Token = "0x4001099")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D22A0", Offset = "0x5D22A0")]
		public float scratchJitter;

		[Token(Token = "0x400109A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Texture grainTexture;

		[Token(Token = "0x400109B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Texture scratchTexture;

		[Token(Token = "0x400109C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader shaderRGB;

		[Token(Token = "0x400109D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Shader shaderYUV;

		[Token(Token = "0x400109E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Material m_MaterialRGB;

		[Token(Token = "0x400109F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material m_MaterialYUV;

		[Token(Token = "0x40010A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float scratchTimeLeft;

		[Token(Token = "0x40010A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float scratchX;

		[Token(Token = "0x40010A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float scratchY;

		[Token(Token = "0x170000CF")]
		protected Material material
		{
			[Token(Token = "0x6000EC5")]
			[Address(RVA = "0x16FCDF8", Offset = "0x16FCDF8", VA = "0x16FCDF8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000EC4")]
		[Address(RVA = "0x16FCCA4", Offset = "0x16FCCA4", VA = "0x16FCCA4")]
		protected void Start()
		{
		}

		[Token(Token = "0x6000EC6")]
		[Address(RVA = "0x16FCF74", Offset = "0x16FCF74", VA = "0x16FCF74")]
		protected void OnDisable()
		{
		}

		[Token(Token = "0x6000EC7")]
		[Address(RVA = "0x16FD074", Offset = "0x16FD074", VA = "0x16FD074")]
		private void SanitizeParameters()
		{
		}

		[Token(Token = "0x6000EC8")]
		[Address(RVA = "0x16FD168", Offset = "0x16FD168", VA = "0x16FD168")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000EC9")]
		[Address(RVA = "0x16FD4E8", Offset = "0x16FD4E8", VA = "0x16FD4E8")]
		public NoiseAndScratches()
		{
		}
	}
	[Token(Token = "0x2000234")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x5CB2E4", Offset = "0x5CB2E4")]
	public class PostEffectsBase : MonoBehaviour
	{
		[Token(Token = "0x40010A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected bool supportHDRTextures;

		[Token(Token = "0x40010A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		protected bool supportDX11;

		[Token(Token = "0x40010A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		protected bool isSupported;

		[Token(Token = "0x40010A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<Material> createdMaterials;

		[Token(Token = "0x6000ECA")]
		[Address(RVA = "0x1205ED8", Offset = "0x1205ED8", VA = "0x1205ED8")]
		protected Material CheckShaderAndCreateMaterial(Shader s, Material m2Create)
		{
			return null;
		}

		[Token(Token = "0x6000ECB")]
		[Address(RVA = "0x1206324", Offset = "0x1206324", VA = "0x1206324")]
		protected Material CreateMaterial(Shader s, Material m2Create)
		{
			return null;
		}

		[Token(Token = "0x6000ECC")]
		[Address(RVA = "0x120652C", Offset = "0x120652C", VA = "0x120652C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000ECD")]
		[Address(RVA = "0x1206538", Offset = "0x1206538", VA = "0x1206538")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000ECE")]
		[Address(RVA = "0x120653C", Offset = "0x120653C", VA = "0x120653C")]
		private void RemoveCreatedMaterials()
		{
		}

		[Token(Token = "0x6000ECF")]
		[Address(RVA = "0x120660C", Offset = "0x120660C", VA = "0x120660C")]
		protected bool CheckSupport()
		{
			return default(bool);
		}

		[Token(Token = "0x6000ED0")]
		[Address(RVA = "0x1206718", Offset = "0x1206718", VA = "0x1206718", Slot = "4")]
		public virtual bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000ED1")]
		[Address(RVA = "0x12067DC", Offset = "0x12067DC", VA = "0x12067DC")]
		protected void Start()
		{
		}

		[Token(Token = "0x6000ED2")]
		[Address(RVA = "0x1206614", Offset = "0x1206614", VA = "0x1206614")]
		protected bool CheckSupport(bool needDepth)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ED3")]
		[Address(RVA = "0x12067E8", Offset = "0x12067E8", VA = "0x12067E8")]
		protected bool CheckSupport(bool needDepth, bool needHdr)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ED4")]
		[Address(RVA = "0x1206844", Offset = "0x1206844", VA = "0x1206844")]
		public bool Dx11Support()
		{
			return default(bool);
		}

		[Token(Token = "0x6000ED5")]
		[Address(RVA = "0x120684C", Offset = "0x120684C", VA = "0x120684C")]
		protected void ReportAutoDisable()
		{
		}

		[Token(Token = "0x6000ED6")]
		[Address(RVA = "0x1206908", Offset = "0x1206908", VA = "0x1206908")]
		private bool CheckShader(Shader s)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ED7")]
		[Address(RVA = "0x12062F8", Offset = "0x12062F8", VA = "0x12062F8")]
		protected void NotSupported()
		{
		}

		[Token(Token = "0x6000ED8")]
		[Address(RVA = "0x1206B7C", Offset = "0x1206B7C", VA = "0x1206B7C")]
		protected void DrawBorder(RenderTexture dest, Material material)
		{
		}

		[Token(Token = "0x6000ED9")]
		[Address(RVA = "0x1206EF8", Offset = "0x1206EF8", VA = "0x1206EF8")]
		public PostEffectsBase()
		{
		}
	}
	[Token(Token = "0x2000235")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x5CB354", Offset = "0x5CB354")]
	internal class PostEffectsHelper : MonoBehaviour
	{
		[Token(Token = "0x6000EDA")]
		[Address(RVA = "0x1206F88", Offset = "0x1206F88", VA = "0x1206F88")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000EDB")]
		[Address(RVA = "0x1206FFC", Offset = "0x1206FFC", VA = "0x1206FFC")]
		private static void DrawLowLevelPlaneAlignedWithCamera(float dist, RenderTexture source, RenderTexture dest, Material material, Camera cameraForProjectionMatrix)
		{
		}

		[Token(Token = "0x6000EDC")]
		[Address(RVA = "0x1207254", Offset = "0x1207254", VA = "0x1207254")]
		private static void DrawBorder(RenderTexture dest, Material material)
		{
		}

		[Token(Token = "0x6000EDD")]
		[Address(RVA = "0x12075CC", Offset = "0x12075CC", VA = "0x12075CC")]
		private static void DrawLowLevelQuad(float x1, float x2, float y1, float y2, RenderTexture source, RenderTexture dest, Material material)
		{
		}

		[Token(Token = "0x6000EDE")]
		[Address(RVA = "0x1207774", Offset = "0x1207774", VA = "0x1207774")]
		public PostEffectsHelper()
		{
		}
	}
	[Token(Token = "0x2000236")]
	internal class Quads
	{
		[Token(Token = "0x40010A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Mesh[] meshes;

		[Token(Token = "0x40010A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static int currentQuads;

		[Token(Token = "0x6000EDF")]
		[Address(RVA = "0x120900C", Offset = "0x120900C", VA = "0x120900C")]
		private static bool HasMeshes()
		{
			return default(bool);
		}

		[Token(Token = "0x6000EE0")]
		[Address(RVA = "0x1209138", Offset = "0x1209138", VA = "0x1209138")]
		public static void Cleanup()
		{
		}

		[Token(Token = "0x6000EE1")]
		[Address(RVA = "0x1209330", Offset = "0x1209330", VA = "0x1209330")]
		public static Mesh[] GetMeshes(int totalWidth, int totalHeight)
		{
			return null;
		}

		[Token(Token = "0x6000EE2")]
		[Address(RVA = "0x12095CC", Offset = "0x12095CC", VA = "0x12095CC")]
		private static Mesh GetMesh(int triCount, int triOffset, int totalWidth, int totalHeight)
		{
			return null;
		}

		[Token(Token = "0x6000EE3")]
		[Address(RVA = "0x120998C", Offset = "0x120998C", VA = "0x120998C")]
		public Quads()
		{
		}
	}
	[Token(Token = "0x2000237")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x5CB3C4", Offset = "0x5CB3C4")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5CB3C4", Offset = "0x5CB3C4")]
	public class ScreenOverlay : PostEffectsBase
	{
		[Token(Token = "0x200044E")]
		public enum OverlayBlendMode
		{
			[Token(Token = "0x4001C3B")]
			Additive,
			[Token(Token = "0x4001C3C")]
			ScreenBlend,
			[Token(Token = "0x4001C3D")]
			Multiply,
			[Token(Token = "0x4001C3E")]
			Overlay,
			[Token(Token = "0x4001C3F")]
			AlphaBlend
		}

		[Token(Token = "0x40010A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public OverlayBlendMode blendMode;

		[Token(Token = "0x40010AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float intensity;

		[Token(Token = "0x40010AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Texture2D texture;

		[Token(Token = "0x40010AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Shader overlayShader;

		[Token(Token = "0x40010AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material overlayMaterial;

		[Token(Token = "0x6000EE5")]
		[Address(RVA = "0xCE2888", Offset = "0xCE2888", VA = "0xCE2888", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000EE6")]
		[Address(RVA = "0xCE2900", Offset = "0xCE2900", VA = "0xCE2900")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000EE7")]
		[Address(RVA = "0xCE2A88", Offset = "0xCE2A88", VA = "0xCE2A88")]
		public ScreenOverlay()
		{
		}
	}
	[Token(Token = "0x2000238")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x5CB458", Offset = "0x5CB458")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5CB458", Offset = "0x5CB458")]
	internal class ScreenSpaceAmbientObscurance : PostEffectsBase
	{
		[Token(Token = "0x40010AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D22B8", Offset = "0x5D22B8")]
		public float intensity;

		[Token(Token = "0x40010AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D22D0", Offset = "0x5D22D0")]
		public float radius;

		[Token(Token = "0x40010B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D22EC", Offset = "0x5D22EC")]
		public int blurIterations;

		[Token(Token = "0x40010B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D2304", Offset = "0x5D2304")]
		public float blurFilterDistance;

		[Token(Token = "0x40010B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D231C", Offset = "0x5D231C")]
		public int downsample;

		[Token(Token = "0x40010B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Texture2D rand;

		[Token(Token = "0x40010B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader aoShader;

		[Token(Token = "0x40010B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Material aoMaterial;

		[Token(Token = "0x6000EE8")]
		[Address(RVA = "0xCE2A9C", Offset = "0xCE2A9C", VA = "0xCE2A9C", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000EE9")]
		[Address(RVA = "0xCE2B1C", Offset = "0xCE2B1C", VA = "0xCE2B1C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000EEA")]
		[Address(RVA = "0xCE2BC8", Offset = "0xCE2BC8", VA = "0xCE2BC8")]
		[ImageEffectOpaque]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000EEB")]
		[Address(RVA = "0xCE3408", Offset = "0xCE3408", VA = "0xCE3408")]
		public ScreenSpaceAmbientObscurance()
		{
		}
	}
	[Token(Token = "0x2000239")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x5CB4EC", Offset = "0x5CB4EC")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5CB4EC", Offset = "0x5CB4EC")]
	public class ScreenSpaceAmbientOcclusion : MonoBehaviour
	{
		[Token(Token = "0x200044F")]
		public enum SSAOSamples
		{
			[Token(Token = "0x4001C41")]
			Low,
			[Token(Token = "0x4001C42")]
			Medium,
			[Token(Token = "0x4001C43")]
			High
		}

		[Token(Token = "0x40010B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D2334", Offset = "0x5D2334")]
		public float m_Radius;

		[Token(Token = "0x40010B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public SSAOSamples m_SampleCount;

		[Token(Token = "0x40010B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D2350", Offset = "0x5D2350")]
		public float m_OcclusionIntensity;

		[Token(Token = "0x40010B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D2368", Offset = "0x5D2368")]
		public int m_Blur;

		[Token(Token = "0x40010BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D2380", Offset = "0x5D2380")]
		public int m_Downsampling;

		[Token(Token = "0x40010BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D2398", Offset = "0x5D2398")]
		public float m_OcclusionAttenuation;

		[Token(Token = "0x40010BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D23B4", Offset = "0x5D23B4")]
		public float m_MinZ;

		[Token(Token = "0x40010BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Shader m_SSAOShader;

		[Token(Token = "0x40010BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material m_SSAOMaterial;

		[Token(Token = "0x40010BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Texture2D m_RandomTexture;

		[Token(Token = "0x40010C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool m_Supported;

		[Token(Token = "0x6000EEC")]
		[Address(RVA = "0xCE3428", Offset = "0xCE3428", VA = "0xCE3428")]
		private static Material CreateMaterial(Shader shader)
		{
			return null;
		}

		[Token(Token = "0x6000EED")]
		[Address(RVA = "0xCE34E0", Offset = "0xCE34E0", VA = "0xCE34E0")]
		private static void DestroyMaterial(Material mat)
		{
		}

		[Token(Token = "0x6000EEE")]
		[Address(RVA = "0xCE3578", Offset = "0xCE3578", VA = "0xCE3578")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000EEF")]
		[Address(RVA = "0xCE3580", Offset = "0xCE3580", VA = "0xCE3580")]
		private void Start()
		{
		}

		[Token(Token = "0x6000EF0")]
		[Address(RVA = "0xCE3738", Offset = "0xCE3738", VA = "0xCE3738")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000EF1")]
		[Address(RVA = "0xCE3654", Offset = "0xCE3654", VA = "0xCE3654")]
		private void CreateMaterials()
		{
		}

		[Token(Token = "0x6000EF2")]
		[Address(RVA = "0xCE37A8", Offset = "0xCE37A8", VA = "0xCE37A8")]
		[ImageEffectOpaque]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000EF3")]
		[Address(RVA = "0xCE3E20", Offset = "0xCE3E20", VA = "0xCE3E20")]
		public ScreenSpaceAmbientOcclusion()
		{
		}
	}
	[Token(Token = "0x200023A")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5CB580", Offset = "0x5CB580")]
	public class SepiaTone : ImageEffectBase
	{
		[Token(Token = "0x6000EF4")]
		[Address(RVA = "0xA0C150", Offset = "0xA0C150", VA = "0xA0C150")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000EF5")]
		[Address(RVA = "0xA0C1E0", Offset = "0xA0C1E0", VA = "0xA0C1E0")]
		public SepiaTone()
		{
		}
	}
	[Token(Token = "0x200023B")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x5CB5CC", Offset = "0x5CB5CC")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5CB5CC", Offset = "0x5CB5CC")]
	public class SunShafts : PostEffectsBase
	{
		[Token(Token = "0x2000450")]
		public enum SunShaftsResolution
		{
			[Token(Token = "0x4001C45")]
			Low,
			[Token(Token = "0x4001C46")]
			Normal,
			[Token(Token = "0x4001C47")]
			High
		}

		[Token(Token = "0x2000451")]
		public enum ShaftsScreenBlendMode
		{
			[Token(Token = "0x4001C49")]
			Screen,
			[Token(Token = "0x4001C4A")]
			Add
		}

		[Token(Token = "0x40010C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public SunShaftsResolution resolution;

		[Token(Token = "0x40010C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public ShaftsScreenBlendMode screenBlendMode;

		[Token(Token = "0x40010C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform sunTransform;

		[Token(Token = "0x40010C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int radialBlurIterations;

		[Token(Token = "0x40010C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Color sunColor;

		[Token(Token = "0x40010C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public Color sunThreshold;

		[Token(Token = "0x40010C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float sunShaftBlurRadius;

		[Token(Token = "0x40010C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float sunShaftIntensity;

		[Token(Token = "0x40010C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float maxRadius;

		[Token(Token = "0x40010CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool useDepthTexture;

		[Token(Token = "0x40010CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Shader sunShaftsShader;

		[Token(Token = "0x40010CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Material sunShaftsMaterial;

		[Token(Token = "0x40010CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Shader simpleClearShader;

		[Token(Token = "0x40010CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Material simpleClearMaterial;

		[Token(Token = "0x6000EF6")]
		[Address(RVA = "0x13B1048", Offset = "0x13B1048", VA = "0x13B1048", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000EF7")]
		[Address(RVA = "0x13B10E8", Offset = "0x13B10E8", VA = "0x13B10E8")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000EF8")]
		[Address(RVA = "0x13B18D0", Offset = "0x13B18D0", VA = "0x13B18D0")]
		public SunShafts()
		{
		}
	}
	[Token(Token = "0x200023C")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x5CB660", Offset = "0x5CB660")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5CB660", Offset = "0x5CB660")]
	internal class TiltShift : PostEffectsBase
	{
		[Token(Token = "0x2000452")]
		public enum TiltShiftMode
		{
			[Token(Token = "0x4001C4C")]
			TiltShiftMode,
			[Token(Token = "0x4001C4D")]
			IrisMode
		}

		[Token(Token = "0x2000453")]
		public enum TiltShiftQuality
		{
			[Token(Token = "0x4001C4F")]
			Preview,
			[Token(Token = "0x4001C50")]
			Low,
			[Token(Token = "0x4001C51")]
			Normal,
			[Token(Token = "0x4001C52")]
			High
		}

		[Token(Token = "0x40010CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TiltShiftMode mode;

		[Token(Token = "0x40010D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public TiltShiftQuality quality;

		[Token(Token = "0x40010D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D23D0", Offset = "0x5D23D0")]
		public float blurArea;

		[Token(Token = "0x40010D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D23E8", Offset = "0x5D23E8")]
		public float maxBlurSize;

		[Token(Token = "0x40010D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D2400", Offset = "0x5D2400")]
		public int downsample;

		[Token(Token = "0x40010D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Shader tiltShiftShader;

		[Token(Token = "0x40010D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Material tiltShiftMaterial;

		[Token(Token = "0x6000EF9")]
		[Address(RVA = "0xE95934", Offset = "0xE95934", VA = "0xE95934", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000EFA")]
		[Address(RVA = "0xE959AC", Offset = "0xE959AC", VA = "0xE959AC")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000EFB")]
		[Address(RVA = "0xE95C68", Offset = "0xE95C68", VA = "0xE95C68")]
		public TiltShift()
		{
		}
	}
	[Token(Token = "0x200023D")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x5CB6E4", Offset = "0x5CB6E4")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5CB6E4", Offset = "0x5CB6E4")]
	public class Tonemapping : PostEffectsBase
	{
		[Token(Token = "0x2000454")]
		public enum TonemapperType
		{
			[Token(Token = "0x4001C54")]
			SimpleReinhard,
			[Token(Token = "0x4001C55")]
			UserCurve,
			[Token(Token = "0x4001C56")]
			Hable,
			[Token(Token = "0x4001C57")]
			Photographic,
			[Token(Token = "0x4001C58")]
			OptimizedHejiDawson,
			[Token(Token = "0x4001C59")]
			AdaptiveReinhard,
			[Token(Token = "0x4001C5A")]
			AdaptiveReinhardAutoWhite
		}

		[Token(Token = "0x2000455")]
		public enum AdaptiveTexSize
		{
			[Token(Token = "0x4001C5C")]
			Square16 = 0x10,
			[Token(Token = "0x4001C5D")]
			Square32 = 0x20,
			[Token(Token = "0x4001C5E")]
			Square64 = 0x40,
			[Token(Token = "0x4001C5F")]
			Square128 = 0x80,
			[Token(Token = "0x4001C60")]
			Square256 = 0x100,
			[Token(Token = "0x4001C61")]
			Square512 = 0x200,
			[Token(Token = "0x4001C62")]
			Square1024 = 0x400
		}

		[Token(Token = "0x40010D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TonemapperType type;

		[Token(Token = "0x40010D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public AdaptiveTexSize adaptiveTextureSize;

		[Token(Token = "0x40010D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimationCurve remapCurve;

		[Token(Token = "0x40010D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Texture2D curveTex;

		[Token(Token = "0x40010DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float exposureAdjustment;

		[Token(Token = "0x40010DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float middleGrey;

		[Token(Token = "0x40010DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float white;

		[Token(Token = "0x40010DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float adaptionSpeed;

		[Token(Token = "0x40010DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Shader tonemapper;

		[Token(Token = "0x40010DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool validRenderTextureFormat;

		[Token(Token = "0x40010E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material tonemapMaterial;

		[Token(Token = "0x40010E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private RenderTexture rt;

		[Token(Token = "0x40010E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private RenderTextureFormat rtFormat;

		[Token(Token = "0x6000EFC")]
		[Address(RVA = "0xE96108", Offset = "0xE96108", VA = "0xE96108", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000EFD")]
		[Address(RVA = "0xE96280", Offset = "0xE96280", VA = "0xE96280")]
		public float UpdateCurve()
		{
			return default(float);
		}

		[Token(Token = "0x6000EFE")]
		[Address(RVA = "0xE96510", Offset = "0xE96510", VA = "0xE96510")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000EFF")]
		[Address(RVA = "0xE9669C", Offset = "0xE9669C", VA = "0xE9669C")]
		private bool CreateInternalRenderTexture()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F00")]
		[Address(RVA = "0xE967A4", Offset = "0xE967A4", VA = "0xE967A4")]
		[ImageEffectTransformsToLDR]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000F01")]
		[Address(RVA = "0xE96FF0", Offset = "0xE96FF0", VA = "0xE96FF0")]
		public Tonemapping()
		{
		}
	}
	[Token(Token = "0x200023E")]
	internal class Triangles
	{
		[Token(Token = "0x40010E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Mesh[] meshes;

		[Token(Token = "0x40010E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static int currentTris;

		[Token(Token = "0x6000F02")]
		[Address(RVA = "0xBCB208", Offset = "0xBCB208", VA = "0xBCB208")]
		private static bool HasMeshes()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F03")]
		[Address(RVA = "0xBCB34C", Offset = "0xBCB34C", VA = "0xBCB34C")]
		private static void Cleanup()
		{
		}

		[Token(Token = "0x6000F04")]
		[Address(RVA = "0xBCB544", Offset = "0xBCB544", VA = "0xBCB544")]
		private static Mesh[] GetMeshes(int totalWidth, int totalHeight)
		{
			return null;
		}

		[Token(Token = "0x6000F05")]
		[Address(RVA = "0xBCB7E0", Offset = "0xBCB7E0", VA = "0xBCB7E0")]
		private static Mesh GetMesh(int triCount, int triOffset, int totalWidth, int totalHeight)
		{
			return null;
		}

		[Token(Token = "0x6000F06")]
		[Address(RVA = "0xBCBAFC", Offset = "0xBCBAFC", VA = "0xBCBAFC")]
		public Triangles()
		{
		}
	}
	[Token(Token = "0x200023F")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5CB778", Offset = "0x5CB778")]
	public class Twirl : ImageEffectBase
	{
		[Token(Token = "0x40010E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector2 radius;

		[Token(Token = "0x40010E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D2418", Offset = "0x5D2418")]
		public float angle;

		[Token(Token = "0x40010E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector2 center;

		[Token(Token = "0x6000F08")]
		[Address(RVA = "0xBD0FD0", Offset = "0xBD0FD0", VA = "0xBD0FD0")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000F09")]
		[Address(RVA = "0xBD101C", Offset = "0xBD101C", VA = "0xBD101C")]
		public Twirl()
		{
		}
	}
	[Token(Token = "0x2000240")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x5CB7C4", Offset = "0x5CB7C4")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5CB7C4", Offset = "0x5CB7C4")]
	public class VignetteAndChromaticAberration : PostEffectsBase
	{
		[Token(Token = "0x2000456")]
		public enum AberrationMode
		{
			[Token(Token = "0x4001C64")]
			Simple,
			[Token(Token = "0x4001C65")]
			Advanced
		}

		[Token(Token = "0x40010E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AberrationMode mode;

		[Token(Token = "0x40010E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float intensity;

		[Token(Token = "0x40010EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float chromaticAberration;

		[Token(Token = "0x40010EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float axialAberration;

		[Token(Token = "0x40010EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float blur;

		[Token(Token = "0x40010ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float blurSpread;

		[Token(Token = "0x40010EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float luminanceDependency;

		[Token(Token = "0x40010EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float blurDistance;

		[Token(Token = "0x40010F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader vignetteShader;

		[Token(Token = "0x40010F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Shader separableBlurShader;

		[Token(Token = "0x40010F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Shader chromAberrationShader;

		[Token(Token = "0x40010F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material m_VignetteMaterial;

		[Token(Token = "0x40010F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Material m_SeparableBlurMaterial;

		[Token(Token = "0x40010F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Material m_ChromAberrationMaterial;

		[Token(Token = "0x6000F0A")]
		[Address(RVA = "0xD0DB24", Offset = "0xD0DB24", VA = "0xD0DB24", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F0B")]
		[Address(RVA = "0xD0DBEC", Offset = "0xD0DBEC", VA = "0xD0DBEC")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000F0C")]
		[Address(RVA = "0xD0E1DC", Offset = "0xD0E1DC", VA = "0xD0E1DC")]
		public VignetteAndChromaticAberration()
		{
		}
	}
	[Token(Token = "0x2000241")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5CB858", Offset = "0x5CB858")]
	public class Vortex : ImageEffectBase
	{
		[Token(Token = "0x40010F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector2 radius;

		[Token(Token = "0x40010F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float angle;

		[Token(Token = "0x40010F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector2 center;

		[Token(Token = "0x6000F0D")]
		[Address(RVA = "0xD0F384", Offset = "0xD0F384", VA = "0xD0F384")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000F0E")]
		[Address(RVA = "0xD0F3D0", Offset = "0xD0F3D0", VA = "0xD0F3D0")]
		public Vortex()
		{
		}
	}
}
namespace UnityStandardAssets.CinematicEffects
{
	[Token(Token = "0x2000242")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x5CB8A4", Offset = "0x5CB8A4")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5CB8A4", Offset = "0x5CB8A4")]
	[ImageEffectAllowedInSceneView]
	public class RFX1_Bloom : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000457")]
		public struct Settings
		{
			[Token(Token = "0x4001C66")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[SerializeField]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5D5FE4", Offset = "0x5D5FE4")]
			public float threshold;

			[Token(Token = "0x4001C67")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[SerializeField]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D6030", Offset = "0x5D6030")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5D6030", Offset = "0x5D6030")]
			public float softKnee;

			[Token(Token = "0x4001C68")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[SerializeField]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D6094", Offset = "0x5D6094")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5D6094", Offset = "0x5D6094")]
			public float radius;

			[Token(Token = "0x4001C69")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[SerializeField]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5D60F8", Offset = "0x5D60F8")]
			public float intensity;

			[Token(Token = "0x4001C6A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[SerializeField]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5D6144", Offset = "0x5D6144")]
			public bool highQuality;

			[Token(Token = "0x4001C6B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
			[SerializeField]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5D6190", Offset = "0x5D6190")]
			public bool antiFlicker;

			[Token(Token = "0x4001C6C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5D61DC", Offset = "0x5D61DC")]
			public Texture dirtTexture;

			[Token(Token = "0x4001C6D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "RFX1_MinAttribute", RVA = "0x5D6214", Offset = "0x5D6214")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5D6214", Offset = "0x5D6214")]
			public float dirtIntensity;

			[Token(Token = "0x170002F6")]
			public float thresholdGamma
			{
				[Token(Token = "0x6001B5E")]
				[Address(RVA = "0xFF152C", Offset = "0xFF152C", VA = "0xFF152C")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6001B5D")]
				[Address(RVA = "0xFF1524", Offset = "0xFF1524", VA = "0xFF1524")]
				set
				{
				}
			}

			[Token(Token = "0x170002F7")]
			public float thresholdLinear
			{
				[Token(Token = "0x6001B60")]
				[Address(RVA = "0xFF1564", Offset = "0xFF1564", VA = "0xFF1564")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6001B5F")]
				[Address(RVA = "0xFF153C", Offset = "0xFF153C", VA = "0xFF153C")]
				set
				{
				}
			}

			[Token(Token = "0x170002F8")]
			public static Settings defaultSettings
			{
				[Token(Token = "0x6001B61")]
				[Address(RVA = "0xFF1588", Offset = "0xFF1588", VA = "0xFF1588")]
				get
				{
					return default(Settings);
				}
			}
		}

		[Token(Token = "0x40010F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public Settings settings;

		[Token(Token = "0x40010FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[HideInInspector]
		private Shader m_Shader;

		[Token(Token = "0x40010FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Material m_Material;

		[Token(Token = "0x40010FC")]
		private const int kMaxIterations = 16;

		[Token(Token = "0x40010FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private RenderTexture[] m_blurBuffer1;

		[Token(Token = "0x40010FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private RenderTexture[] m_blurBuffer2;

		[Token(Token = "0x40010FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int m_Threshold;

		[Token(Token = "0x4001100")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private int m_Curve;

		[Token(Token = "0x4001101")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int m_PrefilterOffs;

		[Token(Token = "0x4001102")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private int m_SampleScale;

		[Token(Token = "0x4001103")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private int m_Intensity;

		[Token(Token = "0x4001104")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private int m_DirtTex;

		[Token(Token = "0x4001105")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private int m_DirtIntensity;

		[Token(Token = "0x4001106")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private int m_BaseTex;

		[Token(Token = "0x170000D0")]
		public Shader shader
		{
			[Token(Token = "0x6000F0F")]
			[Address(RVA = "0x120AB90", Offset = "0x120AB90", VA = "0x120AB90")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000D1")]
		public Material material
		{
			[Token(Token = "0x6000F10")]
			[Address(RVA = "0x120AC38", Offset = "0x120AC38", VA = "0x120AC38")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F11")]
		[Address(RVA = "0x120ACDC", Offset = "0x120ACDC", VA = "0x120ACDC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000F12")]
		[Address(RVA = "0x120AE2C", Offset = "0x120AE2C", VA = "0x120AE2C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000F13")]
		[Address(RVA = "0x120AE7C", Offset = "0x120AE7C", VA = "0x120AE7C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000F14")]
		[Address(RVA = "0x120AF2C", Offset = "0x120AF2C", VA = "0x120AF2C")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000F15")]
		[Address(RVA = "0x120B6D4", Offset = "0x120B6D4", VA = "0x120B6D4")]
		public RFX1_Bloom()
		{
		}
	}
	[Token(Token = "0x2000243")]
	public static class RFX1_ImageEffectHelper
	{
		[Token(Token = "0x170000D2")]
		public static bool supportsDX11
		{
			[Token(Token = "0x6000F18")]
			[Address(RVA = "0x11E9E54", Offset = "0x11E9E54", VA = "0x11E9E54")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000F16")]
		[Address(RVA = "0x11E9A50", Offset = "0x11E9A50", VA = "0x11E9A50")]
		public static bool IsSupported(Shader s, bool needDepth, bool needHdr, MonoBehaviour effect)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F17")]
		[Address(RVA = "0x11E9D80", Offset = "0x11E9D80", VA = "0x11E9D80")]
		public static Material CheckShaderAndCreateMaterial(Shader s)
		{
			return null;
		}
	}
	[Token(Token = "0x2000244")]
	public sealed class RFX1_MinAttribute : PropertyAttribute
	{
		[Token(Token = "0x4001107")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly float min;

		[Token(Token = "0x6000F19")]
		[Address(RVA = "0x11EA0D0", Offset = "0x11EA0D0", VA = "0x11EA0D0")]
		public RFX1_MinAttribute(float min)
		{
		}
	}
	[Token(Token = "0x2000245")]
	public class RFX1_RenderTextureUtility
	{
		[Token(Token = "0x4001108")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<RenderTexture> m_TemporaryRTs;

		[Token(Token = "0x6000F1A")]
		[Address(RVA = "0x11EC11C", Offset = "0x11EC11C", VA = "0x11EC11C")]
		public RenderTexture GetTemporaryRenderTexture(int width, int height, int depthBuffer = 0, RenderTextureFormat format = RenderTextureFormat.ARGBHalf, FilterMode filterMode = FilterMode.Bilinear)
		{
			return null;
		}

		[Token(Token = "0x6000F1B")]
		[Address(RVA = "0x11EC208", Offset = "0x11EC208", VA = "0x11EC208")]
		public void ReleaseTemporaryRenderTexture(RenderTexture rt)
		{
		}

		[Token(Token = "0x6000F1C")]
		[Address(RVA = "0x11EC3C0", Offset = "0x11EC3C0", VA = "0x11EC3C0")]
		public void ReleaseAllTemporaryRenderTextures()
		{
		}

		[Token(Token = "0x6000F1D")]
		[Address(RVA = "0x11EC47C", Offset = "0x11EC47C", VA = "0x11EC47C")]
		public RFX1_RenderTextureUtility()
		{
		}
	}
}
namespace Kino
{
	[Token(Token = "0x2000246")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x5CB948", Offset = "0x5CB948")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5CB948", Offset = "0x5CB948")]
	public class AnalogGlitch : MonoBehaviour
	{
		[Token(Token = "0x4001109")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D247C", Offset = "0x5D247C")]
		private float _scanLineJitter;

		[Token(Token = "0x400110A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D24BC", Offset = "0x5D24BC")]
		private float _verticalJump;

		[Token(Token = "0x400110B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D24FC", Offset = "0x5D24FC")]
		private float _horizontalShake;

		[Token(Token = "0x400110C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D253C", Offset = "0x5D253C")]
		private float _colorDrift;

		[Token(Token = "0x400110D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Shader _shader;

		[Token(Token = "0x400110E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Material _material;

		[Token(Token = "0x400110F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float _verticalJumpTime;

		[Token(Token = "0x170000D3")]
		public float scanLineJitter
		{
			[Token(Token = "0x6000F1E")]
			[Address(RVA = "0xC0D184", Offset = "0xC0D184", VA = "0xC0D184")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000F1F")]
			[Address(RVA = "0xC0D18C", Offset = "0xC0D18C", VA = "0xC0D18C")]
			set
			{
			}
		}

		[Token(Token = "0x170000D4")]
		public float verticalJump
		{
			[Token(Token = "0x6000F20")]
			[Address(RVA = "0xC0D194", Offset = "0xC0D194", VA = "0xC0D194")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000F21")]
			[Address(RVA = "0xC0D19C", Offset = "0xC0D19C", VA = "0xC0D19C")]
			set
			{
			}
		}

		[Token(Token = "0x170000D5")]
		public float horizontalShake
		{
			[Token(Token = "0x6000F22")]
			[Address(RVA = "0xC0D1A4", Offset = "0xC0D1A4", VA = "0xC0D1A4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000F23")]
			[Address(RVA = "0xC0D1AC", Offset = "0xC0D1AC", VA = "0xC0D1AC")]
			set
			{
			}
		}

		[Token(Token = "0x170000D6")]
		public float colorDrift
		{
			[Token(Token = "0x6000F24")]
			[Address(RVA = "0xC0D1B4", Offset = "0xC0D1B4", VA = "0xC0D1B4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000F25")]
			[Address(RVA = "0xC0D1BC", Offset = "0xC0D1BC", VA = "0xC0D1BC")]
			set
			{
			}
		}

		[Token(Token = "0x6000F26")]
		[Address(RVA = "0xC0D1C4", Offset = "0xC0D1C4", VA = "0xC0D1C4")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000F27")]
		[Address(RVA = "0xC0D46C", Offset = "0xC0D46C", VA = "0xC0D46C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000F28")]
		[Address(RVA = "0xC0D478", Offset = "0xC0D478", VA = "0xC0D478")]
		public AnalogGlitch()
		{
		}
	}
	[Token(Token = "0x2000247")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x5CB9DC", Offset = "0x5CB9DC")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5CB9DC", Offset = "0x5CB9DC")]
	public class DigitalGlitch : MonoBehaviour
	{
		[Token(Token = "0x4001110")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D258C", Offset = "0x5D258C")]
		private float _intensity;

		[Token(Token = "0x4001111")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Shader _shader;

		[Token(Token = "0x4001112")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Material _material;

		[Token(Token = "0x4001113")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Texture2D _noiseTexture;

		[Token(Token = "0x4001114")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private RenderTexture _trashFrame1;

		[Token(Token = "0x4001115")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private RenderTexture _trashFrame2;

		[Token(Token = "0x170000D7")]
		public float intensity
		{
			[Token(Token = "0x6000F29")]
			[Address(RVA = "0xCCC8DC", Offset = "0xCCC8DC", VA = "0xCCC8DC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000F2A")]
			[Address(RVA = "0xCCC8E4", Offset = "0xCCC8E4", VA = "0xCCC8E4")]
			set
			{
			}
		}

		[Token(Token = "0x6000F2B")]
		[Address(RVA = "0xCCC8EC", Offset = "0xCCC8EC", VA = "0xCCC8EC")]
		private static Color RandomColor()
		{
			return default(Color);
		}

		[Token(Token = "0x6000F2C")]
		[Address(RVA = "0xCCC968", Offset = "0xCCC968", VA = "0xCCC968")]
		private void SetUpResources()
		{
		}

		[Token(Token = "0x6000F2D")]
		[Address(RVA = "0xCCCBC4", Offset = "0xCCCBC4", VA = "0xCCCBC4")]
		private void UpdateNoiseTexture()
		{
		}

		[Token(Token = "0x6000F2E")]
		[Address(RVA = "0xCCCCDC", Offset = "0xCCCCDC", VA = "0xCCCCDC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F2F")]
		[Address(RVA = "0xCCCD48", Offset = "0xCCCD48", VA = "0xCCCD48")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000F30")]
		[Address(RVA = "0xCCCF3C", Offset = "0xCCCF3C", VA = "0xCCCF3C")]
		public DigitalGlitch()
		{
		}
	}
}
namespace Assets.ImagyVFX.Scripts.WiresConnector
{
	[Token(Token = "0x2000248")]
	internal sealed class WiresConnector : MonoBehaviour
	{
		[Token(Token = "0x4001116")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject WiresParticles;

		[Token(Token = "0x4001117")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject LineRendererPrefab;

		[Token(Token = "0x4001118")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool UseSkinnedMeshRenderer;

		[Token(Token = "0x4001119")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public SkinnedMeshRenderer TargetSkinnedMeshRenderer;

		[Token(Token = "0x400111A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float MaxDistance;

		[Token(Token = "0x400111B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public int MaxConnections;

		[Token(Token = "0x400111C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int MaxLineRenderers;

		[Token(Token = "0x400111D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private ParticleSystem _particleSystem;

		[Token(Token = "0x400111E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private ParticleSystem.MainModule _particleSystemMainModule;

		[Token(Token = "0x400111F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private ParticleSystem.Particle[] _particles;

		[Token(Token = "0x4001120")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private LineRenderer[] _lineRenderers;

		[Token(Token = "0x4001121")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Transform _psTransform;

		[Token(Token = "0x6000F31")]
		[Address(RVA = "0xD12A9C", Offset = "0xD12A9C", VA = "0xD12A9C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F32")]
		[Address(RVA = "0xD12D1C", Offset = "0xD12D1C", VA = "0xD12D1C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000F33")]
		[Address(RVA = "0xD13230", Offset = "0xD13230", VA = "0xD13230")]
		private void Stop()
		{
		}

		[Token(Token = "0x6000F34")]
		[Address(RVA = "0xD13320", Offset = "0xD13320", VA = "0xD13320")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000F35")]
		[Address(RVA = "0xD13234", Offset = "0xD13234", VA = "0xD13234")]
		private void DestroyAllLines()
		{
		}

		[Token(Token = "0x6000F36")]
		[Address(RVA = "0xD13324", Offset = "0xD13324", VA = "0xD13324")]
		public WiresConnector()
		{
		}
	}
}
namespace Assets.ImagyVFX.Scripts.Utils
{
	[Token(Token = "0x2000249")]
	public class AnimationUtil : MonoBehaviour
	{
		[Token(Token = "0x4001122")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool RotationOverLifeTime;

		[Token(Token = "0x4001123")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float RotationSpeed;

		[Token(Token = "0x4001124")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool RotateZAxis;

		[Token(Token = "0x6000F37")]
		[Address(RVA = "0xC0E114", Offset = "0xC0E114", VA = "0xC0E114")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F38")]
		[Address(RVA = "0xC0E118", Offset = "0xC0E118", VA = "0xC0E118")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F39")]
		[Address(RVA = "0xC0E1C4", Offset = "0xC0E1C4", VA = "0xC0E1C4")]
		public AnimationUtil()
		{
		}
	}
	[Token(Token = "0x200024A")]
	internal sealed class CircularMovingUtil : MonoBehaviour
	{
		[Token(Token = "0x4001125")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float Freq;

		[Token(Token = "0x4001126")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float Omega;

		[Token(Token = "0x4001127")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float _unit;

		[Token(Token = "0x6000F3A")]
		[Address(RVA = "0x10AA014", Offset = "0x10AA014", VA = "0x10AA014")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F3B")]
		[Address(RVA = "0x10AA160", Offset = "0x10AA160", VA = "0x10AA160")]
		public CircularMovingUtil()
		{
		}
	}
	[Token(Token = "0x200024B")]
	internal sealed class DemoInputConrtoller : MonoBehaviour
	{
		[Token(Token = "0x4001128")]
		private const string SpaceButton = "space";

		[Token(Token = "0x4001129")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private DemoPrefabController _demoController;

		[Token(Token = "0x6000F3C")]
		[Address(RVA = "0xCC6A8C", Offset = "0xCC6A8C", VA = "0xCC6A8C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F3D")]
		[Address(RVA = "0xCC6AE8", Offset = "0xCC6AE8", VA = "0xCC6AE8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F3E")]
		[Address(RVA = "0xCC6B94", Offset = "0xCC6B94", VA = "0xCC6B94")]
		public DemoInputConrtoller()
		{
		}
	}
	[Token(Token = "0x200024C")]
	public sealed class DemoPrefabController : MonoBehaviour
	{
		[Token(Token = "0x400112A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int StartNum;

		[Token(Token = "0x400112B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject[] Prefabs;

		[Token(Token = "0x400112C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GameObject _currentInstance;

		[Token(Token = "0x400112D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int _currentPrefabNum;

		[Token(Token = "0x6000F3F")]
		[Address(RVA = "0xCC6B54", Offset = "0xCC6B54", VA = "0xCC6B54")]
		public void SelectNextPrefab()
		{
		}

		[Token(Token = "0x6000F40")]
		[Address(RVA = "0xCC811C", Offset = "0xCC811C", VA = "0xCC811C")]
		public void SelectePrevPrefab()
		{
		}

		[Token(Token = "0x6000F41")]
		[Address(RVA = "0xCC8160", Offset = "0xCC8160", VA = "0xCC8160")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F42")]
		[Address(RVA = "0xCC7FE4", Offset = "0xCC7FE4", VA = "0xCC7FE4")]
		private void ChangePrefab(int num)
		{
		}

		[Token(Token = "0x6000F43")]
		[Address(RVA = "0xCC816C", Offset = "0xCC816C", VA = "0xCC816C")]
		public DemoPrefabController()
		{
		}
	}
	[Token(Token = "0x200024D")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x5CBA70", Offset = "0x5CBA70")]
	internal sealed class ProjectorTextureAnimation : MonoBehaviour
	{
		[Token(Token = "0x2000458")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CE01C", Offset = "0x5CE01C")]
		private sealed class <UpdateCorutine>d__16 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001C6E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001C6F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001C70")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ProjectorTextureAnimation <>4__this;

			[Token(Token = "0x170002F9")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001B65")]
				[Address(RVA = "0xFF14C4", Offset = "0xFF14C4", VA = "0xFF14C4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002FA")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001B67")]
				[Address(RVA = "0xFF150C", Offset = "0xFF150C", VA = "0xFF150C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001B62")]
			[Address(RVA = "0xFF1370", Offset = "0xFF1370", VA = "0xFF1370")]
			[DebuggerHidden]
			public <UpdateCorutine>d__16(int <>1__state)
			{
			}

			[Token(Token = "0x6001B63")]
			[Address(RVA = "0xFF139C", Offset = "0xFF139C", VA = "0xFF139C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001B64")]
			[Address(RVA = "0xFF13A0", Offset = "0xFF13A0", VA = "0xFF13A0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001B66")]
			[Address(RVA = "0xFF14CC", Offset = "0xFF14CC", VA = "0xFF14CC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400112E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int TilesX;

		[Token(Token = "0x400112F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int TilesY;

		[Token(Token = "0x4001130")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float Fps;

		[Token(Token = "0x4001131")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimationCurve FrameOverTime;

		[Token(Token = "0x4001132")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Projector _projector;

		[Token(Token = "0x4001133")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Material _projectorMaterial;

		[Token(Token = "0x4001134")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material _originalMaterial;

		[Token(Token = "0x4001135")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float _animationLifeTime;

		[Token(Token = "0x4001136")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private int _index;

		[Token(Token = "0x4001137")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int _countOfTextures;

		[Token(Token = "0x4001138")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private int _currentNumOfTexture;

		[Token(Token = "0x4001139")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool _isStarted;

		[Token(Token = "0x400113A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		private bool _isCanceled;

		[Token(Token = "0x400113B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float _animationStartTime;

		[Token(Token = "0x6000F44")]
		[Address(RVA = "0x1208A94", Offset = "0x1208A94", VA = "0x1208A94")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F45")]
		[Address(RVA = "0x1208BA4", Offset = "0x1208BA4", VA = "0x1208BA4")]
		private void Play()
		{
		}

		[Token(Token = "0x6000F46")]
		[Address(RVA = "0x1208DC0", Offset = "0x1208DC0", VA = "0x1208DC0")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D95D0", Offset = "0x5D95D0")]
		private IEnumerator UpdateCorutine()
		{
			return null;
		}

		[Token(Token = "0x6000F47")]
		[Address(RVA = "0x1208E38", Offset = "0x1208E38", VA = "0x1208E38")]
		private void UpdateFrame()
		{
		}

		[Token(Token = "0x6000F48")]
		[Address(RVA = "0x1208F64", Offset = "0x1208F64", VA = "0x1208F64")]
		private void Stop()
		{
		}

		[Token(Token = "0x6000F49")]
		[Address(RVA = "0x1208FA4", Offset = "0x1208FA4", VA = "0x1208FA4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000F4A")]
		[Address(RVA = "0x1208FA8", Offset = "0x1208FA8", VA = "0x1208FA8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000F4B")]
		[Address(RVA = "0x1208FAC", Offset = "0x1208FAC", VA = "0x1208FAC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000F4C")]
		[Address(RVA = "0x1208FB0", Offset = "0x1208FB0", VA = "0x1208FB0")]
		public ProjectorTextureAnimation()
		{
		}
	}
	[Token(Token = "0x200024E")]
	internal sealed class UvAnimation : MonoBehaviour
	{
		[Token(Token = "0x2000459")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CE02C", Offset = "0x5CE02C")]
		private sealed class <UpdateCorutine>d__26 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001C71")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001C72")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001C73")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public UvAnimation <>4__this;

			[Token(Token = "0x170002FB")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001B6B")]
				[Address(RVA = "0x138CB8C", Offset = "0x138CB8C", VA = "0x138CB8C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002FC")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001B6D")]
				[Address(RVA = "0x138CBD4", Offset = "0x138CBD4", VA = "0x138CBD4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001B68")]
			[Address(RVA = "0x138C9F0", Offset = "0x138C9F0", VA = "0x138C9F0")]
			[DebuggerHidden]
			public <UpdateCorutine>d__26(int <>1__state)
			{
			}

			[Token(Token = "0x6001B69")]
			[Address(RVA = "0x138CA1C", Offset = "0x138CA1C", VA = "0x138CA1C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001B6A")]
			[Address(RVA = "0x138CA20", Offset = "0x138CA20", VA = "0x138CA20", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001B6C")]
			[Address(RVA = "0x138CB94", Offset = "0x138CB94", VA = "0x138CB94", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400113C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int TilesX;

		[Token(Token = "0x400113D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int TilesY;

		[Token(Token = "0x400113E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float Fps;

		[Token(Token = "0x400113F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int StartFrameOffset;

		[Token(Token = "0x4001140")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool IsLoop;

		[Token(Token = "0x4001141")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float StartDelay;

		[Token(Token = "0x4001142")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool IsReverse;

		[Token(Token = "0x4001143")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool IsBump;

		[Token(Token = "0x4001144")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AnimationCurve FrameOverTime;

		[Token(Token = "0x4001145")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool _isInizialised;

		[Token(Token = "0x4001146")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private int _index;

		[Token(Token = "0x4001147")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int _count;

		[Token(Token = "0x4001148")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private int _allCount;

		[Token(Token = "0x4001149")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float _animationLifeTime;

		[Token(Token = "0x400114A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private bool _isVisible;

		[Token(Token = "0x400114B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
		private bool _isCorutineStarted;

		[Token(Token = "0x400114C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Renderer _currentRenderer;

		[Token(Token = "0x400114D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material _instanceMaterial;

		[Token(Token = "0x400114E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float _animationStartTime;

		[Token(Token = "0x400114F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private bool _animationStoped;

		[Token(Token = "0x6000F4D")]
		[Address(RVA = "0xD0C3D0", Offset = "0xD0C3D0", VA = "0xD0C3D0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F4E")]
		[Address(RVA = "0xD0C448", Offset = "0xD0C448", VA = "0xD0C448")]
		private void InitDefaultVariables()
		{
		}

		[Token(Token = "0x6000F4F")]
		[Address(RVA = "0xD0C6F0", Offset = "0xD0C6F0", VA = "0xD0C6F0")]
		private void Play()
		{
		}

		[Token(Token = "0x6000F50")]
		[Address(RVA = "0xD0C7FC", Offset = "0xD0C7FC", VA = "0xD0C7FC")]
		private void PlayDelay()
		{
		}

		[Token(Token = "0x6000F51")]
		[Address(RVA = "0xD0C828", Offset = "0xD0C828", VA = "0xD0C828")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000F52")]
		[Address(RVA = "0xD0C860", Offset = "0xD0C860", VA = "0xD0C860")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000F53")]
		[Address(RVA = "0xD0C784", Offset = "0xD0C784", VA = "0xD0C784")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D9630", Offset = "0x5D9630")]
		private IEnumerator UpdateCorutine()
		{
			return null;
		}

		[Token(Token = "0x6000F54")]
		[Address(RVA = "0xD0C8C0", Offset = "0xD0C8C0", VA = "0xD0C8C0")]
		private void UpdateFrame()
		{
		}

		[Token(Token = "0x6000F55")]
		[Address(RVA = "0xD0CA34", Offset = "0xD0CA34", VA = "0xD0CA34")]
		private void UpdateFrameReversed()
		{
		}

		[Token(Token = "0x6000F56")]
		[Address(RVA = "0xD0CBA8", Offset = "0xD0CBA8", VA = "0xD0CBA8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000F57")]
		[Address(RVA = "0xD0CC68", Offset = "0xD0CC68", VA = "0xD0CC68")]
		public UvAnimation()
		{
		}
	}
}
namespace Assets.ImagyVFX.Scripts.MoveableLineRenderer
{
	[Token(Token = "0x200024F")]
	internal sealed class MoveableLineRenderer : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200045A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CE03C", Offset = "0x5CE03C")]
		private sealed class <>c
		{
			[Token(Token = "0x4001C74")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4001C75")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<Point, bool> <>9__11_0;

			[Token(Token = "0x4001C76")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<Point, Vector3> <>9__11_1;

			[Token(Token = "0x6001B6F")]
			[Address(RVA = "0xFECF70", Offset = "0xFECF70", VA = "0xFECF70")]
			public <>c()
			{
			}

			[Token(Token = "0x6001B70")]
			[Address(RVA = "0xFECF78", Offset = "0xFECF78", VA = "0xFECF78")]
			internal bool <Update>b__11_0(Point t)
			{
				return default(bool);
			}

			[Token(Token = "0x6001B71")]
			[Address(RVA = "0xFECF84", Offset = "0xFECF84", VA = "0xFECF84")]
			internal Vector3 <Update>b__11_1(Point t)
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x4001150")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject LineRendererPrefab;

		[Token(Token = "0x4001151")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float MinVertexDistance;

		[Token(Token = "0x4001152")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float LifeTime;

		[Token(Token = "0x4001153")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float Scale;

		[Token(Token = "0x4001154")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float Speed;

		[Token(Token = "0x4001155")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float Height;

		[Token(Token = "0x4001156")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float Gravity;

		[Token(Token = "0x4001157")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private LineRenderer _lineRenderer;

		[Token(Token = "0x4001158")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Point[] _points;

		[Token(Token = "0x4001159")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int _pointsCount;

		[Token(Token = "0x6000F58")]
		[Address(RVA = "0xDF6D18", Offset = "0xDF6D18", VA = "0xDF6D18")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F59")]
		[Address(RVA = "0xDF6E44", Offset = "0xDF6E44", VA = "0xDF6E44")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F5A")]
		[Address(RVA = "0xDF7374", Offset = "0xDF7374", VA = "0xDF7374")]
		private void InsertPoint()
		{
		}

		[Token(Token = "0x6000F5B")]
		[Address(RVA = "0xDF72C8", Offset = "0xDF72C8", VA = "0xDF72C8")]
		private void RemoveOutdatedPoints()
		{
		}

		[Token(Token = "0x6000F5C")]
		[Address(RVA = "0xDF74F8", Offset = "0xDF74F8", VA = "0xDF74F8")]
		private void ApplyTurbulence()
		{
		}

		[Token(Token = "0x6000F5D")]
		[Address(RVA = "0xDF7584", Offset = "0xDF7584", VA = "0xDF7584")]
		public MoveableLineRenderer()
		{
		}
	}
	[Token(Token = "0x2000250")]
	internal sealed class Point
	{
		[Token(Token = "0x400115A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 Position;

		[Token(Token = "0x400115B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private readonly float _timeCreated;

		[Token(Token = "0x170000D8")]
		public float TimeAlive
		{
			[Token(Token = "0x6000F5F")]
			[Address(RVA = "0x1204E2C", Offset = "0x1204E2C", VA = "0x1204E2C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000F5E")]
		[Address(RVA = "0x1204DD8", Offset = "0x1204DD8", VA = "0x1204DD8")]
		public Point(Vector3 position)
		{
		}
	}
	[Token(Token = "0x2000251")]
	internal static class TurbulenceUtil
	{
		[Token(Token = "0x6000F60")]
		[Address(RVA = "0xBCF7A0", Offset = "0xBCF7A0", VA = "0xBCF7A0")]
		public static Vector3 Calc(Vector3 position, float speed, float scale, float height, float gravity)
		{
			return default(Vector3);
		}
	}
}
namespace Assets.ImagyVFX.Scripts.Metaball
{
	[Token(Token = "0x2000252")]
	internal sealed class MetaballController : MonoBehaviour
	{
		[Token(Token = "0x400115C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject MetaballParticles;

		[Token(Token = "0x400115D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject MetaballCamera;

		[Token(Token = "0x400115E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Material MetaballCameraMaterial;

		[Token(Token = "0x400115F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Camera _metaballCamera;

		[Token(Token = "0x4001160")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private GameObject _instMetaballParticles;

		[Token(Token = "0x4001161")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private GameObject _mainCamera;

		[Token(Token = "0x4001162")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private MetaballPostProcessing _metaballPostProcessingComponent;

		[Token(Token = "0x6000F61")]
		[Address(RVA = "0xDF3B3C", Offset = "0xDF3B3C", VA = "0xDF3B3C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F62")]
		[Address(RVA = "0xDF3BAC", Offset = "0xDF3BAC", VA = "0xDF3BAC")]
		private void InstantiateCamera(Transform trMainCamera)
		{
		}

		[Token(Token = "0x6000F63")]
		[Address(RVA = "0xDF3CEC", Offset = "0xDF3CEC", VA = "0xDF3CEC")]
		private void SetupPostProcessing()
		{
		}

		[Token(Token = "0x6000F64")]
		[Address(RVA = "0xDF3D78", Offset = "0xDF3D78", VA = "0xDF3D78")]
		private void InstantiateParticles()
		{
		}

		[Token(Token = "0x6000F65")]
		[Address(RVA = "0xDF3F90", Offset = "0xDF3F90", VA = "0xDF3F90")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000F66")]
		[Address(RVA = "0xDF406C", Offset = "0xDF406C", VA = "0xDF406C")]
		public MetaballController()
		{
		}
	}
	[Token(Token = "0x2000253")]
	internal sealed class MetaballPostProcessing : MonoBehaviour
	{
		[Token(Token = "0x4001163")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Material _material;

		[Token(Token = "0x4001164")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Camera _camera;

		[Token(Token = "0x4001165")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private RenderTexture _renderTexture;

		[Token(Token = "0x6000F67")]
		[Address(RVA = "0xDF3E98", Offset = "0xDF3E98", VA = "0xDF3E98")]
		public void Init(Camera camera, Material material)
		{
		}

		[Token(Token = "0x6000F68")]
		[Address(RVA = "0xDF4074", Offset = "0xDF4074", VA = "0xDF4074")]
		private void OnRenderImage(RenderTexture src, RenderTexture dest)
		{
		}

		[Token(Token = "0x6000F69")]
		[Address(RVA = "0xDF411C", Offset = "0xDF411C", VA = "0xDF411C")]
		public MetaballPostProcessing()
		{
		}
	}
}
namespace Assets.ImagyVFX.Scripts.EffectsSequence
{
	[Token(Token = "0x2000254")]
	internal sealed class EffectsSequence : MonoBehaviour
	{
		[Token(Token = "0x4001166")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SequencePart[] EffectParts;

		[Token(Token = "0x4001167")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool IsLoopBack;

		[Token(Token = "0x4001168")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int _effectIndex;

		[Token(Token = "0x6000F6A")]
		[Address(RVA = "0xA01F30", Offset = "0xA01F30", VA = "0xA01F30")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F6B")]
		[Address(RVA = "0xA01F54", Offset = "0xA01F54", VA = "0xA01F54")]
		private void RunEffect()
		{
		}

		[Token(Token = "0x6000F6C")]
		[Address(RVA = "0xA02000", Offset = "0xA02000", VA = "0xA02000")]
		private void CallNext()
		{
		}

		[Token(Token = "0x6000F6D")]
		[Address(RVA = "0xA02038", Offset = "0xA02038", VA = "0xA02038")]
		public EffectsSequence()
		{
		}
	}
	[Token(Token = "0x2000255")]
	internal sealed class SequencePart : MonoBehaviour
	{
		[Token(Token = "0x4001169")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool ShouldInstantiate;

		[Token(Token = "0x400116A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject EffectPrefab;

		[Token(Token = "0x400116B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float LifeTime;

		[Token(Token = "0x400116C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float CallNextDelay;

		[Token(Token = "0x400116D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float Delay;

		[Token(Token = "0x400116E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform _transformParent;

		[Token(Token = "0x6000F6E")]
		[Address(RVA = "0xA0C1E8", Offset = "0xA0C1E8", VA = "0xA0C1E8")]
		public void Run(Transform transformParent)
		{
		}

		[Token(Token = "0x6000F6F")]
		[Address(RVA = "0xA0C258", Offset = "0xA0C258", VA = "0xA0C258")]
		private void InternalRun()
		{
		}

		[Token(Token = "0x6000F70")]
		[Address(RVA = "0xA0C418", Offset = "0xA0C418", VA = "0xA0C418")]
		public SequencePart()
		{
		}
	}
}
namespace Assets.ImagyVFX.Scripts.CollisionUtils
{
	[Token(Token = "0x2000256")]
	internal sealed class CollisionDetector : MonoBehaviour
	{
		[Token(Token = "0x400116F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float CollisionDistance;

		[Token(Token = "0x4001170")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Transform _transform;

		[Token(Token = "0x1400000A")]
		public event Action<Vector3> CollisionDetected
		{
			[Token(Token = "0x6000F71")]
			[Address(RVA = "0x10AADBC", Offset = "0x10AADBC", VA = "0x10AADBC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D9690", Offset = "0x5D9690")]
			add
			{
			}
			[Token(Token = "0x6000F72")]
			[Address(RVA = "0x10AAE5C", Offset = "0x10AAE5C", VA = "0x10AAE5C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D96A0", Offset = "0x5D96A0")]
			remove
			{
			}
		}

		[Token(Token = "0x6000F73")]
		[Address(RVA = "0x10AAEFC", Offset = "0x10AAEFC", VA = "0x10AAEFC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F74")]
		[Address(RVA = "0x10AAF2C", Offset = "0x10AAF2C", VA = "0x10AAF2C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000F75")]
		[Address(RVA = "0x10AB070", Offset = "0x10AB070", VA = "0x10AB070")]
		public CollisionDetector()
		{
		}
	}
	[Token(Token = "0x2000257")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x5CBAD0", Offset = "0x5CBAD0")]
	internal sealed class CollisionSpawner : MonoBehaviour
	{
		[Token(Token = "0x4001172")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject CollisionEffectPrefab;

		[Token(Token = "0x4001173")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float LifeTime;

		[Token(Token = "0x4001174")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool SpawnDecal;

		[Token(Token = "0x4001175")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject DecalPrefab;

		[Token(Token = "0x4001176")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool _isAlreadySpawned;

		[Token(Token = "0x4001177")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private CollisionDetector _collisionDetector;

		[Token(Token = "0x6000F76")]
		[Address(RVA = "0x10AB078", Offset = "0x10AB078", VA = "0x10AB078")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F77")]
		[Address(RVA = "0x10AB14C", Offset = "0x10AB14C", VA = "0x10AB14C")]
		private void OnCollisionDetected(Vector3 hit)
		{
		}

		[Token(Token = "0x6000F78")]
		[Address(RVA = "0x10AB1F8", Offset = "0x10AB1F8", VA = "0x10AB1F8")]
		private void InstantiateImpactEffect(Vector3 pos)
		{
		}

		[Token(Token = "0x6000F79")]
		[Address(RVA = "0x10AB324", Offset = "0x10AB324", VA = "0x10AB324")]
		private void InstantiateDecal(Vector3 pos)
		{
		}

		[Token(Token = "0x6000F7A")]
		[Address(RVA = "0x10AB450", Offset = "0x10AB450", VA = "0x10AB450")]
		private void Reset()
		{
		}

		[Token(Token = "0x6000F7B")]
		[Address(RVA = "0x10AB458", Offset = "0x10AB458", VA = "0x10AB458")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000F7C")]
		[Address(RVA = "0x10AB4FC", Offset = "0x10AB4FC", VA = "0x10AB4FC")]
		public CollisionSpawner()
		{
		}
	}
}
namespace VRUiKits.Utils
{
	[Token(Token = "0x2000258")]
	public class ImageHoverOutline : MonoBehaviour, IPointerEnterHandler, IEventSystemHandler, IPointerExitHandler
	{
		[Token(Token = "0x4001178")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Image targetImage;

		[Token(Token = "0x4001179")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Color outlineColor;

		[Token(Token = "0x400117A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float outlineWidth;

		[Token(Token = "0x400117B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private UnityEngine.UI.Outline outline;

		[Token(Token = "0x170000D9")]
		private UnityEngine.UI.Outline _Outline
		{
			[Token(Token = "0x6000F7D")]
			[Address(RVA = "0xA51654", Offset = "0xA51654", VA = "0xA51654")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F7E")]
		[Address(RVA = "0xA51814", Offset = "0xA51814", VA = "0xA51814", Slot = "4")]
		public void OnPointerEnter(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000F7F")]
		[Address(RVA = "0xA518B8", Offset = "0xA518B8", VA = "0xA518B8", Slot = "5")]
		public void OnPointerExit(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000F80")]
		[Address(RVA = "0xA5195C", Offset = "0xA5195C", VA = "0xA5195C")]
		public ImageHoverOutline()
		{
		}
	}
	[Token(Token = "0x2000259")]
	public class TextHoverScale : MonoBehaviour, IPointerEnterHandler, IEventSystemHandler, IPointerExitHandler
	{
		[Token(Token = "0x400117C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Text targetText;

		[Token(Token = "0x400117D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float scale;

		[Token(Token = "0x400117E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int originSize;

		[Token(Token = "0x170000DA")]
		private Text TargetText
		{
			[Token(Token = "0x6000F81")]
			[Address(RVA = "0xE8D9CC", Offset = "0xE8D9CC", VA = "0xE8D9CC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F82")]
		[Address(RVA = "0xE8DAC8", Offset = "0xE8DAC8", VA = "0xE8DAC8", Slot = "4")]
		public void OnPointerEnter(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000F83")]
		[Address(RVA = "0xE8DC30", Offset = "0xE8DC30", VA = "0xE8DC30", Slot = "5")]
		public void OnPointerExit(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000F84")]
		[Address(RVA = "0xE8DCD4", Offset = "0xE8DCD4", VA = "0xE8DCD4")]
		public TextHoverScale()
		{
		}
	}
	[Token(Token = "0x200025A")]
	public class GazeInputModule : UIKitInputModule
	{
		[Token(Token = "0x400117F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool previewWithoutHeadset;

		[Token(Token = "0x4001180")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		public bool preventRepeatClick;

		[Token(Token = "0x4001181")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public RaycastResult currentRaycast;

		[Token(Token = "0x4001182")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static GazeInputModule Instance;

		[Token(Token = "0x4001183")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private PointerEventData pointerEventData;

		[Token(Token = "0x4001184")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private PointerEventData lastPressedEventData;

		[Token(Token = "0x4001185")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private GameObject currentTarget;

		[Token(Token = "0x4001186")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private float currentClickTime;

		[Token(Token = "0x6000F85")]
		[Address(RVA = "0x13EB848", Offset = "0x13EB848", VA = "0x13EB848")]
		protected GazeInputModule()
		{
		}

		[Token(Token = "0x6000F86")]
		[Address(RVA = "0x13EB8A8", Offset = "0x13EB8A8", VA = "0x13EB8A8", Slot = "17")]
		public override void Process()
		{
		}

		[Token(Token = "0x6000F87")]
		[Address(RVA = "0x13EB8CC", Offset = "0x13EB8CC", VA = "0x13EB8CC")]
		private void GazeControl()
		{
		}

		[Token(Token = "0x6000F88")]
		[Address(RVA = "0x13EBABC", Offset = "0x13EBABC", VA = "0x13EBABC")]
		private void HandleSelection()
		{
		}

		[Token(Token = "0x6000F89")]
		[Address(RVA = "0x13EBDF0", Offset = "0x13EBDF0", VA = "0x13EBDF0")]
		private void ReleaseLastPress()
		{
		}

		[Token(Token = "0x6000F8A")]
		[Address(RVA = "0x13EBEF0", Offset = "0x13EBEF0", VA = "0x13EBEF0", Slot = "23")]
		public override void ActivateModule()
		{
		}

		[Token(Token = "0x6000F8B")]
		[Address(RVA = "0x13EBFB8", Offset = "0x13EBFB8", VA = "0x13EBFB8", Slot = "22")]
		public override void DeactivateModule()
		{
		}

		[Token(Token = "0x6000F8C")]
		[Address(RVA = "0x13EBFE0", Offset = "0x13EBFE0", VA = "0x13EBFE0")]
		protected void ClearSelection()
		{
		}

		[Token(Token = "0x6000F8D")]
		[Address(RVA = "0x13EC028", Offset = "0x13EC028", VA = "0x13EC028", Slot = "26")]
		protected virtual void ProcessMove(PointerEventData pointerEvent)
		{
		}
	}
	[Token(Token = "0x200025B")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x5CBB30", Offset = "0x5CBB30")]
	public class LaserInputModule : UIKitInputModule
	{
		[Token(Token = "0x4001187")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public VRPlatform platform;

		[Token(Token = "0x4001188")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public Pointer pointer;

		[Token(Token = "0x4001189")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GameObject currentTarget;

		[Token(Token = "0x400118A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float currentClickTime;

		[Token(Token = "0x400118B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static LaserInputModule _instance;

		[Token(Token = "0x400118C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Camera helperCamera;

		[Token(Token = "0x400118D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private UIKitPointer controller;

		[Token(Token = "0x400118E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private bool triggerPressed;

		[Token(Token = "0x400118F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
		private bool triggerPressedLastFrame;

		[Token(Token = "0x4001190")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private PointerEventData pointerEventData;

		[Token(Token = "0x4001191")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector3 lastRaycastHitPoint;

		[Token(Token = "0x4001192")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private float pressedDistance;

		[Token(Token = "0x170000DB")]
		public static LaserInputModule instance
		{
			[Token(Token = "0x6000F8E")]
			[Address(RVA = "0xA62DB0", Offset = "0xA62DB0", VA = "0xA62DB0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F8F")]
		[Address(RVA = "0xA62E14", Offset = "0xA62E14", VA = "0xA62E14", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000F90")]
		[Address(RVA = "0xA62FEC", Offset = "0xA62FEC", VA = "0xA62FEC", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000F91")]
		[Address(RVA = "0xA632EC", Offset = "0xA632EC", VA = "0xA632EC")]
		private void OnSceneLoaded(Scene scene, LoadSceneMode mode)
		{
		}

		[Token(Token = "0x6000F92")]
		[Address(RVA = "0xA631F8", Offset = "0xA631F8", VA = "0xA631F8")]
		private void SetCanvasCamera()
		{
		}

		[Token(Token = "0x6000F93")]
		[Address(RVA = "0xA632E8", Offset = "0xA632E8", VA = "0xA632E8")]
		private void SetupHmd()
		{
		}

		[Token(Token = "0x6000F94")]
		[Address(RVA = "0xA632F0", Offset = "0xA632F0", VA = "0xA632F0")]
		public void SetController(UIKitPointer _controller)
		{
		}

		[Token(Token = "0x6000F95")]
		[Address(RVA = "0xA632F8", Offset = "0xA632F8", VA = "0xA632F8")]
		public void RemoveController(UIKitPointer _controller)
		{
		}

		[Token(Token = "0x6000F96")]
		[Address(RVA = "0xA633C4", Offset = "0xA633C4", VA = "0xA633C4", Slot = "17")]
		public override void Process()
		{
		}

		[Token(Token = "0x6000F97")]
		[Address(RVA = "0xA63474", Offset = "0xA63474", VA = "0xA63474")]
		private void UpdateHelperCamera()
		{
		}

		[Token(Token = "0x6000F98")]
		[Address(RVA = "0xA637B4", Offset = "0xA637B4", VA = "0xA637B4")]
		private void CheckTriggerStatus()
		{
		}

		[Token(Token = "0x6000F99")]
		[Address(RVA = "0xA63518", Offset = "0xA63518", VA = "0xA63518")]
		private void ProcessGazePointer()
		{
		}

		[Token(Token = "0x6000F9A")]
		[Address(RVA = "0xA6380C", Offset = "0xA6380C", VA = "0xA6380C")]
		private void ProcessLaserPointer()
		{
		}

		[Token(Token = "0x6000F9B")]
		[Address(RVA = "0xA63E3C", Offset = "0xA63E3C", VA = "0xA63E3C")]
		private void ProcessPress(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000F9C")]
		[Address(RVA = "0xA63AF0", Offset = "0xA63AF0", VA = "0xA63AF0")]
		private PointerEventData GetPointerEventData()
		{
			return null;
		}

		[Token(Token = "0x6000F9D")]
		[Address(RVA = "0xA64910", Offset = "0xA64910", VA = "0xA64910")]
		private bool TriggerReleasedThisFrame()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F9E")]
		[Address(RVA = "0xA648F0", Offset = "0xA648F0", VA = "0xA648F0")]
		private bool TriggerPressedThisFrame()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F9F")]
		[Address(RVA = "0xA6398C", Offset = "0xA6398C", VA = "0xA6398C")]
		private bool SendUpdateEventToSelectedObject()
		{
			return default(bool);
		}

		[Token(Token = "0x6000FA0")]
		[Address(RVA = "0xA64930", Offset = "0xA64930", VA = "0xA64930", Slot = "23")]
		public override void ActivateModule()
		{
		}

		[Token(Token = "0x6000FA1")]
		[Address(RVA = "0xA649F8", Offset = "0xA649F8", VA = "0xA649F8", Slot = "22")]
		public override void DeactivateModule()
		{
		}

		[Token(Token = "0x6000FA2")]
		[Address(RVA = "0xA64A20", Offset = "0xA64A20", VA = "0xA64A20")]
		protected void ClearSelection()
		{
		}

		[Token(Token = "0x6000FA3")]
		[Address(RVA = "0xA64A68", Offset = "0xA64A68", VA = "0xA64A68")]
		private bool ShouldStartDrag(float threshold, bool useDragThreshold)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FA4")]
		[Address(RVA = "0xA64A84", Offset = "0xA64A84", VA = "0xA64A84", Slot = "26")]
		protected virtual void ProcessMove(PointerEventData pointerEvent)
		{
		}

		[Token(Token = "0x6000FA5")]
		[Address(RVA = "0xA645EC", Offset = "0xA645EC", VA = "0xA645EC")]
		private void ProcessDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000FA6")]
		[Address(RVA = "0xA64AD0", Offset = "0xA64AD0", VA = "0xA64AD0")]
		public LaserInputModule()
		{
		}
	}
	[Token(Token = "0x200025C")]
	public enum VRPlatform
	{
		[Token(Token = "0x4001194")]
		NONE,
		[Token(Token = "0x4001195")]
		OCULUS,
		[Token(Token = "0x4001196")]
		VIVE,
		[Token(Token = "0x4001197")]
		VIVE_STEAM2
	}
	[Token(Token = "0x200025D")]
	public enum Pointer
	{
		[Token(Token = "0x4001199")]
		RightHand,
		[Token(Token = "0x400119A")]
		LeftHand,
		[Token(Token = "0x400119B")]
		Eye
	}
	[Token(Token = "0x200025E")]
	public class MouseInputModule : StandaloneInputModule
	{
		[Token(Token = "0x6000FA8")]
		[Address(RVA = "0xDF5788", Offset = "0xDF5788", VA = "0xDF5788", Slot = "17")]
		public override void Process()
		{
		}

		[Token(Token = "0x6000FA9")]
		[Address(RVA = "0xDF57EC", Offset = "0xDF57EC", VA = "0xDF57EC")]
		protected new void ProcessMouseEvent()
		{
		}

		[Token(Token = "0x6000FAA")]
		[Address(RVA = "0xDF5A74", Offset = "0xDF5A74", VA = "0xDF5A74")]
		private static bool UseMouse(bool pressed, bool released, PointerEventData pointerData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FAB")]
		[Address(RVA = "0xDF5AC8", Offset = "0xDF5AC8", VA = "0xDF5AC8")]
		protected new void ProcessMousePress(MouseButtonEventData data)
		{
		}

		[Token(Token = "0x6000FAC")]
		[Address(RVA = "0xDF61D8", Offset = "0xDF61D8", VA = "0xDF61D8")]
		public MouseInputModule()
		{
		}
	}
	[Token(Token = "0x200025F")]
	public class GazeProgressCircle : MonoBehaviour
	{
		[Token(Token = "0x200045B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CE04C", Offset = "0x5CE04C")]
		private sealed class <FillCircle>d__5 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001C77")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001C78")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001C79")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GazeProgressCircle <>4__this;

			[Token(Token = "0x4001C7A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <timer>5__2;

			[Token(Token = "0x170002FD")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001B75")]
				[Address(RVA = "0x7EADBC", Offset = "0x7EADBC", VA = "0x7EADBC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002FE")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001B77")]
				[Address(RVA = "0x7EAE04", Offset = "0x7EAE04", VA = "0x7EAE04", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001B72")]
			[Address(RVA = "0x7EAC24", Offset = "0x7EAC24", VA = "0x7EAC24")]
			[DebuggerHidden]
			public <FillCircle>d__5(int <>1__state)
			{
			}

			[Token(Token = "0x6001B73")]
			[Address(RVA = "0x7EAC50", Offset = "0x7EAC50", VA = "0x7EAC50", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001B74")]
			[Address(RVA = "0x7EAC54", Offset = "0x7EAC54", VA = "0x7EAC54", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001B76")]
			[Address(RVA = "0x7EADC4", Offset = "0x7EADC4", VA = "0x7EADC4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400119C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Image circle;

		[Token(Token = "0x400119D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Coroutine fillCircle;

		[Token(Token = "0x400119E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private UIKitInputModule m_inputModule;

		[Token(Token = "0x6000FAD")]
		[Address(RVA = "0x13EC074", Offset = "0x13EC074", VA = "0x13EC074")]
		private void Start()
		{
		}

		[Token(Token = "0x6000FAE")]
		[Address(RVA = "0x13EC164", Offset = "0x13EC164", VA = "0x13EC164")]
		private void HandleProgressCircle(GameObject target)
		{
		}

		[Token(Token = "0x6000FAF")]
		[Address(RVA = "0x13EC310", Offset = "0x13EC310", VA = "0x13EC310")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D96B0", Offset = "0x5D96B0")]
		private IEnumerator FillCircle()
		{
			return null;
		}

		[Token(Token = "0x6000FB0")]
		[Address(RVA = "0x13EC234", Offset = "0x13EC234", VA = "0x13EC234")]
		private void ResetGazer()
		{
		}

		[Token(Token = "0x6000FB1")]
		[Address(RVA = "0x13EC388", Offset = "0x13EC388", VA = "0x13EC388")]
		public GazeProgressCircle()
		{
		}
	}
	[Token(Token = "0x2000260")]
	public class LaserPointer : MonoBehaviour
	{
		[Token(Token = "0x400119F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private LineRenderer lr;

		[Token(Token = "0x6000FB2")]
		[Address(RVA = "0x102C3A4", Offset = "0x102C3A4", VA = "0x102C3A4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000FB3")]
		[Address(RVA = "0x102C400", Offset = "0x102C400", VA = "0x102C400")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000FB4")]
		[Address(RVA = "0x102C5A8", Offset = "0x102C5A8", VA = "0x102C5A8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000FB5")]
		[Address(RVA = "0x102C668", Offset = "0x102C668", VA = "0x102C668")]
		public LaserPointer()
		{
		}
	}
	[Token(Token = "0x2000261")]
	public class UIKitPointer : MonoBehaviour
	{
		[Token(Token = "0x40011A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject gazePointer;

		[Token(Token = "0x40011A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject laser;

		[Token(Token = "0x40011A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Pointer? temp;

		[Token(Token = "0x6000FB6")]
		[Address(RVA = "0xBD1908", Offset = "0xBD1908", VA = "0xBD1908")]
		private void Start()
		{
		}

		[Token(Token = "0x6000FB7")]
		[Address(RVA = "0xBD1A6C", Offset = "0xBD1A6C", VA = "0xBD1A6C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000FB8")]
		[Address(RVA = "0xBD1C54", Offset = "0xBD1C54", VA = "0xBD1C54")]
		private void ResetTransform(Transform trans)
		{
		}

		[Token(Token = "0x6000FB9")]
		[Address(RVA = "0xBD1CB0", Offset = "0xBD1CB0", VA = "0xBD1CB0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000FBA")]
		[Address(RVA = "0xBD1E14", Offset = "0xBD1E14", VA = "0xBD1E14")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000FBB")]
		[Address(RVA = "0xBD1F78", Offset = "0xBD1F78", VA = "0xBD1F78")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000FBC")]
		[Address(RVA = "0xBD20DC", Offset = "0xBD20DC", VA = "0xBD20DC")]
		public UIKitPointer()
		{
		}
	}
	[Token(Token = "0x2000262")]
	public class UIKitInputModule : BaseInputModule
	{
		[Token(Token = "0x200045C")]
		public delegate void OnGazeChangedHandler(GameObject target);

		[Token(Token = "0x40011A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[HideInInspector]
		public float gazeTimeInSeconds;

		[Token(Token = "0x40011A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[HideInInspector]
		public float delayTimeInSeconds;

		[Token(Token = "0x1400000B")]
		public event OnGazeChangedHandler OnGazeChanged
		{
			[Token(Token = "0x6000FBD")]
			[Address(RVA = "0xBD179C", Offset = "0xBD179C", VA = "0xBD179C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D9710", Offset = "0x5D9710")]
			add
			{
			}
			[Token(Token = "0x6000FBE")]
			[Address(RVA = "0xBD183C", Offset = "0xBD183C", VA = "0xBD183C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D9720", Offset = "0x5D9720")]
			remove
			{
			}
		}

		[Token(Token = "0x6000FBF")]
		[Address(RVA = "0xBD18DC", Offset = "0xBD18DC", VA = "0xBD18DC")]
		protected void RaiseGazeChangeEvent(GameObject target)
		{
		}

		[Token(Token = "0x6000FC0")]
		[Address(RVA = "0xBD18F0", Offset = "0xBD18F0", VA = "0xBD18F0", Slot = "17")]
		public override void Process()
		{
		}

		[Token(Token = "0x6000FC1")]
		[Address(RVA = "0xBD18F4", Offset = "0xBD18F4", VA = "0xBD18F4")]
		public UIKitInputModule()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000263")]
	public class Card
	{
		[Token(Token = "0x40011A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string title;

		[Token(Token = "0x40011A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string subtitle;

		[Token(Token = "0x40011A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string description;

		[Token(Token = "0x40011A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Sprite image;

		[Token(Token = "0x6000FC2")]
		[Address(RVA = "0x10A8570", Offset = "0x10A8570", VA = "0x10A8570")]
		public Card()
		{
		}
	}
	[Token(Token = "0x2000264")]
	public class CardItem : MonoBehaviour
	{
		[Token(Token = "0x200045D")]
		public delegate void OnCardClickedHandler(Card card);

		[Token(Token = "0x40011AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform title;

		[Token(Token = "0x40011AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform subtitle;

		[Token(Token = "0x40011AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform description;

		[Token(Token = "0x40011AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Image image;

		[Token(Token = "0x40011AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Card card;

		[Token(Token = "0x170000DC")]
		public Text Title
		{
			[Token(Token = "0x6000FC5")]
			[Address(RVA = "0x10A86B8", Offset = "0x10A86B8", VA = "0x10A86B8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000DD")]
		public Text Subtitle
		{
			[Token(Token = "0x6000FC6")]
			[Address(RVA = "0x10A875C", Offset = "0x10A875C", VA = "0x10A875C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000DE")]
		public Text Description
		{
			[Token(Token = "0x6000FC7")]
			[Address(RVA = "0x10A8800", Offset = "0x10A8800", VA = "0x10A8800")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000DF")]
		public Card Card
		{
			[Token(Token = "0x6000FC8")]
			[Address(RVA = "0x10A88A4", Offset = "0x10A88A4", VA = "0x10A88A4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FC9")]
			[Address(RVA = "0x10A88AC", Offset = "0x10A88AC", VA = "0x10A88AC")]
			set
			{
			}
		}

		[Token(Token = "0x1400000C")]
		public event OnCardClickedHandler OnCardClicked
		{
			[Token(Token = "0x6000FC3")]
			[Address(RVA = "0x10A8578", Offset = "0x10A8578", VA = "0x10A8578")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D9730", Offset = "0x5D9730")]
			add
			{
			}
			[Token(Token = "0x6000FC4")]
			[Address(RVA = "0x10A8618", Offset = "0x10A8618", VA = "0x10A8618")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D9740", Offset = "0x5D9740")]
			remove
			{
			}
		}

		[Token(Token = "0x6000FCA")]
		[Address(RVA = "0x10A8A94", Offset = "0x10A8A94", VA = "0x10A8A94")]
		public void Awake()
		{
		}

		[Token(Token = "0x6000FCB")]
		[Address(RVA = "0x10A8BB0", Offset = "0x10A8BB0", VA = "0x10A8BB0")]
		public CardItem()
		{
		}

		[Token(Token = "0x6000FCC")]
		[Address(RVA = "0x10A8BB8", Offset = "0x10A8BB8", VA = "0x10A8BB8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D9750", Offset = "0x5D9750")]
		private void <Awake>b__18_0()
		{
		}
	}
	[Token(Token = "0x2000265")]
	public class CardListManager : MonoBehaviour
	{
		[Token(Token = "0x40011B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform listContent;

		[Token(Token = "0x40011B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject itemTemplate;

		[Token(Token = "0x40011B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public List<Card> cardList;

		[Token(Token = "0x40011B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<CardItem> cardItems;

		[Token(Token = "0x40011B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		public Card selectedCard;

		[Token(Token = "0x6000FCD")]
		[Address(RVA = "0x10A8BDC", Offset = "0x10A8BDC", VA = "0x10A8BDC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000FCE")]
		[Address(RVA = "0x10A8CB4", Offset = "0x10A8CB4", VA = "0x10A8CB4")]
		private void SetSelectedCard(Card card)
		{
		}

		[Token(Token = "0x6000FCF")]
		[Address(RVA = "0x10A8CBC", Offset = "0x10A8CBC", VA = "0x10A8CBC")]
		public void Reset()
		{
		}

		[Token(Token = "0x6000FD0")]
		[Address(RVA = "0x10A8C14", Offset = "0x10A8C14", VA = "0x10A8C14")]
		public void PopulateList()
		{
		}

		[Token(Token = "0x6000FD1")]
		[Address(RVA = "0x10A8E08", Offset = "0x10A8E08", VA = "0x10A8E08")]
		public void AddCardItem(Card card)
		{
		}

		[Token(Token = "0x6000FD2")]
		[Address(RVA = "0x10A8F5C", Offset = "0x10A8F5C", VA = "0x10A8F5C")]
		public CardListManager()
		{
		}
	}
	[Token(Token = "0x2000266")]
	public class InputFocusHelper : MonoBehaviour, ISelectHandler, IEventSystemHandler, IPointerClickHandler, IEndDragHandler
	{
		[Token(Token = "0x200045E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CE05C", Offset = "0x5CE05C")]
		private sealed class <ActivateInputFieldWithCaret>d__9 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001C7B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001C7C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001C7D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public InputFocusHelper <>4__this;

			[Token(Token = "0x4001C7E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public bool isMoveCaretToEnd;

			[Token(Token = "0x170002FF")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001B83")]
				[Address(RVA = "0x7EBEF0", Offset = "0x7EBEF0", VA = "0x7EBEF0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000300")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001B85")]
				[Address(RVA = "0x7EBF38", Offset = "0x7EBF38", VA = "0x7EBF38", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001B80")]
			[Address(RVA = "0x7EBDD0", Offset = "0x7EBDD0", VA = "0x7EBDD0")]
			[DebuggerHidden]
			public <ActivateInputFieldWithCaret>d__9(int <>1__state)
			{
			}

			[Token(Token = "0x6001B81")]
			[Address(RVA = "0x7EBDFC", Offset = "0x7EBDFC", VA = "0x7EBDFC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001B82")]
			[Address(RVA = "0x7EBE00", Offset = "0x7EBE00", VA = "0x7EBE00", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001B84")]
			[Address(RVA = "0x7EBEF8", Offset = "0x7EBEF8", VA = "0x7EBEF8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40011B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private InputField input;

		[Token(Token = "0x40011B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int caretPosition;

		[Token(Token = "0x40011B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int selectionAnchorPosition;

		[Token(Token = "0x40011B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int selectionFocusPosition;

		[Token(Token = "0x40011B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float originColorAlpha;

		[Token(Token = "0x6000FD3")]
		[Address(RVA = "0xA51E30", Offset = "0xA51E30", VA = "0xA51E30")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000FD4")]
		[Address(RVA = "0xA51EA4", Offset = "0xA51EA4", VA = "0xA51EA4", Slot = "4")]
		public void OnSelect(BaseEventData eventData)
		{
		}

		[Token(Token = "0x6000FD5")]
		[Address(RVA = "0xA52060", Offset = "0xA52060", VA = "0xA52060", Slot = "5")]
		public void OnPointerClick(PointerEventData pointerEventData)
		{
		}

		[Token(Token = "0x6000FD6")]
		[Address(RVA = "0xA520C8", Offset = "0xA520C8", VA = "0xA520C8", Slot = "7")]
		public virtual void OnEndDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000FD7")]
		[Address(RVA = "0xA51FD4", Offset = "0xA51FD4", VA = "0xA51FD4")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D9760", Offset = "0x5D9760")]
		private IEnumerator ActivateInputFieldWithCaret(bool isMoveCaretToEnd)
		{
			return null;
		}

		[Token(Token = "0x6000FD8")]
		[Address(RVA = "0xA520CC", Offset = "0xA520CC", VA = "0xA520CC")]
		public void ForceActivate()
		{
		}

		[Token(Token = "0x6000FD9")]
		[Address(RVA = "0xA52064", Offset = "0xA52064", VA = "0xA52064")]
		public void StorePositionInfo()
		{
		}

		[Token(Token = "0x6000FDA")]
		[Address(RVA = "0xA520E8", Offset = "0xA520E8", VA = "0xA520E8")]
		private void SetPosition()
		{
		}

		[Token(Token = "0x6000FDB")]
		[Address(RVA = "0xA52140", Offset = "0xA52140", VA = "0xA52140")]
		private void SetSelectionAlpha(float alpha)
		{
		}

		[Token(Token = "0x6000FDC")]
		[Address(RVA = "0xA5216C", Offset = "0xA5216C", VA = "0xA5216C")]
		public InputFocusHelper()
		{
		}
	}
	[Token(Token = "0x2000267")]
	public class UIKitInputField : MonoBehaviour, ISelectHandler, IEventSystemHandler, IPointerClickHandler, IDeselectHandler
	{
		[Token(Token = "0x200045F")]
		public enum ContentType
		{
			[Token(Token = "0x4001C80")]
			Standard,
			[Token(Token = "0x4001C81")]
			Password
		}

		[Token(Token = "0x2000460")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CE06C", Offset = "0x5CE06C")]
		private sealed class <BlinkCaret>d__22 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001C82")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001C83")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001C84")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public UIKitInputField <>4__this;

			[Token(Token = "0x17000301")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001B89")]
				[Address(RVA = "0x138C094", Offset = "0x138C094", VA = "0x138C094", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000302")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001B8B")]
				[Address(RVA = "0x138C0DC", Offset = "0x138C0DC", VA = "0x138C0DC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001B86")]
			[Address(RVA = "0x138BF38", Offset = "0x138BF38", VA = "0x138BF38")]
			[DebuggerHidden]
			public <BlinkCaret>d__22(int <>1__state)
			{
			}

			[Token(Token = "0x6001B87")]
			[Address(RVA = "0x138BF64", Offset = "0x138BF64", VA = "0x138BF64", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001B88")]
			[Address(RVA = "0x138BF68", Offset = "0x138BF68", VA = "0x138BF68", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001B8A")]
			[Address(RVA = "0x138C09C", Offset = "0x138C09C", VA = "0x138C09C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40011BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RectTransform wrapper;

		[Token(Token = "0x40011BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RectTransform m_textTransform;

		[Token(Token = "0x40011BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public RectTransform m_placeholderTransform;

		[Token(Token = "0x40011BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public RectTransform m_caretTransform;

		[Token(Token = "0x40011BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string text;

		[Token(Token = "0x40011BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int characterLimit;

		[Token(Token = "0x40011C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public ContentType contentType;

		[Token(Token = "0x40011C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D264C", Offset = "0x5D264C")]
		public float caretBlinkRate;

		[Token(Token = "0x40011C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float maxW_textComponent;

		[Token(Token = "0x40011C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private string displayedText;

		[Token(Token = "0x40011C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private string prevText;

		[Token(Token = "0x40011C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Text textComponent;

		[Token(Token = "0x40011C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Text caretText;

		[Token(Token = "0x40011C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Text placeholder;

		[Token(Token = "0x6000FDD")]
		[Address(RVA = "0xBD1038", Offset = "0xBD1038", VA = "0xBD1038")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000FDE")]
		[Address(RVA = "0xBD112C", Offset = "0xBD112C", VA = "0xBD112C", Slot = "4")]
		public void OnSelect(BaseEventData eventData)
		{
		}

		[Token(Token = "0x6000FDF")]
		[Address(RVA = "0xBD1244", Offset = "0xBD1244", VA = "0xBD1244", Slot = "5")]
		public void OnPointerClick(PointerEventData pointerEventData)
		{
		}

		[Token(Token = "0x6000FE0")]
		[Address(RVA = "0xBD12CC", Offset = "0xBD12CC", VA = "0xBD12CC", Slot = "6")]
		public void OnDeselect(BaseEventData eventData)
		{
		}

		[Token(Token = "0x6000FE1")]
		[Address(RVA = "0xBD11E4", Offset = "0xBD11E4", VA = "0xBD11E4")]
		public void ForceCaretUpdate()
		{
		}

		[Token(Token = "0x6000FE2")]
		[Address(RVA = "0xBD1340", Offset = "0xBD1340", VA = "0xBD1340")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000FE3")]
		[Address(RVA = "0xBD14AC", Offset = "0xBD14AC", VA = "0xBD14AC")]
		private void CalculateLengthOfText(string text)
		{
		}

		[Token(Token = "0x6000FE4")]
		[Address(RVA = "0xBD16BC", Offset = "0xBD16BC", VA = "0xBD16BC")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D97C0", Offset = "0x5D97C0")]
		private IEnumerator BlinkCaret()
		{
			return null;
		}

		[Token(Token = "0x6000FE5")]
		[Address(RVA = "0xBD1734", Offset = "0xBD1734", VA = "0xBD1734")]
		public UIKitInputField()
		{
		}
	}
	[Token(Token = "0x2000268")]
	public class KeyboardExtentionMethods : MonoBehaviour
	{
		[Token(Token = "0x40011C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject symbols;

		[Token(Token = "0x40011C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject alphabets;

		[Token(Token = "0x6000FE6")]
		[Address(RVA = "0xA585E4", Offset = "0xA585E4", VA = "0xA585E4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000FE7")]
		[Address(RVA = "0xA58710", Offset = "0xA58710", VA = "0xA58710")]
		public void SwitchSymbols()
		{
		}

		[Token(Token = "0x6000FE8")]
		[Address(RVA = "0xA58738", Offset = "0xA58738", VA = "0xA58738")]
		public void ToggleObject(GameObject go)
		{
		}

		[Token(Token = "0x6000FE9")]
		[Address(RVA = "0xA58784", Offset = "0xA58784", VA = "0xA58784")]
		public KeyboardExtentionMethods()
		{
		}
	}
	[Token(Token = "0x2000269")]
	public class KeyboardManager : MonoBehaviour
	{
		[Token(Token = "0x2000461")]
		public delegate void OnInputValueUpdatedHandler(string value);

		[Serializable]
		[Token(Token = "0x2000462")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CE07C", Offset = "0x5CE07C")]
		private sealed class <>c
		{
			[Token(Token = "0x4001C85")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4001C86")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Action <>9__18_0;

			[Token(Token = "0x4001C87")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<bool> <>9__25_0;

			[Token(Token = "0x6001B91")]
			[Address(RVA = "0x7EDF00", Offset = "0x7EDF00", VA = "0x7EDF00")]
			public <>c()
			{
			}

			[Token(Token = "0x6001B92")]
			[Address(RVA = "0x7EDF08", Offset = "0x7EDF08", VA = "0x7EDF08")]
			internal void <Backspace>b__18_0()
			{
			}

			[Token(Token = "0x6001B93")]
			[Address(RVA = "0x7EDF78", Offset = "0x7EDF78", VA = "0x7EDF78")]
			internal bool <WaitTargetProcessEvent>b__25_0()
			{
				return default(bool);
			}
		}

		[Token(Token = "0x2000463")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CE08C", Offset = "0x5CE08C")]
		private sealed class <>c__DisplayClass22_0
		{
			[Token(Token = "0x4001C88")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public KeyboardManager <>4__this;

			[Token(Token = "0x4001C89")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string s;

			[Token(Token = "0x6001B94")]
			[Address(RVA = "0x7EDF9C", Offset = "0x7EDF9C", VA = "0x7EDF9C")]
			public <>c__DisplayClass22_0()
			{
			}

			[Token(Token = "0x6001B95")]
			[Address(RVA = "0x7EDFA4", Offset = "0x7EDFA4", VA = "0x7EDFA4")]
			internal void <GenerateInput>b__0()
			{
			}
		}

		[Token(Token = "0x2000464")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CE09C", Offset = "0x5CE09C")]
		private sealed class <WaitTargetProcessEvent>d__25 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001C8A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001C8B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001C8C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Action callback;

			[Token(Token = "0x4001C8D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public KeyboardManager <>4__this;

			[Token(Token = "0x17000303")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001B99")]
				[Address(RVA = "0x7EE5A0", Offset = "0x7EE5A0", VA = "0x7EE5A0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000304")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001B9B")]
				[Address(RVA = "0x7EE5E8", Offset = "0x7EE5E8", VA = "0x7EE5E8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001B96")]
			[Address(RVA = "0x7EDFC8", Offset = "0x7EDFC8", VA = "0x7EDFC8")]
			[DebuggerHidden]
			public <WaitTargetProcessEvent>d__25(int <>1__state)
			{
			}

			[Token(Token = "0x6001B97")]
			[Address(RVA = "0x7EDFF4", Offset = "0x7EDFF4", VA = "0x7EDFF4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001B98")]
			[Address(RVA = "0x7EDFF8", Offset = "0x7EDFF8", VA = "0x7EDFF8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001B9A")]
			[Address(RVA = "0x7EE5A8", Offset = "0x7EE5A8", VA = "0x7EE5A8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40011CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x5D2664", Offset = "0x5D2664")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5D2664", Offset = "0x5D2664")]
		public bool isUppercase;

		[Token(Token = "0x40011CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x5D26C4", Offset = "0x5D26C4")]
		public Transform keys;

		[Token(Token = "0x40011CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static InputField lastTarget;

		[Token(Token = "0x40011CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static InputField target;

		[Token(Token = "0x40011CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Key[] keyList;

		[Token(Token = "0x40011D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool capslockFlag;

		[Token(Token = "0x170000E0")]
		public static InputField Target
		{
			[Token(Token = "0x6000FEA")]
			[Address(RVA = "0xA5878C", Offset = "0xA5878C", VA = "0xA5878C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FEB")]
			[Address(RVA = "0xA51F6C", Offset = "0xA51F6C", VA = "0xA51F6C")]
			set
			{
			}
		}

		[Token(Token = "0x170000E1")]
		private string Input
		{
			[Token(Token = "0x6000FEE")]
			[Address(RVA = "0xA58A4C", Offset = "0xA58A4C", VA = "0xA58A4C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FEF")]
			[Address(RVA = "0xA58AF0", Offset = "0xA58AF0", VA = "0xA58AF0")]
			set
			{
			}
		}

		[Token(Token = "0x1400000D")]
		public event OnInputValueUpdatedHandler OnInputValueUpdated
		{
			[Token(Token = "0x6000FEC")]
			[Address(RVA = "0xA5890C", Offset = "0xA5890C", VA = "0xA5890C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D9820", Offset = "0x5D9820")]
			add
			{
			}
			[Token(Token = "0x6000FED")]
			[Address(RVA = "0xA589AC", Offset = "0xA589AC", VA = "0xA589AC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D9830", Offset = "0x5D9830")]
			remove
			{
			}
		}

		[Token(Token = "0x6000FF0")]
		[Address(RVA = "0xA58B8C", Offset = "0xA58B8C", VA = "0xA58B8C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000FF1")]
		[Address(RVA = "0xA58BF4", Offset = "0xA58BF4", VA = "0xA58BF4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000FF2")]
		[Address(RVA = "0xA58DCC", Offset = "0xA58DCC", VA = "0xA58DCC")]
		public void Backspace()
		{
		}

		[Token(Token = "0x6000FF3")]
		[Address(RVA = "0xA59094", Offset = "0xA59094", VA = "0xA59094")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000FF4")]
		[Address(RVA = "0xA58CE4", Offset = "0xA58CE4", VA = "0xA58CE4")]
		public void CapsLock()
		{
		}

		[Token(Token = "0x6000FF5")]
		[Address(RVA = "0xA591FC", Offset = "0xA591FC", VA = "0xA591FC")]
		public void Shift()
		{
		}

		[Token(Token = "0x6000FF6")]
		[Address(RVA = "0xA592CC", Offset = "0xA592CC", VA = "0xA592CC")]
		public void GenerateInput(string s)
		{
		}

		[Token(Token = "0x6000FF7")]
		[Address(RVA = "0xA590D8", Offset = "0xA590D8", VA = "0xA590D8")]
		public void SetInput(string s)
		{
		}

		[Token(Token = "0x6000FF8")]
		[Address(RVA = "0xA58F38", Offset = "0xA58F38", VA = "0xA58F38")]
		private void ForceInputFieldActivated()
		{
		}

		[Token(Token = "0x6000FF9")]
		[Address(RVA = "0xA59000", Offset = "0xA59000", VA = "0xA59000")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D9840", Offset = "0x5D9840")]
		private IEnumerator WaitTargetProcessEvent(Action callback)
		{
			return null;
		}

		[Token(Token = "0x6000FFA")]
		[Address(RVA = "0xA59414", Offset = "0xA59414", VA = "0xA59414")]
		private void SimulateKeyboardEvent(string s)
		{
		}

		[Token(Token = "0x6000FFB")]
		[Address(RVA = "0xA594E8", Offset = "0xA594E8", VA = "0xA594E8")]
		public KeyboardManager()
		{
		}
	}
	[Token(Token = "0x200026A")]
	public class Alphabet : Key
	{
		[Token(Token = "0x6000FFC")]
		[Address(RVA = "0xC0B204", Offset = "0xC0B204", VA = "0xC0B204", Slot = "5")]
		public override void CapsLock(bool isUppercase)
		{
		}

		[Token(Token = "0x6000FFD")]
		[Address(RVA = "0xC0B26C", Offset = "0xC0B26C", VA = "0xC0B26C")]
		public Alphabet()
		{
		}
	}
	[Token(Token = "0x200026B")]
	public class Key : MonoBehaviour
	{
		[Token(Token = "0x2000465")]
		public delegate void OnKeyClickedHandler(string key);

		[Token(Token = "0x40011D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected Text key;

		[Token(Token = "0x1400000E")]
		public event OnKeyClickedHandler OnKeyClicked
		{
			[Token(Token = "0x6000FFE")]
			[Address(RVA = "0xA57D40", Offset = "0xA57D40", VA = "0xA57D40")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D98A0", Offset = "0x5D98A0")]
			add
			{
			}
			[Token(Token = "0x6000FFF")]
			[Address(RVA = "0xA57DE0", Offset = "0xA57DE0", VA = "0xA57DE0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D98B0", Offset = "0x5D98B0")]
			remove
			{
			}
		}

		[Token(Token = "0x6001000")]
		[Address(RVA = "0xA57E80", Offset = "0xA57E80", VA = "0xA57E80", Slot = "4")]
		public virtual void Awake()
		{
		}

		[Token(Token = "0x6001001")]
		[Address(RVA = "0xA57F98", Offset = "0xA57F98", VA = "0xA57F98", Slot = "5")]
		public virtual void CapsLock(bool isUppercase)
		{
		}

		[Token(Token = "0x6001002")]
		[Address(RVA = "0xA57F9C", Offset = "0xA57F9C", VA = "0xA57F9C", Slot = "6")]
		public virtual void ShiftKey()
		{
		}

		[Token(Token = "0x6001003")]
		[Address(RVA = "0xA57FA0", Offset = "0xA57FA0", VA = "0xA57FA0")]
		public Key()
		{
		}

		[Token(Token = "0x6001004")]
		[Address(RVA = "0xA57FA8", Offset = "0xA57FA8", VA = "0xA57FA8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D98C0", Offset = "0x5D98C0")]
		private void <Awake>b__5_0()
		{
		}
	}
	[Token(Token = "0x200026C")]
	public class Number : Key
	{
		[Token(Token = "0x6001005")]
		[Address(RVA = "0x16FD51C", Offset = "0x16FD51C", VA = "0x16FD51C")]
		public Number()
		{
		}
	}
	[Token(Token = "0x200026D")]
	public class Shift : Key
	{
		[Token(Token = "0x40011D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Text subscript;

		[Token(Token = "0x6001006")]
		[Address(RVA = "0xA0DFF4", Offset = "0xA0DFF4", VA = "0xA0DFF4", Slot = "4")]
		public override void Awake()
		{
		}

		[Token(Token = "0x6001007")]
		[Address(RVA = "0xA0E090", Offset = "0xA0E090", VA = "0xA0E090", Slot = "6")]
		public override void ShiftKey()
		{
		}

		[Token(Token = "0x6001008")]
		[Address(RVA = "0xA0E128", Offset = "0xA0E128", VA = "0xA0E128")]
		public Shift()
		{
		}
	}
	[Token(Token = "0x200026E")]
	public class Symbol : Key
	{
		[Token(Token = "0x6001009")]
		[Address(RVA = "0xE858FC", Offset = "0xE858FC", VA = "0xE858FC")]
		public Symbol()
		{
		}
	}
	[Token(Token = "0x200026F")]
	public class MobileKeyboardManager : MonoBehaviour
	{
		[Token(Token = "0x40011D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x5D271C", Offset = "0x5D271C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5D271C", Offset = "0x5D271C")]
		public bool isUppercase;

		[Token(Token = "0x40011D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x5D277C", Offset = "0x5D277C")]
		public Transform keys;

		[Token(Token = "0x40011D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static UIKitInputField target;

		[Token(Token = "0x40011D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Key[] keyList;

		[Token(Token = "0x40011D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool capslockFlag;

		[Token(Token = "0x170000E2")]
		public static UIKitInputField Target
		{
			[Token(Token = "0x600100A")]
			[Address(RVA = "0xDF4A44", Offset = "0xDF4A44", VA = "0xDF4A44")]
			get
			{
				return null;
			}
			[Token(Token = "0x600100B")]
			[Address(RVA = "0xDF4BC4", Offset = "0xDF4BC4", VA = "0xDF4BC4")]
			set
			{
			}
		}

		[Token(Token = "0x170000E3")]
		private string Input
		{
			[Token(Token = "0x600100C")]
			[Address(RVA = "0xDF4C18", Offset = "0xDF4C18", VA = "0xDF4C18")]
			get
			{
				return null;
			}
			[Token(Token = "0x600100D")]
			[Address(RVA = "0xDF4CBC", Offset = "0xDF4CBC", VA = "0xDF4CBC")]
			set
			{
			}
		}

		[Token(Token = "0x600100E")]
		[Address(RVA = "0xDF4DB4", Offset = "0xDF4DB4", VA = "0xDF4DB4")]
		private void Awake()
		{
		}

		[Token(Token = "0x600100F")]
		[Address(RVA = "0xDF4E1C", Offset = "0xDF4E1C", VA = "0xDF4E1C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001010")]
		[Address(RVA = "0xDF4FF8", Offset = "0xDF4FF8", VA = "0xDF4FF8")]
		public void Backspace()
		{
		}

		[Token(Token = "0x6001011")]
		[Address(RVA = "0xDF5060", Offset = "0xDF5060", VA = "0xDF5060")]
		public void Clear()
		{
		}

		[Token(Token = "0x6001012")]
		[Address(RVA = "0xDF4F10", Offset = "0xDF4F10", VA = "0xDF4F10")]
		public void CapsLock()
		{
		}

		[Token(Token = "0x6001013")]
		[Address(RVA = "0xDF5110", Offset = "0xDF5110", VA = "0xDF5110")]
		public void Shift()
		{
		}

		[Token(Token = "0x6001014")]
		[Address(RVA = "0xDF51E0", Offset = "0xDF51E0", VA = "0xDF51E0")]
		public void GenerateInput(string s)
		{
		}

		[Token(Token = "0x6001015")]
		[Address(RVA = "0xDF5210", Offset = "0xDF5210", VA = "0xDF5210")]
		public MobileKeyboardManager()
		{
		}
	}
	[Token(Token = "0x2000270")]
	public class KeyboardSuggestions : MonoBehaviour
	{
		[Token(Token = "0x40011D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public KeyboardManager keyboardManager;

		[Token(Token = "0x40011DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int maxNumberOfSuggestions;

		[Token(Token = "0x40011DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<string> suggestions;

		[Token(Token = "0x40011DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private string pattern;

		[Token(Token = "0x40011DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private SuggestionButton[] suggestionButtons;

		[Token(Token = "0x6001016")]
		[Address(RVA = "0xA594F0", Offset = "0xA594F0", VA = "0xA594F0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001017")]
		[Address(RVA = "0xA59634", Offset = "0xA59634", VA = "0xA59634")]
		private void Start()
		{
		}

		[Token(Token = "0x6001018")]
		[Address(RVA = "0xA59774", Offset = "0xA59774", VA = "0xA59774")]
		private void Suggest(string word)
		{
		}

		[Token(Token = "0x6001019")]
		[Address(RVA = "0xA59884", Offset = "0xA59884", VA = "0xA59884")]
		private bool IsSkipSugestion()
		{
			return default(bool);
		}

		[Token(Token = "0x600101A")]
		[Address(RVA = "0xA59974", Offset = "0xA59974", VA = "0xA59974")]
		private void GenerateSuggestionsUI()
		{
		}

		[Token(Token = "0x600101B")]
		[Address(RVA = "0xA59A6C", Offset = "0xA59A6C", VA = "0xA59A6C")]
		private void SetSuggestionToCurrentInput(string word)
		{
		}

		[Token(Token = "0x600101C")]
		[Address(RVA = "0xA59C28", Offset = "0xA59C28", VA = "0xA59C28")]
		public KeyboardSuggestions()
		{
		}
	}
	[Token(Token = "0x2000271")]
	public class SuggestionButton : MonoBehaviour
	{
		[Token(Token = "0x2000466")]
		public delegate void OnSuggestionClickedHandler(string word);

		[Token(Token = "0x40011DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Text suggestionText;

		[Token(Token = "0x1400000F")]
		public event OnSuggestionClickedHandler OnSuggestionClicked
		{
			[Token(Token = "0x600101D")]
			[Address(RVA = "0x13B07C0", Offset = "0x13B07C0", VA = "0x13B07C0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D98D0", Offset = "0x5D98D0")]
			add
			{
			}
			[Token(Token = "0x600101E")]
			[Address(RVA = "0x13B0860", Offset = "0x13B0860", VA = "0x13B0860")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D98E0", Offset = "0x5D98E0")]
			remove
			{
			}
		}

		[Token(Token = "0x600101F")]
		[Address(RVA = "0x13B0900", Offset = "0x13B0900", VA = "0x13B0900")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001020")]
		[Address(RVA = "0x13B09E8", Offset = "0x13B09E8", VA = "0x13B09E8")]
		public void SetSuggestion(string word)
		{
		}

		[Token(Token = "0x6001021")]
		[Address(RVA = "0x13B0A94", Offset = "0x13B0A94", VA = "0x13B0A94")]
		public SuggestionButton()
		{
		}

		[Token(Token = "0x6001022")]
		[Address(RVA = "0x13B0A9C", Offset = "0x13B0A9C", VA = "0x13B0A9C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D98F0", Offset = "0x5D98F0")]
		private void <Awake>b__5_0()
		{
		}
	}
	[Token(Token = "0x2000272")]
	public class SuggestionSetup
	{
		[Token(Token = "0x40011E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static SuggestionSetup instance;

		[Token(Token = "0x40011E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Node root;

		[Token(Token = "0x40011E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string[] textArray;

		[Token(Token = "0x6001023")]
		[Address(RVA = "0x13B0AE8", Offset = "0x13B0AE8", VA = "0x13B0AE8")]
		public SuggestionSetup(string[] textArray)
		{
		}

		[Token(Token = "0x6001024")]
		[Address(RVA = "0x13B0BA4", Offset = "0x13B0BA4", VA = "0x13B0BA4")]
		private void PreProcess()
		{
		}

		[Token(Token = "0x6001025")]
		[Address(RVA = "0x13B0D60", Offset = "0x13B0D60", VA = "0x13B0D60")]
		public List<string> GetSuggestions(string word, int maxNumberOfSuggestions)
		{
			return null;
		}
	}
	[Token(Token = "0x2000273")]
	public class Node
	{
		[Token(Token = "0x40011E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Dictionary<char, Node> nodes;

		[Token(Token = "0x40011E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<int> indexes;

		[Token(Token = "0x6001026")]
		[Address(RVA = "0x16F7F58", Offset = "0x16F7F58", VA = "0x16F7F58")]
		public Node()
		{
		}
	}
	[Token(Token = "0x2000274")]
	public class Item : MonoBehaviour
	{
		[Token(Token = "0x2000467")]
		public delegate void OnItemSelectedHandler(Item item);

		[Token(Token = "0x40011E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Button button;

		[Token(Token = "0x40011E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected Color normalColor;

		[Token(Token = "0x40011E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected Color highlightedColor;

		[Token(Token = "0x14000010")]
		public event OnItemSelectedHandler OnItemSelected
		{
			[Token(Token = "0x6001027")]
			[Address(RVA = "0xA52CEC", Offset = "0xA52CEC", VA = "0xA52CEC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D9900", Offset = "0x5D9900")]
			add
			{
			}
			[Token(Token = "0x6001028")]
			[Address(RVA = "0xA52D8C", Offset = "0xA52D8C", VA = "0xA52D8C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D9910", Offset = "0x5D9910")]
			remove
			{
			}
		}

		[Token(Token = "0x6001029")]
		[Address(RVA = "0xA52E2C", Offset = "0xA52E2C", VA = "0xA52E2C")]
		private void Awake()
		{
		}

		[Token(Token = "0x600102A")]
		[Address(RVA = "0xA53000", Offset = "0xA53000", VA = "0xA53000", Slot = "4")]
		public virtual void Activate()
		{
		}

		[Token(Token = "0x600102B")]
		[Address(RVA = "0xA53090", Offset = "0xA53090", VA = "0xA53090", Slot = "5")]
		public virtual void Deactivate()
		{
		}

		[Token(Token = "0x600102C")]
		[Address(RVA = "0xA53108", Offset = "0xA53108", VA = "0xA53108", Slot = "6")]
		public virtual void DeactivateSubMenu()
		{
		}

		[Token(Token = "0x600102D")]
		[Address(RVA = "0xA5310C", Offset = "0xA5310C", VA = "0xA5310C")]
		public Item()
		{
		}

		[Token(Token = "0x600102E")]
		[Address(RVA = "0xA53114", Offset = "0xA53114", VA = "0xA53114")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D9920", Offset = "0x5D9920")]
		private void <Awake>b__7_0()
		{
		}
	}
	[Token(Token = "0x2000275")]
	public class ListSelectionHelper : MonoBehaviour
	{
		[Token(Token = "0x40011E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform list;

		[Token(Token = "0x40011EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Item initialActivatedItem;

		[Token(Token = "0x40011EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public Item currentSelectedItem;

		[Token(Token = "0x40011EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Item[] items;

		[Token(Token = "0x600102F")]
		[Address(RVA = "0xA67140", Offset = "0xA67140", VA = "0xA67140")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001030")]
		[Address(RVA = "0xA671A4", Offset = "0xA671A4", VA = "0xA671A4")]
		private void Start()
		{
		}

		[Token(Token = "0x6001031")]
		[Address(RVA = "0xA6730C", Offset = "0xA6730C", VA = "0xA6730C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001032")]
		[Address(RVA = "0xA674D0", Offset = "0xA674D0", VA = "0xA674D0")]
		private void SelectionHelper(Item item)
		{
		}

		[Token(Token = "0x6001033")]
		[Address(RVA = "0xA67438", Offset = "0xA67438", VA = "0xA67438")]
		public void DeselectCurrentItem()
		{
		}

		[Token(Token = "0x6001034")]
		[Address(RVA = "0xA67518", Offset = "0xA67518", VA = "0xA67518")]
		public ListSelectionHelper()
		{
		}
	}
	[Token(Token = "0x2000276")]
	public class MenuItem : Item
	{
		[Token(Token = "0x40011ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject subMenu;

		[Token(Token = "0x6001035")]
		[Address(RVA = "0xDECB14", Offset = "0xDECB14", VA = "0xDECB14", Slot = "4")]
		public override void Activate()
		{
		}

		[Token(Token = "0x6001036")]
		[Address(RVA = "0xDECBB4", Offset = "0xDECBB4", VA = "0xDECBB4", Slot = "5")]
		public override void Deactivate()
		{
		}

		[Token(Token = "0x6001037")]
		[Address(RVA = "0xDECBE4", Offset = "0xDECBE4", VA = "0xDECBE4", Slot = "6")]
		public override void DeactivateSubMenu()
		{
		}

		[Token(Token = "0x6001038")]
		[Address(RVA = "0xDECC78", Offset = "0xDECC78", VA = "0xDECC78")]
		public MenuItem()
		{
		}
	}
	[Token(Token = "0x2000277")]
	public class TabItem : Item
	{
		[Token(Token = "0x40011EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject relatedPanel;

		[Token(Token = "0x6001039")]
		[Address(RVA = "0xE89EDC", Offset = "0xE89EDC", VA = "0xE89EDC", Slot = "4")]
		public override void Activate()
		{
		}

		[Token(Token = "0x600103A")]
		[Address(RVA = "0xE8A0E0", Offset = "0xE8A0E0", VA = "0xE8A0E0", Slot = "5")]
		public override void Deactivate()
		{
		}

		[Token(Token = "0x600103B")]
		[Address(RVA = "0xE8A014", Offset = "0xE8A014", VA = "0xE8A014")]
		private void ToggleCanvasGroupBlockRaycast(bool enabled)
		{
		}

		[Token(Token = "0x600103C")]
		[Address(RVA = "0xE8A208", Offset = "0xE8A208", VA = "0xE8A208")]
		public TabItem()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000278")]
	public struct Option
	{
		[Token(Token = "0x40011EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string value;
	}
	[Token(Token = "0x2000279")]
	public class OptionItem : MonoBehaviour
	{
		[Token(Token = "0x40011F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Option option;

		[Token(Token = "0x170000E4")]
		public string Value
		{
			[Token(Token = "0x600103D")]
			[Address(RVA = "0x1314904", Offset = "0x1314904", VA = "0x1314904")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000E5")]
		public Option Option
		{
			[Token(Token = "0x600103E")]
			[Address(RVA = "0x131490C", Offset = "0x131490C", VA = "0x131490C")]
			get
			{
				return default(Option);
			}
			[Token(Token = "0x600103F")]
			[Address(RVA = "0x1314914", Offset = "0x1314914", VA = "0x1314914")]
			set
			{
			}
		}

		[Token(Token = "0x6001040")]
		[Address(RVA = "0x13149FC", Offset = "0x13149FC", VA = "0x13149FC")]
		public void Activate()
		{
		}

		[Token(Token = "0x6001041")]
		[Address(RVA = "0x1314A24", Offset = "0x1314A24", VA = "0x1314A24")]
		public void Deactivate()
		{
		}

		[Token(Token = "0x6001042")]
		[Address(RVA = "0x1314A4C", Offset = "0x1314A4C", VA = "0x1314A4C")]
		public OptionItem()
		{
		}
	}
	[Token(Token = "0x200027A")]
	public class OptionsManager : MonoBehaviour
	{
		[Token(Token = "0x2000468")]
		public delegate void OnOptionSelectedHandler(int index);

		[Token(Token = "0x40011F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x5D27E4", Offset = "0x5D27E4")]
		public GameObject optionTemplate;

		[Token(Token = "0x40011F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public List<Option> optionsList;

		[Token(Token = "0x40011F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[HideInInspector]
		public string selectedValue;

		[Token(Token = "0x40011F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int firstSelectedIndex;

		[Token(Token = "0x40011F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private int selectedIdx;

		[Token(Token = "0x40011F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<OptionItem> optionItems;

		[Token(Token = "0x14000011")]
		public event OnOptionSelectedHandler OnOptionSelected
		{
			[Token(Token = "0x6001043")]
			[Address(RVA = "0x1314A54", Offset = "0x1314A54", VA = "0x1314A54")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D9930", Offset = "0x5D9930")]
			add
			{
			}
			[Token(Token = "0x6001044")]
			[Address(RVA = "0x1314AF4", Offset = "0x1314AF4", VA = "0x1314AF4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D9940", Offset = "0x5D9940")]
			remove
			{
			}
		}

		[Token(Token = "0x6001045")]
		[Address(RVA = "0x1314B94", Offset = "0x1314B94", VA = "0x1314B94")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001046")]
		[Address(RVA = "0x1314D58", Offset = "0x1314D58", VA = "0x1314D58")]
		private void Start()
		{
		}

		[Token(Token = "0x6001047")]
		[Address(RVA = "0x1314BCC", Offset = "0x1314BCC", VA = "0x1314BCC")]
		private void PopulateOptions()
		{
		}

		[Token(Token = "0x6001048")]
		[Address(RVA = "0x1314EF0", Offset = "0x1314EF0", VA = "0x1314EF0")]
		public void PrevOption()
		{
		}

		[Token(Token = "0x6001049")]
		[Address(RVA = "0x1314FDC", Offset = "0x1314FDC", VA = "0x1314FDC")]
		public void NextOption()
		{
		}

		[Token(Token = "0x600104A")]
		[Address(RVA = "0x1314E14", Offset = "0x1314E14", VA = "0x1314E14")]
		private void ActivateOption(int i)
		{
		}

		[Token(Token = "0x600104B")]
		[Address(RVA = "0x1314F40", Offset = "0x1314F40", VA = "0x1314F40")]
		private void DeactivateOption(int i)
		{
		}

		[Token(Token = "0x600104C")]
		[Address(RVA = "0x1315064", Offset = "0x1315064", VA = "0x1315064")]
		public OptionsManager()
		{
		}
	}
	[Token(Token = "0x200027B")]
	public enum ButtonDeactiveStyle
	{
		[Token(Token = "0x40011F9")]
		Disabled,
		[Token(Token = "0x40011FA")]
		Hidden
	}
	[Token(Token = "0x200027C")]
	public class Pagination : MonoBehaviour
	{
		[Token(Token = "0x40011FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x5D284C", Offset = "0x5D284C")]
		public Transform targetObject;

		[Token(Token = "0x40011FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x5D2884", Offset = "0x5D2884")]
		public ButtonDeactiveStyle buttonDeactiveStyle;

		[Token(Token = "0x40011FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Button nextBtn;

		[Token(Token = "0x40011FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Button prevBtn;

		[Token(Token = "0x40011FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int currentPage;

		[Token(Token = "0x170000E6")]
		public int CurrentPage
		{
			[Token(Token = "0x600104D")]
			[Address(RVA = "0x1316E60", Offset = "0x1316E60", VA = "0x1316E60")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600104E")]
			[Address(RVA = "0x1316E68", Offset = "0x1316E68", VA = "0x1316E68")]
			set
			{
			}
		}

		[Token(Token = "0x600104F")]
		[Address(RVA = "0x13171BC", Offset = "0x13171BC", VA = "0x13171BC")]
		private void Start()
		{
		}

		[Token(Token = "0x6001050")]
		[Address(RVA = "0x1317340", Offset = "0x1317340", VA = "0x1317340")]
		public void Next()
		{
		}

		[Token(Token = "0x6001051")]
		[Address(RVA = "0x131734C", Offset = "0x131734C", VA = "0x131734C")]
		public void Prev()
		{
		}

		[Token(Token = "0x6001052")]
		[Address(RVA = "0x1317050", Offset = "0x1317050", VA = "0x1317050")]
		private void PagintionBtnControl(bool nextEnabled, bool prevEnabled)
		{
		}

		[Token(Token = "0x6001053")]
		[Address(RVA = "0x1317358", Offset = "0x1317358", VA = "0x1317358")]
		public Pagination()
		{
		}
	}
	[Token(Token = "0x200027D")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x5CBB90", Offset = "0x5CBB90")]
	public class CircularProgressBar : MonoBehaviour
	{
		[Token(Token = "0x4001200")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Image circle;

		[Token(Token = "0x4001201")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D28BC", Offset = "0x5D28BC")]
		public float step;

		[Token(Token = "0x4001202")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x5D28D4", Offset = "0x5D28D4")]
		public Transform valueText;

		[Token(Token = "0x4001203")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float min;

		[Token(Token = "0x4001204")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float max;

		[Token(Token = "0x4001205")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private ProgressBarManager progressBarManager;

		[Token(Token = "0x170000E7")]
		public Text ValueText
		{
			[Token(Token = "0x6001054")]
			[Address(RVA = "0x10AA168", Offset = "0x10AA168", VA = "0x10AA168")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000E8")]
		public float Value
		{
			[Token(Token = "0x6001055")]
			[Address(RVA = "0x10AA1BC", Offset = "0x10AA1BC", VA = "0x10AA1BC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001056")]
			[Address(RVA = "0x10AA1D8", Offset = "0x10AA1D8", VA = "0x10AA1D8")]
			set
			{
			}
		}

		[Token(Token = "0x6001057")]
		[Address(RVA = "0x10AA1F4", Offset = "0x10AA1F4", VA = "0x10AA1F4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001058")]
		[Address(RVA = "0x10AA250", Offset = "0x10AA250", VA = "0x10AA250")]
		private void Start()
		{
		}

		[Token(Token = "0x6001059")]
		[Address(RVA = "0x10AA450", Offset = "0x10AA450", VA = "0x10AA450")]
		public void IncreaseValue()
		{
		}

		[Token(Token = "0x600105A")]
		[Address(RVA = "0x10AA488", Offset = "0x10AA488", VA = "0x10AA488")]
		public void DecreaseValue()
		{
		}

		[Token(Token = "0x600105B")]
		[Address(RVA = "0x10AA4C0", Offset = "0x10AA4C0", VA = "0x10AA4C0")]
		private void UpdateValue(float newValue)
		{
		}

		[Token(Token = "0x600105C")]
		[Address(RVA = "0x10AA340", Offset = "0x10AA340", VA = "0x10AA340")]
		private void UpdateValueText(float newValue)
		{
		}

		[Token(Token = "0x600105D")]
		[Address(RVA = "0x10AA4DC", Offset = "0x10AA4DC", VA = "0x10AA4DC")]
		public CircularProgressBar()
		{
		}
	}
	[Token(Token = "0x200027E")]
	public class ProgressBarManager : MonoBehaviour
	{
		[Token(Token = "0x2000469")]
		public delegate void OnValueUpdatedHandler(float updatedValue);

		[Token(Token = "0x200046A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CE0AC", Offset = "0x5CE0AC")]
		private sealed class <SlideTo>d__10 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001C8E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001C8F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001C90")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float target;

			[Token(Token = "0x4001C91")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public float toValue;

			[Token(Token = "0x4001C92")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float time;

			[Token(Token = "0x4001C93")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public ProgressBarManager <>4__this;

			[Token(Token = "0x4001C94")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <fromValue>5__2;

			[Token(Token = "0x4001C95")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private float <elapsedTime>5__3;

			[Token(Token = "0x17000305")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001BB3")]
				[Address(RVA = "0xFF1278", Offset = "0xFF1278", VA = "0xFF1278", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000306")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001BB5")]
				[Address(RVA = "0xFF12C0", Offset = "0xFF12C0", VA = "0xFF12C0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001BB0")]
			[Address(RVA = "0xFF0F38", Offset = "0xFF0F38", VA = "0xFF0F38")]
			[DebuggerHidden]
			public <SlideTo>d__10(int <>1__state)
			{
			}

			[Token(Token = "0x6001BB1")]
			[Address(RVA = "0xFF0F64", Offset = "0xFF0F64", VA = "0xFF0F64", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001BB2")]
			[Address(RVA = "0xFF0F68", Offset = "0xFF0F68", VA = "0xFF0F68", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001BB4")]
			[Address(RVA = "0xFF1280", Offset = "0xFF1280", VA = "0xFF1280", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001206")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Coroutine slideCoroutine;

		[Token(Token = "0x14000012")]
		public event OnValueUpdatedHandler OnValueIsUpdating
		{
			[Token(Token = "0x600105E")]
			[Address(RVA = "0x12078FC", Offset = "0x12078FC", VA = "0x12078FC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D9950", Offset = "0x5D9950")]
			add
			{
			}
			[Token(Token = "0x600105F")]
			[Address(RVA = "0x120799C", Offset = "0x120799C", VA = "0x120799C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D9960", Offset = "0x5D9960")]
			remove
			{
			}
		}

		[Token(Token = "0x14000013")]
		public event OnValueUpdatedHandler OnValueStopUpgating
		{
			[Token(Token = "0x6001060")]
			[Address(RVA = "0x1207A3C", Offset = "0x1207A3C", VA = "0x1207A3C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D9970", Offset = "0x5D9970")]
			add
			{
			}
			[Token(Token = "0x6001061")]
			[Address(RVA = "0x1207ADC", Offset = "0x1207ADC", VA = "0x1207ADC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D9980", Offset = "0x5D9980")]
			remove
			{
			}
		}

		[Token(Token = "0x6001062")]
		[Address(RVA = "0x1207B7C", Offset = "0x1207B7C", VA = "0x1207B7C")]
		public void IncreaseValue(float target, float step, float min, float max)
		{
		}

		[Token(Token = "0x6001063")]
		[Address(RVA = "0x1207CB4", Offset = "0x1207CB4", VA = "0x1207CB4")]
		public void DecreaseValue(float target, float step, float min, float max)
		{
		}

		[Token(Token = "0x6001064")]
		[Address(RVA = "0x1207C18", Offset = "0x1207C18", VA = "0x1207C18")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D9990", Offset = "0x5D9990")]
		private IEnumerator SlideTo(float target, float toValue, float time = 0.2f)
		{
			return null;
		}

		[Token(Token = "0x6001065")]
		[Address(RVA = "0x1207D50", Offset = "0x1207D50", VA = "0x1207D50")]
		public ProgressBarManager()
		{
		}
	}
	[Token(Token = "0x200027F")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x5CBBF0", Offset = "0x5CBBF0")]
	public class ScrollController : MonoBehaviour
	{
		[Token(Token = "0x4001209")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Scrollbar scrollbar;

		[Token(Token = "0x400120A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D292C", Offset = "0x5D292C")]
		public float step;

		[Token(Token = "0x400120B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float min;

		[Token(Token = "0x400120C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float max;

		[Token(Token = "0x400120D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private ProgressBarManager progressBarManager;

		[Token(Token = "0x170000E9")]
		public float Value
		{
			[Token(Token = "0x6001066")]
			[Address(RVA = "0xA0BD34", Offset = "0xA0BD34", VA = "0xA0BD34")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001067")]
			[Address(RVA = "0xA0BD50", Offset = "0xA0BD50", VA = "0xA0BD50")]
			set
			{
			}
		}

		[Token(Token = "0x6001068")]
		[Address(RVA = "0xA0BD6C", Offset = "0xA0BD6C", VA = "0xA0BD6C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001069")]
		[Address(RVA = "0xA0BDC8", Offset = "0xA0BDC8", VA = "0xA0BDC8")]
		private void Start()
		{
		}

		[Token(Token = "0x600106A")]
		[Address(RVA = "0xA0BE5C", Offset = "0xA0BE5C", VA = "0xA0BE5C")]
		public void IncreaseValue()
		{
		}

		[Token(Token = "0x600106B")]
		[Address(RVA = "0xA0BEA4", Offset = "0xA0BEA4", VA = "0xA0BEA4")]
		public void DecreaseValue()
		{
		}

		[Token(Token = "0x600106C")]
		[Address(RVA = "0xA0BEEC", Offset = "0xA0BEEC", VA = "0xA0BEEC")]
		private void UpdateValue(float newValue)
		{
		}

		[Token(Token = "0x600106D")]
		[Address(RVA = "0xA0BF08", Offset = "0xA0BF08", VA = "0xA0BF08")]
		public ScrollController()
		{
		}
	}
	[Token(Token = "0x2000280")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x5CBC50", Offset = "0x5CBC50")]
	public class SliderProgressBar : MonoBehaviour
	{
		[Token(Token = "0x200046B")]
		public enum ValueType
		{
			[Token(Token = "0x4001C97")]
			Percentage,
			[Token(Token = "0x4001C98")]
			Number
		}

		[Token(Token = "0x400120E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Slider slider;

		[Token(Token = "0x400120F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float step;

		[Token(Token = "0x4001210")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x5D2944", Offset = "0x5D2944")]
		public ValueType valuePresentedAs;

		[Token(Token = "0x4001211")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform valueText;

		[Token(Token = "0x4001212")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[HideInInspector]
		public float roundedPercentage;

		[Token(Token = "0x4001213")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[HideInInspector]
		public float roundedValue;

		[Token(Token = "0x4001214")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private ProgressBarManager progressBarManager;

		[Token(Token = "0x170000EA")]
		public Text ValueText
		{
			[Token(Token = "0x600106E")]
			[Address(RVA = "0xA0FE70", Offset = "0xA0FE70", VA = "0xA0FE70")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000EB")]
		public float Value
		{
			[Token(Token = "0x600106F")]
			[Address(RVA = "0xA0FEC4", Offset = "0xA0FEC4", VA = "0xA0FEC4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001070")]
			[Address(RVA = "0xA0FEE8", Offset = "0xA0FEE8", VA = "0xA0FEE8")]
			set
			{
			}
		}

		[Token(Token = "0x6001071")]
		[Address(RVA = "0xA0FF0C", Offset = "0xA0FF0C", VA = "0xA0FF0C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001072")]
		[Address(RVA = "0xA0FF68", Offset = "0xA0FF68", VA = "0xA0FF68")]
		private void Start()
		{
		}

		[Token(Token = "0x6001073")]
		[Address(RVA = "0xA10334", Offset = "0xA10334", VA = "0xA10334")]
		public void IncreaseValue()
		{
		}

		[Token(Token = "0x6001074")]
		[Address(RVA = "0xA10390", Offset = "0xA10390", VA = "0xA10390")]
		public void DecreaseValue()
		{
		}

		[Token(Token = "0x6001075")]
		[Address(RVA = "0xA103EC", Offset = "0xA103EC", VA = "0xA103EC")]
		private void UpdateValue(float newValue)
		{
		}

		[Token(Token = "0x6001076")]
		[Address(RVA = "0xA100CC", Offset = "0xA100CC", VA = "0xA100CC")]
		private void CalculateValue(float newValue)
		{
		}

		[Token(Token = "0x6001077")]
		[Address(RVA = "0xA10228", Offset = "0xA10228", VA = "0xA10228")]
		private void UpdateValueText(float newValue)
		{
		}

		[Token(Token = "0x6001078")]
		[Address(RVA = "0xA10410", Offset = "0xA10410", VA = "0xA10410")]
		public SliderProgressBar()
		{
		}
	}
	[Token(Token = "0x2000281")]
	public class RadialItem : MonoBehaviour
	{
		[Token(Token = "0x4001215")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Color normalColor;

		[Token(Token = "0x4001216")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Color hoverColor;

		[Token(Token = "0x4001217")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Sprite iconImage;

		[Token(Token = "0x4001218")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public UnityEvent onClickEvent;

		[Token(Token = "0x4001219")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform icon;

		[Token(Token = "0x400121A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform sector;

		[Token(Token = "0x6001079")]
		[Address(RVA = "0x11F290C", Offset = "0x11F290C", VA = "0x11F290C")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x600107A")]
		[Address(RVA = "0x11F299C", Offset = "0x11F299C", VA = "0x11F299C")]
		public void AdjustFillSize(int total, int index, float radius)
		{
		}

		[Token(Token = "0x600107B")]
		[Address(RVA = "0x11F2B60", Offset = "0x11F2B60", VA = "0x11F2B60")]
		public void Activate()
		{
		}

		[Token(Token = "0x600107C")]
		[Address(RVA = "0x11F2BD0", Offset = "0x11F2BD0", VA = "0x11F2BD0")]
		public void Deactivate()
		{
		}

		[Token(Token = "0x600107D")]
		[Address(RVA = "0x11F2C40", Offset = "0x11F2C40", VA = "0x11F2C40")]
		public void Click()
		{
		}

		[Token(Token = "0x600107E")]
		[Address(RVA = "0x11F2AC0", Offset = "0x11F2AC0", VA = "0x11F2AC0")]
		private Vector3 CalculateIconPosition(float rotation, float radis)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600107F")]
		[Address(RVA = "0x11F2C54", Offset = "0x11F2C54", VA = "0x11F2C54")]
		public RadialItem()
		{
		}
	}
	[Token(Token = "0x2000282")]
	[ExecuteInEditMode]
	public class RadialMenuManager : MonoBehaviour
	{
		[Token(Token = "0x400121B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "MinAttribute", RVA = "0x5D299C", Offset = "0x5D299C")]
		public float iconRadius;

		[Token(Token = "0x400121C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private Vector2 position;

		[Token(Token = "0x400121D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private RadialItem[] radialItems;

		[Token(Token = "0x400121E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float currentAngle;

		[Token(Token = "0x400121F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int previousSelection;

		[Token(Token = "0x6001080")]
		[Address(RVA = "0x11F2C5C", Offset = "0x11F2C5C", VA = "0x11F2C5C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001081")]
		[Address(RVA = "0x11F2D90", Offset = "0x11F2D90", VA = "0x11F2D90")]
		private void Update()
		{
		}

		[Token(Token = "0x6001082")]
		[Address(RVA = "0x11F2CC0", Offset = "0x11F2CC0", VA = "0x11F2CC0")]
		private void AdjustRadialItem()
		{
		}

		[Token(Token = "0x6001083")]
		[Address(RVA = "0x11F2EF4", Offset = "0x11F2EF4", VA = "0x11F2EF4")]
		private int GetCurrentSelection(Vector2 position)
		{
			return default(int);
		}

		[Token(Token = "0x6001084")]
		[Address(RVA = "0x11F2E9C", Offset = "0x11F2E9C", VA = "0x11F2E9C")]
		private void Reset()
		{
		}

		[Token(Token = "0x6001085")]
		[Address(RVA = "0x11F2F88", Offset = "0x11F2F88", VA = "0x11F2F88")]
		private void ProcessSelection(int selection)
		{
		}

		[Token(Token = "0x6001086")]
		[Address(RVA = "0x11F301C", Offset = "0x11F301C", VA = "0x11F301C")]
		private void ProcessPress(int selection)
		{
		}

		[Token(Token = "0x6001087")]
		[Address(RVA = "0x11F30AC", Offset = "0x11F30AC", VA = "0x11F30AC")]
		public RadialMenuManager()
		{
		}
	}
	[Token(Token = "0x2000283")]
	public class Util : MonoBehaviour
	{
		[Token(Token = "0x6001088")]
		public static T SafeDestroy<T>(T obj) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x6001089")]
		public static T SafeDestroyGameObject<T>(T component) where T : Component
		{
			return null;
		}

		[Token(Token = "0x600108A")]
		[Address(RVA = "0xD0B1C8", Offset = "0xD0B1C8", VA = "0xD0B1C8")]
		public static void DestroyChildren(Transform root)
		{
		}

		[Token(Token = "0x600108B")]
		[Address(RVA = "0xD0B250", Offset = "0xD0B250", VA = "0xD0B250")]
		public static string ReplaceLastOccurrence(string Source, string Find, string Replace)
		{
			return null;
		}

		[Token(Token = "0x600108C")]
		[Address(RVA = "0xD0B2D4", Offset = "0xD0B2D4", VA = "0xD0B2D4")]
		public Util()
		{
		}
	}
	[Token(Token = "0x2000284")]
	public class VREventSystemHelper : EventSystem
	{
		[Token(Token = "0x600108D")]
		[Address(RVA = "0xD0CCCC", Offset = "0xD0CCCC", VA = "0xD0CCCC", Slot = "17")]
		protected override void OnApplicationFocus(bool hasFocus)
		{
		}

		[Token(Token = "0x600108E")]
		[Address(RVA = "0xD0CCD8", Offset = "0xD0CCD8", VA = "0xD0CCD8")]
		public VREventSystemHelper()
		{
		}
	}
}
namespace VRUiKits.Demo
{
	[Token(Token = "0x2000285")]
	public class ChangeColor : MonoBehaviour
	{
		[Token(Token = "0x4001220")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Material material;

		[Token(Token = "0x4001221")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Color color;

		[Token(Token = "0x4001222")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool isClicked;

		[Token(Token = "0x600108F")]
		[Address(RVA = "0x10A9364", Offset = "0x10A9364", VA = "0x10A9364")]
		private void Start()
		{
		}

		[Token(Token = "0x6001090")]
		[Address(RVA = "0x10A93D0", Offset = "0x10A93D0", VA = "0x10A93D0")]
		public void PointerEnter()
		{
		}

		[Token(Token = "0x6001091")]
		[Address(RVA = "0x10A9428", Offset = "0x10A9428", VA = "0x10A9428")]
		public void PointerLeave()
		{
		}

		[Token(Token = "0x6001092")]
		[Address(RVA = "0x10A945C", Offset = "0x10A945C", VA = "0x10A945C")]
		public void PointerClick()
		{
		}

		[Token(Token = "0x6001093")]
		[Address(RVA = "0x10A94A0", Offset = "0x10A94A0", VA = "0x10A94A0")]
		public ChangeColor()
		{
		}
	}
	[Token(Token = "0x2000286")]
	public class FaceVRCamera : MonoBehaviour
	{
		[Token(Token = "0x4001223")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform vrCamera;

		[Token(Token = "0x4001224")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FaceCameraType type;

		[Token(Token = "0x4001225")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float distance;

		[Token(Token = "0x6001094")]
		[Address(RVA = "0xBFA40C", Offset = "0xBFA40C", VA = "0xBFA40C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001095")]
		[Address(RVA = "0xBFA464", Offset = "0xBFA464", VA = "0xBFA464")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001096")]
		[Address(RVA = "0xBFA580", Offset = "0xBFA580", VA = "0xBFA580")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001097")]
		[Address(RVA = "0xBFA478", Offset = "0xBFA478", VA = "0xBFA478")]
		private void CalibratePosition()
		{
		}

		[Token(Token = "0x6001098")]
		[Address(RVA = "0xBFA590", Offset = "0xBFA590", VA = "0xBFA590")]
		public FaceVRCamera()
		{
		}
	}
	[Token(Token = "0x2000287")]
	public enum FaceCameraType
	{
		[Token(Token = "0x4001227")]
		Always,
		[Token(Token = "0x4001228")]
		OnToggle
	}
	[Token(Token = "0x2000288")]
	public class KeyboardDisplay : MonoBehaviour
	{
		[Token(Token = "0x4001229")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform vrCamera;

		[Token(Token = "0x400122A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 offset;

		[Token(Token = "0x6001099")]
		[Address(RVA = "0xA58504", Offset = "0xA58504", VA = "0xA58504")]
		private void Awake()
		{
		}

		[Token(Token = "0x600109A")]
		[Address(RVA = "0xA58578", Offset = "0xA58578", VA = "0xA58578")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600109B")]
		[Address(RVA = "0xA5857C", Offset = "0xA5857C", VA = "0xA5857C")]
		private void SetPosition()
		{
		}

		[Token(Token = "0x600109C")]
		[Address(RVA = "0xA585DC", Offset = "0xA585DC", VA = "0xA585DC")]
		public KeyboardDisplay()
		{
		}
	}
	[Token(Token = "0x2000289")]
	public class MouseLook : MonoBehaviour
	{
		[Token(Token = "0x400122B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float speed;

		[Token(Token = "0x400122C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float x;

		[Token(Token = "0x400122D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float y;

		[Token(Token = "0x600109D")]
		[Address(RVA = "0xDF61E0", Offset = "0xDF61E0", VA = "0xDF61E0")]
		private void Update()
		{
		}

		[Token(Token = "0x600109E")]
		[Address(RVA = "0xDF6344", Offset = "0xDF6344", VA = "0xDF6344")]
		public MouseLook()
		{
		}
	}
	[Token(Token = "0x200028A")]
	public class ToggleUIKitHelper : MonoBehaviour
	{
		[Token(Token = "0x400122E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UIKitPointer pointer;

		[Token(Token = "0x400122F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<GameObject> objectsToToggle;

		[Token(Token = "0x600109F")]
		[Address(RVA = "0xE95DB0", Offset = "0xE95DB0", VA = "0xE95DB0")]
		public void Pause()
		{
		}

		[Token(Token = "0x60010A0")]
		[Address(RVA = "0xE95FFC", Offset = "0xE95FFC", VA = "0xE95FFC")]
		public void Run()
		{
		}

		[Token(Token = "0x60010A1")]
		[Address(RVA = "0xE95EB4", Offset = "0xE95EB4", VA = "0xE95EB4")]
		private void Toggle(bool enabled)
		{
		}

		[Token(Token = "0x60010A2")]
		[Address(RVA = "0xE96100", Offset = "0xE96100", VA = "0xE96100")]
		public ToggleUIKitHelper()
		{
		}
	}
}
namespace Glitchers.UserInterface
{
	[Token(Token = "0x200028B")]
	public class CustomZTestUI : MonoBehaviour, IMaterialModifier
	{
		[Token(Token = "0x4001230")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5D29B0", Offset = "0x5D29B0")]
		public CompareFunction comparison;

		[Token(Token = "0x4001231")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Graphic m_Graphic;

		[Token(Token = "0x4001232")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Material m_RenderMaterial;

		[Token(Token = "0x4001233")]
		private const string _propertyKey = "unity_GUIZTestMode";

		[Token(Token = "0x4001234")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int? _propertyID;

		[Token(Token = "0x170000EC")]
		private static int PropertyID
		{
			[Token(Token = "0x60010A3")]
			[Address(RVA = "0xCC2778", Offset = "0xCC2778", VA = "0xCC2778")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60010A4")]
		[Address(RVA = "0xCC2898", Offset = "0xCC2898", VA = "0xCC2898")]
		private void Awake()
		{
		}

		[Token(Token = "0x60010A5")]
		[Address(RVA = "0xCC28F4", Offset = "0xCC28F4", VA = "0xCC28F4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60010A6")]
		[Address(RVA = "0xCC2990", Offset = "0xCC2990", VA = "0xCC2990")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60010A7")]
		[Address(RVA = "0xCC28F8", Offset = "0xCC28F8", VA = "0xCC28F8")]
		private void SetDirty()
		{
		}

		[Token(Token = "0x60010A8")]
		[Address(RVA = "0xCC2994", Offset = "0xCC2994", VA = "0xCC2994")]
		public void SetOverlay(bool overlay)
		{
		}

		[Token(Token = "0x60010A9")]
		[Address(RVA = "0xCC29BC", Offset = "0xCC29BC", VA = "0xCC29BC", Slot = "4")]
		private Material UnityEngine.UI.IMaterialModifier.GetModifiedMaterial(Material baseMaterial)
		{
			return null;
		}

		[Token(Token = "0x60010AA")]
		[Address(RVA = "0xCC2B2C", Offset = "0xCC2B2C", VA = "0xCC2B2C")]
		public CustomZTestUI()
		{
		}
	}
}
namespace I2.Loc
{
	[Token(Token = "0x200028C")]
	public static class ScriptLocalization
	{
		[Token(Token = "0x200046C")]
		public static class Lobby
		{
			[Token(Token = "0x17000307")]
			public static string Audio_Ambient
			{
				[Token(Token = "0x6001BB6")]
				[Address(RVA = "0xFF2310", Offset = "0xFF2310", VA = "0xFF2310")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000308")]
			public static string Audio_Game
			{
				[Token(Token = "0x6001BB7")]
				[Address(RVA = "0xFF239C", Offset = "0xFF239C", VA = "0xFF239C")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000309")]
			public static string Audio_Master
			{
				[Token(Token = "0x6001BB8")]
				[Address(RVA = "0xFF2428", Offset = "0xFF2428", VA = "0xFF2428")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700030A")]
			public static string Audio_NodeHit
			{
				[Token(Token = "0x6001BB9")]
				[Address(RVA = "0xFF24B4", Offset = "0xFF24B4", VA = "0xFF24B4")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700030B")]
			public static string Audio_SFX
			{
				[Token(Token = "0x6001BBA")]
				[Address(RVA = "0xFF2540", Offset = "0xFF2540", VA = "0xFF2540")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700030C")]
			public static string Audio_Title
			{
				[Token(Token = "0x6001BBB")]
				[Address(RVA = "0xFF25CC", Offset = "0xFF25CC", VA = "0xFF25CC")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700030D")]
			public static string Audio_Voice
			{
				[Token(Token = "0x6001BBC")]
				[Address(RVA = "0xFF2658", Offset = "0xFF2658", VA = "0xFF2658")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700030E")]
			public static string Bio_Origin
			{
				[Token(Token = "0x6001BBD")]
				[Address(RVA = "0xFF26E4", Offset = "0xFF26E4", VA = "0xFF26E4")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700030F")]
			public static string Bio_Style
			{
				[Token(Token = "0x6001BBE")]
				[Address(RVA = "0xFF2770", Offset = "0xFF2770", VA = "0xFF2770")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000310")]
			public static string Bio_Title
			{
				[Token(Token = "0x6001BBF")]
				[Address(RVA = "0xFF27FC", Offset = "0xFF27FC", VA = "0xFF27FC")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000311")]
			public static string CharacterSelect_Bio
			{
				[Token(Token = "0x6001BC0")]
				[Address(RVA = "0xFF2888", Offset = "0xFF2888", VA = "0xFF2888")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000312")]
			public static string CharacterSelect_Select
			{
				[Token(Token = "0x6001BC1")]
				[Address(RVA = "0xFF2914", Offset = "0xFF2914", VA = "0xFF2914")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000313")]
			public static string CharacterSelect_Title
			{
				[Token(Token = "0x6001BC2")]
				[Address(RVA = "0xFF29A0", Offset = "0xFF29A0", VA = "0xFF29A0")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000314")]
			public static string CheckWeb
			{
				[Token(Token = "0x6001BC3")]
				[Address(RVA = "0xFF2A2C", Offset = "0xFF2A2C", VA = "0xFF2A2C")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000315")]
			public static string Credits_Title
			{
				[Token(Token = "0x6001BC4")]
				[Address(RVA = "0xFF2AB8", Offset = "0xFF2AB8", VA = "0xFF2AB8")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000316")]
			public static string Custom_GoToEditor
			{
				[Token(Token = "0x6001BC5")]
				[Address(RVA = "0xFF2B44", Offset = "0xFF2B44", VA = "0xFF2B44")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000317")]
			public static string Custom_Title
			{
				[Token(Token = "0x6001BC6")]
				[Address(RVA = "0xFF2BD0", Offset = "0xFF2BD0", VA = "0xFF2BD0")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000318")]
			public static string Dance
			{
				[Token(Token = "0x6001BC7")]
				[Address(RVA = "0xFF2C5C", Offset = "0xFF2C5C", VA = "0xFF2C5C")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000319")]
			public static string Gameplay_Calibration
			{
				[Token(Token = "0x6001BC8")]
				[Address(RVA = "0xFF2CE8", Offset = "0xFF2CE8", VA = "0xFF2CE8")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700031A")]
			public static string Gameplay_Calibration_Apply
			{
				[Token(Token = "0x6001BC9")]
				[Address(RVA = "0xFF2D74", Offset = "0xFF2D74", VA = "0xFF2D74")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700031B")]
			public static string Gameplay_Calibration_AutoHeight
			{
				[Token(Token = "0x6001BCA")]
				[Address(RVA = "0xFF2E00", Offset = "0xFF2E00", VA = "0xFF2E00")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700031C")]
			public static string Gameplay_Calibration_CalibrateNow
			{
				[Token(Token = "0x6001BCB")]
				[Address(RVA = "0xFF2E8C", Offset = "0xFF2E8C", VA = "0xFF2E8C")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700031D")]
			public static string Gameplay_Calibration_HeightCalibration
			{
				[Token(Token = "0x6001BCC")]
				[Address(RVA = "0xFF2F18", Offset = "0xFF2F18", VA = "0xFF2F18")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700031E")]
			public static string Gameplay_Calibration_Manual
			{
				[Token(Token = "0x6001BCD")]
				[Address(RVA = "0xFF2FA4", Offset = "0xFF2FA4", VA = "0xFF2FA4")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700031F")]
			public static string Gameplay_Calibration_RoomOffset
			{
				[Token(Token = "0x6001BCE")]
				[Address(RVA = "0xFF3030", Offset = "0xFF3030", VA = "0xFF3030")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000320")]
			public static string Gameplay_Calibration_Rotation
			{
				[Token(Token = "0x6001BCF")]
				[Address(RVA = "0xFF30BC", Offset = "0xFF30BC", VA = "0xFF30BC")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000321")]
			public static string Gameplay_Calibration_XOffset
			{
				[Token(Token = "0x6001BD0")]
				[Address(RVA = "0xFF3148", Offset = "0xFF3148", VA = "0xFF3148")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000322")]
			public static string Gameplay_Calibration_ZOffset
			{
				[Token(Token = "0x6001BD1")]
				[Address(RVA = "0xFF31D4", Offset = "0xFF31D4", VA = "0xFF31D4")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000323")]
			public static string Gameplay_Gameplay
			{
				[Token(Token = "0x6001BD2")]
				[Address(RVA = "0xFF3260", Offset = "0xFF3260", VA = "0xFF3260")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000324")]
			public static string Gameplay_Holograms
			{
				[Token(Token = "0x6001BD3")]
				[Address(RVA = "0xFF32EC", Offset = "0xFF32EC", VA = "0xFF32EC")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000325")]
			public static string Gameplay_Holograms_Info
			{
				[Token(Token = "0x6001BD4")]
				[Address(RVA = "0xFF3378", Offset = "0xFF3378", VA = "0xFF3378")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000326")]
			public static string Gameplay_Lightshows
			{
				[Token(Token = "0x6001BD5")]
				[Address(RVA = "0xFF3404", Offset = "0xFF3404", VA = "0xFF3404")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000327")]
			public static string Gameplay_Lightshows_Info
			{
				[Token(Token = "0x6001BD6")]
				[Address(RVA = "0xFF3490", Offset = "0xFF3490", VA = "0xFF3490")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000328")]
			public static string Gameplay_SkipIntros
			{
				[Token(Token = "0x6001BD7")]
				[Address(RVA = "0xFF351C", Offset = "0xFF351C", VA = "0xFF351C")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000329")]
			public static string Gameplay_SkipIntros_Info
			{
				[Token(Token = "0x6001BD8")]
				[Address(RVA = "0xFF35A8", Offset = "0xFF35A8", VA = "0xFF35A8")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700032A")]
			public static string Gameplay_TauntParticles
			{
				[Token(Token = "0x6001BD9")]
				[Address(RVA = "0xFF3634", Offset = "0xFF3634", VA = "0xFF3634")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700032B")]
			public static string Gameplay_TauntParticles_Info
			{
				[Token(Token = "0x6001BDA")]
				[Address(RVA = "0xFF36C0", Offset = "0xFF36C0", VA = "0xFF36C0")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700032C")]
			public static string Gameplay_Title
			{
				[Token(Token = "0x6001BDB")]
				[Address(RVA = "0xFF374C", Offset = "0xFF374C", VA = "0xFF374C")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700032D")]
			public static string Graphics_AdvGraphics
			{
				[Token(Token = "0x6001BDC")]
				[Address(RVA = "0xFF37D8", Offset = "0xFF37D8", VA = "0xFF37D8")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700032E")]
			public static string Graphics_AntiAliasing
			{
				[Token(Token = "0x6001BDD")]
				[Address(RVA = "0xFF3864", Offset = "0xFF3864", VA = "0xFF3864")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700032F")]
			public static string Graphics_AntiAliasing_Info
			{
				[Token(Token = "0x6001BDE")]
				[Address(RVA = "0xFF38F0", Offset = "0xFF38F0", VA = "0xFF38F0")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000330")]
			public static string Graphics_Apply
			{
				[Token(Token = "0x6001BDF")]
				[Address(RVA = "0xFF397C", Offset = "0xFF397C", VA = "0xFF397C")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000331")]
			public static string Graphics_Colour_Double
			{
				[Token(Token = "0x6001BE0")]
				[Address(RVA = "0xFF3A08", Offset = "0xFF3A08", VA = "0xFF3A08")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000332")]
			public static string Graphics_Colour_Left
			{
				[Token(Token = "0x6001BE1")]
				[Address(RVA = "0xFF3A94", Offset = "0xFF3A94", VA = "0xFF3A94")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000333")]
			public static string Graphics_Colour_Reset
			{
				[Token(Token = "0x6001BE2")]
				[Address(RVA = "0xFF3B20", Offset = "0xFF3B20", VA = "0xFF3B20")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000334")]
			public static string Graphics_Colour_Right
			{
				[Token(Token = "0x6001BE3")]
				[Address(RVA = "0xFF3BAC", Offset = "0xFF3BAC", VA = "0xFF3BAC")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000335")]
			public static string Graphics_Colours
			{
				[Token(Token = "0x6001BE4")]
				[Address(RVA = "0xFF3C38", Offset = "0xFF3C38", VA = "0xFF3C38")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000336")]
			public static string Graphics_Environments
			{
				[Token(Token = "0x6001BE5")]
				[Address(RVA = "0xFF3CC4", Offset = "0xFF3CC4", VA = "0xFF3CC4")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000337")]
			public static string Graphics_Environments_Info
			{
				[Token(Token = "0x6001BE6")]
				[Address(RVA = "0xFF3D50", Offset = "0xFF3D50", VA = "0xFF3D50")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000338")]
			public static string Graphics_Fog
			{
				[Token(Token = "0x6001BE7")]
				[Address(RVA = "0xFF3DDC", Offset = "0xFF3DDC", VA = "0xFF3DDC")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000339")]
			public static string Graphics_Fog_Info
			{
				[Token(Token = "0x6001BE8")]
				[Address(RVA = "0xFF3E68", Offset = "0xFF3E68", VA = "0xFF3E68")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700033A")]
			public static string Graphics_Graphics
			{
				[Token(Token = "0x6001BE9")]
				[Address(RVA = "0xFF3EF4", Offset = "0xFF3EF4", VA = "0xFF3EF4")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700033B")]
			public static string Graphics_InGameUI
			{
				[Token(Token = "0x6001BEA")]
				[Address(RVA = "0xFF3F80", Offset = "0xFF3F80", VA = "0xFF3F80")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700033C")]
			public static string Graphics_InGameUI_Info
			{
				[Token(Token = "0x6001BEB")]
				[Address(RVA = "0xFF400C", Offset = "0xFF400C", VA = "0xFF400C")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700033D")]
			public static string Graphics_Particles
			{
				[Token(Token = "0x6001BEC")]
				[Address(RVA = "0xFF4098", Offset = "0xFF4098", VA = "0xFF4098")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700033E")]
			public static string Graphics_Particles_Info
			{
				[Token(Token = "0x6001BED")]
				[Address(RVA = "0xFF4124", Offset = "0xFF4124", VA = "0xFF4124")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700033F")]
			public static string Graphics_PostProcessing
			{
				[Token(Token = "0x6001BEE")]
				[Address(RVA = "0xFF41B0", Offset = "0xFF41B0", VA = "0xFF41B0")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000340")]
			public static string Graphics_PostProcessing_Info
			{
				[Token(Token = "0x6001BEF")]
				[Address(RVA = "0xFF423C", Offset = "0xFF423C", VA = "0xFF423C")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000341")]
			public static string Graphics_SmoothCam
			{
				[Token(Token = "0x6001BF0")]
				[Address(RVA = "0xFF42C8", Offset = "0xFF42C8", VA = "0xFF42C8")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000342")]
			public static string Graphics_SmoothCam_FOV
			{
				[Token(Token = "0x6001BF1")]
				[Address(RVA = "0xFF4354", Offset = "0xFF4354", VA = "0xFF4354")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000343")]
			public static string Graphics_SmoothCam_FOV_Info
			{
				[Token(Token = "0x6001BF2")]
				[Address(RVA = "0xFF43E0", Offset = "0xFF43E0", VA = "0xFF43E0")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000344")]
			public static string Graphics_SmoothCam_Info
			{
				[Token(Token = "0x6001BF3")]
				[Address(RVA = "0xFF446C", Offset = "0xFF446C", VA = "0xFF446C")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000345")]
			public static string Graphics_SmoothCam_Post
			{
				[Token(Token = "0x6001BF4")]
				[Address(RVA = "0xFF44F8", Offset = "0xFF44F8", VA = "0xFF44F8")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000346")]
			public static string Graphics_SmoothCam_Post_Info
			{
				[Token(Token = "0x6001BF5")]
				[Address(RVA = "0xFF4584", Offset = "0xFF4584", VA = "0xFF4584")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000347")]
			public static string Graphics_SmoothCam_Smoothness
			{
				[Token(Token = "0x6001BF6")]
				[Address(RVA = "0xFF4610", Offset = "0xFF4610", VA = "0xFF4610")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000348")]
			public static string Graphics_SmoothCam_Smoothness_Info
			{
				[Token(Token = "0x6001BF7")]
				[Address(RVA = "0xFF469C", Offset = "0xFF469C", VA = "0xFF469C")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000349")]
			public static string Graphics_SmoothCamera
			{
				[Token(Token = "0x6001BF8")]
				[Address(RVA = "0xFF4728", Offset = "0xFF4728", VA = "0xFF4728")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700034A")]
			public static string Graphics_Title
			{
				[Token(Token = "0x6001BF9")]
				[Address(RVA = "0xFF47B4", Offset = "0xFF47B4", VA = "0xFF47B4")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700034B")]
			public static string Language_Current
			{
				[Token(Token = "0x6001BFA")]
				[Address(RVA = "0xFF4840", Offset = "0xFF4840", VA = "0xFF4840")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700034C")]
			public static string Language_English
			{
				[Token(Token = "0x6001BFB")]
				[Address(RVA = "0xFF48CC", Offset = "0xFF48CC", VA = "0xFF48CC")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700034D")]
			public static string Language_French
			{
				[Token(Token = "0x6001BFC")]
				[Address(RVA = "0xFF4958", Offset = "0xFF4958", VA = "0xFF4958")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700034E")]
			public static string Language_German
			{
				[Token(Token = "0x6001BFD")]
				[Address(RVA = "0xFF49E4", Offset = "0xFF49E4", VA = "0xFF49E4")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700034F")]
			public static string Language_Italian
			{
				[Token(Token = "0x6001BFE")]
				[Address(RVA = "0xFF4A70", Offset = "0xFF4A70", VA = "0xFF4A70")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000350")]
			public static string Language_Japanese
			{
				[Token(Token = "0x6001BFF")]
				[Address(RVA = "0xFF4AFC", Offset = "0xFF4AFC", VA = "0xFF4AFC")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000351")]
			public static string Language_Korean
			{
				[Token(Token = "0x6001C00")]
				[Address(RVA = "0xFF4B88", Offset = "0xFF4B88", VA = "0xFF4B88")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000352")]
			public static string Language_Spanish
			{
				[Token(Token = "0x6001C01")]
				[Address(RVA = "0xFF4C14", Offset = "0xFF4C14", VA = "0xFF4C14")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000353")]
			public static string Language_Title
			{
				[Token(Token = "0x6001C02")]
				[Address(RVA = "0xFF4CA0", Offset = "0xFF4CA0", VA = "0xFF4CA0")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000354")]
			public static string Leaderboards_Friends
			{
				[Token(Token = "0x6001C03")]
				[Address(RVA = "0xFF4D2C", Offset = "0xFF4D2C", VA = "0xFF4D2C")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000355")]
			public static string Leaderboards_Global
			{
				[Token(Token = "0x6001C04")]
				[Address(RVA = "0xFF4DB8", Offset = "0xFF4DB8", VA = "0xFF4DB8")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000356")]
			public static string Leaderboards_Player
			{
				[Token(Token = "0x6001C05")]
				[Address(RVA = "0xFF4E44", Offset = "0xFF4E44", VA = "0xFF4E44")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000357")]
			public static string Leaderboards_Rank
			{
				[Token(Token = "0x6001C06")]
				[Address(RVA = "0xFF4ED0", Offset = "0xFF4ED0", VA = "0xFF4ED0")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000358")]
			public static string Leaderboards_Score
			{
				[Token(Token = "0x6001C07")]
				[Address(RVA = "0xFF4F5C", Offset = "0xFF4F5C", VA = "0xFF4F5C")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000359")]
			public static string Leaderboards_Title
			{
				[Token(Token = "0x6001C08")]
				[Address(RVA = "0xFF4FE8", Offset = "0xFF4FE8", VA = "0xFF4FE8")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700035A")]
			public static string Main_Arcade
			{
				[Token(Token = "0x6001C09")]
				[Address(RVA = "0xFF5074", Offset = "0xFF5074", VA = "0xFF5074")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700035B")]
			public static string Main_CustomSongs
			{
				[Token(Token = "0x6001C0A")]
				[Address(RVA = "0xFF5100", Offset = "0xFF5100", VA = "0xFF5100")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700035C")]
			public static string Main_HowToPlay
			{
				[Token(Token = "0x6001C0B")]
				[Address(RVA = "0xFF518C", Offset = "0xFF518C", VA = "0xFF518C")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700035D")]
			public static string Main_Title
			{
				[Token(Token = "0x6001C0C")]
				[Address(RVA = "0xFF5218", Offset = "0xFF5218", VA = "0xFF5218")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700035E")]
			public static string NoFail
			{
				[Token(Token = "0x6001C0D")]
				[Address(RVA = "0xFF52A4", Offset = "0xFF52A4", VA = "0xFF52A4")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700035F")]
			public static string Settings_Audio
			{
				[Token(Token = "0x6001C0E")]
				[Address(RVA = "0xFF5330", Offset = "0xFF5330", VA = "0xFF5330")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000360")]
			public static string Settings_Credits
			{
				[Token(Token = "0x6001C0F")]
				[Address(RVA = "0xFF53BC", Offset = "0xFF53BC", VA = "0xFF53BC")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000361")]
			public static string Settings_Gameplay
			{
				[Token(Token = "0x6001C10")]
				[Address(RVA = "0xFF5448", Offset = "0xFF5448", VA = "0xFF5448")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000362")]
			public static string Settings_Graphics
			{
				[Token(Token = "0x6001C11")]
				[Address(RVA = "0xFF54D4", Offset = "0xFF54D4", VA = "0xFF54D4")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000363")]
			public static string Settings_Language
			{
				[Token(Token = "0x6001C12")]
				[Address(RVA = "0xFF5560", Offset = "0xFF5560", VA = "0xFF5560")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000364")]
			public static string Settings_Title
			{
				[Token(Token = "0x6001C13")]
				[Address(RVA = "0xFF55EC", Offset = "0xFF55EC", VA = "0xFF55EC")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000365")]
			public static string SongSelect_Leaderboard
			{
				[Token(Token = "0x6001C14")]
				[Address(RVA = "0xFF5678", Offset = "0xFF5678", VA = "0xFF5678")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000366")]
			public static string SongSelect_More
			{
				[Token(Token = "0x6001C15")]
				[Address(RVA = "0xFF5704", Offset = "0xFF5704", VA = "0xFF5704")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000367")]
			public static string SongSelect_Rank
			{
				[Token(Token = "0x6001C16")]
				[Address(RVA = "0xFF5790", Offset = "0xFF5790", VA = "0xFF5790")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000368")]
			public static string SongSelect_Title
			{
				[Token(Token = "0x6001C17")]
				[Address(RVA = "0xFF581C", Offset = "0xFF581C", VA = "0xFF581C")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000369")]
			public static string Title_JoinDiscord
			{
				[Token(Token = "0x6001C18")]
				[Address(RVA = "0xFF58A8", Offset = "0xFF58A8", VA = "0xFF58A8")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700036A")]
			public static string Title_Start
			{
				[Token(Token = "0x6001C19")]
				[Address(RVA = "0xFF5934", Offset = "0xFF5934", VA = "0xFF5934")]
				get
				{
					return null;
				}
			}
		}

		[Token(Token = "0x170000ED")]
		public static string Accuracy
		{
			[Token(Token = "0x60010AC")]
			[Address(RVA = "0xCE3E54", Offset = "0xCE3E54", VA = "0xCE3E54")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000EE")]
		public static string Back
		{
			[Token(Token = "0x60010AD")]
			[Address(RVA = "0xCE3EE0", Offset = "0xCE3EE0", VA = "0xCE3EE0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000EF")]
		public static string Back_To_Lobby
		{
			[Token(Token = "0x60010AE")]
			[Address(RVA = "0xCE3F6C", Offset = "0xCE3F6C", VA = "0xCE3F6C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000F0")]
		public static string Battle
		{
			[Token(Token = "0x60010AF")]
			[Address(RVA = "0xCE3FF8", Offset = "0xCE3FF8", VA = "0xCE3FF8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000F1")]
		public static string Core_Bio
		{
			[Token(Token = "0x60010B0")]
			[Address(RVA = "0xCE4084", Offset = "0xCE4084", VA = "0xCE4084")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000F2")]
		public static string Core_Genre
		{
			[Token(Token = "0x60010B1")]
			[Address(RVA = "0xCE4110", Offset = "0xCE4110", VA = "0xCE4110")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000F3")]
		public static string Core_Name
		{
			[Token(Token = "0x60010B2")]
			[Address(RVA = "0xCE419C", Offset = "0xCE419C", VA = "0xCE419C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000F4")]
		public static string Core_Origin
		{
			[Token(Token = "0x60010B3")]
			[Address(RVA = "0xCE4228", Offset = "0xCE4228", VA = "0xCE4228")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000F5")]
		public static string Core_Stage1
		{
			[Token(Token = "0x60010B4")]
			[Address(RVA = "0xCE42B4", Offset = "0xCE42B4", VA = "0xCE42B4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000F6")]
		public static string Core_Stage2
		{
			[Token(Token = "0x60010B5")]
			[Address(RVA = "0xCE4340", Offset = "0xCE4340", VA = "0xCE4340")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000F7")]
		public static string Core_Stage3
		{
			[Token(Token = "0x60010B6")]
			[Address(RVA = "0xCE43CC", Offset = "0xCE43CC", VA = "0xCE43CC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000F8")]
		public static string Core_Stage4
		{
			[Token(Token = "0x60010B7")]
			[Address(RVA = "0xCE4458", Offset = "0xCE4458", VA = "0xCE4458")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000F9")]
		public static string Core_Stage5
		{
			[Token(Token = "0x60010B8")]
			[Address(RVA = "0xCE44E4", Offset = "0xCE44E4", VA = "0xCE44E4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000FA")]
		public static string Dance
		{
			[Token(Token = "0x60010B9")]
			[Address(RVA = "0xCE4570", Offset = "0xCE4570", VA = "0xCE4570")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000FB")]
		public static string Dre_Bio
		{
			[Token(Token = "0x60010BA")]
			[Address(RVA = "0xCE45FC", Offset = "0xCE45FC", VA = "0xCE45FC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000FC")]
		public static string Dre_Genre
		{
			[Token(Token = "0x60010BB")]
			[Address(RVA = "0xCE4688", Offset = "0xCE4688", VA = "0xCE4688")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000FD")]
		public static string Dre_Name
		{
			[Token(Token = "0x60010BC")]
			[Address(RVA = "0xCE4714", Offset = "0xCE4714", VA = "0xCE4714")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000FE")]
		public static string Dre_Origin
		{
			[Token(Token = "0x60010BD")]
			[Address(RVA = "0xCE47A0", Offset = "0xCE47A0", VA = "0xCE47A0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000FF")]
		public static string Dre_Stage1
		{
			[Token(Token = "0x60010BE")]
			[Address(RVA = "0xCE482C", Offset = "0xCE482C", VA = "0xCE482C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000100")]
		public static string Dre_Stage2
		{
			[Token(Token = "0x60010BF")]
			[Address(RVA = "0xCE48B8", Offset = "0xCE48B8", VA = "0xCE48B8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000101")]
		public static string Dre_Stage3
		{
			[Token(Token = "0x60010C0")]
			[Address(RVA = "0xCE4944", Offset = "0xCE4944", VA = "0xCE4944")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000102")]
		public static string Dre_Stage4
		{
			[Token(Token = "0x60010C1")]
			[Address(RVA = "0xCE49D0", Offset = "0xCE49D0", VA = "0xCE49D0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000103")]
		public static string Dre_Stage5
		{
			[Token(Token = "0x60010C2")]
			[Address(RVA = "0xCE4A5C", Offset = "0xCE4A5C", VA = "0xCE4A5C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000104")]
		public static string Easy
		{
			[Token(Token = "0x60010C3")]
			[Address(RVA = "0xCE4AE8", Offset = "0xCE4AE8", VA = "0xCE4AE8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000105")]
		public static string Flair
		{
			[Token(Token = "0x60010C4")]
			[Address(RVA = "0xCE4B74", Offset = "0xCE4B74", VA = "0xCE4B74")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000106")]
		public static string Game_Paused
		{
			[Token(Token = "0x60010C5")]
			[Address(RVA = "0xCE4C00", Offset = "0xCE4C00", VA = "0xCE4C00")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000107")]
		public static string Hard
		{
			[Token(Token = "0x60010C6")]
			[Address(RVA = "0xCE4C8C", Offset = "0xCE4C8C", VA = "0xCE4C8C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000108")]
		public static string HowToPlay_Basic
		{
			[Token(Token = "0x60010C7")]
			[Address(RVA = "0xCE4D18", Offset = "0xCE4D18", VA = "0xCE4D18")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000109")]
		public static string HowToPlay_Cascades
		{
			[Token(Token = "0x60010C8")]
			[Address(RVA = "0xCE4DA4", Offset = "0xCE4DA4", VA = "0xCE4DA4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700010A")]
		public static string HowToPlay_Double
		{
			[Token(Token = "0x60010C9")]
			[Address(RVA = "0xCE4E30", Offset = "0xCE4E30", VA = "0xCE4E30")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700010B")]
		public static string HowToPlay_Flair
		{
			[Token(Token = "0x60010CA")]
			[Address(RVA = "0xCE4EBC", Offset = "0xCE4EBC", VA = "0xCE4EBC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700010C")]
		public static string HowToPlay_FlairTitle
		{
			[Token(Token = "0x60010CB")]
			[Address(RVA = "0xCE4F48", Offset = "0xCE4F48", VA = "0xCE4F48")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700010D")]
		public static string HowToPlay_Sets
		{
			[Token(Token = "0x60010CC")]
			[Address(RVA = "0xCE4FD4", Offset = "0xCE4FD4", VA = "0xCE4FD4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700010E")]
		public static string Lais_Bio
		{
			[Token(Token = "0x60010CD")]
			[Address(RVA = "0xCE5060", Offset = "0xCE5060", VA = "0xCE5060")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700010F")]
		public static string Lais_Genre
		{
			[Token(Token = "0x60010CE")]
			[Address(RVA = "0xCE50EC", Offset = "0xCE50EC", VA = "0xCE50EC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000110")]
		public static string Lais_Name
		{
			[Token(Token = "0x60010CF")]
			[Address(RVA = "0xCE5178", Offset = "0xCE5178", VA = "0xCE5178")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000111")]
		public static string Lais_Origin
		{
			[Token(Token = "0x60010D0")]
			[Address(RVA = "0xCE5204", Offset = "0xCE5204", VA = "0xCE5204")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000112")]
		public static string Lais_Stage1
		{
			[Token(Token = "0x60010D1")]
			[Address(RVA = "0xCE5290", Offset = "0xCE5290", VA = "0xCE5290")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000113")]
		public static string Lais_Stage2
		{
			[Token(Token = "0x60010D2")]
			[Address(RVA = "0xCE531C", Offset = "0xCE531C", VA = "0xCE531C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000114")]
		public static string Lais_Stage3
		{
			[Token(Token = "0x60010D3")]
			[Address(RVA = "0xCE53A8", Offset = "0xCE53A8", VA = "0xCE53A8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000115")]
		public static string Lais_Stage4
		{
			[Token(Token = "0x60010D4")]
			[Address(RVA = "0xCE5434", Offset = "0xCE5434", VA = "0xCE5434")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000116")]
		public static string Lais_Stage5
		{
			[Token(Token = "0x60010D5")]
			[Address(RVA = "0xCE54C0", Offset = "0xCE54C0", VA = "0xCE54C0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000117")]
		public static string Leaderboards_Friends
		{
			[Token(Token = "0x60010D6")]
			[Address(RVA = "0xCE554C", Offset = "0xCE554C", VA = "0xCE554C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000118")]
		public static string Leaderboards_Global
		{
			[Token(Token = "0x60010D7")]
			[Address(RVA = "0xCE55D8", Offset = "0xCE55D8", VA = "0xCE55D8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000119")]
		public static string Leaderboards_Local
		{
			[Token(Token = "0x60010D8")]
			[Address(RVA = "0xCE5664", Offset = "0xCE5664", VA = "0xCE5664")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700011A")]
		public static string Leaderboards_Title
		{
			[Token(Token = "0x60010D9")]
			[Address(RVA = "0xCE56F0", Offset = "0xCE56F0", VA = "0xCE56F0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700011B")]
		public static string LiuWei_Name
		{
			[Token(Token = "0x60010DA")]
			[Address(RVA = "0xCE577C", Offset = "0xCE577C", VA = "0xCE577C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700011C")]
		public static string LiuWen_Genre
		{
			[Token(Token = "0x60010DB")]
			[Address(RVA = "0xCE5808", Offset = "0xCE5808", VA = "0xCE5808")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700011D")]
		public static string Liu_Bio
		{
			[Token(Token = "0x60010DC")]
			[Address(RVA = "0xCE5894", Offset = "0xCE5894", VA = "0xCE5894")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700011E")]
		public static string Liu_Origin
		{
			[Token(Token = "0x60010DD")]
			[Address(RVA = "0xCE5920", Offset = "0xCE5920", VA = "0xCE5920")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700011F")]
		public static string Liu_Stage1
		{
			[Token(Token = "0x60010DE")]
			[Address(RVA = "0xCE59AC", Offset = "0xCE59AC", VA = "0xCE59AC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000120")]
		public static string Liu_Stage2
		{
			[Token(Token = "0x60010DF")]
			[Address(RVA = "0xCE5A38", Offset = "0xCE5A38", VA = "0xCE5A38")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000121")]
		public static string Liu_Stage3
		{
			[Token(Token = "0x60010E0")]
			[Address(RVA = "0xCE5AC4", Offset = "0xCE5AC4", VA = "0xCE5AC4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000122")]
		public static string Liu_Stage4
		{
			[Token(Token = "0x60010E1")]
			[Address(RVA = "0xCE5B50", Offset = "0xCE5B50", VA = "0xCE5B50")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000123")]
		public static string Liu_Stage5
		{
			[Token(Token = "0x60010E2")]
			[Address(RVA = "0xCE5BDC", Offset = "0xCE5BDC", VA = "0xCE5BDC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000124")]
		public static string Max_Multiplier
		{
			[Token(Token = "0x60010E3")]
			[Address(RVA = "0xCE5C68", Offset = "0xCE5C68", VA = "0xCE5C68")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000125")]
		public static string Max_Streak
		{
			[Token(Token = "0x60010E4")]
			[Address(RVA = "0xCE5CF4", Offset = "0xCE5CF4", VA = "0xCE5CF4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000126")]
		public static string Next_Stage
		{
			[Token(Token = "0x60010E5")]
			[Address(RVA = "0xCE5D80", Offset = "0xCE5D80", VA = "0xCE5D80")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000127")]
		public static string Normal
		{
			[Token(Token = "0x60010E6")]
			[Address(RVA = "0xCE5E0C", Offset = "0xCE5E0C", VA = "0xCE5E0C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000128")]
		public static string Perfect_Cascades
		{
			[Token(Token = "0x60010E7")]
			[Address(RVA = "0xCE5E98", Offset = "0xCE5E98", VA = "0xCE5E98")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000129")]
		public static string Pyro_Bio
		{
			[Token(Token = "0x60010E8")]
			[Address(RVA = "0xCE5F24", Offset = "0xCE5F24", VA = "0xCE5F24")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700012A")]
		public static string Pyro_Genre
		{
			[Token(Token = "0x60010E9")]
			[Address(RVA = "0xCE5FB0", Offset = "0xCE5FB0", VA = "0xCE5FB0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700012B")]
		public static string Pyro_Name
		{
			[Token(Token = "0x60010EA")]
			[Address(RVA = "0xCE603C", Offset = "0xCE603C", VA = "0xCE603C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700012C")]
		public static string Pyro_Origin
		{
			[Token(Token = "0x60010EB")]
			[Address(RVA = "0xCE60C8", Offset = "0xCE60C8", VA = "0xCE60C8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700012D")]
		public static string Pyro_Stage1
		{
			[Token(Token = "0x60010EC")]
			[Address(RVA = "0xCE6154", Offset = "0xCE6154", VA = "0xCE6154")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700012E")]
		public static string Pyro_Stage2
		{
			[Token(Token = "0x60010ED")]
			[Address(RVA = "0xCE61E0", Offset = "0xCE61E0", VA = "0xCE61E0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700012F")]
		public static string Pyro_Stage3
		{
			[Token(Token = "0x60010EE")]
			[Address(RVA = "0xCE626C", Offset = "0xCE626C", VA = "0xCE626C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000130")]
		public static string Pyro_Stage4
		{
			[Token(Token = "0x60010EF")]
			[Address(RVA = "0xCE62F8", Offset = "0xCE62F8", VA = "0xCE62F8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000131")]
		public static string Pyro_Stage5
		{
			[Token(Token = "0x60010F0")]
			[Address(RVA = "0xCE6384", Offset = "0xCE6384", VA = "0xCE6384")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000132")]
		public static string Rank
		{
			[Token(Token = "0x60010F1")]
			[Address(RVA = "0xCE6410", Offset = "0xCE6410", VA = "0xCE6410")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000133")]
		public static string Remi_Bio
		{
			[Token(Token = "0x60010F2")]
			[Address(RVA = "0xCE649C", Offset = "0xCE649C", VA = "0xCE649C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000134")]
		public static string Remi_Genre
		{
			[Token(Token = "0x60010F3")]
			[Address(RVA = "0xCE6528", Offset = "0xCE6528", VA = "0xCE6528")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000135")]
		public static string Remi_Name
		{
			[Token(Token = "0x60010F4")]
			[Address(RVA = "0xCE65B4", Offset = "0xCE65B4", VA = "0xCE65B4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000136")]
		public static string Remi_Origin
		{
			[Token(Token = "0x60010F5")]
			[Address(RVA = "0xCE6640", Offset = "0xCE6640", VA = "0xCE6640")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000137")]
		public static string Remi_Stage1
		{
			[Token(Token = "0x60010F6")]
			[Address(RVA = "0xCE66CC", Offset = "0xCE66CC", VA = "0xCE66CC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000138")]
		public static string Remi_Stage2
		{
			[Token(Token = "0x60010F7")]
			[Address(RVA = "0xCE6758", Offset = "0xCE6758", VA = "0xCE6758")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000139")]
		public static string Remi_Stage3
		{
			[Token(Token = "0x60010F8")]
			[Address(RVA = "0xCE67E4", Offset = "0xCE67E4", VA = "0xCE67E4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700013A")]
		public static string Remi_Stage4
		{
			[Token(Token = "0x60010F9")]
			[Address(RVA = "0xCE6870", Offset = "0xCE6870", VA = "0xCE6870")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700013B")]
		public static string Remi_Stage5
		{
			[Token(Token = "0x60010FA")]
			[Address(RVA = "0xCE68FC", Offset = "0xCE68FC", VA = "0xCE68FC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700013C")]
		public static string Resume
		{
			[Token(Token = "0x60010FB")]
			[Address(RVA = "0xCE6988", Offset = "0xCE6988", VA = "0xCE6988")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700013D")]
		public static string Retry
		{
			[Token(Token = "0x60010FC")]
			[Address(RVA = "0xCE6A14", Offset = "0xCE6A14", VA = "0xCE6A14")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700013E")]
		public static string ScoreEvent_Amazing
		{
			[Token(Token = "0x60010FD")]
			[Address(RVA = "0xCE6AA0", Offset = "0xCE6AA0", VA = "0xCE6AA0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700013F")]
		public static string ScoreEvent_Awesome
		{
			[Token(Token = "0x60010FE")]
			[Address(RVA = "0xCE6B2C", Offset = "0xCE6B2C", VA = "0xCE6B2C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000140")]
		public static string ScoreEvent_Beautiful
		{
			[Token(Token = "0x60010FF")]
			[Address(RVA = "0xCE6BB8", Offset = "0xCE6BB8", VA = "0xCE6BB8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000141")]
		public static string ScoreEvent_Cool
		{
			[Token(Token = "0x6001100")]
			[Address(RVA = "0xCE6C44", Offset = "0xCE6C44", VA = "0xCE6C44")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000142")]
		public static string ScoreEvent_Great
		{
			[Token(Token = "0x6001101")]
			[Address(RVA = "0xCE6CD0", Offset = "0xCE6CD0", VA = "0xCE6CD0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000143")]
		public static string ScoreEvent_Nice
		{
			[Token(Token = "0x6001102")]
			[Address(RVA = "0xCE6D5C", Offset = "0xCE6D5C", VA = "0xCE6D5C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000144")]
		public static string ScoreEvent_Perfect
		{
			[Token(Token = "0x6001103")]
			[Address(RVA = "0xCE6DE8", Offset = "0xCE6DE8", VA = "0xCE6DE8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000145")]
		public static string ScoreEvent_Superb
		{
			[Token(Token = "0x6001104")]
			[Address(RVA = "0xCE6E74", Offset = "0xCE6E74", VA = "0xCE6E74")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000146")]
		public static string Select
		{
			[Token(Token = "0x6001105")]
			[Address(RVA = "0xCE6F00", Offset = "0xCE6F00", VA = "0xCE6F00")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000147")]
		public static string Sets_Completed
		{
			[Token(Token = "0x6001106")]
			[Address(RVA = "0xCE6F8C", Offset = "0xCE6F8C", VA = "0xCE6F8C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000148")]
		public static string Settings_AmbientMusic
		{
			[Token(Token = "0x6001107")]
			[Address(RVA = "0xCE7018", Offset = "0xCE7018", VA = "0xCE7018")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000149")]
		public static string Settings_Apply
		{
			[Token(Token = "0x6001108")]
			[Address(RVA = "0xCE70A4", Offset = "0xCE70A4", VA = "0xCE70A4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700014A")]
		public static string Settings_Audio
		{
			[Token(Token = "0x6001109")]
			[Address(RVA = "0xCE7130", Offset = "0xCE7130", VA = "0xCE7130")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700014B")]
		public static string Settings_AuraQuality
		{
			[Token(Token = "0x600110A")]
			[Address(RVA = "0xCE71BC", Offset = "0xCE71BC", VA = "0xCE71BC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700014C")]
		public static string Settings_Aura_Lighting
		{
			[Token(Token = "0x600110B")]
			[Address(RVA = "0xCE7248", Offset = "0xCE7248", VA = "0xCE7248")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700014D")]
		public static string Settings_Credits
		{
			[Token(Token = "0x600110C")]
			[Address(RVA = "0xCE72D4", Offset = "0xCE72D4", VA = "0xCE72D4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700014E")]
		public static string Settings_DanceHolograms
		{
			[Token(Token = "0x600110D")]
			[Address(RVA = "0xCE7360", Offset = "0xCE7360", VA = "0xCE7360")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700014F")]
		public static string Settings_DevConsole
		{
			[Token(Token = "0x600110E")]
			[Address(RVA = "0xCE73EC", Offset = "0xCE73EC", VA = "0xCE73EC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000150")]
		public static string Settings_GameMusic
		{
			[Token(Token = "0x600110F")]
			[Address(RVA = "0xCE7478", Offset = "0xCE7478", VA = "0xCE7478")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000151")]
		public static string Settings_Graphics
		{
			[Token(Token = "0x6001110")]
			[Address(RVA = "0xCE7504", Offset = "0xCE7504", VA = "0xCE7504")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000152")]
		public static string Settings_GraphicsBlurb
		{
			[Token(Token = "0x6001111")]
			[Address(RVA = "0xCE7590", Offset = "0xCE7590", VA = "0xCE7590")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000153")]
		public static string Settings_Language
		{
			[Token(Token = "0x6001112")]
			[Address(RVA = "0xCE761C", Offset = "0xCE761C", VA = "0xCE761C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000154")]
		public static string Settings_Lightshows
		{
			[Token(Token = "0x6001113")]
			[Address(RVA = "0xCE76A8", Offset = "0xCE76A8", VA = "0xCE76A8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000155")]
		public static string Settings_MasterVolume
		{
			[Token(Token = "0x6001114")]
			[Address(RVA = "0xCE7734", Offset = "0xCE7734", VA = "0xCE7734")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000156")]
		public static string Settings_Node_Hit_Sounds
		{
			[Token(Token = "0x6001115")]
			[Address(RVA = "0xCE77C0", Offset = "0xCE77C0", VA = "0xCE77C0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000157")]
		public static string Settings_Other
		{
			[Token(Token = "0x6001116")]
			[Address(RVA = "0xCE784C", Offset = "0xCE784C", VA = "0xCE784C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000158")]
		public static string Settings_SFX
		{
			[Token(Token = "0x6001117")]
			[Address(RVA = "0xCE78D8", Offset = "0xCE78D8", VA = "0xCE78D8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000159")]
		public static string Settings_TauntParticles
		{
			[Token(Token = "0x6001118")]
			[Address(RVA = "0xCE7964", Offset = "0xCE7964", VA = "0xCE7964")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700015A")]
		public static string Settings_Title
		{
			[Token(Token = "0x6001119")]
			[Address(RVA = "0xCE79F0", Offset = "0xCE79F0", VA = "0xCE79F0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700015B")]
		public static string Settings_Voice
		{
			[Token(Token = "0x600111A")]
			[Address(RVA = "0xCE7A7C", Offset = "0xCE7A7C", VA = "0xCE7A7C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700015C")]
		public static string Sonya_Bio
		{
			[Token(Token = "0x600111B")]
			[Address(RVA = "0xCE7B08", Offset = "0xCE7B08", VA = "0xCE7B08")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700015D")]
		public static string Sonya_Genre
		{
			[Token(Token = "0x600111C")]
			[Address(RVA = "0xCE7B94", Offset = "0xCE7B94", VA = "0xCE7B94")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700015E")]
		public static string Sonya_Name
		{
			[Token(Token = "0x600111D")]
			[Address(RVA = "0xCE7C20", Offset = "0xCE7C20", VA = "0xCE7C20")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700015F")]
		public static string Sonya_Origin
		{
			[Token(Token = "0x600111E")]
			[Address(RVA = "0xCE7CAC", Offset = "0xCE7CAC", VA = "0xCE7CAC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000160")]
		public static string Sonya_Stage1
		{
			[Token(Token = "0x600111F")]
			[Address(RVA = "0xCE7D38", Offset = "0xCE7D38", VA = "0xCE7D38")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000161")]
		public static string Sonya_Stage2
		{
			[Token(Token = "0x6001120")]
			[Address(RVA = "0xCE7DC4", Offset = "0xCE7DC4", VA = "0xCE7DC4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000162")]
		public static string Sonya_Stage3
		{
			[Token(Token = "0x6001121")]
			[Address(RVA = "0xCE7E50", Offset = "0xCE7E50", VA = "0xCE7E50")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000163")]
		public static string Sonya_Stage4
		{
			[Token(Token = "0x6001122")]
			[Address(RVA = "0xCE7EDC", Offset = "0xCE7EDC", VA = "0xCE7EDC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000164")]
		public static string Sonya_Stage5
		{
			[Token(Token = "0x6001123")]
			[Address(RVA = "0xCE7F68", Offset = "0xCE7F68", VA = "0xCE7F68")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000165")]
		public static string Stage
		{
			[Token(Token = "0x6001124")]
			[Address(RVA = "0xCE7FF4", Offset = "0xCE7FF4", VA = "0xCE7FF4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000166")]
		public static string Stage_1
		{
			[Token(Token = "0x6001125")]
			[Address(RVA = "0xCE8080", Offset = "0xCE8080", VA = "0xCE8080")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000167")]
		public static string Stage_2
		{
			[Token(Token = "0x6001126")]
			[Address(RVA = "0xCE810C", Offset = "0xCE810C", VA = "0xCE810C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000168")]
		public static string Stage_3
		{
			[Token(Token = "0x6001127")]
			[Address(RVA = "0xCE8198", Offset = "0xCE8198", VA = "0xCE8198")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000169")]
		public static string Stage_Clear
		{
			[Token(Token = "0x6001128")]
			[Address(RVA = "0xCE8224", Offset = "0xCE8224", VA = "0xCE8224")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700016A")]
		public static string Stage_Failed
		{
			[Token(Token = "0x6001129")]
			[Address(RVA = "0xCE82B0", Offset = "0xCE82B0", VA = "0xCE82B0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700016B")]
		public static string Stop
		{
			[Token(Token = "0x600112A")]
			[Address(RVA = "0xCE833C", Offset = "0xCE833C", VA = "0xCE833C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700016C")]
		public static string Tutorial_Arrows
		{
			[Token(Token = "0x600112B")]
			[Address(RVA = "0xCE83C8", Offset = "0xCE83C8", VA = "0xCE83C8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700016D")]
		public static string Tutorial_Awesome
		{
			[Token(Token = "0x600112C")]
			[Address(RVA = "0xCE8454", Offset = "0xCE8454", VA = "0xCE8454")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700016E")]
		public static string Tutorial_Cascades
		{
			[Token(Token = "0x600112D")]
			[Address(RVA = "0xCE84E0", Offset = "0xCE84E0", VA = "0xCE84E0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700016F")]
		public static string Tutorial_Great
		{
			[Token(Token = "0x600112E")]
			[Address(RVA = "0xCE856C", Offset = "0xCE856C", VA = "0xCE856C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000170")]
		public static string Tutorial_GreenNode
		{
			[Token(Token = "0x600112F")]
			[Address(RVA = "0xCE85F8", Offset = "0xCE85F8", VA = "0xCE85F8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000171")]
		public static string Tutorial_Harder
		{
			[Token(Token = "0x6001130")]
			[Address(RVA = "0xCE8684", Offset = "0xCE8684", VA = "0xCE8684")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000172")]
		public static string Tutorial_Nice
		{
			[Token(Token = "0x6001131")]
			[Address(RVA = "0xCE8710", Offset = "0xCE8710", VA = "0xCE8710")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000173")]
		public static string Tutorial_PinkNode
		{
			[Token(Token = "0x6001132")]
			[Address(RVA = "0xCE879C", Offset = "0xCE879C", VA = "0xCE879C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000174")]
		public static string Tutorial_Power
		{
			[Token(Token = "0x6001133")]
			[Address(RVA = "0xCE8828", Offset = "0xCE8828", VA = "0xCE8828")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000175")]
		public static string Tutorial_Sets
		{
			[Token(Token = "0x6001134")]
			[Address(RVA = "0xCE88B4", Offset = "0xCE88B4", VA = "0xCE88B4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000176")]
		public static string Tutorial_Title_BasicNodes
		{
			[Token(Token = "0x6001135")]
			[Address(RVA = "0xCE8940", Offset = "0xCE8940", VA = "0xCE8940")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000177")]
		public static string Tutorial_Title_Cascades
		{
			[Token(Token = "0x6001136")]
			[Address(RVA = "0xCE89CC", Offset = "0xCE89CC", VA = "0xCE89CC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000178")]
		public static string Tutorial_Title_Dance
		{
			[Token(Token = "0x6001137")]
			[Address(RVA = "0xCE8A58", Offset = "0xCE8A58", VA = "0xCE8A58")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000179")]
		public static string Tutorial_Title_Power
		{
			[Token(Token = "0x6001138")]
			[Address(RVA = "0xCE8AE4", Offset = "0xCE8AE4", VA = "0xCE8AE4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700017A")]
		public static string Tutorial_Title_Sets
		{
			[Token(Token = "0x6001139")]
			[Address(RVA = "0xCE8B70", Offset = "0xCE8B70", VA = "0xCE8B70")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700017B")]
		public static string Tutorial_Title_WideNodes
		{
			[Token(Token = "0x600113A")]
			[Address(RVA = "0xCE8BFC", Offset = "0xCE8BFC", VA = "0xCE8BFC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700017C")]
		public static string Tutorial_Title_YellowNodes
		{
			[Token(Token = "0x600113B")]
			[Address(RVA = "0xCE8C88", Offset = "0xCE8C88", VA = "0xCE8C88")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700017D")]
		public static string Tutorial_TryAgain
		{
			[Token(Token = "0x600113C")]
			[Address(RVA = "0xCE8D14", Offset = "0xCE8D14", VA = "0xCE8D14")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700017E")]
		public static string Tutorial_Welcome
		{
			[Token(Token = "0x600113D")]
			[Address(RVA = "0xCE8DA0", Offset = "0xCE8DA0", VA = "0xCE8DA0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700017F")]
		public static string Tutorial_Yellow
		{
			[Token(Token = "0x600113E")]
			[Address(RVA = "0xCE8E2C", Offset = "0xCE8E2C", VA = "0xCE8E2C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000180")]
		public static string UI_CharacterSelect_title
		{
			[Token(Token = "0x600113F")]
			[Address(RVA = "0xCE8EB8", Offset = "0xCE8EB8", VA = "0xCE8EB8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000181")]
		public static string UI_MainFont
		{
			[Token(Token = "0x6001140")]
			[Address(RVA = "0xCE8F44", Offset = "0xCE8F44", VA = "0xCE8F44")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000182")]
		public static string UI_MainMenu_Custom
		{
			[Token(Token = "0x6001141")]
			[Address(RVA = "0xCE8FD0", Offset = "0xCE8FD0", VA = "0xCE8FD0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000183")]
		public static string UI_MainMenu_Editor
		{
			[Token(Token = "0x6001142")]
			[Address(RVA = "0xCE905C", Offset = "0xCE905C", VA = "0xCE905C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000184")]
		public static string UI_MainMenu_FreeDance
		{
			[Token(Token = "0x6001143")]
			[Address(RVA = "0xCE90E8", Offset = "0xCE90E8", VA = "0xCE90E8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000185")]
		public static string UI_MainMenu_Mode
		{
			[Token(Token = "0x6001144")]
			[Address(RVA = "0xCE9174", Offset = "0xCE9174", VA = "0xCE9174")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000186")]
		public static string UI_MainMenu_Start
		{
			[Token(Token = "0x6001145")]
			[Address(RVA = "0xCE9200", Offset = "0xCE9200", VA = "0xCE9200")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000187")]
		public static string UI_MainMenu_Tournament
		{
			[Token(Token = "0x6001146")]
			[Address(RVA = "0xCE928C", Offset = "0xCE928C", VA = "0xCE928C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000188")]
		public static string UI_MainMenu_Tutorial
		{
			[Token(Token = "0x6001147")]
			[Address(RVA = "0xCE9318", Offset = "0xCE9318", VA = "0xCE9318")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000189")]
		public static string UI_SongSelect_title
		{
			[Token(Token = "0x6001148")]
			[Address(RVA = "0xCE93A4", Offset = "0xCE93A4", VA = "0xCE93A4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700018A")]
		public static string UI_TitleFont
		{
			[Token(Token = "0x6001149")]
			[Address(RVA = "0xCE9430", Offset = "0xCE9430", VA = "0xCE9430")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700018B")]
		public static string Uriel_Bio
		{
			[Token(Token = "0x600114A")]
			[Address(RVA = "0xCE94BC", Offset = "0xCE94BC", VA = "0xCE94BC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700018C")]
		public static string Uriel_Name
		{
			[Token(Token = "0x600114B")]
			[Address(RVA = "0xCE9548", Offset = "0xCE9548", VA = "0xCE9548")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700018D")]
		public static string Uriel_Origin
		{
			[Token(Token = "0x600114C")]
			[Address(RVA = "0xCE95D4", Offset = "0xCE95D4", VA = "0xCE95D4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700018E")]
		public static string Uriel_Stage1
		{
			[Token(Token = "0x600114D")]
			[Address(RVA = "0xCE9660", Offset = "0xCE9660", VA = "0xCE9660")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700018F")]
		public static string Uriel_Stage2
		{
			[Token(Token = "0x600114E")]
			[Address(RVA = "0xCE96EC", Offset = "0xCE96EC", VA = "0xCE96EC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000190")]
		public static string Uriel_Stage3
		{
			[Token(Token = "0x600114F")]
			[Address(RVA = "0xCE9778", Offset = "0xCE9778", VA = "0xCE9778")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000191")]
		public static string Uriel_Stage4
		{
			[Token(Token = "0x6001150")]
			[Address(RVA = "0xCE9804", Offset = "0xCE9804", VA = "0xCE9804")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000192")]
		public static string Uriel_Stage5
		{
			[Token(Token = "0x6001151")]
			[Address(RVA = "0xCE9890", Offset = "0xCE9890", VA = "0xCE9890")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000193")]
		public static string Yuri_Bio
		{
			[Token(Token = "0x6001152")]
			[Address(RVA = "0xCE991C", Offset = "0xCE991C", VA = "0xCE991C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000194")]
		public static string Yuri_Genre
		{
			[Token(Token = "0x6001153")]
			[Address(RVA = "0xCE99A8", Offset = "0xCE99A8", VA = "0xCE99A8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000195")]
		public static string Yuri_Name
		{
			[Token(Token = "0x6001154")]
			[Address(RVA = "0xCE9A34", Offset = "0xCE9A34", VA = "0xCE9A34")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000196")]
		public static string Yuri_Origin
		{
			[Token(Token = "0x6001155")]
			[Address(RVA = "0xCE9AC0", Offset = "0xCE9AC0", VA = "0xCE9AC0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000197")]
		public static string Yuri_Stage1
		{
			[Token(Token = "0x6001156")]
			[Address(RVA = "0xCE9B4C", Offset = "0xCE9B4C", VA = "0xCE9B4C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000198")]
		public static string Yuri_Stage2
		{
			[Token(Token = "0x6001157")]
			[Address(RVA = "0xCE9BD8", Offset = "0xCE9BD8", VA = "0xCE9BD8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000199")]
		public static string Yuri_Stage3
		{
			[Token(Token = "0x6001158")]
			[Address(RVA = "0xCE9C64", Offset = "0xCE9C64", VA = "0xCE9C64")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700019A")]
		public static string Yuri_Stage4
		{
			[Token(Token = "0x6001159")]
			[Address(RVA = "0xCE9CF0", Offset = "0xCE9CF0", VA = "0xCE9CF0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700019B")]
		public static string Yuri_Stage5
		{
			[Token(Token = "0x600115A")]
			[Address(RVA = "0xCE9D7C", Offset = "0xCE9D7C", VA = "0xCE9D7C")]
			get
			{
				return null;
			}
		}
	}
	[Token(Token = "0x200028D")]
	public static class ScriptTerms
	{
		[Token(Token = "0x200046D")]
		public static class Lobby
		{
			[Token(Token = "0x4001C99")]
			public const string Audio_Ambient = "Lobby/Audio_Ambient";

			[Token(Token = "0x4001C9A")]
			public const string Audio_Game = "Lobby/Audio_Game";

			[Token(Token = "0x4001C9B")]
			public const string Audio_Master = "Lobby/Audio_Master";

			[Token(Token = "0x4001C9C")]
			public const string Audio_NodeHit = "Lobby/Audio_NodeHit";

			[Token(Token = "0x4001C9D")]
			public const string Audio_SFX = "Lobby/Audio_SFX";

			[Token(Token = "0x4001C9E")]
			public const string Audio_Title = "Lobby/Audio_Title";

			[Token(Token = "0x4001C9F")]
			public const string Audio_Voice = "Lobby/Audio_Voice";

			[Token(Token = "0x4001CA0")]
			public const string Bio_Origin = "Lobby/Bio_Origin";

			[Token(Token = "0x4001CA1")]
			public const string Bio_Style = "Lobby/Bio_Style";

			[Token(Token = "0x4001CA2")]
			public const string Bio_Title = "Lobby/Bio_Title";

			[Token(Token = "0x4001CA3")]
			public const string CharacterSelect_Bio = "Lobby/CharacterSelect_Bio";

			[Token(Token = "0x4001CA4")]
			public const string CharacterSelect_Select = "Lobby/CharacterSelect_Select";

			[Token(Token = "0x4001CA5")]
			public const string CharacterSelect_Title = "Lobby/CharacterSelect_Title";

			[Token(Token = "0x4001CA6")]
			public const string CheckWeb = "Lobby/CheckWeb";

			[Token(Token = "0x4001CA7")]
			public const string Credits_Title = "Lobby/Credits_Title";

			[Token(Token = "0x4001CA8")]
			public const string Custom_GoToEditor = "Lobby/Custom_GoToEditor";

			[Token(Token = "0x4001CA9")]
			public const string Custom_Title = "Lobby/Custom_Title";

			[Token(Token = "0x4001CAA")]
			public const string Dance = "Lobby/Dance";

			[Token(Token = "0x4001CAB")]
			public const string Gameplay_Calibration = "Lobby/Gameplay_Calibration";

			[Token(Token = "0x4001CAC")]
			public const string Gameplay_Calibration_Apply = "Lobby/Gameplay_Calibration_Apply";

			[Token(Token = "0x4001CAD")]
			public const string Gameplay_Calibration_AutoHeight = "Lobby/Gameplay_Calibration_AutoHeight";

			[Token(Token = "0x4001CAE")]
			public const string Gameplay_Calibration_CalibrateNow = "Lobby/Gameplay_Calibration_CalibrateNow";

			[Token(Token = "0x4001CAF")]
			public const string Gameplay_Calibration_HeightCalibration = "Lobby/Gameplay_Calibration_HeightCalibration";

			[Token(Token = "0x4001CB0")]
			public const string Gameplay_Calibration_Manual = "Lobby/Gameplay_Calibration_Manual";

			[Token(Token = "0x4001CB1")]
			public const string Gameplay_Calibration_RoomOffset = "Lobby/Gameplay_Calibration_RoomOffset";

			[Token(Token = "0x4001CB2")]
			public const string Gameplay_Calibration_Rotation = "Lobby/Gameplay_Calibration_Rotation";

			[Token(Token = "0x4001CB3")]
			public const string Gameplay_Calibration_XOffset = "Lobby/Gameplay_Calibration_XOffset";

			[Token(Token = "0x4001CB4")]
			public const string Gameplay_Calibration_ZOffset = "Lobby/Gameplay_Calibration_ZOffset";

			[Token(Token = "0x4001CB5")]
			public const string Gameplay_Gameplay = "Lobby/Gameplay_Gameplay";

			[Token(Token = "0x4001CB6")]
			public const string Gameplay_Holograms = "Lobby/Gameplay_Holograms";

			[Token(Token = "0x4001CB7")]
			public const string Gameplay_Holograms_Info = "Lobby/Gameplay_Holograms_Info";

			[Token(Token = "0x4001CB8")]
			public const string Gameplay_Lightshows = "Lobby/Gameplay_Lightshows";

			[Token(Token = "0x4001CB9")]
			public const string Gameplay_Lightshows_Info = "Lobby/Gameplay_Lightshows_Info";

			[Token(Token = "0x4001CBA")]
			public const string Gameplay_SkipIntros = "Lobby/Gameplay_SkipIntros";

			[Token(Token = "0x4001CBB")]
			public const string Gameplay_SkipIntros_Info = "Lobby/Gameplay_SkipIntros_Info";

			[Token(Token = "0x4001CBC")]
			public const string Gameplay_TauntParticles = "Lobby/Gameplay_TauntParticles";

			[Token(Token = "0x4001CBD")]
			public const string Gameplay_TauntParticles_Info = "Lobby/Gameplay_TauntParticles_Info";

			[Token(Token = "0x4001CBE")]
			public const string Gameplay_Title = "Lobby/Gameplay_Title";

			[Token(Token = "0x4001CBF")]
			public const string Graphics_AdvGraphics = "Lobby/Graphics_AdvGraphics";

			[Token(Token = "0x4001CC0")]
			public const string Graphics_AntiAliasing = "Lobby/Graphics_AntiAliasing";

			[Token(Token = "0x4001CC1")]
			public const string Graphics_AntiAliasing_Info = "Lobby/Graphics_AntiAliasing_Info";

			[Token(Token = "0x4001CC2")]
			public const string Graphics_Apply = "Lobby/Graphics_Apply";

			[Token(Token = "0x4001CC3")]
			public const string Graphics_Colour_Double = "Lobby/Graphics_Colour_Double";

			[Token(Token = "0x4001CC4")]
			public const string Graphics_Colour_Left = "Lobby/Graphics_Colour_Left";

			[Token(Token = "0x4001CC5")]
			public const string Graphics_Colour_Reset = "Lobby/Graphics_Colour_Reset";

			[Token(Token = "0x4001CC6")]
			public const string Graphics_Colour_Right = "Lobby/Graphics_Colour_Right";

			[Token(Token = "0x4001CC7")]
			public const string Graphics_Colours = "Lobby/Graphics_Colours";

			[Token(Token = "0x4001CC8")]
			public const string Graphics_Environments = "Lobby/Graphics_Environments";

			[Token(Token = "0x4001CC9")]
			public const string Graphics_Environments_Info = "Lobby/Graphics_Environments_Info";

			[Token(Token = "0x4001CCA")]
			public const string Graphics_Fog = "Lobby/Graphics_Fog";

			[Token(Token = "0x4001CCB")]
			public const string Graphics_Fog_Info = "Lobby/Graphics_Fog_Info";

			[Token(Token = "0x4001CCC")]
			public const string Graphics_Graphics = "Lobby/Graphics_Graphics";

			[Token(Token = "0x4001CCD")]
			public const string Graphics_InGameUI = "Lobby/Graphics_InGameUI";

			[Token(Token = "0x4001CCE")]
			public const string Graphics_InGameUI_Info = "Lobby/Graphics_InGameUI_Info";

			[Token(Token = "0x4001CCF")]
			public const string Graphics_Particles = "Lobby/Graphics_Particles";

			[Token(Token = "0x4001CD0")]
			public const string Graphics_Particles_Info = "Lobby/Graphics_Particles_Info";

			[Token(Token = "0x4001CD1")]
			public const string Graphics_PostProcessing = "Lobby/Graphics_PostProcessing";

			[Token(Token = "0x4001CD2")]
			public const string Graphics_PostProcessing_Info = "Lobby/Graphics_PostProcessing_Info";

			[Token(Token = "0x4001CD3")]
			public const string Graphics_SmoothCam = "Lobby/Graphics_SmoothCam";

			[Token(Token = "0x4001CD4")]
			public const string Graphics_SmoothCam_FOV = "Lobby/Graphics_SmoothCam_FOV";

			[Token(Token = "0x4001CD5")]
			public const string Graphics_SmoothCam_FOV_Info = "Lobby/Graphics_SmoothCam_FOV_Info";

			[Token(Token = "0x4001CD6")]
			public const string Graphics_SmoothCam_Info = "Lobby/Graphics_SmoothCam_Info";

			[Token(Token = "0x4001CD7")]
			public const string Graphics_SmoothCam_Post = "Lobby/Graphics_SmoothCam_Post";

			[Token(Token = "0x4001CD8")]
			public const string Graphics_SmoothCam_Post_Info = "Lobby/Graphics_SmoothCam_Post_Info";

			[Token(Token = "0x4001CD9")]
			public const string Graphics_SmoothCam_Smoothness = "Lobby/Graphics_SmoothCam_Smoothness";

			[Token(Token = "0x4001CDA")]
			public const string Graphics_SmoothCam_Smoothness_Info = "Lobby/Graphics_SmoothCam_Smoothness_Info";

			[Token(Token = "0x4001CDB")]
			public const string Graphics_SmoothCamera = "Lobby/Graphics_SmoothCamera";

			[Token(Token = "0x4001CDC")]
			public const string Graphics_Title = "Lobby/Graphics_Title";

			[Token(Token = "0x4001CDD")]
			public const string Language_Current = "Lobby/Language_Current";

			[Token(Token = "0x4001CDE")]
			public const string Language_English = "Lobby/Language_English";

			[Token(Token = "0x4001CDF")]
			public const string Language_French = "Lobby/Language_French";

			[Token(Token = "0x4001CE0")]
			public const string Language_German = "Lobby/Language_German";

			[Token(Token = "0x4001CE1")]
			public const string Language_Italian = "Lobby/Language_Italian";

			[Token(Token = "0x4001CE2")]
			public const string Language_Japanese = "Lobby/Language_Japanese";

			[Token(Token = "0x4001CE3")]
			public const string Language_Korean = "Lobby/Language_Korean";

			[Token(Token = "0x4001CE4")]
			public const string Language_Spanish = "Lobby/Language_Spanish";

			[Token(Token = "0x4001CE5")]
			public const string Language_Title = "Lobby/Language_Title";

			[Token(Token = "0x4001CE6")]
			public const string Leaderboards_Friends = "Lobby/Leaderboards_Friends";

			[Token(Token = "0x4001CE7")]
			public const string Leaderboards_Global = "Lobby/Leaderboards_Global";

			[Token(Token = "0x4001CE8")]
			public const string Leaderboards_Player = "Lobby/Leaderboards_Player";

			[Token(Token = "0x4001CE9")]
			public const string Leaderboards_Rank = "Lobby/Leaderboards_Rank";

			[Token(Token = "0x4001CEA")]
			public const string Leaderboards_Score = "Lobby/Leaderboards_Score";

			[Token(Token = "0x4001CEB")]
			public const string Leaderboards_Title = "Lobby/Leaderboards_Title";

			[Token(Token = "0x4001CEC")]
			public const string Main_Arcade = "Lobby/Main_Arcade";

			[Token(Token = "0x4001CED")]
			public const string Main_CustomSongs = "Lobby/Main_CustomSongs";

			[Token(Token = "0x4001CEE")]
			public const string Main_HowToPlay = "Lobby/Main_HowToPlay";

			[Token(Token = "0x4001CEF")]
			public const string Main_Title = "Lobby/Main_Title";

			[Token(Token = "0x4001CF0")]
			public const string NoFail = "Lobby/NoFail";

			[Token(Token = "0x4001CF1")]
			public const string Settings_Audio = "Lobby/Settings_Audio";

			[Token(Token = "0x4001CF2")]
			public const string Settings_Credits = "Lobby/Settings_Credits";

			[Token(Token = "0x4001CF3")]
			public const string Settings_Gameplay = "Lobby/Settings_Gameplay";

			[Token(Token = "0x4001CF4")]
			public const string Settings_Graphics = "Lobby/Settings_Graphics";

			[Token(Token = "0x4001CF5")]
			public const string Settings_Language = "Lobby/Settings_Language";

			[Token(Token = "0x4001CF6")]
			public const string Settings_Title = "Lobby/Settings_Title";

			[Token(Token = "0x4001CF7")]
			public const string SongSelect_Leaderboard = "Lobby/SongSelect_Leaderboard";

			[Token(Token = "0x4001CF8")]
			public const string SongSelect_More = "Lobby/SongSelect_More";

			[Token(Token = "0x4001CF9")]
			public const string SongSelect_Rank = "Lobby/SongSelect_Rank";

			[Token(Token = "0x4001CFA")]
			public const string SongSelect_Title = "Lobby/SongSelect_Title";

			[Token(Token = "0x4001CFB")]
			public const string Title_JoinDiscord = "Lobby/Title_JoinDiscord";

			[Token(Token = "0x4001CFC")]
			public const string Title_Start = "Lobby/Title_Start";
		}

		[Token(Token = "0x4001235")]
		public const string Accuracy = "Accuracy";

		[Token(Token = "0x4001236")]
		public const string Back = "Back";

		[Token(Token = "0x4001237")]
		public const string Back_To_Lobby = "Back_To_Lobby";

		[Token(Token = "0x4001238")]
		public const string Battle = "Battle";

		[Token(Token = "0x4001239")]
		public const string Core_Bio = "Core_Bio";

		[Token(Token = "0x400123A")]
		public const string Core_Genre = "Core_Genre";

		[Token(Token = "0x400123B")]
		public const string Core_Name = "Core_Name";

		[Token(Token = "0x400123C")]
		public const string Core_Origin = "Core_Origin";

		[Token(Token = "0x400123D")]
		public const string Core_Stage1 = "Core_Stage1";

		[Token(Token = "0x400123E")]
		public const string Core_Stage2 = "Core_Stage2";

		[Token(Token = "0x400123F")]
		public const string Core_Stage3 = "Core_Stage3";

		[Token(Token = "0x4001240")]
		public const string Core_Stage4 = "Core_Stage4";

		[Token(Token = "0x4001241")]
		public const string Core_Stage5 = "Core_Stage5";

		[Token(Token = "0x4001242")]
		public const string Dance = "Dance";

		[Token(Token = "0x4001243")]
		public const string Dre_Bio = "Dre_Bio";

		[Token(Token = "0x4001244")]
		public const string Dre_Genre = "Dre_Genre";

		[Token(Token = "0x4001245")]
		public const string Dre_Name = "Dre_Name";

		[Token(Token = "0x4001246")]
		public const string Dre_Origin = "Dre_Origin";

		[Token(Token = "0x4001247")]
		public const string Dre_Stage1 = "Dre_Stage1";

		[Token(Token = "0x4001248")]
		public const string Dre_Stage2 = "Dre_Stage2";

		[Token(Token = "0x4001249")]
		public const string Dre_Stage3 = "Dre_Stage3";

		[Token(Token = "0x400124A")]
		public const string Dre_Stage4 = "Dre_Stage4";

		[Token(Token = "0x400124B")]
		public const string Dre_Stage5 = "Dre_Stage5";

		[Token(Token = "0x400124C")]
		public const string Easy = "Easy";

		[Token(Token = "0x400124D")]
		public const string Flair = "Flair";

		[Token(Token = "0x400124E")]
		public const string Game_Paused = "Game Paused";

		[Token(Token = "0x400124F")]
		public const string Hard = "Hard";

		[Token(Token = "0x4001250")]
		public const string HowToPlay_Basic = "HowToPlay_Basic";

		[Token(Token = "0x4001251")]
		public const string HowToPlay_Cascades = "HowToPlay_Cascades";

		[Token(Token = "0x4001252")]
		public const string HowToPlay_Double = "HowToPlay_Double";

		[Token(Token = "0x4001253")]
		public const string HowToPlay_Flair = "HowToPlay_Flair";

		[Token(Token = "0x4001254")]
		public const string HowToPlay_FlairTitle = "HowToPlay_FlairTitle";

		[Token(Token = "0x4001255")]
		public const string HowToPlay_Sets = "HowToPlay_Sets";

		[Token(Token = "0x4001256")]
		public const string Lais_Bio = "Lais_Bio";

		[Token(Token = "0x4001257")]
		public const string Lais_Genre = "Lais_Genre";

		[Token(Token = "0x4001258")]
		public const string Lais_Name = "Lais_Name";

		[Token(Token = "0x4001259")]
		public const string Lais_Origin = "Lais_Origin";

		[Token(Token = "0x400125A")]
		public const string Lais_Stage1 = "Lais_Stage1";

		[Token(Token = "0x400125B")]
		public const string Lais_Stage2 = "Lais_Stage2";

		[Token(Token = "0x400125C")]
		public const string Lais_Stage3 = "Lais_Stage3";

		[Token(Token = "0x400125D")]
		public const string Lais_Stage4 = "Lais_Stage4";

		[Token(Token = "0x400125E")]
		public const string Lais_Stage5 = "Lais_Stage5";

		[Token(Token = "0x400125F")]
		public const string Leaderboards_Friends = "Leaderboards_Friends";

		[Token(Token = "0x4001260")]
		public const string Leaderboards_Global = "Leaderboards_Global";

		[Token(Token = "0x4001261")]
		public const string Leaderboards_Local = "Leaderboards_Local";

		[Token(Token = "0x4001262")]
		public const string Leaderboards_Title = "Leaderboards_Title";

		[Token(Token = "0x4001263")]
		public const string LiuWei_Name = "LiuWei_Name";

		[Token(Token = "0x4001264")]
		public const string LiuWen_Genre = "LiuWen_Genre";

		[Token(Token = "0x4001265")]
		public const string Liu_Bio = "Liu_Bio";

		[Token(Token = "0x4001266")]
		public const string Liu_Origin = "Liu_Origin";

		[Token(Token = "0x4001267")]
		public const string Liu_Stage1 = "Liu_Stage1";

		[Token(Token = "0x4001268")]
		public const string Liu_Stage2 = "Liu_Stage2";

		[Token(Token = "0x4001269")]
		public const string Liu_Stage3 = "Liu_Stage3";

		[Token(Token = "0x400126A")]
		public const string Liu_Stage4 = "Liu_Stage4";

		[Token(Token = "0x400126B")]
		public const string Liu_Stage5 = "Liu_Stage5";

		[Token(Token = "0x400126C")]
		public const string Max_Multiplier = "Max_Multiplier";

		[Token(Token = "0x400126D")]
		public const string Max_Streak = "Max_Streak";

		[Token(Token = "0x400126E")]
		public const string Next_Stage = "Next_Stage";

		[Token(Token = "0x400126F")]
		public const string Normal = "Normal";

		[Token(Token = "0x4001270")]
		public const string Perfect_Cascades = "Perfect_Cascades";

		[Token(Token = "0x4001271")]
		public const string Pyro_Bio = "Pyro_Bio";

		[Token(Token = "0x4001272")]
		public const string Pyro_Genre = "Pyro_Genre";

		[Token(Token = "0x4001273")]
		public const string Pyro_Name = "Pyro_Name";

		[Token(Token = "0x4001274")]
		public const string Pyro_Origin = "Pyro_Origin";

		[Token(Token = "0x4001275")]
		public const string Pyro_Stage1 = "Pyro_Stage1";

		[Token(Token = "0x4001276")]
		public const string Pyro_Stage2 = "Pyro_Stage2";

		[Token(Token = "0x4001277")]
		public const string Pyro_Stage3 = "Pyro_Stage3";

		[Token(Token = "0x4001278")]
		public const string Pyro_Stage4 = "Pyro_Stage4";

		[Token(Token = "0x4001279")]
		public const string Pyro_Stage5 = "Pyro_Stage5";

		[Token(Token = "0x400127A")]
		public const string Rank = "Rank";

		[Token(Token = "0x400127B")]
		public const string Remi_Bio = "Remi_Bio";

		[Token(Token = "0x400127C")]
		public const string Remi_Genre = "Remi_Genre";

		[Token(Token = "0x400127D")]
		public const string Remi_Name = "Remi_Name";

		[Token(Token = "0x400127E")]
		public const string Remi_Origin = "Remi_Origin";

		[Token(Token = "0x400127F")]
		public const string Remi_Stage1 = "Remi_Stage1";

		[Token(Token = "0x4001280")]
		public const string Remi_Stage2 = "Remi_Stage2";

		[Token(Token = "0x4001281")]
		public const string Remi_Stage3 = "Remi_Stage3";

		[Token(Token = "0x4001282")]
		public const string Remi_Stage4 = "Remi_Stage4";

		[Token(Token = "0x4001283")]
		public const string Remi_Stage5 = "Remi_Stage5";

		[Token(Token = "0x4001284")]
		public const string Resume = "Resume";

		[Token(Token = "0x4001285")]
		public const string Retry = "Retry";

		[Token(Token = "0x4001286")]
		public const string ScoreEvent_Amazing = "ScoreEvent_Amazing";

		[Token(Token = "0x4001287")]
		public const string ScoreEvent_Awesome = "ScoreEvent_Awesome";

		[Token(Token = "0x4001288")]
		public const string ScoreEvent_Beautiful = "ScoreEvent_Beautiful";

		[Token(Token = "0x4001289")]
		public const string ScoreEvent_Cool = "ScoreEvent_Cool";

		[Token(Token = "0x400128A")]
		public const string ScoreEvent_Great = "ScoreEvent_Great";

		[Token(Token = "0x400128B")]
		public const string ScoreEvent_Nice = "ScoreEvent_Nice";

		[Token(Token = "0x400128C")]
		public const string ScoreEvent_Perfect = "ScoreEvent_Perfect";

		[Token(Token = "0x400128D")]
		public const string ScoreEvent_Superb = "ScoreEvent_Superb";

		[Token(Token = "0x400128E")]
		public const string Select = "Select";

		[Token(Token = "0x400128F")]
		public const string Sets_Completed = "Sets_Completed";

		[Token(Token = "0x4001290")]
		public const string Settings_AmbientMusic = "Settings_AmbientMusic";

		[Token(Token = "0x4001291")]
		public const string Settings_Apply = "Settings_Apply";

		[Token(Token = "0x4001292")]
		public const string Settings_Audio = "Settings_Audio";

		[Token(Token = "0x4001293")]
		public const string Settings_AuraQuality = "Settings_AuraQuality";

		[Token(Token = "0x4001294")]
		public const string Settings_Aura_Lighting = "Settings_Aura_Lighting";

		[Token(Token = "0x4001295")]
		public const string Settings_Credits = "Settings_Credits";

		[Token(Token = "0x4001296")]
		public const string Settings_DanceHolograms = "Settings_DanceHolograms";

		[Token(Token = "0x4001297")]
		public const string Settings_DevConsole = "Settings_DevConsole";

		[Token(Token = "0x4001298")]
		public const string Settings_GameMusic = "Settings_GameMusic";

		[Token(Token = "0x4001299")]
		public const string Settings_Graphics = "Settings_Graphics";

		[Token(Token = "0x400129A")]
		public const string Settings_GraphicsBlurb = "Settings_GraphicsBlurb";

		[Token(Token = "0x400129B")]
		public const string Settings_Language = "Settings_Language";

		[Token(Token = "0x400129C")]
		public const string Settings_Lightshows = "Settings_Lightshows";

		[Token(Token = "0x400129D")]
		public const string Settings_MasterVolume = "Settings_MasterVolume";

		[Token(Token = "0x400129E")]
		public const string Settings_Node_Hit_Sounds = "Settings_Node_Hit_Sounds";

		[Token(Token = "0x400129F")]
		public const string Settings_Other = "Settings_Other";

		[Token(Token = "0x40012A0")]
		public const string Settings_SFX = "Settings_SFX";

		[Token(Token = "0x40012A1")]
		public const string Settings_TauntParticles = "Settings_TauntParticles";

		[Token(Token = "0x40012A2")]
		public const string Settings_Title = "Settings_Title";

		[Token(Token = "0x40012A3")]
		public const string Settings_Voice = "Settings_Voice";

		[Token(Token = "0x40012A4")]
		public const string Sonya_Bio = "Sonya_Bio";

		[Token(Token = "0x40012A5")]
		public const string Sonya_Genre = "Sonya_Genre";

		[Token(Token = "0x40012A6")]
		public const string Sonya_Name = "Sonya_Name";

		[Token(Token = "0x40012A7")]
		public const string Sonya_Origin = "Sonya_Origin";

		[Token(Token = "0x40012A8")]
		public const string Sonya_Stage1 = "Sonya_Stage1";

		[Token(Token = "0x40012A9")]
		public const string Sonya_Stage2 = "Sonya_Stage2";

		[Token(Token = "0x40012AA")]
		public const string Sonya_Stage3 = "Sonya_Stage3";

		[Token(Token = "0x40012AB")]
		public const string Sonya_Stage4 = "Sonya_Stage4";

		[Token(Token = "0x40012AC")]
		public const string Sonya_Stage5 = "Sonya_Stage5";

		[Token(Token = "0x40012AD")]
		public const string Stage = "Stage";

		[Token(Token = "0x40012AE")]
		public const string Stage_1 = "Stage_1";

		[Token(Token = "0x40012AF")]
		public const string Stage_2 = "Stage_2";

		[Token(Token = "0x40012B0")]
		public const string Stage_3 = "Stage_3";

		[Token(Token = "0x40012B1")]
		public const string Stage_Clear = "Stage_Clear";

		[Token(Token = "0x40012B2")]
		public const string Stage_Failed = "Stage_Failed";

		[Token(Token = "0x40012B3")]
		public const string Stop = "Stop";

		[Token(Token = "0x40012B4")]
		public const string Tutorial_Arrows = "Tutorial_Arrows";

		[Token(Token = "0x40012B5")]
		public const string Tutorial_Awesome = "Tutorial_Awesome";

		[Token(Token = "0x40012B6")]
		public const string Tutorial_Cascades = "Tutorial_Cascades";

		[Token(Token = "0x40012B7")]
		public const string Tutorial_Great = "Tutorial_Great";

		[Token(Token = "0x40012B8")]
		public const string Tutorial_GreenNode = "Tutorial_GreenNode";

		[Token(Token = "0x40012B9")]
		public const string Tutorial_Harder = "Tutorial_Harder";

		[Token(Token = "0x40012BA")]
		public const string Tutorial_Nice = "Tutorial_Nice";

		[Token(Token = "0x40012BB")]
		public const string Tutorial_PinkNode = "Tutorial_PinkNode";

		[Token(Token = "0x40012BC")]
		public const string Tutorial_Power = "Tutorial_Power";

		[Token(Token = "0x40012BD")]
		public const string Tutorial_Sets = "Tutorial_Sets";

		[Token(Token = "0x40012BE")]
		public const string Tutorial_Title_BasicNodes = "Tutorial_Title_BasicNodes";

		[Token(Token = "0x40012BF")]
		public const string Tutorial_Title_Cascades = "Tutorial_Title_Cascades";

		[Token(Token = "0x40012C0")]
		public const string Tutorial_Title_Dance = "Tutorial_Title_Dance";

		[Token(Token = "0x40012C1")]
		public const string Tutorial_Title_Power = "Tutorial_Title_Power";

		[Token(Token = "0x40012C2")]
		public const string Tutorial_Title_Sets = "Tutorial_Title_Sets";

		[Token(Token = "0x40012C3")]
		public const string Tutorial_Title_WideNodes = "Tutorial_Title_WideNodes";

		[Token(Token = "0x40012C4")]
		public const string Tutorial_Title_YellowNodes = "Tutorial_Title_YellowNodes";

		[Token(Token = "0x40012C5")]
		public const string Tutorial_TryAgain = "Tutorial_TryAgain";

		[Token(Token = "0x40012C6")]
		public const string Tutorial_Welcome = "Tutorial_Welcome";

		[Token(Token = "0x40012C7")]
		public const string Tutorial_Yellow = "Tutorial_Yellow";

		[Token(Token = "0x40012C8")]
		public const string UI_CharacterSelect_title = "UI_CharacterSelect_title";

		[Token(Token = "0x40012C9")]
		public const string UI_MainFont = "UI_MainFont";

		[Token(Token = "0x40012CA")]
		public const string UI_MainMenu_Custom = "UI_MainMenu_Custom";

		[Token(Token = "0x40012CB")]
		public const string UI_MainMenu_Editor = "UI_MainMenu_Editor";

		[Token(Token = "0x40012CC")]
		public const string UI_MainMenu_FreeDance = "UI_MainMenu_FreeDance";

		[Token(Token = "0x40012CD")]
		public const string UI_MainMenu_Mode = "UI_MainMenu_Mode";

		[Token(Token = "0x40012CE")]
		public const string UI_MainMenu_Start = "UI_MainMenu_Start";

		[Token(Token = "0x40012CF")]
		public const string UI_MainMenu_Tournament = "UI_MainMenu_Tournament";

		[Token(Token = "0x40012D0")]
		public const string UI_MainMenu_Tutorial = "UI_MainMenu_Tutorial";

		[Token(Token = "0x40012D1")]
		public const string UI_SongSelect_title = "UI_SongSelect_title";

		[Token(Token = "0x40012D2")]
		public const string UI_TitleFont = "UI_TitleFont";

		[Token(Token = "0x40012D3")]
		public const string Uriel_Bio = "Uriel_Bio";

		[Token(Token = "0x40012D4")]
		public const string Uriel_Name = "Uriel_Name";

		[Token(Token = "0x40012D5")]
		public const string Uriel_Origin = "Uriel_Origin";

		[Token(Token = "0x40012D6")]
		public const string Uriel_Stage1 = "Uriel_Stage1";

		[Token(Token = "0x40012D7")]
		public const string Uriel_Stage2 = "Uriel_Stage2";

		[Token(Token = "0x40012D8")]
		public const string Uriel_Stage3 = "Uriel_Stage3";

		[Token(Token = "0x40012D9")]
		public const string Uriel_Stage4 = "Uriel_Stage4";

		[Token(Token = "0x40012DA")]
		public const string Uriel_Stage5 = "Uriel_Stage5";

		[Token(Token = "0x40012DB")]
		public const string Yuri_Bio = "Yuri_Bio";

		[Token(Token = "0x40012DC")]
		public const string Yuri_Genre = "Yuri_Genre";

		[Token(Token = "0x40012DD")]
		public const string Yuri_Name = "Yuri_Name";

		[Token(Token = "0x40012DE")]
		public const string Yuri_Origin = "Yuri_Origin";

		[Token(Token = "0x40012DF")]
		public const string Yuri_Stage1 = "Yuri_Stage1";

		[Token(Token = "0x40012E0")]
		public const string Yuri_Stage2 = "Yuri_Stage2";

		[Token(Token = "0x40012E1")]
		public const string Yuri_Stage3 = "Yuri_Stage3";

		[Token(Token = "0x40012E2")]
		public const string Yuri_Stage4 = "Yuri_Stage4";

		[Token(Token = "0x40012E3")]
		public const string Yuri_Stage5 = "Yuri_Stage5";
	}
	[Token(Token = "0x200028E")]
	public class CallbackNotification : MonoBehaviour
	{
		[Token(Token = "0x600115B")]
		[Address(RVA = "0x10A48B0", Offset = "0x10A48B0", VA = "0x10A48B0")]
		public void OnModifyLocalization()
		{
		}

		[Token(Token = "0x600115C")]
		[Address(RVA = "0x10A49C8", Offset = "0x10A49C8", VA = "0x10A49C8")]
		public CallbackNotification()
		{
		}
	}
	[Token(Token = "0x200028F")]
	public class Example_ChangeLanguage : MonoBehaviour
	{
		[Token(Token = "0x600115D")]
		[Address(RVA = "0xA0466C", Offset = "0xA0466C", VA = "0xA0466C")]
		public void SetLanguage_English()
		{
		}

		[Token(Token = "0x600115E")]
		[Address(RVA = "0xA04754", Offset = "0xA04754", VA = "0xA04754")]
		public void SetLanguage_French()
		{
		}

		[Token(Token = "0x600115F")]
		[Address(RVA = "0xA04798", Offset = "0xA04798", VA = "0xA04798")]
		public void SetLanguage_Spanish()
		{
		}

		[Token(Token = "0x6001160")]
		[Address(RVA = "0xA046B0", Offset = "0xA046B0", VA = "0xA046B0")]
		public void SetLanguage(string LangName)
		{
		}

		[Token(Token = "0x6001161")]
		[Address(RVA = "0xA047DC", Offset = "0xA047DC", VA = "0xA047DC")]
		public Example_ChangeLanguage()
		{
		}
	}
	[Token(Token = "0x2000290")]
	public class Example_LocalizedString : MonoBehaviour
	{
		[Token(Token = "0x40012E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LocalizedString _MyLocalizedString;

		[Token(Token = "0x40012E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string _NormalString;

		[Token(Token = "0x40012E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TermsPopup", RVA = "0x5D29E8", Offset = "0x5D29E8")]
		public string _StringWithTermPopup;

		[Token(Token = "0x6001162")]
		[Address(RVA = "0xA047E4", Offset = "0xA047E4", VA = "0xA047E4")]
		public void Start()
		{
		}

		[Token(Token = "0x6001163")]
		[Address(RVA = "0xA04B18", Offset = "0xA04B18", VA = "0xA04B18")]
		public Example_LocalizedString()
		{
		}
	}
	[Token(Token = "0x2000291")]
	public class GlobalParametersExample : RegisterGlobalParameters
	{
		[Token(Token = "0x6001164")]
		[Address(RVA = "0x13ECEEC", Offset = "0x13ECEEC", VA = "0x13ECEEC", Slot = "7")]
		public override string GetParameterValue(string ParamName)
		{
			return null;
		}

		[Token(Token = "0x6001165")]
		[Address(RVA = "0x13ECFB0", Offset = "0x13ECFB0", VA = "0x13ECFB0")]
		public GlobalParametersExample()
		{
		}
	}
	[Token(Token = "0x2000292")]
	public class RealTimeTranslation : MonoBehaviour
	{
		[Token(Token = "0x40012E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string OriginalText;

		[Token(Token = "0x40012E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private string TranslatedText;

		[Token(Token = "0x40012E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool IsTranslating;

		[Token(Token = "0x6001166")]
		[Address(RVA = "0x11F4E38", Offset = "0x11F4E38", VA = "0x11F4E38")]
		public void OnGUI()
		{
		}

		[Token(Token = "0x6001167")]
		[Address(RVA = "0x11F54F4", Offset = "0x11F54F4", VA = "0x11F54F4")]
		public void StartTranslating(string fromCode, string toCode)
		{
		}

		[Token(Token = "0x6001168")]
		[Address(RVA = "0x11F5790", Offset = "0x11F5790", VA = "0x11F5790")]
		private void OnTranslationReady(string Translation, string errorMsg)
		{
		}

		[Token(Token = "0x6001169")]
		[Address(RVA = "0x11F5828", Offset = "0x11F5828", VA = "0x11F5828")]
		public void ExampleMultiTranslations_Blocking()
		{
		}

		[Token(Token = "0x600116A")]
		[Address(RVA = "0x11F55CC", Offset = "0x11F55CC", VA = "0x11F55CC")]
		public void ExampleMultiTranslations_Async()
		{
		}

		[Token(Token = "0x600116B")]
		[Address(RVA = "0x11F5AC0", Offset = "0x11F5AC0", VA = "0x11F5AC0")]
		private void OnMultitranslationReady(Dictionary<string, TranslationQuery> dict, string errorMsg)
		{
		}

		[Token(Token = "0x600116C")]
		[Address(RVA = "0x11F5D4C", Offset = "0x11F5D4C", VA = "0x11F5D4C")]
		public bool IsWaitingForTranslation()
		{
			return default(bool);
		}

		[Token(Token = "0x600116D")]
		[Address(RVA = "0x11F5D54", Offset = "0x11F5D54", VA = "0x11F5D54")]
		public string GetTranslatedText()
		{
			return null;
		}

		[Token(Token = "0x600116E")]
		[Address(RVA = "0x11F5D5C", Offset = "0x11F5D5C", VA = "0x11F5D5C")]
		public void SetOriginalText(string text)
		{
		}

		[Token(Token = "0x600116F")]
		[Address(RVA = "0x11F5D64", Offset = "0x11F5D64", VA = "0x11F5D64")]
		public RealTimeTranslation()
		{
		}
	}
	[Token(Token = "0x2000293")]
	public class RegisterBundlesManager : MonoBehaviour, IResourceManager_Bundles
	{
		[Token(Token = "0x6001170")]
		[Address(RVA = "0x11F60E0", Offset = "0x11F60E0", VA = "0x11F60E0")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x6001171")]
		[Address(RVA = "0x11F6584", Offset = "0x11F6584", VA = "0x11F6584")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x6001172")]
		[Address(RVA = "0x11F65E4", Offset = "0x11F65E4", VA = "0x11F65E4", Slot = "5")]
		public virtual UnityEngine.Object LoadFromBundle(string path, Type assetType)
		{
			return null;
		}

		[Token(Token = "0x6001173")]
		[Address(RVA = "0x11F65EC", Offset = "0x11F65EC", VA = "0x11F65EC")]
		public RegisterBundlesManager()
		{
		}
	}
	[Token(Token = "0x2000294")]
	public class ToggleLanguage : MonoBehaviour
	{
		[Token(Token = "0x6001174")]
		[Address(RVA = "0xE95C84", Offset = "0xE95C84", VA = "0xE95C84")]
		private void Start()
		{
		}

		[Token(Token = "0x6001175")]
		[Address(RVA = "0xE95CD8", Offset = "0xE95CD8", VA = "0xE95CD8")]
		private void test()
		{
		}

		[Token(Token = "0x6001176")]
		[Address(RVA = "0xE95DA8", Offset = "0xE95DA8", VA = "0xE95DA8")]
		public ToggleLanguage()
		{
		}
	}
	[Token(Token = "0x2000295")]
	public static class PersistentStorage
	{
		[Token(Token = "0x200046E")]
		public enum eFileType
		{
			[Token(Token = "0x4001CFE")]
			Raw,
			[Token(Token = "0x4001CFF")]
			Persistent,
			[Token(Token = "0x4001D00")]
			Temporal,
			[Token(Token = "0x4001D01")]
			Streaming
		}

		[Token(Token = "0x40012EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static I2CustomPersistentStorage mStorage;

		[Token(Token = "0x6001177")]
		[Address(RVA = "0x12026AC", Offset = "0x12026AC", VA = "0x12026AC")]
		public static void SetSetting_String(string key, string value)
		{
		}

		[Token(Token = "0x6001178")]
		[Address(RVA = "0x120276C", Offset = "0x120276C", VA = "0x120276C")]
		public static string GetSetting_String(string key, string defaultValue)
		{
			return null;
		}

		[Token(Token = "0x6001179")]
		[Address(RVA = "0x120282C", Offset = "0x120282C", VA = "0x120282C")]
		public static void DeleteSetting(string key)
		{
		}

		[Token(Token = "0x600117A")]
		[Address(RVA = "0x12028E4", Offset = "0x12028E4", VA = "0x12028E4")]
		public static bool HasSetting(string key)
		{
			return default(bool);
		}

		[Token(Token = "0x600117B")]
		[Address(RVA = "0x120299C", Offset = "0x120299C", VA = "0x120299C")]
		public static void ForceSaveSettings()
		{
		}

		[Token(Token = "0x600117C")]
		[Address(RVA = "0x1202A44", Offset = "0x1202A44", VA = "0x1202A44")]
		public static bool CanAccessFiles()
		{
			return default(bool);
		}

		[Token(Token = "0x600117D")]
		[Address(RVA = "0x1202AEC", Offset = "0x1202AEC", VA = "0x1202AEC")]
		public static bool SaveFile(eFileType fileType, string fileName, string data, bool logExceptions = true)
		{
			return default(bool);
		}

		[Token(Token = "0x600117E")]
		[Address(RVA = "0x1202BC4", Offset = "0x1202BC4", VA = "0x1202BC4")]
		public static string LoadFile(eFileType fileType, string fileName, bool logExceptions = true)
		{
			return null;
		}

		[Token(Token = "0x600117F")]
		[Address(RVA = "0x1202C94", Offset = "0x1202C94", VA = "0x1202C94")]
		public static bool DeleteFile(eFileType fileType, string fileName, bool logExceptions = true)
		{
			return default(bool);
		}

		[Token(Token = "0x6001180")]
		[Address(RVA = "0x1202D64", Offset = "0x1202D64", VA = "0x1202D64")]
		public static bool HasFile(eFileType fileType, string fileName, bool logExceptions = true)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000296")]
	public abstract class I2BasePersistentStorage
	{
		[Token(Token = "0x6001181")]
		[Address(RVA = "0xA4EF2C", Offset = "0xA4EF2C", VA = "0xA4EF2C", Slot = "4")]
		public virtual void SetSetting_String(string key, string value)
		{
		}

		[Token(Token = "0x6001182")]
		[Address(RVA = "0xA4F1B8", Offset = "0xA4F1B8", VA = "0xA4F1B8", Slot = "5")]
		public virtual string GetSetting_String(string key, string defaultValue)
		{
			return null;
		}

		[Token(Token = "0x6001183")]
		[Address(RVA = "0xA4F420", Offset = "0xA4F420", VA = "0xA4F420", Slot = "6")]
		public virtual void DeleteSetting(string key)
		{
		}

		[Token(Token = "0x6001184")]
		[Address(RVA = "0xA4F644", Offset = "0xA4F644", VA = "0xA4F644", Slot = "7")]
		public virtual void ForceSaveSettings()
		{
		}

		[Token(Token = "0x6001185")]
		[Address(RVA = "0xA4F64C", Offset = "0xA4F64C", VA = "0xA4F64C", Slot = "8")]
		public virtual bool HasSetting(string key)
		{
			return default(bool);
		}

		[Token(Token = "0x6001186")]
		[Address(RVA = "0xA4F658", Offset = "0xA4F658", VA = "0xA4F658", Slot = "9")]
		public virtual bool CanAccessFiles()
		{
			return default(bool);
		}

		[Token(Token = "0x6001187")]
		[Address(RVA = "0xA4F660", Offset = "0xA4F660", VA = "0xA4F660")]
		private string UpdateFilename(PersistentStorage.eFileType fileType, string fileName)
		{
			return null;
		}

		[Token(Token = "0x6001188")]
		[Address(RVA = "0xA4F708", Offset = "0xA4F708", VA = "0xA4F708", Slot = "10")]
		public virtual bool SaveFile(PersistentStorage.eFileType fileType, string fileName, string data, bool logExceptions = true)
		{
			return default(bool);
		}

		[Token(Token = "0x6001189")]
		[Address(RVA = "0xA4F8C0", Offset = "0xA4F8C0", VA = "0xA4F8C0", Slot = "11")]
		public virtual string LoadFile(PersistentStorage.eFileType fileType, string fileName, bool logExceptions = true)
		{
			return null;
		}

		[Token(Token = "0x600118A")]
		[Address(RVA = "0xA4FA6C", Offset = "0xA4FA6C", VA = "0xA4FA6C", Slot = "12")]
		public virtual bool DeleteFile(PersistentStorage.eFileType fileType, string fileName, bool logExceptions = true)
		{
			return default(bool);
		}

		[Token(Token = "0x600118B")]
		[Address(RVA = "0xA4FC0C", Offset = "0xA4FC0C", VA = "0xA4FC0C", Slot = "13")]
		public virtual bool HasFile(PersistentStorage.eFileType fileType, string fileName, bool logExceptions = true)
		{
			return default(bool);
		}

		[Token(Token = "0x600118C")]
		[Address(RVA = "0xA4FDAC", Offset = "0xA4FDAC", VA = "0xA4FDAC")]
		protected I2BasePersistentStorage()
		{
		}
	}
	[Token(Token = "0x2000297")]
	public class I2CustomPersistentStorage : I2BasePersistentStorage
	{
		[Token(Token = "0x600118D")]
		[Address(RVA = "0xA4FDB4", Offset = "0xA4FDB4", VA = "0xA4FDB4")]
		public I2CustomPersistentStorage()
		{
		}
	}
	[Token(Token = "0x2000298")]
	public class BaseSpecializationManager
	{
		[Token(Token = "0x40012EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string[] mSpecializations;

		[Token(Token = "0x40012EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Dictionary<string, string> mSpecializationsFallbacks;

		[Token(Token = "0x600118E")]
		[Address(RVA = "0xC13670", Offset = "0xC13670", VA = "0xC13670", Slot = "4")]
		public virtual void InitializeSpecializations()
		{
		}

		[Token(Token = "0x600118F")]
		[Address(RVA = "0xC13BCC", Offset = "0xC13BCC", VA = "0xC13BCC", Slot = "5")]
		public virtual string GetCurrentSpecialization()
		{
			return null;
		}

		[Token(Token = "0x6001190")]
		[Address(RVA = "0xC13C2C", Offset = "0xC13C2C", VA = "0xC13C2C", Slot = "6")]
		public virtual string GetFallbackSpecialization(string specialization)
		{
			return null;
		}

		[Token(Token = "0x6001191")]
		[Address(RVA = "0xC13CD8", Offset = "0xC13CD8", VA = "0xC13CD8")]
		public BaseSpecializationManager()
		{
		}
	}
	[Token(Token = "0x2000299")]
	public class SpecializationManager : BaseSpecializationManager
	{
		[Token(Token = "0x40012ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static SpecializationManager Singleton;

		[Token(Token = "0x6001192")]
		[Address(RVA = "0xA17EE0", Offset = "0xA17EE0", VA = "0xA17EE0")]
		private SpecializationManager()
		{
		}

		[Token(Token = "0x6001193")]
		[Address(RVA = "0xA17F10", Offset = "0xA17F10", VA = "0xA17F10")]
		public static string GetSpecializedText(string text, [Optional] string specialization)
		{
			return null;
		}

		[Token(Token = "0x6001194")]
		[Address(RVA = "0xA18118", Offset = "0xA18118", VA = "0xA18118")]
		public static string SetSpecializedText(string text, string newText, string specialization)
		{
			return null;
		}

		[Token(Token = "0x6001195")]
		[Address(RVA = "0xA18460", Offset = "0xA18460", VA = "0xA18460")]
		public static string SetSpecializedText(Dictionary<string, string> specializations)
		{
			return null;
		}

		[Token(Token = "0x6001196")]
		[Address(RVA = "0xA18244", Offset = "0xA18244", VA = "0xA18244")]
		public static Dictionary<string, string> GetSpecializations(string text, [Optional] Dictionary<string, string> buffer)
		{
			return null;
		}

		[Token(Token = "0x6001197")]
		[Address(RVA = "0xA18868", Offset = "0xA18868", VA = "0xA18868")]
		public static void AppendSpecializations(string text, [Optional] List<string> list)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200029A")]
	public class EventCallback
	{
		[Token(Token = "0x40012EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public MonoBehaviour Target;

		[Token(Token = "0x40012EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string MethodName;

		[Token(Token = "0x6001199")]
		[Address(RVA = "0xA03B6C", Offset = "0xA03B6C", VA = "0xA03B6C")]
		public void Execute([Optional] UnityEngine.Object Sender)
		{
		}

		[Token(Token = "0x600119A")]
		[Address(RVA = "0xA03BD4", Offset = "0xA03BD4", VA = "0xA03BD4")]
		public bool HasCallback()
		{
			return default(bool);
		}

		[Token(Token = "0x600119B")]
		[Address(RVA = "0xA03C64", Offset = "0xA03C64", VA = "0xA03C64")]
		public EventCallback()
		{
		}
	}
	[Token(Token = "0x200029B")]
	public enum ePluralType
	{
		[Token(Token = "0x40012F1")]
		Zero,
		[Token(Token = "0x40012F2")]
		One,
		[Token(Token = "0x40012F3")]
		Two,
		[Token(Token = "0x40012F4")]
		Few,
		[Token(Token = "0x40012F5")]
		Many,
		[Token(Token = "0x40012F6")]
		Plural
	}
	[Token(Token = "0x200029C")]
	public static class GoogleLanguages
	{
		[Token(Token = "0x200046F")]
		public struct LanguageCodeDef
		{
			[Token(Token = "0x4001D02")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public string Code;

			[Token(Token = "0x4001D03")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public string GoogleCode;

			[Token(Token = "0x4001D04")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool HasJoinedWords;

			[Token(Token = "0x4001D05")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int PluralRule;
		}

		[Token(Token = "0x40012F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Dictionary<string, LanguageCodeDef> mLanguageDef;

		[Token(Token = "0x600119C")]
		[Address(RVA = "0x13ECFC0", Offset = "0x13ECFC0", VA = "0x13ECFC0")]
		public static string GetLanguageCode(string Filter, bool ShowWarnings = false)
		{
			return null;
		}

		[Token(Token = "0x600119D")]
		[Address(RVA = "0x13ED3C0", Offset = "0x13ED3C0", VA = "0x13ED3C0")]
		public static List<string> GetLanguagesForDropdown(string Filter, string CodesToExclude)
		{
			return null;
		}

		[Token(Token = "0x600119E")]
		[Address(RVA = "0x13ED26C", Offset = "0x13ED26C", VA = "0x13ED26C")]
		private static bool LanguageMatchesFilter(string Language, string[] Filters)
		{
			return default(bool);
		}

		[Token(Token = "0x600119F")]
		[Address(RVA = "0x13ED948", Offset = "0x13ED948", VA = "0x13ED948")]
		public static string GetFormatedLanguageName(string Language)
		{
			return null;
		}

		[Token(Token = "0x60011A0")]
		[Address(RVA = "0x13EDAA0", Offset = "0x13EDAA0", VA = "0x13EDAA0")]
		public static string GetCodedLanguage(string Language, string code)
		{
			return null;
		}

		[Token(Token = "0x60011A1")]
		[Address(RVA = "0x13EDB7C", Offset = "0x13EDB7C", VA = "0x13EDB7C")]
		public static void UnPackCodeFromLanguageName(string CodedLanguage, out string Language, out string code)
		{
		}

		[Token(Token = "0x60011A2")]
		[Address(RVA = "0x13EDD0C", Offset = "0x13EDD0C", VA = "0x13EDD0C")]
		public static string GetGoogleLanguageCode(string InternationalCode)
		{
			return null;
		}

		[Token(Token = "0x60011A3")]
		[Address(RVA = "0x13EDED8", Offset = "0x13EDED8", VA = "0x13EDED8")]
		public static string GetLanguageName(string code, bool useParenthesesForRegion = false, bool allowDiscardRegion = true)
		{
			return null;
		}

		[Token(Token = "0x60011A4")]
		[Address(RVA = "0x13EE1C0", Offset = "0x13EE1C0", VA = "0x13EE1C0")]
		public static List<string> GetAllInternationalCodes()
		{
			return null;
		}

		[Token(Token = "0x60011A5")]
		[Address(RVA = "0x13EE3C0", Offset = "0x13EE3C0", VA = "0x13EE3C0")]
		public static bool LanguageCode_HasJoinedWord(string languageCode)
		{
			return default(bool);
		}

		[Token(Token = "0x60011A6")]
		[Address(RVA = "0x13EE568", Offset = "0x13EE568", VA = "0x13EE568")]
		private static int GetPluralRule(string langCode)
		{
			return default(int);
		}

		[Token(Token = "0x60011A7")]
		[Address(RVA = "0x13EE734", Offset = "0x13EE734", VA = "0x13EE734")]
		public static bool LanguageHasPluralType(string langCode, string pluralType)
		{
			return default(bool);
		}

		[Token(Token = "0x60011A8")]
		[Address(RVA = "0x13EE8FC", Offset = "0x13EE8FC", VA = "0x13EE8FC")]
		public static ePluralType GetPluralType(string langCode, int n)
		{
			return default(ePluralType);
		}

		[Token(Token = "0x60011A9")]
		[Address(RVA = "0x13EF010", Offset = "0x13EF010", VA = "0x13EF010")]
		public static int GetPluralTestNumber(string langCode, ePluralType pluralType)
		{
			return default(int);
		}

		[Token(Token = "0x60011AA")]
		[Address(RVA = "0x13EEFF8", Offset = "0x13EEFF8", VA = "0x13EEFF8")]
		private static bool inRange(int amount, int min, int max)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200029D")]
	public static class GoogleTranslation
	{
		[Token(Token = "0x2000470")]
		public delegate void fnOnTranslated(string Translation, string Error);

		[Token(Token = "0x2000471")]
		public delegate void fnOnTranslationReady(Dictionary<string, TranslationQuery> dict, string error);

		[Token(Token = "0x2000472")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CE0BC", Offset = "0x5CE0BC")]
		private sealed class <>c__DisplayClass2_0
		{
			[Token(Token = "0x4001D06")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public fnOnTranslated OnTranslationReady;

			[Token(Token = "0x4001D07")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string text;

			[Token(Token = "0x4001D08")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Dictionary<string, TranslationQuery> queries;

			[Token(Token = "0x4001D09")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string LanguageCodeTo;

			[Token(Token = "0x6001C22")]
			[Address(RVA = "0x7EAE14", Offset = "0x7EAE14", VA = "0x7EAE14")]
			public <>c__DisplayClass2_0()
			{
			}

			[Token(Token = "0x6001C23")]
			[Address(RVA = "0x7EAE1C", Offset = "0x7EAE1C", VA = "0x7EAE1C")]
			internal void <Translate>b__0(Dictionary<string, TranslationQuery> results, string error)
			{
			}
		}

		[Token(Token = "0x2000473")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CE0CC", Offset = "0x5CE0CC")]
		private sealed class <WaitForTranslations>d__11 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001D0A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001D0B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x1700036B")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001C27")]
				[Address(RVA = "0x7EB47C", Offset = "0x7EB47C", VA = "0x7EB47C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700036C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001C29")]
				[Address(RVA = "0x7EB4C4", Offset = "0x7EB4C4", VA = "0x7EB4C4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001C24")]
			[Address(RVA = "0x7EB298", Offset = "0x7EB298", VA = "0x7EB298")]
			[DebuggerHidden]
			public <WaitForTranslations>d__11(int <>1__state)
			{
			}

			[Token(Token = "0x6001C25")]
			[Address(RVA = "0x7EB2C4", Offset = "0x7EB2C4", VA = "0x7EB2C4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001C26")]
			[Address(RVA = "0x7EB2C8", Offset = "0x7EB2C8", VA = "0x7EB2C8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001C28")]
			[Address(RVA = "0x7EB484", Offset = "0x7EB484", VA = "0x7EB484", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40012F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static List<UnityWebRequest> mCurrentTranslations;

		[Token(Token = "0x40012F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static List<TranslationJob> mTranslationJobs;

		[Token(Token = "0x60011AC")]
		[Address(RVA = "0x13F6714", Offset = "0x13F6714", VA = "0x13F6714")]
		public static bool CanTranslate()
		{
			return default(bool);
		}

		[Token(Token = "0x60011AD")]
		[Address(RVA = "0x13F67D0", Offset = "0x13F67D0", VA = "0x13F67D0")]
		public static void Translate(string text, string LanguageCodeFrom, string LanguageCodeTo, fnOnTranslated OnTranslationReady)
		{
		}

		[Token(Token = "0x60011AE")]
		[Address(RVA = "0x13F6D24", Offset = "0x13F6D24", VA = "0x13F6D24")]
		public static string ForceTranslate(string text, string LanguageCodeFrom, string LanguageCodeTo)
		{
			return null;
		}

		[Token(Token = "0x60011AF")]
		[Address(RVA = "0x13F6C88", Offset = "0x13F6C88", VA = "0x13F6C88")]
		public static void Translate(Dictionary<string, TranslationQuery> requests, fnOnTranslationReady OnTranslationReady, bool usePOST = true)
		{
		}

		[Token(Token = "0x60011B0")]
		[Address(RVA = "0x13F73C4", Offset = "0x13F73C4", VA = "0x13F73C4")]
		public static bool ForceTranslate(Dictionary<string, TranslationQuery> requests, bool usePOST = true)
		{
			return default(bool);
		}

		[Token(Token = "0x60011B1")]
		[Address(RVA = "0x13F7448", Offset = "0x13F7448", VA = "0x13F7448")]
		public static List<string> ConvertTranslationRequest(Dictionary<string, TranslationQuery> requests, bool encodeGET)
		{
			return null;
		}

		[Token(Token = "0x60011B2")]
		[Address(RVA = "0x13F72E4", Offset = "0x13F72E4", VA = "0x13F72E4")]
		private static void AddTranslationJob(TranslationJob job)
		{
		}

		[Token(Token = "0x60011B3")]
		[Address(RVA = "0x13F79E8", Offset = "0x13F79E8", VA = "0x13F79E8")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D99F0", Offset = "0x5D99F0")]
		private static IEnumerator WaitForTranslations()
		{
			return null;
		}

		[Token(Token = "0x60011B4")]
		[Address(RVA = "0x13F7A44", Offset = "0x13F7A44", VA = "0x13F7A44")]
		public static string ParseTranslationResult(string html, Dictionary<string, TranslationQuery> requests)
		{
			return null;
		}

		[Token(Token = "0x60011B5")]
		[Address(RVA = "0x13F81B8", Offset = "0x13F81B8", VA = "0x13F81B8")]
		public static bool IsTranslating()
		{
			return default(bool);
		}

		[Token(Token = "0x60011B6")]
		[Address(RVA = "0x13F8280", Offset = "0x13F8280", VA = "0x13F8280")]
		public static void CancelCurrentGoogleTranslations()
		{
		}

		[Token(Token = "0x60011B7")]
		[Address(RVA = "0x13F6A78", Offset = "0x13F6A78", VA = "0x13F6A78")]
		public static void CreateQueries(string text, string LanguageCodeFrom, string LanguageCodeTo, Dictionary<string, TranslationQuery> dict)
		{
		}

		[Token(Token = "0x60011B8")]
		[Address(RVA = "0x13F843C", Offset = "0x13F843C", VA = "0x13F843C")]
		private static void CreateQueries_Plurals(string text, string LanguageCodeFrom, string LanguageCodeTo, Dictionary<string, TranslationQuery> dict)
		{
		}

		[Token(Token = "0x60011B9")]
		[Address(RVA = "0x13F6E8C", Offset = "0x13F6E8C", VA = "0x13F6E8C")]
		public static void AddQuery(string text, string LanguageCodeFrom, string LanguageCodeTo, Dictionary<string, TranslationQuery> dict)
		{
		}

		[Token(Token = "0x60011BA")]
		[Address(RVA = "0x13F8EAC", Offset = "0x13F8EAC", VA = "0x13F8EAC")]
		private static string GetTranslation(string text, string LanguageCodeTo, Dictionary<string, TranslationQuery> dict)
		{
			return null;
		}

		[Token(Token = "0x60011BB")]
		[Address(RVA = "0x13F7F48", Offset = "0x13F7F48", VA = "0x13F7F48")]
		private static TranslationQuery FindQueryFromOrigText(string origText, Dictionary<string, TranslationQuery> dict)
		{
			return default(TranslationQuery);
		}

		[Token(Token = "0x60011BC")]
		[Address(RVA = "0x13F86D4", Offset = "0x13F86D4", VA = "0x13F86D4")]
		public static bool HasParameters(string text)
		{
			return default(bool);
		}

		[Token(Token = "0x60011BD")]
		[Address(RVA = "0x13F8898", Offset = "0x13F8898", VA = "0x13F8898")]
		public static string GetPluralParameter(string text, bool forceTag)
		{
			return null;
		}

		[Token(Token = "0x60011BE")]
		[Address(RVA = "0x13F876C", Offset = "0x13F876C", VA = "0x13F876C")]
		public static string GetPluralText(string text, string pluralType)
		{
			return null;
		}

		[Token(Token = "0x60011BF")]
		[Address(RVA = "0x13F8FB8", Offset = "0x13F8FB8", VA = "0x13F8FB8")]
		private static int FindClosingTag(string tag, MatchCollection matches, int startIndex)
		{
			return default(int);
		}

		[Token(Token = "0x60011C0")]
		[Address(RVA = "0x13F8104", Offset = "0x13F8104", VA = "0x13F8104")]
		private static string GetGoogleNoTranslateTag(int tagNumber)
		{
			return null;
		}

		[Token(Token = "0x60011C1")]
		[Address(RVA = "0x13F8990", Offset = "0x13F8990", VA = "0x13F8990")]
		private static void ParseNonTranslatableElements(ref TranslationQuery query)
		{
		}

		[Token(Token = "0x60011C2")]
		[Address(RVA = "0x13F71C0", Offset = "0x13F71C0", VA = "0x13F71C0")]
		public static string GetQueryResult(string text, string LanguageCodeTo, Dictionary<string, TranslationQuery> dict)
		{
			return null;
		}

		[Token(Token = "0x60011C3")]
		[Address(RVA = "0x13F9084", Offset = "0x13F9084", VA = "0x13F9084")]
		public static string RebuildTranslation(string text, Dictionary<string, TranslationQuery> dict, string LanguageCodeTo)
		{
			return null;
		}

		[Token(Token = "0x60011C4")]
		[Address(RVA = "0x13F9348", Offset = "0x13F9348", VA = "0x13F9348")]
		private static string RebuildTranslation_Plural(string text, Dictionary<string, TranslationQuery> dict, string LanguageCodeTo)
		{
			return null;
		}

		[Token(Token = "0x60011C5")]
		[Address(RVA = "0x13F96D0", Offset = "0x13F96D0", VA = "0x13F96D0")]
		public static string UppercaseFirst(string s)
		{
			return null;
		}

		[Token(Token = "0x60011C6")]
		[Address(RVA = "0x13F7928", Offset = "0x13F7928", VA = "0x13F7928")]
		public static string TitleCase(string s)
		{
			return null;
		}
	}
	[Token(Token = "0x200029E")]
	public struct TranslationQuery
	{
		[Token(Token = "0x40012FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string OrigText;

		[Token(Token = "0x40012FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string Text;

		[Token(Token = "0x40012FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string LanguageCode;

		[Token(Token = "0x40012FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string[] TargetLanguagesCode;

		[Token(Token = "0x40012FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string[] Results;

		[Token(Token = "0x40012FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string[] Tags;
	}
	[Token(Token = "0x200029F")]
	public class TranslationJob : IDisposable
	{
		[Token(Token = "0x2000474")]
		public enum eJobState
		{
			[Token(Token = "0x4001D0D")]
			Running,
			[Token(Token = "0x4001D0E")]
			Succeeded,
			[Token(Token = "0x4001D0F")]
			Failed
		}

		[Token(Token = "0x4001300")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public eJobState mJobState;

		[Token(Token = "0x60011C8")]
		[Address(RVA = "0xBC986C", Offset = "0xBC986C", VA = "0xBC986C", Slot = "5")]
		public virtual eJobState GetState()
		{
			return default(eJobState);
		}

		[Token(Token = "0x60011C9")]
		[Address(RVA = "0xBC9874", Offset = "0xBC9874", VA = "0xBC9874", Slot = "6")]
		public virtual void Dispose()
		{
		}

		[Token(Token = "0x60011CA")]
		[Address(RVA = "0xBC9878", Offset = "0xBC9878", VA = "0xBC9878")]
		public TranslationJob()
		{
		}
	}
	[Token(Token = "0x20002A0")]
	public class TranslationJob_WWW : TranslationJob
	{
		[Token(Token = "0x4001301")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityWebRequest www;

		[Token(Token = "0x60011CB")]
		[Address(RVA = "0xBCB1D0", Offset = "0xBCB1D0", VA = "0xBCB1D0", Slot = "6")]
		public override void Dispose()
		{
		}

		[Token(Token = "0x60011CC")]
		[Address(RVA = "0xBC9944", Offset = "0xBC9944", VA = "0xBC9944")]
		public TranslationJob_WWW()
		{
		}
	}
	[Token(Token = "0x20002A1")]
	public class TranslationJob_GET : TranslationJob_WWW
	{
		[Token(Token = "0x4001302")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Dictionary<string, TranslationQuery> _requests;

		[Token(Token = "0x4001303")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GoogleTranslation.fnOnTranslationReady _OnTranslationReady;

		[Token(Token = "0x4001304")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<string> mQueries;

		[Token(Token = "0x4001305")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string mErrorMessage;

		[Token(Token = "0x60011CD")]
		[Address(RVA = "0xBC9880", Offset = "0xBC9880", VA = "0xBC9880")]
		public TranslationJob_GET(Dictionary<string, TranslationQuery> requests, GoogleTranslation.fnOnTranslationReady OnTranslationReady)
		{
		}

		[Token(Token = "0x60011CE")]
		[Address(RVA = "0xBC994C", Offset = "0xBC994C", VA = "0xBC994C")]
		private void ExecuteNextQuery()
		{
		}

		[Token(Token = "0x60011CF")]
		[Address(RVA = "0xBC9A6C", Offset = "0xBC9A6C", VA = "0xBC9A6C", Slot = "5")]
		public override eJobState GetState()
		{
			return default(eJobState);
		}

		[Token(Token = "0x60011D0")]
		[Address(RVA = "0xBC9B24", Offset = "0xBC9B24", VA = "0xBC9B24")]
		public void ProcessResult(byte[] bytes, string errorMsg)
		{
		}
	}
	[Token(Token = "0x20002A2")]
	public class TranslationJob_Main : TranslationJob
	{
		[Token(Token = "0x4001306")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private TranslationJob_WEB mWeb;

		[Token(Token = "0x4001307")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private TranslationJob_POST mPost;

		[Token(Token = "0x4001308")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private TranslationJob_GET mGet;

		[Token(Token = "0x4001309")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Dictionary<string, TranslationQuery> _requests;

		[Token(Token = "0x400130A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private GoogleTranslation.fnOnTranslationReady _OnTranslationReady;

		[Token(Token = "0x400130B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string mErrorMessage;

		[Token(Token = "0x60011D1")]
		[Address(RVA = "0xBC9C44", Offset = "0xBC9C44", VA = "0xBC9C44")]
		public TranslationJob_Main(Dictionary<string, TranslationQuery> requests, GoogleTranslation.fnOnTranslationReady OnTranslationReady)
		{
		}

		[Token(Token = "0x60011D2")]
		[Address(RVA = "0xBC9EAC", Offset = "0xBC9EAC", VA = "0xBC9EAC", Slot = "5")]
		public override eJobState GetState()
		{
			return default(eJobState);
		}

		[Token(Token = "0x60011D3")]
		[Address(RVA = "0xBCA0B4", Offset = "0xBCA0B4", VA = "0xBCA0B4", Slot = "6")]
		public override void Dispose()
		{
		}
	}
	[Token(Token = "0x20002A3")]
	public class TranslationJob_POST : TranslationJob_WWW
	{
		[Token(Token = "0x400130C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Dictionary<string, TranslationQuery> _requests;

		[Token(Token = "0x400130D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GoogleTranslation.fnOnTranslationReady _OnTranslationReady;

		[Token(Token = "0x60011D4")]
		[Address(RVA = "0xBC9CE8", Offset = "0xBC9CE8", VA = "0xBC9CE8")]
		public TranslationJob_POST(Dictionary<string, TranslationQuery> requests, GoogleTranslation.fnOnTranslationReady OnTranslationReady)
		{
		}

		[Token(Token = "0x60011D5")]
		[Address(RVA = "0xBCA118", Offset = "0xBCA118", VA = "0xBCA118", Slot = "5")]
		public override eJobState GetState()
		{
			return default(eJobState);
		}

		[Token(Token = "0x60011D6")]
		[Address(RVA = "0xBCA1C0", Offset = "0xBCA1C0", VA = "0xBCA1C0")]
		public void ProcessResult(byte[] bytes, string errorMsg)
		{
		}
	}
	[Token(Token = "0x20002A4")]
	public class TranslationJob_WEB : TranslationJob_WWW
	{
		[Serializable]
		[Token(Token = "0x2000475")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CE0DC", Offset = "0x5CE0DC")]
		private sealed class <>c
		{
			[Token(Token = "0x4001D10")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4001D11")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Comparison<KeyValuePair<string, string>> <>9__8_0;

			[Token(Token = "0x4001D12")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static MatchEvaluator <>9__12_0;

			[Token(Token = "0x4001D13")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public static MatchEvaluator <>9__12_1;

			[Token(Token = "0x6001C2B")]
			[Address(RVA = "0x138BD80", Offset = "0x138BD80", VA = "0x138BD80")]
			public <>c()
			{
			}

			[Token(Token = "0x6001C2C")]
			[Address(RVA = "0x138BD88", Offset = "0x138BD88", VA = "0x138BD88")]
			internal int <FindAllQueries>b__8_0(KeyValuePair<string, string> a, KeyValuePair<string, string> b)
			{
				return default(int);
			}

			[Token(Token = "0x6001C2D")]
			[Address(RVA = "0x138BDE4", Offset = "0x138BDE4", VA = "0x138BDE4")]
			internal string <ParseTranslationResult>b__12_0(Match match)
			{
				return null;
			}

			[Token(Token = "0x6001C2E")]
			[Address(RVA = "0x138BE90", Offset = "0x138BE90", VA = "0x138BE90")]
			internal string <ParseTranslationResult>b__12_1(Match match)
			{
				return null;
			}
		}

		[Token(Token = "0x400130E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Dictionary<string, TranslationQuery> _requests;

		[Token(Token = "0x400130F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GoogleTranslation.fnOnTranslationReady _OnTranslationReady;

		[Token(Token = "0x4001310")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string mErrorMessage;

		[Token(Token = "0x4001311")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private string mCurrentBatch_ToLanguageCode;

		[Token(Token = "0x4001312")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private string mCurrentBatch_FromLanguageCode;

		[Token(Token = "0x4001313")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<string> mCurrentBatch_Text;

		[Token(Token = "0x4001314")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private List<KeyValuePair<string, string>> mQueries;

		[Token(Token = "0x60011D7")]
		[Address(RVA = "0xBCA2B4", Offset = "0xBCA2B4", VA = "0xBCA2B4")]
		public TranslationJob_WEB(Dictionary<string, TranslationQuery> requests, GoogleTranslation.fnOnTranslationReady OnTranslationReady)
		{
		}

		[Token(Token = "0x60011D8")]
		[Address(RVA = "0xBCA314", Offset = "0xBCA314", VA = "0xBCA314")]
		private void FindAllQueries()
		{
		}

		[Token(Token = "0x60011D9")]
		[Address(RVA = "0xBCA684", Offset = "0xBCA684", VA = "0xBCA684")]
		private void ExecuteNextBatch()
		{
		}

		[Token(Token = "0x60011DA")]
		[Address(RVA = "0xBCAA84", Offset = "0xBCAA84", VA = "0xBCAA84", Slot = "5")]
		public override eJobState GetState()
		{
			return default(eJobState);
		}

		[Token(Token = "0x60011DB")]
		[Address(RVA = "0xBCAB3C", Offset = "0xBCAB3C", VA = "0xBCAB3C")]
		public void ProcessResult(byte[] bytes, string errorMsg)
		{
		}

		[Token(Token = "0x60011DC")]
		[Address(RVA = "0xBCAC74", Offset = "0xBCAC74", VA = "0xBCAC74")]
		private string ParseTranslationResult(string html, string OriginalText)
		{
			return null;
		}
	}
	[Token(Token = "0x20002A5")]
	public enum eLanguageDataFlags
	{
		[Token(Token = "0x4001316")]
		DISABLED = 1,
		[Token(Token = "0x4001317")]
		KEEP_LOADED = 2,
		[Token(Token = "0x4001318")]
		NOT_LOADED = 4
	}
	[Serializable]
	[Token(Token = "0x20002A6")]
	public class LanguageData
	{
		[Token(Token = "0x4001319")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string Name;

		[Token(Token = "0x400131A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string Code;

		[Token(Token = "0x400131B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public byte Flags;

		[NonSerialized]
		[Token(Token = "0x400131C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool Compressed;

		[Token(Token = "0x60011DD")]
		[Address(RVA = "0xA59E2C", Offset = "0xA59E2C", VA = "0xA59E2C")]
		public bool IsEnabled()
		{
			return default(bool);
		}

		[Token(Token = "0x60011DE")]
		[Address(RVA = "0xA59E3C", Offset = "0xA59E3C", VA = "0xA59E3C")]
		public void SetEnabled(bool bEnabled)
		{
		}

		[Token(Token = "0x60011DF")]
		[Address(RVA = "0xA59E58", Offset = "0xA59E58", VA = "0xA59E58")]
		public bool IsLoaded()
		{
			return default(bool);
		}

		[Token(Token = "0x60011E0")]
		[Address(RVA = "0xA59E68", Offset = "0xA59E68", VA = "0xA59E68")]
		public bool CanBeUnloaded()
		{
			return default(bool);
		}

		[Token(Token = "0x60011E1")]
		[Address(RVA = "0xA59E78", Offset = "0xA59E78", VA = "0xA59E78")]
		public void SetLoaded(bool loaded)
		{
		}

		[Token(Token = "0x60011E2")]
		[Address(RVA = "0xA59E94", Offset = "0xA59E94", VA = "0xA59E94")]
		public void SetCanBeUnLoaded(bool allowUnloading)
		{
		}

		[Token(Token = "0x60011E3")]
		[Address(RVA = "0xA59EB0", Offset = "0xA59EB0", VA = "0xA59EB0")]
		public LanguageData()
		{
		}
	}
	[Token(Token = "0x20002A7")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5CBCC0", Offset = "0x5CBCC0")]
	[ExecuteInEditMode]
	public class LanguageSource : MonoBehaviour, ISerializationCallbackReceiver, ILanguageSource
	{
		[Token(Token = "0x2000476")]
		public delegate void fnOnSourceUpdated(LanguageSourceData source, bool ReceivedNewData, string errorMsg);

		[Token(Token = "0x400131D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LanguageSourceData mSource;

		[Token(Token = "0x400131E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int version;

		[Token(Token = "0x400131F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool NeverDestroy;

		[Token(Token = "0x4001320")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		public bool UserAgreesToHaveItOnTheScene;

		[Token(Token = "0x4001321")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
		public bool UserAgreesToHaveItInsideThePluginsFolder;

		[Token(Token = "0x4001322")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x27")]
		public bool GoogleLiveSyncIsUptoDate;

		[Token(Token = "0x4001323")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<UnityEngine.Object> Assets;

		[Token(Token = "0x4001324")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string Google_WebServiceURL;

		[Token(Token = "0x4001325")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string Google_SpreadsheetKey;

		[Token(Token = "0x4001326")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string Google_SpreadsheetName;

		[Token(Token = "0x4001327")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string Google_LastUpdatedVersion;

		[Token(Token = "0x4001328")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public LanguageSourceData.eGoogleUpdateFrequency GoogleUpdateFrequency;

		[Token(Token = "0x4001329")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float GoogleUpdateDelay;

		[Token(Token = "0x400132B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public List<LanguageData> mLanguages;

		[Token(Token = "0x400132C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool IgnoreDeviceLanguage;

		[Token(Token = "0x400132D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public LanguageSourceData.eAllowUnloadLanguages _AllowUnloadingLanguages;

		[Token(Token = "0x400132E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public List<TermData> mTerms;

		[Token(Token = "0x400132F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public bool CaseInsensitiveTerms;

		[Token(Token = "0x4001330")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public LanguageSourceData.MissingTranslationAction OnMissingTranslation;

		[Token(Token = "0x4001331")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public string mTerm_AppName;

		[Token(Token = "0x1700019C")]
		public LanguageSourceData SourceData
		{
			[Token(Token = "0x60011E4")]
			[Address(RVA = "0xA59EB8", Offset = "0xA59EB8", VA = "0xA59EB8", Slot = "6")]
			get
			{
				return null;
			}
			[Token(Token = "0x60011E5")]
			[Address(RVA = "0xA59EC0", Offset = "0xA59EC0", VA = "0xA59EC0", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x14000014")]
		public event fnOnSourceUpdated Event_OnSourceUpdateFromGoogle
		{
			[Token(Token = "0x60011E6")]
			[Address(RVA = "0xA59EC8", Offset = "0xA59EC8", VA = "0xA59EC8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D9A50", Offset = "0x5D9A50")]
			add
			{
			}
			[Token(Token = "0x60011E7")]
			[Address(RVA = "0xA59F68", Offset = "0xA59F68", VA = "0xA59F68")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D9A60", Offset = "0x5D9A60")]
			remove
			{
			}
		}

		[Token(Token = "0x60011E8")]
		[Address(RVA = "0xA5A008", Offset = "0xA5A008", VA = "0xA5A008")]
		private void Awake()
		{
		}

		[Token(Token = "0x60011E9")]
		[Address(RVA = "0xA5A0C8", Offset = "0xA5A0C8", VA = "0xA5A0C8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60011EA")]
		[Address(RVA = "0xA5A14C", Offset = "0xA5A14C", VA = "0xA5A14C")]
		public string GetSourceName()
		{
			return null;
		}

		[Token(Token = "0x60011EB")]
		[Address(RVA = "0xA5A248", Offset = "0xA5A248", VA = "0xA5A248", Slot = "4")]
		public void OnBeforeSerialize()
		{
		}

		[Token(Token = "0x60011EC")]
		[Address(RVA = "0xA5A254", Offset = "0xA5A254", VA = "0xA5A254", Slot = "5")]
		public void OnAfterDeserialize()
		{
		}

		[Token(Token = "0x60011ED")]
		[Address(RVA = "0xA5A958", Offset = "0xA5A958", VA = "0xA5A958")]
		public LanguageSource()
		{
		}
	}
	[Token(Token = "0x20002A8")]
	[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0x5CBD0C", Offset = "0x5CBD0C")]
	public class LanguageSourceAsset : ScriptableObject, ILanguageSource
	{
		[Token(Token = "0x4001332")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LanguageSourceData mSource;

		[Token(Token = "0x1700019D")]
		public LanguageSourceData SourceData
		{
			[Token(Token = "0x60011EE")]
			[Address(RVA = "0xA5AAC8", Offset = "0xA5AAC8", VA = "0xA5AAC8", Slot = "4")]
			get
			{
				return null;
			}
			[Token(Token = "0x60011EF")]
			[Address(RVA = "0xA5AAD0", Offset = "0xA5AAD0", VA = "0xA5AAD0", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x60011F0")]
		[Address(RVA = "0xA5AAD8", Offset = "0xA5AAD8", VA = "0xA5AAD8")]
		public LanguageSourceAsset()
		{
		}
	}
	[Token(Token = "0x20002A9")]
	public interface ILanguageSource
	{
		[Token(Token = "0x1700019E")]
		LanguageSourceData SourceData
		{
			[Token(Token = "0x60011F1")]
			get;
			[Token(Token = "0x60011F2")]
			set;
		}
	}
	[Serializable]
	[Token(Token = "0x20002AA")]
	[ExecuteInEditMode]
	public class LanguageSourceData
	{
		[Token(Token = "0x2000477")]
		public enum MissingTranslationAction
		{
			[Token(Token = "0x4001D15")]
			Empty,
			[Token(Token = "0x4001D16")]
			Fallback,
			[Token(Token = "0x4001D17")]
			ShowWarning,
			[Token(Token = "0x4001D18")]
			ShowTerm
		}

		[Token(Token = "0x2000478")]
		public enum eAllowUnloadLanguages
		{
			[Token(Token = "0x4001D1A")]
			Never,
			[Token(Token = "0x4001D1B")]
			OnlyInDevice,
			[Token(Token = "0x4001D1C")]
			EditorAndDevice
		}

		[Token(Token = "0x2000479")]
		public enum eGoogleUpdateFrequency
		{
			[Token(Token = "0x4001D1E")]
			Always,
			[Token(Token = "0x4001D1F")]
			Never,
			[Token(Token = "0x4001D20")]
			Daily,
			[Token(Token = "0x4001D21")]
			Weekly,
			[Token(Token = "0x4001D22")]
			Monthly,
			[Token(Token = "0x4001D23")]
			OnlyOnce,
			[Token(Token = "0x4001D24")]
			EveryOtherDay
		}

		[Token(Token = "0x200047A")]
		public enum eGoogleUpdateSynchronization
		{
			[Token(Token = "0x4001D26")]
			Manual,
			[Token(Token = "0x4001D27")]
			OnSceneLoaded,
			[Token(Token = "0x4001D28")]
			AsSoonAsDownloaded
		}

		[Serializable]
		[Token(Token = "0x200047B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CE0EC", Offset = "0x5CE0EC")]
		private sealed class <>c
		{
			[Token(Token = "0x4001D29")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4001D2A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Predicate<UnityEngine.Object> <>9__39_0;

			[Token(Token = "0x4001D2B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<UnityEngine.Object, string> <>9__39_1;

			[Token(Token = "0x4001D2C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public static Func<IGrouping<string, UnityEngine.Object>, string> <>9__39_2;

			[Token(Token = "0x4001D2D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public static Func<IGrouping<string, UnityEngine.Object>, UnityEngine.Object> <>9__39_3;

			[Token(Token = "0x4001D2E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public static Comparison<TermData> <>9__43_0;

			[Token(Token = "0x4001D2F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public static Comparison<TermData> <>9__47_0;

			[Token(Token = "0x6001C34")]
			[Address(RVA = "0x7EEB0C", Offset = "0x7EEB0C", VA = "0x7EEB0C")]
			public <>c()
			{
			}

			[Token(Token = "0x6001C35")]
			[Address(RVA = "0x7EEB14", Offset = "0x7EEB14", VA = "0x7EEB14")]
			internal bool <UpdateAssetDictionary>b__39_0(UnityEngine.Object x)
			{
				return default(bool);
			}

			[Token(Token = "0x6001C36")]
			[Address(RVA = "0x7EEB7C", Offset = "0x7EEB7C", VA = "0x7EEB7C")]
			internal string <UpdateAssetDictionary>b__39_1(UnityEngine.Object o)
			{
				return null;
			}

			[Token(Token = "0x6001C37")]
			[Address(RVA = "0x7EEB98", Offset = "0x7EEB98", VA = "0x7EEB98")]
			internal string <UpdateAssetDictionary>b__39_2(IGrouping<string, UnityEngine.Object> g)
			{
				return null;
			}

			[Token(Token = "0x6001C38")]
			[Address(RVA = "0x7EEC40", Offset = "0x7EEC40", VA = "0x7EEC40")]
			internal UnityEngine.Object <UpdateAssetDictionary>b__39_3(IGrouping<string, UnityEngine.Object> g)
			{
				return null;
			}

			[Token(Token = "0x6001C39")]
			[Address(RVA = "0x7EEC8C", Offset = "0x7EEC8C", VA = "0x7EEC8C")]
			internal int <Export_I2CSV>b__43_0(TermData a, TermData b)
			{
				return default(int);
			}

			[Token(Token = "0x6001C3A")]
			[Address(RVA = "0x7EECB4", Offset = "0x7EECB4", VA = "0x7EECB4")]
			internal int <Export_CSV>b__47_0(TermData a, TermData b)
			{
				return default(int);
			}
		}

		[Token(Token = "0x200047C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CE0FC", Offset = "0x5CE0FC")]
		private sealed class <Import_Google_Coroutine>d__65 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001D30")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001D31")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001D32")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public LanguageSourceData <>4__this;

			[Token(Token = "0x4001D33")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public bool JustCheck;

			[Token(Token = "0x4001D34")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private UnityWebRequest <www>5__2;

			[Token(Token = "0x1700036D")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001C3E")]
				[Address(RVA = "0x7EF02C", Offset = "0x7EF02C", VA = "0x7EF02C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700036E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001C40")]
				[Address(RVA = "0x7EF074", Offset = "0x7EF074", VA = "0x7EF074", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001C3B")]
			[Address(RVA = "0x7EECDC", Offset = "0x7EECDC", VA = "0x7EECDC")]
			[DebuggerHidden]
			public <Import_Google_Coroutine>d__65(int <>1__state)
			{
			}

			[Token(Token = "0x6001C3C")]
			[Address(RVA = "0x7EED08", Offset = "0x7EED08", VA = "0x7EED08", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001C3D")]
			[Address(RVA = "0x7EED0C", Offset = "0x7EED0C", VA = "0x7EED0C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001C3F")]
			[Address(RVA = "0x7EF034", Offset = "0x7EF034", VA = "0x7EF034", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[NonSerialized]
		[Token(Token = "0x4001333")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ILanguageSource owner;

		[Token(Token = "0x4001334")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool UserAgreesToHaveItOnTheScene;

		[Token(Token = "0x4001335")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool UserAgreesToHaveItInsideThePluginsFolder;

		[Token(Token = "0x4001336")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public bool GoogleLiveSyncIsUptoDate;

		[NonSerialized]
		[Token(Token = "0x4001337")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
		public bool mIsGlobalSource;

		[Token(Token = "0x4001338")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<TermData> mTerms;

		[Token(Token = "0x4001339")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool CaseInsensitiveTerms;

		[NonSerialized]
		[Token(Token = "0x400133A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Dictionary<string, TermData> mDictionary;

		[Token(Token = "0x400133B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public MissingTranslationAction OnMissingTranslation;

		[Token(Token = "0x400133C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string mTerm_AppName;

		[Token(Token = "0x400133D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public List<LanguageData> mLanguages;

		[Token(Token = "0x400133E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool IgnoreDeviceLanguage;

		[Token(Token = "0x400133F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public eAllowUnloadLanguages _AllowUnloadingLanguages;

		[Token(Token = "0x4001340")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public string Google_WebServiceURL;

		[Token(Token = "0x4001341")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public string Google_SpreadsheetKey;

		[Token(Token = "0x4001342")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public string Google_SpreadsheetName;

		[Token(Token = "0x4001343")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public string Google_LastUpdatedVersion;

		[Token(Token = "0x4001344")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public eGoogleUpdateFrequency GoogleUpdateFrequency;

		[Token(Token = "0x4001345")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public eGoogleUpdateFrequency GoogleInEditorCheckFrequency;

		[Token(Token = "0x4001346")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public eGoogleUpdateSynchronization GoogleUpdateSynchronization;

		[Token(Token = "0x4001347")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public float GoogleUpdateDelay;

		[Token(Token = "0x4001349")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public List<UnityEngine.Object> Assets;

		[NonSerialized]
		[Token(Token = "0x400134A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Dictionary<string, UnityEngine.Object> mAssetDictionary;

		[Token(Token = "0x400134B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private string mDelayedGoogleData;

		[Token(Token = "0x400134C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static string EmptyCategory;

		[Token(Token = "0x400134D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static char[] CategorySeparators;

		[Token(Token = "0x1700019F")]
		public UnityEngine.Object ownerObject
		{
			[Token(Token = "0x60011F3")]
			[Address(RVA = "0xA5AB44", Offset = "0xA5AB44", VA = "0xA5AB44")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x14000015")]
		public event LanguageSource.fnOnSourceUpdated Event_OnSourceUpdateFromGoogle
		{
			[Token(Token = "0x60011F4")]
			[Address(RVA = "0xA5A8B8", Offset = "0xA5A8B8", VA = "0xA5A8B8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D9A70", Offset = "0x5D9A70")]
			add
			{
			}
			[Token(Token = "0x60011F5")]
			[Address(RVA = "0xA5ABC4", Offset = "0xA5ABC4", VA = "0xA5ABC4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D9A80", Offset = "0x5D9A80")]
			remove
			{
			}
		}

		[Token(Token = "0x60011F6")]
		[Address(RVA = "0xA5A044", Offset = "0xA5A044", VA = "0xA5A044")]
		public void Awake()
		{
		}

		[Token(Token = "0x60011F7")]
		[Address(RVA = "0xA5A0E8", Offset = "0xA5A0E8", VA = "0xA5A0E8")]
		public void OnDestroy()
		{
		}

		[Token(Token = "0x60011F8")]
		[Address(RVA = "0xA5B3A0", Offset = "0xA5B3A0", VA = "0xA5B3A0")]
		public bool IsEqualTo(LanguageSourceData Source)
		{
			return default(bool);
		}

		[Token(Token = "0x60011F9")]
		[Address(RVA = "0xA5B954", Offset = "0xA5B954", VA = "0xA5B954")]
		internal bool ManagerHasASimilarSource()
		{
			return default(bool);
		}

		[Token(Token = "0x60011FA")]
		[Address(RVA = "0xA5BA7C", Offset = "0xA5BA7C", VA = "0xA5BA7C")]
		public void ClearAllData()
		{
		}

		[Token(Token = "0x60011FB")]
		[Address(RVA = "0xA5BB3C", Offset = "0xA5BB3C", VA = "0xA5BB3C")]
		public bool IsGlobalSource()
		{
			return default(bool);
		}

		[Token(Token = "0x60011FC")]
		[Address(RVA = "0xA5BB44", Offset = "0xA5BB44", VA = "0xA5BB44")]
		public void Editor_SetDirty()
		{
		}

		[Token(Token = "0x60011FD")]
		[Address(RVA = "0xA5AFB4", Offset = "0xA5AFB4", VA = "0xA5AFB4")]
		public void UpdateAssetDictionary()
		{
		}

		[Token(Token = "0x60011FE")]
		[Address(RVA = "0xA5BB48", Offset = "0xA5BB48", VA = "0xA5BB48")]
		public UnityEngine.Object FindAsset(string Name)
		{
			return null;
		}

		[Token(Token = "0x60011FF")]
		[Address(RVA = "0xA5BC20", Offset = "0xA5BC20", VA = "0xA5BC20")]
		public bool HasAsset(UnityEngine.Object Obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001200")]
		[Address(RVA = "0xA5BC84", Offset = "0xA5BC84", VA = "0xA5BC84")]
		public void AddAsset(UnityEngine.Object Obj)
		{
		}

		[Token(Token = "0x6001201")]
		[Address(RVA = "0xA5BD2C", Offset = "0xA5BD2C", VA = "0xA5BD2C")]
		public string Export_I2CSV(string Category, char Separator = ',', bool specializationsAsRows = true)
		{
			return null;
		}

		[Token(Token = "0x6001202")]
		[Address(RVA = "0xA5C480", Offset = "0xA5C480", VA = "0xA5C480")]
		private static void AppendI2Term(StringBuilder Builder, int nLanguages, string Term, TermData termData, char Separator, string forceSpecialization)
		{
		}

		[Token(Token = "0x6001203")]
		[Address(RVA = "0xA5C708", Offset = "0xA5C708", VA = "0xA5C708")]
		private static void AppendI2Text(StringBuilder Builder, string text)
		{
		}

		[Token(Token = "0x6001204")]
		[Address(RVA = "0xA5C7E4", Offset = "0xA5C7E4", VA = "0xA5C7E4")]
		private string Export_Language_to_Cache(int langIndex, bool fillTermWithFallback)
		{
			return null;
		}

		[Token(Token = "0x6001205")]
		[Address(RVA = "0xA5CDB8", Offset = "0xA5CDB8", VA = "0xA5CDB8")]
		public string Export_CSV(string Category, char Separator = ',', bool specializationsAsRows = true)
		{
			return null;
		}

		[Token(Token = "0x6001206")]
		[Address(RVA = "0xA5D75C", Offset = "0xA5D75C", VA = "0xA5D75C")]
		private static void AppendTerm(StringBuilder Builder, int nLanguages, string Term, TermData termData, string specialization, char Separator)
		{
		}

		[Token(Token = "0x6001207")]
		[Address(RVA = "0xA5D5F4", Offset = "0xA5D5F4", VA = "0xA5D5F4")]
		private static void AppendString(StringBuilder Builder, string Text, char Separator)
		{
		}

		[Token(Token = "0x6001208")]
		[Address(RVA = "0xA5D9EC", Offset = "0xA5D9EC", VA = "0xA5D9EC")]
		private static void AppendTranslation(StringBuilder Builder, string Text, char Separator, string tags)
		{
		}

		[Token(Token = "0x6001209")]
		[Address(RVA = "0xA5DB74", Offset = "0xA5DB74", VA = "0xA5DB74")]
		public UnityWebRequest Export_Google_CreateWWWcall(eSpreadsheetUpdateMode UpdateMode = eSpreadsheetUpdateMode.Replace)
		{
			return null;
		}

		[Token(Token = "0x600120A")]
		[Address(RVA = "0xA5DD4C", Offset = "0xA5DD4C", VA = "0xA5DD4C")]
		private string Export_Google_CreateData()
		{
			return null;
		}

		[Token(Token = "0x600120B")]
		[Address(RVA = "0xA5E1B4", Offset = "0xA5E1B4", VA = "0xA5E1B4")]
		public string Import_CSV(string Category, string CSVstring, eSpreadsheetUpdateMode UpdateMode = eSpreadsheetUpdateMode.Replace, char Separator = ',')
		{
			return null;
		}

		[Token(Token = "0x600120C")]
		[Address(RVA = "0xA5EE1C", Offset = "0xA5EE1C", VA = "0xA5EE1C")]
		public string Import_I2CSV(string Category, string I2CSVstring, eSpreadsheetUpdateMode UpdateMode = eSpreadsheetUpdateMode.Replace)
		{
			return null;
		}

		[Token(Token = "0x600120D")]
		[Address(RVA = "0xA5E200", Offset = "0xA5E200", VA = "0xA5E200")]
		public string Import_CSV(string Category, List<string[]> CSV, eSpreadsheetUpdateMode UpdateMode = eSpreadsheetUpdateMode.Replace)
		{
			return null;
		}

		[Token(Token = "0x600120E")]
		[Address(RVA = "0xA5EE64", Offset = "0xA5EE64", VA = "0xA5EE64")]
		private bool ArrayContains(string MainText, params string[] texts)
		{
			return default(bool);
		}

		[Token(Token = "0x600120F")]
		[Address(RVA = "0xA5F29C", Offset = "0xA5F29C", VA = "0xA5F29C")]
		public static eTermType GetTermType(string type)
		{
			return default(eTermType);
		}

		[Token(Token = "0x6001210")]
		[Address(RVA = "0xA5F530", Offset = "0xA5F530", VA = "0xA5F530")]
		private void Import_Language_from_Cache(int langIndex, string langData, bool useFallback, bool onlyCurrentSpecialization)
		{
		}

		[Token(Token = "0x6001211")]
		[Address(RVA = "0xA5F778", Offset = "0xA5F778", VA = "0xA5F778")]
		public static void FreeUnusedLanguages()
		{
		}

		[Token(Token = "0x6001212")]
		[Address(RVA = "0xA5F8F4", Offset = "0xA5F8F4", VA = "0xA5F8F4")]
		public void Import_Google_FromCache()
		{
		}

		[Token(Token = "0x6001213")]
		[Address(RVA = "0xA5FD50", Offset = "0xA5FD50", VA = "0xA5FD50")]
		private bool IsNewerVersion(string currentVersion, string newVersion)
		{
			return default(bool);
		}

		[Token(Token = "0x6001214")]
		[Address(RVA = "0xA60468", Offset = "0xA60468", VA = "0xA60468")]
		public void Import_Google(bool ForceUpdate, bool justCheck)
		{
		}

		[Token(Token = "0x6001215")]
		[Address(RVA = "0xA5FB74", Offset = "0xA5FB74", VA = "0xA5FB74")]
		private string GetSourcePlayerPrefName()
		{
			return null;
		}

		[Token(Token = "0x6001216")]
		[Address(RVA = "0xA60700", Offset = "0xA60700", VA = "0xA60700")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D9A90", Offset = "0x5D9A90")]
		private IEnumerator Import_Google_Coroutine(bool JustCheck)
		{
			return null;
		}

		[Token(Token = "0x6001217")]
		[Address(RVA = "0xA6078C", Offset = "0xA6078C", VA = "0xA6078C")]
		private void ApplyDownloadedDataOnSceneLoaded(Scene scene, LoadSceneMode mode)
		{
		}

		[Token(Token = "0x6001218")]
		[Address(RVA = "0xA60850", Offset = "0xA60850", VA = "0xA60850")]
		public void ApplyDownloadedDataFromGoogle()
		{
		}

		[Token(Token = "0x6001219")]
		[Address(RVA = "0xA609CC", Offset = "0xA609CC", VA = "0xA609CC")]
		public UnityWebRequest Import_Google_CreateWWWcall(bool ForceUpdate, bool justCheck)
		{
			return null;
		}

		[Token(Token = "0x600121A")]
		[Address(RVA = "0xA60B54", Offset = "0xA60B54", VA = "0xA60B54")]
		public bool HasGoogleSpreadsheet()
		{
			return default(bool);
		}

		[Token(Token = "0x600121B")]
		[Address(RVA = "0xA5FDE0", Offset = "0xA5FDE0", VA = "0xA5FDE0")]
		public string Import_Google_Result(string JsonString, eSpreadsheetUpdateMode UpdateMode, bool saveInPlayerPrefs = false)
		{
			return null;
		}

		[Token(Token = "0x600121C")]
		[Address(RVA = "0xA5B520", Offset = "0xA5B520", VA = "0xA5B520")]
		public int GetLanguageIndex(string language, bool AllowDiscartingRegion = true, bool SkipDisabled = true)
		{
			return default(int);
		}

		[Token(Token = "0x600121D")]
		[Address(RVA = "0xA60DD4", Offset = "0xA60DD4", VA = "0xA60DD4")]
		public LanguageData GetLanguageData(string language, bool AllowDiscartingRegion = true)
		{
			return null;
		}

		[Token(Token = "0x600121E")]
		[Address(RVA = "0xA60E70", Offset = "0xA60E70", VA = "0xA60E70")]
		public bool IsCurrentLanguage(int languageIndex)
		{
			return default(bool);
		}

		[Token(Token = "0x600121F")]
		[Address(RVA = "0xA5EF08", Offset = "0xA5EF08", VA = "0xA5EF08")]
		public int GetLanguageIndexFromCode(string Code, bool exactMatch = true, bool ignoreDisabled = false)
		{
			return default(int);
		}

		[Token(Token = "0x6001220")]
		[Address(RVA = "0xA60BF4", Offset = "0xA60BF4", VA = "0xA60BF4")]
		public static int GetCommonWordInLanguageNames(string Language1, string Language2)
		{
			return default(int);
		}

		[Token(Token = "0x6001221")]
		[Address(RVA = "0xA60F2C", Offset = "0xA60F2C", VA = "0xA60F2C")]
		public static bool AreTheSameLanguage(string Language1, string Language2)
		{
			return default(bool);
		}

		[Token(Token = "0x6001222")]
		[Address(RVA = "0xA60FC4", Offset = "0xA60FC4", VA = "0xA60FC4")]
		public static string GetLanguageWithoutRegion(string Language)
		{
			return null;
		}

		[Token(Token = "0x6001223")]
		[Address(RVA = "0xA61060", Offset = "0xA61060", VA = "0xA61060")]
		public void AddLanguage(string LanguageName)
		{
		}

		[Token(Token = "0x6001224")]
		[Address(RVA = "0xA610E4", Offset = "0xA610E4", VA = "0xA610E4")]
		public void AddLanguage(string LanguageName, string LanguageCode)
		{
		}

		[Token(Token = "0x6001225")]
		[Address(RVA = "0xA612BC", Offset = "0xA612BC", VA = "0xA612BC")]
		public void RemoveLanguage(string LanguageName)
		{
		}

		[Token(Token = "0x6001226")]
		[Address(RVA = "0xA615EC", Offset = "0xA615EC", VA = "0xA615EC")]
		public List<string> GetLanguages(bool skipDisabled = true)
		{
			return null;
		}

		[Token(Token = "0x6001227")]
		[Address(RVA = "0xA61744", Offset = "0xA61744", VA = "0xA61744")]
		public List<string> GetLanguagesCode(bool allowRegions = true, bool skipDisabled = true)
		{
			return null;
		}

		[Token(Token = "0x6001228")]
		[Address(RVA = "0xA61910", Offset = "0xA61910", VA = "0xA61910")]
		public bool IsLanguageEnabled(string Language)
		{
			return default(bool);
		}

		[Token(Token = "0x6001229")]
		[Address(RVA = "0xA619B8", Offset = "0xA619B8", VA = "0xA619B8")]
		public void EnableLanguage(string Language, bool bEnabled)
		{
		}

		[Token(Token = "0x600122A")]
		[Address(RVA = "0xA61A68", Offset = "0xA61A68", VA = "0xA61A68")]
		public bool AllowUnloadingLanguages()
		{
			return default(bool);
		}

		[Token(Token = "0x600122B")]
		[Address(RVA = "0xA61A78", Offset = "0xA61A78", VA = "0xA61A78")]
		private string GetSavedLanguageFileName(int languageIndex)
		{
			return null;
		}

		[Token(Token = "0x600122C")]
		[Address(RVA = "0xA61CB4", Offset = "0xA61CB4", VA = "0xA61CB4")]
		public void LoadLanguage(int languageIndex, bool UnloadOtherLanguages, bool useFallback, bool onlyCurrentSpecialization, bool forceLoad)
		{
		}

		[Token(Token = "0x600122D")]
		[Address(RVA = "0xA620AC", Offset = "0xA620AC", VA = "0xA620AC")]
		public void LoadAllLanguages(bool forceLoad = false)
		{
		}

		[Token(Token = "0x600122E")]
		[Address(RVA = "0xA61E44", Offset = "0xA61E44", VA = "0xA61E44")]
		public void UnloadLanguage(int languageIndex)
		{
		}

		[Token(Token = "0x600122F")]
		[Address(RVA = "0xA5F414", Offset = "0xA5F414", VA = "0xA5F414")]
		public void SaveLanguages(bool unloadAll, PersistentStorage.eFileType fileLocation = PersistentStorage.eFileType.Temporal)
		{
		}

		[Token(Token = "0x6001230")]
		[Address(RVA = "0xA5F368", Offset = "0xA5F368", VA = "0xA5F368")]
		public bool HasUnloadedLanguages()
		{
			return default(bool);
		}

		[Token(Token = "0x6001231")]
		[Address(RVA = "0xA5DF64", Offset = "0xA5DF64", VA = "0xA5DF64")]
		public List<string> GetCategories(bool OnlyMainCategory = false, [Optional] List<string> Categories)
		{
			return null;
		}

		[Token(Token = "0x6001232")]
		[Address(RVA = "0xA62240", Offset = "0xA62240", VA = "0xA62240")]
		public static string GetKeyFromFullTerm(string FullTerm, bool OnlyMainCategory = false)
		{
			return null;
		}

		[Token(Token = "0x6001233")]
		[Address(RVA = "0xA6213C", Offset = "0xA6213C", VA = "0xA6213C")]
		public static string GetCategoryFromFullTerm(string FullTerm, bool OnlyMainCategory = false)
		{
			return null;
		}

		[Token(Token = "0x6001234")]
		[Address(RVA = "0xA62320", Offset = "0xA62320", VA = "0xA62320")]
		public static void DeserializeFullTerm(string FullTerm, out string Key, out string Category, bool OnlyMainCategory = false)
		{
		}

		[Token(Token = "0x6001235")]
		[Address(RVA = "0xA5AC64", Offset = "0xA5AC64", VA = "0xA5AC64")]
		public void UpdateDictionary(bool force = false)
		{
		}

		[Token(Token = "0x6001236")]
		[Address(RVA = "0xA62474", Offset = "0xA62474", VA = "0xA62474")]
		public string GetTranslation(string term, [Optional] string overrideLanguage, [Optional] string overrideSpecialization, bool skipDisabled = false, bool allowCategoryMistmatch = false)
		{
			return null;
		}

		[Token(Token = "0x6001237")]
		[Address(RVA = "0xA6251C", Offset = "0xA6251C", VA = "0xA6251C")]
		public bool TryGetTranslation(string term, out string Translation, [Optional] string overrideLanguage, [Optional] string overrideSpecialization, bool skipDisabled = false, bool allowCategoryMistmatch = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6001238")]
		[Address(RVA = "0xA5CAB8", Offset = "0xA5CAB8", VA = "0xA5CAB8")]
		private bool TryGetFallbackTranslation(TermData termData, out string Translation, int langIndex, [Optional] string overrideSpecialization, bool skipDisabled = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6001239")]
		[Address(RVA = "0xA62790", Offset = "0xA62790", VA = "0xA62790")]
		public TermData AddTerm(string term)
		{
			return null;
		}

		[Token(Token = "0x600123A")]
		[Address(RVA = "0xA5B720", Offset = "0xA5B720", VA = "0xA5B720")]
		public TermData GetTermData(string term, bool allowCategoryMistmatch = false)
		{
			return null;
		}

		[Token(Token = "0x600123B")]
		[Address(RVA = "0xA629AC", Offset = "0xA629AC", VA = "0xA629AC")]
		public bool ContainsTerm(string term)
		{
			return default(bool);
		}

		[Token(Token = "0x600123C")]
		[Address(RVA = "0xA629CC", Offset = "0xA629CC", VA = "0xA629CC")]
		public List<string> GetTermsList([Optional] string Category)
		{
			return null;
		}

		[Token(Token = "0x600123D")]
		[Address(RVA = "0xA6279C", Offset = "0xA6279C", VA = "0xA6279C")]
		public TermData AddTerm(string NewTerm, eTermType termType, bool SaveSource = true)
		{
			return null;
		}

		[Token(Token = "0x600123E")]
		[Address(RVA = "0xA62BE4", Offset = "0xA62BE4", VA = "0xA62BE4")]
		public void RemoveTerm(string term)
		{
		}

		[Token(Token = "0x600123F")]
		[Address(RVA = "0xA5F0D0", Offset = "0xA5F0D0", VA = "0xA5F0D0")]
		public static void ValidateFullTerm(ref string Term)
		{
		}

		[Token(Token = "0x6001240")]
		[Address(RVA = "0xA5A61C", Offset = "0xA5A61C", VA = "0xA5A61C")]
		public LanguageSourceData()
		{
		}
	}
	[Token(Token = "0x20002AB")]
	public enum eSpreadsheetUpdateMode
	{
		[Token(Token = "0x400134F")]
		None,
		[Token(Token = "0x4001350")]
		Replace,
		[Token(Token = "0x4001351")]
		Merge,
		[Token(Token = "0x4001352")]
		AddNewTerms
	}
	[Token(Token = "0x20002AC")]
	public class LocalizationReader
	{
		[Token(Token = "0x6001242")]
		[Address(RVA = "0xA7708C", Offset = "0xA7708C", VA = "0xA7708C")]
		public static Dictionary<string, string> ReadTextAsset(TextAsset asset)
		{
			return null;
		}

		[Token(Token = "0x6001243")]
		[Address(RVA = "0xA77318", Offset = "0xA77318", VA = "0xA77318")]
		public static bool TextAsset_ReadLine(string line, out string key, out string value, out string category, out string comment, out string termType)
		{
			return default(bool);
		}

		[Token(Token = "0x6001244")]
		[Address(RVA = "0xA777AC", Offset = "0xA777AC", VA = "0xA777AC")]
		public static string ReadCSVfile(string Path, Encoding encoding)
		{
			return null;
		}

		[Token(Token = "0x6001245")]
		[Address(RVA = "0xA779A8", Offset = "0xA779A8", VA = "0xA779A8")]
		public static List<string[]> ReadCSV(string Text, char Separator = ',')
		{
			return null;
		}

		[Token(Token = "0x6001246")]
		[Address(RVA = "0xA77A90", Offset = "0xA77A90", VA = "0xA77A90")]
		private static string[] ParseCSVline(string Line, ref int iStart, char Separator)
		{
			return null;
		}

		[Token(Token = "0x6001247")]
		[Address(RVA = "0xA77C84", Offset = "0xA77C84", VA = "0xA77C84")]
		private static void AddCSVtoken(ref List<string> list, ref string Line, int iEnd, ref int iWordStart)
		{
		}

		[Token(Token = "0x6001248")]
		[Address(RVA = "0xA77DC0", Offset = "0xA77DC0", VA = "0xA77DC0")]
		public static List<string[]> ReadI2CSV(string Text)
		{
			return null;
		}

		[Token(Token = "0x6001249")]
		[Address(RVA = "0xA77700", Offset = "0xA77700", VA = "0xA77700")]
		public static void ValidateFullTerm(ref string Term)
		{
		}

		[Token(Token = "0x600124A")]
		[Address(RVA = "0xA77FBC", Offset = "0xA77FBC", VA = "0xA77FBC")]
		public static string EncodeString(string str)
		{
			return null;
		}

		[Token(Token = "0x600124B")]
		[Address(RVA = "0xA77654", Offset = "0xA77654", VA = "0xA77654")]
		public static string DecodeString(string str)
		{
			return null;
		}

		[Token(Token = "0x600124C")]
		[Address(RVA = "0xA780B8", Offset = "0xA780B8", VA = "0xA780B8")]
		public LocalizationReader()
		{
		}
	}
	[Token(Token = "0x20002AD")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5CBD88", Offset = "0x5CBD88")]
	public class Localize : MonoBehaviour
	{
		[Token(Token = "0x200047D")]
		public enum TermModification
		{
			[Token(Token = "0x4001D36")]
			DontModify,
			[Token(Token = "0x4001D37")]
			ToUpper,
			[Token(Token = "0x4001D38")]
			ToLower,
			[Token(Token = "0x4001D39")]
			ToUpperFirst,
			[Token(Token = "0x4001D3A")]
			ToTitle
		}

		[Serializable]
		[Token(Token = "0x200047E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CE10C", Offset = "0x5CE10C")]
		private sealed class <>c
		{
			[Token(Token = "0x4001D3B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4001D3C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Predicate<UnityEngine.Object> <>9__49_0;

			[Token(Token = "0x4001D3D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<UnityEngine.Object, string> <>9__49_1;

			[Token(Token = "0x4001D3E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public static Func<IGrouping<string, UnityEngine.Object>, string> <>9__49_2;

			[Token(Token = "0x4001D3F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public static Func<IGrouping<string, UnityEngine.Object>, UnityEngine.Object> <>9__49_3;

			[Token(Token = "0x6001C42")]
			[Address(RVA = "0x7F0710", Offset = "0x7F0710", VA = "0x7F0710")]
			public <>c()
			{
			}

			[Token(Token = "0x6001C43")]
			[Address(RVA = "0x7F0718", Offset = "0x7F0718", VA = "0x7F0718")]
			internal bool <UpdateAssetDictionary>b__49_0(UnityEngine.Object x)
			{
				return default(bool);
			}

			[Token(Token = "0x6001C44")]
			[Address(RVA = "0x7F0780", Offset = "0x7F0780", VA = "0x7F0780")]
			internal string <UpdateAssetDictionary>b__49_1(UnityEngine.Object o)
			{
				return null;
			}

			[Token(Token = "0x6001C45")]
			[Address(RVA = "0x7F079C", Offset = "0x7F079C", VA = "0x7F079C")]
			internal string <UpdateAssetDictionary>b__49_2(IGrouping<string, UnityEngine.Object> g)
			{
				return null;
			}

			[Token(Token = "0x6001C46")]
			[Address(RVA = "0x7F0844", Offset = "0x7F0844", VA = "0x7F0844")]
			internal UnityEngine.Object <UpdateAssetDictionary>b__49_3(IGrouping<string, UnityEngine.Object> g)
			{
				return null;
			}
		}

		[Token(Token = "0x4001353")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string mTerm;

		[Token(Token = "0x4001354")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string mTermSecondary;

		[NonSerialized]
		[Token(Token = "0x4001355")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string FinalTerm;

		[NonSerialized]
		[Token(Token = "0x4001356")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string FinalSecondaryTerm;

		[Token(Token = "0x4001357")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public TermModification PrimaryTermModifier;

		[Token(Token = "0x4001358")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public TermModification SecondaryTermModifier;

		[Token(Token = "0x4001359")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string TermPrefix;

		[Token(Token = "0x400135A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string TermSuffix;

		[Token(Token = "0x400135B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool LocalizeOnAwake;

		[Token(Token = "0x400135C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private string LastLocalizedLanguage;

		[Token(Token = "0x400135D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool IgnoreRTL;

		[Token(Token = "0x400135E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public int MaxCharactersInRTL;

		[Token(Token = "0x400135F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool IgnoreNumbersInRTL;

		[Token(Token = "0x4001360")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		public bool CorrectAlignmentForRTL;

		[Token(Token = "0x4001361")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6A")]
		public bool AddSpacesToJoinedLanguages;

		[Token(Token = "0x4001362")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6B")]
		public bool AllowLocalizedParameters;

		[Token(Token = "0x4001363")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public List<UnityEngine.Object> TranslatedObjects;

		[NonSerialized]
		[Token(Token = "0x4001364")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Dictionary<string, UnityEngine.Object> mAssetDictionary;

		[Token(Token = "0x4001365")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public UnityEvent LocalizeEvent;

		[Token(Token = "0x4001366")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static string MainTranslation;

		[Token(Token = "0x4001367")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static string SecondaryTranslation;

		[Token(Token = "0x4001368")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static string CallBackTerm;

		[Token(Token = "0x4001369")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static string CallBackSecondaryTerm;

		[Token(Token = "0x400136A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static Localize CurrentLocalizeComponent;

		[Token(Token = "0x400136B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public bool AlwaysForceLocalize;

		[Token(Token = "0x400136C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		public EventCallback LocalizeCallBack;

		[Token(Token = "0x400136D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public bool mGUI_ShowReferences;

		[Token(Token = "0x400136E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x99")]
		public bool mGUI_ShowTems;

		[Token(Token = "0x400136F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9A")]
		public bool mGUI_ShowCallback;

		[Token(Token = "0x4001370")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public ILocalizeTarget mLocalizeTarget;

		[Token(Token = "0x4001371")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public string mLocalizeTargetName;

		[Token(Token = "0x170001A0")]
		public string Term
		{
			[Token(Token = "0x600124D")]
			[Address(RVA = "0xA780C0", Offset = "0xA780C0", VA = "0xA780C0")]
			get
			{
				return null;
			}
			[Token(Token = "0x600124E")]
			[Address(RVA = "0xA780C8", Offset = "0xA780C8", VA = "0xA780C8")]
			set
			{
			}
		}

		[Token(Token = "0x170001A1")]
		public string SecondaryTerm
		{
			[Token(Token = "0x600124F")]
			[Address(RVA = "0xA78124", Offset = "0xA78124", VA = "0xA78124")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001250")]
			[Address(RVA = "0xA7812C", Offset = "0xA7812C", VA = "0xA7812C")]
			set
			{
			}
		}

		[Token(Token = "0x6001251")]
		[Address(RVA = "0xA781BC", Offset = "0xA781BC", VA = "0xA781BC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001252")]
		[Address(RVA = "0xA78B68", Offset = "0xA78B68", VA = "0xA78B68")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001253")]
		[Address(RVA = "0xA78B70", Offset = "0xA78B70", VA = "0xA78B70")]
		public bool HasCallback()
		{
			return default(bool);
		}

		[Token(Token = "0x6001254")]
		[Address(RVA = "0xA753D8", Offset = "0xA753D8", VA = "0xA753D8")]
		public void OnLocalize(bool Force = false)
		{
		}

		[Token(Token = "0x6001255")]
		[Address(RVA = "0xA785EC", Offset = "0xA785EC", VA = "0xA785EC")]
		public bool FindTarget()
		{
			return default(bool);
		}

		[Token(Token = "0x6001256")]
		[Address(RVA = "0xA78BC4", Offset = "0xA78BC4", VA = "0xA78BC4")]
		public void GetFinalTerms(out string primaryTerm, out string secondaryTerm)
		{
		}

		[Token(Token = "0x6001257")]
		[Address(RVA = "0xA78D7C", Offset = "0xA78D7C", VA = "0xA78D7C")]
		public string GetMainTargetsText()
		{
			return null;
		}

		[Token(Token = "0x6001258")]
		[Address(RVA = "0xA78E50", Offset = "0xA78E50", VA = "0xA78E50")]
		public void SetFinalTerms(string Main, string Secondary, out string primaryTerm, out string secondaryTerm, bool RemoveNonASCII)
		{
		}

		[Token(Token = "0x6001259")]
		[Address(RVA = "0xA780CC", Offset = "0xA780CC", VA = "0xA780CC")]
		public void SetTerm(string primary)
		{
		}

		[Token(Token = "0x600125A")]
		[Address(RVA = "0xA78138", Offset = "0xA78138", VA = "0xA78138")]
		public void SetTerm(string primary, string secondary)
		{
		}

		[Token(Token = "0x600125B")]
		internal T GetSecondaryTranslatedObj<T>(ref string mainTranslation, ref string secondaryTranslation) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x600125C")]
		[Address(RVA = "0xA78200", Offset = "0xA78200", VA = "0xA78200")]
		public void UpdateAssetDictionary()
		{
		}

		[Token(Token = "0x600125D")]
		internal T GetObject<T>(string Translation) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x600125E")]
		private T GetTranslatedObject<T>(string Translation) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x600125F")]
		[Address(RVA = "0xA78EAC", Offset = "0xA78EAC", VA = "0xA78EAC")]
		private void DeserializeTranslation(string translation, out string value, out string secondary)
		{
		}

		[Token(Token = "0x6001260")]
		public T FindTranslatedObject<T>(string value) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x6001261")]
		[Address(RVA = "0xA78FC0", Offset = "0xA78FC0", VA = "0xA78FC0")]
		public bool HasTranslatedObject(UnityEngine.Object Obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001262")]
		[Address(RVA = "0xA79054", Offset = "0xA79054", VA = "0xA79054")]
		public void AddTranslatedObject(UnityEngine.Object Obj)
		{
		}

		[Token(Token = "0x6001263")]
		[Address(RVA = "0xA790FC", Offset = "0xA790FC", VA = "0xA790FC")]
		public void SetGlobalLanguage(string Language)
		{
		}

		[Token(Token = "0x6001264")]
		[Address(RVA = "0xA7915C", Offset = "0xA7915C", VA = "0xA7915C")]
		public Localize()
		{
		}
	}
	[Token(Token = "0x20002AE")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5CBDC0", Offset = "0x5CBDC0")]
	public class LocalizeDropdown : MonoBehaviour
	{
		[Token(Token = "0x4001372")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<string> _Terms;

		[Token(Token = "0x6001265")]
		[Address(RVA = "0xA7937C", Offset = "0xA7937C", VA = "0xA7937C")]
		public void Start()
		{
		}

		[Token(Token = "0x6001266")]
		[Address(RVA = "0xA79528", Offset = "0xA79528", VA = "0xA79528")]
		public void OnDestroy()
		{
		}

		[Token(Token = "0x6001267")]
		[Address(RVA = "0xA795CC", Offset = "0xA795CC", VA = "0xA795CC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001268")]
		[Address(RVA = "0xA79428", Offset = "0xA79428", VA = "0xA79428")]
		public void OnLocalize()
		{
		}

		[Token(Token = "0x6001269")]
		[Address(RVA = "0xA79628", Offset = "0xA79628", VA = "0xA79628")]
		private void FillValues()
		{
		}

		[Token(Token = "0x600126A")]
		[Address(RVA = "0xA797FC", Offset = "0xA797FC", VA = "0xA797FC")]
		public void UpdateLocalization()
		{
		}

		[Token(Token = "0x600126B")]
		[Address(RVA = "0xA79C4C", Offset = "0xA79C4C", VA = "0xA79C4C")]
		public void UpdateLocalizationTMPro()
		{
		}

		[Token(Token = "0x600126C")]
		[Address(RVA = "0xA79A90", Offset = "0xA79A90", VA = "0xA79A90")]
		private void FillValuesTMPro()
		{
		}

		[Token(Token = "0x600126D")]
		[Address(RVA = "0xA79ED4", Offset = "0xA79ED4", VA = "0xA79ED4")]
		public LocalizeDropdown()
		{
		}
	}
	[Token(Token = "0x20002AF")]
	public static class LocalizationManager
	{
		[Token(Token = "0x200047F")]
		public delegate object _GetParam(string param);

		[Token(Token = "0x2000480")]
		public delegate void OnLocalizeCallback();

		[Token(Token = "0x2000481")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CE11C", Offset = "0x5CE11C")]
		private sealed class <>c__DisplayClass33_0
		{
			[Token(Token = "0x4001D40")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public List<string> Languages;

			[Token(Token = "0x4001D41")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Func<string, bool> <>9__0;

			[Token(Token = "0x6001C4F")]
			[Address(RVA = "0x7EFBC0", Offset = "0x7EFBC0", VA = "0x7EFBC0")]
			public <>c__DisplayClass33_0()
			{
			}

			[Token(Token = "0x6001C50")]
			[Address(RVA = "0x7EFBC8", Offset = "0x7EFBC8", VA = "0x7EFBC8")]
			internal bool <GetAllLanguages>b__0(string x)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x2000482")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CE12C", Offset = "0x5CE12C")]
		private sealed class <>c__DisplayClass34_0
		{
			[Token(Token = "0x4001D42")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public List<string> Languages;

			[Token(Token = "0x4001D43")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Func<string, bool> <>9__0;

			[Token(Token = "0x6001C51")]
			[Address(RVA = "0x7EFC38", Offset = "0x7EFC38", VA = "0x7EFC38")]
			public <>c__DisplayClass34_0()
			{
			}

			[Token(Token = "0x6001C52")]
			[Address(RVA = "0x7EFC40", Offset = "0x7EFC40", VA = "0x7EFC40")]
			internal bool <GetAllLanguagesCode>b__0(string x)
			{
				return default(bool);
			}
		}

		[Serializable]
		[Token(Token = "0x2000483")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CE13C", Offset = "0x5CE13C")]
		private sealed class <>c
		{
			[Token(Token = "0x4001D44")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4001D45")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static _GetParam <>9__41_0;

			[Token(Token = "0x6001C54")]
			[Address(RVA = "0x7EFB50", Offset = "0x7EFB50", VA = "0x7EFB50")]
			public <>c()
			{
			}

			[Token(Token = "0x6001C55")]
			[Address(RVA = "0x7EFB58", Offset = "0x7EFB58", VA = "0x7EFB58")]
			internal object <ApplyLocalizationParams>b__41_0(string p)
			{
				return null;
			}
		}

		[Token(Token = "0x2000484")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CE14C", Offset = "0x5CE14C")]
		private sealed class <>c__DisplayClass42_0
		{
			[Token(Token = "0x4001D46")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public GameObject root;

			[Token(Token = "0x6001C56")]
			[Address(RVA = "0x7EFCB0", Offset = "0x7EFCB0", VA = "0x7EFCB0")]
			public <>c__DisplayClass42_0()
			{
			}

			[Token(Token = "0x6001C57")]
			[Address(RVA = "0x7EFCB8", Offset = "0x7EFCB8", VA = "0x7EFCB8")]
			internal object <ApplyLocalizationParams>b__0(string p)
			{
				return null;
			}
		}

		[Token(Token = "0x2000485")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CE15C", Offset = "0x5CE15C")]
		private sealed class <>c__DisplayClass43_0
		{
			[Token(Token = "0x4001D47")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Dictionary<string, object> parameters;

			[Token(Token = "0x6001C58")]
			[Address(RVA = "0x7EFD30", Offset = "0x7EFD30", VA = "0x7EFD30")]
			public <>c__DisplayClass43_0()
			{
			}

			[Token(Token = "0x6001C59")]
			[Address(RVA = "0x7EFD38", Offset = "0x7EFD38", VA = "0x7EFD38")]
			internal object <ApplyLocalizationParams>b__0(string p)
			{
				return null;
			}
		}

		[Token(Token = "0x2000486")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CE16C", Offset = "0x5CE16C")]
		private sealed class <Delayed_Import_Google>d__59 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001D48")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001D49")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001D4A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float delay;

			[Token(Token = "0x4001D4B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public LanguageSourceData source;

			[Token(Token = "0x4001D4C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public bool justCheck;

			[Token(Token = "0x1700036F")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001C5D")]
				[Address(RVA = "0x7F0044", Offset = "0x7F0044", VA = "0x7F0044", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000370")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001C5F")]
				[Address(RVA = "0x7F008C", Offset = "0x7F008C", VA = "0x7F008C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001C5A")]
			[Address(RVA = "0x7EFF54", Offset = "0x7EFF54", VA = "0x7EFF54")]
			[DebuggerHidden]
			public <Delayed_Import_Google>d__59(int <>1__state)
			{
			}

			[Token(Token = "0x6001C5B")]
			[Address(RVA = "0x7EFF80", Offset = "0x7EFF80", VA = "0x7EFF80", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001C5C")]
			[Address(RVA = "0x7EFF84", Offset = "0x7EFF84", VA = "0x7EFF84", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001C5E")]
			[Address(RVA = "0x7F004C", Offset = "0x7F004C", VA = "0x7F004C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000487")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CE17C", Offset = "0x5CE17C")]
		private sealed class <>c__DisplayClass69_0
		{
			[Token(Token = "0x4001D4D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public ILocalizeTargetDescriptor desc;

			[Token(Token = "0x6001C60")]
			[Address(RVA = "0x7EFDB4", Offset = "0x7EFDB4", VA = "0x7EFDB4")]
			public <>c__DisplayClass69_0()
			{
			}

			[Token(Token = "0x6001C61")]
			[Address(RVA = "0x7EFDBC", Offset = "0x7EFDBC", VA = "0x7EFDBC")]
			internal bool <RegisterTarget>b__0(ILocalizeTargetDescriptor x)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x2000488")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CE18C", Offset = "0x5CE18C")]
		private sealed class <Coroutine_LocalizeAll>d__84 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001D4E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001D4F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x17000371")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001C65")]
				[Address(RVA = "0x7EFF04", Offset = "0x7EFF04", VA = "0x7EFF04", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000372")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001C67")]
				[Address(RVA = "0x7EFF4C", Offset = "0x7EFF4C", VA = "0x7EFF4C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001C62")]
			[Address(RVA = "0x7EFDE8", Offset = "0x7EFDE8", VA = "0x7EFDE8")]
			[DebuggerHidden]
			public <Coroutine_LocalizeAll>d__84(int <>1__state)
			{
			}

			[Token(Token = "0x6001C63")]
			[Address(RVA = "0x7EFE14", Offset = "0x7EFE14", VA = "0x7EFE14", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001C64")]
			[Address(RVA = "0x7EFE18", Offset = "0x7EFE18", VA = "0x7EFE18", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001C66")]
			[Address(RVA = "0x7EFF0C", Offset = "0x7EFF0C", VA = "0x7EFF0C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001373")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static string mCurrentLanguage;

		[Token(Token = "0x4001374")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static string mLanguageCode;

		[Token(Token = "0x4001375")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static CultureInfo mCurrentCulture;

		[Token(Token = "0x4001376")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static bool mChangeCultureInfo;

		[Token(Token = "0x4001377")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public static bool IsRight2Left;

		[Token(Token = "0x4001378")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public static bool HasJoinedWords;

		[Token(Token = "0x4001379")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static List<ILocalizationParamsManager> ParamManagers;

		[Token(Token = "0x400137A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static string[] LanguagesRTL;

		[Token(Token = "0x400137B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static List<LanguageSourceData> Sources;

		[Token(Token = "0x400137C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static string[] GlobalSources;

		[Token(Token = "0x400137D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private static string mCurrentDeviceLanguage;

		[Token(Token = "0x400137E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public static List<ILocalizeTargetDescriptor> mLocalizeTargets;

		[Token(Token = "0x4001380")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private static bool mLocalizeIsScheduled;

		[Token(Token = "0x4001381")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		private static bool mLocalizeIsScheduledWithForcedValue;

		[Token(Token = "0x4001382")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5A")]
		public static bool HighlightLocalizedTargets;

		[Token(Token = "0x170001A2")]
		public static string CurrentLanguage
		{
			[Token(Token = "0x6001272")]
			[Address(RVA = "0xA6C75C", Offset = "0xA6C75C", VA = "0xA6C75C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001273")]
			[Address(RVA = "0xA6CDA8", Offset = "0xA6CDA8", VA = "0xA6CDA8")]
			set
			{
			}
		}

		[Token(Token = "0x170001A3")]
		public static string CurrentLanguageCode
		{
			[Token(Token = "0x6001274")]
			[Address(RVA = "0xA70918", Offset = "0xA70918", VA = "0xA70918")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001275")]
			[Address(RVA = "0xA70980", Offset = "0xA70980", VA = "0xA70980")]
			set
			{
			}
		}

		[Token(Token = "0x170001A4")]
		public static string CurrentRegion
		{
			[Token(Token = "0x6001276")]
			[Address(RVA = "0xA70C94", Offset = "0xA70C94", VA = "0xA70C94")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001277")]
			[Address(RVA = "0xA70E14", Offset = "0xA70E14", VA = "0xA70E14")]
			set
			{
			}
		}

		[Token(Token = "0x170001A5")]
		public static string CurrentRegionCode
		{
			[Token(Token = "0x6001278")]
			[Address(RVA = "0xA70FE0", Offset = "0xA70FE0", VA = "0xA70FE0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001279")]
			[Address(RVA = "0xA710BC", Offset = "0xA710BC", VA = "0xA710BC")]
			set
			{
			}
		}

		[Token(Token = "0x170001A6")]
		public static CultureInfo CurrentCulture
		{
			[Token(Token = "0x600127A")]
			[Address(RVA = "0xA711D4", Offset = "0xA711D4", VA = "0xA711D4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x14000016")]
		public static event OnLocalizeCallback OnLocalizeEvent
		{
			[Token(Token = "0x60012A2")]
			[Address(RVA = "0xA74AB0", Offset = "0xA74AB0", VA = "0xA74AB0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D9B50", Offset = "0x5D9B50")]
			add
			{
			}
			[Token(Token = "0x60012A3")]
			[Address(RVA = "0xA74BA8", Offset = "0xA74BA8", VA = "0xA74BA8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D9B60", Offset = "0x5D9B60")]
			remove
			{
			}
		}

		[Token(Token = "0x600126E")]
		[Address(RVA = "0xA6F5DC", Offset = "0xA6F5DC", VA = "0xA6F5DC")]
		public static void InitializeIfNeeded()
		{
		}

		[Token(Token = "0x600126F")]
		[Address(RVA = "0xA6FDE4", Offset = "0xA6FDE4", VA = "0xA6FDE4")]
		public static string GetVersion()
		{
			return null;
		}

		[Token(Token = "0x6001270")]
		[Address(RVA = "0xA6FE28", Offset = "0xA6FE28", VA = "0xA6FE28")]
		public static int GetRequiredWebServiceVersion()
		{
			return default(int);
		}

		[Token(Token = "0x6001271")]
		[Address(RVA = "0xA6FE30", Offset = "0xA6FE30", VA = "0xA6FE30")]
		public static string GetWebServiceURL([Optional] LanguageSourceData source)
		{
			return null;
		}

		[Token(Token = "0x600127B")]
		[Address(RVA = "0xA706EC", Offset = "0xA706EC", VA = "0xA706EC")]
		public static void SetLanguageAndCode(string LanguageName, string LanguageCode, bool RememberLanguage = true, bool Force = false)
		{
		}

		[Token(Token = "0x600127C")]
		[Address(RVA = "0xA71238", Offset = "0xA71238", VA = "0xA71238")]
		private static CultureInfo CreateCultureForCode(string code)
		{
			return null;
		}

		[Token(Token = "0x600127D")]
		[Address(RVA = "0xA71570", Offset = "0xA71570", VA = "0xA71570")]
		public static void EnableChangingCultureInfo(bool bEnable)
		{
		}

		[Token(Token = "0x600127E")]
		[Address(RVA = "0xA71358", Offset = "0xA71358", VA = "0xA71358")]
		private static void SetCurrentCultureInfo()
		{
		}

		[Token(Token = "0x600127F")]
		[Address(RVA = "0xA6F90C", Offset = "0xA6F90C", VA = "0xA6F90C")]
		private static void SelectStartupLanguage()
		{
		}

		[Token(Token = "0x6001280")]
		[Address(RVA = "0xA716E8", Offset = "0xA716E8", VA = "0xA716E8")]
		public static bool HasLanguage(string Language, bool AllowDiscartingRegion = true, bool Initialize = true, bool SkipDisabled = true)
		{
			return default(bool);
		}

		[Token(Token = "0x6001281")]
		[Address(RVA = "0xA70018", Offset = "0xA70018", VA = "0xA70018")]
		public static string GetSupportedLanguage(string Language, bool ignoreDisabled = false)
		{
			return null;
		}

		[Token(Token = "0x6001282")]
		[Address(RVA = "0xA704D8", Offset = "0xA704D8", VA = "0xA704D8")]
		public static string GetLanguageCode(string Language)
		{
			return null;
		}

		[Token(Token = "0x6001283")]
		[Address(RVA = "0xA70A70", Offset = "0xA70A70", VA = "0xA70A70")]
		public static string GetLanguageFromCode(string Code, bool exactMatch = true)
		{
			return null;
		}

		[Token(Token = "0x6001284")]
		[Address(RVA = "0xA71910", Offset = "0xA71910", VA = "0xA71910")]
		public static List<string> GetAllLanguages(bool SkipDisabled = true)
		{
			return null;
		}

		[Token(Token = "0x6001285")]
		[Address(RVA = "0xA71BF4", Offset = "0xA71BF4", VA = "0xA71BF4")]
		public static List<string> GetAllLanguagesCode(bool allowRegions = true, bool SkipDisabled = true)
		{
			return null;
		}

		[Token(Token = "0x6001286")]
		[Address(RVA = "0xA71E8C", Offset = "0xA71E8C", VA = "0xA71E8C")]
		public static bool IsLanguageEnabled(string Language)
		{
			return default(bool);
		}

		[Token(Token = "0x6001287")]
		[Address(RVA = "0xA71FB0", Offset = "0xA71FB0", VA = "0xA71FB0")]
		private static void LoadCurrentLanguage()
		{
		}

		[Token(Token = "0x6001288")]
		[Address(RVA = "0xA72118", Offset = "0xA72118", VA = "0xA72118")]
		public static void PreviewLanguage(string NewLanguage)
		{
		}

		[Token(Token = "0x6001289")]
		[Address(RVA = "0xA6F6BC", Offset = "0xA6F6BC", VA = "0xA6F6BC")]
		public static void AutoLoadGlobalParamManagers()
		{
		}

		[Token(Token = "0x600128A")]
		[Address(RVA = "0xA72220", Offset = "0xA72220", VA = "0xA72220")]
		public static void ApplyLocalizationParams(ref string translation, bool allowLocalizedParameters = true)
		{
		}

		[Token(Token = "0x600128B")]
		[Address(RVA = "0xA727A4", Offset = "0xA727A4", VA = "0xA727A4")]
		public static void ApplyLocalizationParams(ref string translation, GameObject root, bool allowLocalizedParameters = true)
		{
		}

		[Token(Token = "0x600128C")]
		[Address(RVA = "0xA728A0", Offset = "0xA728A0", VA = "0xA728A0")]
		public static void ApplyLocalizationParams(ref string translation, Dictionary<string, object> parameters, bool allowLocalizedParameters = true)
		{
		}

		[Token(Token = "0x600128D")]
		[Address(RVA = "0xA72350", Offset = "0xA72350", VA = "0xA72350")]
		public static void ApplyLocalizationParams(ref string translation, _GetParam getParam, bool allowLocalizedParameters = true)
		{
		}

		[Token(Token = "0x600128E")]
		[Address(RVA = "0xA72B38", Offset = "0xA72B38", VA = "0xA72B38")]
		internal static string GetLocalizationParam(string ParamName, GameObject root)
		{
			return null;
		}

		[Token(Token = "0x600128F")]
		[Address(RVA = "0xA72E1C", Offset = "0xA72E1C", VA = "0xA72E1C")]
		private static string GetPluralType(MatchCollection matches, string langCode, _GetParam getParam)
		{
			return null;
		}

		[Token(Token = "0x6001290")]
		[Address(RVA = "0xA73000", Offset = "0xA73000", VA = "0xA73000")]
		public static string ApplyRTLfix(string line)
		{
			return null;
		}

		[Token(Token = "0x6001291")]
		[Address(RVA = "0xA73068", Offset = "0xA73068", VA = "0xA73068")]
		public static string ApplyRTLfix(string line, int maxCharacters, bool ignoreNumbers)
		{
			return null;
		}

		[Token(Token = "0x6001292")]
		[Address(RVA = "0xA734A8", Offset = "0xA734A8", VA = "0xA734A8")]
		public static string FixRTL_IfNeeded(string text, int maxCharacters = 0, bool ignoreNumber = false)
		{
			return null;
		}

		[Token(Token = "0x6001293")]
		[Address(RVA = "0xA713DC", Offset = "0xA713DC", VA = "0xA713DC")]
		public static bool IsRTL(string Code)
		{
			return default(bool);
		}

		[Token(Token = "0x6001294")]
		[Address(RVA = "0xA6F87C", Offset = "0xA6F87C", VA = "0xA6F87C")]
		public static bool UpdateSources()
		{
			return default(bool);
		}

		[Token(Token = "0x6001295")]
		[Address(RVA = "0xA73558", Offset = "0xA73558", VA = "0xA73558")]
		private static void UnregisterDeletededSources()
		{
		}

		[Token(Token = "0x6001296")]
		[Address(RVA = "0xA73884", Offset = "0xA73884", VA = "0xA73884")]
		private static void RegisterSceneSources()
		{
		}

		[Token(Token = "0x6001297")]
		[Address(RVA = "0xA736A8", Offset = "0xA736A8", VA = "0xA736A8")]
		private static void RegisterSourceInResources()
		{
		}

		[Token(Token = "0x6001298")]
		[Address(RVA = "0xA73AC8", Offset = "0xA73AC8", VA = "0xA73AC8")]
		internal static void AddSource(LanguageSourceData Source)
		{
		}

		[Token(Token = "0x6001299")]
		[Address(RVA = "0xA73D04", Offset = "0xA73D04", VA = "0xA73D04")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D9AF0", Offset = "0x5D9AF0")]
		private static IEnumerator Delayed_Import_Google(LanguageSourceData source, float delay, bool justCheck)
		{
			return null;
		}

		[Token(Token = "0x600129A")]
		[Address(RVA = "0xA73A3C", Offset = "0xA73A3C", VA = "0xA73A3C")]
		internal static void RemoveSource(LanguageSourceData Source)
		{
		}

		[Token(Token = "0x600129B")]
		[Address(RVA = "0xA73DA0", Offset = "0xA73DA0", VA = "0xA73DA0")]
		public static bool IsGlobalSource(string SourceName)
		{
			return default(bool);
		}

		[Token(Token = "0x600129C")]
		[Address(RVA = "0xA73E30", Offset = "0xA73E30", VA = "0xA73E30")]
		public static LanguageSourceData GetSourceContaining(string term, bool fallbackToFirst = true)
		{
			return null;
		}

		[Token(Token = "0x600129D")]
		[Address(RVA = "0xA74034", Offset = "0xA74034", VA = "0xA74034")]
		public static UnityEngine.Object FindAsset(string value)
		{
			return null;
		}

		[Token(Token = "0x600129E")]
		[Address(RVA = "0xA74198", Offset = "0xA74198", VA = "0xA74198")]
		public static void ApplyDownloadedDataFromGoogle()
		{
		}

		[Token(Token = "0x600129F")]
		[Address(RVA = "0xA71620", Offset = "0xA71620", VA = "0xA71620")]
		public static string GetCurrentDeviceLanguage(bool force = false)
		{
			return null;
		}

		[Token(Token = "0x60012A0")]
		[Address(RVA = "0xA7429C", Offset = "0xA7429C", VA = "0xA7429C")]
		private static void DetectDeviceLanguage()
		{
		}

		[Token(Token = "0x60012A1")]
		[Address(RVA = "0xA74804", Offset = "0xA74804", VA = "0xA74804")]
		public static void RegisterTarget(ILocalizeTargetDescriptor desc)
		{
		}

		[Token(Token = "0x60012A4")]
		[Address(RVA = "0xA68768", Offset = "0xA68768", VA = "0xA68768")]
		public static string GetTranslation(string Term, bool FixForRTL = true, int maxLineLengthForRTL = 0, bool ignoreRTLnumbers = true, bool applyParameters = false, [Optional] GameObject localParametersRoot, [Optional] string overrideLanguage)
		{
			return null;
		}

		[Token(Token = "0x60012A5")]
		[Address(RVA = "0xA74ED0", Offset = "0xA74ED0", VA = "0xA74ED0")]
		public static string GetTermTranslation(string Term, bool FixForRTL = true, int maxLineLengthForRTL = 0, bool ignoreRTLnumbers = true, bool applyParameters = false, [Optional] GameObject localParametersRoot, [Optional] string overrideLanguage)
		{
			return null;
		}

		[Token(Token = "0x60012A6")]
		[Address(RVA = "0xA74CA0", Offset = "0xA74CA0", VA = "0xA74CA0")]
		public static bool TryGetTranslation(string Term, out string Translation, bool FixForRTL = true, int maxLineLengthForRTL = 0, bool ignoreRTLnumbers = true, bool applyParameters = false, [Optional] GameObject localParametersRoot, [Optional] string overrideLanguage)
		{
			return default(bool);
		}

		[Token(Token = "0x60012A7")]
		public static T GetTranslatedObject<T>(string AssetName, [Optional] Localize optionalLocComp) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x60012A8")]
		public static T GetTranslatedObjectByTermName<T>(string Term, [Optional] Localize optionalLocComp) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x60012A9")]
		[Address(RVA = "0xA74F78", Offset = "0xA74F78", VA = "0xA74F78")]
		public static string GetAppName(string languageCode)
		{
			return null;
		}

		[Token(Token = "0x60012AA")]
		[Address(RVA = "0xA7146C", Offset = "0xA7146C", VA = "0xA7146C")]
		public static void LocalizeAll(bool Force = false)
		{
		}

		[Token(Token = "0x60012AB")]
		[Address(RVA = "0xA7537C", Offset = "0xA7537C", VA = "0xA7537C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D9B70", Offset = "0x5D9B70")]
		private static IEnumerator Coroutine_LocalizeAll()
		{
			return null;
		}

		[Token(Token = "0x60012AC")]
		[Address(RVA = "0xA751E4", Offset = "0xA751E4", VA = "0xA751E4")]
		private static void DoLocalizeAll(bool Force = false)
		{
		}

		[Token(Token = "0x60012AD")]
		[Address(RVA = "0xA75D40", Offset = "0xA75D40", VA = "0xA75D40")]
		public static List<string> GetCategories()
		{
			return null;
		}

		[Token(Token = "0x60012AE")]
		[Address(RVA = "0xA75E94", Offset = "0xA75E94", VA = "0xA75E94")]
		public static List<string> GetTermsList([Optional] string Category)
		{
			return null;
		}

		[Token(Token = "0x60012AF")]
		[Address(RVA = "0xA76134", Offset = "0xA76134", VA = "0xA76134")]
		public static TermData GetTermData(string term)
		{
			return null;
		}

		[Token(Token = "0x60012B0")]
		[Address(RVA = "0xA7299C", Offset = "0xA7299C", VA = "0xA7299C")]
		public static TermData GetTermData(string term, out LanguageSourceData source)
		{
			return null;
		}
	}
	[Token(Token = "0x20002B0")]
	public abstract class ILocalizeTarget : ScriptableObject
	{
		[Token(Token = "0x60012B2")]
		public abstract bool IsValid(Localize cmp);

		[Token(Token = "0x60012B3")]
		public abstract void GetFinalTerms(Localize cmp, string Main, string Secondary, out string primaryTerm, out string secondaryTerm);

		[Token(Token = "0x60012B4")]
		public abstract void DoLocalize(Localize cmp, string mainTranslation, string secondaryTranslation);

		[Token(Token = "0x60012B5")]
		public abstract bool CanUseSecondaryTerm();

		[Token(Token = "0x60012B6")]
		public abstract bool AllowMainTermToBeRTL();

		[Token(Token = "0x60012B7")]
		public abstract bool AllowSecondTermToBeRTL();

		[Token(Token = "0x60012B8")]
		public abstract eTermType GetPrimaryTermType(Localize cmp);

		[Token(Token = "0x60012B9")]
		public abstract eTermType GetSecondaryTermType(Localize cmp);

		[Token(Token = "0x60012BA")]
		[Address(RVA = "0xA51020", Offset = "0xA51020", VA = "0xA51020")]
		protected ILocalizeTarget()
		{
		}
	}
	[Token(Token = "0x20002B1")]
	public abstract class LocalizeTarget<T> : ILocalizeTarget where T : UnityEngine.Object
	{
		[Token(Token = "0x4001383")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T mTarget;

		[Token(Token = "0x60012BB")]
		public override bool IsValid(Localize cmp)
		{
			return default(bool);
		}

		[Token(Token = "0x60012BC")]
		protected LocalizeTarget()
		{
		}
	}
	[Token(Token = "0x20002B2")]
	public abstract class ILocalizeTargetDescriptor
	{
		[Token(Token = "0x4001384")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string Name;

		[Token(Token = "0x4001385")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int Priority;

		[Token(Token = "0x60012BD")]
		public abstract bool CanLocalize(Localize cmp);

		[Token(Token = "0x60012BE")]
		public abstract ILocalizeTarget CreateTarget(Localize cmp);

		[Token(Token = "0x60012BF")]
		public abstract Type GetTargetType();

		[Token(Token = "0x60012C0")]
		[Address(RVA = "0xA51028", Offset = "0xA51028", VA = "0xA51028")]
		protected ILocalizeTargetDescriptor()
		{
		}
	}
	[Token(Token = "0x20002B3")]
	public abstract class LocalizeTargetDesc<T> : ILocalizeTargetDescriptor where T : ILocalizeTarget
	{
		[Token(Token = "0x60012C1")]
		public override ILocalizeTarget CreateTarget(Localize cmp)
		{
			return null;
		}

		[Token(Token = "0x60012C2")]
		public override Type GetTargetType()
		{
			return null;
		}

		[Token(Token = "0x60012C3")]
		protected LocalizeTargetDesc()
		{
		}
	}
	[Token(Token = "0x20002B4")]
	public class LocalizeTargetDesc_Type<T, G> : LocalizeTargetDesc<G> where T : UnityEngine.Object where G : LocalizeTarget<T>
	{
		[Token(Token = "0x60012C4")]
		public override bool CanLocalize(Localize cmp)
		{
			return default(bool);
		}

		[Token(Token = "0x60012C5")]
		public override ILocalizeTarget CreateTarget(Localize cmp)
		{
			return null;
		}

		[Token(Token = "0x60012C6")]
		public LocalizeTargetDesc_Type()
		{
		}
	}
	[Token(Token = "0x20002B5")]
	public class LocalizeTarget_TextMeshPro_Label : LocalizeTarget<TextMeshPro>
	{
		[Token(Token = "0x4001386")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private TextAlignmentOptions mAlignment_RTL;

		[Token(Token = "0x4001387")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private TextAlignmentOptions mAlignment_LTR;

		[Token(Token = "0x4001388")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool mAlignmentWasRTL;

		[Token(Token = "0x4001389")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		private bool mInitializeAlignment;

		[Token(Token = "0x60012C7")]
		[Address(RVA = "0xA7A030", Offset = "0xA7A030", VA = "0xA7A030")]
		static LocalizeTarget_TextMeshPro_Label()
		{
		}

		[Token(Token = "0x60012C8")]
		[Address(RVA = "0xA7A034", Offset = "0xA7A034", VA = "0xA7A034")]
		[AttributeAttribute(Name = "RuntimeInitializeOnLoadMethodAttribute", RVA = "0x5D9BD0", Offset = "0x5D9BD0")]
		private static void AutoRegister()
		{
		}

		[Token(Token = "0x60012C9")]
		[Address(RVA = "0xA7A104", Offset = "0xA7A104", VA = "0xA7A104", Slot = "10")]
		public override eTermType GetPrimaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x60012CA")]
		[Address(RVA = "0xA7A10C", Offset = "0xA7A10C", VA = "0xA7A10C", Slot = "11")]
		public override eTermType GetSecondaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x60012CB")]
		[Address(RVA = "0xA7A114", Offset = "0xA7A114", VA = "0xA7A114", Slot = "7")]
		public override bool CanUseSecondaryTerm()
		{
			return default(bool);
		}

		[Token(Token = "0x60012CC")]
		[Address(RVA = "0xA7A11C", Offset = "0xA7A11C", VA = "0xA7A11C", Slot = "8")]
		public override bool AllowMainTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x60012CD")]
		[Address(RVA = "0xA7A124", Offset = "0xA7A124", VA = "0xA7A124", Slot = "9")]
		public override bool AllowSecondTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x60012CE")]
		[Address(RVA = "0xA7A12C", Offset = "0xA7A12C", VA = "0xA7A12C", Slot = "5")]
		public override void GetFinalTerms(Localize cmp, string Main, string Secondary, out string primaryTerm, out string secondaryTerm)
		{
		}

		[Token(Token = "0x60012CF")]
		[Address(RVA = "0xA7A264", Offset = "0xA7A264", VA = "0xA7A264", Slot = "6")]
		public override void DoLocalize(Localize cmp, string mainTranslation, string secondaryTranslation)
		{
		}

		[Token(Token = "0x60012D0")]
		[Address(RVA = "0xA7A8D0", Offset = "0xA7A8D0", VA = "0xA7A8D0")]
		internal static TMP_FontAsset GetTMPFontFromMaterial(Localize cmp, string matName)
		{
			return null;
		}

		[Token(Token = "0x60012D1")]
		[Address(RVA = "0xA7AB70", Offset = "0xA7AB70", VA = "0xA7AB70")]
		internal static void InitAlignment_TMPro(bool isRTL, TextAlignmentOptions alignment, out TextAlignmentOptions alignLTR, out TextAlignmentOptions alignRTL)
		{
		}

		[Token(Token = "0x60012D2")]
		[Address(RVA = "0xA7A7CC", Offset = "0xA7A7CC", VA = "0xA7A7CC")]
		internal static void SetFont(TMP_Text label, TMP_FontAsset newFont)
		{
		}

		[Token(Token = "0x60012D3")]
		[Address(RVA = "0xA7AA4C", Offset = "0xA7AA4C", VA = "0xA7AA4C")]
		internal static void SetMaterial(TMP_Text label, Material newMat)
		{
		}

		[Token(Token = "0x60012D4")]
		[Address(RVA = "0xA7AD84", Offset = "0xA7AD84", VA = "0xA7AD84")]
		public LocalizeTarget_TextMeshPro_Label()
		{
		}
	}
	[Token(Token = "0x20002B6")]
	public class LocalizeTarget_TextMeshPro_UGUI : LocalizeTarget<TextMeshProUGUI>
	{
		[Token(Token = "0x400138A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TextAlignmentOptions mAlignment_RTL;

		[Token(Token = "0x400138B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public TextAlignmentOptions mAlignment_LTR;

		[Token(Token = "0x400138C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool mAlignmentWasRTL;

		[Token(Token = "0x400138D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool mInitializeAlignment;

		[Token(Token = "0x60012D5")]
		[Address(RVA = "0xA7ADE4", Offset = "0xA7ADE4", VA = "0xA7ADE4")]
		static LocalizeTarget_TextMeshPro_UGUI()
		{
		}

		[Token(Token = "0x60012D6")]
		[Address(RVA = "0xA7ADE8", Offset = "0xA7ADE8", VA = "0xA7ADE8")]
		[AttributeAttribute(Name = "RuntimeInitializeOnLoadMethodAttribute", RVA = "0x5D9BE4", Offset = "0x5D9BE4")]
		private static void AutoRegister()
		{
		}

		[Token(Token = "0x60012D7")]
		[Address(RVA = "0xA7AEB8", Offset = "0xA7AEB8", VA = "0xA7AEB8", Slot = "10")]
		public override eTermType GetPrimaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x60012D8")]
		[Address(RVA = "0xA7AEC0", Offset = "0xA7AEC0", VA = "0xA7AEC0", Slot = "11")]
		public override eTermType GetSecondaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x60012D9")]
		[Address(RVA = "0xA7AEC8", Offset = "0xA7AEC8", VA = "0xA7AEC8", Slot = "7")]
		public override bool CanUseSecondaryTerm()
		{
			return default(bool);
		}

		[Token(Token = "0x60012DA")]
		[Address(RVA = "0xA7AED0", Offset = "0xA7AED0", VA = "0xA7AED0", Slot = "8")]
		public override bool AllowMainTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x60012DB")]
		[Address(RVA = "0xA7AED8", Offset = "0xA7AED8", VA = "0xA7AED8", Slot = "9")]
		public override bool AllowSecondTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x60012DC")]
		[Address(RVA = "0xA7AEE0", Offset = "0xA7AEE0", VA = "0xA7AEE0", Slot = "5")]
		public override void GetFinalTerms(Localize cmp, string Main, string Secondary, out string primaryTerm, out string secondaryTerm)
		{
		}

		[Token(Token = "0x60012DD")]
		[Address(RVA = "0xA7B018", Offset = "0xA7B018", VA = "0xA7B018", Slot = "6")]
		public override void DoLocalize(Localize cmp, string mainTranslation, string secondaryTranslation)
		{
		}

		[Token(Token = "0x60012DE")]
		[Address(RVA = "0xA7B580", Offset = "0xA7B580", VA = "0xA7B580")]
		public LocalizeTarget_TextMeshPro_UGUI()
		{
		}
	}
	[Token(Token = "0x20002B7")]
	public class LocalizeTarget_UnityStandard_AudioSource : LocalizeTarget<AudioSource>
	{
		[Token(Token = "0x60012DF")]
		[Address(RVA = "0xA7B5E0", Offset = "0xA7B5E0", VA = "0xA7B5E0")]
		static LocalizeTarget_UnityStandard_AudioSource()
		{
		}

		[Token(Token = "0x60012E0")]
		[Address(RVA = "0xA7B5E4", Offset = "0xA7B5E4", VA = "0xA7B5E4")]
		[AttributeAttribute(Name = "RuntimeInitializeOnLoadMethodAttribute", RVA = "0x5D9BF8", Offset = "0x5D9BF8")]
		private static void AutoRegister()
		{
		}

		[Token(Token = "0x60012E1")]
		[Address(RVA = "0xA7B6B4", Offset = "0xA7B6B4", VA = "0xA7B6B4", Slot = "10")]
		public override eTermType GetPrimaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x60012E2")]
		[Address(RVA = "0xA7B6BC", Offset = "0xA7B6BC", VA = "0xA7B6BC", Slot = "11")]
		public override eTermType GetSecondaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x60012E3")]
		[Address(RVA = "0xA7B6C4", Offset = "0xA7B6C4", VA = "0xA7B6C4", Slot = "7")]
		public override bool CanUseSecondaryTerm()
		{
			return default(bool);
		}

		[Token(Token = "0x60012E4")]
		[Address(RVA = "0xA7B6CC", Offset = "0xA7B6CC", VA = "0xA7B6CC", Slot = "8")]
		public override bool AllowMainTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x60012E5")]
		[Address(RVA = "0xA7B6D4", Offset = "0xA7B6D4", VA = "0xA7B6D4", Slot = "9")]
		public override bool AllowSecondTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x60012E6")]
		[Address(RVA = "0xA7B6DC", Offset = "0xA7B6DC", VA = "0xA7B6DC", Slot = "5")]
		public override void GetFinalTerms(Localize cmp, string Main, string Secondary, out string primaryTerm, out string secondaryTerm)
		{
		}

		[Token(Token = "0x60012E7")]
		[Address(RVA = "0xA7B7D0", Offset = "0xA7B7D0", VA = "0xA7B7D0", Slot = "6")]
		public override void DoLocalize(Localize cmp, string mainTranslation, string secondaryTranslation)
		{
		}

		[Token(Token = "0x60012E8")]
		[Address(RVA = "0xA7B954", Offset = "0xA7B954", VA = "0xA7B954")]
		public LocalizeTarget_UnityStandard_AudioSource()
		{
		}
	}
	[Token(Token = "0x20002B8")]
	public class LocalizeTargetDesc_Child : LocalizeTargetDesc<LocalizeTarget_UnityStandard_Child>
	{
		[Token(Token = "0x60012E9")]
		[Address(RVA = "0xA79F58", Offset = "0xA79F58", VA = "0xA79F58", Slot = "4")]
		public override bool CanLocalize(Localize cmp)
		{
			return default(bool);
		}

		[Token(Token = "0x60012EA")]
		[Address(RVA = "0xA79F90", Offset = "0xA79F90", VA = "0xA79F90")]
		public LocalizeTargetDesc_Child()
		{
		}
	}
	[Token(Token = "0x20002B9")]
	public class LocalizeTarget_UnityStandard_Child : LocalizeTarget<GameObject>
	{
		[Token(Token = "0x60012EB")]
		[Address(RVA = "0xA7B9A0", Offset = "0xA7B9A0", VA = "0xA7B9A0")]
		static LocalizeTarget_UnityStandard_Child()
		{
		}

		[Token(Token = "0x60012EC")]
		[Address(RVA = "0xA7B9A4", Offset = "0xA7B9A4", VA = "0xA7B9A4")]
		[AttributeAttribute(Name = "RuntimeInitializeOnLoadMethodAttribute", RVA = "0x5D9C0C", Offset = "0x5D9C0C")]
		private static void AutoRegister()
		{
		}

		[Token(Token = "0x60012ED")]
		[Address(RVA = "0xA7BA5C", Offset = "0xA7BA5C", VA = "0xA7BA5C", Slot = "4")]
		public override bool IsValid(Localize cmp)
		{
			return default(bool);
		}

		[Token(Token = "0x60012EE")]
		[Address(RVA = "0xA7BA94", Offset = "0xA7BA94", VA = "0xA7BA94", Slot = "10")]
		public override eTermType GetPrimaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x60012EF")]
		[Address(RVA = "0xA7BA9C", Offset = "0xA7BA9C", VA = "0xA7BA9C", Slot = "11")]
		public override eTermType GetSecondaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x60012F0")]
		[Address(RVA = "0xA7BAA4", Offset = "0xA7BAA4", VA = "0xA7BAA4", Slot = "7")]
		public override bool CanUseSecondaryTerm()
		{
			return default(bool);
		}

		[Token(Token = "0x60012F1")]
		[Address(RVA = "0xA7BAAC", Offset = "0xA7BAAC", VA = "0xA7BAAC", Slot = "8")]
		public override bool AllowMainTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x60012F2")]
		[Address(RVA = "0xA7BAB4", Offset = "0xA7BAB4", VA = "0xA7BAB4", Slot = "9")]
		public override bool AllowSecondTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x60012F3")]
		[Address(RVA = "0xA7BABC", Offset = "0xA7BABC", VA = "0xA7BABC", Slot = "5")]
		public override void GetFinalTerms(Localize cmp, string Main, string Secondary, out string primaryTerm, out string secondaryTerm)
		{
		}

		[Token(Token = "0x60012F4")]
		[Address(RVA = "0xA7BB0C", Offset = "0xA7BB0C", VA = "0xA7BB0C", Slot = "6")]
		public override void DoLocalize(Localize cmp, string mainTranslation, string secondaryTranslation)
		{
		}

		[Token(Token = "0x60012F5")]
		[Address(RVA = "0xA7BC60", Offset = "0xA7BC60", VA = "0xA7BC60")]
		public LocalizeTarget_UnityStandard_Child()
		{
		}
	}
	[Token(Token = "0x20002BA")]
	public class LocalizeTarget_UnityStandard_MeshRenderer : LocalizeTarget<MeshRenderer>
	{
		[Token(Token = "0x60012F6")]
		[Address(RVA = "0xA7BCAC", Offset = "0xA7BCAC", VA = "0xA7BCAC")]
		static LocalizeTarget_UnityStandard_MeshRenderer()
		{
		}

		[Token(Token = "0x60012F7")]
		[Address(RVA = "0xA7BCB0", Offset = "0xA7BCB0", VA = "0xA7BCB0")]
		[AttributeAttribute(Name = "RuntimeInitializeOnLoadMethodAttribute", RVA = "0x5D9C20", Offset = "0x5D9C20")]
		private static void AutoRegister()
		{
		}

		[Token(Token = "0x60012F8")]
		[Address(RVA = "0xA7BD80", Offset = "0xA7BD80", VA = "0xA7BD80", Slot = "10")]
		public override eTermType GetPrimaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x60012F9")]
		[Address(RVA = "0xA7BD88", Offset = "0xA7BD88", VA = "0xA7BD88", Slot = "11")]
		public override eTermType GetSecondaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x60012FA")]
		[Address(RVA = "0xA7BD90", Offset = "0xA7BD90", VA = "0xA7BD90", Slot = "7")]
		public override bool CanUseSecondaryTerm()
		{
			return default(bool);
		}

		[Token(Token = "0x60012FB")]
		[Address(RVA = "0xA7BD98", Offset = "0xA7BD98", VA = "0xA7BD98", Slot = "8")]
		public override bool AllowMainTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x60012FC")]
		[Address(RVA = "0xA7BDA0", Offset = "0xA7BDA0", VA = "0xA7BDA0", Slot = "9")]
		public override bool AllowSecondTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x60012FD")]
		[Address(RVA = "0xA7BDA8", Offset = "0xA7BDA8", VA = "0xA7BDA8", Slot = "5")]
		public override void GetFinalTerms(Localize cmp, string Main, string Secondary, out string primaryTerm, out string secondaryTerm)
		{
		}

		[Token(Token = "0x60012FE")]
		[Address(RVA = "0xA7BFCC", Offset = "0xA7BFCC", VA = "0xA7BFCC", Slot = "6")]
		public override void DoLocalize(Localize cmp, string mainTranslation, string secondaryTranslation)
		{
		}

		[Token(Token = "0x60012FF")]
		[Address(RVA = "0xA7C1C4", Offset = "0xA7C1C4", VA = "0xA7C1C4")]
		public LocalizeTarget_UnityStandard_MeshRenderer()
		{
		}
	}
	[Token(Token = "0x20002BB")]
	public class LocalizeTargetDesc_Prefab : LocalizeTargetDesc<LocalizeTarget_UnityStandard_Prefab>
	{
		[Token(Token = "0x6001300")]
		[Address(RVA = "0xA79FDC", Offset = "0xA79FDC", VA = "0xA79FDC", Slot = "4")]
		public override bool CanLocalize(Localize cmp)
		{
			return default(bool);
		}

		[Token(Token = "0x6001301")]
		[Address(RVA = "0xA79FE4", Offset = "0xA79FE4", VA = "0xA79FE4")]
		public LocalizeTargetDesc_Prefab()
		{
		}
	}
	[Token(Token = "0x20002BC")]
	public class LocalizeTarget_UnityStandard_Prefab : LocalizeTarget<GameObject>
	{
		[Token(Token = "0x6001302")]
		[Address(RVA = "0xF8B8D0", Offset = "0xF8B8D0", VA = "0xF8B8D0")]
		static LocalizeTarget_UnityStandard_Prefab()
		{
		}

		[Token(Token = "0x6001303")]
		[Address(RVA = "0xF8B8D4", Offset = "0xF8B8D4", VA = "0xF8B8D4")]
		[AttributeAttribute(Name = "RuntimeInitializeOnLoadMethodAttribute", RVA = "0x5D9C34", Offset = "0x5D9C34")]
		private static void AutoRegister()
		{
		}

		[Token(Token = "0x6001304")]
		[Address(RVA = "0xF8B994", Offset = "0xF8B994", VA = "0xF8B994", Slot = "4")]
		public override bool IsValid(Localize cmp)
		{
			return default(bool);
		}

		[Token(Token = "0x6001305")]
		[Address(RVA = "0xF8B99C", Offset = "0xF8B99C", VA = "0xF8B99C", Slot = "10")]
		public override eTermType GetPrimaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x6001306")]
		[Address(RVA = "0xF8B9A4", Offset = "0xF8B9A4", VA = "0xF8B9A4", Slot = "11")]
		public override eTermType GetSecondaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x6001307")]
		[Address(RVA = "0xF8B9AC", Offset = "0xF8B9AC", VA = "0xF8B9AC", Slot = "7")]
		public override bool CanUseSecondaryTerm()
		{
			return default(bool);
		}

		[Token(Token = "0x6001308")]
		[Address(RVA = "0xF8B9B4", Offset = "0xF8B9B4", VA = "0xF8B9B4", Slot = "8")]
		public override bool AllowMainTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x6001309")]
		[Address(RVA = "0xF8B9BC", Offset = "0xF8B9BC", VA = "0xF8B9BC", Slot = "9")]
		public override bool AllowSecondTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x600130A")]
		[Address(RVA = "0xF8B9C4", Offset = "0xF8B9C4", VA = "0xF8B9C4", Slot = "5")]
		public override void GetFinalTerms(Localize cmp, string Main, string Secondary, out string primaryTerm, out string secondaryTerm)
		{
		}

		[Token(Token = "0x600130B")]
		[Address(RVA = "0xF8BA14", Offset = "0xF8BA14", VA = "0xF8BA14", Slot = "6")]
		public override void DoLocalize(Localize cmp, string mainTranslation, string secondaryTranslation)
		{
		}

		[Token(Token = "0x600130C")]
		[Address(RVA = "0xF8BC44", Offset = "0xF8BC44", VA = "0xF8BC44")]
		private Transform InstantiateNewPrefab(Localize cmp, string mainTranslation)
		{
			return null;
		}

		[Token(Token = "0x600130D")]
		[Address(RVA = "0xF8BE14", Offset = "0xF8BE14", VA = "0xF8BE14")]
		public LocalizeTarget_UnityStandard_Prefab()
		{
		}
	}
	[Token(Token = "0x20002BD")]
	public class LocalizeTarget_UnityStandard_SpriteRenderer : LocalizeTarget<SpriteRenderer>
	{
		[Token(Token = "0x600130E")]
		[Address(RVA = "0xF8BE60", Offset = "0xF8BE60", VA = "0xF8BE60")]
		static LocalizeTarget_UnityStandard_SpriteRenderer()
		{
		}

		[Token(Token = "0x600130F")]
		[Address(RVA = "0xF8BE64", Offset = "0xF8BE64", VA = "0xF8BE64")]
		[AttributeAttribute(Name = "RuntimeInitializeOnLoadMethodAttribute", RVA = "0x5D9C48", Offset = "0x5D9C48")]
		private static void AutoRegister()
		{
		}

		[Token(Token = "0x6001310")]
		[Address(RVA = "0xF8BF38", Offset = "0xF8BF38", VA = "0xF8BF38", Slot = "10")]
		public override eTermType GetPrimaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x6001311")]
		[Address(RVA = "0xF8BF40", Offset = "0xF8BF40", VA = "0xF8BF40", Slot = "11")]
		public override eTermType GetSecondaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x6001312")]
		[Address(RVA = "0xF8BF48", Offset = "0xF8BF48", VA = "0xF8BF48", Slot = "7")]
		public override bool CanUseSecondaryTerm()
		{
			return default(bool);
		}

		[Token(Token = "0x6001313")]
		[Address(RVA = "0xF8BF50", Offset = "0xF8BF50", VA = "0xF8BF50", Slot = "8")]
		public override bool AllowMainTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x6001314")]
		[Address(RVA = "0xF8BF58", Offset = "0xF8BF58", VA = "0xF8BF58", Slot = "9")]
		public override bool AllowSecondTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x6001315")]
		[Address(RVA = "0xF8BF60", Offset = "0xF8BF60", VA = "0xF8BF60", Slot = "5")]
		public override void GetFinalTerms(Localize cmp, string Main, string Secondary, out string primaryTerm, out string secondaryTerm)
		{
		}

		[Token(Token = "0x6001316")]
		[Address(RVA = "0xF8C058", Offset = "0xF8C058", VA = "0xF8C058", Slot = "6")]
		public override void DoLocalize(Localize cmp, string mainTranslation, string secondaryTranslation)
		{
		}

		[Token(Token = "0x6001317")]
		[Address(RVA = "0xF8C160", Offset = "0xF8C160", VA = "0xF8C160")]
		public LocalizeTarget_UnityStandard_SpriteRenderer()
		{
		}
	}
	[Token(Token = "0x20002BE")]
	public class LocalizeTarget_UnityStandard_TextMesh : LocalizeTarget<TextMesh>
	{
		[Token(Token = "0x400138E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private TextAlignment mAlignment_RTL;

		[Token(Token = "0x400138F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private TextAlignment mAlignment_LTR;

		[Token(Token = "0x4001390")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool mAlignmentWasRTL;

		[Token(Token = "0x4001391")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		private bool mInitializeAlignment;

		[Token(Token = "0x6001318")]
		[Address(RVA = "0xF8C1AC", Offset = "0xF8C1AC", VA = "0xF8C1AC")]
		static LocalizeTarget_UnityStandard_TextMesh()
		{
		}

		[Token(Token = "0x6001319")]
		[Address(RVA = "0xF8C1B0", Offset = "0xF8C1B0", VA = "0xF8C1B0")]
		[AttributeAttribute(Name = "RuntimeInitializeOnLoadMethodAttribute", RVA = "0x5D9C5C", Offset = "0x5D9C5C")]
		private static void AutoRegister()
		{
		}

		[Token(Token = "0x600131A")]
		[Address(RVA = "0xF8C284", Offset = "0xF8C284", VA = "0xF8C284", Slot = "10")]
		public override eTermType GetPrimaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x600131B")]
		[Address(RVA = "0xF8C28C", Offset = "0xF8C28C", VA = "0xF8C28C", Slot = "11")]
		public override eTermType GetSecondaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x600131C")]
		[Address(RVA = "0xF8C294", Offset = "0xF8C294", VA = "0xF8C294", Slot = "7")]
		public override bool CanUseSecondaryTerm()
		{
			return default(bool);
		}

		[Token(Token = "0x600131D")]
		[Address(RVA = "0xF8C29C", Offset = "0xF8C29C", VA = "0xF8C29C", Slot = "8")]
		public override bool AllowMainTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x600131E")]
		[Address(RVA = "0xF8C2A4", Offset = "0xF8C2A4", VA = "0xF8C2A4", Slot = "9")]
		public override bool AllowSecondTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x600131F")]
		[Address(RVA = "0xF8C2AC", Offset = "0xF8C2AC", VA = "0xF8C2AC", Slot = "5")]
		public override void GetFinalTerms(Localize cmp, string Main, string Secondary, out string primaryTerm, out string secondaryTerm)
		{
		}

		[Token(Token = "0x6001320")]
		[Address(RVA = "0xF8C3E4", Offset = "0xF8C3E4", VA = "0xF8C3E4", Slot = "6")]
		public override void DoLocalize(Localize cmp, string mainTranslation, string secondaryTranslation)
		{
		}

		[Token(Token = "0x6001321")]
		[Address(RVA = "0xF8C674", Offset = "0xF8C674", VA = "0xF8C674")]
		public LocalizeTarget_UnityStandard_TextMesh()
		{
		}
	}
	[Token(Token = "0x20002BF")]
	public class LocalizeTarget_UnityUI_Image : LocalizeTarget<Image>
	{
		[Token(Token = "0x6001322")]
		[Address(RVA = "0xF8C6D0", Offset = "0xF8C6D0", VA = "0xF8C6D0")]
		static LocalizeTarget_UnityUI_Image()
		{
		}

		[Token(Token = "0x6001323")]
		[Address(RVA = "0xF8C6D4", Offset = "0xF8C6D4", VA = "0xF8C6D4")]
		[AttributeAttribute(Name = "RuntimeInitializeOnLoadMethodAttribute", RVA = "0x5D9C70", Offset = "0x5D9C70")]
		private static void AutoRegister()
		{
		}

		[Token(Token = "0x6001324")]
		[Address(RVA = "0xF8C7A8", Offset = "0xF8C7A8", VA = "0xF8C7A8", Slot = "7")]
		public override bool CanUseSecondaryTerm()
		{
			return default(bool);
		}

		[Token(Token = "0x6001325")]
		[Address(RVA = "0xF8C7B0", Offset = "0xF8C7B0", VA = "0xF8C7B0", Slot = "8")]
		public override bool AllowMainTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x6001326")]
		[Address(RVA = "0xF8C7B8", Offset = "0xF8C7B8", VA = "0xF8C7B8", Slot = "9")]
		public override bool AllowSecondTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x6001327")]
		[Address(RVA = "0xF8C7C0", Offset = "0xF8C7C0", VA = "0xF8C7C0", Slot = "10")]
		public override eTermType GetPrimaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x6001328")]
		[Address(RVA = "0xF8C84C", Offset = "0xF8C84C", VA = "0xF8C84C", Slot = "11")]
		public override eTermType GetSecondaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x6001329")]
		[Address(RVA = "0xF8C854", Offset = "0xF8C854", VA = "0xF8C854", Slot = "5")]
		public override void GetFinalTerms(Localize cmp, string Main, string Secondary, out string primaryTerm, out string secondaryTerm)
		{
		}

		[Token(Token = "0x600132A")]
		[Address(RVA = "0xF8CA0C", Offset = "0xF8CA0C", VA = "0xF8CA0C", Slot = "6")]
		public override void DoLocalize(Localize cmp, string mainTranslation, string secondaryTranslation)
		{
		}

		[Token(Token = "0x600132B")]
		[Address(RVA = "0xF8CB08", Offset = "0xF8CB08", VA = "0xF8CB08")]
		public LocalizeTarget_UnityUI_Image()
		{
		}
	}
	[Token(Token = "0x20002C0")]
	public class LocalizeTarget_UnityUI_RawImage : LocalizeTarget<RawImage>
	{
		[Token(Token = "0x600132C")]
		[Address(RVA = "0xF8CB54", Offset = "0xF8CB54", VA = "0xF8CB54")]
		static LocalizeTarget_UnityUI_RawImage()
		{
		}

		[Token(Token = "0x600132D")]
		[Address(RVA = "0xF8CB58", Offset = "0xF8CB58", VA = "0xF8CB58")]
		[AttributeAttribute(Name = "RuntimeInitializeOnLoadMethodAttribute", RVA = "0x5D9C84", Offset = "0x5D9C84")]
		private static void AutoRegister()
		{
		}

		[Token(Token = "0x600132E")]
		[Address(RVA = "0xF8CC2C", Offset = "0xF8CC2C", VA = "0xF8CC2C", Slot = "10")]
		public override eTermType GetPrimaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x600132F")]
		[Address(RVA = "0xF8CC34", Offset = "0xF8CC34", VA = "0xF8CC34", Slot = "11")]
		public override eTermType GetSecondaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x6001330")]
		[Address(RVA = "0xF8CC3C", Offset = "0xF8CC3C", VA = "0xF8CC3C", Slot = "7")]
		public override bool CanUseSecondaryTerm()
		{
			return default(bool);
		}

		[Token(Token = "0x6001331")]
		[Address(RVA = "0xF8CC44", Offset = "0xF8CC44", VA = "0xF8CC44", Slot = "8")]
		public override bool AllowMainTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x6001332")]
		[Address(RVA = "0xF8CC4C", Offset = "0xF8CC4C", VA = "0xF8CC4C", Slot = "9")]
		public override bool AllowSecondTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x6001333")]
		[Address(RVA = "0xF8CC54", Offset = "0xF8CC54", VA = "0xF8CC54", Slot = "5")]
		public override void GetFinalTerms(Localize cmp, string Main, string Secondary, out string primaryTerm, out string secondaryTerm)
		{
		}

		[Token(Token = "0x6001334")]
		[Address(RVA = "0xF8CD50", Offset = "0xF8CD50", VA = "0xF8CD50", Slot = "6")]
		public override void DoLocalize(Localize cmp, string mainTranslation, string secondaryTranslation)
		{
		}

		[Token(Token = "0x6001335")]
		[Address(RVA = "0xF8CE4C", Offset = "0xF8CE4C", VA = "0xF8CE4C")]
		public LocalizeTarget_UnityUI_RawImage()
		{
		}
	}
	[Token(Token = "0x20002C1")]
	public class LocalizeTarget_UnityUI_Text : LocalizeTarget<Text>
	{
		[Token(Token = "0x4001392")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private TextAnchor mAlignment_RTL;

		[Token(Token = "0x4001393")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private TextAnchor mAlignment_LTR;

		[Token(Token = "0x4001394")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool mAlignmentWasRTL;

		[Token(Token = "0x4001395")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		private bool mInitializeAlignment;

		[Token(Token = "0x6001336")]
		[Address(RVA = "0xF8CE98", Offset = "0xF8CE98", VA = "0xF8CE98")]
		static LocalizeTarget_UnityUI_Text()
		{
		}

		[Token(Token = "0x6001337")]
		[Address(RVA = "0xF8CE9C", Offset = "0xF8CE9C", VA = "0xF8CE9C")]
		[AttributeAttribute(Name = "RuntimeInitializeOnLoadMethodAttribute", RVA = "0x5D9C98", Offset = "0x5D9C98")]
		private static void AutoRegister()
		{
		}

		[Token(Token = "0x6001338")]
		[Address(RVA = "0xF8CF70", Offset = "0xF8CF70", VA = "0xF8CF70", Slot = "10")]
		public override eTermType GetPrimaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x6001339")]
		[Address(RVA = "0xF8CF78", Offset = "0xF8CF78", VA = "0xF8CF78", Slot = "11")]
		public override eTermType GetSecondaryTermType(Localize cmp)
		{
			return default(eTermType);
		}

		[Token(Token = "0x600133A")]
		[Address(RVA = "0xF8CF80", Offset = "0xF8CF80", VA = "0xF8CF80", Slot = "7")]
		public override bool CanUseSecondaryTerm()
		{
			return default(bool);
		}

		[Token(Token = "0x600133B")]
		[Address(RVA = "0xF8CF88", Offset = "0xF8CF88", VA = "0xF8CF88", Slot = "8")]
		public override bool AllowMainTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x600133C")]
		[Address(RVA = "0xF8CF90", Offset = "0xF8CF90", VA = "0xF8CF90", Slot = "9")]
		public override bool AllowSecondTermToBeRTL()
		{
			return default(bool);
		}

		[Token(Token = "0x600133D")]
		[Address(RVA = "0xF8CF98", Offset = "0xF8CF98", VA = "0xF8CF98", Slot = "5")]
		public override void GetFinalTerms(Localize cmp, string Main, string Secondary, out string primaryTerm, out string secondaryTerm)
		{
		}

		[Token(Token = "0x600133E")]
		[Address(RVA = "0xF8D0E0", Offset = "0xF8D0E0", VA = "0xF8D0E0", Slot = "6")]
		public override void DoLocalize(Localize cmp, string mainTranslation, string secondaryTranslation)
		{
		}

		[Token(Token = "0x600133F")]
		[Address(RVA = "0xF8D3D8", Offset = "0xF8D3D8", VA = "0xF8D3D8")]
		private void InitAlignment(bool isRTL, TextAnchor alignment, out TextAnchor alignLTR, out TextAnchor alignRTL)
		{
		}

		[Token(Token = "0x6001340")]
		[Address(RVA = "0xF8D498", Offset = "0xF8D498", VA = "0xF8D498")]
		public LocalizeTarget_UnityUI_Text()
		{
		}
	}
	[Token(Token = "0x20002C2")]
	public enum eTermType
	{
		[Token(Token = "0x4001397")]
		Text,
		[Token(Token = "0x4001398")]
		Font,
		[Token(Token = "0x4001399")]
		Texture,
		[Token(Token = "0x400139A")]
		AudioClip,
		[Token(Token = "0x400139B")]
		GameObject,
		[Token(Token = "0x400139C")]
		Sprite,
		[Token(Token = "0x400139D")]
		Material,
		[Token(Token = "0x400139E")]
		Child,
		[Token(Token = "0x400139F")]
		Mesh,
		[Token(Token = "0x40013A0")]
		TextMeshPFont,
		[Token(Token = "0x40013A1")]
		Object
	}
	[Token(Token = "0x20002C3")]
	public enum TranslationFlag : byte
	{
		[Token(Token = "0x40013A3")]
		Normal = 1,
		[Token(Token = "0x40013A4")]
		AutoTranslated
	}
	[Serializable]
	[Token(Token = "0x20002C4")]
	public class TermData
	{
		[Token(Token = "0x40013A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string Term;

		[Token(Token = "0x40013A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public eTermType TermType;

		[NonSerialized]
		[Token(Token = "0x40013A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string Description;

		[Token(Token = "0x40013A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string[] Languages;

		[Token(Token = "0x40013A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public byte[] Flags;

		[Token(Token = "0x40013AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private string[] Languages_Touch;

		[Token(Token = "0x6001341")]
		[Address(RVA = "0xE8A7E8", Offset = "0xE8A7E8", VA = "0xE8A7E8")]
		public string GetTranslation(int idx, [Optional] string specialization, bool editMode = false)
		{
			return null;
		}

		[Token(Token = "0x6001342")]
		[Address(RVA = "0xE8A91C", Offset = "0xE8A91C", VA = "0xE8A91C")]
		public void SetTranslation(int idx, string translation, [Optional] string specialization)
		{
		}

		[Token(Token = "0x6001343")]
		[Address(RVA = "0xE8AA14", Offset = "0xE8AA14", VA = "0xE8AA14")]
		public void RemoveSpecialization(string specialization)
		{
		}

		[Token(Token = "0x6001344")]
		[Address(RVA = "0xE8AA74", Offset = "0xE8AA74", VA = "0xE8AA74")]
		public void RemoveSpecialization(int idx, string specialization)
		{
		}

		[Token(Token = "0x6001345")]
		[Address(RVA = "0xE8AC34", Offset = "0xE8AC34", VA = "0xE8AC34")]
		public bool IsAutoTranslated(int idx, bool IsTouch)
		{
			return default(bool);
		}

		[Token(Token = "0x6001346")]
		[Address(RVA = "0xE8AC74", Offset = "0xE8AC74", VA = "0xE8AC74")]
		public void Validate()
		{
		}

		[Token(Token = "0x6001347")]
		[Address(RVA = "0xE8AE88", Offset = "0xE8AE88", VA = "0xE8AE88")]
		public bool IsTerm(string name, bool allowCategoryMistmatch)
		{
			return default(bool);
		}

		[Token(Token = "0x6001348")]
		[Address(RVA = "0xE8AF1C", Offset = "0xE8AF1C", VA = "0xE8AF1C")]
		public bool HasSpecializations()
		{
			return default(bool);
		}

		[Token(Token = "0x6001349")]
		[Address(RVA = "0xE8AFF0", Offset = "0xE8AFF0", VA = "0xE8AFF0")]
		public List<string> GetAllSpecializations()
		{
			return null;
		}

		[Token(Token = "0x600134A")]
		[Address(RVA = "0xE8B0F0", Offset = "0xE8B0F0", VA = "0xE8B0F0")]
		public TermData()
		{
		}
	}
	[Token(Token = "0x20002C5")]
	public class TermsPopup : PropertyAttribute
	{
		[Token(Token = "0x40013AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D2A70", Offset = "0x5D2A70")]
		private string <Filter>k__BackingField;

		[Token(Token = "0x170001A7")]
		public string Filter
		{
			[Token(Token = "0x600134C")]
			[Address(RVA = "0xE8D5C8", Offset = "0xE8D5C8", VA = "0xE8D5C8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D9CAC", Offset = "0x5D9CAC")]
			get
			{
				return null;
			}
			[Token(Token = "0x600134D")]
			[Address(RVA = "0xE8D5D0", Offset = "0xE8D5D0", VA = "0xE8D5D0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D9CBC", Offset = "0x5D9CBC")]
			private set
			{
			}
		}

		[Token(Token = "0x600134B")]
		[Address(RVA = "0xE8D594", Offset = "0xE8D594", VA = "0xE8D594")]
		public TermsPopup(string filter = "")
		{
		}
	}
	[Token(Token = "0x20002C6")]
	public class AutoChangeCultureInfo : MonoBehaviour
	{
		[Token(Token = "0x600134E")]
		[Address(RVA = "0xC12540", Offset = "0xC12540", VA = "0xC12540")]
		public void Start()
		{
		}

		[Token(Token = "0x600134F")]
		[Address(RVA = "0xC125A0", Offset = "0xC125A0", VA = "0xC125A0")]
		public AutoChangeCultureInfo()
		{
		}
	}
	[Token(Token = "0x20002C7")]
	public class CoroutineManager : MonoBehaviour
	{
		[Token(Token = "0x40013AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static CoroutineManager mInstance;

		[Token(Token = "0x170001A8")]
		private static CoroutineManager pInstance
		{
			[Token(Token = "0x6001350")]
			[Address(RVA = "0xCC1160", Offset = "0xCC1160", VA = "0xCC1160")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001351")]
		[Address(RVA = "0xCC12C0", Offset = "0xCC12C0", VA = "0xCC12C0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001352")]
		[Address(RVA = "0xCC1350", Offset = "0xCC1350", VA = "0xCC1350")]
		public static Coroutine Start(IEnumerator coroutine)
		{
			return null;
		}

		[Token(Token = "0x6001353")]
		[Address(RVA = "0xCC1380", Offset = "0xCC1380", VA = "0xCC1380")]
		public CoroutineManager()
		{
		}
	}
	[Token(Token = "0x20002C8")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5CBDF8", Offset = "0x5CBDF8")]
	public class CustomLocalizeCallback : MonoBehaviour
	{
		[Token(Token = "0x40013AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEvent _OnLocalize;

		[Token(Token = "0x6001354")]
		[Address(RVA = "0xCC24DC", Offset = "0xCC24DC", VA = "0xCC24DC")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x6001355")]
		[Address(RVA = "0xCC25B4", Offset = "0xCC25B4", VA = "0xCC25B4")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x6001356")]
		[Address(RVA = "0xCC265C", Offset = "0xCC265C", VA = "0xCC265C")]
		public void OnLocalize()
		{
		}

		[Token(Token = "0x6001357")]
		[Address(RVA = "0xCC2678", Offset = "0xCC2678", VA = "0xCC2678")]
		public CustomLocalizeCallback()
		{
		}
	}
	[Token(Token = "0x20002C9")]
	public class HindiFixer
	{
		[Serializable]
		[Token(Token = "0x2000489")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CE19C", Offset = "0x5CE19C")]
		private sealed class <>c
		{
			[Token(Token = "0x4001D50")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4001D51")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<char, bool> <>9__0_0;

			[Token(Token = "0x6001C69")]
			[Address(RVA = "0x7EBB94", Offset = "0x7EBB94", VA = "0x7EBB94")]
			public <>c()
			{
			}

			[Token(Token = "0x6001C6A")]
			[Address(RVA = "0x7EBB9C", Offset = "0x7EBB9C", VA = "0x7EBB9C")]
			internal bool <Fix>b__0_0(char x)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001358")]
		[Address(RVA = "0xA4D974", Offset = "0xA4D974", VA = "0xA4D974")]
		internal static string Fix(string text)
		{
			return null;
		}

		[Token(Token = "0x6001359")]
		[Address(RVA = "0xA4DE10", Offset = "0xA4DE10", VA = "0xA4DE10")]
		public HindiFixer()
		{
		}
	}
	[Token(Token = "0x20002CA")]
	public static class I2Utils
	{
		[Serializable]
		[Token(Token = "0x200048A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CE1AC", Offset = "0x5CE1AC")]
		private sealed class <>c
		{
			[Token(Token = "0x4001D52")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4001D53")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<char, bool> <>9__6_0;

			[Token(Token = "0x6001C6C")]
			[Address(RVA = "0x7EBC0C", Offset = "0x7EBC0C", VA = "0x7EBC0C")]
			public <>c()
			{
			}

			[Token(Token = "0x6001C6D")]
			[Address(RVA = "0x7EBC14", Offset = "0x7EBC14", VA = "0x7EBC14")]
			internal bool <SplitLine>b__6_0(char c)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x40013AE")]
		public const string ValidChars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";

		[Token(Token = "0x40013AF")]
		public const string NumberChars = "0123456789";

		[Token(Token = "0x40013B0")]
		public const string ValidNameSymbols = ".-_$#@*()[]{}+:?!&',^=<>~`";

		[Token(Token = "0x600135A")]
		[Address(RVA = "0xA4FDBC", Offset = "0xA4FDBC", VA = "0xA4FDBC")]
		public static string ReverseText(string source)
		{
			return null;
		}

		[Token(Token = "0x600135B")]
		[Address(RVA = "0xA4FE90", Offset = "0xA4FE90", VA = "0xA4FE90")]
		public static string RemoveNonASCII(string text, bool allowCategory = false)
		{
			return null;
		}

		[Token(Token = "0x600135C")]
		[Address(RVA = "0xA500D4", Offset = "0xA500D4", VA = "0xA500D4")]
		public static string GetValidTermName(string text, bool allowCategory = false)
		{
			return null;
		}

		[Token(Token = "0x600135D")]
		[Address(RVA = "0xA50194", Offset = "0xA50194", VA = "0xA50194")]
		public static string SplitLine(string line, int maxCharacters)
		{
			return null;
		}

		[Token(Token = "0x600135E")]
		[Address(RVA = "0xA50480", Offset = "0xA50480", VA = "0xA50480")]
		public static bool FindNextTag(string line, int iStart, out int tagStart, out int tagEnd)
		{
			return default(bool);
		}

		[Token(Token = "0x600135F")]
		[Address(RVA = "0xA50100", Offset = "0xA50100", VA = "0xA50100")]
		public static string RemoveTags(string text)
		{
			return null;
		}

		[Token(Token = "0x6001360")]
		[Address(RVA = "0xA50608", Offset = "0xA50608", VA = "0xA50608")]
		public static bool RemoveResourcesPath(ref string sPath)
		{
			return default(bool);
		}

		[Token(Token = "0x6001361")]
		[Address(RVA = "0xA508A8", Offset = "0xA508A8", VA = "0xA508A8")]
		public static bool IsPlaying()
		{
			return default(bool);
		}

		[Token(Token = "0x6001362")]
		[Address(RVA = "0xA508B0", Offset = "0xA508B0", VA = "0xA508B0")]
		public static string GetPath(this Transform tr)
		{
			return null;
		}

		[Token(Token = "0x6001363")]
		[Address(RVA = "0xA5098C", Offset = "0xA5098C", VA = "0xA5098C")]
		public static Transform FindObject(string objectPath)
		{
			return null;
		}

		[Token(Token = "0x6001364")]
		[Address(RVA = "0xA509F8", Offset = "0xA509F8", VA = "0xA509F8")]
		public static Transform FindObject(Scene scene, string objectPath)
		{
			return null;
		}

		[Token(Token = "0x6001365")]
		[Address(RVA = "0xA50B40", Offset = "0xA50B40", VA = "0xA50B40")]
		public static Transform FindObject(Transform root, string objectPath)
		{
			return null;
		}

		[Token(Token = "0x6001366")]
		public static H FindInParents<H>(Transform tr) where H : Component
		{
			return null;
		}

		[Token(Token = "0x6001367")]
		[Address(RVA = "0xA50C70", Offset = "0xA50C70", VA = "0xA50C70")]
		public static string GetCaptureMatch(Match match)
		{
			return null;
		}

		[Token(Token = "0x6001368")]
		[Address(RVA = "0xA50D20", Offset = "0xA50D20", VA = "0xA50D20")]
		public static void SendWebRequest(UnityWebRequest www)
		{
		}
	}
	[Token(Token = "0x20002CB")]
	public interface ILocalizationParamsManager
	{
		[Token(Token = "0x6001369")]
		string GetParameterValue(string Param);
	}
	[Token(Token = "0x20002CC")]
	public class LocalizationParamsManager : MonoBehaviour, ILocalizationParamsManager
	{
		[Serializable]
		[Token(Token = "0x200048B")]
		public struct ParamValue
		{
			[Token(Token = "0x4001D54")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public string Name;

			[Token(Token = "0x4001D55")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public string Value;
		}

		[Token(Token = "0x40013B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public List<ParamValue> _Params;

		[Token(Token = "0x40013B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool _IsGlobalManager;

		[Token(Token = "0x600136A")]
		[Address(RVA = "0xA76B30", Offset = "0xA76B30", VA = "0xA76B30", Slot = "4")]
		public string GetParameterValue(string ParamName)
		{
			return null;
		}

		[Token(Token = "0x600136B")]
		[Address(RVA = "0xA76C24", Offset = "0xA76C24", VA = "0xA76C24")]
		public void SetParameterValue(string ParamName, string ParamValue, bool localize = true)
		{
		}

		[Token(Token = "0x600136C")]
		[Address(RVA = "0xA76DCC", Offset = "0xA76DCC", VA = "0xA76DCC")]
		public void OnLocalize()
		{
		}

		[Token(Token = "0x600136D")]
		[Address(RVA = "0xA76E80", Offset = "0xA76E80", VA = "0xA76E80", Slot = "5")]
		public virtual void OnEnable()
		{
		}

		[Token(Token = "0x600136E")]
		[Address(RVA = "0xA76E90", Offset = "0xA76E90", VA = "0xA76E90")]
		public void DoAutoRegister()
		{
		}

		[Token(Token = "0x600136F")]
		[Address(RVA = "0xA76F7C", Offset = "0xA76F7C", VA = "0xA76F7C")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x6001370")]
		[Address(RVA = "0xA77008", Offset = "0xA77008", VA = "0xA77008")]
		public LocalizationParamsManager()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002CD")]
	public struct LocalizedString
	{
		[Token(Token = "0x40013B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string mTerm;

		[Token(Token = "0x40013B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool mRTL_IgnoreArabicFix;

		[Token(Token = "0x40013B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int mRTL_MaxLineLength;

		[Token(Token = "0x40013B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool mRTL_ConvertNumbers;

		[Token(Token = "0x40013B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool m_DontLocalizeParameters;

		[Token(Token = "0x6001371")]
		[Address(RVA = "0xF8D4F4", Offset = "0xF8D4F4", VA = "0xF8D4F4")]
		public static implicit operator string(LocalizedString s)
		{
			return null;
		}

		[Token(Token = "0x6001372")]
		[Address(RVA = "0xF8D5C4", Offset = "0xF8D5C4", VA = "0xF8D5C4")]
		public static implicit operator LocalizedString(string term)
		{
			return default(LocalizedString);
		}

		[Token(Token = "0x6001373")]
		[Address(RVA = "0xF8D608", Offset = "0xF8D608", VA = "0xF8D608")]
		public LocalizedString(LocalizedString str)
		{
		}

		[Token(Token = "0x6001374")]
		[Address(RVA = "0xF8D4F8", Offset = "0xF8D4F8", VA = "0xF8D4F8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20002CE")]
	public class RTLFixer
	{
		[Token(Token = "0x6001375")]
		[Address(RVA = "0x11F046C", Offset = "0x11F046C", VA = "0x11F046C")]
		public static string Fix(string str)
		{
			return null;
		}

		[Token(Token = "0x6001376")]
		[Address(RVA = "0x11F072C", Offset = "0x11F072C", VA = "0x11F072C")]
		public static string Fix(string str, bool rtl)
		{
			return null;
		}

		[Token(Token = "0x6001377")]
		[Address(RVA = "0x11F0478", Offset = "0x11F0478", VA = "0x11F0478")]
		public static string Fix(string str, bool showTashkeel, bool useHinduNumbers)
		{
			return null;
		}

		[Token(Token = "0x6001378")]
		[Address(RVA = "0x11F170C", Offset = "0x11F170C", VA = "0x11F170C")]
		public RTLFixer()
		{
		}
	}
	[Token(Token = "0x20002CF")]
	internal enum IsolatedArabicLetters
	{
		[Token(Token = "0x40013B9")]
		Hamza = 65152,
		[Token(Token = "0x40013BA")]
		Alef = 65165,
		[Token(Token = "0x40013BB")]
		AlefHamza = 65155,
		[Token(Token = "0x40013BC")]
		WawHamza = 65157,
		[Token(Token = "0x40013BD")]
		AlefMaksoor = 65159,
		[Token(Token = "0x40013BE")]
		AlefMaksora = 64508,
		[Token(Token = "0x40013BF")]
		HamzaNabera = 65161,
		[Token(Token = "0x40013C0")]
		Ba = 65167,
		[Token(Token = "0x40013C1")]
		Ta = 65173,
		[Token(Token = "0x40013C2")]
		Tha2 = 65177,
		[Token(Token = "0x40013C3")]
		Jeem = 65181,
		[Token(Token = "0x40013C4")]
		H7aa = 65185,
		[Token(Token = "0x40013C5")]
		Khaa2 = 65189,
		[Token(Token = "0x40013C6")]
		Dal = 65193,
		[Token(Token = "0x40013C7")]
		Thal = 65195,
		[Token(Token = "0x40013C8")]
		Ra2 = 65197,
		[Token(Token = "0x40013C9")]
		Zeen = 65199,
		[Token(Token = "0x40013CA")]
		Seen = 65201,
		[Token(Token = "0x40013CB")]
		Sheen = 65205,
		[Token(Token = "0x40013CC")]
		S9a = 65209,
		[Token(Token = "0x40013CD")]
		Dha = 65213,
		[Token(Token = "0x40013CE")]
		T6a = 65217,
		[Token(Token = "0x40013CF")]
		T6ha = 65221,
		[Token(Token = "0x40013D0")]
		Ain = 65225,
		[Token(Token = "0x40013D1")]
		Gain = 65229,
		[Token(Token = "0x40013D2")]
		Fa = 65233,
		[Token(Token = "0x40013D3")]
		Gaf = 65237,
		[Token(Token = "0x40013D4")]
		Kaf = 65241,
		[Token(Token = "0x40013D5")]
		Lam = 65245,
		[Token(Token = "0x40013D6")]
		Meem = 65249,
		[Token(Token = "0x40013D7")]
		Noon = 65253,
		[Token(Token = "0x40013D8")]
		Ha = 65257,
		[Token(Token = "0x40013D9")]
		Waw = 65261,
		[Token(Token = "0x40013DA")]
		Ya = 65265,
		[Token(Token = "0x40013DB")]
		AlefMad = 65153,
		[Token(Token = "0x40013DC")]
		TaMarboota = 65171,
		[Token(Token = "0x40013DD")]
		PersianPe = 64342,
		[Token(Token = "0x40013DE")]
		PersianChe = 64378,
		[Token(Token = "0x40013DF")]
		PersianZe = 64394,
		[Token(Token = "0x40013E0")]
		PersianGaf = 64402,
		[Token(Token = "0x40013E1")]
		PersianGaf2 = 64398
	}
	[Token(Token = "0x20002D0")]
	internal enum GeneralArabicLetters
	{
		[Token(Token = "0x40013E3")]
		Hamza = 1569,
		[Token(Token = "0x40013E4")]
		Alef = 1575,
		[Token(Token = "0x40013E5")]
		AlefHamza = 1571,
		[Token(Token = "0x40013E6")]
		WawHamza = 1572,
		[Token(Token = "0x40013E7")]
		AlefMaksoor = 1573,
		[Token(Token = "0x40013E8")]
		AlefMagsora = 1609,
		[Token(Token = "0x40013E9")]
		HamzaNabera = 1574,
		[Token(Token = "0x40013EA")]
		Ba = 1576,
		[Token(Token = "0x40013EB")]
		Ta = 1578,
		[Token(Token = "0x40013EC")]
		Tha2 = 1579,
		[Token(Token = "0x40013ED")]
		Jeem = 1580,
		[Token(Token = "0x40013EE")]
		H7aa = 1581,
		[Token(Token = "0x40013EF")]
		Khaa2 = 1582,
		[Token(Token = "0x40013F0")]
		Dal = 1583,
		[Token(Token = "0x40013F1")]
		Thal = 1584,
		[Token(Token = "0x40013F2")]
		Ra2 = 1585,
		[Token(Token = "0x40013F3")]
		Zeen = 1586,
		[Token(Token = "0x40013F4")]
		Seen = 1587,
		[Token(Token = "0x40013F5")]
		Sheen = 1588,
		[Token(Token = "0x40013F6")]
		S9a = 1589,
		[Token(Token = "0x40013F7")]
		Dha = 1590,
		[Token(Token = "0x40013F8")]
		T6a = 1591,
		[Token(Token = "0x40013F9")]
		T6ha = 1592,
		[Token(Token = "0x40013FA")]
		Ain = 1593,
		[Token(Token = "0x40013FB")]
		Gain = 1594,
		[Token(Token = "0x40013FC")]
		Fa = 1601,
		[Token(Token = "0x40013FD")]
		Gaf = 1602,
		[Token(Token = "0x40013FE")]
		Kaf = 1603,
		[Token(Token = "0x40013FF")]
		Lam = 1604,
		[Token(Token = "0x4001400")]
		Meem = 1605,
		[Token(Token = "0x4001401")]
		Noon = 1606,
		[Token(Token = "0x4001402")]
		Ha = 1607,
		[Token(Token = "0x4001403")]
		Waw = 1608,
		[Token(Token = "0x4001404")]
		Ya = 1610,
		[Token(Token = "0x4001405")]
		AlefMad = 1570,
		[Token(Token = "0x4001406")]
		TaMarboota = 1577,
		[Token(Token = "0x4001407")]
		PersianPe = 1662,
		[Token(Token = "0x4001408")]
		PersianChe = 1670,
		[Token(Token = "0x4001409")]
		PersianZe = 1688,
		[Token(Token = "0x400140A")]
		PersianGaf = 1711,
		[Token(Token = "0x400140B")]
		PersianGaf2 = 1705
	}
	[Token(Token = "0x20002D1")]
	internal class ArabicMapping
	{
		[Token(Token = "0x400140C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int from;

		[Token(Token = "0x400140D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int to;

		[Token(Token = "0x6001379")]
		[Address(RVA = "0xC0EBB0", Offset = "0xC0EBB0", VA = "0xC0EBB0")]
		public ArabicMapping(int from, int to)
		{
		}
	}
	[Token(Token = "0x20002D2")]
	internal class ArabicTable
	{
		[Token(Token = "0x400140E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static List<ArabicMapping> mapList;

		[Token(Token = "0x400140F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static ArabicTable arabicMapper;

		[Token(Token = "0x170001A9")]
		internal static ArabicTable ArabicMapper
		{
			[Token(Token = "0x600137B")]
			[Address(RVA = "0xC0F700", Offset = "0xC0F700", VA = "0xC0F700")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600137A")]
		[Address(RVA = "0xC0EBE8", Offset = "0xC0EBE8", VA = "0xC0EBE8")]
		private ArabicTable()
		{
		}

		[Token(Token = "0x600137C")]
		[Address(RVA = "0xC0F780", Offset = "0xC0F780", VA = "0xC0F780")]
		internal int Convert(int toBeConverted)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20002D3")]
	internal class TashkeelLocation
	{
		[Token(Token = "0x4001410")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public char tashkeel;

		[Token(Token = "0x4001411")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int position;

		[Token(Token = "0x600137D")]
		[Address(RVA = "0xE8A210", Offset = "0xE8A210", VA = "0xE8A210")]
		public TashkeelLocation(char tashkeel, int position)
		{
		}
	}
	[Token(Token = "0x20002D4")]
	internal class RTLFixerTool
	{
		[Token(Token = "0x4001412")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static bool showTashkeel;

		[Token(Token = "0x4001413")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		internal static bool useHinduNumbers;

		[Token(Token = "0x600137E")]
		[Address(RVA = "0x11F1714", Offset = "0x11F1714", VA = "0x11F1714")]
		internal static string RemoveTashkeel(string str, out List<TashkeelLocation> tashkeelLocation)
		{
			return null;
		}

		[Token(Token = "0x600137F")]
		[Address(RVA = "0x11F1CC8", Offset = "0x11F1CC8", VA = "0x11F1CC8")]
		internal static char[] ReturnTashkeel(char[] letters, List<TashkeelLocation> tashkeelLocation)
		{
			return null;
		}

		[Token(Token = "0x6001380")]
		[Address(RVA = "0x11F0980", Offset = "0x11F0980", VA = "0x11F0980")]
		internal static string FixLine(string str)
		{
			return null;
		}

		[Token(Token = "0x6001381")]
		[Address(RVA = "0x11F1F1C", Offset = "0x11F1F1C", VA = "0x11F1F1C")]
		internal static bool IsIgnoredCharacter(char ch)
		{
			return default(bool);
		}

		[Token(Token = "0x6001382")]
		[Address(RVA = "0x11F2570", Offset = "0x11F2570", VA = "0x11F2570")]
		internal static bool IsLeadingLetter(char[] letters, int index)
		{
			return default(bool);
		}

		[Token(Token = "0x6001383")]
		[Address(RVA = "0x11F2410", Offset = "0x11F2410", VA = "0x11F2410")]
		internal static bool IsFinishingLetter(char[] letters, int index)
		{
			return default(bool);
		}

		[Token(Token = "0x6001384")]
		[Address(RVA = "0x11F2094", Offset = "0x11F2094", VA = "0x11F2094")]
		internal static bool IsMiddleLetter(char[] letters, int index)
		{
			return default(bool);
		}

		[Token(Token = "0x6001385")]
		[Address(RVA = "0x11F28A8", Offset = "0x11F28A8", VA = "0x11F28A8")]
		public RTLFixerTool()
		{
		}
	}
	[Token(Token = "0x20002D5")]
	public class RegisterGlobalParameters : MonoBehaviour, ILocalizationParamsManager
	{
		[Token(Token = "0x6001387")]
		[Address(RVA = "0x11F65F4", Offset = "0x11F65F4", VA = "0x11F65F4", Slot = "5")]
		public virtual void OnEnable()
		{
		}

		[Token(Token = "0x6001388")]
		[Address(RVA = "0x11F66E4", Offset = "0x11F66E4", VA = "0x11F66E4", Slot = "6")]
		public virtual void OnDisable()
		{
		}

		[Token(Token = "0x6001389")]
		[Address(RVA = "0x11F6770", Offset = "0x11F6770", VA = "0x11F6770", Slot = "7")]
		public virtual string GetParameterValue(string ParamName)
		{
			return null;
		}

		[Token(Token = "0x600138A")]
		[Address(RVA = "0x11F6778", Offset = "0x11F6778", VA = "0x11F6778")]
		public RegisterGlobalParameters()
		{
		}
	}
	[Token(Token = "0x20002D6")]
	public interface IResourceManager_Bundles
	{
		[Token(Token = "0x600138B")]
		UnityEngine.Object LoadFromBundle(string path, Type assetType);
	}
	[Token(Token = "0x20002D7")]
	public class ResourceManager : MonoBehaviour
	{
		[Token(Token = "0x4001414")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static ResourceManager mInstance;

		[Token(Token = "0x4001415")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<IResourceManager_Bundles> mBundleManagers;

		[Token(Token = "0x4001416")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEngine.Object[] Assets;

		[Token(Token = "0x4001417")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly Dictionary<string, UnityEngine.Object> mResourcesCache;

		[Token(Token = "0x170001AA")]
		public static ResourceManager pInstance
		{
			[Token(Token = "0x600138C")]
			[Address(RVA = "0x11F6180", Offset = "0x11F6180", VA = "0x11F6180")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600138D")]
		[Address(RVA = "0x11F67F0", Offset = "0x11F67F0", VA = "0x11F67F0")]
		public static void MyOnLevelWasLoaded(Scene scene, LoadSceneMode mode)
		{
		}

		[Token(Token = "0x600138E")]
		public T GetAsset<T>(string Name) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x600138F")]
		[Address(RVA = "0x11F68C4", Offset = "0x11F68C4", VA = "0x11F68C4")]
		private UnityEngine.Object FindAsset(string Name)
		{
			return null;
		}

		[Token(Token = "0x6001390")]
		[Address(RVA = "0x11F6A00", Offset = "0x11F6A00", VA = "0x11F6A00")]
		public bool HasAsset(UnityEngine.Object Obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001391")]
		public T LoadFromResources<T>(string Path) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x6001392")]
		public T LoadFromBundle<T>(string path) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x6001393")]
		[Address(RVA = "0x11F685C", Offset = "0x11F685C", VA = "0x11F685C")]
		public void CleanResourceCache()
		{
		}

		[Token(Token = "0x6001394")]
		[Address(RVA = "0x11F6A6C", Offset = "0x11F6A6C", VA = "0x11F6A6C")]
		public ResourceManager()
		{
		}
	}
	[Token(Token = "0x20002D8")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5CBE40", Offset = "0x5CBE40")]
	public class SetLanguage : MonoBehaviour
	{
		[Token(Token = "0x4001418")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string _Language;

		[Token(Token = "0x6001395")]
		[Address(RVA = "0xA0CF78", Offset = "0xA0CF78", VA = "0xA0CF78")]
		private void OnClick()
		{
		}

		[Token(Token = "0x6001396")]
		[Address(RVA = "0xA0CF7C", Offset = "0xA0CF7C", VA = "0xA0CF7C")]
		public void ApplyLanguage()
		{
		}

		[Token(Token = "0x6001397")]
		[Address(RVA = "0xA0D034", Offset = "0xA0D034", VA = "0xA0D034")]
		public SetLanguage()
		{
		}
	}
	[Token(Token = "0x20002D9")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5CBE78", Offset = "0x5CBE78")]
	public class SetLanguageDropdown : MonoBehaviour
	{
		[Token(Token = "0x6001398")]
		[Address(RVA = "0xA0D03C", Offset = "0xA0D03C", VA = "0xA0D03C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001399")]
		[Address(RVA = "0xA0D2D0", Offset = "0xA0D2D0", VA = "0xA0D2D0")]
		private void OnValueChanged(int index)
		{
		}

		[Token(Token = "0x600139A")]
		[Address(RVA = "0xA0D3D4", Offset = "0xA0D3D4", VA = "0xA0D3D4")]
		public SetLanguageDropdown()
		{
		}
	}
	[Token(Token = "0x20002DA")]
	public class StringObfucator
	{
		[Token(Token = "0x4001419")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static char[] StringObfuscatorPassword;

		[Token(Token = "0x600139B")]
		[Address(RVA = "0x13AFF5C", Offset = "0x13AFF5C", VA = "0x13AFF5C")]
		public static string Encode(string NormalString)
		{
			return null;
		}

		[Token(Token = "0x600139C")]
		[Address(RVA = "0x13B0290", Offset = "0x13B0290", VA = "0x13B0290")]
		public static string Decode(string ObfucatedString)
		{
			return null;
		}

		[Token(Token = "0x600139D")]
		[Address(RVA = "0x13B0200", Offset = "0x13B0200", VA = "0x13B0200")]
		private static string ToBase64(string regularString)
		{
			return null;
		}

		[Token(Token = "0x600139E")]
		[Address(RVA = "0x13B0374", Offset = "0x13B0374", VA = "0x13B0374")]
		private static string FromBase64(string base64string)
		{
			return null;
		}

		[Token(Token = "0x600139F")]
		[Address(RVA = "0x13B0040", Offset = "0x13B0040", VA = "0x13B0040")]
		private static string XoREncode(string NormalString)
		{
			return null;
		}

		[Token(Token = "0x60013A0")]
		[Address(RVA = "0x13B040C", Offset = "0x13B040C", VA = "0x13B040C")]
		public StringObfucator()
		{
		}
	}
}
namespace I2.Loc.SimpleJSON
{
	[Token(Token = "0x20002DB")]
	public enum JSONBinaryTag
	{
		[Token(Token = "0x400141B")]
		Array = 1,
		[Token(Token = "0x400141C")]
		Class,
		[Token(Token = "0x400141D")]
		Value,
		[Token(Token = "0x400141E")]
		IntValue,
		[Token(Token = "0x400141F")]
		DoubleValue,
		[Token(Token = "0x4001420")]
		BoolValue,
		[Token(Token = "0x4001421")]
		FloatValue
	}
	[Token(Token = "0x20002DC")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x5CBEB0", Offset = "0x5CBEB0")]
	public class JSONNode
	{
		[Token(Token = "0x200048C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CE1BC", Offset = "0x5CE1BC")]
		private sealed class <get_Childs>d__17 : IEnumerable<JSONNode>, IEnumerable, IEnumerator<JSONNode>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001D56")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001D57")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private JSONNode <>2__current;

			[Token(Token = "0x4001D58")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x17000373")]
			private JSONNode System.Collections.Generic.IEnumerator<I2.Loc.SimpleJSON.JSONNode>.Current
			{
				[Token(Token = "0x6001C71")]
				[Address(RVA = "0x7ED24C", Offset = "0x7ED24C", VA = "0x7ED24C", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000374")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001C73")]
				[Address(RVA = "0x7ED294", Offset = "0x7ED294", VA = "0x7ED294", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001C6E")]
			[Address(RVA = "0x7ED1F8", Offset = "0x7ED1F8", VA = "0x7ED1F8")]
			[DebuggerHidden]
			public <get_Childs>d__17(int <>1__state)
			{
			}

			[Token(Token = "0x6001C6F")]
			[Address(RVA = "0x7ED230", Offset = "0x7ED230", VA = "0x7ED230", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001C70")]
			[Address(RVA = "0x7ED234", Offset = "0x7ED234", VA = "0x7ED234", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001C72")]
			[Address(RVA = "0x7ED254", Offset = "0x7ED254", VA = "0x7ED254", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6001C74")]
			[Address(RVA = "0x7ED29C", Offset = "0x7ED29C", VA = "0x7ED29C", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<JSONNode> System.Collections.Generic.IEnumerable<I2.Loc.SimpleJSON.JSONNode>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6001C75")]
			[Address(RVA = "0x7ED330", Offset = "0x7ED330", VA = "0x7ED330", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x200048D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CE1CC", Offset = "0x5CE1CC")]
		private sealed class <get_DeepChilds>d__19 : IEnumerable<JSONNode>, IEnumerable, IEnumerator<JSONNode>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001D59")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001D5A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private JSONNode <>2__current;

			[Token(Token = "0x4001D5B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4001D5C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public JSONNode <>4__this;

			[Token(Token = "0x4001D5D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private IEnumerator<JSONNode> <>7__wrap1;

			[Token(Token = "0x4001D5E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private IEnumerator<JSONNode> <>7__wrap2;

			[Token(Token = "0x17000375")]
			private JSONNode System.Collections.Generic.IEnumerator<I2.Loc.SimpleJSON.JSONNode>.Current
			{
				[Token(Token = "0x6001C7B")]
				[Address(RVA = "0x7ED9E0", Offset = "0x7ED9E0", VA = "0x7ED9E0", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000376")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001C7D")]
				[Address(RVA = "0x7EDA28", Offset = "0x7EDA28", VA = "0x7EDA28", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001C76")]
			[Address(RVA = "0x7ED334", Offset = "0x7ED334", VA = "0x7ED334")]
			[DebuggerHidden]
			public <get_DeepChilds>d__19(int <>1__state)
			{
			}

			[Token(Token = "0x6001C77")]
			[Address(RVA = "0x7ED36C", Offset = "0x7ED36C", VA = "0x7ED36C", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001C78")]
			[Address(RVA = "0x7ED574", Offset = "0x7ED574", VA = "0x7ED574", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001C79")]
			[Address(RVA = "0x7ED4B8", Offset = "0x7ED4B8", VA = "0x7ED4B8")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6001C7A")]
			[Address(RVA = "0x7ED3FC", Offset = "0x7ED3FC", VA = "0x7ED3FC")]
			private void <>m__Finally2()
			{
			}

			[Token(Token = "0x6001C7C")]
			[Address(RVA = "0x7ED9E8", Offset = "0x7ED9E8", VA = "0x7ED9E8", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6001C7E")]
			[Address(RVA = "0x7EDA30", Offset = "0x7EDA30", VA = "0x7EDA30", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<JSONNode> System.Collections.Generic.IEnumerable<I2.Loc.SimpleJSON.JSONNode>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6001C7F")]
			[Address(RVA = "0x7EDAE0", Offset = "0x7EDAE0", VA = "0x7EDAE0", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x170001AB")]
		public virtual JSONNode Item
		{
			[Token(Token = "0x60013A3")]
			[Address(RVA = "0xA5685C", Offset = "0xA5685C", VA = "0xA5685C", Slot = "5")]
			get
			{
				return null;
			}
			[Token(Token = "0x60013A4")]
			[Address(RVA = "0xA56864", Offset = "0xA56864", VA = "0xA56864", Slot = "6")]
			set
			{
			}
		}

		[Token(Token = "0x170001AC")]
		public virtual JSONNode Item
		{
			[Token(Token = "0x60013A5")]
			[Address(RVA = "0xA56868", Offset = "0xA56868", VA = "0xA56868", Slot = "7")]
			get
			{
				return null;
			}
			[Token(Token = "0x60013A6")]
			[Address(RVA = "0xA56870", Offset = "0xA56870", VA = "0xA56870", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x170001AD")]
		public virtual string Value
		{
			[Token(Token = "0x60013A7")]
			[Address(RVA = "0xA56874", Offset = "0xA56874", VA = "0xA56874", Slot = "9")]
			get
			{
				return null;
			}
			[Token(Token = "0x60013A8")]
			[Address(RVA = "0xA568B8", Offset = "0xA568B8", VA = "0xA568B8", Slot = "10")]
			set
			{
			}
		}

		[Token(Token = "0x170001AE")]
		public virtual int Count
		{
			[Token(Token = "0x60013A9")]
			[Address(RVA = "0xA568BC", Offset = "0xA568BC", VA = "0xA568BC", Slot = "11")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001AF")]
		public virtual IEnumerable<JSONNode> Childs
		{
			[Token(Token = "0x60013AE")]
			[Address(RVA = "0xA56940", Offset = "0xA56940", VA = "0xA56940", Slot = "16")]
			[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D9CDC", Offset = "0x5D9CDC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001B0")]
		public IEnumerable<JSONNode> DeepChilds
		{
			[Token(Token = "0x60013AF")]
			[Address(RVA = "0xA5699C", Offset = "0xA5699C", VA = "0xA5699C")]
			[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D9D3C", Offset = "0x5D9D3C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001B1")]
		public virtual int AsInt
		{
			[Token(Token = "0x60013B2")]
			[Address(RVA = "0xA56A9C", Offset = "0xA56A9C", VA = "0xA56A9C", Slot = "18")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60013B3")]
			[Address(RVA = "0xA56ADC", Offset = "0xA56ADC", VA = "0xA56ADC", Slot = "19")]
			set
			{
			}
		}

		[Token(Token = "0x170001B2")]
		public virtual float AsFloat
		{
			[Token(Token = "0x60013B4")]
			[Address(RVA = "0xA56B1C", Offset = "0xA56B1C", VA = "0xA56B1C", Slot = "20")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60013B5")]
			[Address(RVA = "0xA56B60", Offset = "0xA56B60", VA = "0xA56B60", Slot = "21")]
			set
			{
			}
		}

		[Token(Token = "0x170001B3")]
		public virtual double AsDouble
		{
			[Token(Token = "0x60013B6")]
			[Address(RVA = "0xA56BA0", Offset = "0xA56BA0", VA = "0xA56BA0", Slot = "22")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x60013B7")]
			[Address(RVA = "0xA56C40", Offset = "0xA56C40", VA = "0xA56C40", Slot = "23")]
			set
			{
			}
		}

		[Token(Token = "0x170001B4")]
		public virtual bool AsBool
		{
			[Token(Token = "0x60013B8")]
			[Address(RVA = "0xA56C80", Offset = "0xA56C80", VA = "0xA56C80", Slot = "24")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60013B9")]
			[Address(RVA = "0xA56D44", Offset = "0xA56D44", VA = "0xA56D44", Slot = "25")]
			set
			{
			}
		}

		[Token(Token = "0x170001B5")]
		public virtual JSONArray AsArray
		{
			[Token(Token = "0x60013BA")]
			[Address(RVA = "0xA56DC8", Offset = "0xA56DC8", VA = "0xA56DC8", Slot = "26")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001B6")]
		public virtual JSONClass AsObject
		{
			[Token(Token = "0x60013BB")]
			[Address(RVA = "0xA56E44", Offset = "0xA56E44", VA = "0xA56E44", Slot = "27")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60013A2")]
		[Address(RVA = "0xA56858", Offset = "0xA56858", VA = "0xA56858", Slot = "4")]
		public virtual void Add(string aKey, JSONNode aItem)
		{
		}

		[Token(Token = "0x60013AA")]
		[Address(RVA = "0xA568C4", Offset = "0xA568C4", VA = "0xA568C4", Slot = "12")]
		public virtual void Add(JSONNode aItem)
		{
		}

		[Token(Token = "0x60013AB")]
		[Address(RVA = "0xA56928", Offset = "0xA56928", VA = "0xA56928", Slot = "13")]
		public virtual JSONNode Remove(string aKey)
		{
			return null;
		}

		[Token(Token = "0x60013AC")]
		[Address(RVA = "0xA56930", Offset = "0xA56930", VA = "0xA56930", Slot = "14")]
		public virtual JSONNode Remove(int aIndex)
		{
			return null;
		}

		[Token(Token = "0x60013AD")]
		[Address(RVA = "0xA56938", Offset = "0xA56938", VA = "0xA56938", Slot = "15")]
		public virtual JSONNode Remove(JSONNode aNode)
		{
			return null;
		}

		[Token(Token = "0x60013B0")]
		[Address(RVA = "0xA56A14", Offset = "0xA56A14", VA = "0xA56A14", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60013B1")]
		[Address(RVA = "0xA56A58", Offset = "0xA56A58", VA = "0xA56A58", Slot = "17")]
		public virtual string ToString(string aPrefix)
		{
			return null;
		}

		[Token(Token = "0x60013BC")]
		[Address(RVA = "0xA56EC0", Offset = "0xA56EC0", VA = "0xA56EC0")]
		public static implicit operator JSONNode(string s)
		{
			return null;
		}

		[Token(Token = "0x60013BD")]
		[Address(RVA = "0xA56F2C", Offset = "0xA56F2C", VA = "0xA56F2C")]
		public static implicit operator string(JSONNode d)
		{
			return null;
		}

		[Token(Token = "0x60013BE")]
		[Address(RVA = "0xA56F78", Offset = "0xA56F78", VA = "0xA56F78")]
		public static bool operator ==(JSONNode a, object b)
		{
			return default(bool);
		}

		[Token(Token = "0x60013BF")]
		[Address(RVA = "0xA5700C", Offset = "0xA5700C", VA = "0xA5700C")]
		public static bool operator !=(JSONNode a, object b)
		{
			return default(bool);
		}

		[Token(Token = "0x60013C0")]
		[Address(RVA = "0xA57028", Offset = "0xA57028", VA = "0xA57028", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60013C1")]
		[Address(RVA = "0xA562F0", Offset = "0xA562F0", VA = "0xA562F0", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60013C2")]
		[Address(RVA = "0xA5511C", Offset = "0xA5511C", VA = "0xA5511C")]
		internal static string Escape(string aText)
		{
			return null;
		}

		[Token(Token = "0x60013C3")]
		[Address(RVA = "0xA53130", Offset = "0xA53130", VA = "0xA53130")]
		public static JSONNode Parse(string aJSON)
		{
			return null;
		}

		[Token(Token = "0x60013C4")]
		[Address(RVA = "0xA57034", Offset = "0xA57034", VA = "0xA57034", Slot = "28")]
		public virtual void Serialize(BinaryWriter aWriter)
		{
		}

		[Token(Token = "0x60013C5")]
		[Address(RVA = "0xA57038", Offset = "0xA57038", VA = "0xA57038")]
		public void SaveToStream(Stream aData)
		{
		}

		[Token(Token = "0x60013C6")]
		[Address(RVA = "0xA570B4", Offset = "0xA570B4", VA = "0xA570B4")]
		public void SaveToCompressedStream(Stream aData)
		{
		}

		[Token(Token = "0x60013C7")]
		[Address(RVA = "0xA57108", Offset = "0xA57108", VA = "0xA57108")]
		public void SaveToCompressedFile(string aFileName)
		{
		}

		[Token(Token = "0x60013C8")]
		[Address(RVA = "0xA5715C", Offset = "0xA5715C", VA = "0xA5715C")]
		public string SaveToCompressedBase64()
		{
			return null;
		}

		[Token(Token = "0x60013C9")]
		[Address(RVA = "0xA571B0", Offset = "0xA571B0", VA = "0xA571B0")]
		public void SaveToFile(string aFileName)
		{
		}

		[Token(Token = "0x60013CA")]
		[Address(RVA = "0xA57340", Offset = "0xA57340", VA = "0xA57340")]
		public string SaveToBase64()
		{
			return null;
		}

		[Token(Token = "0x60013CB")]
		[Address(RVA = "0xA57514", Offset = "0xA57514", VA = "0xA57514")]
		public static JSONNode Deserialize(BinaryReader aReader)
		{
			return null;
		}

		[Token(Token = "0x60013CC")]
		[Address(RVA = "0xA578E8", Offset = "0xA578E8", VA = "0xA578E8")]
		public static JSONNode LoadFromCompressedFile(string aFileName)
		{
			return null;
		}

		[Token(Token = "0x60013CD")]
		[Address(RVA = "0xA5793C", Offset = "0xA5793C", VA = "0xA5793C")]
		public static JSONNode LoadFromCompressedStream(Stream aData)
		{
			return null;
		}

		[Token(Token = "0x60013CE")]
		[Address(RVA = "0xA57990", Offset = "0xA57990", VA = "0xA57990")]
		public static JSONNode LoadFromCompressedBase64(string aBase64)
		{
			return null;
		}

		[Token(Token = "0x60013CF")]
		[Address(RVA = "0xA579E4", Offset = "0xA579E4", VA = "0xA579E4")]
		public static JSONNode LoadFromStream(Stream aData)
		{
			return null;
		}

		[Token(Token = "0x60013D0")]
		[Address(RVA = "0xA57B44", Offset = "0xA57B44", VA = "0xA57B44")]
		public static JSONNode LoadFromFile(string aFileName)
		{
			return null;
		}

		[Token(Token = "0x60013D1")]
		[Address(RVA = "0xA57C84", Offset = "0xA57C84", VA = "0xA57C84")]
		public static JSONNode LoadFromBase64(string aBase64)
		{
			return null;
		}

		[Token(Token = "0x60013D2")]
		[Address(RVA = "0xA54340", Offset = "0xA54340", VA = "0xA54340")]
		public JSONNode()
		{
		}
	}
	[Token(Token = "0x20002DD")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x5CBEE8", Offset = "0x5CBEE8")]
	public class JSONArray : JSONNode, IEnumerable
	{
		[Token(Token = "0x200048E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CE1DC", Offset = "0x5CE1DC")]
		private sealed class <get_Childs>d__13 : IEnumerable<JSONNode>, IEnumerable, IEnumerator<JSONNode>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001D5F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001D60")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private JSONNode <>2__current;

			[Token(Token = "0x4001D61")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4001D62")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public JSONArray <>4__this;

			[Token(Token = "0x4001D63")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private List<JSONNode>.Enumerator <>7__wrap1;

			[Token(Token = "0x17000377")]
			private JSONNode System.Collections.Generic.IEnumerator<I2.Loc.SimpleJSON.JSONNode>.Current
			{
				[Token(Token = "0x6001C84")]
				[Address(RVA = "0x7ECAA0", Offset = "0x7ECAA0", VA = "0x7ECAA0", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000378")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001C86")]
				[Address(RVA = "0x7ECAE8", Offset = "0x7ECAE8", VA = "0x7ECAE8", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001C80")]
			[Address(RVA = "0x7EC86C", Offset = "0x7EC86C", VA = "0x7EC86C")]
			[DebuggerHidden]
			public <get_Childs>d__13(int <>1__state)
			{
			}

			[Token(Token = "0x6001C81")]
			[Address(RVA = "0x7EC8A4", Offset = "0x7EC8A4", VA = "0x7EC8A4", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001C82")]
			[Address(RVA = "0x7EC914", Offset = "0x7EC914", VA = "0x7EC914", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001C83")]
			[Address(RVA = "0x7EC8C0", Offset = "0x7EC8C0", VA = "0x7EC8C0")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6001C85")]
			[Address(RVA = "0x7ECAA8", Offset = "0x7ECAA8", VA = "0x7ECAA8", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6001C87")]
			[Address(RVA = "0x7ECAF0", Offset = "0x7ECAF0", VA = "0x7ECAF0", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<JSONNode> System.Collections.Generic.IEnumerable<I2.Loc.SimpleJSON.JSONNode>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6001C88")]
			[Address(RVA = "0x7ECBA0", Offset = "0x7ECBA0", VA = "0x7ECBA0", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x200048F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CE1EC", Offset = "0x5CE1EC")]
		private sealed class <GetEnumerator>d__14 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001D64")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001D65")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001D66")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public JSONArray <>4__this;

			[Token(Token = "0x4001D67")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private List<JSONNode>.Enumerator <>7__wrap1;

			[Token(Token = "0x17000379")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001C8D")]
				[Address(RVA = "0x7EC81C", Offset = "0x7EC81C", VA = "0x7EC81C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700037A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001C8F")]
				[Address(RVA = "0x7EC864", Offset = "0x7EC864", VA = "0x7EC864", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001C89")]
			[Address(RVA = "0x7EC5F4", Offset = "0x7EC5F4", VA = "0x7EC5F4")]
			[DebuggerHidden]
			public <GetEnumerator>d__14(int <>1__state)
			{
			}

			[Token(Token = "0x6001C8A")]
			[Address(RVA = "0x7EC620", Offset = "0x7EC620", VA = "0x7EC620", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001C8B")]
			[Address(RVA = "0x7EC690", Offset = "0x7EC690", VA = "0x7EC690", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001C8C")]
			[Address(RVA = "0x7EC63C", Offset = "0x7EC63C", VA = "0x7EC63C")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6001C8E")]
			[Address(RVA = "0x7EC824", Offset = "0x7EC824", VA = "0x7EC824", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001422")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<JSONNode> m_List;

		[Token(Token = "0x170001B7")]
		public override JSONNode Item
		{
			[Token(Token = "0x60013D3")]
			[Address(RVA = "0xA53860", Offset = "0xA53860", VA = "0xA53860", Slot = "5")]
			get
			{
				return null;
			}
			[Token(Token = "0x60013D4")]
			[Address(RVA = "0xA5395C", Offset = "0xA5395C", VA = "0xA5395C", Slot = "6")]
			set
			{
			}
		}

		[Token(Token = "0x170001B8")]
		public override JSONNode Item
		{
			[Token(Token = "0x60013D5")]
			[Address(RVA = "0xA53A14", Offset = "0xA53A14", VA = "0xA53A14", Slot = "7")]
			get
			{
				return null;
			}
			[Token(Token = "0x60013D6")]
			[Address(RVA = "0xA53A70", Offset = "0xA53A70", VA = "0xA53A70", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x170001B9")]
		public override int Count
		{
			[Token(Token = "0x60013D7")]
			[Address(RVA = "0xA53AD4", Offset = "0xA53AD4", VA = "0xA53AD4", Slot = "11")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001BA")]
		public override IEnumerable<JSONNode> Childs
		{
			[Token(Token = "0x60013DB")]
			[Address(RVA = "0xA53CB0", Offset = "0xA53CB0", VA = "0xA53CB0", Slot = "16")]
			[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D9D9C", Offset = "0x5D9D9C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60013D8")]
		[Address(RVA = "0xA53B20", Offset = "0xA53B20", VA = "0xA53B20", Slot = "4")]
		public override void Add(string aKey, JSONNode aItem)
		{
		}

		[Token(Token = "0x60013D9")]
		[Address(RVA = "0xA53B84", Offset = "0xA53B84", VA = "0xA53B84", Slot = "14")]
		public override JSONNode Remove(int aIndex)
		{
			return null;
		}

		[Token(Token = "0x60013DA")]
		[Address(RVA = "0xA53C44", Offset = "0xA53C44", VA = "0xA53C44", Slot = "15")]
		public override JSONNode Remove(JSONNode aNode)
		{
			return null;
		}

		[Token(Token = "0x60013DC")]
		[Address(RVA = "0xA53D28", Offset = "0xA53D28", VA = "0xA53D28", Slot = "29")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D9DFC", Offset = "0x5D9DFC")]
		public IEnumerator GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x60013DD")]
		[Address(RVA = "0xA53DA0", Offset = "0xA53DA0", VA = "0xA53DA0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60013DE")]
		[Address(RVA = "0xA53F7C", Offset = "0xA53F7C", VA = "0xA53F7C", Slot = "17")]
		public override string ToString(string aPrefix)
		{
			return null;
		}

		[Token(Token = "0x60013DF")]
		[Address(RVA = "0xA541D4", Offset = "0xA541D4", VA = "0xA541D4", Slot = "28")]
		public override void Serialize(BinaryWriter aWriter)
		{
		}

		[Token(Token = "0x60013E0")]
		[Address(RVA = "0xA542BC", Offset = "0xA542BC", VA = "0xA542BC")]
		public JSONArray()
		{
		}
	}
	[Token(Token = "0x20002DE")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x5CBF20", Offset = "0x5CBF20")]
	public class JSONClass : JSONNode, IEnumerable
	{
		[Token(Token = "0x2000490")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CE1FC", Offset = "0x5CE1FC")]
		private sealed class <>c__DisplayClass12_0
		{
			[Token(Token = "0x4001D68")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public JSONNode aNode;

			[Token(Token = "0x6001C90")]
			[Address(RVA = "0x7ECBA4", Offset = "0x7ECBA4", VA = "0x7ECBA4")]
			public <>c__DisplayClass12_0()
			{
			}

			[Token(Token = "0x6001C91")]
			[Address(RVA = "0x7ECBAC", Offset = "0x7ECBAC", VA = "0x7ECBAC")]
			internal bool <Remove>b__0(KeyValuePair<string, JSONNode> k)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x2000491")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CE20C", Offset = "0x5CE20C")]
		private sealed class <get_Childs>d__14 : IEnumerable<JSONNode>, IEnumerable, IEnumerator<JSONNode>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001D69")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001D6A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private JSONNode <>2__current;

			[Token(Token = "0x4001D6B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4001D6C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public JSONClass <>4__this;

			[Token(Token = "0x4001D6D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Dictionary<string, JSONNode>.Enumerator <>7__wrap1;

			[Token(Token = "0x1700037B")]
			private JSONNode System.Collections.Generic.IEnumerator<I2.Loc.SimpleJSON.JSONNode>.Current
			{
				[Token(Token = "0x6001C96")]
				[Address(RVA = "0x7ED0F4", Offset = "0x7ED0F4", VA = "0x7ED0F4", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700037C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001C98")]
				[Address(RVA = "0x7ED13C", Offset = "0x7ED13C", VA = "0x7ED13C", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001C92")]
			[Address(RVA = "0x7ECEAC", Offset = "0x7ECEAC", VA = "0x7ECEAC")]
			[DebuggerHidden]
			public <get_Childs>d__14(int <>1__state)
			{
			}

			[Token(Token = "0x6001C93")]
			[Address(RVA = "0x7ECEE4", Offset = "0x7ECEE4", VA = "0x7ECEE4", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001C94")]
			[Address(RVA = "0x7ECF54", Offset = "0x7ECF54", VA = "0x7ECF54", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001C95")]
			[Address(RVA = "0x7ECF00", Offset = "0x7ECF00", VA = "0x7ECF00")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6001C97")]
			[Address(RVA = "0x7ED0FC", Offset = "0x7ED0FC", VA = "0x7ED0FC", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6001C99")]
			[Address(RVA = "0x7ED144", Offset = "0x7ED144", VA = "0x7ED144", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<JSONNode> System.Collections.Generic.IEnumerable<I2.Loc.SimpleJSON.JSONNode>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6001C9A")]
			[Address(RVA = "0x7ED1F4", Offset = "0x7ED1F4", VA = "0x7ED1F4", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x2000492")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CE21C", Offset = "0x5CE21C")]
		private sealed class <GetEnumerator>d__15 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001D6E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001D6F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001D70")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public JSONClass <>4__this;

			[Token(Token = "0x4001D71")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Dictionary<string, JSONNode>.Enumerator <>7__wrap1;

			[Token(Token = "0x1700037D")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001C9F")]
				[Address(RVA = "0x7ECE5C", Offset = "0x7ECE5C", VA = "0x7ECE5C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700037E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001CA1")]
				[Address(RVA = "0x7ECEA4", Offset = "0x7ECEA4", VA = "0x7ECEA4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001C9B")]
			[Address(RVA = "0x7ECC00", Offset = "0x7ECC00", VA = "0x7ECC00")]
			[DebuggerHidden]
			public <GetEnumerator>d__15(int <>1__state)
			{
			}

			[Token(Token = "0x6001C9C")]
			[Address(RVA = "0x7ECC2C", Offset = "0x7ECC2C", VA = "0x7ECC2C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001C9D")]
			[Address(RVA = "0x7ECC9C", Offset = "0x7ECC9C", VA = "0x7ECC9C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001C9E")]
			[Address(RVA = "0x7ECC48", Offset = "0x7ECC48", VA = "0x7ECC48")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6001CA0")]
			[Address(RVA = "0x7ECE64", Offset = "0x7ECE64", VA = "0x7ECE64", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001423")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Dictionary<string, JSONNode> m_Dict;

		[Token(Token = "0x170001BB")]
		public override JSONNode Item
		{
			[Token(Token = "0x60013E1")]
			[Address(RVA = "0xA54348", Offset = "0xA54348", VA = "0xA54348", Slot = "7")]
			get
			{
				return null;
			}
			[Token(Token = "0x60013E2")]
			[Address(RVA = "0xA54468", Offset = "0xA54468", VA = "0xA54468", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x170001BC")]
		public override JSONNode Item
		{
			[Token(Token = "0x60013E3")]
			[Address(RVA = "0xA54538", Offset = "0xA54538", VA = "0xA54538", Slot = "5")]
			get
			{
				return null;
			}
			[Token(Token = "0x60013E4")]
			[Address(RVA = "0xA545E4", Offset = "0xA545E4", VA = "0xA545E4", Slot = "6")]
			set
			{
			}
		}

		[Token(Token = "0x170001BD")]
		public override int Count
		{
			[Token(Token = "0x60013E5")]
			[Address(RVA = "0xA546C4", Offset = "0xA546C4", VA = "0xA546C4", Slot = "11")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001BE")]
		public override IEnumerable<JSONNode> Childs
		{
			[Token(Token = "0x60013EA")]
			[Address(RVA = "0xA54C00", Offset = "0xA54C00", VA = "0xA54C00", Slot = "16")]
			[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D9E5C", Offset = "0x5D9E5C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60013E6")]
		[Address(RVA = "0xA54718", Offset = "0xA54718", VA = "0xA54718", Slot = "4")]
		public override void Add(string aKey, JSONNode aItem)
		{
		}

		[Token(Token = "0x60013E7")]
		[Address(RVA = "0xA54864", Offset = "0xA54864", VA = "0xA54864", Slot = "13")]
		public override JSONNode Remove(string aKey)
		{
			return null;
		}

		[Token(Token = "0x60013E8")]
		[Address(RVA = "0xA54934", Offset = "0xA54934", VA = "0xA54934", Slot = "14")]
		public override JSONNode Remove(int aIndex)
		{
			return null;
		}

		[Token(Token = "0x60013E9")]
		[Address(RVA = "0xA54A1C", Offset = "0xA54A1C", VA = "0xA54A1C", Slot = "15")]
		public override JSONNode Remove(JSONNode aNode)
		{
			return null;
		}

		[Token(Token = "0x60013EB")]
		[Address(RVA = "0xA54C78", Offset = "0xA54C78", VA = "0xA54C78", Slot = "29")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D9EBC", Offset = "0x5D9EBC")]
		public IEnumerator GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x60013EC")]
		[Address(RVA = "0xA54CF0", Offset = "0xA54CF0", VA = "0xA54CF0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60013ED")]
		[Address(RVA = "0xA552E8", Offset = "0xA552E8", VA = "0xA552E8", Slot = "17")]
		public override string ToString(string aPrefix)
		{
			return null;
		}

		[Token(Token = "0x60013EE")]
		[Address(RVA = "0xA55784", Offset = "0xA55784", VA = "0xA55784", Slot = "28")]
		public override void Serialize(BinaryWriter aWriter)
		{
		}

		[Token(Token = "0x60013EF")]
		[Address(RVA = "0xA55980", Offset = "0xA55980", VA = "0xA55980")]
		public JSONClass()
		{
		}
	}
	[Token(Token = "0x20002DF")]
	public class JSONData : JSONNode
	{
		[Token(Token = "0x4001424")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private string m_Data;

		[Token(Token = "0x170001BF")]
		public override string Value
		{
			[Token(Token = "0x60013F0")]
			[Address(RVA = "0xA55A80", Offset = "0xA55A80", VA = "0xA55A80", Slot = "9")]
			get
			{
				return null;
			}
			[Token(Token = "0x60013F1")]
			[Address(RVA = "0xA55A88", Offset = "0xA55A88", VA = "0xA55A88", Slot = "10")]
			set
			{
			}
		}

		[Token(Token = "0x60013F2")]
		[Address(RVA = "0xA55A90", Offset = "0xA55A90", VA = "0xA55A90")]
		public JSONData(string aData)
		{
		}

		[Token(Token = "0x60013F3")]
		[Address(RVA = "0xA55AC4", Offset = "0xA55AC4", VA = "0xA55AC4")]
		public JSONData(float aData)
		{
		}

		[Token(Token = "0x60013F4")]
		[Address(RVA = "0xA55B08", Offset = "0xA55B08", VA = "0xA55B08")]
		public JSONData(double aData)
		{
		}

		[Token(Token = "0x60013F5")]
		[Address(RVA = "0xA55B4C", Offset = "0xA55B4C", VA = "0xA55B4C")]
		public JSONData(bool aData)
		{
		}

		[Token(Token = "0x60013F6")]
		[Address(RVA = "0xA55B88", Offset = "0xA55B88", VA = "0xA55B88")]
		public JSONData(int aData)
		{
		}

		[Token(Token = "0x60013F7")]
		[Address(RVA = "0xA55BC4", Offset = "0xA55BC4", VA = "0xA55BC4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60013F8")]
		[Address(RVA = "0xA55C20", Offset = "0xA55C20", VA = "0xA55C20", Slot = "17")]
		public override string ToString(string aPrefix)
		{
			return null;
		}

		[Token(Token = "0x60013F9")]
		[Address(RVA = "0xA55C7C", Offset = "0xA55C7C", VA = "0xA55C7C", Slot = "28")]
		public override void Serialize(BinaryWriter aWriter)
		{
		}
	}
	[Token(Token = "0x20002E0")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x5CBF58", Offset = "0x5CBF58")]
	internal class JSONLazyCreator : JSONNode
	{
		[Token(Token = "0x4001425")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private JSONNode m_Node;

		[Token(Token = "0x4001426")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string m_Key;

		[Token(Token = "0x170001C0")]
		public override JSONNode Item
		{
			[Token(Token = "0x60013FD")]
			[Address(RVA = "0xA55FB8", Offset = "0xA55FB8", VA = "0xA55FB8", Slot = "5")]
			get
			{
				return null;
			}
			[Token(Token = "0x60013FE")]
			[Address(RVA = "0xA56014", Offset = "0xA56014", VA = "0xA56014", Slot = "6")]
			set
			{
			}
		}

		[Token(Token = "0x170001C1")]
		public override JSONNode Item
		{
			[Token(Token = "0x60013FF")]
			[Address(RVA = "0xA56098", Offset = "0xA56098", VA = "0xA56098", Slot = "7")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001400")]
			[Address(RVA = "0xA56104", Offset = "0xA56104", VA = "0xA56104", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x170001C2")]
		public override int AsInt
		{
			[Token(Token = "0x6001409")]
			[Address(RVA = "0xA56380", Offset = "0xA56380", VA = "0xA56380", Slot = "18")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600140A")]
			[Address(RVA = "0xA56400", Offset = "0xA56400", VA = "0xA56400", Slot = "19")]
			set
			{
			}
		}

		[Token(Token = "0x170001C3")]
		public override float AsFloat
		{
			[Token(Token = "0x600140B")]
			[Address(RVA = "0xA56484", Offset = "0xA56484", VA = "0xA56484", Slot = "20")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600140C")]
			[Address(RVA = "0xA56504", Offset = "0xA56504", VA = "0xA56504", Slot = "21")]
			set
			{
			}
		}

		[Token(Token = "0x170001C4")]
		public override double AsDouble
		{
			[Token(Token = "0x600140D")]
			[Address(RVA = "0xA56588", Offset = "0xA56588", VA = "0xA56588", Slot = "22")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x600140E")]
			[Address(RVA = "0xA56608", Offset = "0xA56608", VA = "0xA56608", Slot = "23")]
			set
			{
			}
		}

		[Token(Token = "0x170001C5")]
		public override bool AsBool
		{
			[Token(Token = "0x600140F")]
			[Address(RVA = "0xA5668C", Offset = "0xA5668C", VA = "0xA5668C", Slot = "24")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001410")]
			[Address(RVA = "0xA5670C", Offset = "0xA5670C", VA = "0xA5670C", Slot = "25")]
			set
			{
			}
		}

		[Token(Token = "0x170001C6")]
		public override JSONArray AsArray
		{
			[Token(Token = "0x6001411")]
			[Address(RVA = "0xA56790", Offset = "0xA56790", VA = "0xA56790", Slot = "26")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001C7")]
		public override JSONClass AsObject
		{
			[Token(Token = "0x6001412")]
			[Address(RVA = "0xA567F4", Offset = "0xA567F4", VA = "0xA567F4", Slot = "27")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60013FA")]
		[Address(RVA = "0xA53918", Offset = "0xA53918", VA = "0xA53918")]
		public JSONLazyCreator(JSONNode aNode)
		{
		}

		[Token(Token = "0x60013FB")]
		[Address(RVA = "0xA54418", Offset = "0xA54418", VA = "0xA54418")]
		public JSONLazyCreator(JSONNode aNode, string aKey)
		{
		}

		[Token(Token = "0x60013FC")]
		[Address(RVA = "0xA55F4C", Offset = "0xA55F4C", VA = "0xA55F4C")]
		private void Set(JSONNode aVal)
		{
		}

		[Token(Token = "0x6001401")]
		[Address(RVA = "0xA56190", Offset = "0xA56190", VA = "0xA56190", Slot = "12")]
		public override void Add(JSONNode aItem)
		{
		}

		[Token(Token = "0x6001402")]
		[Address(RVA = "0xA56214", Offset = "0xA56214", VA = "0xA56214", Slot = "4")]
		public override void Add(string aKey, JSONNode aItem)
		{
		}

		[Token(Token = "0x6001403")]
		[Address(RVA = "0xA562A0", Offset = "0xA562A0", VA = "0xA562A0")]
		public static bool operator ==(JSONLazyCreator a, object b)
		{
			return default(bool);
		}

		[Token(Token = "0x6001404")]
		[Address(RVA = "0xA562B8", Offset = "0xA562B8", VA = "0xA562B8")]
		public static bool operator !=(JSONLazyCreator a, object b)
		{
			return default(bool);
		}

		[Token(Token = "0x6001405")]
		[Address(RVA = "0xA562D0", Offset = "0xA562D0", VA = "0xA562D0", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001406")]
		[Address(RVA = "0xA562E8", Offset = "0xA562E8", VA = "0xA562E8", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6001407")]
		[Address(RVA = "0xA562F8", Offset = "0xA562F8", VA = "0xA562F8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6001408")]
		[Address(RVA = "0xA5633C", Offset = "0xA5633C", VA = "0xA5633C", Slot = "17")]
		public override string ToString(string aPrefix)
		{
			return null;
		}
	}
	[Token(Token = "0x20002E1")]
	public static class JSON
	{
		[Token(Token = "0x6001413")]
		[Address(RVA = "0xA5312C", Offset = "0xA5312C", VA = "0xA5312C")]
		public static JSONNode Parse(string aJSON)
		{
			return null;
		}
	}
}
namespace RogoDigital
{
	[Token(Token = "0x20002E2")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5CBF90", Offset = "0x5CBF90")]
	public class EyeController : BlendSystemUser
	{
		[Token(Token = "0x2000493")]
		public enum ControlMode
		{
			[Token(Token = "0x4001D73")]
			Classic,
			[Token(Token = "0x4001D74")]
			PoseBased
		}

		[Token(Token = "0x2000494")]
		public enum Axis
		{
			[Token(Token = "0x4001D76")]
			X_Positive,
			[Token(Token = "0x4001D77")]
			X_Negative,
			[Token(Token = "0x4001D78")]
			Y_Positive,
			[Token(Token = "0x4001D79")]
			Y_Negative,
			[Token(Token = "0x4001D7A")]
			Z_Positive,
			[Token(Token = "0x4001D7B")]
			Z_Negative
		}

		[Token(Token = "0x2000495")]
		public class BoneShapeInfo
		{
			[Token(Token = "0x4001D7C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private Transform bone;

			[Token(Token = "0x4001D7D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private Vector3 m_storedPosition;

			[Token(Token = "0x4001D7E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			private Quaternion m_storedRotation;

			[Token(Token = "0x4001D7F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public Vector3 targetPosition;

			[Token(Token = "0x4001D80")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public Quaternion targetRotation;

			[Token(Token = "0x1700037F")]
			public Vector3 storedPosition
			{
				[Token(Token = "0x6001CA2")]
				[Address(RVA = "0x7E8F88", Offset = "0x7E8F88", VA = "0x7E8F88")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6001CA3")]
				[Address(RVA = "0x7E8F94", Offset = "0x7E8F94", VA = "0x7E8F94")]
				set
				{
				}
			}

			[Token(Token = "0x17000380")]
			public Quaternion storedRotation
			{
				[Token(Token = "0x6001CA4")]
				[Address(RVA = "0x7E8FBC", Offset = "0x7E8FBC", VA = "0x7E8FBC")]
				get
				{
					return default(Quaternion);
				}
				[Token(Token = "0x6001CA5")]
				[Address(RVA = "0x7E8FC8", Offset = "0x7E8FC8", VA = "0x7E8FC8")]
				set
				{
				}
			}

			[Token(Token = "0x6001CA6")]
			[Address(RVA = "0x7E8FF0", Offset = "0x7E8FF0", VA = "0x7E8FF0")]
			public BoneShapeInfo(BoneShape boneShape)
			{
			}
		}

		[Token(Token = "0x2000496")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CE22C", Offset = "0x5CE22C")]
		private sealed class <CloseEyes>d__58 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001D81")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001D82")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001D83")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public EyeController <>4__this;

			[Token(Token = "0x4001D84")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private bool <end>5__2;

			[Token(Token = "0x17000381")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001CAA")]
				[Address(RVA = "0x7E8710", Offset = "0x7E8710", VA = "0x7E8710", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000382")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001CAC")]
				[Address(RVA = "0x7E8758", Offset = "0x7E8758", VA = "0x7E8758", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001CA7")]
			[Address(RVA = "0x7E7F38", Offset = "0x7E7F38", VA = "0x7E7F38")]
			[DebuggerHidden]
			public <CloseEyes>d__58(int <>1__state)
			{
			}

			[Token(Token = "0x6001CA8")]
			[Address(RVA = "0x7E7F64", Offset = "0x7E7F64", VA = "0x7E7F64", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001CA9")]
			[Address(RVA = "0x7E7F68", Offset = "0x7E7F68", VA = "0x7E7F68", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001CAB")]
			[Address(RVA = "0x7E8718", Offset = "0x7E8718", VA = "0x7E8718", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000497")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CE23C", Offset = "0x5CE23C")]
		private sealed class <OpenEyes>d__59 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001D85")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001D86")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001D87")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public EyeController <>4__this;

			[Token(Token = "0x4001D88")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private bool <end>5__2;

			[Token(Token = "0x17000383")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001CB0")]
				[Address(RVA = "0x7E8F38", Offset = "0x7E8F38", VA = "0x7E8F38", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000384")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001CB2")]
				[Address(RVA = "0x7E8F80", Offset = "0x7E8F80", VA = "0x7E8F80", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001CAD")]
			[Address(RVA = "0x7E8760", Offset = "0x7E8760", VA = "0x7E8760")]
			[DebuggerHidden]
			public <OpenEyes>d__59(int <>1__state)
			{
			}

			[Token(Token = "0x6001CAE")]
			[Address(RVA = "0x7E878C", Offset = "0x7E878C", VA = "0x7E878C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001CAF")]
			[Address(RVA = "0x7E8790", Offset = "0x7E8790", VA = "0x7E8790", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001CB1")]
			[Address(RVA = "0x7E8F40", Offset = "0x7E8F40", VA = "0x7E8F40", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001427")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool blinkingEnabled;

		[Token(Token = "0x4001428")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public ControlMode blinkingControlMode;

		[Token(Token = "0x4001429")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public RogoDigital.Lipsync.Shape blinkingShape;

		[Token(Token = "0x400142A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x5D2A90", Offset = "0x5D2A90")]
		public int leftEyeBlinkBlendable;

		[Token(Token = "0x400142B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x5D2AC8", Offset = "0x5D2AC8")]
		public int rightEyeBlinkBlendable;

		[Token(Token = "0x400142C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float minimumBlinkGap;

		[Token(Token = "0x400142D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float maximumBlinkGap;

		[Token(Token = "0x400142E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x5D2B00", Offset = "0x5D2B00")]
		public float blinkDuration;

		[Token(Token = "0x400142F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public bool randomLookingEnabled;

		[Token(Token = "0x4001430")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public ControlMode lookingControlMode;

		[Token(Token = "0x4001431")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public RogoDigital.Lipsync.Shape lookingUpShape;

		[Token(Token = "0x4001432")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public RogoDigital.Lipsync.Shape lookingDownShape;

		[Token(Token = "0x4001433")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public RogoDigital.Lipsync.Shape lookingLeftShape;

		[Token(Token = "0x4001434")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public RogoDigital.Lipsync.Shape lookingRightShape;

		[Token(Token = "0x4001435")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x5D2B38", Offset = "0x5D2B38")]
		private Transform _leftEyeLookAtBone;

		[Token(Token = "0x4001436")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x5D2B84", Offset = "0x5D2B84")]
		private Transform _rightEyeLookAtBone;

		[Token(Token = "0x4001437")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Vector2 eyeRotationRangeX;

		[Token(Token = "0x4001438")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Vector2 eyeRotationRangeY;

		[Token(Token = "0x4001439")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Vector3 eyeLookOffset;

		[Token(Token = "0x400143A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public Axis eyeForwardAxis;

		[Token(Token = "0x400143B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public float eyeTurnSpeed;

		[Token(Token = "0x400143C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public float minimumChangeDirectionGap;

		[Token(Token = "0x400143D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public float maximumChangeDirectionGap;

		[Token(Token = "0x400143E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public bool targetEnabled;

		[Token(Token = "0x400143F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAD")]
		public bool autoTarget;

		[Token(Token = "0x4001440")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public string autoTargetTag;

		[Token(Token = "0x4001441")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public float autoTargetDistance;

		[Token(Token = "0x4001442")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public Transform viewTarget;

		[Token(Token = "0x4001443")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public float targetWeight;

		[Token(Token = "0x4001444")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		public bool boneUpdateAnimation;

		[Token(Token = "0x4001445")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private float blinkTimer;

		[Token(Token = "0x4001446")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private bool blinking;

		[Token(Token = "0x4001447")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD5")]
		private bool _keepEyesClosed;

		[Token(Token = "0x4001448")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD6")]
		private bool _asyncBlending;

		[Token(Token = "0x4001449")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Transform leftEyeDummy;

		[Token(Token = "0x400144A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Transform rightEyeDummy;

		[Token(Token = "0x400144B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Quaternion leftRotation;

		[Token(Token = "0x400144C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Quaternion rightRotation;

		[Token(Token = "0x400144D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Vector3[] axisOffsets;

		[Token(Token = "0x400144E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private float lookTimer;

		[Token(Token = "0x400144F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		private Quaternion randomAngle;

		[Token(Token = "0x4001450")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		private Vector2 randomBlend;

		[Token(Token = "0x4001451")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private Transform target;

		[Token(Token = "0x4001452")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private Quaternion leftTargetAngle;

		[Token(Token = "0x4001453")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private Quaternion rightTargetAngle;

		[Token(Token = "0x4001454")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private Transform[] markedTargets;

		[Token(Token = "0x4001455")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private Dictionary<Transform, BoneShapeInfo> boneShapes;

		[Token(Token = "0x170001C8")]
		public bool keepEyesClosed
		{
			[Token(Token = "0x6001414")]
			[Address(RVA = "0xBF3674", Offset = "0xBF3674", VA = "0xBF3674")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001415")]
			[Address(RVA = "0xBF367C", Offset = "0xBF367C", VA = "0xBF367C")]
			set
			{
			}
		}

		[Token(Token = "0x170001C9")]
		public Transform LeftEyeLookAtBone
		{
			[Token(Token = "0x6001416")]
			[Address(RVA = "0xBF37D4", Offset = "0xBF37D4", VA = "0xBF37D4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001417")]
			[Address(RVA = "0xBF37DC", Offset = "0xBF37DC", VA = "0xBF37DC")]
			set
			{
			}
		}

		[Token(Token = "0x170001CA")]
		public Transform RightEyeLookAtBone
		{
			[Token(Token = "0x6001418")]
			[Address(RVA = "0xBF3D04", Offset = "0xBF3D04", VA = "0xBF3D04")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001419")]
			[Address(RVA = "0xBF3D0C", Offset = "0xBF3D0C", VA = "0xBF3D0C")]
			set
			{
			}
		}

		[Token(Token = "0x600141A")]
		[Address(RVA = "0xBF3DC0", Offset = "0xBF3DC0", VA = "0xBF3DC0")]
		private void Start()
		{
		}

		[Token(Token = "0x600141B")]
		[Address(RVA = "0xBF489C", Offset = "0xBF489C", VA = "0xBF489C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600141C")]
		[Address(RVA = "0xBF36E4", Offset = "0xBF36E4", VA = "0xBF36E4")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D9F1C", Offset = "0x5D9F1C")]
		private IEnumerator CloseEyes()
		{
			return null;
		}

		[Token(Token = "0x600141D")]
		[Address(RVA = "0xBF375C", Offset = "0xBF375C", VA = "0xBF375C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5D9F7C", Offset = "0x5D9F7C")]
		private IEnumerator OpenEyes()
		{
			return null;
		}

		[Token(Token = "0x600141E")]
		[Address(RVA = "0xBF3890", Offset = "0xBF3890", VA = "0xBF3890")]
		private void FixDummyHierarchy()
		{
		}

		[Token(Token = "0x600141F")]
		[Address(RVA = "0xBF4778", Offset = "0xBF4778", VA = "0xBF4778")]
		public void FindTargets()
		{
		}

		[Token(Token = "0x6001420")]
		[Address(RVA = "0xBF8DC0", Offset = "0xBF8DC0", VA = "0xBF8DC0")]
		public static Vector3 Vector3LerpAngle(Vector3 a, Vector3 b, float t)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001421")]
		[Address(RVA = "0xBF8E48", Offset = "0xBF8E48", VA = "0xBF8E48")]
		public void SetLookAtAmount(float amount)
		{
		}

		[Token(Token = "0x6001422")]
		[Address(RVA = "0xBF8E50", Offset = "0xBF8E50", VA = "0xBF8E50")]
		public EyeController()
		{
		}
	}
}
namespace RogoDigital.Lipsync
{
	[Token(Token = "0x20002E3")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x5CBFC8", Offset = "0x5CBFC8")]
	public class AdvancedBlendshapeBlendSystem : BlendSystem
	{
		[Token(Token = "0x4001456")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private BlendshapeManager manager;

		[Token(Token = "0x6001423")]
		[Address(RVA = "0xC06CBC", Offset = "0xC06CBC", VA = "0xC06CBC", Slot = "4")]
		public override void OnEnable()
		{
		}

		[Token(Token = "0x6001424")]
		[Address(RVA = "0xC06F30", Offset = "0xC06F30", VA = "0xC06F30", Slot = "9")]
		public override string[] GetBlendables()
		{
			return null;
		}

		[Token(Token = "0x6001425")]
		[Address(RVA = "0xC072D8", Offset = "0xC072D8", VA = "0xC072D8", Slot = "5")]
		public override void SetBlendableValue(int blendable, float value)
		{
		}

		[Token(Token = "0x6001426")]
		[Address(RVA = "0xC0751C", Offset = "0xC0751C", VA = "0xC0751C")]
		public AdvancedBlendshapeBlendSystem()
		{
		}
	}
	[Token(Token = "0x20002E4")]
	public class BlendshapeBlendSystem : BlendSystem
	{
		[Token(Token = "0x4001457")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public SkinnedMeshRenderer characterMesh;

		[Token(Token = "0x4001458")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public SkinnedMeshRenderer[] optionalOtherMeshes;

		[Token(Token = "0x4001459")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool wireframeVisible;

		[Token(Token = "0x6001427")]
		[Address(RVA = "0xC14C54", Offset = "0xC14C54", VA = "0xC14C54", Slot = "4")]
		public override void OnEnable()
		{
		}

		[Token(Token = "0x6001428")]
		[Address(RVA = "0xC14D40", Offset = "0xC14D40", VA = "0xC14D40", Slot = "5")]
		public override void SetBlendableValue(int blendable, float value)
		{
		}

		[Token(Token = "0x6001429")]
		[Address(RVA = "0xC14E7C", Offset = "0xC14E7C", VA = "0xC14E7C", Slot = "9")]
		public override string[] GetBlendables()
		{
			return null;
		}

		[Token(Token = "0x600142A")]
		[Address(RVA = "0xC15090", Offset = "0xC15090", VA = "0xC15090", Slot = "6")]
		public override void OnVariableChanged()
		{
		}

		[Token(Token = "0x600142B")]
		[Address(RVA = "0xC15108", Offset = "0xC15108", VA = "0xC15108")]
		[AttributeAttribute(Name = "BlendSystemButton", RVA = "0x5D9FDC", Offset = "0x5D9FDC")]
		public void ToggleWireframe()
		{
		}

		[Token(Token = "0x600142C")]
		[Address(RVA = "0xC15188", Offset = "0xC15188", VA = "0xC15188")]
		public BlendshapeBlendSystem()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002E5")]
	public class BlendshapeManager : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000498")]
		public struct AdvancedBlendShape
		{
			[Token(Token = "0x4001D89")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public string name;

			[Token(Token = "0x4001D8A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public BlendShapeMapping[] mappings;
		}

		[Serializable]
		[Token(Token = "0x2000499")]
		public struct BlendShapeMapping
		{
			[Token(Token = "0x4001D8B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public SkinnedMeshRenderer skinnedMeshRenderer;

			[Token(Token = "0x4001D8C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public int blendShapeIndex;
		}

		[Token(Token = "0x400145A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x5D2BE0", Offset = "0x5D2BE0")]
		public AdvancedBlendShape[] blendShapes;

		[Token(Token = "0x400145B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public AdvancedBlendshapeBlendSystem blendSystem;

		[Token(Token = "0x600142D")]
		[Address(RVA = "0xC15194", Offset = "0xC15194", VA = "0xC15194")]
		public BlendshapeManager()
		{
		}
	}
	[Token(Token = "0x20002E6")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x5CD028", Offset = "0x5CD028")]
	public class SpriteBlendSystem : BlendSystem
	{
		[Token(Token = "0x400145C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private SpriteManager manager;

		[Token(Token = "0x600142E")]
		[Address(RVA = "0x13AE824", Offset = "0x13AE824", VA = "0x13AE824", Slot = "4")]
		public override void OnEnable()
		{
		}

		[Token(Token = "0x600142F")]
		[Address(RVA = "0x13AEA28", Offset = "0x13AEA28", VA = "0x13AEA28", Slot = "5")]
		public override void SetBlendableValue(int blendable, float value)
		{
		}

		[Token(Token = "0x6001430")]
		[Address(RVA = "0x13AECCC", Offset = "0x13AECCC", VA = "0x13AECCC", Slot = "9")]
		public override string[] GetBlendables()
		{
			return null;
		}

		[Token(Token = "0x6001431")]
		[Address(RVA = "0x13AF1D8", Offset = "0x13AF1D8", VA = "0x13AF1D8", Slot = "6")]
		public override void OnVariableChanged()
		{
		}

		[Token(Token = "0x6001432")]
		[Address(RVA = "0x13AF1E4", Offset = "0x13AF1E4", VA = "0x13AF1E4")]
		[AttributeAttribute(Name = "BlendSystemButton", RVA = "0x5DA014", Offset = "0x5DA014")]
		public void ShowHelp()
		{
		}

		[Token(Token = "0x6001433")]
		[Address(RVA = "0x13AF22C", Offset = "0x13AF22C", VA = "0x13AF22C")]
		public SpriteBlendSystem()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002E7")]
	public class SpriteManager : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200049A")]
		public class SpriteGroup
		{
			[Token(Token = "0x4001D8D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[SerializeField]
			public string groupName;

			[Token(Token = "0x4001D8E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[SerializeField]
			public SpriteRenderer spriteRenderer;

			[Token(Token = "0x4001D8F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[SerializeField]
			public Sprite defaultSprite;

			[Token(Token = "0x6001CB3")]
			[Address(RVA = "0x138A608", Offset = "0x138A608", VA = "0x138A608")]
			public SpriteGroup(string groupName)
			{
			}
		}

		[Token(Token = "0x400145D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public List<Sprite> availableSprites;

		[Token(Token = "0x400145E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		public List<SpriteGroup> groups;

		[Token(Token = "0x400145F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public SpriteBlendSystem blendSystem;

		[Token(Token = "0x6001434")]
		[Address(RVA = "0x13AF234", Offset = "0x13AF234", VA = "0x13AF234")]
		public SpriteManager()
		{
		}
	}
	[Token(Token = "0x20002E8")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x5CD088", Offset = "0x5CD088")]
	public class TextureOffsetBlendSystem : BlendSystem
	{
		[Token(Token = "0x4001460")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private TextureOffsetManager manager;

		[Token(Token = "0x4001461")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Dictionary<int, int> groupLookup;

		[Token(Token = "0x4001462")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Dictionary<string, int> reverseGroupLookup;

		[Token(Token = "0x6001435")]
		[Address(RVA = "0xE9449C", Offset = "0xE9449C", VA = "0xE9449C", Slot = "4")]
		public override void OnEnable()
		{
		}

		[Token(Token = "0x6001436")]
		[Address(RVA = "0xE946A8", Offset = "0xE946A8", VA = "0xE946A8")]
		private void CacheGroups()
		{
		}

		[Token(Token = "0x6001437")]
		[Address(RVA = "0xE94ACC", Offset = "0xE94ACC", VA = "0xE94ACC", Slot = "5")]
		public override void SetBlendableValue(int blendable, float value)
		{
		}

		[Token(Token = "0x6001438")]
		[Address(RVA = "0xE94E58", Offset = "0xE94E58", VA = "0xE94E58", Slot = "9")]
		public override string[] GetBlendables()
		{
			return null;
		}

		[Token(Token = "0x6001439")]
		[Address(RVA = "0xE952F4", Offset = "0xE952F4", VA = "0xE952F4", Slot = "6")]
		public override void OnVariableChanged()
		{
		}

		[Token(Token = "0x600143A")]
		[Address(RVA = "0xE95300", Offset = "0xE95300", VA = "0xE95300")]
		public TextureOffsetBlendSystem()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002E9")]
	public class TextureOffsetManager : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200049B")]
		public class MaterialTextureGroup
		{
			[Token(Token = "0x4001D90")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[SerializeField]
			public string displayName;

			[Token(Token = "0x4001D91")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x5D62A4", Offset = "0x5D62A4")]
			[SerializeField]
			public Material material;

			[Token(Token = "0x4001D92")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[SerializeField]
			public string texturePropertyName;

			[Token(Token = "0x4001D93")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x5D62EC", Offset = "0x5D62EC")]
			[SerializeField]
			public Texture2D defaultTexture;

			[Token(Token = "0x4001D94")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[SerializeField]
			public Vector2 defaultTextureOffset;

			[Token(Token = "0x4001D95")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[SerializeField]
			public Vector2 defaultTextureScale;

			[Token(Token = "0x4001D96")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x5D6344", Offset = "0x5D6344")]
			[SerializeField]
			public TextureSetting[] textureSettings;

			[Token(Token = "0x6001CB4")]
			[Address(RVA = "0x138B5F8", Offset = "0x138B5F8", VA = "0x138B5F8")]
			public MaterialTextureGroup()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200049C")]
		public class TextureSetting
		{
			[Token(Token = "0x4001D97")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[SerializeField]
			public string displayName;

			[Token(Token = "0x4001D98")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x5D638C", Offset = "0x5D638C")]
			[SerializeField]
			public Texture2D texture;

			[Token(Token = "0x4001D99")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[SerializeField]
			public Vector2 textureOffset;

			[Token(Token = "0x4001D9A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[SerializeField]
			public Vector2 textureScale;

			[Token(Token = "0x6001CB5")]
			[Address(RVA = "0x138B628", Offset = "0x138B628", VA = "0x138B628")]
			public TextureSetting()
			{
			}
		}

		[Token(Token = "0x4001463")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public MaterialTextureGroup[] materialGroups;

		[Token(Token = "0x4001464")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public TextureOffsetBlendSystem blendSystem;

		[Token(Token = "0x600143B")]
		[Address(RVA = "0xE95308", Offset = "0xE95308", VA = "0xE95308")]
		public TextureOffsetManager()
		{
		}
	}
	[Token(Token = "0x20002EA")]
	[ExecuteInEditMode]
	public class BlendSystem : MonoBehaviour
	{
		[Token(Token = "0x200049D")]
		public delegate void BlendSystemGenericDelegate();

		[NonSerialized]
		[Token(Token = "0x4001465")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string blendableDisplayName;

		[NonSerialized]
		[Token(Token = "0x4001466")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string blendableDisplayNamePlural;

		[NonSerialized]
		[Token(Token = "0x4001467")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string noBlendablesMessage;

		[NonSerialized]
		[Token(Token = "0x4001468")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string notReadyMessage;

		[NonSerialized]
		[Token(Token = "0x4001469")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float blendRangeLow;

		[NonSerialized]
		[Token(Token = "0x400146A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float blendRangeHigh;

		[NonSerialized]
		[Token(Token = "0x400146B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool allowResyncing;

		[Token(Token = "0x400146C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		public bool isReady;

		[Token(Token = "0x400146D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public BlendSystemUser[] users;

		[Token(Token = "0x400146E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public BlendSystemGenericDelegate onBlendablesChanged;

		[Token(Token = "0x400146F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		[HideInInspector]
		private List<Blendable> _blendables;

		[Token(Token = "0x170001CB")]
		public int blendableCount
		{
			[Token(Token = "0x600143C")]
			[Address(RVA = "0xC0713C", Offset = "0xC0713C", VA = "0xC0713C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x600143D")]
		[Address(RVA = "0xC06EEC", Offset = "0xC06EEC", VA = "0xC06EEC", Slot = "4")]
		public virtual void OnEnable()
		{
		}

		[Token(Token = "0x600143E")]
		[Address(RVA = "0xC14318", Offset = "0xC14318", VA = "0xC14318")]
		public void Register(BlendSystemUser user)
		{
		}

		[Token(Token = "0x600143F")]
		[Address(RVA = "0xC1469C", Offset = "0xC1469C", VA = "0xC1469C")]
		public void Unregister(BlendSystemUser user)
		{
		}

		[Token(Token = "0x6001440")]
		[Address(RVA = "0xC148F8", Offset = "0xC148F8", VA = "0xC148F8", Slot = "5")]
		public virtual void SetBlendableValue(int blendable, float value)
		{
		}

		[Token(Token = "0x6001441")]
		[Address(RVA = "0xC148FC", Offset = "0xC148FC", VA = "0xC148FC")]
		public float GetBlendableValue(int blendable)
		{
			return default(float);
		}

		[Token(Token = "0x6001442")]
		[Address(RVA = "0xC149CC", Offset = "0xC149CC", VA = "0xC149CC", Slot = "6")]
		public virtual void OnVariableChanged()
		{
		}

		[Token(Token = "0x6001443")]
		[Address(RVA = "0xC149D0", Offset = "0xC149D0", VA = "0xC149D0", Slot = "7")]
		public virtual void OnBlendSystemAdded()
		{
		}

		[Token(Token = "0x6001444")]
		[Address(RVA = "0xC149D4", Offset = "0xC149D4", VA = "0xC149D4", Slot = "8")]
		public virtual void OnBlendSystemRemoved()
		{
		}

		[Token(Token = "0x6001445")]
		[Address(RVA = "0xC149D8", Offset = "0xC149D8", VA = "0xC149D8", Slot = "9")]
		public virtual string[] GetBlendables()
		{
			return null;
		}

		[Token(Token = "0x6001446")]
		[Address(RVA = "0xC149E0", Offset = "0xC149E0", VA = "0xC149E0", Slot = "10")]
		public virtual void OnBlendableAddedToPose(int blendable)
		{
		}

		[Token(Token = "0x6001447")]
		[Address(RVA = "0xC149E4", Offset = "0xC149E4", VA = "0xC149E4", Slot = "11")]
		public virtual void OnBlendableRemovedFromPose(int blendable)
		{
		}

		[Token(Token = "0x6001448")]
		[Address(RVA = "0xC071DC", Offset = "0xC071DC", VA = "0xC071DC")]
		public void AddBlendable(int blendable, float currentValue)
		{
		}

		[Token(Token = "0x6001449")]
		[Address(RVA = "0xC14A24", Offset = "0xC14A24", VA = "0xC14A24")]
		public void ClearBlendables()
		{
		}

		[Token(Token = "0x600144A")]
		[Address(RVA = "0xC073FC", Offset = "0xC073FC", VA = "0xC073FC")]
		public void SetInternalValue(int blendable, float value)
		{
		}

		[Token(Token = "0x600144B")]
		[Address(RVA = "0xC07520", Offset = "0xC07520", VA = "0xC07520")]
		public BlendSystem()
		{
		}
	}
	[Token(Token = "0x20002EB")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x5CD0F8", Offset = "0x5CD0F8")]
	public class BlendSystemButton : Attribute
	{
		[Token(Token = "0x200049E")]
		public struct Reference
		{
			[Token(Token = "0x4001D9B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public string displayName;

			[Token(Token = "0x4001D9C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public MethodInfo method;

			[Token(Token = "0x6001CBA")]
			[Address(RVA = "0x7E4C48", Offset = "0x7E4C48", VA = "0x7E4C48")]
			public Reference(string displayName, MethodInfo method)
			{
			}
		}

		[Token(Token = "0x4001470")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string displayName;

		[Token(Token = "0x600144C")]
		[Address(RVA = "0xC14A9C", Offset = "0xC14A9C", VA = "0xC14A9C")]
		public BlendSystemButton(string displayName)
		{
		}
	}
	[Token(Token = "0x20002EC")]
	public class BlendSystemUser : MonoBehaviour
	{
		[Token(Token = "0x4001471")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public BlendSystem blendSystem;

		[Token(Token = "0x600144D")]
		[Address(RVA = "0xC14AD0", Offset = "0xC14AD0", VA = "0xC14AD0")]
		protected void OnDestroy()
		{
		}

		[Token(Token = "0x600144E")]
		[Address(RVA = "0xC14AEC", Offset = "0xC14AEC", VA = "0xC14AEC")]
		protected void CleanUpBlendSystems()
		{
		}

		[Token(Token = "0x600144F")]
		[Address(RVA = "0xC14C4C", Offset = "0xC14C4C", VA = "0xC14C4C")]
		public BlendSystemUser()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002ED")]
	public class Blendable
	{
		[Token(Token = "0x4001472")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int number;

		[Token(Token = "0x4001473")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float currentWeight;

		[Token(Token = "0x6001450")]
		[Address(RVA = "0xC149E8", Offset = "0xC149E8", VA = "0xC149E8")]
		public Blendable(int number, float currentWeight)
		{
		}
	}
	[Token(Token = "0x20002EE")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x5CD12C", Offset = "0x5CD12C")]
	public class BlendshapePreset : ScriptableObject
	{
		[Token(Token = "0x4001474")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public List<PhonemeShape> phonemeShapes;

		[Token(Token = "0x4001475")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		public List<EmotionShape> emotionShapes;

		[Token(Token = "0x6001451")]
		[Address(RVA = "0xC151FC", Offset = "0xC151FC", VA = "0xC151FC")]
		public BlendshapePreset()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002EF")]
	public class BoneShape
	{
		[Token(Token = "0x4001476")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		public Transform bone;

		[Token(Token = "0x4001477")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public Vector3 endPosition;

		[Token(Token = "0x4001478")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		public Vector3 endRotation;

		[Token(Token = "0x4001479")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		public Vector3 endScale;

		[Token(Token = "0x400147A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		public bool lockPosition;

		[Token(Token = "0x400147B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
		[SerializeField]
		public bool lockRotation;

		[Token(Token = "0x400147C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector3 neutralPosition;

		[Token(Token = "0x400147D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public Vector3 neutralRotation;

		[Token(Token = "0x400147E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Vector3 neutralScale;

		[Token(Token = "0x6001452")]
		[Address(RVA = "0x10A0CA4", Offset = "0x10A0CA4", VA = "0x10A0CA4")]
		public void SetNeutral()
		{
		}

		[Token(Token = "0x6001453")]
		[Address(RVA = "0x10A0D64", Offset = "0x10A0D64", VA = "0x10A0D64")]
		public BoneShape(Transform bone, Vector3 endPosition, Vector3 endRotation, Vector3 endScale)
		{
		}

		[Token(Token = "0x6001454")]
		[Address(RVA = "0x10A0E20", Offset = "0x10A0E20", VA = "0x10A0E20")]
		public BoneShape(Transform bone, Vector3 endPosition, Vector3 endRotation)
		{
		}

		[Token(Token = "0x6001455")]
		[Address(RVA = "0x10A0EE0", Offset = "0x10A0EE0", VA = "0x10A0EE0")]
		public BoneShape()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002F0")]
	public class EmotionMarker
	{
		[Token(Token = "0x400147F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		public string emotion;

		[Token(Token = "0x4001480")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public bool isMixer;

		[Token(Token = "0x4001481")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		public EmotionMixer mixer;

		[Token(Token = "0x4001482")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		public float startTime;

		[Token(Token = "0x4001483")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		public float endTime;

		[Token(Token = "0x4001484")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		public float blendInTime;

		[Token(Token = "0x4001485")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		public float blendOutTime;

		[Token(Token = "0x4001486")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		public bool blendToMarker;

		[Token(Token = "0x4001487")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		[SerializeField]
		public bool blendFromMarker;

		[Token(Token = "0x4001488")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
		[SerializeField]
		public bool customBlendIn;

		[Token(Token = "0x4001489")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B")]
		[SerializeField]
		public bool customBlendOut;

		[Token(Token = "0x400148A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		public float intensity;

		[Token(Token = "0x400148B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		public bool continuousVariation;

		[Token(Token = "0x400148C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[SerializeField]
		public float variationFrequency;

		[Token(Token = "0x400148D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		public float intensityVariation;

		[Token(Token = "0x400148E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[SerializeField]
		public float blendableVariation;

		[Token(Token = "0x400148F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		public float bonePositionVariation;

		[Token(Token = "0x4001490")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[SerializeField]
		public float boneRotationVariation;

		[Token(Token = "0x4001491")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool invalid;

		[Token(Token = "0x6001456")]
		[Address(RVA = "0xA023C4", Offset = "0xA023C4", VA = "0xA023C4")]
		public EmotionMarker(string emotion, float startTime, float endTime, float blendInTime, float blendOutTime, bool blendToMarker, bool blendFromMarker, bool customBlendIn, bool customBlendOut)
		{
		}

		[Token(Token = "0x6001457")]
		[Address(RVA = "0xA02484", Offset = "0xA02484", VA = "0xA02484")]
		public EmotionMarker(EmotionMixer mixer, float startTime, float endTime, float blendInTime, float blendOutTime, bool blendToMarker, bool blendFromMarker, bool customBlendIn, bool customBlendOut)
		{
		}

		[Token(Token = "0x6001458")]
		[Address(RVA = "0xA0254C", Offset = "0xA0254C", VA = "0xA0254C")]
		public EmotionMarker(string emotion, float startTime, float endTime, float blendInTime, float blendOutTime, bool blendToMarker, bool blendFromMarker, bool customBlendIn, bool customBlendOut, float intensity)
		{
		}

		[Token(Token = "0x6001459")]
		[Address(RVA = "0xA02628", Offset = "0xA02628", VA = "0xA02628")]
		public EmotionMarker CreateCopy()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x20002F1")]
	public class EmotionMixer
	{
		[Serializable]
		[Token(Token = "0x200049F")]
		public struct EmotionComponent
		{
			[Token(Token = "0x4001D9D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public string emotion;

			[Token(Token = "0x4001D9E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public float weight;

			[Token(Token = "0x6001CBB")]
			[Address(RVA = "0x7E7A54", Offset = "0x7E7A54", VA = "0x7E7A54")]
			public EmotionComponent(string emotion, float weight)
			{
			}
		}

		[Token(Token = "0x20004A0")]
		public enum MixingMode
		{
			[Token(Token = "0x4001DA0")]
			Normal,
			[Token(Token = "0x4001DA1")]
			Additive
		}

		[Token(Token = "0x4001492")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		public List<EmotionComponent> emotions;

		[Token(Token = "0x4001493")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public MixingMode mixingMode;

		[Token(Token = "0x4001494")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Color displayColor;

		[Token(Token = "0x600145A")]
		[Address(RVA = "0xA02740", Offset = "0xA02740", VA = "0xA02740")]
		public EmotionMixer()
		{
		}

		[Token(Token = "0x600145B")]
		[Address(RVA = "0xA027F4", Offset = "0xA027F4", VA = "0xA027F4")]
		public EmotionShape GetShape(LipSync character)
		{
			return null;
		}

		[Token(Token = "0x600145C")]
		[Address(RVA = "0xA03184", Offset = "0xA03184", VA = "0xA03184")]
		public void SetWeight(int index, float weight)
		{
		}

		[Token(Token = "0x600145D")]
		[Address(RVA = "0xA0318C", Offset = "0xA0318C", VA = "0xA0318C")]
		public void SetWeight(int index, float weight, bool bypassMinChecks)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002F2")]
	public class EmotionShape : Shape
	{
		[Token(Token = "0x4001495")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		public string emotion;

		[Token(Token = "0x600145E")]
		[Address(RVA = "0xA0304C", Offset = "0xA0304C", VA = "0xA0304C")]
		public EmotionShape(string eEmotion)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002F3")]
	public class GestureMarker
	{
		[Token(Token = "0x4001496")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		public string gesture;

		[Token(Token = "0x4001497")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public float time;

		[Token(Token = "0x600145F")]
		[Address(RVA = "0x13EC4B8", Offset = "0x13EC4B8", VA = "0x13EC4B8")]
		public GestureMarker(string gesture, float time)
		{
		}

		[Token(Token = "0x6001460")]
		[Address(RVA = "0x13EC500", Offset = "0x13EC500", VA = "0x13EC500")]
		public GestureMarker CreateCopy()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x20002F4")]
	public class LipSyncData : ScriptableObject
	{
		[Token(Token = "0x4001498")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioClip clip;

		[Token(Token = "0x4001499")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PhonemeMarker[] phonemeData;

		[Token(Token = "0x400149A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public EmotionMarker[] emotionData;

		[Token(Token = "0x400149B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GestureMarker[] gestureData;

		[Token(Token = "0x400149C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float version;

		[Token(Token = "0x400149D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float length;

		[Token(Token = "0x400149E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string transcript;

		[Token(Token = "0x400149F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public AnimationCurve[] phonemePoseCurves;

		[Token(Token = "0x40014A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AnimationCurve[] emotionPoseCurves;

		[Token(Token = "0x40014A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public int targetComponentID;

		[Token(Token = "0x40014A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public bool isPreprocessed;

		[Token(Token = "0x40014A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public List<int> indexBlendables;

		[Token(Token = "0x40014A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public List<AnimationCurve> animCurves;

		[Token(Token = "0x40014A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public List<Transform> bones;

		[Token(Token = "0x40014A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public List<TransformAnimationCurve> boneCurves;

		[Token(Token = "0x40014A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public List<Vector3> boneNeutralPositions;

		[Token(Token = "0x40014A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public List<Vector3> boneNeutralScales;

		[Token(Token = "0x40014A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public List<Quaternion> boneNeutralRotations;

		[Token(Token = "0x6001461")]
		[Address(RVA = "0xA64AE4", Offset = "0xA64AE4", VA = "0xA64AE4")]
		public void GenerateCurves(int phonemeCount, int emotionCount)
		{
		}

		[Token(Token = "0x6001462")]
		[Address(RVA = "0xA64F60", Offset = "0xA64F60", VA = "0xA64F60")]
		public static explicit operator LipSyncData(TemporaryLipSyncData data)
		{
			return null;
		}

		[Token(Token = "0x6001463")]
		[Address(RVA = "0xA652DC", Offset = "0xA652DC", VA = "0xA652DC")]
		public LipSyncData()
		{
		}
	}
	[Token(Token = "0x20002F5")]
	public static class LipSyncExtensions
	{
		[Token(Token = "0x6001464")]
		[Address(RVA = "0xA65360", Offset = "0xA65360", VA = "0xA65360")]
		public static Transform FindDeepChild(this Transform aParent, string aName)
		{
			return null;
		}

		[Token(Token = "0x6001465")]
		[Address(RVA = "0xA656B0", Offset = "0xA656B0", VA = "0xA656B0")]
		public static Vector3 InverseTransformEulerAngle(this Transform transform, Vector3 eulerAngle)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001466")]
		[Address(RVA = "0xA65754", Offset = "0xA65754", VA = "0xA65754")]
		public static Vector3 TransformEulerAngle(this Transform transform, Vector3 eulerAngle)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001467")]
		[Address(RVA = "0xA65724", Offset = "0xA65724", VA = "0xA65724")]
		public static Vector3 ToPositiveEuler(this Vector3 eulerAngle)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001468")]
		[Address(RVA = "0xA657F8", Offset = "0xA657F8", VA = "0xA657F8")]
		public static Vector3 ToNegativeEuler(this Vector3 eulerAngle)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001469")]
		[Address(RVA = "0xA6579C", Offset = "0xA6579C", VA = "0xA6579C")]
		private static Vector3 ClampRange(Vector3 eulerAngle)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600146A")]
		[Address(RVA = "0xA65830", Offset = "0xA65830", VA = "0xA65830")]
		public static EmotionMarker PreviousMarker(this List<EmotionMarker> list, EmotionMarker current)
		{
			return null;
		}

		[Token(Token = "0x600146B")]
		[Address(RVA = "0xA658D4", Offset = "0xA658D4", VA = "0xA658D4")]
		public static EmotionMarker NextMarker(this List<EmotionMarker> list, EmotionMarker current)
		{
			return null;
		}
	}
	[Token(Token = "0x20002F6")]
	public class LipSyncPreset : ScriptableObject
	{
		[Serializable]
		[Token(Token = "0x20004A1")]
		public struct PhonemeShapeInfo
		{
			[Token(Token = "0x4001DA2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[SerializeField]
			public string phonemeName;

			[Token(Token = "0x4001DA3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[SerializeField]
			[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x5D63F4", Offset = "0x5D63F4")]
			public Phoneme phoneme;

			[Token(Token = "0x4001DA4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[SerializeField]
			public BlendableInfo[] blendables;

			[Token(Token = "0x4001DA5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[SerializeField]
			public BoneInfo[] bones;
		}

		[Serializable]
		[Token(Token = "0x20004A2")]
		public struct EmotionShapeInfo
		{
			[Token(Token = "0x4001DA6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[SerializeField]
			public string emotion;

			[Token(Token = "0x4001DA7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[SerializeField]
			public BlendableInfo[] blendables;

			[Token(Token = "0x4001DA8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[SerializeField]
			public BoneInfo[] bones;
		}

		[Serializable]
		[Token(Token = "0x20004A3")]
		public struct BlendableInfo
		{
			[Token(Token = "0x4001DA9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[SerializeField]
			public int blendableNumber;

			[Token(Token = "0x4001DAA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[SerializeField]
			public string blendableName;

			[Token(Token = "0x4001DAB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[SerializeField]
			public float weight;
		}

		[Serializable]
		[Token(Token = "0x20004A4")]
		public struct BoneInfo
		{
			[Token(Token = "0x4001DAC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[SerializeField]
			public string path;

			[Token(Token = "0x4001DAD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[SerializeField]
			public string name;

			[Token(Token = "0x4001DAE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[SerializeField]
			public Vector3 localPosition;

			[Token(Token = "0x4001DAF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[SerializeField]
			public Vector3 localRotation;

			[Token(Token = "0x4001DB0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[SerializeField]
			public bool lockPosition;

			[Token(Token = "0x4001DB1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
			[SerializeField]
			public bool lockRotation;
		}

		[Token(Token = "0x40014AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool isRelative;

		[Token(Token = "0x40014AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		public PhonemeShapeInfo[] phonemeShapes;

		[Token(Token = "0x40014AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		public EmotionShapeInfo[] emotionShapes;

		[Token(Token = "0x600146C")]
		[Address(RVA = "0xA65988", Offset = "0xA65988", VA = "0xA65988")]
		public int FindBlendable(BlendableInfo blendable, BlendSystem blendSystem)
		{
			return default(int);
		}

		[Token(Token = "0x600146D")]
		[Address(RVA = "0xA65F5C", Offset = "0xA65F5C", VA = "0xA65F5C")]
		public Transform FindBone(BoneInfo bone, Transform searchRoot)
		{
			return null;
		}

		[Token(Token = "0x600146E")]
		[Address(RVA = "0xA66020", Offset = "0xA66020", VA = "0xA66020")]
		public void CreateFromShapes(PhonemeShape[] phonemes, EmotionShape[] emotions, BlendSystem blendSystem, bool relative)
		{
		}

		[Token(Token = "0x600146F")]
		[Address(RVA = "0xA66FF8", Offset = "0xA66FF8", VA = "0xA66FF8")]
		public LipSyncPreset()
		{
		}
	}
	[Token(Token = "0x20002F7")]
	public class LipSyncProject : ScriptableObject
	{
		[Token(Token = "0x40014AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public string[] emotions;

		[Token(Token = "0x40014AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		public Color[] emotionColors;

		[Token(Token = "0x40014AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		public List<string> gestures;

		[Token(Token = "0x40014B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		public PhonemeSet phonemeSet;

		[Token(Token = "0x6001470")]
		[Address(RVA = "0xA67000", Offset = "0xA67000", VA = "0xA67000")]
		public LipSyncProject()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002F8")]
	public class PhonemeMarker
	{
		[Token(Token = "0x40014B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x5D2EE8", Offset = "0x5D2EE8")]
		public Phoneme phoneme;

		[Token(Token = "0x40014B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		public int phonemeNumber;

		[Token(Token = "0x40014B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public float time;

		[Token(Token = "0x40014B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		public float intensity;

		[Token(Token = "0x40014B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		public bool sustain;

		[Token(Token = "0x40014B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		[SerializeField]
		public bool useRandomness;

		[Token(Token = "0x40014B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		public float intensityRandomness;

		[Token(Token = "0x40014B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		public float blendableRandomness;

		[Token(Token = "0x40014B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		public float bonePositionRandomness;

		[Token(Token = "0x40014BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		public float boneRotationRandomness;

		[Token(Token = "0x6001471")]
		[Address(RVA = "0x1202E38", Offset = "0x1202E38", VA = "0x1202E38")]
		public PhonemeMarker(int phonemeNumber, float time, float intensity, bool sustain)
		{
		}

		[Token(Token = "0x6001472")]
		[Address(RVA = "0x1202EA0", Offset = "0x1202EA0", VA = "0x1202EA0")]
		public PhonemeMarker(int phonemeNumber, float time)
		{
		}

		[Token(Token = "0x6001473")]
		[Address(RVA = "0x1202EF0", Offset = "0x1202EF0", VA = "0x1202EF0")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x5DA0BC", Offset = "0x5DA0BC")]
		public PhonemeMarker(Phoneme phoneme, float time, float intensity, bool sustain)
		{
		}

		[Token(Token = "0x6001474")]
		[Address(RVA = "0x1202F58", Offset = "0x1202F58", VA = "0x1202F58")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x5DA0F4", Offset = "0x5DA0F4")]
		public PhonemeMarker(Phoneme phoneme, float time)
		{
		}

		[Token(Token = "0x6001475")]
		[Address(RVA = "0x1202FA8", Offset = "0x1202FA8", VA = "0x1202FA8")]
		public PhonemeMarker CreateCopy()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x20002F9")]
	[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0x5CD174", Offset = "0x5CD174")]
	public class PhonemeSet : ScriptableObject
	{
		[Serializable]
		[Token(Token = "0x20004A5")]
		[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x5CE24C", Offset = "0x5CE24C")]
		public class PhonemeCollection
		{
			[Token(Token = "0x4001DB2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public List<string> phonemeNames;

			[Token(Token = "0x17000385")]
			public int Length
			{
				[Token(Token = "0x6001CBC")]
				[Address(RVA = "0xFF0DB8", Offset = "0xFF0DB8", VA = "0xFF0DB8")]
				get
				{
					return default(int);
				}
			}

			[Token(Token = "0x17000386")]
			public Phoneme Item
			{
				[Token(Token = "0x6001CBD")]
				[Address(RVA = "0xFF0E04", Offset = "0xFF0E04", VA = "0xFF0E04")]
				get
				{
					return default(Phoneme);
				}
			}

			[Token(Token = "0x6001CBE")]
			[Address(RVA = "0xFF0EAC", Offset = "0xFF0EAC", VA = "0xFF0EAC")]
			public PhonemeCollection()
			{
			}
		}

		[Token(Token = "0x20004A6")]
		public struct Phoneme
		{
			[Token(Token = "0x4001DB3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D6520", Offset = "0x5D6520")]
			private string <name>k__BackingField;

			[Token(Token = "0x4001DB4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D6530", Offset = "0x5D6530")]
			private int <number>k__BackingField;

			[Token(Token = "0x4001DB5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D6540", Offset = "0x5D6540")]
			private int <flag>k__BackingField;

			[Token(Token = "0x4001DB6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool visuallyImportant;

			[Token(Token = "0x17000387")]
			public string name
			{
				[Token(Token = "0x6001CBF")]
				[Address(RVA = "0xFF0D4C", Offset = "0xFF0D4C", VA = "0xFF0D4C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5DBE44", Offset = "0x5DBE44")]
				readonly get
				{
					return null;
				}
				[Token(Token = "0x6001CC0")]
				[Address(RVA = "0xFF0D54", Offset = "0xFF0D54", VA = "0xFF0D54")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5DBE7C", Offset = "0x5DBE7C")]
				private set
				{
				}
			}

			[Token(Token = "0x17000388")]
			public int number
			{
				[Token(Token = "0x6001CC1")]
				[Address(RVA = "0xFF0D5C", Offset = "0xFF0D5C", VA = "0xFF0D5C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5DBE8C", Offset = "0x5DBE8C")]
				readonly get
				{
					return default(int);
				}
				[Token(Token = "0x6001CC2")]
				[Address(RVA = "0xFF0D64", Offset = "0xFF0D64", VA = "0xFF0D64")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5DBEC4", Offset = "0x5DBEC4")]
				private set
				{
				}
			}

			[Token(Token = "0x17000389")]
			public int flag
			{
				[Token(Token = "0x6001CC3")]
				[Address(RVA = "0xFF0D6C", Offset = "0xFF0D6C", VA = "0xFF0D6C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5DBED4", Offset = "0x5DBED4")]
				readonly get
				{
					return default(int);
				}
				[Token(Token = "0x6001CC4")]
				[Address(RVA = "0xFF0D74", Offset = "0xFF0D74", VA = "0xFF0D74")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5DBF0C", Offset = "0x5DBF0C")]
				private set
				{
				}
			}

			[Token(Token = "0x6001CC5")]
			[Address(RVA = "0xFF0D7C", Offset = "0xFF0D7C", VA = "0xFF0D7C")]
			public Phoneme(string name, int number, int flag)
			{
			}
		}

		[Token(Token = "0x40014BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public string scriptingName;

		[Token(Token = "0x40014BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		public PhonemeCollection phonemes;

		[Token(Token = "0x40014BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		public Texture2D[] guideImages;

		[Token(Token = "0x6001476")]
		[Address(RVA = "0x1203070", Offset = "0x1203070", VA = "0x1203070")]
		public PhonemeSet()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002FA")]
	public class PhonemeShape : Shape
	{
		[Token(Token = "0x40014BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		public string phonemeName;

		[Token(Token = "0x40014BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x5D3004", Offset = "0x5D3004")]
		public Phoneme phoneme;

		[Token(Token = "0x6001477")]
		[Address(RVA = "0x12030E0", Offset = "0x12030E0", VA = "0x12030E0")]
		public PhonemeShape(string phonemeName)
		{
		}

		[Token(Token = "0x6001478")]
		[Address(RVA = "0x1203218", Offset = "0x1203218", VA = "0x1203218")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x5DA12C", Offset = "0x5DA12C")]
		public PhonemeShape(Phoneme ePhoneme)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002FB")]
	public class Shape
	{
		[Token(Token = "0x40014C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		public List<int> blendShapes;

		[Token(Token = "0x40014C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public List<string> blendableNames;

		[Token(Token = "0x40014C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		public List<float> weights;

		[Token(Token = "0x40014C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		public List<BoneShape> bones;

		[Token(Token = "0x40014C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		public bool verified;

		[Token(Token = "0x6001479")]
		[Address(RVA = "0xA0DB6C", Offset = "0xA0DB6C", VA = "0xA0DB6C")]
		public bool HasBone(Transform bone)
		{
			return default(bool);
		}

		[Token(Token = "0x600147A")]
		[Address(RVA = "0xA0DC60", Offset = "0xA0DC60", VA = "0xA0DC60")]
		public int IndexOfBone(Transform bone)
		{
			return default(int);
		}

		[Token(Token = "0x600147B")]
		[Address(RVA = "0xA0DD50", Offset = "0xA0DD50", VA = "0xA0DD50")]
		public Shape()
		{
		}
	}
	[Token(Token = "0x20002FC")]
	public class TemporaryLipSyncData : ScriptableObject
	{
		[Token(Token = "0x40014C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioClip clip;

		[Token(Token = "0x40014C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<PhonemeMarker> phonemeData;

		[Token(Token = "0x40014C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<EmotionMarker> emotionData;

		[Token(Token = "0x40014C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public List<GestureMarker> gestureData;

		[Token(Token = "0x40014C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float version;

		[Token(Token = "0x40014CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float length;

		[Token(Token = "0x40014CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string transcript;

		[Token(Token = "0x600147C")]
		[Address(RVA = "0xE8A488", Offset = "0xE8A488", VA = "0xE8A488")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600147D")]
		[Address(RVA = "0xE8A494", Offset = "0xE8A494", VA = "0xE8A494")]
		public static explicit operator TemporaryLipSyncData(LipSyncData data)
		{
			return null;
		}

		[Token(Token = "0x600147E")]
		[Address(RVA = "0xE8A784", Offset = "0xE8A784", VA = "0xE8A784")]
		public TemporaryLipSyncData()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002FD")]
	public class TransformAnimationCurve
	{
		[Token(Token = "0x20004A7")]
		public struct TransformKeyframe
		{
			[Token(Token = "0x4001DB7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public float time;

			[Token(Token = "0x4001DB8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public Quaternion rotation;

			[Token(Token = "0x4001DB9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public Vector3 position;

			[Token(Token = "0x4001DBA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector3 scale;

			[Token(Token = "0x4001DBB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float inTangent;

			[Token(Token = "0x4001DBC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float outTangent;

			[Token(Token = "0x6001CC6")]
			[Address(RVA = "0x138BCEC", Offset = "0x138BCEC", VA = "0x138BCEC")]
			public TransformKeyframe(float time, Vector3 position, Quaternion rotation, Vector3 scale, float inTangent, float outTangent)
			{
			}
		}

		[Token(Token = "0x40014CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private AnimationCurve _posX;

		[Token(Token = "0x40014CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private AnimationCurve _posY;

		[Token(Token = "0x40014CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private AnimationCurve _posZ;

		[Token(Token = "0x40014CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private AnimationCurve _rotX;

		[Token(Token = "0x40014D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AnimationCurve _rotY;

		[Token(Token = "0x40014D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private AnimationCurve _rotZ;

		[Token(Token = "0x40014D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private AnimationCurve _rotW;

		[Token(Token = "0x40014D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private AnimationCurve _scaleX;

		[Token(Token = "0x40014D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private AnimationCurve _scaleY;

		[Token(Token = "0x40014D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private AnimationCurve _scaleZ;

		[Token(Token = "0x170001CC")]
		public TransformKeyframe[] keys
		{
			[Token(Token = "0x600147F")]
			[Address(RVA = "0xE97108", Offset = "0xE97108", VA = "0xE97108")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001CD")]
		public int length
		{
			[Token(Token = "0x6001480")]
			[Address(RVA = "0xE975E8", Offset = "0xE975E8", VA = "0xE975E8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001CE")]
		public WrapMode postWrapMode
		{
			[Token(Token = "0x6001481")]
			[Address(RVA = "0xE97604", Offset = "0xE97604", VA = "0xE97604")]
			get
			{
				return default(WrapMode);
			}
			[Token(Token = "0x6001482")]
			[Address(RVA = "0xE97620", Offset = "0xE97620", VA = "0xE97620")]
			set
			{
			}
		}

		[Token(Token = "0x170001CF")]
		public WrapMode preWrapMode
		{
			[Token(Token = "0x6001483")]
			[Address(RVA = "0xE97704", Offset = "0xE97704", VA = "0xE97704")]
			get
			{
				return default(WrapMode);
			}
			[Token(Token = "0x6001484")]
			[Address(RVA = "0xE97720", Offset = "0xE97720", VA = "0xE97720")]
			set
			{
			}
		}

		[Token(Token = "0x6001485")]
		[Address(RVA = "0xE97804", Offset = "0xE97804", VA = "0xE97804")]
		public int AddKey(float time, Vector3 position, Quaternion rotation, Vector3 scale, float inTangent, float outTangent)
		{
			return default(int);
		}

		[Token(Token = "0x6001486")]
		[Address(RVA = "0xE97BD8", Offset = "0xE97BD8", VA = "0xE97BD8")]
		public int AddKey(float time, Vector3 position, Quaternion rotation, float inTangent, float outTangent)
		{
			return default(int);
		}

		[Token(Token = "0x6001487")]
		[Address(RVA = "0xE97EA8", Offset = "0xE97EA8", VA = "0xE97EA8")]
		public int AddKey(float time, Quaternion rotation, float inTangent, float outTangent)
		{
			return default(int);
		}

		[Token(Token = "0x6001488")]
		[Address(RVA = "0xE98084", Offset = "0xE98084", VA = "0xE98084")]
		public int AddKey(float time, Vector3 position, float inTangent, float outTangent)
		{
			return default(int);
		}

		[Token(Token = "0x6001489")]
		[Address(RVA = "0xE981D4", Offset = "0xE981D4", VA = "0xE981D4")]
		public int AddKey(float time, Vector3 position, Quaternion rotation, Vector3 scale)
		{
			return default(int);
		}

		[Token(Token = "0x600148A")]
		[Address(RVA = "0xE98340", Offset = "0xE98340", VA = "0xE98340")]
		public int AddKey(float time, Vector3 position, Quaternion rotation)
		{
			return default(int);
		}

		[Token(Token = "0x600148B")]
		[Address(RVA = "0xE98464", Offset = "0xE98464", VA = "0xE98464")]
		public int AddKey(float time, Quaternion rotation)
		{
			return default(int);
		}

		[Token(Token = "0x600148C")]
		[Address(RVA = "0xE98540", Offset = "0xE98540", VA = "0xE98540")]
		public int AddKey(float time, Vector3 position)
		{
			return default(int);
		}

		[Token(Token = "0x600148D")]
		[Address(RVA = "0xE985C8", Offset = "0xE985C8", VA = "0xE985C8")]
		public int AddKey(TransformKeyframe keyframe)
		{
			return default(int);
		}

		[Token(Token = "0x600148E")]
		[Address(RVA = "0xE98870", Offset = "0xE98870", VA = "0xE98870")]
		public Vector3 EvaluateScale(float time)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600148F")]
		[Address(RVA = "0xE988F0", Offset = "0xE988F0", VA = "0xE988F0")]
		public Vector3 EvaluatePosition(float time)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001490")]
		[Address(RVA = "0xE98970", Offset = "0xE98970", VA = "0xE98970")]
		public Quaternion EvaluateRotation(float time)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001491")]
		[Address(RVA = "0xE98A2C", Offset = "0xE98A2C", VA = "0xE98A2C")]
		public TransformAnimationCurve()
		{
		}

		[Token(Token = "0x6001492")]
		[Address(RVA = "0xE97BD0", Offset = "0xE97BD0", VA = "0xE97BD0")]
		private Vector3 CentreAngles(Vector3 euler)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001493")]
		[Address(RVA = "0xE98BE8", Offset = "0xE98BE8", VA = "0xE98BE8")]
		public void FixQuaternionContinuity()
		{
		}
	}
	[Token(Token = "0x20002FE")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5CD1D4", Offset = "0x5CD1D4")]
	[DisallowMultipleComponent]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x5CD1D4", Offset = "0x5CD1D4")]
	public class LipSync : BlendSystemUser
	{
		[Token(Token = "0x20004A8")]
		public delegate void ResetDelegate();

		[Token(Token = "0x20004A9")]
		public enum AnimationTimingMode
		{
			[Token(Token = "0x4001DBE")]
			AudioPlayback,
			[Token(Token = "0x4001DBF")]
			CustomTimer,
			[Token(Token = "0x4001DC0")]
			FixedFrameRate
		}

		[Token(Token = "0x20004AA")]
		public enum CurveGenerationMode
		{
			[Token(Token = "0x4001DC2")]
			Tight,
			[Token(Token = "0x4001DC3")]
			Loose
		}

		[Token(Token = "0x20004AB")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CE284", Offset = "0x5CE284")]
		private sealed class <StopAudioSource>d__96 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001DC4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001DC5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001DC6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float delay;

			[Token(Token = "0x4001DC7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public LipSync <>4__this;

			[Token(Token = "0x1700038A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001CCE")]
				[Address(RVA = "0x7EF330", Offset = "0x7EF330", VA = "0x7EF330", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700038B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001CD0")]
				[Address(RVA = "0x7EF378", Offset = "0x7EF378", VA = "0x7EF378", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001CCB")]
			[Address(RVA = "0x7EF23C", Offset = "0x7EF23C", VA = "0x7EF23C")]
			[DebuggerHidden]
			public <StopAudioSource>d__96(int <>1__state)
			{
			}

			[Token(Token = "0x6001CCC")]
			[Address(RVA = "0x7EF268", Offset = "0x7EF268", VA = "0x7EF268", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001CCD")]
			[Address(RVA = "0x7EF26C", Offset = "0x7EF26C", VA = "0x7EF26C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001CCF")]
			[Address(RVA = "0x7EF338", Offset = "0x7EF338", VA = "0x7EF338", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40014D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AudioSource audioSource;

		[Token(Token = "0x40014D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool useBones;

		[Token(Token = "0x40014D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool boneUpdateAnimation;

		[Token(Token = "0x40014D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		public List<PhonemeShape> phonemes;

		[Token(Token = "0x40014DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		public List<EmotionShape> emotions;

		[Token(Token = "0x40014DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool playOnAwake;

		[Token(Token = "0x40014DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		public bool loop;

		[Token(Token = "0x40014DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public LipSyncData defaultClip;

		[Token(Token = "0x40014DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float defaultDelay;

		[Token(Token = "0x40014DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public bool scaleAudioSpeed;

		[Token(Token = "0x40014E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private AnimationTimingMode m_animationTimingMode;

		[Token(Token = "0x40014E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public int frameRate;

		[Token(Token = "0x40014E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float restTime;

		[Token(Token = "0x40014E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float restHoldTime;

		[Token(Token = "0x40014E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public CurveGenerationMode phonemeCurveGenerationMode;

		[Token(Token = "0x40014E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public CurveGenerationMode emotionCurveGenerationMode;

		[Token(Token = "0x40014E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public bool keepEmotionWhenFinished;

		[Token(Token = "0x40014E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		public bool setNeutralBonePosesOnStart;

		[Token(Token = "0x40014E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x72")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D30D0", Offset = "0x5D30D0")]
		private bool <IsPlaying>k__BackingField;

		[Token(Token = "0x40014E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x73")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D30E0", Offset = "0x5D30E0")]
		private bool <IsPaused>k__BackingField;

		[Token(Token = "0x40014EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5D30F0", Offset = "0x5D30F0")]
		private bool <IsStopping>k__BackingField;

		[Token(Token = "0x40014EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Animator gesturesAnimator;

		[Token(Token = "0x40014EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public int gesturesLayer;

		[Token(Token = "0x40014ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public List<GestureInstance> gestures;

		[Token(Token = "0x40014EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public UnityEvent onFinishedPlaying;

		[Token(Token = "0x40014EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private AudioClip audioClip;

		[Token(Token = "0x40014F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private bool ready;

		[Token(Token = "0x40014F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Dictionary<string, EmotionShape> emotionCache;

		[Token(Token = "0x40014F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private int currentFileID;

		[Token(Token = "0x40014F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private LipSyncData lastClip;

		[Token(Token = "0x40014F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private float emotionBlendTime;

		[Token(Token = "0x40014F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private float emotionTimer;

		[Token(Token = "0x40014F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private bool changingEmotion;

		[Token(Token = "0x40014F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private int customEmotion;

		[Token(Token = "0x40014F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private float customTimer;

		[Token(Token = "0x40014F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private bool isDelaying;

		[Token(Token = "0x40014FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private List<PhonemeMarker> phonemeMarkers;

		[Token(Token = "0x40014FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private List<EmotionMarker> emotionMarkers;

		[Token(Token = "0x40014FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private List<GestureMarker> gestureMarkers;

		[Token(Token = "0x40014FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private float fileLength;

		[Token(Token = "0x40014FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private int nextGesture;

		[Token(Token = "0x40014FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private List<int> indexBlendables;

		[Token(Token = "0x4001500")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private List<AnimationCurve> animCurves;

		[Token(Token = "0x4001501")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private List<Transform> bones;

		[Token(Token = "0x4001502")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private List<TransformAnimationCurve> boneCurves;

		[Token(Token = "0x4001503")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private List<Vector3> boneNeutralPositions;

		[Token(Token = "0x4001504")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private List<Vector3> boneNeutralScales;

		[Token(Token = "0x4001505")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private List<Quaternion> boneNeutralRotations;

		[Token(Token = "0x4001506")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public ResetDelegate reset;

		[Token(Token = "0x4001507")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		public float lastUsedVersion;

		[Token(Token = "0x170001D0")]
		public AnimationTimingMode animationTimingMode
		{
			[Token(Token = "0x6001494")]
			[Address(RVA = "0x102F29C", Offset = "0x102F29C", VA = "0x102F29C")]
			get
			{
				return default(AnimationTimingMode);
			}
			[Token(Token = "0x6001495")]
			[Address(RVA = "0x102F2A4", Offset = "0x102F2A4", VA = "0x102F2A4")]
			set
			{
			}
		}

		[Token(Token = "0x170001D1")]
		public bool IsPlaying
		{
			[Token(Token = "0x6001496")]
			[Address(RVA = "0x102F2AC", Offset = "0x102F2AC", VA = "0x102F2AC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5DA164", Offset = "0x5DA164")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001497")]
			[Address(RVA = "0x102F2B4", Offset = "0x102F2B4", VA = "0x102F2B4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5DA174", Offset = "0x5DA174")]
			private set
			{
			}
		}

		[Token(Token = "0x170001D2")]
		public bool IsPaused
		{
			[Token(Token = "0x6001498")]
			[Address(RVA = "0x102F2C0", Offset = "0x102F2C0", VA = "0x102F2C0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5DA184", Offset = "0x5DA184")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001499")]
			[Address(RVA = "0x102F2C8", Offset = "0x102F2C8", VA = "0x102F2C8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5DA194", Offset = "0x5DA194")]
			private set
			{
			}
		}

		[Token(Token = "0x170001D3")]
		public bool IsStopping
		{
			[Token(Token = "0x600149A")]
			[Address(RVA = "0x102F2D4", Offset = "0x102F2D4", VA = "0x102F2D4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5DA1A4", Offset = "0x5DA1A4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600149B")]
			[Address(RVA = "0x102F2DC", Offset = "0x102F2DC", VA = "0x102F2DC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5DA1B4", Offset = "0x5DA1B4")]
			private set
			{
			}
		}

		[Token(Token = "0x170001D4")]
		public float CurrentTime
		{
			[Token(Token = "0x600149C")]
			[Address(RVA = "0x102F2E8", Offset = "0x102F2E8", VA = "0x102F2E8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x600149D")]
		[Address(RVA = "0x102F324", Offset = "0x102F324", VA = "0x102F324")]
		private void Reset()
		{
		}

		[Token(Token = "0x600149E")]
		[Address(RVA = "0x102F360", Offset = "0x102F360", VA = "0x102F360")]
		private void Awake()
		{
		}

		[Token(Token = "0x600149F")]
		[Address(RVA = "0x103031C", Offset = "0x103031C", VA = "0x103031C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60014A0")]
		[Address(RVA = "0x1031368", Offset = "0x1031368", VA = "0x1031368")]
		public void SetEmotion(string emotion, float blendTime)
		{
		}

		[Token(Token = "0x60014A1")]
		[Address(RVA = "0x1032F98", Offset = "0x1032F98", VA = "0x1032F98")]
		public void ResetEmotion(float blendTime)
		{
		}

		[Token(Token = "0x60014A2")]
		[Address(RVA = "0x1032FF4", Offset = "0x1032FF4", VA = "0x1032FF4")]
		private void PlayPP(LipSyncData data, float delay, float time)
		{
		}

		[Token(Token = "0x60014A3")]
		[Address(RVA = "0x1030050", Offset = "0x1030050", VA = "0x1030050")]
		public void Play(LipSyncData dataFile, float delay)
		{
		}

		[Token(Token = "0x60014A4")]
		[Address(RVA = "0x1031360", Offset = "0x1031360", VA = "0x1031360")]
		public void Play(LipSyncData dataFile)
		{
		}

		[Token(Token = "0x60014A5")]
		[Address(RVA = "0x103D418", Offset = "0x103D418", VA = "0x103D418")]
		public void Play(TextAsset xmlFile, AudioClip clip, float delay)
		{
		}

		[Token(Token = "0x60014A6")]
		[Address(RVA = "0x103E5F4", Offset = "0x103E5F4", VA = "0x103E5F4")]
		public void Play(TextAsset xmlFile, AudioClip clip)
		{
		}

		[Token(Token = "0x60014A7")]
		[Address(RVA = "0x103E5FC", Offset = "0x103E5FC", VA = "0x103E5FC")]
		public void PlayFromTime(LipSyncData dataFile, float delay, float time)
		{
		}

		[Token(Token = "0x60014A8")]
		[Address(RVA = "0x103E82C", Offset = "0x103E82C", VA = "0x103E82C")]
		public void PlayFromTime(LipSyncData dataFile, float time)
		{
		}

		[Token(Token = "0x60014A9")]
		[Address(RVA = "0x103E838", Offset = "0x103E838", VA = "0x103E838")]
		public void PlayFromTime(TextAsset xmlFile, AudioClip clip, float delay, float time)
		{
		}

		[Token(Token = "0x60014AA")]
		[Address(RVA = "0x103EA1C", Offset = "0x103EA1C", VA = "0x103EA1C")]
		public void PlayFromTime(TextAsset xmlFile, AudioClip clip, float time)
		{
		}

		[Token(Token = "0x60014AB")]
		[Address(RVA = "0x103EA28", Offset = "0x103EA28", VA = "0x103EA28")]
		public void Pause()
		{
		}

		[Token(Token = "0x60014AC")]
		[Address(RVA = "0x103EA88", Offset = "0x103EA88", VA = "0x103EA88")]
		public void Resume()
		{
		}

		[Token(Token = "0x60014AD")]
		[Address(RVA = "0x1030DB4", Offset = "0x1030DB4", VA = "0x1030DB4")]
		public void Stop(bool stopAudio)
		{
		}

		[Token(Token = "0x60014AE")]
		[Address(RVA = "0x103EAE4", Offset = "0x103EAE4", VA = "0x103EAE4")]
		public void PreviewAtTime(float time)
		{
		}

		[Token(Token = "0x60014AF")]
		[Address(RVA = "0x103EE5C", Offset = "0x103EE5C", VA = "0x103EE5C")]
		public void DisplayEmotionPose(int emotion, float intensity)
		{
		}

		[Token(Token = "0x60014B0")]
		[Address(RVA = "0x103F2D4", Offset = "0x103F2D4", VA = "0x103F2D4")]
		public void ResetDisplayedEmotions()
		{
		}

		[Token(Token = "0x60014B1")]
		[Address(RVA = "0x103F7B4", Offset = "0x103F7B4", VA = "0x103F7B4")]
		public void PreviewAudioAtTime(float time, float length)
		{
		}

		[Token(Token = "0x60014B2")]
		[Address(RVA = "0x103F94C", Offset = "0x103F94C", VA = "0x103F94C")]
		public void TempLoad(List<PhonemeMarker> pData, List<EmotionMarker> eData, AudioClip clip, float duration)
		{
		}

		[Token(Token = "0x60014B3")]
		[Address(RVA = "0x103FA08", Offset = "0x103FA08", VA = "0x103FA08")]
		public void TempLoad(PhonemeMarker[] pData, EmotionMarker[] eData, AudioClip clip, float duration)
		{
		}

		[Token(Token = "0x60014B4")]
		[Address(RVA = "0x1033CDC", Offset = "0x1033CDC", VA = "0x1033CDC")]
		public void ProcessData(bool emotionOnly = false)
		{
		}

		[Token(Token = "0x60014B5")]
		[Address(RVA = "0x103FDFC", Offset = "0x103FDFC", VA = "0x103FDFC")]
		public void GetCurveDataOut(out List<int> indexBlendables, out List<AnimationCurve> animCurves, out List<Transform> bones, out List<TransformAnimationCurve> boneCurves, out List<Vector3> boneNeutralPositions, out List<Quaternion> boneNeutralRotations, out List<Vector3> boneNeutralScales)
		{
		}

		[Token(Token = "0x60014B6")]
		[Address(RVA = "0x103FDF4", Offset = "0x103FDF4", VA = "0x103FDF4")]
		public void ClearDataCache()
		{
		}

		[Token(Token = "0x60014B7")]
		[Address(RVA = "0x103FEB8", Offset = "0x103FEB8", VA = "0x103FEB8")]
		private EmotionMixer GetTransitionMixer(string oldEmotion, string newEmotion, float t)
		{
			return null;
		}

		[Token(Token = "0x60014B8")]
		[Address(RVA = "0x103FFC4", Offset = "0x103FFC4", VA = "0x103FFC4")]
		private void FixEmotionBlends(ref List<EmotionMarker> data)
		{
		}

		[Token(Token = "0x60014B9")]
		[Address(RVA = "0x10400D4", Offset = "0x10400D4", VA = "0x10400D4")]
		private void FixEmotionBlends(ref EmotionMarker[] data)
		{
		}

		[Token(Token = "0x60014BA")]
		[Address(RVA = "0x103D578", Offset = "0x103D578", VA = "0x103D578")]
		private void LoadXML(TextAsset xmlFile, AudioClip linkedClip)
		{
		}

		[Token(Token = "0x60014BB")]
		[Address(RVA = "0x10335AC", Offset = "0x10335AC", VA = "0x10335AC")]
		private bool LoadData(LipSyncData dataFile)
		{
			return default(bool);
		}

		[Token(Token = "0x60014BC")]
		[Address(RVA = "0x103F8C4", Offset = "0x103F8C4", VA = "0x103F8C4")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5DA1C4", Offset = "0x5DA1C4")]
		private IEnumerator StopAudioSource(float delay)
		{
			return null;
		}

		[Token(Token = "0x60014BD")]
		[Address(RVA = "0x1030CCC", Offset = "0x1030CCC", VA = "0x1030CCC")]
		private GestureInstance GetGesture(string name)
		{
			return null;
		}

		[Token(Token = "0x60014BE")]
		[Address(RVA = "0x1040338", Offset = "0x1040338", VA = "0x1040338")]
		public LipSync()
		{
		}

		[Token(Token = "0x60014BF")]
		[Address(RVA = "0x1040440", Offset = "0x1040440", VA = "0x1040440")]
		public static int SortTime(PhonemeMarker a, PhonemeMarker b)
		{
			return default(int);
		}

		[Token(Token = "0x60014C0")]
		[Address(RVA = "0x1040480", Offset = "0x1040480", VA = "0x1040480")]
		public static int SortTime(GestureMarker a, GestureMarker b)
		{
			return default(int);
		}

		[Token(Token = "0x60014C1")]
		[Address(RVA = "0x10404C0", Offset = "0x10404C0", VA = "0x10404C0")]
		private static int EmotionSort(EmotionMarker a, EmotionMarker b)
		{
			return default(int);
		}

		[Token(Token = "0x60014C2")]
		[Address(RVA = "0x1040294", Offset = "0x1040294", VA = "0x1040294")]
		public static string ReadXML(XmlDocument xml, string parentElement, string elementName)
		{
			return null;
		}
	}
	[Token(Token = "0x20002FF")]
	public enum Phoneme
	{
		[Token(Token = "0x4001509")]
		AI,
		[Token(Token = "0x400150A")]
		E,
		[Token(Token = "0x400150B")]
		U,
		[Token(Token = "0x400150C")]
		O,
		[Token(Token = "0x400150D")]
		CDGKNRSThYZ,
		[Token(Token = "0x400150E")]
		FV,
		[Token(Token = "0x400150F")]
		L,
		[Token(Token = "0x4001510")]
		MBP,
		[Token(Token = "0x4001511")]
		WQ,
		[Token(Token = "0x4001512")]
		Rest
	}
}
namespace Dreamteck
{
	[Token(Token = "0x2000300")]
	public static class ArrayUtility
	{
		[Token(Token = "0x60014C3")]
		public static void Add<T>(ref T[] array, T item)
		{
		}

		[Token(Token = "0x60014C4")]
		public static bool Contains<T>(T[] array, T item)
		{
			return default(bool);
		}

		[Token(Token = "0x60014C5")]
		public static int IndexOf<T>(T[] array, T value)
		{
			return default(int);
		}

		[Token(Token = "0x60014C6")]
		public static void Insert<T>(ref T[] array, int index, T item)
		{
		}

		[Token(Token = "0x60014C7")]
		public static void RemoveAt<T>(ref T[] array, int index)
		{
		}
	}
	[Token(Token = "0x2000301")]
	public static class DMath
	{
		[Token(Token = "0x60014C8")]
		[Address(RVA = "0xCC58C4", Offset = "0xCC58C4", VA = "0xCC58C4")]
		public static double Sin(double a)
		{
			return default(double);
		}

		[Token(Token = "0x60014C9")]
		[Address(RVA = "0xCC592C", Offset = "0xCC592C", VA = "0xCC592C")]
		public static double Cos(double a)
		{
			return default(double);
		}

		[Token(Token = "0x60014CA")]
		[Address(RVA = "0xCC5994", Offset = "0xCC5994", VA = "0xCC5994")]
		public static double Tan(double a)
		{
			return default(double);
		}

		[Token(Token = "0x60014CB")]
		[Address(RVA = "0xCC59FC", Offset = "0xCC59FC", VA = "0xCC59FC")]
		public static double Pow(double x, double y)
		{
			return default(double);
		}

		[Token(Token = "0x60014CC")]
		[Address(RVA = "0xCC5A70", Offset = "0xCC5A70", VA = "0xCC5A70")]
		public static double Log(double a, double newBase)
		{
			return default(double);
		}

		[Token(Token = "0x60014CD")]
		[Address(RVA = "0xCC5AE4", Offset = "0xCC5AE4", VA = "0xCC5AE4")]
		public static double Log10(double a)
		{
			return default(double);
		}

		[Token(Token = "0x60014CE")]
		[Address(RVA = "0xCC5B4C", Offset = "0xCC5B4C", VA = "0xCC5B4C")]
		public static double Clamp01(double a)
		{
			return default(double);
		}

		[Token(Token = "0x60014CF")]
		[Address(RVA = "0xCC5B6C", Offset = "0xCC5B6C", VA = "0xCC5B6C")]
		public static double Clamp(double a, double min, double max)
		{
			return default(double);
		}

		[Token(Token = "0x60014D0")]
		[Address(RVA = "0xCC5B88", Offset = "0xCC5B88", VA = "0xCC5B88")]
		public static double Lerp(double a, double b, double t)
		{
			return default(double);
		}

		[Token(Token = "0x60014D1")]
		[Address(RVA = "0xCC5BAC", Offset = "0xCC5BAC", VA = "0xCC5BAC")]
		public static double InverseLerp(double a, double b, double t)
		{
			return default(double);
		}

		[Token(Token = "0x60014D2")]
		[Address(RVA = "0xCC5BE0", Offset = "0xCC5BE0", VA = "0xCC5BE0")]
		public static Vector3 LerpVector3(Vector3 a, Vector3 b, double t)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60014D3")]
		[Address(RVA = "0xCC5C40", Offset = "0xCC5C40", VA = "0xCC5C40")]
		public static double Round(double a)
		{
			return default(double);
		}

		[Token(Token = "0x60014D4")]
		[Address(RVA = "0xCC5D14", Offset = "0xCC5D14", VA = "0xCC5D14")]
		public static int RoundInt(double a)
		{
			return default(int);
		}

		[Token(Token = "0x60014D5")]
		[Address(RVA = "0xCC5DEC", Offset = "0xCC5DEC", VA = "0xCC5DEC")]
		public static double Ceil(double a)
		{
			return default(double);
		}

		[Token(Token = "0x60014D6")]
		[Address(RVA = "0xCC5E54", Offset = "0xCC5E54", VA = "0xCC5E54")]
		public static int CeilInt(double a)
		{
			return default(int);
		}

		[Token(Token = "0x60014D7")]
		[Address(RVA = "0xCC5EBC", Offset = "0xCC5EBC", VA = "0xCC5EBC")]
		public static double Floor(double a)
		{
			return default(double);
		}

		[Token(Token = "0x60014D8")]
		[Address(RVA = "0xCC5F24", Offset = "0xCC5F24", VA = "0xCC5F24")]
		public static int FloorInt(double a)
		{
			return default(int);
		}

		[Token(Token = "0x60014D9")]
		[Address(RVA = "0xCC5F8C", Offset = "0xCC5F8C", VA = "0xCC5F8C")]
		public static double Move(double current, double target, double amount)
		{
			return default(double);
		}

		[Token(Token = "0x60014DA")]
		[Address(RVA = "0xCC5FBC", Offset = "0xCC5FBC", VA = "0xCC5FBC")]
		public static double Abs(double a)
		{
			return default(double);
		}
	}
	[Token(Token = "0x2000302")]
	public static class DuplicateUtility
	{
		[Token(Token = "0x60014DB")]
		[Address(RVA = "0xCCDC0C", Offset = "0xCCDC0C", VA = "0xCCDC0C")]
		public static AnimationCurve DuplicateCurve(AnimationCurve input)
		{
			return null;
		}

		[Token(Token = "0x60014DC")]
		[Address(RVA = "0xCCDD4C", Offset = "0xCCDD4C", VA = "0xCCDD4C")]
		public static Gradient DuplicateGradient(Gradient input)
		{
			return null;
		}
	}
	[Token(Token = "0x2000303")]
	public static class LinearAlgebraUtility
	{
		[Token(Token = "0x60014DD")]
		[Address(RVA = "0x102F140", Offset = "0x102F140", VA = "0x102F140")]
		public static Vector3 ProjectOnLine(Vector3 fromPoint, Vector3 toPoint, Vector3 project)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60014DE")]
		[Address(RVA = "0x102F24C", Offset = "0x102F24C", VA = "0x102F24C")]
		public static float InverseLerp(Vector3 a, Vector3 b, Vector3 value)
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000304")]
	public class MeshUtility
	{
		[Token(Token = "0x4001513")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Vector3[] tan1;

		[Token(Token = "0x4001514")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Vector3[] tan2;

		[Token(Token = "0x60014DF")]
		[Address(RVA = "0xDEFBFC", Offset = "0xDEFBFC", VA = "0xDEFBFC")]
		public static int[] GeneratePlaneTriangles(int x, int z, bool flip, int startTriangleIndex = 0, int startVertex = 0)
		{
			return null;
		}

		[Token(Token = "0x60014E0")]
		[Address(RVA = "0xDEFCC8", Offset = "0xDEFCC8", VA = "0xDEFCC8")]
		public static int[] GeneratePlaneTriangles(ref int[] triangles, int x, int z, bool flip, int startTriangleIndex = 0, int startVertex = 0, bool reallocateArray = false)
		{
			return null;
		}

		[Token(Token = "0x60014E1")]
		[Address(RVA = "0xDEE91C", Offset = "0xDEE91C", VA = "0xDEE91C")]
		public static void CalculateTangents(TS_Mesh mesh)
		{
		}

		[Token(Token = "0x60014E2")]
		[Address(RVA = "0xDEFFD8", Offset = "0xDEFFD8", VA = "0xDEFFD8")]
		public static void MakeDoublesided(Mesh input)
		{
		}

		[Token(Token = "0x60014E3")]
		[Address(RVA = "0xDF0A3C", Offset = "0xDF0A3C", VA = "0xDF0A3C")]
		public static void MakeDoublesided(TS_Mesh input)
		{
		}

		[Token(Token = "0x60014E4")]
		[Address(RVA = "0xDEE1EC", Offset = "0xDEE1EC", VA = "0xDEE1EC")]
		public static void MakeDoublesidedHalf(TS_Mesh input)
		{
		}

		[Token(Token = "0x60014E5")]
		[Address(RVA = "0xDF138C", Offset = "0xDF138C", VA = "0xDF138C")]
		public static void InverseTransformMesh(TS_Mesh input, TS_Transform transform)
		{
		}

		[Token(Token = "0x60014E6")]
		[Address(RVA = "0xDF147C", Offset = "0xDF147C", VA = "0xDF147C")]
		public static void TransformMesh(TS_Mesh input, TS_Transform transform)
		{
		}

		[Token(Token = "0x60014E7")]
		[Address(RVA = "0xDEE0FC", Offset = "0xDEE0FC", VA = "0xDEE0FC")]
		public static void InverseTransformMesh(TS_Mesh input, Transform transform)
		{
		}

		[Token(Token = "0x60014E8")]
		[Address(RVA = "0xDF156C", Offset = "0xDF156C", VA = "0xDF156C")]
		public static void TransformMesh(TS_Mesh input, Transform transform)
		{
		}

		[Token(Token = "0x60014E9")]
		[Address(RVA = "0xDF165C", Offset = "0xDF165C", VA = "0xDF165C")]
		public static void InverseTransformMesh(Mesh input, Transform transform)
		{
		}

		[Token(Token = "0x60014EA")]
		[Address(RVA = "0xDF17B0", Offset = "0xDF17B0", VA = "0xDF17B0")]
		public static void TransformMesh(Mesh input, Transform transform)
		{
		}

		[Token(Token = "0x60014EB")]
		[Address(RVA = "0xDF1948", Offset = "0xDF1948", VA = "0xDF1948")]
		public static void TransformVertices(Vector3[] vertices, Transform transform)
		{
		}

		[Token(Token = "0x60014EC")]
		[Address(RVA = "0xDF19DC", Offset = "0xDF19DC", VA = "0xDF19DC")]
		public static void InverseTransformVertices(Vector3[] vertices, Transform transform)
		{
		}

		[Token(Token = "0x60014ED")]
		[Address(RVA = "0xDF1A70", Offset = "0xDF1A70", VA = "0xDF1A70")]
		public static void TransformNormals(Vector3[] normals, Transform transform)
		{
		}

		[Token(Token = "0x60014EE")]
		[Address(RVA = "0xDF1B04", Offset = "0xDF1B04", VA = "0xDF1B04")]
		public static void InverseTransformNormals(Vector3[] normals, Transform transform)
		{
		}

		[Token(Token = "0x60014EF")]
		[Address(RVA = "0xDF1B98", Offset = "0xDF1B98", VA = "0xDF1B98")]
		public static string ToOBJString(Mesh mesh, Material[] materials)
		{
			return null;
		}

		[Token(Token = "0x60014F0")]
		[Address(RVA = "0xDF2588", Offset = "0xDF2588", VA = "0xDF2588")]
		public static Mesh Copy(Mesh input)
		{
			return null;
		}

		[Token(Token = "0x60014F1")]
		[Address(RVA = "0xDF27B8", Offset = "0xDF27B8", VA = "0xDF27B8")]
		public static void Triangulate(Vector2[] points, ref int[] output)
		{
		}

		[Token(Token = "0x60014F2")]
		[Address(RVA = "0xDF2E68", Offset = "0xDF2E68", VA = "0xDF2E68")]
		public static void FlipTriangles(ref int[] triangles)
		{
		}

		[Token(Token = "0x60014F3")]
		[Address(RVA = "0xDEE7B8", Offset = "0xDEE7B8", VA = "0xDEE7B8")]
		public static void FlipFaces(TS_Mesh input)
		{
		}

		[Token(Token = "0x60014F4")]
		[Address(RVA = "0xDF2EF0", Offset = "0xDF2EF0", VA = "0xDF2EF0")]
		public static void BreakMesh(Mesh input, bool keepNormals = true)
		{
		}

		[Token(Token = "0x60014F5")]
		[Address(RVA = "0xDF2BC0", Offset = "0xDF2BC0", VA = "0xDF2BC0")]
		private static float Area(Vector2[] points, int maxCount)
		{
			return default(float);
		}

		[Token(Token = "0x60014F6")]
		[Address(RVA = "0xDF2C58", Offset = "0xDF2C58", VA = "0xDF2C58")]
		private static bool Snip(Vector2[] points, int u, int v, int w, int n, int[] V)
		{
			return default(bool);
		}

		[Token(Token = "0x60014F7")]
		[Address(RVA = "0xDF3A20", Offset = "0xDF3A20", VA = "0xDF3A20")]
		private static bool InsideTriangle(Vector2 A, Vector2 B, Vector2 C, Vector2 P)
		{
			return default(bool);
		}

		[Token(Token = "0x60014F8")]
		[Address(RVA = "0xDF3A9C", Offset = "0xDF3A9C", VA = "0xDF3A9C")]
		public MeshUtility()
		{
		}
	}
	[Token(Token = "0x2000305")]
	public static class ResourceUtility
	{
		[Token(Token = "0x60014FA")]
		[Address(RVA = "0x11F6BB8", Offset = "0x11F6BB8", VA = "0x11F6BB8")]
		public static string FindFolder(string dir, string folderPattern)
		{
			return null;
		}

		[Token(Token = "0x60014FB")]
		[Address(RVA = "0x11F6FFC", Offset = "0x11F6FFC", VA = "0x11F6FFC")]
		public static Texture2D LoadTexture(string dreamteckPath, string textureFileName)
		{
			return null;
		}

		[Token(Token = "0x60014FC")]
		[Address(RVA = "0x11F7180", Offset = "0x11F7180", VA = "0x11F7180")]
		public static Texture2D LoadTexture(string path)
		{
			return null;
		}
	}
	[Token(Token = "0x2000306")]
	public static class SceneUtility
	{
		[Token(Token = "0x60014FD")]
		[Address(RVA = "0xCE19E4", Offset = "0xCE19E4", VA = "0xCE19E4")]
		public static void GetChildrenRecursively(Transform current, ref List<Transform> transformList)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000307")]
	public class TS_Bounds
	{
		[Token(Token = "0x4001515")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 center;

		[Token(Token = "0x4001516")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 extents;

		[Token(Token = "0x4001517")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 max;

		[Token(Token = "0x4001518")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector3 min;

		[Token(Token = "0x4001519")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector3 size;

		[Token(Token = "0x60014FE")]
		[Address(RVA = "0xE85904", Offset = "0xE85904", VA = "0xE85904")]
		public TS_Bounds()
		{
		}

		[Token(Token = "0x60014FF")]
		[Address(RVA = "0xE85978", Offset = "0xE85978", VA = "0xE85978")]
		public TS_Bounds(Bounds bounds)
		{
		}

		[Token(Token = "0x6001500")]
		[Address(RVA = "0xE85A58", Offset = "0xE85A58", VA = "0xE85A58")]
		public TS_Bounds(Vector3 c, Vector3 s)
		{
		}

		[Token(Token = "0x6001501")]
		[Address(RVA = "0xE85B48", Offset = "0xE85B48", VA = "0xE85B48")]
		public TS_Bounds(Vector3 min, Vector3 max, Vector3 center)
		{
		}

		[Token(Token = "0x6001502")]
		[Address(RVA = "0xE85C3C", Offset = "0xE85C3C", VA = "0xE85C3C")]
		public void CreateFromMinMax(Vector3 min, Vector3 max)
		{
		}

		[Token(Token = "0x6001503")]
		[Address(RVA = "0xE85CD8", Offset = "0xE85CD8", VA = "0xE85CD8")]
		public bool Contains(Vector3 point)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000308")]
	public class TS_Mesh
	{
		[Token(Token = "0x400151A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3[] vertices;

		[Token(Token = "0x400151B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3[] normals;

		[Token(Token = "0x400151C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector4[] tangents;

		[Token(Token = "0x400151D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Color[] colors;

		[Token(Token = "0x400151E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector2[] uv;

		[Token(Token = "0x400151F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector2[] uv2;

		[Token(Token = "0x4001520")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector2[] uv3;

		[Token(Token = "0x4001521")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector2[] uv4;

		[Token(Token = "0x4001522")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int[] triangles;

		[Token(Token = "0x4001523")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public List<int[]> subMeshes;

		[Token(Token = "0x4001524")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public TS_Bounds bounds;

		[Token(Token = "0x4001525")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool hasUpdate;

		[Token(Token = "0x170001D5")]
		public int vertexCount
		{
			[Token(Token = "0x6001504")]
			[Address(RVA = "0xE85D2C", Offset = "0xE85D2C", VA = "0xE85D2C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001505")]
			[Address(RVA = "0xE85D48", Offset = "0xE85D48", VA = "0xE85D48")]
			set
			{
			}
		}

		[Token(Token = "0x6001506")]
		[Address(RVA = "0xE85D4C", Offset = "0xE85D4C", VA = "0xE85D4C")]
		public TS_Mesh()
		{
		}

		[Token(Token = "0x6001507")]
		[Address(RVA = "0xE85FBC", Offset = "0xE85FBC", VA = "0xE85FBC")]
		public TS_Mesh(Mesh mesh)
		{
		}

		[Token(Token = "0x6001508")]
		[Address(RVA = "0xE8646C", Offset = "0xE8646C", VA = "0xE8646C")]
		public void Clear()
		{
		}

		[Token(Token = "0x6001509")]
		[Address(RVA = "0xE86244", Offset = "0xE86244", VA = "0xE86244")]
		public void CreateFromMesh(Mesh mesh)
		{
		}

		[Token(Token = "0x600150A")]
		[Address(RVA = "0xE866D0", Offset = "0xE866D0", VA = "0xE866D0")]
		public void Combine(List<TS_Mesh> newMeshes, bool overwrite = false)
		{
		}

		[Token(Token = "0x600150B")]
		[Address(RVA = "0xE87D24", Offset = "0xE87D24", VA = "0xE87D24")]
		public void Combine(TS_Mesh newMesh)
		{
		}

		[Token(Token = "0x600150C")]
		[Address(RVA = "0xE884EC", Offset = "0xE884EC", VA = "0xE884EC")]
		public static TS_Mesh Copy(TS_Mesh input)
		{
			return null;
		}

		[Token(Token = "0x600150D")]
		[Address(RVA = "0xE889D0", Offset = "0xE889D0", VA = "0xE889D0")]
		public void Absorb(TS_Mesh input)
		{
		}

		[Token(Token = "0x600150E")]
		[Address(RVA = "0xE890FC", Offset = "0xE890FC", VA = "0xE890FC")]
		public void WriteMesh(ref Mesh input)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000309")]
	public class TS_Transform
	{
		[Token(Token = "0x4001526")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool setPosition;

		[Token(Token = "0x4001527")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		private bool setRotation;

		[Token(Token = "0x4001528")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		private bool setScale;

		[Token(Token = "0x4001529")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13")]
		private bool setLocalPosition;

		[Token(Token = "0x400152A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private bool setLocalRotation;

		[Token(Token = "0x400152B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[HideInInspector]
		private Transform _transform;

		[Token(Token = "0x400152C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[HideInInspector]
		private float posX;

		[Token(Token = "0x400152D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		[HideInInspector]
		private float posY;

		[Token(Token = "0x400152E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[HideInInspector]
		private float posZ;

		[Token(Token = "0x400152F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		[HideInInspector]
		private float scaleX;

		[Token(Token = "0x4001530")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		[HideInInspector]
		private float scaleY;

		[Token(Token = "0x4001531")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		[HideInInspector]
		private float scaleZ;

		[Token(Token = "0x4001532")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[HideInInspector]
		private float lossyScaleX;

		[Token(Token = "0x4001533")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		[HideInInspector]
		private float lossyScaleY;

		[Token(Token = "0x4001534")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[HideInInspector]
		private float lossyScaleZ;

		[Token(Token = "0x4001535")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[SerializeField]
		[HideInInspector]
		private float rotX;

		[Token(Token = "0x4001536")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		[HideInInspector]
		private float rotY;

		[Token(Token = "0x4001537")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[SerializeField]
		[HideInInspector]
		private float rotZ;

		[Token(Token = "0x4001538")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		[HideInInspector]
		private float rotW;

		[Token(Token = "0x4001539")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[SerializeField]
		[HideInInspector]
		private float lposX;

		[Token(Token = "0x400153A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		[HideInInspector]
		private float lposY;

		[Token(Token = "0x400153B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[SerializeField]
		[HideInInspector]
		private float lposZ;

		[Token(Token = "0x400153C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		[HideInInspector]
		private float lrotX;

		[Token(Token = "0x400153D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[SerializeField]
		[HideInInspector]
		private float lrotY;

		[Token(Token = "0x400153E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		[HideInInspector]
		private float lrotZ;

		[Token(Token = "0x400153F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[SerializeField]
		[HideInInspector]
		private float lrotW;

		[Token(Token = "0x170001D6")]
		public Vector3 position
		{
			[Token(Token = "0x600150F")]
			[Address(RVA = "0xE893F8", Offset = "0xE893F8", VA = "0xE893F8")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001510")]
			[Address(RVA = "0xE89448", Offset = "0xE89448", VA = "0xE89448")]
			set
			{
			}
		}

		[Token(Token = "0x170001D7")]
		public Quaternion rotation
		{
			[Token(Token = "0x6001511")]
			[Address(RVA = "0xE894A4", Offset = "0xE894A4", VA = "0xE894A4")]
			get
			{
				return default(Quaternion);
			}
			[Token(Token = "0x6001512")]
			[Address(RVA = "0xE89520", Offset = "0xE89520", VA = "0xE89520")]
			set
			{
			}
		}

		[Token(Token = "0x170001D8")]
		public Vector3 scale
		{
			[Token(Token = "0x6001513")]
			[Address(RVA = "0xE89588", Offset = "0xE89588", VA = "0xE89588")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001514")]
			[Address(RVA = "0xE895D8", Offset = "0xE895D8", VA = "0xE895D8")]
			set
			{
			}
		}

		[Token(Token = "0x170001D9")]
		public Vector3 lossyScale
		{
			[Token(Token = "0x6001515")]
			[Address(RVA = "0xE89630", Offset = "0xE89630", VA = "0xE89630")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001516")]
			[Address(RVA = "0xE89680", Offset = "0xE89680", VA = "0xE89680")]
			set
			{
			}
		}

		[Token(Token = "0x170001DA")]
		public Vector3 localPosition
		{
			[Token(Token = "0x6001517")]
			[Address(RVA = "0xE896D8", Offset = "0xE896D8", VA = "0xE896D8")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001518")]
			[Address(RVA = "0xE89728", Offset = "0xE89728", VA = "0xE89728")]
			set
			{
			}
		}

		[Token(Token = "0x170001DB")]
		public Quaternion localRotation
		{
			[Token(Token = "0x6001519")]
			[Address(RVA = "0xE89784", Offset = "0xE89784", VA = "0xE89784")]
			get
			{
				return default(Quaternion);
			}
			[Token(Token = "0x600151A")]
			[Address(RVA = "0xE89800", Offset = "0xE89800", VA = "0xE89800")]
			set
			{
			}
		}

		[Token(Token = "0x170001DC")]
		public Transform transform
		{
			[Token(Token = "0x600151B")]
			[Address(RVA = "0xE89868", Offset = "0xE89868", VA = "0xE89868")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600151C")]
		[Address(RVA = "0xE89870", Offset = "0xE89870", VA = "0xE89870")]
		public TS_Transform(Transform input)
		{
		}

		[Token(Token = "0x600151D")]
		[Address(RVA = "0xE89924", Offset = "0xE89924", VA = "0xE89924")]
		public void Update()
		{
		}

		[Token(Token = "0x600151E")]
		[Address(RVA = "0xE898F4", Offset = "0xE898F4", VA = "0xE898F4")]
		public void SetTransform(Transform input)
		{
		}

		[Token(Token = "0x600151F")]
		[Address(RVA = "0xE89AFC", Offset = "0xE89AFC", VA = "0xE89AFC")]
		public bool HasChange()
		{
			return default(bool);
		}

		[Token(Token = "0x6001520")]
		[Address(RVA = "0xE89B40", Offset = "0xE89B40", VA = "0xE89B40")]
		public bool HasPositionChange()
		{
			return default(bool);
		}

		[Token(Token = "0x6001521")]
		[Address(RVA = "0xE89BD0", Offset = "0xE89BD0", VA = "0xE89BD0")]
		public bool HasRotationChange()
		{
			return default(bool);
		}

		[Token(Token = "0x6001522")]
		[Address(RVA = "0xE89C80", Offset = "0xE89C80", VA = "0xE89C80")]
		public bool HasScaleChange()
		{
			return default(bool);
		}

		[Token(Token = "0x6001523")]
		[Address(RVA = "0xE89D10", Offset = "0xE89D10", VA = "0xE89D10")]
		public Vector3 TransformPoint(Vector3 point)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001524")]
		[Address(RVA = "0xE89DB0", Offset = "0xE89DB0", VA = "0xE89DB0")]
		public Vector3 TransformDirection(Vector3 direction)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001525")]
		[Address(RVA = "0xE89E00", Offset = "0xE89E00", VA = "0xE89E00")]
		public Vector3 InverseTransformPoint(Vector3 point)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001526")]
		[Address(RVA = "0xE89E4C", Offset = "0xE89E4C", VA = "0xE89E4C")]
		public Vector3 InverseTransformDirection(Vector3 direction)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001527")]
		public T GetComponent<T>()
		{
			return (T)null;
		}
	}
	[Token(Token = "0x200030A")]
	public static class TransformUtility
	{
		[Token(Token = "0x6001528")]
		[Address(RVA = "0xBC934C", Offset = "0xBC934C", VA = "0xBC934C")]
		public static Vector3 GetPosition(Matrix4x4 m)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001529")]
		[Address(RVA = "0xBC936C", Offset = "0xBC936C", VA = "0xBC936C")]
		public static Quaternion GetRotation(Matrix4x4 m)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600152A")]
		[Address(RVA = "0xBC93EC", Offset = "0xBC93EC", VA = "0xBC93EC")]
		public static Vector3 GetScale(Matrix4x4 m)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600152B")]
		[Address(RVA = "0xBC9494", Offset = "0xBC9494", VA = "0xBC9494")]
		public static void SetPosition(ref Matrix4x4 m, ref Vector3 p)
		{
		}

		[Token(Token = "0x600152C")]
		[Address(RVA = "0xBC94EC", Offset = "0xBC94EC", VA = "0xBC94EC")]
		public static void GetChildCount(Transform parent, ref int count)
		{
		}

		[Token(Token = "0x600152D")]
		[Address(RVA = "0xBC9788", Offset = "0xBC9788", VA = "0xBC9788")]
		public static bool IsParent(Transform child, Transform parent)
		{
			return default(bool);
		}
	}
}
namespace Dreamteck.Splines
{
	[Token(Token = "0x200030B")]
	public class BlankUser : SplineUser
	{
		[Token(Token = "0x600152E")]
		[Address(RVA = "0xC142F4", Offset = "0xC142F4", VA = "0xC142F4")]
		private void Start()
		{
		}

		[Token(Token = "0x600152F")]
		[Address(RVA = "0xC142F8", Offset = "0xC142F8", VA = "0xC142F8", Slot = "13")]
		protected override void LateRun()
		{
		}

		[Token(Token = "0x6001530")]
		[Address(RVA = "0xC14300", Offset = "0xC14300", VA = "0xC14300", Slot = "14")]
		protected override void Build()
		{
		}

		[Token(Token = "0x6001531")]
		[Address(RVA = "0xC14308", Offset = "0xC14308", VA = "0xC14308", Slot = "15")]
		protected override void PostBuild()
		{
		}

		[Token(Token = "0x6001532")]
		[Address(RVA = "0xC14310", Offset = "0xC14310", VA = "0xC14310")]
		public BlankUser()
		{
		}
	}
	[Token(Token = "0x200030C")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5CD244", Offset = "0x5CD244")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x5CD244", Offset = "0x5CD244")]
	public class EdgeColliderGenerator : SplineUser
	{
		[Token(Token = "0x4001540")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[SerializeField]
		[HideInInspector]
		private float _offset;

		[Token(Token = "0x4001541")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		[HideInInspector]
		protected EdgeCollider2D edgeCollider;

		[Token(Token = "0x4001542")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		[HideInInspector]
		protected Vector2[] vertices;

		[Token(Token = "0x4001543")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[HideInInspector]
		public float updateRate;

		[Token(Token = "0x4001544")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		protected float lastUpdateTime;

		[Token(Token = "0x4001545")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private bool updateCollider;

		[Token(Token = "0x170001DD")]
		public float offset
		{
			[Token(Token = "0x6001533")]
			[Address(RVA = "0x9F7F54", Offset = "0x9F7F54", VA = "0x9F7F54")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001534")]
			[Address(RVA = "0x9F7F5C", Offset = "0x9F7F5C", VA = "0x9F7F5C")]
			set
			{
			}
		}

		[Token(Token = "0x6001535")]
		[Address(RVA = "0x9F7F7C", Offset = "0x9F7F7C", VA = "0x9F7F7C", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6001536")]
		[Address(RVA = "0x9F7FE4", Offset = "0x9F7FE4", VA = "0x9F7FE4", Slot = "5")]
		protected override void Reset()
		{
		}

		[Token(Token = "0x6001537")]
		[Address(RVA = "0x9F7FEC", Offset = "0x9F7FEC", VA = "0x9F7FEC", Slot = "6")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6001538")]
		[Address(RVA = "0x9F7FF4", Offset = "0x9F7FF4", VA = "0x9F7FF4", Slot = "7")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x6001539")]
		[Address(RVA = "0x9F7FFC", Offset = "0x9F7FFC", VA = "0x9F7FFC", Slot = "8")]
		protected override void OnDestroy()
		{
		}

		[Token(Token = "0x600153A")]
		[Address(RVA = "0x9F8004", Offset = "0x9F8004", VA = "0x9F8004", Slot = "13")]
		protected override void LateRun()
		{
		}

		[Token(Token = "0x600153B")]
		[Address(RVA = "0x9F80D4", Offset = "0x9F80D4", VA = "0x9F80D4", Slot = "14")]
		protected override void Build()
		{
		}

		[Token(Token = "0x600153C")]
		[Address(RVA = "0x9F8258", Offset = "0x9F8258", VA = "0x9F8258", Slot = "15")]
		protected override void PostBuild()
		{
		}

		[Token(Token = "0x600153D")]
		[Address(RVA = "0x9F83A0", Offset = "0x9F83A0", VA = "0x9F83A0")]
		public EdgeColliderGenerator()
		{
		}
	}
	[Token(Token = "0x200030D")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5CD2C8", Offset = "0x5CD2C8")]
	public class LengthCalculator : SplineUser
	{
		[Serializable]
		[Token(Token = "0x20004AC")]
		public class LengthEvent
		{
			[Token(Token = "0x20004F7")]
			public enum Type
			{
				[Token(Token = "0x4001EFC")]
				Growing,
				[Token(Token = "0x4001EFD")]
				Shrinking,
				[Token(Token = "0x4001EFE")]
				Both
			}

			[Token(Token = "0x4001DC8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool enabled;

			[Token(Token = "0x4001DC9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float targetLength;

			[Token(Token = "0x4001DCA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public UnityEvent onChange;

			[Token(Token = "0x4001DCB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Type type;

			[Token(Token = "0x6001CD1")]
			[Address(RVA = "0x7EF07C", Offset = "0x7EF07C", VA = "0x7EF07C")]
			public LengthEvent()
			{
			}

			[Token(Token = "0x6001CD2")]
			[Address(RVA = "0x7EF0FC", Offset = "0x7EF0FC", VA = "0x7EF0FC")]
			public LengthEvent(Type t)
			{
			}

			[Token(Token = "0x6001CD3")]
			[Address(RVA = "0x7EF190", Offset = "0x7EF190", VA = "0x7EF190")]
			public void Check(float fromLength, float toLength)
			{
			}
		}

		[Token(Token = "0x4001546")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[HideInInspector]
		public LengthEvent[] lengthEvents;

		[Token(Token = "0x4001547")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[HideInInspector]
		public float idealLength;

		[Token(Token = "0x4001548")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private float _length;

		[Token(Token = "0x4001549")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private float lastLength;

		[Token(Token = "0x170001DE")]
		public float length
		{
			[Token(Token = "0x600153E")]
			[Address(RVA = "0x102DF04", Offset = "0x102DF04", VA = "0x102DF04")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x600153F")]
		[Address(RVA = "0x102DF0C", Offset = "0x102DF0C", VA = "0x102DF0C", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6001540")]
		[Address(RVA = "0x102DFB0", Offset = "0x102DFB0", VA = "0x102DFB0", Slot = "14")]
		protected override void Build()
		{
		}

		[Token(Token = "0x6001541")]
		[Address(RVA = "0x102E054", Offset = "0x102E054", VA = "0x102E054")]
		private void AddEvent(LengthEvent lengthEvent)
		{
		}

		[Token(Token = "0x6001542")]
		[Address(RVA = "0x102E140", Offset = "0x102E140", VA = "0x102E140")]
		public LengthCalculator()
		{
		}
	}
	[Token(Token = "0x200030E")]
	public class MeshGenerator : SplineUser
	{
		[Token(Token = "0x20004AD")]
		public enum UVMode
		{
			[Token(Token = "0x4001DCD")]
			Clip,
			[Token(Token = "0x4001DCE")]
			UniformClip,
			[Token(Token = "0x4001DCF")]
			Clamp,
			[Token(Token = "0x4001DD0")]
			UniformClamp
		}

		[Token(Token = "0x20004AE")]
		public enum NormalMethod
		{
			[Token(Token = "0x4001DD2")]
			Recalculate,
			[Token(Token = "0x4001DD3")]
			SplineNormals
		}

		[Token(Token = "0x400154A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x93")]
		[SerializeField]
		[HideInInspector]
		private bool _baked;

		[Token(Token = "0x400154B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[SerializeField]
		[HideInInspector]
		private bool _markDynamic;

		[Token(Token = "0x400154C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		[HideInInspector]
		private float _size;

		[Token(Token = "0x400154D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[SerializeField]
		[HideInInspector]
		private Color _color;

		[Token(Token = "0x400154E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[SerializeField]
		[HideInInspector]
		private Vector3 _offset;

		[Token(Token = "0x400154F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		[HideInInspector]
		private NormalMethod _normalMethod;

		[Token(Token = "0x4001550")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[SerializeField]
		[HideInInspector]
		private bool _calculateTangents;

		[Token(Token = "0x4001551")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		[HideInInspector]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D37F8", Offset = "0x5D37F8")]
		private float _rotation;

		[Token(Token = "0x4001552")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[SerializeField]
		[HideInInspector]
		private bool _flipFaces;

		[Token(Token = "0x4001553")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC5")]
		[SerializeField]
		[HideInInspector]
		private bool _doubleSided;

		[Token(Token = "0x4001554")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		[HideInInspector]
		private UVMode _uvMode;

		[Token(Token = "0x4001555")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[SerializeField]
		[HideInInspector]
		private Vector2 _uvScale;

		[Token(Token = "0x4001556")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		[SerializeField]
		[HideInInspector]
		private Vector2 _uvOffset;

		[Token(Token = "0x4001557")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[SerializeField]
		[HideInInspector]
		private float _uvRotation;

		[Token(Token = "0x4001558")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[SerializeField]
		[HideInInspector]
		protected MeshCollider meshCollider;

		[Token(Token = "0x4001559")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[SerializeField]
		[HideInInspector]
		protected MeshFilter filter;

		[Token(Token = "0x400155A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[SerializeField]
		[HideInInspector]
		protected MeshRenderer meshRenderer;

		[Token(Token = "0x400155B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[SerializeField]
		[HideInInspector]
		protected TS_Mesh tsMesh;

		[Token(Token = "0x400155C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[SerializeField]
		[HideInInspector]
		protected Mesh mesh;

		[Token(Token = "0x400155D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[HideInInspector]
		public float colliderUpdateRate;

		[Token(Token = "0x400155E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		protected bool updateCollider;

		[Token(Token = "0x400155F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		protected float lastUpdateTime;

		[Token(Token = "0x4001560")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		private float vDist;

		[Token(Token = "0x4001561")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected static Vector2 uvs;

		[Token(Token = "0x170001DF")]
		public float size
		{
			[Token(Token = "0x6001543")]
			[Address(RVA = "0xDED4C0", Offset = "0xDED4C0", VA = "0xDED4C0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001544")]
			[Address(RVA = "0xDED4C8", Offset = "0xDED4C8", VA = "0xDED4C8")]
			set
			{
			}
		}

		[Token(Token = "0x170001E0")]
		public Color color
		{
			[Token(Token = "0x6001545")]
			[Address(RVA = "0xDED4E8", Offset = "0xDED4E8", VA = "0xDED4E8")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6001546")]
			[Address(RVA = "0xDED4F4", Offset = "0xDED4F4", VA = "0xDED4F4")]
			set
			{
			}
		}

		[Token(Token = "0x170001E1")]
		public Vector3 offset
		{
			[Token(Token = "0x6001547")]
			[Address(RVA = "0xDED56C", Offset = "0xDED56C", VA = "0xDED56C")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001548")]
			[Address(RVA = "0xDED578", Offset = "0xDED578", VA = "0xDED578")]
			set
			{
			}
		}

		[Token(Token = "0x170001E2")]
		public NormalMethod normalMethod
		{
			[Token(Token = "0x6001549")]
			[Address(RVA = "0xDED5EC", Offset = "0xDED5EC", VA = "0xDED5EC")]
			get
			{
				return default(NormalMethod);
			}
			[Token(Token = "0x600154A")]
			[Address(RVA = "0xDED5F4", Offset = "0xDED5F4", VA = "0xDED5F4")]
			set
			{
			}
		}

		[Token(Token = "0x170001E3")]
		public bool calculateTangents
		{
			[Token(Token = "0x600154B")]
			[Address(RVA = "0xDED614", Offset = "0xDED614", VA = "0xDED614")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600154C")]
			[Address(RVA = "0xDED61C", Offset = "0xDED61C", VA = "0xDED61C")]
			set
			{
			}
		}

		[Token(Token = "0x170001E4")]
		public float rotation
		{
			[Token(Token = "0x600154D")]
			[Address(RVA = "0xDED648", Offset = "0xDED648", VA = "0xDED648")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600154E")]
			[Address(RVA = "0xDED650", Offset = "0xDED650", VA = "0xDED650")]
			set
			{
			}
		}

		[Token(Token = "0x170001E5")]
		public bool flipFaces
		{
			[Token(Token = "0x600154F")]
			[Address(RVA = "0xDED670", Offset = "0xDED670", VA = "0xDED670")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001550")]
			[Address(RVA = "0xDED678", Offset = "0xDED678", VA = "0xDED678")]
			set
			{
			}
		}

		[Token(Token = "0x170001E6")]
		public bool doubleSided
		{
			[Token(Token = "0x6001551")]
			[Address(RVA = "0xDED6A4", Offset = "0xDED6A4", VA = "0xDED6A4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001552")]
			[Address(RVA = "0xDED6AC", Offset = "0xDED6AC", VA = "0xDED6AC")]
			set
			{
			}
		}

		[Token(Token = "0x170001E7")]
		public UVMode uvMode
		{
			[Token(Token = "0x6001553")]
			[Address(RVA = "0xDED6D8", Offset = "0xDED6D8", VA = "0xDED6D8")]
			get
			{
				return default(UVMode);
			}
			[Token(Token = "0x6001554")]
			[Address(RVA = "0xDED6E0", Offset = "0xDED6E0", VA = "0xDED6E0")]
			set
			{
			}
		}

		[Token(Token = "0x170001E8")]
		public Vector2 uvScale
		{
			[Token(Token = "0x6001555")]
			[Address(RVA = "0xDED700", Offset = "0xDED700", VA = "0xDED700")]
			get
			{
				return default(Vector2);
			}
			[Token(Token = "0x6001556")]
			[Address(RVA = "0xDED708", Offset = "0xDED708", VA = "0xDED708")]
			set
			{
			}
		}

		[Token(Token = "0x170001E9")]
		public Vector2 uvOffset
		{
			[Token(Token = "0x6001557")]
			[Address(RVA = "0xDED744", Offset = "0xDED744", VA = "0xDED744")]
			get
			{
				return default(Vector2);
			}
			[Token(Token = "0x6001558")]
			[Address(RVA = "0xDED74C", Offset = "0xDED74C", VA = "0xDED74C")]
			set
			{
			}
		}

		[Token(Token = "0x170001EA")]
		public float uvRotation
		{
			[Token(Token = "0x6001559")]
			[Address(RVA = "0xDED788", Offset = "0xDED788", VA = "0xDED788")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600155A")]
			[Address(RVA = "0xDED790", Offset = "0xDED790", VA = "0xDED790")]
			set
			{
			}
		}

		[Token(Token = "0x170001EB")]
		public bool baked
		{
			[Token(Token = "0x600155B")]
			[Address(RVA = "0xDED7B0", Offset = "0xDED7B0", VA = "0xDED7B0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001EC")]
		public bool markDynamic
		{
			[Token(Token = "0x600155C")]
			[Address(RVA = "0xDED7B8", Offset = "0xDED7B8", VA = "0xDED7B8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600155D")]
			[Address(RVA = "0xDED7C0", Offset = "0xDED7C0", VA = "0xDED7C0")]
			set
			{
			}
		}

		[Token(Token = "0x600155E")]
		[Address(RVA = "0xDED8B0", Offset = "0xDED8B0", VA = "0xDED8B0", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x600155F")]
		[Address(RVA = "0xDEDA00", Offset = "0xDEDA00", VA = "0xDEDA00", Slot = "5")]
		protected override void Reset()
		{
		}

		[Token(Token = "0x6001560")]
		[Address(RVA = "0xDEDA08", Offset = "0xDEDA08", VA = "0xDEDA08")]
		public void CloneMesh()
		{
		}

		[Token(Token = "0x6001561")]
		[Address(RVA = "0xDEDB64", Offset = "0xDEDB64", VA = "0xDEDB64", Slot = "10")]
		public override void Rebuild()
		{
		}

		[Token(Token = "0x6001562")]
		[Address(RVA = "0xDEDB78", Offset = "0xDEDB78", VA = "0xDEDB78", Slot = "11")]
		public override void RebuildImmediate()
		{
		}

		[Token(Token = "0x6001563")]
		[Address(RVA = "0xDEDB8C", Offset = "0xDEDB8C", VA = "0xDEDB8C", Slot = "6")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6001564")]
		[Address(RVA = "0xDEDB94", Offset = "0xDEDB94", VA = "0xDEDB94", Slot = "7")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x6001565")]
		[Address(RVA = "0xDEDB9C", Offset = "0xDEDB9C", VA = "0xDEDB9C", Slot = "8")]
		protected override void OnDestroy()
		{
		}

		[Token(Token = "0x6001566")]
		[Address(RVA = "0xDEDCD0", Offset = "0xDEDCD0", VA = "0xDEDCD0")]
		public void UpdateCollider()
		{
		}

		[Token(Token = "0x6001567")]
		[Address(RVA = "0xDEDDE4", Offset = "0xDEDDE4", VA = "0xDEDDE4", Slot = "13")]
		protected override void LateRun()
		{
		}

		[Token(Token = "0x6001568")]
		[Address(RVA = "0xDEDED4", Offset = "0xDEDED4", VA = "0xDEDED4", Slot = "14")]
		protected override void Build()
		{
		}

		[Token(Token = "0x6001569")]
		[Address(RVA = "0xDEDF20", Offset = "0xDEDF20", VA = "0xDEDF20", Slot = "15")]
		protected override void PostBuild()
		{
		}

		[Token(Token = "0x600156A")]
		[Address(RVA = "0xDEDF54", Offset = "0xDEDF54", VA = "0xDEDF54", Slot = "18")]
		protected virtual void BuildMesh()
		{
		}

		[Token(Token = "0x600156B")]
		[Address(RVA = "0xDEDF58", Offset = "0xDEDF58", VA = "0xDEDF58", Slot = "19")]
		protected virtual void WriteMesh()
		{
		}

		[Token(Token = "0x600156C")]
		[Address(RVA = "0xDEEFF4", Offset = "0xDEEFF4", VA = "0xDEEFF4", Slot = "20")]
		protected virtual void AllocateMesh(int vertexCount, int trisCount)
		{
		}

		[Token(Token = "0x600156D")]
		[Address(RVA = "0xDEF1C0", Offset = "0xDEF1C0", VA = "0xDEF1C0")]
		protected void ResetUVDistance()
		{
		}

		[Token(Token = "0x600156E")]
		[Address(RVA = "0xDEF220", Offset = "0xDEF220", VA = "0xDEF220")]
		protected void AddUVDistance(int sampleIndex)
		{
		}

		[Token(Token = "0x600156F")]
		[Address(RVA = "0xDEF2A8", Offset = "0xDEF2A8", VA = "0xDEF2A8")]
		protected void CalculateUVs(double percent, float u)
		{
		}

		[Token(Token = "0x6001570")]
		[Address(RVA = "0xDEF468", Offset = "0xDEF468", VA = "0xDEF468")]
		public MeshGenerator()
		{
		}
	}
	[Token(Token = "0x200030F")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5CD300", Offset = "0x5CD300")]
	public class Node : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20004AF")]
		public class Connection
		{
			[Token(Token = "0x4001DD4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool invertTangents;

			[Token(Token = "0x4001DD5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[SerializeField]
			private int _pointIndex;

			[Token(Token = "0x4001DD6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[SerializeField]
			private SplineComputer _computer;

			[Token(Token = "0x4001DD7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[SerializeField]
			[HideInInspector]
			internal SplinePoint point;

			[Token(Token = "0x1700038C")]
			public SplineComputer spline
			{
				[Token(Token = "0x6001CD4")]
				[Address(RVA = "0xFED43C", Offset = "0xFED43C", VA = "0xFED43C")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700038D")]
			public int pointIndex
			{
				[Token(Token = "0x6001CD5")]
				[Address(RVA = "0xFED444", Offset = "0xFED444", VA = "0xFED444")]
				get
				{
					return default(int);
				}
			}

			[Token(Token = "0x1700038E")]
			internal bool isValid
			{
				[Token(Token = "0x6001CD6")]
				[Address(RVA = "0xFED44C", Offset = "0xFED44C", VA = "0xFED44C")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6001CD7")]
			[Address(RVA = "0xFED4E8", Offset = "0xFED4E8", VA = "0xFED4E8")]
			internal Connection(SplineComputer comp, int index, SplinePoint inputPoint)
			{
			}
		}

		[Token(Token = "0x20004B0")]
		public enum Type
		{
			[Token(Token = "0x4001DD9")]
			Smooth,
			[Token(Token = "0x4001DDA")]
			Free
		}

		[Token(Token = "0x4001562")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public Type type;

		[Token(Token = "0x4001563")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[HideInInspector]
		protected Connection[] connections;

		[Token(Token = "0x4001564")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[HideInInspector]
		private bool _transformSize;

		[Token(Token = "0x4001565")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		[SerializeField]
		[HideInInspector]
		private bool _transformNormals;

		[Token(Token = "0x4001566")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		[SerializeField]
		[HideInInspector]
		private bool _transformTangents;

		[Token(Token = "0x4001567")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector3 lastPosition;

		[Token(Token = "0x4001568")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 lastScale;

		[Token(Token = "0x4001569")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Quaternion lastRotation;

		[Token(Token = "0x400156A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform trs;

		[Token(Token = "0x170001ED")]
		public bool transformNormals
		{
			[Token(Token = "0x6001572")]
			[Address(RVA = "0x16F6554", Offset = "0x16F6554", VA = "0x16F6554")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001573")]
			[Address(RVA = "0x16F655C", Offset = "0x16F655C", VA = "0x16F655C")]
			set
			{
			}
		}

		[Token(Token = "0x170001EE")]
		public bool transformSize
		{
			[Token(Token = "0x6001574")]
			[Address(RVA = "0x16F66BC", Offset = "0x16F66BC", VA = "0x16F66BC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001575")]
			[Address(RVA = "0x16F66C4", Offset = "0x16F66C4", VA = "0x16F66C4")]
			set
			{
			}
		}

		[Token(Token = "0x170001EF")]
		public bool transformTangents
		{
			[Token(Token = "0x6001576")]
			[Address(RVA = "0x16F66E8", Offset = "0x16F66E8", VA = "0x16F66E8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001577")]
			[Address(RVA = "0x16F66F0", Offset = "0x16F66F0", VA = "0x16F66F0")]
			set
			{
			}
		}

		[Token(Token = "0x6001578")]
		[Address(RVA = "0x16F6714", Offset = "0x16F6714", VA = "0x16F6714")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001579")]
		[Address(RVA = "0x16F67B4", Offset = "0x16F67B4", VA = "0x16F67B4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600157A")]
		[Address(RVA = "0x16F67F8", Offset = "0x16F67F8", VA = "0x16F67F8")]
		private void Update()
		{
		}

		[Token(Token = "0x600157B")]
		[Address(RVA = "0x16F67FC", Offset = "0x16F67FC", VA = "0x16F67FC")]
		private bool TransformChanged()
		{
			return default(bool);
		}

		[Token(Token = "0x600157C")]
		[Address(RVA = "0x16F674C", Offset = "0x16F674C", VA = "0x16F674C")]
		private void SampleTransform()
		{
		}

		[Token(Token = "0x600157D")]
		[Address(RVA = "0x16F67B8", Offset = "0x16F67B8", VA = "0x16F67B8")]
		private void Run()
		{
		}

		[Token(Token = "0x600157E")]
		[Address(RVA = "0x16F6C94", Offset = "0x16F6C94", VA = "0x16F6C94")]
		public SplinePoint GetPoint(int connectionIndex, bool swapTangents)
		{
			return default(SplinePoint);
		}

		[Token(Token = "0x600157F")]
		[Address(RVA = "0x16F6F04", Offset = "0x16F6F04", VA = "0x16F6F04")]
		public void SetPoint(int connectionIndex, SplinePoint worldPoint, bool swappedTangents)
		{
		}

		[Token(Token = "0x6001580")]
		[Address(RVA = "0x16F73E8", Offset = "0x16F73E8", VA = "0x16F73E8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001581")]
		[Address(RVA = "0x16F73EC", Offset = "0x16F73EC", VA = "0x16F73EC")]
		public void ClearConnections()
		{
		}

		[Token(Token = "0x6001582")]
		[Address(RVA = "0x16F68F8", Offset = "0x16F68F8", VA = "0x16F68F8")]
		public void UpdateConnectedComputers([Optional] SplineComputer excludeComputer)
		{
		}

		[Token(Token = "0x6001583")]
		[Address(RVA = "0x16F76BC", Offset = "0x16F76BC", VA = "0x16F76BC")]
		public void UpdatePoint(SplineComputer computer, int pointIndex, SplinePoint point, bool updatePosition = true)
		{
		}

		[Token(Token = "0x6001584")]
		[Address(RVA = "0x16F6580", Offset = "0x16F6580", VA = "0x16F6580")]
		private void UpdatePoints()
		{
		}

		[Token(Token = "0x6001585")]
		[Address(RVA = "0x16F7808", Offset = "0x16F7808", VA = "0x16F7808")]
		protected void RemoveInvalidConnections()
		{
		}

		[Token(Token = "0x6001586")]
		[Address(RVA = "0x16F789C", Offset = "0x16F789C", VA = "0x16F789C", Slot = "4")]
		public virtual void AddConnection(SplineComputer computer, int pointIndex)
		{
		}

		[Token(Token = "0x6001587")]
		[Address(RVA = "0x16F72A8", Offset = "0x16F72A8", VA = "0x16F72A8")]
		protected SplinePoint PointToLocal(SplinePoint worldPoint)
		{
			return default(SplinePoint);
		}

		[Token(Token = "0x6001588")]
		[Address(RVA = "0x16F6DB8", Offset = "0x16F6DB8", VA = "0x16F6DB8")]
		protected SplinePoint PointToWorld(SplinePoint localPoint)
		{
			return default(SplinePoint);
		}

		[Token(Token = "0x6001589")]
		[Address(RVA = "0x16F7C88", Offset = "0x16F7C88", VA = "0x16F7C88", Slot = "5")]
		public virtual void RemoveConnection(SplineComputer computer, int pointIndex)
		{
		}

		[Token(Token = "0x600158A")]
		[Address(RVA = "0x16F7520", Offset = "0x16F7520", VA = "0x16F7520")]
		private void RemoveConnection(int index)
		{
		}

		[Token(Token = "0x600158B")]
		[Address(RVA = "0x16F7D84", Offset = "0x16F7D84", VA = "0x16F7D84", Slot = "6")]
		public virtual bool HasConnection(SplineComputer computer, int pointIndex)
		{
			return default(bool);
		}

		[Token(Token = "0x600158C")]
		[Address(RVA = "0x16F7ED8", Offset = "0x16F7ED8", VA = "0x16F7ED8")]
		public Connection[] GetConnections()
		{
			return null;
		}

		[Token(Token = "0x600158D")]
		[Address(RVA = "0x16F7EE0", Offset = "0x16F7EE0", VA = "0x16F7EE0")]
		public Node()
		{
		}
	}
	[Token(Token = "0x2000310")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5CD34C", Offset = "0x5CD34C")]
	public class ObjectBender : SplineUser
	{
		[Token(Token = "0x20004B1")]
		public enum Axis
		{
			[Token(Token = "0x4001DDC")]
			X,
			[Token(Token = "0x4001DDD")]
			Y,
			[Token(Token = "0x4001DDE")]
			Z
		}

		[Token(Token = "0x20004B2")]
		public enum NormalMode
		{
			[Token(Token = "0x4001DE0")]
			Spline,
			[Token(Token = "0x4001DE1")]
			Auto,
			[Token(Token = "0x4001DE2")]
			Custom
		}

		[Token(Token = "0x20004B3")]
		public enum ForwardMode
		{
			[Token(Token = "0x4001DE4")]
			Spline,
			[Token(Token = "0x4001DE5")]
			Custom
		}

		[Serializable]
		[Token(Token = "0x20004B4")]
		public class BendProperty
		{
			[Token(Token = "0x4001DE6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool enabled;

			[Token(Token = "0x4001DE7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public TS_Transform transform;

			[Token(Token = "0x4001DE8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public bool applyRotation;

			[Token(Token = "0x4001DE9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
			public bool applyScale;

			[Token(Token = "0x4001DEA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
			public bool generateLightmapUVs;

			[Token(Token = "0x4001DEB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x23")]
			[SerializeField]
			[HideInInspector]
			private bool _bendMesh;

			[Token(Token = "0x4001DEC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[SerializeField]
			[HideInInspector]
			private bool _bendSpline;

			[Token(Token = "0x4001DED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
			[SerializeField]
			[HideInInspector]
			private bool _bendCollider;

			[Token(Token = "0x4001DEE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float colliderUpdateDue;

			[Token(Token = "0x4001DEF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float colliderUpdateRate;

			[Token(Token = "0x4001DF0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private bool updateCollider;

			[Token(Token = "0x4001DF1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public Vector3 originalPosition;

			[Token(Token = "0x4001DF2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public Vector3 originalScale;

			[Token(Token = "0x4001DF3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			public Quaternion originalRotation;

			[Token(Token = "0x4001DF4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public Quaternion parentRotation;

			[Token(Token = "0x4001DF5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			public Vector3 positionPercent;

			[Token(Token = "0x4001DF6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			public Vector3[] vertexPercents;

			[Token(Token = "0x4001DF7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			public Vector3[] normals;

			[Token(Token = "0x4001DF8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			public Vector3[] colliderVertexPercents;

			[Token(Token = "0x4001DF9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			public Vector3[] colliderNormals;

			[Token(Token = "0x4001DFA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			[SerializeField]
			[HideInInspector]
			private Mesh originalMesh;

			[Token(Token = "0x4001DFB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			[SerializeField]
			[HideInInspector]
			private Mesh originalColliderMesh;

			[Token(Token = "0x4001DFC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			private Spline _originalSpline;

			[Token(Token = "0x4001DFD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			[SerializeField]
			[HideInInspector]
			private Mesh destinationMesh;

			[Token(Token = "0x4001DFE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
			[SerializeField]
			[HideInInspector]
			private Mesh destinationColliderMesh;

			[Token(Token = "0x4001DFF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			public Spline destinationSpline;

			[Token(Token = "0x4001E00")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
			public TS_Mesh _editMesh;

			[Token(Token = "0x4001E01")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
			public TS_Mesh _editColliderMesh;

			[Token(Token = "0x4001E02")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
			public MeshFilter filter;

			[Token(Token = "0x4001E03")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
			public MeshCollider collider;

			[Token(Token = "0x4001E04")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
			public SplineComputer splineComputer;

			[Token(Token = "0x4001E05")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
			public Vector3[] splinePointPercents;

			[Token(Token = "0x4001E06")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
			public Vector3[] primaryTangentPercents;

			[Token(Token = "0x4001E07")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
			public Vector3[] secondaryTangentPercents;

			[Token(Token = "0x4001E08")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
			[SerializeField]
			[HideInInspector]
			private bool parent;

			[Token(Token = "0x1700038F")]
			public bool isValid
			{
				[Token(Token = "0x6001CD8")]
				[Address(RVA = "0xFED544", Offset = "0xFED544", VA = "0xFED544")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x17000390")]
			public bool bendMesh
			{
				[Token(Token = "0x6001CD9")]
				[Address(RVA = "0xFED5C8", Offset = "0xFED5C8", VA = "0xFED5C8")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6001CDA")]
				[Address(RVA = "0xFED5D0", Offset = "0xFED5D0", VA = "0xFED5D0")]
				set
				{
				}
			}

			[Token(Token = "0x17000391")]
			public bool bendCollider
			{
				[Token(Token = "0x6001CDB")]
				[Address(RVA = "0xFED80C", Offset = "0xFED80C", VA = "0xFED80C")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6001CDC")]
				[Address(RVA = "0xFED814", Offset = "0xFED814", VA = "0xFED814")]
				set
				{
				}
			}

			[Token(Token = "0x17000392")]
			public bool bendSpline
			{
				[Token(Token = "0x6001CDD")]
				[Address(RVA = "0xFEDA1C", Offset = "0xFEDA1C", VA = "0xFEDA1C")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6001CDE")]
				[Address(RVA = "0xFEDA24", Offset = "0xFEDA24", VA = "0xFEDA24")]
				set
				{
				}
			}

			[Token(Token = "0x17000393")]
			public TS_Mesh editMesh
			{
				[Token(Token = "0x6001CDF")]
				[Address(RVA = "0xFEDA30", Offset = "0xFEDA30", VA = "0xFEDA30")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000394")]
			public TS_Mesh editColliderMesh
			{
				[Token(Token = "0x6001CE0")]
				[Address(RVA = "0xFEDB4C", Offset = "0xFEDB4C", VA = "0xFEDB4C")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000395")]
			public Spline originalSpline
			{
				[Token(Token = "0x6001CE1")]
				[Address(RVA = "0xFEDC98", Offset = "0xFEDC98", VA = "0xFEDC98")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001CE2")]
			[Address(RVA = "0xFEDDF8", Offset = "0xFEDDF8", VA = "0xFEDDF8")]
			public BendProperty(Transform t, bool isParent = false)
			{
			}

			[Token(Token = "0x6001CE3")]
			[Address(RVA = "0xFEE558", Offset = "0xFEE558", VA = "0xFEE558")]
			public void Revert()
			{
			}

			[Token(Token = "0x6001CE4")]
			[Address(RVA = "0xFED774", Offset = "0xFED774", VA = "0xFED774")]
			private void RevertMesh()
			{
			}

			[Token(Token = "0x6001CE5")]
			[Address(RVA = "0xFEE61C", Offset = "0xFEE61C", VA = "0xFEE61C")]
			private void RevertTransform()
			{
			}

			[Token(Token = "0x6001CE6")]
			[Address(RVA = "0xFED984", Offset = "0xFED984", VA = "0xFED984")]
			private void RevertCollider()
			{
			}

			[Token(Token = "0x6001CE7")]
			[Address(RVA = "0xFEE6A0", Offset = "0xFEE6A0", VA = "0xFEE6A0")]
			public void Apply(bool applyTransform)
			{
			}

			[Token(Token = "0x6001CE8")]
			[Address(RVA = "0xFEE9FC", Offset = "0xFEE9FC", VA = "0xFEE9FC")]
			public void Update()
			{
			}

			[Token(Token = "0x6001CE9")]
			[Address(RVA = "0xFEE828", Offset = "0xFEE828", VA = "0xFEE828")]
			private void ApplyMesh()
			{
			}

			[Token(Token = "0x6001CEA")]
			[Address(RVA = "0xFEEA48", Offset = "0xFEEA48", VA = "0xFEEA48")]
			private void ApplyCollider()
			{
			}

			[Token(Token = "0x6001CEB")]
			[Address(RVA = "0xFEE9CC", Offset = "0xFEE9CC", VA = "0xFEE9CC")]
			private void ApplySpline()
			{
			}
		}

		[Token(Token = "0x400156B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x93")]
		[SerializeField]
		[HideInInspector]
		private bool _bend;

		[Token(Token = "0x400156C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[HideInInspector]
		public BendProperty[] bendProperties;

		[Token(Token = "0x400156D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		[HideInInspector]
		private TS_Bounds bounds;

		[Token(Token = "0x400156E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		[HideInInspector]
		private Axis _axis;

		[Token(Token = "0x400156F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[SerializeField]
		[HideInInspector]
		private NormalMode _normalMode;

		[Token(Token = "0x4001570")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		[HideInInspector]
		private ForwardMode _forwardMode;

		[Token(Token = "0x4001571")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[SerializeField]
		[HideInInspector]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x5D3CE0", Offset = "0x5D3CE0")]
		private Vector3 _customNormal;

		[Token(Token = "0x4001572")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		[HideInInspector]
		private Vector3 _customForward;

		[Token(Token = "0x4001573")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private Matrix4x4 normalMatrix;

		[Token(Token = "0x4001574")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		private Quaternion bendRotation;

		[Token(Token = "0x170001F0")]
		public bool bend
		{
			[Token(Token = "0x600158E")]
			[Address(RVA = "0x16FD524", Offset = "0x16FD524", VA = "0x16FD524")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600158F")]
			[Address(RVA = "0x16FD52C", Offset = "0x16FD52C", VA = "0x16FD52C")]
			set
			{
			}
		}

		[Token(Token = "0x170001F1")]
		public Axis axis
		{
			[Token(Token = "0x6001590")]
			[Address(RVA = "0x16FD7BC", Offset = "0x16FD7BC", VA = "0x16FD7BC")]
			get
			{
				return default(Axis);
			}
			[Token(Token = "0x6001591")]
			[Address(RVA = "0x16FD7C4", Offset = "0x16FD7C4", VA = "0x16FD7C4")]
			set
			{
			}
		}

		[Token(Token = "0x170001F2")]
		public NormalMode upMode
		{
			[Token(Token = "0x6001592")]
			[Address(RVA = "0x16FD87C", Offset = "0x16FD87C", VA = "0x16FD87C")]
			get
			{
				return default(NormalMode);
			}
			[Token(Token = "0x6001593")]
			[Address(RVA = "0x16FD884", Offset = "0x16FD884", VA = "0x16FD884")]
			set
			{
			}
		}

		[Token(Token = "0x170001F3")]
		public Vector3 customNormal
		{
			[Token(Token = "0x6001594")]
			[Address(RVA = "0x16FD934", Offset = "0x16FD934", VA = "0x16FD934")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001595")]
			[Address(RVA = "0x16FD940", Offset = "0x16FD940", VA = "0x16FD940")]
			set
			{
			}
		}

		[Token(Token = "0x170001F4")]
		public ForwardMode forwardMode
		{
			[Token(Token = "0x6001596")]
			[Address(RVA = "0x16FDA20", Offset = "0x16FDA20", VA = "0x16FDA20")]
			get
			{
				return default(ForwardMode);
			}
			[Token(Token = "0x6001597")]
			[Address(RVA = "0x16FDA28", Offset = "0x16FDA28", VA = "0x16FDA28")]
			set
			{
			}
		}

		[Token(Token = "0x170001F5")]
		public Vector3 customForward
		{
			[Token(Token = "0x6001598")]
			[Address(RVA = "0x16FDAD8", Offset = "0x16FDAD8", VA = "0x16FDAD8")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001599")]
			[Address(RVA = "0x16FDAE4", Offset = "0x16FDAE4", VA = "0x16FDAE4")]
			set
			{
			}
		}

		[Token(Token = "0x600159A")]
		[Address(RVA = "0x16FDBC4", Offset = "0x16FDBC4", VA = "0x16FDBC4")]
		private void GetTransformsRecursively(Transform current, ref List<Transform> transformList)
		{
		}

		[Token(Token = "0x600159B")]
		[Address(RVA = "0x16FDE90", Offset = "0x16FDE90", VA = "0x16FDE90")]
		private void GetObjects()
		{
		}

		[Token(Token = "0x600159C")]
		[Address(RVA = "0x16FE374", Offset = "0x16FE374", VA = "0x16FE374")]
		public TS_Bounds GetBounds()
		{
			return null;
		}

		[Token(Token = "0x600159D")]
		[Address(RVA = "0x16FDFEC", Offset = "0x16FDFEC", VA = "0x16FDFEC")]
		private void CreateProperty(ref BendProperty property, Transform t)
		{
		}

		[Token(Token = "0x600159E")]
		[Address(RVA = "0x16FE438", Offset = "0x16FE438", VA = "0x16FE438")]
		private void CalculateBounds()
		{
		}

		[Token(Token = "0x600159F")]
		[Address(RVA = "0x16FE5BC", Offset = "0x16FE5BC", VA = "0x16FE5BC")]
		private void CalculatePropertyBounds(ref BendProperty property)
		{
		}

		[Token(Token = "0x60015A0")]
		[Address(RVA = "0x16FEBA4", Offset = "0x16FEBA4", VA = "0x16FEBA4")]
		public void CalculatePercents(BendProperty property)
		{
		}

		[Token(Token = "0x60015A1")]
		[Address(RVA = "0x16FD750", Offset = "0x16FD750", VA = "0x16FD750")]
		private void Revert()
		{
		}

		[Token(Token = "0x60015A2")]
		[Address(RVA = "0x16FD598", Offset = "0x16FD598", VA = "0x16FD598")]
		public void UpdateReferences()
		{
		}

		[Token(Token = "0x60015A3")]
		[Address(RVA = "0x16FF228", Offset = "0x16FF228", VA = "0x16FF228")]
		private void GetevalResult(Vector3 percentage)
		{
		}

		[Token(Token = "0x60015A4")]
		[Address(RVA = "0x16FF104", Offset = "0x16FF104", VA = "0x16FF104")]
		private Vector3 GetPercentage(Vector3 point)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60015A5")]
		[Address(RVA = "0x16FF7A8", Offset = "0x16FF7A8", VA = "0x16FF7A8", Slot = "14")]
		protected override void Build()
		{
		}

		[Token(Token = "0x60015A6")]
		[Address(RVA = "0x16FF1A4", Offset = "0x16FF1A4", VA = "0x16FF1A4")]
		private void Bend()
		{
		}

		[Token(Token = "0x60015A7")]
		[Address(RVA = "0x16FF7E4", Offset = "0x16FF7E4", VA = "0x16FF7E4")]
		public void BendObject(BendProperty p)
		{
		}

		[Token(Token = "0x60015A8")]
		[Address(RVA = "0x16FFD40", Offset = "0x16FFD40", VA = "0x16FFD40")]
		private void BendMesh(Vector3[] vertexPercents, Vector3[] originalNormals, TS_Mesh mesh, Matrix4x4 worldToLocalMatrix)
		{
		}

		[Token(Token = "0x60015A9")]
		[Address(RVA = "0x16FFF40", Offset = "0x16FFF40", VA = "0x16FFF40", Slot = "15")]
		protected override void PostBuild()
		{
		}

		[Token(Token = "0x60015AA")]
		[Address(RVA = "0x1700084", Offset = "0x1700084", VA = "0x1700084", Slot = "13")]
		protected override void LateRun()
		{
		}

		[Token(Token = "0x60015AB")]
		[Address(RVA = "0x17000F8", Offset = "0x17000F8", VA = "0x17000F8")]
		public ObjectBender()
		{
		}
	}
	[Token(Token = "0x2000311")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5CD384", Offset = "0x5CD384")]
	public class ObjectController : SplineUser
	{
		[Serializable]
		[Token(Token = "0x20004B5")]
		internal class ObjectControl
		{
			[Token(Token = "0x4001E09")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public GameObject gameObject;

			[Token(Token = "0x4001E0A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Vector3 position;

			[Token(Token = "0x4001E0B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public Quaternion rotation;

			[Token(Token = "0x4001E0C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public Vector3 scale;

			[Token(Token = "0x4001E0D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public bool active;

			[Token(Token = "0x4001E0E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			public Vector3 baseScale;

			[Token(Token = "0x17000396")]
			public bool isNull
			{
				[Token(Token = "0x6001CEC")]
				[Address(RVA = "0xFEEE0C", Offset = "0xFEEE0C", VA = "0xFEEE0C")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x17000397")]
			public Transform transform
			{
				[Token(Token = "0x6001CED")]
				[Address(RVA = "0xFEEE78", Offset = "0xFEEE78", VA = "0xFEEE78")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001CEE")]
			[Address(RVA = "0xFEEF0C", Offset = "0xFEEF0C", VA = "0xFEEF0C")]
			public ObjectControl(GameObject input)
			{
			}

			[Token(Token = "0x6001CEF")]
			[Address(RVA = "0xFEEFC4", Offset = "0xFEEFC4", VA = "0xFEEFC4")]
			public void Destroy()
			{
			}

			[Token(Token = "0x6001CF0")]
			[Address(RVA = "0xFEF074", Offset = "0xFEF074", VA = "0xFEF074")]
			public void DestroyImmediate()
			{
			}

			[Token(Token = "0x6001CF1")]
			[Address(RVA = "0xFEF124", Offset = "0xFEF124", VA = "0xFEF124")]
			public void Apply()
			{
			}
		}

		[Token(Token = "0x20004B6")]
		public enum ObjectMethod
		{
			[Token(Token = "0x4001E10")]
			Instantiate,
			[Token(Token = "0x4001E11")]
			GetChildren
		}

		[Token(Token = "0x20004B7")]
		public enum Positioning
		{
			[Token(Token = "0x4001E13")]
			Stretch,
			[Token(Token = "0x4001E14")]
			Clip
		}

		[Token(Token = "0x20004B8")]
		public enum Iteration
		{
			[Token(Token = "0x4001E16")]
			Ordered,
			[Token(Token = "0x4001E17")]
			Random
		}

		[Token(Token = "0x20004B9")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CE294", Offset = "0x5CE294")]
		private sealed class <InstantiateAllWithDelay>d__94 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001E18")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001E19")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001E1A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ObjectController <>4__this;

			[Token(Token = "0x4001E1B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <i>5__2;

			[Token(Token = "0x17000398")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001CF5")]
				[Address(RVA = "0xFEEDBC", Offset = "0xFEEDBC", VA = "0xFEEDBC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000399")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001CF7")]
				[Address(RVA = "0xFEEE04", Offset = "0xFEEE04", VA = "0xFEEE04", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001CF2")]
			[Address(RVA = "0xFEEC40", Offset = "0xFEEC40", VA = "0xFEEC40")]
			[DebuggerHidden]
			public <InstantiateAllWithDelay>d__94(int <>1__state)
			{
			}

			[Token(Token = "0x6001CF3")]
			[Address(RVA = "0xFEEC6C", Offset = "0xFEEC6C", VA = "0xFEEC6C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001CF4")]
			[Address(RVA = "0xFEEC70", Offset = "0xFEEC70", VA = "0xFEEC70", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001CF6")]
			[Address(RVA = "0xFEEDC4", Offset = "0xFEEDC4", VA = "0xFEEDC4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001575")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		[HideInInspector]
		public GameObject[] objects;

		[Token(Token = "0x4001576")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		[HideInInspector]
		private float _evaluateOffset;

		[Token(Token = "0x4001577")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[SerializeField]
		[HideInInspector]
		private int _spawnCount;

		[Token(Token = "0x4001578")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		[HideInInspector]
		private Positioning _objectPositioning;

		[Token(Token = "0x4001579")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[SerializeField]
		[HideInInspector]
		private Iteration _iteration;

		[Token(Token = "0x400157A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		[HideInInspector]
		private int _randomSeed;

		[Token(Token = "0x400157B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[SerializeField]
		[HideInInspector]
		private Vector3 _minOffset;

		[Token(Token = "0x400157C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		[HideInInspector]
		private Vector3 _maxOffset;

		[Token(Token = "0x400157D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[SerializeField]
		[HideInInspector]
		private bool _offsetUseWorldCoords;

		[Token(Token = "0x400157E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		[HideInInspector]
		private Vector3 _minRotation;

		[Token(Token = "0x400157F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[SerializeField]
		[HideInInspector]
		private Vector3 _maxRotation;

		[Token(Token = "0x4001580")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[SerializeField]
		[HideInInspector]
		private bool _uniformScaleLerp;

		[Token(Token = "0x4001581")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		[SerializeField]
		[HideInInspector]
		private Vector3 _minScaleMultiplier;

		[Token(Token = "0x4001582")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[SerializeField]
		[HideInInspector]
		private Vector3 _maxScaleMultiplier;

		[Token(Token = "0x4001583")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		[SerializeField]
		[HideInInspector]
		private bool _shellOffset;

		[Token(Token = "0x4001584")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x105")]
		[SerializeField]
		[HideInInspector]
		private bool _applyRotation;

		[Token(Token = "0x4001585")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x106")]
		[SerializeField]
		[HideInInspector]
		private bool _rotateByOffset;

		[Token(Token = "0x4001586")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x107")]
		[SerializeField]
		[HideInInspector]
		private bool _applyScale;

		[Token(Token = "0x4001587")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[SerializeField]
		[HideInInspector]
		private ObjectMethod _objectMethod;

		[Token(Token = "0x4001588")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		[HideInInspector]
		public bool delayedSpawn;

		[Token(Token = "0x4001589")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[HideInInspector]
		public float spawnDelay;

		[Token(Token = "0x400158A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		[SerializeField]
		[HideInInspector]
		private int lastChildCount;

		[Token(Token = "0x400158B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[SerializeField]
		[HideInInspector]
		private ObjectControl[] spawned;

		[Token(Token = "0x400158C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private System.Random offsetRandomizer;

		[Token(Token = "0x400158D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private System.Random shellRandomizer;

		[Token(Token = "0x400158E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private System.Random rotationRandomizer;

		[Token(Token = "0x400158F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private System.Random scaleRandomizer;

		[Token(Token = "0x170001F6")]
		public ObjectMethod objectMethod
		{
			[Token(Token = "0x60015AC")]
			[Address(RVA = "0x17001A4", Offset = "0x17001A4", VA = "0x17001A4")]
			get
			{
				return default(ObjectMethod);
			}
			[Token(Token = "0x60015AD")]
			[Address(RVA = "0x17001AC", Offset = "0x17001AC", VA = "0x17001AC")]
			set
			{
			}
		}

		[Token(Token = "0x170001F7")]
		public int spawnCount
		{
			[Token(Token = "0x60015AE")]
			[Address(RVA = "0x1700278", Offset = "0x1700278", VA = "0x1700278")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60015AF")]
			[Address(RVA = "0x1700280", Offset = "0x1700280", VA = "0x1700280")]
			set
			{
			}
		}

		[Token(Token = "0x170001F8")]
		public Positioning objectPositioning
		{
			[Token(Token = "0x60015B0")]
			[Address(RVA = "0x1700520", Offset = "0x1700520", VA = "0x1700520")]
			get
			{
				return default(Positioning);
			}
			[Token(Token = "0x60015B1")]
			[Address(RVA = "0x1700528", Offset = "0x1700528", VA = "0x1700528")]
			set
			{
			}
		}

		[Token(Token = "0x170001F9")]
		public Iteration iteration
		{
			[Token(Token = "0x60015B2")]
			[Address(RVA = "0x1700548", Offset = "0x1700548", VA = "0x1700548")]
			get
			{
				return default(Iteration);
			}
			[Token(Token = "0x60015B3")]
			[Address(RVA = "0x1700550", Offset = "0x1700550", VA = "0x1700550")]
			set
			{
			}
		}

		[Token(Token = "0x170001FA")]
		public int randomSeed
		{
			[Token(Token = "0x60015B4")]
			[Address(RVA = "0x1700570", Offset = "0x1700570", VA = "0x1700570")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60015B5")]
			[Address(RVA = "0x1700578", Offset = "0x1700578", VA = "0x1700578")]
			set
			{
			}
		}

		[Token(Token = "0x170001FB")]
		public Vector3 minOffset
		{
			[Token(Token = "0x60015B6")]
			[Address(RVA = "0x1700598", Offset = "0x1700598", VA = "0x1700598")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60015B7")]
			[Address(RVA = "0x17005A4", Offset = "0x17005A4", VA = "0x17005A4")]
			set
			{
			}
		}

		[Token(Token = "0x170001FC")]
		public Vector3 maxOffset
		{
			[Token(Token = "0x60015B8")]
			[Address(RVA = "0x1700618", Offset = "0x1700618", VA = "0x1700618")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60015B9")]
			[Address(RVA = "0x1700624", Offset = "0x1700624", VA = "0x1700624")]
			set
			{
			}
		}

		[Token(Token = "0x170001FD")]
		public bool offsetUseWorldCoords
		{
			[Token(Token = "0x60015BA")]
			[Address(RVA = "0x1700698", Offset = "0x1700698", VA = "0x1700698")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60015BB")]
			[Address(RVA = "0x17006A0", Offset = "0x17006A0", VA = "0x17006A0")]
			set
			{
			}
		}

		[Token(Token = "0x170001FE")]
		public Vector3 minRotation
		{
			[Token(Token = "0x60015BC")]
			[Address(RVA = "0x17006CC", Offset = "0x17006CC", VA = "0x17006CC")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60015BD")]
			[Address(RVA = "0x17006D8", Offset = "0x17006D8", VA = "0x17006D8")]
			set
			{
			}
		}

		[Token(Token = "0x170001FF")]
		public Vector3 maxRotation
		{
			[Token(Token = "0x60015BE")]
			[Address(RVA = "0x170074C", Offset = "0x170074C", VA = "0x170074C")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60015BF")]
			[Address(RVA = "0x1700758", Offset = "0x1700758", VA = "0x1700758")]
			set
			{
			}
		}

		[Token(Token = "0x17000200")]
		public Vector3 rotationOffset
		{
			[Token(Token = "0x60015C0")]
			[Address(RVA = "0x17007CC", Offset = "0x17007CC", VA = "0x17007CC")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60015C1")]
			[Address(RVA = "0x17007FC", Offset = "0x17007FC", VA = "0x17007FC")]
			set
			{
			}
		}

		[Token(Token = "0x17000201")]
		public Vector3 minScaleMultiplier
		{
			[Token(Token = "0x60015C2")]
			[Address(RVA = "0x1700894", Offset = "0x1700894", VA = "0x1700894")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60015C3")]
			[Address(RVA = "0x17008A0", Offset = "0x17008A0", VA = "0x17008A0")]
			set
			{
			}
		}

		[Token(Token = "0x17000202")]
		public Vector3 maxScaleMultiplier
		{
			[Token(Token = "0x60015C4")]
			[Address(RVA = "0x1700914", Offset = "0x1700914", VA = "0x1700914")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60015C5")]
			[Address(RVA = "0x1700920", Offset = "0x1700920", VA = "0x1700920")]
			set
			{
			}
		}

		[Token(Token = "0x17000203")]
		public bool uniformScaleLerp
		{
			[Token(Token = "0x60015C6")]
			[Address(RVA = "0x1700994", Offset = "0x1700994", VA = "0x1700994")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60015C7")]
			[Address(RVA = "0x170099C", Offset = "0x170099C", VA = "0x170099C")]
			set
			{
			}
		}

		[Token(Token = "0x17000204")]
		public bool shellOffset
		{
			[Token(Token = "0x60015C8")]
			[Address(RVA = "0x17009C8", Offset = "0x17009C8", VA = "0x17009C8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60015C9")]
			[Address(RVA = "0x17009D0", Offset = "0x17009D0", VA = "0x17009D0")]
			set
			{
			}
		}

		[Token(Token = "0x17000205")]
		public bool applyRotation
		{
			[Token(Token = "0x60015CA")]
			[Address(RVA = "0x17009FC", Offset = "0x17009FC", VA = "0x17009FC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60015CB")]
			[Address(RVA = "0x1700A04", Offset = "0x1700A04", VA = "0x1700A04")]
			set
			{
			}
		}

		[Token(Token = "0x17000206")]
		public bool rotateByOffset
		{
			[Token(Token = "0x60015CC")]
			[Address(RVA = "0x1700A30", Offset = "0x1700A30", VA = "0x1700A30")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60015CD")]
			[Address(RVA = "0x1700A38", Offset = "0x1700A38", VA = "0x1700A38")]
			set
			{
			}
		}

		[Token(Token = "0x17000207")]
		public bool applyScale
		{
			[Token(Token = "0x60015CE")]
			[Address(RVA = "0x1700A64", Offset = "0x1700A64", VA = "0x1700A64")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60015CF")]
			[Address(RVA = "0x1700A6C", Offset = "0x1700A6C", VA = "0x1700A6C")]
			set
			{
			}
		}

		[Token(Token = "0x17000208")]
		public float evaluateOffset
		{
			[Token(Token = "0x60015D0")]
			[Address(RVA = "0x1700A98", Offset = "0x1700A98", VA = "0x1700A98")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60015D1")]
			[Address(RVA = "0x1700AA0", Offset = "0x1700AA0", VA = "0x1700AA0")]
			set
			{
			}
		}

		[Token(Token = "0x60015D2")]
		[Address(RVA = "0x1700AC0", Offset = "0x1700AC0", VA = "0x1700AC0")]
		public void Clear()
		{
		}

		[Token(Token = "0x60015D3")]
		[Address(RVA = "0x1700C64", Offset = "0x1700C64", VA = "0x1700C64")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x60015D4")]
		[Address(RVA = "0x17002B4", Offset = "0x17002B4", VA = "0x17002B4")]
		private void Remove()
		{
		}

		[Token(Token = "0x60015D5")]
		[Address(RVA = "0x1700C78", Offset = "0x1700C78", VA = "0x1700C78")]
		public void GetAll()
		{
		}

		[Token(Token = "0x60015D6")]
		[Address(RVA = "0x17001CC", Offset = "0x17001CC", VA = "0x17001CC")]
		public void Spawn()
		{
		}

		[Token(Token = "0x60015D7")]
		[Address(RVA = "0x170137C", Offset = "0x170137C", VA = "0x170137C", Slot = "13")]
		protected override void LateRun()
		{
		}

		[Token(Token = "0x60015D8")]
		[Address(RVA = "0x170124C", Offset = "0x170124C", VA = "0x170124C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5DA224", Offset = "0x5DA224")]
		private IEnumerator InstantiateAllWithDelay()
		{
			return null;
		}

		[Token(Token = "0x60015D9")]
		[Address(RVA = "0x17012C4", Offset = "0x17012C4", VA = "0x17012C4")]
		private void InstantiateAll()
		{
		}

		[Token(Token = "0x60015DA")]
		[Address(RVA = "0x17013F8", Offset = "0x17013F8", VA = "0x17013F8")]
		private void InstantiateSingle()
		{
		}

		[Token(Token = "0x60015DB")]
		[Address(RVA = "0x1701720", Offset = "0x1701720", VA = "0x1701720", Slot = "14")]
		protected override void Build()
		{
		}

		[Token(Token = "0x60015DC")]
		[Address(RVA = "0x1701F48", Offset = "0x1701F48", VA = "0x1701F48", Slot = "15")]
		protected override void PostBuild()
		{
		}

		[Token(Token = "0x60015DD")]
		[Address(RVA = "0x1701FBC", Offset = "0x1701FBC", VA = "0x1701FBC")]
		public ObjectController()
		{
		}
	}
	[Token(Token = "0x2000312")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5CD3BC", Offset = "0x5CD3BC")]
	public class ParticleController : SplineUser
	{
		[Token(Token = "0x20004BA")]
		public enum EmitPoint
		{
			[Token(Token = "0x4001E1D")]
			Beginning,
			[Token(Token = "0x4001E1E")]
			Ending,
			[Token(Token = "0x4001E1F")]
			Random,
			[Token(Token = "0x4001E20")]
			Ordered
		}

		[Token(Token = "0x20004BB")]
		public enum MotionType
		{
			[Token(Token = "0x4001E22")]
			None,
			[Token(Token = "0x4001E23")]
			UseParticleSystem,
			[Token(Token = "0x4001E24")]
			FollowForward,
			[Token(Token = "0x4001E25")]
			FollowBackward,
			[Token(Token = "0x4001E26")]
			ByNormal,
			[Token(Token = "0x4001E27")]
			ByNormalRandomized
		}

		[Token(Token = "0x20004BC")]
		public enum Wrap
		{
			[Token(Token = "0x4001E29")]
			Default,
			[Token(Token = "0x4001E2A")]
			Loop
		}

		[Token(Token = "0x20004BD")]
		public class Particle
		{
			[Token(Token = "0x4001E2B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal Vector2 startOffset;

			[Token(Token = "0x4001E2C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal Vector2 endOffset;

			[Token(Token = "0x4001E2D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal float cycleSpeed;

			[Token(Token = "0x4001E2E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			internal float startLifetime;

			[Token(Token = "0x4001E2F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal Color startColor;

			[Token(Token = "0x4001E30")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			internal float remainingLifetime;

			[Token(Token = "0x4001E31")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			internal float lifeTime;

			[Token(Token = "0x4001E32")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			internal double startPercent;

			[Token(Token = "0x6001CF8")]
			[Address(RVA = "0xFF0808", Offset = "0xFF0808", VA = "0xFF0808")]
			internal double GetSplinePercent(Wrap wrap, ParticleSystem.Particle particle)
			{
				return default(double);
			}

			[Token(Token = "0x6001CF9")]
			[Address(RVA = "0xFF08F0", Offset = "0xFF08F0", VA = "0xFF08F0")]
			public Particle()
			{
			}
		}

		[Token(Token = "0x4001590")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[HideInInspector]
		public ParticleSystem _particleSystem;

		[Token(Token = "0x4001591")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[HideInInspector]
		public bool volumetric;

		[Token(Token = "0x4001592")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA1")]
		[HideInInspector]
		public bool emitFromShell;

		[Token(Token = "0x4001593")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[HideInInspector]
		public Vector2 scale;

		[Token(Token = "0x4001594")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[HideInInspector]
		public EmitPoint emitPoint;

		[Token(Token = "0x4001595")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[HideInInspector]
		public MotionType motionType;

		[Token(Token = "0x4001596")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[HideInInspector]
		public Wrap wrapMode;

		[Token(Token = "0x4001597")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[HideInInspector]
		public float minCycles;

		[Token(Token = "0x4001598")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[HideInInspector]
		public float maxCycles;

		[Token(Token = "0x4001599")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private ParticleSystem.Particle[] particles;

		[Token(Token = "0x400159A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Particle[] controllers;

		[Token(Token = "0x400159B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private int particleCount;

		[Token(Token = "0x400159C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private int birthIndex;

		[Token(Token = "0x60015DE")]
		[Address(RVA = "0x131BFFC", Offset = "0x131BFFC", VA = "0x131BFFC", Slot = "13")]
		protected override void LateRun()
		{
		}

		[Token(Token = "0x60015DF")]
		[Address(RVA = "0x131C4D8", Offset = "0x131C4D8", VA = "0x131C4D8")]
		private void TransformParticle(ref ParticleSystem.Particle particle, Transform trs)
		{
		}

		[Token(Token = "0x60015E0")]
		[Address(RVA = "0x131D0C8", Offset = "0x131D0C8", VA = "0x131D0C8")]
		private void InverseTransformParticle(ref ParticleSystem.Particle particle, Transform trs)
		{
		}

		[Token(Token = "0x60015E1")]
		[Address(RVA = "0x131D584", Offset = "0x131D584", VA = "0x131D584", Slot = "5")]
		protected override void Reset()
		{
		}

		[Token(Token = "0x60015E2")]
		[Address(RVA = "0x131D134", Offset = "0x131D134", VA = "0x131D134")]
		private void HandleParticle(int index)
		{
		}

		[Token(Token = "0x60015E3")]
		[Address(RVA = "0x131D654", Offset = "0x131D654", VA = "0x131D654")]
		private void OnParticleDie(int index)
		{
		}

		[Token(Token = "0x60015E4")]
		[Address(RVA = "0x131C544", Offset = "0x131C544", VA = "0x131C544")]
		private void OnParticleBorn(int index)
		{
		}

		[Token(Token = "0x60015E5")]
		[Address(RVA = "0x131D658", Offset = "0x131D658", VA = "0x131D658")]
		public ParticleController()
		{
		}
	}
	[Token(Token = "0x2000313")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x5CD408", Offset = "0x5CD408")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x5CD408", Offset = "0x5CD408")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5CD408", Offset = "0x5CD408")]
	public class PathGenerator : MeshGenerator
	{
		[Token(Token = "0x400159D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[SerializeField]
		[HideInInspector]
		private int _slices;

		[Token(Token = "0x400159E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		[SerializeField]
		[HideInInspector]
		private bool _useShapeCurve;

		[Token(Token = "0x400159F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[SerializeField]
		[HideInInspector]
		private AnimationCurve _shape;

		[Token(Token = "0x40015A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[SerializeField]
		[HideInInspector]
		private AnimationCurve _lastShape;

		[Token(Token = "0x40015A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[SerializeField]
		[HideInInspector]
		private float _shapeExposure;

		[Token(Token = "0x17000209")]
		public int slices
		{
			[Token(Token = "0x60015E6")]
			[Address(RVA = "0x11FCED0", Offset = "0x11FCED0", VA = "0x11FCED0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60015E7")]
			[Address(RVA = "0x11FCED8", Offset = "0x11FCED8", VA = "0x11FCED8")]
			set
			{
			}
		}

		[Token(Token = "0x1700020A")]
		public bool useShapeCurve
		{
			[Token(Token = "0x60015E8")]
			[Address(RVA = "0x11FCF00", Offset = "0x11FCF00", VA = "0x11FCF00")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60015E9")]
			[Address(RVA = "0x11FCF08", Offset = "0x11FCF08", VA = "0x11FCF08")]
			set
			{
			}
		}

		[Token(Token = "0x1700020B")]
		public float shapeExposure
		{
			[Token(Token = "0x60015EA")]
			[Address(RVA = "0x11FD060", Offset = "0x11FD060", VA = "0x11FD060")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60015EB")]
			[Address(RVA = "0x11FD068", Offset = "0x11FD068", VA = "0x11FD068")]
			set
			{
			}
		}

		[Token(Token = "0x1700020C")]
		public AnimationCurve shape
		{
			[Token(Token = "0x60015EC")]
			[Address(RVA = "0x11FD114", Offset = "0x11FD114", VA = "0x11FD114")]
			get
			{
				return null;
			}
			[Token(Token = "0x60015ED")]
			[Address(RVA = "0x11FD11C", Offset = "0x11FD11C", VA = "0x11FD11C")]
			set
			{
			}
		}

		[Token(Token = "0x60015EE")]
		[Address(RVA = "0x11FD4A0", Offset = "0x11FD4A0", VA = "0x11FD4A0", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x60015EF")]
		[Address(RVA = "0x11FD504", Offset = "0x11FD504", VA = "0x11FD504", Slot = "5")]
		protected override void Reset()
		{
		}

		[Token(Token = "0x60015F0")]
		[Address(RVA = "0x11FD50C", Offset = "0x11FD50C", VA = "0x11FD50C", Slot = "18")]
		protected override void BuildMesh()
		{
		}

		[Token(Token = "0x60015F1")]
		[Address(RVA = "0x11FD5D4", Offset = "0x11FD5D4", VA = "0x11FD5D4")]
		private void GenerateVertices()
		{
		}

		[Token(Token = "0x60015F2")]
		[Address(RVA = "0x11FE0B0", Offset = "0x11FE0B0", VA = "0x11FE0B0")]
		public PathGenerator()
		{
		}
	}
	[Token(Token = "0x2000314")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5CD4C0", Offset = "0x5CD4C0")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x5CD4C0", Offset = "0x5CD4C0")]
	public class PolygonColliderGenerator : SplineUser
	{
		[Token(Token = "0x20004BE")]
		public enum Type
		{
			[Token(Token = "0x4001E34")]
			Path,
			[Token(Token = "0x4001E35")]
			Shape
		}

		[Token(Token = "0x40015A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[SerializeField]
		[HideInInspector]
		private Type _type;

		[Token(Token = "0x40015A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		[HideInInspector]
		private float _size;

		[Token(Token = "0x40015A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[SerializeField]
		[HideInInspector]
		private float _offset;

		[Token(Token = "0x40015A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		[HideInInspector]
		protected PolygonCollider2D polygonCollider;

		[Token(Token = "0x40015A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		[HideInInspector]
		protected Vector2[] vertices;

		[Token(Token = "0x40015A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[HideInInspector]
		public float updateRate;

		[Token(Token = "0x40015A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		protected float lastUpdateTime;

		[Token(Token = "0x40015A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private bool updateCollider;

		[Token(Token = "0x1700020D")]
		public Type type
		{
			[Token(Token = "0x60015F3")]
			[Address(RVA = "0x1204E58", Offset = "0x1204E58", VA = "0x1204E58")]
			get
			{
				return default(Type);
			}
			[Token(Token = "0x60015F4")]
			[Address(RVA = "0x1204E60", Offset = "0x1204E60", VA = "0x1204E60")]
			set
			{
			}
		}

		[Token(Token = "0x1700020E")]
		public float size
		{
			[Token(Token = "0x60015F5")]
			[Address(RVA = "0x1204E80", Offset = "0x1204E80", VA = "0x1204E80")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60015F6")]
			[Address(RVA = "0x1204E88", Offset = "0x1204E88", VA = "0x1204E88")]
			set
			{
			}
		}

		[Token(Token = "0x1700020F")]
		public float offset
		{
			[Token(Token = "0x60015F7")]
			[Address(RVA = "0x1204EA8", Offset = "0x1204EA8", VA = "0x1204EA8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60015F8")]
			[Address(RVA = "0x1204EB0", Offset = "0x1204EB0", VA = "0x1204EB0")]
			set
			{
			}
		}

		[Token(Token = "0x60015F9")]
		[Address(RVA = "0x1204ED0", Offset = "0x1204ED0", VA = "0x1204ED0", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x60015FA")]
		[Address(RVA = "0x1204F38", Offset = "0x1204F38", VA = "0x1204F38", Slot = "5")]
		protected override void Reset()
		{
		}

		[Token(Token = "0x60015FB")]
		[Address(RVA = "0x1204F40", Offset = "0x1204F40", VA = "0x1204F40", Slot = "6")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x60015FC")]
		[Address(RVA = "0x1204F48", Offset = "0x1204F48", VA = "0x1204F48", Slot = "7")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x60015FD")]
		[Address(RVA = "0x1204F50", Offset = "0x1204F50", VA = "0x1204F50", Slot = "8")]
		protected override void OnDestroy()
		{
		}

		[Token(Token = "0x60015FE")]
		[Address(RVA = "0x1204F58", Offset = "0x1204F58", VA = "0x1204F58", Slot = "13")]
		protected override void LateRun()
		{
		}

		[Token(Token = "0x60015FF")]
		[Address(RVA = "0x120502C", Offset = "0x120502C", VA = "0x120502C", Slot = "14")]
		protected override void Build()
		{
		}

		[Token(Token = "0x6001600")]
		[Address(RVA = "0x1205390", Offset = "0x1205390", VA = "0x1205390", Slot = "15")]
		protected override void PostBuild()
		{
		}

		[Token(Token = "0x6001601")]
		[Address(RVA = "0x1205088", Offset = "0x1205088", VA = "0x1205088")]
		private void GeneratePath()
		{
		}

		[Token(Token = "0x6001602")]
		[Address(RVA = "0x120522C", Offset = "0x120522C", VA = "0x120522C")]
		private void GenerateShape()
		{
		}

		[Token(Token = "0x6001603")]
		[Address(RVA = "0x12054DC", Offset = "0x12054DC", VA = "0x12054DC")]
		public PolygonColliderGenerator()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000315")]
	public class ColorModifier : SplineSampleModifier
	{
		[Serializable]
		[Token(Token = "0x20004BF")]
		public class ColorKey : Key
		{
			[Token(Token = "0x20004F8")]
			public enum BlendMode
			{
				[Token(Token = "0x4001F00")]
				Lerp,
				[Token(Token = "0x4001F01")]
				Multiply,
				[Token(Token = "0x4001F02")]
				Add,
				[Token(Token = "0x4001F03")]
				Subtract
			}

			[Token(Token = "0x4001E36")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			public Color color;

			[Token(Token = "0x4001E37")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public BlendMode blendMode;

			[Token(Token = "0x6001CFA")]
			[Address(RVA = "0x7E600C", Offset = "0x7E600C", VA = "0x7E600C")]
			public ColorKey(double f, double t, ColorModifier modifier)
			{
			}

			[Token(Token = "0x6001CFB")]
			[Address(RVA = "0x7E6060", Offset = "0x7E6060", VA = "0x7E6060")]
			public Color Blend(Color input, float percent)
			{
				return default(Color);
			}
		}

		[Token(Token = "0x40015AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<ColorKey> keys;

		[Token(Token = "0x6001604")]
		[Address(RVA = "0x10AD144", Offset = "0x10AD144", VA = "0x10AD144")]
		public ColorModifier()
		{
		}

		[Token(Token = "0x6001605")]
		[Address(RVA = "0x10AD200", Offset = "0x10AD200", VA = "0x10AD200", Slot = "4")]
		public override List<Key> GetKeys()
		{
			return null;
		}

		[Token(Token = "0x6001606")]
		[Address(RVA = "0x10AD304", Offset = "0x10AD304", VA = "0x10AD304", Slot = "5")]
		public override void SetKeys(List<Key> input)
		{
		}

		[Token(Token = "0x6001607")]
		[Address(RVA = "0x10AD480", Offset = "0x10AD480", VA = "0x10AD480")]
		public void AddKey(double f, double t)
		{
		}

		[Token(Token = "0x6001608")]
		[Address(RVA = "0x10AD528", Offset = "0x10AD528", VA = "0x10AD528", Slot = "6")]
		public override void Apply(SplineSample result)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000316")]
	public class MeshScaleModifier : SplineSampleModifier
	{
		[Serializable]
		[Token(Token = "0x20004C0")]
		public class ScaleKey : Key
		{
			[Token(Token = "0x4001E38")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			public Vector2 scale;

			[Token(Token = "0x6001CFC")]
			[Address(RVA = "0xFECEBC", Offset = "0xFECEBC", VA = "0xFECEBC")]
			public ScaleKey(double f, double t, MeshScaleModifier modifier)
			{
			}
		}

		[Token(Token = "0x40015AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<ScaleKey> keys;

		[Token(Token = "0x6001609")]
		[Address(RVA = "0xDEF588", Offset = "0xDEF588", VA = "0xDEF588")]
		public MeshScaleModifier()
		{
		}

		[Token(Token = "0x600160A")]
		[Address(RVA = "0xDEF644", Offset = "0xDEF644", VA = "0xDEF644", Slot = "4")]
		public override List<Key> GetKeys()
		{
			return null;
		}

		[Token(Token = "0x600160B")]
		[Address(RVA = "0xDEF748", Offset = "0xDEF748", VA = "0xDEF748", Slot = "5")]
		public override void SetKeys(List<Key> input)
		{
		}

		[Token(Token = "0x600160C")]
		[Address(RVA = "0xDEF8E0", Offset = "0xDEF8E0", VA = "0xDEF8E0")]
		public void AddKey(double f, double t)
		{
		}

		[Token(Token = "0x600160D")]
		[Address(RVA = "0xDEF988", Offset = "0xDEF988", VA = "0xDEF988", Slot = "6")]
		public override void Apply(SplineSample result)
		{
		}

		[Token(Token = "0x600160E")]
		[Address(RVA = "0xDEFAA4", Offset = "0xDEFAA4", VA = "0xDEFAA4")]
		public Vector2 GetScale(SplineSample sample)
		{
			return default(Vector2);
		}
	}
	[Serializable]
	[Token(Token = "0x2000317")]
	public class OffsetModifier : SplineSampleModifier
	{
		[Serializable]
		[Token(Token = "0x20004C1")]
		public class OffsetKey : Key
		{
			[Token(Token = "0x4001E39")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			public Vector2 offset;

			[Token(Token = "0x6001CFD")]
			[Address(RVA = "0xFEF20C", Offset = "0xFEF20C", VA = "0xFEF20C")]
			public OffsetKey(Vector2 o, double f, double t, OffsetModifier modifier)
			{
			}
		}

		[Token(Token = "0x40015AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<OffsetKey> keys;

		[Token(Token = "0x600160F")]
		[Address(RVA = "0x1313B68", Offset = "0x1313B68", VA = "0x1313B68")]
		public OffsetModifier()
		{
		}

		[Token(Token = "0x6001610")]
		[Address(RVA = "0x1313C24", Offset = "0x1313C24", VA = "0x1313C24", Slot = "4")]
		public override List<Key> GetKeys()
		{
			return null;
		}

		[Token(Token = "0x6001611")]
		[Address(RVA = "0x1313D28", Offset = "0x1313D28", VA = "0x1313D28", Slot = "5")]
		public override void SetKeys(List<Key> input)
		{
		}

		[Token(Token = "0x6001612")]
		[Address(RVA = "0x1313EA4", Offset = "0x1313EA4", VA = "0x1313EA4")]
		public void AddKey(Vector2 offset, double f, double t)
		{
		}

		[Token(Token = "0x6001613")]
		[Address(RVA = "0x1313F64", Offset = "0x1313F64", VA = "0x1313F64", Slot = "6")]
		public override void Apply(SplineSample result)
		{
		}

		[Token(Token = "0x6001614")]
		[Address(RVA = "0x1314048", Offset = "0x1314048", VA = "0x1314048")]
		private Vector2 Evaluate(double time)
		{
			return default(Vector2);
		}
	}
	[Serializable]
	[Token(Token = "0x2000318")]
	public class RotationModifier : SplineSampleModifier
	{
		[Serializable]
		[Token(Token = "0x20004C2")]
		public class RotationKey : Key
		{
			[Token(Token = "0x4001E3A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			public bool useLookTarget;

			[Token(Token = "0x4001E3B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Transform target;

			[Token(Token = "0x4001E3C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public Vector3 rotation;

			[Token(Token = "0x6001CFE")]
			[Address(RVA = "0xFF1664", Offset = "0xFF1664", VA = "0xFF1664")]
			public RotationKey(Vector3 rotation, double f, double t, RotationModifier modifier)
			{
			}
		}

		[Token(Token = "0x40015AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<RotationKey> keys;

		[Token(Token = "0x6001615")]
		[Address(RVA = "0xCD0B88", Offset = "0xCD0B88", VA = "0xCD0B88")]
		public RotationModifier()
		{
		}

		[Token(Token = "0x6001616")]
		[Address(RVA = "0xCD0C44", Offset = "0xCD0C44", VA = "0xCD0C44", Slot = "4")]
		public override List<Key> GetKeys()
		{
			return null;
		}

		[Token(Token = "0x6001617")]
		[Address(RVA = "0xCD0D48", Offset = "0xCD0D48", VA = "0xCD0D48", Slot = "5")]
		public override void SetKeys(List<Key> input)
		{
		}

		[Token(Token = "0x6001618")]
		[Address(RVA = "0xCD0EC4", Offset = "0xCD0EC4", VA = "0xCD0EC4")]
		public void AddKey(Vector3 rotation, double f, double t)
		{
		}

		[Token(Token = "0x6001619")]
		[Address(RVA = "0xCD0F94", Offset = "0xCD0F94", VA = "0xCD0F94", Slot = "6")]
		public override void Apply(SplineSample result)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000319")]
	public class SizeModifier : SplineSampleModifier
	{
		[Serializable]
		[Token(Token = "0x20004C3")]
		public class SizeKey : Key
		{
			[Token(Token = "0x4001E3D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			public float size;

			[Token(Token = "0x6001CFF")]
			[Address(RVA = "0xFF59C0", Offset = "0xFF59C0", VA = "0xFF59C0")]
			public SizeKey(double f, double t, SizeModifier modifier)
			{
			}
		}

		[Token(Token = "0x40015AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<SizeKey> keys;

		[Token(Token = "0x600161A")]
		[Address(RVA = "0xA0F954", Offset = "0xA0F954", VA = "0xA0F954")]
		public SizeModifier()
		{
		}

		[Token(Token = "0x600161B")]
		[Address(RVA = "0xA0FA10", Offset = "0xA0FA10", VA = "0xA0FA10", Slot = "4")]
		public override List<Key> GetKeys()
		{
			return null;
		}

		[Token(Token = "0x600161C")]
		[Address(RVA = "0xA0FB14", Offset = "0xA0FB14", VA = "0xA0FB14", Slot = "5")]
		public override void SetKeys(List<Key> input)
		{
		}

		[Token(Token = "0x600161D")]
		[Address(RVA = "0xA0FCAC", Offset = "0xA0FCAC", VA = "0xA0FCAC")]
		public void AddKey(double f, double t)
		{
		}

		[Token(Token = "0x600161E")]
		[Address(RVA = "0xA0FD54", Offset = "0xA0FD54", VA = "0xA0FD54", Slot = "6")]
		public override void Apply(SplineSample result)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200031A")]
	public class SplineSampleModifier
	{
		[Serializable]
		[Token(Token = "0x20004C4")]
		public class Key
		{
			[Token(Token = "0x4001E3E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[SerializeField]
			private double _featherStart;

			[Token(Token = "0x4001E3F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[SerializeField]
			private double _featherEnd;

			[Token(Token = "0x4001E40")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[SerializeField]
			private double _centerStart;

			[Token(Token = "0x4001E41")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[SerializeField]
			private double _centerEnd;

			[Token(Token = "0x4001E42")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[SerializeField]
			internal SplineSampleModifier modifier;

			[Token(Token = "0x4001E43")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public AnimationCurve interpolation;

			[Token(Token = "0x4001E44")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public float blend;

			[Token(Token = "0x1700039A")]
			public double start
			{
				[Token(Token = "0x6001D00")]
				[Address(RVA = "0x13896D0", Offset = "0x13896D0", VA = "0x13896D0")]
				get
				{
					return default(double);
				}
				[Token(Token = "0x6001D01")]
				[Address(RVA = "0x13896D8", Offset = "0x13896D8", VA = "0x13896D8")]
				set
				{
				}
			}

			[Token(Token = "0x1700039B")]
			public double end
			{
				[Token(Token = "0x6001D02")]
				[Address(RVA = "0x138970C", Offset = "0x138970C", VA = "0x138970C")]
				get
				{
					return default(double);
				}
				[Token(Token = "0x6001D03")]
				[Address(RVA = "0x1389714", Offset = "0x1389714", VA = "0x1389714")]
				set
				{
				}
			}

			[Token(Token = "0x1700039C")]
			public double centerStart
			{
				[Token(Token = "0x6001D04")]
				[Address(RVA = "0x1389748", Offset = "0x1389748", VA = "0x1389748")]
				get
				{
					return default(double);
				}
				[Token(Token = "0x6001D05")]
				[Address(RVA = "0x1389750", Offset = "0x1389750", VA = "0x1389750")]
				set
				{
				}
			}

			[Token(Token = "0x1700039D")]
			public double centerEnd
			{
				[Token(Token = "0x6001D06")]
				[Address(RVA = "0x1389790", Offset = "0x1389790", VA = "0x1389790")]
				get
				{
					return default(double);
				}
				[Token(Token = "0x6001D07")]
				[Address(RVA = "0x1389798", Offset = "0x1389798", VA = "0x1389798")]
				set
				{
				}
			}

			[Token(Token = "0x1700039E")]
			public double globalCenterStart
			{
				[Token(Token = "0x6001D08")]
				[Address(RVA = "0x13897D8", Offset = "0x13897D8", VA = "0x13897D8")]
				get
				{
					return default(double);
				}
				[Token(Token = "0x6001D09")]
				[Address(RVA = "0x1389840", Offset = "0x1389840", VA = "0x1389840")]
				set
				{
				}
			}

			[Token(Token = "0x1700039F")]
			public double globalCenterEnd
			{
				[Token(Token = "0x6001D0A")]
				[Address(RVA = "0x13898E4", Offset = "0x13898E4", VA = "0x13898E4")]
				get
				{
					return default(double);
				}
				[Token(Token = "0x6001D0B")]
				[Address(RVA = "0x13898EC", Offset = "0x13898EC", VA = "0x13898EC")]
				set
				{
				}
			}

			[Token(Token = "0x170003A0")]
			public double position
			{
				[Token(Token = "0x6001D0C")]
				[Address(RVA = "0x1389938", Offset = "0x1389938", VA = "0x1389938")]
				get
				{
					return default(double);
				}
				[Token(Token = "0x6001D0D")]
				[Address(RVA = "0x13899C0", Offset = "0x13899C0", VA = "0x13899C0")]
				set
				{
				}
			}

			[Token(Token = "0x6001D0E")]
			[Address(RVA = "0x1389A28", Offset = "0x1389A28", VA = "0x1389A28")]
			internal Key(double f, double t, SplineSampleModifier modifier)
			{
			}

			[Token(Token = "0x6001D0F")]
			[Address(RVA = "0x138988C", Offset = "0x138988C", VA = "0x138988C")]
			private double GlobalToLocalPercent(double t)
			{
				return default(double);
			}

			[Token(Token = "0x6001D10")]
			[Address(RVA = "0x13897E0", Offset = "0x13897E0", VA = "0x13897E0")]
			private double LocalToGlobalPercent(double t)
			{
				return default(double);
			}

			[Token(Token = "0x6001D11")]
			[Address(RVA = "0x1389AEC", Offset = "0x1389AEC", VA = "0x1389AEC")]
			public float Evaluate(double t)
			{
				return default(float);
			}

			[Token(Token = "0x6001D12")]
			[Address(RVA = "0x1389B84", Offset = "0x1389B84", VA = "0x1389B84", Slot = "4")]
			public virtual Key Duplicate()
			{
				return null;
			}
		}

		[Token(Token = "0x40015AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float blend;

		[Token(Token = "0x600161F")]
		[Address(RVA = "0x13ABFE0", Offset = "0x13ABFE0", VA = "0x13ABFE0", Slot = "4")]
		public virtual List<Key> GetKeys()
		{
			return null;
		}

		[Token(Token = "0x6001620")]
		[Address(RVA = "0x13AC04C", Offset = "0x13AC04C", VA = "0x13AC04C", Slot = "5")]
		public virtual void SetKeys(List<Key> input)
		{
		}

		[Token(Token = "0x6001621")]
		[Address(RVA = "0x13AC0F4", Offset = "0x13AC0F4", VA = "0x13AC0F4", Slot = "6")]
		public virtual void Apply(SplineSample result)
		{
		}

		[Token(Token = "0x6001622")]
		[Address(RVA = "0x13AC0F8", Offset = "0x13AC0F8", VA = "0x13AC0F8", Slot = "7")]
		public virtual void Apply(SplineSample source, SplineSample destination)
		{
		}

		[Token(Token = "0x6001623")]
		[Address(RVA = "0x13AC138", Offset = "0x13AC138", VA = "0x13AC138")]
		public SplineSampleModifier()
		{
		}
	}
	[Token(Token = "0x200031B")]
	public delegate void EmptySplineHandler();
	[Token(Token = "0x200031C")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5CD544", Offset = "0x5CD544")]
	[ExecuteInEditMode]
	public class SplineComputer : MonoBehaviour
	{
		[Token(Token = "0x20004C5")]
		public enum Space
		{
			[Token(Token = "0x4001E46")]
			World,
			[Token(Token = "0x4001E47")]
			Local
		}

		[Token(Token = "0x20004C6")]
		public enum EvaluateMode
		{
			[Token(Token = "0x4001E49")]
			Cached,
			[Token(Token = "0x4001E4A")]
			Calculate
		}

		[Token(Token = "0x20004C7")]
		public enum SampleMode
		{
			[Token(Token = "0x4001E4C")]
			Default,
			[Token(Token = "0x4001E4D")]
			Uniform,
			[Token(Token = "0x4001E4E")]
			Optimized
		}

		[Token(Token = "0x20004C8")]
		public enum UpdateMode
		{
			[Token(Token = "0x4001E50")]
			Update,
			[Token(Token = "0x4001E51")]
			FixedUpdate,
			[Token(Token = "0x4001E52")]
			LateUpdate,
			[Token(Token = "0x4001E53")]
			AllUpdate,
			[Token(Token = "0x4001E54")]
			None
		}

		[Serializable]
		[Token(Token = "0x20004C9")]
		internal class NodeLink
		{
			[Token(Token = "0x4001E55")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[SerializeField]
			internal Node node;

			[Token(Token = "0x4001E56")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[SerializeField]
			internal int pointIndex;

			[Token(Token = "0x6001D13")]
			[Address(RVA = "0x13841EC", Offset = "0x13841EC", VA = "0x13841EC")]
			internal List<Node.Connection> GetConnections(SplineComputer exclude)
			{
				return null;
			}

			[Token(Token = "0x6001D14")]
			[Address(RVA = "0x1384344", Offset = "0x1384344", VA = "0x1384344")]
			public NodeLink()
			{
			}
		}

		[Token(Token = "0x40015B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public bool multithreaded;

		[Token(Token = "0x40015B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[HideInInspector]
		public bool rebuildOnAwake;

		[Token(Token = "0x40015B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[HideInInspector]
		public UpdateMode updateMode;

		[Token(Token = "0x40015B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public TriggerGroup[] triggerGroups;

		[Token(Token = "0x40015B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		[SerializeField]
		private Spline spline;

		[Token(Token = "0x40015B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[HideInInspector]
		[SerializeField]
		private SplineSample[] _rawSamples;

		[Token(Token = "0x40015B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		[SerializeField]
		private SplineSample[] _transformedSamples;

		[Token(Token = "0x40015B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		[SerializeField]
		private SampleCollection sampleCollection;

		[Token(Token = "0x40015B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[HideInInspector]
		[SerializeField]
		private double[] originalSamplePercents;

		[Token(Token = "0x40015B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool[] sampleFlter;

		[Token(Token = "0x40015BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HideInInspector]
		[SerializeField]
		private int _sampleCount;

		[Token(Token = "0x40015BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[HideInInspector]
		[SerializeField]
		private bool _is2D;

		[Token(Token = "0x40015BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5D")]
		[HideInInspector]
		[SerializeField]
		private bool hasSamples;

		[Token(Token = "0x40015BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HideInInspector]
		[SerializeField]
		private bool[] pointsDirty;

		[Token(Token = "0x40015BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[HideInInspector]
		[SerializeField]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D4734", Offset = "0x5D4734")]
		private float _optimizeAngleThreshold;

		[Token(Token = "0x40015BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[HideInInspector]
		[SerializeField]
		private Space _space;

		[Token(Token = "0x40015C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[HideInInspector]
		[SerializeField]
		private SampleMode _sampleMode;

		[Token(Token = "0x40015C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[HideInInspector]
		[SerializeField]
		private SplineUser[] subscribers;

		[Token(Token = "0x40015C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[HideInInspector]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x5D4834", Offset = "0x5D4834")]
		private NodeLink[] nodes;

		[Token(Token = "0x40015C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private bool rebuildPending;

		[Token(Token = "0x40015C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x89")]
		private bool _trsCheck;

		[Token(Token = "0x40015C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Transform _trs;

		[Token(Token = "0x40015C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Matrix4x4 transformMatrix;

		[Token(Token = "0x40015C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Matrix4x4 inverseTransformMatrix;

		[Token(Token = "0x40015C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private bool queueResample;

		[Token(Token = "0x40015C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x119")]
		private bool queueRebuild;

		[Token(Token = "0x40015CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		private Vector3 lastPosition;

		[Token(Token = "0x40015CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private Vector3 lastScale;

		[Token(Token = "0x40015CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		private bool uniformScale;

		[Token(Token = "0x40015CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private Quaternion lastRotation;

		[Token(Token = "0x17000210")]
		public Space space
		{
			[Token(Token = "0x6001628")]
			[Address(RVA = "0xA1CDD4", Offset = "0xA1CDD4", VA = "0xA1CDD4")]
			get
			{
				return default(Space);
			}
			[Token(Token = "0x6001629")]
			[Address(RVA = "0xA1CDDC", Offset = "0xA1CDDC", VA = "0xA1CDDC")]
			set
			{
			}
		}

		[Token(Token = "0x17000211")]
		public Spline.Type type
		{
			[Token(Token = "0x600162A")]
			[Address(RVA = "0xA1D4A4", Offset = "0xA1D4A4", VA = "0xA1D4A4")]
			get
			{
				return default(Spline.Type);
			}
			[Token(Token = "0x600162B")]
			[Address(RVA = "0xA1D4C0", Offset = "0xA1D4C0", VA = "0xA1D4C0")]
			set
			{
			}
		}

		[Token(Token = "0x17000212")]
		public bool linearAverageDirection
		{
			[Token(Token = "0x600162C")]
			[Address(RVA = "0xA1D50C", Offset = "0xA1D50C", VA = "0xA1D50C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600162D")]
			[Address(RVA = "0xA1D528", Offset = "0xA1D528", VA = "0xA1D528")]
			set
			{
			}
		}

		[Token(Token = "0x17000213")]
		public bool is2D
		{
			[Token(Token = "0x600162E")]
			[Address(RVA = "0xA1D580", Offset = "0xA1D580", VA = "0xA1D580")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600162F")]
			[Address(RVA = "0xA1D588", Offset = "0xA1D588", VA = "0xA1D588")]
			set
			{
			}
		}

		[Token(Token = "0x17000214")]
		public int sampleRate
		{
			[Token(Token = "0x6001630")]
			[Address(RVA = "0xA1D5D8", Offset = "0xA1D5D8", VA = "0xA1D5D8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001631")]
			[Address(RVA = "0xA1D5F4", Offset = "0xA1D5F4", VA = "0xA1D5F4")]
			set
			{
			}
		}

		[Token(Token = "0x17000215")]
		public float optimizeAngleThreshold
		{
			[Token(Token = "0x6001632")]
			[Address(RVA = "0xA1D64C", Offset = "0xA1D64C", VA = "0xA1D64C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001633")]
			[Address(RVA = "0xA1D654", Offset = "0xA1D654", VA = "0xA1D654")]
			set
			{
			}
		}

		[Token(Token = "0x17000216")]
		public SampleMode sampleMode
		{
			[Token(Token = "0x6001634")]
			[Address(RVA = "0xA1D6B0", Offset = "0xA1D6B0", VA = "0xA1D6B0")]
			get
			{
				return default(SampleMode);
			}
			[Token(Token = "0x6001635")]
			[Address(RVA = "0xA1D6B8", Offset = "0xA1D6B8", VA = "0xA1D6B8")]
			set
			{
			}
		}

		[Token(Token = "0x17000217")]
		public AnimationCurve customValueInterpolation
		{
			[Token(Token = "0x6001636")]
			[Address(RVA = "0xA1D6F8", Offset = "0xA1D6F8", VA = "0xA1D6F8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001637")]
			[Address(RVA = "0xA1D714", Offset = "0xA1D714", VA = "0xA1D714")]
			set
			{
			}
		}

		[Token(Token = "0x17000218")]
		public AnimationCurve customNormalInterpolation
		{
			[Token(Token = "0x6001638")]
			[Address(RVA = "0xA1D754", Offset = "0xA1D754", VA = "0xA1D754")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001639")]
			[Address(RVA = "0xA1D770", Offset = "0xA1D770", VA = "0xA1D770")]
			set
			{
			}
		}

		[Token(Token = "0x17000219")]
		public int iterations
		{
			[Token(Token = "0x600163A")]
			[Address(RVA = "0xA1D7B0", Offset = "0xA1D7B0", VA = "0xA1D7B0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700021A")]
		public double moveStep
		{
			[Token(Token = "0x600163B")]
			[Address(RVA = "0xA1D7C8", Offset = "0xA1D7C8", VA = "0xA1D7C8")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x1700021B")]
		public bool isClosed
		{
			[Token(Token = "0x600163C")]
			[Address(RVA = "0xA1D7E0", Offset = "0xA1D7E0", VA = "0xA1D7E0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700021C")]
		public int pointCount
		{
			[Token(Token = "0x600163D")]
			[Address(RVA = "0xA1D820", Offset = "0xA1D820", VA = "0xA1D820")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700021D")]
		public SplineSample[] samples
		{
			[Token(Token = "0x600163E")]
			[Address(RVA = "0xA1D848", Offset = "0xA1D848", VA = "0xA1D848")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700021E")]
		public int sampleCount
		{
			[Token(Token = "0x600163F")]
			[Address(RVA = "0xA1D864", Offset = "0xA1D864", VA = "0xA1D864")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700021F")]
		public SplineSample[] rawSamples
		{
			[Token(Token = "0x6001640")]
			[Address(RVA = "0xA1D86C", Offset = "0xA1D86C", VA = "0xA1D86C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000220")]
		public Vector3 position
		{
			[Token(Token = "0x6001641")]
			[Address(RVA = "0xA1D874", Offset = "0xA1D874", VA = "0xA1D874")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000221")]
		public Quaternion rotation
		{
			[Token(Token = "0x6001642")]
			[Address(RVA = "0xA1D884", Offset = "0xA1D884", VA = "0xA1D884")]
			get
			{
				return default(Quaternion);
			}
		}

		[Token(Token = "0x17000222")]
		public Vector3 scale
		{
			[Token(Token = "0x6001643")]
			[Address(RVA = "0xA1D898", Offset = "0xA1D898", VA = "0xA1D898")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000223")]
		public int subscriberCount
		{
			[Token(Token = "0x6001644")]
			[Address(RVA = "0xA1D8A8", Offset = "0xA1D8A8", VA = "0xA1D8A8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000224")]
		public Transform trs
		{
			[Token(Token = "0x6001645")]
			[Address(RVA = "0xA1D8C4", Offset = "0xA1D8C4", VA = "0xA1D8C4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000225")]
		private bool useMultithreading
		{
			[Token(Token = "0x6001648")]
			[Address(RVA = "0xA1DA5C", Offset = "0xA1DA5C", VA = "0xA1DA5C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x14000017")]
		public event EmptySplineHandler onRebuild
		{
			[Token(Token = "0x6001646")]
			[Address(RVA = "0xA1D914", Offset = "0xA1D914", VA = "0xA1D914")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5DA284", Offset = "0x5DA284")]
			add
			{
			}
			[Token(Token = "0x6001647")]
			[Address(RVA = "0xA1D9B8", Offset = "0xA1D9B8", VA = "0xA1D9B8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5DA294", Offset = "0x5DA294")]
			remove
			{
			}
		}

		[Token(Token = "0x6001649")]
		[Address(RVA = "0xA1DA64", Offset = "0xA1DA64", VA = "0xA1DA64")]
		private void Awake()
		{
		}

		[Token(Token = "0x600164A")]
		[Address(RVA = "0xA1DC6C", Offset = "0xA1DC6C", VA = "0xA1DC6C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x600164B")]
		[Address(RVA = "0xA1DE84", Offset = "0xA1DE84", VA = "0xA1DE84")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600164C")]
		[Address(RVA = "0xA1DE9C", Offset = "0xA1DE9C", VA = "0xA1DE9C")]
		private void Update()
		{
		}

		[Token(Token = "0x600164D")]
		[Address(RVA = "0xA1DC84", Offset = "0xA1DC84", VA = "0xA1DC84")]
		private void RunUpdate()
		{
		}

		[Token(Token = "0x600164E")]
		[Address(RVA = "0xA1EE70", Offset = "0xA1EE70", VA = "0xA1EE70")]
		private void TransformSamplesThreaded()
		{
		}

		[Token(Token = "0x600164F")]
		[Address(RVA = "0xA1EE78", Offset = "0xA1EE78", VA = "0xA1EE78")]
		private void CalculateAndTransformSamples()
		{
		}

		[Token(Token = "0x6001650")]
		[Address(RVA = "0xA1DEB4", Offset = "0xA1DEB4", VA = "0xA1DEB4")]
		private bool TransformHasChanged()
		{
			return default(bool);
		}

		[Token(Token = "0x6001651")]
		[Address(RVA = "0xA1EEA0", Offset = "0xA1EEA0", VA = "0xA1EEA0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001652")]
		[Address(RVA = "0xA1EEC0", Offset = "0xA1EEC0", VA = "0xA1EEC0")]
		public void GetSamples(SampleCollection collection)
		{
		}

		[Token(Token = "0x6001653")]
		[Address(RVA = "0xA1DAE4", Offset = "0xA1DAE4", VA = "0xA1DAE4")]
		public void ResampleTransform()
		{
		}

		[Token(Token = "0x6001654")]
		[Address(RVA = "0xA1EF20", Offset = "0xA1EF20", VA = "0xA1EF20")]
		public void Subscribe(SplineUser input)
		{
		}

		[Token(Token = "0x6001655")]
		[Address(RVA = "0xA1F01C", Offset = "0xA1F01C", VA = "0xA1F01C")]
		public void Unsubscribe(SplineUser input)
		{
		}

		[Token(Token = "0x6001656")]
		[Address(RVA = "0xA1F118", Offset = "0xA1F118", VA = "0xA1F118")]
		public bool IsSubscribed(SplineUser user)
		{
			return default(bool);
		}

		[Token(Token = "0x6001657")]
		[Address(RVA = "0xA1F1EC", Offset = "0xA1F1EC", VA = "0xA1F1EC")]
		public SplineUser[] GetSubscribers()
		{
			return null;
		}

		[Token(Token = "0x6001658")]
		[Address(RVA = "0xA1CF5C", Offset = "0xA1CF5C", VA = "0xA1CF5C")]
		public SplinePoint[] GetPoints(Space getSpace = Space.World)
		{
			return null;
		}

		[Token(Token = "0x6001659")]
		[Address(RVA = "0xA1F284", Offset = "0xA1F284", VA = "0xA1F284")]
		public SplinePoint GetPoint(int index, Space getSpace = Space.World)
		{
			return default(SplinePoint);
		}

		[Token(Token = "0x600165A")]
		[Address(RVA = "0xA1F440", Offset = "0xA1F440", VA = "0xA1F440")]
		public Vector3 GetPointPosition(int index, Space getSpace = Space.World)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600165B")]
		[Address(RVA = "0xA1F4D4", Offset = "0xA1F4D4", VA = "0xA1F4D4")]
		public Vector3 GetPointNormal(int index, Space getSpace = Space.World)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600165C")]
		[Address(RVA = "0xA1F56C", Offset = "0xA1F56C", VA = "0xA1F56C")]
		public Vector3 GetPointTangent(int index, Space getSpace = Space.World)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600165D")]
		[Address(RVA = "0xA1F600", Offset = "0xA1F600", VA = "0xA1F600")]
		public Vector3 GetPointTangent2(int index, Space getSpace = Space.World)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600165E")]
		[Address(RVA = "0xA1F694", Offset = "0xA1F694", VA = "0xA1F694")]
		public float GetPointSize(int index, Space getSpace = Space.World)
		{
			return default(float);
		}

		[Token(Token = "0x600165F")]
		[Address(RVA = "0xA1F6DC", Offset = "0xA1F6DC", VA = "0xA1F6DC")]
		public Color GetPointColor(int index, Space getSpace = Space.World)
		{
			return default(Color);
		}

		[Token(Token = "0x6001660")]
		[Address(RVA = "0xA1F728", Offset = "0xA1F728", VA = "0xA1F728")]
		private void Make2D(ref SplinePoint point)
		{
		}

		[Token(Token = "0x6001661")]
		[Address(RVA = "0xA1D144", Offset = "0xA1D144", VA = "0xA1D144")]
		public void SetPoints(SplinePoint[] points, Space setSpace = Space.World)
		{
		}

		[Token(Token = "0x6001662")]
		[Address(RVA = "0xA1FA7C", Offset = "0xA1FA7C", VA = "0xA1FA7C")]
		public void SetPointPosition(int index, Vector3 pos, Space setSpace = Space.World)
		{
		}

		[Token(Token = "0x6001663")]
		[Address(RVA = "0xA1FD88", Offset = "0xA1FD88", VA = "0xA1FD88")]
		public void SetPointTangents(int index, Vector3 tan1, Vector3 tan2, Space setSpace = Space.World)
		{
		}

		[Token(Token = "0x6001664")]
		[Address(RVA = "0xA20030", Offset = "0xA20030", VA = "0xA20030")]
		public void SetPointNormal(int index, Vector3 nrm, Space setSpace = Space.World)
		{
		}

		[Token(Token = "0x6001665")]
		[Address(RVA = "0xA201F0", Offset = "0xA201F0", VA = "0xA201F0")]
		public void SetPointSize(int index, float size)
		{
		}

		[Token(Token = "0x6001666")]
		[Address(RVA = "0xA20308", Offset = "0xA20308", VA = "0xA20308")]
		public void SetPointColor(int index, Color color)
		{
		}

		[Token(Token = "0x6001667")]
		[Address(RVA = "0xA20450", Offset = "0xA20450", VA = "0xA20450")]
		public void SetPoint(int index, SplinePoint point, Space setSpace = Space.World)
		{
		}

		[Token(Token = "0x6001668")]
		[Address(RVA = "0xA1FBF4", Offset = "0xA1FBF4", VA = "0xA1FBF4")]
		private void AppendPoints(int count)
		{
		}

		[Token(Token = "0x6001669")]
		[Address(RVA = "0xA20664", Offset = "0xA20664", VA = "0xA20664")]
		public double GetPointPercent(int pointIndex)
		{
			return default(double);
		}

		[Token(Token = "0x600166A")]
		[Address(RVA = "0xA2079C", Offset = "0xA2079C", VA = "0xA2079C")]
		public int PercentToPointIndex(double percent, Spline.Direction direction = Spline.Direction.Forward)
		{
			return default(int);
		}

		[Token(Token = "0x600166B")]
		[Address(RVA = "0xA208E8", Offset = "0xA208E8", VA = "0xA208E8")]
		public Vector3 EvaluatePosition(double percent)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600166C")]
		[Address(RVA = "0xA208F0", Offset = "0xA208F0", VA = "0xA208F0")]
		public Vector3 EvaluatePosition(double percent, EvaluateMode mode = EvaluateMode.Cached)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600166D")]
		[Address(RVA = "0xA20944", Offset = "0xA20944", VA = "0xA20944")]
		public Vector3 EvaluatePosition(int pointIndex, EvaluateMode mode = EvaluateMode.Cached)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600166E")]
		[Address(RVA = "0xA20970", Offset = "0xA20970", VA = "0xA20970")]
		public SplineSample Evaluate(double percent)
		{
			return null;
		}

		[Token(Token = "0x600166F")]
		[Address(RVA = "0xA20978", Offset = "0xA20978", VA = "0xA20978")]
		public SplineSample Evaluate(double percent, EvaluateMode mode = EvaluateMode.Cached)
		{
			return null;
		}

		[Token(Token = "0x6001670")]
		[Address(RVA = "0xA20A60", Offset = "0xA20A60", VA = "0xA20A60")]
		public SplineSample Evaluate(int pointIndex)
		{
			return null;
		}

		[Token(Token = "0x6001671")]
		[Address(RVA = "0xA20AD8", Offset = "0xA20AD8", VA = "0xA20AD8")]
		public void Evaluate(int pointIndex, SplineSample result)
		{
		}

		[Token(Token = "0x6001672")]
		[Address(RVA = "0xA20B10", Offset = "0xA20B10", VA = "0xA20B10")]
		public void Evaluate(double percent, SplineSample result)
		{
		}

		[Token(Token = "0x6001673")]
		[Address(RVA = "0xA20A00", Offset = "0xA20A00", VA = "0xA20A00")]
		public void Evaluate(double percent, SplineSample result, EvaluateMode mode = EvaluateMode.Cached)
		{
		}

		[Token(Token = "0x6001674")]
		[Address(RVA = "0xA20BF8", Offset = "0xA20BF8", VA = "0xA20BF8")]
		public void Evaluate(ref SplineSample[] results, double from = 0.0, double to = 1.0)
		{
		}

		[Token(Token = "0x6001675")]
		[Address(RVA = "0xA20C14", Offset = "0xA20C14", VA = "0xA20C14")]
		public void EvaluatePositions(ref Vector3[] positions, double from = 0.0, double to = 1.0)
		{
		}

		[Token(Token = "0x6001676")]
		[Address(RVA = "0xA20C30", Offset = "0xA20C30", VA = "0xA20C30")]
		public double Travel(double start, float distance, out float moved, Spline.Direction direction = Spline.Direction.Forward)
		{
			return default(double);
		}

		[Token(Token = "0x6001677")]
		[Address(RVA = "0xA20C58", Offset = "0xA20C58", VA = "0xA20C58")]
		public double Travel(double start, float distance, Spline.Direction direction = Spline.Direction.Forward)
		{
			return default(double);
		}

		[Token(Token = "0x6001678")]
		[Address(RVA = "0xA20C8C", Offset = "0xA20C8C", VA = "0xA20C8C")]
		public void Project(SplineSample result, Vector3 position, double from = 0.0, double to = 1.0, EvaluateMode mode = EvaluateMode.Cached, int subdivisions = 4)
		{
		}

		[Token(Token = "0x6001679")]
		[Address(RVA = "0xA20D88", Offset = "0xA20D88", VA = "0xA20D88")]
		public SplineSample Project(Vector3 point, double from = 0.0, double to = 1.0)
		{
			return null;
		}

		[Token(Token = "0x600167A")]
		[Address(RVA = "0xA20E38", Offset = "0xA20E38", VA = "0xA20E38")]
		public float CalculateLength(double from = 0.0, double to = 1.0)
		{
			return default(float);
		}

		[Token(Token = "0x600167B")]
		[Address(RVA = "0xA20B2C", Offset = "0xA20B2C", VA = "0xA20B2C")]
		private void TransformResult(SplineSample result)
		{
		}

		[Token(Token = "0x600167C")]
		[Address(RVA = "0xA1D46C", Offset = "0xA1D46C", VA = "0xA1D46C")]
		public void Rebuild(bool forceUpdateAll = false)
		{
		}

		[Token(Token = "0x600167D")]
		[Address(RVA = "0xA1DAA4", Offset = "0xA1DAA4", VA = "0xA1DAA4")]
		public void RebuildImmediate(bool calculateSamples = true, bool forceUpdateAll = false)
		{
		}

		[Token(Token = "0x600167E")]
		[Address(RVA = "0xA1E224", Offset = "0xA1E224", VA = "0xA1E224")]
		private void RebuildUsers()
		{
		}

		[Token(Token = "0x600167F")]
		[Address(RVA = "0xA20E64", Offset = "0xA20E64", VA = "0xA20E64")]
		private void UnsetPointsDirty()
		{
		}

		[Token(Token = "0x6001680")]
		[Address(RVA = "0xA1EDA0", Offset = "0xA1EDA0", VA = "0xA1EDA0")]
		private void SetPointsDirty()
		{
		}

		[Token(Token = "0x6001681")]
		[Address(RVA = "0xA1F780", Offset = "0xA1F780", VA = "0xA1F780")]
		private void SetDirty(int index)
		{
		}

		[Token(Token = "0x6001682")]
		[Address(RVA = "0xA1E3D8", Offset = "0xA1E3D8", VA = "0xA1E3D8")]
		private void CalculateSamples()
		{
		}

		[Token(Token = "0x6001683")]
		[Address(RVA = "0xA1E880", Offset = "0xA1E880", VA = "0xA1E880")]
		private void TransformSamples(bool forceTransformAll = false)
		{
		}

		[Token(Token = "0x6001684")]
		[Address(RVA = "0xA21240", Offset = "0xA21240", VA = "0xA21240")]
		private void OptimizeSamples()
		{
		}

		[Token(Token = "0x6001685")]
		[Address(RVA = "0xA20F30", Offset = "0xA20F30", VA = "0xA20F30")]
		private bool IsDirtyBezier(double samplePercent)
		{
			return default(bool);
		}

		[Token(Token = "0x6001686")]
		[Address(RVA = "0xA21074", Offset = "0xA21074", VA = "0xA21074")]
		private bool IsDirtyHermite(double samplePercent)
		{
			return default(bool);
		}

		[Token(Token = "0x6001687")]
		[Address(RVA = "0xA1F760", Offset = "0xA1F760", VA = "0xA1F760")]
		public void Break()
		{
		}

		[Token(Token = "0x6001688")]
		[Address(RVA = "0xA21600", Offset = "0xA21600", VA = "0xA21600")]
		public void Break(int at)
		{
		}

		[Token(Token = "0x6001689")]
		[Address(RVA = "0xA21688", Offset = "0xA21688", VA = "0xA21688")]
		public void Close()
		{
		}

		[Token(Token = "0x600168A")]
		[Address(RVA = "0xA21700", Offset = "0xA21700", VA = "0xA21700")]
		public void CatToBezierTangents()
		{
		}

		[Token(Token = "0x600168B")]
		[Address(RVA = "0xA21740", Offset = "0xA21740", VA = "0xA21740")]
		public bool Raycast(out RaycastHit hit, out double hitPercent, LayerMask layerMask, double resolution = 1.0, double from = 0.0, double to = 1.0, QueryTriggerInteraction hitTriggers = QueryTriggerInteraction.UseGlobal)
		{
			return default(bool);
		}

		[Token(Token = "0x600168C")]
		[Address(RVA = "0xA21950", Offset = "0xA21950", VA = "0xA21950")]
		public bool RaycastAll(out RaycastHit[] hits, out double[] hitPercents, LayerMask layerMask, double resolution = 1.0, double from = 0.0, double to = 1.0, QueryTriggerInteraction hitTriggers = QueryTriggerInteraction.UseGlobal)
		{
			return default(bool);
		}

		[Token(Token = "0x600168D")]
		[Address(RVA = "0xA21D20", Offset = "0xA21D20", VA = "0xA21D20")]
		public void CheckTriggers(double start, double end, [Optional] SplineUser user)
		{
		}

		[Token(Token = "0x600168E")]
		[Address(RVA = "0xA21DA8", Offset = "0xA21DA8", VA = "0xA21DA8")]
		public void CheckTriggers(int group, double start, double end)
		{
		}

		[Token(Token = "0x600168F")]
		[Address(RVA = "0xA21EE0", Offset = "0xA21EE0", VA = "0xA21EE0")]
		public void ResetTriggers()
		{
		}

		[Token(Token = "0x6001690")]
		[Address(RVA = "0xA21F4C", Offset = "0xA21F4C", VA = "0xA21F4C")]
		public void ResetTriggers(int group)
		{
		}

		[Token(Token = "0x6001691")]
		[Address(RVA = "0xA220A8", Offset = "0xA220A8", VA = "0xA220A8")]
		public List<Node.Connection> GetJunctions(int pointIndex)
		{
			return null;
		}

		[Token(Token = "0x6001692")]
		[Address(RVA = "0xA22190", Offset = "0xA22190", VA = "0xA22190")]
		public Dictionary<int, List<Node.Connection>> GetJunctions(double start = 0.0, double end = 1.0)
		{
			return null;
		}

		[Token(Token = "0x6001693")]
		[Address(RVA = "0xA22384", Offset = "0xA22384", VA = "0xA22384")]
		public void ConnectNode(Node node, int pointIndex)
		{
		}

		[Token(Token = "0x6001694")]
		[Address(RVA = "0xA229AC", Offset = "0xA229AC", VA = "0xA229AC")]
		public void DisconnectNode(int pointIndex)
		{
		}

		[Token(Token = "0x6001695")]
		[Address(RVA = "0xA22900", Offset = "0xA22900", VA = "0xA22900")]
		private void AddNodeLink(Node node, int pointIndex)
		{
		}

		[Token(Token = "0x6001696")]
		[Address(RVA = "0xA22A8C", Offset = "0xA22A8C", VA = "0xA22A8C")]
		public Dictionary<int, Node> GetNodes(double start = 0.0, double end = 1.0)
		{
			return null;
		}

		[Token(Token = "0x6001697")]
		[Address(RVA = "0xA22C68", Offset = "0xA22C68", VA = "0xA22C68")]
		public Node GetNode(int pointIndex)
		{
			return null;
		}

		[Token(Token = "0x6001698")]
		[Address(RVA = "0xA22CF8", Offset = "0xA22CF8", VA = "0xA22CF8")]
		public void TransferNode(int pointIndex, int newPointIndex)
		{
		}

		[Token(Token = "0x6001699")]
		[Address(RVA = "0xA22F00", Offset = "0xA22F00", VA = "0xA22F00")]
		public void ShiftNodes(int startIndex, int endIndex, int shift)
		{
		}

		[Token(Token = "0x600169A")]
		[Address(RVA = "0xA23024", Offset = "0xA23024", VA = "0xA23024")]
		public void GetConnectedComputers(List<SplineComputer> computers, List<int> connectionIndices, List<int> connectedIndices, double percent, Spline.Direction direction, bool includeEqual)
		{
		}

		[Token(Token = "0x600169B")]
		[Address(RVA = "0xA23380", Offset = "0xA23380", VA = "0xA23380")]
		public List<SplineComputer> GetConnectedComputers()
		{
			return null;
		}

		[Token(Token = "0x600169C")]
		[Address(RVA = "0xA208CC", Offset = "0xA208CC", VA = "0xA208CC")]
		public void GetSamplingValues(double percent, out int index, out double lerp)
		{
		}

		[Token(Token = "0x600169D")]
		[Address(RVA = "0xA23444", Offset = "0xA23444", VA = "0xA23444")]
		private void GetConnectedComputers(ref List<SplineComputer> computers)
		{
		}

		[Token(Token = "0x600169E")]
		[Address(RVA = "0xA23710", Offset = "0xA23710", VA = "0xA23710")]
		private void RemoveNodeLinkAt(int index)
		{
		}

		[Token(Token = "0x600169F")]
		[Address(RVA = "0xA1FCB8", Offset = "0xA1FCB8", VA = "0xA1FCB8")]
		private void SetNodeForPoint(int index, SplinePoint worldPoint)
		{
		}

		[Token(Token = "0x60016A0")]
		[Address(RVA = "0xA1F81C", Offset = "0xA1F81C", VA = "0xA1F81C")]
		private void UpdateConnectedNodes(SplinePoint[] worldPoints)
		{
		}

		[Token(Token = "0x60016A1")]
		[Address(RVA = "0xA1DFC8", Offset = "0xA1DFC8", VA = "0xA1DFC8")]
		private void UpdateConnectedNodes()
		{
		}

		[Token(Token = "0x60016A2")]
		[Address(RVA = "0xA1F26C", Offset = "0xA1F26C", VA = "0xA1F26C")]
		public Vector3 TransformPoint(Vector3 point)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60016A3")]
		[Address(RVA = "0xA1F768", Offset = "0xA1F768", VA = "0xA1F768")]
		public Vector3 InverseTransformPoint(Vector3 point)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60016A4")]
		[Address(RVA = "0xA1F278", Offset = "0xA1F278", VA = "0xA1F278")]
		public Vector3 TransformDirection(Vector3 direction)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60016A5")]
		[Address(RVA = "0xA1F774", Offset = "0xA1F774", VA = "0xA1F774")]
		public Vector3 InverseTransformDirection(Vector3 direction)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60016A6")]
		[Address(RVA = "0xA23864", Offset = "0xA23864", VA = "0xA23864")]
		public SplineComputer()
		{
		}
	}
	[Token(Token = "0x200031D")]
	public delegate void SplineReachHandler();
	[Token(Token = "0x200031E")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5CD590", Offset = "0x5CD590")]
	public class SplineFollower : SplineTracer
	{
		[Token(Token = "0x20004CA")]
		public enum FollowMode
		{
			[Token(Token = "0x4001E58")]
			Uniform,
			[Token(Token = "0x4001E59")]
			Time
		}

		[Token(Token = "0x20004CB")]
		public enum Wrap
		{
			[Token(Token = "0x4001E5B")]
			Default,
			[Token(Token = "0x4001E5C")]
			Loop,
			[Token(Token = "0x4001E5D")]
			PingPong
		}

		[Token(Token = "0x40015CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[HideInInspector]
		public Wrap wrapMode;

		[Token(Token = "0x40015D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		[HideInInspector]
		public FollowMode followMode;

		[Token(Token = "0x40015D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[HideInInspector]
		public bool autoStartPosition;

		[Token(Token = "0x40015D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x119")]
		[HideInInspector]
		public bool follow;

		[Token(Token = "0x40015D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[SerializeField]
		[HideInInspector]
		private float _followSpeed;

		[Token(Token = "0x40015D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		[SerializeField]
		[HideInInspector]
		private float _followDuration;

		[Token(Token = "0x40015D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[SerializeField]
		[HideInInspector]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D4970", Offset = "0x5D4970")]
		private double _startPosition;

		[Token(Token = "0x40015D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private double lastClippedPercent;

		[Token(Token = "0x40015D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private bool followStarted;

		[Token(Token = "0x17000226")]
		public float followSpeed
		{
			[Token(Token = "0x60016AB")]
			[Address(RVA = "0x13A313C", Offset = "0x13A313C", VA = "0x13A313C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60016AC")]
			[Address(RVA = "0x13A3144", Offset = "0x13A3144", VA = "0x13A3144")]
			set
			{
			}
		}

		[Token(Token = "0x17000227")]
		public double startPosition
		{
			[Token(Token = "0x60016AD")]
			[Address(RVA = "0x13A3160", Offset = "0x13A3160", VA = "0x13A3160")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x60016AE")]
			[Address(RVA = "0x13A3168", Offset = "0x13A3168", VA = "0x13A3168")]
			set
			{
			}
		}

		[Token(Token = "0x17000228")]
		public float followDuration
		{
			[Token(Token = "0x60016AF")]
			[Address(RVA = "0x13A31C8", Offset = "0x13A31C8", VA = "0x13A31C8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60016B0")]
			[Address(RVA = "0x13A31D0", Offset = "0x13A31D0", VA = "0x13A31D0")]
			set
			{
			}
		}

		[Token(Token = "0x14000018")]
		public event SplineReachHandler onEndReached
		{
			[Token(Token = "0x60016B1")]
			[Address(RVA = "0x13A31EC", Offset = "0x13A31EC", VA = "0x13A31EC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5DA2A4", Offset = "0x5DA2A4")]
			add
			{
			}
			[Token(Token = "0x60016B2")]
			[Address(RVA = "0x13A3290", Offset = "0x13A3290", VA = "0x13A3290")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5DA2B4", Offset = "0x5DA2B4")]
			remove
			{
			}
		}

		[Token(Token = "0x14000019")]
		public event SplineReachHandler onBeginningReached
		{
			[Token(Token = "0x60016B3")]
			[Address(RVA = "0x13A3334", Offset = "0x13A3334", VA = "0x13A3334")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5DA2C4", Offset = "0x5DA2C4")]
			add
			{
			}
			[Token(Token = "0x60016B4")]
			[Address(RVA = "0x13A33D8", Offset = "0x13A33D8", VA = "0x13A33D8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5DA2D4", Offset = "0x5DA2D4")]
			remove
			{
			}
		}

		[Token(Token = "0x60016B5")]
		[Address(RVA = "0x13A347C", Offset = "0x13A347C", VA = "0x13A347C", Slot = "18")]
		protected override void Start()
		{
		}

		[Token(Token = "0x60016B6")]
		[Address(RVA = "0x13A351C", Offset = "0x13A351C", VA = "0x13A351C", Slot = "13")]
		protected override void LateRun()
		{
		}

		[Token(Token = "0x60016B7")]
		[Address(RVA = "0x13A3658", Offset = "0x13A3658", VA = "0x13A3658", Slot = "15")]
		protected override void PostBuild()
		{
		}

		[Token(Token = "0x60016B8")]
		[Address(RVA = "0x13A3530", Offset = "0x13A3530", VA = "0x13A3530")]
		private void Follow()
		{
		}

		[Token(Token = "0x60016B9")]
		[Address(RVA = "0x13A4030", Offset = "0x13A4030", VA = "0x13A4030")]
		public void Restart(double startPosition = 0.0)
		{
		}

		[Token(Token = "0x60016BA")]
		[Address(RVA = "0x13A404C", Offset = "0x13A404C", VA = "0x13A404C", Slot = "19")]
		public override void SetPercent(double percent, bool checkTriggers = false, bool handleJuncitons = false)
		{
		}

		[Token(Token = "0x60016BB")]
		[Address(RVA = "0x13A4124", Offset = "0x13A4124", VA = "0x13A4124", Slot = "20")]
		public override void SetDistance(float distance, bool checkTriggers = false, bool handleJuncitons = false)
		{
		}

		[Token(Token = "0x60016BC")]
		[Address(RVA = "0x13A3D54", Offset = "0x13A3D54", VA = "0x13A3D54")]
		public void Move(double percent)
		{
		}

		[Token(Token = "0x60016BD")]
		[Address(RVA = "0x13A3A8C", Offset = "0x13A3A8C", VA = "0x13A3A8C")]
		public void Move(float distance)
		{
		}

		[Token(Token = "0x60016BE")]
		[Address(RVA = "0x13A4BE4", Offset = "0x13A4BE4", VA = "0x13A4BE4")]
		public SplineFollower()
		{
		}
	}
	[Token(Token = "0x200031F")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x5CD5C8", Offset = "0x5CD5C8")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x5CD5C8", Offset = "0x5CD5C8")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5CD5C8", Offset = "0x5CD5C8")]
	public class SplineMesh : MeshGenerator
	{
		[Serializable]
		[Token(Token = "0x20004CC")]
		public class Channel
		{
			[Token(Token = "0x20004F9")]
			public delegate float FloatHandler(double percent);

			[Token(Token = "0x20004FA")]
			public delegate Vector2 Vector2Handler(double percent);

			[Token(Token = "0x20004FB")]
			public delegate Vector3 Vector3Handler(double percent);

			[Token(Token = "0x20004FC")]
			public delegate Quaternion QuaternionHandler(double percent);

			[Token(Token = "0x20004FD")]
			public enum Type
			{
				[Token(Token = "0x4001F05")]
				Extrude,
				[Token(Token = "0x4001F06")]
				Place
			}

			[Token(Token = "0x20004FE")]
			public enum UVOverride
			{
				[Token(Token = "0x4001F08")]
				None,
				[Token(Token = "0x4001F09")]
				ClampU,
				[Token(Token = "0x4001F0A")]
				ClampV,
				[Token(Token = "0x4001F0B")]
				UniformU,
				[Token(Token = "0x4001F0C")]
				UniformV
			}

			[Serializable]
			[Token(Token = "0x20004FF")]
			public class MeshDefinition
			{
				[Token(Token = "0x2000504")]
				public enum MirrorMethod
				{
					[Token(Token = "0x4001F30")]
					None,
					[Token(Token = "0x4001F31")]
					X,
					[Token(Token = "0x4001F32")]
					Y,
					[Token(Token = "0x4001F33")]
					Z
				}

				[Serializable]
				[Token(Token = "0x2000505")]
				public class Submesh
				{
					[Token(Token = "0x4001F34")]
					[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
					public int[] triangles;

					[Token(Token = "0x6001DE0")]
					[Address(RVA = "0x13900FC", Offset = "0x13900FC", VA = "0x13900FC")]
					public Submesh()
					{
					}

					[Token(Token = "0x6001DE1")]
					[Address(RVA = "0x138D530", Offset = "0x138D530", VA = "0x138D530")]
					public Submesh(int[] input)
					{
					}
				}

				[Serializable]
				[Token(Token = "0x2000506")]
				public class VertexGroup
				{
					[Token(Token = "0x4001F35")]
					[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
					public float value;

					[Token(Token = "0x4001F36")]
					[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
					public double percent;

					[Token(Token = "0x4001F37")]
					[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
					public int[] ids;

					[Token(Token = "0x6001DE2")]
					[Address(RVA = "0x138FA6C", Offset = "0x138FA6C", VA = "0x138FA6C")]
					public VertexGroup(float val, double perc, int[] vertIds)
					{
					}

					[Token(Token = "0x6001DE3")]
					[Address(RVA = "0x138FAB8", Offset = "0x138FAB8", VA = "0x138FAB8")]
					public void AddId(int id)
					{
					}
				}

				[Token(Token = "0x4001F0D")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[SerializeField]
				[HideInInspector]
				internal Vector3[] vertices;

				[Token(Token = "0x4001F0E")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				[SerializeField]
				[HideInInspector]
				internal Vector3[] normals;

				[Token(Token = "0x4001F0F")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
				[SerializeField]
				[HideInInspector]
				internal Vector4[] tangents;

				[Token(Token = "0x4001F10")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
				[SerializeField]
				[HideInInspector]
				internal Color[] colors;

				[Token(Token = "0x4001F11")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
				[SerializeField]
				[HideInInspector]
				internal Vector2[] uv;

				[Token(Token = "0x4001F12")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
				[SerializeField]
				[HideInInspector]
				internal Vector2[] uv2;

				[Token(Token = "0x4001F13")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
				[SerializeField]
				[HideInInspector]
				internal Vector2[] uv3;

				[Token(Token = "0x4001F14")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
				[SerializeField]
				[HideInInspector]
				internal Vector2[] uv4;

				[Token(Token = "0x4001F15")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
				[SerializeField]
				[HideInInspector]
				internal int[] triangles;

				[Token(Token = "0x4001F16")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
				[SerializeField]
				[HideInInspector]
				internal List<Submesh> subMeshes;

				[Token(Token = "0x4001F17")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
				[SerializeField]
				[HideInInspector]
				internal TS_Bounds bounds;

				[Token(Token = "0x4001F18")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
				[SerializeField]
				[HideInInspector]
				internal List<VertexGroup> vertexGroups;

				[Token(Token = "0x4001F19")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
				[SerializeField]
				[HideInInspector]
				private Mesh _mesh;

				[Token(Token = "0x4001F1A")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
				[SerializeField]
				[HideInInspector]
				private Vector3 _rotation;

				[Token(Token = "0x4001F1B")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
				[SerializeField]
				[HideInInspector]
				private Vector3 _offset;

				[Token(Token = "0x4001F1C")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
				[SerializeField]
				[HideInInspector]
				private Vector3 _scale;

				[Token(Token = "0x4001F1D")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
				[SerializeField]
				[HideInInspector]
				private Vector2 _uvScale;

				[Token(Token = "0x4001F1E")]
				[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
				[SerializeField]
				[HideInInspector]
				private Vector2 _uvOffset;

				[Token(Token = "0x4001F1F")]
				[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
				[SerializeField]
				[HideInInspector]
				private float _uvRotation;

				[Token(Token = "0x4001F20")]
				[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
				[SerializeField]
				[HideInInspector]
				private MirrorMethod _mirror;

				[Token(Token = "0x4001F21")]
				[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
				[SerializeField]
				[HideInInspector]
				private float _vertexGroupingMargin;

				[Token(Token = "0x4001F22")]
				[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
				[SerializeField]
				[HideInInspector]
				private bool _removeInnerFaces;

				[Token(Token = "0x4001F23")]
				[Il2CppDummyDll.FieldOffset(Offset = "0xB9")]
				[SerializeField]
				[HideInInspector]
				private bool _flipFaces;

				[Token(Token = "0x4001F24")]
				[Il2CppDummyDll.FieldOffset(Offset = "0xBA")]
				[SerializeField]
				[HideInInspector]
				private bool _doubleSided;

				[Token(Token = "0x170003C5")]
				public Mesh mesh
				{
					[Token(Token = "0x6001DB6")]
					[Address(RVA = "0x138D18C", Offset = "0x138D18C", VA = "0x138D18C")]
					get
					{
						return null;
					}
					[Token(Token = "0x6001DB7")]
					[Address(RVA = "0x138D194", Offset = "0x138D194", VA = "0x138D194")]
					set
					{
					}
				}

				[Token(Token = "0x170003C6")]
				public Vector3 rotation
				{
					[Token(Token = "0x6001DB8")]
					[Address(RVA = "0x138D23C", Offset = "0x138D23C", VA = "0x138D23C")]
					get
					{
						return default(Vector3);
					}
					[Token(Token = "0x6001DB9")]
					[Address(RVA = "0x138D248", Offset = "0x138D248", VA = "0x138D248")]
					set
					{
					}
				}

				[Token(Token = "0x170003C7")]
				public Vector3 offset
				{
					[Token(Token = "0x6001DBA")]
					[Address(RVA = "0x138D2C4", Offset = "0x138D2C4", VA = "0x138D2C4")]
					get
					{
						return default(Vector3);
					}
					[Token(Token = "0x6001DBB")]
					[Address(RVA = "0x138D2D0", Offset = "0x138D2D0", VA = "0x138D2D0")]
					set
					{
					}
				}

				[Token(Token = "0x170003C8")]
				public Vector3 scale
				{
					[Token(Token = "0x6001DBC")]
					[Address(RVA = "0x138D34C", Offset = "0x138D34C", VA = "0x138D34C")]
					get
					{
						return default(Vector3);
					}
					[Token(Token = "0x6001DBD")]
					[Address(RVA = "0x138D358", Offset = "0x138D358", VA = "0x138D358")]
					set
					{
					}
				}

				[Token(Token = "0x170003C9")]
				public Vector2 uvScale
				{
					[Token(Token = "0x6001DBE")]
					[Address(RVA = "0x138D3D4", Offset = "0x138D3D4", VA = "0x138D3D4")]
					get
					{
						return default(Vector2);
					}
					[Token(Token = "0x6001DBF")]
					[Address(RVA = "0x138D3DC", Offset = "0x138D3DC", VA = "0x138D3DC")]
					set
					{
					}
				}

				[Token(Token = "0x170003CA")]
				public Vector2 uvOffset
				{
					[Token(Token = "0x6001DC0")]
					[Address(RVA = "0x138D410", Offset = "0x138D410", VA = "0x138D410")]
					get
					{
						return default(Vector2);
					}
					[Token(Token = "0x6001DC1")]
					[Address(RVA = "0x138D418", Offset = "0x138D418", VA = "0x138D418")]
					set
					{
					}
				}

				[Token(Token = "0x170003CB")]
				public float uvRotation
				{
					[Token(Token = "0x6001DC2")]
					[Address(RVA = "0x138D44C", Offset = "0x138D44C", VA = "0x138D44C")]
					get
					{
						return default(float);
					}
					[Token(Token = "0x6001DC3")]
					[Address(RVA = "0x138D454", Offset = "0x138D454", VA = "0x138D454")]
					set
					{
					}
				}

				[Token(Token = "0x170003CC")]
				public float vertexGroupingMargin
				{
					[Token(Token = "0x6001DC4")]
					[Address(RVA = "0x138D46C", Offset = "0x138D46C", VA = "0x138D46C")]
					get
					{
						return default(float);
					}
					[Token(Token = "0x6001DC5")]
					[Address(RVA = "0x138D474", Offset = "0x138D474", VA = "0x138D474")]
					set
					{
					}
				}

				[Token(Token = "0x170003CD")]
				public MirrorMethod mirror
				{
					[Token(Token = "0x6001DC6")]
					[Address(RVA = "0x138D48C", Offset = "0x138D48C", VA = "0x138D48C")]
					get
					{
						return default(MirrorMethod);
					}
					[Token(Token = "0x6001DC7")]
					[Address(RVA = "0x138D494", Offset = "0x138D494", VA = "0x138D494")]
					set
					{
					}
				}

				[Token(Token = "0x170003CE")]
				public bool removeInnerFaces
				{
					[Token(Token = "0x6001DC8")]
					[Address(RVA = "0x138D4AC", Offset = "0x138D4AC", VA = "0x138D4AC")]
					get
					{
						return default(bool);
					}
					[Token(Token = "0x6001DC9")]
					[Address(RVA = "0x138D4B4", Offset = "0x138D4B4", VA = "0x138D4B4")]
					set
					{
					}
				}

				[Token(Token = "0x170003CF")]
				public bool flipFaces
				{
					[Token(Token = "0x6001DCA")]
					[Address(RVA = "0x138D4D8", Offset = "0x138D4D8", VA = "0x138D4D8")]
					get
					{
						return default(bool);
					}
					[Token(Token = "0x6001DCB")]
					[Address(RVA = "0x138D4E0", Offset = "0x138D4E0", VA = "0x138D4E0")]
					set
					{
					}
				}

				[Token(Token = "0x170003D0")]
				public bool doubleSided
				{
					[Token(Token = "0x6001DCC")]
					[Address(RVA = "0x138D504", Offset = "0x138D504", VA = "0x138D504")]
					get
					{
						return default(bool);
					}
					[Token(Token = "0x6001DCD")]
					[Address(RVA = "0x138D50C", Offset = "0x138D50C", VA = "0x138D50C")]
					set
					{
					}
				}

				[Token(Token = "0x6001DCE")]
				[Address(RVA = "0x138556C", Offset = "0x138556C", VA = "0x138556C")]
				internal MeshDefinition Copy()
				{
					return null;
				}

				[Token(Token = "0x6001DCF")]
				[Address(RVA = "0x1385014", Offset = "0x1385014", VA = "0x1385014")]
				public MeshDefinition(Mesh input)
				{
				}

				[Token(Token = "0x6001DD0")]
				[Address(RVA = "0x1386F5C", Offset = "0x1386F5C", VA = "0x1386F5C")]
				public void Refresh()
				{
				}

				[Token(Token = "0x6001DD1")]
				[Address(RVA = "0x138E2C4", Offset = "0x138E2C4", VA = "0x138E2C4")]
				private void RemoveInnerFaces()
				{
				}

				[Token(Token = "0x6001DD2")]
				[Address(RVA = "0x138DCF4", Offset = "0x138DCF4", VA = "0x138DCF4")]
				private void FlipFaces()
				{
				}

				[Token(Token = "0x6001DD3")]
				[Address(RVA = "0x138D9CC", Offset = "0x138D9CC", VA = "0x138D9CC")]
				private void DoubleSided()
				{
				}

				[Token(Token = "0x6001DD4")]
				[Address(RVA = "0x138EAE0", Offset = "0x138EAE0", VA = "0x138EAE0")]
				public void Write(TS_Mesh target, int forceMaterialId = -1)
				{
				}

				[Token(Token = "0x6001DD5")]
				[Address(RVA = "0x138E1AC", Offset = "0x138E1AC", VA = "0x138E1AC")]
				private void CalculateBounds()
				{
				}

				[Token(Token = "0x6001DD6")]
				[Address(RVA = "0x138D5E0", Offset = "0x138D5E0", VA = "0x138D5E0")]
				private void Mirror()
				{
				}

				[Token(Token = "0x6001DD7")]
				[Address(RVA = "0x138DE54", Offset = "0x138DE54", VA = "0x138DE54")]
				private void TransformVertices()
				{
				}

				[Token(Token = "0x6001DD8")]
				[Address(RVA = "0x138E6E4", Offset = "0x138E6E4", VA = "0x138E6E4")]
				private void GroupVertices()
				{
				}

				[Token(Token = "0x6001DD9")]
				[Address(RVA = "0x138F948", Offset = "0x138F948", VA = "0x138F948")]
				private int FindInsertIndex(Vector3 pos, float value)
				{
					return default(int);
				}

				[Token(Token = "0x6001DDA")]
				[Address(RVA = "0x138F308", Offset = "0x138F308", VA = "0x138F308")]
				private void CalculateTangents()
				{
				}
			}

			[Token(Token = "0x4001E5E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string name;

			[Token(Token = "0x4001E5F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private System.Random iterationRandom;

			[Token(Token = "0x4001E60")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[SerializeField]
			[HideInInspector]
			private int _iterationSeed;

			[Token(Token = "0x4001E61")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[SerializeField]
			[HideInInspector]
			private int _offsetSeed;

			[Token(Token = "0x4001E62")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private System.Random offsetRandom;

			[Token(Token = "0x4001E63")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Vector2Handler _offsetHandler;

			[Token(Token = "0x4001E64")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[SerializeField]
			[HideInInspector]
			private int _rotationSeed;

			[Token(Token = "0x4001E65")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private System.Random rotationRandom;

			[Token(Token = "0x4001E66")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private QuaternionHandler _placeRotationHandler;

			[Token(Token = "0x4001E67")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private FloatHandler _extrudeRotationHandler;

			[Token(Token = "0x4001E68")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[SerializeField]
			[HideInInspector]
			private int _scaleSeed;

			[Token(Token = "0x4001E69")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private System.Random scaleRandom;

			[Token(Token = "0x4001E6A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			private Vector3Handler _scaleHandler;

			[Token(Token = "0x4001E6B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			[SerializeField]
			internal SplineMesh owner;

			[Token(Token = "0x4001E6C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			[SerializeField]
			[HideInInspector]
			private List<MeshDefinition> meshes;

			[Token(Token = "0x4001E6D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			[SerializeField]
			[HideInInspector]
			private double _clipFrom;

			[Token(Token = "0x4001E6E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			[SerializeField]
			[HideInInspector]
			private double _clipTo;

			[Token(Token = "0x4001E6F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			[SerializeField]
			[HideInInspector]
			private bool _randomOrder;

			[Token(Token = "0x4001E70")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
			[SerializeField]
			[HideInInspector]
			private UVOverride _overrideUVs;

			[Token(Token = "0x4001E71")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			[SerializeField]
			[HideInInspector]
			private Vector2 _uvScale;

			[Token(Token = "0x4001E72")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			[SerializeField]
			[HideInInspector]
			private Vector2 _uvOffset;

			[Token(Token = "0x4001E73")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			[SerializeField]
			[HideInInspector]
			private bool _overrideNormal;

			[Token(Token = "0x4001E74")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
			[SerializeField]
			[HideInInspector]
			private Vector3 _customNormal;

			[Token(Token = "0x4001E75")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
			[SerializeField]
			[HideInInspector]
			private Type _type;

			[Token(Token = "0x4001E76")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
			[SerializeField]
			[HideInInspector]
			private int _count;

			[Token(Token = "0x4001E77")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			[SerializeField]
			[HideInInspector]
			private bool _autoCount;

			[Token(Token = "0x4001E78")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
			[SerializeField]
			[HideInInspector]
			private double _spacing;

			[Token(Token = "0x4001E79")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
			[SerializeField]
			[HideInInspector]
			private bool _randomRotation;

			[Token(Token = "0x4001E7A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
			[SerializeField]
			[HideInInspector]
			private Vector3 _minRotation;

			[Token(Token = "0x4001E7B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
			[SerializeField]
			[HideInInspector]
			private Vector3 _maxRotation;

			[Token(Token = "0x4001E7C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
			[SerializeField]
			[HideInInspector]
			private bool _randomOffset;

			[Token(Token = "0x4001E7D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
			[SerializeField]
			[HideInInspector]
			private Vector2 _minOffset;

			[Token(Token = "0x4001E7E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
			[SerializeField]
			[HideInInspector]
			private Vector2 _maxOffset;

			[Token(Token = "0x4001E7F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
			[SerializeField]
			[HideInInspector]
			private bool _randomScale;

			[Token(Token = "0x4001E80")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x101")]
			[SerializeField]
			[HideInInspector]
			private bool _uniformRandomScale;

			[Token(Token = "0x4001E81")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
			[SerializeField]
			[HideInInspector]
			private Vector3 _minScale;

			[Token(Token = "0x4001E82")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
			[SerializeField]
			[HideInInspector]
			private Vector3 _maxScale;

			[Token(Token = "0x4001E83")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
			private int iterator;

			[Token(Token = "0x4001E84")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
			[SerializeField]
			[HideInInspector]
			private bool _overrideMaterialID;

			[Token(Token = "0x4001E85")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
			[SerializeField]
			[HideInInspector]
			private int _targetMaterialID;

			[Token(Token = "0x4001E86")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
			[SerializeField]
			[HideInInspector]
			protected MeshScaleModifier _scaleModifier;

			[Token(Token = "0x170003A1")]
			public double clipFrom
			{
				[Token(Token = "0x6001D15")]
				[Address(RVA = "0x138434C", Offset = "0x138434C", VA = "0x138434C")]
				get
				{
					return default(double);
				}
				[Token(Token = "0x6001D16")]
				[Address(RVA = "0x1384354", Offset = "0x1384354", VA = "0x1384354")]
				set
				{
				}
			}

			[Token(Token = "0x170003A2")]
			public double clipTo
			{
				[Token(Token = "0x6001D17")]
				[Address(RVA = "0x1384400", Offset = "0x1384400", VA = "0x1384400")]
				get
				{
					return default(double);
				}
				[Token(Token = "0x6001D18")]
				[Address(RVA = "0x1384408", Offset = "0x1384408", VA = "0x1384408")]
				set
				{
				}
			}

			[Token(Token = "0x170003A3")]
			public bool randomOffset
			{
				[Token(Token = "0x6001D19")]
				[Address(RVA = "0x1384420", Offset = "0x1384420", VA = "0x1384420")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6001D1A")]
				[Address(RVA = "0x1384428", Offset = "0x1384428", VA = "0x1384428")]
				set
				{
				}
			}

			[Token(Token = "0x170003A4")]
			public Vector2Handler offsetHandler
			{
				[Token(Token = "0x6001D1B")]
				[Address(RVA = "0x138444C", Offset = "0x138444C", VA = "0x138444C")]
				get
				{
					return null;
				}
				[Token(Token = "0x6001D1C")]
				[Address(RVA = "0x1384454", Offset = "0x1384454", VA = "0x1384454")]
				set
				{
				}
			}

			[Token(Token = "0x170003A5")]
			public bool overrideMaterialID
			{
				[Token(Token = "0x6001D1D")]
				[Address(RVA = "0x13844BC", Offset = "0x13844BC", VA = "0x13844BC")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6001D1E")]
				[Address(RVA = "0x13844C4", Offset = "0x13844C4", VA = "0x13844C4")]
				set
				{
				}
			}

			[Token(Token = "0x170003A6")]
			public int targetMaterialID
			{
				[Token(Token = "0x6001D1F")]
				[Address(RVA = "0x13844E8", Offset = "0x13844E8", VA = "0x13844E8")]
				get
				{
					return default(int);
				}
				[Token(Token = "0x6001D20")]
				[Address(RVA = "0x13844F0", Offset = "0x13844F0", VA = "0x13844F0")]
				set
				{
				}
			}

			[Token(Token = "0x170003A7")]
			public bool randomRotation
			{
				[Token(Token = "0x6001D21")]
				[Address(RVA = "0x1384508", Offset = "0x1384508", VA = "0x1384508")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6001D22")]
				[Address(RVA = "0x1384510", Offset = "0x1384510", VA = "0x1384510")]
				set
				{
				}
			}

			[Token(Token = "0x170003A8")]
			public QuaternionHandler placeRotationHandler
			{
				[Token(Token = "0x6001D23")]
				[Address(RVA = "0x1384534", Offset = "0x1384534", VA = "0x1384534")]
				get
				{
					return null;
				}
				[Token(Token = "0x6001D24")]
				[Address(RVA = "0x138453C", Offset = "0x138453C", VA = "0x138453C")]
				set
				{
				}
			}

			[Token(Token = "0x170003A9")]
			public FloatHandler extrudeRotationHandler
			{
				[Token(Token = "0x6001D25")]
				[Address(RVA = "0x13845A4", Offset = "0x13845A4", VA = "0x13845A4")]
				get
				{
					return null;
				}
				[Token(Token = "0x6001D26")]
				[Address(RVA = "0x13845AC", Offset = "0x13845AC", VA = "0x13845AC")]
				set
				{
				}
			}

			[Token(Token = "0x170003AA")]
			public bool randomScale
			{
				[Token(Token = "0x6001D27")]
				[Address(RVA = "0x1384614", Offset = "0x1384614", VA = "0x1384614")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6001D28")]
				[Address(RVA = "0x138461C", Offset = "0x138461C", VA = "0x138461C")]
				set
				{
				}
			}

			[Token(Token = "0x170003AB")]
			public Vector3Handler scaleHandler
			{
				[Token(Token = "0x6001D29")]
				[Address(RVA = "0x1384640", Offset = "0x1384640", VA = "0x1384640")]
				get
				{
					return null;
				}
				[Token(Token = "0x6001D2A")]
				[Address(RVA = "0x1384648", Offset = "0x1384648", VA = "0x1384648")]
				set
				{
				}
			}

			[Token(Token = "0x170003AC")]
			public bool uniformRandomScale
			{
				[Token(Token = "0x6001D2B")]
				[Address(RVA = "0x13846B0", Offset = "0x13846B0", VA = "0x13846B0")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6001D2C")]
				[Address(RVA = "0x13846B8", Offset = "0x13846B8", VA = "0x13846B8")]
				set
				{
				}
			}

			[Token(Token = "0x170003AD")]
			public int offsetSeed
			{
				[Token(Token = "0x6001D2D")]
				[Address(RVA = "0x13846DC", Offset = "0x13846DC", VA = "0x13846DC")]
				get
				{
					return default(int);
				}
				[Token(Token = "0x6001D2E")]
				[Address(RVA = "0x13846E4", Offset = "0x13846E4", VA = "0x13846E4")]
				set
				{
				}
			}

			[Token(Token = "0x170003AE")]
			public int rotationSeed
			{
				[Token(Token = "0x6001D2F")]
				[Address(RVA = "0x13846FC", Offset = "0x13846FC", VA = "0x13846FC")]
				get
				{
					return default(int);
				}
				[Token(Token = "0x6001D30")]
				[Address(RVA = "0x1384704", Offset = "0x1384704", VA = "0x1384704")]
				set
				{
				}
			}

			[Token(Token = "0x170003AF")]
			public int scaleSeed
			{
				[Token(Token = "0x6001D31")]
				[Address(RVA = "0x138471C", Offset = "0x138471C", VA = "0x138471C")]
				get
				{
					return default(int);
				}
				[Token(Token = "0x6001D32")]
				[Address(RVA = "0x1384724", Offset = "0x1384724", VA = "0x1384724")]
				set
				{
				}
			}

			[Token(Token = "0x170003B0")]
			public double spacing
			{
				[Token(Token = "0x6001D33")]
				[Address(RVA = "0x138473C", Offset = "0x138473C", VA = "0x138473C")]
				get
				{
					return default(double);
				}
				[Token(Token = "0x6001D34")]
				[Address(RVA = "0x1384744", Offset = "0x1384744", VA = "0x1384744")]
				set
				{
				}
			}

			[Token(Token = "0x170003B1")]
			public Vector2 minOffset
			{
				[Token(Token = "0x6001D35")]
				[Address(RVA = "0x138475C", Offset = "0x138475C", VA = "0x138475C")]
				get
				{
					return default(Vector2);
				}
				[Token(Token = "0x6001D36")]
				[Address(RVA = "0x1384764", Offset = "0x1384764", VA = "0x1384764")]
				set
				{
				}
			}

			[Token(Token = "0x170003B2")]
			public Vector2 maxOffset
			{
				[Token(Token = "0x6001D37")]
				[Address(RVA = "0x1384798", Offset = "0x1384798", VA = "0x1384798")]
				get
				{
					return default(Vector2);
				}
				[Token(Token = "0x6001D38")]
				[Address(RVA = "0x13847A0", Offset = "0x13847A0", VA = "0x13847A0")]
				set
				{
				}
			}

			[Token(Token = "0x170003B3")]
			public Vector3 minRotation
			{
				[Token(Token = "0x6001D39")]
				[Address(RVA = "0x13847D4", Offset = "0x13847D4", VA = "0x13847D4")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6001D3A")]
				[Address(RVA = "0x13847E0", Offset = "0x13847E0", VA = "0x13847E0")]
				set
				{
				}
			}

			[Token(Token = "0x170003B4")]
			public Vector3 maxRotation
			{
				[Token(Token = "0x6001D3B")]
				[Address(RVA = "0x138484C", Offset = "0x138484C", VA = "0x138484C")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6001D3C")]
				[Address(RVA = "0x1384858", Offset = "0x1384858", VA = "0x1384858")]
				set
				{
				}
			}

			[Token(Token = "0x170003B5")]
			public Vector3 minScale
			{
				[Token(Token = "0x6001D3D")]
				[Address(RVA = "0x13848C4", Offset = "0x13848C4", VA = "0x13848C4")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6001D3E")]
				[Address(RVA = "0x13848D4", Offset = "0x13848D4", VA = "0x13848D4")]
				set
				{
				}
			}

			[Token(Token = "0x170003B6")]
			public Vector3 maxScale
			{
				[Token(Token = "0x6001D3F")]
				[Address(RVA = "0x1384948", Offset = "0x1384948", VA = "0x1384948")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6001D40")]
				[Address(RVA = "0x1384958", Offset = "0x1384958", VA = "0x1384958")]
				set
				{
				}
			}

			[Token(Token = "0x170003B7")]
			public Type type
			{
				[Token(Token = "0x6001D41")]
				[Address(RVA = "0x13849CC", Offset = "0x13849CC", VA = "0x13849CC")]
				get
				{
					return default(Type);
				}
				[Token(Token = "0x6001D42")]
				[Address(RVA = "0x13849D4", Offset = "0x13849D4", VA = "0x13849D4")]
				set
				{
				}
			}

			[Token(Token = "0x170003B8")]
			public bool randomOrder
			{
				[Token(Token = "0x6001D43")]
				[Address(RVA = "0x13849EC", Offset = "0x13849EC", VA = "0x13849EC")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6001D44")]
				[Address(RVA = "0x13849F4", Offset = "0x13849F4", VA = "0x13849F4")]
				set
				{
				}
			}

			[Token(Token = "0x170003B9")]
			public int randomSeed
			{
				[Token(Token = "0x6001D45")]
				[Address(RVA = "0x1384A18", Offset = "0x1384A18", VA = "0x1384A18")]
				get
				{
					return default(int);
				}
				[Token(Token = "0x6001D46")]
				[Address(RVA = "0x1384A20", Offset = "0x1384A20", VA = "0x1384A20")]
				set
				{
				}
			}

			[Token(Token = "0x170003BA")]
			public int count
			{
				[Token(Token = "0x6001D47")]
				[Address(RVA = "0x1384A40", Offset = "0x1384A40", VA = "0x1384A40")]
				get
				{
					return default(int);
				}
				[Token(Token = "0x6001D48")]
				[Address(RVA = "0x1384A48", Offset = "0x1384A48", VA = "0x1384A48")]
				set
				{
				}
			}

			[Token(Token = "0x170003BB")]
			public bool autoCount
			{
				[Token(Token = "0x6001D49")]
				[Address(RVA = "0x1384A68", Offset = "0x1384A68", VA = "0x1384A68")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6001D4A")]
				[Address(RVA = "0x1384A70", Offset = "0x1384A70", VA = "0x1384A70")]
				set
				{
				}
			}

			[Token(Token = "0x170003BC")]
			public UVOverride overrideUVs
			{
				[Token(Token = "0x6001D4B")]
				[Address(RVA = "0x1384A94", Offset = "0x1384A94", VA = "0x1384A94")]
				get
				{
					return default(UVOverride);
				}
				[Token(Token = "0x6001D4C")]
				[Address(RVA = "0x1384A9C", Offset = "0x1384A9C", VA = "0x1384A9C")]
				set
				{
				}
			}

			[Token(Token = "0x170003BD")]
			public Vector2 uvOffset
			{
				[Token(Token = "0x6001D4D")]
				[Address(RVA = "0x1384AB4", Offset = "0x1384AB4", VA = "0x1384AB4")]
				get
				{
					return default(Vector2);
				}
				[Token(Token = "0x6001D4E")]
				[Address(RVA = "0x1384ABC", Offset = "0x1384ABC", VA = "0x1384ABC")]
				set
				{
				}
			}

			[Token(Token = "0x170003BE")]
			public Vector2 uvScale
			{
				[Token(Token = "0x6001D4F")]
				[Address(RVA = "0x1384AF0", Offset = "0x1384AF0", VA = "0x1384AF0")]
				get
				{
					return default(Vector2);
				}
				[Token(Token = "0x6001D50")]
				[Address(RVA = "0x1384AF8", Offset = "0x1384AF8", VA = "0x1384AF8")]
				set
				{
				}
			}

			[Token(Token = "0x170003BF")]
			public bool overrideNormal
			{
				[Token(Token = "0x6001D51")]
				[Address(RVA = "0x1384B2C", Offset = "0x1384B2C", VA = "0x1384B2C")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6001D52")]
				[Address(RVA = "0x1384B34", Offset = "0x1384B34", VA = "0x1384B34")]
				set
				{
				}
			}

			[Token(Token = "0x170003C0")]
			public Vector3 customNormal
			{
				[Token(Token = "0x6001D53")]
				[Address(RVA = "0x1384B58", Offset = "0x1384B58", VA = "0x1384B58")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6001D54")]
				[Address(RVA = "0x1384B64", Offset = "0x1384B64", VA = "0x1384B64")]
				set
				{
				}
			}

			[Token(Token = "0x170003C1")]
			public MeshScaleModifier scaleModifier
			{
				[Token(Token = "0x6001D55")]
				[Address(RVA = "0x1384BD0", Offset = "0x1384BD0", VA = "0x1384BD0")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001D56")]
			[Address(RVA = "0x1384BD8", Offset = "0x1384BD8", VA = "0x1384BD8")]
			public Channel(string n, SplineMesh parent)
			{
			}

			[Token(Token = "0x6001D57")]
			[Address(RVA = "0x1384DF4", Offset = "0x1384DF4", VA = "0x1384DF4")]
			public Channel(string n, Mesh inputMesh, SplineMesh parent)
			{
			}

			[Token(Token = "0x6001D58")]
			[Address(RVA = "0x1384D94", Offset = "0x1384D94", VA = "0x1384D94")]
			private void Init()
			{
			}

			[Token(Token = "0x6001D59")]
			[Address(RVA = "0x1385340", Offset = "0x1385340", VA = "0x1385340")]
			public void CopyTo(Channel target)
			{
			}

			[Token(Token = "0x6001D5A")]
			[Address(RVA = "0x1385B1C", Offset = "0x1385B1C", VA = "0x1385B1C")]
			public int GetMeshCount()
			{
				return default(int);
			}

			[Token(Token = "0x6001D5B")]
			[Address(RVA = "0x1385B68", Offset = "0x1385B68", VA = "0x1385B68")]
			public void SwapMeshes(int a, int b)
			{
			}

			[Token(Token = "0x6001D5C")]
			[Address(RVA = "0x1385C9C", Offset = "0x1385C9C", VA = "0x1385C9C")]
			public void DuplicateMesh(int index)
			{
			}

			[Token(Token = "0x6001D5D")]
			[Address(RVA = "0x1385D64", Offset = "0x1385D64", VA = "0x1385D64")]
			public MeshDefinition GetMesh(int index)
			{
				return null;
			}

			[Token(Token = "0x6001D5E")]
			[Address(RVA = "0x1385DD8", Offset = "0x1385DD8", VA = "0x1385DD8")]
			public void AddMesh(Mesh input)
			{
			}

			[Token(Token = "0x6001D5F")]
			[Address(RVA = "0x1385E70", Offset = "0x1385E70", VA = "0x1385E70")]
			public void RemoveMesh(int index)
			{
			}

			[Token(Token = "0x6001D60")]
			[Address(RVA = "0x1385EDC", Offset = "0x1385EDC", VA = "0x1385EDC")]
			public void ResetIteration()
			{
			}

			[Token(Token = "0x6001D61")]
			[Address(RVA = "0x1386014", Offset = "0x1386014", VA = "0x1386014")]
			public Vector2 NextOffset(double percent)
			{
				return default(Vector2);
			}

			[Token(Token = "0x6001D62")]
			[Address(RVA = "0x1386314", Offset = "0x1386314", VA = "0x1386314")]
			public Quaternion NextPlaceRotation(double percent)
			{
				return default(Quaternion);
			}

			[Token(Token = "0x6001D63")]
			[Address(RVA = "0x1386664", Offset = "0x1386664", VA = "0x1386664")]
			public float NextExtrudeRotation(double percent)
			{
				return default(float);
			}

			[Token(Token = "0x6001D64")]
			[Address(RVA = "0x138691C", Offset = "0x138691C", VA = "0x138691C")]
			public Vector3 NextExtrudeScale(double percent)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6001D65")]
			[Address(RVA = "0x1386C88", Offset = "0x1386C88", VA = "0x1386C88")]
			public Vector3 NextPlaceScale()
			{
				return default(Vector3);
			}

			[Token(Token = "0x6001D66")]
			[Address(RVA = "0x1386DE4", Offset = "0x1386DE4", VA = "0x1386DE4")]
			public MeshDefinition NextMesh()
			{
				return null;
			}

			[Token(Token = "0x6001D67")]
			[Address(RVA = "0x138436C", Offset = "0x138436C", VA = "0x138436C")]
			internal void Rebuild()
			{
			}

			[Token(Token = "0x6001D68")]
			[Address(RVA = "0x1386EBC", Offset = "0x1386EBC", VA = "0x1386EBC")]
			private void Refresh()
			{
			}
		}

		[Token(Token = "0x40015DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[SerializeField]
		[HideInInspector]
		private List<Channel> channels;

		[Token(Token = "0x40015DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private bool useLastResult;

		[Token(Token = "0x40015DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private List<TS_Mesh> combineMeshes;

		[Token(Token = "0x40015DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private int meshCount;

		[Token(Token = "0x40015DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		private Matrix4x4 vertexMatrix;

		[Token(Token = "0x40015DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
		private Matrix4x4 normalMatrix;

		[Token(Token = "0x40015E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		private SplineSample lastResult;

		[Token(Token = "0x40015E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		private SplineSample modifiedResult;

		[Token(Token = "0x60016BF")]
		[Address(RVA = "0x13A4D18", Offset = "0x13A4D18", VA = "0x13A4D18", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x60016C0")]
		[Address(RVA = "0x13A4D7C", Offset = "0x13A4D7C", VA = "0x13A4D7C", Slot = "5")]
		protected override void Reset()
		{
		}

		[Token(Token = "0x60016C1")]
		[Address(RVA = "0x13A4E70", Offset = "0x13A4E70", VA = "0x13A4E70")]
		public void RemoveChannel(int index)
		{
		}

		[Token(Token = "0x60016C2")]
		[Address(RVA = "0x13A4EE4", Offset = "0x13A4EE4", VA = "0x13A4EE4")]
		public void SwapChannels(int a, int b)
		{
		}

		[Token(Token = "0x60016C3")]
		[Address(RVA = "0x13A5020", Offset = "0x13A5020", VA = "0x13A5020")]
		public Channel AddChannel(Mesh inputMesh, string name)
		{
			return null;
		}

		[Token(Token = "0x60016C4")]
		[Address(RVA = "0x13A4DD4", Offset = "0x13A4DD4", VA = "0x13A4DD4")]
		public Channel AddChannel(string name)
		{
			return null;
		}

		[Token(Token = "0x60016C5")]
		[Address(RVA = "0x13A50C4", Offset = "0x13A50C4", VA = "0x13A50C4")]
		public int GetChannelCount()
		{
			return default(int);
		}

		[Token(Token = "0x60016C6")]
		[Address(RVA = "0x13A5110", Offset = "0x13A5110", VA = "0x13A5110")]
		public Channel GetChannel(int index)
		{
			return null;
		}

		[Token(Token = "0x60016C7")]
		[Address(RVA = "0x13A5184", Offset = "0x13A5184", VA = "0x13A5184", Slot = "18")]
		protected override void BuildMesh()
		{
		}

		[Token(Token = "0x60016C8")]
		[Address(RVA = "0x13A51B8", Offset = "0x13A51B8", VA = "0x13A51B8")]
		private void Generate()
		{
		}

		[Token(Token = "0x60016C9")]
		[Address(RVA = "0x13A63D4", Offset = "0x13A63D4", VA = "0x13A63D4")]
		private void Place(Channel channel, TS_Mesh target, double percent)
		{
		}

		[Token(Token = "0x60016CA")]
		[Address(RVA = "0x13A5BF8", Offset = "0x13A5BF8", VA = "0x13A5BF8")]
		private void Stretch(Channel channel, TS_Mesh target, double from, double to)
		{
		}

		[Token(Token = "0x60016CB")]
		[Address(RVA = "0x13A6B8C", Offset = "0x13A6B8C", VA = "0x13A6B8C")]
		public SplineMesh()
		{
		}
	}
	[Token(Token = "0x2000320")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5CD680", Offset = "0x5CD680")]
	public class SplineMorph : MonoBehaviour
	{
		[Token(Token = "0x20004CD")]
		public enum CycleMode
		{
			[Token(Token = "0x4001E88")]
			Default,
			[Token(Token = "0x4001E89")]
			Loop,
			[Token(Token = "0x4001E8A")]
			PingPong
		}

		[Token(Token = "0x20004CE")]
		public enum UpdateMode
		{
			[Token(Token = "0x4001E8C")]
			Update,
			[Token(Token = "0x4001E8D")]
			FixedUpdate,
			[Token(Token = "0x4001E8E")]
			LateUpdate
		}

		[Serializable]
		[Token(Token = "0x20004CF")]
		public class Channel
		{
			[Token(Token = "0x2000500")]
			public enum Interpolation
			{
				[Token(Token = "0x4001F26")]
				Linear,
				[Token(Token = "0x4001F27")]
				Spherical
			}

			[Token(Token = "0x4001E8F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[SerializeField]
			internal SplinePoint[] points;

			[Token(Token = "0x4001E90")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[SerializeField]
			internal float percent;

			[Token(Token = "0x4001E91")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string name;

			[Token(Token = "0x4001E92")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public AnimationCurve curve;

			[Token(Token = "0x4001E93")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Interpolation interpolation;

			[Token(Token = "0x6001D69")]
			[Address(RVA = "0x1387984", Offset = "0x1387984", VA = "0x1387984")]
			public Channel()
			{
			}
		}

		[Token(Token = "0x40015E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public SplineComputer.Space space;

		[Token(Token = "0x40015E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[HideInInspector]
		public bool cycle;

		[Token(Token = "0x40015E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public CycleMode cycleMode;

		[Token(Token = "0x40015E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[HideInInspector]
		public UpdateMode cycleUpdateMode;

		[Token(Token = "0x40015E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public float cycleDuration;

		[Token(Token = "0x40015E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		[HideInInspector]
		private SplineComputer _spline;

		[Token(Token = "0x40015E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private SplinePoint[] points;

		[Token(Token = "0x40015E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float cycleValue;

		[Token(Token = "0x40015EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private short cycleDirection;

		[Token(Token = "0x40015EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[HideInInspector]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x5D4A80", Offset = "0x5D4A80")]
		private Channel[] channels;

		[Token(Token = "0x17000229")]
		public SplineComputer spline
		{
			[Token(Token = "0x60016CC")]
			[Address(RVA = "0x13A6D50", Offset = "0x13A6D50", VA = "0x13A6D50")]
			get
			{
				return null;
			}
			[Token(Token = "0x60016CD")]
			[Address(RVA = "0x13A6D58", Offset = "0x13A6D58", VA = "0x13A6D58")]
			set
			{
			}
		}

		[Token(Token = "0x60016CE")]
		[Address(RVA = "0x13A6DFC", Offset = "0x13A6DFC", VA = "0x13A6DFC")]
		private void Reset()
		{
		}

		[Token(Token = "0x60016CF")]
		[Address(RVA = "0x13A6E54", Offset = "0x13A6E54", VA = "0x13A6E54")]
		private void Update()
		{
		}

		[Token(Token = "0x60016D0")]
		[Address(RVA = "0x13A6F6C", Offset = "0x13A6F6C", VA = "0x13A6F6C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60016D1")]
		[Address(RVA = "0x13A6F80", Offset = "0x13A6F80", VA = "0x13A6F80")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60016D2")]
		[Address(RVA = "0x13A6E64", Offset = "0x13A6E64", VA = "0x13A6E64")]
		private void RunUpdate()
		{
		}

		[Token(Token = "0x60016D3")]
		[Address(RVA = "0x13A7080", Offset = "0x13A7080", VA = "0x13A7080")]
		public void SetCycle(float value)
		{
		}

		[Token(Token = "0x60016D4")]
		[Address(RVA = "0x13A70A8", Offset = "0x13A70A8", VA = "0x13A70A8")]
		public void SetWeight(int index, float weight)
		{
		}

		[Token(Token = "0x60016D5")]
		[Address(RVA = "0x13A7B9C", Offset = "0x13A7B9C", VA = "0x13A7B9C")]
		public void SetWeight(string name, float weight)
		{
		}

		[Token(Token = "0x60016D6")]
		[Address(RVA = "0x13A6F94", Offset = "0x13A6F94", VA = "0x13A6F94")]
		public void SetWeight(float percent, bool loop = false)
		{
		}

		[Token(Token = "0x60016D7")]
		[Address(RVA = "0x13A7D10", Offset = "0x13A7D10", VA = "0x13A7D10")]
		public void CaptureSnapshot(string name)
		{
		}

		[Token(Token = "0x60016D8")]
		[Address(RVA = "0x13A7D38", Offset = "0x13A7D38", VA = "0x13A7D38")]
		public void CaptureSnapshot(int index)
		{
		}

		[Token(Token = "0x60016D9")]
		[Address(RVA = "0x13A7EE8", Offset = "0x13A7EE8", VA = "0x13A7EE8")]
		public void Clear()
		{
		}

		[Token(Token = "0x60016DA")]
		[Address(RVA = "0x13A7F44", Offset = "0x13A7F44", VA = "0x13A7F44")]
		public SplinePoint[] GetSnapshot(int index)
		{
			return null;
		}

		[Token(Token = "0x60016DB")]
		[Address(RVA = "0x13A7F88", Offset = "0x13A7F88", VA = "0x13A7F88")]
		public SplinePoint[] GetSnapshot(string name)
		{
			return null;
		}

		[Token(Token = "0x60016DC")]
		[Address(RVA = "0x13A7FDC", Offset = "0x13A7FDC", VA = "0x13A7FDC")]
		public float GetWeight(int index)
		{
			return default(float);
		}

		[Token(Token = "0x60016DD")]
		[Address(RVA = "0x13A8020", Offset = "0x13A8020", VA = "0x13A8020")]
		public float GetWeight(string name)
		{
			return default(float);
		}

		[Token(Token = "0x60016DE")]
		[Address(RVA = "0x13A8074", Offset = "0x13A8074", VA = "0x13A8074")]
		public void AddChannel(string name)
		{
		}

		[Token(Token = "0x60016DF")]
		[Address(RVA = "0x13A8350", Offset = "0x13A8350", VA = "0x13A8350")]
		public void RemoveChannel(string name)
		{
		}

		[Token(Token = "0x60016E0")]
		[Address(RVA = "0x13A8378", Offset = "0x13A8378", VA = "0x13A8378")]
		public void RemoveChannel(int index)
		{
		}

		[Token(Token = "0x60016E1")]
		[Address(RVA = "0x13A7C0C", Offset = "0x13A7C0C", VA = "0x13A7C0C")]
		private int GetChannelIndex(string name)
		{
			return default(int);
		}

		[Token(Token = "0x60016E2")]
		[Address(RVA = "0x13A84FC", Offset = "0x13A84FC", VA = "0x13A84FC")]
		public int GetChannelCount()
		{
			return default(int);
		}

		[Token(Token = "0x60016E3")]
		[Address(RVA = "0x13A8514", Offset = "0x13A8514", VA = "0x13A8514")]
		public Channel GetChannel(int index)
		{
			return null;
		}

		[Token(Token = "0x60016E4")]
		[Address(RVA = "0x13A8550", Offset = "0x13A8550", VA = "0x13A8550")]
		public Channel GetChannel(string name)
		{
			return null;
		}

		[Token(Token = "0x60016E5")]
		[Address(RVA = "0x13A7104", Offset = "0x13A7104", VA = "0x13A7104")]
		public void UpdateMorph()
		{
		}

		[Token(Token = "0x60016E6")]
		[Address(RVA = "0x13A85D0", Offset = "0x13A85D0", VA = "0x13A85D0")]
		public SplineMorph()
		{
		}
	}
	[Token(Token = "0x2000321")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5CD6B8", Offset = "0x5CD6B8")]
	public class SplinePositioner : SplineTracer
	{
		[Token(Token = "0x20004D0")]
		public enum Mode
		{
			[Token(Token = "0x4001E95")]
			Percent,
			[Token(Token = "0x4001E96")]
			Distance
		}

		[Token(Token = "0x40015EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[SerializeField]
		[HideInInspector]
		private GameObject _targetObject;

		[Token(Token = "0x40015ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[SerializeField]
		[HideInInspector]
		private double _position;

		[Token(Token = "0x40015EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[SerializeField]
		[HideInInspector]
		private float animPosition;

		[Token(Token = "0x40015EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		[SerializeField]
		[HideInInspector]
		private Mode _mode;

		[Token(Token = "0x1700022A")]
		public GameObject targetObject
		{
			[Token(Token = "0x60016E7")]
			[Address(RVA = "0x13A9518", Offset = "0x13A9518", VA = "0x13A9518")]
			get
			{
				return null;
			}
			[Token(Token = "0x60016E8")]
			[Address(RVA = "0x13A95A4", Offset = "0x13A95A4", VA = "0x13A95A4")]
			set
			{
			}
		}

		[Token(Token = "0x1700022B")]
		public double position
		{
			[Token(Token = "0x60016E9")]
			[Address(RVA = "0x13A96DC", Offset = "0x13A96DC", VA = "0x13A96DC")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x60016EA")]
			[Address(RVA = "0x13A96E4", Offset = "0x13A96E4", VA = "0x13A96E4")]
			set
			{
			}
		}

		[Token(Token = "0x1700022C")]
		public Mode mode
		{
			[Token(Token = "0x60016EB")]
			[Address(RVA = "0x13A973C", Offset = "0x13A973C", VA = "0x13A973C")]
			get
			{
				return default(Mode);
			}
			[Token(Token = "0x60016EC")]
			[Address(RVA = "0x13A9744", Offset = "0x13A9744", VA = "0x13A9744")]
			set
			{
			}
		}

		[Token(Token = "0x60016ED")]
		[Address(RVA = "0x13A9764", Offset = "0x13A9764", VA = "0x13A9764", Slot = "9")]
		protected override void OnDidApplyAnimationProperties()
		{
		}

		[Token(Token = "0x60016EE")]
		[Address(RVA = "0x13A9838", Offset = "0x13A9838", VA = "0x13A9838", Slot = "23")]
		protected override Transform GetTransform()
		{
			return null;
		}

		[Token(Token = "0x60016EF")]
		[Address(RVA = "0x13A9858", Offset = "0x13A9858", VA = "0x13A9858", Slot = "21")]
		protected override Rigidbody GetRigidbody()
		{
			return null;
		}

		[Token(Token = "0x60016F0")]
		[Address(RVA = "0x13A98B0", Offset = "0x13A98B0", VA = "0x13A98B0", Slot = "22")]
		protected override Rigidbody2D GetRigidbody2D()
		{
			return null;
		}

		[Token(Token = "0x60016F1")]
		[Address(RVA = "0x13A9908", Offset = "0x13A9908", VA = "0x13A9908", Slot = "15")]
		protected override void PostBuild()
		{
		}

		[Token(Token = "0x60016F2")]
		[Address(RVA = "0x13A99A0", Offset = "0x13A99A0", VA = "0x13A99A0", Slot = "19")]
		public override void SetPercent(double percent, bool checkTriggers = false, bool handleJuncitons = false)
		{
		}

		[Token(Token = "0x60016F3")]
		[Address(RVA = "0x13A99D8", Offset = "0x13A99D8", VA = "0x13A99D8", Slot = "20")]
		public override void SetDistance(float distance, bool checkTriggers = false, bool handleJuncitons = false)
		{
		}

		[Token(Token = "0x60016F4")]
		[Address(RVA = "0x13A9A14", Offset = "0x13A9A14", VA = "0x13A9A14")]
		public SplinePositioner()
		{
		}
	}
	[Token(Token = "0x2000322")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5CD6F0", Offset = "0x5CD6F0")]
	public class SplineProjector : SplineTracer
	{
		[Token(Token = "0x20004D1")]
		public enum Mode
		{
			[Token(Token = "0x4001E98")]
			Accurate,
			[Token(Token = "0x4001E99")]
			Cached
		}

		[Token(Token = "0x40015F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[SerializeField]
		[HideInInspector]
		private Mode _mode;

		[Token(Token = "0x40015F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		[SerializeField]
		[HideInInspector]
		private bool _autoProject;

		[Token(Token = "0x40015F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[SerializeField]
		[HideInInspector]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D4C2C", Offset = "0x5D4C2C")]
		private int _subdivide;

		[Token(Token = "0x40015F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[SerializeField]
		[HideInInspector]
		private Transform _projectTarget;

		[Token(Token = "0x40015F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[SerializeField]
		[HideInInspector]
		private Transform applyTarget;

		[Token(Token = "0x40015F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[SerializeField]
		[HideInInspector]
		private GameObject _targetObject;

		[Token(Token = "0x40015F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[SerializeField]
		[HideInInspector]
		public Vector2 _offset;

		[Token(Token = "0x40015F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		[SerializeField]
		[HideInInspector]
		public Vector3 _rotationOffset;

		[Token(Token = "0x40015FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		[SerializeField]
		[HideInInspector]
		private Vector3 lastPosition;

		[Token(Token = "0x1700022D")]
		public Mode mode
		{
			[Token(Token = "0x60016F5")]
			[Address(RVA = "0x13AA294", Offset = "0x13AA294", VA = "0x13AA294")]
			get
			{
				return default(Mode);
			}
			[Token(Token = "0x60016F6")]
			[Address(RVA = "0x13AA29C", Offset = "0x13AA29C", VA = "0x13AA29C")]
			set
			{
			}
		}

		[Token(Token = "0x1700022E")]
		public bool autoProject
		{
			[Token(Token = "0x60016F7")]
			[Address(RVA = "0x13AA2BC", Offset = "0x13AA2BC", VA = "0x13AA2BC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60016F8")]
			[Address(RVA = "0x13AA2C4", Offset = "0x13AA2C4", VA = "0x13AA2C4")]
			set
			{
			}
		}

		[Token(Token = "0x1700022F")]
		public int subdivide
		{
			[Token(Token = "0x60016F9")]
			[Address(RVA = "0x13AA2F4", Offset = "0x13AA2F4", VA = "0x13AA2F4")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60016FA")]
			[Address(RVA = "0x13AA2FC", Offset = "0x13AA2FC", VA = "0x13AA2FC")]
			set
			{
			}
		}

		[Token(Token = "0x17000230")]
		public Transform projectTarget
		{
			[Token(Token = "0x60016FB")]
			[Address(RVA = "0x13AA324", Offset = "0x13AA324", VA = "0x13AA324")]
			get
			{
				return null;
			}
			[Token(Token = "0x60016FC")]
			[Address(RVA = "0x13AA3B0", Offset = "0x13AA3B0", VA = "0x13AA3B0")]
			set
			{
			}
		}

		[Token(Token = "0x17000231")]
		public GameObject targetObject
		{
			[Token(Token = "0x60016FD")]
			[Address(RVA = "0x13AA45C", Offset = "0x13AA45C", VA = "0x13AA45C")]
			get
			{
				return null;
			}
			[Token(Token = "0x60016FE")]
			[Address(RVA = "0x13AA548", Offset = "0x13AA548", VA = "0x13AA548")]
			set
			{
			}
		}

		[Token(Token = "0x1400001A")]
		public event SplineReachHandler onEndReached
		{
			[Token(Token = "0x60016FF")]
			[Address(RVA = "0x13AA5FC", Offset = "0x13AA5FC", VA = "0x13AA5FC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5DA2E4", Offset = "0x5DA2E4")]
			add
			{
			}
			[Token(Token = "0x6001700")]
			[Address(RVA = "0x13AA6A0", Offset = "0x13AA6A0", VA = "0x13AA6A0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5DA2F4", Offset = "0x5DA2F4")]
			remove
			{
			}
		}

		[Token(Token = "0x1400001B")]
		public event SplineReachHandler onBeginningReached
		{
			[Token(Token = "0x6001701")]
			[Address(RVA = "0x13AA744", Offset = "0x13AA744", VA = "0x13AA744")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5DA304", Offset = "0x5DA304")]
			add
			{
			}
			[Token(Token = "0x6001702")]
			[Address(RVA = "0x13AA7E8", Offset = "0x13AA7E8", VA = "0x13AA7E8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5DA314", Offset = "0x5DA314")]
			remove
			{
			}
		}

		[Token(Token = "0x6001703")]
		[Address(RVA = "0x13AA88C", Offset = "0x13AA88C", VA = "0x13AA88C", Slot = "5")]
		protected override void Reset()
		{
		}

		[Token(Token = "0x6001704")]
		[Address(RVA = "0x13AA8C0", Offset = "0x13AA8C0", VA = "0x13AA8C0", Slot = "23")]
		protected override Transform GetTransform()
		{
			return null;
		}

		[Token(Token = "0x6001705")]
		[Address(RVA = "0x13AA964", Offset = "0x13AA964", VA = "0x13AA964", Slot = "21")]
		protected override Rigidbody GetRigidbody()
		{
			return null;
		}

		[Token(Token = "0x6001706")]
		[Address(RVA = "0x13AAA18", Offset = "0x13AAA18", VA = "0x13AAA18", Slot = "22")]
		protected override Rigidbody2D GetRigidbody2D()
		{
			return null;
		}

		[Token(Token = "0x6001707")]
		[Address(RVA = "0x13AAACC", Offset = "0x13AAACC", VA = "0x13AAACC", Slot = "13")]
		protected override void LateRun()
		{
		}

		[Token(Token = "0x6001708")]
		[Address(RVA = "0x13AAE28", Offset = "0x13AAE28", VA = "0x13AAE28", Slot = "15")]
		protected override void PostBuild()
		{
		}

		[Token(Token = "0x6001709")]
		[Address(RVA = "0x13AAE74", Offset = "0x13AAE74", VA = "0x13AAE74", Slot = "16")]
		protected override void OnSplineChanged()
		{
		}

		[Token(Token = "0x600170A")]
		[Address(RVA = "0x13AAF6C", Offset = "0x13AAF6C", VA = "0x13AAF6C")]
		private void Project()
		{
		}

		[Token(Token = "0x600170B")]
		[Address(RVA = "0x13AABE0", Offset = "0x13AABE0", VA = "0x13AABE0")]
		public void CalculateProjection()
		{
		}

		[Token(Token = "0x600170C")]
		[Address(RVA = "0x13AB088", Offset = "0x13AB088", VA = "0x13AB088")]
		public SplineProjector()
		{
		}
	}
	[Token(Token = "0x2000323")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x5CD73C", Offset = "0x5CD73C")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x5CD73C", Offset = "0x5CD73C")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5CD73C", Offset = "0x5CD73C")]
	[ExecuteInEditMode]
	public class SplineRenderer : MeshGenerator
	{
		[Token(Token = "0x40015FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[HideInInspector]
		public bool autoOrient;

		[Token(Token = "0x40015FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		[HideInInspector]
		public int updateFrameInterval;

		[Token(Token = "0x40015FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private int currentFrame;

		[Token(Token = "0x40015FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		[SerializeField]
		[HideInInspector]
		private int _slices;

		[Token(Token = "0x40015FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[SerializeField]
		[HideInInspector]
		private Vector3 vertexDirection;

		[Token(Token = "0x4001600")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		private bool orthographic;

		[Token(Token = "0x4001601")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x135")]
		private bool init;

		[Token(Token = "0x17000232")]
		public int slices
		{
			[Token(Token = "0x600170D")]
			[Address(RVA = "0x13AB130", Offset = "0x13AB130", VA = "0x13AB130")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600170E")]
			[Address(RVA = "0x13AB138", Offset = "0x13AB138", VA = "0x13AB138")]
			set
			{
			}
		}

		[Token(Token = "0x600170F")]
		[Address(RVA = "0x13AB160", Offset = "0x13AB160", VA = "0x13AB160", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6001710")]
		[Address(RVA = "0x13AB1C4", Offset = "0x13AB1C4", VA = "0x13AB1C4")]
		private void Start()
		{
		}

		[Token(Token = "0x6001711")]
		[Address(RVA = "0x13AB264", Offset = "0x13AB264", VA = "0x13AB264", Slot = "13")]
		protected override void LateRun()
		{
		}

		[Token(Token = "0x6001712")]
		[Address(RVA = "0x13AB288", Offset = "0x13AB288", VA = "0x13AB288", Slot = "18")]
		protected override void BuildMesh()
		{
		}

		[Token(Token = "0x6001713")]
		[Address(RVA = "0x13AB890", Offset = "0x13AB890", VA = "0x13AB890")]
		public void RenderWithCamera(Camera cam)
		{
		}

		[Token(Token = "0x6001714")]
		[Address(RVA = "0x13AB9B8", Offset = "0x13AB9B8", VA = "0x13AB9B8")]
		private void OnWillRenderObject()
		{
		}

		[Token(Token = "0x6001715")]
		[Address(RVA = "0x13AB348", Offset = "0x13AB348", VA = "0x13AB348")]
		public void GenerateVertices(Vector3 vertexDirection, bool orthoGraphic)
		{
		}

		[Token(Token = "0x6001716")]
		[Address(RVA = "0x13ABA68", Offset = "0x13ABA68", VA = "0x13ABA68")]
		public SplineRenderer()
		{
		}
	}
	[Token(Token = "0x2000324")]
	public class SplineTracer : SplineUser
	{
		[Token(Token = "0x20004D2")]
		public class NodeConnection
		{
			[Token(Token = "0x4001E9A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Node node;

			[Token(Token = "0x4001E9B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int point;

			[Token(Token = "0x6001D6A")]
			[Address(RVA = "0x138A5C0", Offset = "0x138A5C0", VA = "0x138A5C0")]
			public NodeConnection(Node node, int point)
			{
			}
		}

		[Token(Token = "0x20004D3")]
		public enum PhysicsMode
		{
			[Token(Token = "0x4001E9D")]
			Transform,
			[Token(Token = "0x4001E9E")]
			Rigidbody,
			[Token(Token = "0x4001E9F")]
			Rigidbody2D
		}

		[Token(Token = "0x20004D4")]
		public delegate void JunctionHandler(List<NodeConnection> passed);

		[Token(Token = "0x4001602")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private SplineTrigger[] triggerInvokeQueue;

		[Token(Token = "0x4001603")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private List<NodeConnection> nodeConnectionQueue;

		[Token(Token = "0x4001604")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private int addTriggerIndex;

		[Token(Token = "0x4001605")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[HideInInspector]
		public bool applyDirectionRotation;

		[Token(Token = "0x4001606")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAD")]
		[HideInInspector]
		public bool useTriggers;

		[Token(Token = "0x4001607")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[HideInInspector]
		public int triggerGroup;

		[Token(Token = "0x4001608")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[SerializeField]
		[HideInInspector]
		protected Spline.Direction _direction;

		[Token(Token = "0x4001609")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		[HideInInspector]
		protected PhysicsMode _physicsMode;

		[Token(Token = "0x400160A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		[HideInInspector]
		protected TransformModule _motion;

		[Token(Token = "0x400160B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		[HideInInspector]
		protected Rigidbody targetRigidbody;

		[Token(Token = "0x400160C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		[HideInInspector]
		protected Rigidbody2D targetRigidbody2D;

		[Token(Token = "0x400160D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		[HideInInspector]
		protected Transform targetTransform;

		[Token(Token = "0x400160E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[SerializeField]
		[HideInInspector]
		protected SplineSample _result;

		[Token(Token = "0x400160F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[SerializeField]
		[HideInInspector]
		protected SplineSample _finalResult;

		[Token(Token = "0x4001610")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private bool setPercentOnRebuild;

		[Token(Token = "0x4001611")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private double targetPercentOnRebuild;

		[Token(Token = "0x4001614")]
		private const double MIN_DELTA = 1E-06;

		[Token(Token = "0x17000233")]
		public PhysicsMode physicsMode
		{
			[Token(Token = "0x6001717")]
			[Address(RVA = "0x13ACD70", Offset = "0x13ACD70", VA = "0x13ACD70")]
			get
			{
				return default(PhysicsMode);
			}
			[Token(Token = "0x6001718")]
			[Address(RVA = "0x13ACD78", Offset = "0x13ACD78", VA = "0x13ACD78")]
			set
			{
			}
		}

		[Token(Token = "0x17000234")]
		public TransformModule motion
		{
			[Token(Token = "0x6001719")]
			[Address(RVA = "0x13ACD80", Offset = "0x13ACD80", VA = "0x13ACD80")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000235")]
		public SplineSample result
		{
			[Token(Token = "0x600171A")]
			[Address(RVA = "0x13ACDF4", Offset = "0x13ACDF4", VA = "0x13ACDF4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000236")]
		public SplineSample modifiedResult
		{
			[Token(Token = "0x600171B")]
			[Address(RVA = "0x13ACDFC", Offset = "0x13ACDFC", VA = "0x13ACDFC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000237")]
		public Spline.Direction direction
		{
			[Token(Token = "0x600171C")]
			[Address(RVA = "0x13ACE04", Offset = "0x13ACE04", VA = "0x13ACE04")]
			get
			{
				return default(Spline.Direction);
			}
			[Token(Token = "0x600171D")]
			[Address(RVA = "0x13ACE0C", Offset = "0x13ACE0C", VA = "0x13ACE0C")]
			set
			{
			}
		}

		[Token(Token = "0x1400001C")]
		public event JunctionHandler onNode
		{
			[Token(Token = "0x600171E")]
			[Address(RVA = "0x13ACE24", Offset = "0x13ACE24", VA = "0x13ACE24")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5DA324", Offset = "0x5DA324")]
			add
			{
			}
			[Token(Token = "0x600171F")]
			[Address(RVA = "0x13ACEC8", Offset = "0x13ACEC8", VA = "0x13ACEC8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5DA334", Offset = "0x5DA334")]
			remove
			{
			}
		}

		[Token(Token = "0x1400001D")]
		public event EmptySplineHandler onMotionApplied
		{
			[Token(Token = "0x6001720")]
			[Address(RVA = "0x13ACF6C", Offset = "0x13ACF6C", VA = "0x13ACF6C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5DA344", Offset = "0x5DA344")]
			add
			{
			}
			[Token(Token = "0x6001721")]
			[Address(RVA = "0x13AD010", Offset = "0x13AD010", VA = "0x13AD010")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5DA354", Offset = "0x5DA354")]
			remove
			{
			}
		}

		[Token(Token = "0x6001722")]
		[Address(RVA = "0x13A3518", Offset = "0x13A3518", VA = "0x13A3518", Slot = "18")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6001723")]
		[Address(RVA = "0x13A4084", Offset = "0x13A4084", VA = "0x13A4084", Slot = "19")]
		public virtual void SetPercent(double percent, bool checkTriggers = false, bool handleJunctions = false)
		{
		}

		[Token(Token = "0x6001724")]
		[Address(RVA = "0x13A41B8", Offset = "0x13A41B8", VA = "0x13A41B8", Slot = "20")]
		public virtual void SetDistance(float distance, bool checkTriggers = false, bool handleJunctions = false)
		{
		}

		[Token(Token = "0x6001725")]
		[Address(RVA = "0x13A36E0", Offset = "0x13A36E0", VA = "0x13A36E0", Slot = "15")]
		protected override void PostBuild()
		{
		}

		[Token(Token = "0x6001726")]
		[Address(RVA = "0x13AD0D8", Offset = "0x13AD0D8", VA = "0x13AD0D8", Slot = "21")]
		protected virtual Rigidbody GetRigidbody()
		{
			return null;
		}

		[Token(Token = "0x6001727")]
		[Address(RVA = "0x13AD124", Offset = "0x13AD124", VA = "0x13AD124", Slot = "22")]
		protected virtual Rigidbody2D GetRigidbody2D()
		{
			return null;
		}

		[Token(Token = "0x6001728")]
		[Address(RVA = "0x13AD170", Offset = "0x13AD170", VA = "0x13AD170", Slot = "23")]
		protected virtual Transform GetTransform()
		{
			return null;
		}

		[Token(Token = "0x6001729")]
		[Address(RVA = "0x13A3774", Offset = "0x13A3774", VA = "0x13A3774")]
		protected void ApplyMotion()
		{
		}

		[Token(Token = "0x600172A")]
		[Address(RVA = "0x13A4610", Offset = "0x13A4610", VA = "0x13A4610")]
		protected void CheckNodes(double from, double to)
		{
		}

		[Token(Token = "0x600172B")]
		[Address(RVA = "0x13A4ACC", Offset = "0x13A4ACC", VA = "0x13A4ACC")]
		protected void InvokeNodes()
		{
		}

		[Token(Token = "0x600172C")]
		[Address(RVA = "0x13A44B8", Offset = "0x13A44B8", VA = "0x13A44B8")]
		protected void CheckTriggers(double from, double to)
		{
		}

		[Token(Token = "0x600172D")]
		[Address(RVA = "0x13AD194", Offset = "0x13AD194", VA = "0x13AD194")]
		private NodeConnection GetJunction(int pointIndex)
		{
			return null;
		}

		[Token(Token = "0x600172E")]
		[Address(RVA = "0x13A4A54", Offset = "0x13A4A54", VA = "0x13A4A54")]
		protected void InvokeTriggers()
		{
		}

		[Token(Token = "0x600172F")]
		[Address(RVA = "0x13A9658", Offset = "0x13A9658", VA = "0x13A9658")]
		protected void RefreshTargets()
		{
		}

		[Token(Token = "0x6001730")]
		[Address(RVA = "0x13AD2FC", Offset = "0x13AD2FC", VA = "0x13AD2FC")]
		private void AddTriggerToQueue(SplineTrigger trigger)
		{
		}

		[Token(Token = "0x6001731")]
		[Address(RVA = "0x13A4C00", Offset = "0x13A4C00", VA = "0x13A4C00")]
		public SplineTracer()
		{
		}
	}
	[Token(Token = "0x2000325")]
	[ExecuteInEditMode]
	public class SplineUser : MonoBehaviour
	{
		[Token(Token = "0x20004D5")]
		public enum UpdateMethod
		{
			[Token(Token = "0x4001EA1")]
			Update,
			[Token(Token = "0x4001EA2")]
			FixedUpdate,
			[Token(Token = "0x4001EA3")]
			LateUpdate
		}

		[Token(Token = "0x4001615")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public UpdateMethod updateMethod;

		[Token(Token = "0x4001616")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[HideInInspector]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x5D509C", Offset = "0x5D509C")]
		private SplineComputer _spline;

		[Token(Token = "0x4001617")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[HideInInspector]
		private bool _autoUpdate;

		[Token(Token = "0x4001618")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		[HideInInspector]
		protected RotationModifier _rotationModifier;

		[Token(Token = "0x4001619")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[HideInInspector]
		protected OffsetModifier _offsetModifier;

		[Token(Token = "0x400161A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[HideInInspector]
		protected ColorModifier _colorModifier;

		[Token(Token = "0x400161B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		[HideInInspector]
		protected SizeModifier _sizeModifier;

		[Token(Token = "0x400161C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		[HideInInspector]
		private SampleCollection sampleCollection;

		[Token(Token = "0x400161D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		[HideInInspector]
		private SplineSample clipFromSample;

		[Token(Token = "0x400161E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		[HideInInspector]
		private SplineSample clipToSample;

		[Token(Token = "0x400161F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		[HideInInspector]
		private float animClipFrom;

		[Token(Token = "0x4001620")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[SerializeField]
		[HideInInspector]
		private float animClipTo;

		[Token(Token = "0x4001621")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool rebuild;

		[Token(Token = "0x4001622")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		private bool getSamples;

		[Token(Token = "0x4001623")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x72")]
		private bool postBuild;

		[Token(Token = "0x4001624")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected Transform trs;

		[Token(Token = "0x4001625")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		[HideInInspector]
		private int _sampleCount;

		[Token(Token = "0x4001626")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[SerializeField]
		[HideInInspector]
		private int startSampleIndex;

		[Token(Token = "0x4001627")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected SplineSample evalResult;

		[Token(Token = "0x4001628")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[HideInInspector]
		public bool multithreaded;

		[Token(Token = "0x4001629")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
		[HideInInspector]
		public bool buildOnAwake;

		[Token(Token = "0x400162A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x92")]
		[HideInInspector]
		public bool buildOnEnable;

		[Token(Token = "0x17000238")]
		public SplineComputer spline
		{
			[Token(Token = "0x6001732")]
			[Address(RVA = "0x13AD944", Offset = "0x13AD944", VA = "0x13AD944")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001733")]
			[Address(RVA = "0x13AD94C", Offset = "0x13AD94C", VA = "0x13AD94C")]
			set
			{
			}
		}

		[Token(Token = "0x17000239")]
		public double clipFrom
		{
			[Token(Token = "0x6001734")]
			[Address(RVA = "0x13A42D0", Offset = "0x13A42D0", VA = "0x13A42D0")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6001735")]
			[Address(RVA = "0x13ADAA8", Offset = "0x13ADAA8", VA = "0x13ADAA8")]
			set
			{
			}
		}

		[Token(Token = "0x1700023A")]
		public double clipTo
		{
			[Token(Token = "0x6001736")]
			[Address(RVA = "0x13A42EC", Offset = "0x13A42EC", VA = "0x13A42EC")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6001737")]
			[Address(RVA = "0x13ADB48", Offset = "0x13ADB48", VA = "0x13ADB48")]
			set
			{
			}
		}

		[Token(Token = "0x1700023B")]
		public bool autoUpdate
		{
			[Token(Token = "0x6001738")]
			[Address(RVA = "0x13ADBE8", Offset = "0x13ADBE8", VA = "0x13ADBE8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001739")]
			[Address(RVA = "0x13ADBF0", Offset = "0x13ADBF0", VA = "0x13ADBF0")]
			set
			{
			}
		}

		[Token(Token = "0x1700023C")]
		public bool loopSamples
		{
			[Token(Token = "0x600173A")]
			[Address(RVA = "0x13ADC20", Offset = "0x13ADC20", VA = "0x13ADC20")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600173B")]
			[Address(RVA = "0x13ADC3C", Offset = "0x13ADC3C", VA = "0x13ADC3C")]
			set
			{
			}
		}

		[Token(Token = "0x1700023D")]
		public double span
		{
			[Token(Token = "0x600173C")]
			[Address(RVA = "0x13ADCB0", Offset = "0x13ADCB0", VA = "0x13ADCB0")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x1700023E")]
		public bool samplesAreLooped
		{
			[Token(Token = "0x600173D")]
			[Address(RVA = "0x13A42B4", Offset = "0x13A42B4", VA = "0x13A42B4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700023F")]
		public RotationModifier rotationModifier
		{
			[Token(Token = "0x600173E")]
			[Address(RVA = "0x13ADD08", Offset = "0x13ADD08", VA = "0x13ADD08")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000240")]
		public OffsetModifier offsetModifier
		{
			[Token(Token = "0x600173F")]
			[Address(RVA = "0x13ADD10", Offset = "0x13ADD10", VA = "0x13ADD10")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000241")]
		public ColorModifier colorModifier
		{
			[Token(Token = "0x6001740")]
			[Address(RVA = "0x13ADD18", Offset = "0x13ADD18", VA = "0x13ADD18")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000242")]
		public SizeModifier sizeModifier
		{
			[Token(Token = "0x6001741")]
			[Address(RVA = "0x13ADD20", Offset = "0x13ADD20", VA = "0x13ADD20")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000243")]
		public int sampleCount
		{
			[Token(Token = "0x6001742")]
			[Address(RVA = "0x13ADD28", Offset = "0x13ADD28", VA = "0x13ADD28")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001743")]
		[Address(RVA = "0x13ADD30", Offset = "0x13ADD30", VA = "0x13ADD30", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6001744")]
		[Address(RVA = "0x13AA8BC", Offset = "0x13AA8BC", VA = "0x13AA8BC", Slot = "5")]
		protected virtual void Reset()
		{
		}

		[Token(Token = "0x6001745")]
		[Address(RVA = "0x13ADE40", Offset = "0x13ADE40", VA = "0x13ADE40", Slot = "6")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6001746")]
		[Address(RVA = "0x13ADEEC", Offset = "0x13ADEEC", VA = "0x13ADEEC", Slot = "7")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6001747")]
		[Address(RVA = "0x13ADF80", Offset = "0x13ADF80", VA = "0x13ADF80", Slot = "8")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6001748")]
		[Address(RVA = "0x13A97A0", Offset = "0x13A97A0", VA = "0x13A97A0", Slot = "9")]
		protected virtual void OnDidApplyAnimationProperties()
		{
		}

		[Token(Token = "0x6001749")]
		[Address(RVA = "0x13A4308", Offset = "0x13A4308", VA = "0x13A4308")]
		public SplineSample GetSampleRaw(int index)
		{
			return null;
		}

		[Token(Token = "0x600174A")]
		[Address(RVA = "0x13ABA38", Offset = "0x13ABA38", VA = "0x13ABA38")]
		public void GetSample(int index, SplineSample target)
		{
		}

		[Token(Token = "0x600174B")]
		[Address(RVA = "0x13AE08C", Offset = "0x13AE08C", VA = "0x13AE08C", Slot = "10")]
		public virtual void Rebuild()
		{
		}

		[Token(Token = "0x600174C")]
		[Address(RVA = "0x13AE0A0", Offset = "0x13AE0A0", VA = "0x13AE0A0", Slot = "11")]
		public virtual void RebuildImmediate()
		{
		}

		[Token(Token = "0x600174D")]
		[Address(RVA = "0x13AE1C0", Offset = "0x13AE1C0", VA = "0x13AE1C0")]
		private void Update()
		{
		}

		[Token(Token = "0x600174E")]
		[Address(RVA = "0x13AE35C", Offset = "0x13AE35C", VA = "0x13AE35C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600174F")]
		[Address(RVA = "0x13AE3AC", Offset = "0x13AE3AC", VA = "0x13AE3AC")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001750")]
		[Address(RVA = "0x13AE20C", Offset = "0x13AE20C", VA = "0x13AE20C")]
		private void RunUpdate()
		{
		}

		[Token(Token = "0x6001751")]
		[Address(RVA = "0x13AE3FC", Offset = "0x13AE3FC", VA = "0x13AE3FC")]
		private void BuildThreaded()
		{
		}

		[Token(Token = "0x6001752")]
		[Address(RVA = "0x13AE430", Offset = "0x13AE430", VA = "0x13AE430")]
		private void ResampleAndBuildThreaded()
		{
		}

		[Token(Token = "0x6001753")]
		[Address(RVA = "0x13AE46C", Offset = "0x13AE46C", VA = "0x13AE46C", Slot = "12")]
		protected virtual void Run()
		{
		}

		[Token(Token = "0x6001754")]
		[Address(RVA = "0x13A352C", Offset = "0x13A352C", VA = "0x13A352C", Slot = "13")]
		protected virtual void LateRun()
		{
		}

		[Token(Token = "0x6001755")]
		[Address(RVA = "0x13AE470", Offset = "0x13AE470", VA = "0x13AE470", Slot = "14")]
		protected virtual void Build()
		{
		}

		[Token(Token = "0x6001756")]
		[Address(RVA = "0x13AE474", Offset = "0x13AE474", VA = "0x13AE474", Slot = "15")]
		protected virtual void PostBuild()
		{
		}

		[Token(Token = "0x6001757")]
		[Address(RVA = "0x13AE478", Offset = "0x13AE478", VA = "0x13AE478", Slot = "16")]
		protected virtual void OnSplineChanged()
		{
		}

		[Token(Token = "0x6001758")]
		[Address(RVA = "0x13A6B54", Offset = "0x13A6B54", VA = "0x13A6B54")]
		public void ModifySample(SplineSample source, SplineSample destination)
		{
		}

		[Token(Token = "0x6001759")]
		[Address(RVA = "0x13A692C", Offset = "0x13A692C", VA = "0x13A692C")]
		public void ModifySample(SplineSample sample)
		{
		}

		[Token(Token = "0x600175A")]
		[Address(RVA = "0x13AE47C", Offset = "0x13AE47C", VA = "0x13AE47C")]
		public void SetClipRange(double from, double to)
		{
		}

		[Token(Token = "0x600175B")]
		[Address(RVA = "0x13ADF84", Offset = "0x13ADF84", VA = "0x13ADF84")]
		private void GetSamples()
		{
		}

		[Token(Token = "0x600175C")]
		[Address(RVA = "0x13A427C", Offset = "0x13A427C", VA = "0x13A427C")]
		public double ClipPercent(double percent)
		{
			return default(double);
		}

		[Token(Token = "0x600175D")]
		[Address(RVA = "0x13AE518", Offset = "0x13AE518", VA = "0x13AE518")]
		public void ClipPercent(ref double percent)
		{
		}

		[Token(Token = "0x600175E")]
		[Address(RVA = "0x13AE534", Offset = "0x13AE534", VA = "0x13AE534")]
		public double UnclipPercent(double percent)
		{
			return default(double);
		}

		[Token(Token = "0x600175F")]
		[Address(RVA = "0x13AD178", Offset = "0x13AD178", VA = "0x13AD178")]
		public void UnclipPercent(ref double percent)
		{
		}

		[Token(Token = "0x6001760")]
		[Address(RVA = "0x13AE56C", Offset = "0x13AE56C", VA = "0x13AE56C")]
		private int GetSampleIndex(double percent)
		{
			return default(int);
		}

		[Token(Token = "0x6001761")]
		[Address(RVA = "0x13AE5AC", Offset = "0x13AE5AC", VA = "0x13AE5AC")]
		public Vector3 EvaluatePosition(double percent)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001762")]
		[Address(RVA = "0x13A3724", Offset = "0x13A3724", VA = "0x13A3724")]
		public void Evaluate(double percent, SplineSample result)
		{
		}

		[Token(Token = "0x6001763")]
		[Address(RVA = "0x13AE5C8", Offset = "0x13AE5C8", VA = "0x13AE5C8")]
		public SplineSample Evaluate(double percent)
		{
			return null;
		}

		[Token(Token = "0x6001764")]
		[Address(RVA = "0x13AE654", Offset = "0x13AE654", VA = "0x13AE654")]
		public void Evaluate(ref SplineSample[] results, double from = 0.0, double to = 1.0)
		{
		}

		[Token(Token = "0x6001765")]
		[Address(RVA = "0x13AE6E8", Offset = "0x13AE6E8", VA = "0x13AE6E8")]
		public void EvaluatePositions(ref Vector3[] positions, double from = 0.0, double to = 1.0)
		{
		}

		[Token(Token = "0x6001766")]
		[Address(RVA = "0x13A4B5C", Offset = "0x13A4B5C", VA = "0x13A4B5C")]
		public double Travel(double start, float distance, Spline.Direction direction, out float moved)
		{
			return default(double);
		}

		[Token(Token = "0x6001767")]
		[Address(RVA = "0x13AD0B4", Offset = "0x13AD0B4", VA = "0x13AD0B4")]
		public double Travel(double start, float distance, Spline.Direction direction = Spline.Direction.Forward)
		{
			return default(double);
		}

		[Token(Token = "0x6001768")]
		[Address(RVA = "0x13AE704", Offset = "0x13AE704", VA = "0x13AE704", Slot = "17")]
		public virtual void Project(Vector3 position, SplineSample result, double from = 0.0, double to = 1.0)
		{
		}

		[Token(Token = "0x6001769")]
		[Address(RVA = "0x13A5BDC", Offset = "0x13A5BDC", VA = "0x13A5BDC")]
		public float CalculateLength(double from = 0.0, double to = 1.0)
		{
			return default(float);
		}

		[Token(Token = "0x600176A")]
		[Address(RVA = "0x13AD50C", Offset = "0x13AD50C", VA = "0x13AD50C")]
		public SplineUser()
		{
		}
	}
	[Token(Token = "0x2000326")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x5CD814", Offset = "0x5CD814")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x5CD814", Offset = "0x5CD814")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5CD814", Offset = "0x5CD814")]
	public class SurfaceGenerator : MeshGenerator
	{
		[Token(Token = "0x400162B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[SerializeField]
		[HideInInspector]
		private float _expand;

		[Token(Token = "0x400162C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		[SerializeField]
		[HideInInspector]
		private float _extrude;

		[Token(Token = "0x400162D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[SerializeField]
		[HideInInspector]
		private Vector2 _sideUvScale;

		[Token(Token = "0x400162E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[SerializeField]
		[HideInInspector]
		private Vector2 _sideUvOffset;

		[Token(Token = "0x400162F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[SerializeField]
		[HideInInspector]
		private SplineComputer _extrudeSpline;

		[Token(Token = "0x4001630")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[SerializeField]
		[HideInInspector]
		private SplineSample[] extrudeResults;

		[Token(Token = "0x4001631")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		[SerializeField]
		[HideInInspector]
		private Vector3[] identityVertices;

		[Token(Token = "0x4001632")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		[SerializeField]
		[HideInInspector]
		private Vector3[] identityNormals;

		[Token(Token = "0x4001633")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		[SerializeField]
		[HideInInspector]
		private Vector2[] projectedVerts;

		[Token(Token = "0x4001634")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		[SerializeField]
		[HideInInspector]
		private int[] surfaceTris;

		[Token(Token = "0x4001635")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		[SerializeField]
		[HideInInspector]
		private int[] wallTris;

		[Token(Token = "0x4001636")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		[SerializeField]
		[HideInInspector]
		private double _extrudeFrom;

		[Token(Token = "0x4001637")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		[SerializeField]
		[HideInInspector]
		private double _extrudeTo;

		[Token(Token = "0x4001638")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		[SerializeField]
		[HideInInspector]
		private bool _uniformUvs;

		[Token(Token = "0x17000244")]
		public float expand
		{
			[Token(Token = "0x600176B")]
			[Address(RVA = "0x13B1968", Offset = "0x13B1968", VA = "0x13B1968")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600176C")]
			[Address(RVA = "0x13B1970", Offset = "0x13B1970", VA = "0x13B1970")]
			set
			{
			}
		}

		[Token(Token = "0x17000245")]
		public float extrude
		{
			[Token(Token = "0x600176D")]
			[Address(RVA = "0x13B1990", Offset = "0x13B1990", VA = "0x13B1990")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600176E")]
			[Address(RVA = "0x13B1998", Offset = "0x13B1998", VA = "0x13B1998")]
			set
			{
			}
		}

		[Token(Token = "0x17000246")]
		public double extrudeClipFrom
		{
			[Token(Token = "0x600176F")]
			[Address(RVA = "0x13B19B8", Offset = "0x13B19B8", VA = "0x13B19B8")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6001770")]
			[Address(RVA = "0x13B19C0", Offset = "0x13B19C0", VA = "0x13B19C0")]
			set
			{
			}
		}

		[Token(Token = "0x17000247")]
		public double extrudeClipTo
		{
			[Token(Token = "0x6001771")]
			[Address(RVA = "0x13B19E0", Offset = "0x13B19E0", VA = "0x13B19E0")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6001772")]
			[Address(RVA = "0x13B19E8", Offset = "0x13B19E8", VA = "0x13B19E8")]
			set
			{
			}
		}

		[Token(Token = "0x17000248")]
		public Vector2 sideUvScale
		{
			[Token(Token = "0x6001773")]
			[Address(RVA = "0x13B1A08", Offset = "0x13B1A08", VA = "0x13B1A08")]
			get
			{
				return default(Vector2);
			}
			[Token(Token = "0x6001774")]
			[Address(RVA = "0x13B1A14", Offset = "0x13B1A14", VA = "0x13B1A14")]
			set
			{
			}
		}

		[Token(Token = "0x17000249")]
		public Vector2 sideUvOffset
		{
			[Token(Token = "0x6001775")]
			[Address(RVA = "0x13B1A58", Offset = "0x13B1A58", VA = "0x13B1A58")]
			get
			{
				return default(Vector2);
			}
			[Token(Token = "0x6001776")]
			[Address(RVA = "0x13B1A64", Offset = "0x13B1A64", VA = "0x13B1A64")]
			set
			{
			}
		}

		[Token(Token = "0x1700024A")]
		public SplineComputer extrudeSpline
		{
			[Token(Token = "0x6001777")]
			[Address(RVA = "0x13B1AA8", Offset = "0x13B1AA8", VA = "0x13B1AA8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001778")]
			[Address(RVA = "0x13B1AB0", Offset = "0x13B1AB0", VA = "0x13B1AB0")]
			set
			{
			}
		}

		[Token(Token = "0x1700024B")]
		public bool uniformUvs
		{
			[Token(Token = "0x6001779")]
			[Address(RVA = "0x13B1BF4", Offset = "0x13B1BF4", VA = "0x13B1BF4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600177A")]
			[Address(RVA = "0x13B1BFC", Offset = "0x13B1BFC", VA = "0x13B1BFC")]
			set
			{
			}
		}

		[Token(Token = "0x600177B")]
		[Address(RVA = "0x13B1C28", Offset = "0x13B1C28", VA = "0x13B1C28", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x600177C")]
		[Address(RVA = "0x13B1C8C", Offset = "0x13B1C8C", VA = "0x13B1C8C", Slot = "18")]
		protected override void BuildMesh()
		{
		}

		[Token(Token = "0x600177D")]
		[Address(RVA = "0x13B1CDC", Offset = "0x13B1CDC", VA = "0x13B1CDC")]
		public void Generate()
		{
		}

		[Token(Token = "0x600177E")]
		[Address(RVA = "0x13B35C0", Offset = "0x13B35C0", VA = "0x13B35C0")]
		private void GenerateSurfaceTris(bool flip)
		{
		}

		[Token(Token = "0x600177F")]
		[Address(RVA = "0x13B38CC", Offset = "0x13B38CC", VA = "0x13B38CC")]
		private int WriteTris(ref int[] tris, ref int[] target, int vertexOffset, int trisOffset, bool flip)
		{
			return default(int);
		}

		[Token(Token = "0x6001780")]
		[Address(RVA = "0x13B34F4", Offset = "0x13B34F4", VA = "0x13B34F4")]
		private bool IsClockwise(Vector2[] points2D)
		{
			return default(bool);
		}

		[Token(Token = "0x6001781")]
		[Address(RVA = "0x13B3674", Offset = "0x13B3674", VA = "0x13B3674")]
		private void GetIdentityVerts(Vector3 center, Vector3 normal, bool clockwise)
		{
		}

		[Token(Token = "0x6001782")]
		[Address(RVA = "0x13B30AC", Offset = "0x13B30AC", VA = "0x13B30AC")]
		private void GetProjectedVertices(int count, out Vector3 center, out Vector3 normal)
		{
		}

		[Token(Token = "0x6001783")]
		[Address(RVA = "0x13B3AA0", Offset = "0x13B3AA0", VA = "0x13B3AA0")]
		public SurfaceGenerator()
		{
		}
	}
	[Token(Token = "0x2000327")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x5CD8CC", Offset = "0x5CD8CC")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x5CD8CC", Offset = "0x5CD8CC")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5CD8CC", Offset = "0x5CD8CC")]
	public class TubeGenerator : MeshGenerator
	{
		[Token(Token = "0x20004D6")]
		public enum CapMethod
		{
			[Token(Token = "0x4001EA5")]
			None,
			[Token(Token = "0x4001EA6")]
			Flat,
			[Token(Token = "0x4001EA7")]
			Round
		}

		[Token(Token = "0x4001639")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[SerializeField]
		[HideInInspector]
		private int _sides;

		[Token(Token = "0x400163A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		[SerializeField]
		[HideInInspector]
		private int _roundCapLatitude;

		[Token(Token = "0x400163B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[SerializeField]
		[HideInInspector]
		private CapMethod _capMode;

		[Token(Token = "0x400163C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		[SerializeField]
		[HideInInspector]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D5780", Offset = "0x5D5780")]
		private float _revolve;

		[Token(Token = "0x400163D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[SerializeField]
		[HideInInspector]
		private float _capUVScale;

		[Token(Token = "0x400163E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		private int bodyVertexCount;

		[Token(Token = "0x400163F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private int bodyTrisCount;

		[Token(Token = "0x4001640")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		private int capVertexCount;

		[Token(Token = "0x4001641")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private int capTrisCount;

		[Token(Token = "0x1700024C")]
		public int sides
		{
			[Token(Token = "0x6001784")]
			[Address(RVA = "0xBCC984", Offset = "0xBCC984", VA = "0xBCC984")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001785")]
			[Address(RVA = "0xBCC98C", Offset = "0xBCC98C", VA = "0xBCC98C")]
			set
			{
			}
		}

		[Token(Token = "0x1700024D")]
		public CapMethod capMode
		{
			[Token(Token = "0x6001786")]
			[Address(RVA = "0xBCC9B8", Offset = "0xBCC9B8", VA = "0xBCC9B8")]
			get
			{
				return default(CapMethod);
			}
			[Token(Token = "0x6001787")]
			[Address(RVA = "0xBCC9C0", Offset = "0xBCC9C0", VA = "0xBCC9C0")]
			set
			{
			}
		}

		[Token(Token = "0x1700024E")]
		public int roundCapLatitude
		{
			[Token(Token = "0x6001788")]
			[Address(RVA = "0xBCC9E0", Offset = "0xBCC9E0", VA = "0xBCC9E0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001789")]
			[Address(RVA = "0xBCC9E8", Offset = "0xBCC9E8", VA = "0xBCC9E8")]
			set
			{
			}
		}

		[Token(Token = "0x1700024F")]
		public float revolve
		{
			[Token(Token = "0x600178A")]
			[Address(RVA = "0xBCCA1C", Offset = "0xBCCA1C", VA = "0xBCCA1C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600178B")]
			[Address(RVA = "0xBCCA24", Offset = "0xBCCA24", VA = "0xBCCA24")]
			set
			{
			}
		}

		[Token(Token = "0x17000250")]
		public float capUVScale
		{
			[Token(Token = "0x600178C")]
			[Address(RVA = "0xBCCA44", Offset = "0xBCCA44", VA = "0xBCCA44")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600178D")]
			[Address(RVA = "0xBCCA4C", Offset = "0xBCCA4C", VA = "0xBCCA4C")]
			set
			{
			}
		}

		[Token(Token = "0x17000251")]
		private bool useCap
		{
			[Token(Token = "0x600178E")]
			[Address(RVA = "0xBCCA6C", Offset = "0xBCCA6C", VA = "0xBCCA6C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600178F")]
		[Address(RVA = "0xBCCB38", Offset = "0xBCCB38", VA = "0xBCCB38", Slot = "5")]
		protected override void Reset()
		{
		}

		[Token(Token = "0x6001790")]
		[Address(RVA = "0xBCCB40", Offset = "0xBCCB40", VA = "0xBCCB40", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6001791")]
		[Address(RVA = "0xBCCBA4", Offset = "0xBCCBA4", VA = "0xBCCBA4", Slot = "18")]
		protected override void BuildMesh()
		{
		}

		[Token(Token = "0x6001792")]
		[Address(RVA = "0xBCCCD8", Offset = "0xBCCCD8", VA = "0xBCCCD8")]
		private void Generate()
		{
		}

		[Token(Token = "0x6001793")]
		[Address(RVA = "0xBCD1BC", Offset = "0xBCD1BC", VA = "0xBCD1BC")]
		private void GenerateFlatCaps()
		{
		}

		[Token(Token = "0x6001794")]
		[Address(RVA = "0xBCD7F4", Offset = "0xBCD7F4", VA = "0xBCD7F4")]
		private void GenerateRoundCaps()
		{
		}

		[Token(Token = "0x6001795")]
		[Address(RVA = "0xBCE4EC", Offset = "0xBCE4EC", VA = "0xBCE4EC")]
		public TubeGenerator()
		{
		}
	}
	[Token(Token = "0x2000328")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x5CD984", Offset = "0x5CD984")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x5CD984", Offset = "0x5CD984")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x5CD984", Offset = "0x5CD984")]
	public class WaveformGenerator : MeshGenerator
	{
		[Token(Token = "0x20004D7")]
		public enum Axis
		{
			[Token(Token = "0x4001EA9")]
			X,
			[Token(Token = "0x4001EAA")]
			Y,
			[Token(Token = "0x4001EAB")]
			Z
		}

		[Token(Token = "0x20004D8")]
		public enum Space
		{
			[Token(Token = "0x4001EAD")]
			World,
			[Token(Token = "0x4001EAE")]
			Local
		}

		[Token(Token = "0x20004D9")]
		public enum UVWrapMode
		{
			[Token(Token = "0x4001EB0")]
			Clamp,
			[Token(Token = "0x4001EB1")]
			UniformX,
			[Token(Token = "0x4001EB2")]
			UniformY,
			[Token(Token = "0x4001EB3")]
			Uniform
		}

		[Token(Token = "0x4001642")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[SerializeField]
		[HideInInspector]
		private Axis _axis;

		[Token(Token = "0x4001643")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		[SerializeField]
		[HideInInspector]
		private bool _symmetry;

		[Token(Token = "0x4001644")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[SerializeField]
		[HideInInspector]
		private UVWrapMode _uvWrapMode;

		[Token(Token = "0x4001645")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		[SerializeField]
		[HideInInspector]
		private int _slices;

		[Token(Token = "0x17000252")]
		public Axis axis
		{
			[Token(Token = "0x6001796")]
			[Address(RVA = "0xD1219C", Offset = "0xD1219C", VA = "0xD1219C")]
			get
			{
				return default(Axis);
			}
			[Token(Token = "0x6001797")]
			[Address(RVA = "0xD121A4", Offset = "0xD121A4", VA = "0xD121A4")]
			set
			{
			}
		}

		[Token(Token = "0x17000253")]
		public bool symmetry
		{
			[Token(Token = "0x6001798")]
			[Address(RVA = "0xD121C4", Offset = "0xD121C4", VA = "0xD121C4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001799")]
			[Address(RVA = "0xD121CC", Offset = "0xD121CC", VA = "0xD121CC")]
			set
			{
			}
		}

		[Token(Token = "0x17000254")]
		public UVWrapMode uvWrapMode
		{
			[Token(Token = "0x600179A")]
			[Address(RVA = "0xD121F8", Offset = "0xD121F8", VA = "0xD121F8")]
			get
			{
				return default(UVWrapMode);
			}
			[Token(Token = "0x600179B")]
			[Address(RVA = "0xD12200", Offset = "0xD12200", VA = "0xD12200")]
			set
			{
			}
		}

		[Token(Token = "0x17000255")]
		public int slices
		{
			[Token(Token = "0x600179C")]
			[Address(RVA = "0xD12220", Offset = "0xD12220", VA = "0xD12220")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600179D")]
			[Address(RVA = "0xD12228", Offset = "0xD12228", VA = "0xD12228")]
			set
			{
			}
		}

		[Token(Token = "0x600179E")]
		[Address(RVA = "0xD12250", Offset = "0xD12250", VA = "0xD12250", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x600179F")]
		[Address(RVA = "0xD122B4", Offset = "0xD122B4", VA = "0xD122B4", Slot = "18")]
		protected override void BuildMesh()
		{
		}

		[Token(Token = "0x60017A0")]
		[Address(RVA = "0xD12A1C", Offset = "0xD12A1C", VA = "0xD12A1C", Slot = "14")]
		protected override void Build()
		{
		}

		[Token(Token = "0x60017A1")]
		[Address(RVA = "0xD12A24", Offset = "0xD12A24", VA = "0xD12A24", Slot = "13")]
		protected override void LateRun()
		{
		}

		[Token(Token = "0x60017A2")]
		[Address(RVA = "0xD122DC", Offset = "0xD122DC", VA = "0xD122DC")]
		private void Generate()
		{
		}

		[Token(Token = "0x60017A3")]
		[Address(RVA = "0xD12A2C", Offset = "0xD12A2C", VA = "0xD12A2C")]
		public WaveformGenerator()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000329")]
	public class ObjectSequence<T>
	{
		[Token(Token = "0x20004DA")]
		public enum Iteration
		{
			[Token(Token = "0x4001EB5")]
			Ordered,
			[Token(Token = "0x4001EB6")]
			Random
		}

		[Token(Token = "0x4001646")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T startObject;

		[Token(Token = "0x4001647")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T endObject;

		[Token(Token = "0x4001648")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T[] objects;

		[Token(Token = "0x4001649")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Iteration iteration;

		[Token(Token = "0x400164A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		[HideInInspector]
		private int _randomSeed;

		[Token(Token = "0x400164B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		[HideInInspector]
		private int index;

		[Token(Token = "0x400164C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		[HideInInspector]
		private System.Random randomizer;

		[Token(Token = "0x17000256")]
		public int randomSeed
		{
			[Token(Token = "0x60017A4")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60017A5")]
			set
			{
			}
		}

		[Token(Token = "0x60017A6")]
		public ObjectSequence()
		{
		}

		[Token(Token = "0x60017A7")]
		public T GetFirst()
		{
			return (T)null;
		}

		[Token(Token = "0x60017A8")]
		public T GetLast()
		{
			return (T)null;
		}

		[Token(Token = "0x60017A9")]
		public T Next()
		{
			return (T)null;
		}
	}
	[Serializable]
	[Token(Token = "0x200032A")]
	public class SampleCollection
	{
		[Token(Token = "0x400164D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[HideInInspector]
		public SplineSample[] samples;

		[Token(Token = "0x400164E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int[] optimizedIndices;

		[Token(Token = "0x400164F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SplineComputer.SampleMode sampleMode;

		[Token(Token = "0x4001650")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public double clipFrom;

		[Token(Token = "0x4001651")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public double clipTo;

		[Token(Token = "0x4001652")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool loopSamples;

		[Token(Token = "0x17000257")]
		public int Count
		{
			[Token(Token = "0x60017AA")]
			[Address(RVA = "0xCD9DAC", Offset = "0xCD9DAC", VA = "0xCD9DAC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000258")]
		private bool hasSamples
		{
			[Token(Token = "0x60017AB")]
			[Address(RVA = "0xCD9DC8", Offset = "0xCD9DC8", VA = "0xCD9DC8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000259")]
		public bool samplesAreLooped
		{
			[Token(Token = "0x60017AC")]
			[Address(RVA = "0xCD9DEC", Offset = "0xCD9DEC", VA = "0xCD9DEC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700025A")]
		public double span
		{
			[Token(Token = "0x60017AD")]
			[Address(RVA = "0xCD9E0C", Offset = "0xCD9E0C", VA = "0xCD9E0C")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x60017AE")]
		[Address(RVA = "0xCD9E3C", Offset = "0xCD9E3C", VA = "0xCD9E3C")]
		public SampleCollection()
		{
		}

		[Token(Token = "0x60017AF")]
		[Address(RVA = "0xCD9EDC", Offset = "0xCD9EDC", VA = "0xCD9EDC")]
		public SampleCollection(SampleCollection input)
		{
		}

		[Token(Token = "0x60017B0")]
		[Address(RVA = "0xCD9FD4", Offset = "0xCD9FD4", VA = "0xCD9FD4")]
		public int GetClippedSampleCount(out int startIndex, out int endIndex)
		{
			return default(int);
		}

		[Token(Token = "0x60017B1")]
		[Address(RVA = "0xCDA2A4", Offset = "0xCDA2A4", VA = "0xCDA2A4")]
		public double ClipPercent(double percent)
		{
			return default(double);
		}

		[Token(Token = "0x60017B2")]
		[Address(RVA = "0xCDA2CC", Offset = "0xCDA2CC", VA = "0xCDA2CC")]
		public void ClipPercent(ref double percent)
		{
		}

		[Token(Token = "0x60017B3")]
		[Address(RVA = "0xCDA390", Offset = "0xCDA390", VA = "0xCDA390")]
		public double UnclipPercent(double percent)
		{
			return default(double);
		}

		[Token(Token = "0x60017B4")]
		[Address(RVA = "0xCDA3B8", Offset = "0xCDA3B8", VA = "0xCDA3B8")]
		public void UnclipPercent(ref double percent)
		{
		}

		[Token(Token = "0x60017B5")]
		[Address(RVA = "0xCDA11C", Offset = "0xCDA11C", VA = "0xCDA11C")]
		public void GetSamplingValues(double percent, out int sampleIndex, out double lerp)
		{
		}

		[Token(Token = "0x60017B6")]
		[Address(RVA = "0xCDA474", Offset = "0xCDA474", VA = "0xCDA474")]
		public Vector3 EvaluatePosition(double percent)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60017B7")]
		[Address(RVA = "0xCDA598", Offset = "0xCDA598", VA = "0xCDA598")]
		public SplineSample Evaluate(double percent)
		{
			return null;
		}

		[Token(Token = "0x60017B8")]
		[Address(RVA = "0xCDA610", Offset = "0xCDA610", VA = "0xCDA610")]
		public void Evaluate(double percent, SplineSample result)
		{
		}

		[Token(Token = "0x60017B9")]
		[Address(RVA = "0xCDA734", Offset = "0xCDA734", VA = "0xCDA734")]
		public void Evaluate(ref SplineSample[] results, double from = 0.0, double to = 1.0)
		{
		}

		[Token(Token = "0x60017BA")]
		[Address(RVA = "0xCDA9E4", Offset = "0xCDA9E4", VA = "0xCDA9E4")]
		public void EvaluatePositions(ref Vector3[] positions, double from = 0.0, double to = 1.0)
		{
		}

		[Token(Token = "0x60017BB")]
		[Address(RVA = "0xCDAC2C", Offset = "0xCDAC2C", VA = "0xCDAC2C")]
		public double Travel(double start, float distance, Spline.Direction direction, out float moved)
		{
			return default(double);
		}

		[Token(Token = "0x60017BC")]
		[Address(RVA = "0xCDAFCC", Offset = "0xCDAFCC", VA = "0xCDAFCC")]
		public double Travel(double start, float distance, Spline.Direction direction = Spline.Direction.Forward)
		{
			return default(double);
		}

		[Token(Token = "0x60017BD")]
		[Address(RVA = "0xCDAFF0", Offset = "0xCDAFF0", VA = "0xCDAFF0")]
		public void Project(Vector3 position, int controlPointCount, SplineSample result, double from = 0.0, double to = 1.0)
		{
		}

		[Token(Token = "0x60017BE")]
		[Address(RVA = "0xCDB968", Offset = "0xCDB968", VA = "0xCDB968")]
		private double GetSamplePercent(int sampleIndex)
		{
			return default(double);
		}

		[Token(Token = "0x60017BF")]
		[Address(RVA = "0xCDB9F0", Offset = "0xCDB9F0", VA = "0xCDB9F0")]
		public float CalculateLength(double from = 0.0, double to = 1.0)
		{
			return default(float);
		}
	}
	[Serializable]
	[Token(Token = "0x200032B")]
	public class Spline
	{
		[Token(Token = "0x20004DB")]
		public enum Direction
		{
			[Token(Token = "0x4001EB8")]
			Forward = 1,
			[Token(Token = "0x4001EB9")]
			Backward = -1
		}

		[Token(Token = "0x20004DC")]
		public enum Type
		{
			[Token(Token = "0x4001EBB")]
			CatmullRom,
			[Token(Token = "0x4001EBC")]
			BSpline,
			[Token(Token = "0x4001EBD")]
			Bezier,
			[Token(Token = "0x4001EBE")]
			Linear
		}

		[Token(Token = "0x4001653")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public SplinePoint[] points;

		[Token(Token = "0x4001654")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private bool closed;

		[Token(Token = "0x4001655")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Type type;

		[Token(Token = "0x4001656")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool linearAverageDirection;

		[Token(Token = "0x4001657")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimationCurve customValueInterpolation;

		[Token(Token = "0x4001658")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimationCurve customNormalInterpolation;

		[Token(Token = "0x4001659")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int sampleRate;

		[Token(Token = "0x400165A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Vector3[] catPoints;

		[Token(Token = "0x1700025B")]
		public bool isClosed
		{
			[Token(Token = "0x60017C0")]
			[Address(RVA = "0xA19388", Offset = "0xA19388", VA = "0xA19388")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60017C1")]
			[Address(RVA = "0xA193BC", Offset = "0xA193BC", VA = "0xA193BC")]
			set
			{
			}
		}

		[Token(Token = "0x1700025C")]
		public double moveStep
		{
			[Token(Token = "0x60017C2")]
			[Address(RVA = "0xA193C0", Offset = "0xA193C0", VA = "0xA193C0")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x60017C3")]
			[Address(RVA = "0xA19458", Offset = "0xA19458", VA = "0xA19458")]
			set
			{
			}
		}

		[Token(Token = "0x1700025D")]
		public int iterations
		{
			[Token(Token = "0x60017C4")]
			[Address(RVA = "0xA19408", Offset = "0xA19408", VA = "0xA19408")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60017C5")]
		[Address(RVA = "0xA1945C", Offset = "0xA1945C", VA = "0xA1945C")]
		public Spline(Type type)
		{
		}

		[Token(Token = "0x60017C6")]
		[Address(RVA = "0xA1950C", Offset = "0xA1950C", VA = "0xA1950C")]
		public Spline(Type type, int sampleRate)
		{
		}

		[Token(Token = "0x60017C7")]
		[Address(RVA = "0xA195CC", Offset = "0xA195CC", VA = "0xA195CC")]
		public float CalculateLength(double from = 0.0, double to = 1.0, double resolution = 1.0)
		{
			return default(float);
		}

		[Token(Token = "0x60017C8")]
		[Address(RVA = "0xA1976C", Offset = "0xA1976C", VA = "0xA1976C")]
		public double Project(Vector3 position, int subdivide = 4, double from = 0.0, double to = 1.0)
		{
			return default(double);
		}

		[Token(Token = "0x60017C9")]
		[Address(RVA = "0xA19B08", Offset = "0xA19B08", VA = "0xA19B08")]
		public bool Raycast(out RaycastHit hit, out double hitPercent, LayerMask layerMask, double resolution = 1.0, double from = 0.0, double to = 1.0, QueryTriggerInteraction hitTriggers = QueryTriggerInteraction.UseGlobal)
		{
			return default(bool);
		}

		[Token(Token = "0x60017CA")]
		[Address(RVA = "0xA19D00", Offset = "0xA19D00", VA = "0xA19D00")]
		public bool RaycastAll(out RaycastHit[] hits, out double[] hitPercents, LayerMask layerMask, double resolution = 1.0, double from = 0.0, double to = 1.0, QueryTriggerInteraction hitTriggers = QueryTriggerInteraction.UseGlobal)
		{
			return default(bool);
		}

		[Token(Token = "0x60017CB")]
		[Address(RVA = "0xA1A128", Offset = "0xA1A128", VA = "0xA1A128")]
		public double GetPointPercent(int pointIndex)
		{
			return default(double);
		}

		[Token(Token = "0x60017CC")]
		[Address(RVA = "0xA19714", Offset = "0xA19714", VA = "0xA19714")]
		public Vector3 EvaluatePosition(double percent)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60017CD")]
		[Address(RVA = "0xA1A210", Offset = "0xA1A210", VA = "0xA1A210")]
		public SplineSample Evaluate(double percent)
		{
			return null;
		}

		[Token(Token = "0x60017CE")]
		[Address(RVA = "0xA1A84C", Offset = "0xA1A84C", VA = "0xA1A84C")]
		public SplineSample Evaluate(int pointIndex)
		{
			return null;
		}

		[Token(Token = "0x60017CF")]
		[Address(RVA = "0xA1A8CC", Offset = "0xA1A8CC", VA = "0xA1A8CC")]
		public void Evaluate(SplineSample result, int pointIndex)
		{
		}

		[Token(Token = "0x60017D0")]
		[Address(RVA = "0xA1A288", Offset = "0xA1A288", VA = "0xA1A288")]
		public void Evaluate(SplineSample result, double percent)
		{
		}

		[Token(Token = "0x60017D1")]
		[Address(RVA = "0xA1A9B4", Offset = "0xA1A9B4", VA = "0xA1A9B4")]
		public void Evaluate(ref SplineSample[] samples, double from = 0.0, double to = 1.0)
		{
		}

		[Token(Token = "0x60017D2")]
		[Address(RVA = "0xA1ABD0", Offset = "0xA1ABD0", VA = "0xA1ABD0")]
		public void EvaluateUniform(ref SplineSample[] samples, ref double[] originalSamplePercents, double from = 0.0, double to = 1.0)
		{
		}

		[Token(Token = "0x60017D3")]
		[Address(RVA = "0xA1B1D8", Offset = "0xA1B1D8", VA = "0xA1B1D8")]
		public void EvaluatePositions(ref Vector3[] positions, double from = 0.0, double to = 1.0)
		{
		}

		[Token(Token = "0x60017D4")]
		[Address(RVA = "0xA1AFF0", Offset = "0xA1AFF0", VA = "0xA1AFF0")]
		public double Travel(double start, float distance, out float moved, Direction direction)
		{
			return default(double);
		}

		[Token(Token = "0x60017D5")]
		[Address(RVA = "0xA1B3C4", Offset = "0xA1B3C4", VA = "0xA1B3C4")]
		public double Travel(double start, float distance, Direction direction = Direction.Forward)
		{
			return default(double);
		}

		[Token(Token = "0x60017D6")]
		[Address(RVA = "0xA1A158", Offset = "0xA1A158", VA = "0xA1A158")]
		public void EvaluatePosition(ref Vector3 point, double percent)
		{
		}

		[Token(Token = "0x60017D7")]
		[Address(RVA = "0xA1A8FC", Offset = "0xA1A8FC", VA = "0xA1A8FC")]
		public void EvaluateTangent(ref Vector3 tangent, double percent)
		{
		}

		[Token(Token = "0x60017D8")]
		[Address(RVA = "0xA1991C", Offset = "0xA1991C", VA = "0xA1991C")]
		private double GetClosestPoint(int iterations, Vector3 point, double start, double end, int slices)
		{
			return default(double);
		}

		[Token(Token = "0x60017D9")]
		[Address(RVA = "0xA1B594", Offset = "0xA1B594", VA = "0xA1B594")]
		public void Break()
		{
		}

		[Token(Token = "0x60017DA")]
		[Address(RVA = "0xA1B59C", Offset = "0xA1B59C", VA = "0xA1B59C")]
		public void Break(int at)
		{
		}

		[Token(Token = "0x60017DB")]
		[Address(RVA = "0xA1B7EC", Offset = "0xA1B7EC", VA = "0xA1B7EC")]
		public void Close()
		{
		}

		[Token(Token = "0x60017DC")]
		[Address(RVA = "0xA1B890", Offset = "0xA1B890", VA = "0xA1B890")]
		public void CatToBezierTangents()
		{
		}

		[Token(Token = "0x60017DD")]
		[Address(RVA = "0xA1B3EC", Offset = "0xA1B3EC", VA = "0xA1B3EC")]
		private void GetPoint(ref Vector3 point, double percent, int pointIndex)
		{
		}

		[Token(Token = "0x60017DE")]
		[Address(RVA = "0xA1B56C", Offset = "0xA1B56C", VA = "0xA1B56C")]
		private void GetTangent(ref Vector3 tangent, double percent, int pointIndex)
		{
		}

		[Token(Token = "0x60017DF")]
		[Address(RVA = "0xA1C6EC", Offset = "0xA1C6EC", VA = "0xA1C6EC")]
		private void LinearGetPoint(ref Vector3 point, double t, int i)
		{
		}

		[Token(Token = "0x60017E0")]
		[Address(RVA = "0xA1CB8C", Offset = "0xA1CB8C", VA = "0xA1CB8C")]
		private void LinearGetTangent(ref Vector3 tangent, double t, int i)
		{
		}

		[Token(Token = "0x60017E1")]
		[Address(RVA = "0xA1C4EC", Offset = "0xA1C4EC", VA = "0xA1C4EC")]
		private void BSPGetPoint(ref Vector3 point, double time, int i)
		{
		}

		[Token(Token = "0x60017E2")]
		[Address(RVA = "0xA1C374", Offset = "0xA1C374", VA = "0xA1C374")]
		private void BezierGetPoint(ref Vector3 point, double t, int i)
		{
		}

		[Token(Token = "0x60017E3")]
		[Address(RVA = "0xA1C9EC", Offset = "0xA1C9EC", VA = "0xA1C9EC")]
		private void BezierGetTangent(ref Vector3 tangent, double t, int i)
		{
		}

		[Token(Token = "0x60017E4")]
		[Address(RVA = "0xA1C180", Offset = "0xA1C180", VA = "0xA1C180")]
		private void CatmullRomGetPoint(ref Vector3 point, double t, int i)
		{
		}

		[Token(Token = "0x60017E5")]
		[Address(RVA = "0xA1C828", Offset = "0xA1C828", VA = "0xA1C828")]
		private void GetCatmullRomTangent(ref Vector3 direction, double t, int i)
		{
		}

		[Token(Token = "0x60017E6")]
		[Address(RVA = "0xA1BC18", Offset = "0xA1BC18", VA = "0xA1BC18")]
		private void GetCatPoints(int i)
		{
		}

		[Token(Token = "0x60017E7")]
		[Address(RVA = "0xA1CCE4", Offset = "0xA1CCE4", VA = "0xA1CCE4")]
		public static void FormatFromTo(ref double from, ref double to, bool preventInvert = true)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200032C")]
	public struct SplinePoint
	{
		[Token(Token = "0x20004DD")]
		public enum Type
		{
			[Token(Token = "0x4001EC0")]
			SmoothMirrored,
			[Token(Token = "0x4001EC1")]
			Broken,
			[Token(Token = "0x4001EC2")]
			SmoothFree
		}

		[Token(Token = "0x400165B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x5D59B4", Offset = "0x5D59B4")]
		[SerializeField]
		[HideInInspector]
		private Type _type;

		[Token(Token = "0x400165C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public Vector3 position;

		[Token(Token = "0x400165D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Color color;

		[Token(Token = "0x400165E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 normal;

		[Token(Token = "0x400165F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float size;

		[Token(Token = "0x4001660")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 tangent;

		[Token(Token = "0x4001661")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector3 tangent2;

		[Token(Token = "0x1700025E")]
		public Type type
		{
			[Token(Token = "0x60017E9")]
			[Address(RVA = "0x13A8CF8", Offset = "0x13A8CF8", VA = "0x13A8CF8")]
			get
			{
				return default(Type);
			}
			[Token(Token = "0x60017EA")]
			[Address(RVA = "0x13A8598", Offset = "0x13A8598", VA = "0x13A8598")]
			set
			{
			}
		}

		[Token(Token = "0x60017EB")]
		[Address(RVA = "0x13A8D2C", Offset = "0x13A8D2C", VA = "0x13A8D2C")]
		public static SplinePoint Lerp(SplinePoint a, SplinePoint b, float t)
		{
			return default(SplinePoint);
		}

		[Token(Token = "0x60017EC")]
		[Address(RVA = "0x13A8EE8", Offset = "0x13A8EE8", VA = "0x13A8EE8")]
		private static void GetInterpolatedTangents(SplinePoint a, SplinePoint b, float t, out Vector3 t1, out Vector3 t2)
		{
		}

		[Token(Token = "0x60017ED")]
		[Address(RVA = "0x13A8F9C", Offset = "0x13A8F9C", VA = "0x13A8F9C")]
		public static bool AreDifferent(ref SplinePoint a, ref SplinePoint b)
		{
			return default(bool);
		}

		[Token(Token = "0x60017EE")]
		[Address(RVA = "0x13A9070", Offset = "0x13A9070", VA = "0x13A9070")]
		public void SetPosition(Vector3 pos)
		{
		}

		[Token(Token = "0x60017EF")]
		[Address(RVA = "0x13A90B8", Offset = "0x13A90B8", VA = "0x13A90B8")]
		public void SetTangentPosition(Vector3 pos)
		{
		}

		[Token(Token = "0x60017F0")]
		[Address(RVA = "0x13A91B4", Offset = "0x13A91B4", VA = "0x13A91B4")]
		public void SetTangent2Position(Vector3 pos)
		{
		}

		[Token(Token = "0x60017F1")]
		[Address(RVA = "0x13A92DC", Offset = "0x13A92DC", VA = "0x13A92DC")]
		public SplinePoint(Vector3 p)
		{
		}

		[Token(Token = "0x60017F2")]
		[Address(RVA = "0x13A9360", Offset = "0x13A9360", VA = "0x13A9360")]
		public SplinePoint(Vector3 p, Vector3 t)
		{
		}

		[Token(Token = "0x60017F3")]
		[Address(RVA = "0x13A93FC", Offset = "0x13A93FC", VA = "0x13A93FC")]
		public SplinePoint(Vector3 pos, Vector3 tan, Vector3 nor, float s, Color col)
		{
		}

		[Token(Token = "0x60017F4")]
		[Address(RVA = "0x13A944C", Offset = "0x13A944C", VA = "0x13A944C")]
		public SplinePoint(Vector3 pos, Vector3 tan, Vector3 tan2, Vector3 nor, float s, Color col)
		{
		}

		[Token(Token = "0x60017F5")]
		[Address(RVA = "0x13A9494", Offset = "0x13A9494", VA = "0x13A9494")]
		public SplinePoint(SplinePoint source)
		{
		}

		[Token(Token = "0x60017F6")]
		[Address(RVA = "0x13A8D00", Offset = "0x13A8D00", VA = "0x13A8D00")]
		private void SmoothMirrorTangent2()
		{
		}

		[Token(Token = "0x60017F7")]
		[Address(RVA = "0x13A91F8", Offset = "0x13A91F8", VA = "0x13A91F8")]
		private void SmoothMirrorTangent()
		{
		}

		[Token(Token = "0x60017F8")]
		[Address(RVA = "0x13A90FC", Offset = "0x13A90FC", VA = "0x13A90FC")]
		private void SmoothFreeTangent2()
		{
		}

		[Token(Token = "0x60017F9")]
		[Address(RVA = "0x13A9224", Offset = "0x13A9224", VA = "0x13A9224")]
		private void SmoothFreeTangent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200032D")]
	public class SplineSample
	{
		[Token(Token = "0x4001662")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 position;

		[Token(Token = "0x4001663")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 up;

		[Token(Token = "0x4001664")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 forward;

		[Token(Token = "0x4001665")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Color color;

		[Token(Token = "0x4001666")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float size;

		[Token(Token = "0x4001667")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public double percent;

		[Token(Token = "0x1700025F")]
		public Quaternion rotation
		{
			[Token(Token = "0x60017FA")]
			[Address(RVA = "0x13A6A80", Offset = "0x13A6A80", VA = "0x13A6A80")]
			get
			{
				return default(Quaternion);
			}
		}

		[Token(Token = "0x17000260")]
		public Vector3 right
		{
			[Token(Token = "0x60017FB")]
			[Address(RVA = "0x13A69A8", Offset = "0x13A69A8", VA = "0x13A69A8")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x60017FC")]
		[Address(RVA = "0x13ABAEC", Offset = "0x13ABAEC", VA = "0x13ABAEC")]
		public static SplineSample Lerp(SplineSample a, SplineSample b, float t)
		{
			return null;
		}

		[Token(Token = "0x60017FD")]
		[Address(RVA = "0x13ABC84", Offset = "0x13ABC84", VA = "0x13ABC84")]
		public static SplineSample Lerp(SplineSample a, SplineSample b, double t)
		{
			return null;
		}

		[Token(Token = "0x60017FE")]
		[Address(RVA = "0x13ABD08", Offset = "0x13ABD08", VA = "0x13ABD08")]
		public static void Lerp(SplineSample a, SplineSample b, double t, SplineSample target)
		{
		}

		[Token(Token = "0x60017FF")]
		[Address(RVA = "0x13ABB70", Offset = "0x13ABB70", VA = "0x13ABB70")]
		public static void Lerp(SplineSample a, SplineSample b, float t, SplineSample target)
		{
		}

		[Token(Token = "0x6001800")]
		[Address(RVA = "0x13ABE1C", Offset = "0x13ABE1C", VA = "0x13ABE1C")]
		public void Lerp(SplineSample b, double t)
		{
		}

		[Token(Token = "0x6001801")]
		[Address(RVA = "0x13ABE24", Offset = "0x13ABE24", VA = "0x13ABE24")]
		public void Lerp(SplineSample b, float t)
		{
		}

		[Token(Token = "0x6001802")]
		[Address(RVA = "0x13A445C", Offset = "0x13A445C", VA = "0x13A445C")]
		public void CopyFrom(SplineSample input)
		{
		}

		[Token(Token = "0x6001803")]
		[Address(RVA = "0x13A6CE4", Offset = "0x13A6CE4", VA = "0x13A6CE4")]
		public SplineSample()
		{
		}

		[Token(Token = "0x6001804")]
		[Address(RVA = "0x13ABE2C", Offset = "0x13ABE2C", VA = "0x13ABE2C")]
		public SplineSample(Vector3 position, Vector3 normal, Vector3 direction, Color color, float size, double percent)
		{
		}

		[Token(Token = "0x6001805")]
		[Address(RVA = "0x13ABF1C", Offset = "0x13ABF1C", VA = "0x13ABF1C")]
		public SplineSample(SplineSample input)
		{
		}
	}
	[Token(Token = "0x200032E")]
	public static class SplineThreading
	{
		[Token(Token = "0x20004DE")]
		public delegate void EmptyHandler();

		[Token(Token = "0x20004DF")]
		internal class ThreadDef
		{
			[Token(Token = "0x2000501")]
			internal class Worker
			{
				[Token(Token = "0x4001F28")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				internal bool computing;

				[Token(Token = "0x4001F29")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				internal Queue<EmptyHandler> instructions;

				[Token(Token = "0x6001DDB")]
				[Address(RVA = "0x1389F84", Offset = "0x1389F84", VA = "0x1389F84")]
				public Worker()
				{
				}
			}

			[Token(Token = "0x2000502")]
			internal delegate void BoolHandler(bool flag);

			[Token(Token = "0x4001EC3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private ParameterizedThreadStart start;

			[Token(Token = "0x4001EC4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal Thread thread;

			[Token(Token = "0x4001EC5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private Worker worker;

			[Token(Token = "0x170003C2")]
			internal bool isAlive
			{
				[Token(Token = "0x6001D73")]
				[Address(RVA = "0x1389E94", Offset = "0x1389E94", VA = "0x1389E94")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x170003C3")]
			internal bool computing
			{
				[Token(Token = "0x6001D74")]
				[Address(RVA = "0x1389EA8", Offset = "0x1389EA8", VA = "0x1389EA8")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6001D75")]
			[Address(RVA = "0x1389EC4", Offset = "0x1389EC4", VA = "0x1389EC4")]
			internal ThreadDef()
			{
			}

			[Token(Token = "0x6001D76")]
			[Address(RVA = "0x138A008", Offset = "0x138A008", VA = "0x138A008")]
			internal void Queue(EmptyHandler handler)
			{
			}

			[Token(Token = "0x6001D77")]
			[Address(RVA = "0x138A074", Offset = "0x138A074", VA = "0x138A074")]
			internal void Interrupt()
			{
			}

			[Token(Token = "0x6001D78")]
			[Address(RVA = "0x138A090", Offset = "0x138A090", VA = "0x138A090")]
			internal void Restart()
			{
			}

			[Token(Token = "0x6001D79")]
			[Address(RVA = "0x138A168", Offset = "0x138A168", VA = "0x138A168")]
			internal void Abort()
			{
			}
		}

		[Token(Token = "0x4001668")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static ThreadDef[] threads;

		[Token(Token = "0x4001669")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal static readonly object locker;

		[Token(Token = "0x17000261")]
		public static int threadCount
		{
			[Token(Token = "0x6001806")]
			[Address(RVA = "0x13AC148", Offset = "0x13AC148", VA = "0x13AC148")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001807")]
			[Address(RVA = "0x13AC1B8", Offset = "0x13AC1B8", VA = "0x13AC1B8")]
			set
			{
			}
		}

		[Token(Token = "0x6001808")]
		[Address(RVA = "0x13AC2F4", Offset = "0x13AC2F4", VA = "0x13AC2F4")]
		static SplineThreading()
		{
		}

		[Token(Token = "0x6001809")]
		[Address(RVA = "0x13AC470", Offset = "0x13AC470", VA = "0x13AC470")]
		private static void Quitting()
		{
		}

		[Token(Token = "0x600180A")]
		[Address(RVA = "0x13AC59C", Offset = "0x13AC59C", VA = "0x13AC59C")]
		private static void RunThread(object o)
		{
		}

		[Token(Token = "0x600180B")]
		[Address(RVA = "0x13AC9AC", Offset = "0x13AC9AC", VA = "0x13AC9AC")]
		public static void Run(EmptyHandler handler)
		{
		}

		[Token(Token = "0x600180C")]
		[Address(RVA = "0x13ACC44", Offset = "0x13ACC44", VA = "0x13ACC44")]
		public static void PrewarmThreads()
		{
		}

		[Token(Token = "0x600180D")]
		[Address(RVA = "0x13AC4C8", Offset = "0x13AC4C8", VA = "0x13AC4C8")]
		public static void Stop()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200032F")]
	public class TriggerGroup
	{
		[Token(Token = "0x400166A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool enabled;

		[Token(Token = "0x400166B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string name;

		[Token(Token = "0x400166C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Color color;

		[Token(Token = "0x400166D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public SplineTrigger[] triggers;

		[Token(Token = "0x600180E")]
		[Address(RVA = "0xBCC4A4", Offset = "0xBCC4A4", VA = "0xBCC4A4")]
		public void Check(double start, double end, [Optional] SplineUser user)
		{
		}

		[Token(Token = "0x600180F")]
		[Address(RVA = "0xBCC560", Offset = "0xBCC560", VA = "0xBCC560")]
		public void Reset()
		{
		}

		[Token(Token = "0x6001810")]
		[Address(RVA = "0xBCC5CC", Offset = "0xBCC5CC", VA = "0xBCC5CC")]
		public TriggerGroup()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000330")]
	public class SplineTrigger
	{
		[Token(Token = "0x20004E0")]
		public enum Type
		{
			[Token(Token = "0x4001EC7")]
			Double,
			[Token(Token = "0x4001EC8")]
			Forward,
			[Token(Token = "0x4001EC9")]
			Backward
		}

		[Token(Token = "0x400166E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x400166F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public Type type;

		[Token(Token = "0x4001670")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool workOnce;

		[Token(Token = "0x4001671")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		private bool worked;

		[Token(Token = "0x4001672")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5D5A20", Offset = "0x5D5A20")]
		public double position;

		[Token(Token = "0x4001673")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		public bool enabled;

		[Token(Token = "0x4001674")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		public Color color;

		[Token(Token = "0x4001675")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[HideInInspector]
		public UnityEvent onCross;

		[Token(Token = "0x1400001E")]
		public event Action<SplineUser> onUserCross
		{
			[Token(Token = "0x6001811")]
			[Address(RVA = "0x13AD6E8", Offset = "0x13AD6E8", VA = "0x13AD6E8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5DA364", Offset = "0x5DA364")]
			add
			{
			}
			[Token(Token = "0x6001812")]
			[Address(RVA = "0x13AD788", Offset = "0x13AD788", VA = "0x13AD788")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5DA374", Offset = "0x5DA374")]
			remove
			{
			}
		}

		[Token(Token = "0x6001813")]
		[Address(RVA = "0x13AD828", Offset = "0x13AD828", VA = "0x13AD828")]
		public SplineTrigger(Type t)
		{
		}

		[Token(Token = "0x6001814")]
		[Address(RVA = "0x13AD920", Offset = "0x13AD920", VA = "0x13AD920")]
		public void AddListener(UnityAction action)
		{
		}

		[Token(Token = "0x6001815")]
		[Address(RVA = "0x13AD93C", Offset = "0x13AD93C", VA = "0x13AD93C")]
		public void Reset()
		{
		}

		[Token(Token = "0x6001816")]
		[Address(RVA = "0x13AD268", Offset = "0x13AD268", VA = "0x13AD268")]
		public bool Check(double previousPercent, double currentPercent)
		{
			return default(bool);
		}

		[Token(Token = "0x6001817")]
		[Address(RVA = "0x13AD44C", Offset = "0x13AD44C", VA = "0x13AD44C")]
		public void Invoke([Optional] SplineUser user)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000331")]
	public class TransformModule
	{
		[Token(Token = "0x20004E1")]
		public enum VelocityHandleMode
		{
			[Token(Token = "0x4001ECB")]
			Zero,
			[Token(Token = "0x4001ECC")]
			Preserve,
			[Token(Token = "0x4001ECD")]
			Align,
			[Token(Token = "0x4001ECE")]
			AlignRealistic
		}

		[Token(Token = "0x4001677")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		[HideInInspector]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x5D5AA0", Offset = "0x5D5AA0")]
		private Vector2 _offset;

		[Token(Token = "0x4001678")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[HideInInspector]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x5D5AFC", Offset = "0x5D5AFC")]
		private Vector3 _rotationOffset;

		[Token(Token = "0x4001679")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		[HideInInspector]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x5D5B58", Offset = "0x5D5B58")]
		private Vector3 _baseScale;

		[Token(Token = "0x400167A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public VelocityHandleMode velocityHandleMode;

		[Token(Token = "0x400167B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private SplineSample _splineResult;

		[Token(Token = "0x400167C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool applyPositionX;

		[Token(Token = "0x400167D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		public bool applyPositionY;

		[Token(Token = "0x400167E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
		public bool applyPositionZ;

		[Token(Token = "0x400167F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Spline.Direction direction;

		[Token(Token = "0x4001680")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool applyRotationX;

		[Token(Token = "0x4001681")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		public bool applyRotationY;

		[Token(Token = "0x4001682")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
		public bool applyRotationZ;

		[Token(Token = "0x4001683")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4B")]
		public bool applyScaleX;

		[Token(Token = "0x4001684")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool applyScaleY;

		[Token(Token = "0x4001685")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
		public bool applyScaleZ;

		[Token(Token = "0x4001686")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[HideInInspector]
		public SplineUser targetUser;

		[Token(Token = "0x4001687")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Vector3 position;

		[Token(Token = "0x4001688")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static Quaternion rotation;

		[Token(Token = "0x17000262")]
		public Vector2 offset
		{
			[Token(Token = "0x6001818")]
			[Address(RVA = "0xBC83AC", Offset = "0xBC83AC", VA = "0xBC83AC")]
			get
			{
				return default(Vector2);
			}
			[Token(Token = "0x6001819")]
			[Address(RVA = "0xBC83B4", Offset = "0xBC83B4", VA = "0xBC83B4")]
			set
			{
			}
		}

		[Token(Token = "0x17000263")]
		public Vector3 rotationOffset
		{
			[Token(Token = "0x600181A")]
			[Address(RVA = "0xBC8488", Offset = "0xBC8488", VA = "0xBC8488")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x600181B")]
			[Address(RVA = "0xBC8494", Offset = "0xBC8494", VA = "0xBC8494")]
			set
			{
			}
		}

		[Token(Token = "0x17000264")]
		public Vector3 baseScale
		{
			[Token(Token = "0x600181C")]
			[Address(RVA = "0xBC8574", Offset = "0xBC8574", VA = "0xBC8574")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x600181D")]
			[Address(RVA = "0xBC8580", Offset = "0xBC8580", VA = "0xBC8580")]
			set
			{
			}
		}

		[Token(Token = "0x17000265")]
		public SplineSample splineResult
		{
			[Token(Token = "0x600181E")]
			[Address(RVA = "0xBC8660", Offset = "0xBC8660", VA = "0xBC8660")]
			get
			{
				return null;
			}
			[Token(Token = "0x600181F")]
			[Address(RVA = "0xBC86D4", Offset = "0xBC86D4", VA = "0xBC86D4")]
			set
			{
			}
		}

		[Token(Token = "0x17000266")]
		public bool applyPosition
		{
			[Token(Token = "0x6001820")]
			[Address(RVA = "0xBC8768", Offset = "0xBC8768", VA = "0xBC8768")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001821")]
			[Address(RVA = "0xBC8790", Offset = "0xBC8790", VA = "0xBC8790")]
			set
			{
			}
		}

		[Token(Token = "0x17000267")]
		public bool applyRotation
		{
			[Token(Token = "0x6001822")]
			[Address(RVA = "0xBC87A4", Offset = "0xBC87A4", VA = "0xBC87A4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001823")]
			[Address(RVA = "0xBC87CC", Offset = "0xBC87CC", VA = "0xBC87CC")]
			set
			{
			}
		}

		[Token(Token = "0x17000268")]
		public bool applyScale
		{
			[Token(Token = "0x6001824")]
			[Address(RVA = "0xBC87E0", Offset = "0xBC87E0", VA = "0xBC87E0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001825")]
			[Address(RVA = "0xBC8808", Offset = "0xBC8808", VA = "0xBC8808")]
			set
			{
			}
		}

		[Token(Token = "0x6001826")]
		[Address(RVA = "0xBC881C", Offset = "0xBC881C", VA = "0xBC881C")]
		public void ApplyTransform(Transform input)
		{
		}

		[Token(Token = "0x6001827")]
		[Address(RVA = "0xBC8D98", Offset = "0xBC8D98", VA = "0xBC8D98")]
		public void ApplyRigidbody(Rigidbody input)
		{
		}

		[Token(Token = "0x6001828")]
		[Address(RVA = "0xBC9064", Offset = "0xBC9064", VA = "0xBC9064")]
		public void ApplyRigidbody2D(Rigidbody2D input)
		{
		}

		[Token(Token = "0x6001829")]
		[Address(RVA = "0xBC8EBC", Offset = "0xBC8EBC", VA = "0xBC8EBC")]
		private Vector3 HandleVelocity(Vector3 velocity)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600182A")]
		[Address(RVA = "0xBC88A0", Offset = "0xBC88A0", VA = "0xBC88A0")]
		private Vector3 GetPosition(Vector3 inputPosition)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600182B")]
		[Address(RVA = "0xBC8AC0", Offset = "0xBC8AC0", VA = "0xBC8AC0")]
		private Quaternion GetRotation(Quaternion inputRotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600182C")]
		[Address(RVA = "0xBC8D30", Offset = "0xBC8D30", VA = "0xBC8D30")]
		private Vector3 GetScale(Vector3 inputScale)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600182D")]
		[Address(RVA = "0xBC918C", Offset = "0xBC918C", VA = "0xBC918C")]
		public TransformModule()
		{
		}
	}
}
namespace Dreamteck.Splines.Primitives
{
	[Token(Token = "0x2000332")]
	public class Capsule : SplinePrimitive
	{
		[Token(Token = "0x4001689")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float radius;

		[Token(Token = "0x400168A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float height;

		[Token(Token = "0x600182F")]
		[Address(RVA = "0x10A7EAC", Offset = "0x10A7EAC", VA = "0x10A7EAC", Slot = "6")]
		public override Spline.Type GetSplineType()
		{
			return default(Spline.Type);
		}

		[Token(Token = "0x6001830")]
		[Address(RVA = "0x10A7EB4", Offset = "0x10A7EB4", VA = "0x10A7EB4", Slot = "5")]
		protected override void Generate()
		{
		}

		[Token(Token = "0x6001831")]
		[Address(RVA = "0x10A855C", Offset = "0x10A855C", VA = "0x10A855C")]
		public Capsule()
		{
		}
	}
	[Token(Token = "0x2000333")]
	public class Ellipse : SplinePrimitive
	{
		[Token(Token = "0x400168B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float xRadius;

		[Token(Token = "0x400168C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float yRadius;

		[Token(Token = "0x6001832")]
		[Address(RVA = "0xA02040", Offset = "0xA02040", VA = "0xA02040", Slot = "6")]
		public override Spline.Type GetSplineType()
		{
			return default(Spline.Type);
		}

		[Token(Token = "0x6001833")]
		[Address(RVA = "0xA02048", Offset = "0xA02048", VA = "0xA02048", Slot = "5")]
		protected override void Generate()
		{
		}

		[Token(Token = "0x6001834")]
		[Address(RVA = "0xA023B4", Offset = "0xA023B4", VA = "0xA023B4")]
		public Ellipse()
		{
		}
	}
	[Token(Token = "0x2000334")]
	public class Line : SplinePrimitive
	{
		[Token(Token = "0x400168D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		public bool mirror;

		[Token(Token = "0x400168E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float length;

		[Token(Token = "0x400168F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int segments;

		[Token(Token = "0x6001835")]
		[Address(RVA = "0x102EFDC", Offset = "0x102EFDC", VA = "0x102EFDC", Slot = "6")]
		public override Spline.Type GetSplineType()
		{
			return default(Spline.Type);
		}

		[Token(Token = "0x6001836")]
		[Address(RVA = "0x102EFE4", Offset = "0x102EFE4", VA = "0x102EFE4", Slot = "5")]
		protected override void Generate()
		{
		}

		[Token(Token = "0x6001837")]
		[Address(RVA = "0x102F124", Offset = "0x102F124", VA = "0x102F124")]
		public Line()
		{
		}
	}
	[Token(Token = "0x2000335")]
	public class Ngon : SplinePrimitive
	{
		[Token(Token = "0x4001690")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float radius;

		[Token(Token = "0x4001691")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int sides;

		[Token(Token = "0x6001838")]
		[Address(RVA = "0xDF8E10", Offset = "0xDF8E10", VA = "0xDF8E10", Slot = "6")]
		public override Spline.Type GetSplineType()
		{
			return default(Spline.Type);
		}

		[Token(Token = "0x6001839")]
		[Address(RVA = "0xDF8E18", Offset = "0xDF8E18", VA = "0xDF8E18", Slot = "5")]
		protected override void Generate()
		{
		}

		[Token(Token = "0x600183A")]
		[Address(RVA = "0xDF8F90", Offset = "0xDF8F90", VA = "0xDF8F90")]
		public Ngon()
		{
		}
	}
	[Token(Token = "0x2000336")]
	public class Rectangle : SplinePrimitive
	{
		[Token(Token = "0x4001692")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector2 size;

		[Token(Token = "0x600183B")]
		[Address(RVA = "0x11F5DEC", Offset = "0x11F5DEC", VA = "0x11F5DEC", Slot = "6")]
		public override Spline.Type GetSplineType()
		{
			return default(Spline.Type);
		}

		[Token(Token = "0x600183C")]
		[Address(RVA = "0x11F5DF4", Offset = "0x11F5DF4", VA = "0x11F5DF4", Slot = "5")]
		protected override void Generate()
		{
		}

		[Token(Token = "0x600183D")]
		[Address(RVA = "0x11F60B0", Offset = "0x11F60B0", VA = "0x11F60B0")]
		public Rectangle()
		{
		}
	}
	[Token(Token = "0x2000337")]
	public class RoundedRectangle : SplinePrimitive
	{
		[Token(Token = "0x4001693")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector2 size;

		[Token(Token = "0x4001694")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float xRadius;

		[Token(Token = "0x4001695")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float yRadius;

		[Token(Token = "0x600183E")]
		[Address(RVA = "0xCD1778", Offset = "0xCD1778", VA = "0xCD1778", Slot = "6")]
		public override Spline.Type GetSplineType()
		{
			return default(Spline.Type);
		}

		[Token(Token = "0x600183F")]
		[Address(RVA = "0xCD1780", Offset = "0xCD1780", VA = "0xCD1780", Slot = "5")]
		protected override void Generate()
		{
		}

		[Token(Token = "0x6001840")]
		[Address(RVA = "0xCD1EEC", Offset = "0xCD1EEC", VA = "0xCD1EEC")]
		public RoundedRectangle()
		{
		}
	}
	[Token(Token = "0x2000338")]
	public class Spiral : SplinePrimitive
	{
		[Token(Token = "0x4001696")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float startRadius;

		[Token(Token = "0x4001697")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float endRadius;

		[Token(Token = "0x4001698")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float stretch;

		[Token(Token = "0x4001699")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public int iterations;

		[Token(Token = "0x400169A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool clockwise;

		[Token(Token = "0x400169B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AnimationCurve curve;

		[Token(Token = "0x6001841")]
		[Address(RVA = "0xA18DD0", Offset = "0xA18DD0", VA = "0xA18DD0", Slot = "6")]
		public override Spline.Type GetSplineType()
		{
			return default(Spline.Type);
		}

		[Token(Token = "0x6001842")]
		[Address(RVA = "0xA18DD8", Offset = "0xA18DD8", VA = "0xA18DD8", Slot = "5")]
		protected override void Generate()
		{
		}

		[Token(Token = "0x6001843")]
		[Address(RVA = "0xA19248", Offset = "0xA19248", VA = "0xA19248")]
		public Spiral()
		{
		}
	}
	[Token(Token = "0x2000339")]
	public class SplinePrimitive
	{
		[Token(Token = "0x400169C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected bool closed;

		[Token(Token = "0x400169D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected SplinePoint[] points;

		[Token(Token = "0x400169E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 offset;

		[Token(Token = "0x400169F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 rotation;

		[Token(Token = "0x40016A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool is2D;

		[Token(Token = "0x6001844")]
		[Address(RVA = "0x13A9A18", Offset = "0x13A9A18", VA = "0x13A9A18", Slot = "4")]
		public virtual void Calculate()
		{
		}

		[Token(Token = "0x6001845")]
		[Address(RVA = "0x13A9D00", Offset = "0x13A9D00", VA = "0x13A9D00", Slot = "5")]
		protected virtual void Generate()
		{
		}

		[Token(Token = "0x6001846")]
		[Address(RVA = "0x13A9D04", Offset = "0x13A9D04", VA = "0x13A9D04")]
		public Spline CreateSpline()
		{
			return null;
		}

		[Token(Token = "0x6001847")]
		[Address(RVA = "0x13A9DC8", Offset = "0x13A9DC8", VA = "0x13A9DC8")]
		public void UpdateSpline(Spline spline)
		{
		}

		[Token(Token = "0x6001848")]
		[Address(RVA = "0x13A9E6C", Offset = "0x13A9E6C", VA = "0x13A9E6C")]
		public SplineComputer CreateSplineComputer(string name, Vector3 position, Quaternion rotation)
		{
			return null;
		}

		[Token(Token = "0x6001849")]
		[Address(RVA = "0x13A9FCC", Offset = "0x13A9FCC", VA = "0x13A9FCC")]
		public void UpdateSplineComputer(SplineComputer comp)
		{
		}

		[Token(Token = "0x600184A")]
		[Address(RVA = "0x13AA080", Offset = "0x13AA080", VA = "0x13AA080")]
		public SplinePoint[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x600184B")]
		[Address(RVA = "0x13AA088", Offset = "0x13AA088", VA = "0x13AA088", Slot = "6")]
		public virtual Spline.Type GetSplineType()
		{
			return default(Spline.Type);
		}

		[Token(Token = "0x600184C")]
		[Address(RVA = "0x13AA090", Offset = "0x13AA090", VA = "0x13AA090")]
		public bool GetIsClosed()
		{
			return default(bool);
		}

		[Token(Token = "0x600184D")]
		[Address(RVA = "0x13A9A44", Offset = "0x13A9A44", VA = "0x13A9A44")]
		private void ApplyOffset()
		{
		}

		[Token(Token = "0x600184E")]
		[Address(RVA = "0x13AA098", Offset = "0x13AA098", VA = "0x13AA098")]
		protected void CreatePoints(int count, SplinePoint.Type type)
		{
		}

		[Token(Token = "0x600184F")]
		[Address(RVA = "0x13AA20C", Offset = "0x13AA20C", VA = "0x13AA20C")]
		public SplinePrimitive()
		{
		}
	}
	[Token(Token = "0x200033A")]
	public class Star : SplinePrimitive
	{
		[Token(Token = "0x40016A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float radius;

		[Token(Token = "0x40016A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float depth;

		[Token(Token = "0x40016A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public int sides;

		[Token(Token = "0x6001850")]
		[Address(RVA = "0x13AFAC8", Offset = "0x13AFAC8", VA = "0x13AFAC8", Slot = "6")]
		public override Spline.Type GetSplineType()
		{
			return default(Spline.Type);
		}

		[Token(Token = "0x6001851")]
		[Address(RVA = "0x13AFAD0", Offset = "0x13AFAD0", VA = "0x13AFAD0", Slot = "5")]
		protected override void Generate()
		{
		}

		[Token(Token = "0x6001852")]
		[Address(RVA = "0x13AFC7C", Offset = "0x13AFC7C", VA = "0x13AFC7C")]
		public Star()
		{
		}
	}
}
namespace Dreamteck.Splines.IO
{
	[Token(Token = "0x200033B")]
	public class CSV : SplineParser
	{
		[Token(Token = "0x20004E2")]
		public enum ColumnType
		{
			[Token(Token = "0x4001ED0")]
			Position,
			[Token(Token = "0x4001ED1")]
			Tangent,
			[Token(Token = "0x4001ED2")]
			Tangent2,
			[Token(Token = "0x4001ED3")]
			Normal,
			[Token(Token = "0x4001ED4")]
			Size,
			[Token(Token = "0x4001ED5")]
			Color
		}

		[Token(Token = "0x40016A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<ColumnType> columns;

		[Token(Token = "0x6001853")]
		[Address(RVA = "0x10A16A8", Offset = "0x10A16A8", VA = "0x10A16A8")]
		public CSV(SplineComputer computer)
		{
		}

		[Token(Token = "0x6001854")]
		[Address(RVA = "0x10A18C0", Offset = "0x10A18C0", VA = "0x10A18C0")]
		public CSV(string filePath, [Optional] List<ColumnType> customColumns)
		{
		}

		[Token(Token = "0x6001855")]
		[Address(RVA = "0x10A1BA0", Offset = "0x10A1BA0", VA = "0x10A1BA0")]
		private void Read(string[] lines)
		{
		}

		[Token(Token = "0x6001856")]
		[Address(RVA = "0x10A2708", Offset = "0x10A2708", VA = "0x10A2708")]
		public SplineComputer CreateSplineComputer(Vector3 position, Quaternion rotation)
		{
			return null;
		}

		[Token(Token = "0x6001857")]
		[Address(RVA = "0x10A2724", Offset = "0x10A2724", VA = "0x10A2724")]
		public Spline CreateSpline()
		{
			return null;
		}

		[Token(Token = "0x6001858")]
		[Address(RVA = "0x10A2740", Offset = "0x10A2740", VA = "0x10A2740")]
		public void FlatX()
		{
		}

		[Token(Token = "0x6001859")]
		[Address(RVA = "0x10A28AC", Offset = "0x10A28AC", VA = "0x10A28AC")]
		public void FlatY()
		{
		}

		[Token(Token = "0x600185A")]
		[Address(RVA = "0x10A2A1C", Offset = "0x10A2A1C", VA = "0x10A2A1C")]
		public void FlatZ()
		{
		}

		[Token(Token = "0x600185B")]
		[Address(RVA = "0x10A2BC4", Offset = "0x10A2BC4", VA = "0x10A2BC4")]
		private void AddTitle(ref string[] content, string title)
		{
		}

		[Token(Token = "0x600185C")]
		[Address(RVA = "0x10A2CA0", Offset = "0x10A2CA0", VA = "0x10A2CA0")]
		private void AddVector3Title(ref string[] content, string prefix)
		{
		}

		[Token(Token = "0x600185D")]
		[Address(RVA = "0x10A2EBC", Offset = "0x10A2EBC", VA = "0x10A2EBC")]
		private void AddColorTitle(ref string[] content, string prefix)
		{
		}

		[Token(Token = "0x600185E")]
		[Address(RVA = "0x10A315C", Offset = "0x10A315C", VA = "0x10A315C")]
		private void AddVector3(ref string[] content, int index, Vector3 vector)
		{
		}

		[Token(Token = "0x600185F")]
		[Address(RVA = "0x10A32C4", Offset = "0x10A32C4", VA = "0x10A32C4")]
		private void AddColor(ref string[] content, int index, Color color)
		{
		}

		[Token(Token = "0x6001860")]
		[Address(RVA = "0x10A31AC", Offset = "0x10A31AC", VA = "0x10A31AC")]
		private void AddFloat(ref string[] content, int index, float value)
		{
		}

		[Token(Token = "0x6001861")]
		[Address(RVA = "0x10A3330", Offset = "0x10A3330", VA = "0x10A3330")]
		public void Write(string filePath)
		{
		}
	}
	[Token(Token = "0x200033C")]
	public class SVG : SplineParser
	{
		[Token(Token = "0x20004E3")]
		public enum Axis
		{
			[Token(Token = "0x4001ED7")]
			X,
			[Token(Token = "0x4001ED8")]
			Y,
			[Token(Token = "0x4001ED9")]
			Z
		}

		[Token(Token = "0x20004E4")]
		internal class PathSegment
		{
			[Token(Token = "0x2000503")]
			internal enum Type
			{
				[Token(Token = "0x4001F2B")]
				Cubic,
				[Token(Token = "0x4001F2C")]
				CubicShort,
				[Token(Token = "0x4001F2D")]
				Quadratic,
				[Token(Token = "0x4001F2E")]
				QuadraticShort
			}

			[Token(Token = "0x4001EDA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal Vector3 startTangent;

			[Token(Token = "0x4001EDB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			internal Vector3 endTangent;

			[Token(Token = "0x4001EDC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal Vector3 endPoint;

			[Token(Token = "0x6001D7A")]
			[Address(RVA = "0xFF2058", Offset = "0xFF2058", VA = "0xFF2058")]
			internal PathSegment(Vector2 s, Vector2 e, Vector2 c)
			{
			}

			[Token(Token = "0x6001D7B")]
			[Address(RVA = "0xFF20F8", Offset = "0xFF20F8", VA = "0xFF20F8")]
			internal PathSegment()
			{
			}
		}

		[Token(Token = "0x20004E5")]
		public enum Element
		{
			[Token(Token = "0x4001EDE")]
			All,
			[Token(Token = "0x4001EDF")]
			Path,
			[Token(Token = "0x4001EE0")]
			Polygon,
			[Token(Token = "0x4001EE1")]
			Ellipse,
			[Token(Token = "0x4001EE2")]
			Rectangle,
			[Token(Token = "0x4001EE3")]
			Line
		}

		[Serializable]
		[Token(Token = "0x20004E6")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CE2A4", Offset = "0x5CE2A4")]
		private sealed class <>c
		{
			[Token(Token = "0x4001EE4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4001EE5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<string, bool> <>9__23_0;

			[Token(Token = "0x6001D7D")]
			[Address(RVA = "0xFF202C", Offset = "0xFF202C", VA = "0xFF202C")]
			public <>c()
			{
			}

			[Token(Token = "0x6001D7E")]
			[Address(RVA = "0xFF2034", Offset = "0xFF2034", VA = "0xFF2034")]
			internal bool <ReadPath>b__23_0(string t)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x40016A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<SplineDefinition> paths;

		[Token(Token = "0x40016A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<SplineDefinition> polygons;

		[Token(Token = "0x40016A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<SplineDefinition> ellipses;

		[Token(Token = "0x40016A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<SplineDefinition> rectangles;

		[Token(Token = "0x40016A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<SplineDefinition> lines;

		[Token(Token = "0x40016AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<Transformation> transformBuffer;

		[Token(Token = "0x6001862")]
		[Address(RVA = "0xCD42C8", Offset = "0xCD42C8", VA = "0xCD42C8")]
		public SVG(string filePath)
		{
		}

		[Token(Token = "0x6001863")]
		[Address(RVA = "0xCD4728", Offset = "0xCD4728", VA = "0xCD4728")]
		public SVG(List<SplineComputer> computers)
		{
		}

		[Token(Token = "0x6001864")]
		[Address(RVA = "0xCD4B44", Offset = "0xCD4B44", VA = "0xCD4B44")]
		public void Write(string filePath, Axis ax = Axis.Z)
		{
		}

		[Token(Token = "0x6001865")]
		[Address(RVA = "0xCD59A4", Offset = "0xCD59A4", VA = "0xCD59A4")]
		private Vector2 MapPoint(Vector3 original, Axis ax)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001866")]
		[Address(RVA = "0xCD46A4", Offset = "0xCD46A4", VA = "0xCD46A4")]
		private void Read(XmlDocument doc)
		{
		}

		[Token(Token = "0x6001867")]
		[Address(RVA = "0xCD59D4", Offset = "0xCD59D4", VA = "0xCD59D4")]
		private void Traverse(XmlNodeList nodes)
		{
		}

		[Token(Token = "0x6001868")]
		[Address(RVA = "0xCD764C", Offset = "0xCD764C", VA = "0xCD764C")]
		public List<SplineComputer> CreateSplineComputers(Vector3 position, Quaternion rotation, Element elements = Element.All)
		{
			return null;
		}

		[Token(Token = "0x6001869")]
		[Address(RVA = "0xCD7D64", Offset = "0xCD7D64", VA = "0xCD7D64")]
		public List<Spline> CreateSplines(Element elements = Element.All)
		{
			return null;
		}

		[Token(Token = "0x600186A")]
		[Address(RVA = "0xCD71CC", Offset = "0xCD71CC", VA = "0xCD71CC")]
		private int ReadRectangle(XmlNode rectNode)
		{
			return default(int);
		}

		[Token(Token = "0x600186B")]
		[Address(RVA = "0xCD6EE8", Offset = "0xCD6EE8", VA = "0xCD6EE8")]
		private int ReadLine(XmlNode lineNode)
		{
			return default(int);
		}

		[Token(Token = "0x600186C")]
		[Address(RVA = "0xCD6B7C", Offset = "0xCD6B7C", VA = "0xCD6B7C")]
		private int ReadEllipse(XmlNode ellipseNode)
		{
			return default(int);
		}

		[Token(Token = "0x600186D")]
		[Address(RVA = "0xCD6864", Offset = "0xCD6864", VA = "0xCD6864")]
		private int ReadPolygon(XmlNode polyNode, bool closed)
		{
			return default(int);
		}

		[Token(Token = "0x600186E")]
		[Address(RVA = "0xCD5FD4", Offset = "0xCD5FD4", VA = "0xCD5FD4")]
		private int ParseTransformation(XmlNode node)
		{
			return default(int);
		}

		[Token(Token = "0x600186F")]
		[Address(RVA = "0xCD8574", Offset = "0xCD8574", VA = "0xCD8574")]
		private List<Transformation> ParseTransformations(string transformContent)
		{
			return null;
		}

		[Token(Token = "0x6001870")]
		[Address(RVA = "0xCD60B0", Offset = "0xCD60B0", VA = "0xCD60B0")]
		private int ReadPath(XmlNode pathNode)
		{
			return default(int);
		}

		[Token(Token = "0x6001871")]
		[Address(RVA = "0xCD90C0", Offset = "0xCD90C0", VA = "0xCD90C0")]
		private void PathStart(string name, string coords, bool relative)
		{
		}

		[Token(Token = "0x6001872")]
		[Address(RVA = "0xCD920C", Offset = "0xCD920C", VA = "0xCD920C")]
		private void PathClose()
		{
		}

		[Token(Token = "0x6001873")]
		[Address(RVA = "0xCD922C", Offset = "0xCD922C", VA = "0xCD922C")]
		private void PathLineTo(string coords, bool relative)
		{
		}

		[Token(Token = "0x6001874")]
		[Address(RVA = "0xCD92FC", Offset = "0xCD92FC", VA = "0xCD92FC")]
		private void PathHorizontalLineTo(string coords, bool relative)
		{
		}

		[Token(Token = "0x6001875")]
		[Address(RVA = "0xCD93A8", Offset = "0xCD93A8", VA = "0xCD93A8")]
		private void PathVerticalLineTo(string coords, bool relative)
		{
		}

		[Token(Token = "0x6001876")]
		[Address(RVA = "0xCD945C", Offset = "0xCD945C", VA = "0xCD945C")]
		private void PathCurveTo(string coords, PathSegment.Type type, bool relative)
		{
		}

		[Token(Token = "0x6001877")]
		[Address(RVA = "0xCD84E8", Offset = "0xCD84E8", VA = "0xCD84E8")]
		private void WriteBufferTo(List<SplineDefinition> list)
		{
		}

		[Token(Token = "0x6001878")]
		[Address(RVA = "0xCD9704", Offset = "0xCD9704", VA = "0xCD9704")]
		private PathSegment[] ParsePathSegment(string coord, PathSegment.Type type)
		{
			return null;
		}

		[Token(Token = "0x6001879")]
		[Address(RVA = "0xCD5384", Offset = "0xCD5384", VA = "0xCD5384")]
		private string EncodePath(SplineDefinition definition, Axis ax)
		{
			return null;
		}

		[Token(Token = "0x600187A")]
		[Address(RVA = "0xCD51DC", Offset = "0xCD51DC", VA = "0xCD51DC")]
		private string EncodePolygon(SplineDefinition definition, Axis ax)
		{
			return null;
		}

		[Token(Token = "0x600187B")]
		[Address(RVA = "0xCD83B4", Offset = "0xCD83B4", VA = "0xCD83B4")]
		private string GetAttributeContent(XmlNode node, string attributeName)
		{
			return null;
		}
	}
	[Token(Token = "0x200033D")]
	public class SplineParser
	{
		[Token(Token = "0x20004E7")]
		internal class Transformation
		{
			[Token(Token = "0x4001EE6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			protected static Matrix4x4 matrix;

			[Token(Token = "0x6001D7F")]
			[Address(RVA = "0x1389250", Offset = "0x1389250", VA = "0x1389250")]
			internal static void ResetMatrix()
			{
			}

			[Token(Token = "0x6001D80")]
			[Address(RVA = "0x13894E4", Offset = "0x13894E4", VA = "0x13894E4", Slot = "4")]
			internal virtual void Push()
			{
			}

			[Token(Token = "0x6001D81")]
			[Address(RVA = "0x1389338", Offset = "0x1389338", VA = "0x1389338")]
			internal static void Apply(SplinePoint[] points)
			{
			}

			[Token(Token = "0x6001D82")]
			[Address(RVA = "0x1387BA0", Offset = "0x1387BA0", VA = "0x1387BA0")]
			public Transformation()
			{
			}
		}

		[Token(Token = "0x20004E8")]
		internal class Translate : Transformation
		{
			[Token(Token = "0x4001EE7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private Vector2 offset;

			[Token(Token = "0x6001D84")]
			[Address(RVA = "0x13894EC", Offset = "0x13894EC", VA = "0x13894EC")]
			public Translate(Vector2 o)
			{
			}

			[Token(Token = "0x6001D85")]
			[Address(RVA = "0x1389574", Offset = "0x1389574", VA = "0x1389574", Slot = "4")]
			internal override void Push()
			{
			}
		}

		[Token(Token = "0x20004E9")]
		internal class Rotate : Transformation
		{
			[Token(Token = "0x4001EE8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private float angle;

			[Token(Token = "0x6001D86")]
			[Address(RVA = "0x1387C88", Offset = "0x1387C88", VA = "0x1387C88")]
			public Rotate(float a)
			{
			}

			[Token(Token = "0x6001D87")]
			[Address(RVA = "0x1387D00", Offset = "0x1387D00", VA = "0x1387D00", Slot = "4")]
			internal override void Push()
			{
			}
		}

		[Token(Token = "0x20004EA")]
		internal class Scale : Transformation
		{
			[Token(Token = "0x4001EE9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private Vector2 multiplier;

			[Token(Token = "0x6001D88")]
			[Address(RVA = "0x1387E98", Offset = "0x1387E98", VA = "0x1387E98")]
			public Scale(Vector2 s)
			{
			}

			[Token(Token = "0x6001D89")]
			[Address(RVA = "0x1387F20", Offset = "0x1387F20", VA = "0x1387F20", Slot = "4")]
			internal override void Push()
			{
			}
		}

		[Token(Token = "0x20004EB")]
		internal class SkewX : Transformation
		{
			[Token(Token = "0x4001EEA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private float amount;

			[Token(Token = "0x6001D8A")]
			[Address(RVA = "0x138807C", Offset = "0x138807C", VA = "0x138807C")]
			public SkewX(float a)
			{
			}

			[Token(Token = "0x6001D8B")]
			[Address(RVA = "0x13880F4", Offset = "0x13880F4", VA = "0x13880F4", Slot = "4")]
			internal override void Push()
			{
			}
		}

		[Token(Token = "0x20004EC")]
		internal class SkewY : Transformation
		{
			[Token(Token = "0x4001EEB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private float amount;

			[Token(Token = "0x6001D8C")]
			[Address(RVA = "0x1388274", Offset = "0x1388274", VA = "0x1388274")]
			public SkewY(float a)
			{
			}

			[Token(Token = "0x6001D8D")]
			[Address(RVA = "0x13882EC", Offset = "0x13882EC", VA = "0x13882EC", Slot = "4")]
			internal override void Push()
			{
			}
		}

		[Token(Token = "0x20004ED")]
		internal class MatrixTransform : Transformation
		{
			[Token(Token = "0x4001EEC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private Matrix4x4 transformMatrix;

			[Token(Token = "0x6001D8E")]
			[Address(RVA = "0x1387A18", Offset = "0x1387A18", VA = "0x1387A18")]
			public MatrixTransform(float a, float b, float c, float d, float e, float f)
			{
			}

			[Token(Token = "0x6001D8F")]
			[Address(RVA = "0x1387BA8", Offset = "0x1387BA8", VA = "0x1387BA8", Slot = "4")]
			internal override void Push()
			{
			}
		}

		[Token(Token = "0x20004EE")]
		internal class SplineDefinition
		{
			[Token(Token = "0x4001EED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal string name;

			[Token(Token = "0x4001EEE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal Spline.Type type;

			[Token(Token = "0x4001EEF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal List<SplinePoint> points;

			[Token(Token = "0x4001EF0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal bool closed;

			[Token(Token = "0x4001EF1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			internal Vector3 position;

			[Token(Token = "0x4001EF2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			internal Vector3 tangent;

			[Token(Token = "0x4001EF3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			internal Vector3 tangent2;

			[Token(Token = "0x4001EF4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			internal Vector3 normal;

			[Token(Token = "0x4001EF5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			internal float size;

			[Token(Token = "0x4001EF6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			internal Color color;

			[Token(Token = "0x170003C4")]
			internal int pointCount
			{
				[Token(Token = "0x6001D90")]
				[Address(RVA = "0x138846C", Offset = "0x138846C", VA = "0x138846C")]
				get
				{
					return default(int);
				}
			}

			[Token(Token = "0x6001D91")]
			[Address(RVA = "0x13884B8", Offset = "0x13884B8", VA = "0x13884B8")]
			internal SplineDefinition(string n, Spline.Type t)
			{
			}

			[Token(Token = "0x6001D92")]
			[Address(RVA = "0x13885F4", Offset = "0x13885F4", VA = "0x13885F4")]
			internal SplineDefinition(string n, Spline spline)
			{
			}

			[Token(Token = "0x6001D93")]
			[Address(RVA = "0x1388798", Offset = "0x1388798", VA = "0x1388798")]
			internal SplinePoint GetLastPoint()
			{
				return default(SplinePoint);
			}

			[Token(Token = "0x6001D94")]
			[Address(RVA = "0x1388834", Offset = "0x1388834", VA = "0x1388834")]
			internal void SetLastPoint(SplinePoint point)
			{
			}

			[Token(Token = "0x6001D95")]
			[Address(RVA = "0x13888E8", Offset = "0x13888E8", VA = "0x13888E8")]
			internal void CreateClosingPoint()
			{
			}

			[Token(Token = "0x6001D96")]
			[Address(RVA = "0x13889D4", Offset = "0x13889D4", VA = "0x13889D4")]
			internal void CreateSmooth()
			{
			}

			[Token(Token = "0x6001D97")]
			[Address(RVA = "0x1388AF4", Offset = "0x1388AF4", VA = "0x1388AF4")]
			internal void CreateBroken()
			{
			}

			[Token(Token = "0x6001D98")]
			[Address(RVA = "0x1388C90", Offset = "0x1388C90", VA = "0x1388C90")]
			internal void CreateLinear()
			{
			}

			[Token(Token = "0x6001D99")]
			[Address(RVA = "0x1388CA4", Offset = "0x1388CA4", VA = "0x1388CA4")]
			internal SplineComputer CreateSplineComputer(Vector3 position, Quaternion rotation)
			{
				return null;
			}

			[Token(Token = "0x6001D9A")]
			[Address(RVA = "0x1388ED0", Offset = "0x1388ED0", VA = "0x1388ED0")]
			internal Spline CreateSpline()
			{
				return null;
			}

			[Token(Token = "0x6001D9B")]
			[Address(RVA = "0x1388F8C", Offset = "0x1388F8C", VA = "0x1388F8C")]
			internal void Transform(List<Transformation> trs)
			{
			}
		}

		[Token(Token = "0x40016AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected string fileName;

		[Token(Token = "0x40016AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal SplineDefinition buffer;

		[Token(Token = "0x17000269")]
		public string name
		{
			[Token(Token = "0x600187C")]
			[Address(RVA = "0x13A867C", Offset = "0x13A867C", VA = "0x13A867C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600187D")]
		[Address(RVA = "0x13A8684", Offset = "0x13A8684", VA = "0x13A8684")]
		internal Vector2[] ParseVector2(string coord)
		{
			return null;
		}

		[Token(Token = "0x600187E")]
		[Address(RVA = "0x13A8AB8", Offset = "0x13A8AB8", VA = "0x13A8AB8")]
		internal float[] ParseFloat(string coord)
		{
			return null;
		}

		[Token(Token = "0x600187F")]
		[Address(RVA = "0x13A887C", Offset = "0x13A887C", VA = "0x13A887C")]
		internal List<float> ParseFloatArray(string content)
		{
			return null;
		}

		[Token(Token = "0x6001880")]
		[Address(RVA = "0x13A8BDC", Offset = "0x13A8BDC", VA = "0x13A8BDC")]
		public bool IsWHiteSpace(string s)
		{
			return default(bool);
		}

		[Token(Token = "0x6001881")]
		[Address(RVA = "0x13A8C9C", Offset = "0x13A8C9C", VA = "0x13A8C9C")]
		public SplineParser()
		{
		}
	}
}
namespace AmplifyImpostors
{
	[Token(Token = "0x200033E")]
	public enum LODReplacement
	{
		[Token(Token = "0x40016AE")]
		DoNothing,
		[Token(Token = "0x40016AF")]
		ReplaceCulled,
		[Token(Token = "0x40016B0")]
		ReplaceLast,
		[Token(Token = "0x40016B1")]
		ReplaceAllExceptFirst,
		[Token(Token = "0x40016B2")]
		ReplaceSpecific,
		[Token(Token = "0x40016B3")]
		ReplaceAfterSpecific,
		[Token(Token = "0x40016B4")]
		InsertAfter
	}
	[Token(Token = "0x200033F")]
	public enum CutMode
	{
		[Token(Token = "0x40016B6")]
		Automatic,
		[Token(Token = "0x40016B7")]
		Manual
	}
	[Token(Token = "0x2000340")]
	public enum FolderMode
	{
		[Token(Token = "0x40016B9")]
		RelativeToPrefab,
		[Token(Token = "0x40016BA")]
		Global
	}
	[Token(Token = "0x2000341")]
	public class AmplifyImpostor : MonoBehaviour
	{
		[Token(Token = "0x40016BB")]
		private const string ShaderGUID = "e82933f4c0eb9ba42aab0739f48efe21";

		[Token(Token = "0x40016BC")]
		private const string DilateGUID = "57c23892d43bc9f458360024c5985405";

		[Token(Token = "0x40016BD")]
		private const string PackerGUID = "31bd3cd74692f384a916d9d7ea87710d";

		[Token(Token = "0x40016BE")]
		private const string ShaderOctaGUID = "572f9be5706148142b8da6e9de53acdb";

		[Token(Token = "0x40016BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private AmplifyImpostorAsset m_data;

		[Token(Token = "0x40016C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Transform m_rootTransform;

		[Token(Token = "0x40016C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private LODGroup m_lodGroup;

		[Token(Token = "0x40016C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Renderer[] m_renderers;

		[Token(Token = "0x40016C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public LODReplacement m_lodReplacement;

		[Token(Token = "0x40016C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public int m_insertIndex;

		[Token(Token = "0x40016C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		public GameObject m_lastImpostor;

		[Token(Token = "0x40016C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		public string m_folderPath;

		[Token(Token = "0x40016C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		public string m_impostorName;

		[Token(Token = "0x40016C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		public CutMode m_cutMode;

		[NonSerialized]
		[Token(Token = "0x40016C9")]
		private const float StartXRotation = -90f;

		[NonSerialized]
		[Token(Token = "0x40016CA")]
		private const float StartYRotation = 90f;

		[NonSerialized]
		[Token(Token = "0x40016CB")]
		private const int MinAlphaResolution = 256;

		[NonSerialized]
		[Token(Token = "0x40016CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private RenderTexture[] m_rtGBuffers;

		[NonSerialized]
		[Token(Token = "0x40016CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private RenderTexture[] m_alphaGBuffers;

		[NonSerialized]
		[Token(Token = "0x40016CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private RenderTexture m_trueDepth;

		[NonSerialized]
		[Token(Token = "0x40016CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Texture2D m_alphaTex;

		[NonSerialized]
		[Token(Token = "0x40016D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private RenderTexture m_combinedAlphaTexture;

		[NonSerialized]
		[Token(Token = "0x40016D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float m_trueFitsize;

		[NonSerialized]
		[Token(Token = "0x40016D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float m_depthFitsize;

		[NonSerialized]
		[Token(Token = "0x40016D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Bounds m_originalBound;

		[Token(Token = "0x1700026A")]
		public AmplifyImpostorAsset Data
		{
			[Token(Token = "0x6001882")]
			[Address(RVA = "0xC0B274", Offset = "0xC0B274", VA = "0xC0B274")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001883")]
			[Address(RVA = "0xC0B27C", Offset = "0xC0B27C", VA = "0xC0B27C")]
			set
			{
			}
		}

		[Token(Token = "0x1700026B")]
		public Transform RootTransform
		{
			[Token(Token = "0x6001884")]
			[Address(RVA = "0xC0B284", Offset = "0xC0B284", VA = "0xC0B284")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001885")]
			[Address(RVA = "0xC0B28C", Offset = "0xC0B28C", VA = "0xC0B28C")]
			set
			{
			}
		}

		[Token(Token = "0x1700026C")]
		public LODGroup LodGroup
		{
			[Token(Token = "0x6001886")]
			[Address(RVA = "0xC0B294", Offset = "0xC0B294", VA = "0xC0B294")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001887")]
			[Address(RVA = "0xC0B29C", Offset = "0xC0B29C", VA = "0xC0B29C")]
			set
			{
			}
		}

		[Token(Token = "0x1700026D")]
		public Renderer[] Renderers
		{
			[Token(Token = "0x6001888")]
			[Address(RVA = "0xC0B2A4", Offset = "0xC0B2A4", VA = "0xC0B2A4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001889")]
			[Address(RVA = "0xC0B2AC", Offset = "0xC0B2AC", VA = "0xC0B2AC")]
			set
			{
			}
		}

		[Token(Token = "0x1700026E")]
		public RenderTexture CombinedAlphaTexture
		{
			[Token(Token = "0x600188A")]
			[Address(RVA = "0xC0B2B4", Offset = "0xC0B2B4", VA = "0xC0B2B4")]
			get
			{
				return null;
			}
			[Token(Token = "0x600188B")]
			[Address(RVA = "0xC0B2BC", Offset = "0xC0B2BC", VA = "0xC0B2BC")]
			set
			{
			}
		}

		[Token(Token = "0x600188C")]
		[Address(RVA = "0xC0B2C4", Offset = "0xC0B2C4", VA = "0xC0B2C4")]
		private void GenerateTextures()
		{
		}

		[Token(Token = "0x600188D")]
		[Address(RVA = "0xC0B578", Offset = "0xC0B578", VA = "0xC0B578")]
		private void GenerateAlphaTextures(bool useMinResolution = false)
		{
		}

		[Token(Token = "0x600188E")]
		[Address(RVA = "0xC0B740", Offset = "0xC0B740", VA = "0xC0B740")]
		private void ClearBuffers()
		{
		}

		[Token(Token = "0x600188F")]
		[Address(RVA = "0xC0B7F4", Offset = "0xC0B7F4", VA = "0xC0B7F4")]
		private void ClearAlphaBuffers(bool clearCombinedRT = false)
		{
		}

		[Token(Token = "0x6001890")]
		[Address(RVA = "0xC0B8CC", Offset = "0xC0B8CC", VA = "0xC0B8CC")]
		public void ClearCombinedAlphaBuffer()
		{
		}

		[Token(Token = "0x6001891")]
		[Address(RVA = "0xC0B914", Offset = "0xC0B914", VA = "0xC0B914")]
		public void RenderImpostor(ImpostorType impostorType, bool impostorMaps = true, bool combinedAlphas = false, bool useMinResolution = false)
		{
		}

		[Token(Token = "0x6001892")]
		[Address(RVA = "0xC0CBC0", Offset = "0xC0CBC0", VA = "0xC0CBC0")]
		private Vector3 OctahedronToVector(Vector2 oct)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001893")]
		[Address(RVA = "0xC0CB20", Offset = "0xC0CB20", VA = "0xC0CB20")]
		private Vector3 OctahedronToVector(float x, float y)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001894")]
		[Address(RVA = "0xC0CB90", Offset = "0xC0CB90", VA = "0xC0CB90")]
		private Vector3 HemiOctahedronToVector(float x, float y)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001895")]
		[Address(RVA = "0xC0CC30", Offset = "0xC0CC30", VA = "0xC0CC30")]
		public Mesh GenerateMesh(Vector2[] points, Vector3 offset, float width = 1f, float height = 1f, bool invertY = true)
		{
			return null;
		}

		[Token(Token = "0x6001896")]
		[Address(RVA = "0xC0CFB4", Offset = "0xC0CFB4", VA = "0xC0CFB4")]
		public AmplifyImpostor()
		{
		}
	}
	[Token(Token = "0x2000342")]
	public static class BoundsEx
	{
		[Token(Token = "0x6001897")]
		[Address(RVA = "0x10A0F38", Offset = "0x10A0F38", VA = "0x10A0F38")]
		public static Bounds Transform(this Bounds bounds, Matrix4x4 matrix)
		{
			return default(Bounds);
		}
	}
	[Token(Token = "0x2000343")]
	public static class SpriteUtilityEx
	{
		[Token(Token = "0x40016D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Type type;

		[Token(Token = "0x1700026F")]
		public static Type Type
		{
			[Token(Token = "0x6001898")]
			[Address(RVA = "0x13AF304", Offset = "0x13AF304", VA = "0x13AF304")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001899")]
		[Address(RVA = "0x13AF478", Offset = "0x13AF478", VA = "0x13AF478")]
		public static void GenerateOutline(Texture2D texture, Rect rect, float detail, byte alphaTolerance, bool holeDetection, out Vector2[][] paths)
		{
		}
	}
	[Token(Token = "0x2000344")]
	public static class Vector2Ex
	{
		[Serializable]
		[Token(Token = "0x20004EF")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5CE2B4", Offset = "0x5CE2B4")]
		private sealed class <>c
		{
			[Token(Token = "0x4001EF7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4001EF8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Comparison<Vector2> <>9__3_0;

			[Token(Token = "0x6001D9D")]
			[Address(RVA = "0x138CC40", Offset = "0x138CC40", VA = "0x138CC40")]
			public <>c()
			{
			}

			[Token(Token = "0x6001D9E")]
			[Address(RVA = "0x138CC48", Offset = "0x138CC48", VA = "0x138CC48")]
			internal int <ConvexHull>b__3_0(Vector2 a, Vector2 b)
			{
				return default(int);
			}
		}

		[Token(Token = "0x600189B")]
		[Address(RVA = "0xD0CD3C", Offset = "0xD0CD3C", VA = "0xD0CD3C")]
		public static float Cross(this Vector2 O, Vector2 A, Vector2 B)
		{
			return default(float);
		}

		[Token(Token = "0x600189C")]
		[Address(RVA = "0xD0CD5C", Offset = "0xD0CD5C", VA = "0xD0CD5C")]
		public static float TriangleArea(this Vector2 O, Vector2 A, Vector2 B)
		{
			return default(float);
		}

		[Token(Token = "0x600189D")]
		[Address(RVA = "0xD0CD84", Offset = "0xD0CD84", VA = "0xD0CD84")]
		public static float TriangleArea(this Vector3 O, Vector3 A, Vector3 B)
		{
			return default(float);
		}

		[Token(Token = "0x600189E")]
		[Address(RVA = "0xD0CDB0", Offset = "0xD0CDB0", VA = "0xD0CDB0")]
		public static Vector2[] ConvexHull(Vector2[] P)
		{
			return null;
		}

		[Token(Token = "0x600189F")]
		[Address(RVA = "0xD0D110", Offset = "0xD0D110", VA = "0xD0D110")]
		public static Vector2[] ScaleAlongNormals(Vector2[] P, float scaleAmount)
		{
			return null;
		}

		[Token(Token = "0x60018A0")]
		[Address(RVA = "0xD0D2DC", Offset = "0xD0D2DC", VA = "0xD0D2DC")]
		private static Vector2 GetIntersectionPointCoordinates(Vector2 A1, Vector2 A2, Vector2 B1, Vector2 B2)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60018A1")]
		[Address(RVA = "0xD0D3D4", Offset = "0xD0D3D4", VA = "0xD0D3D4")]
		private static float OutsideBounds(Vector2 P)
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000345")]
	public static class ImpostorBakingTools
	{
		[Token(Token = "0x40016D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly string PrefGlobalFolder;

		[Token(Token = "0x40016D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly string PrefGlobalRelativeFolder;

		[Token(Token = "0x40016D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly string PrefGlobalDefault;

		[Token(Token = "0x40016D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly string PrefGlobalTexImport;

		[Token(Token = "0x40016D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly string PrefGlobalCreateLodGroup;

		[Token(Token = "0x40016DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static readonly string PrefGlobalGBuffer0Name;

		[Token(Token = "0x40016DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static readonly string PrefGlobalGBuffer1Name;

		[Token(Token = "0x40016DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static readonly string PrefGlobalGBuffer2Name;

		[Token(Token = "0x40016DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public static readonly string PrefGlobalGBuffer3Name;

		[Token(Token = "0x40016DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public static readonly string PrefGlobalBakingOptions;

		[Token(Token = "0x40016DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public static readonly string PrefDataImpType;

		[Token(Token = "0x40016E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public static readonly string PrefDataTexSizeLocked;

		[Token(Token = "0x40016E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public static readonly string PrefDataTexSizeSelected;

		[Token(Token = "0x40016E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public static readonly string PrefDataTexSizeX;

		[Token(Token = "0x40016E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public static readonly string PrefDataTexSizeY;

		[Token(Token = "0x40016E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public static readonly string PrefDataDecoupledFrames;

		[Token(Token = "0x40016E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public static readonly string PrefDataXFrames;

		[Token(Token = "0x40016E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public static readonly string PrefDataYFrames;

		[Token(Token = "0x40016E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public static readonly string PrefDataPixelBleeding;

		[Token(Token = "0x40016E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public static readonly string PrefDataTolerance;

		[Token(Token = "0x40016E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public static readonly string PrefDataNormalScale;

		[Token(Token = "0x40016EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public static readonly string PrefDataMaxVertices;
	}
	[Token(Token = "0x2000346")]
	public class Triangulator
	{
		[Token(Token = "0x40016EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<Vector2> m_points;

		[Token(Token = "0x17000270")]
		public List<Vector2> Points
		{
			[Token(Token = "0x60018A3")]
			[Address(RVA = "0xBCBB08", Offset = "0xBCBB08", VA = "0xBCBB08")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60018A4")]
		[Address(RVA = "0xBCBB10", Offset = "0xBCBB10", VA = "0xBCBB10")]
		public Triangulator(Vector2[] points)
		{
		}

		[Token(Token = "0x60018A5")]
		[Address(RVA = "0xBCBBE8", Offset = "0xBCBBE8", VA = "0xBCBBE8")]
		public Triangulator(Vector2[] points, bool invertY = true)
		{
		}

		[Token(Token = "0x60018A6")]
		[Address(RVA = "0xBCBD8C", Offset = "0xBCBD8C", VA = "0xBCBD8C")]
		public int[] Triangulate()
		{
			return null;
		}

		[Token(Token = "0x60018A7")]
		[Address(RVA = "0xBCC05C", Offset = "0xBCC05C", VA = "0xBCC05C")]
		private float Area()
		{
			return default(float);
		}

		[Token(Token = "0x60018A8")]
		[Address(RVA = "0xBCC180", Offset = "0xBCC180", VA = "0xBCC180")]
		private bool Snip(int u, int v, int w, int n, int[] V)
		{
			return default(bool);
		}

		[Token(Token = "0x60018A9")]
		[Address(RVA = "0xBCC3C4", Offset = "0xBCC3C4", VA = "0xBCC3C4")]
		private bool InsideTriangle(Vector2 pt, Vector2 v1, Vector2 v2, Vector2 v3)
		{
			return default(bool);
		}
	}
	[Serializable]
	[Token(Token = "0x2000347")]
	public class VersionInfo
	{
		[Token(Token = "0x40016EC")]
		public const byte Major = 0;

		[Token(Token = "0x40016ED")]
		public const byte Minor = 8;

		[Token(Token = "0x40016EE")]
		public const byte Release = 4;

		[Token(Token = "0x40016EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static byte Revision;

		[Token(Token = "0x17000271")]
		public static int FullNumber
		{
			[Token(Token = "0x60018AB")]
			[Address(RVA = "0xD0D7F4", Offset = "0xD0D7F4", VA = "0xD0D7F4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000272")]
		public static string FullLabel
		{
			[Token(Token = "0x60018AC")]
			[Address(RVA = "0xD0D860", Offset = "0xD0D860", VA = "0xD0D860")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60018AA")]
		[Address(RVA = "0xD0D674", Offset = "0xD0D674", VA = "0xD0D674")]
		public static string StaticToString()
		{
			return null;
		}

		[Token(Token = "0x60018AD")]
		[Address(RVA = "0xD0D8F8", Offset = "0xD0D8F8", VA = "0xD0D8F8")]
		public VersionInfo()
		{
		}
	}
}
