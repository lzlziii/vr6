using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using BNG;
using ClipperLib;
using EVP;
using Es.InkPainter.Effective;
using FIMSpace.Basics;
using FIMSpace.FTail;
using FIMSpace.FTools;
using Il2CppDummyDll;
using TMPro;
using TriangleNet.Geometry;
using TriangleNet.Logging;
using TriangleNet.Meshing;
using TriangleNet.Meshing.Data;
using TriangleNet.Meshing.Iterators;
using TriangleNet.Topology;
using TriangleNet.Topology.DCEL;
using UnityEngine;
using UnityEngine.Animations;
using UnityEngine.Audio;
using UnityEngine.EventSystems;
using UnityEngine.Events;
using UnityEngine.InputSystem;
using UnityEngine.SceneManagement;
using UnityEngine.Serialization;
using UnityEngine.UI;
using UnityEngine.XR;

[assembly: AssemblyVersion("1.0.0.0")]
[Token(Token = "0x2000002")]
public class AI_MovementLimitation : MonoBehaviour
{
	[Token(Token = "0x4000001")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float movementSpeed;

	[Token(Token = "0x4000002")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private bool isCanMove;

	[Token(Token = "0x4000003")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float TimeTostopWalk;

	[Token(Token = "0x4000004")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float timer;

	[Token(Token = "0x4000005")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Transform PlayerTrans;

	[Token(Token = "0x4000006")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float distanceFromPlayer;

	[Token(Token = "0x4000007")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Animation ani_Chicken;

	[Token(Token = "0x4000008")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool isWalk;

	[Token(Token = "0x4000009")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	public bool isFeed;

	[Token(Token = "0x400000A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Transform target;

	[Token(Token = "0x400000B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float speed;

	[Token(Token = "0x400000C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private bool isReach;

	[Token(Token = "0x400000D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private int rndmspeed;

	[Token(Token = "0x400000E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private bool isGoesRun;

	[Token(Token = "0x400000F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Transform TargetSpotLight;

	[Token(Token = "0x6000001")]
	[Address(RVA = "0x985C34", Offset = "0x985C34", VA = "0x985C34")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000002")]
	[Address(RVA = "0x985D28", Offset = "0x985D28", VA = "0x985D28")]
	private void Start()
	{
	}

	[Token(Token = "0x6000003")]
	[Address(RVA = "0x985DD8", Offset = "0x985DD8", VA = "0x985DD8")]
	private void AI_Movement()
	{
	}

	[Token(Token = "0x6000004")]
	[Address(RVA = "0x9863B0", Offset = "0x9863B0", VA = "0x9863B0")]
	private void Distance()
	{
	}

	[Token(Token = "0x6000005")]
	[Address(RVA = "0x98653C", Offset = "0x98653C", VA = "0x98653C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000006")]
	[Address(RVA = "0x986800", Offset = "0x986800", VA = "0x986800")]
	public AI_MovementLimitation()
	{
	}
}
[Token(Token = "0x2000003")]
public class AnimalGrabScript : MonoBehaviour
{
	[Token(Token = "0x2000004")]
	[CompilerGenerated]
	private sealed class <WaitforDisable>d__16 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400001B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400001C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400001D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AnimalGrabScript <>4__this;

		[Token(Token = "0x17000001")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000012")]
			[Address(RVA = "0x986DB0", Offset = "0x986DB0", VA = "0x986DB0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000002")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000014")]
			[Address(RVA = "0x986DF8", Offset = "0x986DF8", VA = "0x986DF8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600000F")]
		[Address(RVA = "0x986C04", Offset = "0x986C04", VA = "0x986C04")]
		[DebuggerHidden]
		public <WaitforDisable>d__16(int <>1__state)
		{
		}

		[Token(Token = "0x6000010")]
		[Address(RVA = "0x986CC0", Offset = "0x986CC0", VA = "0x986CC0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000011")]
		[Address(RVA = "0x986CC4", Offset = "0x986CC4", VA = "0x986CC4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000013")]
		[Address(RVA = "0x986DB8", Offset = "0x986DB8", VA = "0x986DB8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000010")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Initial Z Position")]
	public float InitialZPosition;

	[Token(Token = "0x4000011")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float MinimumZPosition;

	[Token(Token = "0x4000012")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float MaximumZPosition;

	[Token(Token = "0x4000013")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Grabbable grab;

	[Token(Token = "0x4000014")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Animation animal_anim;

	[Token(Token = "0x4000015")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool isReach;

	[Token(Token = "0x4000016")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	private bool isJump;

	[Token(Token = "0x4000017")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private Vector3 currentPosition;

	[Token(Token = "0x4000018")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int AnimalCount;

	[Token(Token = "0x4000019")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public int TotalAnimal;

	[Token(Token = "0x400001A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Rigidbody rb;

	[Token(Token = "0x6000007")]
	[Address(RVA = "0x986828", Offset = "0x986828", VA = "0x986828")]
	private void Start()
	{
	}

	[Token(Token = "0x6000008")]
	[Address(RVA = "0x9868B8", Offset = "0x9868B8", VA = "0x9868B8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000009")]
	[Address(RVA = "0x98690C", Offset = "0x98690C", VA = "0x98690C")]
	private void Awake()
	{
	}

	[Token(Token = "0x600000A")]
	[Address(RVA = "0x986984", Offset = "0x986984", VA = "0x986984")]
	private void Update()
	{
	}

	[Token(Token = "0x600000B")]
	[Address(RVA = "0x986AD8", Offset = "0x986AD8", VA = "0x986AD8")]
	public void CountTotalDriveAnimal()
	{
	}

	[Token(Token = "0x600000C")]
	[Address(RVA = "0x986B90", Offset = "0x986B90", VA = "0x986B90")]
	[IteratorStateMachine(typeof(<WaitforDisable>d__16))]
	private IEnumerator WaitforDisable()
	{
		return null;
	}

	[Token(Token = "0x600000D")]
	[Address(RVA = "0x986C2C", Offset = "0x986C2C", VA = "0x986C2C", Slot = "4")]
	public virtual void SetPositionZ(float z_)
	{
	}

	[Token(Token = "0x600000E")]
	[Address(RVA = "0x986CB8", Offset = "0x986CB8", VA = "0x986CB8")]
	public AnimalGrabScript()
	{
	}
}
[Token(Token = "0x2000005")]
public class AnimalMarking : MonoBehaviour
{
	[Token(Token = "0x400001E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public MoveOnPathCleaning pathscript;

	[Token(Token = "0x6000015")]
	[Address(RVA = "0x986E00", Offset = "0x986E00", VA = "0x986E00")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000016")]
	[Address(RVA = "0x986EEC", Offset = "0x986EEC", VA = "0x986EEC")]
	public AnimalMarking()
	{
	}
}
[Token(Token = "0x2000006")]
public class AnimatedGIFScript : MonoBehaviour
{
	[Token(Token = "0x400001F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Sprite[] frames;

	[Token(Token = "0x4000020")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Image explosion;

	[Token(Token = "0x4000021")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float frameRate;

	[Token(Token = "0x4000022")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private int currentImage;

	[Token(Token = "0x6000017")]
	[Address(RVA = "0x986EF4", Offset = "0x986EF4", VA = "0x986EF4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000018")]
	[Address(RVA = "0x986F50", Offset = "0x986F50", VA = "0x986F50")]
	private void ChangeImage()
	{
	}

	[Token(Token = "0x6000019")]
	[Address(RVA = "0x986FA4", Offset = "0x986FA4", VA = "0x986FA4")]
	public AnimatedGIFScript()
	{
	}
}
[Serializable]
[Token(Token = "0x2000007")]
public class GearSystem
{
	[Token(Token = "0x4000023")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float Torque;

	[Token(Token = "0x4000024")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float Speed;

	[Token(Token = "0x600001A")]
	[Address(RVA = "0x986FB8", Offset = "0x986FB8", VA = "0x986FB8")]
	public GearSystem()
	{
	}
}
[Serializable]
[Token(Token = "0x2000008")]
public class AutoGearSystem
{
	[Token(Token = "0x4000025")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float AutoTorque;

	[Token(Token = "0x4000026")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float AutoSpeed;

	[Token(Token = "0x600001B")]
	[Address(RVA = "0x986FC0", Offset = "0x986FC0", VA = "0x986FC0")]
	public AutoGearSystem()
	{
	}
}
[Token(Token = "0x2000009")]
public class FixNonUniformScale : MonoBehaviour
{
	[Token(Token = "0x4000027")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool running;

	[Token(Token = "0x600001C")]
	[Address(RVA = "0x986FC8", Offset = "0x986FC8", VA = "0x986FC8")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x600001D")]
	[Address(RVA = "0x987044", Offset = "0x987044", VA = "0x987044")]
	public void MakeUniform()
	{
	}

	[Token(Token = "0x600001E")]
	[Address(RVA = "0x9874CC", Offset = "0x9874CC", VA = "0x9874CC")]
	public FixNonUniformScale()
	{
	}
}
[Token(Token = "0x200000A")]
public class BoundaryColliderScript : MonoBehaviour
{
	[Token(Token = "0x600001F")]
	[Address(RVA = "0x9874D4", Offset = "0x9874D4", VA = "0x9874D4")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000020")]
	[Address(RVA = "0x987764", Offset = "0x987764", VA = "0x987764")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6000021")]
	[Address(RVA = "0x987954", Offset = "0x987954", VA = "0x987954")]
	public BoundaryColliderScript()
	{
	}
}
[Token(Token = "0x200000B")]
public class BoxCloseAndGrab : MonoBehaviour
{
	[Token(Token = "0x4000028")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject Box_Closer;

	[Token(Token = "0x4000029")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Grabbable Box_grab;

	[Token(Token = "0x6000022")]
	[Address(RVA = "0x98795C", Offset = "0x98795C", VA = "0x98795C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000023")]
	[Address(RVA = "0x9879F8", Offset = "0x9879F8", VA = "0x9879F8")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000024")]
	[Address(RVA = "0x987B0C", Offset = "0x987B0C", VA = "0x987B0C")]
	public BoxCloseAndGrab()
	{
	}
}
[Token(Token = "0x200000C")]
public class BulletTriggerScript : MonoBehaviour
{
	[Token(Token = "0x400002A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int TigerTotalHit;

	[Token(Token = "0x400002B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int TigerhitCount;

	[Token(Token = "0x400002C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject ps_explosion;

	[Token(Token = "0x6000025")]
	[Address(RVA = "0x987B14", Offset = "0x987B14", VA = "0x987B14")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000026")]
	[Address(RVA = "0x987F4C", Offset = "0x987F4C", VA = "0x987F4C")]
	private void CheckForTigerDie()
	{
	}

	[Token(Token = "0x6000027")]
	[Address(RVA = "0x98809C", Offset = "0x98809C", VA = "0x98809C")]
	public BulletTriggerScript()
	{
	}
}
[Token(Token = "0x200000D")]
public class CanSelling : MonoBehaviour
{
	[Token(Token = "0x400002D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int TotalCanUnload;

	[Token(Token = "0x400002E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int TotalUnloadNeed;

	[Token(Token = "0x400002F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject MoneyForMilk;

	[Token(Token = "0x4000030")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject shopkeeperanimcollider;

	[Token(Token = "0x6000028")]
	[Address(RVA = "0x9880A4", Offset = "0x9880A4", VA = "0x9880A4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000029")]
	[Address(RVA = "0x988138", Offset = "0x988138", VA = "0x988138")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600002A")]
	[Address(RVA = "0x988380", Offset = "0x988380", VA = "0x988380")]
	private void CheckForNextPhase()
	{
	}

	[Token(Token = "0x600002B")]
	[Address(RVA = "0x988448", Offset = "0x988448", VA = "0x988448")]
	public CanSelling()
	{
	}
}
[Token(Token = "0x200000E")]
public class CaseSelling : MonoBehaviour
{
	[Token(Token = "0x4000031")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int TotalCanUnload;

	[Token(Token = "0x4000032")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int TotalUnloadNeed;

	[Token(Token = "0x4000033")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject MoneyForCases;

	[Token(Token = "0x600002C")]
	[Address(RVA = "0x988458", Offset = "0x988458", VA = "0x988458")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600002D")]
	[Address(RVA = "0x988480", Offset = "0x988480", VA = "0x988480")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600002E")]
	[Address(RVA = "0x988690", Offset = "0x988690", VA = "0x988690")]
	private void CheckForNextPhase()
	{
	}

	[Token(Token = "0x600002F")]
	[Address(RVA = "0x988708", Offset = "0x988708", VA = "0x988708")]
	public CaseSelling()
	{
	}
}
[Token(Token = "0x200000F")]
public class ChickenCaseBuying : MonoBehaviour
{
	[Token(Token = "0x4000034")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int TotalCaseLoad;

	[Token(Token = "0x4000035")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int TotalLoadNeed;

	[Token(Token = "0x4000036")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform BoxArrangeParent;

	[Token(Token = "0x6000030")]
	[Address(RVA = "0x988718", Offset = "0x988718", VA = "0x988718")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000031")]
	[Address(RVA = "0x988720", Offset = "0x988720", VA = "0x988720")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000032")]
	[Address(RVA = "0x988A34", Offset = "0x988A34", VA = "0x988A34")]
	private void SetBoxParent(Transform box)
	{
	}

	[Token(Token = "0x6000033")]
	[Address(RVA = "0x98896C", Offset = "0x98896C", VA = "0x98896C")]
	private void CheckForLevelComplete()
	{
	}

	[Token(Token = "0x6000034")]
	[Address(RVA = "0x988BE0", Offset = "0x988BE0", VA = "0x988BE0")]
	public ChickenCaseBuying()
	{
	}
}
[Token(Token = "0x2000010")]
public class ChickenShopkeeper : MonoBehaviour
{
	[Token(Token = "0x4000037")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject MoneyPopup;

	[Token(Token = "0x4000038")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int PurchasePrice;

	[Token(Token = "0x4000039")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject ChickenCase;

	[Token(Token = "0x400003A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Animator shopkeeperAnim;

	[Token(Token = "0x400003B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AnimationClip newanimationclip;

	[Token(Token = "0x6000035")]
	[Address(RVA = "0x988BF0", Offset = "0x988BF0", VA = "0x988BF0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000036")]
	[Address(RVA = "0x988C28", Offset = "0x988C28", VA = "0x988C28")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000037")]
	[Address(RVA = "0x988D4C", Offset = "0x988D4C", VA = "0x988D4C")]
	public void PurchaseYes()
	{
	}

	[Token(Token = "0x6000038")]
	[Address(RVA = "0x988E28", Offset = "0x988E28", VA = "0x988E28")]
	public ChickenShopkeeper()
	{
	}
}
[Token(Token = "0x2000011")]
public class ChickenTray : MonoBehaviour
{
	[Token(Token = "0x400003C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static ChickenTray instance;

	[Token(Token = "0x400003D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform eggparent;

	[Token(Token = "0x400003E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int childcount;

	[Token(Token = "0x400003F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private int TotalChickenTray;

	[Token(Token = "0x4000040")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject CaseForTrolley;

	[Token(Token = "0x4000041")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject ChickenCaseGrab;

	[Token(Token = "0x4000042")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject EggCaseGrab;

	[Token(Token = "0x4000043")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject ChickenTray_;

	[Token(Token = "0x4000044")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject EggTray_;

	[Token(Token = "0x4000045")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject ChickenTray_filled;

	[Token(Token = "0x4000046")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject EggTray_filled;

	[Token(Token = "0x6000039")]
	[Address(RVA = "0x988E30", Offset = "0x988E30", VA = "0x988E30")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600003A")]
	[Address(RVA = "0x988FE4", Offset = "0x988FE4", VA = "0x988FE4")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600003B")]
	[Address(RVA = "0x989218", Offset = "0x989218", VA = "0x989218")]
	public void CheckForNextStep()
	{
	}

	[Token(Token = "0x600003C")]
	[Address(RVA = "0x989330", Offset = "0x989330", VA = "0x989330")]
	public ChickenTray()
	{
	}
}
[Token(Token = "0x2000012")]
public class CowMilkingScript : MonoBehaviour
{
	[Token(Token = "0x4000047")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Grabbable grab;

	[Token(Token = "0x4000048")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Image fill_milk;

	[Token(Token = "0x4000049")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Animation cow_ani;

	[Token(Token = "0x400004A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float MilkCapacity;

	[Token(Token = "0x400004B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AudioSource milk_sound;

	[Token(Token = "0x400004C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform MilkCane;

	[Token(Token = "0x400004D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int MilkFill1;

	[Token(Token = "0x400004E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static int MilkFill2;

	[Token(Token = "0x400004F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static int MilkFill3;

	[Token(Token = "0x4000050")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float MilkheightLimit;

	[Token(Token = "0x4000051")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject CaneCloser;

	[Token(Token = "0x4000052")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Grabbable CaneGrab;

	[Token(Token = "0x4000053")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public int CowNumber;

	[Token(Token = "0x600003D")]
	[Address(RVA = "0x989338", Offset = "0x989338", VA = "0x989338")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600003E")]
	[Address(RVA = "0x989430", Offset = "0x989430", VA = "0x989430")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x600003F")]
	[Address(RVA = "0x989678", Offset = "0x989678", VA = "0x989678")]
	public CowMilkingScript()
	{
	}
}
[Token(Token = "0x2000013")]
public class CrackerExplosion : MonoBehaviour
{
	[Token(Token = "0x4000054")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject ps_explosion;

	[Token(Token = "0x4000055")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool isUsed;

	[Token(Token = "0x6000040")]
	[Address(RVA = "0x989694", Offset = "0x989694", VA = "0x989694")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000041")]
	[Address(RVA = "0x98969C", Offset = "0x98969C", VA = "0x98969C")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6000042")]
	[Address(RVA = "0x989980", Offset = "0x989980", VA = "0x989980")]
	public CrackerExplosion()
	{
	}
}
[Token(Token = "0x2000014")]
public class CrackerFiring : MonoBehaviour
{
	[Token(Token = "0x4000056")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static CrackerFiring instance;

	[Token(Token = "0x4000057")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject go_cracker;

	[Token(Token = "0x4000058")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject go_bullet;

	[Token(Token = "0x4000059")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject go_Medicine;

	[Token(Token = "0x400005A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform FiringPoint;

	[Token(Token = "0x400005B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform DroneCam;

	[Token(Token = "0x400005C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public int TotalFireCounter;

	[Token(Token = "0x400005D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private int totalFire;

	[Token(Token = "0x400005E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public TextMeshProUGUI txtfirecounter;

	[Token(Token = "0x6000043")]
	[Address(RVA = "0x989988", Offset = "0x989988", VA = "0x989988")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000044")]
	[Address(RVA = "0x9899EC", Offset = "0x9899EC", VA = "0x9899EC")]
	private void FireCounter()
	{
	}

	[Token(Token = "0x6000045")]
	[Address(RVA = "0x989AD0", Offset = "0x989AD0", VA = "0x989AD0")]
	public void FireCracker()
	{
	}

	[Token(Token = "0x6000046")]
	[Address(RVA = "0x989E18", Offset = "0x989E18", VA = "0x989E18")]
	public void FireGun()
	{
	}

	[Token(Token = "0x6000047")]
	[Address(RVA = "0x98A0BC", Offset = "0x98A0BC", VA = "0x98A0BC")]
	public void MedicineThrow()
	{
	}

	[Token(Token = "0x6000048")]
	[Address(RVA = "0x98A338", Offset = "0x98A338", VA = "0x98A338")]
	public CrackerFiring()
	{
	}
}
[Token(Token = "0x2000015")]
public class IntegrationDailyRewards : MonoBehaviour
{
	[Token(Token = "0x6000049")]
	[Address(RVA = "0x98A348", Offset = "0x98A348", VA = "0x98A348")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600004A")]
	[Address(RVA = "0x98A43C", Offset = "0x98A43C", VA = "0x98A43C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600004B")]
	[Address(RVA = "0x98A530", Offset = "0x98A530", VA = "0x98A530")]
	public void OnClaimPrizeDailyRewards(int day)
	{
	}

	[Token(Token = "0x600004C")]
	[Address(RVA = "0x98A61C", Offset = "0x98A61C", VA = "0x98A61C")]
	public IntegrationDailyRewards()
	{
	}
}
[Token(Token = "0x2000016")]
public class DirectionArrow : MonoBehaviour
{
	[Token(Token = "0x400005F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Transform Arrow_Target;

	[Token(Token = "0x4000060")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float speed;

	[Token(Token = "0x600004D")]
	[Address(RVA = "0x98A624", Offset = "0x98A624", VA = "0x98A624")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600004E")]
	[Address(RVA = "0x98A6D4", Offset = "0x98A6D4", VA = "0x98A6D4")]
	private void Update()
	{
	}

	[Token(Token = "0x600004F")]
	[Address(RVA = "0x98A860", Offset = "0x98A860", VA = "0x98A860")]
	public DirectionArrow()
	{
	}
}
[Token(Token = "0x2000017")]
public class DirtySurface : MonoBehaviour
{
	[Token(Token = "0x4000061")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int TotalNeedClean;

	[Token(Token = "0x4000062")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int CleanCount;

	[Token(Token = "0x4000063")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static bool isSurfaceClean;

	[Token(Token = "0x6000050")]
	[Address(RVA = "0x98A868", Offset = "0x98A868", VA = "0x98A868")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000051")]
	[Address(RVA = "0x98A910", Offset = "0x98A910", VA = "0x98A910")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000052")]
	[Address(RVA = "0x98A9D8", Offset = "0x98A9D8", VA = "0x98A9D8")]
	private void CheckCleanFinish()
	{
	}

	[Token(Token = "0x6000053")]
	[Address(RVA = "0x98AAEC", Offset = "0x98AAEC", VA = "0x98AAEC")]
	public DirtySurface()
	{
	}
}
[Token(Token = "0x2000018")]
public class DroneCanvasC : MonoBehaviour
{
	[Token(Token = "0x4000064")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Vector2 LstartButton;

	[Token(Token = "0x4000065")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Vector2 RButton;

	[Token(Token = "0x4000066")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector2 LButton;

	[Token(Token = "0x4000067")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Vector2 RstartButton;

	[Token(Token = "0x4000068")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool RL;

	[Token(Token = "0x4000069")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float Rx;

	[Token(Token = "0x400006A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float Ry;

	[Token(Token = "0x400006B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float Lx;

	[Token(Token = "0x400006C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float Ly;

	[Token(Token = "0x400006D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private int ForwardBackward;

	[Token(Token = "0x400006E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private int Tilt;

	[Token(Token = "0x400006F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private int FlyLeftRight;

	[Token(Token = "0x4000070")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private int UpDown;

	[Token(Token = "0x4000071")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public GameObject Drone;

	[Token(Token = "0x6000054")]
	[Address(RVA = "0x98AAF4", Offset = "0x98AAF4", VA = "0x98AAF4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000055")]
	[Address(RVA = "0x98AB9C", Offset = "0x98AB9C", VA = "0x98AB9C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000056")]
	[Address(RVA = "0x98AC88", Offset = "0x98AC88", VA = "0x98AC88")]
	public void Drag()
	{
	}

	[Token(Token = "0x6000057")]
	[Address(RVA = "0x98ADF8", Offset = "0x98ADF8", VA = "0x98ADF8")]
	public void endDrag()
	{
	}

	[Token(Token = "0x6000058")]
	[Address(RVA = "0x98AE2C", Offset = "0x98AE2C", VA = "0x98AE2C")]
	public DroneCanvasC()
	{
	}
}
[Token(Token = "0x2000019")]
public class DroneControlC : MonoBehaviour
{
	[Token(Token = "0x200001A")]
	[CompilerGenerated]
	private sealed class <waitAndEnableFlag>d__66 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400009D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400009E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400009F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DroneControlC <>4__this;

		[Token(Token = "0x17000003")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000078")]
			[Address(RVA = "0x98CB38", Offset = "0x98CB38", VA = "0x98CB38", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000004")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600007A")]
			[Address(RVA = "0x98CB80", Offset = "0x98CB80", VA = "0x98CB80", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000075")]
		[Address(RVA = "0x98C834", Offset = "0x98C834", VA = "0x98C834")]
		[DebuggerHidden]
		public <waitAndEnableFlag>d__66(int <>1__state)
		{
		}

		[Token(Token = "0x6000076")]
		[Address(RVA = "0x98CA4C", Offset = "0x98CA4C", VA = "0x98CA4C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000077")]
		[Address(RVA = "0x98CA50", Offset = "0x98CA50", VA = "0x98CA50", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000079")]
		[Address(RVA = "0x98CB40", Offset = "0x98CB40", VA = "0x98CB40", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200001B")]
	[CompilerGenerated]
	private sealed class <waitAndOffBlink>d__69 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40000A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40000A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40000A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Image imgLife_;

		[Token(Token = "0x40000A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public DroneControlC <>4__this;

		[Token(Token = "0x17000005")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600007E")]
			[Address(RVA = "0x98CCE4", Offset = "0x98CCE4", VA = "0x98CCE4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000006")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000080")]
			[Address(RVA = "0x98CD2C", Offset = "0x98CD2C", VA = "0x98CD2C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600007B")]
		[Address(RVA = "0x98C9A8", Offset = "0x98C9A8", VA = "0x98C9A8")]
		[DebuggerHidden]
		public <waitAndOffBlink>d__69(int <>1__state)
		{
		}

		[Token(Token = "0x600007C")]
		[Address(RVA = "0x98CB88", Offset = "0x98CB88", VA = "0x98CB88", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600007D")]
		[Address(RVA = "0x98CB8C", Offset = "0x98CB8C", VA = "0x98CB8C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600007F")]
		[Address(RVA = "0x98CCEC", Offset = "0x98CCEC", VA = "0x98CCEC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000072")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Rigidbody Drone;

	[Token(Token = "0x4000073")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int ForwardBackward;

	[Token(Token = "0x4000074")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int Tilt;

	[Token(Token = "0x4000075")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int FlyLeftRight;

	[Token(Token = "0x4000076")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int UpDown;

	[Token(Token = "0x4000077")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float UpFlyLimit;

	[Token(Token = "0x4000078")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float DownFlyLimit;

	[Token(Token = "0x4000079")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector3 DroneRotation;

	[Token(Token = "0x400007A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float input_x;

	[Token(Token = "0x400007B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float input_y;

	[Token(Token = "0x400007C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private int inputUpDown;

	[Token(Token = "0x400007D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private int inputRotcam;

	[Token(Token = "0x400007E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject CamRotaterY;

	[Token(Token = "0x400007F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public GameObject CamRotaterZ;

	[Token(Token = "0x4000080")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float smooth;

	[Token(Token = "0x4000081")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private float tiltAngle;

	[Token(Token = "0x4000082")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float inputRotY;

	[Token(Token = "0x4000083")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private float inputRotZ;

	[Token(Token = "0x4000084")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public bool isDroneOff;

	[Token(Token = "0x4000085")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public ObjectRotation[] DroneFan;

	[Token(Token = "0x4000086")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public GameObject[] AfterDroneStart;

	[Token(Token = "0x4000087")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public GameObject[] BeforeDroneStart;

	[Token(Token = "0x4000088")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Transform SwitchLocalPos;

	[Token(Token = "0x4000089")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public GameObject DronePesticideFlare;

	[Token(Token = "0x400008A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool isSwitch;

	[Token(Token = "0x400008B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Quaternion DefaultYRot;

	[Token(Token = "0x400008C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private Quaternion DefaultXRot;

	[Token(Token = "0x400008D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public JoystickDronControl joystickCam;

	[Token(Token = "0x400008E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public Grabbable grableverjoystick;

	[Token(Token = "0x400008F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public Grabbable grabcamjoystick;

	[Token(Token = "0x4000090")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static DroneControlC instance;

	[Token(Token = "0x4000091")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public GameObject btnLocator;

	[Token(Token = "0x4000092")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public Grabbable grabcamUpdown;

	[Token(Token = "0x4000093")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public Animator anim_display_tv;

	[Token(Token = "0x4000094")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private bool isAutoPark;

	[Token(Token = "0x4000095")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public GameObject imgfirecrosshair;

	[Token(Token = "0x4000096")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public UnityEngine.UI.Slider sldanimalHealth;

	[Token(Token = "0x4000097")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public GameObject sound_other;

	[Token(Token = "0x4000098")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	[Header("Dron Damage")]
	public bool isdamage;

	[Token(Token = "0x4000099")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
	public int totalLife;

	[Token(Token = "0x400009A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private int currdamage;

	[Token(Token = "0x400009B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	public GameObject parentLife;

	[Token(Token = "0x400009C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private string currobjname;

	[Token(Token = "0x6000059")]
	[Address(RVA = "0x98AE34", Offset = "0x98AE34", VA = "0x98AE34")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600005A")]
	[Address(RVA = "0x98B098", Offset = "0x98B098", VA = "0x98B098")]
	public void StartDrone()
	{
	}

	[Token(Token = "0x600005B")]
	[Address(RVA = "0x98B1AC", Offset = "0x98B1AC", VA = "0x98B1AC")]
	public void startDronSound()
	{
	}

	[Token(Token = "0x600005C")]
	[Address(RVA = "0x98B204", Offset = "0x98B204", VA = "0x98B204")]
	public void stopDronSound()
	{
	}

	[Token(Token = "0x600005D")]
	[Address(RVA = "0x98B25C", Offset = "0x98B25C", VA = "0x98B25C")]
	public void FireFromDrone()
	{
	}

	[Token(Token = "0x600005E")]
	[Address(RVA = "0x989D74", Offset = "0x989D74", VA = "0x989D74")]
	public void FireCracker_bullet_sound()
	{
	}

	[Token(Token = "0x600005F")]
	[Address(RVA = "0x987F20", Offset = "0x987F20", VA = "0x987F20")]
	public void changeHealthWildAnimal(int tigerhitcount)
	{
	}

	[Token(Token = "0x6000060")]
	[Address(RVA = "0x98B324", Offset = "0x98B324", VA = "0x98B324")]
	public void FindAnimalDone()
	{
	}

	[Token(Token = "0x6000061")]
	[Address(RVA = "0x98B3DC", Offset = "0x98B3DC", VA = "0x98B3DC")]
	public void LocatorButtonClick(Animator anim_display)
	{
	}

	[Token(Token = "0x6000062")]
	[Address(RVA = "0x98AF80", Offset = "0x98AF80", VA = "0x98AF80")]
	private void DroneFanStatus(bool isRotate)
	{
	}

	[Token(Token = "0x6000063")]
	[Address(RVA = "0x98B5A8", Offset = "0x98B5A8", VA = "0x98B5A8")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000064")]
	[Address(RVA = "0x987640", Offset = "0x987640", VA = "0x987640")]
	public void OutOffFarmIndicator()
	{
	}

	[Token(Token = "0x6000065")]
	[Address(RVA = "0x987848", Offset = "0x987848", VA = "0x987848")]
	public void DroneInFarm()
	{
	}

	[Token(Token = "0x6000066")]
	[Address(RVA = "0x98C124", Offset = "0x98C124", VA = "0x98C124")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000067")]
	[Address(RVA = "0x98C168", Offset = "0x98C168", VA = "0x98C168")]
	private void SwithOffOnWorking(bool isStart)
	{
	}

	[Token(Token = "0x6000068")]
	[Address(RVA = "0x98BF80", Offset = "0x98BF80", VA = "0x98BF80")]
	private void CameraRotation()
	{
	}

	[Token(Token = "0x6000069")]
	[Address(RVA = "0x98C25C", Offset = "0x98C25C", VA = "0x98C25C", Slot = "4")]
	public virtual void GetMove(Vector2 input)
	{
	}

	[Token(Token = "0x600006A")]
	[Address(RVA = "0x98C270", Offset = "0x98C270", VA = "0x98C270", Slot = "5")]
	public virtual void GetUpDown(float updown)
	{
	}

	[Token(Token = "0x600006B")]
	[Address(RVA = "0x98C290", Offset = "0x98C290", VA = "0x98C290")]
	public void CameraReset()
	{
	}

	[Token(Token = "0x600006C")]
	[Address(RVA = "0x98C298", Offset = "0x98C298", VA = "0x98C298", Slot = "6")]
	public virtual void GetCameraRotation(Vector2 camrot)
	{
	}

	[Token(Token = "0x600006D")]
	[Address(RVA = "0x98C310", Offset = "0x98C310", VA = "0x98C310", Slot = "7")]
	public virtual void getRotationOfCamera(float perX)
	{
	}

	[Token(Token = "0x600006E")]
	[Address(RVA = "0x98C348", Offset = "0x98C348", VA = "0x98C348", Slot = "8")]
	public virtual void GetAutoParkValue(float perX)
	{
	}

	[Token(Token = "0x600006F")]
	[Address(RVA = "0x98C35C", Offset = "0x98C35C", VA = "0x98C35C")]
	public void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6000070")]
	[Address(RVA = "0x98C7C0", Offset = "0x98C7C0", VA = "0x98C7C0")]
	[IteratorStateMachine(typeof(<waitAndEnableFlag>d__66))]
	private IEnumerator waitAndEnableFlag()
	{
		return null;
	}

	[Token(Token = "0x6000071")]
	[Address(RVA = "0x98C694", Offset = "0x98C694", VA = "0x98C694")]
	private void EnableLifeUI(int RemLife)
	{
	}

	[Token(Token = "0x6000072")]
	[Address(RVA = "0x98C85C", Offset = "0x98C85C", VA = "0x98C85C")]
	private void soundAnimation_dronLife(Image imgLife)
	{
	}

	[Token(Token = "0x6000073")]
	[Address(RVA = "0x98C918", Offset = "0x98C918", VA = "0x98C918")]
	[IteratorStateMachine(typeof(<waitAndOffBlink>d__69))]
	private IEnumerator waitAndOffBlink(Image imgLife_)
	{
		return null;
	}

	[Token(Token = "0x6000074")]
	[Address(RVA = "0x98C9D0", Offset = "0x98C9D0", VA = "0x98C9D0")]
	public DroneControlC()
	{
	}
}
[Token(Token = "0x200001C")]
public class ControlPanel : MonoBehaviour
{
	[Token(Token = "0x40000A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioSource MusicSound;

	[Token(Token = "0x40000A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private KeyCode SpeedUp;

	[Token(Token = "0x40000A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private KeyCode SpeedDown;

	[Token(Token = "0x40000A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private KeyCode Forward;

	[Token(Token = "0x40000A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private KeyCode Back;

	[Token(Token = "0x40000A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private KeyCode Left;

	[Token(Token = "0x40000AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	private KeyCode Right;

	[Token(Token = "0x40000AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private KeyCode TurnLeft;

	[Token(Token = "0x40000AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SerializeField]
	private KeyCode TurnRight;

	[Token(Token = "0x40000AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private KeyCode[] keyCodes;

	[Token(Token = "0x40000AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Action<PressedKeyCode[]> KeyPressed;

	[Token(Token = "0x6000081")]
	[Address(RVA = "0x98CD34", Offset = "0x98CD34", VA = "0x98CD34")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000082")]
	[Address(RVA = "0x98CE18", Offset = "0x98CE18", VA = "0x98CE18")]
	private void Start()
	{
	}

	[Token(Token = "0x6000083")]
	[Address(RVA = "0x98CE1C", Offset = "0x98CE1C", VA = "0x98CE1C")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000084")]
	[Address(RVA = "0x98CF90", Offset = "0x98CF90", VA = "0x98CF90")]
	public ControlPanel()
	{
	}
}
[Token(Token = "0x200001D")]
public class HelicopterController : MonoBehaviour
{
	[Token(Token = "0x40000AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ControlPanel ControlPanel;

	[Token(Token = "0x40000B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Rigidbody HelicopterModel;

	[Token(Token = "0x40000B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float TurnForce;

	[Token(Token = "0x40000B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float ForwardForce;

	[Token(Token = "0x40000B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float ForwardTiltForce;

	[Token(Token = "0x40000B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float TurnTiltForce;

	[Token(Token = "0x40000B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float EffectiveHeight;

	[Token(Token = "0x40000B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float turnTiltForcePercent;

	[Token(Token = "0x40000B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float turnForcePercent;

	[Token(Token = "0x40000B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float _engineForce;

	[Token(Token = "0x40000B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Vector2 hMove;

	[Token(Token = "0x40000BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector2 hTilt;

	[Token(Token = "0x40000BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float hTurn;

	[Token(Token = "0x40000BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public bool IsOnGround;

	[Token(Token = "0x40000BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5D")]
	private bool Heli_Up;

	[Token(Token = "0x40000BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5E")]
	private bool Heli_down;

	[Token(Token = "0x40000BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5F")]
	private bool Heli_go_Forwad;

	[Token(Token = "0x40000C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool Heli_go_Back;

	[Token(Token = "0x40000C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
	private bool Heli_Left;

	[Token(Token = "0x40000C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
	private bool Heli_Right;

	[Token(Token = "0x40000C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private float input_x;

	[Token(Token = "0x40000C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float input_y;

	[Token(Token = "0x17000007")]
	public float EngineForce
	{
		[Token(Token = "0x6000085")]
		[Address(RVA = "0x98CFAC", Offset = "0x98CFAC", VA = "0x98CFAC")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000086")]
		[Address(RVA = "0x98CFB4", Offset = "0x98CFB4", VA = "0x98CFB4")]
		set
		{
		}
	}

	[Token(Token = "0x6000087")]
	[Address(RVA = "0x98CFBC", Offset = "0x98CFBC", VA = "0x98CFBC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000088")]
	[Address(RVA = "0x98D0A4", Offset = "0x98D0A4", VA = "0x98D0A4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000089")]
	[Address(RVA = "0x98D0F8", Offset = "0x98D0F8", VA = "0x98D0F8")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x600008A")]
	[Address(RVA = "0x98D23C", Offset = "0x98D23C", VA = "0x98D23C")]
	private void MoveProcess()
	{
	}

	[Token(Token = "0x600008B")]
	[Address(RVA = "0x98D118", Offset = "0x98D118", VA = "0x98D118")]
	private void LiftProcess()
	{
	}

	[Token(Token = "0x600008C")]
	[Address(RVA = "0x98D374", Offset = "0x98D374", VA = "0x98D374")]
	private void TiltProcess()
	{
	}

	[Token(Token = "0x600008D")]
	[Address(RVA = "0x98D484", Offset = "0x98D484", VA = "0x98D484")]
	public void OnKeyPressed(PressedKeyCode[] obj)
	{
	}

	[Token(Token = "0x600008E")]
	[Address(RVA = "0x98D700", Offset = "0x98D700", VA = "0x98D700")]
	public void SpeedUpPressed1()
	{
	}

	[Token(Token = "0x600008F")]
	[Address(RVA = "0x98D78C", Offset = "0x98D78C", VA = "0x98D78C")]
	public void SpeedUpControll()
	{
	}

	[Token(Token = "0x6000090")]
	[Address(RVA = "0x98D794", Offset = "0x98D794", VA = "0x98D794")]
	public void Helicopter_down()
	{
	}

	[Token(Token = "0x6000091")]
	[Address(RVA = "0x98D7C4", Offset = "0x98D7C4", VA = "0x98D7C4")]
	public void Helicopter_down_False()
	{
	}

	[Token(Token = "0x6000092")]
	[Address(RVA = "0x98D7CC", Offset = "0x98D7CC", VA = "0x98D7CC", Slot = "4")]
	public virtual void GetDroneMove(Vector2 input)
	{
	}

	[Token(Token = "0x6000093")]
	[Address(RVA = "0x98D858", Offset = "0x98D858", VA = "0x98D858")]
	public HelicopterController()
	{
	}
}
[Token(Token = "0x200001E")]
public class HeliRotorController : MonoBehaviour
{
	[Token(Token = "0x200001F")]
	public enum Axis
	{
		[Token(Token = "0x40000CA")]
		X,
		[Token(Token = "0x40000CB")]
		Y,
		[Token(Token = "0x40000CC")]
		Z
	}

	[Token(Token = "0x40000C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Axis RotateAxis;

	[Token(Token = "0x40000C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float _rotarSpeed;

	[Token(Token = "0x40000C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float rotateDegree;

	[Token(Token = "0x40000C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Vector3 OriginalRotate;

	[Token(Token = "0x17000008")]
	public float RotarSpeed
	{
		[Token(Token = "0x6000094")]
		[Address(RVA = "0x98D8E8", Offset = "0x98D8E8", VA = "0x98D8E8")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000095")]
		[Address(RVA = "0x98D8F0", Offset = "0x98D8F0", VA = "0x98D8F0")]
		set
		{
		}
	}

	[Token(Token = "0x6000096")]
	[Address(RVA = "0x98D910", Offset = "0x98D910", VA = "0x98D910")]
	private void Start()
	{
	}

	[Token(Token = "0x6000097")]
	[Address(RVA = "0x98D940", Offset = "0x98D940", VA = "0x98D940")]
	private void Update()
	{
	}

	[Token(Token = "0x6000098")]
	[Address(RVA = "0x98DA18", Offset = "0x98DA18", VA = "0x98DA18")]
	public HeliRotorController()
	{
	}
}
[Token(Token = "0x2000020")]
public enum PressedKeyCode
{
	[Token(Token = "0x40000CE")]
	SpeedUpPressed,
	[Token(Token = "0x40000CF")]
	SpeedDownPressed,
	[Token(Token = "0x40000D0")]
	ForwardPressed,
	[Token(Token = "0x40000D1")]
	BackPressed,
	[Token(Token = "0x40000D2")]
	LeftPressed,
	[Token(Token = "0x40000D3")]
	RightPressed,
	[Token(Token = "0x40000D4")]
	TurnLeftPressed,
	[Token(Token = "0x40000D5")]
	TurnRightPressed
}
[Token(Token = "0x2000021")]
public class DroneCameraScript : MonoBehaviour
{
	[Token(Token = "0x6000099")]
	[Address(RVA = "0x98DA20", Offset = "0x98DA20", VA = "0x98DA20")]
	public DroneCameraScript()
	{
	}
}
[Token(Token = "0x2000022")]
public class DroneDetactoreCollider : MonoBehaviour
{
	[Token(Token = "0x40000D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Animator anim_display;

	[Token(Token = "0x600009A")]
	[Address(RVA = "0x98DA28", Offset = "0x98DA28", VA = "0x98DA28")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600009B")]
	[Address(RVA = "0x98DAB0", Offset = "0x98DAB0", VA = "0x98DAB0")]
	public void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600009C")]
	[Address(RVA = "0x98DBC4", Offset = "0x98DBC4", VA = "0x98DBC4")]
	public DroneDetactoreCollider()
	{
	}
}
[Token(Token = "0x2000023")]
public class DroneFindPigScript : MonoBehaviour
{
	[Token(Token = "0x40000D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Animation anim_pig;

	[Token(Token = "0x40000D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int TotalPigInFarm;

	[Token(Token = "0x40000D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static int TotalDieCount;

	[Token(Token = "0x40000DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AI_MovementLimitation AI_Movement;

	[Token(Token = "0x600009D")]
	[Address(RVA = "0x98DBCC", Offset = "0x98DBCC", VA = "0x98DBCC")]
	private void Start()
	{
	}

	[Token(Token = "0x600009E")]
	[Address(RVA = "0x98DC60", Offset = "0x98DC60", VA = "0x98DC60")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600009F")]
	[Address(RVA = "0x98DE38", Offset = "0x98DE38", VA = "0x98DE38")]
	private void CheckForLevelComplete()
	{
	}

	[Token(Token = "0x60000A0")]
	[Address(RVA = "0x98DF5C", Offset = "0x98DF5C", VA = "0x98DF5C")]
	public DroneFindPigScript()
	{
	}
}
[Token(Token = "0x2000024")]
public class DroneLevelFinishPoint : MonoBehaviour
{
	[Token(Token = "0x40000DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool isReachdron;

	[Token(Token = "0x60000A1")]
	[Address(RVA = "0x98DF64", Offset = "0x98DF64", VA = "0x98DF64")]
	public void OnEnable()
	{
	}

	[Token(Token = "0x60000A2")]
	[Address(RVA = "0x98DF6C", Offset = "0x98DF6C", VA = "0x98DF6C")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60000A3")]
	[Address(RVA = "0x98E0E8", Offset = "0x98E0E8", VA = "0x98E0E8")]
	public DroneLevelFinishPoint()
	{
	}
}
[Token(Token = "0x2000025")]
public class DroneWatering : MonoBehaviour
{
	[Token(Token = "0x40000DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject BeforePesticide;

	[Token(Token = "0x40000DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject AfterPesticide;

	[Token(Token = "0x60000A4")]
	[Address(RVA = "0x98E0F0", Offset = "0x98E0F0", VA = "0x98E0F0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000A5")]
	[Address(RVA = "0x98E398", Offset = "0x98E398", VA = "0x98E398")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60000A6")]
	[Address(RVA = "0x98E98C", Offset = "0x98E98C", VA = "0x98E98C")]
	public DroneWatering()
	{
	}
}
[Token(Token = "0x2000026")]
public class DronUpDown : MonoBehaviour
{
	[Token(Token = "0x40000DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Rotation Limits")]
	[Tooltip("Minimum X value in Local Euler Angles")]
	public float MinimumXRotation;

	[Token(Token = "0x40000DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Tooltip("Maximum X value in Local Euler Angles")]
	public float MaximumXRotation;

	[Token(Token = "0x40000E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Header("Initial Rotation")]
	public float InitialXRotation;

	[Token(Token = "0x40000E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Header("Audio")]
	public AudioClip SwitchOnSound;

	[Token(Token = "0x40000E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AudioClip SwitchOffSound;

	[Token(Token = "0x40000E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Header("Tolerance")]
	[Tooltip("Tolerance before considering a switch flipped On or Off. Ex : 1.25 Tolerance means switch can be 98.25% up and considered switched on, or 1.25% down to be considered switched off.")]
	public float SwitchTolerance;

	[Token(Token = "0x40000E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[Header("Smooth Look")]
	[Tooltip("If true the lever will lerp towards the Grabber. If false the lever will instantly point to the grabber")]
	public bool UseSmoothLook;

	[Token(Token = "0x40000E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("The speed at which to Lerp towards the Grabber if UseSmoothLook is enabled")]
	public float SmoothLookSpeed;

	[Token(Token = "0x40000E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[Header("Moving Platform Support")]
	[Tooltip("If false, the lever's rigidbody will be kinematic when not being held. Disable this if you don't want your lever to interact with physics or if you need moving platform support.")]
	public bool AllowPhysicsForces;

	[Token(Token = "0x40000E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
	[Header("Return to Center (Must be Kinematic)")]
	[Tooltip("If ReturnToCenter true and KinematicWhileInactive true then the lever will smooth look back to center when not being held")]
	public bool ReturnToCenter;

	[Token(Token = "0x40000E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Tooltip("How fast to return to center if not being held")]
	public float ReturnLookSpeed;

	[Token(Token = "0x40000E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[Header("Snap Settings")]
	[Tooltip("If true the lever will look directly at the Grabber and not factor in an initial offset")]
	public bool SnapToGrabber;

	[Token(Token = "0x40000EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
	[Tooltip("If true, the Lever will be dropped once switched on or off")]
	[Header("Misc")]
	public bool DropLeverOnActivation;

	[Token(Token = "0x40000EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Header("Shown for Debug")]
	[Tooltip("Current position of the lever as expressed as a percentage 1-100")]
	public float LeverPercentage;

	[Token(Token = "0x40000EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[Tooltip("If true will show an angle helper in editor mode (Gizmos must be enabled)")]
	public bool ShowEditorGizmos;

	[Token(Token = "0x40000ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Header("Events")]
	[Tooltip("Called when lever was up, but is now in the down position")]
	public UnityEvent onLeverDown;

	[Token(Token = "0x40000EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Tooltip("Called when lever was down, but is now in the up position")]
	public UnityEvent onLeverUp;

	[Token(Token = "0x40000EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[Tooltip("Called if the lever changes position at all")]
	public FloatEvent onLeverChange;

	[Token(Token = "0x40000F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Grabbable grab;

	[Token(Token = "0x40000F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Rigidbody rb;

	[Token(Token = "0x40000F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private AudioSource audioSource;

	[Token(Token = "0x40000F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private bool switchedOn;

	[Token(Token = "0x40000F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private ConfigurableJoint configJoint;

	[Token(Token = "0x40000F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private HingeJoint hingedJoint;

	[Token(Token = "0x40000F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private float DroneControlAngle;

	[Token(Token = "0x40000F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private Quaternion initialOffset;

	[Token(Token = "0x60000A7")]
	[Address(RVA = "0x98E994", Offset = "0x98E994", VA = "0x98E994")]
	private void Start()
	{
	}

	[Token(Token = "0x60000A8")]
	[Address(RVA = "0x98EBAC", Offset = "0x98EBAC", VA = "0x98EBAC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000A9")]
	[Address(RVA = "0x98EBDC", Offset = "0x98EBDC", VA = "0x98EBDC")]
	private void Update()
	{
	}

	[Token(Token = "0x60000AA")]
	[Address(RVA = "0x98EE28", Offset = "0x98EE28", VA = "0x98EE28", Slot = "4")]
	public virtual float GetAnglePercentage(float currentAngle)
	{
		return default(float);
	}

	[Token(Token = "0x60000AB")]
	[Address(RVA = "0x98EFC8", Offset = "0x98EFC8", VA = "0x98EFC8")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60000AC")]
	[Address(RVA = "0x98EFCC", Offset = "0x98EFCC", VA = "0x98EFCC")]
	private void doLeverLook()
	{
	}

	[Token(Token = "0x60000AD")]
	[Address(RVA = "0x98F564", Offset = "0x98F564", VA = "0x98F564", Slot = "5")]
	public virtual void SetLeverAngle(float angle)
	{
	}

	[Token(Token = "0x60000AE")]
	[Address(RVA = "0x98F5B0", Offset = "0x98F5B0", VA = "0x98F5B0", Slot = "6")]
	public virtual void OnLeverChange(float percentage)
	{
	}

	[Token(Token = "0x60000AF")]
	[Address(RVA = "0x98F61C", Offset = "0x98F61C", VA = "0x98F61C", Slot = "7")]
	public virtual void OnLeverDown()
	{
	}

	[Token(Token = "0x60000B0")]
	[Address(RVA = "0x98F718", Offset = "0x98F718", VA = "0x98F718", Slot = "8")]
	public virtual void OnLeverUp()
	{
	}

	[Token(Token = "0x60000B1")]
	[Address(RVA = "0x98F818", Offset = "0x98F818", VA = "0x98F818")]
	public DronUpDown()
	{
	}
}
[Token(Token = "0x2000027")]
public class EggTray : MonoBehaviour
{
	[Token(Token = "0x40000F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform eggparent;

	[Token(Token = "0x40000F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int childcount;

	[Token(Token = "0x40000FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int TotalFillTray;

	[Token(Token = "0x60000B2")]
	[Address(RVA = "0x98F8A4", Offset = "0x98F8A4", VA = "0x98F8A4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000B3")]
	[Address(RVA = "0x98F9E4", Offset = "0x98F9E4", VA = "0x98F9E4")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60000B4")]
	[Address(RVA = "0x98FCEC", Offset = "0x98FCEC", VA = "0x98FCEC")]
	public EggTray()
	{
	}
}
[Token(Token = "0x2000028")]
public class FollowHeading : MonoBehaviour
{
	[Token(Token = "0x40000FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Range(-180f, 180f)]
	public float heading;

	[Token(Token = "0x40000FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private EVP.VehicleController m_vehicle;

	[Token(Token = "0x60000B5")]
	[Address(RVA = "0x98FCF4", Offset = "0x98FCF4", VA = "0x98FCF4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000B6")]
	[Address(RVA = "0x98FD4C", Offset = "0x98FD4C", VA = "0x98FD4C")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60000B7")]
	[Address(RVA = "0x98FDF0", Offset = "0x98FDF0", VA = "0x98FDF0")]
	public FollowHeading()
	{
	}
}
[Token(Token = "0x2000029")]
public class VehicleNitro : MonoBehaviour
{
	[Token(Token = "0x200002A")]
	public enum Mode
	{
		[Token(Token = "0x4000103")]
		Acceleration,
		[Token(Token = "0x4000104")]
		Impulse
	}

	[Token(Token = "0x40000FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Mode mode;

	[Token(Token = "0x40000FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float value;

	[Token(Token = "0x40000FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float maxVelocity;

	[Token(Token = "0x4000100")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public KeyCode key;

	[Token(Token = "0x4000101")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Rigidbody m_rigidbody;

	[Token(Token = "0x60000B8")]
	[Address(RVA = "0x98FDF8", Offset = "0x98FDF8", VA = "0x98FDF8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000B9")]
	[Address(RVA = "0x98FE50", Offset = "0x98FE50", VA = "0x98FE50")]
	private void Update()
	{
	}

	[Token(Token = "0x60000BA")]
	[Address(RVA = "0x98FF80", Offset = "0x98FF80", VA = "0x98FF80")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60000BB")]
	[Address(RVA = "0x9900AC", Offset = "0x9900AC", VA = "0x9900AC")]
	public VehicleNitro()
	{
	}
}
[Token(Token = "0x200002B")]
public class ExitScene : MonoBehaviour
{
	[Token(Token = "0x4000105")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SceneLoader sceneloader;

	[Token(Token = "0x4000106")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private GameObject[] otherAudioSource;

	[Token(Token = "0x60000BC")]
	[Address(RVA = "0x9900C8", Offset = "0x9900C8", VA = "0x9900C8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000BD")]
	[Address(RVA = "0x9901DC", Offset = "0x9901DC", VA = "0x9901DC")]
	private void Update()
	{
	}

	[Token(Token = "0x60000BE")]
	[Address(RVA = "0x9900CC", Offset = "0x9900CC", VA = "0x9900CC")]
	private void FindOtherAudioSource()
	{
	}

	[Token(Token = "0x60000BF")]
	[Address(RVA = "0x9902B0", Offset = "0x9902B0", VA = "0x9902B0")]
	public ExitScene()
	{
	}
}
[Token(Token = "0x200002C")]
public class FarmGrowScript : MonoBehaviour
{
	[Token(Token = "0x4000107")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject Seed_Prefab;

	[Token(Token = "0x4000108")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject Water_Prefab;

	[Token(Token = "0x4000109")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TotalFieldTileScript tilescript;

	[Token(Token = "0x400010A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject Pre_Crop;

	[Token(Token = "0x60000C0")]
	[Address(RVA = "0x9902B8", Offset = "0x9902B8", VA = "0x9902B8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000C1")]
	[Address(RVA = "0x990560", Offset = "0x990560", VA = "0x990560")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x60000C2")]
	[Address(RVA = "0x990EB8", Offset = "0x990EB8", VA = "0x990EB8")]
	private void OnTriggerStay(Collider other)
	{
	}

	[Token(Token = "0x60000C3")]
	[Address(RVA = "0x991034", Offset = "0x991034", VA = "0x991034")]
	public FarmGrowScript()
	{
	}
}
[Token(Token = "0x200002D")]
public class AttachEquipmentAnimation : MonoBehaviour
{
	[Token(Token = "0x400010B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static AttachEquipmentAnimation instace;

	[Token(Token = "0x400010C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationClip idle;

	[Token(Token = "0x400010D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AnimationClip play;

	[Token(Token = "0x400010E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Animation ani_;

	[Token(Token = "0x60000C4")]
	[Address(RVA = "0x99103C", Offset = "0x99103C", VA = "0x99103C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000C5")]
	[Address(RVA = "0x991124", Offset = "0x991124", VA = "0x991124")]
	public void UseAnimation()
	{
	}

	[Token(Token = "0x60000C6")]
	[Address(RVA = "0x9911B0", Offset = "0x9911B0", VA = "0x9911B0")]
	public AttachEquipmentAnimation()
	{
	}
}
[Token(Token = "0x200002E")]
public class AttachEquipmentScript : MonoBehaviour
{
	[Token(Token = "0x400010F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool isSkid;

	[Token(Token = "0x4000110")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
	public static bool isWater;

	[Token(Token = "0x4000111")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static int SkidTileCount;

	[Token(Token = "0x4000112")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool isShowGameover;

	[Token(Token = "0x60000C7")]
	[Address(RVA = "0x9911B8", Offset = "0x9911B8", VA = "0x9911B8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000C8")]
	[Address(RVA = "0x99120C", Offset = "0x99120C", VA = "0x99120C")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60000C9")]
	[Address(RVA = "0x991320", Offset = "0x991320", VA = "0x991320")]
	private void OnTriggerStay(Collider other)
	{
	}

	[Token(Token = "0x60000CA")]
	[Address(RVA = "0x991388", Offset = "0x991388", VA = "0x991388")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x60000CB")]
	[Address(RVA = "0x9913F0", Offset = "0x9913F0", VA = "0x9913F0")]
	public AttachEquipmentScript()
	{
	}
}
[Token(Token = "0x200002F")]
public enum VehicleMode
{
	[Token(Token = "0x4000114")]
	Player,
	[Token(Token = "0x4000115")]
	AICar
}
[Token(Token = "0x2000030")]
public enum ControlMode
{
	[Token(Token = "0x4000117")]
	Simple = 1,
	[Token(Token = "0x4000118")]
	Mobile
}
[Token(Token = "0x2000031")]
public class AIControl : MonoBehaviour
{
	[Token(Token = "0x4000119")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static AIControl manage;

	[Token(Token = "0x400011A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static VehicleControl CurrentVehicle;

	[Token(Token = "0x400011B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ControlMode controlMode;

	[Token(Token = "0x400011C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform firstAINode;

	[Token(Token = "0x400011D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform startPoint;

	[Token(Token = "0x400011E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject[] CarsPrefabs;

	[Token(Token = "0x400011F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private GameObject InstantiatedCar;

	[Token(Token = "0x4000120")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public VehicleMode vhclMode;

	[Token(Token = "0x60000CC")]
	[Address(RVA = "0x9913F8", Offset = "0x9913F8", VA = "0x9913F8")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000CD")]
	[Address(RVA = "0x991450", Offset = "0x991450", VA = "0x991450")]
	private void Start()
	{
	}

	[Token(Token = "0x60000CE")]
	[Address(RVA = "0x991714", Offset = "0x991714", VA = "0x991714")]
	public AIControl()
	{
	}
}
[Token(Token = "0x2000032")]
public class AINode : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000033")]
	public class NodeSetting
	{
		[Token(Token = "0x4000125")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool brakeing;

		[Token(Token = "0x60000D1")]
		[Address(RVA = "0x9917B4", Offset = "0x9917B4", VA = "0x9917B4")]
		public NodeSetting()
		{
		}
	}

	[Token(Token = "0x4000121")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform nextNode;

	[Token(Token = "0x4000122")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform previousNode;

	[Token(Token = "0x4000123")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public NodeSetting nodeSetting;

	[Token(Token = "0x4000124")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	public Color GizmosColor;

	[Token(Token = "0x60000CF")]
	[Address(RVA = "0x991724", Offset = "0x991724", VA = "0x991724")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x60000D0")]
	[Address(RVA = "0x9917A4", Offset = "0x9917A4", VA = "0x9917A4")]
	public AINode()
	{
	}
}
[Token(Token = "0x2000034")]
public class AIPath : MonoBehaviour
{
	[Token(Token = "0x4000126")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Color pathColor;

	[Token(Token = "0x60000D2")]
	[Address(RVA = "0x9917BC", Offset = "0x9917BC", VA = "0x9917BC")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x60000D3")]
	[Address(RVA = "0x991DC4", Offset = "0x991DC4", VA = "0x991DC4")]
	public AIPath()
	{
	}
}
[Token(Token = "0x2000035")]
public class FormatSecondsScript : MonoBehaviour
{
	[Token(Token = "0x60000D4")]
	[Address(RVA = "0x991DD8", Offset = "0x991DD8", VA = "0x991DD8")]
	public string FormatSeconds(float elapsed)
	{
		return null;
	}

	[Token(Token = "0x60000D5")]
	[Address(RVA = "0x991F0C", Offset = "0x991F0C", VA = "0x991F0C")]
	public FormatSecondsScript()
	{
	}
}
[Token(Token = "0x2000036")]
public class GameUI : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000037")]
	public class Panels
	{
		[Serializable]
		[Token(Token = "0x2000038")]
		public class GameStart
		{
			[Token(Token = "0x400014C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public GameObject root;

			[Token(Token = "0x400014D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Text startTimeUI;

			[Token(Token = "0x400014E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GameObject loading;

			[Token(Token = "0x400014F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Image loadingBar;

			[Token(Token = "0x4000150")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Animator FadeBackGround;

			[Token(Token = "0x60000E8")]
			[Address(RVA = "0x99412C", Offset = "0x99412C", VA = "0x99412C")]
			public GameStart()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000039")]
		public class GamePlay
		{
			[Token(Token = "0x4000151")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public GameObject root;

			[Token(Token = "0x4000152")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public GameObject buttonsUI;

			[Token(Token = "0x4000153")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GameObject accelUI;

			[Token(Token = "0x4000154")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Image wrongWay;

			[Token(Token = "0x4000155")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Image driftWheel;

			[Token(Token = "0x4000156")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Image brakeWarning;

			[Token(Token = "0x4000157")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public Text currentTime;

			[Token(Token = "0x4000158")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Text bestTime;

			[Token(Token = "0x4000159")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public Text driftCoins;

			[Token(Token = "0x400015A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public Text driftText;

			[Token(Token = "0x400015B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public Text driftXText;

			[Token(Token = "0x400015C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public Text penaltyText;

			[Token(Token = "0x60000E9")]
			[Address(RVA = "0x994134", Offset = "0x994134", VA = "0x994134")]
			public GamePlay()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200003A")]
		public class GamePuased
		{
			[Token(Token = "0x400015D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public GameObject root;

			[Token(Token = "0x400015E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Toggle audioToggle;

			[Token(Token = "0x400015F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Toggle musicToggle;

			[Token(Token = "0x60000EA")]
			[Address(RVA = "0x99413C", Offset = "0x99413C", VA = "0x99413C")]
			public GamePuased()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200003B")]
		public class GameFinish
		{
			[Token(Token = "0x4000160")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public GameObject root;

			[Token(Token = "0x4000161")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Text yourTime;

			[Token(Token = "0x4000162")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Text penaltyTime;

			[Token(Token = "0x4000163")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Text bestTime;

			[Token(Token = "0x4000164")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Text racePrize;

			[Token(Token = "0x4000165")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Text driftPrize;

			[Token(Token = "0x4000166")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public Text totalPrize;

			[Token(Token = "0x4000167")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public StarClass stars;

			[Token(Token = "0x60000EB")]
			[Address(RVA = "0x994144", Offset = "0x994144", VA = "0x994144")]
			public GameFinish()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200003C")]
		public class StarClass
		{
			[Token(Token = "0x4000168")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float Star1Time;

			[Token(Token = "0x4000169")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float Star2Time;

			[Token(Token = "0x400016A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float Star3Time;

			[Token(Token = "0x400016B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Image Star1;

			[Token(Token = "0x400016C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Image Star2;

			[Token(Token = "0x400016D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Image Star3;

			[Token(Token = "0x60000EC")]
			[Address(RVA = "0x99414C", Offset = "0x99414C", VA = "0x99414C")]
			public StarClass()
			{
			}
		}

		[Token(Token = "0x4000148")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GameStart gameStart;

		[Token(Token = "0x4000149")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GamePlay gamePlay;

		[Token(Token = "0x400014A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GamePuased gamePuased;

		[Token(Token = "0x400014B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameFinish gameFinish;

		[Token(Token = "0x60000E7")]
		[Address(RVA = "0x994124", Offset = "0x994124", VA = "0x994124")]
		public Panels()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x200003D")]
	public class CarUI
	{
		[Token(Token = "0x400016E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Image tachometerNeedle;

		[Token(Token = "0x400016F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Image barShiftGUI;

		[Token(Token = "0x4000170")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Text speedText;

		[Token(Token = "0x4000171")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Text GearText;

		[Token(Token = "0x60000ED")]
		[Address(RVA = "0x994154", Offset = "0x994154", VA = "0x994154")]
		public CarUI()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x200003E")]
	public class Sounds
	{
		[Token(Token = "0x4000172")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AudioSource music;

		[Token(Token = "0x4000173")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioClip countDown;

		[Token(Token = "0x4000174")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AudioClip countStart;

		[Token(Token = "0x60000EE")]
		[Address(RVA = "0x99415C", Offset = "0x99415C", VA = "0x99415C")]
		public Sounds()
		{
		}
	}

	[Token(Token = "0x200003F")]
	[CompilerGenerated]
	private sealed class <LoadLevelGame>d__47 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000175")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000176")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000177")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float waitTime;

		[Token(Token = "0x4000178")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameUI <>4__this;

		[Token(Token = "0x17000009")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60000F2")]
			[Address(RVA = "0x994258", Offset = "0x994258", VA = "0x994258", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700000A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60000F4")]
			[Address(RVA = "0x9942A0", Offset = "0x9942A0", VA = "0x9942A0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60000EF")]
		[Address(RVA = "0x99403C", Offset = "0x99403C", VA = "0x99403C")]
		[DebuggerHidden]
		public <LoadLevelGame>d__47(int <>1__state)
		{
		}

		[Token(Token = "0x60000F0")]
		[Address(RVA = "0x994164", Offset = "0x994164", VA = "0x994164", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60000F1")]
		[Address(RVA = "0x994168", Offset = "0x994168", VA = "0x994168", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60000F3")]
		[Address(RVA = "0x994260", Offset = "0x994260", VA = "0x994260", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000040")]
	[CompilerGenerated]
	private sealed class <LoadLevelAsync>d__48 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000179")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400017A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400017B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameUI <>4__this;

		[Token(Token = "0x1700000B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60000F8")]
			[Address(RVA = "0x994438", Offset = "0x994438", VA = "0x994438", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700000C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60000FA")]
			[Address(RVA = "0x994480", Offset = "0x994480", VA = "0x994480", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60000F5")]
		[Address(RVA = "0x9940D8", Offset = "0x9940D8", VA = "0x9940D8")]
		[DebuggerHidden]
		public <LoadLevelAsync>d__48(int <>1__state)
		{
		}

		[Token(Token = "0x60000F6")]
		[Address(RVA = "0x9942A8", Offset = "0x9942A8", VA = "0x9942A8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60000F7")]
		[Address(RVA = "0x9942AC", Offset = "0x9942AC", VA = "0x9942AC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60000F9")]
		[Address(RVA = "0x994440", Offset = "0x994440", VA = "0x994440", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000127")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static GameUI manage;

	[Token(Token = "0x4000128")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Panels panels;

	[Token(Token = "0x4000129")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public CarUI carUI;

	[Token(Token = "0x400012A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Sounds sounds;

	[Token(Token = "0x400012B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	public int totalDriftCoins;

	[Token(Token = "0x400012C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[HideInInspector]
	public int earnCoins;

	[Token(Token = "0x400012D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[HideInInspector]
	public int totalEarnCoins;

	[Token(Token = "0x400012E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[HideInInspector]
	public bool canDrift;

	[Token(Token = "0x400012F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[HideInInspector]
	public int driftAmount;

	[Token(Token = "0x4000130")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[HideInInspector]
	public float penaltyTime;

	[Token(Token = "0x4000131")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[HideInInspector]
	public bool gameStarted;

	[Token(Token = "0x4000132")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	[HideInInspector]
	public bool gamePaused;

	[Token(Token = "0x4000133")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
	[HideInInspector]
	public bool gameRest;

	[Token(Token = "0x4000134")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4B")]
	[HideInInspector]
	public bool gameFinished;

	[Token(Token = "0x4000135")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[HideInInspector]
	public int racePrize;

	[Token(Token = "0x4000136")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[HideInInspector]
	public int totalPrize;

	[Token(Token = "0x4000137")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private int currentLevelNumber;

	[Token(Token = "0x4000138")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float menuLoadTime;

	[Token(Token = "0x4000139")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private AsyncOperation sceneLoadingOperation;

	[Token(Token = "0x400013A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private AIVehicle AIVehicleScript;

	[Token(Token = "0x400013B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float timerDrift;

	[Token(Token = "0x400013C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	[HideInInspector]
	public bool carPenalty;

	[Token(Token = "0x400013D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x75")]
	[HideInInspector]
	public bool carWrongWay;

	[Token(Token = "0x400013E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x76")]
	[HideInInspector]
	public bool carBrakeWarning;

	[Token(Token = "0x400013F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private int gearst;

	[Token(Token = "0x4000140")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private float thisAngle;

	[Token(Token = "0x4000141")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private float startTimer;

	[Token(Token = "0x4000142")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private int startCont;

	[Token(Token = "0x4000143")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static bool isFinish;

	[Token(Token = "0x4000144")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
	public static bool isFail;

	[Token(Token = "0x4000145")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public GameObject PanelGameFail;

	[Token(Token = "0x4000146")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private int LoadingLevel;

	[Token(Token = "0x4000147")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private int nextLevel;

	[Token(Token = "0x60000D6")]
	[Address(RVA = "0x991F14", Offset = "0x991F14", VA = "0x991F14")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000D7")]
	[Address(RVA = "0x992294", Offset = "0x992294", VA = "0x992294")]
	private void Start()
	{
	}

	[Token(Token = "0x60000D8")]
	[Address(RVA = "0x9923BC", Offset = "0x9923BC", VA = "0x9923BC")]
	private void Update()
	{
	}

	[Token(Token = "0x60000D9")]
	[Address(RVA = "0x993BA4", Offset = "0x993BA4", VA = "0x993BA4")]
	public void DisableAudio(Toggle toggle)
	{
	}

	[Token(Token = "0x60000DA")]
	[Address(RVA = "0x993C14", Offset = "0x993C14", VA = "0x993C14")]
	public void DisableMusic(Toggle toggle)
	{
	}

	[Token(Token = "0x60000DB")]
	[Address(RVA = "0x993C94", Offset = "0x993C94", VA = "0x993C94")]
	public void PauseGame()
	{
	}

	[Token(Token = "0x60000DC")]
	[Address(RVA = "0x993D4C", Offset = "0x993D4C", VA = "0x993D4C")]
	public void ResumeGame()
	{
	}

	[Token(Token = "0x60000DD")]
	[Address(RVA = "0x993E58", Offset = "0x993E58", VA = "0x993E58")]
	public void RestartGame()
	{
	}

	[Token(Token = "0x60000DE")]
	[Address(RVA = "0x993F8C", Offset = "0x993F8C", VA = "0x993F8C")]
	public void NextGame()
	{
	}

	[Token(Token = "0x60000DF")]
	[Address(RVA = "0x993F90", Offset = "0x993F90", VA = "0x993F90")]
	private void NextLevel()
	{
	}

	[Token(Token = "0x60000E0")]
	[Address(RVA = "0x993F94", Offset = "0x993F94", VA = "0x993F94")]
	public void MainMenu()
	{
	}

	[Token(Token = "0x60000E1")]
	[Address(RVA = "0x993F08", Offset = "0x993F08", VA = "0x993F08")]
	[IteratorStateMachine(typeof(<LoadLevelGame>d__47))]
	private IEnumerator LoadLevelGame(float waitTime)
	{
		return null;
	}

	[Token(Token = "0x60000E2")]
	[Address(RVA = "0x994064", Offset = "0x994064", VA = "0x994064")]
	[IteratorStateMachine(typeof(<LoadLevelAsync>d__48))]
	private IEnumerator LoadLevelAsync()
	{
		return null;
	}

	[Token(Token = "0x60000E3")]
	[Address(RVA = "0x9938B4", Offset = "0x9938B4", VA = "0x9938B4")]
	public void ShowCarUI()
	{
	}

	[Token(Token = "0x60000E4")]
	[Address(RVA = "0x993510", Offset = "0x993510", VA = "0x993510")]
	private void StartingGameTimer()
	{
	}

	[Token(Token = "0x60000E5")]
	[Address(RVA = "0x992160", Offset = "0x992160", VA = "0x992160")]
	private string FormatSeconds(float elapsed)
	{
		return null;
	}

	[Token(Token = "0x60000E6")]
	[Address(RVA = "0x994100", Offset = "0x994100", VA = "0x994100")]
	public GameUI()
	{
	}
}
[Token(Token = "0x2000041")]
public enum Panels
{
	[Token(Token = "0x400017D")]
	MainMenu,
	[Token(Token = "0x400017E")]
	SelectVehicle,
	[Token(Token = "0x400017F")]
	SelectLevel,
	[Token(Token = "0x4000180")]
	Settings
}
[Token(Token = "0x2000042")]
public class MainMenu : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000043")]
	public class MenuGUI
	{
		[Token(Token = "0x400019A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Text GameScore;

		[Token(Token = "0x400019B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Text VehicleName;

		[Token(Token = "0x400019C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Text VehiclePrice;

		[Token(Token = "0x400019D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityEngine.UI.Slider VehicleSpeed;

		[Token(Token = "0x400019E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityEngine.UI.Slider VehicleBraking;

		[Token(Token = "0x400019F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UnityEngine.UI.Slider VehicleNitro;

		[Token(Token = "0x40001A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public UnityEngine.UI.Slider sensitivity;

		[Token(Token = "0x40001A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Toggle audio;

		[Token(Token = "0x40001A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Toggle music;

		[Token(Token = "0x40001A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Toggle vibrateToggle;

		[Token(Token = "0x40001A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Toggle ButtonMode;

		[Token(Token = "0x40001A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Toggle AccelMode;

		[Token(Token = "0x40001A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Image wheelColor;

		[Token(Token = "0x40001A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Image smokeColor;

		[Token(Token = "0x40001A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Image loadingBar;

		[Token(Token = "0x40001A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public GameObject loading;

		[Token(Token = "0x40001AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public GameObject customizeVehicle;

		[Token(Token = "0x40001AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public GameObject buyNewVehicle;

		[Token(Token = "0x40001AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public GameObject selectVehicle;

		[Token(Token = "0x40001AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public UnityEngine.UI.Button btnButtonMode;

		[Token(Token = "0x40001AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public UnityEngine.UI.Button btnAccelMode;

		[Token(Token = "0x40001AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Dropdown DropdownType;

		[Token(Token = "0x600011D")]
		[Address(RVA = "0x997524", Offset = "0x997524", VA = "0x997524")]
		public MenuGUI()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x2000044")]
	public class MenuPanels
	{
		[Token(Token = "0x40001B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GameObject MainMenu;

		[Token(Token = "0x40001B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject SelectVehicle;

		[Token(Token = "0x40001B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject SelectLevel;

		[Token(Token = "0x40001B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject EnoughMoney;

		[Token(Token = "0x40001B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject Settings;

		[Token(Token = "0x600011E")]
		[Address(RVA = "0x99752C", Offset = "0x99752C", VA = "0x99752C")]
		public MenuPanels()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x2000045")]
	public class VehicleSetting
	{
		[Serializable]
		[Token(Token = "0x2000046")]
		public class VehiclePower
		{
			[Token(Token = "0x40001BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float speed;

			[Token(Token = "0x40001BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float braking;

			[Token(Token = "0x40001C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float nitro;

			[Token(Token = "0x6000120")]
			[Address(RVA = "0x997594", Offset = "0x997594", VA = "0x997594")]
			public VehiclePower()
			{
			}
		}

		[Token(Token = "0x40001B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x40001B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int price;

		[Token(Token = "0x40001B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject vehicle;

		[Token(Token = "0x40001B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject wheelSmokes;

		[Token(Token = "0x40001B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Material ringMat;

		[Token(Token = "0x40001BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Material smokeMat;

		[Token(Token = "0x40001BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform rearWheels;

		[Token(Token = "0x40001BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public VehiclePower vehiclePower;

		[Token(Token = "0x40001BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[HideInInspector]
		public bool Bought;

		[Token(Token = "0x600011F")]
		[Address(RVA = "0x997534", Offset = "0x997534", VA = "0x997534")]
		public VehicleSetting()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x2000047")]
	public class LevelSetting
	{
		[Serializable]
		[Token(Token = "0x2000048")]
		public class StarClass
		{
			[Token(Token = "0x40001C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Image Star1;

			[Token(Token = "0x40001C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Image Star2;

			[Token(Token = "0x40001C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Image Star3;

			[Token(Token = "0x6000122")]
			[Address(RVA = "0x9975C0", Offset = "0x9975C0", VA = "0x9975C0")]
			public StarClass()
			{
			}
		}

		[Token(Token = "0x40001C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool locked;

		[Token(Token = "0x40001C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEngine.UI.Button panel;

		[Token(Token = "0x40001C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Text bestTime;

		[Token(Token = "0x40001C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Image lockImage;

		[Token(Token = "0x40001C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public StarClass stars;

		[Token(Token = "0x6000121")]
		[Address(RVA = "0x9975B0", Offset = "0x9975B0", VA = "0x9975B0")]
		public LevelSetting()
		{
		}
	}

	[Token(Token = "0x2000049")]
	[CompilerGenerated]
	private sealed class <LoadLevelGame>d__56 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40001C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40001CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40001CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float waitTime;

		[Token(Token = "0x40001CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public MainMenu <>4__this;

		[Token(Token = "0x1700000E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000126")]
			[Address(RVA = "0x9976E0", Offset = "0x9976E0", VA = "0x9976E0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700000F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000128")]
			[Address(RVA = "0x997728", Offset = "0x997728", VA = "0x997728", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000123")]
		[Address(RVA = "0x9975C8", Offset = "0x9975C8", VA = "0x9975C8")]
		[DebuggerHidden]
		public <LoadLevelGame>d__56(int <>1__state)
		{
		}

		[Token(Token = "0x6000124")]
		[Address(RVA = "0x9975F0", Offset = "0x9975F0", VA = "0x9975F0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000125")]
		[Address(RVA = "0x9975F4", Offset = "0x9975F4", VA = "0x9975F4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000127")]
		[Address(RVA = "0x9976E8", Offset = "0x9976E8", VA = "0x9976E8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200004A")]
	[CompilerGenerated]
	private sealed class <LoadLevelAsync>d__57 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40001CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40001CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40001CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MainMenu <>4__this;

		[Token(Token = "0x17000010")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600012C")]
			[Address(RVA = "0x9978FC", Offset = "0x9978FC", VA = "0x9978FC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000011")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600012E")]
			[Address(RVA = "0x997944", Offset = "0x997944", VA = "0x997944", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000129")]
		[Address(RVA = "0x997730", Offset = "0x997730", VA = "0x997730")]
		[DebuggerHidden]
		public <LoadLevelAsync>d__57(int <>1__state)
		{
		}

		[Token(Token = "0x600012A")]
		[Address(RVA = "0x997758", Offset = "0x997758", VA = "0x997758", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600012B")]
		[Address(RVA = "0x99775C", Offset = "0x99775C", VA = "0x99775C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600012D")]
		[Address(RVA = "0x997904", Offset = "0x997904", VA = "0x997904", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000182")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float cameraRotateSpeed;

	[Token(Token = "0x4000183")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Animator FadeBackGround;

	[Token(Token = "0x4000184")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioSource menuMusic;

	[Token(Token = "0x4000185")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform vehicleRoot;

	[Token(Token = "0x4000186")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Material[] allRestMaterials;

	[Token(Token = "0x4000187")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public MenuPanels menuPanels;

	[Token(Token = "0x4000188")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public MenuGUI menuGUI;

	[Token(Token = "0x4000189")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public VehicleSetting[] vehicleSetting;

	[Token(Token = "0x400018A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public LevelSetting[] levelSetting;

	[Token(Token = "0x400018B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Panels activePanel;

	[Token(Token = "0x400018C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private bool vertical;

	[Token(Token = "0x400018D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
	private bool horizontal;

	[Token(Token = "0x400018E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Vector2 startPos;

	[Token(Token = "0x400018F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Vector2 touchDeltaPosition;

	[Token(Token = "0x4000190")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float x;

	[Token(Token = "0x4000191")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private float y;

	[Token(Token = "0x4000192")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private VehicleSetting currentVehicle;

	[Token(Token = "0x4000193")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private int currentVehicleNumber;

	[Token(Token = "0x4000194")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private int currentLevelNumber;

	[Token(Token = "0x4000195")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Color mainColor;

	[Token(Token = "0x4000196")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private bool randomColorActive;

	[Token(Token = "0x4000197")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA1")]
	private bool startingGame;

	[Token(Token = "0x4000198")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private float menuLoadTime;

	[Token(Token = "0x4000199")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private AsyncOperation sceneLoadingOperation;

	[Token(Token = "0x1700000D")]
	private int gameScore
	{
		[Token(Token = "0x60000FB")]
		[Address(RVA = "0x994488", Offset = "0x994488", VA = "0x994488")]
		[CompilerGenerated]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60000FC")]
		[Address(RVA = "0x994490", Offset = "0x994490", VA = "0x994490")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x60000FD")]
	[Address(RVA = "0x994498", Offset = "0x994498", VA = "0x994498")]
	private void Start()
	{
	}

	[Token(Token = "0x60000FE")]
	[Address(RVA = "0x994548", Offset = "0x994548", VA = "0x994548")]
	private void Destroy()
	{
	}

	[Token(Token = "0x60000FF")]
	[Address(RVA = "0x994574", Offset = "0x994574", VA = "0x994574")]
	private void myDropdownValueChangedHandler(Dropdown target)
	{
	}

	[Token(Token = "0x6000100")]
	[Address(RVA = "0x9945E0", Offset = "0x9945E0", VA = "0x9945E0")]
	public void ControlModeButtons(GameObject go)
	{
	}

	[Token(Token = "0x6000101")]
	[Address(RVA = "0x9947F0", Offset = "0x9947F0", VA = "0x9947F0")]
	public void ControlModeAccel(GameObject go)
	{
	}

	[Token(Token = "0x6000102")]
	[Address(RVA = "0x994658", Offset = "0x994658", VA = "0x994658")]
	private void GetInput()
	{
	}

	[Token(Token = "0x6000103")]
	[Address(RVA = "0x994868", Offset = "0x994868", VA = "0x994868")]
	public void DisableVibration(GameObject go)
	{
	}

	[Token(Token = "0x6000104")]
	[Address(RVA = "0x994908", Offset = "0x994908", VA = "0x994908")]
	public void ActiveCurrentColor(Image activeImage)
	{
	}

	[Token(Token = "0x6000105")]
	[Address(RVA = "0x994B04", Offset = "0x994B04", VA = "0x994B04")]
	public void ActiveWheelColor(Image activeImage)
	{
	}

	[Token(Token = "0x6000106")]
	[Address(RVA = "0x994B80", Offset = "0x994B80", VA = "0x994B80")]
	public void ActiveSmokeColor(Image activeImage)
	{
	}

	[Token(Token = "0x6000107")]
	[Address(RVA = "0x994BFC", Offset = "0x994BFC", VA = "0x994BFC")]
	public void OutCustomizeVehicle()
	{
	}

	[Token(Token = "0x6000108")]
	[Address(RVA = "0x994C60", Offset = "0x994C60", VA = "0x994C60")]
	public void RandomColor()
	{
	}

	[Token(Token = "0x6000109")]
	[Address(RVA = "0x994F40", Offset = "0x994F40", VA = "0x994F40")]
	public void SettingActive(bool activePanel)
	{
	}

	[Token(Token = "0x600010A")]
	[Address(RVA = "0x994F78", Offset = "0x994F78", VA = "0x994F78")]
	public void ClickExitButton()
	{
	}

	[Token(Token = "0x600010B")]
	[Address(RVA = "0x994F80", Offset = "0x994F80", VA = "0x994F80")]
	public void CurrentPanel(int current)
	{
	}

	[Token(Token = "0x600010C")]
	[Address(RVA = "0x995264", Offset = "0x995264", VA = "0x995264")]
	public void BuyVehicle()
	{
	}

	[Token(Token = "0x600010D")]
	[Address(RVA = "0x9953C0", Offset = "0x9953C0", VA = "0x9953C0")]
	public void NextVehicle()
	{
	}

	[Token(Token = "0x600010E")]
	[Address(RVA = "0x99555C", Offset = "0x99555C", VA = "0x99555C")]
	public void PreviousVehicle()
	{
	}

	[Token(Token = "0x600010F")]
	[Address(RVA = "0x9956F8", Offset = "0x9956F8", VA = "0x9956F8")]
	public void QualitySetting(int quality)
	{
	}

	[Token(Token = "0x6000110")]
	[Address(RVA = "0x995754", Offset = "0x995754", VA = "0x995754")]
	public void EditSensitivity()
	{
	}

	[Token(Token = "0x6000111")]
	[Address(RVA = "0x9957C0", Offset = "0x9957C0", VA = "0x9957C0")]
	public void DisableAudioButton(GameObject go)
	{
	}

	[Token(Token = "0x6000112")]
	[Address(RVA = "0x995874", Offset = "0x995874", VA = "0x995874")]
	public void DisableMusicButton(GameObject go)
	{
	}

	[Token(Token = "0x6000113")]
	[Address(RVA = "0x995964", Offset = "0x995964", VA = "0x995964")]
	public void EraseSave()
	{
	}

	[Token(Token = "0x6000114")]
	[Address(RVA = "0x995A30", Offset = "0x995A30", VA = "0x995A30")]
	public void StartGame()
	{
	}

	[Token(Token = "0x6000115")]
	[Address(RVA = "0x995AB8", Offset = "0x995AB8", VA = "0x995AB8")]
	[IteratorStateMachine(typeof(<LoadLevelGame>d__56))]
	private IEnumerator LoadLevelGame(float waitTime)
	{
		return null;
	}

	[Token(Token = "0x6000116")]
	[Address(RVA = "0x995B3C", Offset = "0x995B3C", VA = "0x995B3C")]
	[IteratorStateMachine(typeof(<LoadLevelAsync>d__57))]
	private IEnumerator LoadLevelAsync()
	{
		return null;
	}

	[Token(Token = "0x6000117")]
	[Address(RVA = "0x995BB0", Offset = "0x995BB0", VA = "0x995BB0")]
	public void currentLevel(int current)
	{
	}

	[Token(Token = "0x6000118")]
	[Address(RVA = "0x996270", Offset = "0x996270", VA = "0x996270")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000119")]
	[Address(RVA = "0x996C2C", Offset = "0x996C2C", VA = "0x996C2C")]
	public void RateUs()
	{
	}

	[Token(Token = "0x600011A")]
	[Address(RVA = "0x996C88", Offset = "0x996C88", VA = "0x996C88")]
	private void Update()
	{
	}

	[Token(Token = "0x600011B")]
	[Address(RVA = "0x9974F8", Offset = "0x9974F8", VA = "0x9974F8")]
	public MainMenu()
	{
	}
}
[Token(Token = "0x200004B")]
public class MiniMap : MonoBehaviour
{
	[Token(Token = "0x40001D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform mapPlane;

	[Token(Token = "0x40001D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform miniMapCamera;

	[Token(Token = "0x600012F")]
	[Address(RVA = "0x99794C", Offset = "0x99794C", VA = "0x99794C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000130")]
	[Address(RVA = "0x997A58", Offset = "0x997A58", VA = "0x997A58")]
	public MiniMap()
	{
	}
}
[Token(Token = "0x200004C")]
public class MobileControl : MonoBehaviour
{
	[Token(Token = "0x40001D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AIControl aicontrol;

	[Token(Token = "0x6000131")]
	[Address(RVA = "0x997A60", Offset = "0x997A60", VA = "0x997A60")]
	public void CarAccelForward(float amount)
	{
	}

	[Token(Token = "0x6000132")]
	[Address(RVA = "0x997AC0", Offset = "0x997AC0", VA = "0x997AC0")]
	public void CarAccelBack(float amount)
	{
	}

	[Token(Token = "0x6000133")]
	[Address(RVA = "0x997B20", Offset = "0x997B20", VA = "0x997B20")]
	public void CarSteer(float amount)
	{
	}

	[Token(Token = "0x6000134")]
	[Address(RVA = "0x997B80", Offset = "0x997B80", VA = "0x997B80")]
	public void CarHandBrake(bool HBrakeing)
	{
	}

	[Token(Token = "0x6000135")]
	[Address(RVA = "0x997BDC", Offset = "0x997BDC", VA = "0x997BDC")]
	public void CarShift(bool Shifting)
	{
	}

	[Token(Token = "0x6000136")]
	[Address(RVA = "0x997C38", Offset = "0x997C38", VA = "0x997C38")]
	public MobileControl()
	{
	}
}
[Token(Token = "0x200004D")]
public class OpenURL : MonoBehaviour
{
	[Token(Token = "0x6000137")]
	[Address(RVA = "0x997C40", Offset = "0x997C40", VA = "0x997C40")]
	public void OpenTab(string URL)
	{
	}

	[Token(Token = "0x6000138")]
	[Address(RVA = "0x997C4C", Offset = "0x997C4C", VA = "0x997C4C")]
	public OpenURL()
	{
	}
}
[Token(Token = "0x200004E")]
public class PlayerPrefsX
{
	[Token(Token = "0x200004F")]
	private enum ArrayType
	{
		[Token(Token = "0x40001D8")]
		Float,
		[Token(Token = "0x40001D9")]
		Int32,
		[Token(Token = "0x40001DA")]
		Bool,
		[Token(Token = "0x40001DB")]
		String,
		[Token(Token = "0x40001DC")]
		Vector2,
		[Token(Token = "0x40001DD")]
		Vector3,
		[Token(Token = "0x40001DE")]
		Quaternion,
		[Token(Token = "0x40001DF")]
		Color
	}

	[Token(Token = "0x40001D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static int endianDiff1;

	[Token(Token = "0x40001D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static int endianDiff2;

	[Token(Token = "0x40001D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static int idx;

	[Token(Token = "0x40001D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static byte[] byteBlock;

	[Token(Token = "0x6000139")]
	[Address(RVA = "0x997C54", Offset = "0x997C54", VA = "0x997C54")]
	public static bool SetBool(string name, bool value)
	{
		return default(bool);
	}

	[Token(Token = "0x600013A")]
	[Address(RVA = "0x997CE4", Offset = "0x997CE4", VA = "0x997CE4")]
	public static bool GetBool(string name)
	{
		return default(bool);
	}

	[Token(Token = "0x600013B")]
	[Address(RVA = "0x997D00", Offset = "0x997D00", VA = "0x997D00")]
	public static bool GetBool(string name, bool defaultValue)
	{
		return default(bool);
	}

	[Token(Token = "0x600013C")]
	[Address(RVA = "0x997D20", Offset = "0x997D20", VA = "0x997D20")]
	public static long GetLong(string key, long defaultValue)
	{
		return default(long);
	}

	[Token(Token = "0x600013D")]
	[Address(RVA = "0x997DDC", Offset = "0x997DDC", VA = "0x997DDC")]
	public static long GetLong(string key)
	{
		return default(long);
	}

	[Token(Token = "0x600013E")]
	[Address(RVA = "0x997DCC", Offset = "0x997DCC", VA = "0x997DCC")]
	private static void SplitLong(long input, out int lowBits, out int highBits)
	{
	}

	[Token(Token = "0x600013F")]
	[Address(RVA = "0x997E78", Offset = "0x997E78", VA = "0x997E78")]
	public static void SetLong(string key, long value)
	{
	}

	[Token(Token = "0x6000140")]
	[Address(RVA = "0x997F10", Offset = "0x997F10", VA = "0x997F10")]
	public static bool SetVector2(string key, Vector2 vector)
	{
		return default(bool);
	}

	[Token(Token = "0x6000141")]
	[Address(RVA = "0x998048", Offset = "0x998048", VA = "0x998048")]
	private static Vector2 GetVector2(string key)
	{
		return default(Vector2);
	}

	[Token(Token = "0x6000142")]
	[Address(RVA = "0x9981C0", Offset = "0x9981C0", VA = "0x9981C0")]
	public static Vector2 GetVector2(string key, Vector2 defaultValue)
	{
		return default(Vector2);
	}

	[Token(Token = "0x6000143")]
	[Address(RVA = "0x998204", Offset = "0x998204", VA = "0x998204")]
	public static bool SetVector3(string key, Vector3 vector)
	{
		return default(bool);
	}

	[Token(Token = "0x6000144")]
	[Address(RVA = "0x9982A4", Offset = "0x9982A4", VA = "0x9982A4")]
	public static Vector3 GetVector3(string key)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000145")]
	[Address(RVA = "0x99831C", Offset = "0x99831C", VA = "0x99831C")]
	public static Vector3 GetVector3(string key, Vector3 defaultValue)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000146")]
	[Address(RVA = "0x998374", Offset = "0x998374", VA = "0x998374")]
	public static bool SetQuaternion(string key, Quaternion vector)
	{
		return default(bool);
	}

	[Token(Token = "0x6000147")]
	[Address(RVA = "0x998424", Offset = "0x998424", VA = "0x998424")]
	public static Quaternion GetQuaternion(string key)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x6000148")]
	[Address(RVA = "0x9984A8", Offset = "0x9984A8", VA = "0x9984A8")]
	public static Quaternion GetQuaternion(string key, Quaternion defaultValue)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x6000149")]
	[Address(RVA = "0x99850C", Offset = "0x99850C", VA = "0x99850C")]
	public static bool SetColor(string key, Color color)
	{
		return default(bool);
	}

	[Token(Token = "0x600014A")]
	[Address(RVA = "0x9985BC", Offset = "0x9985BC", VA = "0x9985BC")]
	public static Color GetColor(string key)
	{
		return default(Color);
	}

	[Token(Token = "0x600014B")]
	[Address(RVA = "0x9985F8", Offset = "0x9985F8", VA = "0x9985F8")]
	public static Color GetColor(string key, Color defaultValue)
	{
		return default(Color);
	}

	[Token(Token = "0x600014C")]
	[Address(RVA = "0x99865C", Offset = "0x99865C", VA = "0x99865C")]
	public static bool SetBoolArray(string key, bool[] boolArray)
	{
		return default(bool);
	}

	[Token(Token = "0x600014D")]
	[Address(RVA = "0x998A1C", Offset = "0x998A1C", VA = "0x998A1C")]
	public static bool[] GetBoolArray(string key)
	{
		return null;
	}

	[Token(Token = "0x600014E")]
	[Address(RVA = "0x998CB8", Offset = "0x998CB8", VA = "0x998CB8")]
	public static bool[] GetBoolArray(string key, bool defaultValue, int defaultSize)
	{
		return null;
	}

	[Token(Token = "0x600014F")]
	[Address(RVA = "0x998D78", Offset = "0x998D78", VA = "0x998D78")]
	public static bool SetStringArray(string key, string[] stringArray)
	{
		return default(bool);
	}

	[Token(Token = "0x6000150")]
	[Address(RVA = "0x999058", Offset = "0x999058", VA = "0x999058")]
	public static string[] GetStringArray(string key)
	{
		return null;
	}

	[Token(Token = "0x6000151")]
	[Address(RVA = "0x999378", Offset = "0x999378", VA = "0x999378")]
	public static string[] GetStringArray(string key, string defaultValue, int defaultSize)
	{
		return null;
	}

	[Token(Token = "0x6000152")]
	[Address(RVA = "0x999480", Offset = "0x999480", VA = "0x999480")]
	public static bool SetIntArray(string key, int[] intArray)
	{
		return default(bool);
	}

	[Token(Token = "0x6000153")]
	[Address(RVA = "0x997F98", Offset = "0x997F98", VA = "0x997F98")]
	public static bool SetFloatArray(string key, float[] floatArray)
	{
		return default(bool);
	}

	[Token(Token = "0x6000154")]
	[Address(RVA = "0x999530", Offset = "0x999530", VA = "0x999530")]
	public static bool SetVector2Array(string key, Vector2[] vector2Array)
	{
		return default(bool);
	}

	[Token(Token = "0x6000155")]
	[Address(RVA = "0x9995E0", Offset = "0x9995E0", VA = "0x9995E0")]
	public static bool SetVector3Array(string key, Vector3[] vector3Array)
	{
		return default(bool);
	}

	[Token(Token = "0x6000156")]
	[Address(RVA = "0x999690", Offset = "0x999690", VA = "0x999690")]
	public static bool SetQuaternionArray(string key, Quaternion[] quaternionArray)
	{
		return default(bool);
	}

	[Token(Token = "0x6000157")]
	[Address(RVA = "0x999740", Offset = "0x999740", VA = "0x999740")]
	public static bool SetColorArray(string key, Color[] colorArray)
	{
		return default(bool);
	}

	[Token(Token = "0x6000158")]
	private static bool SetValue<T>(string key, T array, ArrayType arrayType, int vectorNumber, Action<T, byte[], int> convert) where T : IList
	{
		return default(bool);
	}

	[Token(Token = "0x6000159")]
	[Address(RVA = "0x9997F0", Offset = "0x9997F0", VA = "0x9997F0")]
	private static void ConvertFromInt(int[] array, byte[] bytes, int i)
	{
	}

	[Token(Token = "0x600015A")]
	[Address(RVA = "0x99981C", Offset = "0x99981C", VA = "0x99981C")]
	private static void ConvertFromFloat(float[] array, byte[] bytes, int i)
	{
	}

	[Token(Token = "0x600015B")]
	[Address(RVA = "0x9998E4", Offset = "0x9998E4", VA = "0x9998E4")]
	private static void ConvertFromVector2(Vector2[] array, byte[] bytes, int i)
	{
	}

	[Token(Token = "0x600015C")]
	[Address(RVA = "0x999948", Offset = "0x999948", VA = "0x999948")]
	private static void ConvertFromVector3(Vector3[] array, byte[] bytes, int i)
	{
	}

	[Token(Token = "0x600015D")]
	[Address(RVA = "0x9999DC", Offset = "0x9999DC", VA = "0x9999DC")]
	private static void ConvertFromQuaternion(Quaternion[] array, byte[] bytes, int i)
	{
	}

	[Token(Token = "0x600015E")]
	[Address(RVA = "0x999A7C", Offset = "0x999A7C", VA = "0x999A7C")]
	private static void ConvertFromColor(Color[] array, byte[] bytes, int i)
	{
	}

	[Token(Token = "0x600015F")]
	[Address(RVA = "0x999B1C", Offset = "0x999B1C", VA = "0x999B1C")]
	public static int[] GetIntArray(string key)
	{
		return null;
	}

	[Token(Token = "0x6000160")]
	[Address(RVA = "0x999C28", Offset = "0x999C28", VA = "0x999C28")]
	public static int[] GetIntArray(string key, int defaultValue, int defaultSize)
	{
		return null;
	}

	[Token(Token = "0x6000161")]
	[Address(RVA = "0x9980B4", Offset = "0x9980B4", VA = "0x9980B4")]
	public static float[] GetFloatArray(string key)
	{
		return null;
	}

	[Token(Token = "0x6000162")]
	[Address(RVA = "0x999CE4", Offset = "0x999CE4", VA = "0x999CE4")]
	public static float[] GetFloatArray(string key, float defaultValue, int defaultSize)
	{
		return null;
	}

	[Token(Token = "0x6000163")]
	[Address(RVA = "0x999DA0", Offset = "0x999DA0", VA = "0x999DA0")]
	public static Vector2[] GetVector2Array(string key)
	{
		return null;
	}

	[Token(Token = "0x6000164")]
	[Address(RVA = "0x999EAC", Offset = "0x999EAC", VA = "0x999EAC")]
	public static Vector2[] GetVector2Array(string key, Vector2 defaultValue, int defaultSize)
	{
		return null;
	}

	[Token(Token = "0x6000165")]
	[Address(RVA = "0x999F70", Offset = "0x999F70", VA = "0x999F70")]
	public static Vector3[] GetVector3Array(string key)
	{
		return null;
	}

	[Token(Token = "0x6000166")]
	[Address(RVA = "0x99A07C", Offset = "0x99A07C", VA = "0x99A07C")]
	public static Vector3[] GetVector3Array(string key, Vector3 defaultValue, int defaultSize)
	{
		return null;
	}

	[Token(Token = "0x6000167")]
	[Address(RVA = "0x99A150", Offset = "0x99A150", VA = "0x99A150")]
	public static Quaternion[] GetQuaternionArray(string key)
	{
		return null;
	}

	[Token(Token = "0x6000168")]
	[Address(RVA = "0x99A25C", Offset = "0x99A25C", VA = "0x99A25C")]
	public static Quaternion[] GetQuaternionArray(string key, Quaternion defaultValue, int defaultSize)
	{
		return null;
	}

	[Token(Token = "0x6000169")]
	[Address(RVA = "0x99A338", Offset = "0x99A338", VA = "0x99A338")]
	public static Color[] GetColorArray(string key)
	{
		return null;
	}

	[Token(Token = "0x600016A")]
	[Address(RVA = "0x99A444", Offset = "0x99A444", VA = "0x99A444")]
	public static Color[] GetColorArray(string key, Color defaultValue, int defaultSize)
	{
		return null;
	}

	[Token(Token = "0x600016B")]
	private static void GetValue<T>(string key, T list, ArrayType arrayType, int vectorNumber, Action<T, byte[]> convert) where T : IList
	{
	}

	[Token(Token = "0x600016C")]
	[Address(RVA = "0x99A520", Offset = "0x99A520", VA = "0x99A520")]
	private static void ConvertToInt(List<int> list, byte[] bytes)
	{
	}

	[Token(Token = "0x600016D")]
	[Address(RVA = "0x99A5D0", Offset = "0x99A5D0", VA = "0x99A5D0")]
	private static void ConvertToFloat(List<float> list, byte[] bytes)
	{
	}

	[Token(Token = "0x600016E")]
	[Address(RVA = "0x99A708", Offset = "0x99A708", VA = "0x99A708")]
	private static void ConvertToVector2(List<Vector2> list, byte[] bytes)
	{
	}

	[Token(Token = "0x600016F")]
	[Address(RVA = "0x99A7D4", Offset = "0x99A7D4", VA = "0x99A7D4")]
	private static void ConvertToVector3(List<Vector3> list, byte[] bytes)
	{
	}

	[Token(Token = "0x6000170")]
	[Address(RVA = "0x99A8B8", Offset = "0x99A8B8", VA = "0x99A8B8")]
	private static void ConvertToQuaternion(List<Quaternion> list, byte[] bytes)
	{
	}

	[Token(Token = "0x6000171")]
	[Address(RVA = "0x99A9B4", Offset = "0x99A9B4", VA = "0x99A9B4")]
	private static void ConvertToColor(List<Color> list, byte[] bytes)
	{
	}

	[Token(Token = "0x6000172")]
	[Address(RVA = "0x99AAB0", Offset = "0x99AAB0", VA = "0x99AAB0")]
	public static void ShowArrayType(string key)
	{
	}

	[Token(Token = "0x6000173")]
	[Address(RVA = "0x9987B8", Offset = "0x9987B8", VA = "0x9987B8")]
	private static void Initialize()
	{
	}

	[Token(Token = "0x6000174")]
	[Address(RVA = "0x998928", Offset = "0x998928", VA = "0x998928")]
	private static bool SaveBytes(string key, byte[] bytes)
	{
		return default(bool);
	}

	[Token(Token = "0x6000175")]
	[Address(RVA = "0x99984C", Offset = "0x99984C", VA = "0x99984C")]
	private static void ConvertFloatToBytes(float f, byte[] bytes)
	{
	}

	[Token(Token = "0x6000176")]
	[Address(RVA = "0x99A67C", Offset = "0x99A67C", VA = "0x99A67C")]
	private static float ConvertBytesToFloat(byte[] bytes)
	{
		return default(float);
	}

	[Token(Token = "0x6000177")]
	[Address(RVA = "0x998890", Offset = "0x998890", VA = "0x998890")]
	private static void ConvertInt32ToBytes(int i, byte[] bytes)
	{
	}

	[Token(Token = "0x6000178")]
	[Address(RVA = "0x998C2C", Offset = "0x998C2C", VA = "0x998C2C")]
	private static int ConvertBytesToInt32(byte[] bytes)
	{
		return default(int);
	}

	[Token(Token = "0x6000179")]
	[Address(RVA = "0x99ABF4", Offset = "0x99ABF4", VA = "0x99ABF4")]
	private static void ConvertTo4Bytes(byte[] bytes)
	{
	}

	[Token(Token = "0x600017A")]
	[Address(RVA = "0x99AD74", Offset = "0x99AD74", VA = "0x99AD74")]
	private static void ConvertFrom4Bytes(byte[] bytes)
	{
	}

	[Token(Token = "0x600017B")]
	[Address(RVA = "0x99AEF4", Offset = "0x99AEF4", VA = "0x99AEF4")]
	public PlayerPrefsX()
	{
	}
}
[Token(Token = "0x2000050")]
public class RunButton : MonoBehaviour
{
	[Token(Token = "0x40001E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public KeyCode keyPress;

	[Token(Token = "0x600017C")]
	[Address(RVA = "0x99AEFC", Offset = "0x99AEFC", VA = "0x99AEFC")]
	private void Update()
	{
	}

	[Token(Token = "0x600017D")]
	[Address(RVA = "0x99AF84", Offset = "0x99AF84", VA = "0x99AF84")]
	public RunButton()
	{
	}
}
[Token(Token = "0x2000051")]
public class AIVehicle : MonoBehaviour
{
	[Token(Token = "0x40001E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float carRestTime;

	[Token(Token = "0x40001E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float forwardSpeed;

	[Token(Token = "0x40001E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float steerSpeed;

	[Token(Token = "0x40001E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float nextNodeDistance;

	[Token(Token = "0x40001E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform frontPoint;

	[Token(Token = "0x40001E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	public Transform currentNode;

	[Token(Token = "0x40001E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[HideInInspector]
	public Transform nextNode;

	[Token(Token = "0x40001E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[HideInInspector]
	public Transform wrongNode;

	[Token(Token = "0x40001E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[HideInInspector]
	public int currentLap;

	[Token(Token = "0x40001EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[HideInInspector]
	public float playerCurrentTime;

	[Token(Token = "0x40001EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[HideInInspector]
	public float playerBestTime;

	[Token(Token = "0x40001EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[HideInInspector]
	public float playerLastTime;

	[Token(Token = "0x40001ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[HideInInspector]
	public float AIAccel;

	[Token(Token = "0x40001EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[HideInInspector]
	public float AISteer;

	[Token(Token = "0x40001EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[HideInInspector]
	public bool AIBrake;

	[Token(Token = "0x40001F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private VehicleControl vehicleControl;

	[Token(Token = "0x40001F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private bool goNextNode;

	[Token(Token = "0x40001F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
	private bool getLap;

	[Token(Token = "0x40001F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private int carPreviousNodes;

	[Token(Token = "0x40001F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float targetAngle;

	[Token(Token = "0x40001F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private float restTimeer;

	[Token(Token = "0x600017E")]
	[Address(RVA = "0x99AF8C", Offset = "0x99AF8C", VA = "0x99AF8C")]
	private void Start()
	{
	}

	[Token(Token = "0x600017F")]
	[Address(RVA = "0x99B010", Offset = "0x99B010", VA = "0x99B010")]
	private void Update()
	{
	}

	[Token(Token = "0x6000180")]
	[Address(RVA = "0x99B08C", Offset = "0x99B08C", VA = "0x99B08C")]
	private void AICarControl()
	{
	}

	[Token(Token = "0x6000181")]
	[Address(RVA = "0x99BC08", Offset = "0x99BC08", VA = "0x99BC08")]
	public AIVehicle()
	{
	}
}
[Token(Token = "0x2000052")]
public class GizmoObject : MonoBehaviour
{
	[Token(Token = "0x40001F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Color GizmoColor;

	[Token(Token = "0x40001F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float GizmoSize;

	[Token(Token = "0x6000182")]
	[Address(RVA = "0x99BC24", Offset = "0x99BC24", VA = "0x99BC24")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6000183")]
	[Address(RVA = "0x99BE78", Offset = "0x99BE78", VA = "0x99BE78")]
	public GizmoObject()
	{
	}
}
[Token(Token = "0x2000053")]
public class VehicleCamera : MonoBehaviour
{
	[Token(Token = "0x40001F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static VehicleCamera manage;

	[Token(Token = "0x40001F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float smooth;

	[Token(Token = "0x40001FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float distance;

	[Token(Token = "0x40001FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float height;

	[Token(Token = "0x40001FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float angle;

	[Token(Token = "0x40001FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public LayerMask lineOfSightMask;

	[Token(Token = "0x40001FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	public Transform target;

	[Token(Token = "0x40001FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[HideInInspector]
	public List<Transform> cameraSwitchView;

	[Token(Token = "0x4000200")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool farCameraView;

	[Token(Token = "0x4000201")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private Vector3 farCameraPosition;

	[Token(Token = "0x4000202")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3 velocity;

	[Token(Token = "0x4000203")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float Xsmooth;

	[Token(Token = "0x4000204")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float farDistance;

	[Token(Token = "0x4000205")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private float zAngleAmount;

	[Token(Token = "0x4000206")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float timeScale;

	[Token(Token = "0x4000207")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private float currentDistance;

	[Token(Token = "0x4000208")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private int Switch;

	[Token(Token = "0x6000184")]
	[Address(RVA = "0x99BE90", Offset = "0x99BE90", VA = "0x99BE90")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000185")]
	[Address(RVA = "0x99BF10", Offset = "0x99BF10", VA = "0x99BF10")]
	private void Start()
	{
	}

	[Token(Token = "0x6000186")]
	[Address(RVA = "0x99C088", Offset = "0x99C088", VA = "0x99C088")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000187")]
	[Address(RVA = "0x99CA38", Offset = "0x99CA38", VA = "0x99CA38")]
	public void CameraSwitch()
	{
	}

	[Token(Token = "0x6000188")]
	[Address(RVA = "0x99C904", Offset = "0x99C904", VA = "0x99C904")]
	private float AccelerationAngle()
	{
		return default(float);
	}

	[Token(Token = "0x6000189")]
	[Address(RVA = "0x99C988", Offset = "0x99C988", VA = "0x99C988")]
	private float AdjustLineOfSight(Vector3 target, Vector3 direction)
	{
		return default(float);
	}

	[Token(Token = "0x600018A")]
	[Address(RVA = "0x99CAC8", Offset = "0x99CAC8", VA = "0x99CAC8")]
	public VehicleCamera()
	{
	}
}
[Token(Token = "0x2000054")]
public class VehicleControl : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000055")]
	public class CarWheels
	{
		[Token(Token = "0x4000232")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ConnectWheel wheels;

		[Token(Token = "0x4000233")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public WheelSetting setting;

		[Token(Token = "0x6000195")]
		[Address(RVA = "0x9A0228", Offset = "0x9A0228", VA = "0x9A0228")]
		public CarWheels()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x2000056")]
	public class ConnectWheel
	{
		[Token(Token = "0x4000234")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool frontWheelDrive;

		[Token(Token = "0x4000235")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform frontRight;

		[Token(Token = "0x4000236")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform frontLeft;

		[Token(Token = "0x4000237")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool backWheelDrive;

		[Token(Token = "0x4000238")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform backRight;

		[Token(Token = "0x4000239")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform backLeft;

		[Token(Token = "0x6000196")]
		[Address(RVA = "0x9A0230", Offset = "0x9A0230", VA = "0x9A0230")]
		public ConnectWheel()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x2000057")]
	public class WheelSetting
	{
		[Token(Token = "0x400023A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float Radius;

		[Token(Token = "0x400023B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float Weight;

		[Token(Token = "0x400023C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float Distance;

		[Token(Token = "0x6000197")]
		[Address(RVA = "0x9A0244", Offset = "0x9A0244", VA = "0x9A0244")]
		public WheelSetting()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x2000058")]
	public class CarLights
	{
		[Token(Token = "0x400023D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Light[] brakeLights;

		[Token(Token = "0x400023E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Light[] reverseLights;

		[Token(Token = "0x6000198")]
		[Address(RVA = "0x9A0264", Offset = "0x9A0264", VA = "0x9A0264")]
		public CarLights()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x2000059")]
	public class CarSounds
	{
		[Token(Token = "0x400023F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AudioSource IdleEngine;

		[Token(Token = "0x4000240")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioSource LowEngine;

		[Token(Token = "0x4000241")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AudioSource HighEngine;

		[Token(Token = "0x4000242")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AudioSource nitro;

		[Token(Token = "0x4000243")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AudioSource switchGear;

		[Token(Token = "0x4000244")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AudioMixerGroup brakeAudioMixer;

		[Token(Token = "0x6000199")]
		[Address(RVA = "0x9A026C", Offset = "0x9A026C", VA = "0x9A026C")]
		public CarSounds()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x200005A")]
	public class CarParticles
	{
		[Token(Token = "0x4000245")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Material brakeParticleMaterial;

		[Token(Token = "0x4000246")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject brakeParticlePerfab;

		[Token(Token = "0x4000247")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ParticleSystem shiftParticle1;

		[Token(Token = "0x4000248")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ParticleSystem shiftParticle2;

		[Token(Token = "0x4000249")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private GameObject[] wheelParticle;

		[Token(Token = "0x600019A")]
		[Address(RVA = "0x9A0274", Offset = "0x9A0274", VA = "0x9A0274")]
		public CarParticles()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x200005B")]
	public class CarSetting
	{
		[Token(Token = "0x400024A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool showNormalGizmos;

		[Token(Token = "0x400024B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform carSteer;

		[Token(Token = "0x400024C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HitGround[] hitGround;

		[Token(Token = "0x400024D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float springs;

		[Token(Token = "0x400024E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float dampers;

		[Token(Token = "0x400024F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float carPower;

		[Token(Token = "0x4000250")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float shiftPower;

		[Token(Token = "0x4000251")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float brakePower;

		[Token(Token = "0x4000252")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector3 shiftCentre;

		[Token(Token = "0x4000253")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float maxSteerAngle;

		[Token(Token = "0x4000254")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float shiftDownRPM;

		[Token(Token = "0x4000255")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float shiftUpRPM;

		[Token(Token = "0x4000256")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float idleRPM;

		[Token(Token = "0x4000257")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float stiffness;

		[Token(Token = "0x4000258")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public bool automaticGear;

		[Token(Token = "0x4000259")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float[] gears;

		[Token(Token = "0x400025A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float LimitBackwardSpeed;

		[Token(Token = "0x400025B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float LimitForwardSpeed;

		[Token(Token = "0x600019B")]
		[Address(RVA = "0x9A02D8", Offset = "0x9A02D8", VA = "0x9A02D8")]
		public CarSetting()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x200005C")]
	public class HitGround
	{
		[Token(Token = "0x400025C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string tag;

		[Token(Token = "0x400025D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool grounded;

		[Token(Token = "0x400025E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AudioClip brakeSound;

		[Token(Token = "0x400025F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AudioClip groundSound;

		[Token(Token = "0x4000260")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Color brakeColor;

		[Token(Token = "0x600019C")]
		[Address(RVA = "0x9A03A8", Offset = "0x9A03A8", VA = "0x9A03A8")]
		public HitGround()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x200005D")]
	public class CameraView
	{
		[Token(Token = "0x4000261")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<Transform> cameraSwitchView;

		[Token(Token = "0x4000262")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float distance;

		[Token(Token = "0x4000263")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float height;

		[Token(Token = "0x4000264")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float angle;

		[Token(Token = "0x600019D")]
		[Address(RVA = "0x9A0400", Offset = "0x9A0400", VA = "0x9A0400")]
		public CameraView()
		{
		}
	}

	[Token(Token = "0x200005E")]
	private class WheelComponent
	{
		[Token(Token = "0x4000265")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform wheel;

		[Token(Token = "0x4000266")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public WheelCollider collider;

		[Token(Token = "0x4000267")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 startPos;

		[Token(Token = "0x4000268")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float rotation;

		[Token(Token = "0x4000269")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float rotation2;

		[Token(Token = "0x400026A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float maxSteer;

		[Token(Token = "0x400026B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool drive;

		[Token(Token = "0x400026C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float pos_y;

		[Token(Token = "0x600019E")]
		[Address(RVA = "0x99CDC0", Offset = "0x99CDC0", VA = "0x99CDC0")]
		public WheelComponent()
		{
		}
	}

	[Token(Token = "0x4000209")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public VehicleMode vehicleMode;

	[Token(Token = "0x400020A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public CarWheels carWheels;

	[Token(Token = "0x400020B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public CarLights carLights;

	[Token(Token = "0x400020C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public CarSounds carSounds;

	[Token(Token = "0x400020D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public CarParticles carParticles;

	[Token(Token = "0x400020E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public CarSetting carSetting;

	[Token(Token = "0x400020F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public CameraView cameraView;

	[Token(Token = "0x4000210")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[HideInInspector]
	public AIVehicle AIVehicle;

	[Token(Token = "0x4000211")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float accel;

	[Token(Token = "0x4000212")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float steer;

	[Token(Token = "0x4000213")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[HideInInspector]
	public bool brake;

	[Token(Token = "0x4000214")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
	private bool shifmotor;

	[Token(Token = "0x4000215")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private float torque;

	[Token(Token = "0x4000216")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[HideInInspector]
	public float curTorque;

	[Token(Token = "0x4000217")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[HideInInspector]
	public float powerShift;

	[Token(Token = "0x4000218")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[HideInInspector]
	public bool shift;

	[Token(Token = "0x4000219")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
	[HideInInspector]
	public bool shifting;

	[Token(Token = "0x400021A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	[HideInInspector]
	public float speed;

	[Token(Token = "0x400021B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float lastSpeed;

	[Token(Token = "0x400021C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private float[] efficiencyTable;

	[Token(Token = "0x400021D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private float efficiencyTableStep;

	[Token(Token = "0x400021E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private float Pitch;

	[Token(Token = "0x400021F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private float PitchDelay;

	[Token(Token = "0x4000220")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private float shiftTime;

	[Token(Token = "0x4000221")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private float shiftDelay;

	[Token(Token = "0x4000222")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	[HideInInspector]
	public int currentGear;

	[Token(Token = "0x4000223")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[HideInInspector]
	public bool NeutralGear;

	[Token(Token = "0x4000224")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	[HideInInspector]
	public float motorRPM;

	[Token(Token = "0x4000225")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[HideInInspector]
	public bool Backward;

	[Token(Token = "0x4000226")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	[HideInInspector]
	public float accelFwd;

	[Token(Token = "0x4000227")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[HideInInspector]
	public float accelBack;

	[Token(Token = "0x4000228")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	[HideInInspector]
	public float steerAmount;

	[Token(Token = "0x4000229")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private float wantedRPM;

	[Token(Token = "0x400022A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private float w_rotate;

	[Token(Token = "0x400022B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private float slip;

	[Token(Token = "0x400022C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	private float slip2;

	[Token(Token = "0x400022D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private float slipRate;

	[Token(Token = "0x400022E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private GameObject[] Particle;

	[Token(Token = "0x400022F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private Vector3 steerCurAngle;

	[Token(Token = "0x4000230")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private Rigidbody myRigidbody;

	[Token(Token = "0x4000231")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private WheelComponent[] wheels;

	[Token(Token = "0x600018B")]
	[Address(RVA = "0x99CB4C", Offset = "0x99CB4C", VA = "0x99CB4C")]
	private WheelComponent SetWheelComponent(Transform wheel, float maxSteer, bool drive, float pos_y)
	{
		return null;
	}

	[Token(Token = "0x600018C")]
	[Address(RVA = "0x99CDC8", Offset = "0x99CDC8", VA = "0x99CDC8")]
	private void Awake()
	{
	}

	[Token(Token = "0x600018D")]
	[Address(RVA = "0x99D370", Offset = "0x99D370", VA = "0x99D370")]
	public void ShiftUp()
	{
	}

	[Token(Token = "0x600018E")]
	[Address(RVA = "0x99D4B4", Offset = "0x99D4B4", VA = "0x99D4B4")]
	public void ShiftDown()
	{
	}

	[Token(Token = "0x600018F")]
	[Address(RVA = "0x99D5B0", Offset = "0x99D5B0", VA = "0x99D5B0")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6000190")]
	[Address(RVA = "0x99D800", Offset = "0x99D800", VA = "0x99D800")]
	private void OnCollisionStay(Collision collision)
	{
	}

	[Token(Token = "0x6000191")]
	[Address(RVA = "0x99D8D8", Offset = "0x99D8D8", VA = "0x99D8D8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000192")]
	[Address(RVA = "0x99D9F4", Offset = "0x99D9F4", VA = "0x99D9F4")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000193")]
	[Address(RVA = "0x99FF64", Offset = "0x99FF64", VA = "0x99FF64")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6000194")]
	[Address(RVA = "0x9A0138", Offset = "0x9A0138", VA = "0x9A0138")]
	public VehicleControl()
	{
	}
}
[Token(Token = "0x200005F")]
public class VehicleDamage : MonoBehaviour
{
	[Token(Token = "0x400026D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float maxMoveDelta;

	[Token(Token = "0x400026E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float maxCollisionStrength;

	[Token(Token = "0x400026F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float YforceDamp;

	[Token(Token = "0x4000270")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float demolutionRange;

	[Token(Token = "0x4000271")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float impactDirManipulator;

	[Token(Token = "0x4000272")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AudioSource crashSound;

	[Token(Token = "0x4000273")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public MeshFilter[] optionalMeshList;

	[Token(Token = "0x4000274")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private MeshFilter[] meshfilters;

	[Token(Token = "0x4000275")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float sqrDemRange;

	[Token(Token = "0x4000276")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private Vector3 colPointToMe;

	[Token(Token = "0x4000277")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float colStrength;

	[Token(Token = "0x600019F")]
	[Address(RVA = "0x9A041C", Offset = "0x9A041C", VA = "0x9A041C")]
	public void Start()
	{
	}

	[Token(Token = "0x60001A0")]
	[Address(RVA = "0x9A0498", Offset = "0x9A0498", VA = "0x9A0498")]
	public void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x60001A1")]
	[Address(RVA = "0x9A0BD0", Offset = "0x9A0BD0", VA = "0x9A0BD0")]
	public void OnMeshForce(Vector4 originPosAndForce)
	{
	}

	[Token(Token = "0x60001A2")]
	[Address(RVA = "0x9A07BC", Offset = "0x9A07BC", VA = "0x9A07BC")]
	public void OnMeshForce(Vector3 originPos, float force)
	{
	}

	[Token(Token = "0x60001A3")]
	[Address(RVA = "0x9A0BD4", Offset = "0x9A0BD4", VA = "0x9A0BD4")]
	public VehicleDamage()
	{
	}
}
[Token(Token = "0x2000060")]
public class Skidmarks : MonoBehaviour
{
	[Token(Token = "0x2000061")]
	private class markSection
	{
		[Token(Token = "0x4000281")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 pos;

		[Token(Token = "0x4000282")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 normal;

		[Token(Token = "0x4000283")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector4 tangent;

		[Token(Token = "0x4000284")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector3 posl;

		[Token(Token = "0x4000285")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Vector3 posr;

		[Token(Token = "0x4000286")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float intensity;

		[Token(Token = "0x4000287")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public int lastIndex;

		[Token(Token = "0x60001A9")]
		[Address(RVA = "0x9A0E38", Offset = "0x9A0E38", VA = "0x9A0E38")]
		public markSection()
		{
		}
	}

	[Token(Token = "0x4000278")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int maxMarks;

	[Token(Token = "0x4000279")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float markWidth;

	[Token(Token = "0x400027A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float groundOffset;

	[Token(Token = "0x400027B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float minDistance;

	[Token(Token = "0x400027C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int indexShift;

	[Token(Token = "0x400027D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private int numMarks;

	[Token(Token = "0x400027E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private markSection[] skidmarks;

	[Token(Token = "0x400027F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool updated;

	[Token(Token = "0x4000280")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	public bool skidmake;

	[Token(Token = "0x60001A4")]
	[Address(RVA = "0x9A0BE8", Offset = "0x9A0BE8", VA = "0x9A0BE8")]
	private void Start()
	{
	}

	[Token(Token = "0x60001A5")]
	[Address(RVA = "0x9A0C5C", Offset = "0x9A0C5C", VA = "0x9A0C5C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001A6")]
	[Address(RVA = "0x9A0F48", Offset = "0x9A0F48", VA = "0x9A0F48")]
	public int AddSkidMark(Vector3 pos, Vector3 normal, float intensity, int lastIndex)
	{
		return default(int);
	}

	[Token(Token = "0x60001A7")]
	[Address(RVA = "0x9A1230", Offset = "0x9A1230", VA = "0x9A1230")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60001A8")]
	[Address(RVA = "0x9A190C", Offset = "0x9A190C", VA = "0x9A190C")]
	public Skidmarks()
	{
	}
}
[Token(Token = "0x2000062")]
public class WheelSkidmarks : MonoBehaviour
{
	[Token(Token = "0x4000288")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject skidCaller;

	[Token(Token = "0x4000289")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float startSlipValue;

	[Token(Token = "0x400028A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Skidmarks skidmarks;

	[Token(Token = "0x400028B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int lastSkidmark;

	[Token(Token = "0x400028C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private WheelCollider wheel_col;

	[Token(Token = "0x60001AA")]
	[Address(RVA = "0x9A1934", Offset = "0x9A1934", VA = "0x9A1934")]
	private void Start()
	{
	}

	[Token(Token = "0x60001AB")]
	[Address(RVA = "0x9A1B7C", Offset = "0x9A1B7C", VA = "0x9A1B7C")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60001AC")]
	[Address(RVA = "0x9A1D24", Offset = "0x9A1D24", VA = "0x9A1D24")]
	public WheelSkidmarks()
	{
	}
}
[Token(Token = "0x2000063")]
public class FarmAreaDetactore : MonoBehaviour
{
	[Token(Token = "0x400028D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] AllObj;

	[Token(Token = "0x400028E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject[] nearestNo;

	[Token(Token = "0x400028F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int previousNo;

	[Token(Token = "0x4000290")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static List<GameObject> go_blocks;

	[Token(Token = "0x60001AD")]
	[Address(RVA = "0x9A1D40", Offset = "0x9A1D40", VA = "0x9A1D40")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60001AE")]
	[Address(RVA = "0x9A1DD8", Offset = "0x9A1DD8", VA = "0x9A1DD8")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x60001AF")]
	[Address(RVA = "0x9A20FC", Offset = "0x9A20FC", VA = "0x9A20FC")]
	private void CheckLevelComplete()
	{
	}

	[Token(Token = "0x60001B0")]
	[Address(RVA = "0x9A228C", Offset = "0x9A228C", VA = "0x9A228C")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60001B1")]
	[Address(RVA = "0x9A2350", Offset = "0x9A2350", VA = "0x9A2350")]
	public FarmAreaDetactore()
	{
	}
}
[Token(Token = "0x2000064")]
public class FeedAnimal : MonoBehaviour
{
	[Token(Token = "0x4000291")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Animation Animal_Feed_Anim;

	[Token(Token = "0x4000292")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int TotalFeedCount;

	[Token(Token = "0x4000293")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject Feed_grass;

	[Token(Token = "0x4000294")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool isLevel14;

	[Token(Token = "0x60001B3")]
	[Address(RVA = "0x9A23E8", Offset = "0x9A23E8", VA = "0x9A23E8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60001B4")]
	[Address(RVA = "0x9A2448", Offset = "0x9A2448", VA = "0x9A2448")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60001B5")]
	[Address(RVA = "0x9A265C", Offset = "0x9A265C", VA = "0x9A265C")]
	public FeedAnimal()
	{
	}
}
[Token(Token = "0x2000065")]
public class FeedChicken : MonoBehaviour
{
	[Token(Token = "0x4000295")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject Bird_Feed_Box;

	[Token(Token = "0x4000296")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Grabbable Egge_Case_Grab;

	[Token(Token = "0x4000297")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Grabbable Chicken_Case_Grab;

	[Token(Token = "0x60001B6")]
	[Address(RVA = "0x9A2664", Offset = "0x9A2664", VA = "0x9A2664")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60001B7")]
	[Address(RVA = "0x9A26C4", Offset = "0x9A26C4", VA = "0x9A26C4")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60001B8")]
	[Address(RVA = "0x9A28D8", Offset = "0x9A28D8", VA = "0x9A28D8")]
	public FeedChicken()
	{
	}
}
[Token(Token = "0x2000066")]
public class FeedObject : MonoBehaviour
{
	[Token(Token = "0x4000298")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject AfterFeed;

	[Token(Token = "0x4000299")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject Eggs;

	[Token(Token = "0x400029A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool isFeeding;

	[Token(Token = "0x60001B9")]
	[Address(RVA = "0x9A28E0", Offset = "0x9A28E0", VA = "0x9A28E0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60001BA")]
	[Address(RVA = "0x9A2954", Offset = "0x9A2954", VA = "0x9A2954")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60001BB")]
	[Address(RVA = "0x9A2A6C", Offset = "0x9A2A6C", VA = "0x9A2A6C")]
	public FeedObject()
	{
	}
}
[Token(Token = "0x2000067")]
public class FertilizerPSCollision : MonoBehaviour
{
	[Token(Token = "0x400029B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int TotalPlant;

	[Token(Token = "0x400029C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int TotalPlantCount;

	[Token(Token = "0x400029D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject go_watering;

	[Token(Token = "0x60001BC")]
	[Address(RVA = "0x9A2A74", Offset = "0x9A2A74", VA = "0x9A2A74")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60001BD")]
	[Address(RVA = "0x9A2AF8", Offset = "0x9A2AF8", VA = "0x9A2AF8")]
	private void OnParticleCollision(GameObject other)
	{
	}

	[Token(Token = "0x60001BE")]
	[Address(RVA = "0x9A2E80", Offset = "0x9A2E80", VA = "0x9A2E80")]
	private void CheckFertilizingComplete()
	{
	}

	[Token(Token = "0x60001BF")]
	[Address(RVA = "0x9A2F5C", Offset = "0x9A2F5C", VA = "0x9A2F5C")]
	public FertilizerPSCollision()
	{
	}
}
[Token(Token = "0x2000068")]
public class FertilizingSpray : MonoBehaviour
{
	[Token(Token = "0x400029E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int TotalPotFerilizing;

	[Token(Token = "0x400029F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int FertilizPotCount;

	[Token(Token = "0x40002A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject AfterFertilized;

	[Token(Token = "0x60001C0")]
	[Address(RVA = "0x9A2F64", Offset = "0x9A2F64", VA = "0x9A2F64")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60001C1")]
	[Address(RVA = "0x9A3008", Offset = "0x9A3008", VA = "0x9A3008")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60001C2")]
	[Address(RVA = "0x9A332C", Offset = "0x9A332C", VA = "0x9A332C")]
	private void CheckForLevelFinish()
	{
	}

	[Token(Token = "0x60001C3")]
	[Address(RVA = "0x9A33E4", Offset = "0x9A33E4", VA = "0x9A33E4")]
	public FertilizingSpray()
	{
	}
}
[Token(Token = "0x2000069")]
public class FertlizeringBox : MonoBehaviour
{
	[Token(Token = "0x40002A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject ps_fertilizer;

	[Token(Token = "0x40002A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject wateringCan;

	[Token(Token = "0x60001C4")]
	[Address(RVA = "0x9A33EC", Offset = "0x9A33EC", VA = "0x9A33EC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60001C5")]
	[Address(RVA = "0x9A3488", Offset = "0x9A3488", VA = "0x9A3488")]
	private void Update()
	{
	}

	[Token(Token = "0x60001C6")]
	[Address(RVA = "0x9A36C4", Offset = "0x9A36C4", VA = "0x9A36C4")]
	public FertlizeringBox()
	{
	}
}
[Token(Token = "0x200006A")]
public class FillWaterMachineTank : MonoBehaviour
{
	[Token(Token = "0x40002A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static FillWaterMachineTank instance;

	[Token(Token = "0x40002A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject Waterflow;

	[Token(Token = "0x40002A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject WaterTankFeild;

	[Token(Token = "0x40002A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject WaterTank;

	[Token(Token = "0x40002A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject FieldArea;

	[Token(Token = "0x60001C7")]
	[Address(RVA = "0x9A36CC", Offset = "0x9A36CC", VA = "0x9A36CC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60001C8")]
	[Address(RVA = "0x9A373C", Offset = "0x9A373C", VA = "0x9A373C")]
	private void Start()
	{
	}

	[Token(Token = "0x60001C9")]
	[Address(RVA = "0x9A375C", Offset = "0x9A375C", VA = "0x9A375C")]
	public void WaterTanker()
	{
	}

	[Token(Token = "0x60001CA")]
	[Address(RVA = "0x9A37C8", Offset = "0x9A37C8", VA = "0x9A37C8")]
	private void OnTriggerStay(Collider other)
	{
	}

	[Token(Token = "0x60001CB")]
	[Address(RVA = "0x9A38C8", Offset = "0x9A38C8", VA = "0x9A38C8")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x60001CC")]
	[Address(RVA = "0x9A3958", Offset = "0x9A3958", VA = "0x9A3958")]
	public FillWaterMachineTank()
	{
	}
}
[Token(Token = "0x200006B")]
public class FillWateTank : MonoBehaviour
{
	[Token(Token = "0x40002A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject Waterflow;

	[Token(Token = "0x40002A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject WaterTankFeild;

	[Token(Token = "0x60001CD")]
	[Address(RVA = "0x9A3960", Offset = "0x9A3960", VA = "0x9A3960")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60001CE")]
	[Address(RVA = "0x9A3980", Offset = "0x9A3980", VA = "0x9A3980")]
	public void WaterTanker()
	{
	}

	[Token(Token = "0x60001CF")]
	[Address(RVA = "0x9A3A4C", Offset = "0x9A3A4C", VA = "0x9A3A4C")]
	private void OnTriggerStay(Collider other)
	{
	}

	[Token(Token = "0x60001D0")]
	[Address(RVA = "0x9A3B4C", Offset = "0x9A3B4C", VA = "0x9A3B4C")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x60001D1")]
	[Address(RVA = "0x9A3BDC", Offset = "0x9A3BDC", VA = "0x9A3BDC")]
	public FillWateTank()
	{
	}
}
[Token(Token = "0x200006C")]
public class TailAnimatorDemo_InsectMover : FBasics_RigidbodyMover
{
	[Token(Token = "0x40002AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[FPD_Header("References", 3f, 3f, 2)]
	public List<Transform> WheelsFront;

	[Token(Token = "0x40002AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public List<Transform> WheelsBack;

	[Token(Token = "0x60001D2")]
	[Address(RVA = "0x9A3BE4", Offset = "0x9A3BE4", VA = "0x9A3BE4", Slot = "5")]
	protected override void UpdateMotor()
	{
	}

	[Token(Token = "0x60001D3")]
	[Address(RVA = "0x9A3DF0", Offset = "0x9A3DF0", VA = "0x9A3DF0")]
	public TailAnimatorDemo_InsectMover()
	{
	}
}
[Token(Token = "0x200006D")]
public class TailDemo_CompensateMovingPlatform : MonoBehaviour
{
	[Token(Token = "0x40002AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TailAnimator2 tailAnimator;

	[Token(Token = "0x40002AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform movingPlatform;

	[Token(Token = "0x40002AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Range(0f, 1f)]
	public float LimitBlend;

	[Token(Token = "0x40002AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Vector3 prePos;

	[Token(Token = "0x60001D4")]
	[Address(RVA = "0x9A3DF8", Offset = "0x9A3DF8", VA = "0x9A3DF8")]
	private void Start()
	{
	}

	[Token(Token = "0x60001D5")]
	[Address(RVA = "0x9A3E24", Offset = "0x9A3E24", VA = "0x9A3E24")]
	private void Update()
	{
	}

	[Token(Token = "0x60001D6")]
	[Address(RVA = "0x9A3FB8", Offset = "0x9A3FB8", VA = "0x9A3FB8")]
	public TailDemo_CompensateMovingPlatform()
	{
	}
}
[Token(Token = "0x200006E")]
public class TailDemo_CuttingController : MonoBehaviour
{
	[Token(Token = "0x40002B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text CountText;

	[Token(Token = "0x40002B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEngine.UI.Slider slider;

	[Token(Token = "0x40002B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TailDemo_SegmentedTailGenerator generator;

	[Token(Token = "0x60001D7")]
	[Address(RVA = "0x9A3FC8", Offset = "0x9A3FC8", VA = "0x9A3FC8")]
	private void Start()
	{
	}

	[Token(Token = "0x60001D8")]
	[Address(RVA = "0x9A40B4", Offset = "0x9A40B4", VA = "0x9A40B4")]
	private void Update()
	{
	}

	[Token(Token = "0x60001D9")]
	[Address(RVA = "0x9A4244", Offset = "0x9A4244", VA = "0x9A4244")]
	public void ValueChangeCheck()
	{
	}

	[Token(Token = "0x60001DA")]
	[Address(RVA = "0x9A46A8", Offset = "0x9A46A8", VA = "0x9A46A8")]
	public TailDemo_CuttingController()
	{
	}
}
[Token(Token = "0x200006F")]
public class TailDemo_EnableOnPlayer : MonoBehaviour
{
	[Token(Token = "0x40002B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public MonoBehaviour ToEnable;

	[Token(Token = "0x40002B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool putPlayerAsChild;

	[Token(Token = "0x60001DC")]
	[Address(RVA = "0x9A46B4", Offset = "0x9A46B4", VA = "0x9A46B4")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x60001DD")]
	[Address(RVA = "0x9A4778", Offset = "0x9A4778", VA = "0x9A4778")]
	private void OnCollisionExit(Collision collision)
	{
	}

	[Token(Token = "0x60001DE")]
	[Address(RVA = "0x9A4828", Offset = "0x9A4828", VA = "0x9A4828")]
	public TailDemo_EnableOnPlayer()
	{
	}
}
[Token(Token = "0x2000070")]
public class TailDemo_LineRenderer : MonoBehaviour
{
	[Token(Token = "0x40002B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Tail will be generated on Start()", order = 0)]
	[Header("References", order = 1)]
	public LineRenderer Line;

	[Token(Token = "0x40002B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TailAnimator2 TailWithSettings;

	[Token(Token = "0x40002B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Vector3 GeneratePosition;

	[Token(Token = "0x40002B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[Header("Parameters")]
	public int SegmentsCount;

	[Token(Token = "0x40002B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool DetachForOptimization;

	[Token(Token = "0x40002BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	[Header("Optional")]
	public bool DrawGizmos;

	[Token(Token = "0x60001DF")]
	[Address(RVA = "0x9A4838", Offset = "0x9A4838", VA = "0x9A4838")]
	private void Reset()
	{
	}

	[Token(Token = "0x60001E0")]
	[Address(RVA = "0x9A4924", Offset = "0x9A4924", VA = "0x9A4924")]
	private void Update()
	{
	}

	[Token(Token = "0x60001E1")]
	[Address(RVA = "0x9A49FC", Offset = "0x9A49FC", VA = "0x9A49FC")]
	private void Start()
	{
	}

	[Token(Token = "0x60001E2")]
	[Address(RVA = "0x9A4E68", Offset = "0x9A4E68", VA = "0x9A4E68")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x60001E3")]
	[Address(RVA = "0x9A4E80", Offset = "0x9A4E80", VA = "0x9A4E80")]
	public TailDemo_LineRenderer()
	{
	}
}
[Token(Token = "0x2000071")]
public class TailDemo_SegmentedTailGenerator : MonoBehaviour
{
	[Token(Token = "0x40002BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("References", order = 1)]
	[Header("Tail will be generated on Start()", order = 0)]
	public TailAnimator2 TailWithSettings;

	[Token(Token = "0x40002BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject SegmentModel;

	[Token(Token = "0x40002BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Header("Parameters")]
	public int SegmentsCount;

	[Token(Token = "0x40002BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public Vector3 SegmentSeparation;

	[Token(Token = "0x40002BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool DetachForOptimization;

	[Token(Token = "0x40002C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	[Header("Optional")]
	public bool Dynamic;

	[Token(Token = "0x40002C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
	public bool AddTailAnimToCuttedSegment;

	[Token(Token = "0x40002C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3B")]
	public bool DrawGizmos;

	[Token(Token = "0x40002C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public bool Cuttable;

	[Token(Token = "0x40002C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Vector3 referenceOffset;

	[Token(Token = "0x40002C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private bool dontReload;

	[Token(Token = "0x60001E4")]
	[Address(RVA = "0x9A4EEC", Offset = "0x9A4EEC", VA = "0x9A4EEC")]
	private void Start()
	{
	}

	[Token(Token = "0x60001E5")]
	[Address(RVA = "0x9A5508", Offset = "0x9A5508", VA = "0x9A5508")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x60001E6")]
	[Address(RVA = "0x9A5400", Offset = "0x9A5400", VA = "0x9A5400")]
	private void GetReferenceParameters()
	{
	}

	[Token(Token = "0x60001E7")]
	[Address(RVA = "0x9A5828", Offset = "0x9A5828", VA = "0x9A5828")]
	public void ExmapleCutAt(int index)
	{
	}

	[Token(Token = "0x60001E8")]
	[Address(RVA = "0x9A42A4", Offset = "0x9A42A4", VA = "0x9A42A4")]
	public void OnValidate()
	{
	}

	[Token(Token = "0x60001E9")]
	[Address(RVA = "0x9A5DFC", Offset = "0x9A5DFC", VA = "0x9A5DFC")]
	public TailDemo_SegmentedTailGenerator()
	{
	}
}
[Token(Token = "0x2000072")]
public class TailDemo_SfxExample : MonoBehaviour
{
	[Token(Token = "0x40002C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TailAnimator2[] toDetectCollisionsForSFX;

	[Token(Token = "0x40002C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioClip clipToPlay;

	[Token(Token = "0x40002C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Range(0f, 1f)]
	public float volume;

	[Token(Token = "0x40002C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float toPlayAgainDelay;

	[Token(Token = "0x40002CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int playUpToSegment;

	[Token(Token = "0x40002CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool[] wasCollision;

	[Token(Token = "0x40002CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float toPlayTimer;

	[Token(Token = "0x60001EA")]
	[Address(RVA = "0x9A5E70", Offset = "0x9A5E70", VA = "0x9A5E70")]
	private void Start()
	{
	}

	[Token(Token = "0x60001EB")]
	[Address(RVA = "0x9A5F18", Offset = "0x9A5F18", VA = "0x9A5F18")]
	private void Update()
	{
	}

	[Token(Token = "0x60001EC")]
	[Address(RVA = "0x9A60A0", Offset = "0x9A60A0", VA = "0x9A60A0")]
	private void OnTailCollisionEnterFirst(TailAnimator2 tail, int segment)
	{
	}

	[Token(Token = "0x60001ED")]
	[Address(RVA = "0x9A6180", Offset = "0x9A6180", VA = "0x9A6180")]
	private void OnTailCollisionStay(TailAnimator2 tail, int segment)
	{
	}

	[Token(Token = "0x60001EE")]
	[Address(RVA = "0x9A6184", Offset = "0x9A6184", VA = "0x9A6184")]
	private void OnTailCollisionExitAll(TailAnimator2 tail)
	{
	}

	[Token(Token = "0x60001EF")]
	[Address(RVA = "0x9A6188", Offset = "0x9A6188", VA = "0x9A6188")]
	public TailDemo_SfxExample()
	{
	}
}
[Token(Token = "0x2000073")]
public class TailDemo_SkinnedMeshGenerator : MonoBehaviour
{
	[Token(Token = "0x2000074")]
	private class VertGenHelper
	{
		[Token(Token = "0x40002DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int index;

		[Token(Token = "0x40002DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int l;

		[Token(Token = "0x40002DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int c;

		[Token(Token = "0x40002DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 p;

		[Token(Token = "0x40002E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 n;

		[Token(Token = "0x40002E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public List<int> triangles;

		[Token(Token = "0x40002E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public List<Vector3> trianglesPos;

		[Token(Token = "0x60001FB")]
		[Address(RVA = "0x9A7334", Offset = "0x9A7334", VA = "0x9A7334")]
		public VertGenHelper()
		{
		}
	}

	[Token(Token = "0x2000075")]
	[CompilerGenerated]
	private sealed class <GenerateFrameByFrame>d__20 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40002E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40002E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x17000012")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60001FF")]
			[Address(RVA = "0x9A7FE8", Offset = "0x9A7FE8", VA = "0x9A7FE8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000013")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000201")]
			[Address(RVA = "0x9A8030", Offset = "0x9A8030", VA = "0x9A8030", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001FC")]
		[Address(RVA = "0x9A73B4", Offset = "0x9A73B4", VA = "0x9A73B4")]
		[DebuggerHidden]
		public <GenerateFrameByFrame>d__20(int <>1__state)
		{
		}

		[Token(Token = "0x60001FD")]
		[Address(RVA = "0x9A7FCC", Offset = "0x9A7FCC", VA = "0x9A7FCC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60001FE")]
		[Address(RVA = "0x9A7FD0", Offset = "0x9A7FD0", VA = "0x9A7FD0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000200")]
		[Address(RVA = "0x9A7FF0", Offset = "0x9A7FF0", VA = "0x9A7FF0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40002CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[FPD_Header("Generate Tail Settings", 0f, 4f, 2)]
	public int circlePoints;

	[Token(Token = "0x40002CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int LengthSegments;

	[Token(Token = "0x40002CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float ForwardLength;

	[Token(Token = "0x40002D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float Fatness;

	[Token(Token = "0x40002D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[FPD_FixedCurveWindow(0f, 0f, 1f, 1f, 0f, 1f, 1f, 1f)]
	public AnimationCurve LengthScale;

	[Token(Token = "0x40002D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool RandomizeAtStart;

	[Token(Token = "0x40002D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Material mat;

	[Token(Token = "0x40002D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool DrawGizmos;

	[Token(Token = "0x40002D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[FPD_Header("Skinning Settings", 6f, 4f, 2)]
	public int BonesCount;

	[Token(Token = "0x40002D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[FPD_Header("Tail Animtor Settings", 6f, 4f, 2)]
	public bool AddTailAnimator;

	[Token(Token = "0x40002D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	public bool DetachForOptimization;

	[Token(Token = "0x40002D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Header("If not adding tail animator")]
	public TailAnimator2 TargetTailAnimator;

	[Token(Token = "0x40002D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public bool SetAsParent;

	[Token(Token = "0x40002DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Vector3[,] toDraw;

	[Token(Token = "0x40002DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private List<VertGenHelper> toDrawHelpers;

	[Token(Token = "0x60001F0")]
	[Address(RVA = "0x9A619C", Offset = "0x9A619C", VA = "0x9A619C")]
	private void Start()
	{
	}

	[Token(Token = "0x60001F1")]
	[Address(RVA = "0x9A6660", Offset = "0x9A6660", VA = "0x9A6660")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x60001F2")]
	[Address(RVA = "0x9A66F8", Offset = "0x9A66F8", VA = "0x9A66F8")]
	private Vector3[,] GetTailPoints()
	{
		return null;
	}

	[Token(Token = "0x60001F3")]
	[Address(RVA = "0x9A68F0", Offset = "0x9A68F0", VA = "0x9A68F0")]
	private List<VertGenHelper> GetVertexHelpers()
	{
		return null;
	}

	[Token(Token = "0x60001F4")]
	[Address(RVA = "0x9A733C", Offset = "0x9A733C", VA = "0x9A733C")]
	public int GetHelper(int length, int circle)
	{
		return default(int);
	}

	[Token(Token = "0x60001F5")]
	[Address(RVA = "0x9A7354", Offset = "0x9A7354", VA = "0x9A7354")]
	[IteratorStateMachine(typeof(<GenerateFrameByFrame>d__20))]
	public IEnumerator GenerateFrameByFrame()
	{
		return null;
	}

	[Token(Token = "0x60001F6")]
	[Address(RVA = "0x9A73DC", Offset = "0x9A73DC", VA = "0x9A73DC")]
	public Mesh GenerateMesh(bool drawMesh)
	{
		return null;
	}

	[Token(Token = "0x60001F7")]
	[Address(RVA = "0x9A63DC", Offset = "0x9A63DC", VA = "0x9A63DC")]
	private void SkinMesh()
	{
	}

	[Token(Token = "0x60001F8")]
	[Address(RVA = "0x9A7BEC", Offset = "0x9A7BEC", VA = "0x9A7BEC")]
	private Vector3 GetBonePos(int index)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60001F9")]
	[Address(RVA = "0x9A7C70", Offset = "0x9A7C70", VA = "0x9A7C70")]
	private void AddTailAnimatorToSkinnedMesh(SkinnedMeshRenderer skin)
	{
	}

	[Token(Token = "0x60001FA")]
	[Address(RVA = "0x9A7F58", Offset = "0x9A7F58", VA = "0x9A7F58")]
	public TailDemo_SkinnedMeshGenerator()
	{
	}
}
[Token(Token = "0x2000076")]
public class TailDemo_TailCutId : MonoBehaviour
{
	[Token(Token = "0x40002E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int index;

	[Token(Token = "0x40002E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TailDemo_SegmentedTailGenerator owner;

	[Token(Token = "0x6000202")]
	[Address(RVA = "0x9A8038", Offset = "0x9A8038", VA = "0x9A8038")]
	public void cutSegment()
	{
	}

	[Token(Token = "0x6000203")]
	[Address(RVA = "0x9A80B8", Offset = "0x9A80B8", VA = "0x9A80B8")]
	public TailDemo_TailCutId()
	{
	}
}
[Token(Token = "0x2000077")]
public static class FEasing
{
	[Token(Token = "0x2000078")]
	public enum EFease
	{
		[Token(Token = "0x40002E8")]
		EaseInCubic,
		[Token(Token = "0x40002E9")]
		EaseOutCubic,
		[Token(Token = "0x40002EA")]
		EaseInOutCubic,
		[Token(Token = "0x40002EB")]
		EaseInOutElastic,
		[Token(Token = "0x40002EC")]
		EaseInElastic,
		[Token(Token = "0x40002ED")]
		EaseOutElastic,
		[Token(Token = "0x40002EE")]
		EaseInExpo,
		[Token(Token = "0x40002EF")]
		EaseOutExpo,
		[Token(Token = "0x40002F0")]
		EaseInOutExpo,
		[Token(Token = "0x40002F1")]
		Linear
	}

	[Token(Token = "0x2000079")]
	public delegate float Function(float s, float e, float v, float extraParameter = 1f);

	[Token(Token = "0x6000204")]
	[Address(RVA = "0x9A80C0", Offset = "0x9A80C0", VA = "0x9A80C0")]
	public static float EaseInCubic(float start, float end, float value, float ignore = 1f)
	{
		return default(float);
	}

	[Token(Token = "0x6000205")]
	[Address(RVA = "0x9A80D8", Offset = "0x9A80D8", VA = "0x9A80D8")]
	public static float EaseOutCubic(float start, float end, float value, float ignore = 1f)
	{
		return default(float);
	}

	[Token(Token = "0x6000206")]
	[Address(RVA = "0x9A8100", Offset = "0x9A8100", VA = "0x9A8100")]
	public static float EaseInOutCubic(float start, float end, float value, float ignore = 1f)
	{
		return default(float);
	}

	[Token(Token = "0x6000207")]
	[Address(RVA = "0x9A8158", Offset = "0x9A8158", VA = "0x9A8158")]
	public static float EaseOutElastic(float start, float end, float value, float rangeMul = 1f)
	{
		return default(float);
	}

	[Token(Token = "0x6000208")]
	[Address(RVA = "0x9A81FC", Offset = "0x9A81FC", VA = "0x9A81FC")]
	public static float EaseInElastic(float start, float end, float value, float rangeMul = 1f)
	{
		return default(float);
	}

	[Token(Token = "0x6000209")]
	[Address(RVA = "0x9A82A0", Offset = "0x9A82A0", VA = "0x9A82A0")]
	public static float EaseInOutElastic(float start, float end, float value, float rangeMul = 1f)
	{
		return default(float);
	}

	[Token(Token = "0x600020A")]
	[Address(RVA = "0x9A83A0", Offset = "0x9A83A0", VA = "0x9A83A0")]
	public static float EaseInExpo(float start, float end, float value, float ignore = 1f)
	{
		return default(float);
	}

	[Token(Token = "0x600020B")]
	[Address(RVA = "0x9A83D8", Offset = "0x9A83D8", VA = "0x9A83D8")]
	public static float EaseOutExpo(float start, float end, float value, float ignore = 1f)
	{
		return default(float);
	}

	[Token(Token = "0x600020C")]
	[Address(RVA = "0x9A8410", Offset = "0x9A8410", VA = "0x9A8410")]
	public static float EaseInOutExpo(float start, float end, float value, float ignore = 1f)
	{
		return default(float);
	}

	[Token(Token = "0x600020D")]
	[Address(RVA = "0x9A8480", Offset = "0x9A8480", VA = "0x9A8480")]
	public static float Linear(float start, float end, float value, float ignore = 1f)
	{
		return default(float);
	}

	[Token(Token = "0x600020E")]
	[Address(RVA = "0x9A84A4", Offset = "0x9A84A4", VA = "0x9A84A4")]
	public static Function GetEasingFunction(EFease easingFunction)
	{
		return null;
	}
}
[Token(Token = "0x200007A")]
public class FHierarchyIcons
{
	[Token(Token = "0x6000213")]
	[Address(RVA = "0xA4B6C4", Offset = "0xA4B6C4", VA = "0xA4B6C4")]
	static FHierarchyIcons()
	{
	}

	[Token(Token = "0x6000214")]
	[Address(RVA = "0xA4B6C8", Offset = "0xA4B6C8", VA = "0xA4B6C8")]
	private static void EvaluateIcons(int instanceId, Rect selectionRect)
	{
	}

	[Token(Token = "0x6000215")]
	[Address(RVA = "0xA4B6CC", Offset = "0xA4B6CC", VA = "0xA4B6CC")]
	private static void DrawIcon(string texName, Rect rect)
	{
	}

	[Token(Token = "0x6000216")]
	[Address(RVA = "0xA4B6D0", Offset = "0xA4B6D0", VA = "0xA4B6D0")]
	private static Texture2D GetTex(string name)
	{
		return null;
	}

	[Token(Token = "0x6000217")]
	[Address(RVA = "0xA4B6D8", Offset = "0xA4B6D8", VA = "0xA4B6D8")]
	public FHierarchyIcons()
	{
	}
}
[Token(Token = "0x200007B")]
public interface IFHierarchyIcon
{
	[Token(Token = "0x17000014")]
	string EditorIconPath
	{
		[Token(Token = "0x6000218")]
		get;
	}
}
[Token(Token = "0x200007C")]
public class FPD_FixedCurveWindowAttribute : PropertyAttribute
{
	[Token(Token = "0x40002F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float StartTime;

	[Token(Token = "0x40002F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float EndTime;

	[Token(Token = "0x40002F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float StartValue;

	[Token(Token = "0x40002F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float EndValue;

	[Token(Token = "0x40002F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Color Color;

	[Token(Token = "0x6000219")]
	[Address(RVA = "0xA4B6E0", Offset = "0xA4B6E0", VA = "0xA4B6E0")]
	public FPD_FixedCurveWindowAttribute(float startTime, float startValue, float endTime, float endValue, float r = 0f, float g = 1f, float b = 1f, float a = 1f)
	{
	}
}
[Token(Token = "0x200007D")]
public class FPD_HeaderAttribute : PropertyAttribute
{
	[Token(Token = "0x40002F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string HeaderText;

	[Token(Token = "0x40002F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float UpperPadding;

	[Token(Token = "0x40002F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float BottomPadding;

	[Token(Token = "0x40002FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float Height;

	[Token(Token = "0x600021A")]
	[Address(RVA = "0xA4B748", Offset = "0xA4B748", VA = "0xA4B748")]
	public FPD_HeaderAttribute(string headerText, float upperPadding = 3f, float bottomPadding = 3f, int addHeight = 2)
	{
	}
}
[Token(Token = "0x200007E")]
public class FPD_OverridableFloatAttribute : PropertyAttribute
{
	[Token(Token = "0x40002FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string BoolVarName;

	[Token(Token = "0x40002FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string TargetVarName;

	[Token(Token = "0x40002FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int LabelWidth;

	[Token(Token = "0x600021B")]
	[Address(RVA = "0xA4B79C", Offset = "0xA4B79C", VA = "0xA4B79C")]
	public FPD_OverridableFloatAttribute(string boolVariableName, string targetVariableName, int labelWidth = 90)
	{
	}
}
[Token(Token = "0x200007F")]
public class BackgroundColorAttribute : PropertyAttribute
{
	[Token(Token = "0x40002FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float r;

	[Token(Token = "0x40002FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float g;

	[Token(Token = "0x4000300")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float b;

	[Token(Token = "0x4000301")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float a;

	[Token(Token = "0x17000015")]
	public Color Color
	{
		[Token(Token = "0x600021E")]
		[Address(RVA = "0xA4B854", Offset = "0xA4B854", VA = "0xA4B854")]
		get
		{
			return default(Color);
		}
	}

	[Token(Token = "0x600021C")]
	[Address(RVA = "0xA4B7F4", Offset = "0xA4B7F4", VA = "0xA4B7F4")]
	public BackgroundColorAttribute()
	{
	}

	[Token(Token = "0x600021D")]
	[Address(RVA = "0xA4B814", Offset = "0xA4B814", VA = "0xA4B814")]
	public BackgroundColorAttribute(float aR, float aG, float aB, float aA)
	{
	}
}
[Token(Token = "0x2000080")]
public class FPD_WidthAttribute : PropertyAttribute
{
	[Token(Token = "0x4000302")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float LabelWidth;

	[Token(Token = "0x600021F")]
	[Address(RVA = "0xA4B860", Offset = "0xA4B860", VA = "0xA4B860")]
	public FPD_WidthAttribute(int labelWidth)
	{
	}
}
[Token(Token = "0x2000081")]
public class FPD_IndentAttribute : PropertyAttribute
{
	[Token(Token = "0x4000303")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public int IndentCount;

	[Token(Token = "0x4000304")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int LabelsWidth;

	[Token(Token = "0x4000305")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int SpaceAfter;

	[Token(Token = "0x6000220")]
	[Address(RVA = "0xA4B88C", Offset = "0xA4B88C", VA = "0xA4B88C")]
	public FPD_IndentAttribute(int indent = 1, int labelsWidth = 0, int spaceAfter = 0)
	{
	}
}
[Token(Token = "0x2000082")]
public class FPD_HorizontalLineAttribute : PropertyAttribute
{
	[Token(Token = "0x4000306")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Color color;

	[Token(Token = "0x6000221")]
	[Address(RVA = "0xA4B8D0", Offset = "0xA4B8D0", VA = "0xA4B8D0")]
	public FPD_HorizontalLineAttribute(float r = 0.55f, float g = 0.55f, float b = 0.55f, float a = 0.7f)
	{
	}
}
[Token(Token = "0x2000083")]
public class FPD_SuffixAttribute : PropertyAttribute
{
	[Token(Token = "0x2000084")]
	public enum SuffixMode
	{
		[Token(Token = "0x400030D")]
		From0to100,
		[Token(Token = "0x400030E")]
		PercentageUnclamped,
		[Token(Token = "0x400030F")]
		FromMinToMax,
		[Token(Token = "0x4000310")]
		FromMinToMaxRounded
	}

	[Token(Token = "0x4000307")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public readonly float Min;

	[Token(Token = "0x4000308")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public readonly float Max;

	[Token(Token = "0x4000309")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public readonly SuffixMode Mode;

	[Token(Token = "0x400030A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public readonly string Suffix;

	[Token(Token = "0x400030B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public readonly bool editableValue;

	[Token(Token = "0x6000222")]
	[Address(RVA = "0xA4B910", Offset = "0xA4B910", VA = "0xA4B910")]
	public FPD_SuffixAttribute(float min, float max, SuffixMode mode = SuffixMode.From0to100, string suffix = "%", bool editable = true)
	{
	}
}
[Token(Token = "0x2000085")]
public class FixDoorAndWindow : MonoBehaviour
{
	[Token(Token = "0x2000086")]
	[CompilerGenerated]
	private sealed class <WaitforCanvasDisable>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000315")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000316")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000317")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FixDoorAndWindow <>4__this;

		[Token(Token = "0x17000016")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600022B")]
			[Address(RVA = "0xA4BE18", Offset = "0xA4BE18", VA = "0xA4BE18", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000017")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600022D")]
			[Address(RVA = "0xA4BE60", Offset = "0xA4BE60", VA = "0xA4BE60", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000228")]
		[Address(RVA = "0xA4BD10", Offset = "0xA4BD10", VA = "0xA4BD10")]
		[DebuggerHidden]
		public <WaitforCanvasDisable>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x6000229")]
		[Address(RVA = "0xA4BD40", Offset = "0xA4BD40", VA = "0xA4BD40", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600022A")]
		[Address(RVA = "0xA4BD44", Offset = "0xA4BD44", VA = "0xA4BD44", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600022C")]
		[Address(RVA = "0xA4BE20", Offset = "0xA4BE20", VA = "0xA4BE20", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000311")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int TotalNeedToFix;

	[Token(Token = "0x4000312")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject AfterFrame;

	[Token(Token = "0x4000313")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject UICanvas;

	[Token(Token = "0x4000314")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int TotalFixCount;

	[Token(Token = "0x6000223")]
	[Address(RVA = "0xA4B970", Offset = "0xA4B970", VA = "0xA4B970")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000224")]
	[Address(RVA = "0xA4BA3C", Offset = "0xA4BA3C", VA = "0xA4BA3C")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000225")]
	[Address(RVA = "0xA4BC9C", Offset = "0xA4BC9C", VA = "0xA4BC9C")]
	[IteratorStateMachine(typeof(<WaitforCanvasDisable>d__6))]
	private IEnumerator WaitforCanvasDisable()
	{
		return null;
	}

	[Token(Token = "0x6000226")]
	[Address(RVA = "0xA4BBE4", Offset = "0xA4BBE4", VA = "0xA4BBE4")]
	private void CheckForFixLevelFinish()
	{
	}

	[Token(Token = "0x6000227")]
	[Address(RVA = "0xA4BD38", Offset = "0xA4BD38", VA = "0xA4BD38")]
	public FixDoorAndWindow()
	{
	}
}
[Token(Token = "0x2000087")]
public class FixFenceScript : MonoBehaviour
{
	[Token(Token = "0x4000318")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject FenceSize;

	[Token(Token = "0x4000319")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject FenceIcon;

	[Token(Token = "0x400031A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int TotalFenceFit;

	[Token(Token = "0x400031B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int ScrewFixCount;

	[Token(Token = "0x400031C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static bool isFenceFix;

	[Token(Token = "0x600022E")]
	[Address(RVA = "0xA4BE68", Offset = "0xA4BE68", VA = "0xA4BE68")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600022F")]
	[Address(RVA = "0xA4BF94", Offset = "0xA4BF94", VA = "0xA4BF94")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000230")]
	[Address(RVA = "0xA4C150", Offset = "0xA4C150", VA = "0xA4C150")]
	private void CheckForFenceFixFinish()
	{
	}

	[Token(Token = "0x6000231")]
	[Address(RVA = "0xA4C268", Offset = "0xA4C268", VA = "0xA4C268")]
	public FixFenceScript()
	{
	}
}
[Token(Token = "0x2000088")]
public class FixRoofScript : MonoBehaviour
{
	[Token(Token = "0x400031D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject AfterRoof;

	[Token(Token = "0x400031E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int TotalNeedToFix;

	[Token(Token = "0x400031F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int TotalFixCount;

	[Token(Token = "0x6000232")]
	[Address(RVA = "0xA4C270", Offset = "0xA4C270", VA = "0xA4C270")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000233")]
	[Address(RVA = "0xA4C328", Offset = "0xA4C328", VA = "0xA4C328")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000234")]
	[Address(RVA = "0xA4C46C", Offset = "0xA4C46C", VA = "0xA4C46C")]
	private void CheckForFixLevelFinish()
	{
	}

	[Token(Token = "0x6000235")]
	[Address(RVA = "0xA4C524", Offset = "0xA4C524", VA = "0xA4C524")]
	public FixRoofScript()
	{
	}
}
[Token(Token = "0x2000089")]
public class CameraFollow : MonoBehaviour
{
	[Token(Token = "0x4000320")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform target;

	[Token(Token = "0x4000321")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform playerpos;

	[Token(Token = "0x4000322")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float distance;

	[Token(Token = "0x4000323")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int cameraSpeed;

	[Token(Token = "0x4000324")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float minDistance;

	[Token(Token = "0x4000325")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float maxDistance;

	[Token(Token = "0x6000236")]
	[Address(RVA = "0xA4C52C", Offset = "0xA4C52C", VA = "0xA4C52C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000237")]
	[Address(RVA = "0xA4C5B8", Offset = "0xA4C5B8", VA = "0xA4C5B8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000238")]
	[Address(RVA = "0xA4C8A4", Offset = "0xA4C8A4", VA = "0xA4C8A4")]
	public CameraFollow()
	{
	}
}
[Token(Token = "0x200008A")]
public class CameraFollow1 : MonoBehaviour
{
	[Token(Token = "0x4000326")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform target;

	[Token(Token = "0x4000327")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform playerpos;

	[Token(Token = "0x4000328")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float distance;

	[Token(Token = "0x4000329")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int cameraSpeed;

	[Token(Token = "0x400032A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float minDistance;

	[Token(Token = "0x400032B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float maxDistance;

	[Token(Token = "0x400032C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool isAssign;

	[Token(Token = "0x6000239")]
	[Address(RVA = "0xA4C8AC", Offset = "0xA4C8AC", VA = "0xA4C8AC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600023A")]
	[Address(RVA = "0xA4CB98", Offset = "0xA4CB98", VA = "0xA4CB98")]
	private void Update()
	{
	}

	[Token(Token = "0x600023B")]
	[Address(RVA = "0xA4CE18", Offset = "0xA4CE18", VA = "0xA4CE18")]
	public CameraFollow1()
	{
	}
}
[Token(Token = "0x200008B")]
public class FountainFixHammer : MonoBehaviour
{
	[Token(Token = "0x400032D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int HammerThrow;

	[Token(Token = "0x400032E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private int hammerAttackCount;

	[Token(Token = "0x600023C")]
	[Address(RVA = "0xA4CE20", Offset = "0xA4CE20", VA = "0xA4CE20")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600023D")]
	[Address(RVA = "0xA4CE28", Offset = "0xA4CE28", VA = "0xA4CE28")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600023E")]
	[Address(RVA = "0xA4CFAC", Offset = "0xA4CFAC", VA = "0xA4CFAC")]
	public FountainFixHammer()
	{
	}
}
[Token(Token = "0x200008C")]
public class FountainPlantPoint : MonoBehaviour
{
	[Token(Token = "0x400032F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject Point_Fountain;

	[Token(Token = "0x4000330")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int TotalFountainFitCount;

	[Token(Token = "0x4000331")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int TotalFountainFitNeed;

	[Token(Token = "0x4000332")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject MainValve;

	[Token(Token = "0x600023F")]
	[Address(RVA = "0xA4CFBC", Offset = "0xA4CFBC", VA = "0xA4CFBC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000240")]
	[Address(RVA = "0xA4D138", Offset = "0xA4D138", VA = "0xA4D138")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000241")]
	[Address(RVA = "0xA4D2EC", Offset = "0xA4D2EC", VA = "0xA4D2EC")]
	private void CheckFountainFitComplete()
	{
	}

	[Token(Token = "0x6000242")]
	[Address(RVA = "0xA4D470", Offset = "0xA4D470", VA = "0xA4D470")]
	public FountainPlantPoint()
	{
	}
}
[Token(Token = "0x200008D")]
public class FountainValveOpen : MonoBehaviour
{
	[Token(Token = "0x4000333")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool isValveOpen;

	[Token(Token = "0x4000334")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float OpenAngle;

	[Token(Token = "0x4000335")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int TotalValveNeed;

	[Token(Token = "0x4000336")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int TotalValveCount;

	[Token(Token = "0x4000337")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject[] WaterFountain;

	[Token(Token = "0x4000338")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject[] fountainObj;

	[Token(Token = "0x6000243")]
	[Address(RVA = "0xA4D478", Offset = "0xA4D478", VA = "0xA4D478")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000244")]
	[Address(RVA = "0xA4D560", Offset = "0xA4D560", VA = "0xA4D560")]
	public void ValveRotate(float val)
	{
	}

	[Token(Token = "0x6000245")]
	[Address(RVA = "0xA4D628", Offset = "0xA4D628", VA = "0xA4D628")]
	private void CheckValveOpen()
	{
	}

	[Token(Token = "0x6000246")]
	[Address(RVA = "0xA4D4FC", Offset = "0xA4D4FC", VA = "0xA4D4FC")]
	private void waterFlowDisable()
	{
	}

	[Token(Token = "0x6000247")]
	[Address(RVA = "0xA4D6B4", Offset = "0xA4D6B4", VA = "0xA4D6B4")]
	private void WaterFlow(bool isStart)
	{
	}

	[Token(Token = "0x6000248")]
	[Address(RVA = "0xA4D934", Offset = "0xA4D934", VA = "0xA4D934")]
	public FountainValveOpen()
	{
	}
}
[Token(Token = "0x200008E")]
public class FrontWheel : MonoBehaviour
{
	[Token(Token = "0x4000339")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool isFront;

	[Token(Token = "0x400033A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
	public static bool isRear_;

	[Token(Token = "0x6000249")]
	[Address(RVA = "0xA4D93C", Offset = "0xA4D93C", VA = "0xA4D93C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600024A")]
	[Address(RVA = "0xA4D984", Offset = "0xA4D984", VA = "0xA4D984")]
	private void OnTriggerStay(Collider other)
	{
	}

	[Token(Token = "0x600024B")]
	[Address(RVA = "0xA4DA64", Offset = "0xA4DA64", VA = "0xA4DA64")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x600024C")]
	[Address(RVA = "0xA4DB40", Offset = "0xA4DB40", VA = "0xA4DB40")]
	public FrontWheel()
	{
	}
}
[Serializable]
[Token(Token = "0x200008F")]
public class TractorModel
{
	[Token(Token = "0x400033B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Transform player;

	[Token(Token = "0x400033C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject lorry;

	[Token(Token = "0x400033D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject machinery;

	[Token(Token = "0x400033E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Image hand_intsruction;

	[Token(Token = "0x400033F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject Tag_collider;

	[Token(Token = "0x4000340")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject HandMenu;

	[Token(Token = "0x4000341")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public TextMeshProUGUI txt_hand_instruction;

	[Token(Token = "0x4000342")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public TextMeshPro txtTimer;

	[Token(Token = "0x600024D")]
	[Address(RVA = "0xA4DB48", Offset = "0xA4DB48", VA = "0xA4DB48")]
	public TractorModel()
	{
	}
}
[Token(Token = "0x2000090")]
public class GameManager : MonoBehaviour
{
	[Token(Token = "0x4000343")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static GameManager instance;

	[Token(Token = "0x4000344")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SceneLoader sceneloader;

	[Token(Token = "0x4000345")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform Level_Holder;

	[Token(Token = "0x4000346")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform Player;

	[Token(Token = "0x4000347")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public MainLevelData[] LevelData;

	[Token(Token = "0x4000348")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private MainLevelData main_level_data;

	[Token(Token = "0x4000349")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static LevelData level_data;

	[Token(Token = "0x400034A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int Currentlevel;

	[Token(Token = "0x400034B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private int CurrentSublevel;

	[Token(Token = "0x400034C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static Transform ArrowTarget;

	[Token(Token = "0x400034D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject Lorry;

	[Token(Token = "0x400034E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject lorry_carry_go;

	[Token(Token = "0x400034F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject Machine;

	[Token(Token = "0x4000350")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public GameObject machinery_go;

	[Token(Token = "0x4000351")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public GameObject handMenuUI;

	[Token(Token = "0x4000352")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public TextMeshProUGUI txt_instruction;

	[Token(Token = "0x4000353")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Image HandImg_Instruction;

	[Token(Token = "0x4000354")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public GameObject[] otherAudioSource;

	[Token(Token = "0x4000355")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public TractorModel[] TractorModelData;

	[Token(Token = "0x4000356")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public GameObject PlayerStanding;

	[Token(Token = "0x4000357")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Image Standing_hand_intsruction;

	[Token(Token = "0x4000358")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public GameObject Standing_Handmenu;

	[Token(Token = "0x4000359")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public TextMeshProUGUI stand_txt_instruction;

	[Token(Token = "0x400035A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public TextMeshPro stand_txtTimer;

	[Token(Token = "0x400035B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public ScreenFader fader;

	[Token(Token = "0x400035C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public float FadeSpeed;

	[Token(Token = "0x400035D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private Transform GridParentHint;

	[Token(Token = "0x400035E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public GameObject GridParentHintGo;

	[Token(Token = "0x400035F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public GameObject Loading_Canvas;

	[Token(Token = "0x4000360")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public float tmr;

	[Token(Token = "0x4000361")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public TextMeshPro timerText;

	[Token(Token = "0x4000362")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static float timerc;

	[Token(Token = "0x4000363")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public static bool isTimeUp;

	[Token(Token = "0x4000364")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public AudioSource timeupsound;

	[Token(Token = "0x600024E")]
	[Address(RVA = "0xA4DB50", Offset = "0xA4DB50", VA = "0xA4DB50")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600024F")]
	[Address(RVA = "0xA4F0C8", Offset = "0xA4F0C8", VA = "0xA4F0C8")]
	private void AssignTimerText()
	{
	}

	[Token(Token = "0x6000250")]
	[Address(RVA = "0xA4F12C", Offset = "0xA4F12C", VA = "0xA4F12C")]
	private void CheckForTimeUp()
	{
	}

	[Token(Token = "0x6000251")]
	[Address(RVA = "0xA4F46C", Offset = "0xA4F46C", VA = "0xA4F46C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000252")]
	[Address(RVA = "0xA4ECC0", Offset = "0xA4ECC0", VA = "0xA4ECC0")]
	private void HandInstructionGrid()
	{
	}

	[Token(Token = "0x6000253")]
	[Address(RVA = "0xA4F580", Offset = "0xA4F580", VA = "0xA4F580")]
	private void FindOtherAudioSource()
	{
	}

	[Token(Token = "0x6000254")]
	[Address(RVA = "0xA4EBF4", Offset = "0xA4EBF4", VA = "0xA4EBF4")]
	private void SetPlayer(Vector3 pos_, Vector3 rot_)
	{
	}

	[Token(Token = "0x6000255")]
	[Address(RVA = "0xA4E884", Offset = "0xA4E884", VA = "0xA4E884")]
	private void LevelDataLoader()
	{
	}

	[Token(Token = "0x6000256")]
	[Address(RVA = "0xA4F6FC", Offset = "0xA4F6FC", VA = "0xA4F6FC")]
	private void LevelDataClener()
	{
	}

	[Token(Token = "0x6000257")]
	[Address(RVA = "0xA4F7CC", Offset = "0xA4F7CC", VA = "0xA4F7CC")]
	public void LevelCompleteFade()
	{
	}

	[Token(Token = "0x6000258")]
	[Address(RVA = "0xA4F8F0", Offset = "0xA4F8F0", VA = "0xA4F8F0")]
	public GameManager()
	{
	}
}
[Token(Token = "0x2000091")]
public class GarbageTrailer : MonoBehaviour
{
	[Token(Token = "0x4000365")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int TotalCaseLoad;

	[Token(Token = "0x4000366")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int TotalLoadNeed;

	[Token(Token = "0x4000367")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool isGarbageCollect;

	[Token(Token = "0x6000259")]
	[Address(RVA = "0xA4F900", Offset = "0xA4F900", VA = "0xA4F900")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600025A")]
	[Address(RVA = "0xA4F984", Offset = "0xA4F984", VA = "0xA4F984")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600025B")]
	[Address(RVA = "0xA4FB64", Offset = "0xA4FB64", VA = "0xA4FB64")]
	private void CheckForLevelComplete()
	{
	}

	[Token(Token = "0x600025C")]
	[Address(RVA = "0xA4FC74", Offset = "0xA4FC74", VA = "0xA4FC74")]
	public GarbageTrailer()
	{
	}
}
[Token(Token = "0x2000092")]
public class GearShifting : MonoBehaviour
{
	[Token(Token = "0x4000368")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public VehicleStandardInput input;

	[Token(Token = "0x4000369")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GearControll gearcontrol;

	[Token(Token = "0x400036A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GearSystem[] gearsystem;

	[Token(Token = "0x400036B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AutoGearSystem autogearsystem;

	[Token(Token = "0x400036C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Tooltip("If true and SteeringGrabbable is being held, the right / left trigger will act as input for acceleration / defceleration.")]
	[Header("Steering Grabbable")]
	public bool CheckTriggerInput;

	[Token(Token = "0x400036D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Grabbable SteeringGrabbable;

	[Token(Token = "0x400036E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool isHoldingSteering;

	[Token(Token = "0x400036F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static float handBrackAngle;

	[Token(Token = "0x4000370")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float CurrentSpeed;

	[Token(Token = "0x4000371")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject SpeedNiddle;

	[Token(Token = "0x4000372")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public AudioSource brakeSound;

	[Token(Token = "0x4000373")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public float Force;

	[Token(Token = "0x4000374")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public float currentforce;

	[Token(Token = "0x600025D")]
	[Address(RVA = "0xA4FC7C", Offset = "0xA4FC7C", VA = "0xA4FC7C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600025E")]
	[Address(RVA = "0xA4FC80", Offset = "0xA4FC80", VA = "0xA4FC80")]
	private void Update()
	{
	}

	[Token(Token = "0x600025F")]
	[Address(RVA = "0xA50214", Offset = "0xA50214", VA = "0xA50214")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000260")]
	[Address(RVA = "0xA4FE7C", Offset = "0xA4FE7C", VA = "0xA4FE7C")]
	public void GearType(int gear)
	{
	}

	[Token(Token = "0x6000261")]
	[Address(RVA = "0xA50294", Offset = "0xA50294", VA = "0xA50294")]
	public void Breck()
	{
	}

	[Token(Token = "0x6000262")]
	[Address(RVA = "0xA502CC", Offset = "0xA502CC", VA = "0xA502CC")]
	public void StartTractor()
	{
	}

	[Token(Token = "0x6000263")]
	[Address(RVA = "0xA50300", Offset = "0xA50300", VA = "0xA50300")]
	public void Stopcontrolling()
	{
	}

	[Token(Token = "0x6000264")]
	[Address(RVA = "0xA50330", Offset = "0xA50330", VA = "0xA50330")]
	public void ResumeControlling()
	{
	}

	[Token(Token = "0x6000265")]
	[Address(RVA = "0xA50364", Offset = "0xA50364", VA = "0xA50364")]
	public GearShifting()
	{
	}
}
[Token(Token = "0x2000093")]
public class GearShiftInstruction : MonoBehaviour
{
	[Token(Token = "0x6000266")]
	[Address(RVA = "0xA50374", Offset = "0xA50374", VA = "0xA50374")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000267")]
	[Address(RVA = "0xA50430", Offset = "0xA50430", VA = "0xA50430")]
	public GearShiftInstruction()
	{
	}
}
[Token(Token = "0x2000094")]
public class GoForFeed : MonoBehaviour
{
	[Token(Token = "0x4000375")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform target;

	[Token(Token = "0x4000376")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float speed;

	[Token(Token = "0x4000377")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Animation bird_anim;

	[Token(Token = "0x4000378")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool isReach;

	[Token(Token = "0x6000268")]
	[Address(RVA = "0xA50438", Offset = "0xA50438", VA = "0xA50438")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000269")]
	[Address(RVA = "0xA50490", Offset = "0xA50490", VA = "0xA50490")]
	private void Update()
	{
	}

	[Token(Token = "0x600026A")]
	[Address(RVA = "0xA50730", Offset = "0xA50730", VA = "0xA50730")]
	public GoForFeed()
	{
	}
}
[Token(Token = "0x2000095")]
public class GrassCutter : MonoBehaviour
{
	[Token(Token = "0x4000379")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform Grass_Parent;

	[Token(Token = "0x400037A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform Machine_Trolley_Grass;

	[Token(Token = "0x400037B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int totalCutgrass;

	[Token(Token = "0x400037C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private int childcount;

	[Token(Token = "0x600026B")]
	[Address(RVA = "0xA50740", Offset = "0xA50740", VA = "0xA50740")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600026C")]
	[Address(RVA = "0xA50748", Offset = "0xA50748", VA = "0xA50748")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600026D")]
	[Address(RVA = "0xA50AC4", Offset = "0xA50AC4", VA = "0xA50AC4")]
	public GrassCutter()
	{
	}
}
[Token(Token = "0x2000096")]
public class GrassCutterMachine : MonoBehaviour
{
	[Token(Token = "0x400037D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Grabbable grab;

	[Token(Token = "0x400037E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject[] Rotating_Go;

	[Token(Token = "0x600026E")]
	[Address(RVA = "0xA50ACC", Offset = "0xA50ACC", VA = "0xA50ACC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600026F")]
	[Address(RVA = "0xA50B24", Offset = "0xA50B24", VA = "0xA50B24")]
	private void Update()
	{
	}

	[Token(Token = "0x6000270")]
	[Address(RVA = "0xA50B40", Offset = "0xA50B40", VA = "0xA50B40")]
	private void RotatingGo(bool isRotate)
	{
	}

	[Token(Token = "0x6000271")]
	[Address(RVA = "0xA50BE8", Offset = "0xA50BE8", VA = "0xA50BE8")]
	public GrassCutterMachine()
	{
	}
}
[Token(Token = "0x2000097")]
public class HandMenuOnOff : MonoBehaviour
{
	[Token(Token = "0x400037F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject Handmenu;

	[Token(Token = "0x6000272")]
	[Address(RVA = "0xA50BF0", Offset = "0xA50BF0", VA = "0xA50BF0")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000273")]
	[Address(RVA = "0xA50C8C", Offset = "0xA50C8C", VA = "0xA50C8C")]
	public HandMenuOnOff()
	{
	}
}
[Token(Token = "0x2000098")]
public class HandMenuPopup : MonoBehaviour
{
	[Token(Token = "0x4000380")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject btn_use_trac_2;

	[Token(Token = "0x4000381")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject btn_buy_trac_2;

	[Token(Token = "0x4000382")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private SceneLoader sceneloader;

	[Token(Token = "0x4000383")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool isNeedToCheckModel;

	[Token(Token = "0x6000274")]
	[Address(RVA = "0xA50C94", Offset = "0xA50C94", VA = "0xA50C94")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000275")]
	[Address(RVA = "0xA50D94", Offset = "0xA50D94", VA = "0xA50D94")]
	private void checkTractor2Purchase(int model)
	{
	}

	[Token(Token = "0x6000276")]
	[Address(RVA = "0xA50E78", Offset = "0xA50E78", VA = "0xA50E78")]
	public void UseTractor(int model)
	{
	}

	[Token(Token = "0x6000277")]
	[Address(RVA = "0xA50F98", Offset = "0xA50F98", VA = "0xA50F98")]
	public void PurchaseTractor()
	{
	}

	[Token(Token = "0x6000278")]
	[Address(RVA = "0xA510A8", Offset = "0xA510A8", VA = "0xA510A8")]
	public HandMenuPopup()
	{
	}
}
[Token(Token = "0x2000099")]
public class InjectionTopGrabb : MonoBehaviour
{
	[Token(Token = "0x4000384")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Grabbable grab;

	[Token(Token = "0x4000385")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject Injection_Needle;

	[Token(Token = "0x4000386")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float LastYPosition;

	[Token(Token = "0x4000387")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public SetHeight setheight;

	[Token(Token = "0x6000279")]
	[Address(RVA = "0xA510B0", Offset = "0xA510B0", VA = "0xA510B0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600027A")]
	[Address(RVA = "0xA51134", Offset = "0xA51134", VA = "0xA51134")]
	public InjectionTopGrabb()
	{
	}
}
[Token(Token = "0x200009A")]
public enum VacinationAnimalType
{
	[Token(Token = "0x4000389")]
	cow,
	[Token(Token = "0x400038A")]
	goat,
	[Token(Token = "0x400038B")]
	horse
}
[Token(Token = "0x200009B")]
public class InjectionTypeDetector : MonoBehaviour
{
	[Token(Token = "0x400038C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Image Fill_Injection;

	[Token(Token = "0x400038D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public VacinationAnimalType Animaltype;

	[Token(Token = "0x400038E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool isInject;

	[Token(Token = "0x400038F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private bool isCount;

	[Token(Token = "0x4000390")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Animation ani_Animal;

	[Token(Token = "0x600027B")]
	[Address(RVA = "0xA5113C", Offset = "0xA5113C", VA = "0xA5113C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600027C")]
	[Address(RVA = "0xA511A8", Offset = "0xA511A8", VA = "0xA511A8")]
	private void OnTriggerStay(Collider other)
	{
	}

	[Token(Token = "0x600027D")]
	[Address(RVA = "0xA51418", Offset = "0xA51418", VA = "0xA51418")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600027E")]
	[Address(RVA = "0xA51544", Offset = "0xA51544", VA = "0xA51544")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x600027F")]
	[Address(RVA = "0xA51670", Offset = "0xA51670", VA = "0xA51670")]
	public InjectionTypeDetector()
	{
	}
}
[Token(Token = "0x200009C")]
public class InstructionShow : MonoBehaviour
{
	[Token(Token = "0x4000391")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string UIname;

	[Token(Token = "0x6000280")]
	[Address(RVA = "0xA51678", Offset = "0xA51678", VA = "0xA51678")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000281")]
	[Address(RVA = "0xA5167C", Offset = "0xA5167C", VA = "0xA5167C")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000282")]
	[Address(RVA = "0xA5178C", Offset = "0xA5178C", VA = "0xA5178C")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6000283")]
	[Address(RVA = "0xA51854", Offset = "0xA51854", VA = "0xA51854")]
	public InstructionShow()
	{
	}
}
[Token(Token = "0x200009D")]
public class JoystickDronControl : MonoBehaviour
{
	[Token(Token = "0x4000392")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Grab Object")]
	public Grabbable JoystickGrabbable;

	[Token(Token = "0x4000393")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Header("Movement Speed")]
	[Tooltip("Set to True to Lerp towards the held hand. Set to False for Instant movement")]
	public bool UseSmoothLook;

	[Token(Token = "0x4000394")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float SmoothLookSpeed;

	[Token(Token = "0x4000395")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Header("Hinge X")]
	public Transform HingeXTransform;

	[Token(Token = "0x4000396")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float MinXAngle;

	[Token(Token = "0x4000397")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float MaxXAngle;

	[Token(Token = "0x4000398")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Header("Hinge Y")]
	public Transform HingeYTransform;

	[Token(Token = "0x4000399")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float MinYAngle;

	[Token(Token = "0x400039A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float MaxYAngle;

	[Token(Token = "0x400039B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Header("Return To Center")]
	[Tooltip("How fast to return to center if nothing is holding the Joystick. Set to 0 if you do not wish to Return to Center")]
	public float ReturnToCenterSpeed;

	[Token(Token = "0x400039C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[Tooltip("Any values below this threshold will not be passed to events")]
	[Header("Deadzone")]
	public float DeadZone;

	[Token(Token = "0x400039D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public FloatFloatEvent onJoystickChange;

	[Token(Token = "0x400039E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Vector2Event onJoystickVectorChange;

	[Token(Token = "0x400039F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Header("Shown for Debug : ")]
	public float LeverPercentageX;

	[Token(Token = "0x40003A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public float LeverPercentageY;

	[Token(Token = "0x40003A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Vector2 LeverVector;

	[Token(Token = "0x40003A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public float angleX;

	[Token(Token = "0x40003A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public float angleY;

	[Token(Token = "0x40003A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Quaternion originalRot;

	[Token(Token = "0x40003A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[Tooltip("Called when lever was down, but is now in the up position")]
	public UnityEvent onLeverUp;

	[Token(Token = "0x40003A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[Tooltip("Called if the lever changes position at all")]
	public FloatEvent onLeverChange;

	[Token(Token = "0x40003A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private float prevperX;

	[Token(Token = "0x40003A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private float prevperY;

	[Token(Token = "0x40003A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public bool ischangex;

	[Token(Token = "0x40003AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA1")]
	public bool ischangey;

	[Token(Token = "0x40003AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA2")]
	public bool iscamMove;

	[Token(Token = "0x6000284")]
	[Address(RVA = "0xA5185C", Offset = "0xA5185C", VA = "0xA5185C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000285")]
	[Address(RVA = "0xA51E18", Offset = "0xA51E18", VA = "0xA51E18", Slot = "4")]
	public virtual void CallJoystickEvents()
	{
	}

	[Token(Token = "0x6000286")]
	[Address(RVA = "0xA5201C", Offset = "0xA5201C", VA = "0xA5201C", Slot = "5")]
	public virtual void OnJoystickChange(float leverX, float leverY)
	{
	}

	[Token(Token = "0x6000287")]
	[Address(RVA = "0xA52090", Offset = "0xA52090", VA = "0xA52090", Slot = "6")]
	public virtual void OnJoystickChange(Vector2 joystickVector)
	{
	}

	[Token(Token = "0x6000288")]
	[Address(RVA = "0xA52104", Offset = "0xA52104", VA = "0xA52104")]
	public JoystickDronControl()
	{
	}
}
[Token(Token = "0x200009E")]
public class KillObject : MonoBehaviour
{
	[Token(Token = "0x200009F")]
	[CompilerGenerated]
	private sealed class <WaitForDisble>d__3 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40003AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40003AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40003B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public KillObject <>4__this;

		[Token(Token = "0x17000018")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600028F")]
			[Address(RVA = "0xA52378", Offset = "0xA52378", VA = "0xA52378", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000019")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000291")]
			[Address(RVA = "0xA523C0", Offset = "0xA523C0", VA = "0xA523C0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600028C")]
		[Address(RVA = "0xA52214", Offset = "0xA52214", VA = "0xA52214")]
		[DebuggerHidden]
		public <WaitForDisble>d__3(int <>1__state)
		{
		}

		[Token(Token = "0x600028D")]
		[Address(RVA = "0xA52244", Offset = "0xA52244", VA = "0xA52244", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600028E")]
		[Address(RVA = "0xA52248", Offset = "0xA52248", VA = "0xA52248", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000290")]
		[Address(RVA = "0xA52380", Offset = "0xA52380", VA = "0xA52380", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40003AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float time;

	[Token(Token = "0x40003AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool isDestroy;

	[Token(Token = "0x6000289")]
	[Address(RVA = "0xA52180", Offset = "0xA52180", VA = "0xA52180")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600028A")]
	[Address(RVA = "0xA521A0", Offset = "0xA521A0", VA = "0xA521A0")]
	[IteratorStateMachine(typeof(<WaitForDisble>d__3))]
	private IEnumerator WaitForDisble()
	{
		return null;
	}

	[Token(Token = "0x600028B")]
	[Address(RVA = "0xA5223C", Offset = "0xA5223C", VA = "0xA5223C")]
	public KillObject()
	{
	}
}
[Token(Token = "0x20000A0")]
[CreateAssetMenu(fileName = "TractorLeveldata", menuName = "SubLevel's Data", order = 1)]
public class LevelData : ScriptableObject
{
	[Token(Token = "0x20000A1")]
	public enum ThemeData
	{
		[Token(Token = "0x40003C4")]
		Day,
		[Token(Token = "0x40003C5")]
		Night
	}

	[Serializable]
	[Token(Token = "0x20000A2")]
	public class TaskHint
	{
		[Token(Token = "0x40003C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Sprite[] Image;

		[Token(Token = "0x40003C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string[] Text;

		[Token(Token = "0x6000293")]
		[Address(RVA = "0xA523D0", Offset = "0xA523D0", VA = "0xA523D0")]
		public TaskHint()
		{
		}
	}

	[Token(Token = "0x40003B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[Tooltip("3D environment Prefab")]
	[Header("3D Environment")]
	public GameObject LevelPrefab;

	[Token(Token = "0x40003B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Header("Player Transform")]
	[Tooltip("Player position and rotation according level")]
	[SerializeField]
	public Vector3 PlayerPosition;

	[Token(Token = "0x40003B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	public Vector3 PlayerRotation;

	[Token(Token = "0x40003B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	[Tooltip("Level completion coin and time")]
	[Header("Level Finish")]
	public float LevelFinishTime;

	[Token(Token = "0x40003B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SerializeField]
	public int LevelEarnCoin;

	[Token(Token = "0x40003B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Header("Level Instruction")]
	[Tooltip("Hint for level completion")]
	[SerializeField]
	public GameObject InstructionOnHand;

	[Token(Token = "0x40003B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	public string TaskInstruction;

	[Token(Token = "0x40003B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	public TaskHint TaskHints;

	[Token(Token = "0x40003B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Header("Tractor Parts")]
	[Tooltip("Is part need for level ?")]
	[SerializeField]
	public bool isLoadLorry;

	[Token(Token = "0x40003BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	public GameObject Lorry_carry_go;

	[Token(Token = "0x40003BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	public GameObject[] Tractor_Machinery_Load;

	[Token(Token = "0x40003BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	[Tooltip("Tractor drive or standing player")]
	[Header("Tractor Drive")]
	public bool isFarming;

	[Token(Token = "0x40003BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
	[SerializeField]
	public bool isFinishOnPark;

	[Token(Token = "0x40003BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	[Tooltip("If you assign value then change light setting runtime")]
	[Header("Environment Look")]
	public Material Skybox;

	[Token(Token = "0x40003BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	public int Temperature;

	[Token(Token = "0x40003C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	[SerializeField]
	public Color FogColor;

	[Token(Token = "0x40003C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	[SerializeField]
	public int TotalTimeToPlay;

	[Token(Token = "0x40003C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	public ThemeData defaultTheme;

	[Token(Token = "0x6000292")]
	[Address(RVA = "0xA523C8", Offset = "0xA523C8", VA = "0xA523C8")]
	public LevelData()
	{
	}
}
[Token(Token = "0x20000A3")]
[CreateAssetMenu(fileName = "TractorEnvironment", menuName = "EnvironmentSetting", order = 3)]
public class EnvironmentSetting : ScriptableObject
{
	[Token(Token = "0x40003C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[Header("3D Environment Material and Texture")]
	public Material[] Environment_mat;

	[Token(Token = "0x40003C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Texture[] Material_texture;

	[Token(Token = "0x40003CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	[Header("Direction Light")]
	public Color lightColor;

	[Token(Token = "0x40003CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float lightIntensity;

	[Token(Token = "0x40003CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float lightTemprature;

	[Token(Token = "0x40003CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Header("Lighting Setting")]
	[SerializeField]
	public Material skyboxMateial;

	[Token(Token = "0x40003CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Color skyboxmaterialColor;

	[Token(Token = "0x40003CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Color skyColor;

	[Token(Token = "0x40003D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Color equatorColor;

	[Token(Token = "0x40003D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Color groundColor;

	[Token(Token = "0x40003D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	[Header("Trees and Rain")]
	public Material treeMaterial;

	[Token(Token = "0x40003D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Texture treeMat_texture;

	[Token(Token = "0x40003D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Color treematerialColor;

	[Token(Token = "0x40003D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public bool isRainy;

	[Token(Token = "0x6000294")]
	[Address(RVA = "0xA523D8", Offset = "0xA523D8", VA = "0xA523D8")]
	public EnvironmentSetting()
	{
	}
}
[Token(Token = "0x20000A4")]
[CreateAssetMenu(fileName = "TractorLeveldata", menuName = "MainLevel's Data", order = 2)]
public class MainLevelData : ScriptableObject
{
	[Token(Token = "0x40003D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	public LevelData[] SubLevelData;

	[Token(Token = "0x6000295")]
	[Address(RVA = "0xA523E0", Offset = "0xA523E0", VA = "0xA523E0")]
	public MainLevelData()
	{
	}
}
[Token(Token = "0x20000A5")]
public enum DroneUseFor
{
	[Token(Token = "0x40003D8")]
	MeasureArea,
	[Token(Token = "0x40003D9")]
	Detact,
	[Token(Token = "0x40003DA")]
	Pesticide,
	[Token(Token = "0x40003DB")]
	GunShoot,
	[Token(Token = "0x40003DC")]
	RatMedicine,
	[Token(Token = "0x40003DD")]
	FindAnimal
}
[Serializable]
[Token(Token = "0x20000A6")]
public class DroneParts
{
	[Token(Token = "0x40003DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public GameObject Drone;

	[Token(Token = "0x40003DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject PesticideTank;

	[Token(Token = "0x40003E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject Gun;

	[Token(Token = "0x40003E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject SpotLight;

	[Token(Token = "0x40003E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject UICrosshair;

	[Token(Token = "0x40003E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject RatMedicine;

	[Token(Token = "0x6000296")]
	[Address(RVA = "0xA523E8", Offset = "0xA523E8", VA = "0xA523E8")]
	public DroneParts()
	{
	}
}
[Token(Token = "0x20000A7")]
public class LevelDroneCondition : MonoBehaviour
{
	[Token(Token = "0x40003E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static LevelDroneCondition instance;

	[Token(Token = "0x40003E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public DroneUseFor DroneFor;

	[Token(Token = "0x40003E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public DroneParts DronePart;

	[Token(Token = "0x40003E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject UI_Accuracy;

	[Token(Token = "0x40003E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Image img_Fill_Accuraccy;

	[Token(Token = "0x40003E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject StartButton;

	[Token(Token = "0x40003EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Sprite icon_measure;

	[Token(Token = "0x40003EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Sprite icon_find;

	[Token(Token = "0x40003EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Sprite icon_crosshair;

	[Token(Token = "0x40003ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject LandingPoint;

	[Token(Token = "0x40003EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public GameObject AutoparkSwitch;

	[Token(Token = "0x6000297")]
	[Address(RVA = "0xA523F0", Offset = "0xA523F0", VA = "0xA523F0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000298")]
	[Address(RVA = "0xA52A54", Offset = "0xA52A54", VA = "0xA52A54")]
	public void OnLandingPoint()
	{
	}

	[Token(Token = "0x6000299")]
	[Address(RVA = "0xA52960", Offset = "0xA52960", VA = "0xA52960")]
	public void DroneCollider(bool isTrigger)
	{
	}

	[Token(Token = "0x600029A")]
	[Address(RVA = "0xA5257C", Offset = "0xA5257C", VA = "0xA5257C")]
	private void DroneCondition()
	{
	}

	[Token(Token = "0x600029B")]
	[Address(RVA = "0xA52A8C", Offset = "0xA52A8C", VA = "0xA52A8C")]
	public LevelDroneCondition()
	{
	}
}
[Token(Token = "0x20000A8")]
public class LevelFinishScript : MonoBehaviour
{
	[Token(Token = "0x40003EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject Trolly_05;

	[Token(Token = "0x40003F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject MBoy_idle;

	[Token(Token = "0x40003F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject MBoy_walk;

	[Token(Token = "0x40003F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool isEnd;

	[Token(Token = "0x600029C")]
	[Address(RVA = "0xA52A94", Offset = "0xA52A94", VA = "0xA52A94")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600029D")]
	[Address(RVA = "0xA52B24", Offset = "0xA52B24", VA = "0xA52B24")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x600029E")]
	[Address(RVA = "0xA52DA4", Offset = "0xA52DA4", VA = "0xA52DA4")]
	public LevelFinishScript()
	{
	}
}
[Token(Token = "0x20000A9")]
public class LivingAnimalRaycast : MonoBehaviour
{
	[Token(Token = "0x40003F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool isCanMove;

	[Token(Token = "0x600029F")]
	[Address(RVA = "0xA52DB4", Offset = "0xA52DB4", VA = "0xA52DB4")]
	private void Update()
	{
	}

	[Token(Token = "0x60002A0")]
	[Address(RVA = "0xA53098", Offset = "0xA53098", VA = "0xA53098")]
	public LivingAnimalRaycast()
	{
	}
}
[Token(Token = "0x20000AA")]
public class LivingAnimalScript : MonoBehaviour
{
	[Token(Token = "0x40003F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Animation ani_animal;

	[Token(Token = "0x40003F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool isDie;

	[Token(Token = "0x40003F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	private bool isHornWalk;

	[Token(Token = "0x40003F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float movementSpeed;

	[Token(Token = "0x40003F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ObjectSoundsList SoundType;

	[Token(Token = "0x40003F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform PlayerTrans;

	[Token(Token = "0x40003FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float distanceFromPlayer;

	[Token(Token = "0x40003FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private bool isTimeToPlay;

	[Token(Token = "0x40003FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int rndmAnimation;

	[Token(Token = "0x40003FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float TimeTostopWalk;

	[Token(Token = "0x40003FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float timer;

	[Token(Token = "0x40003FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private AnimationClip currentClip;

	[Token(Token = "0x4000400")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject parentobj;

	[Token(Token = "0x60002A1")]
	[Address(RVA = "0xA530A0", Offset = "0xA530A0", VA = "0xA530A0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60002A2")]
	[Address(RVA = "0xA530F4", Offset = "0xA530F4", VA = "0xA530F4")]
	private void Start()
	{
	}

	[Token(Token = "0x60002A3")]
	[Address(RVA = "0xA5315C", Offset = "0xA5315C", VA = "0xA5315C")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60002A4")]
	[Address(RVA = "0xA53344", Offset = "0xA53344", VA = "0xA53344")]
	public void AfterHornWalkForward()
	{
	}

	[Token(Token = "0x60002A5")]
	[Address(RVA = "0xA53350", Offset = "0xA53350", VA = "0xA53350")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60002A6")]
	[Address(RVA = "0xA53474", Offset = "0xA53474", VA = "0xA53474")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60002A7")]
	[Address(RVA = "0xA53548", Offset = "0xA53548", VA = "0xA53548")]
	public void Update()
	{
	}

	[Token(Token = "0x60002A8")]
	[Address(RVA = "0xA5384C", Offset = "0xA5384C", VA = "0xA5384C")]
	public LivingAnimalScript()
	{
	}
}
[Token(Token = "0x20000AB")]
public class LivingObjectDetactor : MonoBehaviour
{
	[Token(Token = "0x60002A9")]
	[Address(RVA = "0xA53864", Offset = "0xA53864", VA = "0xA53864")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60002AA")]
	[Address(RVA = "0xA53B94", Offset = "0xA53B94", VA = "0xA53B94")]
	public LivingObjectDetactor()
	{
	}
}
[Token(Token = "0x20000AC")]
public class LocomotionDetector : MonoBehaviour
{
	[Token(Token = "0x4000401")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SceneLoader scenefade;

	[Token(Token = "0x4000402")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject LocomotionPlayer;

	[Token(Token = "0x4000403")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject TractorPlayer;

	[Token(Token = "0x4000404")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int TotalAniml;

	[Token(Token = "0x4000405")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Image img_instruct;

	[Token(Token = "0x4000406")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Sprite sprt_1;

	[Token(Token = "0x4000407")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Sprite sprt_2;

	[Token(Token = "0x60002AB")]
	[Address(RVA = "0xA53B9C", Offset = "0xA53B9C", VA = "0xA53B9C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60002AC")]
	[Address(RVA = "0xA53C20", Offset = "0xA53C20", VA = "0xA53C20")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60002AD")]
	[Address(RVA = "0xA53C44", Offset = "0xA53C44", VA = "0xA53C44")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60002AE")]
	[Address(RVA = "0xA53D80", Offset = "0xA53D80", VA = "0xA53D80")]
	public void CountTotalDriveAnimal()
	{
	}

	[Token(Token = "0x60002AF")]
	[Address(RVA = "0xA53E28", Offset = "0xA53E28", VA = "0xA53E28")]
	public LocomotionDetector()
	{
	}
}
[Token(Token = "0x20000AD")]
public class MarkerSpray : MonoBehaviour
{
	[Token(Token = "0x4000408")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static MarkerSpray instance;

	[Token(Token = "0x4000409")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static int TotalNumberMarking;

	[Token(Token = "0x400040A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int TotalMarkingNeed;

	[Token(Token = "0x400040B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Grabbable grab;

	[Token(Token = "0x400040C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject WaterSpray;

	[Token(Token = "0x60002B0")]
	[Address(RVA = "0xA53E30", Offset = "0xA53E30", VA = "0xA53E30")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60002B1")]
	[Address(RVA = "0xA53EE4", Offset = "0xA53EE4", VA = "0xA53EE4")]
	private void Update()
	{
	}

	[Token(Token = "0x60002B2")]
	[Address(RVA = "0xA53FC8", Offset = "0xA53FC8", VA = "0xA53FC8")]
	public void CheckMarkingLevelFinish()
	{
	}

	[Token(Token = "0x60002B3")]
	[Address(RVA = "0xA540A0", Offset = "0xA540A0", VA = "0xA540A0")]
	public MarkerSpray()
	{
	}
}
[Token(Token = "0x20000AE")]
public class MoneyGrab : MonoBehaviour
{
	[Token(Token = "0x400040D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Grabbable grab;

	[Token(Token = "0x400040E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int MoneyValue;

	[Token(Token = "0x400040F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject NextPhase;

	[Token(Token = "0x4000410")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject MoneyPopup;

	[Token(Token = "0x4000411")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public TextMeshProUGUI text_popup_msg;

	[Token(Token = "0x4000412")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public string str_1;

	[Token(Token = "0x4000413")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public string str_2;

	[Token(Token = "0x4000414")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public bool isLevelFinish;

	[Token(Token = "0x60002B4")]
	[Address(RVA = "0xA540B0", Offset = "0xA540B0", VA = "0xA540B0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60002B5")]
	[Address(RVA = "0xA541C4", Offset = "0xA541C4", VA = "0xA541C4")]
	private void Update()
	{
	}

	[Token(Token = "0x60002B6")]
	[Address(RVA = "0xA5437C", Offset = "0xA5437C", VA = "0xA5437C")]
	public MoneyGrab()
	{
	}
}
[Token(Token = "0x20000AF")]
public class NextDirectionTarget : MonoBehaviour
{
	[Token(Token = "0x4000415")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject NextTarget;

	[Token(Token = "0x4000416")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool isNextUI;

	[Token(Token = "0x4000417")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string UIname;

	[Token(Token = "0x60002B7")]
	[Address(RVA = "0xA54400", Offset = "0xA54400", VA = "0xA54400")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60002B8")]
	[Address(RVA = "0xA54488", Offset = "0xA54488", VA = "0xA54488")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60002B9")]
	[Address(RVA = "0xA54578", Offset = "0xA54578", VA = "0xA54578")]
	public NextDirectionTarget()
	{
	}
}
[Token(Token = "0x20000B0")]
public class NiddleAnimalType : MonoBehaviour
{
	[Token(Token = "0x4000418")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public VacinationAnimalType Animaltype;

	[Token(Token = "0x4000419")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject TopPartOfInjection;

	[Token(Token = "0x60002BA")]
	[Address(RVA = "0xA514E4", Offset = "0xA514E4", VA = "0xA514E4")]
	public void PlayAnimationOfInjection()
	{
	}

	[Token(Token = "0x60002BB")]
	[Address(RVA = "0xA51610", Offset = "0xA51610", VA = "0xA51610")]
	public void StopAnimationOfInjection()
	{
	}

	[Token(Token = "0x60002BC")]
	[Address(RVA = "0xA54580", Offset = "0xA54580", VA = "0xA54580")]
	public NiddleAnimalType()
	{
	}
}
[Token(Token = "0x20000B1")]
public class ObjectRotation : MonoBehaviour
{
	[Token(Token = "0x400041A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float xAngle;

	[Token(Token = "0x400041B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float yAngle;

	[Token(Token = "0x400041C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float zAngle;

	[Token(Token = "0x400041D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float speed;

	[Token(Token = "0x60002BD")]
	[Address(RVA = "0xA54588", Offset = "0xA54588", VA = "0xA54588")]
	private void Update()
	{
	}

	[Token(Token = "0x60002BE")]
	[Address(RVA = "0xA545E4", Offset = "0xA545E4", VA = "0xA545E4")]
	public ObjectRotation()
	{
	}
}
[Token(Token = "0x20000B2")]
public class ObjectSoundPlay : MonoBehaviour
{
	[Token(Token = "0x400041E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ObjectSoundsList SoundType;

	[Token(Token = "0x400041F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Transform PlayerTrans;

	[Token(Token = "0x4000420")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float distanceFromPlayer;

	[Token(Token = "0x4000421")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private bool isTimeToPlay;

	[Token(Token = "0x60002BF")]
	[Address(RVA = "0xA545EC", Offset = "0xA545EC", VA = "0xA545EC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60002C0")]
	[Address(RVA = "0xA545F8", Offset = "0xA545F8", VA = "0xA545F8")]
	private void Start()
	{
	}

	[Token(Token = "0x60002C1")]
	[Address(RVA = "0xA54660", Offset = "0xA54660", VA = "0xA54660")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60002C2")]
	[Address(RVA = "0xA54784", Offset = "0xA54784", VA = "0xA54784")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60002C3")]
	[Address(RVA = "0xA54858", Offset = "0xA54858", VA = "0xA54858")]
	public ObjectSoundPlay()
	{
	}
}
[Token(Token = "0x20000B3")]
[AddComponentMenu("Camera-Control/Mouse Look")]
public class MouseLook : MonoBehaviour
{
	[Token(Token = "0x20000B4")]
	public enum RotationAxes
	{
		[Token(Token = "0x400042B")]
		MouseXAndY,
		[Token(Token = "0x400042C")]
		MouseX,
		[Token(Token = "0x400042D")]
		MouseY
	}

	[Token(Token = "0x4000422")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public RotationAxes axes;

	[Token(Token = "0x4000423")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float sensitivityX;

	[Token(Token = "0x4000424")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float sensitivityY;

	[Token(Token = "0x4000425")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float minimumX;

	[Token(Token = "0x4000426")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float maximumX;

	[Token(Token = "0x4000427")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float minimumY;

	[Token(Token = "0x4000428")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float maximumY;

	[Token(Token = "0x4000429")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float rotationY;

	[Token(Token = "0x60002C4")]
	[Address(RVA = "0xA54860", Offset = "0xA54860", VA = "0xA54860")]
	private void Update()
	{
	}

	[Token(Token = "0x60002C5")]
	[Address(RVA = "0xA54A2C", Offset = "0xA54A2C", VA = "0xA54A2C")]
	private void Start()
	{
	}

	[Token(Token = "0x60002C6")]
	[Address(RVA = "0xA54AE8", Offset = "0xA54AE8", VA = "0xA54AE8")]
	public MouseLook()
	{
	}
}
[Token(Token = "0x20000B5")]
public class OpenCloseDoor : MonoBehaviour
{
	[Token(Token = "0x400042E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Initial Y Position")]
	public float InitialXPosition;

	[Token(Token = "0x400042F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float MinimumXPosition;

	[Token(Token = "0x4000430")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float MaximumXPosition;

	[Token(Token = "0x4000431")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Grabbable grab;

	[Token(Token = "0x4000432")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform go_openclose;

	[Token(Token = "0x4000433")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Animation gate_anim;

	[Token(Token = "0x4000434")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform target_open;

	[Token(Token = "0x4000435")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Transform target_close;

	[Token(Token = "0x4000436")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float speed;

	[Token(Token = "0x60002C7")]
	[Address(RVA = "0xA54B08", Offset = "0xA54B08", VA = "0xA54B08")]
	private void Start()
	{
	}

	[Token(Token = "0x60002C8")]
	[Address(RVA = "0xA54B60", Offset = "0xA54B60", VA = "0xA54B60")]
	private void Awake()
	{
	}

	[Token(Token = "0x60002C9")]
	[Address(RVA = "0xA54BDC", Offset = "0xA54BDC", VA = "0xA54BDC")]
	private void Update()
	{
	}

	[Token(Token = "0x60002CA")]
	[Address(RVA = "0xA54EBC", Offset = "0xA54EBC", VA = "0xA54EBC", Slot = "4")]
	public virtual void SetHeightY(float heightX)
	{
	}

	[Token(Token = "0x60002CB")]
	[Address(RVA = "0xA54F4C", Offset = "0xA54F4C", VA = "0xA54F4C")]
	public OpenCloseDoor()
	{
	}
}
[Token(Token = "0x20000B6")]
public class OppositeHandbreck : MonoBehaviour
{
	[Token(Token = "0x60002CC")]
	[Address(RVA = "0xA54F5C", Offset = "0xA54F5C", VA = "0xA54F5C")]
	private void Start()
	{
	}

	[Token(Token = "0x60002CD")]
	[Address(RVA = "0xA54F60", Offset = "0xA54F60", VA = "0xA54F60")]
	private void Update()
	{
	}

	[Token(Token = "0x60002CE")]
	[Address(RVA = "0xA54F64", Offset = "0xA54F64", VA = "0xA54F64")]
	public OppositeHandbreck()
	{
	}
}
[Token(Token = "0x20000B7")]
public class EditorPathScript : MonoBehaviour
{
	[Token(Token = "0x4000437")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Color rayColor;

	[Token(Token = "0x4000438")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<Transform> path_objs;

	[Token(Token = "0x4000439")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform[] theArray;

	[Token(Token = "0x60002CF")]
	[Address(RVA = "0xA54F6C", Offset = "0xA54F6C", VA = "0xA54F6C")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x60002D0")]
	[Address(RVA = "0xA5520C", Offset = "0xA5520C", VA = "0xA5520C")]
	private void Start()
	{
	}

	[Token(Token = "0x60002D1")]
	[Address(RVA = "0xA55210", Offset = "0xA55210", VA = "0xA55210")]
	private void Update()
	{
	}

	[Token(Token = "0x60002D2")]
	[Address(RVA = "0xA55214", Offset = "0xA55214", VA = "0xA55214")]
	public EditorPathScript()
	{
	}
}
[Token(Token = "0x20000B8")]
public class MoveOnPathAnimal : MonoBehaviour
{
	[Token(Token = "0x400043A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public EditorPathScript PathToFollow;

	[Token(Token = "0x400043B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int CurrentWayPointID;

	[Token(Token = "0x400043C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float reachDistance;

	[Token(Token = "0x400043D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float rotationSpeed;

	[Token(Token = "0x400043E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float speed;

	[Token(Token = "0x400043F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float defaultSpeed;

	[Token(Token = "0x4000440")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Animation anim;

	[Token(Token = "0x4000441")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private WaterDrinkingManager waterdrink_;

	[Token(Token = "0x60002D3")]
	[Address(RVA = "0xA552A4", Offset = "0xA552A4", VA = "0xA552A4")]
	private void Start()
	{
	}

	[Token(Token = "0x60002D4")]
	[Address(RVA = "0xA55394", Offset = "0xA55394", VA = "0xA55394")]
	private void Update()
	{
	}

	[Token(Token = "0x60002D5")]
	[Address(RVA = "0xA55918", Offset = "0xA55918", VA = "0xA55918")]
	public MoveOnPathAnimal()
	{
	}
}
[Token(Token = "0x20000B9")]
public class MoveOnPathChicken : MonoBehaviour
{
	[Token(Token = "0x20000BA")]
	[CompilerGenerated]
	private sealed class <WaitForWalk>d__11 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400044A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400044B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400044C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MoveOnPathChicken <>4__this;

		[Token(Token = "0x400044D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float Speed;

		[Token(Token = "0x1700001A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60002DE")]
			[Address(RVA = "0xA55F98", Offset = "0xA55F98", VA = "0xA55F98", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700001B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60002E0")]
			[Address(RVA = "0xA55FE0", Offset = "0xA55FE0", VA = "0xA55FE0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60002DB")]
		[Address(RVA = "0xA55E8C", Offset = "0xA55E8C", VA = "0xA55E8C")]
		[DebuggerHidden]
		public <WaitForWalk>d__11(int <>1__state)
		{
		}

		[Token(Token = "0x60002DC")]
		[Address(RVA = "0xA55EC8", Offset = "0xA55EC8", VA = "0xA55EC8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60002DD")]
		[Address(RVA = "0xA55ECC", Offset = "0xA55ECC", VA = "0xA55ECC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60002DF")]
		[Address(RVA = "0xA55FA0", Offset = "0xA55FA0", VA = "0xA55FA0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000442")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public EditorPathScript PathToFollow;

	[Token(Token = "0x4000443")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int CurrentWayPointID;

	[Token(Token = "0x4000444")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float reachDistance;

	[Token(Token = "0x4000445")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float rotationSpeed;

	[Token(Token = "0x4000446")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float speed;

	[Token(Token = "0x4000447")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float defaultSpeed;

	[Token(Token = "0x4000448")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Animation anim_bird;

	[Token(Token = "0x4000449")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool isRun;

	[Token(Token = "0x60002D6")]
	[Address(RVA = "0xA5592C", Offset = "0xA5592C", VA = "0xA5592C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60002D7")]
	[Address(RVA = "0xA55938", Offset = "0xA55938", VA = "0xA55938")]
	private void Update()
	{
	}

	[Token(Token = "0x60002D8")]
	[Address(RVA = "0xA55D6C", Offset = "0xA55D6C", VA = "0xA55D6C")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60002D9")]
	[Address(RVA = "0xA55E08", Offset = "0xA55E08", VA = "0xA55E08")]
	[IteratorStateMachine(typeof(<WaitForWalk>d__11))]
	private IEnumerator WaitForWalk(float Speed)
	{
		return null;
	}

	[Token(Token = "0x60002DA")]
	[Address(RVA = "0xA55EB4", Offset = "0xA55EB4", VA = "0xA55EB4")]
	public MoveOnPathChicken()
	{
	}
}
[Token(Token = "0x20000BB")]
public class MoveOnPathCivilience : MonoBehaviour
{
	[Token(Token = "0x400044E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public EditorPathScript PathToFollow;

	[Token(Token = "0x400044F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int CurrentWayPointID;

	[Token(Token = "0x4000450")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float reachDistance;

	[Token(Token = "0x4000451")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float rotationSpeed;

	[Token(Token = "0x4000452")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float speed;

	[Token(Token = "0x4000453")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject AnimaleTrue;

	[Token(Token = "0x4000454")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool isBird;

	[Token(Token = "0x60002E1")]
	[Address(RVA = "0xA55FE8", Offset = "0xA55FE8", VA = "0xA55FE8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60002E2")]
	[Address(RVA = "0xA5608C", Offset = "0xA5608C", VA = "0xA5608C")]
	private void Update()
	{
	}

	[Token(Token = "0x60002E3")]
	[Address(RVA = "0xA56450", Offset = "0xA56450", VA = "0xA56450")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60002E4")]
	[Address(RVA = "0xA5655C", Offset = "0xA5655C", VA = "0xA5655C")]
	public MoveOnPathCivilience()
	{
	}
}
[Token(Token = "0x20000BC")]
public class MoveOnPathCleaning : MonoBehaviour
{
	[Token(Token = "0x4000455")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public EditorPathScript PathToFollow;

	[Token(Token = "0x4000456")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int CurrentWayPointID;

	[Token(Token = "0x4000457")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float reachDistance;

	[Token(Token = "0x4000458")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float rotationSpeed;

	[Token(Token = "0x4000459")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float speed;

	[Token(Token = "0x400045A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float defaultSpeed;

	[Token(Token = "0x400045B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Animation anim;

	[Token(Token = "0x400045C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject DurtySurface;

	[Token(Token = "0x60002E5")]
	[Address(RVA = "0xA56570", Offset = "0xA56570", VA = "0xA56570")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60002E6")]
	[Address(RVA = "0xA56574", Offset = "0xA56574", VA = "0xA56574")]
	private void Start()
	{
	}

	[Token(Token = "0x60002E7")]
	[Address(RVA = "0xA56620", Offset = "0xA56620", VA = "0xA56620")]
	private void Update()
	{
	}

	[Token(Token = "0x60002E8")]
	[Address(RVA = "0xA56AA8", Offset = "0xA56AA8", VA = "0xA56AA8")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60002E9")]
	[Address(RVA = "0xA56B98", Offset = "0xA56B98", VA = "0xA56B98")]
	public MoveOnPathCleaning()
	{
	}
}
[Token(Token = "0x20000BD")]
public class MoveOnPathWildAnimal : MonoBehaviour
{
	[Token(Token = "0x20000BE")]
	[CompilerGenerated]
	private sealed class <WaitForAgainWalk>d__12 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000465")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000466")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000467")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MoveOnPathWildAnimal <>4__this;

		[Token(Token = "0x1700001C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60002F3")]
			[Address(RVA = "0xA574B8", Offset = "0xA574B8", VA = "0xA574B8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700001D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60002F5")]
			[Address(RVA = "0xA57500", Offset = "0xA57500", VA = "0xA57500", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60002F0")]
		[Address(RVA = "0xA573B0", Offset = "0xA573B0", VA = "0xA573B0")]
		[DebuggerHidden]
		public <WaitForAgainWalk>d__12(int <>1__state)
		{
		}

		[Token(Token = "0x60002F1")]
		[Address(RVA = "0xA573EC", Offset = "0xA573EC", VA = "0xA573EC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60002F2")]
		[Address(RVA = "0xA573F0", Offset = "0xA573F0", VA = "0xA573F0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60002F4")]
		[Address(RVA = "0xA574C0", Offset = "0xA574C0", VA = "0xA574C0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400045D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public EditorPathScript PathToFollow;

	[Token(Token = "0x400045E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int CurrentWayPointID;

	[Token(Token = "0x400045F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float reachDistance;

	[Token(Token = "0x4000460")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float rotationSpeed;

	[Token(Token = "0x4000461")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float speed;

	[Token(Token = "0x4000462")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float defaultSpeed;

	[Token(Token = "0x4000463")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Animation anim;

	[Token(Token = "0x4000464")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool isAnimalAway;

	[Token(Token = "0x60002EA")]
	[Address(RVA = "0xA56BAC", Offset = "0xA56BAC", VA = "0xA56BAC")]
	private void Start()
	{
	}

	[Token(Token = "0x60002EB")]
	[Address(RVA = "0xA56C88", Offset = "0xA56C88", VA = "0xA56C88")]
	private void Update()
	{
	}

	[Token(Token = "0x60002EC")]
	[Address(RVA = "0xA57108", Offset = "0xA57108", VA = "0xA57108")]
	private void WildAnimalRunAway()
	{
	}

	[Token(Token = "0x60002ED")]
	[Address(RVA = "0xA57238", Offset = "0xA57238", VA = "0xA57238")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60002EE")]
	[Address(RVA = "0xA5733C", Offset = "0xA5733C", VA = "0xA5733C")]
	[IteratorStateMachine(typeof(<WaitForAgainWalk>d__12))]
	private IEnumerator WaitForAgainWalk()
	{
		return null;
	}

	[Token(Token = "0x60002EF")]
	[Address(RVA = "0xA573D8", Offset = "0xA573D8", VA = "0xA573D8")]
	public MoveOnPathWildAnimal()
	{
	}
}
[Token(Token = "0x20000BF")]
public class PesticideBoccollider : MonoBehaviour
{
	[Token(Token = "0x4000468")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject BoxTop;

	[Token(Token = "0x60002F6")]
	[Address(RVA = "0xA57508", Offset = "0xA57508", VA = "0xA57508")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60002F7")]
	[Address(RVA = "0xA57528", Offset = "0xA57528", VA = "0xA57528")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60002F8")]
	[Address(RVA = "0xA57688", Offset = "0xA57688", VA = "0xA57688")]
	public PesticideBoccollider()
	{
	}
}
[Token(Token = "0x20000C0")]
public class PipeAndValveJoint : MonoBehaviour
{
	[Token(Token = "0x4000469")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static PipeAndValveJoint instance;

	[Token(Token = "0x400046A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static bool isPipeJoint;

	[Token(Token = "0x400046B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
	public static bool isValveOpen;

	[Token(Token = "0x400046C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject WaterFlow;

	[Token(Token = "0x60002F9")]
	[Address(RVA = "0xA57690", Offset = "0xA57690", VA = "0xA57690")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60002FA")]
	[Address(RVA = "0xA5770C", Offset = "0xA5770C", VA = "0xA5770C")]
	public void CheckPipeValveJointFinish()
	{
	}

	[Token(Token = "0x60002FB")]
	[Address(RVA = "0xA577D8", Offset = "0xA577D8", VA = "0xA577D8")]
	public PipeAndValveJoint()
	{
	}
}
[Token(Token = "0x20000C1")]
public class PipeAndValveRepairing : MonoBehaviour
{
	[Token(Token = "0x400046D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static PipeAndValveRepairing instance;

	[Token(Token = "0x400046E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int TotalScrew;

	[Token(Token = "0x400046F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static bool isScrewFit;

	[Token(Token = "0x4000470")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
	public static bool isValveOpen;

	[Token(Token = "0x60002FC")]
	[Address(RVA = "0xA577E0", Offset = "0xA577E0", VA = "0xA577E0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60002FD")]
	[Address(RVA = "0xA57908", Offset = "0xA57908", VA = "0xA57908")]
	public void CheckScrewAndValveFinish()
	{
	}

	[Token(Token = "0x60002FE")]
	[Address(RVA = "0xA57A68", Offset = "0xA57A68", VA = "0xA57A68")]
	public PipeAndValveRepairing()
	{
	}
}
[Token(Token = "0x20000C2")]
public class PipeJointPoint : MonoBehaviour
{
	[Token(Token = "0x4000471")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject NextJointPipe;

	[Token(Token = "0x4000472")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int TotalFitCount;

	[Token(Token = "0x4000473")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int TotalPipeFitNeed;

	[Token(Token = "0x4000474")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject GrabValve1;

	[Token(Token = "0x4000475")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject Grabvalve2;

	[Token(Token = "0x60002FF")]
	[Address(RVA = "0xA57A70", Offset = "0xA57A70", VA = "0xA57A70")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000300")]
	[Address(RVA = "0xA57B20", Offset = "0xA57B20", VA = "0xA57B20")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000301")]
	[Address(RVA = "0xA57C6C", Offset = "0xA57C6C", VA = "0xA57C6C")]
	private void CheckPipeFitComplete()
	{
	}

	[Token(Token = "0x6000302")]
	[Address(RVA = "0xA57DC0", Offset = "0xA57DC0", VA = "0xA57DC0")]
	public PipeJointPoint()
	{
	}
}
[Token(Token = "0x20000C3")]
public class PipeRepairPoint : MonoBehaviour
{
	[Token(Token = "0x4000476")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject BeforeRepair;

	[Token(Token = "0x4000477")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject AfterRepair;

	[Token(Token = "0x4000478")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject FixPipe;

	[Token(Token = "0x6000303")]
	[Address(RVA = "0xA57DC8", Offset = "0xA57DC8", VA = "0xA57DC8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000304")]
	[Address(RVA = "0xA57E00", Offset = "0xA57E00", VA = "0xA57E00")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000305")]
	[Address(RVA = "0xA57F24", Offset = "0xA57F24", VA = "0xA57F24")]
	public PipeRepairPoint()
	{
	}
}
[Token(Token = "0x20000C4")]
public class PipeScrewFit : MonoBehaviour
{
	[Token(Token = "0x4000479")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int ScrewFitCount;

	[Token(Token = "0x400047A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float ScrewPos;

	[Token(Token = "0x6000306")]
	[Address(RVA = "0xA57F2C", Offset = "0xA57F2C", VA = "0xA57F2C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000307")]
	[Address(RVA = "0xA57F74", Offset = "0xA57F74", VA = "0xA57F74")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000308")]
	[Address(RVA = "0xA5821C", Offset = "0xA5821C", VA = "0xA5821C")]
	private void CheckForScrewFixFinish()
	{
	}

	[Token(Token = "0x6000309")]
	[Address(RVA = "0xA583FC", Offset = "0xA583FC", VA = "0xA583FC")]
	public PipeScrewFit()
	{
	}
}
[Token(Token = "0x20000C5")]
public class PipeValve : MonoBehaviour
{
	[Token(Token = "0x400047B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool isValveOpen;

	[Token(Token = "0x400047C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float OpenAngle;

	[Token(Token = "0x600030A")]
	[Address(RVA = "0xA58410", Offset = "0xA58410", VA = "0xA58410")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600030B")]
	[Address(RVA = "0xA58418", Offset = "0xA58418", VA = "0xA58418")]
	public void ValveRotate(float val)
	{
	}

	[Token(Token = "0x600030C")]
	[Address(RVA = "0xA584E0", Offset = "0xA584E0", VA = "0xA584E0")]
	public void ValveOpen()
	{
	}

	[Token(Token = "0x600030D")]
	[Address(RVA = "0xA586A8", Offset = "0xA586A8", VA = "0xA586A8")]
	public PipeValve()
	{
	}
}
[Token(Token = "0x20000C6")]
public class PipeValveOpen : MonoBehaviour
{
	[Token(Token = "0x400047D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool isValveOpen;

	[Token(Token = "0x400047E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float OpenAngle;

	[Token(Token = "0x400047F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int TotalValveNeed;

	[Token(Token = "0x4000480")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int TotalPipeCount;

	[Token(Token = "0x600030E")]
	[Address(RVA = "0xA586B0", Offset = "0xA586B0", VA = "0xA586B0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600030F")]
	[Address(RVA = "0xA58730", Offset = "0xA58730", VA = "0xA58730")]
	public void ValveRotate(float val)
	{
	}

	[Token(Token = "0x6000310")]
	[Address(RVA = "0xA587FC", Offset = "0xA587FC", VA = "0xA587FC")]
	private void CheckValveOpen()
	{
	}

	[Token(Token = "0x6000311")]
	[Address(RVA = "0xA588F4", Offset = "0xA588F4", VA = "0xA588F4")]
	public PipeValveOpen()
	{
	}
}
[Token(Token = "0x20000C7")]
public class PlantApplePot : MonoBehaviour
{
	[Token(Token = "0x4000481")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PlantTag PotTag;

	[Token(Token = "0x4000482")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private int TotalPot;

	[Token(Token = "0x4000483")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int AppleCount;

	[Token(Token = "0x4000484")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject PotPlant;

	[Token(Token = "0x6000312")]
	[Address(RVA = "0xA588FC", Offset = "0xA588FC", VA = "0xA588FC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000313")]
	[Address(RVA = "0xA589D4", Offset = "0xA589D4", VA = "0xA589D4")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000314")]
	[Address(RVA = "0xA58BF8", Offset = "0xA58BF8", VA = "0xA58BF8")]
	private void CheckForPlantInPot()
	{
	}

	[Token(Token = "0x6000315")]
	[Address(RVA = "0xA58DAC", Offset = "0xA58DAC", VA = "0xA58DAC")]
	public PlantApplePot()
	{
	}
}
[Token(Token = "0x20000C8")]
public class PlantOrangePot : MonoBehaviour
{
	[Token(Token = "0x4000485")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PlantTag PotTag;

	[Token(Token = "0x4000486")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private int TotalPot;

	[Token(Token = "0x4000487")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int OrangeCount;

	[Token(Token = "0x4000488")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject PotPlant;

	[Token(Token = "0x6000316")]
	[Address(RVA = "0xA58DB4", Offset = "0xA58DB4", VA = "0xA58DB4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000317")]
	[Address(RVA = "0xA58E8C", Offset = "0xA58E8C", VA = "0xA58E8C")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000318")]
	[Address(RVA = "0xA590B0", Offset = "0xA590B0", VA = "0xA590B0")]
	private void CheckForPlantInPot()
	{
	}

	[Token(Token = "0x6000319")]
	[Address(RVA = "0xA591AC", Offset = "0xA591AC", VA = "0xA591AC")]
	public PlantOrangePot()
	{
	}
}
[Token(Token = "0x20000C9")]
public class PlantPot : MonoBehaviour
{
	[Token(Token = "0x4000489")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static PlantPot instance;

	[Token(Token = "0x400048A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int TotalPot;

	[Token(Token = "0x400048B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static int TotalPotCount;

	[Token(Token = "0x600031A")]
	[Address(RVA = "0xA591B4", Offset = "0xA591B4", VA = "0xA591B4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600031B")]
	[Address(RVA = "0xA58CF4", Offset = "0xA58CF4", VA = "0xA58CF4")]
	public void CheckPlantPotFinish()
	{
	}

	[Token(Token = "0x600031C")]
	[Address(RVA = "0xA59274", Offset = "0xA59274", VA = "0xA59274")]
	public PlantPot()
	{
	}
}
[Token(Token = "0x20000CA")]
public class PlantPumpkinPot : MonoBehaviour
{
	[Token(Token = "0x400048C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PlantTag PotTag;

	[Token(Token = "0x400048D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private int TotalPot;

	[Token(Token = "0x400048E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int PumpkinCount;

	[Token(Token = "0x400048F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject PotPlant;

	[Token(Token = "0x600031D")]
	[Address(RVA = "0xA5927C", Offset = "0xA5927C", VA = "0xA5927C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600031E")]
	[Address(RVA = "0xA59354", Offset = "0xA59354", VA = "0xA59354")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600031F")]
	[Address(RVA = "0xA59578", Offset = "0xA59578", VA = "0xA59578")]
	private void CheckForPlantInPot()
	{
	}

	[Token(Token = "0x6000320")]
	[Address(RVA = "0xA59674", Offset = "0xA59674", VA = "0xA59674")]
	public PlantPumpkinPot()
	{
	}
}
[Token(Token = "0x20000CB")]
public class PlantTometoPot : MonoBehaviour
{
	[Token(Token = "0x4000490")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PlantTag PotTag;

	[Token(Token = "0x4000491")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private int TotalPot;

	[Token(Token = "0x4000492")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int TometoCount;

	[Token(Token = "0x4000493")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject PotPlant;

	[Token(Token = "0x6000321")]
	[Address(RVA = "0xA5967C", Offset = "0xA5967C", VA = "0xA5967C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000322")]
	[Address(RVA = "0xA59754", Offset = "0xA59754", VA = "0xA59754")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000323")]
	[Address(RVA = "0xA59978", Offset = "0xA59978", VA = "0xA59978")]
	private void CheckForPlantInPot()
	{
	}

	[Token(Token = "0x6000324")]
	[Address(RVA = "0xA59A74", Offset = "0xA59A74", VA = "0xA59A74")]
	public PlantTometoPot()
	{
	}
}
[Token(Token = "0x20000CC")]
public enum PlantTag
{
	[Token(Token = "0x4000495")]
	Tometo,
	[Token(Token = "0x4000496")]
	Pumpkin,
	[Token(Token = "0x4000497")]
	Apple,
	[Token(Token = "0x4000498")]
	Orange
}
[Token(Token = "0x20000CD")]
public class PlantType : MonoBehaviour
{
	[Token(Token = "0x4000499")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PlantTag plantTag;

	[Token(Token = "0x6000325")]
	[Address(RVA = "0xA59A7C", Offset = "0xA59A7C", VA = "0xA59A7C")]
	public PlantType()
	{
	}
}
[Token(Token = "0x20000CE")]
public class PluckBasket : MonoBehaviour
{
	[Token(Token = "0x400049A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PlantTag basketTag;

	[Token(Token = "0x400049B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject[] Products;

	[Token(Token = "0x400049C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int TotalProduct;

	[Token(Token = "0x400049D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private int PluckProductCount;

	[Token(Token = "0x400049E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool isTometo;

	[Token(Token = "0x400049F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
	public static bool isPumpkin;

	[Token(Token = "0x40004A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
	public static bool isApple;

	[Token(Token = "0x40004A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3")]
	public static bool isOrange;

	[Token(Token = "0x6000326")]
	[Address(RVA = "0xA59A84", Offset = "0xA59A84", VA = "0xA59A84")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000327")]
	[Address(RVA = "0xA59AE8", Offset = "0xA59AE8", VA = "0xA59AE8")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000328")]
	[Address(RVA = "0xA59D4C", Offset = "0xA59D4C", VA = "0xA59D4C")]
	public void CheckPluckFinish()
	{
	}

	[Token(Token = "0x6000329")]
	[Address(RVA = "0xA59E94", Offset = "0xA59E94", VA = "0xA59E94")]
	public PluckBasket()
	{
	}
}
[Token(Token = "0x20000CF")]
public class PluckingProduct : MonoBehaviour
{
	[Token(Token = "0x40004A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Grabbable grab;

	[Token(Token = "0x40004A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool isPulck;

	[Token(Token = "0x600032A")]
	[Address(RVA = "0xA59E9C", Offset = "0xA59E9C", VA = "0xA59E9C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600032B")]
	[Address(RVA = "0xA59F34", Offset = "0xA59F34", VA = "0xA59F34")]
	private void Update()
	{
	}

	[Token(Token = "0x600032C")]
	[Address(RVA = "0xA59FFC", Offset = "0xA59FFC", VA = "0xA59FFC")]
	public PluckingProduct()
	{
	}
}
[Token(Token = "0x20000D0")]
[DisallowMultipleComponent]
public class Outline : MonoBehaviour
{
	[Token(Token = "0x20000D1")]
	public enum Mode
	{
		[Token(Token = "0x40004B0")]
		OutlineAll,
		[Token(Token = "0x40004B1")]
		OutlineVisible,
		[Token(Token = "0x40004B2")]
		OutlineHidden,
		[Token(Token = "0x40004B3")]
		OutlineAndSilhouette,
		[Token(Token = "0x40004B4")]
		SilhouetteOnly
	}

	[Serializable]
	[Token(Token = "0x20000D2")]
	private class ListVector3
	{
		[Token(Token = "0x40004B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<Vector3> data;

		[Token(Token = "0x6000340")]
		[Address(RVA = "0xA5B958", Offset = "0xA5B958", VA = "0xA5B958")]
		public ListVector3()
		{
		}
	}

	[Token(Token = "0x40004A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static HashSet<Mesh> registeredMeshes;

	[Token(Token = "0x40004A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Mode outlineMode;

	[Token(Token = "0x40004A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private Color outlineColor;

	[Token(Token = "0x40004A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	[Range(0f, 10f)]
	private float outlineWidth;

	[Token(Token = "0x40004A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Header("Optional")]
	[SerializeField]
	[Tooltip("Precompute enabled: Per-vertex calculations are performed in the editor and serialized with the object. Precompute disabled: Per-vertex calculations are performed at runtime in Awake(). This may cause a pause for large meshes.")]
	private bool precomputeOutline;

	[Token(Token = "0x40004A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	[HideInInspector]
	private List<Mesh> bakeKeys;

	[Token(Token = "0x40004AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	[HideInInspector]
	private List<ListVector3> bakeValues;

	[Token(Token = "0x40004AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Renderer[] renderers;

	[Token(Token = "0x40004AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Material outlineMaskMaterial;

	[Token(Token = "0x40004AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Material outlineFillMaterial;

	[Token(Token = "0x40004AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool needsUpdate;

	[Token(Token = "0x1700001E")]
	public Mode OutlineMode
	{
		[Token(Token = "0x600032D")]
		[Address(RVA = "0xA5A004", Offset = "0xA5A004", VA = "0xA5A004")]
		get
		{
			return default(Mode);
		}
		[Token(Token = "0x600032E")]
		[Address(RVA = "0xA5A00C", Offset = "0xA5A00C", VA = "0xA5A00C")]
		set
		{
		}
	}

	[Token(Token = "0x1700001F")]
	public Color OutlineColor
	{
		[Token(Token = "0x600032F")]
		[Address(RVA = "0xA5A01C", Offset = "0xA5A01C", VA = "0xA5A01C")]
		get
		{
			return default(Color);
		}
		[Token(Token = "0x6000330")]
		[Address(RVA = "0xA5A028", Offset = "0xA5A028", VA = "0xA5A028")]
		set
		{
		}
	}

	[Token(Token = "0x17000020")]
	public float OutlineWidth
	{
		[Token(Token = "0x6000331")]
		[Address(RVA = "0xA5A03C", Offset = "0xA5A03C", VA = "0xA5A03C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000332")]
		[Address(RVA = "0xA5A044", Offset = "0xA5A044", VA = "0xA5A044")]
		set
		{
		}
	}

	[Token(Token = "0x6000333")]
	[Address(RVA = "0xA5A054", Offset = "0xA5A054", VA = "0xA5A054")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000334")]
	[Address(RVA = "0xA5A564", Offset = "0xA5A564", VA = "0xA5A564")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000335")]
	[Address(RVA = "0xA5A718", Offset = "0xA5A718", VA = "0xA5A718")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x6000336")]
	[Address(RVA = "0xA5AAA8", Offset = "0xA5AAA8", VA = "0xA5AAA8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000337")]
	[Address(RVA = "0xA5AC68", Offset = "0xA5AC68", VA = "0xA5AC68")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000338")]
	[Address(RVA = "0xA5AD80", Offset = "0xA5AD80", VA = "0xA5AD80")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000339")]
	[Address(RVA = "0xA5A830", Offset = "0xA5A830", VA = "0xA5A830")]
	private void Bake()
	{
	}

	[Token(Token = "0x600033A")]
	[Address(RVA = "0xA5A1F4", Offset = "0xA5A1F4", VA = "0xA5A1F4")]
	private void LoadSmoothNormals()
	{
	}

	[Token(Token = "0x600033B")]
	[Address(RVA = "0xA5ADE8", Offset = "0xA5ADE8", VA = "0xA5ADE8")]
	private List<Vector3> SmoothNormals(Mesh mesh)
	{
		return null;
	}

	[Token(Token = "0x600033C")]
	[Address(RVA = "0xA5B960", Offset = "0xA5B960", VA = "0xA5B960")]
	private void CombineSubmeshes(Mesh mesh, Material[] materials)
	{
	}

	[Token(Token = "0x600033D")]
	[Address(RVA = "0xA5AABC", Offset = "0xA5AABC", VA = "0xA5AABC")]
	private void UpdateMaterialProperties()
	{
	}

	[Token(Token = "0x600033E")]
	[Address(RVA = "0xA5BA08", Offset = "0xA5BA08", VA = "0xA5BA08")]
	public Outline()
	{
	}
}
[Token(Token = "0x20000D4")]
public class RatMedicineBox : MonoBehaviour
{
	[Token(Token = "0x40004B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] BoxNearRat;

	[Token(Token = "0x40004BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool isMedicine;

	[Token(Token = "0x40004BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Transform Medicine;

	[Token(Token = "0x40004BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int TotalMedicineBoxes;

	[Token(Token = "0x40004BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int MedicineBoxCount;

	[Token(Token = "0x6000345")]
	[Address(RVA = "0xA5BCE0", Offset = "0xA5BCE0", VA = "0xA5BCE0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000346")]
	[Address(RVA = "0xA5BD88", Offset = "0xA5BD88", VA = "0xA5BD88")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000347")]
	[Address(RVA = "0xA5BF28", Offset = "0xA5BF28", VA = "0xA5BF28")]
	private void Update()
	{
	}

	[Token(Token = "0x6000348")]
	[Address(RVA = "0xA5BEA8", Offset = "0xA5BEA8", VA = "0xA5BEA8")]
	private void CheckForLevelFinish()
	{
	}

	[Token(Token = "0x6000349")]
	[Address(RVA = "0xA5C2C0", Offset = "0xA5C2C0", VA = "0xA5C2C0")]
	public RatMedicineBox()
	{
	}
}
[Token(Token = "0x20000D5")]
public class Water_Ani : MonoBehaviour
{
	[Token(Token = "0x40004BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float SpeedX;

	[Token(Token = "0x40004BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float SpeedY;

	[Token(Token = "0x40004C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float CurX;

	[Token(Token = "0x40004C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float CurY;

	[Token(Token = "0x600034A")]
	[Address(RVA = "0xA5C2C8", Offset = "0xA5C2C8", VA = "0xA5C2C8")]
	private void Start()
	{
	}

	[Token(Token = "0x600034B")]
	[Address(RVA = "0xA5C35C", Offset = "0xA5C35C", VA = "0xA5C35C")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x600034C")]
	[Address(RVA = "0xA5C41C", Offset = "0xA5C41C", VA = "0xA5C41C")]
	public Water_Ani()
	{
	}
}
[Token(Token = "0x20000D6")]
public class RearWheel : MonoBehaviour
{
	[Token(Token = "0x40004C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool isRear;

	[Token(Token = "0x40004C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
	public static bool isFront_;

	[Token(Token = "0x600034D")]
	[Address(RVA = "0xA5C424", Offset = "0xA5C424", VA = "0xA5C424")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600034E")]
	[Address(RVA = "0xA5C46C", Offset = "0xA5C46C", VA = "0xA5C46C")]
	private void OnTriggerStay(Collider other)
	{
	}

	[Token(Token = "0x600034F")]
	[Address(RVA = "0xA5C54C", Offset = "0xA5C54C", VA = "0xA5C54C")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6000350")]
	[Address(RVA = "0xA5C62C", Offset = "0xA5C62C", VA = "0xA5C62C")]
	public RearWheel()
	{
	}
}
[Token(Token = "0x20000D7")]
public class RotateAround : MonoBehaviour
{
	[Token(Token = "0x40004C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject target;

	[Token(Token = "0x40004C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Transform PlayerTrans;

	[Token(Token = "0x40004C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float distanceFromPlayer;

	[Token(Token = "0x40004C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private bool isTimetoMove;

	[Token(Token = "0x40004C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float TimeTostopWalk;

	[Token(Token = "0x40004C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float timer;

	[Token(Token = "0x40004CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float movementSpeed;

	[Token(Token = "0x40004CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Animation ani_Chicken;

	[Token(Token = "0x6000351")]
	[Address(RVA = "0xA5C634", Offset = "0xA5C634", VA = "0xA5C634")]
	private void Start()
	{
	}

	[Token(Token = "0x6000352")]
	[Address(RVA = "0xA5C69C", Offset = "0xA5C69C", VA = "0xA5C69C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000353")]
	[Address(RVA = "0xA5C814", Offset = "0xA5C814", VA = "0xA5C814")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000354")]
	[Address(RVA = "0xA5C938", Offset = "0xA5C938", VA = "0xA5C938")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000355")]
	[Address(RVA = "0xA5CA84", Offset = "0xA5CA84", VA = "0xA5CA84")]
	public RotateAround()
	{
	}
}
[Token(Token = "0x20000D8")]
public class SceneDataManager : MonoBehaviour
{
	[Token(Token = "0x40004CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static SceneDataManager instance;

	[Token(Token = "0x40004CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject Gameplay;

	[Token(Token = "0x40004CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject Mainmenu;

	[Token(Token = "0x6000356")]
	[Address(RVA = "0xA5CAA4", Offset = "0xA5CAA4", VA = "0xA5CAA4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000357")]
	[Address(RVA = "0xA5CB1C", Offset = "0xA5CB1C", VA = "0xA5CB1C")]
	public void ActivatePanel(string go_name)
	{
	}

	[Token(Token = "0x6000358")]
	[Address(RVA = "0xA5CBA0", Offset = "0xA5CBA0", VA = "0xA5CBA0")]
	public void ChangeSceneData(string dataname)
	{
	}

	[Token(Token = "0x6000359")]
	[Address(RVA = "0xA5CBA4", Offset = "0xA5CBA4", VA = "0xA5CBA4")]
	public SceneDataManager()
	{
	}
}
[Token(Token = "0x20000D9")]
public class ScrewScript : MonoBehaviour
{
	[Token(Token = "0x40004CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int TotalScrewFit;

	[Token(Token = "0x40004D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int ScrewFitCount;

	[Token(Token = "0x40004D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static bool isScrewFix;

	[Token(Token = "0x40004D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float ScrewPos;

	[Token(Token = "0x600035A")]
	[Address(RVA = "0xA5CBAC", Offset = "0xA5CBAC", VA = "0xA5CBAC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600035B")]
	[Address(RVA = "0xA5CC54", Offset = "0xA5CC54", VA = "0xA5CC54")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600035C")]
	[Address(RVA = "0xA5CE84", Offset = "0xA5CE84", VA = "0xA5CE84")]
	private void CheckForScrewFixFinish()
	{
	}

	[Token(Token = "0x600035D")]
	[Address(RVA = "0xA5CF98", Offset = "0xA5CF98", VA = "0xA5CF98")]
	public ScrewScript()
	{
	}
}
[Token(Token = "0x20000DA")]
public class AAFix : MonoBehaviour
{
	[Token(Token = "0x20000DB")]
	[CompilerGenerated]
	private sealed class <Fix>d__3 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40004D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40004D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40004D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AAFix <>4__this;

		[Token(Token = "0x17000021")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000365")]
			[Address(RVA = "0xA5D20C", Offset = "0xA5D20C", VA = "0xA5D20C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000022")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000367")]
			[Address(RVA = "0xA5D254", Offset = "0xA5D254", VA = "0xA5D254", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000362")]
		[Address(RVA = "0xA5D0E4", Offset = "0xA5D0E4", VA = "0xA5D0E4")]
		[DebuggerHidden]
		public <Fix>d__3(int <>1__state)
		{
		}

		[Token(Token = "0x6000363")]
		[Address(RVA = "0xA5D11C", Offset = "0xA5D11C", VA = "0xA5D11C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000364")]
		[Address(RVA = "0xA5D120", Offset = "0xA5D120", VA = "0xA5D120", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000366")]
		[Address(RVA = "0xA5D214", Offset = "0xA5D214", VA = "0xA5D214", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40004D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float ResoultionSet;

	[Token(Token = "0x600035E")]
	[Address(RVA = "0xA5CFAC", Offset = "0xA5CFAC", VA = "0xA5CFAC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600035F")]
	[Address(RVA = "0xA5D018", Offset = "0xA5D018", VA = "0xA5D018")]
	private void Start()
	{
	}

	[Token(Token = "0x6000360")]
	[Address(RVA = "0xA5D070", Offset = "0xA5D070", VA = "0xA5D070")]
	[IteratorStateMachine(typeof(<Fix>d__3))]
	private IEnumerator Fix()
	{
		return null;
	}

	[Token(Token = "0x6000361")]
	[Address(RVA = "0xA5D10C", Offset = "0xA5D10C", VA = "0xA5D10C")]
	public AAFix()
	{
	}
}
[Token(Token = "0x20000DC")]
public class ButtonEffect : MonoBehaviour, IPointerEnterHandler, IEventSystemHandler, IPointerExitHandler
{
	[Token(Token = "0x40004D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Image image;

	[Token(Token = "0x40004D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private TextMeshProUGUI txt;

	[Token(Token = "0x40004D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool isSpriteChnage;

	[Token(Token = "0x40004DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Sprite sprt_hover;

	[Token(Token = "0x40004DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Sprite sprt_nrml;

	[Token(Token = "0x6000368")]
	[Address(RVA = "0xA5D25C", Offset = "0xA5D25C", VA = "0xA5D25C", Slot = "4")]
	public void OnPointerEnter(PointerEventData eventData)
	{
	}

	[Token(Token = "0x6000369")]
	[Address(RVA = "0xA5D384", Offset = "0xA5D384", VA = "0xA5D384", Slot = "5")]
	public void OnPointerExit(PointerEventData eventData)
	{
	}

	[Token(Token = "0x600036A")]
	[Address(RVA = "0xA5D4B0", Offset = "0xA5D4B0", VA = "0xA5D4B0")]
	public ButtonEffect()
	{
	}
}
[Token(Token = "0x20000DD")]
public class CoinManager : MonoBehaviour
{
	[Token(Token = "0x40004DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static CoinManager instance;

	[Token(Token = "0x600036B")]
	[Address(RVA = "0xA5D4B8", Offset = "0xA5D4B8", VA = "0xA5D4B8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600036C")]
	[Address(RVA = "0xA5D510", Offset = "0xA5D510", VA = "0xA5D510")]
	public int CalculateTimeUpCoin(int LevelEarnCoin)
	{
		return default(int);
	}

	[Token(Token = "0x600036D")]
	[Address(RVA = "0xA5D540", Offset = "0xA5D540", VA = "0xA5D540")]
	public int Coin_LevelSkip(int levelearncoin)
	{
		return default(int);
	}

	[Token(Token = "0x600036E")]
	[Address(RVA = "0xA5D564", Offset = "0xA5D564", VA = "0xA5D564")]
	public void Coin_CategoryUnlock(int totalCategorycoin)
	{
	}

	[Token(Token = "0x600036F")]
	[Address(RVA = "0xA5D568", Offset = "0xA5D568", VA = "0xA5D568")]
	public CoinManager()
	{
	}
}
[Token(Token = "0x20000DE")]
public class CountUseInjection : MonoBehaviour
{
	[Token(Token = "0x40004DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int injection_dustbin;

	[Token(Token = "0x6000370")]
	[Address(RVA = "0xA5D570", Offset = "0xA5D570", VA = "0xA5D570")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000371")]
	[Address(RVA = "0xA5D5B8", Offset = "0xA5D5B8", VA = "0xA5D5B8")]
	public void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000372")]
	[Address(RVA = "0xA5D800", Offset = "0xA5D800", VA = "0xA5D800")]
	public CountUseInjection()
	{
	}
}
[Token(Token = "0x20000DF")]
public class DisableMe : MonoBehaviour
{
	[Token(Token = "0x20000E0")]
	[CompilerGenerated]
	private sealed class <waitandDisable>d__2 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40004DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40004E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40004E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DisableMe <>4__this;

		[Token(Token = "0x17000023")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000379")]
			[Address(RVA = "0xA5D9C4", Offset = "0xA5D9C4", VA = "0xA5D9C4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000024")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600037B")]
			[Address(RVA = "0xA5DA0C", Offset = "0xA5DA0C", VA = "0xA5DA0C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000376")]
		[Address(RVA = "0xA5D89C", Offset = "0xA5D89C", VA = "0xA5D89C")]
		[DebuggerHidden]
		public <waitandDisable>d__2(int <>1__state)
		{
		}

		[Token(Token = "0x6000377")]
		[Address(RVA = "0xA5D8D4", Offset = "0xA5D8D4", VA = "0xA5D8D4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000378")]
		[Address(RVA = "0xA5D8D8", Offset = "0xA5D8D8", VA = "0xA5D8D8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600037A")]
		[Address(RVA = "0xA5D9CC", Offset = "0xA5D9CC", VA = "0xA5D9CC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40004DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float duration;

	[Token(Token = "0x6000373")]
	[Address(RVA = "0xA5D808", Offset = "0xA5D808", VA = "0xA5D808")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000374")]
	[Address(RVA = "0xA5D828", Offset = "0xA5D828", VA = "0xA5D828")]
	[IteratorStateMachine(typeof(<waitandDisable>d__2))]
	private IEnumerator waitandDisable()
	{
		return null;
	}

	[Token(Token = "0x6000375")]
	[Address(RVA = "0xA5D8C4", Offset = "0xA5D8C4", VA = "0xA5D8C4")]
	public DisableMe()
	{
	}
}
[Token(Token = "0x20000E1")]
public class EggBursting : MonoBehaviour
{
	[Token(Token = "0x40004E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int eggburstcounter;

	[Token(Token = "0x40004E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int eggburstcount;

	[Token(Token = "0x40004E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject originalEgg;

	[Token(Token = "0x40004E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject burstEgg;

	[Token(Token = "0x600037C")]
	[Address(RVA = "0xA5DA14", Offset = "0xA5DA14", VA = "0xA5DA14")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600037D")]
	[Address(RVA = "0xA5DA8C", Offset = "0xA5DA8C", VA = "0xA5DA8C")]
	public void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x600037E")]
	[Address(RVA = "0xA5DDA8", Offset = "0xA5DDA8", VA = "0xA5DDA8")]
	public EggBursting()
	{
	}
}
[Token(Token = "0x20000E2")]
public class EggCounterMgr : MonoBehaviour
{
	[Token(Token = "0x40004E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int neededEggs;

	[Token(Token = "0x40004E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private int availableEgg;

	[Token(Token = "0x40004E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static EggCounterMgr instance;

	[Token(Token = "0x600037F")]
	[Address(RVA = "0xA5DDB0", Offset = "0xA5DDB0", VA = "0xA5DDB0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000380")]
	[Address(RVA = "0xA5DCC8", Offset = "0xA5DCC8", VA = "0xA5DCC8")]
	public void checkAvailableEggs()
	{
	}

	[Token(Token = "0x6000381")]
	[Address(RVA = "0xA5DE6C", Offset = "0xA5DE6C", VA = "0xA5DE6C")]
	public EggCounterMgr()
	{
	}
}
[Token(Token = "0x20000E3")]
public class EnablePlayer_setPos : MonoBehaviour
{
	[Token(Token = "0x20000E4")]
	[CompilerGenerated]
	private sealed class <waitandEnableScript>d__2 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40004EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40004EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40004EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnablePlayer_setPos <>4__this;

		[Token(Token = "0x17000025")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000388")]
			[Address(RVA = "0xA5E050", Offset = "0xA5E050", VA = "0xA5E050", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000026")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600038A")]
			[Address(RVA = "0xA5E098", Offset = "0xA5E098", VA = "0xA5E098", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000385")]
		[Address(RVA = "0xA5DF24", Offset = "0xA5DF24", VA = "0xA5DF24")]
		[DebuggerHidden]
		public <waitandEnableScript>d__2(int <>1__state)
		{
		}

		[Token(Token = "0x6000386")]
		[Address(RVA = "0xA5DF54", Offset = "0xA5DF54", VA = "0xA5DF54", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000387")]
		[Address(RVA = "0xA5DF58", Offset = "0xA5DF58", VA = "0xA5DF58", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000389")]
		[Address(RVA = "0xA5E058", Offset = "0xA5E058", VA = "0xA5E058", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40004E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject playerObj;

	[Token(Token = "0x6000382")]
	[Address(RVA = "0xA5DE74", Offset = "0xA5DE74", VA = "0xA5DE74")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000383")]
	[Address(RVA = "0xA5DEB0", Offset = "0xA5DEB0", VA = "0xA5DEB0")]
	[IteratorStateMachine(typeof(<waitandEnableScript>d__2))]
	private IEnumerator waitandEnableScript()
	{
		return null;
	}

	[Token(Token = "0x6000384")]
	[Address(RVA = "0xA5DF4C", Offset = "0xA5DF4C", VA = "0xA5DF4C")]
	public EnablePlayer_setPos()
	{
	}
}
[Token(Token = "0x20000E5")]
public class EnableWaterspray_marker : MonoBehaviour
{
	[Token(Token = "0x40004ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject objPesticideSpray;

	[Token(Token = "0x40004EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject canvspray1;

	[Token(Token = "0x40004EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject objMarker;

	[Token(Token = "0x40004F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject canvspray2;

	[Token(Token = "0x40004F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static EnableWaterspray_marker instance;

	[Token(Token = "0x600038B")]
	[Address(RVA = "0xA5E0A0", Offset = "0xA5E0A0", VA = "0xA5E0A0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600038C")]
	[Address(RVA = "0xA5E14C", Offset = "0xA5E14C", VA = "0xA5E14C")]
	public void EnableMarkerSpray()
	{
	}

	[Token(Token = "0x600038D")]
	[Address(RVA = "0xA5E184", Offset = "0xA5E184", VA = "0xA5E184")]
	public EnableWaterspray_marker()
	{
	}
}
[Token(Token = "0x20000E6")]
public class EntityCheck_picostore : MonoBehaviour
{
	[Token(Token = "0x600038E")]
	[Address(RVA = "0xA5E18C", Offset = "0xA5E18C", VA = "0xA5E18C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600038F")]
	[Address(RVA = "0xA5E28C", Offset = "0xA5E28C", VA = "0xA5E28C")]
	public EntityCheck_picostore()
	{
	}
}
[Token(Token = "0x20000E8")]
public class GearControll : MonoBehaviour
{
	[Token(Token = "0x40004F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Initial X Position")]
	public float InitialXPosition;

	[Token(Token = "0x40004F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float MinimumXPosition;

	[Token(Token = "0x40004F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float MaximumXPosition;

	[Token(Token = "0x40004F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Header("Initial Z Position")]
	public float InitialZPosition;

	[Token(Token = "0x40004F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float MinimumZPosition;

	[Token(Token = "0x40004F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float MaximumZPosition;

	[Token(Token = "0x40004FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Grabbable grab;

	[Token(Token = "0x40004FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public JointHelper jointhelper;

	[Token(Token = "0x40004FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public int GearState;

	[Token(Token = "0x40004FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public AudioSource Gearshift_sound;

	[Token(Token = "0x40004FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool isSoundPlay;

	[Token(Token = "0x40004FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
	private bool isGearN;

	[Token(Token = "0x4000500")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
	private bool isGear1;

	[Token(Token = "0x4000501")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x53")]
	private bool isGear2;

	[Token(Token = "0x4000502")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private bool isGear3;

	[Token(Token = "0x4000503")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
	private bool isGearR;

	[Token(Token = "0x4000504")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float BoundryVal;

	[Token(Token = "0x6000393")]
	[Address(RVA = "0xA5E3F4", Offset = "0xA5E3F4", VA = "0xA5E3F4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000394")]
	[Address(RVA = "0xA5E44C", Offset = "0xA5E44C", VA = "0xA5E44C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000395")]
	[Address(RVA = "0xA5E4AC", Offset = "0xA5E4AC", VA = "0xA5E4AC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000396")]
	[Address(RVA = "0xA5EA48", Offset = "0xA5EA48", VA = "0xA5EA48")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000397")]
	[Address(RVA = "0xA5E790", Offset = "0xA5E790", VA = "0xA5E790")]
	private void GearType(float x, float z)
	{
	}

	[Token(Token = "0x6000398")]
	[Address(RVA = "0xA5EAA8", Offset = "0xA5EAA8", VA = "0xA5EAA8", Slot = "4")]
	public virtual void SetPositionZ(float z_)
	{
	}

	[Token(Token = "0x6000399")]
	[Address(RVA = "0xA5EB34", Offset = "0xA5EB34", VA = "0xA5EB34", Slot = "5")]
	public virtual void SetPositionX(float x_)
	{
	}

	[Token(Token = "0x600039A")]
	[Address(RVA = "0xA5EBC4", Offset = "0xA5EBC4", VA = "0xA5EBC4", Slot = "6")]
	public virtual void SetZeroPosition()
	{
	}

	[Token(Token = "0x600039B")]
	[Address(RVA = "0xA5EC44", Offset = "0xA5EC44", VA = "0xA5EC44", Slot = "7")]
	public virtual void SetXZPosition(float x, float z)
	{
	}

	[Token(Token = "0x600039C")]
	[Address(RVA = "0xA5ECA8", Offset = "0xA5ECA8", VA = "0xA5ECA8")]
	public GearControll()
	{
	}
}
[Token(Token = "0x20000E9")]
public class LivingAnimalSound : MonoBehaviour
{
	[Token(Token = "0x4000505")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ObjectSoundsList SoundType;

	[Token(Token = "0x4000506")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Transform PlayerTrans;

	[Token(Token = "0x4000507")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float distanceFromPlayer;

	[Token(Token = "0x4000508")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private bool isTimeToPlay;

	[Token(Token = "0x4000509")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float distanceforplaysound;

	[Token(Token = "0x600039D")]
	[Address(RVA = "0xA5ECCC", Offset = "0xA5ECCC", VA = "0xA5ECCC")]
	private void Start()
	{
	}

	[Token(Token = "0x600039E")]
	[Address(RVA = "0xA5ED34", Offset = "0xA5ED34", VA = "0xA5ED34")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x600039F")]
	[Address(RVA = "0xA5EE58", Offset = "0xA5EE58", VA = "0xA5EE58")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60003A0")]
	[Address(RVA = "0xA5EF30", Offset = "0xA5EF30", VA = "0xA5EF30")]
	public LivingAnimalSound()
	{
	}
}
[Token(Token = "0x20000EA")]
public class ObjectLimit : MonoBehaviour
{
	[Token(Token = "0x400050A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float minX;

	[Token(Token = "0x400050B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float maxX;

	[Token(Token = "0x400050C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float minY;

	[Token(Token = "0x400050D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float maxY;

	[Token(Token = "0x400050E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float minZ;

	[Token(Token = "0x400050F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float maxZ;

	[Token(Token = "0x4000510")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("Called if the lever changes position at all")]
	public FloatEvent onLeverChange;

	[Token(Token = "0x60003A1")]
	[Address(RVA = "0xA5EF40", Offset = "0xA5EF40", VA = "0xA5EF40")]
	private void Update()
	{
	}

	[Token(Token = "0x60003A2")]
	[Address(RVA = "0xA5F054", Offset = "0xA5F054", VA = "0xA5F054", Slot = "4")]
	public virtual void OnLeverChange(float percentage)
	{
	}

	[Token(Token = "0x60003A3")]
	[Address(RVA = "0xA5F0C0", Offset = "0xA5F0C0", VA = "0xA5F0C0")]
	public ObjectLimit()
	{
	}
}
[Token(Token = "0x20000EB")]
public class ObjectRotationLimit : MonoBehaviour
{
	[Token(Token = "0x4000511")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("Minimum X value in Local Euler Angles")]
	[Header("Rotation Limits")]
	public float MinimumXRotation;

	[Token(Token = "0x4000512")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Tooltip("Maximum X value in Local Euler Angles")]
	public float MaximumXRotation;

	[Token(Token = "0x4000513")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Header("Rotation Limits")]
	[Tooltip("Minimum Y value in Local Euler Angles")]
	public float MinimumYRotation;

	[Token(Token = "0x4000514")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Tooltip("Maximum Y value in Local Euler Angles")]
	public float MaximumYRotation;

	[Token(Token = "0x4000515")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Header("Rotation Limits")]
	[Tooltip("Minimum Z value in Local Euler Angles")]
	public float MinimumZRotation;

	[Token(Token = "0x4000516")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[Tooltip("Maximum Z value in Local Euler Angles")]
	public float MaximumZRotation;

	[Token(Token = "0x4000517")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Header("Initial Rotation")]
	public float InitialXRotation;

	[Token(Token = "0x4000518")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[Header("Initial Rotation")]
	public float InitialZRotation;

	[Token(Token = "0x4000519")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Header("Initial Rotation")]
	public float InitialYRotation;

	[Token(Token = "0x400051A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[Tooltip("If false, the lever's rigidbody will be kinematic when not being held. Disable this if you don't want your lever to interact with physics or if you need moving platform support.")]
	public bool AllowPhysicsForces;

	[Token(Token = "0x400051B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Grabbable grab;

	[Token(Token = "0x400051C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Rigidbody rb;

	[Token(Token = "0x60003A4")]
	[Address(RVA = "0xA5F0C8", Offset = "0xA5F0C8", VA = "0xA5F0C8")]
	private void Start()
	{
	}

	[Token(Token = "0x60003A5")]
	[Address(RVA = "0xA5F158", Offset = "0xA5F158", VA = "0xA5F158")]
	private void Awake()
	{
	}

	[Token(Token = "0x60003A6")]
	[Address(RVA = "0xA5F184", Offset = "0xA5F184", VA = "0xA5F184")]
	private void Update()
	{
	}

	[Token(Token = "0x60003A7")]
	[Address(RVA = "0xA5F4C4", Offset = "0xA5F4C4", VA = "0xA5F4C4", Slot = "4")]
	public virtual void SetLeverAngleX(float angle)
	{
	}

	[Token(Token = "0x60003A8")]
	[Address(RVA = "0xA5F554", Offset = "0xA5F554", VA = "0xA5F554", Slot = "5")]
	public virtual void SetLeverAngleY(float angleY)
	{
	}

	[Token(Token = "0x60003A9")]
	[Address(RVA = "0xA5F5E4", Offset = "0xA5F5E4", VA = "0xA5F5E4", Slot = "6")]
	public virtual void SetLeverAngleZ(float angleZ)
	{
	}

	[Token(Token = "0x60003AA")]
	[Address(RVA = "0xA5F670", Offset = "0xA5F670", VA = "0xA5F670")]
	public ObjectRotationLimit()
	{
	}
}
[Token(Token = "0x20000EC")]
public class PayPenalty_main : MonoBehaviour
{
	[Token(Token = "0x400051D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject btnpaypenalty;

	[Token(Token = "0x400051E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextMeshProUGUI txtmsg;

	[Token(Token = "0x400051F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TextMeshProUGUI txtTotPenaltycoin;

	[Token(Token = "0x60003AB")]
	[Address(RVA = "0xA5F698", Offset = "0xA5F698", VA = "0xA5F698")]
	public void OnEnable()
	{
	}

	[Token(Token = "0x60003AC")]
	[Address(RVA = "0xA5F7DC", Offset = "0xA5F7DC", VA = "0xA5F7DC")]
	public void payPenaltyfromMainmenu()
	{
	}

	[Token(Token = "0x60003AD")]
	[Address(RVA = "0xA5F9F4", Offset = "0xA5F9F4", VA = "0xA5F9F4")]
	public PayPenalty_main()
	{
	}
}
[Token(Token = "0x20000ED")]
public class PenaltyCoinManager : MonoBehaviour
{
	[Token(Token = "0x4000520")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static PenaltyCoinManager instance;

	[Token(Token = "0x4000521")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int levelearncoin;

	[Token(Token = "0x4000522")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float finalpenalty;

	[Token(Token = "0x4000523")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int maxTimesDrivingExp;

	[Token(Token = "0x60003AE")]
	[Address(RVA = "0xA5F9FC", Offset = "0xA5F9FC", VA = "0xA5F9FC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60003AF")]
	[Address(RVA = "0xA5FB08", Offset = "0xA5FB08", VA = "0xA5FB08")]
	public void IncreaseDriveExp()
	{
	}

	[Token(Token = "0x60003B0")]
	[Address(RVA = "0xA5FBD0", Offset = "0xA5FBD0", VA = "0xA5FBD0")]
	public void calculate_savePenaltycoin()
	{
	}

	[Token(Token = "0x60003B1")]
	[Address(RVA = "0xA60024", Offset = "0xA60024", VA = "0xA60024")]
	public void paypanelty_gameplay()
	{
	}

	[Token(Token = "0x60003B2")]
	[Address(RVA = "0xA5FA60", Offset = "0xA5FA60", VA = "0xA5FA60")]
	public int GetcurrLevelEarnCoin()
	{
		return default(int);
	}

	[Token(Token = "0x60003B3")]
	[Address(RVA = "0xA5FF78", Offset = "0xA5FF78", VA = "0xA5FF78")]
	private void dohaptics()
	{
	}

	[Token(Token = "0x60003B4")]
	[Address(RVA = "0xA600DC", Offset = "0xA600DC", VA = "0xA600DC")]
	public PenaltyCoinManager()
	{
	}
}
[Token(Token = "0x20000EE")]
public class PicoDevice_helpImg : MonoBehaviour
{
	[Token(Token = "0x4000524")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Image imgChangeable;

	[Token(Token = "0x4000525")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Sprite piconeo3;

	[Token(Token = "0x4000526")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Sprite pico4;

	[Token(Token = "0x4000527")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Sprite pico4pro;

	[Token(Token = "0x60003B5")]
	[Address(RVA = "0xA600EC", Offset = "0xA600EC", VA = "0xA600EC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60003B6")]
	[Address(RVA = "0xA601B0", Offset = "0xA601B0", VA = "0xA601B0")]
	public PicoDevice_helpImg()
	{
	}
}
[Token(Token = "0x20000EF")]
public class PlayerSeatOnOff : MonoBehaviour
{
	[Token(Token = "0x60003B7")]
	[Address(RVA = "0xA601B8", Offset = "0xA601B8", VA = "0xA601B8")]
	public void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60003B8")]
	[Address(RVA = "0xA602EC", Offset = "0xA602EC", VA = "0xA602EC")]
	public void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x60003B9")]
	[Address(RVA = "0xA60420", Offset = "0xA60420", VA = "0xA60420")]
	public PlayerSeatOnOff()
	{
	}
}
[Token(Token = "0x20000F0")]
public class PPs
{
	[Token(Token = "0x4000528")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static string bundle;

	[Token(Token = "0x4000529")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static string player_height;

	[Token(Token = "0x400052A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static string player_lrside;

	[Token(Token = "0x400052B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static string player_fbside;

	[Token(Token = "0x400052C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public static string Sound_Button;

	[Token(Token = "0x400052D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public static string Sound_Other;

	[Token(Token = "0x400052E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public static string Sound_Engine;

	[Token(Token = "0x400052F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public static string Sound_Bg;

	[Token(Token = "0x4000530")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public static string TotalCoin;

	[Token(Token = "0x4000531")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public static string Current_level;

	[Token(Token = "0x4000532")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public static string Fog_Setting;

	[Token(Token = "0x4000533")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public static string NextLevel;

	[Token(Token = "0x4000534")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public static string ReplayLevel;

	[Token(Token = "0x4000535")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public static string Tutorial;

	[Token(Token = "0x4000536")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public static int SelectedTractorModel;

	[Token(Token = "0x4000537")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public static string TractorModel;

	[Token(Token = "0x4000538")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public static string TractorModel0;

	[Token(Token = "0x4000539")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public static string TractorModel1;

	[Token(Token = "0x400053A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public static string Loading_level;

	[Token(Token = "0x400053B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public static string AutoGear;

	[Token(Token = "0x400053C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public static string Movement;

	[Token(Token = "0x400053D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public static string TaskScreen;

	[Token(Token = "0x400053E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public static string TutorialPlay;

	[Token(Token = "0x400053F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public static string Task;

	[Token(Token = "0x4000540")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public static string Task1;

	[Token(Token = "0x4000541")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public static string Task2;

	[Token(Token = "0x4000542")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public static string Task3;

	[Token(Token = "0x4000543")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public static string Task4;

	[Token(Token = "0x4000544")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public static string Task5;

	[Token(Token = "0x4000545")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public static string Task6;

	[Token(Token = "0x4000546")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public static string Task7;

	[Token(Token = "0x4000547")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public static string Task8;

	[Token(Token = "0x4000548")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public static string Task9;

	[Token(Token = "0x4000549")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public static string Task10;

	[Token(Token = "0x400054A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public static string Task11;

	[Token(Token = "0x400054B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public static string Task12;

	[Token(Token = "0x400054C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public static string Task13;

	[Token(Token = "0x400054D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	public static string Task14;

	[Token(Token = "0x400054E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	public static string Task15;

	[Token(Token = "0x400054F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public static string Task16;

	[Token(Token = "0x4000550")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public static string Task17;

	[Token(Token = "0x4000551")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public static string Task18;

	[Token(Token = "0x4000552")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public static string Task19;

	[Token(Token = "0x4000553")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	public static string Task20;

	[Token(Token = "0x4000554")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	public static string Level;

	[Token(Token = "0x4000555")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	public static string SubLevel;

	[Token(Token = "0x4000556")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	public static string Loading_Sublevel;

	[Token(Token = "0x4000557")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	public static string Current_Sublevel;

	[Token(Token = "0x4000558")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	public static string TractorFuel;

	[Token(Token = "0x4000559")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	public static string drivingExp;

	[Token(Token = "0x400055A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	public static string Penaltycoin;

	[Token(Token = "0x400055B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	public static string Tractordamageval;

	[Token(Token = "0x400055C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	public static string Tractordamageval0;

	[Token(Token = "0x400055D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	public static string Tractordamageval1;

	[Token(Token = "0x400055E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	public static string Tractordamageval2;

	[Token(Token = "0x400055F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	public static string Tractordamageprocess;

	[Token(Token = "0x4000560")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	public static string Tractordamageprocess0;

	[Token(Token = "0x4000561")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
	public static string Tractordamageprocess1;

	[Token(Token = "0x4000562")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
	public static string Tractordamageprocess2;

	[Token(Token = "0x4000563")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
	public static string TractorRepairamount;

	[Token(Token = "0x4000564")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
	public static string TractorRepairamount0;

	[Token(Token = "0x4000565")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
	public static string TractorRepairamount1;

	[Token(Token = "0x4000566")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
	public static string TractorRepairamount2;

	[Token(Token = "0x4000567")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
	public static string TractorSteerpos;

	[Token(Token = "0x4000568")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
	public static string TractorSteerpos0;

	[Token(Token = "0x4000569")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
	public static string TractorSteerpos1;

	[Token(Token = "0x400056A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
	public static string TractorSteerpos2;

	[Token(Token = "0x400056B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
	public static string TractorSteerrot;

	[Token(Token = "0x400056C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
	public static string TractorSteerrot0;

	[Token(Token = "0x400056D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
	public static string TractorSteerrot1;

	[Token(Token = "0x400056E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
	public static string TractorSteerrot2;

	[Token(Token = "0x400056F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
	public static string EnvironmentTheme;

	[Token(Token = "0x60003BA")]
	[Address(RVA = "0xA60428", Offset = "0xA60428", VA = "0xA60428")]
	public PPs()
	{
	}
}
[Token(Token = "0x20000F1")]
public class PrticlePosition : MonoBehaviour
{
	[Token(Token = "0x20000F2")]
	[CompilerGenerated]
	private sealed class <waitAndSetPosition>d__2 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000571")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000572")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000573")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PrticlePosition <>4__this;

		[Token(Token = "0x17000027")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60003C2")]
			[Address(RVA = "0xA618E0", Offset = "0xA618E0", VA = "0xA618E0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000028")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60003C4")]
			[Address(RVA = "0xA61928", Offset = "0xA61928", VA = "0xA61928", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60003BF")]
		[Address(RVA = "0xA617E8", Offset = "0xA617E8", VA = "0xA617E8")]
		[DebuggerHidden]
		public <waitAndSetPosition>d__2(int <>1__state)
		{
		}

		[Token(Token = "0x60003C0")]
		[Address(RVA = "0xA61818", Offset = "0xA61818", VA = "0xA61818", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60003C1")]
		[Address(RVA = "0xA6181C", Offset = "0xA6181C", VA = "0xA6181C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60003C3")]
		[Address(RVA = "0xA618E8", Offset = "0xA618E8", VA = "0xA618E8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000570")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool isposition;

	[Token(Token = "0x60003BC")]
	[Address(RVA = "0xA615F4", Offset = "0xA615F4", VA = "0xA615F4")]
	private void Update()
	{
	}

	[Token(Token = "0x60003BD")]
	[Address(RVA = "0xA61774", Offset = "0xA61774", VA = "0xA61774")]
	[IteratorStateMachine(typeof(<waitAndSetPosition>d__2))]
	private IEnumerator waitAndSetPosition()
	{
		return null;
	}

	[Token(Token = "0x60003BE")]
	[Address(RVA = "0xA61810", Offset = "0xA61810", VA = "0xA61810")]
	public PrticlePosition()
	{
	}
}
[Token(Token = "0x20000F3")]
public class RandomEnable : MonoBehaviour
{
	[Token(Token = "0x4000574")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] cowObj;

	[Token(Token = "0x60003C5")]
	[Address(RVA = "0xA61930", Offset = "0xA61930", VA = "0xA61930")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60003C6")]
	[Address(RVA = "0xA6197C", Offset = "0xA6197C", VA = "0xA6197C")]
	public RandomEnable()
	{
	}
}
[Token(Token = "0x20000F4")]
public class RandomSoundDron : MonoBehaviour
{
	[Token(Token = "0x4000575")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioClip[] audioclip;

	[Token(Token = "0x60003C7")]
	[Address(RVA = "0xA61984", Offset = "0xA61984", VA = "0xA61984")]
	public void OnEnable()
	{
	}

	[Token(Token = "0x60003C8")]
	[Address(RVA = "0xA61A18", Offset = "0xA61A18", VA = "0xA61A18")]
	public RandomSoundDron()
	{
	}
}
[Token(Token = "0x20000F5")]
public class OpenPipevalve : MonoBehaviour
{
	[Token(Token = "0x4000576")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool isValveOpen;

	[Token(Token = "0x4000577")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float OpenAngle;

	[Token(Token = "0x4000578")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int TotalValveNeed;

	[Token(Token = "0x4000579")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int TotalPipeCount;

	[Token(Token = "0x60003C9")]
	[Address(RVA = "0xA61A20", Offset = "0xA61A20", VA = "0xA61A20")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60003CA")]
	[Address(RVA = "0xA61AA0", Offset = "0xA61AA0", VA = "0xA61AA0")]
	public void ValveRotate(float val)
	{
	}

	[Token(Token = "0x60003CB")]
	[Address(RVA = "0xA61B6C", Offset = "0xA61B6C", VA = "0xA61B6C")]
	private void CheckValveOpen()
	{
	}

	[Token(Token = "0x60003CC")]
	[Address(RVA = "0xA61D18", Offset = "0xA61D18", VA = "0xA61D18")]
	public OpenPipevalve()
	{
	}
}
[Token(Token = "0x20000F6")]
public class PipeFitting_valveopen : MonoBehaviour
{
	[Token(Token = "0x400057A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static PipeFitting_valveopen instance;

	[Token(Token = "0x400057B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int TotalScrew;

	[Token(Token = "0x400057C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static bool isScrewFit;

	[Token(Token = "0x400057D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
	public static bool isValveOpen;

	[Token(Token = "0x400057E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject valve1;

	[Token(Token = "0x400057F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject valve2;

	[Token(Token = "0x60003CD")]
	[Address(RVA = "0xA61D20", Offset = "0xA61D20", VA = "0xA61D20")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60003CE")]
	[Address(RVA = "0xA61E9C", Offset = "0xA61E9C", VA = "0xA61E9C")]
	public void CheckScrewAndValveFinish()
	{
	}

	[Token(Token = "0x60003CF")]
	[Address(RVA = "0xA61C64", Offset = "0xA61C64", VA = "0xA61C64")]
	public void Screw_Valve_finish()
	{
	}

	[Token(Token = "0x60003D0")]
	[Address(RVA = "0xA6202C", Offset = "0xA6202C", VA = "0xA6202C")]
	public PipeFitting_valveopen()
	{
	}
}
[Token(Token = "0x20000F7")]
public class PlantBeans : MonoBehaviour
{
	[Token(Token = "0x4000580")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject Point_plant;

	[Token(Token = "0x4000581")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int TotalPlantFitCount;

	[Token(Token = "0x4000582")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int TotalPlantFitNeed;

	[Token(Token = "0x4000583")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public PlantTag PotTag;

	[Token(Token = "0x60003D1")]
	[Address(RVA = "0xA62034", Offset = "0xA62034", VA = "0xA62034")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60003D2")]
	[Address(RVA = "0xA620E4", Offset = "0xA620E4", VA = "0xA620E4")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60003D3")]
	[Address(RVA = "0xA62314", Offset = "0xA62314", VA = "0xA62314")]
	private void CheckPlantingComplete()
	{
	}

	[Token(Token = "0x60003D4")]
	[Address(RVA = "0xA623CC", Offset = "0xA623CC", VA = "0xA623CC")]
	public PlantBeans()
	{
	}
}
[Token(Token = "0x20000F8")]
public class PurchasePipe : MonoBehaviour
{
	[Token(Token = "0x4000584")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject MoneyPopup;

	[Token(Token = "0x4000585")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TrailerPipecount pipescount;

	[Token(Token = "0x4000586")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject[] Pipes;

	[Token(Token = "0x60003D5")]
	[Address(RVA = "0xA623D4", Offset = "0xA623D4", VA = "0xA623D4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60003D6")]
	[Address(RVA = "0xA624C0", Offset = "0xA624C0", VA = "0xA624C0")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60003D7")]
	[Address(RVA = "0xA62550", Offset = "0xA62550", VA = "0xA62550")]
	public void PurchaseYes()
	{
	}

	[Token(Token = "0x60003D8")]
	[Address(RVA = "0xA625F8", Offset = "0xA625F8", VA = "0xA625F8")]
	public void LoadedYes()
	{
	}

	[Token(Token = "0x60003D9")]
	[Address(RVA = "0xA62694", Offset = "0xA62694", VA = "0xA62694")]
	public PurchasePipe()
	{
	}
}
[Token(Token = "0x20000F9")]
public class TractorWaterFailure : MonoBehaviour
{
	[Token(Token = "0x4000587")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject failurePanel;

	[Token(Token = "0x60003DA")]
	[Address(RVA = "0xA6269C", Offset = "0xA6269C", VA = "0xA6269C")]
	public void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60003DB")]
	[Address(RVA = "0xA6279C", Offset = "0xA6279C", VA = "0xA6279C")]
	public TractorWaterFailure()
	{
	}
}
[Token(Token = "0x20000FA")]
public class TrailerPipecount : MonoBehaviour
{
	[Token(Token = "0x4000588")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] Pipes;

	[Token(Token = "0x4000589")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int TotalCanUnload;

	[Token(Token = "0x400058A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private int TotalUnloadNeed;

	[Token(Token = "0x60003DC")]
	[Address(RVA = "0xA627A4", Offset = "0xA627A4", VA = "0xA627A4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60003DD")]
	[Address(RVA = "0xA62810", Offset = "0xA62810", VA = "0xA62810")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60003DE")]
	[Address(RVA = "0xA62874", Offset = "0xA62874", VA = "0xA62874")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60003DF")]
	[Address(RVA = "0xA62A84", Offset = "0xA62A84", VA = "0xA62A84")]
	private void CheckForNextPhase()
	{
	}

	[Token(Token = "0x60003E0")]
	[Address(RVA = "0xA62B24", Offset = "0xA62B24", VA = "0xA62B24")]
	public TrailerPipecount()
	{
	}
}
[Token(Token = "0x20000FB")]
public class TrollyPlants : MonoBehaviour
{
	[Token(Token = "0x400058B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int TotalPlants;

	[Token(Token = "0x400058C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private int NeededPlants;

	[Token(Token = "0x60003E1")]
	[Address(RVA = "0xA62B2C", Offset = "0xA62B2C", VA = "0xA62B2C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60003E2")]
	[Address(RVA = "0xA62B34", Offset = "0xA62B34", VA = "0xA62B34")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60003E3")]
	[Address(RVA = "0xA62D48", Offset = "0xA62D48", VA = "0xA62D48")]
	public TrollyPlants()
	{
	}
}
[Token(Token = "0x20000FC")]
public class WarehouseDoor_open_close : MonoBehaviour
{
	[Token(Token = "0x400058D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Initial Y Position")]
	public float InitialXPosition;

	[Token(Token = "0x400058E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float MinimumXPosition;

	[Token(Token = "0x400058F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float MaximumXPosition;

	[Token(Token = "0x4000590")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Grabbable grab;

	[Token(Token = "0x4000591")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform go_openclose1;

	[Token(Token = "0x4000592")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform go_openclose2;

	[Token(Token = "0x4000593")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Animation gate_anim;

	[Token(Token = "0x4000594")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Transform target_open;

	[Token(Token = "0x4000595")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Transform target_close;

	[Token(Token = "0x4000596")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Transform target_open1;

	[Token(Token = "0x4000597")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Transform target_close1;

	[Token(Token = "0x4000598")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float speed;

	[Token(Token = "0x60003E4")]
	[Address(RVA = "0xA62D50", Offset = "0xA62D50", VA = "0xA62D50")]
	private void Start()
	{
	}

	[Token(Token = "0x60003E5")]
	[Address(RVA = "0xA62DA8", Offset = "0xA62DA8", VA = "0xA62DA8")]
	private void Awake()
	{
	}

	[Token(Token = "0x60003E6")]
	[Address(RVA = "0xA62E24", Offset = "0xA62E24", VA = "0xA62E24")]
	private void Update()
	{
	}

	[Token(Token = "0x60003E7")]
	[Address(RVA = "0xA63310", Offset = "0xA63310", VA = "0xA63310", Slot = "4")]
	public virtual void SetHeightY(float heightX)
	{
	}

	[Token(Token = "0x60003E8")]
	[Address(RVA = "0xA633A0", Offset = "0xA633A0", VA = "0xA633A0")]
	public WarehouseDoor_open_close()
	{
	}
}
[Token(Token = "0x20000FD")]
public class RotateObject : MonoBehaviour
{
	[Token(Token = "0x4000599")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool isrotateRight;

	[Token(Token = "0x400059A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	private bool isroatateLeft;

	[Token(Token = "0x60003E9")]
	[Address(RVA = "0xA633B0", Offset = "0xA633B0", VA = "0xA633B0")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60003EA")]
	[Address(RVA = "0xA635D4", Offset = "0xA635D4", VA = "0xA635D4")]
	public void onclickRight()
	{
	}

	[Token(Token = "0x60003EB")]
	[Address(RVA = "0xA635E0", Offset = "0xA635E0", VA = "0xA635E0")]
	public void onclickupRightRot()
	{
	}

	[Token(Token = "0x60003EC")]
	[Address(RVA = "0xA635E8", Offset = "0xA635E8", VA = "0xA635E8")]
	public void onclickLeft()
	{
	}

	[Token(Token = "0x60003ED")]
	[Address(RVA = "0xA635F4", Offset = "0xA635F4", VA = "0xA635F4")]
	public void onclickupLeftRot()
	{
	}

	[Token(Token = "0x60003EE")]
	[Address(RVA = "0xA635FC", Offset = "0xA635FC", VA = "0xA635FC")]
	public RotateObject()
	{
	}
}
[Token(Token = "0x20000FE")]
public class SeatAdjustUpDown : MonoBehaviour
{
	[Token(Token = "0x400059B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Rotation Limits")]
	[Tooltip("Minimum X value in Local Euler Angles")]
	public float MinimumXRotation;

	[Token(Token = "0x400059C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Tooltip("Maximum X value in Local Euler Angles")]
	public float MaximumXRotation;

	[Token(Token = "0x400059D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Header("Initial Rotation")]
	public float InitialXRotation;

	[Token(Token = "0x400059E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Header("Audio")]
	public AudioClip SwitchOnSound;

	[Token(Token = "0x400059F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AudioClip SwitchOffSound;

	[Token(Token = "0x40005A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Header("Tolerance")]
	[Tooltip("Tolerance before considering a switch flipped On or Off. Ex : 1.25 Tolerance means switch can be 98.25% up and considered switched on, or 1.25% down to be considered switched off.")]
	public float SwitchTolerance;

	[Token(Token = "0x40005A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[Header("Smooth Look")]
	[Tooltip("If true the lever will lerp towards the Grabber. If false the lever will instantly point to the grabber")]
	public bool UseSmoothLook;

	[Token(Token = "0x40005A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("The speed at which to Lerp towards the Grabber if UseSmoothLook is enabled")]
	public float SmoothLookSpeed;

	[Token(Token = "0x40005A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[Header("Moving Platform Support")]
	[Tooltip("If false, the lever's rigidbody will be kinematic when not being held. Disable this if you don't want your lever to interact with physics or if you need moving platform support.")]
	public bool AllowPhysicsForces;

	[Token(Token = "0x40005A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
	[Tooltip("If ReturnToCenter true and KinematicWhileInactive true then the lever will smooth look back to center when not being held")]
	[Header("Return to Center (Must be Kinematic)")]
	public bool ReturnToCenter;

	[Token(Token = "0x40005A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Tooltip("How fast to return to center if not being held")]
	public float ReturnLookSpeed;

	[Token(Token = "0x40005A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[Header("Snap Settings")]
	[Tooltip("If true the lever will look directly at the Grabber and not factor in an initial offset")]
	public bool SnapToGrabber;

	[Token(Token = "0x40005A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
	[Header("Misc")]
	[Tooltip("If true, the Lever will be dropped once switched on or off")]
	public bool DropLeverOnActivation;

	[Token(Token = "0x40005A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Tooltip("Current position of the lever as expressed as a percentage 1-100")]
	[Header("Shown for Debug")]
	public float LeverPercentage;

	[Token(Token = "0x40005A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[Tooltip("If true will show an angle helper in editor mode (Gizmos must be enabled)")]
	public bool ShowEditorGizmos;

	[Token(Token = "0x40005AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Tooltip("Called when lever was up, but is now in the down position")]
	[Header("Events")]
	public UnityEvent onLeverDown;

	[Token(Token = "0x40005AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Tooltip("Called when lever was down, but is now in the up position")]
	public UnityEvent onLeverUp;

	[Token(Token = "0x40005AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[Tooltip("Called if the lever changes position at all")]
	public FloatEvent onLeverChange;

	[Token(Token = "0x40005AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Grabbable grab;

	[Token(Token = "0x40005AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Rigidbody rb;

	[Token(Token = "0x40005AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private AudioSource audioSource;

	[Token(Token = "0x40005B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private bool switchedOn;

	[Token(Token = "0x40005B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private ConfigurableJoint configJoint;

	[Token(Token = "0x40005B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private HingeJoint hingedJoint;

	[Token(Token = "0x40005B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private Vector3 _lastLocalAngle;

	[Token(Token = "0x40005B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private float angle;

	[Token(Token = "0x40005B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public Transform player;

	[Token(Token = "0x40005B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private bool isHeld;

	[Token(Token = "0x40005B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private Animator anim;

	[Token(Token = "0x40005B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public float UpDownSpeed;

	[Token(Token = "0x40005B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	public bool isAdjustFB;

	[Token(Token = "0x40005BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public float seat_up;

	[Token(Token = "0x40005BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	public float seat_down;

	[Token(Token = "0x40005BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public float seat_frwd;

	[Token(Token = "0x40005BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	public float seat_bkwrd;

	[Token(Token = "0x40005BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private Quaternion initialOffset;

	[Token(Token = "0x60003EF")]
	[Address(RVA = "0xA63604", Offset = "0xA63604", VA = "0xA63604")]
	private void Awake()
	{
	}

	[Token(Token = "0x60003F0")]
	[Address(RVA = "0xA63634", Offset = "0xA63634", VA = "0xA63634")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60003F1")]
	[Address(RVA = "0xA636C8", Offset = "0xA636C8", VA = "0xA636C8")]
	private void Start()
	{
	}

	[Token(Token = "0x60003F2")]
	[Address(RVA = "0xA638E0", Offset = "0xA638E0", VA = "0xA638E0")]
	private void Update()
	{
	}

	[Token(Token = "0x60003F3")]
	[Address(RVA = "0xA63B40", Offset = "0xA63B40", VA = "0xA63B40", Slot = "4")]
	public virtual float GetAnglePercentage(float currentAngle)
	{
		return default(float);
	}

	[Token(Token = "0x60003F4")]
	[Address(RVA = "0xA63CE0", Offset = "0xA63CE0", VA = "0xA63CE0")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60003F5")]
	[Address(RVA = "0xA6428C", Offset = "0xA6428C", VA = "0xA6428C")]
	private void PlayerSeatUpDown()
	{
	}

	[Token(Token = "0x60003F6")]
	[Address(RVA = "0xA643FC", Offset = "0xA643FC", VA = "0xA643FC")]
	private void PlayerSeatFB()
	{
	}

	[Token(Token = "0x60003F7")]
	[Address(RVA = "0xA63D1C", Offset = "0xA63D1C", VA = "0xA63D1C")]
	private void doLeverLook()
	{
	}

	[Token(Token = "0x60003F8")]
	[Address(RVA = "0xA6456C", Offset = "0xA6456C", VA = "0xA6456C", Slot = "5")]
	public virtual void OnLeverChange(float percentage)
	{
	}

	[Token(Token = "0x60003F9")]
	[Address(RVA = "0xA645D8", Offset = "0xA645D8", VA = "0xA645D8", Slot = "6")]
	public virtual void OnLeverDown()
	{
	}

	[Token(Token = "0x60003FA")]
	[Address(RVA = "0xA646D4", Offset = "0xA646D4", VA = "0xA646D4", Slot = "7")]
	public virtual void OnLeverUp()
	{
	}

	[Token(Token = "0x60003FB")]
	[Address(RVA = "0xA647D4", Offset = "0xA647D4", VA = "0xA647D4")]
	public SeatAdjustUpDown()
	{
	}
}
[Token(Token = "0x20000FF")]
public class SetGetPlayerPosition : MonoBehaviour
{
	[Token(Token = "0x40005BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static SetGetPlayerPosition instance;

	[Token(Token = "0x40005C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float m_height;

	[Token(Token = "0x40005C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float m_LRside;

	[Token(Token = "0x40005C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float m_FBside;

	[Token(Token = "0x40005C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform player;

	[Token(Token = "0x40005C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform player_main;

	[Token(Token = "0x40005C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static Transform p_player;

	[Token(Token = "0x40005C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float speed;

	[Token(Token = "0x40005C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float YPos;

	[Token(Token = "0x40005C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float ZPos;

	[Token(Token = "0x17000029")]
	public float height
	{
		[Token(Token = "0x60003FF")]
		[Address(RVA = "0xA649D0", Offset = "0xA649D0", VA = "0xA649D0")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000400")]
		[Address(RVA = "0xA649D8", Offset = "0xA649D8", VA = "0xA649D8")]
		set
		{
		}
	}

	[Token(Token = "0x1700002A")]
	public float LRSide
	{
		[Token(Token = "0x6000401")]
		[Address(RVA = "0xA649E0", Offset = "0xA649E0", VA = "0xA649E0")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000402")]
		[Address(RVA = "0xA649E8", Offset = "0xA649E8", VA = "0xA649E8")]
		set
		{
		}
	}

	[Token(Token = "0x1700002B")]
	public float FBSide
	{
		[Token(Token = "0x6000403")]
		[Address(RVA = "0xA649F0", Offset = "0xA649F0", VA = "0xA649F0")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000404")]
		[Address(RVA = "0xA649F8", Offset = "0xA649F8", VA = "0xA649F8")]
		set
		{
		}
	}

	[Token(Token = "0x60003FC")]
	[Address(RVA = "0xA64860", Offset = "0xA64860", VA = "0xA64860")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60003FD")]
	[Address(RVA = "0xA64930", Offset = "0xA64930", VA = "0xA64930")]
	private void Start()
	{
	}

	[Token(Token = "0x60003FE")]
	[Address(RVA = "0xA649CC", Offset = "0xA649CC", VA = "0xA649CC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000405")]
	[Address(RVA = "0xA64A00", Offset = "0xA64A00", VA = "0xA64A00")]
	public void PlayerPosition()
	{
	}

	[Token(Token = "0x6000406")]
	[Address(RVA = "0xA64A28", Offset = "0xA64A28", VA = "0xA64A28")]
	public static void PlayerSeat(float x)
	{
	}

	[Token(Token = "0x6000407")]
	[Address(RVA = "0xA64A94", Offset = "0xA64A94", VA = "0xA64A94")]
	public SetGetPlayerPosition()
	{
	}
}
[Token(Token = "0x2000100")]
public class SetHeight : MonoBehaviour
{
	[Token(Token = "0x40005C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Initial Y Position")]
	public float InitialYPosition;

	[Token(Token = "0x40005CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float MinimumYPosition;

	[Token(Token = "0x40005CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float MaximumYPosition;

	[Token(Token = "0x40005CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Grabbable grab;

	[Token(Token = "0x6000408")]
	[Address(RVA = "0xA64AA4", Offset = "0xA64AA4", VA = "0xA64AA4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000409")]
	[Address(RVA = "0xA64AFC", Offset = "0xA64AFC", VA = "0xA64AFC")]
	private void Awake()
	{
	}

	[Token(Token = "0x600040A")]
	[Address(RVA = "0xA64B78", Offset = "0xA64B78", VA = "0xA64B78")]
	private void Update()
	{
	}

	[Token(Token = "0x600040B")]
	[Address(RVA = "0xA64C10", Offset = "0xA64C10", VA = "0xA64C10", Slot = "4")]
	public virtual void SetHeightY(float heightY)
	{
	}

	[Token(Token = "0x600040C")]
	[Address(RVA = "0xA64CA0", Offset = "0xA64CA0", VA = "0xA64CA0")]
	public SetHeight()
	{
	}
}
[Token(Token = "0x2000101")]
public class SetPosition : MonoBehaviour
{
	[Token(Token = "0x40005CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Initial Z Position")]
	public float InitialZPosition;

	[Token(Token = "0x40005CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float MinimumZPosition;

	[Token(Token = "0x40005CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float MaximumZPosition;

	[Token(Token = "0x40005D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Grabbable grab;

	[Token(Token = "0x600040D")]
	[Address(RVA = "0xA64CA8", Offset = "0xA64CA8", VA = "0xA64CA8")]
	private void Start()
	{
	}

	[Token(Token = "0x600040E")]
	[Address(RVA = "0xA64D00", Offset = "0xA64D00", VA = "0xA64D00")]
	private void Awake()
	{
	}

	[Token(Token = "0x600040F")]
	[Address(RVA = "0xA64D78", Offset = "0xA64D78", VA = "0xA64D78")]
	private void Update()
	{
	}

	[Token(Token = "0x6000410")]
	[Address(RVA = "0xA64DC8", Offset = "0xA64DC8", VA = "0xA64DC8", Slot = "4")]
	public virtual void SetPositionZ(float heightZ)
	{
	}

	[Token(Token = "0x6000411")]
	[Address(RVA = "0xA64E54", Offset = "0xA64E54", VA = "0xA64E54")]
	public SetPosition()
	{
	}
}
[Token(Token = "0x2000102")]
public class SetSteering_pos_rot : MonoBehaviour
{
	[Token(Token = "0x40005D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject parentPos;

	[Token(Token = "0x40005D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject steerRot;

	[Token(Token = "0x6000412")]
	[Address(RVA = "0xA64E5C", Offset = "0xA64E5C", VA = "0xA64E5C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000413")]
	[Address(RVA = "0xA6504C", Offset = "0xA6504C", VA = "0xA6504C")]
	public SetSteering_pos_rot()
	{
	}
}
[Token(Token = "0x2000103")]
public class ShopkeeperAnim : MonoBehaviour
{
	[Token(Token = "0x40005D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Animator shopkeeperAnim;

	[Token(Token = "0x40005D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AnimationClip newanimationclip;

	[Token(Token = "0x6000414")]
	[Address(RVA = "0xA65054", Offset = "0xA65054", VA = "0xA65054")]
	public void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000415")]
	[Address(RVA = "0xA65140", Offset = "0xA65140", VA = "0xA65140")]
	public ShopkeeperAnim()
	{
	}
}
[Token(Token = "0x2000104")]
public class SoundManager : MonoBehaviour
{
	[Token(Token = "0x40005D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioSource ado_btnSound;

	[Token(Token = "0x40005D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioSource ado_engin;

	[Token(Token = "0x40005D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioSource ado_bg;

	[Token(Token = "0x40005D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AudioSource ado_popup;

	[Token(Token = "0x40005D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AudioSource ado_animalkill;

	[Token(Token = "0x40005DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AudioClip[] clip_animalkill;

	[Token(Token = "0x40005DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static SoundManager instance;

	[Token(Token = "0x6000416")]
	[Address(RVA = "0xA65148", Offset = "0xA65148", VA = "0xA65148")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000417")]
	[Address(RVA = "0xA651A0", Offset = "0xA651A0", VA = "0xA651A0")]
	public void SetInitialLoad()
	{
	}

	[Token(Token = "0x6000418")]
	[Address(RVA = "0xA653B0", Offset = "0xA653B0", VA = "0xA653B0")]
	public void SoundStatusSave()
	{
	}

	[Token(Token = "0x6000419")]
	[Address(RVA = "0xA65560", Offset = "0xA65560", VA = "0xA65560")]
	public void ButtonSound()
	{
	}

	[Token(Token = "0x600041A")]
	[Address(RVA = "0xA655F8", Offset = "0xA655F8", VA = "0xA655F8")]
	public void PopupSound()
	{
	}

	[Token(Token = "0x600041B")]
	[Address(RVA = "0xA5FEBC", Offset = "0xA5FEBC", VA = "0xA5FEBC")]
	public void KillAnimalsound()
	{
	}

	[Token(Token = "0x600041C")]
	[Address(RVA = "0xA65690", Offset = "0xA65690", VA = "0xA65690")]
	public SoundManager()
	{
	}
}
[Token(Token = "0x2000105")]
public class SteerAdjustUpDown : MonoBehaviour
{
	[Token(Token = "0x40005DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Rotation Limits")]
	[Tooltip("Minimum X value in Local Euler Angles")]
	public float MinimumXRotation;

	[Token(Token = "0x40005DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Tooltip("Maximum X value in Local Euler Angles")]
	public float MaximumXRotation;

	[Token(Token = "0x40005DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Header("Initial Rotation")]
	public float InitialXRotation;

	[Token(Token = "0x40005DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Header("Audio")]
	public AudioClip SwitchOnSound;

	[Token(Token = "0x40005E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AudioClip SwitchOffSound;

	[Token(Token = "0x40005E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Header("Tolerance")]
	[Tooltip("Tolerance before considering a switch flipped On or Off. Ex : 1.25 Tolerance means switch can be 98.25% up and considered switched on, or 1.25% down to be considered switched off.")]
	public float SwitchTolerance;

	[Token(Token = "0x40005E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[Tooltip("If true the lever will lerp towards the Grabber. If false the lever will instantly point to the grabber")]
	[Header("Smooth Look")]
	public bool UseSmoothLook;

	[Token(Token = "0x40005E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("The speed at which to Lerp towards the Grabber if UseSmoothLook is enabled")]
	public float SmoothLookSpeed;

	[Token(Token = "0x40005E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[Tooltip("If false, the lever's rigidbody will be kinematic when not being held. Disable this if you don't want your lever to interact with physics or if you need moving platform support.")]
	[Header("Moving Platform Support")]
	public bool AllowPhysicsForces;

	[Token(Token = "0x40005E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
	[Header("Return to Center (Must be Kinematic)")]
	[Tooltip("If ReturnToCenter true and KinematicWhileInactive true then the lever will smooth look back to center when not being held")]
	public bool ReturnToCenter;

	[Token(Token = "0x40005E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Tooltip("How fast to return to center if not being held")]
	public float ReturnLookSpeed;

	[Token(Token = "0x40005E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[Header("Snap Settings")]
	[Tooltip("If true the lever will look directly at the Grabber and not factor in an initial offset")]
	public bool SnapToGrabber;

	[Token(Token = "0x40005E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
	[Tooltip("If true, the Lever will be dropped once switched on or off")]
	[Header("Misc")]
	public bool DropLeverOnActivation;

	[Token(Token = "0x40005E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Tooltip("Current position of the lever as expressed as a percentage 1-100")]
	[Header("Shown for Debug")]
	public float LeverPercentage;

	[Token(Token = "0x40005EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[Tooltip("If true will show an angle helper in editor mode (Gizmos must be enabled)")]
	public bool ShowEditorGizmos;

	[Token(Token = "0x40005EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Header("Events")]
	[Tooltip("Called when lever was up, but is now in the down position")]
	public UnityEvent onLeverDown;

	[Token(Token = "0x40005EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Tooltip("Called when lever was down, but is now in the up position")]
	public UnityEvent onLeverUp;

	[Token(Token = "0x40005ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[Tooltip("Called if the lever changes position at all")]
	public FloatEvent onLeverChange;

	[Token(Token = "0x40005EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Grabbable grab;

	[Token(Token = "0x40005EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Rigidbody rb;

	[Token(Token = "0x40005F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private AudioSource audioSource;

	[Token(Token = "0x40005F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private bool switchedOn;

	[Token(Token = "0x40005F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private ConfigurableJoint configJoint;

	[Token(Token = "0x40005F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private HingeJoint hingedJoint;

	[Token(Token = "0x40005F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private Vector3 _lastLocalAngle;

	[Token(Token = "0x40005F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private float angle;

	[Token(Token = "0x40005F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public Transform player;

	[Token(Token = "0x40005F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private bool isHeld;

	[Token(Token = "0x40005F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private Animator anim;

	[Token(Token = "0x40005F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public float UpDownSpeed;

	[Token(Token = "0x40005FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	public bool isAdjustFB;

	[Token(Token = "0x40005FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public float seat_up;

	[Token(Token = "0x40005FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	public float seat_down;

	[Token(Token = "0x40005FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public float seat_frwd;

	[Token(Token = "0x40005FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	public float seat_bkwrd;

	[Token(Token = "0x40005FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private Quaternion initialOffset;

	[Token(Token = "0x600041D")]
	[Address(RVA = "0xA65698", Offset = "0xA65698", VA = "0xA65698")]
	private void Awake()
	{
	}

	[Token(Token = "0x600041E")]
	[Address(RVA = "0xA656C8", Offset = "0xA656C8", VA = "0xA656C8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600041F")]
	[Address(RVA = "0xA656CC", Offset = "0xA656CC", VA = "0xA656CC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000420")]
	[Address(RVA = "0xA658E4", Offset = "0xA658E4", VA = "0xA658E4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000421")]
	[Address(RVA = "0xA65B44", Offset = "0xA65B44", VA = "0xA65B44", Slot = "4")]
	public virtual float GetAnglePercentage(float currentAngle)
	{
		return default(float);
	}

	[Token(Token = "0x6000422")]
	[Address(RVA = "0xA65CE4", Offset = "0xA65CE4", VA = "0xA65CE4")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000423")]
	[Address(RVA = "0xA66290", Offset = "0xA66290", VA = "0xA66290")]
	private void PlayerSeatUpDown()
	{
	}

	[Token(Token = "0x6000424")]
	[Address(RVA = "0xA66488", Offset = "0xA66488", VA = "0xA66488")]
	private void PlayerSeatFB()
	{
	}

	[Token(Token = "0x6000425")]
	[Address(RVA = "0xA65D20", Offset = "0xA65D20", VA = "0xA65D20")]
	private void doLeverLook()
	{
	}

	[Token(Token = "0x6000426")]
	[Address(RVA = "0xA66668", Offset = "0xA66668", VA = "0xA66668", Slot = "5")]
	public virtual void OnLeverChange(float percentage)
	{
	}

	[Token(Token = "0x6000427")]
	[Address(RVA = "0xA666D4", Offset = "0xA666D4", VA = "0xA666D4", Slot = "6")]
	public virtual void OnLeverDown()
	{
	}

	[Token(Token = "0x6000428")]
	[Address(RVA = "0xA667D0", Offset = "0xA667D0", VA = "0xA667D0", Slot = "7")]
	public virtual void OnLeverUp()
	{
	}

	[Token(Token = "0x6000429")]
	[Address(RVA = "0xA668D0", Offset = "0xA668D0", VA = "0xA668D0")]
	public SteerAdjustUpDown()
	{
	}
}
[Token(Token = "0x2000106")]
public class ThemeGameplay : MonoBehaviour
{
	[Token(Token = "0x4000600")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public EnvironmentSetting[] Envtheme;

	[Token(Token = "0x4000601")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static ThemeGameplay instance;

	[Token(Token = "0x4000602")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Light directionLight;

	[Token(Token = "0x4000603")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static EnvironmentSetting currtheme;

	[Token(Token = "0x4000604")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject rainParticle;

	[Token(Token = "0x4000605")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject groundMatObj;

	[Token(Token = "0x4000606")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool isnightTheme;

	[Token(Token = "0x4000607")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float valueLight;

	[Token(Token = "0x4000608")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool isMaxDone;

	[Token(Token = "0x600042A")]
	[Address(RVA = "0xA6695C", Offset = "0xA6695C", VA = "0xA6695C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600042B")]
	[Address(RVA = "0xA669C8", Offset = "0xA669C8", VA = "0xA669C8")]
	public void CheckCurrSetting(int themeno)
	{
	}

	[Token(Token = "0x600042C")]
	[Address(RVA = "0xA66C20", Offset = "0xA66C20", VA = "0xA66C20")]
	public void SetDayTheme()
	{
	}

	[Token(Token = "0x600042D")]
	[Address(RVA = "0xA66E8C", Offset = "0xA66E8C", VA = "0xA66E8C")]
	public void SetNightTheme()
	{
	}

	[Token(Token = "0x600042E")]
	[Address(RVA = "0xA67098", Offset = "0xA67098", VA = "0xA67098")]
	private void SetForNightEnvironment()
	{
	}

	[Token(Token = "0x600042F")]
	[Address(RVA = "0xA671EC", Offset = "0xA671EC", VA = "0xA671EC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000430")]
	[Address(RVA = "0xA67080", Offset = "0xA67080", VA = "0xA67080")]
	public void SetAutoTheme(int themeno_)
	{
	}

	[Token(Token = "0x6000431")]
	[Address(RVA = "0xA673F0", Offset = "0xA673F0", VA = "0xA673F0")]
	public ThemeGameplay()
	{
	}
}
[Token(Token = "0x2000107")]
public class ThemeSelMainmenu : MonoBehaviour
{
	[Token(Token = "0x4000609")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public EnvironmentSetting[] Envtheme;

	[Token(Token = "0x400060A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Light directionLight;

	[Token(Token = "0x400060B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static EnvironmentSetting currtheme;

	[Token(Token = "0x400060C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Material daysky;

	[Token(Token = "0x400060D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Material nightsky;

	[Token(Token = "0x400060E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Material autosky;

	[Token(Token = "0x400060F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static ThemeSelMainmenu instance;

	[Token(Token = "0x6000432")]
	[Address(RVA = "0xA673F8", Offset = "0xA673F8", VA = "0xA673F8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000433")]
	[Address(RVA = "0xA6753C", Offset = "0xA6753C", VA = "0xA6753C")]
	public void SetDayTheme()
	{
	}

	[Token(Token = "0x6000434")]
	[Address(RVA = "0xA67754", Offset = "0xA67754", VA = "0xA67754")]
	public void SetNightTheme()
	{
	}

	[Token(Token = "0x6000435")]
	[Address(RVA = "0xA6797C", Offset = "0xA6797C", VA = "0xA6797C")]
	public void SetAutoTheme()
	{
	}

	[Token(Token = "0x6000436")]
	[Address(RVA = "0xA67BC0", Offset = "0xA67BC0", VA = "0xA67BC0")]
	public ThemeSelMainmenu()
	{
	}
}
[Token(Token = "0x2000108")]
public class ThemeSetting : MonoBehaviour
{
	[Token(Token = "0x4000610")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Image themeSel;

	[Token(Token = "0x4000611")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Sprite daytheme;

	[Token(Token = "0x4000612")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Sprite nighttheme;

	[Token(Token = "0x4000613")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Sprite autotheme;

	[Token(Token = "0x6000437")]
	[Address(RVA = "0xA67BC8", Offset = "0xA67BC8", VA = "0xA67BC8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000438")]
	[Address(RVA = "0xA67C9C", Offset = "0xA67C9C", VA = "0xA67C9C")]
	public void SelectDay()
	{
	}

	[Token(Token = "0x6000439")]
	[Address(RVA = "0xA67D98", Offset = "0xA67D98", VA = "0xA67D98")]
	public void SelectNight()
	{
	}

	[Token(Token = "0x600043A")]
	[Address(RVA = "0xA67E94", Offset = "0xA67E94", VA = "0xA67E94")]
	public void SelectAuto()
	{
	}

	[Token(Token = "0x600043B")]
	[Address(RVA = "0xA67F90", Offset = "0xA67F90", VA = "0xA67F90")]
	public ThemeSetting()
	{
	}
}
[Token(Token = "0x2000109")]
public class TooltipLastLvl : MonoBehaviour, IPointerEnterHandler, IEventSystemHandler, IPointerExitHandler
{
	[Token(Token = "0x4000614")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject tooltip;

	[Token(Token = "0x4000615")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject lockObj;

	[Token(Token = "0x4000616")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int mainCat;

	[Token(Token = "0x4000617")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int subCat;

	[Token(Token = "0x600043C")]
	[Address(RVA = "0xA67F98", Offset = "0xA67F98", VA = "0xA67F98")]
	public void OnEnable()
	{
	}

	[Token(Token = "0x600043D")]
	[Address(RVA = "0xA67FB8", Offset = "0xA67FB8", VA = "0xA67FB8", Slot = "4")]
	public void OnPointerEnter(PointerEventData eventData)
	{
	}

	[Token(Token = "0x600043E")]
	[Address(RVA = "0xA680FC", Offset = "0xA680FC", VA = "0xA680FC", Slot = "5")]
	public void OnPointerExit(PointerEventData eventData)
	{
	}

	[Token(Token = "0x600043F")]
	[Address(RVA = "0xA6813C", Offset = "0xA6813C", VA = "0xA6813C")]
	public TooltipLastLvl()
	{
	}
}
[Serializable]
[Token(Token = "0x200010A")]
public class TractorData
{
	[Token(Token = "0x4000618")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Animator body_anim;

	[Token(Token = "0x4000619")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject btn_start;

	[Token(Token = "0x400061A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject btn_stop;

	[Token(Token = "0x400061B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject btn_attach;

	[Token(Token = "0x400061C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject btn_use;

	[Token(Token = "0x400061D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject btn_help;

	[Token(Token = "0x400061E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject btn_repair;

	[Token(Token = "0x400061F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject[] Tractor_equip_list;

	[Token(Token = "0x4000620")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public ParticleSystem Tractor_Smoke;

	[Token(Token = "0x4000621")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject gear_point;

	[Token(Token = "0x4000622")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public AudioSource sound_horn;

	[Token(Token = "0x4000623")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public GameObject HeadLight;

	[Token(Token = "0x4000624")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public GameObject DirectionArrow;

	[Token(Token = "0x4000625")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public GameObject TractorRaycast;

	[Token(Token = "0x6000440")]
	[Address(RVA = "0xA68144", Offset = "0xA68144", VA = "0xA68144")]
	public TractorData()
	{
	}
}
[Serializable]
[Token(Token = "0x200010B")]
public class WaterTank
{
	[Token(Token = "0x4000626")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public GameObject[] water_ps;

	[Token(Token = "0x6000441")]
	[Address(RVA = "0xA6814C", Offset = "0xA6814C", VA = "0xA6814C")]
	public WaterTank()
	{
	}
}
[Token(Token = "0x200010C")]
public class TractorController : MonoBehaviour
{
	[Token(Token = "0x4000627")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static TractorController instance;

	[Token(Token = "0x4000628")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TractorData tractordata;

	[Token(Token = "0x4000629")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static bool isStart;

	[Token(Token = "0x400062A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioSource EngineAudio;

	[Token(Token = "0x400062B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GearShifting vhcl;

	[Token(Token = "0x400062C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject Tag_Changer_go;

	[Token(Token = "0x400062D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public WaterTank watertank;

	[Token(Token = "0x400062E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AudioSource attchmachinery;

	[Token(Token = "0x400062F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool isStart_;

	[Token(Token = "0x4000630")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	public bool isStop_;

	[Token(Token = "0x6000442")]
	[Address(RVA = "0xA68154", Offset = "0xA68154", VA = "0xA68154")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000443")]
	[Address(RVA = "0xA682A0", Offset = "0xA682A0", VA = "0xA682A0")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000444")]
	[Address(RVA = "0xA682A4", Offset = "0xA682A4", VA = "0xA682A4")]
	private void AnimationSpeedChnage()
	{
	}

	[Token(Token = "0x6000445")]
	[Address(RVA = "0xA682A8", Offset = "0xA682A8", VA = "0xA682A8")]
	public void TractorStart()
	{
	}

	[Token(Token = "0x6000446")]
	[Address(RVA = "0xA6837C", Offset = "0xA6837C", VA = "0xA6837C")]
	public void TractorStop()
	{
	}

	[Token(Token = "0x6000447")]
	[Address(RVA = "0xA68448", Offset = "0xA68448", VA = "0xA68448")]
	public void TractorAttche()
	{
	}

	[Token(Token = "0x6000448")]
	[Address(RVA = "0xA6858C", Offset = "0xA6858C", VA = "0xA6858C")]
	public void TractorUse()
	{
	}

	[Token(Token = "0x6000449")]
	[Address(RVA = "0xA684D8", Offset = "0xA684D8", VA = "0xA684D8")]
	private void EnableEquipment(string name)
	{
	}

	[Token(Token = "0x600044A")]
	[Address(RVA = "0xA685C0", Offset = "0xA685C0", VA = "0xA685C0")]
	private void WaterShow(bool isWater)
	{
	}

	[Token(Token = "0x600044B")]
	[Address(RVA = "0xA68630", Offset = "0xA68630", VA = "0xA68630")]
	public void HornBlow()
	{
	}

	[Token(Token = "0x600044C")]
	[Address(RVA = "0xA68690", Offset = "0xA68690", VA = "0xA68690")]
	public void HornBlowUp()
	{
	}

	[Token(Token = "0x600044D")]
	[Address(RVA = "0xA686B8", Offset = "0xA686B8", VA = "0xA686B8")]
	public void HeadLightOnOff()
	{
	}

	[Token(Token = "0x600044E")]
	[Address(RVA = "0xA68704", Offset = "0xA68704", VA = "0xA68704")]
	public TractorController()
	{
	}
}
[Token(Token = "0x200010D")]
public class TractorFailure : MonoBehaviour
{
	[Token(Token = "0x4000631")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject failurePanel;

	[Token(Token = "0x600044F")]
	[Address(RVA = "0xA6870C", Offset = "0xA6870C", VA = "0xA6870C")]
	public void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000450")]
	[Address(RVA = "0xA688C8", Offset = "0xA688C8", VA = "0xA688C8")]
	public TractorFailure()
	{
	}
}
[Token(Token = "0x200010E")]
public class TractorTemprature : MonoBehaviour
{
	[Token(Token = "0x4000632")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float timerOverHeated;

	[Token(Token = "0x4000633")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float timeRemaining;

	[Token(Token = "0x4000634")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool timerIsRunning;

	[Token(Token = "0x4000635")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float MaxoverHeated;

	[Token(Token = "0x4000636")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Image imgOverHeatIndicator;

	[Token(Token = "0x4000637")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static TractorTemprature instance;

	[Token(Token = "0x4000638")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float curroverheated;

	[Token(Token = "0x6000451")]
	[Address(RVA = "0xA688D0", Offset = "0xA688D0", VA = "0xA688D0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000452")]
	[Address(RVA = "0xA68958", Offset = "0xA68958", VA = "0xA68958")]
	public void IsOverHeatedStart()
	{
	}

	[Token(Token = "0x6000453")]
	[Address(RVA = "0xA68964", Offset = "0xA68964", VA = "0xA68964")]
	public void IsOverHeatedStop()
	{
	}

	[Token(Token = "0x6000454")]
	[Address(RVA = "0xA6897C", Offset = "0xA6897C", VA = "0xA6897C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000455")]
	[Address(RVA = "0xA689D0", Offset = "0xA689D0", VA = "0xA689D0")]
	public void OverHeatedUI()
	{
	}

	[Token(Token = "0x6000456")]
	[Address(RVA = "0xA68A1C", Offset = "0xA68A1C", VA = "0xA68A1C")]
	public TractorTemprature()
	{
	}
}
[Token(Token = "0x200010F")]
public class UIRepairMain : MonoBehaviour
{
	[Token(Token = "0x4000639")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject btnRepair;

	[Token(Token = "0x400063A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject panelRepair;

	[Token(Token = "0x400063B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TextMeshProUGUI txtRepairamt;

	[Token(Token = "0x400063C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject txtmsg;

	[Token(Token = "0x6000457")]
	[Address(RVA = "0xA68A34", Offset = "0xA68A34", VA = "0xA68A34")]
	public void OnEnable()
	{
	}

	[Token(Token = "0x6000458")]
	[Address(RVA = "0xA68A6C", Offset = "0xA68A6C", VA = "0xA68A6C")]
	public void CheckDamageTractor(int currSelected)
	{
	}

	[Token(Token = "0x6000459")]
	[Address(RVA = "0xA68B40", Offset = "0xA68B40", VA = "0xA68B40")]
	public void OpenRepairPanel()
	{
	}

	[Token(Token = "0x600045A")]
	[Address(RVA = "0xA68CD0", Offset = "0xA68CD0", VA = "0xA68CD0")]
	public void onclickRepairComplete()
	{
	}

	[Token(Token = "0x600045B")]
	[Address(RVA = "0xA68E8C", Offset = "0xA68E8C", VA = "0xA68E8C")]
	public void onclickclose()
	{
	}

	[Token(Token = "0x600045C")]
	[Address(RVA = "0xA68EAC", Offset = "0xA68EAC", VA = "0xA68EAC")]
	public UIRepairMain()
	{
	}
}
[Token(Token = "0x2000110")]
public class UISetting : MonoBehaviour
{
	[Token(Token = "0x400063D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text txt_height;

	[Token(Token = "0x400063E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text txt_lr;

	[Token(Token = "0x400063F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text txt_fb;

	[Token(Token = "0x4000640")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float height;

	[Token(Token = "0x4000641")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float LRside;

	[Token(Token = "0x4000642")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float FBside;

	[Token(Token = "0x4000643")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public SetGetPlayerPosition playerpos;

	[Token(Token = "0x4000644")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float shiftvalue;

	[Token(Token = "0x600045D")]
	[Address(RVA = "0xA68EB4", Offset = "0xA68EB4", VA = "0xA68EB4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600045E")]
	[Address(RVA = "0xA68F94", Offset = "0xA68F94", VA = "0xA68F94")]
	public void PlayerPos_Incres(int value)
	{
	}

	[Token(Token = "0x600045F")]
	[Address(RVA = "0xA69098", Offset = "0xA69098", VA = "0xA69098")]
	public void PlayerPos_Decres(int value)
	{
	}

	[Token(Token = "0x6000460")]
	[Address(RVA = "0xA691A8", Offset = "0xA691A8", VA = "0xA691A8")]
	public void SavePositionData()
	{
	}

	[Token(Token = "0x6000461")]
	[Address(RVA = "0xA69258", Offset = "0xA69258", VA = "0xA69258")]
	public void GameStart()
	{
	}

	[Token(Token = "0x6000462")]
	[Address(RVA = "0xA692A8", Offset = "0xA692A8", VA = "0xA692A8")]
	public UISetting()
	{
	}
}
[Token(Token = "0x2000111")]
public class UITaskSelection : MonoBehaviour
{
	[Token(Token = "0x4000645")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject GridParent;

	[Token(Token = "0x4000646")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform[] TaskPanel;

	[Token(Token = "0x4000647")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int totalgrid;

	[Token(Token = "0x4000648")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEngine.UI.Button btnNext;

	[Token(Token = "0x4000649")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public UnityEngine.UI.Button btnPrev;

	[Token(Token = "0x400064A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int selectGrid;

	[Token(Token = "0x400064B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public SceneLoader sceneloader;

	[Token(Token = "0x400064C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public bool isTestMode;

	[Token(Token = "0x6000463")]
	[Address(RVA = "0xA692B0", Offset = "0xA692B0", VA = "0xA692B0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000464")]
	[Address(RVA = "0xA69358", Offset = "0xA69358", VA = "0xA69358")]
	public void setAllOff_Grid()
	{
	}

	[Token(Token = "0x6000465")]
	[Address(RVA = "0xA6964C", Offset = "0xA6964C", VA = "0xA6964C")]
	public void Next()
	{
	}

	[Token(Token = "0x6000466")]
	[Address(RVA = "0xA69704", Offset = "0xA69704", VA = "0xA69704")]
	public void Previous()
	{
	}

	[Token(Token = "0x6000467")]
	[Address(RVA = "0xA693D0", Offset = "0xA693D0", VA = "0xA693D0")]
	private void TaskAccessible()
	{
	}

	[Token(Token = "0x6000468")]
	[Address(RVA = "0xA697AC", Offset = "0xA697AC", VA = "0xA697AC")]
	public void TaskSelection(int taskNo)
	{
	}

	[Token(Token = "0x6000469")]
	[Address(RVA = "0xA698D4", Offset = "0xA698D4", VA = "0xA698D4")]
	public UITaskSelection()
	{
	}
}
[Token(Token = "0x2000112")]
public class UITaskSelection1 : MonoBehaviour
{
	[Token(Token = "0x400064D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEngine.UI.Button btnNext;

	[Token(Token = "0x400064E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEngine.UI.Button btnprev;

	[Token(Token = "0x400064F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject SubTask;

	[Token(Token = "0x4000650")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int totTask;

	[Token(Token = "0x4000651")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private int currGrid;

	[Token(Token = "0x4000652")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int prevGrid;

	[Token(Token = "0x4000653")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private int enableGrid;

	[Token(Token = "0x600046A")]
	[Address(RVA = "0xA698DC", Offset = "0xA698DC", VA = "0xA698DC")]
	public void OnEnable()
	{
	}

	[Token(Token = "0x600046B")]
	[Address(RVA = "0xA699F4", Offset = "0xA699F4", VA = "0xA699F4")]
	public void nextClick()
	{
	}

	[Token(Token = "0x600046C")]
	[Address(RVA = "0xA69BFC", Offset = "0xA69BFC", VA = "0xA69BFC")]
	public void prevScroll()
	{
	}

	[Token(Token = "0x600046D")]
	[Address(RVA = "0xA6A27C", Offset = "0xA6A27C", VA = "0xA6A27C")]
	public UITaskSelection1()
	{
	}
}
[Token(Token = "0x2000113")]
public class SeedingMachineJoint : MonoBehaviour
{
	[Token(Token = "0x600046E")]
	[Address(RVA = "0xA6A284", Offset = "0xA6A284", VA = "0xA6A284")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600046F")]
	[Address(RVA = "0xA6A37C", Offset = "0xA6A37C", VA = "0xA6A37C")]
	public SeedingMachineJoint()
	{
	}
}
[Token(Token = "0x2000114")]
public class SeedsTray : MonoBehaviour
{
	[Token(Token = "0x4000654")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static SeedsTray instance;

	[Token(Token = "0x4000655")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int TotalTray;

	[Token(Token = "0x4000656")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static int TotalFillTayCount;

	[Token(Token = "0x6000470")]
	[Address(RVA = "0xA6A384", Offset = "0xA6A384", VA = "0xA6A384")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000471")]
	[Address(RVA = "0xA6A444", Offset = "0xA6A444", VA = "0xA6A444")]
	public void AllSowingComplete()
	{
	}

	[Token(Token = "0x6000472")]
	[Address(RVA = "0xA6A4FC", Offset = "0xA6A4FC", VA = "0xA6A4FC")]
	public SeedsTray()
	{
	}
}
[Token(Token = "0x2000115")]
public class SliderValueSprite : MonoBehaviour
{
	[Token(Token = "0x4000657")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Sprite sprt_left;

	[Token(Token = "0x4000658")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Sprite sprt_right;

	[Token(Token = "0x4000659")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Image imgofbg;

	[Token(Token = "0x6000473")]
	[Address(RVA = "0xA6A504", Offset = "0xA6A504", VA = "0xA6A504")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000474")]
	[Address(RVA = "0xA6A710", Offset = "0xA6A710", VA = "0xA6A710")]
	public void OnFog()
	{
	}

	[Token(Token = "0x6000475")]
	[Address(RVA = "0xA6A80C", Offset = "0xA6A80C", VA = "0xA6A80C")]
	public void OffFog()
	{
	}

	[Token(Token = "0x6000476")]
	[Address(RVA = "0xA6A908", Offset = "0xA6A908", VA = "0xA6A908")]
	public void AutoGear()
	{
	}

	[Token(Token = "0x6000477")]
	[Address(RVA = "0xA6A98C", Offset = "0xA6A98C", VA = "0xA6A98C")]
	public void ManualGear()
	{
	}

	[Token(Token = "0x6000478")]
	[Address(RVA = "0xA6AA10", Offset = "0xA6AA10", VA = "0xA6AA10")]
	public void PlayerMoveSlide()
	{
	}

	[Token(Token = "0x6000479")]
	[Address(RVA = "0xA6AA94", Offset = "0xA6AA94", VA = "0xA6AA94")]
	public void PlayerMoveWalk()
	{
	}

	[Token(Token = "0x600047A")]
	[Address(RVA = "0xA6AB18", Offset = "0xA6AB18", VA = "0xA6AB18")]
	public SliderValueSprite()
	{
	}
}
[Token(Token = "0x2000116")]
public enum ObjectSoundsList
{
	[Token(Token = "0x400065B")]
	Cow,
	[Token(Token = "0x400065C")]
	Goat,
	[Token(Token = "0x400065D")]
	Crow,
	[Token(Token = "0x400065E")]
	Water,
	[Token(Token = "0x400065F")]
	Horse
}
[Token(Token = "0x2000117")]
public class SoundSystemManager : MonoBehaviour
{
	[Token(Token = "0x4000660")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static SoundSystemManager instance;

	[Token(Token = "0x4000661")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioSource OtherAudio;

	[Token(Token = "0x4000662")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioClip[] Cow;

	[Token(Token = "0x4000663")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioClip[] Goat;

	[Token(Token = "0x4000664")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AudioClip[] Crow;

	[Token(Token = "0x4000665")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AudioClip[] Horse;

	[Token(Token = "0x600047B")]
	[Address(RVA = "0xA6AB20", Offset = "0xA6AB20", VA = "0xA6AB20")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600047C")]
	[Address(RVA = "0xA6AB78", Offset = "0xA6AB78", VA = "0xA6AB78")]
	public void PlayObjectSound(ObjectSoundsList clipname)
	{
	}

	[Token(Token = "0x600047D")]
	[Address(RVA = "0xA6ADC4", Offset = "0xA6ADC4", VA = "0xA6ADC4")]
	public SoundSystemManager()
	{
	}
}
[Token(Token = "0x2000118")]
public class SowingAppleSeeds : MonoBehaviour
{
	[Token(Token = "0x4000666")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int TotalSeedsHole;

	[Token(Token = "0x4000667")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int TotalSeedsCount;

	[Token(Token = "0x4000668")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject go_seeds;

	[Token(Token = "0x600047E")]
	[Address(RVA = "0xA6ADCC", Offset = "0xA6ADCC", VA = "0xA6ADCC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600047F")]
	[Address(RVA = "0xA6AE70", Offset = "0xA6AE70", VA = "0xA6AE70")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000480")]
	[Address(RVA = "0xA6B298", Offset = "0xA6B298", VA = "0xA6B298")]
	private void CheckForTaskComplete(string seedsname)
	{
	}

	[Token(Token = "0x6000481")]
	[Address(RVA = "0xA6B3B0", Offset = "0xA6B3B0", VA = "0xA6B3B0")]
	public SowingAppleSeeds()
	{
	}
}
[Token(Token = "0x2000119")]
public class SowingOrangeSeed : MonoBehaviour
{
	[Token(Token = "0x4000669")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int TotalSeedsHole;

	[Token(Token = "0x400066A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int TotalSeedsCount;

	[Token(Token = "0x400066B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject go_seeds;

	[Token(Token = "0x6000482")]
	[Address(RVA = "0xA6B3B8", Offset = "0xA6B3B8", VA = "0xA6B3B8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000483")]
	[Address(RVA = "0xA6B45C", Offset = "0xA6B45C", VA = "0xA6B45C")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000484")]
	[Address(RVA = "0xA6B840", Offset = "0xA6B840", VA = "0xA6B840")]
	private void CheckForTaskComplete(string seedsname)
	{
	}

	[Token(Token = "0x6000485")]
	[Address(RVA = "0xA6B958", Offset = "0xA6B958", VA = "0xA6B958")]
	public SowingOrangeSeed()
	{
	}
}
[Token(Token = "0x200011A")]
public class SowingPumpkinSeeds : MonoBehaviour
{
	[Token(Token = "0x400066C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int TotalSeedsHole;

	[Token(Token = "0x400066D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int TotalSeedsCount;

	[Token(Token = "0x400066E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject go_seeds;

	[Token(Token = "0x6000486")]
	[Address(RVA = "0xA6B960", Offset = "0xA6B960", VA = "0xA6B960")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000487")]
	[Address(RVA = "0xA6BA04", Offset = "0xA6BA04", VA = "0xA6BA04")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000488")]
	[Address(RVA = "0xA6BDE8", Offset = "0xA6BDE8", VA = "0xA6BDE8")]
	private void CheckForTaskComplete(string seedsname)
	{
	}

	[Token(Token = "0x6000489")]
	[Address(RVA = "0xA6BF00", Offset = "0xA6BF00", VA = "0xA6BF00")]
	public SowingPumpkinSeeds()
	{
	}
}
[Token(Token = "0x200011B")]
public class SowingtometoSeeds : MonoBehaviour
{
	[Token(Token = "0x400066F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int TotalSeedsHole;

	[Token(Token = "0x4000670")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int TotalSeedsCount;

	[Token(Token = "0x4000671")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject go_seeds;

	[Token(Token = "0x600048A")]
	[Address(RVA = "0xA6BF08", Offset = "0xA6BF08", VA = "0xA6BF08")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600048B")]
	[Address(RVA = "0xA6BFAC", Offset = "0xA6BFAC", VA = "0xA6BFAC")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600048C")]
	[Address(RVA = "0xA6C390", Offset = "0xA6C390", VA = "0xA6C390")]
	private void CheckForTaskComplete(string seedsname)
	{
	}

	[Token(Token = "0x600048D")]
	[Address(RVA = "0xA6C4A8", Offset = "0xA6C4A8", VA = "0xA6C4A8")]
	public SowingtometoSeeds()
	{
	}
}
[Token(Token = "0x200011C")]
public class StandingPlayerHeadPosition : MonoBehaviour
{
	[Token(Token = "0x4000672")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform PlayerHead;

	[Token(Token = "0x4000673")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform AnimationHead;

	[Token(Token = "0x600048E")]
	[Address(RVA = "0xA6C4B0", Offset = "0xA6C4B0", VA = "0xA6C4B0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600048F")]
	[Address(RVA = "0xA6C554", Offset = "0xA6C554", VA = "0xA6C554")]
	public StandingPlayerHeadPosition()
	{
	}
}
[Token(Token = "0x200011D")]
public class StartStopObject : MonoBehaviour
{
	[Token(Token = "0x4000674")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Initial Y Position")]
	public float InitialYPosition;

	[Token(Token = "0x4000675")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float MinimumYPosition;

	[Token(Token = "0x4000676")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float MaximumYPosition;

	[Token(Token = "0x4000677")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Grabbable grab;

	[Token(Token = "0x4000678")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool isdone;

	[Token(Token = "0x6000490")]
	[Address(RVA = "0xA6C55C", Offset = "0xA6C55C", VA = "0xA6C55C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000491")]
	[Address(RVA = "0xA6C5B4", Offset = "0xA6C5B4", VA = "0xA6C5B4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000492")]
	[Address(RVA = "0xA6C630", Offset = "0xA6C630", VA = "0xA6C630")]
	private void Update()
	{
	}

	[Token(Token = "0x6000493")]
	[Address(RVA = "0xA6C840", Offset = "0xA6C840", VA = "0xA6C840", Slot = "4")]
	public virtual void SetHeightY(float heightY)
	{
	}

	[Token(Token = "0x6000494")]
	[Address(RVA = "0xA6C8D0", Offset = "0xA6C8D0", VA = "0xA6C8D0")]
	public StartStopObject()
	{
	}
}
[Token(Token = "0x200011E")]
public class SurfacePesticide : MonoBehaviour
{
	[Token(Token = "0x4000679")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int TotalNeedClean;

	[Token(Token = "0x400067A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int CleanCount;

	[Token(Token = "0x6000495")]
	[Address(RVA = "0xA6C8D8", Offset = "0xA6C8D8", VA = "0xA6C8D8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000496")]
	[Address(RVA = "0xA6C97C", Offset = "0xA6C97C", VA = "0xA6C97C")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000497")]
	[Address(RVA = "0xA6CA44", Offset = "0xA6CA44", VA = "0xA6CA44")]
	private void CheckCleanFinish()
	{
	}

	[Token(Token = "0x6000498")]
	[Address(RVA = "0xA6CBA0", Offset = "0xA6CBA0", VA = "0xA6CBA0")]
	public SurfacePesticide()
	{
	}
}
[Token(Token = "0x200011F")]
public class TableMonetDetection_2 : MonoBehaviour
{
	[Token(Token = "0x400067B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public WaterMachineShopKeeper waterscript;

	[Token(Token = "0x400067C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject UI_popup_1;

	[Token(Token = "0x400067D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject UI_popup_2;

	[Token(Token = "0x6000499")]
	[Address(RVA = "0xA6CBA8", Offset = "0xA6CBA8", VA = "0xA6CBA8")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600049A")]
	[Address(RVA = "0xA6CC98", Offset = "0xA6CC98", VA = "0xA6CC98")]
	public TableMonetDetection_2()
	{
	}
}
[Token(Token = "0x2000120")]
public class TableMoneyDetect : MonoBehaviour
{
	[Token(Token = "0x400067E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ChickenShopkeeper shopscript;

	[Token(Token = "0x400067F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject ui_popup;

	[Token(Token = "0x4000680")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TextMeshProUGUI txt_money_pay;

	[Token(Token = "0x600049B")]
	[Address(RVA = "0xA6CCA0", Offset = "0xA6CCA0", VA = "0xA6CCA0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600049C")]
	[Address(RVA = "0xA6CCFC", Offset = "0xA6CCFC", VA = "0xA6CCFC")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600049D")]
	[Address(RVA = "0xA6CE24", Offset = "0xA6CE24", VA = "0xA6CE24")]
	public TableMoneyDetect()
	{
	}
}
[Token(Token = "0x2000121")]
public class TestActivity : MonoBehaviour
{
	[Token(Token = "0x4000681")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static TestActivity instance;

	[Token(Token = "0x4000682")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] TotalTestLevel;

	[Token(Token = "0x4000683")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private string currentlevel;

	[Token(Token = "0x4000684")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private string totallevel;

	[Token(Token = "0x4000685")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int currentLevel;

	[Token(Token = "0x4000686")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public string[] Tasklist;

	[Token(Token = "0x4000687")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public TextMeshProUGUI txt_instruction;

	[Token(Token = "0x4000688")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject Go_complete;

	[Token(Token = "0x4000689")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public SceneLoader sceneloader;

	[Token(Token = "0x400068A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public string SceneName;

	[Token(Token = "0x600049E")]
	[Address(RVA = "0xA6CE2C", Offset = "0xA6CE2C", VA = "0xA6CE2C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600049F")]
	[Address(RVA = "0xA6CF28", Offset = "0xA6CF28", VA = "0xA6CF28")]
	public void TaskActivityComplete()
	{
	}

	[Token(Token = "0x60004A0")]
	[Address(RVA = "0xA6CFBC", Offset = "0xA6CFBC", VA = "0xA6CFBC")]
	public void NextTask()
	{
	}

	[Token(Token = "0x60004A1")]
	[Address(RVA = "0xA6CFE0", Offset = "0xA6CFE0", VA = "0xA6CFE0")]
	public TestActivity()
	{
	}
}
[Token(Token = "0x2000122")]
public class TestScriptNew : MonoBehaviour
{
	[Token(Token = "0x400068B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform parent;

	[Token(Token = "0x400068C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform child;

	[Token(Token = "0x60004A2")]
	[Address(RVA = "0xA6D064", Offset = "0xA6D064", VA = "0xA6D064")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60004A3")]
	[Address(RVA = "0xA6D088", Offset = "0xA6D088", VA = "0xA6D088")]
	public TestScriptNew()
	{
	}
}
[Token(Token = "0x2000123")]
public class TotalCoin : MonoBehaviour
{
	[Token(Token = "0x400068D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private TextMeshProUGUI txt_coin;

	[Token(Token = "0x60004A4")]
	[Address(RVA = "0xA6D090", Offset = "0xA6D090", VA = "0xA6D090")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60004A5")]
	[Address(RVA = "0xA6D0E8", Offset = "0xA6D0E8", VA = "0xA6D0E8")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60004A6")]
	[Address(RVA = "0xA6D1A8", Offset = "0xA6D1A8", VA = "0xA6D1A8")]
	public TotalCoin()
	{
	}
}
[Token(Token = "0x2000124")]
public class TotalFieldTileScript : MonoBehaviour
{
	[Token(Token = "0x400068E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private FarmGrowScript[] totaltile;

	[Token(Token = "0x400068F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int Totaltilecount;

	[Token(Token = "0x4000690")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static int countfill;

	[Token(Token = "0x4000691")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject SeedingDone;

	[Token(Token = "0x60004A7")]
	[Address(RVA = "0xA6D1B0", Offset = "0xA6D1B0", VA = "0xA6D1B0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60004A8")]
	[Address(RVA = "0xA6D284", Offset = "0xA6D284", VA = "0xA6D284")]
	public TotalFieldTileScript()
	{
	}
}
[Token(Token = "0x2000125")]
public class TotalInjectionToGive : MonoBehaviour
{
	[Token(Token = "0x4000692")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static TotalInjectionToGive instance;

	[Token(Token = "0x4000693")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int TotalAnimalForVaccin;

	[Token(Token = "0x4000694")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private int TotalInjections;

	[Token(Token = "0x4000695")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static int TotalInjectionUse;

	[Token(Token = "0x4000696")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public static int AnimalVaccineComplete;

	[Token(Token = "0x4000697")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform AnimalsParent;

	[Token(Token = "0x60004A9")]
	[Address(RVA = "0xA6D28C", Offset = "0xA6D28C", VA = "0xA6D28C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60004AA")]
	[Address(RVA = "0xA6D39C", Offset = "0xA6D39C", VA = "0xA6D39C")]
	public void InjectionUsedCount()
	{
	}

	[Token(Token = "0x60004AB")]
	[Address(RVA = "0xA6D464", Offset = "0xA6D464", VA = "0xA6D464")]
	public void TotalVaccinatedAnimal()
	{
	}

	[Token(Token = "0x60004AC")]
	[Address(RVA = "0xA6D544", Offset = "0xA6D544", VA = "0xA6D544")]
	public TotalInjectionToGive()
	{
	}
}
[Token(Token = "0x2000126")]
public class TotalPesticideFarmTile : MonoBehaviour
{
	[Token(Token = "0x4000698")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private DroneWatering[] TotalTileForPesticide;

	[Token(Token = "0x4000699")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int Totaltilecount;

	[Token(Token = "0x400069A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static int countfill;

	[Token(Token = "0x60004AD")]
	[Address(RVA = "0xA6D54C", Offset = "0xA6D54C", VA = "0xA6D54C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60004AE")]
	[Address(RVA = "0xA6D60C", Offset = "0xA6D60C", VA = "0xA6D60C")]
	public TotalPesticideFarmTile()
	{
	}
}
[Token(Token = "0x2000127")]
public class TractorCollideSound : MonoBehaviour
{
	[Token(Token = "0x400069B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioSource touch_sound;

	[Token(Token = "0x60004AF")]
	[Address(RVA = "0xA6D614", Offset = "0xA6D614", VA = "0xA6D614")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60004B0")]
	[Address(RVA = "0xA6D644", Offset = "0xA6D644", VA = "0xA6D644")]
	public TractorCollideSound()
	{
	}
}
[Token(Token = "0x2000128")]
public class TractorFuel : MonoBehaviour
{
	[Token(Token = "0x400069C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float maxFuel;

	[Token(Token = "0x400069D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float startFuel;

	[Token(Token = "0x400069E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float fuelConsumtionRate;

	[Token(Token = "0x400069F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool hasFuel;

	[Token(Token = "0x40006A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool isFuelconsume;

	[Token(Token = "0x40006A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static TractorFuel instance;

	[Token(Token = "0x40006A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject imgFuelindicator;

	[Token(Token = "0x60004B1")]
	[Address(RVA = "0xA6D64C", Offset = "0xA6D64C", VA = "0xA6D64C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60004B2")]
	[Address(RVA = "0xA6D754", Offset = "0xA6D754", VA = "0xA6D754")]
	private void ReduceFuel()
	{
	}

	[Token(Token = "0x60004B3")]
	[Address(RVA = "0xA6D6EC", Offset = "0xA6D6EC", VA = "0xA6D6EC")]
	private void updateUI()
	{
	}

	[Token(Token = "0x60004B4")]
	[Address(RVA = "0xA6D794", Offset = "0xA6D794", VA = "0xA6D794")]
	private void CheckfuelAvailable()
	{
	}

	[Token(Token = "0x60004B5")]
	[Address(RVA = "0xA6D8E4", Offset = "0xA6D8E4", VA = "0xA6D8E4")]
	public void Update()
	{
	}

	[Token(Token = "0x60004B6")]
	[Address(RVA = "0xA6D94C", Offset = "0xA6D94C", VA = "0xA6D94C")]
	public void RefillFuel(int liter)
	{
	}

	[Token(Token = "0x60004B7")]
	[Address(RVA = "0xA6D870", Offset = "0xA6D870", VA = "0xA6D870")]
	public void Fuelfinished()
	{
	}

	[Token(Token = "0x60004B8")]
	[Address(RVA = "0xA6C7A8", Offset = "0xA6C7A8", VA = "0xA6C7A8")]
	public void onstartcheckFuel()
	{
	}

	[Token(Token = "0x60004B9")]
	[Address(RVA = "0xA6DA14", Offset = "0xA6DA14", VA = "0xA6DA14")]
	public TractorFuel()
	{
	}
}
[Token(Token = "0x2000129")]
public class TrailerInjectBoxCount : MonoBehaviour
{
	[Token(Token = "0x40006A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] Injectionbox;

	[Token(Token = "0x40006A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int TotalCanUnload;

	[Token(Token = "0x40006A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private int TotalUnloadNeed;

	[Token(Token = "0x60004BA")]
	[Address(RVA = "0xA6DA1C", Offset = "0xA6DA1C", VA = "0xA6DA1C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60004BB")]
	[Address(RVA = "0xA6DA88", Offset = "0xA6DA88", VA = "0xA6DA88")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60004BC")]
	[Address(RVA = "0xA6DAEC", Offset = "0xA6DAEC", VA = "0xA6DAEC")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60004BD")]
	[Address(RVA = "0xA6DCFC", Offset = "0xA6DCFC", VA = "0xA6DCFC")]
	private void CheckForNextPhase()
	{
	}

	[Token(Token = "0x60004BE")]
	[Address(RVA = "0xA6DD9C", Offset = "0xA6DD9C", VA = "0xA6DD9C")]
	public TrailerInjectBoxCount()
	{
	}
}
[Token(Token = "0x200012A")]
public class TrailerJointScript : MonoBehaviour
{
	[Token(Token = "0x40006A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject Trailer_Scene;

	[Token(Token = "0x40006A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject Trailer_Tractor;

	[Token(Token = "0x40006A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject Target;

	[Token(Token = "0x40006A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AudioSource LorryJoint;

	[Token(Token = "0x60004BF")]
	[Address(RVA = "0xA6DDA4", Offset = "0xA6DDA4", VA = "0xA6DDA4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60004C0")]
	[Address(RVA = "0xA6DDDC", Offset = "0xA6DDDC", VA = "0xA6DDDC")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60004C1")]
	[Address(RVA = "0xA6DFB8", Offset = "0xA6DFB8", VA = "0xA6DFB8")]
	public TrailerJointScript()
	{
	}
}
[Token(Token = "0x200012B")]
public class TressBaseWatering : MonoBehaviour
{
	[Token(Token = "0x200012C")]
	[CompilerGenerated]
	private sealed class <waitDisableOutline>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40006AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40006B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40006B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject outlineobj;

		[Token(Token = "0x40006B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TressBaseWatering <>4__this;

		[Token(Token = "0x1700002C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60004C9")]
			[Address(RVA = "0xA6E46C", Offset = "0xA6E46C", VA = "0xA6E46C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700002D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60004CB")]
			[Address(RVA = "0xA6E4B4", Offset = "0xA6E4B4", VA = "0xA6E4B4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60004C6")]
		[Address(RVA = "0xA6E344", Offset = "0xA6E344", VA = "0xA6E344")]
		[DebuggerHidden]
		public <waitDisableOutline>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x60004C7")]
		[Address(RVA = "0xA6E374", Offset = "0xA6E374", VA = "0xA6E374", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60004C8")]
		[Address(RVA = "0xA6E378", Offset = "0xA6E378", VA = "0xA6E378", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60004CA")]
		[Address(RVA = "0xA6E474", Offset = "0xA6E474", VA = "0xA6E474", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40006AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform WaterBase;

	[Token(Token = "0x40006AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform TreeBase;

	[Token(Token = "0x40006AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float WaterBaseheight;

	[Token(Token = "0x40006AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int TotalWateringComplete;

	[Token(Token = "0x40006AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private bool WaterNeed;

	[Token(Token = "0x60004C2")]
	[Address(RVA = "0xA6DFC0", Offset = "0xA6DFC0", VA = "0xA6DFC0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60004C3")]
	[Address(RVA = "0xA6E014", Offset = "0xA6E014", VA = "0xA6E014")]
	private void OnTriggerStay(Collider other)
	{
	}

	[Token(Token = "0x60004C4")]
	[Address(RVA = "0xA6E2B4", Offset = "0xA6E2B4", VA = "0xA6E2B4")]
	[IteratorStateMachine(typeof(<waitDisableOutline>d__7))]
	private IEnumerator waitDisableOutline(GameObject outlineobj)
	{
		return null;
	}

	[Token(Token = "0x60004C5")]
	[Address(RVA = "0xA6E36C", Offset = "0xA6E36C", VA = "0xA6E36C")]
	public TressBaseWatering()
	{
	}
}
[Token(Token = "0x200012D")]
public class TrolleyMilkCane : MonoBehaviour
{
	[Token(Token = "0x40006B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int TotalCane;

	[Token(Token = "0x40006B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int NeededCan;

	[Token(Token = "0x60004CC")]
	[Address(RVA = "0xA6E4BC", Offset = "0xA6E4BC", VA = "0xA6E4BC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60004CD")]
	[Address(RVA = "0xA6E4C4", Offset = "0xA6E4C4", VA = "0xA6E4C4")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60004CE")]
	[Address(RVA = "0xA6E764", Offset = "0xA6E764", VA = "0xA6E764")]
	public TrolleyMilkCane()
	{
	}
}
[Token(Token = "0x200012E")]
public class TrolleyMovement : MonoBehaviour, IConstraint
{
	[Token(Token = "0x40006B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform target;

	[Token(Token = "0x40006B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float MinimumYRotation;

	[Token(Token = "0x40006B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float MaximumYRotation;

	[Token(Token = "0x1700002E")]
	public float weight
	{
		[Token(Token = "0x60004CF")]
		[Address(RVA = "0xA6E76C", Offset = "0xA6E76C", VA = "0xA6E76C", Slot = "4")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60004D0")]
		[Address(RVA = "0xA6E7AC", Offset = "0xA6E7AC", VA = "0xA6E7AC", Slot = "5")]
		set
		{
		}
	}

	[Token(Token = "0x1700002F")]
	public bool constraintActive
	{
		[Token(Token = "0x60004D1")]
		[Address(RVA = "0xA6E7EC", Offset = "0xA6E7EC", VA = "0xA6E7EC", Slot = "6")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60004D2")]
		[Address(RVA = "0xA6E82C", Offset = "0xA6E82C", VA = "0xA6E82C", Slot = "7")]
		set
		{
		}
	}

	[Token(Token = "0x17000030")]
	public bool locked
	{
		[Token(Token = "0x60004D3")]
		[Address(RVA = "0xA6E86C", Offset = "0xA6E86C", VA = "0xA6E86C", Slot = "8")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60004D4")]
		[Address(RVA = "0xA6E8AC", Offset = "0xA6E8AC", VA = "0xA6E8AC", Slot = "9")]
		set
		{
		}
	}

	[Token(Token = "0x17000031")]
	public int sourceCount
	{
		[Token(Token = "0x60004D5")]
		[Address(RVA = "0xA6E8EC", Offset = "0xA6E8EC", VA = "0xA6E8EC", Slot = "10")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x60004D6")]
	[Address(RVA = "0xA6E92C", Offset = "0xA6E92C", VA = "0xA6E92C", Slot = "11")]
	public int AddSource(ConstraintSource source)
	{
		return default(int);
	}

	[Token(Token = "0x60004D7")]
	[Address(RVA = "0xA6E96C", Offset = "0xA6E96C", VA = "0xA6E96C", Slot = "12")]
	public ConstraintSource GetSource(int index)
	{
		return default(ConstraintSource);
	}

	[Token(Token = "0x60004D8")]
	[Address(RVA = "0xA6E9AC", Offset = "0xA6E9AC", VA = "0xA6E9AC", Slot = "13")]
	public void GetSources(List<ConstraintSource> sources)
	{
	}

	[Token(Token = "0x60004D9")]
	[Address(RVA = "0xA6E9EC", Offset = "0xA6E9EC", VA = "0xA6E9EC", Slot = "14")]
	public void RemoveSource(int index)
	{
	}

	[Token(Token = "0x60004DA")]
	[Address(RVA = "0xA6EA2C", Offset = "0xA6EA2C", VA = "0xA6EA2C", Slot = "15")]
	public void SetSource(int index, ConstraintSource source)
	{
	}

	[Token(Token = "0x60004DB")]
	[Address(RVA = "0xA6EA6C", Offset = "0xA6EA6C", VA = "0xA6EA6C", Slot = "16")]
	public void SetSources(List<ConstraintSource> sources)
	{
	}

	[Token(Token = "0x60004DC")]
	[Address(RVA = "0xA6EAAC", Offset = "0xA6EAAC", VA = "0xA6EAAC")]
	private void Update()
	{
	}

	[Token(Token = "0x60004DD")]
	[Address(RVA = "0xA6EB4C", Offset = "0xA6EB4C", VA = "0xA6EB4C")]
	public TrolleyMovement()
	{
	}
}
[Serializable]
[Token(Token = "0x200012F")]
public class TractorParts
{
	[Token(Token = "0x40006B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public GameObject SeatAdjust;

	[Token(Token = "0x40006B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject MirrorAdjust;

	[Token(Token = "0x40006BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject StartButton;

	[Token(Token = "0x40006BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject GearSystem;

	[Token(Token = "0x40006BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject Steering;

	[Token(Token = "0x40006BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject Lever;

	[Token(Token = "0x40006BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject Handbreck;

	[Token(Token = "0x40006BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject StopButton;

	[Token(Token = "0x40006C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject HelpButton;

	[Token(Token = "0x40006C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject SteerHeight;

	[Token(Token = "0x40006C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Grabbable Seat_;

	[Token(Token = "0x40006C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Grabbable Mirror_;

	[Token(Token = "0x40006C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Grabbable Gear_;

	[Token(Token = "0x40006C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Grabbable Steer_;

	[Token(Token = "0x40006C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Grabbable Lever_;

	[Token(Token = "0x40006C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Grabbable Hand_;

	[Token(Token = "0x40006C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Grabbable Start_;

	[Token(Token = "0x40006C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Grabbable Stop_;

	[Token(Token = "0x40006CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Grabbable Help_;

	[Token(Token = "0x40006CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public Grabbable SteerHeight_;

	[Token(Token = "0x40006CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public JointHelper Start_y;

	[Token(Token = "0x40006CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public JointHelper Stop_y;

	[Token(Token = "0x40006CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public JointHelper Help_y;

	[Token(Token = "0x60004DE")]
	[Address(RVA = "0xA6EB54", Offset = "0xA6EB54", VA = "0xA6EB54")]
	public TractorParts()
	{
	}
}
[Token(Token = "0x2000130")]
public class TutorialManager : MonoBehaviour
{
	[Token(Token = "0x2000131")]
	[CompilerGenerated]
	private sealed class <waitAndEnableseat>d__41 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40006F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40006F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40006F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TutorialManager <>4__this;

		[Token(Token = "0x17000032")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60004EE")]
			[Address(RVA = "0xA700E0", Offset = "0xA700E0", VA = "0xA700E0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000033")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60004F0")]
			[Address(RVA = "0xA70128", Offset = "0xA70128", VA = "0xA70128", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60004EB")]
		[Address(RVA = "0xA6F058", Offset = "0xA6F058", VA = "0xA6F058")]
		[DebuggerHidden]
		public <waitAndEnableseat>d__41(int <>1__state)
		{
		}

		[Token(Token = "0x60004EC")]
		[Address(RVA = "0xA6FFF8", Offset = "0xA6FFF8", VA = "0xA6FFF8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60004ED")]
		[Address(RVA = "0xA6FFFC", Offset = "0xA6FFFC", VA = "0xA6FFFC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60004EF")]
		[Address(RVA = "0xA700E8", Offset = "0xA700E8", VA = "0xA700E8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000132")]
	[CompilerGenerated]
	private sealed class <WaitForNext>d__44 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40006FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40006FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40006FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float t;

		[Token(Token = "0x40006FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TutorialManager <>4__this;

		[Token(Token = "0x40006FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject go;

		[Token(Token = "0x40006FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string msg;

		[Token(Token = "0x4000700")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Grabbable grab;

		[Token(Token = "0x4000701")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public AudioClip clip;

		[Token(Token = "0x4000702")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public string header;

		[Token(Token = "0x4000703")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Sprite icon;

		[Token(Token = "0x17000034")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60004F4")]
			[Address(RVA = "0xA70274", Offset = "0xA70274", VA = "0xA70274", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000035")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60004F6")]
			[Address(RVA = "0xA702BC", Offset = "0xA702BC", VA = "0xA702BC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60004F1")]
		[Address(RVA = "0xA6FF58", Offset = "0xA6FF58", VA = "0xA6FF58")]
		[DebuggerHidden]
		public <WaitForNext>d__44(int <>1__state)
		{
		}

		[Token(Token = "0x60004F2")]
		[Address(RVA = "0xA70130", Offset = "0xA70130", VA = "0xA70130", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60004F3")]
		[Address(RVA = "0xA70134", Offset = "0xA70134", VA = "0xA70134", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60004F5")]
		[Address(RVA = "0xA7027C", Offset = "0xA7027C", VA = "0xA7027C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40006CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject ui_tutorialscreen;

	[Token(Token = "0x40006D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextMeshProUGUI txt_instruction;

	[Token(Token = "0x40006D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TextMeshProUGUI txt_header;

	[Token(Token = "0x40006D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject HighlightEffect;

	[Token(Token = "0x40006D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Outline _goHighlight;

	[Token(Token = "0x40006D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public TractorParts Parts;

	[Token(Token = "0x40006D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool isSeatAdjust;

	[Token(Token = "0x40006D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
	public static bool isMirrorAdjust;

	[Token(Token = "0x40006D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
	public static bool isStart;

	[Token(Token = "0x40006D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3")]
	public static bool isGearchange;

	[Token(Token = "0x40006D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static bool isSterring;

	[Token(Token = "0x40006DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5")]
	public static bool isLever;

	[Token(Token = "0x40006DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6")]
	public static bool isHandbreck;

	[Token(Token = "0x40006DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7")]
	public static bool isStop;

	[Token(Token = "0x40006DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static bool isHelp;

	[Token(Token = "0x40006DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
	public static bool isSteerAdjust;

	[Token(Token = "0x40006DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool isSeatAdjust_;

	[Token(Token = "0x40006E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	private bool isMirrorAdjust_;

	[Token(Token = "0x40006E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
	private bool isStart_;

	[Token(Token = "0x40006E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4B")]
	private bool isGearchange_;

	[Token(Token = "0x40006E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private bool isSteering_;

	[Token(Token = "0x40006E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
	private bool isLever_;

	[Token(Token = "0x40006E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4E")]
	private bool isHandbreck_;

	[Token(Token = "0x40006E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4F")]
	private bool isStop_;

	[Token(Token = "0x40006E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool isHelp_;

	[Token(Token = "0x40006E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
	private bool isSteerAdjust_;

	[Token(Token = "0x40006E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public SceneLoader sceneloader;

	[Token(Token = "0x40006EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public AudioSource audio_instruction;

	[Token(Token = "0x40006EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public AudioClip[] audio_clips;

	[Token(Token = "0x40006EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public GameObject tutorialArrow;

	[Token(Token = "0x40006ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private bool isGotit;

	[Token(Token = "0x40006EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public GameObject BPress;

	[Token(Token = "0x40006EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private bool isCanStop;

	[Token(Token = "0x40006F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public GameObject btn_Next;

	[Token(Token = "0x40006F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public GameObject txt_start;

	[Token(Token = "0x40006F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public GameObject txt_next;

	[Token(Token = "0x40006F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public GameObject img_icon;

	[Token(Token = "0x40006F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public Sprite[] InstructionIcon;

	[Token(Token = "0x40006F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public Sprite[] imgLever;

	[Token(Token = "0x40006F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public Sprite[] imgSeat;

	[Token(Token = "0x60004DF")]
	[Address(RVA = "0xA6EB5C", Offset = "0xA6EB5C", VA = "0xA6EB5C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60004E0")]
	[Address(RVA = "0xA6ED28", Offset = "0xA6ED28", VA = "0xA6ED28")]
	private void ResetAll()
	{
	}

	[Token(Token = "0x60004E1")]
	[Address(RVA = "0xA6EE9C", Offset = "0xA6EE9C", VA = "0xA6EE9C")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60004E2")]
	[Address(RVA = "0xA6EFE4", Offset = "0xA6EFE4", VA = "0xA6EFE4")]
	[IteratorStateMachine(typeof(<waitAndEnableseat>d__41))]
	private IEnumerator waitAndEnableseat()
	{
		return null;
	}

	[Token(Token = "0x60004E3")]
	[Address(RVA = "0xA6F080", Offset = "0xA6F080", VA = "0xA6F080")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60004E4")]
	[Address(RVA = "0xA6FA28", Offset = "0xA6FA28", VA = "0xA6FA28")]
	private void GiveInstruction(GameObject go, string msg, Grabbable grab, AudioClip clip, string header, Sprite icon)
	{
	}

	[Token(Token = "0x60004E5")]
	[Address(RVA = "0xA6ED88", Offset = "0xA6ED88", VA = "0xA6ED88")]
	[IteratorStateMachine(typeof(<WaitForNext>d__44))]
	private IEnumerator WaitForNext(float t, GameObject go, string msg, Grabbable grab, AudioClip clip, string header, Sprite icon)
	{
		return null;
	}

	[Token(Token = "0x60004E6")]
	[Address(RVA = "0xA6FF80", Offset = "0xA6FF80", VA = "0xA6FF80")]
	public void InstructionGetHold()
	{
	}

	[Token(Token = "0x60004E7")]
	[Address(RVA = "0xA6FF8C", Offset = "0xA6FF8C", VA = "0xA6FF8C")]
	public void InstructionGetRelease()
	{
	}

	[Token(Token = "0x60004E8")]
	[Address(RVA = "0xA6FF94", Offset = "0xA6FF94", VA = "0xA6FF94")]
	public void SpeechClip()
	{
	}

	[Token(Token = "0x60004E9")]
	[Address(RVA = "0xA6FE24", Offset = "0xA6FE24", VA = "0xA6FE24")]
	public void PicoDeviceRefrence(Image imgChangeable, bool isleverimg)
	{
	}

	[Token(Token = "0x60004EA")]
	[Address(RVA = "0xA6FFE4", Offset = "0xA6FFE4", VA = "0xA6FFE4")]
	public TutorialManager()
	{
	}
}
[Token(Token = "0x2000133")]
public class UICategoryWiseSelection : MonoBehaviour
{
	[StructLayout(3)]
	[Token(Token = "0x2000134")]
	[CompilerGenerated]
	private struct <Start>d__21 : IAsyncStateMachine
	{
		[Token(Token = "0x4000718")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int <>1__state;

		[Token(Token = "0x4000719")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AsyncVoidMethodBuilder <>t__builder;

		[Token(Token = "0x400071A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private TaskAwaiter <>u__1;

		[Token(Token = "0x400071B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private TaskAwaiter<List<string>> <>u__2;

		[Token(Token = "0x6000508")]
		[Address(RVA = "0xA7173C", Offset = "0xA7173C", VA = "0xA7173C", Slot = "4")]
		private void MoveNext()
		{
		}

		[Token(Token = "0x6000509")]
		[Address(RVA = "0xA71B08", Offset = "0xA71B08", VA = "0xA71B08", Slot = "5")]
		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
		}
	}

	[Token(Token = "0x4000704")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject GridParent;

	[Token(Token = "0x4000705")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int totalgrid;

	[Token(Token = "0x4000706")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEngine.UI.Button btnNext;

	[Token(Token = "0x4000707")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEngine.UI.Button btnPrev;

	[Token(Token = "0x4000708")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int selectGrid;

	[Token(Token = "0x4000709")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public SceneLoader sceneloader;

	[Token(Token = "0x400070A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool isTestMode;

	[Token(Token = "0x400070B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Transform[] LevelList;

	[Token(Token = "0x400070C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Transform[] SubLevelList;

	[Token(Token = "0x400070D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private GameObject SubLevel_GO;

	[Token(Token = "0x400070E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private int CurrentLevelSel_;

	[Token(Token = "0x400070F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public GameObject GO_Mainlevel;

	[Token(Token = "0x4000710")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public GameObject GO_Sublevel;

	[Token(Token = "0x4000711")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private int currentsublevelcat;

	[Token(Token = "0x4000712")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public GameObject panelUnlockCat;

	[Token(Token = "0x4000713")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public int[] CatUnlockCost;

	[Token(Token = "0x4000714")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public TextMeshProUGUI txtunlockamt;

	[Token(Token = "0x4000715")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public TextMeshProUGUI txtmsg;

	[Token(Token = "0x4000716")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int catno_;

	[Token(Token = "0x4000717")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private int prevGrid;

	[Token(Token = "0x60004F7")]
	[Address(RVA = "0xA702C4", Offset = "0xA702C4", VA = "0xA702C4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60004F8")]
	[Address(RVA = "0xA70700", Offset = "0xA70700", VA = "0xA70700")]
	private void Awake()
	{
	}

	[Token(Token = "0x60004F9")]
	[Address(RVA = "0xA70720", Offset = "0xA70720", VA = "0xA70720")]
	[AsyncStateMachine(typeof(<Start>d__21))]
	private void Start()
	{
	}

	[Token(Token = "0x60004FA")]
	[Address(RVA = "0xA707BC", Offset = "0xA707BC", VA = "0xA707BC")]
	public void DefaultSelection(int catNo)
	{
	}

	[Token(Token = "0x60004FB")]
	[Address(RVA = "0xA7095C", Offset = "0xA7095C", VA = "0xA7095C")]
	public void onclickprev()
	{
	}

	[Token(Token = "0x60004FC")]
	[Address(RVA = "0xA70BA8", Offset = "0xA70BA8", VA = "0xA70BA8")]
	public void onclickNext()
	{
	}

	[Token(Token = "0x60004FD")]
	[Address(RVA = "0xA70D28", Offset = "0xA70D28", VA = "0xA70D28")]
	private void setAllOff_Grid(int catno)
	{
	}

	[Token(Token = "0x60004FE")]
	[Address(RVA = "0xA70388", Offset = "0xA70388", VA = "0xA70388")]
	private void CategotyAccessible()
	{
	}

	[Token(Token = "0x60004FF")]
	[Address(RVA = "0xA70DCC", Offset = "0xA70DCC", VA = "0xA70DCC")]
	public void CategorySelection(int cat_no)
	{
	}

	[Token(Token = "0x6000500")]
	[Address(RVA = "0xA70690", Offset = "0xA70690", VA = "0xA70690")]
	private void SubCategoryOff()
	{
	}

	[Token(Token = "0x6000501")]
	[Address(RVA = "0xA71344", Offset = "0xA71344", VA = "0xA71344")]
	public void SubBack()
	{
	}

	[Token(Token = "0x6000502")]
	[Address(RVA = "0xA70F2C", Offset = "0xA70F2C", VA = "0xA70F2C")]
	private void SubCategoryAccesible()
	{
	}

	[Token(Token = "0x6000503")]
	[Address(RVA = "0xA713BC", Offset = "0xA713BC", VA = "0xA713BC")]
	public void OpenUnlockPanel(int catno)
	{
	}

	[Token(Token = "0x6000504")]
	[Address(RVA = "0xA714AC", Offset = "0xA714AC", VA = "0xA714AC")]
	public void CloseUnlockPanel()
	{
	}

	[Token(Token = "0x6000505")]
	[Address(RVA = "0xA714CC", Offset = "0xA714CC", VA = "0xA714CC")]
	public void UnlockCategory()
	{
	}

	[Token(Token = "0x6000506")]
	[Address(RVA = "0xA7160C", Offset = "0xA7160C", VA = "0xA7160C")]
	public void SubCategorySelection(int sub_no)
	{
	}

	[Token(Token = "0x6000507")]
	[Address(RVA = "0xA71734", Offset = "0xA71734", VA = "0xA71734")]
	public UICategoryWiseSelection()
	{
	}
}
[Token(Token = "0x2000135")]
public class UIGameplay : MonoBehaviour
{
	[Token(Token = "0x400071C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static UIGameplay instance;

	[Token(Token = "0x400071D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject UI_warningMsg;

	[Token(Token = "0x400071E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject UI_help;

	[Token(Token = "0x400071F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject UI_GameEnd;

	[Token(Token = "0x4000720")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject UI_taskinstruction;

	[Token(Token = "0x4000721")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject UI_gearshift;

	[Token(Token = "0x4000722")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject ui_seeding;

	[Token(Token = "0x4000723")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject UI_exitgame;

	[Token(Token = "0x4000724")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject UI_Tutorial;

	[Token(Token = "0x4000725")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject UI_watering;

	[Token(Token = "0x4000726")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public GameObject UI_fuelFinish;

	[Token(Token = "0x4000727")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public GameObject UI_refillFuel;

	[Token(Token = "0x4000728")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public GameObject UI_repairPanel;

	[Token(Token = "0x4000729")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public SceneLoader sceneloader;

	[Token(Token = "0x400072A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static bool isLevelFail;

	[Token(Token = "0x400072B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
	public static bool isLevelFinish;

	[Token(Token = "0x400072C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public TextMeshProUGUI txt_greeting;

	[Token(Token = "0x400072D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public TextMeshProUGUI txt_instruction;

	[Token(Token = "0x400072E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public TextMeshProUGUI txt_instruction_;

	[Token(Token = "0x400072F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public TextMeshProUGUI txt_greetingLast;

	[Token(Token = "0x4000730")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public TextMeshProUGUI txt_job;

	[Token(Token = "0x4000731")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public Image fill_accuracy;

	[Token(Token = "0x4000732")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private int nextLevel;

	[Token(Token = "0x4000733")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	private int nextSubLevel;

	[Token(Token = "0x4000734")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public string ReasontoFail;

	[Token(Token = "0x4000735")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public GearShifting vhcl;

	[Token(Token = "0x4000736")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public GameObject btn_next;

	[Token(Token = "0x4000737")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public GameObject btn_replay;

	[Token(Token = "0x4000738")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public GameObject btn_back;

	[Token(Token = "0x4000739")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public GameObject btn_task;

	[Token(Token = "0x400073A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public GameObject btn_skiplvl;

	[Token(Token = "0x400073B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public TextMeshProUGUI txt_totalcoin_last;

	[Token(Token = "0x400073C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public TextMeshProUGUI txt_getcoin_last;

	[Token(Token = "0x400073D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public TextMeshProUGUI txt_totalcoin;

	[Token(Token = "0x400073E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public TextMeshProUGUI txt_getcoin;

	[Token(Token = "0x400073F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public UnityEngine.UI.Slider _brightness;

	[Token(Token = "0x4000740")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public Light lightMain;

	[Token(Token = "0x4000741")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public GameObject btnpurFuel;

	[Token(Token = "0x4000742")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	public GameObject objpenaltycoin;

	[Token(Token = "0x4000743")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	public TextMeshProUGUI txtFuelmoney;

	[Token(Token = "0x4000744")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public TextMeshProUGUI txtfuelLiter;

	[Token(Token = "0x4000745")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static string prevpanel;

	[Token(Token = "0x4000746")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public TextMeshProUGUI txtRepairAmount;

	[Token(Token = "0x4000747")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public GameObject txtMsg;

	[Token(Token = "0x4000748")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	private int totalGetCoin;

	[Token(Token = "0x4000749")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
	private bool isenoughcoin;

	[Token(Token = "0x600050A")]
	[Address(RVA = "0xA71B14", Offset = "0xA71B14", VA = "0xA71B14")]
	public void BrightnessValues()
	{
	}

	[Token(Token = "0x600050B")]
	[Address(RVA = "0xA71B94", Offset = "0xA71B94", VA = "0xA71B94")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600050C")]
	[Address(RVA = "0xA723A0", Offset = "0xA723A0", VA = "0xA723A0")]
	private void Start()
	{
	}

	[Token(Token = "0x600050D")]
	[Address(RVA = "0xA72490", Offset = "0xA72490", VA = "0xA72490")]
	public void Help()
	{
	}

	[Token(Token = "0x600050E")]
	[Address(RVA = "0xA724E8", Offset = "0xA724E8", VA = "0xA724E8")]
	public void Menu()
	{
	}

	[Token(Token = "0x600050F")]
	[Address(RVA = "0xA725C0", Offset = "0xA725C0", VA = "0xA725C0")]
	public void ExitYes()
	{
	}

	[Token(Token = "0x6000510")]
	[Address(RVA = "0xA726DC", Offset = "0xA726DC", VA = "0xA726DC")]
	public void ExitNo()
	{
	}

	[Token(Token = "0x6000511")]
	[Address(RVA = "0xA7270C", Offset = "0xA7270C", VA = "0xA7270C")]
	public void TutorialYes()
	{
	}

	[Token(Token = "0x6000512")]
	[Address(RVA = "0xA7281C", Offset = "0xA7281C", VA = "0xA7281C")]
	public void TutorialNo()
	{
	}

	[Token(Token = "0x6000513")]
	[Address(RVA = "0xA7283C", Offset = "0xA7283C", VA = "0xA7283C")]
	public void Next()
	{
	}

	[Token(Token = "0x6000514")]
	[Address(RVA = "0xA72A10", Offset = "0xA72A10", VA = "0xA72A10")]
	public void Replay()
	{
	}

	[Token(Token = "0x6000515")]
	[Address(RVA = "0xA72B34", Offset = "0xA72B34", VA = "0xA72B34")]
	public void Task()
	{
	}

	[Token(Token = "0x6000516")]
	[Address(RVA = "0xA72C58", Offset = "0xA72C58", VA = "0xA72C58")]
	public void DirectionHelp()
	{
	}

	[Token(Token = "0x6000517")]
	[Address(RVA = "0xA71EA8", Offset = "0xA71EA8", VA = "0xA71EA8")]
	public void TaskInstruction()
	{
	}

	[Token(Token = "0x6000518")]
	[Address(RVA = "0xA72040", Offset = "0xA72040", VA = "0xA72040")]
	public void ActivatePanel(string panelNameToBeActivated)
	{
	}

	[Token(Token = "0x6000519")]
	[Address(RVA = "0xA72CFC", Offset = "0xA72CFC", VA = "0xA72CFC")]
	public void fuelFinished()
	{
	}

	[Token(Token = "0x600051A")]
	[Address(RVA = "0xA72E14", Offset = "0xA72E14", VA = "0xA72E14")]
	public void onclickOpenRefill()
	{
	}

	[Token(Token = "0x600051B")]
	[Address(RVA = "0xA72EC8", Offset = "0xA72EC8", VA = "0xA72EC8")]
	public void onclickMinus()
	{
	}

	[Token(Token = "0x600051C")]
	[Address(RVA = "0xA72F94", Offset = "0xA72F94", VA = "0xA72F94")]
	public void onclickPlus()
	{
	}

	[Token(Token = "0x600051D")]
	[Address(RVA = "0xA73060", Offset = "0xA73060", VA = "0xA73060")]
	public void selectCoinForFuelPurchase()
	{
	}

	[Token(Token = "0x600051E")]
	[Address(RVA = "0xA730E4", Offset = "0xA730E4", VA = "0xA730E4")]
	public void PurchaseFuelAndGo()
	{
	}

	[Token(Token = "0x600051F")]
	[Address(RVA = "0xA73414", Offset = "0xA73414", VA = "0xA73414")]
	public void OpenRepairPanel()
	{
	}

	[Token(Token = "0x6000520")]
	[Address(RVA = "0xA73718", Offset = "0xA73718", VA = "0xA73718")]
	public void RepairAndGo()
	{
	}

	[Token(Token = "0x6000521")]
	[Address(RVA = "0xA73A88", Offset = "0xA73A88", VA = "0xA73A88")]
	public void InstructionOK()
	{
	}

	[Token(Token = "0x6000522")]
	[Address(RVA = "0xA73B68", Offset = "0xA73B68", VA = "0xA73B68")]
	public void GameEnd_tractor_outofcontrol()
	{
	}

	[Token(Token = "0x6000523")]
	[Address(RVA = "0xA749F4", Offset = "0xA749F4", VA = "0xA749F4")]
	public void GameEnd()
	{
	}

	[Token(Token = "0x6000524")]
	[Address(RVA = "0xA73D4C", Offset = "0xA73D4C", VA = "0xA73D4C")]
	public void LevelandSubLevelComplete()
	{
	}

	[Token(Token = "0x6000525")]
	[Address(RVA = "0xA75624", Offset = "0xA75624", VA = "0xA75624")]
	public void SkipLevel()
	{
	}

	[Token(Token = "0x6000526")]
	[Address(RVA = "0xA75AE0", Offset = "0xA75AE0", VA = "0xA75AE0")]
	public void OpenExitPanel()
	{
	}

	[Token(Token = "0x6000527")]
	[Address(RVA = "0xA75B70", Offset = "0xA75B70", VA = "0xA75B70")]
	public void SkipLevel_exit(GameObject btnSkiplvl_)
	{
	}

	[Token(Token = "0x6000528")]
	[Address(RVA = "0xA75D94", Offset = "0xA75D94", VA = "0xA75D94")]
	public void SkipLevel_exitmenu()
	{
	}

	[Token(Token = "0x6000529")]
	[Address(RVA = "0xA762BC", Offset = "0xA762BC", VA = "0xA762BC")]
	public void tutorialGotIt()
	{
	}

	[Token(Token = "0x600052A")]
	[Address(RVA = "0xA74BF4", Offset = "0xA74BF4", VA = "0xA74BF4")]
	public void LevelFinishCoinEconomy()
	{
	}

	[Token(Token = "0x600052B")]
	[Address(RVA = "0xA72960", Offset = "0xA72960", VA = "0xA72960")]
	private void DeductPenaltyCoin()
	{
	}

	[Token(Token = "0x600052C")]
	[Address(RVA = "0xA76308", Offset = "0xA76308", VA = "0xA76308")]
	public void CoinAdd(int coinvalue)
	{
	}

	[Token(Token = "0x600052D")]
	[Address(RVA = "0xA73358", Offset = "0xA73358", VA = "0xA73358")]
	public void CoinDeduct(int coinvalue)
	{
	}

	[Token(Token = "0x600052E")]
	[Address(RVA = "0xA763F0", Offset = "0xA763F0", VA = "0xA763F0")]
	public UIGameplay()
	{
	}
}
[Serializable]
[Token(Token = "0x2000136")]
public class Setting
{
	[Token(Token = "0x400074A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public UnityEngine.UI.Slider _engine;

	[Token(Token = "0x400074B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEngine.UI.Slider _button;

	[Token(Token = "0x400074C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEngine.UI.Slider _music;

	[Token(Token = "0x400074D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEngine.UI.Slider _autogear;

	[Token(Token = "0x400074E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEngine.UI.Slider _othersound;

	[Token(Token = "0x400074F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public UnityEngine.UI.Slider _fog;

	[Token(Token = "0x600052F")]
	[Address(RVA = "0xA76448", Offset = "0xA76448", VA = "0xA76448")]
	public Setting()
	{
	}
}
[Token(Token = "0x2000137")]
public class UIMainmenuManager : MonoBehaviour
{
	[Token(Token = "0x4000750")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static UIMainmenuManager instance;

	[Token(Token = "0x4000751")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject ui_mainmenu;

	[Token(Token = "0x4000752")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject ui_selection;

	[Token(Token = "0x4000753")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject ui_setting;

	[Token(Token = "0x4000754")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject ui_task;

	[Token(Token = "0x4000755")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject ui_help;

	[Token(Token = "0x4000756")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject ui_shop;

	[Token(Token = "0x4000757")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject ui_dailyreward;

	[Token(Token = "0x4000758")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Header("Settings")]
	public Setting setting;

	[Token(Token = "0x4000759")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject loading_canvas;

	[Token(Token = "0x400075A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private int fogVal;

	[Token(Token = "0x400075B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private int GearVal;

	[Token(Token = "0x400075C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private int MovementVal;

	[Token(Token = "0x400075D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private int themeval;

	[Token(Token = "0x400075E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static bool ispurchasetractor;

	[Token(Token = "0x400075F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public UnityEngine.UI.Button[] btnmainmenu;

	[Token(Token = "0x4000760")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public GameObject vehicleparent;

	[Token(Token = "0x4000761")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public string questAppId;

	[Token(Token = "0x6000530")]
	[Address(RVA = "0xA76450", Offset = "0xA76450", VA = "0xA76450")]
	public void DeselectMainmenuBtn()
	{
	}

	[Token(Token = "0x6000531")]
	[Address(RVA = "0xA7659C", Offset = "0xA7659C", VA = "0xA7659C")]
	private void EnableVehicle()
	{
	}

	[Token(Token = "0x6000532")]
	[Address(RVA = "0xA766B0", Offset = "0xA766B0", VA = "0xA766B0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000533")]
	[Address(RVA = "0xA76F94", Offset = "0xA76F94", VA = "0xA76F94")]
	public void rateus()
	{
	}

	[Token(Token = "0x6000534")]
	[Address(RVA = "0xA76FE8", Offset = "0xA76FE8", VA = "0xA76FE8")]
	public void Privacypolicy()
	{
	}

	[Token(Token = "0x6000535")]
	[Address(RVA = "0xA7702C", Offset = "0xA7702C", VA = "0xA7702C")]
	public void TermsOfUse()
	{
	}

	[Token(Token = "0x6000536")]
	[Address(RVA = "0xA77070", Offset = "0xA77070", VA = "0xA77070")]
	public void website()
	{
	}

	[Token(Token = "0x6000537")]
	[Address(RVA = "0xA770B4", Offset = "0xA770B4", VA = "0xA770B4")]
	public void onlickDailyreward()
	{
	}

	[Token(Token = "0x6000538")]
	[Address(RVA = "0xA770EC", Offset = "0xA770EC", VA = "0xA770EC")]
	public void Drive()
	{
	}

	[Token(Token = "0x6000539")]
	[Address(RVA = "0xA77118", Offset = "0xA77118", VA = "0xA77118")]
	public void Setting()
	{
	}

	[Token(Token = "0x600053A")]
	[Address(RVA = "0xA77144", Offset = "0xA77144", VA = "0xA77144")]
	public void Help()
	{
	}

	[Token(Token = "0x600053B")]
	[Address(RVA = "0xA77170", Offset = "0xA77170", VA = "0xA77170")]
	public void Back()
	{
	}

	[Token(Token = "0x600053C")]
	[Address(RVA = "0xA771A4", Offset = "0xA771A4", VA = "0xA771A4")]
	public void Tutorial()
	{
	}

	[Token(Token = "0x600053D")]
	[Address(RVA = "0xA76F2C", Offset = "0xA76F2C", VA = "0xA76F2C")]
	public void Selection()
	{
	}

	[Token(Token = "0x600053E")]
	[Address(RVA = "0xA77228", Offset = "0xA77228", VA = "0xA77228")]
	public void Shop()
	{
	}

	[Token(Token = "0x600053F")]
	[Address(RVA = "0xA77254", Offset = "0xA77254", VA = "0xA77254")]
	public void Exit()
	{
	}

	[Token(Token = "0x6000540")]
	[Address(RVA = "0xA76AE8", Offset = "0xA76AE8", VA = "0xA76AE8")]
	private void LoadSetting()
	{
	}

	[Token(Token = "0x6000541")]
	[Address(RVA = "0xA7725C", Offset = "0xA7725C", VA = "0xA7725C")]
	public void FogSet()
	{
	}

	[Token(Token = "0x6000542")]
	[Address(RVA = "0xA77418", Offset = "0xA77418", VA = "0xA77418")]
	public void GearSet()
	{
	}

	[Token(Token = "0x6000543")]
	[Address(RVA = "0xA7741C", Offset = "0xA7741C", VA = "0xA7741C")]
	public void MovementSet()
	{
	}

	[Token(Token = "0x6000544")]
	[Address(RVA = "0xA77260", Offset = "0xA77260", VA = "0xA77260")]
	public void SaveSettingChanges()
	{
	}

	[Token(Token = "0x6000545")]
	[Address(RVA = "0xA77420", Offset = "0xA77420", VA = "0xA77420")]
	public void SaveSetting()
	{
	}

	[Token(Token = "0x6000546")]
	[Address(RVA = "0xA76890", Offset = "0xA76890", VA = "0xA76890")]
	public void ActivatePanel(string panelNameToBeActivated)
	{
	}

	[Token(Token = "0x6000547")]
	[Address(RVA = "0xA775DC", Offset = "0xA775DC", VA = "0xA775DC")]
	public UIMainmenuManager()
	{
	}
}
[Token(Token = "0x2000138")]
public class UIVehicleSelection : MonoBehaviour
{
	[Token(Token = "0x4000762")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject VehiclesParent;

	[Token(Token = "0x4000763")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject InfoParent;

	[Token(Token = "0x4000764")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEngine.UI.Button btnPrev;

	[Token(Token = "0x4000765")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEngine.UI.Button btnNxt;

	[Token(Token = "0x4000766")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public UnityEngine.UI.Button btn_buy;

	[Token(Token = "0x4000767")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public UnityEngine.UI.Button btn_select;

	[Token(Token = "0x4000768")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public int Price_Vhcl_1;

	[Token(Token = "0x4000769")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public int Price_Vhcl_2;

	[Token(Token = "0x400076A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int selectVehicle;

	[Token(Token = "0x400076B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private int totalVhcl;

	[Token(Token = "0x400076C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public TextMeshProUGUI txtPrice;

	[Token(Token = "0x6000548")]
	[Address(RVA = "0xA7763C", Offset = "0xA7763C", VA = "0xA7763C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000549")]
	[Address(RVA = "0xA77B9C", Offset = "0xA77B9C", VA = "0xA77B9C")]
	private void TractorPrice()
	{
	}

	[Token(Token = "0x600054A")]
	[Address(RVA = "0xA77C5C", Offset = "0xA77C5C", VA = "0xA77C5C")]
	public void Next()
	{
	}

	[Token(Token = "0x600054B")]
	[Address(RVA = "0xA77DE0", Offset = "0xA77DE0", VA = "0xA77DE0")]
	public void Previous()
	{
	}

	[Token(Token = "0x600054C")]
	[Address(RVA = "0xA777E8", Offset = "0xA777E8", VA = "0xA777E8")]
	public void setAllOff_Vehicle()
	{
	}

	[Token(Token = "0x600054D")]
	[Address(RVA = "0xA77F54", Offset = "0xA77F54", VA = "0xA77F54")]
	public void backToHome()
	{
	}

	[Token(Token = "0x600054E")]
	[Address(RVA = "0xA7789C", Offset = "0xA7789C", VA = "0xA7789C")]
	public void UpdateStatus()
	{
	}

	[Token(Token = "0x600054F")]
	[Address(RVA = "0xA78048", Offset = "0xA78048", VA = "0xA78048")]
	public void BuyVehicle()
	{
	}

	[Token(Token = "0x6000550")]
	[Address(RVA = "0xA7811C", Offset = "0xA7811C", VA = "0xA7811C")]
	public void InvestCoinEnough(int InvestCoin)
	{
	}

	[Token(Token = "0x6000551")]
	[Address(RVA = "0xA781B4", Offset = "0xA781B4", VA = "0xA781B4")]
	public void SelectAndGo()
	{
	}

	[Token(Token = "0x6000552")]
	[Address(RVA = "0xA782F4", Offset = "0xA782F4", VA = "0xA782F4")]
	public UIVehicleSelection()
	{
	}
}
[Token(Token = "0x2000139")]
public class UIWaterTankLevel : MonoBehaviour
{
	[Token(Token = "0x400076D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static UIWaterTankLevel instance;

	[Token(Token = "0x400076E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Image FillWaterTank;

	[Token(Token = "0x400076F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Image FillAccuracy;

	[Token(Token = "0x4000770")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TextMeshProUGUI txt_level;

	[Token(Token = "0x4000771")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public TextMeshProUGUI txt_msg_fill;

	[Token(Token = "0x4000772")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float LevelDecrese;

	[Token(Token = "0x4000773")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float[] WaterTankSize;

	[Token(Token = "0x4000774")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject WaterTank;

	[Token(Token = "0x4000775")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject FieldArea;

	[Token(Token = "0x6000553")]
	[Address(RVA = "0xA782FC", Offset = "0xA782FC", VA = "0xA782FC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000554")]
	[Address(RVA = "0xA783BC", Offset = "0xA783BC", VA = "0xA783BC")]
	private void ResetLevel()
	{
	}

	[Token(Token = "0x6000555")]
	[Address(RVA = "0xA78698", Offset = "0xA78698", VA = "0xA78698")]
	public void FillWaterTank_()
	{
	}

	[Token(Token = "0x6000556")]
	[Address(RVA = "0xA7892C", Offset = "0xA7892C", VA = "0xA7892C")]
	public void WaterLevelUse()
	{
	}

	[Token(Token = "0x6000557")]
	[Address(RVA = "0xA78CC0", Offset = "0xA78CC0", VA = "0xA78CC0")]
	public UIWaterTankLevel()
	{
	}
}
[Token(Token = "0x200013A")]
public class VaccinePurchaseLoad : MonoBehaviour
{
	[Token(Token = "0x4000776")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int TotalBoxLoad;

	[Token(Token = "0x4000777")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int TotalLoadNeed;

	[Token(Token = "0x6000558")]
	[Address(RVA = "0xA78CD4", Offset = "0xA78CD4", VA = "0xA78CD4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000559")]
	[Address(RVA = "0xA78CDC", Offset = "0xA78CDC", VA = "0xA78CDC")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600055A")]
	[Address(RVA = "0xA78EEC", Offset = "0xA78EEC", VA = "0xA78EEC")]
	private void CheckForLevelComplete()
	{
	}

	[Token(Token = "0x600055B")]
	[Address(RVA = "0xA78F80", Offset = "0xA78F80", VA = "0xA78F80")]
	public VaccinePurchaseLoad()
	{
	}
}
[Token(Token = "0x200013B")]
public class WaterCan : MonoBehaviour
{
	[Token(Token = "0x4000778")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject go_watering;

	[Token(Token = "0x600055C")]
	[Address(RVA = "0xA78F90", Offset = "0xA78F90", VA = "0xA78F90")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600055D")]
	[Address(RVA = "0xA78FB0", Offset = "0xA78FB0", VA = "0xA78FB0")]
	private void Update()
	{
	}

	[Token(Token = "0x600055E")]
	[Address(RVA = "0xA791EC", Offset = "0xA791EC", VA = "0xA791EC")]
	public WaterCan()
	{
	}
}
[Token(Token = "0x200013C")]
public class WaterCanSpray : MonoBehaviour
{
	[Token(Token = "0x4000779")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int TotalPlant;

	[Token(Token = "0x400077A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int TotalPlantCountWater;

	[Token(Token = "0x600055F")]
	[Address(RVA = "0xA791F4", Offset = "0xA791F4", VA = "0xA791F4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000560")]
	[Address(RVA = "0xA79278", Offset = "0xA79278", VA = "0xA79278")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000561")]
	[Address(RVA = "0xA7958C", Offset = "0xA7958C", VA = "0xA7958C")]
	private void CheckWateringComplete()
	{
	}

	[Token(Token = "0x6000562")]
	[Address(RVA = "0xA79690", Offset = "0xA79690", VA = "0xA79690")]
	public WaterCanSpray()
	{
	}
}
[Token(Token = "0x200013D")]
public class WaterDrinkingManager : MonoBehaviour
{
	[Token(Token = "0x200013E")]
	[CompilerGenerated]
	private sealed class <WaitForDrink>d__11 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000782")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000783")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000784")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public WaterDrinkingManager <>4__this;

		[Token(Token = "0x17000036")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000570")]
			[Address(RVA = "0xA79D64", Offset = "0xA79D64", VA = "0xA79D64", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000037")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000572")]
			[Address(RVA = "0xA79DAC", Offset = "0xA79DAC", VA = "0xA79DAC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600056D")]
		[Address(RVA = "0xA79844", Offset = "0xA79844", VA = "0xA79844")]
		[DebuggerHidden]
		public <WaitForDrink>d__11(int <>1__state)
		{
		}

		[Token(Token = "0x600056E")]
		[Address(RVA = "0xA79C08", Offset = "0xA79C08", VA = "0xA79C08", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600056F")]
		[Address(RVA = "0xA79C0C", Offset = "0xA79C0C", VA = "0xA79C0C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000571")]
		[Address(RVA = "0xA79D6C", Offset = "0xA79D6C", VA = "0xA79D6C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400077B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public EditorPathScript[] pathTocoming;

	[Token(Token = "0x400077C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public EditorPathScript[] pathTogoing;

	[Token(Token = "0x400077D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public EditorPathScript PathToFollow;

	[Token(Token = "0x400077E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool isGoing;

	[Token(Token = "0x400077F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int TotalReachgoat;

	[Token(Token = "0x4000780")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public int TotalGoat;

	[Token(Token = "0x4000781")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static bool isOneTimeComplte;

	[Token(Token = "0x6000563")]
	[Address(RVA = "0xA79698", Offset = "0xA79698", VA = "0xA79698")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000564")]
	[Address(RVA = "0xA79708", Offset = "0xA79708", VA = "0xA79708")]
	private void ComingPath()
	{
	}

	[Token(Token = "0x6000565")]
	[Address(RVA = "0xA7975C", Offset = "0xA7975C", VA = "0xA7975C")]
	public void GoingPath()
	{
	}

	[Token(Token = "0x6000566")]
	[Address(RVA = "0xA797B0", Offset = "0xA797B0", VA = "0xA797B0")]
	public void AfterDrinking()
	{
	}

	[Token(Token = "0x6000567")]
	[Address(RVA = "0xA797D0", Offset = "0xA797D0", VA = "0xA797D0")]
	[IteratorStateMachine(typeof(<WaitForDrink>d__11))]
	private IEnumerator WaitForDrink()
	{
		return null;
	}

	[Token(Token = "0x6000568")]
	[Address(RVA = "0xA7986C", Offset = "0xA7986C", VA = "0xA7986C")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000569")]
	[Address(RVA = "0xA79AF4", Offset = "0xA79AF4", VA = "0xA79AF4")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x600056A")]
	[Address(RVA = "0xA79A00", Offset = "0xA79A00", VA = "0xA79A00")]
	public void CheckforLevelcomplete()
	{
	}

	[Token(Token = "0x600056B")]
	[Address(RVA = "0xA79BA8", Offset = "0xA79BA8", VA = "0xA79BA8")]
	public WaterDrinkingManager()
	{
	}
}
[Token(Token = "0x200013F")]
public class WaterMachineShopKeeper : MonoBehaviour
{
	[Token(Token = "0x4000785")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject MoneyPopup;

	[Token(Token = "0x4000786")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int WaterMachineMoney;

	[Token(Token = "0x4000787")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject WaterMachine;

	[Token(Token = "0x4000788")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public TrailerInjectBoxCount injectioncount;

	[Token(Token = "0x4000789")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject[] VaccineBox;

	[Token(Token = "0x6000573")]
	[Address(RVA = "0xA79DB4", Offset = "0xA79DB4", VA = "0xA79DB4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000574")]
	[Address(RVA = "0xA79EB4", Offset = "0xA79EB4", VA = "0xA79EB4")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000575")]
	[Address(RVA = "0xA79F58", Offset = "0xA79F58", VA = "0xA79F58")]
	public void PurchaseYes()
	{
	}

	[Token(Token = "0x6000576")]
	[Address(RVA = "0xA7A08C", Offset = "0xA7A08C", VA = "0xA7A08C")]
	public void LoadedYes()
	{
	}

	[Token(Token = "0x6000577")]
	[Address(RVA = "0xA7A128", Offset = "0xA7A128", VA = "0xA7A128")]
	public WaterMachineShopKeeper()
	{
	}
}
[Token(Token = "0x2000140")]
public class WaterPipeControlling : MonoBehaviour
{
	[Token(Token = "0x400078A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Grabbable grab;

	[Token(Token = "0x400078B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject WaterSpray;

	[Token(Token = "0x6000578")]
	[Address(RVA = "0xA7A130", Offset = "0xA7A130", VA = "0xA7A130")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000579")]
	[Address(RVA = "0xA7A188", Offset = "0xA7A188", VA = "0xA7A188")]
	private void Update()
	{
	}

	[Token(Token = "0x600057A")]
	[Address(RVA = "0xA7A218", Offset = "0xA7A218", VA = "0xA7A218")]
	public WaterPipeControlling()
	{
	}
}
[Token(Token = "0x2000141")]
public class WaterTankLevel : MonoBehaviour
{
	[Token(Token = "0x400078C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static WaterTankLevel instance;

	[Token(Token = "0x400078D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Image img_water_fill;

	[Token(Token = "0x400078E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextMeshProUGUI txt_level;

	[Token(Token = "0x400078F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float LevelDecrese;

	[Token(Token = "0x4000790")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject[] WaterFlow;

	[Token(Token = "0x4000791")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float[] WaterTankSize;

	[Token(Token = "0x600057B")]
	[Address(RVA = "0xA7A220", Offset = "0xA7A220", VA = "0xA7A220")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600057C")]
	[Address(RVA = "0xA7A32C", Offset = "0xA7A32C", VA = "0xA7A32C")]
	private void ResetLevel()
	{
	}

	[Token(Token = "0x600057D")]
	[Address(RVA = "0xA7A444", Offset = "0xA7A444", VA = "0xA7A444")]
	public void FillWaterTank()
	{
	}

	[Token(Token = "0x600057E")]
	[Address(RVA = "0xA7A58C", Offset = "0xA7A58C", VA = "0xA7A58C")]
	public void WaterLevelUse()
	{
	}

	[Token(Token = "0x600057F")]
	[Address(RVA = "0xA7A6D0", Offset = "0xA7A6D0", VA = "0xA7A6D0")]
	public WaterTankLevel()
	{
	}
}
[Token(Token = "0x2000142")]
public class WaterValve : MonoBehaviour
{
	[Token(Token = "0x4000792")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("Minimum X value in Local Euler Angles")]
	[Header("Rotation Limits")]
	public float MinimumXRotation;

	[Token(Token = "0x4000793")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Tooltip("Maximum X value in Local Euler Angles")]
	public float MaximumXRotation;

	[Token(Token = "0x4000794")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Header("Initial Rotation")]
	public float InitialXRotation;

	[Token(Token = "0x4000795")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Header("Audio")]
	public AudioClip SwitchOnSound;

	[Token(Token = "0x4000796")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AudioClip SwitchOffSound;

	[Token(Token = "0x4000797")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Tooltip("Tolerance before considering a switch flipped On or Off. Ex : 1.25 Tolerance means switch can be 98.25% up and considered switched on, or 1.25% down to be considered switched off.")]
	[Header("Tolerance")]
	public float SwitchTolerance;

	[Token(Token = "0x4000798")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[Tooltip("If true the lever will lerp towards the Grabber. If false the lever will instantly point to the grabber")]
	[Header("Smooth Look")]
	public bool UseSmoothLook;

	[Token(Token = "0x4000799")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("The speed at which to Lerp towards the Grabber if UseSmoothLook is enabled")]
	public float SmoothLookSpeed;

	[Token(Token = "0x400079A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[Tooltip("If false, the lever's rigidbody will be kinematic when not being held. Disable this if you don't want your lever to interact with physics or if you need moving platform support.")]
	[Header("Moving Platform Support")]
	public bool AllowPhysicsForces;

	[Token(Token = "0x400079B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
	[Header("Return to Center (Must be Kinematic)")]
	[Tooltip("If ReturnToCenter true and KinematicWhileInactive true then the lever will smooth look back to center when not being held")]
	public bool ReturnToCenter;

	[Token(Token = "0x400079C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Tooltip("How fast to return to center if not being held")]
	public float ReturnLookSpeed;

	[Token(Token = "0x400079D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[Tooltip("If true the lever will look directly at the Grabber and not factor in an initial offset")]
	[Header("Snap Settings")]
	public bool SnapToGrabber;

	[Token(Token = "0x400079E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
	[Tooltip("If true, the Lever will be dropped once switched on or off")]
	[Header("Misc")]
	public bool DropLeverOnActivation;

	[Token(Token = "0x400079F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Header("Shown for Debug")]
	[Tooltip("Current position of the lever as expressed as a percentage 1-100")]
	public float LeverPercentage;

	[Token(Token = "0x40007A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[Tooltip("If true will show an angle helper in editor mode (Gizmos must be enabled)")]
	public bool ShowEditorGizmos;

	[Token(Token = "0x40007A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Header("Events")]
	[Tooltip("Called when lever was up, but is now in the down position")]
	public UnityEvent onLeverDown;

	[Token(Token = "0x40007A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Tooltip("Called when lever was down, but is now in the up position")]
	public UnityEvent onLeverUp;

	[Token(Token = "0x40007A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[Tooltip("Called if the lever changes position at all")]
	public FloatEvent onLeverChange;

	[Token(Token = "0x40007A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Grabbable grab;

	[Token(Token = "0x40007A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Rigidbody rb;

	[Token(Token = "0x40007A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private AudioSource audioSource;

	[Token(Token = "0x40007A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private bool switchedOn;

	[Token(Token = "0x40007A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private ConfigurableJoint configJoint;

	[Token(Token = "0x40007A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private HingeJoint hingedJoint;

	[Token(Token = "0x40007AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private Quaternion initialOffset;

	[Token(Token = "0x6000580")]
	[Address(RVA = "0xA7A6E4", Offset = "0xA7A6E4", VA = "0xA7A6E4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000581")]
	[Address(RVA = "0xA7A8FC", Offset = "0xA7A8FC", VA = "0xA7A8FC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000582")]
	[Address(RVA = "0xA7A92C", Offset = "0xA7A92C", VA = "0xA7A92C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000583")]
	[Address(RVA = "0xA7AB68", Offset = "0xA7AB68", VA = "0xA7AB68", Slot = "4")]
	public virtual float GetAnglePercentage(float currentAngle)
	{
		return default(float);
	}

	[Token(Token = "0x6000584")]
	[Address(RVA = "0xA7AD08", Offset = "0xA7AD08", VA = "0xA7AD08")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000585")]
	[Address(RVA = "0xA7AD0C", Offset = "0xA7AD0C", VA = "0xA7AD0C")]
	private void doLeverLook()
	{
	}

	[Token(Token = "0x6000586")]
	[Address(RVA = "0xA7B2A0", Offset = "0xA7B2A0", VA = "0xA7B2A0", Slot = "5")]
	public virtual void SetLeverAngle(float angle)
	{
	}

	[Token(Token = "0x6000587")]
	[Address(RVA = "0xA7B2EC", Offset = "0xA7B2EC", VA = "0xA7B2EC", Slot = "6")]
	public virtual void OnLeverChange(float percentage)
	{
	}

	[Token(Token = "0x6000588")]
	[Address(RVA = "0xA7B358", Offset = "0xA7B358", VA = "0xA7B358", Slot = "7")]
	public virtual void OnLeverDown()
	{
	}

	[Token(Token = "0x6000589")]
	[Address(RVA = "0xA7B454", Offset = "0xA7B454", VA = "0xA7B454", Slot = "8")]
	public virtual void OnLeverUp()
	{
	}

	[Token(Token = "0x600058A")]
	[Address(RVA = "0xA7B554", Offset = "0xA7B554", VA = "0xA7B554")]
	public WaterValve()
	{
	}
}
namespace UnityStandardAssets.Vehicles.Car
{
	[Token(Token = "0x2000143")]
	internal enum lorryDriveType
	{
		[Token(Token = "0x40007AC")]
		FrontWheelDrive,
		[Token(Token = "0x40007AD")]
		RearWheelDrive,
		[Token(Token = "0x40007AE")]
		FourWheelDrive
	}
	[Token(Token = "0x2000144")]
	public class LorryController : MonoBehaviour
	{
		[Token(Token = "0x40007AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private WheelCollider[] m_WheelColliders;

		[Token(Token = "0x40007B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GameObject[] m_WheelMeshes;

		[Token(Token = "0x40007B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Quaternion[] m_WheelMeshLocalRotations;

		[Token(Token = "0x40007B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject COM;

		[Token(Token = "0x600058B")]
		[Address(RVA = "0xA7B5E0", Offset = "0xA7B5E0", VA = "0xA7B5E0")]
		private void Start()
		{
		}

		[Token(Token = "0x600058C")]
		[Address(RVA = "0xA7B6B8", Offset = "0xA7B6B8", VA = "0xA7B6B8")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x600058D")]
		[Address(RVA = "0xA7B6BC", Offset = "0xA7B6BC", VA = "0xA7B6BC")]
		public void Move()
		{
		}

		[Token(Token = "0x600058E")]
		[Address(RVA = "0xA7B7A0", Offset = "0xA7B7A0", VA = "0xA7B7A0")]
		public LorryController()
		{
		}
	}
}
namespace Es.Utility
{
	[Token(Token = "0x2000145")]
	[RequireComponent(typeof(Camera))]
	public class SceneViewCamera : MonoBehaviour
	{
		[Token(Token = "0x40007B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[Range(0.1f, 100f)]
		private float wheelSpeed;

		[Token(Token = "0x40007B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Range(0.1f, 100f)]
		[SerializeField]
		private float moveSpeed;

		[Token(Token = "0x40007B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[Range(0.1f, 1f)]
		private float rotateSpeed;

		[Token(Token = "0x40007B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Vector3 preMousePos;

		[Token(Token = "0x600058F")]
		[Address(RVA = "0xA7B83C", Offset = "0xA7B83C", VA = "0xA7B83C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000590")]
		[Address(RVA = "0xA7B840", Offset = "0xA7B840", VA = "0xA7B840")]
		private void MouseUpdate()
		{
		}

		[Token(Token = "0x6000591")]
		[Address(RVA = "0xA7B8E8", Offset = "0xA7B8E8", VA = "0xA7B8E8")]
		private void MouseWheel(float delta)
		{
		}

		[Token(Token = "0x6000592")]
		[Address(RVA = "0xA7B984", Offset = "0xA7B984", VA = "0xA7B984")]
		private void MouseDrag(Vector3 mousePos)
		{
		}

		[Token(Token = "0x6000593")]
		[Address(RVA = "0xA7BAC4", Offset = "0xA7BAC4", VA = "0xA7BAC4")]
		public void CameraRotate(Vector2 angle)
		{
		}

		[Token(Token = "0x6000594")]
		[Address(RVA = "0xA7BBFC", Offset = "0xA7BBFC", VA = "0xA7BBFC")]
		public SceneViewCamera()
		{
		}
	}
}
namespace Es.InkPainter
{
	[Serializable]
	[Token(Token = "0x2000146")]
	public class Brush : ICloneable
	{
		[Token(Token = "0x2000147")]
		public enum ColorBlendType
		{
			[Token(Token = "0x40007C3")]
			UseColor,
			[Token(Token = "0x40007C4")]
			UseBrush,
			[Token(Token = "0x40007C5")]
			Neutral,
			[Token(Token = "0x40007C6")]
			AlphaOnly
		}

		[Token(Token = "0x2000148")]
		public enum NormalBlendType
		{
			[Token(Token = "0x40007C8")]
			UseBrush,
			[Token(Token = "0x40007C9")]
			Add,
			[Token(Token = "0x40007CA")]
			Sub,
			[Token(Token = "0x40007CB")]
			Min,
			[Token(Token = "0x40007CC")]
			Max
		}

		[Token(Token = "0x2000149")]
		public enum HeightBlendType
		{
			[Token(Token = "0x40007CE")]
			UseBrush,
			[Token(Token = "0x40007CF")]
			Add,
			[Token(Token = "0x40007D0")]
			Sub,
			[Token(Token = "0x40007D1")]
			Min,
			[Token(Token = "0x40007D2")]
			Max,
			[Token(Token = "0x40007D3")]
			ColorRGB_HeightA
		}

		[Token(Token = "0x40007B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private Texture brushTexture;

		[Token(Token = "0x40007B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Texture brushNormalTexture;

		[Token(Token = "0x40007B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Texture brushHeightTexture;

		[Token(Token = "0x40007BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Range(0f, 1f)]
		[SerializeField]
		private float brushScale;

		[Token(Token = "0x40007BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Range(0f, 360f)]
		[SerializeField]
		private float rotateAngle;

		[Token(Token = "0x40007BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Range(0f, 1f)]
		[SerializeField]
		private float brushNormalBlend;

		[Token(Token = "0x40007BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Range(0f, 1f)]
		[SerializeField]
		private float brushHeightBlend;

		[Token(Token = "0x40007BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Color brushColor;

		[Token(Token = "0x40007BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private ColorBlendType colorBlendType;

		[Token(Token = "0x40007C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[SerializeField]
		private NormalBlendType normalBlendType;

		[Token(Token = "0x40007C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private HeightBlendType heightBlendType;

		[Token(Token = "0x17000038")]
		public Texture BrushTexture
		{
			[Token(Token = "0x6000595")]
			[Address(RVA = "0xA7BC1C", Offset = "0xA7BC1C", VA = "0xA7BC1C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000596")]
			[Address(RVA = "0xA7BC24", Offset = "0xA7BC24", VA = "0xA7BC24")]
			set
			{
			}
		}

		[Token(Token = "0x17000039")]
		public Texture BrushNormalTexture
		{
			[Token(Token = "0x6000597")]
			[Address(RVA = "0xA7BC2C", Offset = "0xA7BC2C", VA = "0xA7BC2C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000598")]
			[Address(RVA = "0xA7BC34", Offset = "0xA7BC34", VA = "0xA7BC34")]
			set
			{
			}
		}

		[Token(Token = "0x1700003A")]
		public Texture BrushHeightTexture
		{
			[Token(Token = "0x6000599")]
			[Address(RVA = "0xA7BC3C", Offset = "0xA7BC3C", VA = "0xA7BC3C")]
			get
			{
				return null;
			}
			[Token(Token = "0x600059A")]
			[Address(RVA = "0xA7BC44", Offset = "0xA7BC44", VA = "0xA7BC44")]
			set
			{
			}
		}

		[Token(Token = "0x1700003B")]
		public float Scale
		{
			[Token(Token = "0x600059B")]
			[Address(RVA = "0xA7BC4C", Offset = "0xA7BC4C", VA = "0xA7BC4C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600059C")]
			[Address(RVA = "0xA7BC68", Offset = "0xA7BC68", VA = "0xA7BC68")]
			set
			{
			}
		}

		[Token(Token = "0x1700003C")]
		public float RotateAngle
		{
			[Token(Token = "0x600059D")]
			[Address(RVA = "0xA7BC84", Offset = "0xA7BC84", VA = "0xA7BC84")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600059E")]
			[Address(RVA = "0xA7BC8C", Offset = "0xA7BC8C", VA = "0xA7BC8C")]
			set
			{
			}
		}

		[Token(Token = "0x1700003D")]
		public float NormalBlend
		{
			[Token(Token = "0x600059F")]
			[Address(RVA = "0xA7BC94", Offset = "0xA7BC94", VA = "0xA7BC94")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60005A0")]
			[Address(RVA = "0xA7BCB0", Offset = "0xA7BCB0", VA = "0xA7BCB0")]
			set
			{
			}
		}

		[Token(Token = "0x1700003E")]
		public float HeightBlend
		{
			[Token(Token = "0x60005A1")]
			[Address(RVA = "0xA7BCCC", Offset = "0xA7BCCC", VA = "0xA7BCCC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60005A2")]
			[Address(RVA = "0xA7BCE8", Offset = "0xA7BCE8", VA = "0xA7BCE8")]
			set
			{
			}
		}

		[Token(Token = "0x1700003F")]
		public Color Color
		{
			[Token(Token = "0x60005A3")]
			[Address(RVA = "0xA7BD04", Offset = "0xA7BD04", VA = "0xA7BD04")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x60005A4")]
			[Address(RVA = "0xA7BD10", Offset = "0xA7BD10", VA = "0xA7BD10")]
			set
			{
			}
		}

		[Token(Token = "0x17000040")]
		public ColorBlendType ColorBlending
		{
			[Token(Token = "0x60005A5")]
			[Address(RVA = "0xA7BD1C", Offset = "0xA7BD1C", VA = "0xA7BD1C")]
			get
			{
				return default(ColorBlendType);
			}
			[Token(Token = "0x60005A6")]
			[Address(RVA = "0xA7BD24", Offset = "0xA7BD24", VA = "0xA7BD24")]
			set
			{
			}
		}

		[Token(Token = "0x17000041")]
		public NormalBlendType NormalBlending
		{
			[Token(Token = "0x60005A7")]
			[Address(RVA = "0xA7BD2C", Offset = "0xA7BD2C", VA = "0xA7BD2C")]
			get
			{
				return default(NormalBlendType);
			}
			[Token(Token = "0x60005A8")]
			[Address(RVA = "0xA7BD34", Offset = "0xA7BD34", VA = "0xA7BD34")]
			set
			{
			}
		}

		[Token(Token = "0x17000042")]
		public HeightBlendType HeightBlending
		{
			[Token(Token = "0x60005A9")]
			[Address(RVA = "0xA7BD3C", Offset = "0xA7BD3C", VA = "0xA7BD3C")]
			get
			{
				return default(HeightBlendType);
			}
			[Token(Token = "0x60005AA")]
			[Address(RVA = "0xA7BD44", Offset = "0xA7BD44", VA = "0xA7BD44")]
			set
			{
			}
		}

		[Token(Token = "0x60005AB")]
		[Address(RVA = "0xA7BD4C", Offset = "0xA7BD4C", VA = "0xA7BD4C")]
		public Brush(Texture brushTex, float scale, Color color)
		{
		}

		[Token(Token = "0x60005AC")]
		[Address(RVA = "0xA7BDE4", Offset = "0xA7BDE4", VA = "0xA7BDE4")]
		public Brush(Texture brushTex, float scale, Color color, ColorBlendType colorBlending)
		{
		}

		[Token(Token = "0x60005AD")]
		[Address(RVA = "0xA7BE08", Offset = "0xA7BE08", VA = "0xA7BE08")]
		public Brush(Texture brushTex, float scale, Color color, Texture normalTex, float normalBlend)
		{
		}

		[Token(Token = "0x60005AE")]
		[Address(RVA = "0xA7BE5C", Offset = "0xA7BE5C", VA = "0xA7BE5C")]
		public Brush(Texture brushTex, float scale, Color color, Texture normalTex, float normalBlend, ColorBlendType colorBlending, NormalBlendType normalBlending)
		{
		}

		[Token(Token = "0x60005AF")]
		[Address(RVA = "0xA7BEC4", Offset = "0xA7BEC4", VA = "0xA7BEC4")]
		public Brush(Texture brushTex, float scale, Color color, Texture normalTex, float normalBlend, Texture heightTex, float heightBlend, ColorBlendType colorBlending, NormalBlendType normalBlending, HeightBlendType heightBlending)
		{
		}

		[Token(Token = "0x60005B0")]
		[Address(RVA = "0xA7BF6C", Offset = "0xA7BF6C", VA = "0xA7BF6C", Slot = "4")]
		public object Clone()
		{
			return null;
		}
	}
	[Token(Token = "0x200014A")]
	[DisallowMultipleComponent]
	[RequireComponent(typeof(Renderer))]
	public class InkCanvas : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200014B")]
		public class PaintSet
		{
			[NonSerialized]
			[Token(Token = "0x40007FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[HideInInspector]
			public Material material;

			[Token(Token = "0x40007FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[SerializeField]
			[Tooltip("The property name of the main texture.")]
			public string mainTextureName;

			[Token(Token = "0x4000800")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[SerializeField]
			[Tooltip("Normal map texture property name.")]
			public string normalTextureName;

			[Token(Token = "0x4000801")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[SerializeField]
			[Tooltip("The property name of the heightmap texture.")]
			public string heightTextureName;

			[Token(Token = "0x4000802")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[Tooltip("Whether or not use main texture paint.")]
			[SerializeField]
			public bool useMainPaint;

			[Token(Token = "0x4000803")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
			[SerializeField]
			[Tooltip("Whether or not use normal map paint (you need material on normal maps).")]
			public bool useNormalPaint;

			[Token(Token = "0x4000804")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
			[SerializeField]
			[Tooltip("Whether or not use heightmap painting (you need material on the heightmap).")]
			public bool useHeightPaint;

			[NonSerialized]
			[Token(Token = "0x4000805")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[HideInInspector]
			public Texture mainTexture;

			[NonSerialized]
			[Token(Token = "0x4000806")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			[HideInInspector]
			public RenderTexture paintMainTexture;

			[NonSerialized]
			[Token(Token = "0x4000807")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[HideInInspector]
			public Texture normalTexture;

			[NonSerialized]
			[Token(Token = "0x4000808")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[HideInInspector]
			public RenderTexture paintNormalTexture;

			[NonSerialized]
			[Token(Token = "0x4000809")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[HideInInspector]
			public Texture heightTexture;

			[NonSerialized]
			[Token(Token = "0x400080A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[HideInInspector]
			public RenderTexture paintHeightTexture;

			[NonSerialized]
			[Token(Token = "0x400080B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			[HideInInspector]
			public int mainTexturePropertyID;

			[NonSerialized]
			[Token(Token = "0x400080C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			[HideInInspector]
			public int normalTexturePropertyID;

			[NonSerialized]
			[Token(Token = "0x400080D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			[HideInInspector]
			public int heightTexturePropertyID;

			[Token(Token = "0x60005E1")]
			[Address(RVA = "0xA80F3C", Offset = "0xA80F3C", VA = "0xA80F3C")]
			public PaintSet()
			{
			}

			[Token(Token = "0x60005E2")]
			[Address(RVA = "0xA80FEC", Offset = "0xA80FEC", VA = "0xA80FEC")]
			public PaintSet(string mainTextureName, string normalTextureName, string heightTextureName, bool useMainPaint, bool useNormalPaint, bool useHeightPaint)
			{
			}

			[Token(Token = "0x60005E3")]
			[Address(RVA = "0xA81118", Offset = "0xA81118", VA = "0xA81118")]
			public PaintSet(string mainTextureName, string normalTextureName, string heightTextureName, bool useMainPaint, bool useNormalPaint, bool useHeightPaint, Material material)
			{
			}
		}

		[Token(Token = "0x40007D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Material paintMainMaterial;

		[Token(Token = "0x40007D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Material paintNormalMaterial;

		[Token(Token = "0x40007D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static Material paintHeightMaterial;

		[Token(Token = "0x40007D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool eraseFlag;

		[Token(Token = "0x40007D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private RenderTexture debugEraserMainView;

		[Token(Token = "0x40007D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private RenderTexture debugEraserNormalView;

		[Token(Token = "0x40007DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private RenderTexture debugEraserHeightView;

		[Token(Token = "0x40007DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool eraserDebug;

		[Token(Token = "0x40007E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private List<PaintSet> paintSet;

		[Token(Token = "0x40007E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private int paintUVPropertyID;

		[Token(Token = "0x40007E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private int brushTexturePropertyID;

		[Token(Token = "0x40007E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private int brushScalePropertyID;

		[Token(Token = "0x40007E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private int brushRotatePropertyID;

		[Token(Token = "0x40007E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int brushColorPropertyID;

		[Token(Token = "0x40007E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private int brushNormalTexturePropertyID;

		[Token(Token = "0x40007E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private int brushNormalBlendPropertyID;

		[Token(Token = "0x40007E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private int brushHeightTexturePropertyID;

		[Token(Token = "0x40007EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private int brushHeightBlendPropertyID;

		[Token(Token = "0x40007EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private int brushHeightColorPropertyID;

		[Token(Token = "0x40007EC")]
		private const string COLOR_BLEND_USE_CONTROL = "INK_PAINTER_COLOR_BLEND_USE_CONTROL";

		[Token(Token = "0x40007ED")]
		private const string COLOR_BLEND_USE_BRUSH = "INK_PAINTER_COLOR_BLEND_USE_BRUSH";

		[Token(Token = "0x40007EE")]
		private const string COLOR_BLEND_NEUTRAL = "INK_PAINTER_COLOR_BLEND_NEUTRAL";

		[Token(Token = "0x40007EF")]
		private const string COLOR_BLEND_ALPHA_ONLY = "INK_PAINTER_COLOR_BLEND_ALPHA_ONLY";

		[Token(Token = "0x40007F0")]
		private const string NORMAL_BLEND_USE_BRUSH = "INK_PAINTER_NORMAL_BLEND_USE_BRUSH";

		[Token(Token = "0x40007F1")]
		private const string NORMAL_BLEND_ADD = "INK_PAINTER_NORMAL_BLEND_ADD";

		[Token(Token = "0x40007F2")]
		private const string NORMAL_BLEND_SUB = "INK_PAINTER_NORMAL_BLEND_SUB";

		[Token(Token = "0x40007F3")]
		private const string NORMAL_BLEND_MIN = "INK_PAINTER_NORMAL_BLEND_MIN";

		[Token(Token = "0x40007F4")]
		private const string NORMAL_BLEND_MAX = "INK_PAINTER_NORMAL_BLEND_MAX";

		[Token(Token = "0x40007F5")]
		private const string DXT5NM_COMPRESS_USE = "DXT5NM_COMPRESS_USE";

		[Token(Token = "0x40007F6")]
		private const string DXT5NM_COMPRESS_UNUSE = "DXT5NM_COMPRESS_UNUSE";

		[Token(Token = "0x40007F7")]
		private const string HEIGHT_BLEND_USE_BRUSH = "INK_PAINTER_HEIGHT_BLEND_USE_BRUSH";

		[Token(Token = "0x40007F8")]
		private const string HEIGHT_BLEND_ADD = "INK_PAINTER_HEIGHT_BLEND_ADD";

		[Token(Token = "0x40007F9")]
		private const string HEIGHT_BLEND_SUB = "INK_PAINTER_HEIGHT_BLEND_SUB";

		[Token(Token = "0x40007FA")]
		private const string HEIGHT_BLEND_MIN = "INK_PAINTER_HEIGHT_BLEND_MIN";

		[Token(Token = "0x40007FB")]
		private const string HEIGHT_BLEND_MAX = "INK_PAINTER_HEIGHT_BLEND_MAX";

		[Token(Token = "0x40007FC")]
		private const string HEIGHT_BLEND_COLOR_RGB_HEIGHT_A = "INK_PAINTER_HEIGHT_BLEND_COLOR_RGB_HEIGHT_A";

		[Token(Token = "0x40007FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private MeshOperator meshOperator;

		[Token(Token = "0x17000043")]
		public List<PaintSet> PaintDatas
		{
			[Token(Token = "0x60005B1")]
			[Address(RVA = "0xA7BF74", Offset = "0xA7BF74", VA = "0xA7BF74")]
			get
			{
				return null;
			}
			[Token(Token = "0x60005B2")]
			[Address(RVA = "0xA7BF7C", Offset = "0xA7BF7C", VA = "0xA7BF7C")]
			set
			{
			}
		}

		[Token(Token = "0x17000044")]
		public MeshOperator MeshOperator
		{
			[Token(Token = "0x60005BD")]
			[Address(RVA = "0xA7C664", Offset = "0xA7C664", VA = "0xA7C664")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x14000001")]
		public event Action<InkCanvas> OnCanvasAttached
		{
			[Token(Token = "0x60005B3")]
			[Address(RVA = "0xA7BF84", Offset = "0xA7BF84", VA = "0xA7BF84")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60005B4")]
			[Address(RVA = "0xA7C034", Offset = "0xA7C034", VA = "0xA7C034")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000002")]
		public event Action<InkCanvas> OnInitializedStart
		{
			[Token(Token = "0x60005B5")]
			[Address(RVA = "0xA7C0E4", Offset = "0xA7C0E4", VA = "0xA7C0E4")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60005B6")]
			[Address(RVA = "0xA7C194", Offset = "0xA7C194", VA = "0xA7C194")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000003")]
		public event Action<InkCanvas> OnInitializedAfter
		{
			[Token(Token = "0x60005B7")]
			[Address(RVA = "0xA7C244", Offset = "0xA7C244", VA = "0xA7C244")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60005B8")]
			[Address(RVA = "0xA7C2F4", Offset = "0xA7C2F4", VA = "0xA7C2F4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000004")]
		public event Action<InkCanvas, Brush> OnPaintStart
		{
			[Token(Token = "0x60005B9")]
			[Address(RVA = "0xA7C3A4", Offset = "0xA7C3A4", VA = "0xA7C3A4")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60005BA")]
			[Address(RVA = "0xA7C454", Offset = "0xA7C454", VA = "0xA7C454")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000005")]
		public event Action<InkCanvas> OnPaintEnd
		{
			[Token(Token = "0x60005BB")]
			[Address(RVA = "0xA7C504", Offset = "0xA7C504", VA = "0xA7C504")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60005BC")]
			[Address(RVA = "0xA7C5B4", Offset = "0xA7C5B4", VA = "0xA7C5B4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x60005BE")]
		[Address(RVA = "0xA7C6E0", Offset = "0xA7C6E0", VA = "0xA7C6E0")]
		private void Awake()
		{
		}

		[Token(Token = "0x60005BF")]
		[Address(RVA = "0xA7D108", Offset = "0xA7D108", VA = "0xA7D108")]
		private void Start()
		{
		}

		[Token(Token = "0x60005C0")]
		[Address(RVA = "0xA7D490", Offset = "0xA7D490", VA = "0xA7D490")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60005C1")]
		[Address(RVA = "0xA7D868", Offset = "0xA7D868", VA = "0xA7D868")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x60005C2")]
		[Address(RVA = "0xA7CF74", Offset = "0xA7CF74", VA = "0xA7CF74")]
		private void MeshDataCache()
		{
		}

		[Token(Token = "0x60005C3")]
		[Address(RVA = "0xA7C728", Offset = "0xA7C728", VA = "0xA7C728")]
		private void InitPropertyID()
		{
		}

		[Token(Token = "0x60005C4")]
		[Address(RVA = "0xA7CA24", Offset = "0xA7CA24", VA = "0xA7CA24")]
		private void SetMaterial()
		{
		}

		[Token(Token = "0x60005C5")]
		[Address(RVA = "0xA7CD38", Offset = "0xA7CD38", VA = "0xA7CD38")]
		private void SetTexture()
		{
		}

		[Token(Token = "0x60005C6")]
		[Address(RVA = "0xA7DB78", Offset = "0xA7DB78", VA = "0xA7DB78")]
		private RenderTexture SetupRenderTexture(Texture baseTex, int propertyID, Material material)
		{
			return null;
		}

		[Token(Token = "0x60005C7")]
		[Address(RVA = "0xA7D15C", Offset = "0xA7D15C", VA = "0xA7D15C")]
		private void SetRenderTexture()
		{
		}

		[Token(Token = "0x60005C8")]
		[Address(RVA = "0xA7D504", Offset = "0xA7D504", VA = "0xA7D504")]
		private void ReleaseRenderTexture()
		{
		}

		[Token(Token = "0x60005C9")]
		[Address(RVA = "0xA7DC9C", Offset = "0xA7DC9C", VA = "0xA7DC9C")]
		private void SetPaintMainData(Brush brush, Vector2 uv)
		{
		}

		[Token(Token = "0x60005CA")]
		[Address(RVA = "0xA7DEFC", Offset = "0xA7DEFC", VA = "0xA7DEFC")]
		private void SetPaintNormalData(Brush brush, Vector2 uv, bool erase)
		{
		}

		[Token(Token = "0x60005CB")]
		[Address(RVA = "0xA7E208", Offset = "0xA7E208", VA = "0xA7E208")]
		private void SetPaintHeightData(Brush brush, Vector2 uv)
		{
		}

		[Token(Token = "0x60005CC")]
		[Address(RVA = "0xA7E508", Offset = "0xA7E508", VA = "0xA7E508")]
		private Brush GetEraser(Brush brush, PaintSet paintSet, Vector2 uv, bool useMainPaint, bool useNormalPaint, bool useHeightpaint)
		{
			return null;
		}

		[Token(Token = "0x60005CD")]
		[Address(RVA = "0xA7EBF8", Offset = "0xA7EBF8", VA = "0xA7EBF8")]
		private void ReleaseEraser(Brush brush, bool useMainPaint, bool useNormalPaint, bool useHeightpaint)
		{
		}

		[Token(Token = "0x60005CE")]
		[Address(RVA = "0xA7ED34", Offset = "0xA7ED34", VA = "0xA7ED34")]
		public bool PaintUVDirect(Brush brush, Vector2 uv, [Optional] Func<PaintSet, bool> materialSelector)
		{
			return default(bool);
		}

		[Token(Token = "0x60005CF")]
		[Address(RVA = "0xA7F6A4", Offset = "0xA7F6A4", VA = "0xA7F6A4")]
		public bool PaintNearestTriangleSurface(Brush brush, Vector3 worldPos, [Optional] Func<PaintSet, bool> materialSelector, [Optional] Camera renderCamera)
		{
			return default(bool);
		}

		[Token(Token = "0x60005D0")]
		[Address(RVA = "0xA7FA74", Offset = "0xA7FA74", VA = "0xA7FA74")]
		public bool Paint(Brush brush, Vector3 worldPos, [Optional] Func<PaintSet, bool> materialSelector, [Optional] Camera renderCamera)
		{
			return default(bool);
		}

		[Token(Token = "0x60005D1")]
		[Address(RVA = "0xA7FFD0", Offset = "0xA7FFD0", VA = "0xA7FFD0")]
		public bool Paint(Brush brush, RaycastHit hitInfo, [Optional] Func<PaintSet, bool> materialSelector)
		{
			return default(bool);
		}

		[Token(Token = "0x60005D2")]
		[Address(RVA = "0xA80158", Offset = "0xA80158", VA = "0xA80158")]
		public bool EraseUVDirect(Brush brush, Vector2 uv, [Optional] Func<PaintSet, bool> materialSelector)
		{
			return default(bool);
		}

		[Token(Token = "0x60005D3")]
		[Address(RVA = "0xA80164", Offset = "0xA80164", VA = "0xA80164")]
		public bool EraseNearestTriangleSurface(Brush brush, Vector3 worldPos, [Optional] Func<PaintSet, bool> materialSelector, [Optional] Camera renderCamera)
		{
			return default(bool);
		}

		[Token(Token = "0x60005D4")]
		[Address(RVA = "0xA80170", Offset = "0xA80170", VA = "0xA80170")]
		public bool Erase(Brush brush, Vector3 worldPos, [Optional] Func<PaintSet, bool> materialSelector, [Optional] Camera renderCamera)
		{
			return default(bool);
		}

		[Token(Token = "0x60005D5")]
		[Address(RVA = "0xA8017C", Offset = "0xA8017C", VA = "0xA8017C")]
		public bool Erase(Brush brush, RaycastHit hitInfo, [Optional] Func<PaintSet, bool> materialSelector)
		{
			return default(bool);
		}

		[Token(Token = "0x60005D6")]
		[Address(RVA = "0xA801B4", Offset = "0xA801B4", VA = "0xA801B4")]
		public void ResetPaint()
		{
		}

		[Token(Token = "0x60005D7")]
		[Address(RVA = "0xA801F0", Offset = "0xA801F0", VA = "0xA801F0")]
		public Texture GetMainTexture(string materialName)
		{
			return null;
		}

		[Token(Token = "0x60005D8")]
		[Address(RVA = "0xA8033C", Offset = "0xA8033C", VA = "0xA8033C")]
		public RenderTexture GetPaintMainTexture(string materialName)
		{
			return null;
		}

		[Token(Token = "0x60005D9")]
		[Address(RVA = "0xA80488", Offset = "0xA80488", VA = "0xA80488")]
		public void SetPaintMainTexture(string materialName, RenderTexture newTexture)
		{
		}

		[Token(Token = "0x60005DA")]
		[Address(RVA = "0xA8065C", Offset = "0xA8065C", VA = "0xA8065C")]
		public Texture GetNormalTexture(string materialName)
		{
			return null;
		}

		[Token(Token = "0x60005DB")]
		[Address(RVA = "0xA807A8", Offset = "0xA807A8", VA = "0xA807A8")]
		public RenderTexture GetPaintNormalTexture(string materialName)
		{
			return null;
		}

		[Token(Token = "0x60005DC")]
		[Address(RVA = "0xA808F4", Offset = "0xA808F4", VA = "0xA808F4")]
		public void SetPaintNormalTexture(string materialName, RenderTexture newTexture)
		{
		}

		[Token(Token = "0x60005DD")]
		[Address(RVA = "0xA80AC8", Offset = "0xA80AC8", VA = "0xA80AC8")]
		public Texture GetHeightTexture(string materialName)
		{
			return null;
		}

		[Token(Token = "0x60005DE")]
		[Address(RVA = "0xA80C14", Offset = "0xA80C14", VA = "0xA80C14")]
		public RenderTexture GetPaintHeightTexture(string materialName)
		{
			return null;
		}

		[Token(Token = "0x60005DF")]
		[Address(RVA = "0xA80D60", Offset = "0xA80D60", VA = "0xA80D60")]
		public void SetPaintHeightTexture(string materialName, RenderTexture newTexture)
		{
		}

		[Token(Token = "0x60005E0")]
		[Address(RVA = "0xA80F34", Offset = "0xA80F34", VA = "0xA80F34")]
		public InkCanvas()
		{
		}
	}
	[Token(Token = "0x2000155")]
	public static class Math
	{
		[Token(Token = "0x4000817")]
		private const float TOLERANCE = 0.01f;

		[Token(Token = "0x60005F6")]
		[Address(RVA = "0xA8163C", Offset = "0xA8163C", VA = "0xA8163C")]
		public static bool ExistPointInPlane(Vector3 p, Vector3 t1, Vector3 t2, Vector3 t3)
		{
			return default(bool);
		}

		[Token(Token = "0x60005F7")]
		[Address(RVA = "0xA81860", Offset = "0xA81860", VA = "0xA81860")]
		public static bool ExistPointOnEdge(Vector3 p, Vector3 v1, Vector3 v2)
		{
			return default(bool);
		}

		[Token(Token = "0x60005F8")]
		[Address(RVA = "0xA81A50", Offset = "0xA81A50", VA = "0xA81A50")]
		public static bool ExistPointOnTriangleEdge(Vector3 p, Vector3 t1, Vector3 t2, Vector3 t3)
		{
			return default(bool);
		}

		[Token(Token = "0x60005F9")]
		[Address(RVA = "0xA81B40", Offset = "0xA81B40", VA = "0xA81B40")]
		public static bool ExistPointInTriangle(Vector3 p, Vector3 t1, Vector3 t2, Vector3 t3)
		{
			return default(bool);
		}

		[Token(Token = "0x60005FA")]
		[Address(RVA = "0xA81F24", Offset = "0xA81F24", VA = "0xA81F24")]
		public static Vector2 TextureCoordinateCalculation(Vector3 p, Vector3 t1, Vector2 t1UV, Vector3 t2, Vector2 t2UV, Vector3 t3, Vector2 t3UV, Matrix4x4 transformMatrix)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60005FB")]
		[Address(RVA = "0xA8217C", Offset = "0xA8217C", VA = "0xA8217C")]
		public static Vector3[] GetNearestVerticesTriangle(Vector3 p, Vector3[] vertices, int[] triangles)
		{
			return null;
		}

		[Token(Token = "0x60005FC")]
		[Address(RVA = "0xA825D0", Offset = "0xA825D0", VA = "0xA825D0")]
		public static Vector3 TriangleSpaceProjection(Vector3 p, Vector3 t1, Vector3 t2, Vector3 t3)
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x2000157")]
	public class MeshOperator
	{
		[Token(Token = "0x4000819")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Mesh mesh;

		[Token(Token = "0x400081A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int[] meshTriangles;

		[Token(Token = "0x400081B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3[] meshVertices;

		[Token(Token = "0x400081C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector2[] meshUV;

		[Token(Token = "0x60005FF")]
		[Address(RVA = "0xA7DA34", Offset = "0xA7DA34", VA = "0xA7DA34")]
		public MeshOperator(Mesh mesh)
		{
		}

		[Token(Token = "0x6000600")]
		[Address(RVA = "0xA7FD44", Offset = "0xA7FD44", VA = "0xA7FD44")]
		public bool LocalPointToUV(Vector3 localPoint, Matrix4x4 matrixMVP, out Vector2 uv)
		{
			return default(bool);
		}

		[Token(Token = "0x6000601")]
		[Address(RVA = "0xA7F7E4", Offset = "0xA7F7E4", VA = "0xA7F7E4")]
		public Vector3 NearestLocalSurfacePoint(Vector3 localPoint)
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x2000159")]
	public static class GameObjectExtension
	{
		[Token(Token = "0x6000604")]
		[Address(RVA = "0xA829F4", Offset = "0xA829F4", VA = "0xA829F4")]
		public static InkCanvas AddInkCanvas(this GameObject gameObject, List<InkCanvas.PaintSet> paintDatas)
		{
			return null;
		}

		[Token(Token = "0x6000605")]
		[Address(RVA = "0xA82BFC", Offset = "0xA82BFC", VA = "0xA82BFC")]
		public static InkCanvas AddInkCanvas(this GameObject gameObject, InkCanvas.PaintSet paintData)
		{
			return null;
		}
	}
}
namespace Es.InkPainter.Effective
{
	[Token(Token = "0x200015B")]
	public static class GrabArea
	{
		[Token(Token = "0x200015C")]
		public enum GrabTextureWrapMode
		{
			[Token(Token = "0x400082C")]
			Clamp,
			[Token(Token = "0x400082D")]
			Repeat,
			[Token(Token = "0x400082E")]
			Clip
		}

		[Token(Token = "0x400081F")]
		private const string GRAB_AREA_MATERIAL = "Es.InkPainter.Effective.GrabArea";

		[Token(Token = "0x4000820")]
		private const string CLIP = "_ClipTex";

		[Token(Token = "0x4000821")]
		private const string TARGET = "_TargetTex";

		[Token(Token = "0x4000822")]
		private const string CLIP_SCALE = "_ClipScale";

		[Token(Token = "0x4000823")]
		private const string CLIP_UV = "_ClipUV";

		[Token(Token = "0x4000824")]
		private const string ROTATE = "_Rotate";

		[Token(Token = "0x4000825")]
		private const string WM_CLAMP = "WRAP_MODE_CLAMP";

		[Token(Token = "0x4000826")]
		private const string WM_REPEAT = "WRAP_MODE_REPEAT";

		[Token(Token = "0x4000827")]
		private const string WM_CLIP = "WRAP_MODE_CLIP";

		[Token(Token = "0x4000828")]
		private const string ALPHA_REPLACE = "ALPHA_REPLACE";

		[Token(Token = "0x4000829")]
		private const string ALPHA_NOT_REPLACE = "ALPHA_NOT_REPLACE";

		[Token(Token = "0x400082A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Material grabAreaMaterial;

		[Token(Token = "0x6000608")]
		[Address(RVA = "0xA7EA60", Offset = "0xA7EA60", VA = "0xA7EA60")]
		public static void Clip(Texture clipTexture, float clipScale, Texture grabTargetTexture, Vector2 targetUV, float rotateAngle, GrabTextureWrapMode wrapMode, RenderTexture dst, bool replaceAlpha = true)
		{
		}

		[Token(Token = "0x6000609")]
		[Address(RVA = "0xA82D74", Offset = "0xA82D74", VA = "0xA82D74")]
		private static void InitGrabAreaMaterial()
		{
		}

		[Token(Token = "0x600060A")]
		[Address(RVA = "0xA82E40", Offset = "0xA82E40", VA = "0xA82E40")]
		private static void SetGrabAreaProperty(Texture clip, float clipScale, Texture grabTarget, Vector2 targetUV, float rotateAngle, GrabTextureWrapMode wrapMpde, bool replaceAlpha)
		{
		}
	}
	[Token(Token = "0x200015D")]
	[DisallowMultipleComponent]
	[RequireComponent(typeof(InkCanvas))]
	public class HeightFluid : MonoBehaviour
	{
		[Token(Token = "0x200015E")]
		private enum ColorSynthesis
		{
			[Token(Token = "0x4000849")]
			Add,
			[Token(Token = "0x400084A")]
			Overwrite
		}

		[Token(Token = "0x400082F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private bool useMainTextureFluid;

		[Token(Token = "0x4000830")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[SerializeField]
		private bool useNormalMapFluid;

		[Token(Token = "0x4000831")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private int createTextureSize;

		[Token(Token = "0x4000832")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private ColorSynthesis colorSynthesis;

		[Token(Token = "0x4000833")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Range(0f, 1f)]
		[SerializeField]
		private float alpha;

		[Token(Token = "0x4000834")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Vector2 flowDirection;

		[Token(Token = "0x4000835")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Range(0f, 1f)]
		[SerializeField]
		private float flowingForce;

		[Token(Token = "0x4000836")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Range(0.1f, 10f)]
		[SerializeField]
		private float easeOfDripping;

		[Token(Token = "0x4000837")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[Range(1f, 0f)]
		private float influenceOfNormal;

		[Token(Token = "0x4000838")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		[Range(0.01f, 1f)]
		private float horizontalSpread;

		[Token(Token = "0x4000839")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private float normalScaleFactor;

		[Token(Token = "0x400083A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[SerializeField]
		[Range(0.001f, 0.999f)]
		private float AdhesionBorder;

		[Token(Token = "0x400083B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private bool performanceOptimize;

		[Token(Token = "0x400083C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[SerializeField]
		[Range(0.01f, 10f)]
		private float fluidProcessStopTime;

		[Token(Token = "0x400083D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool enabledFluid;

		[Token(Token = "0x400083E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float lastPaintedTime;

		[Token(Token = "0x400083F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Material heightFluid;

		[Token(Token = "0x4000840")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material height2Normal;

		[Token(Token = "0x4000841")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Material height2Color;

		[Token(Token = "0x4000842")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Material singleColorFill;

		[Token(Token = "0x4000843")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Material invertAlpha;

		[Token(Token = "0x4000844")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private InkCanvas canvas;

		[Token(Token = "0x4000845")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Color lastPaintedColor;

		[Token(Token = "0x4000846")]
		private const string COLOR_SYNTHESIS_ADD = "COLOR_SYNTHESIS_ADD";

		[Token(Token = "0x4000847")]
		private const string COLOR_SYNTHESIS_OVERWRITE = "COLOR_SYNTHESIS_OVERWRITE";

		[Token(Token = "0x600060B")]
		[Address(RVA = "0xA8311C", Offset = "0xA8311C", VA = "0xA8311C")]
		private void Init(InkCanvas canvas)
		{
		}

		[Token(Token = "0x600060C")]
		[Address(RVA = "0xA833A0", Offset = "0xA833A0", VA = "0xA833A0")]
		private void SingleColorFill(RenderTexture texture, Color color)
		{
		}

		[Token(Token = "0x600060D")]
		[Address(RVA = "0xA834D4", Offset = "0xA834D4", VA = "0xA834D4")]
		private void InvertAlpha(RenderTexture texture)
		{
		}

		[Token(Token = "0x600060E")]
		[Address(RVA = "0xA835B0", Offset = "0xA835B0", VA = "0xA835B0")]
		private void EnabledFluid(InkCanvas canvas, Brush brush)
		{
		}

		[Token(Token = "0x600060F")]
		[Address(RVA = "0xA835FC", Offset = "0xA835FC", VA = "0xA835FC")]
		private void StopFluid()
		{
		}

		[Token(Token = "0x6000610")]
		[Address(RVA = "0xA837D4", Offset = "0xA837D4", VA = "0xA837D4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000611")]
		[Address(RVA = "0xA83AC8", Offset = "0xA83AC8", VA = "0xA83AC8")]
		private void OnWillRenderObject()
		{
		}

		[Token(Token = "0x6000612")]
		[Address(RVA = "0xA8487C", Offset = "0xA8487C", VA = "0xA8487C")]
		public HeightFluid()
		{
		}
	}
	[Token(Token = "0x200015F")]
	public static class ReverseUV
	{
		[Token(Token = "0x400084B")]
		private const string REVERSE_UV_MATERIAL = "Es.InkPainter.Effective.ReverseUV";

		[Token(Token = "0x400084C")]
		private const string REVERSE_X = "_ReverseX";

		[Token(Token = "0x400084D")]
		private const string REVERSE_Y = "_ReverseY";

		[Token(Token = "0x400084E")]
		private const float DEFAULT = 1f;

		[Token(Token = "0x400084F")]
		private const float REVERSE = 0f;

		[Token(Token = "0x4000850")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Material reverseUVMaterial;

		[Token(Token = "0x6000614")]
		[Address(RVA = "0xA8498C", Offset = "0xA8498C", VA = "0xA8498C")]
		public static void Horizontal(Texture src, RenderTexture dst)
		{
		}

		[Token(Token = "0x6000615")]
		[Address(RVA = "0xA84CA4", Offset = "0xA84CA4", VA = "0xA84CA4")]
		public static void Vertical(Texture src, RenderTexture dst)
		{
		}

		[Token(Token = "0x6000616")]
		[Address(RVA = "0xA84D4C", Offset = "0xA84D4C", VA = "0xA84D4C")]
		public static void HorizontalAndVertical(Texture src, RenderTexture dst)
		{
		}

		[Token(Token = "0x6000617")]
		[Address(RVA = "0xA84A34", Offset = "0xA84A34", VA = "0xA84A34")]
		private static void InitReverseUVMaterial()
		{
		}

		[Token(Token = "0x6000618")]
		[Address(RVA = "0xA84B00", Offset = "0xA84B00", VA = "0xA84B00")]
		private static void SetReverseUVProperty(float x, float y)
		{
		}

		[Token(Token = "0x6000619")]
		[Address(RVA = "0xA84BB4", Offset = "0xA84BB4", VA = "0xA84BB4")]
		private static void Blit(Texture src, RenderTexture dst)
		{
		}
	}
	[Token(Token = "0x2000160")]
	public static class TextureMorphing
	{
		[Token(Token = "0x4000851")]
		private const string TEXTURE_MORPHING_MATERIAL = "Es.InkPainter.Effective.TextureMorphing";

		[Token(Token = "0x4000852")]
		private const string LERP_COEFFICIENT = "_LerpCoef";

		[Token(Token = "0x4000853")]
		private const string SRC_TEX = "_SrcTex";

		[Token(Token = "0x4000854")]
		private const string DST_TEX = "_DstTex";

		[Token(Token = "0x4000855")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Material morphingMaterial;

		[Token(Token = "0x600061A")]
		[Address(RVA = "0xA84DF4", Offset = "0xA84DF4", VA = "0xA84DF4")]
		public static void Lerp(Texture src, RenderTexture dst, float lerpCoef)
		{
		}

		[Token(Token = "0x600061B")]
		[Address(RVA = "0xA84F44", Offset = "0xA84F44", VA = "0xA84F44")]
		private static void InitMorphingMaterial()
		{
		}

		[Token(Token = "0x600061C")]
		[Address(RVA = "0xA85010", Offset = "0xA85010", VA = "0xA85010")]
		private static void SetMorphingProperty(Texture src, RenderTexture dst, float lerpCoef)
		{
		}
	}
}
namespace Es.InkPainter.Sample
{
	[Token(Token = "0x2000161")]
	public class ClipPainter : MonoBehaviour
	{
		[Token(Token = "0x4000856")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private bool grab;

		[Token(Token = "0x4000857")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Brush brush;

		[Token(Token = "0x4000858")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private GrabArea.GrabTextureWrapMode wrapMode;

		[Token(Token = "0x4000859")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private RenderTexture t;

		[Token(Token = "0x400085A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private RaycastHit hitInfo;

		[Token(Token = "0x600061D")]
		[Address(RVA = "0xA85134", Offset = "0xA85134", VA = "0xA85134")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x600061E")]
		[Address(RVA = "0xA85328", Offset = "0xA85328", VA = "0xA85328")]
		public void Awake()
		{
		}

		[Token(Token = "0x600061F")]
		[Address(RVA = "0xA853E8", Offset = "0xA853E8", VA = "0xA853E8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000620")]
		[Address(RVA = "0xA8561C", Offset = "0xA8561C", VA = "0xA8561C")]
		public ClipPainter()
		{
		}
	}
	[Token(Token = "0x2000162")]
	[RequireComponent(typeof(Collider), typeof(MeshRenderer))]
	public class CollisionPainter : MonoBehaviour
	{
		[Token(Token = "0x2000163")]
		[CompilerGenerated]
		private sealed class <WaitForgo>d__6 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400085E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400085F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000860")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public CollisionPainter <>4__this;

			[Token(Token = "0x4000861")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public GameObject go;

			[Token(Token = "0x17000045")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600062A")]
				[Address(RVA = "0xA86AD4", Offset = "0xA86AD4", VA = "0xA86AD4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000046")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600062C")]
				[Address(RVA = "0xA86B1C", Offset = "0xA86B1C", VA = "0xA86B1C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000627")]
			[Address(RVA = "0xA869D0", Offset = "0xA869D0", VA = "0xA869D0")]
			[DebuggerHidden]
			public <WaitForgo>d__6(int <>1__state)
			{
			}

			[Token(Token = "0x6000628")]
			[Address(RVA = "0xA869F8", Offset = "0xA869F8", VA = "0xA869F8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000629")]
			[Address(RVA = "0xA869FC", Offset = "0xA869FC", VA = "0xA869FC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600062B")]
			[Address(RVA = "0xA86ADC", Offset = "0xA86ADC", VA = "0xA86ADC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400085B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Brush brush;

		[Token(Token = "0x400085C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private int wait;

		[Token(Token = "0x400085D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int waitCount;

		[Token(Token = "0x6000621")]
		[Address(RVA = "0xA85630", Offset = "0xA85630", VA = "0xA85630")]
		public void Awake()
		{
		}

		[Token(Token = "0x6000622")]
		[Address(RVA = "0xA856A4", Offset = "0xA856A4", VA = "0xA856A4")]
		public void FixedUpdate()
		{
		}

		[Token(Token = "0x6000623")]
		[Address(RVA = "0xA856B4", Offset = "0xA856B4", VA = "0xA856B4")]
		public void OnCollisionStay(Collision collision)
		{
		}

		[Token(Token = "0x6000624")]
		[Address(RVA = "0xA85840", Offset = "0xA85840", VA = "0xA85840")]
		[IteratorStateMachine(typeof(<WaitForgo>d__6))]
		private IEnumerator WaitForgo(GameObject go)
		{
			return null;
		}

		[Token(Token = "0x6000625")]
		[Address(RVA = "0xA858D0", Offset = "0xA858D0", VA = "0xA858D0")]
		public void AnimalMarkingDone(GameObject animal)
		{
		}

		[Token(Token = "0x6000626")]
		[Address(RVA = "0xA859C0", Offset = "0xA859C0", VA = "0xA859C0")]
		public CollisionPainter()
		{
		}
	}
	[Token(Token = "0x2000164")]
	[RequireComponent(typeof(Collider))]
	public class CollisionReflectionPainter : MonoBehaviour
	{
		[Token(Token = "0x4000862")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Brush brush;

		[Token(Token = "0x4000863")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Camera cam;

		[Token(Token = "0x4000864")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Vector3 offset;

		[Token(Token = "0x4000865")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private bool debugMode;

		[Token(Token = "0x4000866")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private RenderTexture rt;

		[Token(Token = "0x4000867")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private RenderTexture debug;

		[Token(Token = "0x600062D")]
		[Address(RVA = "0xA86B24", Offset = "0xA86B24", VA = "0xA86B24")]
		public void OnGUI()
		{
		}

		[Token(Token = "0x600062E")]
		[Address(RVA = "0xA86C08", Offset = "0xA86C08", VA = "0xA86C08")]
		private void Awake()
		{
		}

		[Token(Token = "0x600062F")]
		[Address(RVA = "0xA86D20", Offset = "0xA86D20", VA = "0xA86D20")]
		public void OnDestroy()
		{
		}

		[Token(Token = "0x6000630")]
		[Address(RVA = "0xA86D2C", Offset = "0xA86D2C", VA = "0xA86D2C")]
		public void OnCollisionStay(Collision collision)
		{
		}

		[Token(Token = "0x6000631")]
		[Address(RVA = "0xA87198", Offset = "0xA87198", VA = "0xA87198")]
		public CollisionReflectionPainter()
		{
		}
	}
	[Token(Token = "0x2000166")]
	public class MousePainter : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000167")]
		private enum UseMethodType
		{
			[Token(Token = "0x400086F")]
			RaycastHitInfo,
			[Token(Token = "0x4000870")]
			WorldPoint,
			[Token(Token = "0x4000871")]
			NearestSurfacePoint,
			[Token(Token = "0x4000872")]
			DirectUV
		}

		[Token(Token = "0x400086B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Brush brush;

		[Token(Token = "0x400086C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private UseMethodType useMethodType;

		[Token(Token = "0x400086D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private bool erase;

		[Token(Token = "0x6000636")]
		[Address(RVA = "0xA87340", Offset = "0xA87340", VA = "0xA87340")]
		private void Update()
		{
		}

		[Token(Token = "0x6000637")]
		[Address(RVA = "0xA8769C", Offset = "0xA8769C", VA = "0xA8769C")]
		public void OnGUI()
		{
		}

		[Token(Token = "0x6000638")]
		[Address(RVA = "0xA877C8", Offset = "0xA877C8", VA = "0xA877C8")]
		public MousePainter()
		{
		}
	}
	[Token(Token = "0x2000168")]
	public class ReflectPainter : MonoBehaviour
	{
		[Token(Token = "0x4000873")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Brush brush;

		[Token(Token = "0x4000874")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GameObject camPref;

		[Token(Token = "0x4000875")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private RenderTexture rt;

		[Token(Token = "0x4000876")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Camera cam;

		[Token(Token = "0x4000877")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector2 uv;

		[Token(Token = "0x4000878")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private InkCanvas paintObject;

		[Token(Token = "0x6000639")]
		[Address(RVA = "0xA877D0", Offset = "0xA877D0", VA = "0xA877D0")]
		public void Awake()
		{
		}

		[Token(Token = "0x600063A")]
		[Address(RVA = "0xA87880", Offset = "0xA87880", VA = "0xA87880")]
		public void OnGUI()
		{
		}

		[Token(Token = "0x600063B")]
		[Address(RVA = "0xA879AC", Offset = "0xA879AC", VA = "0xA879AC")]
		private void Update()
		{
		}

		[Token(Token = "0x600063C")]
		[Address(RVA = "0xA87DC4", Offset = "0xA87DC4", VA = "0xA87DC4")]
		public ReflectPainter()
		{
		}
	}
	[Token(Token = "0x2000169")]
	[RequireComponent(typeof(InkCanvas))]
	public class TextureRecovery : MonoBehaviour
	{
		[Token(Token = "0x200016A")]
		[CompilerGenerated]
		private sealed class <TextureLerp>d__14 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000884")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000885")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000886")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TextureRecovery <>4__this;

			[Token(Token = "0x4000887")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <i>5__2;

			[Token(Token = "0x17000047")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000645")]
				[Address(RVA = "0xA884DC", Offset = "0xA884DC", VA = "0xA884DC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000048")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000647")]
				[Address(RVA = "0xA88524", Offset = "0xA88524", VA = "0xA88524", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000642")]
			[Address(RVA = "0xA88240", Offset = "0xA88240", VA = "0xA88240")]
			[DebuggerHidden]
			public <TextureLerp>d__14(int <>1__state)
			{
			}

			[Token(Token = "0x6000643")]
			[Address(RVA = "0xA88280", Offset = "0xA88280", VA = "0xA88280", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000644")]
			[Address(RVA = "0xA88284", Offset = "0xA88284", VA = "0xA88284", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000646")]
			[Address(RVA = "0xA884E4", Offset = "0xA884E4", VA = "0xA884E4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000879")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float lerpCoefficient;

		[Token(Token = "0x400087A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float callTimer;

		[Token(Token = "0x400087B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private bool @fixed;

		[Token(Token = "0x400087C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Material material;

		[Token(Token = "0x400087D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private InkCanvas canvas;

		[Token(Token = "0x400087E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Texture defaultMainTexture;

		[Token(Token = "0x400087F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private RenderTexture paintMainTexture;

		[Token(Token = "0x4000880")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Texture defaultNormalMap;

		[Token(Token = "0x4000881")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private RenderTexture paintNormalMap;

		[Token(Token = "0x4000882")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Texture defaultHeightMap;

		[Token(Token = "0x4000883")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private RenderTexture paintHeightMap;

		[Token(Token = "0x600063D")]
		[Address(RVA = "0xA87DCC", Offset = "0xA87DCC", VA = "0xA87DCC")]
		private void Awake()
		{
		}

		[Token(Token = "0x600063E")]
		[Address(RVA = "0xA87E94", Offset = "0xA87E94", VA = "0xA87E94")]
		private void Init(InkCanvas canvas)
		{
		}

		[Token(Token = "0x600063F")]
		[Address(RVA = "0xA880D0", Offset = "0xA880D0", VA = "0xA880D0")]
		public void FixedUpdate()
		{
		}

		[Token(Token = "0x6000640")]
		[Address(RVA = "0xA8805C", Offset = "0xA8805C", VA = "0xA8805C")]
		[IteratorStateMachine(typeof(<TextureLerp>d__14))]
		private IEnumerator TextureLerp()
		{
			return null;
		}

		[Token(Token = "0x6000641")]
		[Address(RVA = "0xA88268", Offset = "0xA88268", VA = "0xA88268")]
		public TextureRecovery()
		{
		}
	}
}
namespace FIMSpace
{
	[Token(Token = "0x200016B")]
	public class TailDemo_2DMover : MonoBehaviour
	{
		[Token(Token = "0x4000888")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float MovementSpeed;

		[Token(Token = "0x4000889")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Range(0f, 1f)]
		public float SmoothRotation;

		[Token(Token = "0x400088A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float JumpPower;

		[Token(Token = "0x400088B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool DoubleJump;

		[Token(Token = "0x400088C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		[Tooltip("Use keyboard keys movement implementation for quick debugging?")]
		public bool WSADMovement;

		[Token(Token = "0x400088D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Range(0f, 0.5f)]
		[Tooltip("How slow accelerate/decelerate should be")]
		public float accelerationTime;

		[Token(Token = "0x400088E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		protected float moveSpeed;

		[Token(Token = "0x400088F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected float rotateSpeed;

		[Token(Token = "0x4000890")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		protected Vector3 smoothedAcceleration;

		[Token(Token = "0x4000891")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 moveDir;

		[Token(Token = "0x4000892")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		protected Quaternion targetRot;

		[Token(Token = "0x4000893")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		protected Vector3 veloHelper;

		[Token(Token = "0x4000894")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected bool isGrounded;

		[Token(Token = "0x4000895")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		protected float triggerJumping;

		[Token(Token = "0x4000896")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Rigidbody2D rigbody;

		[Token(Token = "0x4000897")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Collider2D charCollider;

		[Token(Token = "0x4000898")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int jumps;

		[Token(Token = "0x6000648")]
		[Address(RVA = "0xA8852C", Offset = "0xA8852C", VA = "0xA8852C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000649")]
		[Address(RVA = "0xA885E4", Offset = "0xA885E4", VA = "0xA885E4")]
		private void Update()
		{
		}

		[Token(Token = "0x600064A")]
		[Address(RVA = "0xA888E4", Offset = "0xA888E4", VA = "0xA888E4", Slot = "4")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x600064B")]
		[Address(RVA = "0xA88C80", Offset = "0xA88C80", VA = "0xA88C80", Slot = "5")]
		protected virtual void OnCollisionEnter2D(Collision2D collision)
		{
		}

		[Token(Token = "0x600064C")]
		[Address(RVA = "0xA88DA4", Offset = "0xA88DA4", VA = "0xA88DA4", Slot = "6")]
		protected virtual void OnGrounded()
		{
		}

		[Token(Token = "0x600064D")]
		[Address(RVA = "0xA88DB4", Offset = "0xA88DB4", VA = "0xA88DB4")]
		public TailDemo_2DMover()
		{
		}
	}
	[Token(Token = "0x200016C")]
	public static class FAnimatorMethods
	{
		[Token(Token = "0x600064E")]
		[Address(RVA = "0xA88E54", Offset = "0xA88E54", VA = "0xA88E54")]
		public static void LerpFloatValue(this Animator animator, string name = "RunWalk", float value = 0f, float deltaSpeed = 8f)
		{
		}

		[Token(Token = "0x600064F")]
		[Address(RVA = "0xA88ED8", Offset = "0xA88ED8", VA = "0xA88ED8")]
		public static bool CheckAnimationEnd(this Animator animator, int layer = 0, bool reverse = false, bool checkAnimLoop = true)
		{
			return default(bool);
		}

		[Token(Token = "0x6000650")]
		[Address(RVA = "0xA88FB0", Offset = "0xA88FB0", VA = "0xA88FB0")]
		public static void ResetLayersWeights(this Animator animator, float speed = 10f)
		{
		}

		[Token(Token = "0x6000651")]
		[Address(RVA = "0xA89080", Offset = "0xA89080", VA = "0xA89080")]
		public static void LerpLayerWeight(this Animator animator, int layer = 0, float newValue = 1f, float speed = 8f)
		{
		}

		[Token(Token = "0x6000652")]
		[Address(RVA = "0xA89100", Offset = "0xA89100", VA = "0xA89100")]
		public static bool StateExists(this Animator animator, string clipName, int layer = 0)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200016D")]
	public static class FColorMethods
	{
		[Token(Token = "0x6000653")]
		[Address(RVA = "0xA89140", Offset = "0xA89140", VA = "0xA89140")]
		public static Color ChangeColorAlpha(this Color color, float alpha)
		{
			return default(Color);
		}

		[Token(Token = "0x6000654")]
		[Address(RVA = "0xA89148", Offset = "0xA89148", VA = "0xA89148")]
		public static Color ChangeColorsValue(this Color color, float brightenOrDarken = 0f)
		{
			return default(Color);
		}

		[Token(Token = "0x6000655")]
		[Address(RVA = "0xA89158", Offset = "0xA89158", VA = "0xA89158")]
		public static Color32 HexToColor(this string hex)
		{
			return default(Color32);
		}

		[Token(Token = "0x6000656")]
		[Address(RVA = "0xA895F0", Offset = "0xA895F0", VA = "0xA895F0")]
		public static string ColorToHex(this Color32 color, bool addHash = true)
		{
			return null;
		}

		[Token(Token = "0x6000657")]
		[Address(RVA = "0xA8990C", Offset = "0xA8990C", VA = "0xA8990C")]
		public static string ColorToHex(this Color color, bool addHash = true)
		{
			return null;
		}

		[Token(Token = "0x6000658")]
		[Address(RVA = "0xA8997C", Offset = "0xA8997C", VA = "0xA8997C")]
		public static void LerpMaterialColor(this Material mat, string property, Color targetColor, float deltaMultiplier = 8f)
		{
		}
	}
	[Token(Token = "0x200016E")]
	public static class FDebug
	{
		[Token(Token = "0x6000659")]
		[Address(RVA = "0xA89D60", Offset = "0xA89D60", VA = "0xA89D60")]
		public static void Log(string log)
		{
		}

		[Token(Token = "0x600065A")]
		[Address(RVA = "0xA89DEC", Offset = "0xA89DEC", VA = "0xA89DEC")]
		public static void Log(string log, string category)
		{
		}

		[Token(Token = "0x600065B")]
		[Address(RVA = "0xA8952C", Offset = "0xA8952C", VA = "0xA8952C")]
		public static void LogRed(string log)
		{
		}

		[Token(Token = "0x600065C")]
		[Address(RVA = "0xA8A17C", Offset = "0xA8A17C", VA = "0xA8A17C")]
		public static void LogOrange(string log)
		{
		}

		[Token(Token = "0x600065D")]
		[Address(RVA = "0xA8A240", Offset = "0xA8A240", VA = "0xA8A240")]
		public static void LogYellow(string log)
		{
		}

		[Token(Token = "0x600065E")]
		[Address(RVA = "0xA8A0D0", Offset = "0xA8A0D0", VA = "0xA8A0D0")]
		public static string MarkerColor(string color)
		{
			return null;
		}

		[Token(Token = "0x600065F")]
		[Address(RVA = "0xA8A13C", Offset = "0xA8A13C", VA = "0xA8A13C")]
		public static string EndColorMarker()
		{
			return null;
		}

		[Token(Token = "0x6000660")]
		[Address(RVA = "0xA8A304", Offset = "0xA8A304", VA = "0xA8A304")]
		public static void DrawBounds2D(this Bounds b, Color c, float y = 0f, float scale = 1f)
		{
		}

		[Token(Token = "0x6000661")]
		[Address(RVA = "0xA8A52C", Offset = "0xA8A52C", VA = "0xA8A52C")]
		public static void DrawBounds3D(this Bounds b, Color c, float scale = 1f)
		{
		}
	}
	[Token(Token = "0x200016F")]
	public static class FStringMethods
	{
		[Token(Token = "0x6000662")]
		[Address(RVA = "0xA8AAA4", Offset = "0xA8AAA4", VA = "0xA8AAA4")]
		public static string IntToString(this int value, int signs)
		{
			return null;
		}

		[Token(Token = "0x6000663")]
		[Address(RVA = "0xA8AB70", Offset = "0xA8AB70", VA = "0xA8AB70")]
		public static string CapitalizeOnlyFirstLetter(this string text)
		{
			return null;
		}

		[Token(Token = "0x6000664")]
		[Address(RVA = "0xA8AC38", Offset = "0xA8AC38", VA = "0xA8AC38")]
		public static string CapitalizeFirstLetter(this string text)
		{
			return null;
		}

		[Token(Token = "0x6000665")]
		[Address(RVA = "0xA8ACC0", Offset = "0xA8ACC0", VA = "0xA8ACC0")]
		public static string ReplaceSpacesWithUnderline(this string text)
		{
			return null;
		}

		[Token(Token = "0x6000666")]
		[Address(RVA = "0xA8AD50", Offset = "0xA8AD50", VA = "0xA8AD50")]
		public static string GetEndOfStringFromSeparator(this string source, char[] separators, int which = 1, bool fromEnd = false)
		{
			return null;
		}

		[Token(Token = "0x6000667")]
		[Address(RVA = "0xA8AE98", Offset = "0xA8AE98", VA = "0xA8AE98")]
		public static string GetEndOfStringFromStringSeparator(this string source, string[] separators, int which = 1, bool rest = false)
		{
			return null;
		}
	}
	[Token(Token = "0x2000170")]
	public static class FEngineering
	{
		[Token(Token = "0x4000899")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Plane axis2DProjection;

		[Token(Token = "0x400089A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static PhysicMaterial _slidingMat;

		[Token(Token = "0x400089B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static PhysicMaterial _frictMat;

		[Token(Token = "0x400089C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static PhysicsMaterial2D _slidingMat2D;

		[Token(Token = "0x400089D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static PhysicsMaterial2D _frictMat2D;

		[Token(Token = "0x17000049")]
		public static PhysicMaterial PMSliding
		{
			[Token(Token = "0x6000686")]
			[Address(RVA = "0xA8C660", Offset = "0xA8C660", VA = "0xA8C660")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700004A")]
		public static PhysicMaterial PMFrict
		{
			[Token(Token = "0x6000687")]
			[Address(RVA = "0xA8C798", Offset = "0xA8C798", VA = "0xA8C798")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700004B")]
		public static PhysicsMaterial2D PMSliding2D
		{
			[Token(Token = "0x6000688")]
			[Address(RVA = "0xA88A80", Offset = "0xA88A80", VA = "0xA88A80")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700004C")]
		public static PhysicsMaterial2D PMFrict2D
		{
			[Token(Token = "0x6000689")]
			[Address(RVA = "0xA88B80", Offset = "0xA88B80", VA = "0xA88B80")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000668")]
		[Address(RVA = "0xA8B010", Offset = "0xA8B010", VA = "0xA8B010")]
		public static bool VIsZero(this Vector3 vec)
		{
			return default(bool);
		}

		[Token(Token = "0x6000669")]
		[Address(RVA = "0xA8B030", Offset = "0xA8B030", VA = "0xA8B030")]
		public static bool VIsSame(this Vector3 vec1, Vector3 vec2)
		{
			return default(bool);
		}

		[Token(Token = "0x600066A")]
		[Address(RVA = "0xA8B054", Offset = "0xA8B054", VA = "0xA8B054")]
		public static Vector3 TransformVector(this Quaternion parentRot, Vector3 parentLossyScale, Vector3 childLocalPos)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600066B")]
		[Address(RVA = "0xA8B070", Offset = "0xA8B070", VA = "0xA8B070")]
		public static Vector3 TransformInDirection(this Quaternion childRotation, Vector3 parentLossyScale, Vector3 childLocalPos)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600066C")]
		[Address(RVA = "0xA8B0A4", Offset = "0xA8B0A4", VA = "0xA8B0A4")]
		public static Vector3 InverseTransformVector(this Quaternion tRotation, Vector3 tLossyScale, Vector3 worldPos)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600066D")]
		[Address(RVA = "0xA8B104", Offset = "0xA8B104", VA = "0xA8B104")]
		public static Vector3 VAxis2DLimit(this Transform parent, Vector3 parentPos, Vector3 childPos, int axis = 3)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600066E")]
		[Address(RVA = "0xA8B220", Offset = "0xA8B220", VA = "0xA8B220")]
		public static Quaternion QToLocal(this Quaternion parentRotation, Quaternion worldRotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600066F")]
		[Address(RVA = "0xA8B2C4", Offset = "0xA8B2C4", VA = "0xA8B2C4")]
		public static Quaternion QToWorld(this Quaternion parentRotation, Quaternion localRotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000670")]
		[Address(RVA = "0xA8B338", Offset = "0xA8B338", VA = "0xA8B338")]
		public static Quaternion QRotateChild(this Quaternion offset, Quaternion parentRot, Quaternion childLocalRot)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000671")]
		[Address(RVA = "0xA8B428", Offset = "0xA8B428", VA = "0xA8B428")]
		public static Quaternion ClampRotation(this Vector3 current, Vector3 bounds)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000672")]
		[Address(RVA = "0xA8B510", Offset = "0xA8B510", VA = "0xA8B510")]
		public static Vector3 QToAngularVelocity(this Quaternion deltaRotation, bool fix = false)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000673")]
		[Address(RVA = "0xA8B734", Offset = "0xA8B734", VA = "0xA8B734")]
		public static Vector3 QToAngularVelocity(this Quaternion currentRotation, Quaternion targetRotation, bool fix = false)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000674")]
		[Address(RVA = "0xA8B7E0", Offset = "0xA8B7E0", VA = "0xA8B7E0")]
		public static bool QIsZero(this Quaternion rot)
		{
			return default(bool);
		}

		[Token(Token = "0x6000675")]
		[Address(RVA = "0xA8B804", Offset = "0xA8B804", VA = "0xA8B804")]
		public static bool QIsSame(this Quaternion rot1, Quaternion rot2)
		{
			return default(bool);
		}

		[Token(Token = "0x6000676")]
		[Address(RVA = "0xA8B830", Offset = "0xA8B830", VA = "0xA8B830")]
		public static float WrapAngle(float angle)
		{
			return default(float);
		}

		[Token(Token = "0x6000677")]
		[Address(RVA = "0xA8B480", Offset = "0xA8B480", VA = "0xA8B480")]
		public static Vector3 WrapVector(Vector3 angles)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000678")]
		[Address(RVA = "0xA8B864", Offset = "0xA8B864", VA = "0xA8B864")]
		public static float UnwrapAngle(float angle)
		{
			return default(float);
		}

		[Token(Token = "0x6000679")]
		[Address(RVA = "0xA8B898", Offset = "0xA8B898", VA = "0xA8B898")]
		public static Vector3 UnwrapVector(Vector3 angles)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600067A")]
		[Address(RVA = "0xA8B92C", Offset = "0xA8B92C", VA = "0xA8B92C")]
		public static Quaternion SmoothDampRotation(this Quaternion current, Quaternion target, ref Quaternion velocityRef, float duration, float delta)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600067B")]
		[Address(RVA = "0xA8B95C", Offset = "0xA8B95C", VA = "0xA8B95C")]
		public static Quaternion SmoothDampRotation(this Quaternion current, Quaternion target, ref Quaternion velocityRef, float duration, float maxSpeed, float delta)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600067C")]
		[Address(RVA = "0xA8BB94", Offset = "0xA8BB94", VA = "0xA8BB94")]
		public static bool SameDirection(this float a, float b)
		{
			return default(bool);
		}

		[Token(Token = "0x600067D")]
		[Address(RVA = "0xA8BBC4", Offset = "0xA8BBC4", VA = "0xA8BBC4")]
		public static float PointDisperse01(int index, int baseV = 2)
		{
			return default(float);
		}

		[Token(Token = "0x600067E")]
		[Address(RVA = "0xA8BC78", Offset = "0xA8BC78", VA = "0xA8BC78")]
		public static float PointDisperse(int index, int baseV = 2)
		{
			return default(float);
		}

		[Token(Token = "0x600067F")]
		[Address(RVA = "0xA8BD30", Offset = "0xA8BD30", VA = "0xA8BD30")]
		public static float GetScaler(this Transform transform)
		{
			return default(float);
		}

		[Token(Token = "0x6000680")]
		[Address(RVA = "0xA8BDB4", Offset = "0xA8BDB4", VA = "0xA8BDB4")]
		public static Vector3 PosFromMatrix(this Matrix4x4 m)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000681")]
		[Address(RVA = "0xA8BDC0", Offset = "0xA8BDC0", VA = "0xA8BDC0")]
		public static Quaternion RotFromMatrix(this Matrix4x4 m)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000682")]
		[Address(RVA = "0xA8BE24", Offset = "0xA8BE24", VA = "0xA8BE24")]
		public static Vector3 ScaleFromMatrix(this Matrix4x4 m)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000683")]
		[Address(RVA = "0xA8BFB8", Offset = "0xA8BFB8", VA = "0xA8BFB8")]
		public static Bounds RotateBoundsByMatrix(this Bounds b, Quaternion rotation)
		{
			return default(Bounds);
		}

		[Token(Token = "0x6000684")]
		[Address(RVA = "0xA8C394", Offset = "0xA8C394", VA = "0xA8C394")]
		public static Bounds RotateLocalBounds(this Bounds b, Quaternion rotation)
		{
			return default(Bounds);
		}

		[Token(Token = "0x6000685")]
		[Address(RVA = "0xA8C52C", Offset = "0xA8C52C", VA = "0xA8C52C")]
		public static int[] GetLayermaskValues(int mask, int optionsCount)
		{
			return null;
		}
	}
	[Token(Token = "0x2000171")]
	public static class FLogicMethods
	{
		[Token(Token = "0x600068A")]
		[Address(RVA = "0xA88EA4", Offset = "0xA88EA4", VA = "0xA88EA4")]
		public static float Lerp(this float from, float to, float value)
		{
			return default(float);
		}

		[Token(Token = "0x600068B")]
		[Address(RVA = "0xA8C8D0", Offset = "0xA8C8D0", VA = "0xA8C8D0")]
		public static float InverseLerp(float from, float to, float value)
		{
			return default(float);
		}

		[Token(Token = "0x600068C")]
		[Address(RVA = "0xA8C904", Offset = "0xA8C904", VA = "0xA8C904")]
		public static float InverseLerpUnclamped(float xx, float yy, float value)
		{
			return default(float);
		}

		[Token(Token = "0x600068D")]
		[Address(RVA = "0xA8C924", Offset = "0xA8C924", VA = "0xA8C924")]
		public static float FLerp(float a, float b, float t, float factor = 0.01f)
		{
			return default(float);
		}

		[Token(Token = "0x600068E")]
		[Address(RVA = "0xA8C96C", Offset = "0xA8C96C", VA = "0xA8C96C")]
		public static int IntLerp(int a, int b, float t)
		{
			return default(int);
		}

		[Token(Token = "0x600068F")]
		[Address(RVA = "0xA8C990", Offset = "0xA8C990", VA = "0xA8C990")]
		public static void IntLerp(ref int source, int a, int b, float t)
		{
		}

		[Token(Token = "0x6000690")]
		[Address(RVA = "0xA8CB64", Offset = "0xA8CB64", VA = "0xA8CB64")]
		public static void IntLerp(ref int source, int b, float t)
		{
		}

		[Token(Token = "0x6000691")]
		[Address(RVA = "0xA8CB74", Offset = "0xA8CB74", VA = "0xA8CB74")]
		public static float FAbs(this float value)
		{
			return default(float);
		}

		[Token(Token = "0x6000692")]
		[Address(RVA = "0xA8CB84", Offset = "0xA8CB84", VA = "0xA8CB84")]
		public static float HyperCurve(this float value)
		{
			return default(float);
		}

		[Token(Token = "0x6000693")]
		[Address(RVA = "0xA8CBAC", Offset = "0xA8CBAC", VA = "0xA8CBAC")]
		public static float TopDownDistanceManhattan(this Vector3 a, Vector3 b)
		{
			return default(float);
		}

		[Token(Token = "0x6000694")]
		[Address(RVA = "0xA8CBDC", Offset = "0xA8CBDC", VA = "0xA8CBDC")]
		public static float TopDownDistance(this Vector3 a, Vector3 b)
		{
			return default(float);
		}

		[Token(Token = "0x6000695")]
		[Address(RVA = "0xA8CC58", Offset = "0xA8CC58", VA = "0xA8CC58")]
		public static float DistanceManhattan(this Vector3 a, Vector3 b)
		{
			return default(float);
		}

		[Token(Token = "0x6000696")]
		[Address(RVA = "0xA8CC9C", Offset = "0xA8CC9C", VA = "0xA8CC9C")]
		public static float WrapAngle(float angle)
		{
			return default(float);
		}

		[Token(Token = "0x6000697")]
		[Address(RVA = "0xA8CCD0", Offset = "0xA8CCD0", VA = "0xA8CCD0")]
		public static Vector3 WrapVector(Vector3 angles)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000698")]
		[Address(RVA = "0xA8CD60", Offset = "0xA8CD60", VA = "0xA8CD60")]
		public static float UnwrapAngle(float angle)
		{
			return default(float);
		}

		[Token(Token = "0x6000699")]
		[Address(RVA = "0xA8CD94", Offset = "0xA8CD94", VA = "0xA8CD94")]
		public static Vector3 UnwrapVector(Vector3 angles)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600069A")]
		[Address(RVA = "0xA8CE28", Offset = "0xA8CE28", VA = "0xA8CE28")]
		public static bool IsAlmostEqual(float val, float to, int afterComma = 2, float addRange = 0f)
		{
			return default(bool);
		}

		[Token(Token = "0x600069B")]
		[Address(RVA = "0xA8CE90", Offset = "0xA8CE90", VA = "0xA8CE90")]
		public static Quaternion TopDownAngle(Vector3 from, Vector3 to)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600069C")]
		[Address(RVA = "0xA8CEA4", Offset = "0xA8CEA4", VA = "0xA8CEA4")]
		public static Quaternion TopDownAnglePosition2D(Vector2 from, Vector2 to, float offset = 0f)
		{
			return default(Quaternion);
		}
	}
	[Token(Token = "0x2000172")]
	public static class FTransformMethods
	{
		[Token(Token = "0x600069D")]
		[Address(RVA = "0xA8CF1C", Offset = "0xA8CF1C", VA = "0xA8CF1C")]
		public static Transform FindChildByNameInDepth(string name, Transform transform, bool findInDeactivated = true, [Optional] string[] additionalContains)
		{
			return null;
		}

		[Token(Token = "0x600069E")]
		public static List<T> FindComponentsInAllChildren<T>(Transform transformToSearchIn, bool includeInactive = false) where T : Component
		{
			return null;
		}

		[Token(Token = "0x600069F")]
		public static T FindComponentInAllChildren<T>(Transform transformToSearchIn) where T : Component
		{
			return null;
		}

		[Token(Token = "0x60006A0")]
		public static T FindComponentInAllParents<T>(Transform transformToSearchIn) where T : Component
		{
			return null;
		}

		[Token(Token = "0x60006A1")]
		[Address(RVA = "0xA8D0BC", Offset = "0xA8D0BC", VA = "0xA8D0BC")]
		public static void ChangeActiveChildrenInside(Transform parentOfThem, bool active)
		{
		}

		[Token(Token = "0x60006A2")]
		[Address(RVA = "0xA8D13C", Offset = "0xA8D13C", VA = "0xA8D13C")]
		public static void ChangeActiveThroughParentTo(Transform start, Transform end, bool active, bool changeParentsChildrenActivation = false)
		{
		}
	}
	[Token(Token = "0x2000173")]
	public static class FVectorMethods
	{
		[Token(Token = "0x60006A3")]
		[Address(RVA = "0xA8D244", Offset = "0xA8D244", VA = "0xA8D244")]
		public static Vector3 RandomVector(float rangeA, float rangeB)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60006A4")]
		[Address(RVA = "0xA8D2A4", Offset = "0xA8D2A4", VA = "0xA8D2A4")]
		public static float VectorSum(Vector3 vector)
		{
			return default(float);
		}

		[Token(Token = "0x60006A5")]
		[Address(RVA = "0xA8D2B0", Offset = "0xA8D2B0", VA = "0xA8D2B0")]
		public static Vector3 RandomVectorNoY(float rangeA, float rangeB)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60006A6")]
		[Address(RVA = "0xA8D2FC", Offset = "0xA8D2FC", VA = "0xA8D2FC")]
		public static Vector3 RandomVectorMinMax(float min, float max)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60006A7")]
		[Address(RVA = "0xA8D3C8", Offset = "0xA8D3C8", VA = "0xA8D3C8")]
		public static Vector3 RandomVectorNoYMinMax(float min, float max)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60006A8")]
		[Address(RVA = "0xA8D460", Offset = "0xA8D460", VA = "0xA8D460")]
		public static Vector3 GetUIPositionFromWorldPosition(Vector3 position, Camera camera, RectTransform canvas)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60006A9")]
		[Address(RVA = "0xA8D510", Offset = "0xA8D510", VA = "0xA8D510")]
		public static Vector2 XOZ(this Vector3 toBeFlattened)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60006AA")]
		[Address(RVA = "0xA8D518", Offset = "0xA8D518", VA = "0xA8D518")]
		public static float DistanceTopDown(Vector3 from, Vector3 to)
		{
			return default(float);
		}

		[Token(Token = "0x60006AB")]
		[Address(RVA = "0xA8D594", Offset = "0xA8D594", VA = "0xA8D594")]
		public static float DistanceTopDownManhattan(Vector3 from, Vector3 to)
		{
			return default(float);
		}

		[Token(Token = "0x60006AC")]
		[Address(RVA = "0xA8D5A4", Offset = "0xA8D5A4", VA = "0xA8D5A4")]
		public static Vector3 ChooseDominantAxis(Vector3 axis)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60006AD")]
		[Address(RVA = "0xA8D618", Offset = "0xA8D618", VA = "0xA8D618")]
		public static Vector3 GetRounded(Vector3 dir)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60006AE")]
		[Address(RVA = "0xA8D7B0", Offset = "0xA8D7B0", VA = "0xA8D7B0")]
		public static Vector3 GetCounterAxis(Vector3 axis)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60006AF")]
		[Address(RVA = "0xA8D7C4", Offset = "0xA8D7C4", VA = "0xA8D7C4")]
		public static Color GetAxisColor(Vector3 axis, float alpha = 0.75f)
		{
			return default(Color);
		}

		[Token(Token = "0x60006B0")]
		[Address(RVA = "0xA8D7D8", Offset = "0xA8D7D8", VA = "0xA8D7D8")]
		public static Vector3 FlattenVector(Vector3 v, float to = 90f)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60006B1")]
		[Address(RVA = "0xA8D990", Offset = "0xA8D990", VA = "0xA8D990")]
		public static Vector3 FlattenVector(Vector3 v, Vector3 to)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60006B2")]
		[Address(RVA = "0xA8DB3C", Offset = "0xA8DB3C", VA = "0xA8DB3C")]
		public static Vector3Int V3toV3Int(Vector3 v)
		{
			return default(Vector3Int);
		}

		[Token(Token = "0x60006B3")]
		[Address(RVA = "0xA8DD88", Offset = "0xA8DD88", VA = "0xA8DD88")]
		public static Vector3 FlattenNormal(Quaternion orientation, [Optional] Vector3? forward, float to = 90f)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60006B4")]
		[Address(RVA = "0xA8DEDC", Offset = "0xA8DEDC", VA = "0xA8DEDC")]
		public static Vector3 EqualVector(float valueAll)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60006B5")]
		[Address(RVA = "0xA8DEE8", Offset = "0xA8DEE8", VA = "0xA8DEE8")]
		public static Quaternion FlattenRotation(Quaternion orientation, float to = 90f)
		{
			return default(Quaternion);
		}
	}
	[Token(Token = "0x2000174")]
	public abstract class FImp_ColliderData_Base
	{
		[Token(Token = "0x2000175")]
		public enum EFColliderType
		{
			[Token(Token = "0x40008A8")]
			Box,
			[Token(Token = "0x40008A9")]
			Sphere,
			[Token(Token = "0x40008AA")]
			Capsule,
			[Token(Token = "0x40008AB")]
			Mesh,
			[Token(Token = "0x40008AC")]
			Terrain
		}

		[Token(Token = "0x40008A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool Is2D;

		[Token(Token = "0x40008A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected Vector3 previousPosition;

		[Token(Token = "0x40008A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		protected Quaternion previousRotation;

		[Token(Token = "0x40008A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		protected Vector3 previousScale;

		[Token(Token = "0x1700004D")]
		public Transform Transform
		{
			[Token(Token = "0x60006B6")]
			[Address(RVA = "0xA8DF44", Offset = "0xA8DF44", VA = "0xA8DF44")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60006B7")]
			[Address(RVA = "0xA8DF4C", Offset = "0xA8DF4C", VA = "0xA8DF4C")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x1700004E")]
		public Collider Collider
		{
			[Token(Token = "0x60006B8")]
			[Address(RVA = "0xA8DF54", Offset = "0xA8DF54", VA = "0xA8DF54")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60006B9")]
			[Address(RVA = "0xA8DF5C", Offset = "0xA8DF5C", VA = "0xA8DF5C")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x1700004F")]
		public Collider2D Collider2D
		{
			[Token(Token = "0x60006BA")]
			[Address(RVA = "0xA8DF64", Offset = "0xA8DF64", VA = "0xA8DF64")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60006BB")]
			[Address(RVA = "0xA8DF6C", Offset = "0xA8DF6C", VA = "0xA8DF6C")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x17000050")]
		public bool IsStatic
		{
			[Token(Token = "0x60006BC")]
			[Address(RVA = "0xA8DF74", Offset = "0xA8DF74", VA = "0xA8DF74")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60006BD")]
			[Address(RVA = "0xA8DF7C", Offset = "0xA8DF7C", VA = "0xA8DF7C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000051")]
		public EFColliderType ColliderType
		{
			[Token(Token = "0x60006BE")]
			[Address(RVA = "0xA8DF88", Offset = "0xA8DF88", VA = "0xA8DF88")]
			[CompilerGenerated]
			get
			{
				return default(EFColliderType);
			}
			[Token(Token = "0x60006BF")]
			[Address(RVA = "0xA8DF90", Offset = "0xA8DF90", VA = "0xA8DF90")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x60006C0")]
		[Address(RVA = "0xA8DF98", Offset = "0xA8DF98", VA = "0xA8DF98")]
		public static FImp_ColliderData_Base GetColliderDataFor(Collider collider)
		{
			return null;
		}

		[Token(Token = "0x60006C1")]
		[Address(RVA = "0xA8E674", Offset = "0xA8E674", VA = "0xA8E674")]
		public static FImp_ColliderData_Base GetColliderDataFor(Collider2D collider)
		{
			return null;
		}

		[Token(Token = "0x60006C2")]
		[Address(RVA = "0xA8EBF0", Offset = "0xA8EBF0", VA = "0xA8EBF0", Slot = "4")]
		public virtual void RefreshColliderData()
		{
		}

		[Token(Token = "0x60006C3")]
		[Address(RVA = "0xA8EC28", Offset = "0xA8EC28", VA = "0xA8EC28", Slot = "5")]
		public virtual bool PushIfInside(ref Vector3 point, float pointRadius, Vector3 pointOffset)
		{
			return default(bool);
		}

		[Token(Token = "0x60006C4")]
		[Address(RVA = "0xA8ED24", Offset = "0xA8ED24", VA = "0xA8ED24", Slot = "6")]
		public virtual bool PushIfInside2D(ref Vector3 point, float pointRadius, Vector3 pointOffset)
		{
			return default(bool);
		}

		[Token(Token = "0x60006C5")]
		[Address(RVA = "0xA8ED30", Offset = "0xA8ED30", VA = "0xA8ED30")]
		public static bool VIsSame(Vector3 vec1, Vector3 vec2)
		{
			return default(bool);
		}

		[Token(Token = "0x60006C6")]
		[Address(RVA = "0xA8ED54", Offset = "0xA8ED54", VA = "0xA8ED54")]
		protected FImp_ColliderData_Base()
		{
		}
	}
	[Token(Token = "0x2000176")]
	public class FImp_ColliderData_Box : FImp_ColliderData_Base
	{
		[Token(Token = "0x40008AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3 boxCenter;

		[Token(Token = "0x40008B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private Vector3 right;

		[Token(Token = "0x40008B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector3 up;

		[Token(Token = "0x40008B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private Vector3 forward;

		[Token(Token = "0x40008B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3 rightN;

		[Token(Token = "0x40008B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private Vector3 upN;

		[Token(Token = "0x40008B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector3 forwardN;

		[Token(Token = "0x40008B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private Vector3 scales;

		[Token(Token = "0x17000052")]
		public BoxCollider Box
		{
			[Token(Token = "0x60006C7")]
			[Address(RVA = "0xA8EE24", Offset = "0xA8EE24", VA = "0xA8EE24")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60006C8")]
			[Address(RVA = "0xA8EE2C", Offset = "0xA8EE2C", VA = "0xA8EE2C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000053")]
		public BoxCollider2D Box2D
		{
			[Token(Token = "0x60006C9")]
			[Address(RVA = "0xA8EE34", Offset = "0xA8EE34", VA = "0xA8EE34")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60006CA")]
			[Address(RVA = "0xA8EE3C", Offset = "0xA8EE3C", VA = "0xA8EE3C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60006CB")]
		[Address(RVA = "0xA8E41C", Offset = "0xA8E41C", VA = "0xA8E41C")]
		public FImp_ColliderData_Box(BoxCollider collider)
		{
		}

		[Token(Token = "0x60006CC")]
		[Address(RVA = "0xA8E9F0", Offset = "0xA8E9F0", VA = "0xA8E9F0")]
		public FImp_ColliderData_Box(BoxCollider2D collider2D)
		{
		}

		[Token(Token = "0x60006CD")]
		[Address(RVA = "0xA8EE44", Offset = "0xA8EE44", VA = "0xA8EE44", Slot = "4")]
		public override void RefreshColliderData()
		{
		}

		[Token(Token = "0x60006CE")]
		[Address(RVA = "0xA8F89C", Offset = "0xA8F89C", VA = "0xA8F89C", Slot = "5")]
		public override bool PushIfInside(ref Vector3 segmentPosition, float segmentRadius, Vector3 segmentOffset)
		{
			return default(bool);
		}

		[Token(Token = "0x60006CF")]
		[Address(RVA = "0xA903D4", Offset = "0xA903D4", VA = "0xA903D4")]
		public static void PushOutFromBoxCollider(BoxCollider box, Collision collision, float segmentColliderRadius, ref Vector3 segmentPosition, bool is2D = false)
		{
		}

		[Token(Token = "0x60006D0")]
		[Address(RVA = "0xA90C68", Offset = "0xA90C68", VA = "0xA90C68")]
		public static void PushOutFromBoxCollider(BoxCollider box, float segmentColliderRadius, ref Vector3 segmentPosition, bool is2D = false)
		{
		}

		[Token(Token = "0x60006D1")]
		[Address(RVA = "0xA907F4", Offset = "0xA907F4", VA = "0xA907F4")]
		public static void PushOutFromBoxCollider(BoxCollider box, Collision collision, float segmentColliderRadius, ref Vector3 pos, Vector3 right, Vector3 up, Vector3 forward, Vector3 scales, bool is2D = false)
		{
		}

		[Token(Token = "0x60006D2")]
		[Address(RVA = "0xA92528", Offset = "0xA92528", VA = "0xA92528")]
		public static void PushOutFromBoxCollider(BoxCollider2D box2D, float segmentColliderRadius, ref Vector3 segmentPosition)
		{
		}

		[Token(Token = "0x60006D3")]
		[Address(RVA = "0xA8FFFC", Offset = "0xA8FFFC", VA = "0xA8FFFC")]
		private Vector3 GetNearestPoint(Vector3 point)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60006D4")]
		[Address(RVA = "0xA91734", Offset = "0xA91734", VA = "0xA91734")]
		private static Vector3 GetNearestPoint(Vector3 point, Vector3 boxCenter, Vector3 right, Vector3 up, Vector3 forward, bool is2D = false)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60006D5")]
		[Address(RVA = "0xA92C10", Offset = "0xA92C10", VA = "0xA92C10")]
		private static Vector3 GetNearestPoint2D(Vector2 point, Vector2 boxCenter, Vector2 right, Vector2 up)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60006D6")]
		[Address(RVA = "0xA930F0", Offset = "0xA930F0", VA = "0xA930F0")]
		public static Vector3 GetNearestPointOnBox(BoxCollider boxCollider, Vector3 point, bool is2D = false)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60006D7")]
		[Address(RVA = "0xA8FDCC", Offset = "0xA8FDCC", VA = "0xA8FDCC")]
		private static float PlaneDistance(Vector3 planeCenter, Vector3 planeNormal, Vector3 point)
		{
			return default(float);
		}

		[Token(Token = "0x60006D8")]
		[Address(RVA = "0xA92FE8", Offset = "0xA92FE8", VA = "0xA92FE8")]
		private static Vector3 ProjectPointOnPlane(Vector3 planeNormal, Vector3 point, float distance)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60006D9")]
		[Address(RVA = "0xA8FDF8", Offset = "0xA8FDF8", VA = "0xA8FDF8")]
		private static bool SphereInsidePlane(float planeDistance, float pointRadius)
		{
			return default(bool);
		}

		[Token(Token = "0x60006DA")]
		[Address(RVA = "0xA937B4", Offset = "0xA937B4", VA = "0xA937B4")]
		private static bool SphereOutsidePlane(float planeDistance, float pointRadius)
		{
			return default(bool);
		}

		[Token(Token = "0x60006DB")]
		[Address(RVA = "0xA8FE08", Offset = "0xA8FE08", VA = "0xA8FE08")]
		private static bool SphereIntersectsPlane(float planeDistance, float pointRadius)
		{
			return default(bool);
		}

		[Token(Token = "0x60006DC")]
		[Address(RVA = "0xA8FE18", Offset = "0xA8FE18", VA = "0xA8FE18")]
		public static bool IsInsideBoxCollider(BoxCollider collider, Vector3 point, bool is2D = false)
		{
			return default(bool);
		}

		[Token(Token = "0x60006DD")]
		[Address(RVA = "0xA8FF28", Offset = "0xA8FF28", VA = "0xA8FF28")]
		public static bool IsInsideBoxCollider(BoxCollider2D collider, Vector3 point)
		{
			return default(bool);
		}

		[Token(Token = "0x60006DE")]
		[Address(RVA = "0xA91EC4", Offset = "0xA91EC4", VA = "0xA91EC4")]
		protected static float GetBoxAverageScale(BoxCollider box)
		{
			return default(float);
		}

		[Token(Token = "0x60006DF")]
		[Address(RVA = "0xA8F788", Offset = "0xA8F788", VA = "0xA8F788")]
		protected static Vector3 GetBoxCenter(BoxCollider box)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60006E0")]
		[Address(RVA = "0xA8F810", Offset = "0xA8F810", VA = "0xA8F810")]
		protected static Vector3 GetBoxCenter(BoxCollider2D box)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60006E1")]
		[Address(RVA = "0xA937C0", Offset = "0xA937C0", VA = "0xA937C0")]
		protected static Vector3 GetTargetPlaneNormal(BoxCollider boxCollider, Vector3 point, bool is2D = false)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60006E2")]
		[Address(RVA = "0xA91F34", Offset = "0xA91F34", VA = "0xA91F34")]
		protected static Vector3 GetTargetPlaneNormal(BoxCollider boxCollider, Vector3 point, Vector3 right, Vector3 up, Vector3 forward, Vector3 scales, bool is2D = false)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60006E3")]
		[Address(RVA = "0xA93B44", Offset = "0xA93B44", VA = "0xA93B44")]
		protected static Vector3 GetTargetPlaneNormal(BoxCollider2D boxCollider, Vector2 point, Vector2 right, Vector2 up, Vector2 scales)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60006E4")]
		[Address(RVA = "0xA9241C", Offset = "0xA9241C", VA = "0xA9241C")]
		protected static Vector3 GetIntersectOnBoxFromInside(BoxCollider boxCollider, Vector3 from, Vector3 to, Vector3 planeNormal)
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x2000177")]
	public class FImp_ColliderData_Capsule : FImp_ColliderData_Base
	{
		[Token(Token = "0x40008B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3 Top;

		[Token(Token = "0x40008BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private Vector3 Bottom;

		[Token(Token = "0x40008BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector3 Direction;

		[Token(Token = "0x40008BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float radius;

		[Token(Token = "0x40008BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float scaleFactor;

		[Token(Token = "0x40008BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private float preRadius;

		[Token(Token = "0x17000054")]
		public CapsuleCollider Capsule
		{
			[Token(Token = "0x60006E5")]
			[Address(RVA = "0xA93E5C", Offset = "0xA93E5C", VA = "0xA93E5C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60006E6")]
			[Address(RVA = "0xA93E64", Offset = "0xA93E64", VA = "0xA93E64")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000055")]
		public CapsuleCollider2D Capsule2D
		{
			[Token(Token = "0x60006E7")]
			[Address(RVA = "0xA93E6C", Offset = "0xA93E6C", VA = "0xA93E6C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60006E8")]
			[Address(RVA = "0xA93E74", Offset = "0xA93E74", VA = "0xA93E74")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60006E9")]
		[Address(RVA = "0xA8E368", Offset = "0xA8E368", VA = "0xA8E368")]
		public FImp_ColliderData_Capsule(CapsuleCollider collider)
		{
		}

		[Token(Token = "0x60006EA")]
		[Address(RVA = "0xA8E938", Offset = "0xA8E938", VA = "0xA8E938")]
		public FImp_ColliderData_Capsule(CapsuleCollider2D collider)
		{
		}

		[Token(Token = "0x60006EB")]
		[Address(RVA = "0xA94270", Offset = "0xA94270", VA = "0xA94270", Slot = "4")]
		public override void RefreshColliderData()
		{
		}

		[Token(Token = "0x60006EC")]
		[Address(RVA = "0xA94890", Offset = "0xA94890", VA = "0xA94890", Slot = "5")]
		public override bool PushIfInside(ref Vector3 point, float pointRadius, Vector3 pointOffset)
		{
			return default(bool);
		}

		[Token(Token = "0x60006ED")]
		[Address(RVA = "0xA94AB8", Offset = "0xA94AB8", VA = "0xA94AB8")]
		public static bool PushOutFromCapsuleCollider(CapsuleCollider capsule, float segmentColliderRadius, ref Vector3 pos, Vector3 segmentOffset)
		{
			return default(bool);
		}

		[Token(Token = "0x60006EE")]
		[Address(RVA = "0xA948DC", Offset = "0xA948DC", VA = "0xA948DC")]
		public static bool PushOutFromCapsuleCollider(float segmentColliderRadius, ref Vector3 segmentPos, Vector3 capSphereCenter1, Vector3 capSphereCenter2, float capsuleRadius, Vector3 segmentOffset, bool is2D = false)
		{
			return default(bool);
		}

		[Token(Token = "0x60006EF")]
		[Address(RVA = "0xA93E7C", Offset = "0xA93E7C", VA = "0xA93E7C")]
		protected static void CalculateCapsuleParameters(CapsuleCollider capsule, ref Vector3 direction, ref float trueRadius, ref float scalerFactor)
		{
		}

		[Token(Token = "0x60006F0")]
		[Address(RVA = "0xA9448C", Offset = "0xA9448C", VA = "0xA9448C")]
		private static float GetCapsule2DRadius(CapsuleCollider2D capsule)
		{
			return default(float);
		}

		[Token(Token = "0x60006F1")]
		[Address(RVA = "0xA94C24", Offset = "0xA94C24", VA = "0xA94C24")]
		private static float GetCapsule2DHeight(CapsuleCollider2D capsule)
		{
			return default(float);
		}

		[Token(Token = "0x60006F2")]
		[Address(RVA = "0xA940BC", Offset = "0xA940BC", VA = "0xA940BC")]
		protected static void CalculateCapsuleParameters(CapsuleCollider2D capsule, ref Vector3 direction, ref float trueRadius, ref float scalerFactor)
		{
		}

		[Token(Token = "0x60006F3")]
		[Address(RVA = "0xA944D4", Offset = "0xA944D4", VA = "0xA944D4")]
		protected static void GetCapsuleHeadsPositions(CapsuleCollider capsule, ref Vector3 upper, ref Vector3 bottom, Vector3 direction, float radius, float scalerFactor)
		{
		}

		[Token(Token = "0x60006F4")]
		[Address(RVA = "0xA946D8", Offset = "0xA946D8", VA = "0xA946D8")]
		protected static void GetCapsuleHeadsPositions(CapsuleCollider2D capsule, ref Vector3 upper, ref Vector3 bottom, Vector3 direction, float radius, float scalerFactor)
		{
		}
	}
	[Token(Token = "0x2000178")]
	public class FImp_ColliderData_Mesh : FImp_ColliderData_Base
	{
		[Token(Token = "0x40008C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private ContactFilter2D filter;

		[Token(Token = "0x40008C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private RaycastHit2D[] r;

		[Token(Token = "0x17000056")]
		public MeshCollider Mesh
		{
			[Token(Token = "0x60006F5")]
			[Address(RVA = "0xA94C6C", Offset = "0xA94C6C", VA = "0xA94C6C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60006F6")]
			[Address(RVA = "0xA94C74", Offset = "0xA94C74", VA = "0xA94C74")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000057")]
		public PolygonCollider2D Poly2D
		{
			[Token(Token = "0x60006F7")]
			[Address(RVA = "0xA94C7C", Offset = "0xA94C7C", VA = "0xA94C7C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60006F8")]
			[Address(RVA = "0xA94C84", Offset = "0xA94C84", VA = "0xA94C84")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60006F9")]
		[Address(RVA = "0xA8E554", Offset = "0xA8E554", VA = "0xA8E554")]
		public FImp_ColliderData_Mesh(MeshCollider collider)
		{
		}

		[Token(Token = "0x60006FA")]
		[Address(RVA = "0xA8EB2C", Offset = "0xA8EB2C", VA = "0xA8EB2C")]
		public FImp_ColliderData_Mesh(PolygonCollider2D collider)
		{
		}

		[Token(Token = "0x60006FB")]
		[Address(RVA = "0xA94C8C", Offset = "0xA94C8C", VA = "0xA94C8C", Slot = "5")]
		public override bool PushIfInside(ref Vector3 segmentPosition, float segmentRadius, Vector3 segmentOffset)
		{
			return default(bool);
		}

		[Token(Token = "0x60006FC")]
		[Address(RVA = "0xA95AF0", Offset = "0xA95AF0", VA = "0xA95AF0")]
		public static void PushOutFromMeshCollider(MeshCollider mesh, Collision collision, float segmentColliderRadius, ref Vector3 pos)
		{
		}

		[Token(Token = "0x60006FD")]
		[Address(RVA = "0xA95D2C", Offset = "0xA95D2C", VA = "0xA95D2C")]
		public static void PushOutFromMesh(MeshCollider mesh, Collision collision, float pointRadius, ref Vector3 point)
		{
		}
	}
	[Token(Token = "0x2000179")]
	public class FImp_ColliderData_Sphere : FImp_ColliderData_Base
	{
		[Token(Token = "0x40008C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float SphereRadius;

		[Token(Token = "0x17000058")]
		public SphereCollider Sphere
		{
			[Token(Token = "0x60006FE")]
			[Address(RVA = "0xA9653C", Offset = "0xA9653C", VA = "0xA9653C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60006FF")]
			[Address(RVA = "0xA96544", Offset = "0xA96544", VA = "0xA96544")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000059")]
		public CircleCollider2D Sphere2D
		{
			[Token(Token = "0x6000700")]
			[Address(RVA = "0xA9654C", Offset = "0xA9654C", VA = "0xA9654C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000701")]
			[Address(RVA = "0xA96554", Offset = "0xA96554", VA = "0xA96554")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000702")]
		[Address(RVA = "0xA8E2EC", Offset = "0xA8E2EC", VA = "0xA8E2EC")]
		public FImp_ColliderData_Sphere(SphereCollider collider)
		{
		}

		[Token(Token = "0x6000703")]
		[Address(RVA = "0xA8E8BC", Offset = "0xA8E8BC", VA = "0xA8E8BC")]
		public FImp_ColliderData_Sphere(CircleCollider2D collider)
		{
		}

		[Token(Token = "0x6000704")]
		[Address(RVA = "0xA9655C", Offset = "0xA9655C", VA = "0xA9655C", Slot = "4")]
		public override void RefreshColliderData()
		{
		}

		[Token(Token = "0x6000705")]
		[Address(RVA = "0xA96700", Offset = "0xA96700", VA = "0xA96700", Slot = "5")]
		public override bool PushIfInside(ref Vector3 point, float pointRadius, Vector3 pointOffset)
		{
			return default(bool);
		}

		[Token(Token = "0x6000706")]
		[Address(RVA = "0xA96980", Offset = "0xA96980", VA = "0xA96980")]
		public static bool PushOutFromSphereCollider(SphereCollider sphere, float segmentColliderRadius, ref Vector3 segmentPos, Vector3 segmentOffset)
		{
			return default(bool);
		}

		[Token(Token = "0x6000707")]
		[Address(RVA = "0xA96734", Offset = "0xA96734", VA = "0xA96734")]
		public static bool PushOutFromSphereCollider(SphereCollider sphere, float segmentColliderRadius, ref Vector3 segmentPos, float collidingSphereRadius, Vector3 segmentOffset)
		{
			return default(bool);
		}

		[Token(Token = "0x6000708")]
		[Address(RVA = "0xA9685C", Offset = "0xA9685C", VA = "0xA9685C")]
		public static bool PushOutFromSphereCollider(CircleCollider2D sphere, float segmentColliderRadius, ref Vector3 segmentPos, float collidingSphereRadius, Vector3 segmentOffset)
		{
			return default(bool);
		}

		[Token(Token = "0x6000709")]
		[Address(RVA = "0xA969DC", Offset = "0xA969DC", VA = "0xA969DC")]
		public static float CalculateTrueRadiusOfSphereCollider(SphereCollider sphere)
		{
			return default(float);
		}

		[Token(Token = "0x600070A")]
		[Address(RVA = "0xA96A18", Offset = "0xA96A18", VA = "0xA96A18")]
		public static float CalculateTrueRadiusOfSphereCollider(CircleCollider2D sphere)
		{
			return default(float);
		}

		[Token(Token = "0x600070B")]
		[Address(RVA = "0xA96640", Offset = "0xA96640", VA = "0xA96640")]
		public static float CalculateTrueRadiusOfSphereCollider(Transform transform, float componentRadius)
		{
			return default(float);
		}
	}
	[Token(Token = "0x200017A")]
	public class FImp_ColliderData_Terrain : FImp_ColliderData_Base
	{
		[Token(Token = "0x1700005A")]
		public TerrainCollider TerrCollider
		{
			[Token(Token = "0x600070C")]
			[Address(RVA = "0xA96A54", Offset = "0xA96A54", VA = "0xA96A54")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600070D")]
			[Address(RVA = "0xA96A5C", Offset = "0xA96A5C", VA = "0xA96A5C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700005B")]
		public Terrain TerrainComponent
		{
			[Token(Token = "0x600070E")]
			[Address(RVA = "0xA96A64", Offset = "0xA96A64", VA = "0xA96A64")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600070F")]
			[Address(RVA = "0xA96A6C", Offset = "0xA96A6C", VA = "0xA96A6C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000710")]
		[Address(RVA = "0xA8E5C4", Offset = "0xA8E5C4", VA = "0xA8E5C4")]
		public FImp_ColliderData_Terrain(TerrainCollider collider)
		{
		}

		[Token(Token = "0x6000711")]
		[Address(RVA = "0xA96A74", Offset = "0xA96A74", VA = "0xA96A74", Slot = "5")]
		public override bool PushIfInside(ref Vector3 segmentPosition, float segmentRadius, Vector3 segmentOffset)
		{
			return default(bool);
		}

		[Token(Token = "0x6000712")]
		[Address(RVA = "0xA96DB0", Offset = "0xA96DB0", VA = "0xA96DB0")]
		public static void PushOutFromTerrain(TerrainCollider terrainCollider, float segmentRadius, ref Vector3 point)
		{
		}
	}
}
namespace FIMSpace.FTools
{
	[Serializable]
	[Token(Token = "0x200017B")]
	public abstract class FIK_ProcessorBase
	{
		[Token(Token = "0x40008C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Range(0f, 1f)]
		public float IKWeight;

		[Token(Token = "0x40008C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Vector3 IKTargetPosition;

		[Token(Token = "0x40008CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Quaternion IKTargetRotation;

		[Token(Token = "0x40008CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 LastLocalDirection;

		[Token(Token = "0x40008CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector3 LocalDirection;

		[Token(Token = "0x40008CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected float fullLength;

		[Token(Token = "0x1700005C")]
		public bool Initialized
		{
			[Token(Token = "0x6000713")]
			[Address(RVA = "0xA97104", Offset = "0xA97104", VA = "0xA97104")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000714")]
			[Address(RVA = "0xA9710C", Offset = "0xA9710C", VA = "0xA9710C")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x1700005D")]
		public FIK_IKBoneBase[] Bones
		{
			[Token(Token = "0x6000715")]
			[Address(RVA = "0xA97118", Offset = "0xA97118", VA = "0xA97118")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000716")]
			[Address(RVA = "0xA97120", Offset = "0xA97120", VA = "0xA97120")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x1700005E")]
		public FIK_IKBoneBase StartBone
		{
			[Token(Token = "0x6000717")]
			[Address(RVA = "0xA97128", Offset = "0xA97128", VA = "0xA97128")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700005F")]
		public FIK_IKBoneBase EndBone
		{
			[Token(Token = "0x6000718")]
			[Address(RVA = "0xA97150", Offset = "0xA97150", VA = "0xA97150")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000719")]
		[Address(RVA = "0xA97184", Offset = "0xA97184", VA = "0xA97184", Slot = "4")]
		public virtual void Init(Transform root)
		{
		}

		[Token(Token = "0x600071A")]
		[Address(RVA = "0xA97188", Offset = "0xA97188", VA = "0xA97188", Slot = "5")]
		public virtual void Update()
		{
		}

		[Token(Token = "0x600071B")]
		[Address(RVA = "0xA9718C", Offset = "0xA9718C", VA = "0xA9718C")]
		public static float EaseInOutQuint(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x600071C")]
		[Address(RVA = "0xA971F4", Offset = "0xA971F4", VA = "0xA971F4")]
		protected FIK_ProcessorBase()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200017C")]
	public abstract class FIK_IKBoneBase
	{
		[Token(Token = "0x40008D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float BoneLength;

		[Token(Token = "0x40008D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float MotionWeight;

		[Token(Token = "0x40008D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 InitialLocalPosition;

		[Token(Token = "0x40008D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Quaternion InitialLocalRotation;

		[Token(Token = "0x40008D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Quaternion LastKeyLocalRotation;

		[Token(Token = "0x17000060")]
		public FIK_IKBoneBase Child
		{
			[Token(Token = "0x600071D")]
			[Address(RVA = "0xA97204", Offset = "0xA97204", VA = "0xA97204")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600071E")]
			[Address(RVA = "0xA9720C", Offset = "0xA9720C", VA = "0xA9720C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000061")]
		public Transform transform
		{
			[Token(Token = "0x600071F")]
			[Address(RVA = "0xA97214", Offset = "0xA97214", VA = "0xA97214")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000720")]
			[Address(RVA = "0xA9721C", Offset = "0xA9721C", VA = "0xA9721C")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x6000721")]
		[Address(RVA = "0xA97224", Offset = "0xA97224", VA = "0xA97224")]
		public FIK_IKBoneBase(Transform t)
		{
		}

		[Token(Token = "0x6000722")]
		[Address(RVA = "0xA972B4", Offset = "0xA972B4", VA = "0xA972B4", Slot = "4")]
		public virtual void SetChild(FIK_IKBoneBase child)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200017D")]
	public class FIK_CCDProcessor : FIK_ProcessorBase
	{
		[Serializable]
		[Token(Token = "0x200017E")]
		public class CCDIKBone : FIK_IKBoneBase
		{
			[Token(Token = "0x40008E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			[Range(0f, 180f)]
			public float AngleLimit;

			[Token(Token = "0x40008E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			[Range(0f, 180f)]
			public float TwistAngleLimit;

			[Token(Token = "0x40008E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			public Vector3 ForwardOrientation;

			[Token(Token = "0x40008E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			public float FrameWorldLength;

			[Token(Token = "0x40008E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			public Vector2 HingeLimits;

			[Token(Token = "0x40008E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			public Quaternion PreviousHingeRotation;

			[Token(Token = "0x40008E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			public float PreviousHingeAngle;

			[Token(Token = "0x40008E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
			public Vector3 LastIKLocPosition;

			[Token(Token = "0x40008EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			public Quaternion LastIKLocRotation;

			[Token(Token = "0x17000065")]
			public CCDIKBone IKParent
			{
				[Token(Token = "0x6000731")]
				[Address(RVA = "0xA98B24", Offset = "0xA98B24", VA = "0xA98B24")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x6000732")]
				[Address(RVA = "0xA98B2C", Offset = "0xA98B2C", VA = "0xA98B2C")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000066")]
			public CCDIKBone IKChild
			{
				[Token(Token = "0x6000733")]
				[Address(RVA = "0xA98B34", Offset = "0xA98B34", VA = "0xA98B34")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x6000734")]
				[Address(RVA = "0xA98B3C", Offset = "0xA98B3C", VA = "0xA98B3C")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x6000735")]
			[Address(RVA = "0xA98B44", Offset = "0xA98B44", VA = "0xA98B44")]
			public CCDIKBone(Transform t)
			{
			}

			[Token(Token = "0x6000736")]
			[Address(RVA = "0xA98BB8", Offset = "0xA98BB8", VA = "0xA98BB8")]
			public void Init(CCDIKBone child, CCDIKBone parent)
			{
			}

			[Token(Token = "0x6000737")]
			[Address(RVA = "0xA98C28", Offset = "0xA98C28", VA = "0xA98C28", Slot = "4")]
			public override void SetChild(FIK_IKBoneBase child)
			{
			}

			[Token(Token = "0x6000738")]
			[Address(RVA = "0xA98C30", Offset = "0xA98C30", VA = "0xA98C30")]
			public void AngleLimiting()
			{
			}

			[Token(Token = "0x6000739")]
			[Address(RVA = "0xA98E84", Offset = "0xA98E84", VA = "0xA98E84")]
			private Quaternion LimitSpherical(Quaternion rotation)
			{
				return default(Quaternion);
			}

			[Token(Token = "0x600073A")]
			[Address(RVA = "0xA990F0", Offset = "0xA990F0", VA = "0xA990F0")]
			private Quaternion LimitZ(Quaternion currentRotation)
			{
				return default(Quaternion);
			}

			[Token(Token = "0x600073B")]
			[Address(RVA = "0xA99318", Offset = "0xA99318", VA = "0xA99318")]
			private Quaternion LimitHinge(Quaternion rotation)
			{
				return default(Quaternion);
			}
		}

		[Token(Token = "0x40008D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public CCDIKBone[] IKBones;

		[Token(Token = "0x40008D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool ContinousSolving;

		[Token(Token = "0x40008D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Range(0f, 1f)]
		public float SyncWithAnimator;

		[Token(Token = "0x40008DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Range(1f, 12f)]
		public int ReactionQuality;

		[Token(Token = "0x40008DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Range(0f, 1f)]
		public float Smoothing;

		[Token(Token = "0x40008DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Range(0f, 1.5f)]
		public float MaxStretching;

		[Token(Token = "0x40008DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public AnimationCurve StretchCurve;

		[Token(Token = "0x40008DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public bool Use2D;

		[Token(Token = "0x17000062")]
		public CCDIKBone StartIKBone
		{
			[Token(Token = "0x6000723")]
			[Address(RVA = "0xA97340", Offset = "0xA97340", VA = "0xA97340")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000063")]
		public CCDIKBone EndIKBone
		{
			[Token(Token = "0x6000724")]
			[Address(RVA = "0xA97368", Offset = "0xA97368", VA = "0xA97368")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000064")]
		public float ActiveLength
		{
			[Token(Token = "0x6000725")]
			[Address(RVA = "0xA9739C", Offset = "0xA9739C", VA = "0xA9739C")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000726")]
			[Address(RVA = "0xA973A4", Offset = "0xA973A4", VA = "0xA973A4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000727")]
		[Address(RVA = "0xA973AC", Offset = "0xA973AC", VA = "0xA973AC")]
		public FIK_CCDProcessor(Transform[] bonesChain)
		{
		}

		[Token(Token = "0x6000728")]
		[Address(RVA = "0xA975FC", Offset = "0xA975FC", VA = "0xA975FC", Slot = "4")]
		public override void Init(Transform root)
		{
		}

		[Token(Token = "0x6000729")]
		[Address(RVA = "0xA97874", Offset = "0xA97874", VA = "0xA97874", Slot = "5")]
		public override void Update()
		{
		}

		[Token(Token = "0x600072A")]
		[Address(RVA = "0xA983C0", Offset = "0xA983C0", VA = "0xA983C0")]
		protected Vector3 GetGoalPivotOffset()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600072B")]
		[Address(RVA = "0xA98734", Offset = "0xA98734", VA = "0xA98734")]
		private bool GoalPivotOffsetDetected()
		{
			return default(bool);
		}

		[Token(Token = "0x600072C")]
		[Address(RVA = "0xA9866C", Offset = "0xA9866C", VA = "0xA9866C")]
		private Vector3 RefreshLocalDirection()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600072D")]
		[Address(RVA = "0xA9863C", Offset = "0xA9863C", VA = "0xA9863C")]
		private float GetVelocityDifference()
		{
			return default(float);
		}

		[Token(Token = "0x600072E")]
		[Address(RVA = "0xA989A8", Offset = "0xA989A8", VA = "0xA989A8")]
		public void AutoLimitAngle(float angleLimit = 60f, float twistAngleLimit = 50f)
		{
		}

		[Token(Token = "0x600072F")]
		[Address(RVA = "0xA98A20", Offset = "0xA98A20", VA = "0xA98A20")]
		public void AutoWeightBones(float baseValue = 1f)
		{
		}

		[Token(Token = "0x6000730")]
		[Address(RVA = "0xA98A84", Offset = "0xA98A84", VA = "0xA98A84")]
		public void AutoWeightBones(AnimationCurve weightCurve)
		{
		}
	}
}
namespace FIMSpace.Basics
{
	[Token(Token = "0x200017F")]
	public class FBasic_FlyMovement : MonoBehaviour
	{
		[Token(Token = "0x40008EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("How quick model should fly on it's trajectory")]
		public float MainSpeed;

		[Token(Token = "0x40008EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("How far should fly our object")]
		public Vector3 RangeValue;

		[Token(Token = "0x40008ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Multiplier for range value but applied to all axes")]
		public float RangeMul;

		[Token(Token = "0x40008EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("Additional translation on y axis if you want movement to be little like butterfly flight")]
		public float AddYSin;

		[Token(Token = "0x40008EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float AddYSinTimeSpeed;

		[Token(Token = "0x40008F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("How quick object should rotate to it's forward movement direction")]
		public float RotateForwardSpeed;

		[Token(Token = "0x40008F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float time;

		[Token(Token = "0x40008F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Vector3 offset;

		[Token(Token = "0x40008F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3 initPos;

		[Token(Token = "0x40008F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Vector3 preOffsetNoYAdd;

		[Token(Token = "0x40008F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 posOffsetNoYAdd;

		[Token(Token = "0x40008F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector3 speeds;

		[Token(Token = "0x40008F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 randomVector1;

		[Token(Token = "0x40008F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private Vector3 randomVector2;

		[Token(Token = "0x600073C")]
		[Address(RVA = "0xA99594", Offset = "0xA99594", VA = "0xA99594")]
		private void Start()
		{
		}

		[Token(Token = "0x600073D")]
		[Address(RVA = "0xA99638", Offset = "0xA99638", VA = "0xA99638")]
		private void Update()
		{
		}

		[Token(Token = "0x600073E")]
		[Address(RVA = "0xA99938", Offset = "0xA99938", VA = "0xA99938")]
		public FBasic_FlyMovement()
		{
		}
	}
	[Token(Token = "0x2000180")]
	public class FBasic_ObjectVibrate : MonoBehaviour
	{
		[Token(Token = "0x40008F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("How fast object should change translation directions")]
		public float VibrationRate;

		[Token(Token = "0x40008FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("How far object can go from it's initial local position")]
		public float BaseRange;

		[Token(Token = "0x40008FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 1f)]
		[Tooltip("Smoothing motion for object")]
		public float SmoothTranslation;

		[Token(Token = "0x40008FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float[] randomOffsets;

		[Token(Token = "0x40008FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float time;

		[Token(Token = "0x4000900")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float speed;

		[Token(Token = "0x4000901")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float range;

		[Token(Token = "0x4000902")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		internal float intensity;

		[Token(Token = "0x4000903")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Vector3 AxesMultiplier;

		[Token(Token = "0x4000904")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public bool ChangeObjectPosition;

		[Token(Token = "0x17000067")]
		public Vector3 initialPosition
		{
			[Token(Token = "0x600073F")]
			[Address(RVA = "0xA999AC", Offset = "0xA999AC", VA = "0xA999AC")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000740")]
			[Address(RVA = "0xA999B8", Offset = "0xA999B8", VA = "0xA999B8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000068")]
		public Vector3 localPosition
		{
			[Token(Token = "0x6000741")]
			[Address(RVA = "0xA999C4", Offset = "0xA999C4", VA = "0xA999C4")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000742")]
			[Address(RVA = "0xA999D0", Offset = "0xA999D0", VA = "0xA999D0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000743")]
		[Address(RVA = "0xA999DC", Offset = "0xA999DC", VA = "0xA999DC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000744")]
		[Address(RVA = "0xA99B48", Offset = "0xA99B48", VA = "0xA99B48")]
		private void Update()
		{
		}

		[Token(Token = "0x6000745")]
		[Address(RVA = "0xA99A64", Offset = "0xA99A64", VA = "0xA99A64")]
		public void ChooseNewSeed()
		{
		}

		[Token(Token = "0x6000746")]
		[Address(RVA = "0xA99EF8", Offset = "0xA99EF8", VA = "0xA99EF8")]
		public FBasic_ObjectVibrate()
		{
		}
	}
	[Token(Token = "0x2000181")]
	public class FBasic_OffsetMovement : MonoBehaviour
	{
		[Token(Token = "0x4000905")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Vector3 startPos;

		[Token(Token = "0x4000906")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Quaternion startRot;

		[Token(Token = "0x4000907")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector3 positionRange;

		[Token(Token = "0x4000908")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector3 rotRange;

		[Token(Token = "0x4000909")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float speed;

		[Token(Token = "0x400090A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool fixedUpdate;

		[Token(Token = "0x6000747")]
		[Address(RVA = "0xA99FB8", Offset = "0xA99FB8", VA = "0xA99FB8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000748")]
		[Address(RVA = "0xA9A008", Offset = "0xA9A008", VA = "0xA9A008")]
		private void Update()
		{
		}

		[Token(Token = "0x6000749")]
		[Address(RVA = "0xA9A190", Offset = "0xA9A190", VA = "0xA9A190")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x600074A")]
		[Address(RVA = "0xA9A4B8", Offset = "0xA9A4B8", VA = "0xA9A4B8")]
		public FBasic_OffsetMovement()
		{
		}
	}
	[Token(Token = "0x2000182")]
	public class FBasic_RotateSpinSin : MonoBehaviour
	{
		[Token(Token = "0x400090B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("In which axis object should rotate")]
		public Vector3 RotationAxis;

		[Token(Token = "0x400090C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("How far can go rotation")]
		public float RotationRange;

		[Token(Token = "0x400090D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("How fast object should rotate to it's ranges")]
		public float SinSpeed;

		[Token(Token = "0x400090E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float time;

		[Token(Token = "0x600074B")]
		[Address(RVA = "0xA9A52C", Offset = "0xA9A52C", VA = "0xA9A52C")]
		private void Start()
		{
		}

		[Token(Token = "0x600074C")]
		[Address(RVA = "0xA9A558", Offset = "0xA9A558", VA = "0xA9A558")]
		private void Update()
		{
		}

		[Token(Token = "0x600074D")]
		[Address(RVA = "0xA9A608", Offset = "0xA9A608", VA = "0xA9A608")]
		public FBasic_RotateSpinSin()
		{
		}
	}
	[Token(Token = "0x2000183")]
	public class FBasic_FreeCameraBehaviour : MonoBehaviour
	{
		[Token(Token = "0x400090F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("> Hold right mouse button to rotate camera <")]
		[Tooltip("How fast camera should fly")]
		public float SpeedMultiplier;

		[Token(Token = "0x4000910")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Value of acceleration smoothness")]
		public float AccelerationSmothnessValue;

		[Token(Token = "0x4000911")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Value of rotation smoothness")]
		public float RotationSmothnessValue;

		[Token(Token = "0x4000912")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float MouseSensitivity;

		[Token(Token = "0x4000913")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float turboModeMultiply;

		[Token(Token = "0x4000914")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector3 speeds;

		[Token(Token = "0x4000915")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float ySpeed;

		[Token(Token = "0x4000916")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Vector3 rotation;

		[Token(Token = "0x4000917")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float turbo;

		[Token(Token = "0x600074E")]
		[Address(RVA = "0xA9A674", Offset = "0xA9A674", VA = "0xA9A674")]
		private void Start()
		{
		}

		[Token(Token = "0x600074F")]
		[Address(RVA = "0xA9A714", Offset = "0xA9A714", VA = "0xA9A714")]
		private void Update()
		{
		}

		[Token(Token = "0x6000750")]
		[Address(RVA = "0xA9AC58", Offset = "0xA9AC58", VA = "0xA9AC58")]
		public void FixedUpdate()
		{
		}

		[Token(Token = "0x6000751")]
		[Address(RVA = "0xA9AC8C", Offset = "0xA9AC8C", VA = "0xA9AC8C")]
		public FBasic_FreeCameraBehaviour()
		{
		}
	}
	[Token(Token = "0x2000184")]
	public class FBasic_TPPCameraBehaviour : MonoBehaviour
	{
		[Token(Token = "0x4000918")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 DebugVelocity;

		[Token(Token = "0x4000919")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Transform to be followed by camera")]
		public Transform ToFollow;

		[Token(Token = "0x400091A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Offset in position in reference to target transform (focus point)")]
		public Vector3 FollowingOffset;

		[Token(Token = "0x400091B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Header("Offset in position in reference to camera orientation")]
		public Vector3 FollowingOffsetDirection;

		[Token(Token = "0x400091C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Header("Clamp values for zoom of camera")]
		public Vector2 DistanceRanges;

		[Token(Token = "0x400091D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float targetDistance;

		[Token(Token = "0x400091E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float animatedDistance;

		[Token(Token = "0x400091F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Vector2 RotationRanges;

		[Token(Token = "0x4000920")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector2 targetSphericRotation;

		[Token(Token = "0x4000921")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector2 animatedSphericRotation;

		[Token(Token = "0x4000922")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Space(10f)]
		[Tooltip("Sensitivity value for rotating camera around following object")]
		public float RotationSensitivity;

		[Token(Token = "0x4000923")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[Header("If you want camera rotation to be smooth")]
		[Range(0.1f, 1f)]
		public float RotationSpeed;

		[Token(Token = "0x4000924")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Header("If you want camera to follow target with some smoothness")]
		[Range(0f, 1f)]
		public float HardFollowValue;

		[Token(Token = "0x4000925")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[Header("If you want to hold cursor (cursor switch on TAB)")]
		public bool LockCursor;

		[Token(Token = "0x4000926")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7D")]
		private bool rotateCamera;

		[Token(Token = "0x4000927")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private RaycastHit sightObstacleHit;

		[Token(Token = "0x4000928")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[Header("Layer mask to check obstacles in sight ray")]
		public LayerMask SightLayerMask;

		[Token(Token = "0x4000929")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector3 targetPosition;

		[Token(Token = "0x400092A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[Header("How far forward raycast should check collision for camera")]
		public float CollisionOffset;

		[Token(Token = "0x400092B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public EFUpdateClock UpdateClock;

		[Token(Token = "0x400092C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private Vector3 movVelo;

		[Token(Token = "0x400092D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Vector3 prePos;

		[Token(Token = "0x6000752")]
		[Address(RVA = "0xA9ACB0", Offset = "0xA9ACB0", VA = "0xA9ACB0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000753")]
		[Address(RVA = "0xA9ACD4", Offset = "0xA9ACD4", VA = "0xA9ACD4")]
		private void UpdateMethods()
		{
		}

		[Token(Token = "0x6000754")]
		[Address(RVA = "0xA9B508", Offset = "0xA9B508", VA = "0xA9B508")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000755")]
		[Address(RVA = "0xA9B51C", Offset = "0xA9B51C", VA = "0xA9B51C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000756")]
		[Address(RVA = "0xA9B5E8", Offset = "0xA9B5E8", VA = "0xA9B5E8")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000757")]
		[Address(RVA = "0xA9AD60", Offset = "0xA9AD60", VA = "0xA9AD60")]
		private void InputCalculations()
		{
		}

		[Token(Token = "0x6000758")]
		[Address(RVA = "0xA9AE48", Offset = "0xA9AE48", VA = "0xA9AE48")]
		private void ZoomCalculations()
		{
		}

		[Token(Token = "0x6000759")]
		[Address(RVA = "0xA9AF18", Offset = "0xA9AF18", VA = "0xA9AF18")]
		private void FollowCalculations()
		{
		}

		[Token(Token = "0x600075A")]
		[Address(RVA = "0xA9B1AC", Offset = "0xA9B1AC", VA = "0xA9B1AC")]
		private void RaycastCalculations()
		{
		}

		[Token(Token = "0x600075B")]
		[Address(RVA = "0xA9B4C0", Offset = "0xA9B4C0", VA = "0xA9B4C0")]
		private void SwitchCalculations()
		{
		}

		[Token(Token = "0x600075C")]
		[Address(RVA = "0xA9B5FC", Offset = "0xA9B5FC", VA = "0xA9B5FC")]
		private float HelperClampAngle(float angle, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x600075D")]
		[Address(RVA = "0xA9B598", Offset = "0xA9B598", VA = "0xA9B598")]
		private void HelperSwitchCursor()
		{
		}

		[Token(Token = "0x600075E")]
		[Address(RVA = "0xA9B638", Offset = "0xA9B638", VA = "0xA9B638")]
		public FBasic_TPPCameraBehaviour()
		{
		}
	}
	[Token(Token = "0x2000185")]
	public class FBasics_Rigidbody2DMover : FBasics_Rigidbody2DMoverBase
	{
		[Token(Token = "0x400092E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float MovementSpeed;

		[Token(Token = "0x400092F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Range(0f, 1f)]
		public float SmoothRotation;

		[Token(Token = "0x4000930")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float JumpPower;

		[Token(Token = "0x4000931")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public bool DoubleJump;

		[Token(Token = "0x4000932")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6D")]
		[Tooltip("Use keyboard keys movement implementation for quick debugging?")]
		public bool WSADMovement;

		[Token(Token = "0x4000933")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("How slow accelerate/decelerate should be")]
		[Range(0f, 0.5f)]
		public float accelerationTime;

		[Token(Token = "0x4000934")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private Vector3 moveDir;

		[Token(Token = "0x4000935")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected Quaternion targetRot;

		[Token(Token = "0x4000936")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private int jumps;

		[Token(Token = "0x600075F")]
		[Address(RVA = "0xA9B6F4", Offset = "0xA9B6F4", VA = "0xA9B6F4", Slot = "5")]
		protected override void UpdateMotor()
		{
		}

		[Token(Token = "0x6000760")]
		[Address(RVA = "0xA9B9F4", Offset = "0xA9B9F4", VA = "0xA9B9F4", Slot = "8")]
		protected override void OnJump()
		{
		}

		[Token(Token = "0x6000761")]
		[Address(RVA = "0xA9BA04", Offset = "0xA9BA04", VA = "0xA9BA04", Slot = "9")]
		protected override void OnGrounded()
		{
		}

		[Token(Token = "0x6000762")]
		[Address(RVA = "0xA9BA20", Offset = "0xA9BA20", VA = "0xA9BA20")]
		public FBasics_Rigidbody2DMover()
		{
		}
	}
	[Token(Token = "0x2000186")]
	public abstract class FBasics_Rigidbody2DMoverBase : MonoBehaviour
	{
		[Token(Token = "0x4000937")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected float moveSpeed;

		[Token(Token = "0x4000938")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		protected float rotateSpeed;

		[Token(Token = "0x4000939")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected Vector3 smoothedAcceleration;

		[Token(Token = "0x400093A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		protected Quaternion smoothedRotation;

		[Token(Token = "0x400093B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		protected Vector3 veloHelper;

		[Token(Token = "0x400093C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected bool isGrounded;

		[Token(Token = "0x400093D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		protected float triggerJumping;

		[Token(Token = "0x400093E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected Rigidbody2D rigbody;

		[Token(Token = "0x400093F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected Collider2D charCollider;

		[Token(Token = "0x6000763")]
		[Address(RVA = "0xA9BB0C", Offset = "0xA9BB0C", VA = "0xA9BB0C", Slot = "4")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000764")]
		[Address(RVA = "0xA9BC78", Offset = "0xA9BC78", VA = "0xA9BC78", Slot = "5")]
		protected virtual void UpdateMotor()
		{
		}

		[Token(Token = "0x6000765")]
		[Address(RVA = "0xA9BD90", Offset = "0xA9BD90", VA = "0xA9BD90", Slot = "6")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6000766")]
		[Address(RVA = "0xA9BF38", Offset = "0xA9BF38", VA = "0xA9BF38", Slot = "7")]
		protected virtual void OnCollisionEnter2D(Collision2D collision)
		{
		}

		[Token(Token = "0x6000767")]
		[Address(RVA = "0xA9C05C", Offset = "0xA9C05C", VA = "0xA9C05C", Slot = "8")]
		protected virtual void OnJump()
		{
		}

		[Token(Token = "0x6000768")]
		[Address(RVA = "0xA9BA14", Offset = "0xA9BA14", VA = "0xA9BA14", Slot = "9")]
		protected virtual void OnGrounded()
		{
		}

		[Token(Token = "0x6000769")]
		[Address(RVA = "0xA9BAA0", Offset = "0xA9BAA0", VA = "0xA9BAA0")]
		protected FBasics_Rigidbody2DMoverBase()
		{
		}
	}
	[Token(Token = "0x2000187")]
	public class FBasics_RigidbodyMover : FBasics_RigidbodyMoverBase
	{
		[Token(Token = "0x4000940")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float MovementSpeed;

		[Token(Token = "0x4000941")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float RotationSpeed;

		[Token(Token = "0x4000942")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float JumpPower;

		[Token(Token = "0x4000943")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Tooltip("Use keyboard keys movement implementation for quick debugging?")]
		public bool WSADMovement;

		[Token(Token = "0x4000944")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Range(0f, 0.5f)]
		[Tooltip("How slow accelerate/decelerate should be")]
		public float accelerationTime;

		[Token(Token = "0x4000945")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[Tooltip("Always rotate head towards movement direction")]
		public bool RotateInDir;

		[Token(Token = "0x4000946")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float offsetRotY;

		[Token(Token = "0x4000947")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private Vector3 moveDir;

		[Token(Token = "0x4000948")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Vector3 targetRot;

		[Token(Token = "0x600076A")]
		[Address(RVA = "0xA9C060", Offset = "0xA9C060", VA = "0xA9C060", Slot = "4")]
		protected override void Start()
		{
		}

		[Token(Token = "0x600076B")]
		[Address(RVA = "0xA9C240", Offset = "0xA9C240", VA = "0xA9C240", Slot = "10")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x600076C")]
		[Address(RVA = "0xA9C24C", Offset = "0xA9C24C", VA = "0xA9C24C", Slot = "5")]
		protected override void UpdateMotor()
		{
		}

		[Token(Token = "0x600076D")]
		[Address(RVA = "0xA9C968", Offset = "0xA9C968", VA = "0xA9C968")]
		public FBasics_RigidbodyMover()
		{
		}
	}
	[Token(Token = "0x2000188")]
	public abstract class FBasics_RigidbodyMoverBase : MonoBehaviour
	{
		[Token(Token = "0x4000949")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected float moveSpeed;

		[Token(Token = "0x400094A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		protected float rotateSpeed;

		[Token(Token = "0x400094B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected Vector3 smoothedAcceleration;

		[Token(Token = "0x400094C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		protected Quaternion smoothedRotation;

		[Token(Token = "0x400094D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		protected Vector3 veloHelper;

		[Token(Token = "0x400094E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected bool isGrounded;

		[Token(Token = "0x400094F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		protected float triggerJumping;

		[Token(Token = "0x4000950")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected Rigidbody rigbody;

		[Token(Token = "0x4000951")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected Collider charCollider;

		[Token(Token = "0x600076E")]
		[Address(RVA = "0xA9C0BC", Offset = "0xA9C0BC", VA = "0xA9C0BC", Slot = "4")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x600076F")]
		[Address(RVA = "0xA9CA58", Offset = "0xA9CA58", VA = "0xA9CA58", Slot = "5")]
		protected virtual void UpdateMotor()
		{
		}

		[Token(Token = "0x6000770")]
		[Address(RVA = "0xA9CBC8", Offset = "0xA9CBC8", VA = "0xA9CBC8", Slot = "6")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6000771")]
		[Address(RVA = "0xA9CE48", Offset = "0xA9CE48", VA = "0xA9CE48", Slot = "7")]
		protected virtual void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6000772")]
		[Address(RVA = "0xA9CF74", Offset = "0xA9CF74", VA = "0xA9CF74", Slot = "8")]
		protected virtual void OnJump()
		{
		}

		[Token(Token = "0x6000773")]
		[Address(RVA = "0xA9CF78", Offset = "0xA9CF78", VA = "0xA9CF78", Slot = "9")]
		protected virtual void OnGrounded()
		{
		}

		[Token(Token = "0x6000774")]
		[Address(RVA = "0xA9C9EC", Offset = "0xA9C9EC", VA = "0xA9C9EC")]
		protected FBasics_RigidbodyMoverBase()
		{
		}
	}
	[Token(Token = "0x2000189")]
	public class FBasic_DuplicateObjects : MonoBehaviour
	{
		[Token(Token = "0x200018A")]
		public enum FEDuplicateDirection
		{
			[Token(Token = "0x400095F")]
			GoIterative,
			[Token(Token = "0x4000960")]
			GoFromCenter
		}

		[Token(Token = "0x200018B")]
		public enum FEDuplicateOrigin
		{
			[Token(Token = "0x4000962")]
			FromToDuplicate,
			[Token(Token = "0x4000963")]
			FromComponent
		}

		[Token(Token = "0x4000952")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Put here object which you want duplicate")]
		public GameObject ToDuplicate;

		[Token(Token = "0x4000953")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("How many copies in which axis")]
		public Vector3 DuplicatesCount;

		[Token(Token = "0x4000954")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("How far from each other should be created copies")]
		public Vector3 Offsets;

		[Token(Token = "0x4000955")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector3 Randomize;

		[Token(Token = "0x4000956")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Vector3 RandomRotate;

		[Token(Token = "0x4000957")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Vector3 RandomScale;

		[Token(Token = "0x4000958")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public int Seed;

		[Token(Token = "0x4000959")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("If you want raycast from up and put objects for example on terrain")]
		public bool PlaceOnGround;

		[Token(Token = "0x400095A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		[Tooltip("Duplicates will be created when entered playmode")]
		public bool DuplicateAtStart;

		[Token(Token = "0x400095B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float GizmosSize;

		[Token(Token = "0x400095C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public FEDuplicateDirection DuplicationType;

		[Token(Token = "0x400095D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public FEDuplicateOrigin DuplicationOrigin;

		[Token(Token = "0x6000775")]
		[Address(RVA = "0xA9CF84", Offset = "0xA9CF84", VA = "0xA9CF84")]
		private void Start()
		{
		}

		[Token(Token = "0x6000776")]
		[Address(RVA = "0xA9D8F0", Offset = "0xA9D8F0", VA = "0xA9D8F0")]
		private void Reset()
		{
		}

		[Token(Token = "0x6000777")]
		[Address(RVA = "0xA9CF94", Offset = "0xA9CF94", VA = "0xA9CF94")]
		public void Duplicate()
		{
		}

		[Token(Token = "0x6000778")]
		[Address(RVA = "0xA9D9F4", Offset = "0xA9D9F4", VA = "0xA9D9F4")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6000779")]
		[Address(RVA = "0xA9D918", Offset = "0xA9D918", VA = "0xA9D918")]
		private Vector3 GetRandomVector()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600077A")]
		[Address(RVA = "0xA9DDF4", Offset = "0xA9DDF4", VA = "0xA9DDF4")]
		public FBasic_DuplicateObjects()
		{
		}
	}
	[Token(Token = "0x200018C")]
	public class FBasic_NotRepetiveSelector<T>
	{
		[Token(Token = "0x4000964")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int backRange;

		[Token(Token = "0x4000965")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private List<int> previousElements;

		[Token(Token = "0x4000966")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private List<T> elements;

		[Token(Token = "0x4000967")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int added;

		[Token(Token = "0x600077B")]
		public FBasic_NotRepetiveSelector(List<T> elements, int backRange)
		{
		}

		[Token(Token = "0x600077C")]
		public static List<T> ArrayToList(T[] elements)
		{
			return null;
		}

		[Token(Token = "0x600077D")]
		public T GetElementNotRepetive()
		{
			return (T)null;
		}

		[Token(Token = "0x600077E")]
		private int ChooseElementDontRepeat(List<T> elements, List<int> previousClips, int backCount)
		{
			return default(int);
		}
	}
	[Token(Token = "0x200018D")]
	public class FAnimationClips : Dictionary<string, int>
	{
		[Token(Token = "0x4000968")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public readonly Animator Animator;

		[Token(Token = "0x400096B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public int Layer;

		[Token(Token = "0x17000069")]
		public string CurrentAnimation
		{
			[Token(Token = "0x600077F")]
			[Address(RVA = "0xA9DE28", Offset = "0xA9DE28", VA = "0xA9DE28")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000780")]
			[Address(RVA = "0xA9DE30", Offset = "0xA9DE30", VA = "0xA9DE30")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700006A")]
		public string PreviousAnimation
		{
			[Token(Token = "0x6000781")]
			[Address(RVA = "0xA9DE38", Offset = "0xA9DE38", VA = "0xA9DE38")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000782")]
			[Address(RVA = "0xA9DE40", Offset = "0xA9DE40", VA = "0xA9DE40")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000783")]
		[Address(RVA = "0xA9DE48", Offset = "0xA9DE48", VA = "0xA9DE48")]
		public FAnimationClips(Animator animator)
		{
		}

		[Token(Token = "0x6000784")]
		[Address(RVA = "0xA9DEE0", Offset = "0xA9DEE0", VA = "0xA9DEE0")]
		public void Add(string clipName, bool exactClipName = false)
		{
		}

		[Token(Token = "0x6000785")]
		[Address(RVA = "0xA9DEF4", Offset = "0xA9DEF4", VA = "0xA9DEF4")]
		public void AddClip(string clipName, bool exactClipName = false)
		{
		}

		[Token(Token = "0x6000786")]
		[Address(RVA = "0xA9DF08", Offset = "0xA9DF08", VA = "0xA9DF08")]
		public void AddClip(Animator animator, string clipName, bool exactClipName = false)
		{
		}

		[Token(Token = "0x6000787")]
		[Address(RVA = "0xA9E1D8", Offset = "0xA9E1D8", VA = "0xA9E1D8")]
		public void CrossFadeInFixedTime(string clip, float transitionTime = 0.25f, float timeOffset = 0f, bool startOver = false)
		{
		}

		[Token(Token = "0x6000788")]
		[Address(RVA = "0xA9E410", Offset = "0xA9E410", VA = "0xA9E410")]
		public void CrossFade(string clip, float transitionTime = 0.25f, float timeOffset = 0f, bool startOver = false)
		{
		}

		[Token(Token = "0x6000789")]
		[Address(RVA = "0xA9E2C8", Offset = "0xA9E2C8", VA = "0xA9E2C8")]
		private void RefreshClipMemory(string name)
		{
		}

		[Token(Token = "0x600078A")]
		[Address(RVA = "0xA9E500", Offset = "0xA9E500", VA = "0xA9E500")]
		public void SetFloat(string parameter, float value = 0f, float deltaSpeed = 60f)
		{
		}

		[Token(Token = "0x600078B")]
		[Address(RVA = "0xA9E598", Offset = "0xA9E598", VA = "0xA9E598")]
		public void SetFloatUnscaledDelta(string parameter, float value = 0f, float deltaSpeed = 60f)
		{
		}

		[Token(Token = "0x600078C")]
		[Address(RVA = "0xA9E328", Offset = "0xA9E328", VA = "0xA9E328")]
		internal bool IsPlaying(string clip)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200018E")]
	public class FAnimator
	{
		[Token(Token = "0x400096C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly Animator Animator;

		[Token(Token = "0x1700006B")]
		public string CurrentAnimation
		{
			[Token(Token = "0x600078D")]
			[Address(RVA = "0xA9E630", Offset = "0xA9E630", VA = "0xA9E630")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600078E")]
			[Address(RVA = "0xA9E638", Offset = "0xA9E638", VA = "0xA9E638")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700006C")]
		public string PreviousAnimation
		{
			[Token(Token = "0x600078F")]
			[Address(RVA = "0xA9E640", Offset = "0xA9E640", VA = "0xA9E640")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000790")]
			[Address(RVA = "0xA9E648", Offset = "0xA9E648", VA = "0xA9E648")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700006D")]
		public int Layer
		{
			[Token(Token = "0x6000791")]
			[Address(RVA = "0xA9E650", Offset = "0xA9E650", VA = "0xA9E650")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000792")]
			[Address(RVA = "0xA9E658", Offset = "0xA9E658", VA = "0xA9E658")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000793")]
		[Address(RVA = "0xA9E660", Offset = "0xA9E660", VA = "0xA9E660")]
		public FAnimator(Animator animator, int layer = 0)
		{
		}

		[Token(Token = "0x6000794")]
		[Address(RVA = "0xA9E6F0", Offset = "0xA9E6F0", VA = "0xA9E6F0")]
		public bool ContainsClip(string clipName, bool exactClipName = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6000795")]
		[Address(RVA = "0xA9E950", Offset = "0xA9E950", VA = "0xA9E950")]
		public void CrossFadeInFixedTime(string clip, float transitionTime = 0.25f, float timeOffset = 0f, bool startOver = false)
		{
		}

		[Token(Token = "0x6000796")]
		[Address(RVA = "0xA9EAE4", Offset = "0xA9EAE4", VA = "0xA9EAE4")]
		public void CrossFade(string clip, float transitionTime = 0.25f, float timeOffset = 0f, bool startOver = false)
		{
		}

		[Token(Token = "0x6000797")]
		[Address(RVA = "0xA9E9C8", Offset = "0xA9E9C8", VA = "0xA9E9C8")]
		private void RefreshClipMemory(string name)
		{
		}

		[Token(Token = "0x6000798")]
		[Address(RVA = "0xA9EB5C", Offset = "0xA9EB5C", VA = "0xA9EB5C")]
		public void SetFloat(string parameter, float value = 0f, float deltaSpeed = 60f)
		{
		}

		[Token(Token = "0x6000799")]
		[Address(RVA = "0xA9EBF4", Offset = "0xA9EBF4", VA = "0xA9EBF4")]
		public void SetFloatUnscaledDelta(string parameter, float value = 0f, float deltaSpeed = 60f)
		{
		}

		[Token(Token = "0x600079A")]
		[Address(RVA = "0xA9EA28", Offset = "0xA9EA28", VA = "0xA9EA28")]
		internal bool IsPlaying(string clip)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200018F")]
	public enum EFUpdateClock
	{
		[Token(Token = "0x4000971")]
		Update,
		[Token(Token = "0x4000972")]
		LateUpdate,
		[Token(Token = "0x4000973")]
		FixedUpdate
	}
}
namespace FIMSpace.FTail
{
	[Token(Token = "0x2000190")]
	[AddComponentMenu("FImpossible Creations/Tail Animator 2")]
	[DefaultExecutionOrder(-4)]
	public class TailAnimator2 : MonoBehaviour, IDropHandler, IEventSystemHandler, IFHierarchyIcon
	{
		[Serializable]
		[Token(Token = "0x2000191")]
		public class TailSegment
		{
			[Token(Token = "0x4000A51")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Vector3 ProceduralPosition;

			[Token(Token = "0x4000A52")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public Vector3 ProceduralPositionWeightBlended;

			[Token(Token = "0x4000A53")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Quaternion TrueTargetRotation;

			[Token(Token = "0x4000A54")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public Quaternion PosRefRotation;

			[Token(Token = "0x4000A55")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public Quaternion PreviousPosReferenceRotation;

			[Token(Token = "0x4000A56")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			public Vector3 PreviousPosition;

			[Token(Token = "0x4000A57")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			public float BlendValue;

			[Token(Token = "0x4000A59")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
			public Vector3 BoneDimensionsScaled;

			[Token(Token = "0x4000A5A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			public float BoneLengthScaled;

			[Token(Token = "0x4000A5B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
			public Vector3 InitialLocalPosition;

			[Token(Token = "0x4000A5C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			public Vector3 LocalOffset;

			[Token(Token = "0x4000A5D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
			public Quaternion InitialLocalRotation;

			[Token(Token = "0x4000A5E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
			public float ColliderRadius;

			[Token(Token = "0x4000A5F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
			public bool CollisionContactFlag;

			[Token(Token = "0x4000A60")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
			public float CollisionContactRelevancy;

			[Token(Token = "0x4000A61")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
			public Collision collisionContacts;

			[Token(Token = "0x4000A62")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
			public Vector3 VelocityHelper;

			[Token(Token = "0x4000A63")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
			public Quaternion QVelocityHelper;

			[Token(Token = "0x4000A64")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
			public Vector3 PreviousPush;

			[Token(Token = "0x4000A65")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
			public Quaternion Curving;

			[Token(Token = "0x4000A66")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
			public Vector3 Gravity;

			[Token(Token = "0x4000A67")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
			public Vector3 GravityLookOffset;

			[Token(Token = "0x4000A68")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
			public float LengthMultiplier;

			[Token(Token = "0x4000A69")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
			public float PositionSpeed;

			[Token(Token = "0x4000A6A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
			public float RotationSpeed;

			[Token(Token = "0x4000A6B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
			public float Springiness;

			[Token(Token = "0x4000A6C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
			public float Slithery;

			[Token(Token = "0x4000A6D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
			public float Curling;

			[Token(Token = "0x4000A6E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
			public float Slippery;

			[Token(Token = "0x4000A75")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
			private float deflectionSmoothVelo;

			[Token(Token = "0x17000074")]
			public TailSegment ParentBone
			{
				[Token(Token = "0x6000810")]
				[Address(RVA = "0xAAA900", Offset = "0xAAA900", VA = "0xAAA900")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x6000811")]
				[Address(RVA = "0xAAA908", Offset = "0xAAA908", VA = "0xAAA908")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000075")]
			public TailSegment ChildBone
			{
				[Token(Token = "0x6000812")]
				[Address(RVA = "0xAAA910", Offset = "0xAAA910", VA = "0xAAA910")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x6000813")]
				[Address(RVA = "0xAAA918", Offset = "0xAAA918", VA = "0xAAA918")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000076")]
			public Transform transform
			{
				[Token(Token = "0x6000814")]
				[Address(RVA = "0xAAA920", Offset = "0xAAA920", VA = "0xAAA920")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x6000815")]
				[Address(RVA = "0xAAA928", Offset = "0xAAA928", VA = "0xAAA928")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000077")]
			public int Index
			{
				[Token(Token = "0x6000816")]
				[Address(RVA = "0xAAA930", Offset = "0xAAA930", VA = "0xAAA930")]
				[CompilerGenerated]
				get
				{
					return default(int);
				}
				[Token(Token = "0x6000817")]
				[Address(RVA = "0xAAA938", Offset = "0xAAA938", VA = "0xAAA938")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000078")]
			public float IndexOverlLength
			{
				[Token(Token = "0x6000818")]
				[Address(RVA = "0xAAA940", Offset = "0xAAA940", VA = "0xAAA940")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000819")]
				[Address(RVA = "0xAAA948", Offset = "0xAAA948", VA = "0xAAA948")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000079")]
			public float BoneLength
			{
				[Token(Token = "0x600081A")]
				[Address(RVA = "0xAAA950", Offset = "0xAAA950", VA = "0xAAA950")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x600081B")]
				[Address(RVA = "0xAAA958", Offset = "0xAAA958", VA = "0xAAA958")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x1700007A")]
			public TailCollisionHelper CollisionHelper
			{
				[Token(Token = "0x600081C")]
				[Address(RVA = "0xAAA960", Offset = "0xAAA960", VA = "0xAAA960")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x600081D")]
				[Address(RVA = "0xAAA968", Offset = "0xAAA968", VA = "0xAAA968")]
				[CompilerGenerated]
				internal set
				{
				}
			}

			[Token(Token = "0x1700007B")]
			public Quaternion LastKeyframeLocalRotation
			{
				[Token(Token = "0x6000828")]
				[Address(RVA = "0xAAB0E8", Offset = "0xAAB0E8", VA = "0xAAB0E8")]
				get
				{
					return default(Quaternion);
				}
			}

			[Token(Token = "0x1700007C")]
			public Vector3 LastKeyframeLocalPosition
			{
				[Token(Token = "0x6000829")]
				[Address(RVA = "0xAAB16C", Offset = "0xAAB16C", VA = "0xAAB16C")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x1700007D")]
			public Vector3 LastFinalPosition
			{
				[Token(Token = "0x600082A")]
				[Address(RVA = "0xAAB20C", Offset = "0xAAB20C", VA = "0xAAB20C")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x600082B")]
				[Address(RVA = "0xAAB21C", Offset = "0xAAB21C", VA = "0xAAB21C")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x1700007E")]
			public Quaternion LastFinalRotation
			{
				[Token(Token = "0x600082C")]
				[Address(RVA = "0xAAB22C", Offset = "0xAAB22C", VA = "0xAAB22C")]
				[CompilerGenerated]
				get
				{
					return default(Quaternion);
				}
				[Token(Token = "0x600082D")]
				[Address(RVA = "0xAAB240", Offset = "0xAAB240", VA = "0xAAB240")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x1700007F")]
			public float DeflectionFactor
			{
				[Token(Token = "0x6000831")]
				[Address(RVA = "0xAAB328", Offset = "0xAAB328", VA = "0xAAB328")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000832")]
				[Address(RVA = "0xAAB330", Offset = "0xAAB330", VA = "0xAAB330")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000080")]
			public Vector3 Deflection
			{
				[Token(Token = "0x6000833")]
				[Address(RVA = "0xAAB338", Offset = "0xAAB338", VA = "0xAAB338")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6000834")]
				[Address(RVA = "0xAAB348", Offset = "0xAAB348", VA = "0xAAB348")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000081")]
			public float DeflectionSmooth
			{
				[Token(Token = "0x6000835")]
				[Address(RVA = "0xAAB358", Offset = "0xAAB358", VA = "0xAAB358")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000836")]
				[Address(RVA = "0xAAB360", Offset = "0xAAB360", VA = "0xAAB360")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000082")]
			public Vector3 DeflectionWorldPosition
			{
				[Token(Token = "0x6000837")]
				[Address(RVA = "0xAAB368", Offset = "0xAAB368", VA = "0xAAB368")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6000838")]
				[Address(RVA = "0xAAB378", Offset = "0xAAB378", VA = "0xAAB378")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000083")]
			public int DeflectionRelevancy
			{
				[Token(Token = "0x6000839")]
				[Address(RVA = "0xAAB388", Offset = "0xAAB388", VA = "0xAAB388")]
				[CompilerGenerated]
				get
				{
					return default(int);
				}
				[Token(Token = "0x600083A")]
				[Address(RVA = "0xAAB390", Offset = "0xAAB390", VA = "0xAAB390")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x600081E")]
			[Address(RVA = "0xAAA978", Offset = "0xAAA978", VA = "0xAAA978")]
			public TailSegment()
			{
			}

			[Token(Token = "0x600081F")]
			[Address(RVA = "0xAAACD8", Offset = "0xAAACD8", VA = "0xAAACD8")]
			public TailSegment(Transform transform)
			{
			}

			[Token(Token = "0x6000820")]
			[Address(RVA = "0xAAAE14", Offset = "0xAAAE14", VA = "0xAAAE14")]
			public TailSegment(TailSegment copyFrom)
			{
			}

			[Token(Token = "0x6000821")]
			[Address(RVA = "0xAAAE00", Offset = "0xAAAE00", VA = "0xAAAE00")]
			public void ReInitializeLocalPosRot(Vector3 initLocalPos, Quaternion initLocalRot)
			{
			}

			[Token(Token = "0x6000822")]
			[Address(RVA = "0xAAAEB4", Offset = "0xAAAEB4", VA = "0xAAAEB4")]
			public void SetIndex(int i, int tailSegments)
			{
			}

			[Token(Token = "0x6000823")]
			[Address(RVA = "0xAAAED8", Offset = "0xAAAED8", VA = "0xAAAED8")]
			public void SetParentRef(TailSegment parent)
			{
			}

			[Token(Token = "0x6000824")]
			[Address(RVA = "0xAAAF94", Offset = "0xAAAF94", VA = "0xAAAF94")]
			public void SetChildRef(TailSegment child)
			{
			}

			[Token(Token = "0x6000825")]
			[Address(RVA = "0xAAAF9C", Offset = "0xAAAF9C", VA = "0xAAAF9C")]
			public float GetRadiusScaled()
			{
				return default(float);
			}

			[Token(Token = "0x6000826")]
			[Address(RVA = "0xAAAFD0", Offset = "0xAAAFD0", VA = "0xAAAFD0")]
			internal Vector3 BlendMotionWeight(Vector3 newPosition)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6000827")]
			[Address(RVA = "0xAAB1F0", Offset = "0xAAB1F0", VA = "0xAAB1F0")]
			internal void Validate()
			{
			}

			[Token(Token = "0x600082E")]
			[Address(RVA = "0xAAB254", Offset = "0xAAB254", VA = "0xAAB254")]
			internal Vector3 ParentToFrontOffset()
			{
				return default(Vector3);
			}

			[Token(Token = "0x600082F")]
			[Address(RVA = "0xAAB304", Offset = "0xAAB304", VA = "0xAAB304")]
			public void RefreshFinalPos(Vector3 pos)
			{
			}

			[Token(Token = "0x6000830")]
			[Address(RVA = "0xAAB314", Offset = "0xAAB314", VA = "0xAAB314")]
			public void RefreshFinalRot(Quaternion rot)
			{
			}

			[Token(Token = "0x600083B")]
			[Address(RVA = "0xAAB398", Offset = "0xAAB398", VA = "0xAAB398")]
			public bool CheckDeflectionState(float zeroWhenLower, float smoothTime, float delta)
			{
				return default(bool);
			}

			[Token(Token = "0x600083C")]
			[Address(RVA = "0xAAB6A8", Offset = "0xAAB6A8", VA = "0xAAB6A8")]
			public bool DeflectionRelevant()
			{
				return default(bool);
			}

			[Token(Token = "0x600083D")]
			[Address(RVA = "0xAAB6C4", Offset = "0xAAB6C4", VA = "0xAAB6C4")]
			public bool? DeflectionRestoreState()
			{
				return null;
			}

			[Token(Token = "0x600083E")]
			[Address(RVA = "0xAAB754", Offset = "0xAAB754", VA = "0xAAB754")]
			internal void ParamsFrom(TailSegment other)
			{
			}

			[Token(Token = "0x600083F")]
			[Address(RVA = "0xAAB7FC", Offset = "0xAAB7FC", VA = "0xAAB7FC")]
			internal void ParamsFromAll(TailSegment other)
			{
			}

			[Token(Token = "0x6000840")]
			[Address(RVA = "0xAAB904", Offset = "0xAAB904", VA = "0xAAB904")]
			internal void User_ReassignTransform(Transform t)
			{
			}

			[Token(Token = "0x6000841")]
			[Address(RVA = "0xAAB90C", Offset = "0xAAB90C", VA = "0xAAB90C")]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x2000192")]
		public enum ECollisionSpace
		{
			[Token(Token = "0x4000A79")]
			World_Slow,
			[Token(Token = "0x4000A7A")]
			Selective_Fast
		}

		[Token(Token = "0x2000193")]
		public enum ECollisionMode
		{
			[Token(Token = "0x4000A7C")]
			m_3DCollision,
			[Token(Token = "0x4000A7D")]
			m_2DCollision
		}

		[Serializable]
		[Token(Token = "0x2000194")]
		public class IKBoneSettings
		{
			[Token(Token = "0x4000A7E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Range(0f, 181f)]
			public float AngleLimit;

			[Token(Token = "0x4000A7F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Range(0f, 181f)]
			public float TwistAngleLimit;

			[Token(Token = "0x6000842")]
			[Address(RVA = "0xAABAE0", Offset = "0xAABAE0", VA = "0xAABAE0")]
			public IKBoneSettings()
			{
			}
		}

		[Token(Token = "0x2000195")]
		public enum FEWavingType
		{
			[Token(Token = "0x4000A81")]
			Simple,
			[Token(Token = "0x4000A82")]
			Advanced
		}

		[Token(Token = "0x2000196")]
		public enum EFDeltaType
		{
			[Token(Token = "0x4000A84")]
			DeltaTime,
			[Token(Token = "0x4000A85")]
			SmoothDeltaTime,
			[Token(Token = "0x4000A86")]
			UnscaledDeltaTime,
			[Token(Token = "0x4000A87")]
			FixedDeltaTime,
			[Token(Token = "0x4000A88")]
			SafeDelta
		}

		[Token(Token = "0x2000197")]
		public enum EAnimationStyle
		{
			[Token(Token = "0x4000A8A")]
			Quick,
			[Token(Token = "0x4000A8B")]
			Accelerating,
			[Token(Token = "0x4000A8C")]
			Linear
		}

		[Token(Token = "0x2000198")]
		public enum ETailCategory
		{
			[Token(Token = "0x4000A8E")]
			Setup,
			[Token(Token = "0x4000A8F")]
			Tweak,
			[Token(Token = "0x4000A90")]
			Features,
			[Token(Token = "0x4000A91")]
			Shaping
		}

		[Token(Token = "0x2000199")]
		public enum ETailFeaturesCategory
		{
			[Token(Token = "0x4000A93")]
			Main,
			[Token(Token = "0x4000A94")]
			Collisions,
			[Token(Token = "0x4000A95")]
			IK,
			[Token(Token = "0x4000A96")]
			Experimental
		}

		[Token(Token = "0x200019A")]
		public enum EFixedMode
		{
			[Token(Token = "0x4000A98")]
			None,
			[Token(Token = "0x4000A99")]
			Basic,
			[Token(Token = "0x4000A9A")]
			Late
		}

		[Token(Token = "0x200019D")]
		[CompilerGenerated]
		private sealed class <LateFixed>d__265 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000A9D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000A9E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000A9F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TailAnimator2 <>4__this;

			[Token(Token = "0x4000AA0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private WaitForFixedUpdate <fixedWait>5__2;

			[Token(Token = "0x17000084")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600084C")]
				[Address(RVA = "0xAABDB8", Offset = "0xAABDB8", VA = "0xAABDB8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000085")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600084E")]
				[Address(RVA = "0xAABE00", Offset = "0xAABE00", VA = "0xAABE00", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000849")]
			[Address(RVA = "0xAABCB4", Offset = "0xAABCB4", VA = "0xAABCB4")]
			[DebuggerHidden]
			public <LateFixed>d__265(int <>1__state)
			{
			}

			[Token(Token = "0x600084A")]
			[Address(RVA = "0xAABCDC", Offset = "0xAABCDC", VA = "0xAABCDC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600084B")]
			[Address(RVA = "0xAABCE0", Offset = "0xAABCE0", VA = "0xAABCE0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600084D")]
			[Address(RVA = "0xAABDC0", Offset = "0xAABDC0", VA = "0xAABDC0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000974")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Using some simple calculations to make tail bend on colliders")]
		public bool UseCollision;

		[Token(Token = "0x4000975")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("How collision should be detected, world gives you collision on all world colliders but with more use of cpu (using unity's rigidbodies), 'Selective' gives you possibility to detect collision on selected colliders without using Rigidbodies, it also gives smoother motion (deactivated colliders will still detect collision, unless its game object is disabled)")]
		public ECollisionSpace CollisionSpace;

		[Token(Token = "0x4000976")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ECollisionMode CollisionMode;

		[Token(Token = "0x4000977")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("If you want to stop checking collision if segment collides with one collider\n\nSegment collision with two or more colliders in the same time with this option enabled can result in stuttery motion")]
		public bool CheapCollision;

		[Token(Token = "0x4000978")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		[Tooltip("Using trigger collider to include encountered colliders into collide with list")]
		public bool DynamicWorldCollidersInclusion;

		[Token(Token = "0x4000979")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Radius of trigger collider for dynamic inclusion of colliders")]
		public float InclusionRadius;

		[Token(Token = "0x400097A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool IgnoreMeshColliders;

		[Token(Token = "0x400097B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public List<Collider> IncludedColliders;

		[Token(Token = "0x400097C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public List<Collider2D> IncludedColliders2D;

		[Token(Token = "0x400097E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected List<FImp_ColliderData_Base> IncludedCollidersData;

		[Token(Token = "0x400097F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected List<FImp_ColliderData_Base> CollidersDataToCheck;

		[Token(Token = "0x4000980")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Capsules can give much more precise collision detection")]
		public int CollidersType;

		[Token(Token = "0x4000981")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public bool CollideWithOtherTails;

		[Token(Token = "0x4000982")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5D")]
		[Tooltip("Collision with colliders even if they're disabled (but game object must be enabled)\nHelpful to setup character limbs collisions without need to create new Layer")]
		public bool CollideWithDisabledColliders;

		[Token(Token = "0x4000983")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Range(0f, 1f)]
		public float CollisionSlippery;

		[Token(Token = "0x4000984")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Tooltip("If tail colliding objects should fit to colliders (0) or be reflect from them (Reflecting Only with 'Slithery' parameter greater than ~0.2)")]
		[Range(0f, 1f)]
		public float ReflectCollision;

		[Token(Token = "0x4000985")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public AnimationCurve CollidersScaleCurve;

		[Token(Token = "0x4000986")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float CollidersScaleMul;

		[Token(Token = "0x4000987")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[Range(0f, 1f)]
		public float CollisionsAutoCurve;

		[Token(Token = "0x4000988")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public List<Collider> IgnoredColliders;

		[Token(Token = "0x4000989")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public List<Collider2D> IgnoredColliders2D;

		[Token(Token = "0x400098A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public bool CollidersSameLayer;

		[Token(Token = "0x400098B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x89")]
		[Tooltip("If you add rigidbodies to each tail segment's collider, collision will work on everything but it will be less optimal, you don't have to add here rigidbodies but then you must have not kinematic rigidbodies on objects segments can collide")]
		public bool CollidersAddRigidbody;

		[Token(Token = "0x400098C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float RigidbodyMass;

		[Token(Token = "0x400098D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public LayerMask CollidersLayer;

		[Token(Token = "0x400098E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public bool UseSlitheryCurve;

		[Token(Token = "0x400098F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[FPD_FixedCurveWindow(0f, 0f, 1f, 1.2f, 0.1f, 0.8f, 1f, 0.9f)]
		public AnimationCurve SlitheryCurve;

		[Token(Token = "0x4000990")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private float lastSlithery;

		[Token(Token = "0x4000991")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Keyframe[] lastSlitheryCurvKeys;

		[Token(Token = "0x4000992")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public bool UseCurlingCurve;

		[Token(Token = "0x4000993")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[FPD_FixedCurveWindow(0f, 0f, 1f, 1f, 0.65f, 0.4f, 1f, 0.9f)]
		public AnimationCurve CurlingCurve;

		[Token(Token = "0x4000994")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private float lastCurling;

		[Token(Token = "0x4000995")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Keyframe[] lastCurlingCurvKeys;

		[Token(Token = "0x4000996")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public bool UseSpringCurve;

		[Token(Token = "0x4000997")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[FPD_FixedCurveWindow(0f, 0f, 1f, 1f, 0.9f, 0.7f, 0.2f, 0.9f)]
		public AnimationCurve SpringCurve;

		[Token(Token = "0x4000998")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private float lastSpringiness;

		[Token(Token = "0x4000999")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Keyframe[] lastSpringCurvKeys;

		[Token(Token = "0x400099A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public bool UseSlipperyCurve;

		[Token(Token = "0x400099B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[FPD_FixedCurveWindow(0f, 0f, 1f, 1f, 0.2f, 0.9f, 0.6f, 0.9f)]
		public AnimationCurve SlipperyCurve;

		[Token(Token = "0x400099C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private float lastSlippery;

		[Token(Token = "0x400099D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Keyframe[] lastSlipperyCurvKeys;

		[Token(Token = "0x400099E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public bool UsePosSpeedCurve;

		[Token(Token = "0x400099F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[FPD_FixedCurveWindow(0f, 0f, 1f, 1f, 0.2f, 1f, 0.3f, 0.9f)]
		public AnimationCurve PosCurve;

		[Token(Token = "0x40009A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private float lastPosSpeeds;

		[Token(Token = "0x40009A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private Keyframe[] lastPosCurvKeys;

		[Token(Token = "0x40009A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public bool UseRotSpeedCurve;

		[Token(Token = "0x40009A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[FPD_FixedCurveWindow(0f, 0f, 1f, 1f, 0.7f, 0.7f, 0.7f, 0.9f)]
		public AnimationCurve RotCurve;

		[Token(Token = "0x40009A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private float lastRotSpeeds;

		[Token(Token = "0x40009A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private Keyframe[] lastRotCurvKeys;

		[Token(Token = "0x40009A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		[Tooltip("Spreading Tail Animator motion weight over bones")]
		public bool UsePartialBlend;

		[Token(Token = "0x40009A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		[FPD_FixedCurveWindow(0f, 0f, 1f, 1f, 0.2f, 0.5f, 0.85f, 1f)]
		public AnimationCurve BlendCurve;

		[Token(Token = "0x40009A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private float lastTailAnimatorAmount;

		[Token(Token = "0x40009A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private Keyframe[] lastBlendCurvKeys;

		[Token(Token = "0x40009AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private TailSegment _ex_bone;

		[Token(Token = "0x40009AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		public bool UseIK;

		[Token(Token = "0x40009AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x179")]
		private bool ikInitialized;

		[Token(Token = "0x40009AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		[SerializeField]
		private FIK_CCDProcessor IK;

		[Token(Token = "0x40009AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		[Tooltip("Target object to follow by IK")]
		public Transform IKTarget;

		[Token(Token = "0x40009AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		public bool IKAutoWeights;

		[Token(Token = "0x40009B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
		[Range(0f, 1f)]
		public float IKBaseReactionWeight;

		[Token(Token = "0x40009B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		[FPD_FixedCurveWindow(0f, 0f, 1f, 1f, 0.2f, 0.5f, 0.85f, 1f)]
		public AnimationCurve IKReactionWeightCurve;

		[Token(Token = "0x40009B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		public bool IKAutoAngleLimits;

		[Token(Token = "0x40009B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
		[FPD_Suffix(0f, 181f, FPD_SuffixAttribute.SuffixMode.FromMinToMaxRounded, "°", true)]
		public float IKAutoAngleLimit;

		[Token(Token = "0x40009B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		[Tooltip("If ik process should work referencing to previously computed CCDIK pose (can be more precise but need more adjusting in weights and angle limits)")]
		public bool IKContinousSolve;

		[Token(Token = "0x40009B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
		[FPD_Suffix(0f, 1f, FPD_SuffixAttribute.SuffixMode.From0to100, "%", true)]
		[Tooltip("How much IK motion sohuld be used in tail animator motion -> 0: turned off")]
		public float IKBlend;

		[Token(Token = "0x40009B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		[FPD_Suffix(0f, 1f, FPD_SuffixAttribute.SuffixMode.From0to100, "%", true)]
		[Tooltip("If syncing with animator then applying motion of keyframe animation for IK")]
		public float IKAnimatorBlend;

		[Token(Token = "0x40009B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B4")]
		[Range(1f, 32f)]
		[Tooltip("How much iterations should do CCDIK algorithm in one frame")]
		public int IKReactionQuality;

		[Token(Token = "0x40009B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		[Tooltip("Smoothing reactions in CCD IK algorithm")]
		[Range(0f, 1f)]
		public float IKSmoothing;

		[Token(Token = "0x40009B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1BC")]
		[Range(0f, 1.5f)]
		public float IKMaxStretching;

		[Token(Token = "0x40009BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		[FPD_FixedCurveWindow(0f, 0f, 1f, 1f, 0.9f, 0.4f, 0.5f, 1f)]
		public AnimationCurve IKStretchCurve;

		[Token(Token = "0x40009BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		public List<IKBoneSettings> IKLimitSettings;

		[Token(Token = "0x40009BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		private List<TailSegment> _pp_reference;

		[Token(Token = "0x40009BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		private TailSegment _pp_ref_rootParent;

		[Token(Token = "0x40009BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		private TailSegment _pp_ref_lastChild;

		[Token(Token = "0x40009BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		private bool _pp_initialized;

		[Token(Token = "0x40009C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1EC")]
		[Tooltip("Rotation offset for tail (just first (root) bone is rotated)")]
		public Quaternion RotationOffset;

		[Token(Token = "0x40009C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1FC")]
		[Tooltip("Rotate each segment a bit to create curving effect")]
		public Quaternion Curving;

		[Token(Token = "0x40009C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20C")]
		[Tooltip("Spread curving rotation offset weight over tail segments")]
		public bool UseCurvingCurve;

		[Token(Token = "0x40009C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		[FPD_FixedCurveWindow(0f, -1f, 1f, 1f, 0.75f, 0.75f, 0.75f, 0.85f)]
		public AnimationCurve CurvCurve;

		[Token(Token = "0x40009C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		private Quaternion lastCurving;

		[Token(Token = "0x40009C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		private Keyframe[] lastCurvingKeys;

		[Token(Token = "0x40009C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		[Tooltip("Make tail longer or shorter")]
		public float LengthMultiplier;

		[Token(Token = "0x40009C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x234")]
		[Tooltip("Spread length multiplier weight over tail segments")]
		public bool UseLengthMulCurve;

		[Token(Token = "0x40009C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
		[FPD_FixedCurveWindow(0f, 0f, 1f, 3f, 0f, 1f, 1f, 1f)]
		public AnimationCurve LengthMulCurve;

		[Token(Token = "0x40009C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		private float lastLengthMul;

		[Token(Token = "0x40009CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
		private Keyframe[] lastLengthKeys;

		[Token(Token = "0x40009CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
		[Tooltip("Spread gravity weight over tail segments")]
		public bool UseGravityCurve;

		[Token(Token = "0x40009CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
		[FPD_FixedCurveWindow(0f, 0f, 1f, 1f, 0.85f, 0.35f, 0.25f, 0.85f)]
		[Tooltip("Spread gravity weight over tail segments")]
		public AnimationCurve GravityCurve;

		[Token(Token = "0x40009CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
		[Tooltip("Simulate gravity weight for tail logics")]
		public Vector3 Gravity;

		[Token(Token = "0x40009CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x26C")]
		private Vector3 lastGravity;

		[Token(Token = "0x40009CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
		private Keyframe[] lastGravityKeys;

		[Token(Token = "0x40009D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
		[Tooltip("Using auto waving option to give floating effect")]
		public bool UseWaving;

		[Token(Token = "0x40009D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x281")]
		[Tooltip("Adding some variation to waving animation")]
		public bool CosinusAdd;

		[Token(Token = "0x40009D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x284")]
		[Tooltip("If you want few tails to wave in the same way you can set this sinus period cycle value")]
		public float FixedCycle;

		[Token(Token = "0x40009D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
		[Tooltip("How frequent swings should be")]
		public float WavingSpeed;

		[Token(Token = "0x40009D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28C")]
		[Tooltip("How big swings should be")]
		public float WavingRange;

		[Token(Token = "0x40009D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
		[Tooltip("What rotation axis should be used in auto waving")]
		public Vector3 WavingAxis;

		[Token(Token = "0x40009D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2AC")]
		[Tooltip("Type of waving animation algorithm, it can be simple trigonometric wave or animation based on noises (advanced)")]
		public FEWavingType WavingType;

		[Token(Token = "0x40009D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
		[Tooltip("Offsetting perlin noise to generate different variation of tail rotations")]
		public float AlternateWave;

		[Token(Token = "0x40009D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B4")]
		private float _waving_waveTime;

		[Token(Token = "0x40009DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B8")]
		private float _waving_cosTime;

		[Token(Token = "0x40009DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2BC")]
		private Vector3 _waving_sustain;

		[Token(Token = "0x40009DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C8")]
		public bool UseWind;

		[Token(Token = "0x40009DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2CC")]
		[FPD_Suffix(0f, 2.5f, FPD_SuffixAttribute.SuffixMode.PercentageUnclamped, "%", true)]
		public float WindEffectPower;

		[Token(Token = "0x40009DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D0")]
		[FPD_Suffix(0f, 2.5f, FPD_SuffixAttribute.SuffixMode.PercentageUnclamped, "%", true)]
		public float WindTurbulencePower;

		[Token(Token = "0x40009DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D4")]
		[FPD_Suffix(0f, 1.5f, FPD_SuffixAttribute.SuffixMode.PercentageUnclamped, "%", true)]
		public float WindWorldNoisePower;

		[Token(Token = "0x40009E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D8")]
		public Vector3 WindEffect;

		[Token(Token = "0x40009E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E8")]
		public List<TailSegment> TailSegments;

		[Token(Token = "0x40009E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F0")]
		[SerializeField]
		private TailSegment GhostParent;

		[Token(Token = "0x40009E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F8")]
		[SerializeField]
		private TailSegment GhostChild;

		[Token(Token = "0x40009E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x300")]
		private Vector3 _limiting_limitPosition;

		[Token(Token = "0x40009E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30C")]
		private Vector3 _limiting_influenceOffset;

		[Token(Token = "0x40009E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x318")]
		private float _limiting_stretchingHelperTooLong;

		[Token(Token = "0x40009E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31C")]
		private float _limiting_stretchingHelperTooShort;

		[Token(Token = "0x40009E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x320")]
		private Quaternion _limiting_angle_ToTargetRot;

		[Token(Token = "0x40009E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x330")]
		private Quaternion _limiting_angle_targetInLocal;

		[Token(Token = "0x40009EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x340")]
		private Quaternion _limiting_angle_newLocal;

		[Token(Token = "0x40009EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x350")]
		private Vector3 _tc_segmentGravityOffset;

		[Token(Token = "0x40009EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35C")]
		private Vector3 _tc_segmentGravityToParentDir;

		[Token(Token = "0x40009ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x368")]
		private Vector3 _tc_preGravOff;

		[Token(Token = "0x40009EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x374")]
		[Tooltip("If you want to use max distance fade option to smoothly disable tail animator when object is going far away from camera")]
		public bool UseMaxDistance;

		[Token(Token = "0x40009EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x378")]
		[Tooltip("(By default camera transform) Measuring distance from this object to define if object is too far and not need to update tail animator")]
		public Transform DistanceFrom;

		[Token(Token = "0x40009F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x380")]
		[HideInInspector]
		public Transform _distanceFrom_Auto;

		[Token(Token = "0x40009F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x388")]
		[Tooltip("Max distance to main camera / target object to smoothly turn off tail animator.")]
		public float MaximumDistance;

		[Token(Token = "0x40009F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38C")]
		[Tooltip("If object in range should be detected only when is nearer than 'MaxDistance' to avoid stuttery enabled - disable switching")]
		[Range(0f, 1f)]
		public float MaxOutDistanceFactor;

		[Token(Token = "0x40009F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x390")]
		[Tooltip("If distance should be measured not using Up (y) axis")]
		public bool DistanceWithoutY;

		[Token(Token = "0x40009F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x394")]
		[Tooltip("Offsetting point from which we want to measure distance to target")]
		public Vector3 DistanceMeasurePoint;

		[Token(Token = "0x40009F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A0")]
		[Tooltip("Disable fade duration in seconds")]
		[Range(0.25f, 2f)]
		public float FadeDuration;

		[Token(Token = "0x40009F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A4")]
		private bool maxDistanceExceed;

		[Token(Token = "0x40009F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A8")]
		private Transform finalDistanceFrom;

		[Token(Token = "0x40009F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B0")]
		private bool wasCameraSearch;

		[Token(Token = "0x40009F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B4")]
		private float distanceWeight;

		[Token(Token = "0x40009FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B8")]
		private int _tc_startI;

		[Token(Token = "0x40009FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3BC")]
		private int _tc_startII;

		[Token(Token = "0x40009FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C8")]
		private TailSegment _tc_rootBone;

		[Token(Token = "0x40009FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D0")]
		private Quaternion _tc_lookRot;

		[Token(Token = "0x40009FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3E0")]
		private Quaternion _tc_targetParentRot;

		[Token(Token = "0x4000A00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3F0")]
		private Quaternion _tc_startBoneRotOffset;

		[Token(Token = "0x4000A01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x400")]
		private float _tc_tangle;

		[Token(Token = "0x4000A02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x404")]
		private float _sg_springVelo;

		[Token(Token = "0x4000A03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x408")]
		private float _sg_curly;

		[Token(Token = "0x4000A04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40C")]
		private Vector3 _sg_push;

		[Token(Token = "0x4000A05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x418")]
		private Vector3 _sg_targetPos;

		[Token(Token = "0x4000A06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x424")]
		private Vector3 _sg_targetChildWorldPosInParentFront;

		[Token(Token = "0x4000A07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x430")]
		private Vector3 _sg_dirToTargetParentFront;

		[Token(Token = "0x4000A08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x43C")]
		private Quaternion _sg_orientation;

		[Token(Token = "0x4000A09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44C")]
		private float _sg_slitFactor;

		[Token(Token = "0x4000A0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x450")]
		private bool wasDisabled;

		[Token(Token = "0x4000A0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x454")]
		private float justDelta;

		[Token(Token = "0x4000A0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x458")]
		private float secPeriodDelta;

		[Token(Token = "0x4000A0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x45C")]
		private float deltaForLerps;

		[Token(Token = "0x4000A0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x460")]
		private float rateDelta;

		[Token(Token = "0x4000A0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x464")]
		protected float collectedDelta;

		[Token(Token = "0x4000A10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x468")]
		protected int framesToSimulate;

		[Token(Token = "0x4000A11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x46C")]
		protected int previousframesToSimulate;

		[Token(Token = "0x4000A12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x470")]
		private bool updateTailAnimator;

		[Token(Token = "0x4000A13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x474")]
		private int startAfterTPoseCounter;

		[Token(Token = "0x4000A14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x478")]
		private bool lateFixedIsRunning;

		[Token(Token = "0x4000A15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x479")]
		private bool fixedAllow;

		[Token(Token = "0x4000A16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x47C")]
		[Tooltip("Making tail segment deflection influence back segments")]
		[Range(0f, 1f)]
		public float Deflection;

		[Token(Token = "0x4000A17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x480")]
		[FPD_Suffix(1f, 89f, FPD_SuffixAttribute.SuffixMode.FromMinToMaxRounded, "°", true)]
		public float DeflectionStartAngle;

		[Token(Token = "0x4000A18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x484")]
		[Range(0f, 1f)]
		public float DeflectionSmooth;

		[Token(Token = "0x4000A19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x488")]
		[FPD_FixedCurveWindow(0f, 0f, 1f, 1f, 0.65f, 0.4f, 1f, 0.9f)]
		public AnimationCurve DeflectionFalloff;

		[Token(Token = "0x4000A1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x490")]
		[Tooltip("Deflection can be triggered every time tail is waving but you not always would want this feature be enabled (different behaviour of tail motion)")]
		public bool DeflectOnlyCollisions;

		[Token(Token = "0x4000A1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x498")]
		private List<TailSegment> _defl_source;

		[Token(Token = "0x4000A1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4A0")]
		private float _defl_treshold;

		[Token(Token = "0x4000A1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4A4")]
		public ETailCategory _Editor_Category;

		[Token(Token = "0x4000A1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4A8")]
		public ETailFeaturesCategory _Editor_FeaturesCategory;

		[Token(Token = "0x4000A1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4AC")]
		public bool DrawGizmos;

		[Token(Token = "0x4000A20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4B0")]
		[Tooltip("First bone of tail motion chain")]
		public Transform StartBone;

		[Token(Token = "0x4000A21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4B8")]
		[Tooltip("Finish bone of tail motion chain")]
		public Transform EndBone;

		[Token(Token = "0x4000A22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C0")]
		[Tooltip("Adjusting end point for end tail bone motion")]
		public Vector3 EndBoneJointOffset;

		[Token(Token = "0x4000A23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D0")]
		public List<Transform> _TransformsGhostChain;

		[Token(Token = "0x4000A24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D8")]
		public int _GhostChainInitCount;

		[Token(Token = "0x4000A25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4DC")]
		protected bool initialized;

		[Token(Token = "0x4000A26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4E0")]
		[Tooltip("Target FPS update rate for Tail Animator.\n\nIf you want Tail Animator to behave the same in low/high fps, set this value for example to 60.\nIt also can help optimizing if your game have more than 60 fps.")]
		public int UpdateRate;

		[Token(Token = "0x4000A27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4E4")]
		[Tooltip("If your character Unity's Animator have update mode set to 'Animate Physics' you should enable it here too")]
		public EFixedMode AnimatePhysics;

		[Token(Token = "0x4000A28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4E8")]
		[Tooltip("When using target fps rate you can interpolate coordinates for smoother effect when object with tail is moving a lot")]
		public bool InterpolateRate;

		[Token(Token = "0x4000A29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4E9")]
		[Tooltip("Simulating tail motion at initiation to prevent jiggle start")]
		public bool Prewarm;

		[Token(Token = "0x4000A2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4EC")]
		internal float OverrideWeight;

		[Token(Token = "0x4000A2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4F0")]
		protected float conditionalWeight;

		[Token(Token = "0x4000A2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4F4")]
		protected bool collisionInitialized;

		[Token(Token = "0x4000A2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4F5")]
		protected bool forceRefreshCollidersData;

		[Token(Token = "0x4000A2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4F8")]
		private Vector3 previousWorldPosition;

		[Token(Token = "0x4000A2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x508")]
		protected Transform rootTransform;

		[Token(Token = "0x4000A30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x510")]
		protected bool preAutoCorrect;

		[Token(Token = "0x4000A31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x514")]
		[Tooltip("Blending Slithery - smooth & soft tentacle like movement (value = 1)\nwith more stiff & springy motion (value = 0)\n\n0: Stiff somewhat like tree branch\n1: Soft like squid tentacle / Animal tail")]
		[Range(0f, 1.2f)]
		public float Slithery;

		[Token(Token = "0x4000A32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x518")]
		[Range(0f, 1f)]
		[Tooltip("How curly motion should be applied to tail segments")]
		public float Curling;

		[Token(Token = "0x4000A33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51C")]
		[Range(0f, 1f)]
		[Tooltip("Elastic spring effect making motion more 'meaty'")]
		public float Springiness;

		[Token(Token = "0x4000A34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x520")]
		[Tooltip("If you want to limit stretching/gumminess of position motion when object moves fast. Recommended adjust to go with it under 0.3 value.\nValue = 1: Unlimited stretching")]
		[Range(0f, 1f)]
		public float MaxStretching;

		[Token(Token = "0x4000A35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x524")]
		[Tooltip("Limiting max rotation angle for each tail segment")]
		[FPD_Suffix(1f, 181f, FPD_SuffixAttribute.SuffixMode.FromMinToMaxRounded, "°", true)]
		public float AngleLimit;

		[Token(Token = "0x4000A36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x528")]
		[Tooltip("If you need specific axis to be limited.\nLeave unchanged to limit all axes.")]
		public Vector3 AngleLimitAxis;

		[Token(Token = "0x4000A37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x534")]
		[Tooltip("If you want limit axes symmetrically leave this parameter unchanged, if you want limit one direction of axis more than reversed, tweak this parameter")]
		public Vector2 LimitAxisRange;

		[Token(Token = "0x4000A38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x53C")]
		[Range(0f, 1f)]
		[Tooltip("If limiting shouldn't be too rapidly performed")]
		public float LimitSmoothing;

		[Token(Token = "0x4000A39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x540")]
		[FPD_Suffix(0f, 1.5f, FPD_SuffixAttribute.SuffixMode.PercentageUnclamped, "%", true)]
		[Tooltip("If your object moves very fast making tail influenced by speed too much then you can controll it with this parameter")]
		public float MotionInfluence;

		[Token(Token = "0x4000A3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x544")]
		[Tooltip("Additional Y influence controll useful when your character is jumping (works only when MotionInfluence value is other than 100%)")]
		[Range(0f, 1f)]
		public float MotionInfluenceInY;

		[Token(Token = "0x4000A3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x548")]
		[Tooltip("If first bone of chain should also be affected with whole chain")]
		public bool IncludeParent;

		[Token(Token = "0x4000A3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54C")]
		[Tooltip("By basic algorithm of Tail Animator different sized tails with different number of bones would animate with different bending thanks to this toggle every setup bends in very similar amount.\n\nShort tails will bend more and longer oner with bigger amount of bones less with this option enabled.")]
		[Range(0f, 1f)]
		public float UnifyBendiness;

		[Token(Token = "0x4000A3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x550")]
		[Tooltip("Reaction Speed is defining how fast tail segments will return to target position, it gives animation more underwater/floaty feeling if it's lower")]
		[Range(0f, 1f)]
		public float ReactionSpeed;

		[Token(Token = "0x4000A3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x554")]
		[Tooltip("Sustain is similar to reaction speed in reverse, but providing sustain motion effect when increased")]
		[Range(0f, 1f)]
		public float Sustain;

		[Token(Token = "0x4000A3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x558")]
		[Range(0f, 1f)]
		[Tooltip("Rotation speed is defining how fast tail segments will return to target rotation, it gives animation more lazy feeling if it's lower")]
		public float RotationRelevancy;

		[Token(Token = "0x4000A40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x55C")]
		[Tooltip("Smoothing motion values change over time style to be applied for 'Reaction Speed' and 'Rotation Relevancy' parameters")]
		public EAnimationStyle SmoothingStyle;

		[Token(Token = "0x4000A41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x560")]
		[Tooltip("Delta time type to be used by algorithm")]
		public EFDeltaType DeltaType;

		[Token(Token = "0x4000A42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x564")]
		[Tooltip("Useful when you use other components to affect bones hierarchy and you want this component to follow other component's changes\n\nIt can be really useful when working with 'Spine Animator'")]
		public bool UpdateAsLast;

		[Token(Token = "0x4000A43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x565")]
		[Tooltip("Checking if keyframed animation has some empty keyframes which could cause unwanted twisting errors")]
		public bool DetectZeroKeyframes;

		[Token(Token = "0x4000A44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x566")]
		[Tooltip("Initializing Tail Animator after first frames of game to not initialize with model's T-Pose but after playing some other animation")]
		public bool StartAfterTPose;

		[Token(Token = "0x4000A45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x568")]
		[Tooltip("If you want Tail Animator to stop computing when choosed mesh is not visible in any camera view (editor's scene camera is detecting it too)")]
		public Renderer OptimizeWithMesh;

		[Token(Token = "0x4000A46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x570")]
		[Tooltip("Blend Source Animation (keyframed / unanimated) and Tail Animator")]
		[FPD_Suffix(0f, 1f, FPD_SuffixAttribute.SuffixMode.From0to100, "%", true)]
		public float TailAnimatorAmount;

		[Token(Token = "0x4000A47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x574")]
		[Tooltip("Removing transforms hierachy structure to optimize Unity's calculations on Matrixes.\nIt can give very big boost in performance for long tails but it can't work with animated models!")]
		public bool DetachChildren;

		[Token(Token = "0x4000A48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x578")]
		[Tooltip("If tail movement should not move in depth you can use this parameter")]
		public int Axis2D;

		[Token(Token = "0x4000A49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x57C")]
		[Tooltip("[Experimental: Works only with Slithery Blend set to >= 1] Making each segment go to target pose in front of parent segment creating new animation effect")]
		[Range(-1f, 1f)]
		public float Tangle;

		[Token(Token = "0x4000A4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x580")]
		[Tooltip("Making tail animate also roll rotation like it was done in Tail Animator V1 ! Use Rotation Relevancy Parameter (set lower than 0.5) !")]
		public bool AnimateRoll;

		[Token(Token = "0x4000A4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x588")]
		private Transform _baseTransform;

		[Token(Token = "0x1700006E")]
		public List<Component> DynamicAlwaysInclude
		{
			[Token(Token = "0x600079B")]
			[Address(RVA = "0xA9EC8C", Offset = "0xA9EC8C", VA = "0xA9EC8C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600079C")]
			[Address(RVA = "0xA9EC94", Offset = "0xA9EC94", VA = "0xA9EC94")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700006F")]
		public Quaternion WavingRotationOffset
		{
			[Token(Token = "0x60007C1")]
			[Address(RVA = "0xAA3A40", Offset = "0xAA3A40", VA = "0xAA3A40")]
			[CompilerGenerated]
			get
			{
				return default(Quaternion);
			}
			[Token(Token = "0x60007C2")]
			[Address(RVA = "0xAA3A54", Offset = "0xAA3A54", VA = "0xAA3A54")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000070")]
		public float _TC_TailLength
		{
			[Token(Token = "0x60007D8")]
			[Address(RVA = "0xAA7954", Offset = "0xAA7954", VA = "0xAA7954")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60007D9")]
			[Address(RVA = "0xAA795C", Offset = "0xAA795C", VA = "0xAA795C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000071")]
		public string EditorIconPath
		{
			[Token(Token = "0x6000803")]
			[Address(RVA = "0xAA9F7C", Offset = "0xAA9F7C", VA = "0xAA9F7C", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000072")]
		public bool IsInitialized
		{
			[Token(Token = "0x6000805")]
			[Address(RVA = "0xAAA008", Offset = "0xAAA008", VA = "0xAAA008")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000073")]
		public Transform BaseTransform
		{
			[Token(Token = "0x6000808")]
			[Address(RVA = "0xAA5988", Offset = "0xAA5988", VA = "0xAA5988")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600079D")]
		[Address(RVA = "0xA9EC9C", Offset = "0xA9EC9C", VA = "0xA9EC9C")]
		private void RefreshSegmentsColliders()
		{
		}

		[Token(Token = "0x600079E")]
		[Address(RVA = "0xA9EFF4", Offset = "0xA9EFF4", VA = "0xA9EFF4")]
		private void BeginCollisionsUpdate()
		{
		}

		[Token(Token = "0x600079F")]
		[Address(RVA = "0xA9F5EC", Offset = "0xA9F5EC", VA = "0xA9F5EC")]
		private void SetupSphereColliders()
		{
		}

		[Token(Token = "0x60007A0")]
		[Address(RVA = "0xAA0314", Offset = "0xAA0314", VA = "0xAA0314")]
		internal void CollisionDetection(int index, Collision collision)
		{
		}

		[Token(Token = "0x60007A1")]
		[Address(RVA = "0xAA0388", Offset = "0xAA0388", VA = "0xAA0388")]
		internal void ExitCollision(int index)
		{
		}

		[Token(Token = "0x60007A2")]
		[Address(RVA = "0xAA03F0", Offset = "0xAA03F0", VA = "0xAA03F0")]
		protected bool UseCollisionContact(int index, ref Vector3 pos)
		{
			return default(bool);
		}

		[Token(Token = "0x60007A3")]
		[Address(RVA = "0xA9F25C", Offset = "0xA9F25C", VA = "0xA9F25C")]
		public void RefreshIncludedCollidersDataList()
		{
		}

		[Token(Token = "0x60007A4")]
		[Address(RVA = "0xAA0A18", Offset = "0xAA0A18", VA = "0xAA0A18")]
		public bool PushIfSegmentInsideCollider(TailSegment bone, ref Vector3 targetPoint)
		{
			return default(bool);
		}

		[Token(Token = "0x60007A5")]
		[Address(RVA = "0xA9ED54", Offset = "0xA9ED54", VA = "0xA9ED54")]
		protected float GetColliderSphereRadiusFor(int i)
		{
			return default(float);
		}

		[Token(Token = "0x60007A6")]
		[Address(RVA = "0xAA00B0", Offset = "0xAA00B0", VA = "0xAA00B0")]
		protected float GetColliderSphereRadiusFor(List<Transform> transforms, int i)
		{
			return default(float);
		}

		[Token(Token = "0x60007A7")]
		[Address(RVA = "0xAA0C00", Offset = "0xAA0C00", VA = "0xAA0C00")]
		public void AddCollider(Collider collider)
		{
		}

		[Token(Token = "0x60007A8")]
		[Address(RVA = "0xAA0CE8", Offset = "0xAA0CE8", VA = "0xAA0CE8")]
		public void AddCollider(Collider2D collider)
		{
		}

		[Token(Token = "0x60007A9")]
		[Address(RVA = "0xAA0DD0", Offset = "0xAA0DD0", VA = "0xAA0DD0")]
		public void CheckForColliderDuplicatesAndNulls()
		{
		}

		[Token(Token = "0x60007AA")]
		[Address(RVA = "0xAA10B0", Offset = "0xAA10B0", VA = "0xAA10B0")]
		public void CheckForColliderDuplicatesAndNulls2D()
		{
		}

		[Token(Token = "0x60007AB")]
		[Address(RVA = "0xAA12FC", Offset = "0xAA12FC", VA = "0xAA12FC")]
		private void TailCalculations_ComputeSegmentCollisions(TailSegment bone, ref Vector3 position)
		{
		}

		[Token(Token = "0x60007AC")]
		[Address(RVA = "0xAA13CC", Offset = "0xAA13CC", VA = "0xAA13CC")]
		private void ExpertParamsUpdate()
		{
		}

		[Token(Token = "0x60007AD")]
		[Address(RVA = "0xAA1B60", Offset = "0xAA1B60", VA = "0xAA1B60")]
		private void ExpertCurvesEndUpdate()
		{
		}

		[Token(Token = "0x60007AE")]
		[Address(RVA = "0xAA140C", Offset = "0xAA140C", VA = "0xAA140C")]
		private void Expert_UpdatePosSpeed()
		{
		}

		[Token(Token = "0x60007AF")]
		[Address(RVA = "0xAA1518", Offset = "0xAA1518", VA = "0xAA1518")]
		private void Expert_UpdateRotSpeed()
		{
		}

		[Token(Token = "0x60007B0")]
		[Address(RVA = "0xAA1624", Offset = "0xAA1624", VA = "0xAA1624")]
		private void Expert_UpdateSpringiness()
		{
		}

		[Token(Token = "0x60007B1")]
		[Address(RVA = "0xAA1730", Offset = "0xAA1730", VA = "0xAA1730")]
		private void Expert_UpdateSlithery()
		{
		}

		[Token(Token = "0x60007B2")]
		[Address(RVA = "0xAA183C", Offset = "0xAA183C", VA = "0xAA183C")]
		private void Expert_UpdateCurling()
		{
		}

		[Token(Token = "0x60007B3")]
		[Address(RVA = "0xAA1948", Offset = "0xAA1948", VA = "0xAA1948")]
		private void Expert_UpdateSlippery()
		{
		}

		[Token(Token = "0x60007B4")]
		[Address(RVA = "0xAA1A54", Offset = "0xAA1A54", VA = "0xAA1A54")]
		private void Expert_UpdateBlending()
		{
		}

		[Token(Token = "0x60007B5")]
		[Address(RVA = "0xAA1D04", Offset = "0xAA1D04", VA = "0xAA1D04")]
		private void InitIK()
		{
		}

		[Token(Token = "0x60007B6")]
		[Address(RVA = "0xAA2084", Offset = "0xAA2084", VA = "0xAA2084")]
		private void UpdateIK()
		{
		}

		[Token(Token = "0x60007B7")]
		[Address(RVA = "0xAA1E4C", Offset = "0xAA1E4C", VA = "0xAA1E4C")]
		public void IK_ApplyLimitBoneSettings()
		{
		}

		[Token(Token = "0x60007B8")]
		[Address(RVA = "0xAA2214", Offset = "0xAA2214", VA = "0xAA2214")]
		public void IK_RefreshLimitSettingsContainer()
		{
		}

		[Token(Token = "0x60007B9")]
		[Address(RVA = "0xAA2380", Offset = "0xAA2380", VA = "0xAA2380")]
		private bool PostProcessingNeeded()
		{
			return default(bool);
		}

		[Token(Token = "0x60007BA")]
		[Address(RVA = "0xAA23D8", Offset = "0xAA23D8", VA = "0xAA23D8")]
		private void PostProcessing_Begin()
		{
		}

		[Token(Token = "0x60007BB")]
		[Address(RVA = "0xAA2808", Offset = "0xAA2808", VA = "0xAA2808")]
		private void PostProcessing_ReferenceUpdate()
		{
		}

		[Token(Token = "0x60007BC")]
		[Address(RVA = "0xAA3268", Offset = "0xAA3268", VA = "0xAA3268")]
		private void ShapingParamsUpdate()
		{
		}

		[Token(Token = "0x60007BD")]
		[Address(RVA = "0xAA3288", Offset = "0xAA3288", VA = "0xAA3288")]
		private void Shaping_UpdateCurving()
		{
		}

		[Token(Token = "0x60007BE")]
		[Address(RVA = "0xAA3538", Offset = "0xAA3538", VA = "0xAA3538")]
		private void Shaping_UpdateGravity()
		{
		}

		[Token(Token = "0x60007BF")]
		[Address(RVA = "0xAA3854", Offset = "0xAA3854", VA = "0xAA3854")]
		private void Shaping_UpdateLengthMultiplier()
		{
		}

		[Token(Token = "0x60007C0")]
		[Address(RVA = "0xAA3964", Offset = "0xAA3964", VA = "0xAA3964")]
		private void ShapingEndUpdate()
		{
		}

		[Token(Token = "0x60007C3")]
		[Address(RVA = "0xAA3A68", Offset = "0xAA3A68", VA = "0xAA3A68")]
		private void Waving_Initialize()
		{
		}

		[Token(Token = "0x60007C4")]
		[Address(RVA = "0xAA3B30", Offset = "0xAA3B30", VA = "0xAA3B30")]
		private void Waving_AutoSwingUpdate()
		{
		}

		[Token(Token = "0x60007C5")]
		[Address(RVA = "0xAA3D58", Offset = "0xAA3D58", VA = "0xAA3D58")]
		private void Waving_SustainUpdate()
		{
		}

		[Token(Token = "0x60007C6")]
		[Address(RVA = "0xAA3FEC", Offset = "0xAA3FEC", VA = "0xAA3FEC", Slot = "6")]
		protected virtual void Init()
		{
		}

		[Token(Token = "0x60007C7")]
		[Address(RVA = "0xAA5A8C", Offset = "0xAA5A8C", VA = "0xAA5A8C")]
		public void DetachChildrenTransforms()
		{
		}

		[Token(Token = "0x60007C8")]
		[Address(RVA = "0xAA5B94", Offset = "0xAA5B94", VA = "0xAA5B94")]
		private void InitializePostProcessing()
		{
		}

		[Token(Token = "0x60007C9")]
		[Address(RVA = "0xAA6364", Offset = "0xAA6364", VA = "0xAA6364")]
		protected void StretchingLimiting(TailSegment bone)
		{
		}

		[Token(Token = "0x60007CA")]
		[Address(RVA = "0xAA65BC", Offset = "0xAA65BC", VA = "0xAA65BC")]
		protected Vector3 AngleLimiting(TailSegment child, Vector3 targetPos)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60007CB")]
		[Address(RVA = "0xAA6D04", Offset = "0xAA6D04", VA = "0xAA6D04")]
		private void MotionInfluenceLimiting()
		{
		}

		[Token(Token = "0x60007CC")]
		[Address(RVA = "0xAA6ED0", Offset = "0xAA6ED0", VA = "0xAA6ED0")]
		private void CalculateGravityPositionOffsetForSegment(TailSegment bone)
		{
		}

		[Token(Token = "0x60007CD")]
		[Address(RVA = "0xAA709C", Offset = "0xAA709C", VA = "0xAA709C")]
		private void Axis2DLimit(TailSegment child)
		{
		}

		[Token(Token = "0x60007CE")]
		[Address(RVA = "0xAA7110", Offset = "0xAA7110", VA = "0xAA7110")]
		public float GetDistanceMeasure(Vector3 targetPosition)
		{
			return default(float);
		}

		[Token(Token = "0x60007CF")]
		[Address(RVA = "0xAA7250", Offset = "0xAA7250", VA = "0xAA7250")]
		private void MaxDistanceCalculations()
		{
		}

		[Token(Token = "0x60007D0")]
		[Address(RVA = "0xAA74E4", Offset = "0xAA74E4", VA = "0xAA74E4")]
		private Vector3 TailCalculations_SmoothPosition(Vector3 from, Vector3 to, TailSegment bone)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60007D1")]
		[Address(RVA = "0xAA75E4", Offset = "0xAA75E4", VA = "0xAA75E4")]
		private Vector3 TailCalculations_SmoothPositionLerp(Vector3 from, Vector3 to, float speed)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60007D2")]
		[Address(RVA = "0xAA7594", Offset = "0xAA7594", VA = "0xAA7594")]
		private Vector3 TailCalculations_SmoothPositionSmoothDamp(Vector3 from, Vector3 to, ref Vector3 velo, float speed)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60007D3")]
		[Address(RVA = "0xAA7614", Offset = "0xAA7614", VA = "0xAA7614")]
		private Vector3 TailCalculations_SmoothPositionLinear(Vector3 from, Vector3 to, float speed)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60007D4")]
		[Address(RVA = "0xAA7740", Offset = "0xAA7740", VA = "0xAA7740")]
		private Quaternion TailCalculations_SmoothRotation(Quaternion from, Quaternion to, TailSegment bone)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60007D5")]
		[Address(RVA = "0xAA7820", Offset = "0xAA7820", VA = "0xAA7820")]
		private Quaternion TailCalculations_SmoothRotationLerp(Quaternion from, Quaternion to, float speed)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60007D6")]
		[Address(RVA = "0xAA77D4", Offset = "0xAA77D4", VA = "0xAA77D4")]
		private Quaternion TailCalculations_SmoothRotationSmoothDamp(Quaternion from, Quaternion to, ref Quaternion velo, float speed)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60007D7")]
		[Address(RVA = "0xAA7838", Offset = "0xAA7838", VA = "0xAA7838")]
		private Quaternion TailCalculations_SmoothRotationLinear(Quaternion from, Quaternion to, float speed)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60007DA")]
		[Address(RVA = "0xAA7964", Offset = "0xAA7964", VA = "0xAA7964")]
		private void TailCalculations_Begin()
		{
		}

		[Token(Token = "0x60007DB")]
		[Address(RVA = "0xAA7ACC", Offset = "0xAA7ACC", VA = "0xAA7ACC")]
		private void TailSegments_UpdateRootFeatures()
		{
		}

		[Token(Token = "0x60007DC")]
		[Address(RVA = "0xAA2CE4", Offset = "0xAA2CE4", VA = "0xAA2CE4")]
		private void TailCalculations_SegmentPreProcessingStack(TailSegment child)
		{
		}

		[Token(Token = "0x60007DD")]
		[Address(RVA = "0xAA7C34", Offset = "0xAA7C34", VA = "0xAA7C34")]
		private void TailCalculations_SegmentPostProcessing(TailSegment bone)
		{
		}

		[Token(Token = "0x60007DE")]
		[Address(RVA = "0xAA3044", Offset = "0xAA3044", VA = "0xAA3044")]
		private void TailCalculations_SegmentRotation(TailSegment child, Vector3 localOffset)
		{
		}

		[Token(Token = "0x60007DF")]
		[Address(RVA = "0xAA7FFC", Offset = "0xAA7FFC", VA = "0xAA7FFC")]
		private void TailCalculations_ApplySegmentMotion(TailSegment child)
		{
		}

		[Token(Token = "0x60007E0")]
		[Address(RVA = "0xAA2A20", Offset = "0xAA2A20", VA = "0xAA2A20")]
		private void TailSegment_PrepareMotionParameters(TailSegment child)
		{
		}

		[Token(Token = "0x60007E1")]
		[Address(RVA = "0xAA298C", Offset = "0xAA298C", VA = "0xAA298C")]
		private void TailSegment_PrepareVelocity(TailSegment child)
		{
		}

		[Token(Token = "0x60007E2")]
		[Address(RVA = "0xAA2B80", Offset = "0xAA2B80", VA = "0xAA2B80")]
		private void TailSegment_BaseSwingProcessing(TailSegment child)
		{
		}

		[Token(Token = "0x60007E3")]
		[Address(RVA = "0xAA2E5C", Offset = "0xAA2E5C", VA = "0xAA2E5C")]
		private void TailSegment_PreRotationPositionBlend(TailSegment child)
		{
		}

		[Token(Token = "0x60007E4")]
		[Address(RVA = "0xAA8208", Offset = "0xAA8208", VA = "0xAA8208")]
		private Quaternion TailSegment_RotationSlithery(TailSegment child)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60007E5")]
		[Address(RVA = "0xAA83F8", Offset = "0xAA83F8", VA = "0xAA83F8")]
		private Quaternion GetSlitheryReferenceRotation(TailSegment child)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60007E6")]
		[Address(RVA = "0xAA8460", Offset = "0xAA8460", VA = "0xAA8460")]
		private Quaternion TailSegment_RotationStiff(TailSegment child)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60007E7")]
		[Address(RVA = "0xAA8074", Offset = "0xAA8074", VA = "0xAA8074")]
		private Quaternion TailSegment_GetSwingRotation(TailSegment child, float curlFactor)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60007E8")]
		[Address(RVA = "0xAA8180", Offset = "0xAA8180", VA = "0xAA8180")]
		private float TailSegment_GetUnifiedBendinessMultiplier(TailSegment child)
		{
			return default(float);
		}

		[Token(Token = "0x60007E9")]
		[Address(RVA = "0xAA2478", Offset = "0xAA2478", VA = "0xAA2478")]
		public void TailSegments_UpdateCoordsForRootBone(TailSegment parent)
		{
		}

		[Token(Token = "0x60007EA")]
		[Address(RVA = "0xAA2EF4", Offset = "0xAA2EF4", VA = "0xAA2EF4")]
		public void TailCalculations_UpdateArtificialChildBone(TailSegment child)
		{
		}

		[Token(Token = "0x60007EB")]
		[Address(RVA = "0xAA877C", Offset = "0xAA877C", VA = "0xAA877C")]
		public void Editor_TailCalculations_RefreshArtificialParentBone()
		{
		}

		[Token(Token = "0x60007EC")]
		[Address(RVA = "0xAA8874", Offset = "0xAA8874", VA = "0xAA8874")]
		private void SimulateTailMotionFrame(bool pp)
		{
		}

		[Token(Token = "0x60007ED")]
		[Address(RVA = "0xAA89D0", Offset = "0xAA89D0", VA = "0xAA89D0")]
		private void UpdateTailAlgorithm()
		{
		}

		[Token(Token = "0x60007EE")]
		[Address(RVA = "0xAA5FF8", Offset = "0xAA5FF8", VA = "0xAA5FF8")]
		private void CheckIfTailAnimatorShouldBeUpdated()
		{
		}

		[Token(Token = "0x60007EF")]
		[Address(RVA = "0xAA8F00", Offset = "0xAA8F00", VA = "0xAA8F00")]
		private void DeltaTimeCalculations()
		{
		}

		[Token(Token = "0x60007F0")]
		[Address(RVA = "0xAA90FC", Offset = "0xAA90FC", VA = "0xAA90FC")]
		private void StableUpdateRateCalculations()
		{
		}

		[Token(Token = "0x60007F1")]
		[Address(RVA = "0xAA62B8", Offset = "0xAA62B8", VA = "0xAA62B8")]
		private void PreCalibrateBones()
		{
		}

		[Token(Token = "0x60007F2")]
		[Address(RVA = "0xAA9170", Offset = "0xAA9170", VA = "0xAA9170")]
		private void CalibrateBones()
		{
		}

		[Token(Token = "0x60007F3")]
		[Address(RVA = "0xAA91D0", Offset = "0xAA91D0", VA = "0xAA91D0")]
		public void CheckForNullsInGhostChain()
		{
		}

		[Token(Token = "0x60007F4")]
		[Address(RVA = "0xAA9148", Offset = "0xAA9148", VA = "0xAA9148")]
		private float GetClampedSmoothDelta()
		{
			return default(float);
		}

		[Token(Token = "0x60007F5")]
		[Address(RVA = "0xAA8578", Offset = "0xAA8578", VA = "0xAA8578")]
		private Quaternion MultiplyQ(Quaternion rotation, float times)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60007F6")]
		[Address(RVA = "0xAA9328", Offset = "0xAA9328", VA = "0xAA9328")]
		public float GetValueFromCurve(int i, AnimationCurve c)
		{
			return default(float);
		}

		[Token(Token = "0x60007F7")]
		[Address(RVA = "0xAA93D8", Offset = "0xAA93D8", VA = "0xAA93D8")]
		public AnimationCurve ClampCurve(AnimationCurve a, float timeStart, float timeEnd, float lowest, float highest)
		{
			return null;
		}

		[Token(Token = "0x60007F8")]
		[Address(RVA = "0xAA9538", Offset = "0xAA9538", VA = "0xAA9538")]
		public void RefreshTransformsList()
		{
		}

		[Token(Token = "0x60007F9")]
		[Address(RVA = "0xAA9694", Offset = "0xAA9694", VA = "0xAA9694")]
		public TailSegment GetGhostChild()
		{
			return null;
		}

		[Token(Token = "0x60007FA")]
		[Address(RVA = "0xAA969C", Offset = "0xAA969C", VA = "0xAA969C")]
		[IteratorStateMachine(typeof(<LateFixed>d__265))]
		private IEnumerator LateFixed()
		{
			return null;
		}

		[Token(Token = "0x60007FB")]
		[Address(RVA = "0xAA2700", Offset = "0xAA2700", VA = "0xAA2700")]
		private void Deflection_BeginUpdate()
		{
		}

		[Token(Token = "0x60007FC")]
		[Address(RVA = "0xAA980C", Offset = "0xAA980C", VA = "0xAA980C")]
		private void Deflection_RemoveDeflectionSource(TailSegment child)
		{
		}

		[Token(Token = "0x60007FD")]
		[Address(RVA = "0xAA9710", Offset = "0xAA9710", VA = "0xAA9710")]
		private void Deflection_AddDeflectionSource(TailSegment child)
		{
		}

		[Token(Token = "0x60007FE")]
		[Address(RVA = "0xAA7CB8", Offset = "0xAA7CB8", VA = "0xAA7CB8")]
		private void Deflection_SegmentOffsetSimple(TailSegment child, ref Vector3 position)
		{
		}

		[Token(Token = "0x60007FF")]
		[Address(RVA = "0xAA98C0", Offset = "0xAA98C0", VA = "0xAA98C0")]
		public void User_SetTailTransforms(List<Transform> list)
		{
		}

		[Token(Token = "0x6000800")]
		[Address(RVA = "0xAA9980", Offset = "0xAA9980", VA = "0xAA9980")]
		public TailSegment User_AddTailTransform(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x6000801")]
		[Address(RVA = "0xAA9C34", Offset = "0xAA9C34", VA = "0xAA9C34")]
		public void User_CutEndSegmentsTo(int fromLastTo)
		{
		}

		[Token(Token = "0x6000802")]
		[Address(RVA = "0xAA8E54", Offset = "0xAA8E54", VA = "0xAA8E54")]
		public void User_ReposeTail()
		{
		}

		[Token(Token = "0x6000804")]
		[Address(RVA = "0xAAA004", Offset = "0xAAA004", VA = "0xAAA004", Slot = "4")]
		public void OnDrop(PointerEventData data)
		{
		}

		[Token(Token = "0x6000806")]
		[Address(RVA = "0xAAA010", Offset = "0xAAA010", VA = "0xAAA010")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x6000807")]
		[Address(RVA = "0xAA50C8", Offset = "0xAA50C8", VA = "0xAA50C8")]
		public void GetGhostChain()
		{
		}

		[Token(Token = "0x6000809")]
		[Address(RVA = "0xAAA088", Offset = "0xAAA088", VA = "0xAAA088")]
		private void Start()
		{
		}

		[Token(Token = "0x600080A")]
		[Address(RVA = "0xAAA0E4", Offset = "0xAAA0E4", VA = "0xAAA0E4")]
		private void Reset()
		{
		}

		[Token(Token = "0x600080B")]
		[Address(RVA = "0xAA5F20", Offset = "0xAA5F20", VA = "0xAA5F20")]
		private void Update()
		{
		}

		[Token(Token = "0x600080C")]
		[Address(RVA = "0xAAA258", Offset = "0xAAA258", VA = "0xAAA258")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x600080D")]
		[Address(RVA = "0xAA5F58", Offset = "0xAA5F58", VA = "0xAA5F58")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600080E")]
		[Address(RVA = "0xAAA274", Offset = "0xAAA274", VA = "0xAAA274")]
		private void EndUpdate()
		{
		}

		[Token(Token = "0x600080F")]
		[Address(RVA = "0xAAA2B4", Offset = "0xAAA2B4", VA = "0xAAA2B4")]
		public TailAnimator2()
		{
		}
	}
	[Token(Token = "0x200019E")]
	public class FTail_Demo_GroundMovement : MonoBehaviour
	{
		[Token(Token = "0x4000AA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Check my other Package 'Ground Fitter' for", order = 0)]
		[Space(-7f, order = 1)]
		[Header("more customizable ground fit movement", order = 2)]
		public float RotationYAxis;

		[Token(Token = "0x4000AA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Range(1f, 30f)]
		public float FittingSpeed;

		[Token(Token = "0x4000AA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float RaycastHeightOffset;

		[Token(Token = "0x4000AA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float RaycastCheckRange;

		[Token(Token = "0x4000AA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float LookAheadRaycast;

		[Token(Token = "0x4000AA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float AheadBlend;

		[Token(Token = "0x4000AA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float YOffset;

		[Token(Token = "0x4000AA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Space(8f)]
		public LayerMask GroundLayerMask;

		[Token(Token = "0x4000AA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool RelativeLookUp;

		[Token(Token = "0x4000AAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Range(0f, 1f)]
		public float RelativeLookUpBias;

		[Token(Token = "0x4000AAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		protected Quaternion helperRotation;

		[Token(Token = "0x4000AAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		protected float delta;

		[Token(Token = "0x4000AAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected bool fittingEnabled;

		[Token(Token = "0x4000AAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[Header("> Movement <")]
		public float BaseSpeed;

		[Token(Token = "0x4000AB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float RotateToTargetSpeed;

		[Token(Token = "0x4000AB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float SprintingSpeed;

		[Token(Token = "0x4000AB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected float ActiveSpeed;

		[Token(Token = "0x4000AB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public float AccelerationSpeed;

		[Token(Token = "0x4000AB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public float DecelerationSpeed;

		[Token(Token = "0x4000AB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public float JumpPower;

		[Token(Token = "0x4000AB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public float gravity;

		[Token(Token = "0x4000AB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public bool MultiplySprintAnimation;

		[Token(Token = "0x4000AB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		internal float YVelocity;

		[Token(Token = "0x4000AB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		protected bool inAir;

		[Token(Token = "0x4000ABA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected float gravityOffset;

		[Token(Token = "0x4000ABB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		internal bool MoveForward;

		[Token(Token = "0x4000ABC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB5")]
		internal bool Sprint;

		[Token(Token = "0x4000ABD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		internal float RotationOffset;

		[Token(Token = "0x4000ABE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected string lastAnim;

		[Token(Token = "0x4000ABF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		protected Animator animator;

		[Token(Token = "0x4000AC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		protected bool animatorHaveAnimationSpeedProp;

		[Token(Token = "0x4000AC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		protected float initialYOffset;

		[Token(Token = "0x4000AC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		protected Vector3 holdJumpPosition;

		[Token(Token = "0x4000AC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		protected float freezeJumpYPosition;

		[Token(Token = "0x4000AC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private bool oneAnimation;

		[Token(Token = "0x17000086")]
		public RaycastHit LastRaycast
		{
			[Token(Token = "0x600084F")]
			[Address(RVA = "0xAABE08", Offset = "0xAABE08", VA = "0xAABE08")]
			[CompilerGenerated]
			get
			{
				return default(RaycastHit);
			}
			[Token(Token = "0x6000850")]
			[Address(RVA = "0xAABE1C", Offset = "0xAABE1C", VA = "0xAABE1C")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x6000851")]
		[Address(RVA = "0xAABE38", Offset = "0xAABE38", VA = "0xAABE38")]
		private Vector3 GetUpVector()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000852")]
		[Address(RVA = "0xAABF38", Offset = "0xAABF38", VA = "0xAABF38", Slot = "4")]
		protected virtual void FitToGround()
		{
		}

		[Token(Token = "0x6000853")]
		[Address(RVA = "0xAAC400", Offset = "0xAAC400", VA = "0xAAC400")]
		internal void RotationCalculations()
		{
		}

		[Token(Token = "0x6000854")]
		[Address(RVA = "0xAAC520", Offset = "0xAAC520", VA = "0xAAC520")]
		internal RaycastHit CastRay()
		{
			return default(RaycastHit);
		}

		[Token(Token = "0x6000855")]
		[Address(RVA = "0xAAC3D0", Offset = "0xAAC3D0", VA = "0xAAC3D0")]
		internal void RefreshLastRaycast()
		{
		}

		[Token(Token = "0x6000856")]
		[Address(RVA = "0xAAC624", Offset = "0xAAC624", VA = "0xAAC624", Slot = "5")]
		protected virtual void InitMovement()
		{
		}

		[Token(Token = "0x6000857")]
		[Address(RVA = "0xAAC83C", Offset = "0xAAC83C", VA = "0xAAC83C", Slot = "6")]
		protected virtual void UpdateMovement()
		{
		}

		[Token(Token = "0x6000858")]
		[Address(RVA = "0xAAC894", Offset = "0xAAC894", VA = "0xAAC894", Slot = "7")]
		protected virtual void HandleInput()
		{
		}

		[Token(Token = "0x6000859")]
		[Address(RVA = "0xAAC978", Offset = "0xAAC978", VA = "0xAAC978", Slot = "8")]
		protected virtual void HandleGravity()
		{
		}

		[Token(Token = "0x600085A")]
		[Address(RVA = "0xAACC5C", Offset = "0xAACC5C", VA = "0xAACC5C", Slot = "9")]
		protected virtual void HandleAnimations()
		{
		}

		[Token(Token = "0x600085B")]
		[Address(RVA = "0xAACDCC", Offset = "0xAACDCC", VA = "0xAACDCC")]
		protected void RefreshHitGroundVars(RaycastHit hit)
		{
		}

		[Token(Token = "0x600085C")]
		[Address(RVA = "0xAACE6C", Offset = "0xAACE6C", VA = "0xAACE6C", Slot = "10")]
		protected virtual void HandleTransforming()
		{
		}

		[Token(Token = "0x600085D")]
		[Address(RVA = "0xAAD220", Offset = "0xAAD220", VA = "0xAAD220", Slot = "11")]
		protected virtual void HitGround()
		{
		}

		[Token(Token = "0x600085E")]
		[Address(RVA = "0xAAD260", Offset = "0xAAD260", VA = "0xAAD260", Slot = "12")]
		public virtual void Jump()
		{
		}

		[Token(Token = "0x600085F")]
		[Address(RVA = "0xAAD2A4", Offset = "0xAAD2A4", VA = "0xAAD2A4", Slot = "13")]
		protected virtual void CrossfadeTo(string animation, float transitionTime = 0.25f)
		{
		}

		[Token(Token = "0x6000860")]
		[Address(RVA = "0xAAC7B0", Offset = "0xAAC7B0", VA = "0xAAC7B0")]
		public static bool HasParameter(Animator animator, string paramName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000861")]
		[Address(RVA = "0xAAD3E8", Offset = "0xAAD3E8", VA = "0xAAD3E8", Slot = "14")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000862")]
		[Address(RVA = "0xAAD3F4", Offset = "0xAAD3F4", VA = "0xAAD3F4", Slot = "15")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000863")]
		[Address(RVA = "0xAAD434", Offset = "0xAAD434", VA = "0xAAD434")]
		public FTail_Demo_GroundMovement()
		{
		}
	}
	[Token(Token = "0x200019F")]
	public static class FTail_Skinning
	{
		[Token(Token = "0x6000864")]
		[Address(RVA = "0xAAD528", Offset = "0xAAD528", VA = "0xAAD528")]
		public static FTail_SkinningVertexData[] CalculateVertexWeightingData(Mesh baseMesh, Transform[] bonesCoords, Vector3 spreadOffset, int weightBoneLimit = 2, float spreadValue = 0.8f, float spreadPower = 0.185f)
		{
			return null;
		}

		[Token(Token = "0x6000865")]
		[Address(RVA = "0xAAD74C", Offset = "0xAAD74C", VA = "0xAAD74C")]
		public static FTail_SkinningVertexData[] CalculateVertexWeightingData(Mesh baseMesh, Vector3[] bonesPos, Quaternion[] bonesRot, Vector3 spreadOffset, int weightBoneLimit = 2, float spreadValue = 0.8f, float spreadPower = 0.185f)
		{
			return null;
		}

		[Token(Token = "0x6000866")]
		[Address(RVA = "0xAADFA8", Offset = "0xAADFA8", VA = "0xAADFA8")]
		public static SkinnedMeshRenderer SkinMesh(Mesh baseMesh, Transform skinParent, Transform[] bonesStructure, FTail_SkinningVertexData[] vertData)
		{
			return null;
		}

		[Token(Token = "0x6000867")]
		[Address(RVA = "0xAAE164", Offset = "0xAAE164", VA = "0xAAE164")]
		public static SkinnedMeshRenderer SkinMesh(Mesh baseMesh, Vector3[] bonesPositions, Quaternion[] bonesRotations, FTail_SkinningVertexData[] vertData)
		{
			return null;
		}

		[Token(Token = "0x6000868")]
		[Address(RVA = "0xAAEB0C", Offset = "0xAAEB0C", VA = "0xAAEB0C")]
		public static BoneWeight SetWeightIndex(BoneWeight weight, int bone = 0, int index = 0)
		{
			return default(BoneWeight);
		}

		[Token(Token = "0x6000869")]
		[Address(RVA = "0xAAEB84", Offset = "0xAAEB84", VA = "0xAAEB84")]
		public static BoneWeight SetWeightToBone(BoneWeight weight, int bone = 0, float value = 1f)
		{
			return default(BoneWeight);
		}
	}
	[Serializable]
	[Token(Token = "0x20001A0")]
	public class FTail_SkinningVertexData
	{
		[Token(Token = "0x4000AC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 position;

		[Token(Token = "0x4000AC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int[] bonesIndexes;

		[Token(Token = "0x4000AC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int allMeshBonesCount;

		[Token(Token = "0x4000AC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float[] weights;

		[Token(Token = "0x4000AC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float[] debugDists;

		[Token(Token = "0x4000ACA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float[] debugDistWeights;

		[Token(Token = "0x4000ACB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float[] debugWeights;

		[Token(Token = "0x600086A")]
		[Address(RVA = "0xAADA14", Offset = "0xAADA14", VA = "0xAADA14")]
		public FTail_SkinningVertexData(Vector3 pos)
		{
		}

		[Token(Token = "0x600086B")]
		[Address(RVA = "0xAAEBEC", Offset = "0xAAEBEC", VA = "0xAAEBEC")]
		public float DistanceToLine(Vector3 pos, Vector3 lineStart, Vector3 lineEnd)
		{
			return default(float);
		}

		[Token(Token = "0x600086C")]
		[Address(RVA = "0xAADA50", Offset = "0xAADA50", VA = "0xAADA50")]
		public void CalculateVertexParameters(Vector3[] bonesPos, Quaternion[] bonesRot, Vector3[] boneAreas, int maxWeightedBones, float spread, Vector3 spreadOffset, float spreadPower = 1f)
		{
		}

		[Token(Token = "0x600086D")]
		[Address(RVA = "0xAAEEAC", Offset = "0xAAEEAC", VA = "0xAAEEAC")]
		public void AutoSetBoneWeights(float[] weightForBone, float[] distToBone, float spread, float spreadPower, Vector3[] boneAreas)
		{
		}

		[Token(Token = "0x600086E")]
		[Address(RVA = "0xAAF37C", Offset = "0xAAF37C", VA = "0xAAF37C")]
		public static float DistributionIn(float k, float power)
		{
			return default(float);
		}

		[Token(Token = "0x600086F")]
		[Address(RVA = "0xAAF388", Offset = "0xAAF388", VA = "0xAAF388")]
		public static Color GetBoneIndicatorColor(int boneIndex, int bonesCount, float s = 0.9f, float v = 0.9f)
		{
			return default(Color);
		}

		[Token(Token = "0x6000870")]
		[Address(RVA = "0xAAF3E8", Offset = "0xAAF3E8", VA = "0xAAF3E8")]
		public Color GetWeightColor()
		{
			return default(Color);
		}
	}
	[Token(Token = "0x20001A2")]
	[AddComponentMenu("FImpossible Creations/Tail Animator Utilities/Tail Animator Wind")]
	public class TailAnimatorWind : MonoBehaviour, IDropHandler, IEventSystemHandler, IFHierarchyIcon
	{
		[Token(Token = "0x4000ACE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static TailAnimatorWind _instance;

		[Token(Token = "0x4000ACF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("In playmode you will find this object in DontDestroyOnLoad")]
		[FPD_Header("Main Wind Setings", 2f, 4f, 2)]
		public Vector3 overrideWind;

		[Token(Token = "0x4000AD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float power;

		[Token(Token = "0x4000AD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float additionalTurbulence;

		[Token(Token = "0x4000AD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float additionalTurbSpeed;

		[Token(Token = "0x4000AD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[FPD_Header("Procedural Wind Settings", 6f, 4f, 2)]
		[Range(0.1f, 1f)]
		public float rapidness;

		[Token(Token = "0x4000AD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[FPD_Suffix(0f, 360f, FPD_SuffixAttribute.SuffixMode.FromMinToMaxRounded, "o", true)]
		public float changesPower;

		[Token(Token = "0x4000AD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Range(0f, 10f)]
		public float turbulenceSpeed;

		[Token(Token = "0x4000AD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[FPD_Header("World Position Turbulence", 6f, 4f, 2)]
		public float worldTurb;

		[Token(Token = "0x4000AD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("If higher no performance cost, it is just a number")]
		public float worldTurbScale;

		[Token(Token = "0x4000AD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float worldTurbSpeed;

		[Token(Token = "0x4000AD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("When tail is longer then power of wind should be higher")]
		[FPD_Header("Tail Compoenents Related", 6f, 4f, 2)]
		public bool powerDependOnTailLength;

		[Token(Token = "0x4000ADA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		[Tooltip("Finding all TailAnimato2 compoents at start")]
		public bool collectFromSceneAtStart;

		[Token(Token = "0x4000ADB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public List<TailAnimator2> WindAffected;

		[Token(Token = "0x4000ADC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector3 targetWind;

		[Token(Token = "0x4000ADD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private Vector3 smoothWind;

		[Token(Token = "0x4000ADE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Vector3 windVeloHelper;

		[Token(Token = "0x4000ADF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private Quaternion windOrientation;

		[Token(Token = "0x4000AE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private Quaternion smoothWindOrient;

		[Token(Token = "0x4000AE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private Quaternion smoothWindOrientHelper;

		[Token(Token = "0x4000AE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private float[] randNumbers;

		[Token(Token = "0x4000AE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private float[] randTimes;

		[Token(Token = "0x4000AE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private float[] randSpeeds;

		[Token(Token = "0x4000AE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private int frameOffset;

		[Token(Token = "0x4000AE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private Vector3 finalAddTurbulence;

		[Token(Token = "0x4000AE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Vector3 addTurbHelper;

		[Token(Token = "0x4000AE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private Vector3 smoothAddTurbulence;

		[Token(Token = "0x17000087")]
		public string EditorIconPath
		{
			[Token(Token = "0x6000874")]
			[Address(RVA = "0xAAF618", Offset = "0xAAF618", VA = "0xAAF618", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000088")]
		public static TailAnimatorWind Instance
		{
			[Token(Token = "0x6000876")]
			[Address(RVA = "0xAAF65C", Offset = "0xAAF65C", VA = "0xAAF65C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000875")]
		[Address(RVA = "0xAAF658", Offset = "0xAAF658", VA = "0xAAF658", Slot = "4")]
		public void OnDrop(PointerEventData data)
		{
		}

		[Token(Token = "0x6000877")]
		[Address(RVA = "0xAAF7A4", Offset = "0xAAF7A4", VA = "0xAAF7A4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000878")]
		[Address(RVA = "0xAAF6E8", Offset = "0xAAF6E8", VA = "0xAAF6E8")]
		private static void GenerateWindComponentInstance()
		{
		}

		[Token(Token = "0x6000879")]
		[Address(RVA = "0xAAF9B4", Offset = "0xAAF9B4", VA = "0xAAF9B4")]
		public static void Refresh(TailAnimator2 tail)
		{
		}

		[Token(Token = "0x600087A")]
		[Address(RVA = "0xAAFBAC", Offset = "0xAAFBAC", VA = "0xAAFBAC")]
		private void Update()
		{
		}

		[Token(Token = "0x600087B")]
		[Address(RVA = "0xAB055C", Offset = "0xAB055C", VA = "0xAB055C")]
		private void Start()
		{
		}

		[Token(Token = "0x600087C")]
		[Address(RVA = "0xAAFFEC", Offset = "0xAAFFEC", VA = "0xAAFFEC")]
		private void ComputeWind()
		{
		}

		[Token(Token = "0x600087D")]
		[Address(RVA = "0xAB06C4", Offset = "0xAB06C4", VA = "0xAB06C4")]
		private Vector3 GetAddTurbulence()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600087E")]
		[Address(RVA = "0xAAFE80", Offset = "0xAAFE80", VA = "0xAAFE80")]
		public void GetTailAnimatorsFromScene()
		{
		}

		[Token(Token = "0x600087F")]
		[Address(RVA = "0xAB0870", Offset = "0xAB0870", VA = "0xAB0870")]
		public TailAnimatorWind()
		{
		}
	}
	[Token(Token = "0x20001A3")]
	[AddComponentMenu("FImpossible Creations/Hidden/Tail Collision Helper")]
	public class TailCollisionHelper : MonoBehaviour
	{
		[Token(Token = "0x4000AE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TailAnimator2 ParentTail;

		[Token(Token = "0x4000AEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Collider TailCollider;

		[Token(Token = "0x4000AEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Collider2D TailCollider2D;

		[Token(Token = "0x4000AEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int Index;

		[Token(Token = "0x4000AEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Transform previousCollision;

		[Token(Token = "0x17000089")]
		internal Rigidbody RigBody
		{
			[Token(Token = "0x6000880")]
			[Address(RVA = "0xAB09EC", Offset = "0xAB09EC", VA = "0xAB09EC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000881")]
			[Address(RVA = "0xAB09F4", Offset = "0xAB09F4", VA = "0xAB09F4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700008A")]
		internal Rigidbody2D RigBody2D
		{
			[Token(Token = "0x6000882")]
			[Address(RVA = "0xAB09FC", Offset = "0xAB09FC", VA = "0xAB09FC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000883")]
			[Address(RVA = "0xAB0A04", Offset = "0xAB0A04", VA = "0xAB0A04")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000884")]
		[Address(RVA = "0xAB0A0C", Offset = "0xAB0A0C", VA = "0xAB0A0C")]
		internal TailCollisionHelper Init(bool addRigidbody = true, float mass = 1f, bool kinematic = false)
		{
			return null;
		}

		[Token(Token = "0x6000885")]
		[Address(RVA = "0xAB0CEC", Offset = "0xAB0CEC", VA = "0xAB0CEC")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6000886")]
		[Address(RVA = "0xAB0EE8", Offset = "0xAB0EE8", VA = "0xAB0EE8")]
		private void OnCollisionExit(Collision collision)
		{
		}

		[Token(Token = "0x6000887")]
		[Address(RVA = "0xAB0FAC", Offset = "0xAB0FAC", VA = "0xAB0FAC")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000888")]
		[Address(RVA = "0xAB117C", Offset = "0xAB117C", VA = "0xAB117C")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6000889")]
		[Address(RVA = "0xAB1250", Offset = "0xAB1250", VA = "0xAB1250")]
		private void OnTriggerEnter2D(Collider2D other)
		{
		}

		[Token(Token = "0x600088A")]
		[Address(RVA = "0xAB143C", Offset = "0xAB143C", VA = "0xAB143C")]
		private void OnTriggerExit2D(Collider2D other)
		{
		}

		[Token(Token = "0x600088B")]
		[Address(RVA = "0xAB1510", Offset = "0xAB1510", VA = "0xAB1510")]
		public TailCollisionHelper()
		{
		}
	}
}
namespace FSP_Samples
{
	[Token(Token = "0x20001A4")]
	public class FPSCounter
	{
		[Token(Token = "0x4000AF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private double m_LastTickCount;

		[Token(Token = "0x4000AF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float m_FPS;

		[Token(Token = "0x4000AF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float m_FrameTime;

		[Token(Token = "0x4000AF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float m_DropFrameTime;

		[Token(Token = "0x4000AF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float m_LastDropTime;

		[Token(Token = "0x4000AF5")]
		private const float FPSDropThres = 0.002f;

		[Token(Token = "0x4000AF6")]
		private const float DropTimeout = 0.5f;

		[Token(Token = "0x4000AF7")]
		private const float AvgFactor = 0.1f;

		[Token(Token = "0x4000AF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float m_Dt;

		[Token(Token = "0x1700008B")]
		public float timeDelta
		{
			[Token(Token = "0x600088C")]
			[Address(RVA = "0xAB1518", Offset = "0xAB1518", VA = "0xAB1518")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x600088D")]
		[Address(RVA = "0xAB1520", Offset = "0xAB1520", VA = "0xAB1520")]
		public FPSCounter()
		{
		}

		[Token(Token = "0x600088E")]
		[Address(RVA = "0xAB1540", Offset = "0xAB1540", VA = "0xAB1540")]
		public void Update()
		{
		}

		[Token(Token = "0x600088F")]
		[Address(RVA = "0xAB1648", Offset = "0xAB1648", VA = "0xAB1648")]
		public float GetFPS()
		{
			return default(float);
		}

		[Token(Token = "0x6000890")]
		[Address(RVA = "0xAB1650", Offset = "0xAB1650", VA = "0xAB1650")]
		public float GetDropFPS()
		{
			return default(float);
		}

		[Token(Token = "0x6000891")]
		[Address(RVA = "0xAB1674", Offset = "0xAB1674", VA = "0xAB1674")]
		public float GetAverageFrameTime()
		{
			return default(float);
		}
	}
	[Token(Token = "0x20001A5")]
	public class FPSLabel : MonoBehaviour
	{
		[Token(Token = "0x4000AF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private FPSCounter m_FPSCounter;

		[Token(Token = "0x4000AFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Text m_Label;

		[Token(Token = "0x4000AFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool m_ShowFPSDrop;

		[Token(Token = "0x4000AFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private StringBuilder m_FPSTextBuilder;

		[Token(Token = "0x4000AFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private char[] m_FPSChars;

		[Token(Token = "0x4000AFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private char[] m_FPSDropChars;

		[Token(Token = "0x4000AFF")]
		private const int FPSTextLen = 10;

		[Token(Token = "0x4000B00")]
		private const float LabelUpdateFrequency = 0.5f;

		[Token(Token = "0x4000B01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float m_TimeSinceLastLabelUpdate;

		[Token(Token = "0x6000892")]
		[Address(RVA = "0xAB167C", Offset = "0xAB167C", VA = "0xAB167C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000893")]
		[Address(RVA = "0xAB17C0", Offset = "0xAB17C0", VA = "0xAB17C0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000894")]
		[Address(RVA = "0xAB194C", Offset = "0xAB194C", VA = "0xAB194C")]
		private void FloatToCharArray(char[] charArray, float number)
		{
		}

		[Token(Token = "0x6000895")]
		[Address(RVA = "0xAB1AF4", Offset = "0xAB1AF4", VA = "0xAB1AF4")]
		private int GetDecLen(float number)
		{
			return default(int);
		}

		[Token(Token = "0x6000896")]
		[Address(RVA = "0xAB1B40", Offset = "0xAB1B40", VA = "0xAB1B40")]
		public FPSLabel()
		{
		}
	}
}
namespace EVP
{
	[Token(Token = "0x20001A6")]
	[RequireComponent(typeof(Rigidbody))]
	public class RigidbodyImpulse : MonoBehaviour
	{
		[Token(Token = "0x4000B02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float velocity;

		[Token(Token = "0x4000B03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 direction;

		[Token(Token = "0x4000B04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public KeyCode key;

		[Token(Token = "0x4000B05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Rigidbody m_rigidbody;

		[Token(Token = "0x6000897")]
		[Address(RVA = "0xAB1B48", Offset = "0xAB1B48", VA = "0xAB1B48")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000898")]
		[Address(RVA = "0xAB1BA0", Offset = "0xAB1BA0", VA = "0xAB1BA0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000899")]
		[Address(RVA = "0xAB1CC8", Offset = "0xAB1CC8", VA = "0xAB1CC8")]
		public RigidbodyImpulse()
		{
		}
	}
	[Token(Token = "0x20001A7")]
	[RequireComponent(typeof(Rigidbody))]
	public class RigidbodyPause : MonoBehaviour
	{
		[Token(Token = "0x4000B06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool pause;

		[Token(Token = "0x4000B07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public KeyCode key;

		[Token(Token = "0x4000B08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Rigidbody m_rigidbody;

		[Token(Token = "0x4000B09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool m_pausedState;

		[Token(Token = "0x4000B0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector3 m_velocity;

		[Token(Token = "0x4000B0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 m_angularVelocity;

		[Token(Token = "0x4000B0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private VehicleController m_vehicle;

		[Token(Token = "0x600089A")]
		[Address(RVA = "0xAB1D34", Offset = "0xAB1D34", VA = "0xAB1D34")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600089B")]
		[Address(RVA = "0xAB1DC4", Offset = "0xAB1DC4", VA = "0xAB1DC4")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x600089C")]
		[Address(RVA = "0xAB1F40", Offset = "0xAB1F40", VA = "0xAB1F40")]
		private void DisableWheelColliders()
		{
		}

		[Token(Token = "0x600089D")]
		[Address(RVA = "0xAB1FDC", Offset = "0xAB1FDC", VA = "0xAB1FDC")]
		private void EnableWheelColliders()
		{
		}

		[Token(Token = "0x600089E")]
		[Address(RVA = "0xAB2078", Offset = "0xAB2078", VA = "0xAB2078")]
		private void Update()
		{
		}

		[Token(Token = "0x600089F")]
		[Address(RVA = "0xAB20A4", Offset = "0xAB20A4", VA = "0xAB20A4")]
		public RigidbodyPause()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001A8")]
	public class GroundMaterial
	{
		[Token(Token = "0x20001A9")]
		public enum SurfaceType
		{
			[Token(Token = "0x4000B14")]
			Hard,
			[Token(Token = "0x4000B15")]
			Soft
		}

		[Token(Token = "0x4000B0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PhysicMaterial physicMaterial;

		[Token(Token = "0x4000B0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float grip;

		[Token(Token = "0x4000B0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float drag;

		[Token(Token = "0x4000B10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TireMarksRenderer marksRenderer;

		[Token(Token = "0x4000B11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TireParticleEmitter particleEmitter;

		[Token(Token = "0x4000B12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public SurfaceType surfaceType;

		[Token(Token = "0x60008A0")]
		[Address(RVA = "0xAB2120", Offset = "0xAB2120", VA = "0xAB2120")]
		public GroundMaterial()
		{
		}
	}
	[Token(Token = "0x20001AA")]
	public class GroundMaterialManager : MonoBehaviour
	{
		[Token(Token = "0x4000B16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GroundMaterial[] groundMaterials;

		[Token(Token = "0x60008A1")]
		[Address(RVA = "0xAB2134", Offset = "0xAB2134", VA = "0xAB2134")]
		public GroundMaterial GetGroundMaterial(PhysicMaterial physicMaterial)
		{
			return null;
		}

		[Token(Token = "0x60008A2")]
		[Address(RVA = "0xAB2224", Offset = "0xAB2224", VA = "0xAB2224")]
		public GroundMaterialManager()
		{
		}
	}
	[Token(Token = "0x20001AB")]
	public class MarkPoint
	{
		[Token(Token = "0x4000B17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 pos;

		[Token(Token = "0x4000B18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 normal;

		[Token(Token = "0x4000B19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector4 tangent;

		[Token(Token = "0x4000B1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector3 posl;

		[Token(Token = "0x4000B1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Vector3 posr;

		[Token(Token = "0x4000B1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float intensity;

		[Token(Token = "0x4000B1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public int lastIndex;

		[Token(Token = "0x60008A3")]
		[Address(RVA = "0xAB2288", Offset = "0xAB2288", VA = "0xAB2288")]
		public MarkPoint()
		{
		}
	}
	[Token(Token = "0x20001AC")]
	public class TireMarksRenderer : MonoBehaviour
	{
		[Token(Token = "0x20001AD")]
		public enum Mode
		{
			[Token(Token = "0x4000B36")]
			PressureAndSkid,
			[Token(Token = "0x4000B37")]
			PressureOnly
		}

		[Token(Token = "0x4000B1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Mode mode;

		[Token(Token = "0x4000B1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Range(0f, 1f)]
		public float pressureBoost;

		[Token(Token = "0x4000B20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Space(5f)]
		public int maxMarks;

		[Token(Token = "0x4000B21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float minDistance;

		[Token(Token = "0x4000B22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float groundOffset;

		[Token(Token = "0x4000B23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float textureOffsetY;

		[Token(Token = "0x4000B24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Range(0f, 1f)]
		public float fadeOutRange;

		[Token(Token = "0x4000B25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Material material;

		[Token(Token = "0x4000B26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int m_markCount;

		[Token(Token = "0x4000B27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private int m_markArraySize;

		[Token(Token = "0x4000B28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private MarkPoint[] m_markPoints;

		[Token(Token = "0x4000B29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private CommonTools.BiasLerpContext m_biasCtx;

		[Token(Token = "0x4000B2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool m_segmentsUpdated;

		[Token(Token = "0x4000B2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private int m_segmentCount;

		[Token(Token = "0x4000B2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int m_segmentArraySize;

		[Token(Token = "0x4000B2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Mesh m_mesh;

		[Token(Token = "0x4000B2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Vector3[] m_vertices;

		[Token(Token = "0x4000B2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3[] m_normals;

		[Token(Token = "0x4000B30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector4[] m_tangents;

		[Token(Token = "0x4000B31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Color[] m_colors;

		[Token(Token = "0x4000B32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector2[] m_uvs;

		[Token(Token = "0x4000B33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private int[] m_triangles;

		[Token(Token = "0x4000B34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Vector2[] m_values;

		[Token(Token = "0x60008A4")]
		[Address(RVA = "0xAB2398", Offset = "0xAB2398", VA = "0xAB2398")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60008A5")]
		[Address(RVA = "0xAB2A84", Offset = "0xAB2A84", VA = "0xAB2A84")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x60008A6")]
		[Address(RVA = "0xAB2B80", Offset = "0xAB2B80", VA = "0xAB2B80")]
		public int AddMark(Vector3 pos, Vector3 normal, float pressureRatio, float skidRatio, float width, int lastIndex)
		{
			return default(int);
		}

		[Token(Token = "0x60008A7")]
		[Address(RVA = "0xAB337C", Offset = "0xAB337C", VA = "0xAB337C")]
		public void Clear()
		{
		}

		[Token(Token = "0x60008A8")]
		[Address(RVA = "0xAB305C", Offset = "0xAB305C", VA = "0xAB305C")]
		private void AddSegment(MarkPoint first, MarkPoint second)
		{
		}

		[Token(Token = "0x60008A9")]
		[Address(RVA = "0xAB346C", Offset = "0xAB346C", VA = "0xAB346C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60008AA")]
		[Address(RVA = "0xAB3604", Offset = "0xAB3604", VA = "0xAB3604")]
		public TireMarksRenderer()
		{
		}
	}
	[Token(Token = "0x20001AE")]
	[RequireComponent(typeof(ParticleSystem))]
	public class TireParticleEmitter : MonoBehaviour
	{
		[Token(Token = "0x20001AF")]
		public enum Mode
		{
			[Token(Token = "0x4000B45")]
			PressureAndSkid,
			[Token(Token = "0x4000B46")]
			PressureAndVelocity
		}

		[Token(Token = "0x4000B38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Mode mode;

		[Token(Token = "0x4000B39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float emissionRate;

		[Token(Token = "0x4000B3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 1f)]
		public float emissionShuffle;

		[Token(Token = "0x4000B3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float maxLifetime;

		[Token(Token = "0x4000B3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float minVelocity;

		[Token(Token = "0x4000B3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float maxVelocity;

		[Token(Token = "0x4000B3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Range(0f, 1f)]
		public float tireVelocityRatio;

		[Token(Token = "0x4000B3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Color Color1;

		[Token(Token = "0x4000B40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Color Color2;

		[Token(Token = "0x4000B41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public bool randomColor;

		[Token(Token = "0x4000B42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private ParticleSystem m_particles;

		[Token(Token = "0x4000B43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private ParticleSystem.EmitParams m_emitParams;

		[Token(Token = "0x60008AB")]
		[Address(RVA = "0xAB36A4", Offset = "0xAB36A4", VA = "0xAB36A4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60008AC")]
		[Address(RVA = "0xAB3710", Offset = "0xAB3710", VA = "0xAB3710")]
		public float EmitParticle(Vector3 position, Vector3 wheelVelocity, Vector3 tireVelocity, float pressureRatio, float intensityRatio, float lastParticleTime)
		{
			return default(float);
		}

		[Token(Token = "0x60008AD")]
		[Address(RVA = "0xAB3E2C", Offset = "0xAB3E2C", VA = "0xAB3E2C")]
		public TireParticleEmitter()
		{
		}
	}
	[Token(Token = "0x20001B0")]
	public static class CommonTools
	{
		[Token(Token = "0x20001B1")]
		public class BiasLerpContext
		{
			[Token(Token = "0x4000B48")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float lastBias;

			[Token(Token = "0x4000B49")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float lastExponent;

			[Token(Token = "0x60008C3")]
			[Address(RVA = "0xAB3694", Offset = "0xAB3694", VA = "0xAB3694")]
			public BiasLerpContext()
			{
			}
		}

		[Token(Token = "0x4000B47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<string, Color> m_colors;

		[Token(Token = "0x60008AE")]
		[Address(RVA = "0xAB3E5C", Offset = "0xAB3E5C", VA = "0xAB3E5C")]
		static CommonTools()
		{
		}

		[Token(Token = "0x60008AF")]
		[Address(RVA = "0xAB41D0", Offset = "0xAB41D0", VA = "0xAB41D0")]
		public static int HexToDecimal(char ch)
		{
			return default(int);
		}

		[Token(Token = "0x60008B0")]
		[Address(RVA = "0xAB41FC", Offset = "0xAB41FC", VA = "0xAB41FC")]
		public static Color ParseColor(string col)
		{
			return default(Color);
		}

		[Token(Token = "0x60008B1")]
		[Address(RVA = "0xAB4574", Offset = "0xAB4574", VA = "0xAB4574")]
		public static float ClampAngle(float angle)
		{
			return default(float);
		}

		[Token(Token = "0x60008B2")]
		[Address(RVA = "0xAB45A8", Offset = "0xAB45A8", VA = "0xAB45A8")]
		public static float ClampAngle360(float angle)
		{
			return default(float);
		}

		[Token(Token = "0x60008B3")]
		[Address(RVA = "0xAB45D8", Offset = "0xAB45D8", VA = "0xAB45D8")]
		public static void DrawCrossMark(Vector3 pos, Transform trans, Color col, float length = 0.1f)
		{
		}

		[Token(Token = "0x60008B4")]
		[Address(RVA = "0xAB4794", Offset = "0xAB4794", VA = "0xAB4794")]
		public static float Lin2Log(float val)
		{
			return default(float);
		}

		[Token(Token = "0x60008B5")]
		[Address(RVA = "0xAB47CC", Offset = "0xAB47CC", VA = "0xAB47CC")]
		public static Vector3 Lin2Log(Vector3 val)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60008B6")]
		public static T CloneObject<T>(T source)
		{
			return (T)null;
		}

		[Token(Token = "0x60008B7")]
		[Address(RVA = "0xAB490C", Offset = "0xAB490C", VA = "0xAB490C")]
		public static float FastLerp(float from, float to, float t)
		{
			return default(float);
		}

		[Token(Token = "0x60008B8")]
		[Address(RVA = "0xAB491C", Offset = "0xAB491C", VA = "0xAB491C")]
		public static float LinearLerp(float x0, float y0, float x1, float y1, float x)
		{
			return default(float);
		}

		[Token(Token = "0x60008B9")]
		[Address(RVA = "0xAB4938", Offset = "0xAB4938", VA = "0xAB4938")]
		public static float LinearLerp(Vector2 from, Vector2 to, float t)
		{
			return default(float);
		}

		[Token(Token = "0x60008BA")]
		[Address(RVA = "0xAB49C8", Offset = "0xAB49C8", VA = "0xAB49C8")]
		public static float CubicLerp(float x0, float y0, float x1, float y1, float x)
		{
			return default(float);
		}

		[Token(Token = "0x60008BB")]
		[Address(RVA = "0xAB4A08", Offset = "0xAB4A08", VA = "0xAB4A08")]
		public static float CubicLerp(Vector2 from, Vector2 to, float t)
		{
			return default(float);
		}

		[Token(Token = "0x60008BC")]
		[Address(RVA = "0xAB4ABC", Offset = "0xAB4ABC", VA = "0xAB4ABC")]
		public static float TangentLerp(float x0, float y0, float x1, float y1, float a, float b, float x)
		{
			return default(float);
		}

		[Token(Token = "0x60008BD")]
		[Address(RVA = "0xAB4B2C", Offset = "0xAB4B2C", VA = "0xAB4B2C")]
		public static float TangentLerp(Vector2 from, Vector2 to, float a, float b, float t)
		{
			return default(float);
		}

		[Token(Token = "0x60008BE")]
		[Address(RVA = "0xAB4C20", Offset = "0xAB4C20", VA = "0xAB4C20")]
		public static float HermiteLerp(float x0, float y0, float x1, float y1, float outTangent, float inTangent, float x)
		{
			return default(float);
		}

		[Token(Token = "0x60008BF")]
		[Address(RVA = "0xAB4C80", Offset = "0xAB4C80", VA = "0xAB4C80")]
		private static float BiasWithContext(float x, float bias, BiasLerpContext context)
		{
			return default(float);
		}

		[Token(Token = "0x60008C0")]
		[Address(RVA = "0xAB4D34", Offset = "0xAB4D34", VA = "0xAB4D34")]
		private static float BiasRaw(float x, float bias)
		{
			return default(float);
		}

		[Token(Token = "0x60008C1")]
		[Address(RVA = "0xAB4DC0", Offset = "0xAB4DC0", VA = "0xAB4DC0")]
		public static float BiasedLerp(float x, float bias)
		{
			return default(float);
		}

		[Token(Token = "0x60008C2")]
		[Address(RVA = "0xAB2FB0", Offset = "0xAB2FB0", VA = "0xAB2FB0")]
		public static float BiasedLerp(float x, float bias, BiasLerpContext context)
		{
			return default(float);
		}
	}
	[Token(Token = "0x20001B2")]
	public class SceneTools : MonoBehaviour
	{
		[Token(Token = "0x4000B4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool slowTimeMode;

		[Token(Token = "0x4000B4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float slowTime;

		[Token(Token = "0x4000B4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public KeyCode hotkeyReset;

		[Token(Token = "0x4000B4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public KeyCode hotkeyTime;

		[Token(Token = "0x60008C4")]
		[Address(RVA = "0xAB4F30", Offset = "0xAB4F30", VA = "0xAB4F30")]
		private void Start()
		{
		}

		[Token(Token = "0x60008C5")]
		[Address(RVA = "0xAB4F34", Offset = "0xAB4F34", VA = "0xAB4F34")]
		private void Update()
		{
		}

		[Token(Token = "0x60008C6")]
		[Address(RVA = "0xAB4FD4", Offset = "0xAB4FD4", VA = "0xAB4FD4")]
		public SceneTools()
		{
		}
	}
	[Token(Token = "0x20001B3")]
	public class TextureCanvas
	{
		[Token(Token = "0x20001B4")]
		public enum LineType
		{
			[Token(Token = "0x4000B69")]
			Solid,
			[Token(Token = "0x4000B6A")]
			Dotted,
			[Token(Token = "0x4000B6B")]
			Dashed
		}

		[Token(Token = "0x4000B4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Texture2D m_texture;

		[Token(Token = "0x4000B4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int m_pixelsWd;

		[Token(Token = "0x4000B50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private int m_pixelsHt;

		[Token(Token = "0x4000B51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool m_dirty;

		[Token(Token = "0x4000B52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Color32[] m_pixels;

		[Token(Token = "0x4000B53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Color32[] m_buffer;

		[Token(Token = "0x4000B54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Rect m_canvasRect;

		[Token(Token = "0x4000B55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float m_scaleX;

		[Token(Token = "0x4000B56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float m_scaleY;

		[Token(Token = "0x4000B57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Rect m_clipArea;

		[Token(Token = "0x4000B58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int m_pixelsXMin;

		[Token(Token = "0x4000B59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private int m_pixelsXMax;

		[Token(Token = "0x4000B5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int m_pixelsYMin;

		[Token(Token = "0x4000B5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private int m_pixelsYMax;

		[Token(Token = "0x4000B5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Color32 m_color;

		[Token(Token = "0x4000B5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float m_alpha;

		[Token(Token = "0x4000B5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float m_srcAlpha;

		[Token(Token = "0x4000B5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float m_dstAlpha;

		[Token(Token = "0x4000B64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float m_moveX;

		[Token(Token = "0x4000B65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private float m_moveY;

		[Token(Token = "0x4000B66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private int m_step;

		[Token(Token = "0x1700008C")]
		public Rect rect
		{
			[Token(Token = "0x60008CB")]
			[Address(RVA = "0xAB572C", Offset = "0xAB572C", VA = "0xAB572C")]
			get
			{
				return default(Rect);
			}
			[Token(Token = "0x60008CC")]
			[Address(RVA = "0xAB52A8", Offset = "0xAB52A8", VA = "0xAB52A8")]
			set
			{
			}
		}

		[Token(Token = "0x1700008D")]
		public Rect clipArea
		{
			[Token(Token = "0x60008CD")]
			[Address(RVA = "0xAB5890", Offset = "0xAB5890", VA = "0xAB5890")]
			get
			{
				return default(Rect);
			}
			[Token(Token = "0x60008CE")]
			[Address(RVA = "0xAB5738", Offset = "0xAB5738", VA = "0xAB5738")]
			set
			{
			}
		}

		[Token(Token = "0x1700008E")]
		public Color32 color
		{
			[Token(Token = "0x60008D5")]
			[Address(RVA = "0xAB5C74", Offset = "0xAB5C74", VA = "0xAB5C74")]
			get
			{
				return default(Color32);
			}
			[Token(Token = "0x60008D6")]
			[Address(RVA = "0xAB5C7C", Offset = "0xAB5C7C", VA = "0xAB5C7C")]
			set
			{
			}
		}

		[Token(Token = "0x1700008F")]
		public float alpha
		{
			[Token(Token = "0x60008D7")]
			[Address(RVA = "0xAB5CE8", Offset = "0xAB5CE8", VA = "0xAB5CE8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60008D8")]
			[Address(RVA = "0xAB5CF0", Offset = "0xAB5CF0", VA = "0xAB5CF0")]
			set
			{
			}
		}

		[Token(Token = "0x17000090")]
		public bool alphaBlend
		{
			[Token(Token = "0x60008D9")]
			[Address(RVA = "0xAB5CF8", Offset = "0xAB5CF8", VA = "0xAB5CF8")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60008DA")]
			[Address(RVA = "0xAB5D00", Offset = "0xAB5D00", VA = "0xAB5D00")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000091")]
		public LineType lineType
		{
			[Token(Token = "0x60008DB")]
			[Address(RVA = "0xAB5D0C", Offset = "0xAB5D0C", VA = "0xAB5D0C")]
			[CompilerGenerated]
			get
			{
				return default(LineType);
			}
			[Token(Token = "0x60008DC")]
			[Address(RVA = "0xAB5D14", Offset = "0xAB5D14", VA = "0xAB5D14")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000092")]
		public int dotInterval
		{
			[Token(Token = "0x60008DD")]
			[Address(RVA = "0xAB5D1C", Offset = "0xAB5D1C", VA = "0xAB5D1C")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60008DE")]
			[Address(RVA = "0xAB5D24", Offset = "0xAB5D24", VA = "0xAB5D24")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000093")]
		public int dashInterval
		{
			[Token(Token = "0x60008DF")]
			[Address(RVA = "0xAB5D2C", Offset = "0xAB5D2C", VA = "0xAB5D2C")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60008E0")]
			[Address(RVA = "0xAB5D34", Offset = "0xAB5D34", VA = "0xAB5D34")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000094")]
		public int functionResolution
		{
			[Token(Token = "0x60008EF")]
			[Address(RVA = "0xAB722C", Offset = "0xAB722C", VA = "0xAB722C")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60008F0")]
			[Address(RVA = "0xAB7234", Offset = "0xAB7234", VA = "0xAB7234")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000095")]
		public Texture2D texture
		{
			[Token(Token = "0x60008FA")]
			[Address(RVA = "0xAB77BC", Offset = "0xAB77BC", VA = "0xAB77BC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60008C7")]
		[Address(RVA = "0xAB4FF4", Offset = "0xAB4FF4", VA = "0xAB4FF4")]
		public TextureCanvas(int pixelsWd, int pixelsHt, Rect canvasRect)
		{
		}

		[Token(Token = "0x60008C8")]
		[Address(RVA = "0xAB5320", Offset = "0xAB5320", VA = "0xAB5320")]
		public TextureCanvas(int pixelsWd, int pixelsHt, float canvasWd, float canvasHt)
		{
		}

		[Token(Token = "0x60008C9")]
		[Address(RVA = "0xAB5500", Offset = "0xAB5500", VA = "0xAB5500")]
		public TextureCanvas(int pixelsWd, int pixelsHt)
		{
		}

		[Token(Token = "0x60008CA")]
		[Address(RVA = "0xAB56D0", Offset = "0xAB56D0", VA = "0xAB56D0")]
		public void DestroyTexture()
		{
		}

		[Token(Token = "0x60008CF")]
		[Address(RVA = "0xAB5A8C", Offset = "0xAB5A8C", VA = "0xAB5A8C")]
		public float Pixels2CanvasX(int pixels)
		{
			return default(float);
		}

		[Token(Token = "0x60008D0")]
		[Address(RVA = "0xAB5A9C", Offset = "0xAB5A9C", VA = "0xAB5A9C")]
		public float Pixels2CanvasY(int pixels)
		{
			return default(float);
		}

		[Token(Token = "0x60008D1")]
		[Address(RVA = "0xAB589C", Offset = "0xAB589C", VA = "0xAB589C")]
		private int GetPixelX(float x)
		{
			return default(int);
		}

		[Token(Token = "0x60008D2")]
		[Address(RVA = "0xAB5994", Offset = "0xAB5994", VA = "0xAB5994")]
		private int GetPixelY(float y)
		{
			return default(int);
		}

		[Token(Token = "0x60008D3")]
		[Address(RVA = "0xAB5AAC", Offset = "0xAB5AAC", VA = "0xAB5AAC")]
		private int GetPixelWidth(float width)
		{
			return default(int);
		}

		[Token(Token = "0x60008D4")]
		[Address(RVA = "0xAB5B90", Offset = "0xAB5B90", VA = "0xAB5B90")]
		private int GetPixelHeight(float height)
		{
			return default(int);
		}

		[Token(Token = "0x60008E1")]
		[Address(RVA = "0xAB5D3C", Offset = "0xAB5D3C", VA = "0xAB5D3C")]
		public void MoveTo(float x0, float y0)
		{
		}

		[Token(Token = "0x60008E2")]
		[Address(RVA = "0xAB5D48", Offset = "0xAB5D48", VA = "0xAB5D48")]
		public void LineTo(float x1, float y1)
		{
		}

		[Token(Token = "0x60008E3")]
		[Address(RVA = "0xAB617C", Offset = "0xAB617C", VA = "0xAB617C")]
		public void Line(float x0, float y0, float x1, float y1)
		{
		}

		[Token(Token = "0x60008E4")]
		[Address(RVA = "0xAB6190", Offset = "0xAB6190", VA = "0xAB6190")]
		public void HorizontalLine(float y)
		{
		}

		[Token(Token = "0x60008E5")]
		[Address(RVA = "0xAB6360", Offset = "0xAB6360", VA = "0xAB6360")]
		public void VerticalLine(float x)
		{
		}

		[Token(Token = "0x60008E6")]
		[Address(RVA = "0xAB6530", Offset = "0xAB6530", VA = "0xAB6530")]
		public void Circumference(float x, float y, float radius)
		{
		}

		[Token(Token = "0x60008E7")]
		[Address(RVA = "0xAB68F4", Offset = "0xAB68F4", VA = "0xAB68F4")]
		public void Circle(float x, float y, float radius)
		{
		}

		[Token(Token = "0x60008E8")]
		[Address(RVA = "0xAB6D20", Offset = "0xAB6D20", VA = "0xAB6D20")]
		public void Ellipse(float x, float y, float rx, float ry)
		{
		}

		[Token(Token = "0x60008E9")]
		[Address(RVA = "0xAB6DB4", Offset = "0xAB6DB4", VA = "0xAB6DB4")]
		public void FillEllipse(float x, float y, float rx, float ry)
		{
		}

		[Token(Token = "0x60008EA")]
		[Address(RVA = "0xAB6E48", Offset = "0xAB6E48", VA = "0xAB6E48")]
		public void Clear()
		{
		}

		[Token(Token = "0x60008EB")]
		[Address(RVA = "0xAB6EB0", Offset = "0xAB6EB0", VA = "0xAB6EB0")]
		public void Grid(float stepX, float stepY)
		{
		}

		[Token(Token = "0x60008EC")]
		[Address(RVA = "0xAB6FA4", Offset = "0xAB6FA4", VA = "0xAB6FA4")]
		public void Dot(float x, float y)
		{
		}

		[Token(Token = "0x60008ED")]
		[Address(RVA = "0xAB70D0", Offset = "0xAB70D0", VA = "0xAB70D0")]
		public void Cross(float x, float y, int radiusX, int radiusY)
		{
		}

		[Token(Token = "0x60008EE")]
		[Address(RVA = "0xAB7180", Offset = "0xAB7180", VA = "0xAB7180")]
		public void FillRect(float x, float y, float width, float height)
		{
		}

		[Token(Token = "0x60008F1")]
		[Address(RVA = "0xAB723C", Offset = "0xAB723C", VA = "0xAB723C")]
		public void Function(Func<float, float> func, float x0, float x1)
		{
		}

		[Token(Token = "0x60008F2")]
		[Address(RVA = "0xAB7314", Offset = "0xAB7314", VA = "0xAB7314")]
		public void Function(Func<float, float> func)
		{
		}

		[Token(Token = "0x60008F3")]
		[Address(RVA = "0xAB7368", Offset = "0xAB7368", VA = "0xAB7368")]
		public void SolidFunction(Func<float, float> func, float x0, float x1)
		{
		}

		[Token(Token = "0x60008F4")]
		[Address(RVA = "0xAB7430", Offset = "0xAB7430", VA = "0xAB7430")]
		public void SolidFunction(Func<float, float> func)
		{
		}

		[Token(Token = "0x60008F5")]
		[Address(RVA = "0xAB7484", Offset = "0xAB7484", VA = "0xAB7484")]
		public void Save()
		{
		}

		[Token(Token = "0x60008F6")]
		[Address(RVA = "0xAB751C", Offset = "0xAB751C", VA = "0xAB751C")]
		public void Restore()
		{
		}

		[Token(Token = "0x60008F7")]
		[Address(RVA = "0xAB754C", Offset = "0xAB754C", VA = "0xAB754C")]
		public void GUIDraw(int x, int y)
		{
		}

		[Token(Token = "0x60008F8")]
		[Address(RVA = "0xAB7640", Offset = "0xAB7640", VA = "0xAB7640")]
		public void GUIStretchDraw(int x, int y, int width, int height)
		{
		}

		[Token(Token = "0x60008F9")]
		[Address(RVA = "0xAB76F8", Offset = "0xAB76F8", VA = "0xAB76F8")]
		public void GUIStretchDraw(int x, int y, int width)
		{
		}

		[Token(Token = "0x60008FB")]
		[Address(RVA = "0xAB75F8", Offset = "0xAB75F8", VA = "0xAB75F8")]
		private void ApplyChanges()
		{
		}

		[Token(Token = "0x60008FC")]
		[Address(RVA = "0xAB51B8", Offset = "0xAB51B8", VA = "0xAB51B8")]
		private void SetupCanvas(int pixelsWd, int pixelsHt)
		{
		}

		[Token(Token = "0x60008FD")]
		[Address(RVA = "0xAB5C84", Offset = "0xAB5C84", VA = "0xAB5C84")]
		private void SetupAlpha()
		{
		}

		[Token(Token = "0x60008FE")]
		[Address(RVA = "0xAB77D4", Offset = "0xAB77D4", VA = "0xAB77D4")]
		private Color32 GetAlphaBlendedPixel(Color32 dst)
		{
			return default(Color32);
		}

		[Token(Token = "0x60008FF")]
		[Address(RVA = "0xAB7898", Offset = "0xAB7898", VA = "0xAB7898")]
		private bool CheckForPixel()
		{
			return default(bool);
		}

		[Token(Token = "0x6000900")]
		[Address(RVA = "0xAB7038", Offset = "0xAB7038", VA = "0xAB7038")]
		private void TexPixel(int x, int y)
		{
		}

		[Token(Token = "0x6000901")]
		[Address(RVA = "0xAB5FF8", Offset = "0xAB5FF8", VA = "0xAB5FF8")]
		private void TexLine(int x0, int y0, int x1, int y1)
		{
		}

		[Token(Token = "0x6000902")]
		[Address(RVA = "0xAB6390", Offset = "0xAB6390", VA = "0xAB6390")]
		private void TexSegmentV(int x, int y0, int y1)
		{
		}

		[Token(Token = "0x6000903")]
		[Address(RVA = "0xAB61D0", Offset = "0xAB61D0", VA = "0xAB61D0")]
		private void TexSegmentH(int x0, int x1, int y)
		{
		}

		[Token(Token = "0x6000904")]
		[Address(RVA = "0xAB65A4", Offset = "0xAB65A4", VA = "0xAB65A4")]
		private void TexEllipse(int cx, int cy, int rx, int ry)
		{
		}

		[Token(Token = "0x6000905")]
		[Address(RVA = "0xAB6968", Offset = "0xAB6968", VA = "0xAB6968")]
		private void TexFillEllipse(int cx, int cy, int rx, int ry)
		{
		}
	}
	[Token(Token = "0x20001B5")]
	public class WheelAudioData
	{
		[Token(Token = "0x4000B6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float lastDownforce;

		[Token(Token = "0x4000B6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float lastWheelBumpTime;

		[Token(Token = "0x6000906")]
		[Address(RVA = "0xAB7900", Offset = "0xAB7900", VA = "0xAB7900")]
		public WheelAudioData()
		{
		}
	}
	[Token(Token = "0x20001B6")]
	[RequireComponent(typeof(VehicleController))]
	public class VehicleAudio : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20001B7")]
		public class Engine
		{
			[Token(Token = "0x4000B8A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public AudioSource audioSource;

			[Token(Token = "0x4000B8B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Space(5f)]
			public float idleRpm;

			[Token(Token = "0x4000B8C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public float idlePitch;

			[Token(Token = "0x4000B8D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float idleVolume;

			[Token(Token = "0x4000B8E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[Space(5f)]
			public float maxRpm;

			[Token(Token = "0x4000B8F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float maxPitch;

			[Token(Token = "0x4000B90")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float maxVolume;

			[Token(Token = "0x4000B91")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[Space(5f)]
			public float throttleRpmBoost;

			[Token(Token = "0x4000B92")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public float throttleVolumeBoost;

			[Token(Token = "0x4000B93")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[Space(5f)]
			public float wheelsToEngineRatio;

			[Token(Token = "0x4000B94")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public int gears;

			[Token(Token = "0x4000B95")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public float gearDownRpm;

			[Token(Token = "0x4000B96")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			public float gearUpRpm;

			[Token(Token = "0x4000B97")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[Space(5f)]
			public float gearUpRpmRate;

			[Token(Token = "0x4000B98")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			public float gearDownRpmRate;

			[Token(Token = "0x4000B99")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public float volumeChangeRateUp;

			[Token(Token = "0x4000B9A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public float volumeChangeRateDown;

			[Token(Token = "0x6000921")]
			[Address(RVA = "0xAB9B84", Offset = "0xAB9B84", VA = "0xAB9B84")]
			public Engine()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001B8")]
		public class EngineExtras
		{
			[Token(Token = "0x4000B9B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public AudioSource turboAudioSource;

			[Token(Token = "0x4000B9C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float turboMinRpm;

			[Token(Token = "0x4000B9D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public float turboMaxRpm;

			[Token(Token = "0x4000B9E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Range(0f, 3f)]
			public float turboMinPitch;

			[Token(Token = "0x4000B9F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[Range(0f, 3f)]
			public float turboMaxPitch;

			[Token(Token = "0x4000BA0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Range(0f, 1f)]
			public float turboMaxVolume;

			[Token(Token = "0x4000BA1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public bool turboRequiresThrottle;

			[Token(Token = "0x4000BA2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[Space(5f)]
			public AudioClip turboDumpClip;

			[Token(Token = "0x4000BA3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public float turboDumpMinRpm;

			[Token(Token = "0x4000BA4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public float turboDumpMinInterval;

			[Token(Token = "0x4000BA5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public float turboDumpMinThrottleTime;

			[Token(Token = "0x4000BA6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			public float turboDumpVolume;

			[Token(Token = "0x4000BA7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[Space(5f)]
			public AudioSource transmissionAudioSource;

			[Token(Token = "0x4000BA8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[Range(0.1f, 1f)]
			public float transmissionMaxRatio;

			[Token(Token = "0x4000BA9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			[Range(0f, 3f)]
			public float transmissionMinPitch;

			[Token(Token = "0x4000BAA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[Range(0f, 3f)]
			public float transmissionMaxPitch;

			[Token(Token = "0x4000BAB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			[Range(0f, 1f)]
			public float transmissionMinVolume;

			[Token(Token = "0x4000BAC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[Range(0f, 1f)]
			public float transmissionMaxVolume;

			[Token(Token = "0x6000922")]
			[Address(RVA = "0xAB9BC8", Offset = "0xAB9BC8", VA = "0xAB9BC8")]
			public EngineExtras()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001B9")]
		public class Wheels
		{
			[Token(Token = "0x4000BAD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public AudioSource skidAudioSource;

			[Token(Token = "0x4000BAE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float skidMinSlip;

			[Token(Token = "0x4000BAF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public float skidMaxSlip;

			[Token(Token = "0x4000BB0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Range(0f, 3f)]
			public float skidMinPitch;

			[Token(Token = "0x4000BB1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[Range(0f, 3f)]
			public float skidMaxPitch;

			[Token(Token = "0x4000BB2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Range(0f, 1f)]
			public float skidMaxVolume;

			[Token(Token = "0x4000BB3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[Space(5f)]
			public AudioSource offroadAudioSource;

			[Token(Token = "0x4000BB4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public float offroadMinSpeed;

			[Token(Token = "0x4000BB5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public float offroadMaxSpeed;

			[Token(Token = "0x4000BB6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			[Range(0f, 3f)]
			public float offroadMinPitch;

			[Token(Token = "0x4000BB7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			[Range(0f, 3f)]
			public float offroadMaxPitch;

			[Token(Token = "0x4000BB8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[Range(0f, 1f)]
			public float offroadMinVolume;

			[Token(Token = "0x4000BB9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			[Range(0f, 1f)]
			public float offroadMaxVolume;

			[Token(Token = "0x4000BBA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[Space(5f)]
			public AudioClip bumpAudioClip;

			[Token(Token = "0x4000BBB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public float bumpMinForceDelta;

			[Token(Token = "0x4000BBC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public float bumpMaxForceDelta;

			[Token(Token = "0x4000BBD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[Range(0f, 1f)]
			public float bumpMinVolume;

			[Token(Token = "0x4000BBE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			[Range(0f, 1f)]
			public float bumpMaxVolume;

			[Token(Token = "0x6000923")]
			[Address(RVA = "0xAB9C10", Offset = "0xAB9C10", VA = "0xAB9C10")]
			public Wheels()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001BA")]
		public class Impacts
		{
			[Token(Token = "0x4000BBF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Space(5f)]
			public AudioClip hardImpactAudioClip;

			[Token(Token = "0x4000BC0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public AudioClip softImpactAudioClip;

			[Token(Token = "0x4000BC1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float minSpeed;

			[Token(Token = "0x4000BC2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public float maxSpeed;

			[Token(Token = "0x4000BC3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Range(0f, 3f)]
			public float minPitch;

			[Token(Token = "0x4000BC4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[Range(0f, 3f)]
			public float maxPitch;

			[Token(Token = "0x4000BC5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[Range(0f, 3f)]
			public float randomPitch;

			[Token(Token = "0x4000BC6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			[Range(0f, 1f)]
			public float minVolume;

			[Token(Token = "0x4000BC7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[Range(0f, 1f)]
			public float maxVolume;

			[Token(Token = "0x4000BC8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			[Range(0f, 1f)]
			public float randomVolume;

			[Token(Token = "0x6000924")]
			[Address(RVA = "0xAB9C58", Offset = "0xAB9C58", VA = "0xAB9C58")]
			public Impacts()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001BB")]
		public class Drags
		{
			[Token(Token = "0x4000BC9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public AudioSource hardDragAudioSource;

			[Token(Token = "0x4000BCA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public AudioSource softDragAudioSource;

			[Token(Token = "0x4000BCB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float minSpeed;

			[Token(Token = "0x4000BCC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public float maxSpeed;

			[Token(Token = "0x4000BCD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Range(0f, 3f)]
			public float minPitch;

			[Token(Token = "0x4000BCE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[Range(0f, 3f)]
			public float maxPitch;

			[Token(Token = "0x4000BCF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[Range(0f, 1f)]
			public float minVolume;

			[Token(Token = "0x4000BD0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			[Range(0f, 1f)]
			public float maxVolume;

			[Token(Token = "0x4000BD1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[Space(5f)]
			public AudioClip scratchAudioClip;

			[Token(Token = "0x4000BD2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public float scratchRandomThreshold;

			[Token(Token = "0x4000BD3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			public float scratchMinSpeed;

			[Token(Token = "0x4000BD4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public float scratchMinInterval;

			[Token(Token = "0x4000BD5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			[Range(0f, 3f)]
			public float scratchMinPitch;

			[Token(Token = "0x4000BD6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[Range(0f, 3f)]
			public float scratchMaxPitch;

			[Token(Token = "0x4000BD7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			[Range(0f, 1f)]
			public float scratchMinVolume;

			[Token(Token = "0x4000BD8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[Range(0f, 1f)]
			public float scratchMaxVolume;

			[Token(Token = "0x6000925")]
			[Address(RVA = "0xAB9C74", Offset = "0xAB9C74", VA = "0xAB9C74")]
			public Drags()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001BC")]
		public class Wind
		{
			[Token(Token = "0x4000BD9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public AudioSource windAudioSource;

			[Token(Token = "0x4000BDA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float minSpeed;

			[Token(Token = "0x4000BDB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public float maxSpeed;

			[Token(Token = "0x4000BDC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Range(0f, 3f)]
			public float minPitch;

			[Token(Token = "0x4000BDD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[Range(0f, 3f)]
			public float maxPitch;

			[Token(Token = "0x4000BDE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Range(0f, 1f)]
			public float maxVolume;

			[Token(Token = "0x6000926")]
			[Address(RVA = "0xAB9CC0", Offset = "0xAB9CC0", VA = "0xAB9CC0")]
			public Wind()
			{
			}
		}

		[Token(Token = "0x4000B6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("AudioSource to be used with the one-time audio effects (impacts, etc)")]
		public AudioSource audioClipTemplate;

		[Token(Token = "0x4000B6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Space(2f)]
		public Engine engine;

		[Token(Token = "0x4000B70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Space(2f)]
		public EngineExtras engineExtras;

		[Token(Token = "0x4000B71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Space(2f)]
		public Wheels wheels;

		[Token(Token = "0x4000B72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Space(2f)]
		public Impacts impacts;

		[Token(Token = "0x4000B73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Space(2f)]
		public Drags drags;

		[Token(Token = "0x4000B74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Space(2f)]
		public Wind wind;

		[NonSerialized]
		[Token(Token = "0x4000B75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float skidRatioChangeRate;

		[NonSerialized]
		[Token(Token = "0x4000B76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float offroadSpeedChangeRate;

		[NonSerialized]
		[Token(Token = "0x4000B77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float offroadCutoutSpeed;

		[NonSerialized]
		[Token(Token = "0x4000B78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float dragCutoutSpeed;

		[NonSerialized]
		[Token(Token = "0x4000B79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float turboRatioChangeRate;

		[NonSerialized]
		[Token(Token = "0x4000B7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float wheelsRpmChangeRateLimit;

		[Token(Token = "0x4000B7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private VehicleController m_vehicle;

		[Token(Token = "0x4000B7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float m_engineRpm;

		[Token(Token = "0x4000B7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float m_engineThrottleRpm;

		[Token(Token = "0x4000B7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float m_engineRpmDamp;

		[Token(Token = "0x4000B7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float m_wheelsRpm;

		[Token(Token = "0x4000B80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int m_gear;

		[Token(Token = "0x4000B81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private int m_lastGear;

		[Token(Token = "0x4000B82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float m_skidRatio;

		[Token(Token = "0x4000B83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float m_offroadSpeed;

		[Token(Token = "0x4000B84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float m_lastScratchTime;

		[Token(Token = "0x4000B85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private float m_turboRatio;

		[Token(Token = "0x4000B86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float m_lastTurboDumpTime;

		[Token(Token = "0x4000B87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private float m_lastThrottleInput;

		[Token(Token = "0x4000B88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private float m_lastThrottlePressedTime;

		[Token(Token = "0x4000B89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private WheelAudioData[] m_audioData;

		[Token(Token = "0x17000096")]
		public int simulatedGear
		{
			[Token(Token = "0x6000907")]
			[Address(RVA = "0xAB7908", Offset = "0xAB7908", VA = "0xAB7908")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000097")]
		public float simulatedEngineRpm
		{
			[Token(Token = "0x6000908")]
			[Address(RVA = "0xAB7910", Offset = "0xAB7910", VA = "0xAB7910")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000909")]
		[Address(RVA = "0xAB7918", Offset = "0xAB7918", VA = "0xAB7918")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600090A")]
		[Address(RVA = "0xAB7A70", Offset = "0xAB7A70", VA = "0xAB7A70")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600090B")]
		[Address(RVA = "0xAB7B04", Offset = "0xAB7B04", VA = "0xAB7B04")]
		private void Update()
		{
		}

		[Token(Token = "0x600090C")]
		[Address(RVA = "0xAB8830", Offset = "0xAB8830", VA = "0xAB8830")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x600090D")]
		[Address(RVA = "0xAB8890", Offset = "0xAB8890", VA = "0xAB8890")]
		private void InitializeAudioData()
		{
		}

		[Token(Token = "0x600090E")]
		[Address(RVA = "0xAB7B74", Offset = "0xAB7B74", VA = "0xAB7B74")]
		private void DoEngineAudio()
		{
		}

		[Token(Token = "0x600090F")]
		[Address(RVA = "0xAB7F84", Offset = "0xAB7F84", VA = "0xAB7F84")]
		private void DoEngineExtraAudio()
		{
		}

		[Token(Token = "0x6000910")]
		[Address(RVA = "0xAB85F4", Offset = "0xAB85F4", VA = "0xAB85F4")]
		private void DoTireAudio()
		{
		}

		[Token(Token = "0x6000911")]
		[Address(RVA = "0xAB90DC", Offset = "0xAB90DC", VA = "0xAB90DC")]
		private void DoImpactAudio()
		{
		}

		[Token(Token = "0x6000912")]
		[Address(RVA = "0xAB828C", Offset = "0xAB828C", VA = "0xAB828C")]
		private void DoBodyDragAudio()
		{
		}

		[Token(Token = "0x6000913")]
		[Address(RVA = "0xAB89AC", Offset = "0xAB89AC", VA = "0xAB89AC")]
		private void DoWheelBumpAudio()
		{
		}

		[Token(Token = "0x6000914")]
		[Address(RVA = "0xAB8500", Offset = "0xAB8500", VA = "0xAB8500")]
		private void DoWindAudio()
		{
		}

		[Token(Token = "0x6000915")]
		[Address(RVA = "0xAB7A74", Offset = "0xAB7A74", VA = "0xAB7A74")]
		private void StopAllAudioSources()
		{
		}

		[Token(Token = "0x6000916")]
		[Address(RVA = "0xAB9798", Offset = "0xAB9798", VA = "0xAB9798")]
		private void StopAudio(AudioSource audio)
		{
		}

		[Token(Token = "0x6000917")]
		[Address(RVA = "0xAB8D88", Offset = "0xAB8D88", VA = "0xAB8D88")]
		private void ProcessContinuousAudio(AudioSource audio, float ratio, float minPitch, float maxPitch, float minVolume, float maxVolume)
		{
		}

		[Token(Token = "0x6000918")]
		[Address(RVA = "0xAB8B30", Offset = "0xAB8B30", VA = "0xAB8B30")]
		private void ProcessContinuousAudioPitch(AudioSource audio, float ratio, float minPitch, float maxPitch)
		{
		}

		[Token(Token = "0x6000919")]
		[Address(RVA = "0xAB8C30", Offset = "0xAB8C30", VA = "0xAB8C30")]
		private void ProcessVolume(AudioSource audio, float volume, float changeRateUp, float changeRateDown)
		{
		}

		[Token(Token = "0x600091A")]
		[Address(RVA = "0xAB8EBC", Offset = "0xAB8EBC", VA = "0xAB8EBC")]
		private void ProcessSpeedBasedAudio(AudioSource audio, float speed, float cutoutSpeed, float minSpeed, float maxSpeed, float cutoutPitch, float minPitch, float maxPitch, float minVolume, float maxVolume)
		{
		}

		[Token(Token = "0x600091B")]
		[Address(RVA = "0xAB9720", Offset = "0xAB9720", VA = "0xAB9720")]
		private void ProcessWheelBumpAudio(float suspensionForceDelta, Vector3 position)
		{
		}

		[Token(Token = "0x600091C")]
		[Address(RVA = "0xAB8EB4", Offset = "0xAB8EB4", VA = "0xAB8EB4")]
		private void PlayOneTime(AudioClip clip, Vector3 position, float volume)
		{
		}

		[Token(Token = "0x600091D")]
		[Address(RVA = "0xAB9380", Offset = "0xAB9380", VA = "0xAB9380")]
		private void PlayOneTime(AudioClip clip, Vector3 position, float volume, float pitch)
		{
		}

		[Token(Token = "0x600091E")]
		[Address(RVA = "0xAB7A6C", Offset = "0xAB7A6C", VA = "0xAB7A6C")]
		private void VerifyAudioSources()
		{
		}

		[Token(Token = "0x600091F")]
		[Address(RVA = "0xAB9818", Offset = "0xAB9818", VA = "0xAB9818")]
		private void VerifyAudioSource(ref AudioSource audioSource)
		{
		}

		[Token(Token = "0x6000920")]
		[Address(RVA = "0xAB99A0", Offset = "0xAB99A0", VA = "0xAB99A0")]
		public VehicleAudio()
		{
		}
	}
	[Token(Token = "0x20001BD")]
	public class CameraMode
	{
		[Token(Token = "0x4000BDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public KeyCode hotKey;

		[Token(Token = "0x4000BE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VehicleCameraController controller;

		[Token(Token = "0x6000927")]
		[Address(RVA = "0xAB9CDC", Offset = "0xAB9CDC", VA = "0xAB9CDC", Slot = "4")]
		public virtual void SetViewConfig(VehicleViewConfig viewConfig)
		{
		}

		[Token(Token = "0x6000928")]
		[Address(RVA = "0xAB9CE0", Offset = "0xAB9CE0", VA = "0xAB9CE0", Slot = "5")]
		public virtual void Initialize(Transform self)
		{
		}

		[Token(Token = "0x6000929")]
		[Address(RVA = "0xAB9CE4", Offset = "0xAB9CE4", VA = "0xAB9CE4", Slot = "6")]
		public virtual void OnEnable(Transform self, Transform target, Vector3 targetOffset)
		{
		}

		[Token(Token = "0x600092A")]
		[Address(RVA = "0xAB9CE8", Offset = "0xAB9CE8", VA = "0xAB9CE8", Slot = "7")]
		public virtual void Reset(Transform self, Transform target, Vector3 targetOffset)
		{
		}

		[Token(Token = "0x600092B")]
		[Address(RVA = "0xAB9CEC", Offset = "0xAB9CEC", VA = "0xAB9CEC", Slot = "8")]
		public virtual void Update(Transform self, Transform target, Vector3 targetOffset, float deltaTime)
		{
		}

		[Token(Token = "0x600092C")]
		[Address(RVA = "0xAB9CF0", Offset = "0xAB9CF0", VA = "0xAB9CF0", Slot = "9")]
		public virtual void OnDisable(Transform self, Transform target, Vector3 targetOffset)
		{
		}

		[Token(Token = "0x600092D")]
		[Address(RVA = "0xAB9CF4", Offset = "0xAB9CF4", VA = "0xAB9CF4")]
		public static float GetInputForAxis(string axisName)
		{
			return default(float);
		}

		[Token(Token = "0x600092E")]
		[Address(RVA = "0xAB9D24", Offset = "0xAB9D24", VA = "0xAB9D24")]
		public CameraMode()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001BE")]
	public class CameraAttachTo : CameraMode
	{
		[Token(Token = "0x4000BE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform attachTarget;

		[Token(Token = "0x600092F")]
		[Address(RVA = "0xAB9D2C", Offset = "0xAB9D2C", VA = "0xAB9D2C", Slot = "4")]
		public override void SetViewConfig(VehicleViewConfig viewConfig)
		{
		}

		[Token(Token = "0x6000930")]
		[Address(RVA = "0xAB9D48", Offset = "0xAB9D48", VA = "0xAB9D48", Slot = "8")]
		public override void Update(Transform self, Transform target, Vector3 targetOffset, float deltaTime)
		{
		}

		[Token(Token = "0x6000931")]
		[Address(RVA = "0xAB9E30", Offset = "0xAB9E30", VA = "0xAB9E30")]
		public CameraAttachTo()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001BF")]
	public class CameraSmoothFollow : CameraMode
	{
		[Token(Token = "0x4000BE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float distance;

		[Token(Token = "0x4000BE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float height;

		[Token(Token = "0x4000BE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float viewHeightRatio;

		[Token(Token = "0x4000BE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool lookBehind;

		[Token(Token = "0x4000BE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Space(5f)]
		public float heightDamping;

		[Token(Token = "0x4000BE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float rotationDamping;

		[Token(Token = "0x4000BE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Space(5f)]
		public bool followVelocity;

		[Token(Token = "0x4000BE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float velocityDamping;

		[Token(Token = "0x4000BEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private VehicleController m_vehicle;

		[Token(Token = "0x4000BEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Camera m_camera;

		[Token(Token = "0x4000BEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Vector3 m_smoothLastPos;

		[Token(Token = "0x4000BED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Vector3 m_smoothVelocity;

		[Token(Token = "0x4000BEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float m_smoothTargetAngle;

		[Token(Token = "0x4000BEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float m_selfRotationAngle;

		[Token(Token = "0x4000BF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float m_selfHeight;

		[Token(Token = "0x6000932")]
		[Address(RVA = "0xAB9E38", Offset = "0xAB9E38", VA = "0xAB9E38", Slot = "4")]
		public override void SetViewConfig(VehicleViewConfig viewConfig)
		{
		}

		[Token(Token = "0x6000933")]
		[Address(RVA = "0xAB9E5C", Offset = "0xAB9E5C", VA = "0xAB9E5C", Slot = "5")]
		public override void Initialize(Transform self)
		{
		}

		[Token(Token = "0x6000934")]
		[Address(RVA = "0xAB9EC0", Offset = "0xAB9EC0", VA = "0xAB9EC0", Slot = "7")]
		public override void Reset(Transform self, Transform target, Vector3 targetOffset)
		{
		}

		[Token(Token = "0x6000935")]
		[Address(RVA = "0xABA000", Offset = "0xABA000", VA = "0xABA000", Slot = "8")]
		public override void Update(Transform self, Transform target, Vector3 targetOffset, float deltaTime)
		{
		}

		[Token(Token = "0x6000936")]
		[Address(RVA = "0xABA8AC", Offset = "0xABA8AC", VA = "0xABA8AC")]
		public CameraSmoothFollow()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001C0")]
	public class CameraMouseOrbit : CameraMode
	{
		[Token(Token = "0x4000BF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float distance;

		[Token(Token = "0x4000BF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Space(5f)]
		public float minVerticalAngle;

		[Token(Token = "0x4000BF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float maxVerticalAngle;

		[Token(Token = "0x4000BF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float horizontalSpeed;

		[Token(Token = "0x4000BF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float verticalSpeed;

		[Token(Token = "0x4000BF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float orbitDamping;

		[Token(Token = "0x4000BF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Space(5f)]
		public float minDistance;

		[Token(Token = "0x4000BF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float maxDistance;

		[Token(Token = "0x4000BF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float distanceSpeed;

		[Token(Token = "0x4000BFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float distanceDamping;

		[Token(Token = "0x4000BFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Space(5f)]
		public string horizontalAxis;

		[Token(Token = "0x4000BFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public string verticalAxis;

		[Token(Token = "0x4000BFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public string distanceAxis;

		[Token(Token = "0x4000BFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private VehicleController m_vehicle;

		[Token(Token = "0x4000BFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Camera m_camera;

		[Token(Token = "0x4000C00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float m_orbitX;

		[Token(Token = "0x4000C01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float m_orbitY;

		[Token(Token = "0x4000C02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float m_orbitDistance;

		[Token(Token = "0x6000937")]
		[Address(RVA = "0xABA94C", Offset = "0xABA94C", VA = "0xABA94C", Slot = "4")]
		public override void SetViewConfig(VehicleViewConfig viewConfig)
		{
		}

		[Token(Token = "0x6000938")]
		[Address(RVA = "0xABA978", Offset = "0xABA978", VA = "0xABA978", Slot = "5")]
		public override void Initialize(Transform self)
		{
		}

		[Token(Token = "0x6000939")]
		[Address(RVA = "0xABA9F8", Offset = "0xABA9F8", VA = "0xABA9F8", Slot = "7")]
		public override void Reset(Transform self, Transform target, Vector3 targetOffset)
		{
		}

		[Token(Token = "0x600093A")]
		[Address(RVA = "0xABAAAC", Offset = "0xABAAAC", VA = "0xABAAAC", Slot = "8")]
		public override void Update(Transform self, Transform target, Vector3 targetOffset, float deltaTime)
		{
		}

		[Token(Token = "0x600093B")]
		[Address(RVA = "0xABAF90", Offset = "0xABAF90", VA = "0xABAF90")]
		public CameraMouseOrbit()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001C1")]
	public class CameraLookAt : CameraMode
	{
		[Token(Token = "0x4000C03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float damping;

		[Token(Token = "0x4000C04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Space(5f)]
		public float minFov;

		[Token(Token = "0x4000C05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float maxFov;

		[Token(Token = "0x4000C06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float fovSpeed;

		[Token(Token = "0x4000C07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float fovDamping;

		[Token(Token = "0x4000C08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string fovAxis;

		[Token(Token = "0x4000C09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Space(5f)]
		public bool autoFov;

		[Token(Token = "0x4000C0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float targetRadius;

		[Token(Token = "0x4000C0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float targetRadiusSpeed;

		[Token(Token = "0x4000C0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Space(5f)]
		public bool adjustNearPlane;

		[Token(Token = "0x4000C0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float nearPlaneAtMinFov;

		[Token(Token = "0x4000C0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Space(5f)]
		public bool enableMovement;

		[Token(Token = "0x4000C0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float movementSpeed;

		[Token(Token = "0x4000C10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float movementDamping;

		[Token(Token = "0x4000C11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public string forwardAxis;

		[Token(Token = "0x4000C12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public string sidewaysAxis;

		[Token(Token = "0x4000C13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public string verticalAxis;

		[Token(Token = "0x4000C14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Camera m_camera;

		[Token(Token = "0x4000C15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector3 m_position;

		[Token(Token = "0x4000C16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float m_fov;

		[Token(Token = "0x4000C17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float m_savedFov;

		[Token(Token = "0x4000C18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private float m_savedNearPlane;

		[Token(Token = "0x600093C")]
		[Address(RVA = "0xABB058", Offset = "0xABB058", VA = "0xABB058", Slot = "4")]
		public override void SetViewConfig(VehicleViewConfig viewConfig)
		{
		}

		[Token(Token = "0x600093D")]
		[Address(RVA = "0xABB074", Offset = "0xABB074", VA = "0xABB074", Slot = "5")]
		public override void Initialize(Transform self)
		{
		}

		[Token(Token = "0x600093E")]
		[Address(RVA = "0xABB0D8", Offset = "0xABB0D8", VA = "0xABB0D8", Slot = "6")]
		public override void OnEnable(Transform self, Transform target, Vector3 targetOffset)
		{
		}

		[Token(Token = "0x600093F")]
		[Address(RVA = "0xABB19C", Offset = "0xABB19C", VA = "0xABB19C", Slot = "8")]
		public override void Update(Transform self, Transform target, Vector3 targetOffset, float deltaTime)
		{
		}

		[Token(Token = "0x6000940")]
		[Address(RVA = "0xABB7D0", Offset = "0xABB7D0", VA = "0xABB7D0", Slot = "9")]
		public override void OnDisable(Transform self, Transform target, Vector3 targetOffset)
		{
		}

		[Token(Token = "0x6000941")]
		[Address(RVA = "0xABB86C", Offset = "0xABB86C", VA = "0xABB86C")]
		public CameraLookAt()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001C2")]
	public class CameraFree : CameraMode
	{
		[Token(Token = "0x4000C19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float minVerticalAngle;

		[Token(Token = "0x4000C1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float maxVerticalAngle;

		[Token(Token = "0x4000C1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float horizontalSpeed;

		[Token(Token = "0x4000C1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float verticalSpeed;

		[Token(Token = "0x4000C1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float damping;

		[Token(Token = "0x4000C1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Space(5f)]
		public bool adjustFov;

		[Token(Token = "0x4000C1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float minFov;

		[Token(Token = "0x4000C20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float maxFov;

		[Token(Token = "0x4000C21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float fovSpeed;

		[Token(Token = "0x4000C22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float fovDamping;

		[Token(Token = "0x4000C23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Space(5f)]
		public bool adjustNearPlane;

		[Token(Token = "0x4000C24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float nearPlaneAtMinFov;

		[Token(Token = "0x4000C25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Space(5f)]
		public string horizontalAxis;

		[Token(Token = "0x4000C26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public string verticalAxis;

		[Token(Token = "0x4000C27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public string fovAxis;

		[Token(Token = "0x4000C28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Space(5f)]
		public bool enableMovement;

		[Token(Token = "0x4000C29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float movementSpeed;

		[Token(Token = "0x4000C2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float movementDamping;

		[Token(Token = "0x4000C2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public string forwardAxis;

		[Token(Token = "0x4000C2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public string sidewaysAxis;

		[Token(Token = "0x4000C2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public string upwardsAxis;

		[Token(Token = "0x4000C2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Camera m_camera;

		[Token(Token = "0x4000C2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3 m_position;

		[Token(Token = "0x4000C30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private float m_fov;

		[Token(Token = "0x4000C31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private float m_savedFov;

		[Token(Token = "0x4000C32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private float m_savedNearPlane;

		[Token(Token = "0x4000C33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private float m_horizontal;

		[Token(Token = "0x4000C34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private float m_vertical;

		[Token(Token = "0x6000942")]
		[Address(RVA = "0xABB940", Offset = "0xABB940", VA = "0xABB940", Slot = "5")]
		public override void Initialize(Transform self)
		{
		}

		[Token(Token = "0x6000943")]
		[Address(RVA = "0xABBA1C", Offset = "0xABBA1C", VA = "0xABBA1C", Slot = "6")]
		public override void OnEnable(Transform self, Transform target, Vector3 targetOffset)
		{
		}

		[Token(Token = "0x6000944")]
		[Address(RVA = "0xABBAF4", Offset = "0xABBAF4", VA = "0xABBAF4", Slot = "8")]
		public override void Update(Transform self, Transform target, Vector3 targetOffset, float deltaTime)
		{
		}

		[Token(Token = "0x6000945")]
		[Address(RVA = "0xABC01C", Offset = "0xABC01C", VA = "0xABC01C", Slot = "9")]
		public override void OnDisable(Transform self, Transform target, Vector3 targetOffset)
		{
		}

		[Token(Token = "0x6000946")]
		[Address(RVA = "0xABC0B8", Offset = "0xABC0B8", VA = "0xABC0B8")]
		public CameraFree()
		{
		}
	}
	[Token(Token = "0x20001C3")]
	public class VehicleCameraController : MonoBehaviour
	{
		[Token(Token = "0x20001C4")]
		public enum Mode
		{
			[Token(Token = "0x4000C49")]
			AttachTo,
			[Token(Token = "0x4000C4A")]
			SmoothFollow,
			[Token(Token = "0x4000C4B")]
			MouseOrbit,
			[Token(Token = "0x4000C4C")]
			LookAt,
			[Token(Token = "0x4000C4D")]
			Free
		}

		[Token(Token = "0x4000C35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Mode mode;

		[Token(Token = "0x4000C36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform target;

		[Token(Token = "0x4000C37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool followCenterOfMass;

		[Token(Token = "0x4000C38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool useUnscaledTime;

		[Token(Token = "0x4000C39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		[Space(5f)]
		public bool cameraCollisions;

		[Token(Token = "0x4000C3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public LayerMask collisionMask;

		[Token(Token = "0x4000C3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Space(5f)]
		public KeyCode changeCameraKey;

		[Token(Token = "0x4000C3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Space(5f)]
		public CameraAttachTo attachTo;

		[Token(Token = "0x4000C3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[FormerlySerializedAs("smoothFollowSettings")]
		public CameraSmoothFollow smoothFollow;

		[Token(Token = "0x4000C3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[FormerlySerializedAs("orbitSettings")]
		public CameraMouseOrbit mouseOrbit;

		[Token(Token = "0x4000C3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public CameraLookAt lookAt;

		[Token(Token = "0x4000C40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public CameraFree free;

		[Token(Token = "0x4000C41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform m_transform;

		[Token(Token = "0x4000C42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Mode m_prevMode;

		[Token(Token = "0x4000C43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private CameraMode[] m_cameraModes;

		[Token(Token = "0x4000C44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Transform m_prevTarget;

		[Token(Token = "0x4000C45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Rigidbody m_targetRigidbody;

		[Token(Token = "0x4000C46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Vector3 m_localTargetOffset;

		[Token(Token = "0x4000C47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private Vector3 m_targetOffset;

		[Token(Token = "0x6000947")]
		[Address(RVA = "0xABC1E8", Offset = "0xABC1E8", VA = "0xABC1E8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000948")]
		[Address(RVA = "0xABC764", Offset = "0xABC764", VA = "0xABC764")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000949")]
		[Address(RVA = "0xABC7B8", Offset = "0xABC7B8", VA = "0xABC7B8")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600094A")]
		[Address(RVA = "0xABC9F0", Offset = "0xABC9F0", VA = "0xABC9F0")]
		public void NextCameraMode()
		{
		}

		[Token(Token = "0x600094B")]
		[Address(RVA = "0xABCA34", Offset = "0xABCA34", VA = "0xABCA34")]
		public void ResetCamera()
		{
		}

		[Token(Token = "0x600094C")]
		[Address(RVA = "0xABCA9C", Offset = "0xABCA9C", VA = "0xABCA9C")]
		public void SetViewConfig(VehicleViewConfig viewConfig)
		{
		}

		[Token(Token = "0x600094D")]
		[Address(RVA = "0xABC4C0", Offset = "0xABC4C0", VA = "0xABC4C0")]
		private void AdquireTarget()
		{
		}

		[Token(Token = "0x600094E")]
		[Address(RVA = "0xABC68C", Offset = "0xABC68C", VA = "0xABC68C")]
		private void ComputeTargetOffset()
		{
		}

		[Token(Token = "0x600094F")]
		[Address(RVA = "0xABCB08", Offset = "0xABCB08", VA = "0xABCB08")]
		public VehicleCameraController()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001C5")]
	public class GearSystem
	{
		[Token(Token = "0x4000C4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float Torque;

		[Token(Token = "0x4000C4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float Speed;

		[Token(Token = "0x6000950")]
		[Address(RVA = "0xABCCB4", Offset = "0xABCCB4", VA = "0xABCCB4")]
		public GearSystem()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001C6")]
	public class Wheel
	{
		[Token(Token = "0x4000C50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public WheelCollider wheelCollider;

		[Token(Token = "0x4000C51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform wheelTransform;

		[Token(Token = "0x4000C52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform caliperTransform;

		[Token(Token = "0x4000C53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool steer;

		[Token(Token = "0x4000C54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool drive;

		[Token(Token = "0x4000C55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		public bool brake;

		[Token(Token = "0x4000C56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B")]
		public bool handbrake;

		[Token(Token = "0x6000951")]
		[Address(RVA = "0xABCCBC", Offset = "0xABCCBC", VA = "0xABCCBC")]
		public Wheel()
		{
		}
	}
	[Token(Token = "0x20001C7")]
	public class WheelData
	{
		[Token(Token = "0x4000C57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Wheel wheel;

		[Token(Token = "0x4000C58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public WheelCollider collider;

		[Token(Token = "0x4000C59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform transform;

		[Token(Token = "0x4000C5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 origin;

		[Token(Token = "0x4000C5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float forceDistance;

		[Token(Token = "0x4000C5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float steerAngle;

		[Token(Token = "0x4000C5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public bool grounded;

		[Token(Token = "0x4000C5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public WheelHit hit;

		[Token(Token = "0x4000C5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public GroundMaterial groundMaterial;

		[Token(Token = "0x4000C60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float suspensionCompression;

		[Token(Token = "0x4000C61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public float downforce;

		[Token(Token = "0x4000C62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Vector3 velocity;

		[Token(Token = "0x4000C63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public Vector2 localVelocity;

		[Token(Token = "0x4000C64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public Vector2 localRigForce;

		[Token(Token = "0x4000C65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public bool isBraking;

		[Token(Token = "0x4000C66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public float finalInput;

		[Token(Token = "0x4000C67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public Vector2 tireSlip;

		[Token(Token = "0x4000C68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public Vector2 tireForce;

		[Token(Token = "0x4000C69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		public Vector2 dragForce;

		[Token(Token = "0x4000C6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		public Vector2 rawTireForce;

		[Token(Token = "0x4000C6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		public float angularVelocity;

		[Token(Token = "0x4000C6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public float angularPosition;

		[Token(Token = "0x4000C6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public PhysicMaterial lastPhysicMaterial;

		[Token(Token = "0x4000C6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public RaycastHit rayHit;

		[Token(Token = "0x4000C6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		public float positionRatio;

		[Token(Token = "0x4000C70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public bool isWheelChildOfCaliper;

		[Token(Token = "0x4000C71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		public float combinedTireSlip;

		[Token(Token = "0x4000C72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public float downforceRatio;

		[Token(Token = "0x6000952")]
		[Address(RVA = "0xABCCCC", Offset = "0xABCCCC", VA = "0xABCCCC")]
		public WheelData()
		{
		}
	}
	[Token(Token = "0x20001C8")]
	[RequireComponent(typeof(Rigidbody))]
	public class VehicleController : MonoBehaviour
	{
		[Token(Token = "0x20001C9")]
		public enum CenterOfMassMode
		{
			[Token(Token = "0x4000CD0")]
			Transform,
			[Token(Token = "0x4000CD1")]
			Parametric
		}

		[Token(Token = "0x20001CA")]
		public enum BrakeMode
		{
			[Token(Token = "0x4000CD3")]
			Slip,
			[Token(Token = "0x4000CD4")]
			Ratio
		}

		[Token(Token = "0x20001CB")]
		public enum UpdateRate
		{
			[Token(Token = "0x4000CD6")]
			OnUpdate,
			[Token(Token = "0x4000CD7")]
			OnFixedUpdate,
			[Token(Token = "0x4000CD8")]
			Disabled
		}

		[Token(Token = "0x20001CC")]
		public enum PositionMode
		{
			[Token(Token = "0x4000CDA")]
			Accurate,
			[Token(Token = "0x4000CDB")]
			Fast
		}

		[Token(Token = "0x20001CD")]
		public delegate void OnImpact();

		[Token(Token = "0x20001CE")]
		private struct VehicleFrame
		{
			[Token(Token = "0x4000CDC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public float frontPosition;

			[Token(Token = "0x4000CDD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public float rearPosition;

			[Token(Token = "0x4000CDE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public float baseHeight;

			[Token(Token = "0x4000CDF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public float frontWidth;

			[Token(Token = "0x4000CE0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float rearWidth;

			[Token(Token = "0x4000CE1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float middlePoint;
		}

		[Token(Token = "0x4000C73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Wheel[] wheels;

		[Token(Token = "0x4000C74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Center of Mass")]
		public CenterOfMassMode centerOfMassMode;

		[Token(Token = "0x4000C75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Range(0.1f, 0.9f)]
		public float centerOfMassPosition;

		[Token(Token = "0x4000C76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Range(-1f, 1f)]
		public float centerOfMassHeightOffset;

		[Token(Token = "0x4000C77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[FormerlySerializedAs("centerOfMass")]
		public Transform centerOfMassTransform;

		[Token(Token = "0x4000C78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Vehicle Setup")]
		[FormerlySerializedAs("maxSpeed")]
		public float maxSpeedForward;

		[Token(Token = "0x4000C79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float maxSpeedReverse;

		[Token(Token = "0x4000C7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Range(0f, 3f)]
		public float tireFriction;

		[Token(Token = "0x4000C7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Range(0f, 1f)]
		public float rollingResistance;

		[Token(Token = "0x4000C7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Range(0f, 1f)]
		public float antiRoll;

		[Token(Token = "0x4000C7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Range(0f, 89f)]
		public float maxSteerAngle;

		[Token(Token = "0x4000C7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Range(0f, 4f)]
		public float aeroDrag;

		[Token(Token = "0x4000C7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Range(0f, 2f)]
		public float aeroDownforce;

		[Token(Token = "0x4000C80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Header("Vehicle Balance")]
		[Range(0f, 1f)]
		public float driveBalance;

		[Token(Token = "0x4000C81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Range(0f, 1f)]
		public float brakeBalance;

		[Token(Token = "0x4000C82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Range(0.3f, 0.7f)]
		public float tireFrictionBalance;

		[Token(Token = "0x4000C83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Range(0f, 1f)]
		public float aeroBalance;

		[Token(Token = "0x4000C84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Range(0f, 1f)]
		public float handlingBias;

		[Token(Token = "0x4000C85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Header("Motor")]
		public float maxDriveForce;

		[Token(Token = "0x4000C86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Range(0.0001f, 0.9999f)]
		public float forceCurveShape;

		[Token(Token = "0x4000C87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public float maxDriveSlip;

		[Token(Token = "0x4000C88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float driveForceToMaxSlip;

		[Token(Token = "0x4000C89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[Header("Brakes")]
		public float maxBrakeForce;

		[Token(Token = "0x4000C8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float brakeForceToMaxSlip;

		[Token(Token = "0x4000C8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public BrakeMode brakeMode;

		[Token(Token = "0x4000C8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float maxBrakeSlip;

		[Token(Token = "0x4000C8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[Range(0f, 1f)]
		public float maxBrakeRatio;

		[Token(Token = "0x4000C8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public BrakeMode handbrakeMode;

		[Token(Token = "0x4000C8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public float maxHandbrakeSlip;

		[Token(Token = "0x4000C90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Range(0f, 1f)]
		public float maxHandbrakeRatio;

		[Token(Token = "0x4000C91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[Header("Driving Aids")]
		[FormerlySerializedAs("tcEnabled")]
		public bool tractionControl;

		[Token(Token = "0x4000C92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Range(0f, 1f)]
		[FormerlySerializedAs("tcRatio")]
		public float tractionControlRatio;

		[Token(Token = "0x4000C93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[FormerlySerializedAs("absEnabled")]
		public bool brakeAssist;

		[Token(Token = "0x4000C94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Range(0f, 1f)]
		[FormerlySerializedAs("absRatio")]
		public float brakeAssistRatio;

		[Token(Token = "0x4000C95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[FormerlySerializedAs("espEnabled")]
		public bool steeringLimit;

		[Token(Token = "0x4000C96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[FormerlySerializedAs("espRatio")]
		[Range(0f, 1f)]
		public float steeringLimitRatio;

		[Token(Token = "0x4000C97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public bool steeringAssist;

		[Token(Token = "0x4000C98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[Range(0f, 1f)]
		public float steeringAssistRatio;

		[Token(Token = "0x4000C99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[Range(-1f, 1f)]
		public float steerInput;

		[Token(Token = "0x4000C9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Range(-1f, 1f)]
		public float throttleInput;

		[Token(Token = "0x4000C9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[Range(0f, 1f)]
		public float brakeInput;

		[Token(Token = "0x4000C9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Range(0f, 1f)]
		public float handbrakeInput;

		[Token(Token = "0x4000C9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[FormerlySerializedAs("wheelUpdateRate")]
		[Header("Visual Wheels")]
		public UpdateRate wheelUpdateRate;

		[Token(Token = "0x4000C9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public PositionMode wheelPositionMode;

		[Token(Token = "0x4000C9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		[Range(0f, 0.5f)]
		[Header("Wheel Contact")]
		public float sleepVelocity;

		[Token(Token = "0x4000CA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public float defaultGroundGrip;

		[Token(Token = "0x4000CA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		public float defaultGroundDrag;

		[Token(Token = "0x4000CA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[Header("Optimization & Debug")]
		public bool disallowRuntimeChanges;

		[Token(Token = "0x4000CA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE1")]
		public bool disableSteerAngleCorrection;

		[Token(Token = "0x4000CA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE2")]
		[FormerlySerializedAs("showContactGizmos")]
		public bool showCollisionGizmos;

		[NonSerialized]
		[Token(Token = "0x4000CA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE3")]
		public bool processContacts;

		[NonSerialized]
		[Token(Token = "0x4000CA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		public float impactThreeshold;

		[NonSerialized]
		[Token(Token = "0x4000CA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public float impactInterval;

		[NonSerialized]
		[Token(Token = "0x4000CA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		public float impactIntervalRandom;

		[NonSerialized]
		[Token(Token = "0x4000CA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public float impactMinSpeed;

		[NonSerialized]
		[Token(Token = "0x4000CAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		public bool computeExtendedTireData;

		[Token(Token = "0x4000CAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public OnImpact onImpact;

		[Token(Token = "0x4000CAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static VehicleController current;

		[Token(Token = "0x4000CAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static float RpmToW;

		[Token(Token = "0x4000CAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public static float WToRpm;

		[Token(Token = "0x4000CB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Transform m_transform;

		[Token(Token = "0x4000CB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public Rigidbody m_rigidbody;

		[Token(Token = "0x4000CB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private GroundMaterialManager m_groundMaterialManager;

		[Token(Token = "0x4000CB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Rigidbody m_referenceBody;

		[Token(Token = "0x4000CB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private Rigidbody m_referenceCandidate;

		[Token(Token = "0x4000CB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private int m_referenceCandidateCount;

		[NonSerialized]
		[Token(Token = "0x4000CB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		public string debugText;

		[Token(Token = "0x4000CB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private WheelData[] m_wheelData;

		[Token(Token = "0x4000CB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private float m_speed;

		[Token(Token = "0x4000CB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		private float m_speedAngle;

		[Token(Token = "0x4000CBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private float m_steerAngle;

		[Token(Token = "0x4000CBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
		private bool m_usesHandbrake;

		[Token(Token = "0x4000CBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private CommonTools.BiasLerpContext m_forceBiasCtx;

		[Token(Token = "0x4000CBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private VehicleFrame m_vehicleFrame;

		[Token(Token = "0x4000CBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private bool m_paused;

		[Token(Token = "0x4000CBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x179")]
		private bool m_singleFixedStep;

		[Token(Token = "0x4000CC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17A")]
		private bool m_singleUpdateStep;

		[Token(Token = "0x4000CC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private Collider[] m_colliders;

		[Token(Token = "0x4000CC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private int[] m_colLayers;

		[Token(Token = "0x4000CC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		private WheelFrictionCurve m_colliderFriction;

		[Token(Token = "0x4000CC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
		private int m_sumImpactCount;

		[Token(Token = "0x4000CC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		private Vector3 m_sumImpactPosition;

		[Token(Token = "0x4000CC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B4")]
		private Vector3 m_sumImpactVelocity;

		[Token(Token = "0x4000CC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		private int m_sumImpactHardness;

		[Token(Token = "0x4000CC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C4")]
		private float m_lastImpactTime;

		[Token(Token = "0x4000CC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		private Vector3 m_localDragPosition;

		[Token(Token = "0x4000CCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D4")]
		private Vector3 m_localDragVelocity;

		[Token(Token = "0x4000CCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		private int m_localDragHardness;

		[Token(Token = "0x4000CCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E4")]
		private float m_lastStrongImpactTime;

		[Token(Token = "0x4000CCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		private PhysicMaterial m_lastImpactedMaterial;

		[Token(Token = "0x4000CCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		private GroundMaterial m_impactedGroundMaterial;

		[Token(Token = "0x17000098")]
		public Vector3 localImpactPosition
		{
			[Token(Token = "0x6000953")]
			[Address(RVA = "0xABCDF4", Offset = "0xABCDF4", VA = "0xABCDF4")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000099")]
		public Vector3 localImpactVelocity
		{
			[Token(Token = "0x6000954")]
			[Address(RVA = "0xABCE04", Offset = "0xABCE04", VA = "0xABCE04")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700009A")]
		public bool isHardImpact
		{
			[Token(Token = "0x6000955")]
			[Address(RVA = "0xABCE14", Offset = "0xABCE14", VA = "0xABCE14")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700009B")]
		public Vector3 localDragPosition
		{
			[Token(Token = "0x6000956")]
			[Address(RVA = "0xABCE24", Offset = "0xABCE24", VA = "0xABCE24")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700009C")]
		public Vector3 localDragVelocity
		{
			[Token(Token = "0x6000957")]
			[Address(RVA = "0xABCE34", Offset = "0xABCE34", VA = "0xABCE34")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700009D")]
		public bool isHardDrag
		{
			[Token(Token = "0x6000958")]
			[Address(RVA = "0xABCE44", Offset = "0xABCE44", VA = "0xABCE44")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700009E")]
		public WheelData[] wheelData
		{
			[Token(Token = "0x6000959")]
			[Address(RVA = "0xABCE54", Offset = "0xABCE54", VA = "0xABCE54")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700009F")]
		public float speed
		{
			[Token(Token = "0x600095A")]
			[Address(RVA = "0xABCE5C", Offset = "0xABCE5C", VA = "0xABCE5C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000A0")]
		public float speedAngle
		{
			[Token(Token = "0x600095B")]
			[Address(RVA = "0xABCE64", Offset = "0xABCE64", VA = "0xABCE64")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000A1")]
		public float steerAngle
		{
			[Token(Token = "0x600095C")]
			[Address(RVA = "0xABCE6C", Offset = "0xABCE6C", VA = "0xABCE6C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000A2")]
		public bool invertVisualWheelSpinDirection
		{
			[Token(Token = "0x600095D")]
			[Address(RVA = "0xABCE74", Offset = "0xABCE74", VA = "0xABCE74")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600095E")]
			[Address(RVA = "0xABCE7C", Offset = "0xABCE7C", VA = "0xABCE7C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170000A3")]
		public Transform cachedTransform
		{
			[Token(Token = "0x600095F")]
			[Address(RVA = "0xABCE88", Offset = "0xABCE88", VA = "0xABCE88")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A4")]
		public Rigidbody cachedRigidbody
		{
			[Token(Token = "0x6000960")]
			[Address(RVA = "0xABCE90", Offset = "0xABCE90", VA = "0xABCE90")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A5")]
		public bool paused
		{
			[Token(Token = "0x6000965")]
			[Address(RVA = "0xAC0E18", Offset = "0xAC0E18", VA = "0xAC0E18")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000966")]
			[Address(RVA = "0xAC0E20", Offset = "0xAC0E20", VA = "0xAC0E20")]
			set
			{
			}
		}

		[Token(Token = "0x6000961")]
		[Address(RVA = "0xABCE98", Offset = "0xABCE98", VA = "0xABCE98")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x6000962")]
		[Address(RVA = "0xABCF04", Offset = "0xABCF04", VA = "0xABCF04")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000963")]
		[Address(RVA = "0xABDFF4", Offset = "0xABDFF4", VA = "0xABDFF4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000964")]
		[Address(RVA = "0xABEF70", Offset = "0xABEF70", VA = "0xABEF70")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000967")]
		[Address(RVA = "0xAC0E40", Offset = "0xAC0E40", VA = "0xAC0E40")]
		public void SingleStep()
		{
		}

		[Token(Token = "0x6000968")]
		[Address(RVA = "0xABE1C4", Offset = "0xABE1C4", VA = "0xABE1C4")]
		private void ComputeSteerAngle()
		{
		}

		[Token(Token = "0x6000969")]
		[Address(RVA = "0xABE2E8", Offset = "0xABE2E8", VA = "0xABE2E8")]
		private void UpdateSteering(WheelData wd)
		{
		}

		[Token(Token = "0x600096A")]
		[Address(RVA = "0xAC0E6C", Offset = "0xAC0E6C", VA = "0xAC0E6C")]
		private float FixSteerAngle(WheelData wd, float inputSteerAngle)
		{
			return default(float);
		}

		[Token(Token = "0x600096B")]
		[Address(RVA = "0xABF76C", Offset = "0xABF76C", VA = "0xABF76C")]
		private void UpdateSuspension(WheelData wd)
		{
		}

		[Token(Token = "0x600096C")]
		[Address(RVA = "0xABF908", Offset = "0xABF908", VA = "0xABF908")]
		private void UpdateLocalFrame(WheelData wd)
		{
		}

		[Token(Token = "0x600096D")]
		[Address(RVA = "0xABFFC4", Offset = "0xABFFC4", VA = "0xABFFC4")]
		private void UpdateGroundMaterial(WheelData wd)
		{
		}

		[Token(Token = "0x600096E")]
		[Address(RVA = "0xAC0024", Offset = "0xAC0024", VA = "0xAC0024")]
		private void ComputeTireForces(WheelData wd)
		{
		}

		[Token(Token = "0x600096F")]
		[Address(RVA = "0xAC06E4", Offset = "0xAC06E4", VA = "0xAC06E4")]
		private void ApplyTireForces(WheelData wd)
		{
		}

		[Token(Token = "0x6000970")]
		[Address(RVA = "0xAC1414", Offset = "0xAC1414", VA = "0xAC1414")]
		public Vector3 GetSidewaysForceAppPoint(WheelData wd, Vector3 contactPoint)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000971")]
		[Address(RVA = "0xAC1524", Offset = "0xAC1524", VA = "0xAC1524")]
		private static float ComputeSlipAngle(Vector2 localVelocity)
		{
			return default(float);
		}

		[Token(Token = "0x6000972")]
		[Address(RVA = "0xAC15B0", Offset = "0xAC15B0", VA = "0xAC15B0")]
		private static float ComputeCombinedSlip(Vector2 localVelocity, Vector2 tireSlip)
		{
			return default(float);
		}

		[Token(Token = "0x6000973")]
		[Address(RVA = "0xAC0A44", Offset = "0xAC0A44", VA = "0xAC0A44")]
		private void ComputeExtendedTireData(WheelData wd, float referenceDownforce)
		{
		}

		[Token(Token = "0x6000974")]
		[Address(RVA = "0xAC12A0", Offset = "0xAC12A0", VA = "0xAC12A0")]
		private float ComputeDriveForce(float demandedForce, float maxForce, bool grounded)
		{
			return default(float);
		}

		[Token(Token = "0x6000975")]
		[Address(RVA = "0xAC122C", Offset = "0xAC122C", VA = "0xAC122C")]
		private void ComputeBrakeValues(WheelData wd, BrakeMode mode, float maxSlip, float maxRatio, out float brakeSlip, out float brakeRatio)
		{
		}

		[Token(Token = "0x6000976")]
		[Address(RVA = "0xABE40C", Offset = "0xABE40C", VA = "0xABE40C")]
		private void UpdateTransform(WheelData wd, float deltaTime)
		{
		}

		[Token(Token = "0x6000977")]
		[Address(RVA = "0xAC1138", Offset = "0xAC1138", VA = "0xAC1138")]
		private void UpdateGroundMaterialCached(PhysicMaterial colliderMaterial, ref PhysicMaterial cachedMaterial, ref GroundMaterial groundMaterial)
		{
		}

		[Token(Token = "0x6000978")]
		[Address(RVA = "0xAC168C", Offset = "0xAC168C", VA = "0xAC168C")]
		public void ResetVehicle()
		{
		}

		[Token(Token = "0x6000979")]
		[Address(RVA = "0xABD71C", Offset = "0xABD71C", VA = "0xABD71C")]
		private void FindColliders()
		{
		}

		[Token(Token = "0x600097A")]
		[Address(RVA = "0xABE358", Offset = "0xABE358", VA = "0xABE358")]
		private void DisableCollidersRaycast()
		{
		}

		[Token(Token = "0x600097B")]
		[Address(RVA = "0xABEBB8", Offset = "0xABEBB8", VA = "0xABEBB8")]
		private void EnableCollidersRaycast()
		{
		}

		[Token(Token = "0x600097C")]
		[Address(RVA = "0xABA780", Offset = "0xABA780", VA = "0xABA780")]
		public Vector3 RaycastOthers(Vector3 from, Vector3 to, int layerMask = -5)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600097D")]
		[Address(RVA = "0xABA6B4", Offset = "0xABA6B4", VA = "0xABA6B4")]
		public float SphereRaycastOthers(Vector3 origin, Vector3 direction, float radius, float maxDistance, int layerMask = -5)
		{
			return default(float);
		}

		[Token(Token = "0x600097E")]
		[Address(RVA = "0xABDE94", Offset = "0xABDE94", VA = "0xABDE94")]
		private float GetWheelForceDistance(WheelCollider col)
		{
			return default(float);
		}

		[Token(Token = "0x600097F")]
		[Address(RVA = "0xABDDCC", Offset = "0xABDDCC", VA = "0xABDDCC")]
		private void UpdateWheelCollider(WheelCollider col)
		{
		}

		[Token(Token = "0x6000980")]
		[Address(RVA = "0xABDF50", Offset = "0xABDF50", VA = "0xABDF50")]
		private void SetupWheelCollider(WheelCollider col)
		{
		}

		[Token(Token = "0x6000981")]
		[Address(RVA = "0xAC0930", Offset = "0xAC0930", VA = "0xAC0930")]
		private void UpdateWheelSleep(WheelData wd)
		{
		}

		[Token(Token = "0x6000982")]
		[Address(RVA = "0xABD92C", Offset = "0xABD92C", VA = "0xABD92C")]
		private VehicleFrame ComputeVehicleFrame()
		{
			return default(VehicleFrame);
		}

		[Token(Token = "0x6000983")]
		[Address(RVA = "0xABDC1C", Offset = "0xABDC1C", VA = "0xABDC1C")]
		private void ConfigureCenterOfMass()
		{
		}

		[Token(Token = "0x6000984")]
		[Address(RVA = "0xAC13F0", Offset = "0xAC13F0", VA = "0xAC13F0")]
		public static float GetBalancedValue(float value, float bias, float positionRatio)
		{
			return default(float);
		}

		[Token(Token = "0x6000985")]
		[Address(RVA = "0xAC125C", Offset = "0xAC125C", VA = "0xAC125C")]
		public static float GetRampBalancedValue(float value, float bias, float positionRatio)
		{
			return default(float);
		}

		[Token(Token = "0x6000986")]
		[Address(RVA = "0xAC1808", Offset = "0xAC1808", VA = "0xAC1808")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6000987")]
		[Address(RVA = "0xAC2018", Offset = "0xAC2018", VA = "0xAC2018")]
		private void OnCollisionStay(Collision collision)
		{
		}

		[Token(Token = "0x6000988")]
		[Address(RVA = "0xAC18E4", Offset = "0xAC18E4", VA = "0xAC18E4")]
		private void ProcessContacts(Collision col, bool forceImpact)
		{
		}

		[Token(Token = "0x6000989")]
		[Address(RVA = "0xAC0AEC", Offset = "0xAC0AEC", VA = "0xAC0AEC")]
		private void HandleImpacts()
		{
		}

		[Token(Token = "0x600098A")]
		[Address(RVA = "0xABEC50", Offset = "0xABEC50", VA = "0xABEC50")]
		private void UpdateDragState(Vector3 dragPosition, Vector3 dragVelocity, int dragHardness)
		{
		}

		[Token(Token = "0x600098B")]
		[Address(RVA = "0xAC202C", Offset = "0xAC202C", VA = "0xAC202C")]
		[ContextMenu("Adjust WheelColliders to their meshes")]
		private void AdjustWheelColliders()
		{
		}

		[Token(Token = "0x600098C")]
		[Address(RVA = "0xAC211C", Offset = "0xAC211C", VA = "0xAC211C")]
		private static void AdjustColliderToWheelMesh(WheelCollider wheelCollider, Transform wheelTransform)
		{
		}

		[Token(Token = "0x600098D")]
		[Address(RVA = "0xAC250C", Offset = "0xAC250C", VA = "0xAC250C")]
		private static Bounds GetScaledBounds(MeshFilter meshFilter)
		{
			return default(Bounds);
		}

		[Token(Token = "0x600098E")]
		[Address(RVA = "0xAC25F4", Offset = "0xAC25F4", VA = "0xAC25F4")]
		[ContextMenu("Convert Center of Mass from Transform to Parametric")]
		private void FromTransformToParametricCoM()
		{
		}

		[Token(Token = "0x600098F")]
		[Address(RVA = "0xAC26F8", Offset = "0xAC26F8", VA = "0xAC26F8")]
		public VehicleController()
		{
		}
	}
	[Token(Token = "0x20001CF")]
	[RequireComponent(typeof(VehicleController))]
	public class VehicleDamage : MonoBehaviour
	{
		[Token(Token = "0x4000CE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MeshFilter[] meshes;

		[Token(Token = "0x4000CE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MeshCollider[] colliders;

		[Token(Token = "0x4000CE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform[] nodes;

		[Token(Token = "0x4000CE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Space(5f)]
		public float minVelocity;

		[Token(Token = "0x4000CE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float multiplier;

		[Token(Token = "0x4000CE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Space(5f)]
		public float damageRadius;

		[Token(Token = "0x4000CE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float maxDisplacement;

		[Token(Token = "0x4000CE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float maxVertexFracture;

		[Token(Token = "0x4000CEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Space(5f)]
		public float nodeDamageRadius;

		[Token(Token = "0x4000CEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float maxNodeRotation;

		[Token(Token = "0x4000CEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float nodeRotationRate;

		[Token(Token = "0x4000CED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Space(5f)]
		public float vertexRepairRate;

		[Token(Token = "0x4000CEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public bool enableRepairKey;

		[Token(Token = "0x4000CEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public KeyCode repairKey;

		[Token(Token = "0x4000CF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private VehicleController m_vehicle;

		[Token(Token = "0x4000CF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3[][] m_originalMeshes;

		[Token(Token = "0x4000CF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Vector3[][] m_originalColliders;

		[Token(Token = "0x4000CF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3[] m_originalNodePositions;

		[Token(Token = "0x4000CF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Quaternion[] m_originalNodeRotations;

		[Token(Token = "0x4000CF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private bool m_repairing;

		[Token(Token = "0x4000CF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float m_meshDamage;

		[Token(Token = "0x4000CF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float m_colliderDamage;

		[Token(Token = "0x4000CF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private float m_nodeDamage;

		[Token(Token = "0x170000A6")]
		public bool isRepairing
		{
			[Token(Token = "0x6000995")]
			[Address(RVA = "0xAC2B04", Offset = "0xAC2B04", VA = "0xAC2B04")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000A7")]
		public float meshDamage
		{
			[Token(Token = "0x6000996")]
			[Address(RVA = "0xAC2B0C", Offset = "0xAC2B0C", VA = "0xAC2B0C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000A8")]
		public float colliderDamage
		{
			[Token(Token = "0x6000997")]
			[Address(RVA = "0xAC2B14", Offset = "0xAC2B14", VA = "0xAC2B14")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000A9")]
		public float nodeDamage
		{
			[Token(Token = "0x6000998")]
			[Address(RVA = "0xAC2B1C", Offset = "0xAC2B1C", VA = "0xAC2B1C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000999")]
		[Address(RVA = "0xAC2B24", Offset = "0xAC2B24", VA = "0xAC2B24")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600099A")]
		[Address(RVA = "0xAC2F5C", Offset = "0xAC2F5C", VA = "0xAC2F5C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600099B")]
		[Address(RVA = "0xAC32F8", Offset = "0xAC32F8", VA = "0xAC32F8")]
		private void Update()
		{
		}

		[Token(Token = "0x600099C")]
		[Address(RVA = "0xAC34F0", Offset = "0xAC34F0", VA = "0xAC34F0")]
		public void Repair()
		{
		}

		[Token(Token = "0x600099D")]
		[Address(RVA = "0xAC34FC", Offset = "0xAC34FC", VA = "0xAC34FC")]
		private void ProcessImpact()
		{
		}

		[Token(Token = "0x600099E")]
		[Address(RVA = "0xAC37F4", Offset = "0xAC37F4", VA = "0xAC37F4")]
		private float DeformMesh(Mesh mesh, Vector3[] originalMesh, Transform localTransform, Vector3 contactPoint, Vector3 contactVelocity)
		{
			return default(float);
		}

		[Token(Token = "0x600099F")]
		[Address(RVA = "0xAC3E2C", Offset = "0xAC3E2C", VA = "0xAC3E2C")]
		private float DeformNode(Transform T, Vector3 originalLocalPos, Quaternion originalLocalRot, Vector3 contactPoint, Vector3 contactVelocity)
		{
			return default(float);
		}

		[Token(Token = "0x60009A0")]
		[Address(RVA = "0xAC41F8", Offset = "0xAC41F8", VA = "0xAC41F8")]
		private Vector3 AnglesToVector(Vector3 Angles)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60009A1")]
		[Address(RVA = "0xAC3BC4", Offset = "0xAC3BC4", VA = "0xAC3BC4")]
		private float DeformColliders(Vector3 contactPoint, Vector3 impactVelocity)
		{
			return default(float);
		}

		[Token(Token = "0x60009A2")]
		[Address(RVA = "0xAC332C", Offset = "0xAC332C", VA = "0xAC332C")]
		private void ProcessRepair()
		{
		}

		[Token(Token = "0x60009A3")]
		[Address(RVA = "0xAC4230", Offset = "0xAC4230", VA = "0xAC4230")]
		private bool RepairMesh(Mesh mesh, Vector3[] originalMesh, float repairRate, float repairedThreshold)
		{
			return default(bool);
		}

		[Token(Token = "0x60009A4")]
		[Address(RVA = "0xAC4460", Offset = "0xAC4460", VA = "0xAC4460")]
		private bool RepairNode(Transform T, Vector3 originalLocalPosition, Quaternion originalLocalRotation, float repairRate, float repairedThreshold)
		{
			return default(bool);
		}

		[Token(Token = "0x60009A5")]
		[Address(RVA = "0xAC2F8C", Offset = "0xAC2F8C", VA = "0xAC2F8C")]
		private void RestoreMeshes()
		{
		}

		[Token(Token = "0x60009A6")]
		[Address(RVA = "0xAC304C", Offset = "0xAC304C", VA = "0xAC304C")]
		private void RestoreNodes()
		{
		}

		[Token(Token = "0x60009A7")]
		[Address(RVA = "0xAC3130", Offset = "0xAC3130", VA = "0xAC3130")]
		private void RestoreColliders()
		{
		}

		[Token(Token = "0x60009A8")]
		[Address(RVA = "0xAC4780", Offset = "0xAC4780", VA = "0xAC4780")]
		public VehicleDamage()
		{
		}
	}
	[Token(Token = "0x20001D0")]
	public class VehicleManager : MonoBehaviour
	{
		[Token(Token = "0x4000CF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VehicleController[] vehicles;

		[Token(Token = "0x4000CFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int defaultVehicle;

		[Token(Token = "0x4000CFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public KeyCode previousVehicleKey;

		[Token(Token = "0x4000CFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public KeyCode nextVehicleKey;

		[Token(Token = "0x4000CFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public KeyCode alternateNextVehicleKey;

		[Token(Token = "0x4000CFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public VehicleCameraController cameraController;

		[Token(Token = "0x4000CFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool overrideVehicleComponents;

		[Token(Token = "0x4000D00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private int m_currentVehicleIdx;

		[Token(Token = "0x4000D01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private VehicleController m_currentVehicle;

		[Token(Token = "0x4000D02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private VehicleStandardInput m_commonInput;

		[Token(Token = "0x4000D03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private VehicleTelemetry m_commonTelemetry;

		[Token(Token = "0x60009A9")]
		[Address(RVA = "0xAC47B8", Offset = "0xAC47B8", VA = "0xAC47B8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60009AA")]
		[Address(RVA = "0xAC4848", Offset = "0xAC4848", VA = "0xAC4848")]
		private void Start()
		{
		}

		[Token(Token = "0x60009AB")]
		[Address(RVA = "0xAC4A3C", Offset = "0xAC4A3C", VA = "0xAC4A3C")]
		private void Update()
		{
		}

		[Token(Token = "0x60009AC")]
		[Address(RVA = "0xAC4950", Offset = "0xAC4950", VA = "0xAC4950")]
		public void SelectVehicle(int vehicleIdx)
		{
		}

		[Token(Token = "0x60009AD")]
		[Address(RVA = "0xAC4A90", Offset = "0xAC4A90", VA = "0xAC4A90")]
		public void SelectPreviousVehicle()
		{
		}

		[Token(Token = "0x60009AE")]
		[Address(RVA = "0xAC4AC8", Offset = "0xAC4AC8", VA = "0xAC4AC8")]
		public void SelectNextVehicle()
		{
		}

		[Token(Token = "0x60009AF")]
		[Address(RVA = "0xAC4AFC", Offset = "0xAC4AFC", VA = "0xAC4AFC")]
		private void EnableVehicle(VehicleController vehicle)
		{
		}

		[Token(Token = "0x60009B0")]
		[Address(RVA = "0xAC48BC", Offset = "0xAC48BC", VA = "0xAC48BC")]
		private void DisableVehicle(VehicleController vehicle)
		{
		}

		[Token(Token = "0x60009B1")]
		[Address(RVA = "0xAC4BDC", Offset = "0xAC4BDC", VA = "0xAC4BDC")]
		private void SetupVehicleComponents(VehicleController vehicle, bool enabled)
		{
		}

		[Token(Token = "0x60009B2")]
		[Address(RVA = "0xAC4E9C", Offset = "0xAC4E9C", VA = "0xAC4E9C")]
		public VehicleManager()
		{
		}
	}
	[Token(Token = "0x20001D1")]
	public class VehicleRandomInput : MonoBehaviour
	{
		[Token(Token = "0x4000D04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float steerInterval;

		[Token(Token = "0x4000D05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float steerIntervalTolerance;

		[Token(Token = "0x4000D06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float steerChangeRate;

		[Token(Token = "0x4000D07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Range(0f, 1f)]
		public float steerStraightRandom;

		[Token(Token = "0x4000D08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Space(5f)]
		public float throttleInterval;

		[Token(Token = "0x4000D09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float throttleIntervalTolerance;

		[Token(Token = "0x4000D0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float throttleChangeRate;

		[Token(Token = "0x4000D0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Range(0f, 1f)]
		public float throttleForwardRandom;

		[Token(Token = "0x4000D0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float m_targetSteer;

		[Token(Token = "0x4000D0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float m_nextSteerTime;

		[Token(Token = "0x4000D0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float m_targetThrottle;

		[Token(Token = "0x4000D0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float m_targetBrake;

		[Token(Token = "0x4000D10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float m_nextThrottleTime;

		[Token(Token = "0x4000D11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private VehicleController m_vehicle;

		[Token(Token = "0x60009B3")]
		[Address(RVA = "0xAC4F24", Offset = "0xAC4F24", VA = "0xAC4F24")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60009B4")]
		[Address(RVA = "0xAC4F7C", Offset = "0xAC4F7C", VA = "0xAC4F7C")]
		private void Update()
		{
		}

		[Token(Token = "0x60009B5")]
		[Address(RVA = "0xAC5200", Offset = "0xAC5200", VA = "0xAC5200")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x60009B6")]
		[Address(RVA = "0xAC5324", Offset = "0xAC5324", VA = "0xAC5324")]
		public VehicleRandomInput()
		{
		}
	}
	[Token(Token = "0x20001D2")]
	public class VehicleStandardInput : MonoBehaviour
	{
		[Token(Token = "0x20001D3")]
		public enum ThrottleAndBrakeInput
		{
			[Token(Token = "0x4000D21")]
			SingleAxis,
			[Token(Token = "0x4000D22")]
			SeparateAxes
		}

		[Token(Token = "0x4000D12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VehicleController target;

		[Token(Token = "0x4000D13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool continuousForwardAndReverse;

		[Token(Token = "0x4000D14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public ThrottleAndBrakeInput throttleAndBrakeInput;

		[Token(Token = "0x4000D15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string throttleAndBrakeAxis;

		[Token(Token = "0x4000D16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string throttleAxis;

		[Token(Token = "0x4000D17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string brakeAxis;

		[Token(Token = "0x4000D18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string handbrakeAxis;

		[Token(Token = "0x4000D19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public KeyCode resetVehicleKey;

		[Token(Token = "0x4000D1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private bool m_doReset;

		[Token(Token = "0x4000D1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float steerInput;

		[Token(Token = "0x4000D1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float handbrakeInput;

		[Token(Token = "0x4000D1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool isSteerHeld;

		[Token(Token = "0x4000D1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float HandBrackAngle;

		[Token(Token = "0x4000D1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public int GearType;

		[Token(Token = "0x60009B7")]
		[Address(RVA = "0xAC5344", Offset = "0xAC5344", VA = "0xAC5344")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60009B8")]
		[Address(RVA = "0xAC53F4", Offset = "0xAC53F4", VA = "0xAC53F4")]
		private void Update()
		{
		}

		[Token(Token = "0x60009B9")]
		[Address(RVA = "0xAC5908", Offset = "0xAC5908", VA = "0xAC5908")]
		private float BrackStatus()
		{
			return default(float);
		}

		[Token(Token = "0x60009BA")]
		[Address(RVA = "0xAC5A24", Offset = "0xAC5A24", VA = "0xAC5A24", Slot = "4")]
		public virtual void SetSteeringAngleInverted(float steeringAngle)
		{
		}

		[Token(Token = "0x60009BB")]
		[Address(RVA = "0xAC5A30", Offset = "0xAC5A30", VA = "0xAC5A30", Slot = "5")]
		public virtual void SetSteeringAngle(Vector2 steeringAngle)
		{
		}

		[Token(Token = "0x60009BC")]
		[Address(RVA = "0xAC5A38", Offset = "0xAC5A38", VA = "0xAC5A38", Slot = "6")]
		public virtual void SetSteeringAngleInverted(Vector2 steeringAngle)
		{
		}

		[Token(Token = "0x60009BD")]
		[Address(RVA = "0xAC5A44", Offset = "0xAC5A44", VA = "0xAC5A44")]
		public VehicleStandardInput()
		{
		}
	}
	[Token(Token = "0x20001D4")]
	public class VehicleTelemetry : MonoBehaviour
	{
		[Token(Token = "0x20001D5")]
		public enum DataMode
		{
			[Token(Token = "0x4000D2D")]
			TireSlipAndForce,
			[Token(Token = "0x4000D2E")]
			GroundMaterial
		}

		[Token(Token = "0x4000D23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VehicleController target;

		[Token(Token = "0x4000D24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DataMode dataMode;

		[Token(Token = "0x4000D25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Font font;

		[Token(Token = "0x4000D26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public KeyCode toggleKey;

		[Token(Token = "0x4000D27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool show;

		[Token(Token = "0x4000D28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		public bool gizmos;

		[Token(Token = "0x4000D29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x36")]
		public bool gizmosAtPhysicsPos;

		[Token(Token = "0x4000D2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private string m_telemetryText;

		[Token(Token = "0x4000D2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private GUIStyle m_style;

		[Token(Token = "0x60009BE")]
		[Address(RVA = "0xAC5B28", Offset = "0xAC5B28", VA = "0xAC5B28")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60009BF")]
		[Address(RVA = "0xAC5C30", Offset = "0xAC5C30", VA = "0xAC5C30")]
		private void Update()
		{
		}

		[Token(Token = "0x60009C0")]
		[Address(RVA = "0xAC64EC", Offset = "0xAC64EC", VA = "0xAC64EC")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x60009C1")]
		[Address(RVA = "0xAC5D44", Offset = "0xAC5D44", VA = "0xAC5D44")]
		private string DoTelemetry()
		{
			return null;
		}

		[Token(Token = "0x60009C2")]
		[Address(RVA = "0xAC6614", Offset = "0xAC6614", VA = "0xAC6614")]
		private string GetWheelTelemetry(WheelData wd, ref float suspensionForce)
		{
			return null;
		}

		[Token(Token = "0x60009C3")]
		[Address(RVA = "0xAC63BC", Offset = "0xAC63BC", VA = "0xAC63BC")]
		private void DrawGizmos()
		{
		}

		[Token(Token = "0x60009C4")]
		[Address(RVA = "0xAC6B58", Offset = "0xAC6B58", VA = "0xAC6B58")]
		private void DrawWheelGizmos(WheelData wd)
		{
		}

		[Token(Token = "0x60009C5")]
		[Address(RVA = "0xAC6FB0", Offset = "0xAC6FB0", VA = "0xAC6FB0")]
		public VehicleTelemetry()
		{
		}
	}
	[Token(Token = "0x20001D6")]
	public class TireFxData
	{
		[Token(Token = "0x4000D2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public TireMarksRenderer lastRenderer;

		[Token(Token = "0x4000D30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int lastMarksIndex;

		[Token(Token = "0x4000D31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float marksDelta;

		[Token(Token = "0x4000D32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TireParticleEmitter lastEmitter;

		[Token(Token = "0x4000D33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float lastParticleTime;

		[Token(Token = "0x4000D34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float slipTime;

		[Token(Token = "0x60009C6")]
		[Address(RVA = "0xAC7060", Offset = "0xAC7060", VA = "0xAC7060")]
		public TireFxData()
		{
		}
	}
	[Token(Token = "0x20001D7")]
	[RequireComponent(typeof(VehicleController))]
	public class VehicleTireEffects : MonoBehaviour
	{
		[Token(Token = "0x4000D35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float tireWidth;

		[Token(Token = "0x4000D36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float minSlip;

		[Token(Token = "0x4000D37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float maxSlip;

		[Token(Token = "0x4000D38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Range(0f, 2f)]
		[Header("Tire marks")]
		public float intensity;

		[Token(Token = "0x4000D39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float updateInterval;

		[Token(Token = "0x4000D3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Header("Smoke")]
		public float minIntensityTime;

		[Token(Token = "0x4000D3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float maxIntensityTime;

		[Token(Token = "0x4000D3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float limitIntensityTime;

		[Token(Token = "0x4000D3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private VehicleController m_vehicle;

		[Token(Token = "0x4000D3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private TireFxData[] m_fxData;

		[Token(Token = "0x60009C7")]
		[Address(RVA = "0xAC7078", Offset = "0xAC7078", VA = "0xAC7078")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60009C8")]
		[Address(RVA = "0xAC70E8", Offset = "0xAC70E8", VA = "0xAC70E8")]
		private void Update()
		{
		}

		[Token(Token = "0x60009C9")]
		[Address(RVA = "0xAC71D0", Offset = "0xAC71D0", VA = "0xAC71D0")]
		private void InitializeTireFxData()
		{
		}

		[Token(Token = "0x60009CA")]
		[Address(RVA = "0xAC7304", Offset = "0xAC7304", VA = "0xAC7304")]
		private void UpdateTireMarks(WheelData wheelData, TireFxData fxData)
		{
		}

		[Token(Token = "0x60009CB")]
		[Address(RVA = "0xAC75D8", Offset = "0xAC75D8", VA = "0xAC75D8")]
		private void UpdateTireParticles(WheelData wheelData, TireFxData fxData)
		{
		}

		[Token(Token = "0x60009CC")]
		[Address(RVA = "0xAC7904", Offset = "0xAC7904", VA = "0xAC7904")]
		public VehicleTireEffects()
		{
		}
	}
	[Token(Token = "0x20001D8")]
	public class VehicleViewConfig : MonoBehaviour
	{
		[Token(Token = "0x4000D3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform lookAtPoint;

		[Token(Token = "0x4000D40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform driverView;

		[Token(Token = "0x4000D41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float viewDistance;

		[Token(Token = "0x4000D42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float viewHeight;

		[Token(Token = "0x4000D43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float viewDamping;

		[Token(Token = "0x4000D44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float viewMinDistance;

		[Token(Token = "0x4000D45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float viewMinHeight;

		[Token(Token = "0x170000AA")]
		public float targetDiameter
		{
			[Token(Token = "0x60009CD")]
			[Address(RVA = "0xAC7980", Offset = "0xAC7980", VA = "0xAC7980")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60009CE")]
			[Address(RVA = "0xAC7988", Offset = "0xAC7988", VA = "0xAC7988")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60009CF")]
		[Address(RVA = "0xAC7990", Offset = "0xAC7990", VA = "0xAC7990")]
		private void Awake()
		{
		}

		[Token(Token = "0x60009D0")]
		[Address(RVA = "0xAC7B20", Offset = "0xAC7B20", VA = "0xAC7B20")]
		public VehicleViewConfig()
		{
		}
	}
	[Token(Token = "0x20001D9")]
	[RequireComponent(typeof(VehicleController))]
	public class VehicleVisualEffects : MonoBehaviour
	{
		[Token(Token = "0x4000D47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Steering wheel")]
		public Transform steeringWheel;

		[Token(Token = "0x4000D48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float degreesOfRotation;

		[Token(Token = "0x4000D49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Brake lights")]
		public Renderer brakesRenderer;

		[Token(Token = "0x4000D4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int brakesMaterialIndex;

		[Token(Token = "0x4000D4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Material brakesOnMaterial;

		[Token(Token = "0x4000D4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Material brakesOffMaterial;

		[Token(Token = "0x4000D4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private VehicleController m_vehicle;

		[Token(Token = "0x4000D4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool m_prevBrakes;

		[Token(Token = "0x60009D1")]
		[Address(RVA = "0xAC7B34", Offset = "0xAC7B34", VA = "0xAC7B34")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60009D2")]
		[Address(RVA = "0xAC7B8C", Offset = "0xAC7B8C", VA = "0xAC7B8C")]
		private void Update()
		{
		}

		[Token(Token = "0x60009D3")]
		[Address(RVA = "0xAC7D90", Offset = "0xAC7D90", VA = "0xAC7D90")]
		public VehicleVisualEffects()
		{
		}
	}
	[Token(Token = "0x20001DA")]
	[RequireComponent(typeof(VehicleController))]
	public class TractorDamage : MonoBehaviour
	{
		[Token(Token = "0x4000D4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject btnRepair;

		[Token(Token = "0x4000D50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float maxDamage;

		[Token(Token = "0x4000D51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float totDamage;

		[Token(Token = "0x4000D52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Space(5f)]
		public float minVelocity;

		[Token(Token = "0x4000D53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float multiplier;

		[Token(Token = "0x4000D54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Space(5f)]
		public float damageRadius;

		[Token(Token = "0x4000D55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float maxDisplacement;

		[Token(Token = "0x4000D56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float maxVertexFracture;

		[Token(Token = "0x4000D57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool enableRepairKey;

		[Token(Token = "0x4000D58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public KeyCode repairKey;

		[Token(Token = "0x4000D59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private VehicleController m_vehicle;

		[Token(Token = "0x4000D5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		public static bool m_repairing;

		[Token(Token = "0x4000D5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float m_meshDamage;

		[Token(Token = "0x4000D5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public GameObject imgDamage;

		[Token(Token = "0x4000D5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int currTractorModel;

		[Token(Token = "0x4000D5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static TractorDamage instance;

		[Token(Token = "0x170000AB")]
		public bool isRepairing
		{
			[Token(Token = "0x60009D4")]
			[Address(RVA = "0xAC7DA0", Offset = "0xAC7DA0", VA = "0xAC7DA0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000AC")]
		public float meshDamage
		{
			[Token(Token = "0x60009D5")]
			[Address(RVA = "0xAC7DF8", Offset = "0xAC7DF8", VA = "0xAC7DF8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x60009D6")]
		[Address(RVA = "0xAC7E00", Offset = "0xAC7E00", VA = "0xAC7E00")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60009D7")]
		[Address(RVA = "0xAC8164", Offset = "0xAC8164", VA = "0xAC8164")]
		public void CheckDamageOnStart()
		{
		}

		[Token(Token = "0x60009D8")]
		[Address(RVA = "0xAC8258", Offset = "0xAC8258", VA = "0xAC8258")]
		private void InvestRepairCoin()
		{
		}

		[Token(Token = "0x60009D9")]
		[Address(RVA = "0xAC8404", Offset = "0xAC8404", VA = "0xAC8404")]
		private void Update()
		{
		}

		[Token(Token = "0x60009DA")]
		[Address(RVA = "0xAC7F84", Offset = "0xAC7F84", VA = "0xAC7F84")]
		public void RepairUI()
		{
		}

		[Token(Token = "0x60009DB")]
		[Address(RVA = "0xAC85B0", Offset = "0xAC85B0", VA = "0xAC85B0")]
		public void Repair()
		{
		}

		[Token(Token = "0x60009DC")]
		[Address(RVA = "0xAC860C", Offset = "0xAC860C", VA = "0xAC860C")]
		private void ProcessImpact()
		{
		}

		[Token(Token = "0x60009DD")]
		[Address(RVA = "0xAC8A20", Offset = "0xAC8A20", VA = "0xAC8A20")]
		private void DoHaptics()
		{
		}

		[Token(Token = "0x60009DE")]
		[Address(RVA = "0xAC8408", Offset = "0xAC8408", VA = "0xAC8408")]
		private void ProcessRepair()
		{
		}

		[Token(Token = "0x60009DF")]
		[Address(RVA = "0xAC8AC4", Offset = "0xAC8AC4", VA = "0xAC8AC4")]
		public TractorDamage()
		{
		}
	}
}
namespace DMM
{
	[Token(Token = "0x20001DB")]
	public class AssignMapFocus : MonoBehaviour
	{
		[Token(Token = "0x60009E1")]
		[Address(RVA = "0xAC8B34", Offset = "0xAC8B34", VA = "0xAC8B34")]
		private void Start()
		{
		}

		[Token(Token = "0x60009E2")]
		[Address(RVA = "0xAC8D84", Offset = "0xAC8D84", VA = "0xAC8D84")]
		public AssignMapFocus()
		{
		}
	}
	[Token(Token = "0x20001DC")]
	public class DMMap : MonoBehaviour
	{
		[Token(Token = "0x4000D5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public List<DMMapShape> shapes;

		[Token(Token = "0x4000D60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public List<DMMapIcon> icons;

		[Token(Token = "0x4000D61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<DMMapShape> additive;

		[Token(Token = "0x4000D62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<DMMapShape> subtractive;

		[Token(Token = "0x4000D63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float yNormalOffset;

		[Token(Token = "0x4000D64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private GameObject meshContainer;

		[Token(Token = "0x4000D65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private GameObject[] meshLayers;

		[Token(Token = "0x4000D66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public GameObject truckParent;

		[Token(Token = "0x4000D67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static DMMap _instance;

		[Token(Token = "0x4000D68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HideInInspector]
		public RenderTexture mainRenderTexture;

		[Token(Token = "0x4000D69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool started;

		[Token(Token = "0x4000D6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		private bool initialized;

		[Token(Token = "0x4000D6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
		public bool DebugMessages;

		[Token(Token = "0x4000D6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Header("Required Objects ")]
		public Material defaultMaterial;

		[Token(Token = "0x4000D6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Camera DMMapCamera;

		[Token(Token = "0x4000D6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Canvas canvas;

		[Token(Token = "0x4000D6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public GameObject iconContainer;

		[Token(Token = "0x4000D70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public RawImage mapImage;

		[Token(Token = "0x4000D71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public RawImage overlayImage;

		[Token(Token = "0x4000D72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Header("Map Options")]
		public bool generateOnStart;

		[Token(Token = "0x4000D73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public float triangulationScale;

		[Token(Token = "0x4000D74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public MapOrientation orientation;

		[Token(Token = "0x4000D75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public int loadedConfig;

		[Token(Token = "0x4000D76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public List<DMMapConfig> configs;

		[Token(Token = "0x170000AD")]
		[HideInInspector]
		public static DMMap instance
		{
			[Token(Token = "0x60009E3")]
			[Address(RVA = "0xAC8C04", Offset = "0xAC8C04", VA = "0xAC8C04")]
			get
			{
				return null;
			}
			[Token(Token = "0x60009E4")]
			[Address(RVA = "0xAC8D8C", Offset = "0xAC8D8C", VA = "0xAC8D8C")]
			set
			{
			}
		}

		[Token(Token = "0x60009E5")]
		[Address(RVA = "0xAC8DE4", Offset = "0xAC8DE4", VA = "0xAC8DE4")]
		public void LoadConfig(int config)
		{
		}

		[Token(Token = "0x60009E6")]
		[Address(RVA = "0xAC8F08", Offset = "0xAC8F08", VA = "0xAC8F08")]
		public void LoadConfig(string config)
		{
		}

		[Token(Token = "0x60009E7")]
		[Address(RVA = "0xAC9040", Offset = "0xAC9040", VA = "0xAC9040")]
		public void SetActiveLayer(int layer)
		{
		}

		[Token(Token = "0x60009E8")]
		[Address(RVA = "0xAC91CC", Offset = "0xAC91CC", VA = "0xAC91CC")]
		public void DisableAllLayers()
		{
		}

		[Token(Token = "0x60009E9")]
		[Address(RVA = "0xAC931C", Offset = "0xAC931C", VA = "0xAC931C")]
		public void Generate()
		{
		}

		[Token(Token = "0x60009EA")]
		[Address(RVA = "0xACC4AC", Offset = "0xACC4AC", VA = "0xACC4AC")]
		public Vector3 WorldtoUI(Vector3 worldPoint)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60009EB")]
		[Address(RVA = "0xACC5B8", Offset = "0xACC5B8", VA = "0xACC5B8")]
		public Vector3 UIToWorld(Vector3 screenPoint)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60009EC")]
		[Address(RVA = "0xACC72C", Offset = "0xACC72C", VA = "0xACC72C")]
		public bool CreateWaypoint(GameObject waypoint, Vector3 screenPoint)
		{
			return default(bool);
		}

		[Token(Token = "0x60009ED")]
		[Address(RVA = "0xACC920", Offset = "0xACC920", VA = "0xACC920")]
		public void UpdateMeshMaterials()
		{
		}

		[Token(Token = "0x60009EE")]
		[Address(RVA = "0xACCBCC", Offset = "0xACCBCC", VA = "0xACCBCC")]
		public void DMMapDebug(string msg)
		{
		}

		[Token(Token = "0x60009EF")]
		[Address(RVA = "0xACCC68", Offset = "0xACCC68", VA = "0xACCC68")]
		public void Awake()
		{
		}

		[Token(Token = "0x60009F0")]
		[Address(RVA = "0xACCD78", Offset = "0xACCD78", VA = "0xACCD78")]
		public void Start()
		{
		}

		[Token(Token = "0x60009F1")]
		[Address(RVA = "0xACCD90", Offset = "0xACCD90", VA = "0xACCD90")]
		public void Initialize()
		{
		}

		[Token(Token = "0x60009F2")]
		[Address(RVA = "0xACCDA8", Offset = "0xACCDA8", VA = "0xACCDA8")]
		private void Setup()
		{
		}

		[Token(Token = "0x60009F3")]
		[Address(RVA = "0xACD1C0", Offset = "0xACD1C0", VA = "0xACD1C0")]
		private void SetupCamera()
		{
		}

		[Token(Token = "0x60009F4")]
		[Address(RVA = "0xACD50C", Offset = "0xACD50C", VA = "0xACD50C")]
		public void Update()
		{
		}

		[Token(Token = "0x60009F5")]
		[Address(RVA = "0xACD420", Offset = "0xACD420", VA = "0xACD420")]
		private void InitializeRenderTexture()
		{
		}

		[Token(Token = "0x60009F6")]
		[Address(RVA = "0xAC9598", Offset = "0xAC9598", VA = "0xAC9598")]
		private void CreateMeshContainer()
		{
		}

		[Token(Token = "0x60009F7")]
		[Address(RVA = "0xAC9750", Offset = "0xAC9750", VA = "0xAC9750")]
		private void GenerateMeshLayer(int layer = 0)
		{
		}

		[Token(Token = "0x60009F8")]
		[Address(RVA = "0xACE260", Offset = "0xACE260", VA = "0xACE260")]
		private Vector2 CalculateOutwardNormal(TriangleNet.Geometry.Vertex _a, TriangleNet.Geometry.Vertex _b, TriangleNet.Geometry.Vertex _c)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60009F9")]
		[Address(RVA = "0xACE2A0", Offset = "0xACE2A0", VA = "0xACE2A0")]
		private void AddPolygonWithHoles2(PolyNode node, ref Polygon p)
		{
		}

		[Token(Token = "0x60009FA")]
		[Address(RVA = "0xACDD74", Offset = "0xACDD74", VA = "0xACDD74")]
		private void PolyTreeToDPolygonList(PolyNode node, ref List<DPolygon> dPolygons)
		{
		}

		[Token(Token = "0x60009FB")]
		[Address(RVA = "0xACDAF0", Offset = "0xACDAF0", VA = "0xACDAF0")]
		private List<IntPoint> ShapeToCPolygon(DMMapShape shape)
		{
			return null;
		}

		[Token(Token = "0x60009FC")]
		[Address(RVA = "0xACE4F0", Offset = "0xACE4F0", VA = "0xACE4F0")]
		private void DrawPolytree(List<DPolygon> plist, bool drawNormals = false)
		{
		}

		[Token(Token = "0x60009FD")]
		[Address(RVA = "0xACF6AC", Offset = "0xACF6AC", VA = "0xACF6AC")]
		public DMMap()
		{
		}
	}
	[Token(Token = "0x20001DD")]
	public enum IconScaleMode
	{
		[Token(Token = "0x4000D78")]
		ScaleWithZoom,
		[Token(Token = "0x4000D79")]
		NoScale,
		[Token(Token = "0x4000D7A")]
		DefinedPerIcon
	}
	[Token(Token = "0x20001DE")]
	public enum MapOrientation
	{
		[Token(Token = "0x4000D7C")]
		XZ,
		[Token(Token = "0x4000D7D")]
		XY,
		[Token(Token = "0x4000D7E")]
		YZ
	}
	[Serializable]
	[Token(Token = "0x20001DF")]
	public class DMMapConfig
	{
		[Token(Token = "0x4000D7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x4000D80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<Material> meshLayerMaterial;

		[Token(Token = "0x4000D81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Color mapBackgroundColor;

		[Token(Token = "0x4000D82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Range(0f, 1f)]
		public float opacity;

		[Token(Token = "0x4000D83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Sprite mask;

		[Token(Token = "0x4000D84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Texture2D overlay;

		[Token(Token = "0x4000D85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public RectTransform uiPosition;

		[Token(Token = "0x4000D86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float zoom;

		[Token(Token = "0x4000D87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public bool rotate;

		[Token(Token = "0x4000D88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform objectToFocusOn;

		[Token(Token = "0x4000D89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float globalIconScale;

		[Token(Token = "0x4000D8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public IconScaleMode iconScaleMode;

		[Token(Token = "0x4000D8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float iconDistanceThreshold;

		[Token(Token = "0x60009FE")]
		[Address(RVA = "0xACF850", Offset = "0xACF850", VA = "0xACF850")]
		public void Apply()
		{
		}

		[Token(Token = "0x60009FF")]
		[Address(RVA = "0xAD019C", Offset = "0xAD019C", VA = "0xAD019C")]
		public DMMapConfig()
		{
		}
	}
	[Token(Token = "0x20001E0")]
	public class DMMapIcon : MonoBehaviour
	{
		[Token(Token = "0x4000D8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Sprite icon;

		[Token(Token = "0x4000D8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Color32 tint;

		[Token(Token = "0x4000D8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject iconGO;

		[Token(Token = "0x4000D8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool scaleWithZoom;

		[Token(Token = "0x4000D90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Material mat;

		[Token(Token = "0x4000D91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool rotate;

		[Token(Token = "0x4000D92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		public bool rotateWithMap;

		[Token(Token = "0x4000D93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[HideInInspector]
		public Vector3 mapPosition;

		[Token(Token = "0x4000D94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool useDirectionIndicator;

		[Token(Token = "0x4000D95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Sprite directionIcon;

		[Token(Token = "0x4000D96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float rotationOffset;

		[Token(Token = "0x4000D97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public int layer;

		[Token(Token = "0x6000A00")]
		[Address(RVA = "0xAD0268", Offset = "0xAD0268", VA = "0xAD0268")]
		public void Start()
		{
		}

		[Token(Token = "0x6000A01")]
		[Address(RVA = "0xAD0AE8", Offset = "0xAD0AE8", VA = "0xAD0AE8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000A02")]
		[Address(RVA = "0xAD0B70", Offset = "0xAD0B70", VA = "0xAD0B70")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000A03")]
		[Address(RVA = "0xAD066C", Offset = "0xAD066C", VA = "0xAD066C")]
		private void RotateIcon()
		{
		}

		[Token(Token = "0x6000A04")]
		[Address(RVA = "0xAD0BF8", Offset = "0xAD0BF8", VA = "0xAD0BF8")]
		public void UpdateIcons()
		{
		}

		[Token(Token = "0x6000A05")]
		[Address(RVA = "0xAD10F8", Offset = "0xAD10F8", VA = "0xAD10F8")]
		public void OnDestroy()
		{
		}

		[Token(Token = "0x6000A06")]
		[Address(RVA = "0xAD11E0", Offset = "0xAD11E0", VA = "0xAD11E0")]
		public DMMapIcon()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001E1")]
	[ExecuteInEditMode]
	public class DMMapPoint : MonoBehaviour
	{
		[Token(Token = "0x4000D98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public DMMapShape parentShape;

		[Token(Token = "0x6000A07")]
		[Address(RVA = "0xAD1250", Offset = "0xAD1250", VA = "0xAD1250")]
		public void OnDestroy()
		{
		}

		[Token(Token = "0x6000A08")]
		[Address(RVA = "0xAD1604", Offset = "0xAD1604", VA = "0xAD1604")]
		public DMMapPoint()
		{
		}
	}
	[Token(Token = "0x20001E2")]
	public class DMMapShape : MonoBehaviour
	{
		[Token(Token = "0x4000D99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<GameObject> verts;

		[Token(Token = "0x4000D9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DrawMode mode;

		[Token(Token = "0x4000D9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int layer;

		[Token(Token = "0x6000A09")]
		[Address(RVA = "0xAD160C", Offset = "0xAD160C", VA = "0xAD160C")]
		public void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6000A0A")]
		[Address(RVA = "0xAD18A8", Offset = "0xAD18A8", VA = "0xAD18A8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A0B")]
		[Address(RVA = "0xAD18AC", Offset = "0xAD18AC", VA = "0xAD18AC")]
		public GameObject NewPoint()
		{
			return null;
		}

		[Token(Token = "0x6000A0C")]
		[Address(RVA = "0xAD128C", Offset = "0xAD128C", VA = "0xAD128C")]
		public void RemovePoint(DMMapPoint point)
		{
		}

		[Token(Token = "0x6000A0D")]
		[Address(RVA = "0xAD1AA8", Offset = "0xAD1AA8", VA = "0xAD1AA8")]
		public void OnDestroy()
		{
		}

		[Token(Token = "0x6000A0E")]
		[Address(RVA = "0xAD1B90", Offset = "0xAD1B90", VA = "0xAD1B90")]
		public DMMapShape()
		{
		}
	}
	[Token(Token = "0x20001E3")]
	public enum DrawMode
	{
		[Token(Token = "0x4000D9D")]
		Additive,
		[Token(Token = "0x4000D9E")]
		Subtractive
	}
	[Token(Token = "0x20001E4")]
	public class DPolygon
	{
		[Token(Token = "0x4000D9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<TriangleNet.Geometry.Vertex> points;

		[Token(Token = "0x4000DA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<Vector2> edgeNormals;

		[Token(Token = "0x4000DA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<Vector2> vNormals;

		[Token(Token = "0x4000DA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<DPolygon> holes;

		[Token(Token = "0x4000DA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool isHole;

		[Token(Token = "0x6000A0F")]
		[Address(RVA = "0xAD1C18", Offset = "0xAD1C18", VA = "0xAD1C18", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000A10")]
		[Address(RVA = "0xAD1EAC", Offset = "0xAD1EAC", VA = "0xAD1EAC")]
		public DPolygon()
		{
		}
	}
}
namespace TriangleNet
{
	[Token(Token = "0x20001E5")]
	internal class Behavior
	{
		[Token(Token = "0x4000DA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool poly;

		[Token(Token = "0x4000DA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		private bool quality;

		[Token(Token = "0x4000DA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		private bool varArea;

		[Token(Token = "0x4000DA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13")]
		private bool convex;

		[Token(Token = "0x4000DA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private bool jettison;

		[Token(Token = "0x4000DA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
		private bool boundaryMarkers;

		[Token(Token = "0x4000DAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16")]
		private bool noHoles;

		[Token(Token = "0x4000DAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17")]
		private bool conformDel;

		[Token(Token = "0x4000DAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Func<ITriangle, double, bool> usertest;

		[Token(Token = "0x4000DAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int noBisect;

		[Token(Token = "0x4000DAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int steiner;

		[Token(Token = "0x4000DAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private double minAngle;

		[Token(Token = "0x4000DB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private double maxAngle;

		[Token(Token = "0x4000DB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private double maxArea;

		[Token(Token = "0x4000DB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal bool fixedArea;

		[Token(Token = "0x4000DB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		internal bool useSegments;

		[Token(Token = "0x4000DB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
		internal bool useRegions;

		[Token(Token = "0x4000DB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal double goodAngle;

		[Token(Token = "0x4000DB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal double maxGoodAngle;

		[Token(Token = "0x4000DB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal double offconstant;

		[Token(Token = "0x170000AE")]
		public static bool NoExact
		{
			[Token(Token = "0x6000A13")]
			[Address(RVA = "0xAD23D4", Offset = "0xAD23D4", VA = "0xAD23D4")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000A14")]
			[Address(RVA = "0xAD241C", Offset = "0xAD241C", VA = "0xAD241C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170000AF")]
		public bool Quality
		{
			[Token(Token = "0x6000A15")]
			[Address(RVA = "0xAD2468", Offset = "0xAD2468", VA = "0xAD2468")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000A16")]
			[Address(RVA = "0xAD2470", Offset = "0xAD2470", VA = "0xAD2470")]
			set
			{
			}
		}

		[Token(Token = "0x170000B0")]
		public double MinAngle
		{
			[Token(Token = "0x6000A17")]
			[Address(RVA = "0xAD2484", Offset = "0xAD2484", VA = "0xAD2484")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6000A18")]
			[Address(RVA = "0xAD248C", Offset = "0xAD248C", VA = "0xAD248C")]
			set
			{
			}
		}

		[Token(Token = "0x170000B1")]
		public double MaxAngle
		{
			[Token(Token = "0x6000A19")]
			[Address(RVA = "0xAD2494", Offset = "0xAD2494", VA = "0xAD2494")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6000A1A")]
			[Address(RVA = "0xAD249C", Offset = "0xAD249C", VA = "0xAD249C")]
			set
			{
			}
		}

		[Token(Token = "0x170000B2")]
		public double MaxArea
		{
			[Token(Token = "0x6000A1B")]
			[Address(RVA = "0xAD24A4", Offset = "0xAD24A4", VA = "0xAD24A4")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6000A1C")]
			[Address(RVA = "0xAD24AC", Offset = "0xAD24AC", VA = "0xAD24AC")]
			set
			{
			}
		}

		[Token(Token = "0x170000B3")]
		public bool VarArea
		{
			[Token(Token = "0x6000A1D")]
			[Address(RVA = "0xAD24C0", Offset = "0xAD24C0", VA = "0xAD24C0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000A1E")]
			[Address(RVA = "0xAD24C8", Offset = "0xAD24C8", VA = "0xAD24C8")]
			set
			{
			}
		}

		[Token(Token = "0x170000B4")]
		public bool Poly
		{
			[Token(Token = "0x6000A1F")]
			[Address(RVA = "0xAD24D4", Offset = "0xAD24D4", VA = "0xAD24D4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000A20")]
			[Address(RVA = "0xAD24DC", Offset = "0xAD24DC", VA = "0xAD24DC")]
			set
			{
			}
		}

		[Token(Token = "0x170000B5")]
		public Func<ITriangle, double, bool> UserTest
		{
			[Token(Token = "0x6000A21")]
			[Address(RVA = "0xAD24E8", Offset = "0xAD24E8", VA = "0xAD24E8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A22")]
			[Address(RVA = "0xAD24F0", Offset = "0xAD24F0", VA = "0xAD24F0")]
			set
			{
			}
		}

		[Token(Token = "0x170000B6")]
		public bool Convex
		{
			[Token(Token = "0x6000A23")]
			[Address(RVA = "0xAD24F8", Offset = "0xAD24F8", VA = "0xAD24F8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000A24")]
			[Address(RVA = "0xAD2500", Offset = "0xAD2500", VA = "0xAD2500")]
			set
			{
			}
		}

		[Token(Token = "0x170000B7")]
		public bool ConformingDelaunay
		{
			[Token(Token = "0x6000A25")]
			[Address(RVA = "0xAD250C", Offset = "0xAD250C", VA = "0xAD250C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000A26")]
			[Address(RVA = "0xAD2514", Offset = "0xAD2514", VA = "0xAD2514")]
			set
			{
			}
		}

		[Token(Token = "0x170000B8")]
		public int NoBisect
		{
			[Token(Token = "0x6000A27")]
			[Address(RVA = "0xAD2520", Offset = "0xAD2520", VA = "0xAD2520")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000A28")]
			[Address(RVA = "0xAD2528", Offset = "0xAD2528", VA = "0xAD2528")]
			set
			{
			}
		}

		[Token(Token = "0x170000B9")]
		public int SteinerPoints
		{
			[Token(Token = "0x6000A29")]
			[Address(RVA = "0xAD2538", Offset = "0xAD2538", VA = "0xAD2538")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000A2A")]
			[Address(RVA = "0xAD2540", Offset = "0xAD2540", VA = "0xAD2540")]
			set
			{
			}
		}

		[Token(Token = "0x170000BA")]
		public bool UseBoundaryMarkers
		{
			[Token(Token = "0x6000A2B")]
			[Address(RVA = "0xAD2548", Offset = "0xAD2548", VA = "0xAD2548")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000A2C")]
			[Address(RVA = "0xAD2550", Offset = "0xAD2550", VA = "0xAD2550")]
			set
			{
			}
		}

		[Token(Token = "0x170000BB")]
		public bool NoHoles
		{
			[Token(Token = "0x6000A2D")]
			[Address(RVA = "0xAD255C", Offset = "0xAD255C", VA = "0xAD255C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000A2E")]
			[Address(RVA = "0xAD2564", Offset = "0xAD2564", VA = "0xAD2564")]
			set
			{
			}
		}

		[Token(Token = "0x170000BC")]
		public bool Jettison
		{
			[Token(Token = "0x6000A2F")]
			[Address(RVA = "0xAD2570", Offset = "0xAD2570", VA = "0xAD2570")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000A30")]
			[Address(RVA = "0xAD2578", Offset = "0xAD2578", VA = "0xAD2578")]
			set
			{
			}
		}

		[Token(Token = "0x6000A11")]
		[Address(RVA = "0xAD2004", Offset = "0xAD2004", VA = "0xAD2004")]
		public Behavior(bool quality = false, double minAngle = 20.0)
		{
		}

		[Token(Token = "0x6000A12")]
		[Address(RVA = "0xAD2070", Offset = "0xAD2070", VA = "0xAD2070")]
		private void Update()
		{
		}
	}
	[Token(Token = "0x20001E6")]
	public enum VertexType
	{
		[Token(Token = "0x4000DBA")]
		InputVertex,
		[Token(Token = "0x4000DBB")]
		SegmentVertex,
		[Token(Token = "0x4000DBC")]
		FreeVertex,
		[Token(Token = "0x4000DBD")]
		DeadVertex,
		[Token(Token = "0x4000DBE")]
		UndeadVertex
	}
	[Token(Token = "0x20001E7")]
	public enum NodeNumbering
	{
		[Token(Token = "0x4000DC0")]
		None,
		[Token(Token = "0x4000DC1")]
		Linear,
		[Token(Token = "0x4000DC2")]
		CuthillMcKee
	}
	[Token(Token = "0x20001E8")]
	internal enum LocateResult
	{
		[Token(Token = "0x4000DC4")]
		InTriangle,
		[Token(Token = "0x4000DC5")]
		OnEdge,
		[Token(Token = "0x4000DC6")]
		OnVertex,
		[Token(Token = "0x4000DC7")]
		Outside
	}
	[Token(Token = "0x20001E9")]
	internal enum InsertVertexResult
	{
		[Token(Token = "0x4000DC9")]
		Successful,
		[Token(Token = "0x4000DCA")]
		Encroaching,
		[Token(Token = "0x4000DCB")]
		Violating,
		[Token(Token = "0x4000DCC")]
		Duplicate
	}
	[Token(Token = "0x20001EA")]
	internal enum FindDirectionResult
	{
		[Token(Token = "0x4000DCE")]
		Within,
		[Token(Token = "0x4000DCF")]
		Leftcollinear,
		[Token(Token = "0x4000DD0")]
		Rightcollinear
	}
	[Token(Token = "0x20001EB")]
	public sealed class Log : ILog<LogItem>
	{
		[Token(Token = "0x4000DD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<LogItem> log;

		[Token(Token = "0x4000DD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private LogLevel level;

		[Token(Token = "0x4000DD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly Log instance;

		[Token(Token = "0x170000BD")]
		public static bool Verbose
		{
			[Token(Token = "0x6000A31")]
			[Address(RVA = "0xAD2584", Offset = "0xAD2584", VA = "0xAD2584")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000A32")]
			[Address(RVA = "0xAD25DC", Offset = "0xAD25DC", VA = "0xAD25DC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170000BE")]
		public static ILog<LogItem> Instance
		{
			[Token(Token = "0x6000A35")]
			[Address(RVA = "0xAD2724", Offset = "0xAD2724", VA = "0xAD2724")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000BF")]
		public IList<LogItem> Data
		{
			[Token(Token = "0x6000A3B")]
			[Address(RVA = "0xAD2B7C", Offset = "0xAD2B7C", VA = "0xAD2B7C", Slot = "9")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C0")]
		public LogLevel Level
		{
			[Token(Token = "0x6000A3C")]
			[Address(RVA = "0xAD2B84", Offset = "0xAD2B84", VA = "0xAD2B84", Slot = "10")]
			get
			{
				return default(LogLevel);
			}
		}

		[Token(Token = "0x6000A33")]
		[Address(RVA = "0xAD2638", Offset = "0xAD2638", VA = "0xAD2638")]
		static Log()
		{
		}

		[Token(Token = "0x6000A34")]
		[Address(RVA = "0xAD269C", Offset = "0xAD269C", VA = "0xAD269C")]
		private Log()
		{
		}

		[Token(Token = "0x6000A36")]
		[Address(RVA = "0xAD277C", Offset = "0xAD277C", VA = "0xAD277C", Slot = "4")]
		public void Add(LogItem item)
		{
		}

		[Token(Token = "0x6000A37")]
		[Address(RVA = "0xAD282C", Offset = "0xAD282C", VA = "0xAD282C", Slot = "5")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000A38")]
		[Address(RVA = "0xAD289C", Offset = "0xAD289C", VA = "0xAD289C", Slot = "6")]
		public void Info(string message)
		{
		}

		[Token(Token = "0x6000A39")]
		[Address(RVA = "0xAD298C", Offset = "0xAD298C", VA = "0xAD298C", Slot = "8")]
		public void Warning(string message, string location)
		{
		}

		[Token(Token = "0x6000A3A")]
		[Address(RVA = "0xAD2A84", Offset = "0xAD2A84", VA = "0xAD2A84", Slot = "7")]
		public void Error(string message, string location)
		{
		}
	}
	[Token(Token = "0x20001EC")]
	public class Mesh : IMesh
	{
		[Token(Token = "0x20001ED")]
		[CompilerGenerated]
		private sealed class <get_Edges>d__40 : IEnumerable<Edge>, IEnumerable, IEnumerator<Edge>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000DF2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000DF3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private Edge <>2__current;

			[Token(Token = "0x4000DF4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4000DF5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Mesh <>4__this;

			[Token(Token = "0x4000DF6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private EdgeIterator <e>5__2;

			[Token(Token = "0x170000CB")]
			private Edge System.Collections.Generic.IEnumerator<TriangleNet.Geometry.Edge>.Current
			{
				[Token(Token = "0x6000A61")]
				[Address(RVA = "0xAD6B00", Offset = "0xAD6B00", VA = "0xAD6B00", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000CC")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000A63")]
				[Address(RVA = "0xAD6B48", Offset = "0xAD6B48", VA = "0xAD6B48", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000A5E")]
			[Address(RVA = "0xAD2D10", Offset = "0xAD2D10", VA = "0xAD2D10")]
			[DebuggerHidden]
			public <get_Edges>d__40(int <>1__state)
			{
			}

			[Token(Token = "0x6000A5F")]
			[Address(RVA = "0xAD6A28", Offset = "0xAD6A28", VA = "0xAD6A28", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000A60")]
			[Address(RVA = "0xAD6A2C", Offset = "0xAD6A2C", VA = "0xAD6A2C", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000A62")]
			[Address(RVA = "0xAD6B08", Offset = "0xAD6B08", VA = "0xAD6B08", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6000A64")]
			[Address(RVA = "0xAD6B50", Offset = "0xAD6B50", VA = "0xAD6B50", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<Edge> System.Collections.Generic.IEnumerable<TriangleNet.Geometry.Edge>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6000A65")]
			[Address(RVA = "0xAD6BFC", Offset = "0xAD6BFC", VA = "0xAD6BFC", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x4000DD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private ILog<LogItem> logger;

		[Token(Token = "0x4000DD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private QualityMesher qualityMesher;

		[Token(Token = "0x4000DD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Stack<Otri> flipstack;

		[Token(Token = "0x4000DD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal Dictionary<int, Triangle> triangles;

		[Token(Token = "0x4000DD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal Dictionary<int, Segment> subsegs;

		[Token(Token = "0x4000DDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal Dictionary<int, TriangleNet.Geometry.Vertex> vertices;

		[Token(Token = "0x4000DDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal int hash_vtx;

		[Token(Token = "0x4000DDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		internal int hash_seg;

		[Token(Token = "0x4000DDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal int hash_tri;

		[Token(Token = "0x4000DDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal List<Point> holes;

		[Token(Token = "0x4000DDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal List<RegionPointer> regions;

		[Token(Token = "0x4000DE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		internal Rectangle bounds;

		[Token(Token = "0x4000DE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		internal int invertices;

		[Token(Token = "0x4000DE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		internal int inelements;

		[Token(Token = "0x4000DE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		internal int insegments;

		[Token(Token = "0x4000DE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		internal int undeads;

		[Token(Token = "0x4000DE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		internal int edges;

		[Token(Token = "0x4000DE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		internal int mesh_dim;

		[Token(Token = "0x4000DE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		internal int nextras;

		[Token(Token = "0x4000DE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		internal int hullsize;

		[Token(Token = "0x4000DE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		internal int steinerleft;

		[Token(Token = "0x4000DEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		internal bool checksegments;

		[Token(Token = "0x4000DEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8D")]
		internal bool checkquality;

		[Token(Token = "0x4000DEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		internal TriangleNet.Geometry.Vertex infvertex1;

		[Token(Token = "0x4000DED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		internal TriangleNet.Geometry.Vertex infvertex2;

		[Token(Token = "0x4000DEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		internal TriangleNet.Geometry.Vertex infvertex3;

		[Token(Token = "0x4000DEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		internal TriangleLocator locator;

		[Token(Token = "0x4000DF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		internal Behavior behavior;

		[Token(Token = "0x4000DF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		internal NodeNumbering numbering;

		[Token(Token = "0x170000C1")]
		public Rectangle Bounds
		{
			[Token(Token = "0x6000A3D")]
			[Address(RVA = "0xAD2B8C", Offset = "0xAD2B8C", VA = "0xAD2B8C", Slot = "9")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C2")]
		public ICollection<TriangleNet.Geometry.Vertex> Vertices
		{
			[Token(Token = "0x6000A3E")]
			[Address(RVA = "0xAD2B94", Offset = "0xAD2B94", VA = "0xAD2B94", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C3")]
		public IList<Point> Holes
		{
			[Token(Token = "0x6000A3F")]
			[Address(RVA = "0xAD2BE4", Offset = "0xAD2BE4", VA = "0xAD2BE4", Slot = "8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C4")]
		public ICollection<Triangle> Triangles
		{
			[Token(Token = "0x6000A40")]
			[Address(RVA = "0xAD2BEC", Offset = "0xAD2BEC", VA = "0xAD2BEC", Slot = "7")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C5")]
		public ICollection<Segment> Segments
		{
			[Token(Token = "0x6000A41")]
			[Address(RVA = "0xAD2C3C", Offset = "0xAD2C3C", VA = "0xAD2C3C", Slot = "6")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C6")]
		public IEnumerable<Edge> Edges
		{
			[Token(Token = "0x6000A42")]
			[Address(RVA = "0xAD2C8C", Offset = "0xAD2C8C", VA = "0xAD2C8C", Slot = "5")]
			[IteratorStateMachine(typeof(<get_Edges>d__40))]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C7")]
		public int NumberOfInputPoints
		{
			[Token(Token = "0x6000A43")]
			[Address(RVA = "0xAD2D44", Offset = "0xAD2D44", VA = "0xAD2D44")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000C8")]
		public int NumberOfEdges
		{
			[Token(Token = "0x6000A44")]
			[Address(RVA = "0xAD2D4C", Offset = "0xAD2D4C", VA = "0xAD2D4C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000C9")]
		public bool IsPolygon
		{
			[Token(Token = "0x6000A45")]
			[Address(RVA = "0xAD2D54", Offset = "0xAD2D54", VA = "0xAD2D54")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000CA")]
		public NodeNumbering CurrentNumbering
		{
			[Token(Token = "0x6000A46")]
			[Address(RVA = "0xAD2D64", Offset = "0xAD2D64", VA = "0xAD2D64")]
			get
			{
				return default(NodeNumbering);
			}
		}

		[Token(Token = "0x6000A47")]
		[Address(RVA = "0xAD2D6C", Offset = "0xAD2D6C", VA = "0xAD2D6C")]
		public Mesh()
		{
		}

		[Token(Token = "0x6000A48")]
		[Address(RVA = "0xAD30D0", Offset = "0xAD30D0", VA = "0xAD30D0", Slot = "11")]
		public void Refine(QualityOptions quality)
		{
		}

		[Token(Token = "0x6000A49")]
		[Address(RVA = "0xAD32C0", Offset = "0xAD32C0", VA = "0xAD32C0", Slot = "10")]
		public void Renumber()
		{
		}

		[Token(Token = "0x6000A4A")]
		[Address(RVA = "0xAD32C8", Offset = "0xAD32C8", VA = "0xAD32C8")]
		public void Renumber(NodeNumbering num)
		{
		}

		[Token(Token = "0x6000A4B")]
		[Address(RVA = "0xAD36A8", Offset = "0xAD36A8", VA = "0xAD36A8")]
		internal void ApplyConstraints(IPolygon input, ConstraintOptions options, QualityOptions quality)
		{
		}

		[Token(Token = "0x6000A4C")]
		[Address(RVA = "0xAD313C", Offset = "0xAD313C", VA = "0xAD313C")]
		internal void Refine()
		{
		}

		[Token(Token = "0x6000A4D")]
		[Address(RVA = "0xAD3E60", Offset = "0xAD3E60", VA = "0xAD3E60")]
		internal void CopyTo(Mesh target)
		{
		}

		[Token(Token = "0x6000A4E")]
		[Address(RVA = "0xAD3EFC", Offset = "0xAD3EFC", VA = "0xAD3EFC")]
		private void ResetData()
		{
		}

		[Token(Token = "0x6000A4F")]
		[Address(RVA = "0xAD3DF0", Offset = "0xAD3DF0", VA = "0xAD3DF0")]
		private void Reset()
		{
		}

		[Token(Token = "0x6000A50")]
		[Address(RVA = "0xAD4050", Offset = "0xAD4050", VA = "0xAD4050")]
		internal void TransferNodes(ICollection<TriangleNet.Geometry.Vertex> points)
		{
		}

		[Token(Token = "0x6000A51")]
		[Address(RVA = "0xAD4540", Offset = "0xAD4540", VA = "0xAD4540")]
		internal void MakeVertexMap()
		{
		}

		[Token(Token = "0x6000A52")]
		[Address(RVA = "0xAD46FC", Offset = "0xAD46FC", VA = "0xAD46FC")]
		internal void MakeTriangle(ref Otri newotri)
		{
		}

		[Token(Token = "0x6000A53")]
		[Address(RVA = "0xAD47B0", Offset = "0xAD47B0", VA = "0xAD47B0")]
		internal void MakeSegment(ref Osub newsubseg)
		{
		}

		[Token(Token = "0x6000A54")]
		[Address(RVA = "0xAD4864", Offset = "0xAD4864", VA = "0xAD4864")]
		internal InsertVertexResult InsertVertex(TriangleNet.Geometry.Vertex newvertex, ref Otri searchtri, ref Osub splitseg, bool segmentflaws, bool triflaws)
		{
			return default(InsertVertexResult);
		}

		[Token(Token = "0x6000A55")]
		[Address(RVA = "0xAD58A4", Offset = "0xAD58A4", VA = "0xAD58A4")]
		internal void InsertSubseg(ref Otri tri, int subsegmark)
		{
		}

		[Token(Token = "0x6000A56")]
		[Address(RVA = "0xAD5A34", Offset = "0xAD5A34", VA = "0xAD5A34")]
		internal void Flip(ref Otri flipedge)
		{
		}

		[Token(Token = "0x6000A57")]
		[Address(RVA = "0xAD5D94", Offset = "0xAD5D94", VA = "0xAD5D94")]
		internal void Unflip(ref Otri flipedge)
		{
		}

		[Token(Token = "0x6000A58")]
		[Address(RVA = "0xAD60F4", Offset = "0xAD60F4", VA = "0xAD60F4")]
		private void TriangulatePolygon(Otri firstedge, Otri lastedge, int edgecount, bool doflip, bool triflaws)
		{
		}

		[Token(Token = "0x6000A59")]
		[Address(RVA = "0xAD62E4", Offset = "0xAD62E4", VA = "0xAD62E4")]
		internal void DeleteVertex(ref Otri deltri)
		{
		}

		[Token(Token = "0x6000A5A")]
		[Address(RVA = "0xAD666C", Offset = "0xAD666C", VA = "0xAD666C")]
		internal void UndoVertex()
		{
		}

		[Token(Token = "0x6000A5B")]
		[Address(RVA = "0xAD65D8", Offset = "0xAD65D8", VA = "0xAD65D8")]
		internal void TriangleDealloc(Triangle dyingtriangle)
		{
		}

		[Token(Token = "0x6000A5C")]
		[Address(RVA = "0xAD6574", Offset = "0xAD6574", VA = "0xAD6574")]
		internal void VertexDealloc(TriangleNet.Geometry.Vertex dyingvertex)
		{
		}

		[Token(Token = "0x6000A5D")]
		[Address(RVA = "0xAD69C0", Offset = "0xAD69C0", VA = "0xAD69C0")]
		internal void SubsegDealloc(Segment dyingsubseg)
		{
		}
	}
	[Token(Token = "0x20001EE")]
	public static class MeshValidator
	{
		[Token(Token = "0x6000A66")]
		[Address(RVA = "0xAD6C00", Offset = "0xAD6C00", VA = "0xAD6C00")]
		public static bool IsConsistent(Mesh mesh)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A67")]
		[Address(RVA = "0xAD7510", Offset = "0xAD7510", VA = "0xAD7510")]
		public static bool IsDelaunay(Mesh mesh)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A68")]
		[Address(RVA = "0xAD7C54", Offset = "0xAD7C54", VA = "0xAD7C54")]
		public static bool IsConstrainedDelaunay(Mesh mesh)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A69")]
		[Address(RVA = "0xAD7518", Offset = "0xAD7518", VA = "0xAD7518")]
		private static bool IsDelaunay(Mesh mesh, bool constrained)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20001EF")]
	internal class NewLocation
	{
		[Token(Token = "0x4000DF7")]
		private const double EPS = 1E-50;

		[Token(Token = "0x4000DF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Mesh mesh;

		[Token(Token = "0x4000DF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Behavior behavior;

		[Token(Token = "0x4000DFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private double[] petalx;

		[Token(Token = "0x4000DFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private double[] petaly;

		[Token(Token = "0x4000DFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private double[] petalr;

		[Token(Token = "0x4000DFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private double[] wedges;

		[Token(Token = "0x4000DFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private double[] initialConvexPoly;

		[Token(Token = "0x4000DFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private double[] points_p;

		[Token(Token = "0x4000E00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private double[] points_q;

		[Token(Token = "0x4000E01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private double[] points_r;

		[Token(Token = "0x4000E02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private double[] poly1;

		[Token(Token = "0x4000E03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private double[] poly2;

		[Token(Token = "0x4000E04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private double[][] polys;

		[Token(Token = "0x6000A6A")]
		[Address(RVA = "0xAD7C5C", Offset = "0xAD7C5C", VA = "0xAD7C5C")]
		public NewLocation(Mesh mesh)
		{
		}

		[Token(Token = "0x6000A6B")]
		[Address(RVA = "0xAD7E20", Offset = "0xAD7E20", VA = "0xAD7E20")]
		public Point FindLocation(TriangleNet.Geometry.Vertex org, TriangleNet.Geometry.Vertex dest, TriangleNet.Geometry.Vertex apex, ref double xi, ref double eta, bool offcenter, Otri badotri)
		{
			return null;
		}

		[Token(Token = "0x6000A6C")]
		[Address(RVA = "0xAD7E60", Offset = "0xAD7E60", VA = "0xAD7E60")]
		private Point FindNewLocationWithoutMaxAngle(TriangleNet.Geometry.Vertex torg, TriangleNet.Geometry.Vertex tdest, TriangleNet.Geometry.Vertex tapex, ref double xi, ref double eta, bool offcenter, Otri badotri)
		{
			return null;
		}

		[Token(Token = "0x6000A6D")]
		[Address(RVA = "0xAD8DFC", Offset = "0xAD8DFC", VA = "0xAD8DFC")]
		private Point FindNewLocation(TriangleNet.Geometry.Vertex torg, TriangleNet.Geometry.Vertex tdest, TriangleNet.Geometry.Vertex tapex, ref double xi, ref double eta, bool offcenter, Otri badotri)
		{
			return null;
		}

		[Token(Token = "0x6000A6E")]
		[Address(RVA = "0xADAA4C", Offset = "0xADAA4C", VA = "0xADAA4C")]
		private int LongestShortestEdge(double aodist, double dadist, double dodist)
		{
			return default(int);
		}

		[Token(Token = "0x6000A6F")]
		[Address(RVA = "0xADAAD8", Offset = "0xADAAD8", VA = "0xADAAD8")]
		private int DoSmoothing(Otri badotri, TriangleNet.Geometry.Vertex torg, TriangleNet.Geometry.Vertex tdest, TriangleNet.Geometry.Vertex tapex, ref double[] newloc)
		{
			return default(int);
		}

		[Token(Token = "0x6000A70")]
		[Address(RVA = "0xADBCC4", Offset = "0xADBCC4", VA = "0xADBCC4")]
		private int GetStarPoints(Otri badotri, TriangleNet.Geometry.Vertex p, TriangleNet.Geometry.Vertex q, TriangleNet.Geometry.Vertex r, int whichPoint, ref double[] points)
		{
			return default(int);
		}

		[Token(Token = "0x6000A71")]
		[Address(RVA = "0xADAEEC", Offset = "0xADAEEC", VA = "0xADAEEC")]
		private bool GetNeighborsVertex(Otri badotri, double first_x, double first_y, double second_x, double second_y, ref double[] thirdpoint, ref Otri neighotri)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A72")]
		[Address(RVA = "0xADC124", Offset = "0xADC124", VA = "0xADC124")]
		private bool GetWedgeIntersectionWithoutMaxAngle(int numpoints, double[] points, ref double[] newloc)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A73")]
		[Address(RVA = "0xADCE50", Offset = "0xADCE50", VA = "0xADCE50")]
		private bool GetWedgeIntersection(int numpoints, double[] points, ref double[] newloc)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A74")]
		[Address(RVA = "0xADBF6C", Offset = "0xADBF6C", VA = "0xADBF6C")]
		private bool ValidPolygonAngles(int numpoints, double[] points)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A75")]
		[Address(RVA = "0xADED68", Offset = "0xADED68", VA = "0xADED68")]
		private bool IsBadPolygonAngle(double x1, double y1, double x2, double y2, double x3, double y3)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A76")]
		[Address(RVA = "0xADB884", Offset = "0xADB884", VA = "0xADB884")]
		private void LineLineIntersection(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4, ref double[] p)
		{
		}

		[Token(Token = "0x6000A77")]
		[Address(RVA = "0xADEA24", Offset = "0xADEA24", VA = "0xADEA24")]
		private int HalfPlaneIntersection(int numvertices, ref double[] convexPoly, double x1, double y1, double x2, double y2)
		{
			return default(int);
		}

		[Token(Token = "0x6000A78")]
		[Address(RVA = "0xADEE6C", Offset = "0xADEE6C", VA = "0xADEE6C")]
		private int SplitConvexPolygon(int numvertices, double[] convexPoly, double x1, double y1, double x2, double y2, ref double[][] polys)
		{
			return default(int);
		}

		[Token(Token = "0x6000A79")]
		[Address(RVA = "0xADF994", Offset = "0xADF994", VA = "0xADF994")]
		private int LinePointLocation(double x1, double y1, double x2, double y2, double x, double y)
		{
			return default(int);
		}

		[Token(Token = "0x6000A7A")]
		[Address(RVA = "0xADF7C4", Offset = "0xADF7C4", VA = "0xADF7C4")]
		private void LineLineSegmentIntersection(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4, ref double[] p)
		{
		}

		[Token(Token = "0x6000A7B")]
		[Address(RVA = "0xADECB8", Offset = "0xADECB8", VA = "0xADECB8")]
		private void FindPolyCentroid(int numpoints, double[] points, ref double[] centroid)
		{
		}

		[Token(Token = "0x6000A7C")]
		[Address(RVA = "0xADB374", Offset = "0xADB374", VA = "0xADB374")]
		private void CircleLineIntersection(double x1, double y1, double x2, double y2, double x3, double y3, double r, ref double[] p)
		{
		}

		[Token(Token = "0x6000A7D")]
		[Address(RVA = "0xADB5C8", Offset = "0xADB5C8", VA = "0xADB5C8")]
		private bool ChooseCorrectPoint(double x1, double y1, double x2, double y2, double x3, double y3, bool isObtuse)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A7E")]
		[Address(RVA = "0xADB608", Offset = "0xADB608", VA = "0xADB608")]
		private void PointBetweenPoints(double x1, double y1, double x2, double y2, double x, double y, ref double[] p)
		{
		}

		[Token(Token = "0x6000A7F")]
		[Address(RVA = "0xADB6CC", Offset = "0xADB6CC", VA = "0xADB6CC")]
		private bool IsBadTriangleAngle(double x1, double y1, double x2, double y2, double x3, double y3)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A80")]
		[Address(RVA = "0xADBA40", Offset = "0xADBA40", VA = "0xADBA40")]
		private double MinDistanceToNeighbor(double newlocX, double newlocY, ref Otri searchtri)
		{
			return default(double);
		}
	}
	[Token(Token = "0x20001F0")]
	public static class RobustPredicates
	{
		[Token(Token = "0x4000E05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static double epsilon;

		[Token(Token = "0x4000E06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static double splitter;

		[Token(Token = "0x4000E07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static double resulterrbound;

		[Token(Token = "0x4000E08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static double ccwerrboundA;

		[Token(Token = "0x4000E09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static double ccwerrboundB;

		[Token(Token = "0x4000E0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static double ccwerrboundC;

		[Token(Token = "0x4000E0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static double iccerrboundA;

		[Token(Token = "0x4000E0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static double iccerrboundB;

		[Token(Token = "0x4000E0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private static double iccerrboundC;

		[Token(Token = "0x6000A81")]
		[Address(RVA = "0x9A9694", Offset = "0x9A9694", VA = "0x9A9694")]
		public static void ExactInit()
		{
		}

		[Token(Token = "0x6000A82")]
		[Address(RVA = "0x9A97C4", Offset = "0x9A97C4", VA = "0x9A97C4")]
		public static double CounterClockwise(Point pa, Point pb, Point pc)
		{
			return default(double);
		}

		[Token(Token = "0x6000A83")]
		[Address(RVA = "0x9AA07C", Offset = "0x9AA07C", VA = "0x9AA07C")]
		public static double InCircle(Point pa, Point pb, Point pc, Point pd)
		{
			return default(double);
		}

		[Token(Token = "0x6000A84")]
		[Address(RVA = "0x9AD30C", Offset = "0x9AD30C", VA = "0x9AD30C")]
		public static double NonRegular(Point pa, Point pb, Point pc, Point pd)
		{
			return default(double);
		}

		[Token(Token = "0x6000A85")]
		[Address(RVA = "0x9AD310", Offset = "0x9AD310", VA = "0x9AD310")]
		public static Point FindCircumcenter(Point org, Point dest, Point apex, ref double xi, ref double eta, double offconstant)
		{
			return null;
		}

		[Token(Token = "0x6000A86")]
		[Address(RVA = "0x9AD64C", Offset = "0x9AD64C", VA = "0x9AD64C")]
		public static Point FindCircumcenter(Point org, Point dest, Point apex, ref double xi, ref double eta)
		{
			return null;
		}

		[Token(Token = "0x6000A87")]
		[Address(RVA = "0x9AD844", Offset = "0x9AD844", VA = "0x9AD844")]
		private static int FastExpansionSumZeroElim(int elen, double[] e, int flen, double[] f, double[] h)
		{
			return default(int);
		}

		[Token(Token = "0x6000A88")]
		[Address(RVA = "0x9ADB10", Offset = "0x9ADB10", VA = "0x9ADB10")]
		private static int ScaleExpansionZeroElim(int elen, double[] e, double b, double[] h)
		{
			return default(int);
		}

		[Token(Token = "0x6000A89")]
		[Address(RVA = "0x9ADCFC", Offset = "0x9ADCFC", VA = "0x9ADCFC")]
		private static double Estimate(int elen, double[] e)
		{
			return default(double);
		}

		[Token(Token = "0x6000A8A")]
		[Address(RVA = "0x9A995C", Offset = "0x9A995C", VA = "0x9A995C")]
		private static double CounterClockwiseAdapt(Point pa, Point pb, Point pc, double detsum)
		{
			return default(double);
		}

		[Token(Token = "0x6000A8B")]
		[Address(RVA = "0x9AA314", Offset = "0x9AA314", VA = "0x9AA314")]
		private static double InCircleAdapt(Point pa, Point pb, Point pc, Point pd, double permanent)
		{
			return default(double);
		}
	}
	[Token(Token = "0x20001F1")]
	internal class Sampler
	{
		[Token(Token = "0x4000E0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static System.Random rand;

		[Token(Token = "0x4000E0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int samples;

		[Token(Token = "0x4000E10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private int triangleCount;

		[Token(Token = "0x4000E11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static int samplefactor;

		[Token(Token = "0x4000E12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int[] keys;

		[Token(Token = "0x6000A8C")]
		[Address(RVA = "0x9ADD54", Offset = "0x9ADD54", VA = "0x9ADD54")]
		public void Reset()
		{
		}

		[Token(Token = "0x6000A8D")]
		[Address(RVA = "0x9ADD64", Offset = "0x9ADD64", VA = "0x9ADD64")]
		public void Update(Mesh mesh)
		{
		}

		[Token(Token = "0x6000A8E")]
		[Address(RVA = "0x9ADD6C", Offset = "0x9ADD6C", VA = "0x9ADD6C")]
		public void Update(Mesh mesh, bool forceUpdate)
		{
		}

		[Token(Token = "0x6000A8F")]
		[Address(RVA = "0x9ADEA8", Offset = "0x9ADEA8", VA = "0x9ADEA8")]
		public int[] GetSamples(Mesh mesh)
		{
			return null;
		}

		[Token(Token = "0x6000A90")]
		[Address(RVA = "0x9AE0C4", Offset = "0x9AE0C4", VA = "0x9AE0C4")]
		public Sampler()
		{
		}
	}
	[Token(Token = "0x20001F2")]
	public static class StringExtensions
	{
		[Token(Token = "0x6000A92")]
		[Address(RVA = "0x9AE1C0", Offset = "0x9AE1C0", VA = "0x9AE1C0")]
		public static bool IsNullOrWhiteSpace(this string value)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20001F3")]
	internal class TriangleLocator
	{
		[Token(Token = "0x4000E13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Sampler sampler;

		[Token(Token = "0x4000E14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Mesh mesh;

		[Token(Token = "0x4000E15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal Otri recenttri;

		[Token(Token = "0x6000A93")]
		[Address(RVA = "0x9AE270", Offset = "0x9AE270", VA = "0x9AE270")]
		public TriangleLocator(Mesh mesh)
		{
		}

		[Token(Token = "0x6000A94")]
		[Address(RVA = "0x9AE308", Offset = "0x9AE308", VA = "0x9AE308")]
		public void Update(ref Otri otri)
		{
		}

		[Token(Token = "0x6000A95")]
		[Address(RVA = "0x9AE374", Offset = "0x9AE374", VA = "0x9AE374")]
		public void Reset()
		{
		}

		[Token(Token = "0x6000A96")]
		[Address(RVA = "0x9AE380", Offset = "0x9AE380", VA = "0x9AE380")]
		public LocateResult PreciseLocate(Point searchpoint, ref Otri searchtri, bool stopatsubsegment)
		{
			return default(LocateResult);
		}

		[Token(Token = "0x6000A97")]
		[Address(RVA = "0x9AEA60", Offset = "0x9AEA60", VA = "0x9AEA60")]
		public LocateResult Locate(Point searchpoint, ref Otri searchtri)
		{
			return default(LocateResult);
		}
	}
}
namespace TriangleNet.Voronoi
{
	[Token(Token = "0x20001F4")]
	public class BoundedVoronoi : VoronoiBase
	{
		[Token(Token = "0x4000E16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int offset;

		[Token(Token = "0x6000A98")]
		[Address(RVA = "0x9AEE2C", Offset = "0x9AEE2C", VA = "0x9AEE2C")]
		public BoundedVoronoi(Mesh mesh)
		{
		}

		[Token(Token = "0x6000A99")]
		[Address(RVA = "0x9AEF14", Offset = "0x9AEF14", VA = "0x9AEF14")]
		private void PostProcess()
		{
		}

		[Token(Token = "0x6000A9A")]
		[Address(RVA = "0x9AF2EC", Offset = "0x9AF2EC", VA = "0x9AF2EC")]
		private void HandleCase1(HalfEdge edge, TriangleNet.Geometry.Vertex v1, TriangleNet.Geometry.Vertex v2)
		{
		}

		[Token(Token = "0x6000A9B")]
		[Address(RVA = "0x9AF61C", Offset = "0x9AF61C", VA = "0x9AF61C")]
		private void HandleCase2(HalfEdge edge, TriangleNet.Geometry.Vertex v1, TriangleNet.Geometry.Vertex v2)
		{
		}

		[Token(Token = "0x6000A9C")]
		[Address(RVA = "0x9AF94C", Offset = "0x9AF94C", VA = "0x9AF94C")]
		private static void IntersectSegments(Point p0, Point p1, Point q0, Point q1, ref Point i0)
		{
		}

		[Token(Token = "0x6000A9D")]
		[Address(RVA = "0x9AF9C4", Offset = "0x9AF9C4", VA = "0x9AF9C4", Slot = "4")]
		protected override IEnumerable<IEdge> EnumerateEdges()
		{
			return null;
		}
	}
	[Token(Token = "0x20001F5")]
	public class StandardVoronoi : VoronoiBase
	{
		[Token(Token = "0x6000A9E")]
		[Address(RVA = "0x9AFD50", Offset = "0x9AFD50", VA = "0x9AFD50")]
		public StandardVoronoi(Mesh mesh)
		{
		}

		[Token(Token = "0x6000A9F")]
		[Address(RVA = "0x9AFD88", Offset = "0x9AFD88", VA = "0x9AFD88")]
		public StandardVoronoi(Mesh mesh, Rectangle box)
		{
		}

		[Token(Token = "0x6000AA0")]
		[Address(RVA = "0x9AFDB8", Offset = "0x9AFDB8", VA = "0x9AFDB8")]
		private void PostProcess(Rectangle box)
		{
		}
	}
	[Token(Token = "0x20001F6")]
	public abstract class VoronoiBase : DcelMesh
	{
		[Token(Token = "0x6000AA1")]
		[Address(RVA = "0x9AEED0", Offset = "0x9AEED0", VA = "0x9AEED0")]
		protected VoronoiBase(Mesh mesh, bool generate)
		{
		}

		[Token(Token = "0x6000AA2")]
		[Address(RVA = "0x9AFDBC", Offset = "0x9AFDBC", VA = "0x9AFDBC")]
		protected void Generate(Mesh mesh)
		{
		}

		[Token(Token = "0x6000AA3")]
		[Address(RVA = "0x9B01B4", Offset = "0x9B01B4", VA = "0x9B01B4")]
		protected List<HalfEdge>[] ComputeVertices(Mesh mesh, TriangleNet.Topology.DCEL.Vertex[] vertices)
		{
			return null;
		}

		[Token(Token = "0x6000AA4")]
		[Address(RVA = "0x9B0544", Offset = "0x9B0544", VA = "0x9B0544")]
		protected void ComputeEdges(Mesh mesh, TriangleNet.Topology.DCEL.Vertex[] vertices, Face[] faces, List<HalfEdge>[] map)
		{
		}

		[Token(Token = "0x6000AA5")]
		[Address(RVA = "0x9B0E08", Offset = "0x9B0E08", VA = "0x9B0E08")]
		protected void ConnectEdges(List<HalfEdge>[] map)
		{
		}
	}
}
namespace TriangleNet.Voronoi.Legacy
{
	[Token(Token = "0x20001F7")]
	public class BoundedVoronoiLegacy : IVoronoi
	{
		[Token(Token = "0x4000E17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Mesh mesh;

		[Token(Token = "0x4000E18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Point[] points;

		[Token(Token = "0x4000E19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<VoronoiRegion> regions;

		[Token(Token = "0x4000E1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<Point> segPoints;

		[Token(Token = "0x4000E1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int segIndex;

		[Token(Token = "0x4000E1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Dictionary<int, Segment> subsegMap;

		[Token(Token = "0x4000E1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool includeBoundary;

		[Token(Token = "0x170000CD")]
		public Point[] Points
		{
			[Token(Token = "0x6000AA8")]
			[Address(RVA = "0x9B15D4", Offset = "0x9B15D4", VA = "0x9B15D4", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000CE")]
		public ICollection<VoronoiRegion> Regions
		{
			[Token(Token = "0x6000AA9")]
			[Address(RVA = "0x9B15DC", Offset = "0x9B15DC", VA = "0x9B15DC", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000CF")]
		public IEnumerable<IEdge> Edges
		{
			[Token(Token = "0x6000AAA")]
			[Address(RVA = "0x9B15E4", Offset = "0x9B15E4", VA = "0x9B15E4", Slot = "6")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000AA6")]
		[Address(RVA = "0x9B10DC", Offset = "0x9B10DC", VA = "0x9B10DC")]
		public BoundedVoronoiLegacy(Mesh mesh)
		{
		}

		[Token(Token = "0x6000AA7")]
		[Address(RVA = "0x9B10E4", Offset = "0x9B10E4", VA = "0x9B10E4")]
		public BoundedVoronoiLegacy(Mesh mesh, bool includeBoundary)
		{
		}

		[Token(Token = "0x6000AAB")]
		[Address(RVA = "0x9B112C", Offset = "0x9B112C", VA = "0x9B112C")]
		private void Generate()
		{
		}

		[Token(Token = "0x6000AAC")]
		[Address(RVA = "0x9B1E68", Offset = "0x9B1E68", VA = "0x9B1E68")]
		private void ComputeCircumCenters()
		{
		}

		[Token(Token = "0x6000AAD")]
		[Address(RVA = "0x9B20B8", Offset = "0x9B20B8", VA = "0x9B20B8")]
		private void TagBlindTriangles()
		{
		}

		[Token(Token = "0x6000AAE")]
		[Address(RVA = "0x9B39B8", Offset = "0x9B39B8", VA = "0x9B39B8")]
		private bool TriangleIsBlinded(ref Otri tri, ref Osub seg)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AAF")]
		[Address(RVA = "0x9B2668", Offset = "0x9B2668", VA = "0x9B2668")]
		private void ConstructCell(TriangleNet.Geometry.Vertex vertex)
		{
		}

		[Token(Token = "0x6000AB0")]
		[Address(RVA = "0x9B2CA8", Offset = "0x9B2CA8", VA = "0x9B2CA8")]
		private void ConstructBoundaryCell(TriangleNet.Geometry.Vertex vertex)
		{
		}

		[Token(Token = "0x6000AB1")]
		[Address(RVA = "0x9B3B4C", Offset = "0x9B3B4C", VA = "0x9B3B4C")]
		private bool SegmentsIntersect(Point p1, Point p2, Point p3, Point p4, out Point p, bool strictIntersect)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AB2")]
		[Address(RVA = "0x9B15E8", Offset = "0x9B15E8", VA = "0x9B15E8")]
		private IEnumerable<IEdge> EnumerateEdges()
		{
			return null;
		}
	}
	[Token(Token = "0x20001F8")]
	public interface IVoronoi
	{
		[Token(Token = "0x170000D0")]
		Point[] Points
		{
			[Token(Token = "0x6000AB3")]
			get;
		}

		[Token(Token = "0x170000D1")]
		ICollection<VoronoiRegion> Regions
		{
			[Token(Token = "0x6000AB4")]
			get;
		}

		[Token(Token = "0x170000D2")]
		IEnumerable<IEdge> Edges
		{
			[Token(Token = "0x6000AB5")]
			get;
		}
	}
	[Token(Token = "0x20001F9")]
	[Obsolete("Use TriangleNet.Voronoi.StandardVoronoi class instead.")]
	public class SimpleVoronoi : IVoronoi
	{
		[Token(Token = "0x4000E1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Mesh mesh;

		[Token(Token = "0x4000E1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Point[] points;

		[Token(Token = "0x4000E20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Dictionary<int, VoronoiRegion> regions;

		[Token(Token = "0x4000E21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Dictionary<int, Point> rayPoints;

		[Token(Token = "0x4000E22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int rayIndex;

		[Token(Token = "0x4000E23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Rectangle bounds;

		[Token(Token = "0x170000D3")]
		public Point[] Points
		{
			[Token(Token = "0x6000AB7")]
			[Address(RVA = "0x9B4764", Offset = "0x9B4764", VA = "0x9B4764", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000D4")]
		public ICollection<VoronoiRegion> Regions
		{
			[Token(Token = "0x6000AB8")]
			[Address(RVA = "0x9B476C", Offset = "0x9B476C", VA = "0x9B476C", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000D5")]
		public IEnumerable<IEdge> Edges
		{
			[Token(Token = "0x6000AB9")]
			[Address(RVA = "0x9B47BC", Offset = "0x9B47BC", VA = "0x9B47BC", Slot = "6")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000AB6")]
		[Address(RVA = "0x9B4260", Offset = "0x9B4260", VA = "0x9B4260")]
		public SimpleVoronoi(Mesh mesh)
		{
		}

		[Token(Token = "0x6000ABA")]
		[Address(RVA = "0x9B4298", Offset = "0x9B4298", VA = "0x9B4298")]
		private void Generate()
		{
		}

		[Token(Token = "0x6000ABB")]
		[Address(RVA = "0x9B5050", Offset = "0x9B5050", VA = "0x9B5050")]
		private void ComputeCircumCenters()
		{
		}

		[Token(Token = "0x6000ABC")]
		[Address(RVA = "0x9B5330", Offset = "0x9B5330", VA = "0x9B5330")]
		private void ConstructCell(VoronoiRegion region)
		{
		}

		[Token(Token = "0x6000ABD")]
		[Address(RVA = "0x9B5C70", Offset = "0x9B5C70", VA = "0x9B5C70")]
		private bool BoxRayIntersection(Point pt, double dx, double dy, out Point intersect)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ABE")]
		[Address(RVA = "0x9B47C0", Offset = "0x9B47C0", VA = "0x9B47C0")]
		private IEnumerable<IEdge> EnumerateEdges()
		{
			return null;
		}
	}
	[Token(Token = "0x20001FA")]
	public class VoronoiRegion
	{
		[Token(Token = "0x4000E24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int id;

		[Token(Token = "0x4000E25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Point generator;

		[Token(Token = "0x4000E26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<Point> vertices;

		[Token(Token = "0x4000E27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool bounded;

		[Token(Token = "0x4000E28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Dictionary<int, VoronoiRegion> neighbors;

		[Token(Token = "0x170000D6")]
		public int ID
		{
			[Token(Token = "0x6000ABF")]
			[Address(RVA = "0x9B5E20", Offset = "0x9B5E20", VA = "0x9B5E20")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000D7")]
		public Point Generator
		{
			[Token(Token = "0x6000AC0")]
			[Address(RVA = "0x9B5E28", Offset = "0x9B5E28", VA = "0x9B5E28")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000D8")]
		public ICollection<Point> Vertices
		{
			[Token(Token = "0x6000AC1")]
			[Address(RVA = "0x9B5E30", Offset = "0x9B5E30", VA = "0x9B5E30")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000D9")]
		public bool Bounded
		{
			[Token(Token = "0x6000AC2")]
			[Address(RVA = "0x9B5E38", Offset = "0x9B5E38", VA = "0x9B5E38")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000AC3")]
			[Address(RVA = "0x9B5E40", Offset = "0x9B5E40", VA = "0x9B5E40")]
			set
			{
			}
		}

		[Token(Token = "0x6000AC4")]
		[Address(RVA = "0x9B3D80", Offset = "0x9B3D80", VA = "0x9B3D80")]
		public VoronoiRegion(TriangleNet.Geometry.Vertex generator)
		{
		}

		[Token(Token = "0x6000AC5")]
		[Address(RVA = "0x9B5E4C", Offset = "0x9B5E4C", VA = "0x9B5E4C")]
		public void Add(Point point)
		{
		}

		[Token(Token = "0x6000AC6")]
		[Address(RVA = "0x9B4060", Offset = "0x9B4060", VA = "0x9B4060")]
		public void Add(List<Point> points)
		{
		}

		[Token(Token = "0x6000AC7")]
		[Address(RVA = "0x9B5EFC", Offset = "0x9B5EFC", VA = "0x9B5EFC")]
		public VoronoiRegion GetNeighbor(Point p)
		{
			return null;
		}

		[Token(Token = "0x6000AC8")]
		[Address(RVA = "0x9B5C08", Offset = "0x9B5C08", VA = "0x9B5C08")]
		internal void AddNeighbor(int id, VoronoiRegion neighbor)
		{
		}

		[Token(Token = "0x6000AC9")]
		[Address(RVA = "0x9B5F78", Offset = "0x9B5F78", VA = "0x9B5F78", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
}
namespace TriangleNet.Topology
{
	[Token(Token = "0x20001FB")]
	internal struct Osub
	{
		[Token(Token = "0x4000E29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Segment seg;

		[Token(Token = "0x4000E2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int orient;

		[Token(Token = "0x6000ACA")]
		[Address(RVA = "0x9B5FFC", Offset = "0x9B5FFC", VA = "0x9B5FFC", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000ACB")]
		[Address(RVA = "0x9B609C", Offset = "0x9B609C", VA = "0x9B609C")]
		public void Sym(ref Osub o2)
		{
		}

		[Token(Token = "0x6000ACC")]
		[Address(RVA = "0x9B39A4", Offset = "0x9B39A4", VA = "0x9B39A4")]
		public void SymSelf()
		{
		}

		[Token(Token = "0x6000ACD")]
		[Address(RVA = "0x9B60DC", Offset = "0x9B60DC", VA = "0x9B60DC")]
		public void Pivot(ref Osub o2)
		{
		}

		[Token(Token = "0x6000ACE")]
		[Address(RVA = "0x9B6128", Offset = "0x9B6128", VA = "0x9B6128")]
		public void PivotSelf()
		{
		}

		[Token(Token = "0x6000ACF")]
		[Address(RVA = "0x9B616C", Offset = "0x9B616C", VA = "0x9B616C")]
		public void Next(ref Osub o2)
		{
		}

		[Token(Token = "0x6000AD0")]
		[Address(RVA = "0x9B61C0", Offset = "0x9B61C0", VA = "0x9B61C0")]
		public void NextSelf()
		{
		}

		[Token(Token = "0x6000AD1")]
		[Address(RVA = "0x9B3ACC", Offset = "0x9B3ACC", VA = "0x9B3ACC")]
		public TriangleNet.Geometry.Vertex Org()
		{
			return null;
		}

		[Token(Token = "0x6000AD2")]
		[Address(RVA = "0x9B3B08", Offset = "0x9B3B08", VA = "0x9B3B08")]
		public TriangleNet.Geometry.Vertex Dest()
		{
			return null;
		}

		[Token(Token = "0x6000AD3")]
		[Address(RVA = "0x9B620C", Offset = "0x9B620C", VA = "0x9B620C")]
		public void SetOrg(TriangleNet.Geometry.Vertex ptr)
		{
		}

		[Token(Token = "0x6000AD4")]
		[Address(RVA = "0x9B627C", Offset = "0x9B627C", VA = "0x9B627C")]
		public void SetDest(TriangleNet.Geometry.Vertex ptr)
		{
		}

		[Token(Token = "0x6000AD5")]
		[Address(RVA = "0x9B62F4", Offset = "0x9B62F4", VA = "0x9B62F4")]
		public TriangleNet.Geometry.Vertex SegOrg()
		{
			return null;
		}

		[Token(Token = "0x6000AD6")]
		[Address(RVA = "0x9B6334", Offset = "0x9B6334", VA = "0x9B6334")]
		public TriangleNet.Geometry.Vertex SegDest()
		{
			return null;
		}

		[Token(Token = "0x6000AD7")]
		[Address(RVA = "0x9B6378", Offset = "0x9B6378", VA = "0x9B6378")]
		public void SetSegOrg(TriangleNet.Geometry.Vertex ptr)
		{
		}

		[Token(Token = "0x6000AD8")]
		[Address(RVA = "0x9B63EC", Offset = "0x9B63EC", VA = "0x9B63EC")]
		public void SetSegDest(TriangleNet.Geometry.Vertex ptr)
		{
		}

		[Token(Token = "0x6000AD9")]
		[Address(RVA = "0x9B6464", Offset = "0x9B6464", VA = "0x9B6464")]
		public int Mark()
		{
			return default(int);
		}

		[Token(Token = "0x6000ADA")]
		[Address(RVA = "0x9B6480", Offset = "0x9B6480", VA = "0x9B6480")]
		public void SetMark(int value)
		{
		}

		[Token(Token = "0x6000ADB")]
		[Address(RVA = "0x9B649C", Offset = "0x9B649C", VA = "0x9B649C")]
		public void Bond(ref Osub o2)
		{
		}

		[Token(Token = "0x6000ADC")]
		[Address(RVA = "0x9B6524", Offset = "0x9B6524", VA = "0x9B6524")]
		public void Dissolve()
		{
		}

		[Token(Token = "0x6000ADD")]
		[Address(RVA = "0x9B65B0", Offset = "0x9B65B0", VA = "0x9B65B0")]
		public void Copy(ref Osub o2)
		{
		}

		[Token(Token = "0x6000ADE")]
		[Address(RVA = "0x9B3F60", Offset = "0x9B3F60", VA = "0x9B3F60")]
		public bool Equal(Osub o2)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ADF")]
		[Address(RVA = "0x9B65E8", Offset = "0x9B65E8", VA = "0x9B65E8")]
		public static bool IsDead(Segment sub)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AE0")]
		[Address(RVA = "0x9B661C", Offset = "0x9B661C", VA = "0x9B661C")]
		public static void Kill(Segment sub)
		{
		}

		[Token(Token = "0x6000AE1")]
		[Address(RVA = "0x9B3958", Offset = "0x9B3958", VA = "0x9B3958")]
		public void TriPivot(ref Otri ot)
		{
		}

		[Token(Token = "0x6000AE2")]
		[Address(RVA = "0x9B6670", Offset = "0x9B6670", VA = "0x9B6670")]
		public void TriDissolve()
		{
		}
	}
	[Token(Token = "0x20001FC")]
	internal struct Otri
	{
		[Token(Token = "0x4000E2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Triangle triangle;

		[Token(Token = "0x4000E2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int orient;

		[Token(Token = "0x4000E2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int[] plus1Mod3;

		[Token(Token = "0x4000E2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly int[] minus1Mod3;

		[Token(Token = "0x6000AE3")]
		[Address(RVA = "0x9B66FC", Offset = "0x9B66FC", VA = "0x9B66FC", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000AE4")]
		[Address(RVA = "0x9AE990", Offset = "0x9AE990", VA = "0x9AE990")]
		public void Sym(ref Otri o2)
		{
		}

		[Token(Token = "0x6000AE5")]
		[Address(RVA = "0x9AEDE4", Offset = "0x9AEDE4", VA = "0x9AEDE4")]
		public void SymSelf()
		{
		}

		[Token(Token = "0x6000AE6")]
		[Address(RVA = "0x9AE8F0", Offset = "0x9AE8F0", VA = "0x9AE8F0")]
		public void Lnext(ref Otri o2)
		{
		}

		[Token(Token = "0x6000AE7")]
		[Address(RVA = "0x9AE7CC", Offset = "0x9AE7CC", VA = "0x9AE7CC")]
		public void LnextSelf()
		{
		}

		[Token(Token = "0x6000AE8")]
		[Address(RVA = "0x9AE850", Offset = "0x9AE850", VA = "0x9AE850")]
		public void Lprev(ref Otri o2)
		{
		}

		[Token(Token = "0x6000AE9")]
		[Address(RVA = "0x9AE748", Offset = "0x9AE748", VA = "0x9AE748")]
		public void LprevSelf()
		{
		}

		[Token(Token = "0x6000AEA")]
		[Address(RVA = "0x9B3E8C", Offset = "0x9B3E8C", VA = "0x9B3E8C")]
		public void Onext(ref Otri o2)
		{
		}

		[Token(Token = "0x6000AEB")]
		[Address(RVA = "0x9B3F84", Offset = "0x9B3F84", VA = "0x9B3F84")]
		public void OnextSelf()
		{
		}

		[Token(Token = "0x6000AEC")]
		[Address(RVA = "0x9B40B8", Offset = "0x9B40B8", VA = "0x9B40B8")]
		public void Oprev(ref Otri o2)
		{
		}

		[Token(Token = "0x6000AED")]
		[Address(RVA = "0x9B41A0", Offset = "0x9B41A0", VA = "0x9B41A0")]
		public void OprevSelf()
		{
		}

		[Token(Token = "0x6000AEE")]
		[Address(RVA = "0x9B679C", Offset = "0x9B679C", VA = "0x9B679C")]
		public void Dnext(ref Otri o2)
		{
		}

		[Token(Token = "0x6000AEF")]
		[Address(RVA = "0x9B6884", Offset = "0x9B6884", VA = "0x9B6884")]
		public void DnextSelf()
		{
		}

		[Token(Token = "0x6000AF0")]
		[Address(RVA = "0x9B6944", Offset = "0x9B6944", VA = "0x9B6944")]
		public void Dprev(ref Otri o2)
		{
		}

		[Token(Token = "0x6000AF1")]
		[Address(RVA = "0x9B6A18", Offset = "0x9B6A18", VA = "0x9B6A18")]
		public void DprevSelf()
		{
		}

		[Token(Token = "0x6000AF2")]
		[Address(RVA = "0x9B6AD0", Offset = "0x9B6AD0", VA = "0x9B6AD0")]
		public void Rnext(ref Otri o2)
		{
		}

		[Token(Token = "0x6000AF3")]
		[Address(RVA = "0x9B6BEC", Offset = "0x9B6BEC", VA = "0x9B6BEC")]
		public void RnextSelf()
		{
		}

		[Token(Token = "0x6000AF4")]
		[Address(RVA = "0x9B6CE0", Offset = "0x9B6CE0", VA = "0x9B6CE0")]
		public void Rprev(ref Otri o2)
		{
		}

		[Token(Token = "0x6000AF5")]
		[Address(RVA = "0x9B6DFC", Offset = "0x9B6DFC", VA = "0x9B6DFC")]
		public void RprevSelf()
		{
		}

		[Token(Token = "0x6000AF6")]
		[Address(RVA = "0x9AE5C4", Offset = "0x9AE5C4", VA = "0x9AE5C4")]
		public TriangleNet.Geometry.Vertex Org()
		{
			return null;
		}

		[Token(Token = "0x6000AF7")]
		[Address(RVA = "0x9AE668", Offset = "0x9AE668", VA = "0x9AE668")]
		public TriangleNet.Geometry.Vertex Dest()
		{
			return null;
		}

		[Token(Token = "0x6000AF8")]
		[Address(RVA = "0x9AE70C", Offset = "0x9AE70C", VA = "0x9AE70C")]
		public TriangleNet.Geometry.Vertex Apex()
		{
			return null;
		}

		[Token(Token = "0x6000AF9")]
		[Address(RVA = "0x9B6EF0", Offset = "0x9B6EF0", VA = "0x9B6EF0")]
		public void SetOrg(TriangleNet.Geometry.Vertex ptr)
		{
		}

		[Token(Token = "0x6000AFA")]
		[Address(RVA = "0x9B6FC8", Offset = "0x9B6FC8", VA = "0x9B6FC8")]
		public void SetDest(TriangleNet.Geometry.Vertex ptr)
		{
		}

		[Token(Token = "0x6000AFB")]
		[Address(RVA = "0x9B70A0", Offset = "0x9B70A0", VA = "0x9B70A0")]
		public void SetApex(TriangleNet.Geometry.Vertex ptr)
		{
		}

		[Token(Token = "0x6000AFC")]
		[Address(RVA = "0x9B7110", Offset = "0x9B7110", VA = "0x9B7110")]
		public void Bond(ref Otri o2)
		{
		}

		[Token(Token = "0x6000AFD")]
		[Address(RVA = "0x9B71E8", Offset = "0x9B71E8", VA = "0x9B71E8")]
		public void Dissolve()
		{
		}

		[Token(Token = "0x6000AFE")]
		[Address(RVA = "0x9AE33C", Offset = "0x9AE33C", VA = "0x9AE33C")]
		public void Copy(ref Otri o2)
		{
		}

		[Token(Token = "0x6000AFF")]
		[Address(RVA = "0x9B403C", Offset = "0x9B403C", VA = "0x9B403C")]
		public bool Equal(Otri o2)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B00")]
		[Address(RVA = "0x9B72A8", Offset = "0x9B72A8", VA = "0x9B72A8")]
		public void Infect()
		{
		}

		[Token(Token = "0x6000B01")]
		[Address(RVA = "0x9B72C8", Offset = "0x9B72C8", VA = "0x9B72C8")]
		public void Uninfect()
		{
		}

		[Token(Token = "0x6000B02")]
		[Address(RVA = "0x9B72E4", Offset = "0x9B72E4", VA = "0x9B72E4")]
		public bool IsInfected()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B03")]
		[Address(RVA = "0x9AEDB0", Offset = "0x9AEDB0", VA = "0x9AEDB0")]
		public static bool IsDead(Triangle tria)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B04")]
		[Address(RVA = "0x9B7300", Offset = "0x9B7300", VA = "0x9B7300")]
		public static void Kill(Triangle tria)
		{
		}

		[Token(Token = "0x6000B05")]
		[Address(RVA = "0x9AEA14", Offset = "0x9AEA14", VA = "0x9AEA14")]
		public void SegPivot(ref Osub os)
		{
		}

		[Token(Token = "0x6000B06")]
		[Address(RVA = "0x9B7354", Offset = "0x9B7354", VA = "0x9B7354")]
		public void SegBond(ref Osub os)
		{
		}

		[Token(Token = "0x6000B07")]
		[Address(RVA = "0x9B73DC", Offset = "0x9B73DC", VA = "0x9B73DC")]
		public void SegDissolve()
		{
		}
	}
	[Token(Token = "0x20001FD")]
	public class Segment : ISegment, IEdge
	{
		[Token(Token = "0x4000E2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static readonly Segment Empty;

		[Token(Token = "0x4000E30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal int hash;

		[Token(Token = "0x4000E31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal Osub[] subsegs;

		[Token(Token = "0x4000E32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal TriangleNet.Geometry.Vertex[] vertices;

		[Token(Token = "0x4000E33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal Otri[] triangles;

		[Token(Token = "0x4000E34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal int boundary;

		[Token(Token = "0x170000DA")]
		public int P0
		{
			[Token(Token = "0x6000B0B")]
			[Address(RVA = "0x9B87E4", Offset = "0x9B87E4", VA = "0x9B87E4", Slot = "6")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000DB")]
		public int P1
		{
			[Token(Token = "0x6000B0C")]
			[Address(RVA = "0x9B8814", Offset = "0x9B8814", VA = "0x9B8814", Slot = "7")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000DC")]
		public int Boundary
		{
			[Token(Token = "0x6000B0D")]
			[Address(RVA = "0x9B8848", Offset = "0x9B8848", VA = "0x9B8848", Slot = "8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000B09")]
		[Address(RVA = "0x9B854C", Offset = "0x9B854C", VA = "0x9B854C")]
		static Segment()
		{
		}

		[Token(Token = "0x6000B0A")]
		[Address(RVA = "0x9B8618", Offset = "0x9B8618", VA = "0x9B8618")]
		public Segment()
		{
		}

		[Token(Token = "0x6000B0E")]
		[Address(RVA = "0x9B8850", Offset = "0x9B8850", VA = "0x9B8850", Slot = "4")]
		public TriangleNet.Geometry.Vertex GetVertex(int index)
		{
			return null;
		}

		[Token(Token = "0x6000B0F")]
		[Address(RVA = "0x9B8880", Offset = "0x9B8880", VA = "0x9B8880", Slot = "5")]
		public ITriangle GetTriangle(int index)
		{
			return null;
		}

		[Token(Token = "0x6000B10")]
		[Address(RVA = "0x9B88C0", Offset = "0x9B88C0", VA = "0x9B88C0", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000B11")]
		[Address(RVA = "0x9B88C8", Offset = "0x9B88C8", VA = "0x9B88C8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20001FE")]
	public class Triangle : ITriangle
	{
		[Token(Token = "0x4000E35")]
		internal const int EmptyID = -1;

		[Token(Token = "0x4000E36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static readonly Triangle Empty;

		[Token(Token = "0x4000E37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal int hash;

		[Token(Token = "0x4000E38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal int id;

		[Token(Token = "0x4000E39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal Otri[] neighbors;

		[Token(Token = "0x4000E3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal TriangleNet.Geometry.Vertex[] vertices;

		[Token(Token = "0x4000E3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal Osub[] subsegs;

		[Token(Token = "0x4000E3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal int region;

		[Token(Token = "0x4000E3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal double area;

		[Token(Token = "0x4000E3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal bool infected;

		[Token(Token = "0x170000DD")]
		public int ID
		{
			[Token(Token = "0x6000B14")]
			[Address(RVA = "0x9B8D88", Offset = "0x9B8D88", VA = "0x9B8D88", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000DE")]
		public int P0
		{
			[Token(Token = "0x6000B15")]
			[Address(RVA = "0x9B8D90", Offset = "0x9B8D90", VA = "0x9B8D90", Slot = "5")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000DF")]
		public int P1
		{
			[Token(Token = "0x6000B16")]
			[Address(RVA = "0x9B8DF0", Offset = "0x9B8DF0", VA = "0x9B8DF0", Slot = "6")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000E0")]
		public int P2
		{
			[Token(Token = "0x6000B18")]
			[Address(RVA = "0x9B8E88", Offset = "0x9B8E88", VA = "0x9B8E88", Slot = "7")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000E1")]
		public bool SupportsNeighbors
		{
			[Token(Token = "0x6000B19")]
			[Address(RVA = "0x9B8EF0", Offset = "0x9B8EF0", VA = "0x9B8EF0", Slot = "9")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000E2")]
		public int N0
		{
			[Token(Token = "0x6000B1A")]
			[Address(RVA = "0x9B8EF8", Offset = "0x9B8EF8", VA = "0x9B8EF8", Slot = "10")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000E3")]
		public int N1
		{
			[Token(Token = "0x6000B1B")]
			[Address(RVA = "0x9B8F28", Offset = "0x9B8F28", VA = "0x9B8F28", Slot = "11")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000E4")]
		public int N2
		{
			[Token(Token = "0x6000B1C")]
			[Address(RVA = "0x9B8F5C", Offset = "0x9B8F5C", VA = "0x9B8F5C", Slot = "12")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000E5")]
		public double Area
		{
			[Token(Token = "0x6000B1F")]
			[Address(RVA = "0x9B908C", Offset = "0x9B908C", VA = "0x9B908C", Slot = "15")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6000B20")]
			[Address(RVA = "0x9B9094", Offset = "0x9B9094", VA = "0x9B9094", Slot = "16")]
			set
			{
			}
		}

		[Token(Token = "0x170000E6")]
		public int Region
		{
			[Token(Token = "0x6000B21")]
			[Address(RVA = "0x9B909C", Offset = "0x9B909C", VA = "0x9B909C", Slot = "17")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000B12")]
		[Address(RVA = "0x9B894C", Offset = "0x9B894C", VA = "0x9B894C")]
		static Triangle()
		{
		}

		[Token(Token = "0x6000B13")]
		[Address(RVA = "0x9B8B78", Offset = "0x9B8B78", VA = "0x9B8B78")]
		public Triangle()
		{
		}

		[Token(Token = "0x6000B17")]
		[Address(RVA = "0x9B8E58", Offset = "0x9B8E58", VA = "0x9B8E58", Slot = "8")]
		public TriangleNet.Geometry.Vertex GetVertex(int index)
		{
			return null;
		}

		[Token(Token = "0x6000B1D")]
		[Address(RVA = "0x9B8F90", Offset = "0x9B8F90", VA = "0x9B8F90", Slot = "13")]
		public ITriangle GetNeighbor(int index)
		{
			return null;
		}

		[Token(Token = "0x6000B1E")]
		[Address(RVA = "0x9B8FD0", Offset = "0x9B8FD0", VA = "0x9B8FD0", Slot = "14")]
		public ISegment GetSegment(int index)
		{
			return null;
		}

		[Token(Token = "0x6000B22")]
		[Address(RVA = "0x9B90A4", Offset = "0x9B90A4", VA = "0x9B90A4", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000B23")]
		[Address(RVA = "0x9B90AC", Offset = "0x9B90AC", VA = "0x9B90AC", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
}
namespace TriangleNet.Topology.DCEL
{
	[Token(Token = "0x20001FF")]
	public class DcelMesh
	{
		[Token(Token = "0x4000E3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected List<Vertex> vertices;

		[Token(Token = "0x4000E40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected List<HalfEdge> edges;

		[Token(Token = "0x4000E41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected List<Face> faces;

		[Token(Token = "0x170000E7")]
		public List<Vertex> Vertices
		{
			[Token(Token = "0x6000B26")]
			[Address(RVA = "0x9B9274", Offset = "0x9B9274", VA = "0x9B9274")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000E8")]
		public List<HalfEdge> HalfEdges
		{
			[Token(Token = "0x6000B27")]
			[Address(RVA = "0x9B927C", Offset = "0x9B927C", VA = "0x9B927C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000E9")]
		public List<Face> Faces
		{
			[Token(Token = "0x6000B28")]
			[Address(RVA = "0x9B9284", Offset = "0x9B9284", VA = "0x9B9284")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000EA")]
		public IEnumerable<IEdge> Edges
		{
			[Token(Token = "0x6000B29")]
			[Address(RVA = "0x9B928C", Offset = "0x9B928C", VA = "0x9B928C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B24")]
		[Address(RVA = "0x9B9130", Offset = "0x9B9130", VA = "0x9B9130")]
		public DcelMesh()
		{
		}

		[Token(Token = "0x6000B25")]
		[Address(RVA = "0x9B9138", Offset = "0x9B9138", VA = "0x9B9138")]
		protected DcelMesh(bool initialize)
		{
		}

		[Token(Token = "0x6000B2A")]
		[Address(RVA = "0x9B9298", Offset = "0x9B9298", VA = "0x9B9298")]
		public bool IsConsistent(bool closed = true)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B2B")]
		[Address(RVA = "0x9B96AC", Offset = "0x9B96AC", VA = "0x9B96AC")]
		internal void ResolveBoundaryEdges()
		{
		}

		[Token(Token = "0x6000B2C")]
		[Address(RVA = "0x9B9BEC", Offset = "0x9B9BEC", VA = "0x9B9BEC", Slot = "4")]
		protected virtual IEnumerable<IEdge> EnumerateEdges()
		{
			return null;
		}
	}
	[Token(Token = "0x2000200")]
	public class Face
	{
		[Token(Token = "0x4000E42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Face Empty;

		[Token(Token = "0x4000E43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal int id;

		[Token(Token = "0x4000E44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal Point generator;

		[Token(Token = "0x4000E45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal HalfEdge edge;

		[Token(Token = "0x4000E46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal bool bounded;

		[Token(Token = "0x170000EB")]
		public int ID
		{
			[Token(Token = "0x6000B2E")]
			[Address(RVA = "0x9B9F48", Offset = "0x9B9F48", VA = "0x9B9F48")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000EC")]
		public HalfEdge Edge
		{
			[Token(Token = "0x6000B2F")]
			[Address(RVA = "0x9B9F50", Offset = "0x9B9F50", VA = "0x9B9F50")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B30")]
			[Address(RVA = "0x9B9F58", Offset = "0x9B9F58", VA = "0x9B9F58")]
			set
			{
			}
		}

		[Token(Token = "0x170000ED")]
		public bool Bounded
		{
			[Token(Token = "0x6000B31")]
			[Address(RVA = "0x9B9F60", Offset = "0x9B9F60", VA = "0x9B9F60")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000B32")]
			[Address(RVA = "0x9B9F68", Offset = "0x9B9F68", VA = "0x9B9F68")]
			set
			{
			}
		}

		[Token(Token = "0x6000B2D")]
		[Address(RVA = "0x9B9EB0", Offset = "0x9B9EB0", VA = "0x9B9EB0")]
		static Face()
		{
		}

		[Token(Token = "0x6000B33")]
		[Address(RVA = "0x9B9F40", Offset = "0x9B9F40", VA = "0x9B9F40")]
		public Face(Point generator)
		{
		}

		[Token(Token = "0x6000B34")]
		[Address(RVA = "0x9B9F74", Offset = "0x9B9F74", VA = "0x9B9F74")]
		public Face(Point generator, HalfEdge edge)
		{
		}

		[Token(Token = "0x6000B35")]
		[Address(RVA = "0x9B9FC4", Offset = "0x9B9FC4", VA = "0x9B9FC4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000201")]
	public class HalfEdge
	{
		[Token(Token = "0x4000E47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal int id;

		[Token(Token = "0x4000E48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal Vertex origin;

		[Token(Token = "0x4000E49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal Face face;

		[Token(Token = "0x4000E4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal HalfEdge twin;

		[Token(Token = "0x4000E4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal HalfEdge next;

		[Token(Token = "0x170000EE")]
		public int ID
		{
			[Token(Token = "0x6000B36")]
			[Address(RVA = "0x9BA04C", Offset = "0x9BA04C", VA = "0x9BA04C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000EF")]
		public Vertex Origin
		{
			[Token(Token = "0x6000B37")]
			[Address(RVA = "0x9BA054", Offset = "0x9BA054", VA = "0x9BA054")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B38")]
			[Address(RVA = "0x9BA05C", Offset = "0x9BA05C", VA = "0x9BA05C")]
			set
			{
			}
		}

		[Token(Token = "0x170000F0")]
		public Face Face
		{
			[Token(Token = "0x6000B39")]
			[Address(RVA = "0x9BA064", Offset = "0x9BA064", VA = "0x9BA064")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B3A")]
			[Address(RVA = "0x9BA06C", Offset = "0x9BA06C", VA = "0x9BA06C")]
			set
			{
			}
		}

		[Token(Token = "0x170000F1")]
		public HalfEdge Twin
		{
			[Token(Token = "0x6000B3B")]
			[Address(RVA = "0x9BA074", Offset = "0x9BA074", VA = "0x9BA074")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B3C")]
			[Address(RVA = "0x9BA07C", Offset = "0x9BA07C", VA = "0x9BA07C")]
			set
			{
			}
		}

		[Token(Token = "0x170000F2")]
		public HalfEdge Next
		{
			[Token(Token = "0x6000B3D")]
			[Address(RVA = "0x9BA084", Offset = "0x9BA084", VA = "0x9BA084")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B3E")]
			[Address(RVA = "0x9BA08C", Offset = "0x9BA08C", VA = "0x9BA08C")]
			set
			{
			}
		}

		[Token(Token = "0x6000B3F")]
		[Address(RVA = "0x9BA094", Offset = "0x9BA094", VA = "0x9BA094")]
		public HalfEdge(Vertex origin)
		{
		}

		[Token(Token = "0x6000B40")]
		[Address(RVA = "0x9B9B80", Offset = "0x9B9B80", VA = "0x9B9B80")]
		public HalfEdge(Vertex origin, Face face)
		{
		}

		[Token(Token = "0x6000B41")]
		[Address(RVA = "0x9BA0C4", Offset = "0x9BA0C4", VA = "0x9BA0C4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000202")]
	public class Vertex : Point
	{
		[Token(Token = "0x4000E4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal HalfEdge leaving;

		[Token(Token = "0x170000F3")]
		public HalfEdge Leaving
		{
			[Token(Token = "0x6000B42")]
			[Address(RVA = "0x9BA170", Offset = "0x9BA170", VA = "0x9BA170")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B43")]
			[Address(RVA = "0x9BA178", Offset = "0x9BA178", VA = "0x9BA178")]
			set
			{
			}
		}

		[Token(Token = "0x6000B44")]
		[Address(RVA = "0x9BA180", Offset = "0x9BA180", VA = "0x9BA180")]
		public Vertex(double x, double y)
		{
		}

		[Token(Token = "0x6000B45")]
		[Address(RVA = "0x9BA188", Offset = "0x9BA188", VA = "0x9BA188")]
		public Vertex(double x, double y, HalfEdge leaving)
		{
		}
	}
}
namespace TriangleNet.Tools
{
	[Token(Token = "0x2000203")]
	public class AdjacencyMatrix
	{
		[Token(Token = "0x4000E4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int node_num;

		[Token(Token = "0x4000E4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int[] adj_row;

		[Token(Token = "0x4000E4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int[] adj;

		[Token(Token = "0x170000F4")]
		public int[] AdjacencyRow
		{
			[Token(Token = "0x6000B46")]
			[Address(RVA = "0x9BA1B8", Offset = "0x9BA1B8", VA = "0x9BA1B8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000F5")]
		public int[] Adjacency
		{
			[Token(Token = "0x6000B47")]
			[Address(RVA = "0x9BA1C0", Offset = "0x9BA1C0", VA = "0x9BA1C0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B48")]
		[Address(RVA = "0x9BA1C8", Offset = "0x9BA1C8", VA = "0x9BA1C8")]
		public AdjacencyMatrix(Mesh mesh)
		{
		}

		[Token(Token = "0x6000B49")]
		[Address(RVA = "0x9BAC90", Offset = "0x9BAC90", VA = "0x9BAC90")]
		public int Bandwidth()
		{
			return default(int);
		}

		[Token(Token = "0x6000B4A")]
		[Address(RVA = "0x9BA270", Offset = "0x9BA270", VA = "0x9BA270")]
		private int[] AdjacencyCount(Mesh mesh)
		{
			return null;
		}

		[Token(Token = "0x6000B4B")]
		[Address(RVA = "0x9BA6D8", Offset = "0x9BA6D8", VA = "0x9BA6D8")]
		private int[] AdjacencySet(Mesh mesh, int[] rows)
		{
			return null;
		}

		[Token(Token = "0x6000B4C")]
		[Address(RVA = "0x9BAE98", Offset = "0x9BAE98", VA = "0x9BAE98")]
		private void CreateHeap(int[] a, int offset, int size)
		{
		}

		[Token(Token = "0x6000B4D")]
		[Address(RVA = "0x9BADD4", Offset = "0x9BADD4", VA = "0x9BADD4")]
		private void HeapSort(int[] a, int offset, int size)
		{
		}
	}
	[Token(Token = "0x2000204")]
	public class CuthillMcKee
	{
		[Token(Token = "0x4000E50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int node_num;

		[Token(Token = "0x4000E51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private AdjacencyMatrix matrix;

		[Token(Token = "0x6000B4E")]
		[Address(RVA = "0x9BAF94", Offset = "0x9BAF94", VA = "0x9BAF94")]
		public int[] Renumber(Mesh mesh)
		{
			return null;
		}

		[Token(Token = "0x6000B4F")]
		[Address(RVA = "0x9BB458", Offset = "0x9BB458", VA = "0x9BB458")]
		private int PermBandwidth(int[] perm, int[] perm_inv)
		{
			return default(int);
		}

		[Token(Token = "0x6000B50")]
		[Address(RVA = "0x9BB234", Offset = "0x9BB234", VA = "0x9BB234")]
		private int[] GenerateRcm()
		{
			return null;
		}

		[Token(Token = "0x6000B51")]
		[Address(RVA = "0x9BB800", Offset = "0x9BB800", VA = "0x9BB800")]
		private void Rcm(int root, int[] mask, int[] perm, int offset, ref int iccsze)
		{
		}

		[Token(Token = "0x6000B52")]
		[Address(RVA = "0x9BB60C", Offset = "0x9BB60C", VA = "0x9BB60C")]
		private void FindRoot(ref int root, int[] mask, ref int level_num, int[] level_row, int[] level, int offset)
		{
		}

		[Token(Token = "0x6000B53")]
		[Address(RVA = "0x9BBDE4", Offset = "0x9BBDE4", VA = "0x9BBDE4")]
		private void GetLevelSet(ref int root, int[] mask, ref int level_num, int[] level_row, int[] level, int offset)
		{
		}

		[Token(Token = "0x6000B54")]
		[Address(RVA = "0x9BBAB4", Offset = "0x9BBAB4", VA = "0x9BBAB4")]
		private void Degree(int root, int[] mask, int[] deg, ref int iccsze, int[] ls, int offset)
		{
		}

		[Token(Token = "0x6000B55")]
		[Address(RVA = "0x9BB3AC", Offset = "0x9BB3AC", VA = "0x9BB3AC")]
		private int[] PermInverse(int n, int[] perm)
		{
			return null;
		}

		[Token(Token = "0x6000B56")]
		[Address(RVA = "0x9BBD60", Offset = "0x9BBD60", VA = "0x9BBD60")]
		private void ReverseVector(int[] a, int offset, int size)
		{
		}

		[Token(Token = "0x6000B57")]
		[Address(RVA = "0x9BBFC8", Offset = "0x9BBFC8", VA = "0x9BBFC8")]
		public CuthillMcKee()
		{
		}
	}
	[Token(Token = "0x2000205")]
	public class PointSorter
	{
		[Token(Token = "0x4000E52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static System.Random rand;

		[Token(Token = "0x4000E53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Point[] points;

		[Token(Token = "0x6000B58")]
		[Address(RVA = "0x9BBFD0", Offset = "0x9BBFD0", VA = "0x9BBFD0")]
		public void Sort(Point[] array)
		{
		}

		[Token(Token = "0x6000B59")]
		[Address(RVA = "0x9BC00C", Offset = "0x9BC00C", VA = "0x9BC00C")]
		private void VertexSort(int left, int right)
		{
		}

		[Token(Token = "0x6000B5A")]
		[Address(RVA = "0x9BC390", Offset = "0x9BC390", VA = "0x9BC390")]
		public PointSorter()
		{
		}
	}
	[Token(Token = "0x2000206")]
	public class QuadTree
	{
		[Token(Token = "0x2000207")]
		private class QuadNode
		{
			[Token(Token = "0x4000E58")]
			private const int SW = 0;

			[Token(Token = "0x4000E59")]
			private const int SE = 1;

			[Token(Token = "0x4000E5A")]
			private const int NW = 2;

			[Token(Token = "0x4000E5B")]
			private const int NE = 3;

			[Token(Token = "0x4000E5C")]
			private const double EPS = 1E-06;

			[Token(Token = "0x4000E5D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private static readonly byte[] BITVECTOR;

			[Token(Token = "0x4000E5E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private Rectangle bounds;

			[Token(Token = "0x4000E5F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private Point pivot;

			[Token(Token = "0x4000E60")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private QuadTree tree;

			[Token(Token = "0x4000E61")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private QuadNode[] regions;

			[Token(Token = "0x4000E62")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private List<int> triangles;

			[Token(Token = "0x4000E63")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private byte bitRegions;

			[Token(Token = "0x6000B60")]
			[Address(RVA = "0x9BD430", Offset = "0x9BD430", VA = "0x9BD430")]
			public QuadNode(Rectangle box, QuadTree tree)
			{
			}

			[Token(Token = "0x6000B61")]
			[Address(RVA = "0x9BC504", Offset = "0x9BC504", VA = "0x9BC504")]
			public QuadNode(Rectangle box, QuadTree tree, bool init)
			{
			}

			[Token(Token = "0x6000B62")]
			[Address(RVA = "0x9BD218", Offset = "0x9BD218", VA = "0x9BD218")]
			public List<int> FindTriangles(Point searchPoint)
			{
				return null;
			}

			[Token(Token = "0x6000B63")]
			[Address(RVA = "0x9BC790", Offset = "0x9BC790", VA = "0x9BC790")]
			public void CreateSubRegion(int currentDepth)
			{
			}

			[Token(Token = "0x6000B64")]
			[Address(RVA = "0x9BD470", Offset = "0x9BD470", VA = "0x9BD470")]
			private void AddTriangleToRegion(Point[] triangle, int index)
			{
			}

			[Token(Token = "0x6000B65")]
			[Address(RVA = "0x9BD770", Offset = "0x9BD770", VA = "0x9BD770")]
			private void FindTriangleIntersections(Point[] triangle, int index)
			{
			}

			[Token(Token = "0x6000B66")]
			[Address(RVA = "0x9BD84C", Offset = "0x9BD84C", VA = "0x9BD84C")]
			private void FindIntersectionsWithX(double dx, double dy, Point[] triangle, int index, int k)
			{
			}

			[Token(Token = "0x6000B67")]
			[Address(RVA = "0x9BDAA8", Offset = "0x9BDAA8", VA = "0x9BDAA8")]
			private void FindIntersectionsWithY(double dx, double dy, Point[] triangle, int index, int k)
			{
			}

			[Token(Token = "0x6000B68")]
			[Address(RVA = "0x9BD438", Offset = "0x9BD438", VA = "0x9BD438")]
			private int FindRegion(Point point)
			{
				return default(int);
			}

			[Token(Token = "0x6000B69")]
			[Address(RVA = "0x9BD5F8", Offset = "0x9BD5F8", VA = "0x9BD5F8")]
			private void AddToRegion(int index, int region)
			{
			}
		}

		[Token(Token = "0x4000E54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private QuadNode root;

		[Token(Token = "0x4000E55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal ITriangle[] triangles;

		[Token(Token = "0x4000E56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal int sizeBound;

		[Token(Token = "0x4000E57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal int maxDepth;

		[Token(Token = "0x6000B5C")]
		[Address(RVA = "0x9BC420", Offset = "0x9BC420", VA = "0x9BC420")]
		public QuadTree(Mesh mesh, int maxDepth = 10, int sizeBound = 10)
		{
		}

		[Token(Token = "0x6000B5D")]
		[Address(RVA = "0x9BCED0", Offset = "0x9BCED0", VA = "0x9BCED0")]
		public ITriangle Query(double x, double y)
		{
			return null;
		}

		[Token(Token = "0x6000B5E")]
		[Address(RVA = "0x9BD268", Offset = "0x9BD268", VA = "0x9BD268")]
		internal static bool IsPointInTriangle(Point p, Point t0, Point t1, Point t2)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B5F")]
		[Address(RVA = "0x9BD408", Offset = "0x9BD408", VA = "0x9BD408")]
		internal static double DotProduct(Point p, Point q)
		{
			return default(double);
		}
	}
	[Token(Token = "0x2000208")]
	public class QualityMeasure
	{
		[Token(Token = "0x2000209")]
		private class AreaMeasure
		{
			[Token(Token = "0x4000E68")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public double area_min;

			[Token(Token = "0x4000E69")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public double area_max;

			[Token(Token = "0x4000E6A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public double area_total;

			[Token(Token = "0x4000E6B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public int area_zero;

			[Token(Token = "0x6000B7A")]
			[Address(RVA = "0x9BE064", Offset = "0x9BE064", VA = "0x9BE064")]
			public void Reset()
			{
			}

			[Token(Token = "0x6000B7B")]
			[Address(RVA = "0x9BE478", Offset = "0x9BE478", VA = "0x9BE478")]
			public double Measure(Point a, Point b, Point c)
			{
				return default(double);
			}

			[Token(Token = "0x6000B7C")]
			[Address(RVA = "0x9BDE9C", Offset = "0x9BDE9C", VA = "0x9BDE9C")]
			public AreaMeasure()
			{
			}
		}

		[Token(Token = "0x200020A")]
		private class AlphaMeasure
		{
			[Token(Token = "0x4000E6C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public double alpha_min;

			[Token(Token = "0x4000E6D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public double alpha_max;

			[Token(Token = "0x4000E6E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public double alpha_ave;

			[Token(Token = "0x4000E6F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public double alpha_area;

			[Token(Token = "0x6000B7D")]
			[Address(RVA = "0x9BE07C", Offset = "0x9BE07C", VA = "0x9BE07C")]
			public void Reset()
			{
			}

			[Token(Token = "0x6000B7E")]
			[Address(RVA = "0x9BEB88", Offset = "0x9BEB88", VA = "0x9BEB88")]
			private double acos(double c)
			{
				return default(double);
			}

			[Token(Token = "0x6000B7F")]
			[Address(RVA = "0x9BE58C", Offset = "0x9BE58C", VA = "0x9BE58C")]
			public double Measure(double ab, double bc, double ca, double area)
			{
				return default(double);
			}

			[Token(Token = "0x6000B80")]
			[Address(RVA = "0x9BE86C", Offset = "0x9BE86C", VA = "0x9BE86C")]
			public void Normalize(int n, double area_total)
			{
			}

			[Token(Token = "0x6000B81")]
			[Address(RVA = "0x9BDEB0", Offset = "0x9BDEB0", VA = "0x9BDEB0")]
			public AlphaMeasure()
			{
			}
		}

		[Token(Token = "0x200020B")]
		private class Q_Measure
		{
			[Token(Token = "0x4000E70")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public double q_min;

			[Token(Token = "0x4000E71")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public double q_max;

			[Token(Token = "0x4000E72")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public double q_ave;

			[Token(Token = "0x4000E73")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public double q_area;

			[Token(Token = "0x6000B82")]
			[Address(RVA = "0x9BE090", Offset = "0x9BE090", VA = "0x9BE090")]
			public void Reset()
			{
			}

			[Token(Token = "0x6000B83")]
			[Address(RVA = "0x9BE780", Offset = "0x9BE780", VA = "0x9BE780")]
			public double Measure(double ab, double bc, double ca, double area)
			{
				return default(double);
			}

			[Token(Token = "0x6000B84")]
			[Address(RVA = "0x9BE8A4", Offset = "0x9BE8A4", VA = "0x9BE8A4")]
			public void Normalize(int n, double area_total)
			{
			}

			[Token(Token = "0x6000B85")]
			[Address(RVA = "0x9BDEB8", Offset = "0x9BDEB8", VA = "0x9BDEB8")]
			public Q_Measure()
			{
			}
		}

		[Token(Token = "0x4000E64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private AreaMeasure areaMeasure;

		[Token(Token = "0x4000E65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private AlphaMeasure alphaMeasure;

		[Token(Token = "0x4000E66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Q_Measure qMeasure;

		[Token(Token = "0x4000E67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Mesh mesh;

		[Token(Token = "0x170000F6")]
		public double AreaMinimum
		{
			[Token(Token = "0x6000B6C")]
			[Address(RVA = "0x9BDEC0", Offset = "0x9BDEC0", VA = "0x9BDEC0")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x170000F7")]
		public double AreaMaximum
		{
			[Token(Token = "0x6000B6D")]
			[Address(RVA = "0x9BDEDC", Offset = "0x9BDEDC", VA = "0x9BDEDC")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x170000F8")]
		public double AreaRatio
		{
			[Token(Token = "0x6000B6E")]
			[Address(RVA = "0x9BDEF8", Offset = "0x9BDEF8", VA = "0x9BDEF8")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x170000F9")]
		public double AlphaMinimum
		{
			[Token(Token = "0x6000B6F")]
			[Address(RVA = "0x9BDF18", Offset = "0x9BDF18", VA = "0x9BDF18")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x170000FA")]
		public double AlphaMaximum
		{
			[Token(Token = "0x6000B70")]
			[Address(RVA = "0x9BDF34", Offset = "0x9BDF34", VA = "0x9BDF34")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x170000FB")]
		public double AlphaAverage
		{
			[Token(Token = "0x6000B71")]
			[Address(RVA = "0x9BDF50", Offset = "0x9BDF50", VA = "0x9BDF50")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x170000FC")]
		public double AlphaArea
		{
			[Token(Token = "0x6000B72")]
			[Address(RVA = "0x9BDF6C", Offset = "0x9BDF6C", VA = "0x9BDF6C")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x170000FD")]
		public double Q_Minimum
		{
			[Token(Token = "0x6000B73")]
			[Address(RVA = "0x9BDF88", Offset = "0x9BDF88", VA = "0x9BDF88")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x170000FE")]
		public double Q_Maximum
		{
			[Token(Token = "0x6000B74")]
			[Address(RVA = "0x9BDFA4", Offset = "0x9BDFA4", VA = "0x9BDFA4")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x170000FF")]
		public double Q_Average
		{
			[Token(Token = "0x6000B75")]
			[Address(RVA = "0x9BDFC0", Offset = "0x9BDFC0", VA = "0x9BDFC0")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000100")]
		public double Q_Area
		{
			[Token(Token = "0x6000B76")]
			[Address(RVA = "0x9BDFDC", Offset = "0x9BDFDC", VA = "0x9BDFDC")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x6000B6B")]
		[Address(RVA = "0x9BDDA4", Offset = "0x9BDDA4", VA = "0x9BDDA4")]
		public QualityMeasure()
		{
		}

		[Token(Token = "0x6000B77")]
		[Address(RVA = "0x9BDFF8", Offset = "0x9BDFF8", VA = "0x9BDFF8")]
		public void Update(Mesh mesh)
		{
		}

		[Token(Token = "0x6000B78")]
		[Address(RVA = "0x9BE0A4", Offset = "0x9BE0A4", VA = "0x9BE0A4")]
		private void Compute()
		{
		}

		[Token(Token = "0x6000B79")]
		[Address(RVA = "0x9BE8DC", Offset = "0x9BE8DC", VA = "0x9BE8DC")]
		public int Bandwidth()
		{
			return default(int);
		}
	}
	[Token(Token = "0x200020C")]
	public class Statistic
	{
		[Token(Token = "0x4000E74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static long InCircleCount;

		[Token(Token = "0x4000E75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static long InCircleAdaptCount;

		[Token(Token = "0x4000E76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static long CounterClockwiseCount;

		[Token(Token = "0x4000E77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static long CounterClockwiseAdaptCount;

		[Token(Token = "0x4000E78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static long Orient3dCount;

		[Token(Token = "0x4000E79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static long HyperbolaCount;

		[Token(Token = "0x4000E7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static long CircumcenterCount;

		[Token(Token = "0x4000E7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static long CircleTopCount;

		[Token(Token = "0x4000E7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public static long RelocationCount;

		[Token(Token = "0x4000E7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private double minEdge;

		[Token(Token = "0x4000E7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private double maxEdge;

		[Token(Token = "0x4000E7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private double minAspect;

		[Token(Token = "0x4000E80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private double maxAspect;

		[Token(Token = "0x4000E81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private double minArea;

		[Token(Token = "0x4000E82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private double maxArea;

		[Token(Token = "0x4000E83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private double minAngle;

		[Token(Token = "0x4000E84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private double maxAngle;

		[Token(Token = "0x4000E85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int[] angleTable;

		[Token(Token = "0x4000E86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int[] minAngles;

		[Token(Token = "0x4000E87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int[] maxAngles;

		[Token(Token = "0x4000E88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private static readonly int[] plus1Mod3;

		[Token(Token = "0x4000E89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private static readonly int[] minus1Mod3;

		[Token(Token = "0x17000101")]
		public double ShortestEdge
		{
			[Token(Token = "0x6000B86")]
			[Address(RVA = "0x9BEC0C", Offset = "0x9BEC0C", VA = "0x9BEC0C")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000102")]
		public double LongestEdge
		{
			[Token(Token = "0x6000B87")]
			[Address(RVA = "0x9BEC14", Offset = "0x9BEC14", VA = "0x9BEC14")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000103")]
		public double ShortestAltitude
		{
			[Token(Token = "0x6000B88")]
			[Address(RVA = "0x9BEC1C", Offset = "0x9BEC1C", VA = "0x9BEC1C")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000104")]
		public double LargestAspectRatio
		{
			[Token(Token = "0x6000B89")]
			[Address(RVA = "0x9BEC24", Offset = "0x9BEC24", VA = "0x9BEC24")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000105")]
		public double SmallestArea
		{
			[Token(Token = "0x6000B8A")]
			[Address(RVA = "0x9BEC2C", Offset = "0x9BEC2C", VA = "0x9BEC2C")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000106")]
		public double LargestArea
		{
			[Token(Token = "0x6000B8B")]
			[Address(RVA = "0x9BEC34", Offset = "0x9BEC34", VA = "0x9BEC34")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000107")]
		public double SmallestAngle
		{
			[Token(Token = "0x6000B8C")]
			[Address(RVA = "0x9BEC3C", Offset = "0x9BEC3C", VA = "0x9BEC3C")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000108")]
		public double LargestAngle
		{
			[Token(Token = "0x6000B8D")]
			[Address(RVA = "0x9BEC44", Offset = "0x9BEC44", VA = "0x9BEC44")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000109")]
		public int[] AngleHistogram
		{
			[Token(Token = "0x6000B8E")]
			[Address(RVA = "0x9BEC4C", Offset = "0x9BEC4C", VA = "0x9BEC4C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700010A")]
		public int[] MinAngleHistogram
		{
			[Token(Token = "0x6000B8F")]
			[Address(RVA = "0x9BEC54", Offset = "0x9BEC54", VA = "0x9BEC54")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700010B")]
		public int[] MaxAngleHistogram
		{
			[Token(Token = "0x6000B90")]
			[Address(RVA = "0x9BEC5C", Offset = "0x9BEC5C", VA = "0x9BEC5C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B91")]
		[Address(RVA = "0x9BEC64", Offset = "0x9BEC64", VA = "0x9BEC64")]
		private void GetAspectHistogram(Mesh mesh)
		{
		}

		[Token(Token = "0x6000B92")]
		[Address(RVA = "0x9BF2D4", Offset = "0x9BF2D4", VA = "0x9BF2D4")]
		public void Update(Mesh mesh, int sampleDegrees)
		{
		}

		[Token(Token = "0x6000B93")]
		[Address(RVA = "0x9BFEF8", Offset = "0x9BFEF8", VA = "0x9BFEF8")]
		public Statistic()
		{
		}
	}
}
namespace TriangleNet.Smoothing
{
	[Token(Token = "0x200020D")]
	public interface ISmoother
	{
		[Token(Token = "0x6000B95")]
		void Smooth(IMesh mesh);

		[Token(Token = "0x6000B96")]
		void Smooth(IMesh mesh, int limit);
	}
	[Token(Token = "0x200020E")]
	public class SimpleSmoother : ISmoother
	{
		[Token(Token = "0x4000E8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private ConstraintOptions options;

		[Token(Token = "0x6000B97")]
		[Address(RVA = "0x9BFFF4", Offset = "0x9BFFF4", VA = "0x9BFFF4")]
		public SimpleSmoother()
		{
		}

		[Token(Token = "0x6000B98")]
		[Address(RVA = "0x9C0078", Offset = "0x9C0078", VA = "0x9C0078", Slot = "4")]
		public void Smooth(IMesh mesh)
		{
		}

		[Token(Token = "0x6000B99")]
		[Address(RVA = "0x9C0080", Offset = "0x9C0080", VA = "0x9C0080", Slot = "5")]
		public void Smooth(IMesh mesh, int limit)
		{
		}

		[Token(Token = "0x6000B9A")]
		[Address(RVA = "0x9C01CC", Offset = "0x9C01CC", VA = "0x9C01CC")]
		private void Step(Mesh mesh)
		{
		}

		[Token(Token = "0x6000B9B")]
		[Address(RVA = "0x9C082C", Offset = "0x9C082C", VA = "0x9C082C")]
		private void Centroid(List<Point> points, out double x, out double y)
		{
		}

		[Token(Token = "0x6000B9C")]
		[Address(RVA = "0x9C0570", Offset = "0x9C0570", VA = "0x9C0570")]
		private Polygon Rebuild(Mesh mesh)
		{
			return null;
		}
	}
}
namespace TriangleNet.Meshing
{
	[Token(Token = "0x200020F")]
	internal class ConstraintMesher
	{
		[Token(Token = "0x4000E8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Mesh mesh;

		[Token(Token = "0x4000E8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Behavior behavior;

		[Token(Token = "0x4000E8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private TriangleLocator locator;

		[Token(Token = "0x4000E8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<Triangle> viri;

		[Token(Token = "0x4000E8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private ILog<LogItem> logger;

		[Token(Token = "0x6000B9D")]
		[Address(RVA = "0x9C0A04", Offset = "0x9C0A04", VA = "0x9C0A04")]
		public ConstraintMesher(Mesh mesh)
		{
		}

		[Token(Token = "0x6000B9E")]
		[Address(RVA = "0x9C0B30", Offset = "0x9C0B30", VA = "0x9C0B30")]
		public void CarveHoles()
		{
		}

		[Token(Token = "0x6000B9F")]
		[Address(RVA = "0x9C1CC4", Offset = "0x9C1CC4", VA = "0x9C1CC4")]
		public void FormSkeleton(IPolygon input)
		{
		}

		[Token(Token = "0x6000BA0")]
		[Address(RVA = "0x9C12D4", Offset = "0x9C12D4", VA = "0x9C12D4")]
		private void InfectHull()
		{
		}

		[Token(Token = "0x6000BA1")]
		[Address(RVA = "0x9C1520", Offset = "0x9C1520", VA = "0x9C1520")]
		private void Plague()
		{
		}

		[Token(Token = "0x6000BA2")]
		[Address(RVA = "0x9C2B3C", Offset = "0x9C2B3C", VA = "0x9C2B3C")]
		private FindDirectionResult FindDirection(ref Otri searchtri, TriangleNet.Geometry.Vertex searchpoint)
		{
			return default(FindDirectionResult);
		}

		[Token(Token = "0x6000BA3")]
		[Address(RVA = "0x9C2DB4", Offset = "0x9C2DB4", VA = "0x9C2DB4")]
		private void SegmentIntersection(ref Otri splittri, ref Osub splitsubseg, TriangleNet.Geometry.Vertex endpoint2)
		{
		}

		[Token(Token = "0x6000BA4")]
		[Address(RVA = "0x9C3270", Offset = "0x9C3270", VA = "0x9C3270")]
		private bool ScoutSegment(ref Otri searchtri, TriangleNet.Geometry.Vertex endpoint2, int newmark)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BA5")]
		[Address(RVA = "0x9C3484", Offset = "0x9C3484", VA = "0x9C3484")]
		private void DelaunayFixup(ref Otri fixuptri, bool leftside)
		{
		}

		[Token(Token = "0x6000BA6")]
		[Address(RVA = "0x9C3650", Offset = "0x9C3650", VA = "0x9C3650")]
		private void ConstrainedEdge(ref Otri starttri, TriangleNet.Geometry.Vertex endpoint2, int newmark)
		{
		}

		[Token(Token = "0x6000BA7")]
		[Address(RVA = "0x9C2744", Offset = "0x9C2744", VA = "0x9C2744")]
		private void InsertSegment(TriangleNet.Geometry.Vertex endpoint1, TriangleNet.Geometry.Vertex endpoint2, int newmark)
		{
		}

		[Token(Token = "0x6000BA8")]
		[Address(RVA = "0x9C2A2C", Offset = "0x9C2A2C", VA = "0x9C2A2C")]
		private void MarkHull()
		{
		}
	}
	[Token(Token = "0x2000210")]
	public class ConstraintOptions
	{
		[Token(Token = "0x1700010C")]
		public bool UseRegions
		{
			[Token(Token = "0x6000BA9")]
			[Address(RVA = "0x9C38CC", Offset = "0x9C38CC", VA = "0x9C38CC")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000BAA")]
			[Address(RVA = "0x9C38D4", Offset = "0x9C38D4", VA = "0x9C38D4")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700010D")]
		public bool ConformingDelaunay
		{
			[Token(Token = "0x6000BAB")]
			[Address(RVA = "0x9C38E0", Offset = "0x9C38E0", VA = "0x9C38E0")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000BAC")]
			[Address(RVA = "0x9C38E8", Offset = "0x9C38E8", VA = "0x9C38E8")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700010E")]
		public bool Convex
		{
			[Token(Token = "0x6000BAD")]
			[Address(RVA = "0x9C38F4", Offset = "0x9C38F4", VA = "0x9C38F4")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000BAE")]
			[Address(RVA = "0x9C38FC", Offset = "0x9C38FC", VA = "0x9C38FC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700010F")]
		public int SegmentSplitting
		{
			[Token(Token = "0x6000BAF")]
			[Address(RVA = "0x9C3908", Offset = "0x9C3908", VA = "0x9C3908")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000BB0")]
			[Address(RVA = "0x9C3910", Offset = "0x9C3910", VA = "0x9C3910")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6000BB1")]
		[Address(RVA = "0x9C0070", Offset = "0x9C0070", VA = "0x9C0070")]
		public ConstraintOptions()
		{
		}
	}
	[Token(Token = "0x2000211")]
	public static class Converter
	{
		[Token(Token = "0x6000BB2")]
		[Address(RVA = "0x9C3918", Offset = "0x9C3918", VA = "0x9C3918")]
		public static Mesh ToMesh(Polygon polygon, IList<ITriangle> triangles)
		{
			return null;
		}

		[Token(Token = "0x6000BB3")]
		[Address(RVA = "0x9C3978", Offset = "0x9C3978", VA = "0x9C3978")]
		public static Mesh ToMesh(Polygon polygon, ITriangle[] triangles)
		{
			return null;
		}

		[Token(Token = "0x6000BB4")]
		[Address(RVA = "0x9C3B40", Offset = "0x9C3B40", VA = "0x9C3B40")]
		private static List<Otri>[] SetNeighbors(Mesh mesh, ITriangle[] triangles)
		{
			return null;
		}

		[Token(Token = "0x6000BB5")]
		[Address(RVA = "0x9C4754", Offset = "0x9C4754", VA = "0x9C4754")]
		private static void SetSegments(Mesh mesh, Polygon polygon, List<Otri>[] vertexarray)
		{
		}

		[Token(Token = "0x6000BB6")]
		[Address(RVA = "0x9C51F4", Offset = "0x9C51F4", VA = "0x9C51F4")]
		public static DcelMesh ToDCEL(Mesh mesh)
		{
			return null;
		}
	}
	[Token(Token = "0x2000212")]
	public class GenericMesher : ITriangulator, IConstraintMesher, IQualityMesher
	{
		[Token(Token = "0x4000E94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private ITriangulator triangulator;

		[Token(Token = "0x6000BB7")]
		[Address(RVA = "0x9C618C", Offset = "0x9C618C", VA = "0x9C618C")]
		public GenericMesher()
		{
		}

		[Token(Token = "0x6000BB8")]
		[Address(RVA = "0x9C6200", Offset = "0x9C6200", VA = "0x9C6200")]
		public GenericMesher(ITriangulator triangulator)
		{
		}

		[Token(Token = "0x6000BB9")]
		[Address(RVA = "0x9C6230", Offset = "0x9C6230", VA = "0x9C6230", Slot = "4")]
		public IMesh Triangulate(ICollection<TriangleNet.Geometry.Vertex> points)
		{
			return null;
		}

		[Token(Token = "0x6000BBA")]
		[Address(RVA = "0x9C62D8", Offset = "0x9C62D8", VA = "0x9C62D8", Slot = "5")]
		public IMesh Triangulate(IPolygon polygon)
		{
			return null;
		}

		[Token(Token = "0x6000BBB")]
		[Address(RVA = "0x9C6480", Offset = "0x9C6480", VA = "0x9C6480", Slot = "6")]
		public IMesh Triangulate(IPolygon polygon, ConstraintOptions options)
		{
			return null;
		}

		[Token(Token = "0x6000BBC")]
		[Address(RVA = "0x9C6488", Offset = "0x9C6488", VA = "0x9C6488", Slot = "7")]
		public IMesh Triangulate(IPolygon polygon, QualityOptions quality)
		{
			return null;
		}

		[Token(Token = "0x6000BBD")]
		[Address(RVA = "0x9C62E4", Offset = "0x9C62E4", VA = "0x9C62E4", Slot = "8")]
		public IMesh Triangulate(IPolygon polygon, ConstraintOptions options, QualityOptions quality)
		{
			return null;
		}

		[Token(Token = "0x6000BBE")]
		[Address(RVA = "0x9C6494", Offset = "0x9C6494", VA = "0x9C6494")]
		public IMesh StructuredMesh(double width, double height, int nx, int ny)
		{
			return null;
		}

		[Token(Token = "0x6000BBF")]
		[Address(RVA = "0x9C65A0", Offset = "0x9C65A0", VA = "0x9C65A0")]
		public IMesh StructuredMesh(Rectangle bounds, int nx, int ny)
		{
			return null;
		}
	}
	[Token(Token = "0x2000213")]
	public interface IConstraintMesher
	{
		[Token(Token = "0x6000BC0")]
		IMesh Triangulate(IPolygon polygon);

		[Token(Token = "0x6000BC1")]
		IMesh Triangulate(IPolygon polygon, ConstraintOptions options);
	}
	[Token(Token = "0x2000214")]
	public interface IMesh
	{
		[Token(Token = "0x17000110")]
		ICollection<TriangleNet.Geometry.Vertex> Vertices
		{
			[Token(Token = "0x6000BC2")]
			get;
		}

		[Token(Token = "0x17000111")]
		IEnumerable<Edge> Edges
		{
			[Token(Token = "0x6000BC3")]
			get;
		}

		[Token(Token = "0x17000112")]
		ICollection<Segment> Segments
		{
			[Token(Token = "0x6000BC4")]
			get;
		}

		[Token(Token = "0x17000113")]
		ICollection<Triangle> Triangles
		{
			[Token(Token = "0x6000BC5")]
			get;
		}

		[Token(Token = "0x17000114")]
		IList<Point> Holes
		{
			[Token(Token = "0x6000BC6")]
			get;
		}

		[Token(Token = "0x17000115")]
		Rectangle Bounds
		{
			[Token(Token = "0x6000BC7")]
			get;
		}

		[Token(Token = "0x6000BC8")]
		void Renumber();

		[Token(Token = "0x6000BC9")]
		void Refine(QualityOptions quality);
	}
	[Token(Token = "0x2000215")]
	public interface IQualityMesher
	{
		[Token(Token = "0x6000BCA")]
		IMesh Triangulate(IPolygon polygon, QualityOptions quality);

		[Token(Token = "0x6000BCB")]
		IMesh Triangulate(IPolygon polygon, ConstraintOptions options, QualityOptions quality);
	}
	[Token(Token = "0x2000216")]
	public interface ITriangulator
	{
		[Token(Token = "0x6000BCC")]
		IMesh Triangulate(ICollection<TriangleNet.Geometry.Vertex> points);
	}
	[Token(Token = "0x2000217")]
	internal class QualityMesher
	{
		[Token(Token = "0x4000E95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Queue<BadSubseg> badsubsegs;

		[Token(Token = "0x4000E96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private BadTriQueue queue;

		[Token(Token = "0x4000E97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Mesh mesh;

		[Token(Token = "0x4000E98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Behavior behavior;

		[Token(Token = "0x4000E99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private NewLocation newLocation;

		[Token(Token = "0x4000E9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private ILog<LogItem> logger;

		[Token(Token = "0x6000BCD")]
		[Address(RVA = "0x9C6D30", Offset = "0x9C6D30", VA = "0x9C6D30")]
		public QualityMesher(Mesh mesh)
		{
		}

		[Token(Token = "0x6000BCE")]
		[Address(RVA = "0x9C6F90", Offset = "0x9C6F90", VA = "0x9C6F90")]
		public void AddBadSubseg(BadSubseg badseg)
		{
		}

		[Token(Token = "0x6000BCF")]
		[Address(RVA = "0x9C6FE8", Offset = "0x9C6FE8", VA = "0x9C6FE8")]
		public int CheckSeg4Encroach(ref Osub testsubseg)
		{
			return default(int);
		}

		[Token(Token = "0x6000BD0")]
		[Address(RVA = "0x9C72F0", Offset = "0x9C72F0", VA = "0x9C72F0")]
		public void TestTriangle(ref Otri testtri)
		{
		}

		[Token(Token = "0x6000BD1")]
		[Address(RVA = "0x9C793C", Offset = "0x9C793C", VA = "0x9C793C")]
		private void TallyEncs()
		{
		}

		[Token(Token = "0x6000BD2")]
		[Address(RVA = "0x9C7ABC", Offset = "0x9C7ABC", VA = "0x9C7ABC")]
		private void SplitEncSegs(bool triflaws)
		{
		}

		[Token(Token = "0x6000BD3")]
		[Address(RVA = "0x9C83CC", Offset = "0x9C83CC", VA = "0x9C83CC")]
		private void TallyFaces()
		{
		}

		[Token(Token = "0x6000BD4")]
		[Address(RVA = "0x9C8538", Offset = "0x9C8538", VA = "0x9C8538")]
		private void SplitTriangle(BadTriangle badtri)
		{
		}

		[Token(Token = "0x6000BD5")]
		[Address(RVA = "0x9C8B4C", Offset = "0x9C8B4C", VA = "0x9C8B4C")]
		public void EnforceQuality()
		{
		}
	}
	[Token(Token = "0x2000218")]
	public class QualityOptions
	{
		[Token(Token = "0x17000116")]
		public double MaximumAngle
		{
			[Token(Token = "0x6000BD6")]
			[Address(RVA = "0x9C90C0", Offset = "0x9C90C0", VA = "0x9C90C0")]
			[CompilerGenerated]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6000BD7")]
			[Address(RVA = "0x9C90C8", Offset = "0x9C90C8", VA = "0x9C90C8")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000117")]
		public double MinimumAngle
		{
			[Token(Token = "0x6000BD8")]
			[Address(RVA = "0x9C90D0", Offset = "0x9C90D0", VA = "0x9C90D0")]
			[CompilerGenerated]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6000BD9")]
			[Address(RVA = "0x9C90D8", Offset = "0x9C90D8", VA = "0x9C90D8")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000118")]
		public double MaximumArea
		{
			[Token(Token = "0x6000BDA")]
			[Address(RVA = "0x9C90E0", Offset = "0x9C90E0", VA = "0x9C90E0")]
			[CompilerGenerated]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6000BDB")]
			[Address(RVA = "0x9C90E8", Offset = "0x9C90E8", VA = "0x9C90E8")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000119")]
		public Func<ITriangle, double, bool> UserTest
		{
			[Token(Token = "0x6000BDC")]
			[Address(RVA = "0x9C90F0", Offset = "0x9C90F0", VA = "0x9C90F0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000BDD")]
			[Address(RVA = "0x9C90F8", Offset = "0x9C90F8", VA = "0x9C90F8")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700011A")]
		public bool VariableArea
		{
			[Token(Token = "0x6000BDE")]
			[Address(RVA = "0x9C9100", Offset = "0x9C9100", VA = "0x9C9100")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000BDF")]
			[Address(RVA = "0x9C9108", Offset = "0x9C9108", VA = "0x9C9108")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700011B")]
		public int SteinerPoints
		{
			[Token(Token = "0x6000BE0")]
			[Address(RVA = "0x9C9114", Offset = "0x9C9114", VA = "0x9C9114")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000BE1")]
			[Address(RVA = "0x9C911C", Offset = "0x9C911C", VA = "0x9C911C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6000BE2")]
		[Address(RVA = "0x9C9124", Offset = "0x9C9124", VA = "0x9C9124")]
		public QualityOptions()
		{
		}
	}
}
namespace TriangleNet.Meshing.Iterators
{
	[Token(Token = "0x2000219")]
	public class EdgeIterator : IEnumerator<Edge>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000EA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IEnumerator<Triangle> triangles;

		[Token(Token = "0x4000EA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Otri tri;

		[Token(Token = "0x4000EA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Otri neighbor;

		[Token(Token = "0x4000EA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Osub sub;

		[Token(Token = "0x4000EA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Edge current;

		[Token(Token = "0x4000EA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private TriangleNet.Geometry.Vertex p1;

		[Token(Token = "0x4000EA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private TriangleNet.Geometry.Vertex p2;

		[Token(Token = "0x1700011C")]
		public Edge Current
		{
			[Token(Token = "0x6000BE4")]
			[Address(RVA = "0x9C9304", Offset = "0x9C9304", VA = "0x9C9304", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700011D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000BE6")]
			[Address(RVA = "0x9C93AC", Offset = "0x9C93AC", VA = "0x9C93AC", Slot = "7")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000BE3")]
		[Address(RVA = "0x9C912C", Offset = "0x9C912C", VA = "0x9C912C")]
		public EdgeIterator(Mesh mesh)
		{
		}

		[Token(Token = "0x6000BE5")]
		[Address(RVA = "0x9C930C", Offset = "0x9C930C", VA = "0x9C930C", Slot = "5")]
		public void Dispose()
		{
		}

		[Token(Token = "0x6000BE7")]
		[Address(RVA = "0x9C93B4", Offset = "0x9C93B4", VA = "0x9C93B4", Slot = "6")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BE8")]
		[Address(RVA = "0x9C9654", Offset = "0x9C9654", VA = "0x9C9654", Slot = "8")]
		public void Reset()
		{
		}
	}
	[Token(Token = "0x200021A")]
	public class RegionIterator
	{
		[Token(Token = "0x4000EA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<Triangle> viri;

		[Token(Token = "0x6000BE9")]
		[Address(RVA = "0x9C1B68", Offset = "0x9C1B68", VA = "0x9C1B68")]
		public RegionIterator(Mesh mesh)
		{
		}

		[Token(Token = "0x6000BEA")]
		[Address(RVA = "0x9C96F8", Offset = "0x9C96F8", VA = "0x9C96F8")]
		private void ProcessRegion(Action<Triangle> func)
		{
		}

		[Token(Token = "0x6000BEB")]
		[Address(RVA = "0x9C1BF0", Offset = "0x9C1BF0", VA = "0x9C1BF0")]
		public void Process(Triangle triangle)
		{
		}

		[Token(Token = "0x6000BEC")]
		[Address(RVA = "0x9C9A40", Offset = "0x9C9A40", VA = "0x9C9A40")]
		public void Process(Triangle triangle, Action<Triangle> func)
		{
		}
	}
}
namespace TriangleNet.Meshing.Data
{
	[Token(Token = "0x200021C")]
	internal class BadSubseg
	{
		[Token(Token = "0x4000EAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Osub subseg;

		[Token(Token = "0x4000EAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TriangleNet.Geometry.Vertex org;

		[Token(Token = "0x4000EAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TriangleNet.Geometry.Vertex dest;

		[Token(Token = "0x6000BEF")]
		[Address(RVA = "0x9C9BBC", Offset = "0x9C9BBC", VA = "0x9C9BBC", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000BF0")]
		[Address(RVA = "0x9C9BD8", Offset = "0x9C9BD8", VA = "0x9C9BD8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000BF1")]
		[Address(RVA = "0x9C72E8", Offset = "0x9C72E8", VA = "0x9C72E8")]
		public BadSubseg()
		{
		}
	}
	[Token(Token = "0x200021D")]
	internal class BadTriangle
	{
		[Token(Token = "0x4000EAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Otri poortri;

		[Token(Token = "0x4000EAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public double key;

		[Token(Token = "0x4000EAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TriangleNet.Geometry.Vertex org;

		[Token(Token = "0x4000EB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public TriangleNet.Geometry.Vertex dest;

		[Token(Token = "0x4000EB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public TriangleNet.Geometry.Vertex apex;

		[Token(Token = "0x4000EB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public BadTriangle next;

		[Token(Token = "0x6000BF2")]
		[Address(RVA = "0x9C9C60", Offset = "0x9C9C60", VA = "0x9C9C60", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000BF3")]
		[Address(RVA = "0x9C9CE8", Offset = "0x9C9CE8", VA = "0x9C9CE8")]
		public BadTriangle()
		{
		}
	}
	[Token(Token = "0x200021E")]
	internal class BadTriQueue
	{
		[Token(Token = "0x4000EB3")]
		private const double SQRT2 = 1.4142135623730951;

		[Token(Token = "0x4000EB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private BadTriangle[] queuefront;

		[Token(Token = "0x4000EB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private BadTriangle[] queuetail;

		[Token(Token = "0x4000EB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int[] nextnonemptyq;

		[Token(Token = "0x4000EB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int firstnonemptyq;

		[Token(Token = "0x4000EB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int count;

		[Token(Token = "0x1700011E")]
		public int Count
		{
			[Token(Token = "0x6000BF4")]
			[Address(RVA = "0x9C9CF0", Offset = "0x9C9CF0", VA = "0x9C9CF0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000BF5")]
		[Address(RVA = "0x9C6ECC", Offset = "0x9C6ECC", VA = "0x9C6ECC")]
		public BadTriQueue()
		{
		}

		[Token(Token = "0x6000BF6")]
		[Address(RVA = "0x9C8E98", Offset = "0x9C8E98", VA = "0x9C8E98")]
		public void Enqueue(BadTriangle badtri)
		{
		}

		[Token(Token = "0x6000BF7")]
		[Address(RVA = "0x9C7864", Offset = "0x9C7864", VA = "0x9C7864")]
		public void Enqueue(ref Otri enqtri, double minedge, TriangleNet.Geometry.Vertex apex, TriangleNet.Geometry.Vertex org, TriangleNet.Geometry.Vertex dest)
		{
		}

		[Token(Token = "0x6000BF8")]
		[Address(RVA = "0x9C8D9C", Offset = "0x9C8D9C", VA = "0x9C8D9C")]
		public BadTriangle Dequeue()
		{
			return null;
		}
	}
}
namespace TriangleNet.Meshing.Algorithm
{
	[Token(Token = "0x200021F")]
	public class Dwyer : ITriangulator
	{
		[Token(Token = "0x4000EB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static System.Random rand;

		[Token(Token = "0x4000EBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool UseDwyer;

		[Token(Token = "0x4000EBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private TriangleNet.Geometry.Vertex[] sortarray;

		[Token(Token = "0x4000EBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Mesh mesh;

		[Token(Token = "0x6000BF9")]
		[Address(RVA = "0x9C9CF8", Offset = "0x9C9CF8", VA = "0x9C9CF8", Slot = "4")]
		public IMesh Triangulate(ICollection<TriangleNet.Geometry.Vertex> points)
		{
			return null;
		}

		[Token(Token = "0x6000BFA")]
		[Address(RVA = "0x9CA490", Offset = "0x9CA490", VA = "0x9CA490")]
		private void VertexSort(int left, int right)
		{
		}

		[Token(Token = "0x6000BFB")]
		[Address(RVA = "0x9CB2AC", Offset = "0x9CB2AC", VA = "0x9CB2AC")]
		private void VertexMedian(int left, int right, int median, int axis)
		{
		}

		[Token(Token = "0x6000BFC")]
		[Address(RVA = "0x9CA830", Offset = "0x9CA830", VA = "0x9CA830")]
		private void AlternateAxes(int left, int right, int axis)
		{
		}

		[Token(Token = "0x6000BFD")]
		[Address(RVA = "0x9CB8A4", Offset = "0x9CB8A4", VA = "0x9CB8A4")]
		private void MergeHulls(ref Otri farleft, ref Otri innerleft, ref Otri innerright, ref Otri farright, int axis)
		{
		}

		[Token(Token = "0x6000BFE")]
		[Address(RVA = "0x9CA900", Offset = "0x9CA900", VA = "0x9CA900")]
		private void DivconqRecurse(int left, int right, int axis, ref Otri farleft, ref Otri farright)
		{
		}

		[Token(Token = "0x6000BFF")]
		[Address(RVA = "0x9CB10C", Offset = "0x9CB10C", VA = "0x9CB10C")]
		private int RemoveGhosts(ref Otri startghost)
		{
			return default(int);
		}

		[Token(Token = "0x6000C00")]
		[Address(RVA = "0x9CC470", Offset = "0x9CC470", VA = "0x9CC470")]
		public Dwyer()
		{
		}
	}
	[Token(Token = "0x2000220")]
	public class Incremental : ITriangulator
	{
		[Token(Token = "0x4000EBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Mesh mesh;

		[Token(Token = "0x6000C02")]
		[Address(RVA = "0x9CC55C", Offset = "0x9CC55C", VA = "0x9CC55C", Slot = "4")]
		public IMesh Triangulate(ICollection<TriangleNet.Geometry.Vertex> points)
		{
			return null;
		}

		[Token(Token = "0x6000C03")]
		[Address(RVA = "0x9CC994", Offset = "0x9CC994", VA = "0x9CC994")]
		private void GetBoundingBox()
		{
		}

		[Token(Token = "0x6000C04")]
		[Address(RVA = "0x9CCBD0", Offset = "0x9CCBD0", VA = "0x9CCBD0")]
		private int RemoveBox()
		{
			return default(int);
		}

		[Token(Token = "0x6000C05")]
		[Address(RVA = "0x9CCE8C", Offset = "0x9CCE8C", VA = "0x9CCE8C")]
		public Incremental()
		{
		}
	}
	[Token(Token = "0x2000221")]
	public class SweepLine : ITriangulator
	{
		[Token(Token = "0x2000222")]
		private class SweepEvent
		{
			[Token(Token = "0x4000EC3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public double xkey;

			[Token(Token = "0x4000EC4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public double ykey;

			[Token(Token = "0x4000EC5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TriangleNet.Geometry.Vertex vertexEvent;

			[Token(Token = "0x4000EC6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Otri otriEvent;

			[Token(Token = "0x4000EC7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public int heapposition;

			[Token(Token = "0x6000C16")]
			[Address(RVA = "0x9CE50C", Offset = "0x9CE50C", VA = "0x9CE50C")]
			public SweepEvent()
			{
			}
		}

		[Token(Token = "0x2000223")]
		private class SweepEventVertex : TriangleNet.Geometry.Vertex
		{
			[Token(Token = "0x4000EC8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public SweepEvent evt;

			[Token(Token = "0x6000C17")]
			[Address(RVA = "0x9CE78C", Offset = "0x9CE78C", VA = "0x9CE78C")]
			public SweepEventVertex(SweepEvent e)
			{
			}
		}

		[Token(Token = "0x2000224")]
		private class SplayNode
		{
			[Token(Token = "0x4000EC9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Otri keyedge;

			[Token(Token = "0x4000ECA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TriangleNet.Geometry.Vertex keydest;

			[Token(Token = "0x4000ECB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public SplayNode lchild;

			[Token(Token = "0x4000ECC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public SplayNode rchild;

			[Token(Token = "0x6000C18")]
			[Address(RVA = "0x9CEFF8", Offset = "0x9CEFF8", VA = "0x9CEFF8")]
			public SplayNode()
			{
			}
		}

		[Token(Token = "0x4000EBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int randomseed;

		[Token(Token = "0x4000EBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static int SAMPLERATE;

		[Token(Token = "0x4000EC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Mesh mesh;

		[Token(Token = "0x4000EC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private double xminextreme;

		[Token(Token = "0x4000EC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<SplayNode> splaynodes;

		[Token(Token = "0x6000C06")]
		[Address(RVA = "0x9CCE94", Offset = "0x9CCE94", VA = "0x9CCE94")]
		private static int randomnation(int choices)
		{
			return default(int);
		}

		[Token(Token = "0x6000C07")]
		[Address(RVA = "0x9CCF34", Offset = "0x9CCF34", VA = "0x9CCF34", Slot = "4")]
		public IMesh Triangulate(ICollection<TriangleNet.Geometry.Vertex> points)
		{
			return null;
		}

		[Token(Token = "0x6000C08")]
		[Address(RVA = "0x9CE650", Offset = "0x9CE650", VA = "0x9CE650")]
		private void HeapInsert(SweepEvent[] heap, int heapsize, SweepEvent newevent)
		{
		}

		[Token(Token = "0x6000C09")]
		[Address(RVA = "0x9CE968", Offset = "0x9CE968", VA = "0x9CE968")]
		private void Heapify(SweepEvent[] heap, int heapsize, int eventnum)
		{
		}

		[Token(Token = "0x6000C0A")]
		[Address(RVA = "0x9CDF28", Offset = "0x9CDF28", VA = "0x9CDF28")]
		private void HeapDelete(SweepEvent[] heap, int heapsize, int eventnum)
		{
		}

		[Token(Token = "0x6000C0B")]
		[Address(RVA = "0x9CDCEC", Offset = "0x9CDCEC", VA = "0x9CDCEC")]
		private void CreateHeap(out SweepEvent[] eventheap)
		{
		}

		[Token(Token = "0x6000C0C")]
		[Address(RVA = "0x9CEB40", Offset = "0x9CEB40", VA = "0x9CEB40")]
		private SplayNode Splay(SplayNode splaytree, Point searchpoint, ref Otri searchtri)
		{
			return null;
		}

		[Token(Token = "0x6000C0D")]
		[Address(RVA = "0x9CE358", Offset = "0x9CE358", VA = "0x9CE358")]
		private SplayNode SplayInsert(SplayNode splayroot, Otri newkey, Point searchpoint)
		{
			return null;
		}

		[Token(Token = "0x6000C0E")]
		[Address(RVA = "0x9CE2B0", Offset = "0x9CE2B0", VA = "0x9CE2B0")]
		private SplayNode FrontLocate(SplayNode splayroot, Otri bottommost, TriangleNet.Geometry.Vertex searchvertex, ref Otri searchtri, ref bool farright)
		{
			return null;
		}

		[Token(Token = "0x6000C0F")]
		[Address(RVA = "0x9CE160", Offset = "0x9CE160", VA = "0x9CE160")]
		private SplayNode CircleTopInsert(SplayNode splayroot, Otri newkey, TriangleNet.Geometry.Vertex pa, TriangleNet.Geometry.Vertex pb, TriangleNet.Geometry.Vertex pc, double topy)
		{
			return null;
		}

		[Token(Token = "0x6000C10")]
		[Address(RVA = "0x9CEEC0", Offset = "0x9CEEC0", VA = "0x9CEEC0")]
		private bool RightOfHyperbola(ref Otri fronttri, Point newsite)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C11")]
		[Address(RVA = "0x9CE514", Offset = "0x9CE514", VA = "0x9CE514")]
		private double CircleTop(TriangleNet.Geometry.Vertex pa, TriangleNet.Geometry.Vertex pb, TriangleNet.Geometry.Vertex pc, double ccwabc)
		{
			return default(double);
		}

		[Token(Token = "0x6000C12")]
		[Address(RVA = "0x9CE088", Offset = "0x9CE088", VA = "0x9CE088")]
		private void Check4DeadEvent(ref Otri checktri, SweepEvent[] eventheap, ref int heapsize)
		{
		}

		[Token(Token = "0x6000C13")]
		[Address(RVA = "0x9CE7C8", Offset = "0x9CE7C8", VA = "0x9CE7C8")]
		private int RemoveGhosts(ref Otri startghost)
		{
			return default(int);
		}

		[Token(Token = "0x6000C14")]
		[Address(RVA = "0x9CF020", Offset = "0x9CF020", VA = "0x9CF020")]
		public SweepLine()
		{
		}
	}
}
namespace TriangleNet.Logging
{
	[Token(Token = "0x2000225")]
	public enum LogLevel
	{
		[Token(Token = "0x4000ECE")]
		Info,
		[Token(Token = "0x4000ECF")]
		Warning,
		[Token(Token = "0x4000ED0")]
		Error
	}
	[Token(Token = "0x2000226")]
	public interface ILog<T> where T : ILogItem
	{
		[Token(Token = "0x1700011F")]
		IList<T> Data
		{
			[Token(Token = "0x6000C1E")]
			get;
		}

		[Token(Token = "0x17000120")]
		LogLevel Level
		{
			[Token(Token = "0x6000C1F")]
			get;
		}

		[Token(Token = "0x6000C19")]
		void Add(T item);

		[Token(Token = "0x6000C1A")]
		void Clear();

		[Token(Token = "0x6000C1B")]
		void Info(string message);

		[Token(Token = "0x6000C1C")]
		void Error(string message, string info);

		[Token(Token = "0x6000C1D")]
		void Warning(string message, string info);
	}
	[Token(Token = "0x2000227")]
	public interface ILogItem
	{
		[Token(Token = "0x17000121")]
		DateTime Time
		{
			[Token(Token = "0x6000C20")]
			get;
		}

		[Token(Token = "0x17000122")]
		LogLevel Level
		{
			[Token(Token = "0x6000C21")]
			get;
		}

		[Token(Token = "0x17000123")]
		string Message
		{
			[Token(Token = "0x6000C22")]
			get;
		}

		[Token(Token = "0x17000124")]
		string Info
		{
			[Token(Token = "0x6000C23")]
			get;
		}
	}
	[Token(Token = "0x2000228")]
	public class LogItem : ILogItem
	{
		[Token(Token = "0x4000ED1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private DateTime time;

		[Token(Token = "0x4000ED2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private LogLevel level;

		[Token(Token = "0x4000ED3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private string message;

		[Token(Token = "0x4000ED4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string info;

		[Token(Token = "0x17000125")]
		public DateTime Time
		{
			[Token(Token = "0x6000C24")]
			[Address(RVA = "0x9CF08C", Offset = "0x9CF08C", VA = "0x9CF08C", Slot = "4")]
			get
			{
				return default(DateTime);
			}
		}

		[Token(Token = "0x17000126")]
		public LogLevel Level
		{
			[Token(Token = "0x6000C25")]
			[Address(RVA = "0x9CF094", Offset = "0x9CF094", VA = "0x9CF094", Slot = "5")]
			get
			{
				return default(LogLevel);
			}
		}

		[Token(Token = "0x17000127")]
		public string Message
		{
			[Token(Token = "0x6000C26")]
			[Address(RVA = "0x9CF09C", Offset = "0x9CF09C", VA = "0x9CF09C", Slot = "6")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000128")]
		public string Info
		{
			[Token(Token = "0x6000C27")]
			[Address(RVA = "0x9CF0A4", Offset = "0x9CF0A4", VA = "0x9CF0A4", Slot = "7")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C28")]
		[Address(RVA = "0x9CF0AC", Offset = "0x9CF0AC", VA = "0x9CF0AC")]
		public LogItem(LogLevel level, string message)
		{
		}

		[Token(Token = "0x6000C29")]
		[Address(RVA = "0x9CF10C", Offset = "0x9CF10C", VA = "0x9CF10C")]
		public LogItem(LogLevel level, string message, string info)
		{
		}
	}
}
namespace TriangleNet.IO
{
	[Token(Token = "0x2000229")]
	internal class DebugWriter
	{
		[Token(Token = "0x4000ED5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static NumberFormatInfo nfi;

		[Token(Token = "0x4000ED6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int iteration;

		[Token(Token = "0x4000ED7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string session;

		[Token(Token = "0x4000ED8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private StreamWriter stream;

		[Token(Token = "0x4000ED9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string tmpFile;

		[Token(Token = "0x4000EDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int[] vertices;

		[Token(Token = "0x4000EDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int triangles;

		[Token(Token = "0x4000EDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly DebugWriter instance;

		[Token(Token = "0x17000129")]
		public static DebugWriter Session
		{
			[Token(Token = "0x6000C2C")]
			[Address(RVA = "0x9CF27C", Offset = "0x9CF27C", VA = "0x9CF27C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C2A")]
		[Address(RVA = "0x9CF1B0", Offset = "0x9CF1B0", VA = "0x9CF1B0")]
		static DebugWriter()
		{
		}

		[Token(Token = "0x6000C2B")]
		[Address(RVA = "0x9CF274", Offset = "0x9CF274", VA = "0x9CF274")]
		private DebugWriter()
		{
		}

		[Token(Token = "0x6000C2D")]
		[Address(RVA = "0x9CF2D4", Offset = "0x9CF2D4", VA = "0x9CF2D4")]
		public void Start(string session)
		{
		}

		[Token(Token = "0x6000C2E")]
		[Address(RVA = "0x9CF3F0", Offset = "0x9CF3F0", VA = "0x9CF3F0")]
		public void Write(Mesh mesh, bool skip = false)
		{
		}

		[Token(Token = "0x6000C2F")]
		[Address(RVA = "0x9D02F0", Offset = "0x9D02F0", VA = "0x9D02F0")]
		public void Finish()
		{
		}

		[Token(Token = "0x6000C30")]
		[Address(RVA = "0x9D0348", Offset = "0x9D0348", VA = "0x9D0348")]
		private void Finish(string path)
		{
		}

		[Token(Token = "0x6000C31")]
		[Address(RVA = "0x9D0760", Offset = "0x9D0760", VA = "0x9D0760")]
		private void WriteGeometry(IPolygon geometry)
		{
		}

		[Token(Token = "0x6000C32")]
		[Address(RVA = "0x9CF4C8", Offset = "0x9CF4C8", VA = "0x9CF4C8")]
		private void WriteMesh(Mesh mesh, bool skip)
		{
		}

		[Token(Token = "0x6000C33")]
		[Address(RVA = "0x9D0800", Offset = "0x9D0800", VA = "0x9D0800")]
		private bool VerticesChanged(Mesh mesh)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C34")]
		[Address(RVA = "0x9D0C00", Offset = "0x9D0C00", VA = "0x9D0C00")]
		private void HashVertices(Mesh mesh)
		{
		}
	}
	[Token(Token = "0x200022A")]
	public static class FileProcessor
	{
		[Token(Token = "0x4000EDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static List<IFileFormat> formats;

		[Token(Token = "0x6000C35")]
		[Address(RVA = "0x9D1064", Offset = "0x9D1064", VA = "0x9D1064")]
		static FileProcessor()
		{
		}

		[Token(Token = "0x6000C36")]
		[Address(RVA = "0x9D11B8", Offset = "0x9D11B8", VA = "0x9D11B8")]
		public static void Add(IFileFormat format)
		{
		}

		[Token(Token = "0x6000C37")]
		[Address(RVA = "0x9D1290", Offset = "0x9D1290", VA = "0x9D1290")]
		public static bool IsSupported(string file)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C38")]
		[Address(RVA = "0x9D1490", Offset = "0x9D1490", VA = "0x9D1490")]
		public static IPolygon Read(string filename)
		{
			return null;
		}

		[Token(Token = "0x6000C39")]
		[Address(RVA = "0x9D1784", Offset = "0x9D1784", VA = "0x9D1784")]
		public static void Write(IPolygon polygon, string filename)
		{
		}

		[Token(Token = "0x6000C3A")]
		[Address(RVA = "0x9D1A44", Offset = "0x9D1A44", VA = "0x9D1A44")]
		public static IMesh Import(string filename)
		{
			return null;
		}

		[Token(Token = "0x6000C3B")]
		[Address(RVA = "0x9D1D38", Offset = "0x9D1D38", VA = "0x9D1D38")]
		public static void Write(IMesh mesh, string filename)
		{
		}
	}
	[Token(Token = "0x200022B")]
	public interface IFileFormat
	{
		[Token(Token = "0x6000C3C")]
		bool IsSupported(string file);
	}
	[Token(Token = "0x200022C")]
	public interface IMeshFormat : IFileFormat
	{
		[Token(Token = "0x6000C3D")]
		IMesh Import(string filename);

		[Token(Token = "0x6000C3E")]
		void Write(IMesh mesh, string filename);

		[Token(Token = "0x6000C3F")]
		void Write(IMesh mesh, StreamWriter stream);
	}
	[Token(Token = "0x200022D")]
	public class InputTriangle : ITriangle
	{
		[Token(Token = "0x4000EDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal int[] vertices;

		[Token(Token = "0x4000EDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal int region;

		[Token(Token = "0x4000EE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal double area;

		[Token(Token = "0x1700012A")]
		public int ID
		{
			[Token(Token = "0x6000C41")]
			[Address(RVA = "0x9D20A8", Offset = "0x9D20A8", VA = "0x9D20A8", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700012B")]
		public int P0
		{
			[Token(Token = "0x6000C42")]
			[Address(RVA = "0x9D20B0", Offset = "0x9D20B0", VA = "0x9D20B0", Slot = "5")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700012C")]
		public int P1
		{
			[Token(Token = "0x6000C43")]
			[Address(RVA = "0x9D20D8", Offset = "0x9D20D8", VA = "0x9D20D8", Slot = "6")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700012D")]
		public int P2
		{
			[Token(Token = "0x6000C44")]
			[Address(RVA = "0x9D2104", Offset = "0x9D2104", VA = "0x9D2104", Slot = "7")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700012E")]
		public bool SupportsNeighbors
		{
			[Token(Token = "0x6000C46")]
			[Address(RVA = "0x9D2138", Offset = "0x9D2138", VA = "0x9D2138", Slot = "9")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700012F")]
		public int N0
		{
			[Token(Token = "0x6000C47")]
			[Address(RVA = "0x9D2140", Offset = "0x9D2140", VA = "0x9D2140", Slot = "10")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000130")]
		public int N1
		{
			[Token(Token = "0x6000C48")]
			[Address(RVA = "0x9D2148", Offset = "0x9D2148", VA = "0x9D2148", Slot = "11")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000131")]
		public int N2
		{
			[Token(Token = "0x6000C49")]
			[Address(RVA = "0x9D2150", Offset = "0x9D2150", VA = "0x9D2150", Slot = "12")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000132")]
		public double Area
		{
			[Token(Token = "0x6000C4C")]
			[Address(RVA = "0x9D2168", Offset = "0x9D2168", VA = "0x9D2168", Slot = "15")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6000C4D")]
			[Address(RVA = "0x9D2170", Offset = "0x9D2170", VA = "0x9D2170", Slot = "16")]
			set
			{
			}
		}

		[Token(Token = "0x17000133")]
		public int Region
		{
			[Token(Token = "0x6000C4E")]
			[Address(RVA = "0x9D2178", Offset = "0x9D2178", VA = "0x9D2178", Slot = "17")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000C4F")]
			[Address(RVA = "0x9D2180", Offset = "0x9D2180", VA = "0x9D2180")]
			set
			{
			}
		}

		[Token(Token = "0x6000C40")]
		[Address(RVA = "0x9D1FF8", Offset = "0x9D1FF8", VA = "0x9D1FF8")]
		public InputTriangle(int p0, int p1, int p2)
		{
		}

		[Token(Token = "0x6000C45")]
		[Address(RVA = "0x9D2130", Offset = "0x9D2130", VA = "0x9D2130", Slot = "8")]
		public TriangleNet.Geometry.Vertex GetVertex(int index)
		{
			return null;
		}

		[Token(Token = "0x6000C4A")]
		[Address(RVA = "0x9D2158", Offset = "0x9D2158", VA = "0x9D2158", Slot = "13")]
		public ITriangle GetNeighbor(int index)
		{
			return null;
		}

		[Token(Token = "0x6000C4B")]
		[Address(RVA = "0x9D2160", Offset = "0x9D2160", VA = "0x9D2160", Slot = "14")]
		public ISegment GetSegment(int index)
		{
			return null;
		}
	}
	[Token(Token = "0x200022E")]
	public interface IPolygonFormat : IFileFormat
	{
		[Token(Token = "0x6000C50")]
		IPolygon Read(string filename);

		[Token(Token = "0x6000C51")]
		void Write(IPolygon polygon, string filename);

		[Token(Token = "0x6000C52")]
		void Write(IPolygon polygon, StreamWriter stream);
	}
	[Token(Token = "0x200022F")]
	public class TriangleFormat : IPolygonFormat, IFileFormat, IMeshFormat
	{
		[Token(Token = "0x6000C53")]
		[Address(RVA = "0x9D2188", Offset = "0x9D2188", VA = "0x9D2188", Slot = "7")]
		public bool IsSupported(string file)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C54")]
		[Address(RVA = "0x9D2264", Offset = "0x9D2264", VA = "0x9D2264", Slot = "8")]
		public IMesh Import(string filename)
		{
			return null;
		}

		[Token(Token = "0x6000C55")]
		[Address(RVA = "0x9D2544", Offset = "0x9D2544", VA = "0x9D2544", Slot = "9")]
		public void Write(IMesh mesh, string filename)
		{
		}

		[Token(Token = "0x6000C56")]
		[Address(RVA = "0x9D2DB4", Offset = "0x9D2DB4", VA = "0x9D2DB4", Slot = "10")]
		public void Write(IMesh mesh, StreamWriter stream)
		{
		}

		[Token(Token = "0x6000C57")]
		[Address(RVA = "0x9D2DF4", Offset = "0x9D2DF4", VA = "0x9D2DF4", Slot = "4")]
		public IPolygon Read(string filename)
		{
			return null;
		}

		[Token(Token = "0x6000C58")]
		[Address(RVA = "0x9D3010", Offset = "0x9D3010", VA = "0x9D3010", Slot = "5")]
		public void Write(IPolygon polygon, string filename)
		{
		}

		[Token(Token = "0x6000C59")]
		[Address(RVA = "0x9D43C8", Offset = "0x9D43C8", VA = "0x9D43C8", Slot = "6")]
		public void Write(IPolygon polygon, StreamWriter stream)
		{
		}

		[Token(Token = "0x6000C5A")]
		[Address(RVA = "0x9D11B0", Offset = "0x9D11B0", VA = "0x9D11B0")]
		public TriangleFormat()
		{
		}
	}
	[Token(Token = "0x2000230")]
	public static class TriangleReader
	{
		[Token(Token = "0x4000EE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static NumberFormatInfo nfi;

		[Token(Token = "0x4000EE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static int startIndex;

		[Token(Token = "0x6000C5B")]
		[Address(RVA = "0x9D4408", Offset = "0x9D4408", VA = "0x9D4408")]
		private static bool TryReadLine(StreamReader reader, out string[] token)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C5C")]
		[Address(RVA = "0x9D4568", Offset = "0x9D4568", VA = "0x9D4568")]
		private static void ReadVertex(Polygon data, int index, string[] line, int attributes, int marks)
		{
		}

		[Token(Token = "0x6000C5D")]
		[Address(RVA = "0x9D4874", Offset = "0x9D4874", VA = "0x9D4874")]
		public static void Read(string filename, out Polygon geometry)
		{
		}

		[Token(Token = "0x6000C5E")]
		[Address(RVA = "0x9D2428", Offset = "0x9D2428", VA = "0x9D2428")]
		public static void Read(string filename, out Polygon geometry, out List<ITriangle> triangles)
		{
		}

		[Token(Token = "0x6000C5F")]
		[Address(RVA = "0x9D49FC", Offset = "0x9D49FC", VA = "0x9D49FC")]
		public static IPolygon Read(string filename)
		{
			return null;
		}

		[Token(Token = "0x6000C60")]
		[Address(RVA = "0x9D2F5C", Offset = "0x9D2F5C", VA = "0x9D2F5C")]
		public static Polygon ReadNodeFile(string nodefilename)
		{
			return null;
		}

		[Token(Token = "0x6000C61")]
		[Address(RVA = "0x9D4A68", Offset = "0x9D4A68", VA = "0x9D4A68")]
		public static Polygon ReadNodeFile(string nodefilename, bool readElements)
		{
			return null;
		}

		[Token(Token = "0x6000C62")]
		[Address(RVA = "0x9D2FB4", Offset = "0x9D2FB4", VA = "0x9D2FB4")]
		public static Polygon ReadPolyFile(string polyfilename)
		{
			return null;
		}

		[Token(Token = "0x6000C63")]
		[Address(RVA = "0x9D6B34", Offset = "0x9D6B34", VA = "0x9D6B34")]
		public static Polygon ReadPolyFile(string polyfilename, bool readElements)
		{
			return null;
		}

		[Token(Token = "0x6000C64")]
		[Address(RVA = "0x9D586C", Offset = "0x9D586C", VA = "0x9D586C")]
		public static Polygon ReadPolyFile(string polyfilename, bool readElements, bool readArea)
		{
			return null;
		}

		[Token(Token = "0x6000C65")]
		[Address(RVA = "0x9D49A4", Offset = "0x9D49A4", VA = "0x9D49A4")]
		public static List<ITriangle> ReadEleFile(string elefilename)
		{
			return null;
		}

		[Token(Token = "0x6000C66")]
		[Address(RVA = "0x9D5094", Offset = "0x9D5094", VA = "0x9D5094")]
		private static List<ITriangle> ReadEleFile(string elefilename, bool readArea)
		{
			return null;
		}

		[Token(Token = "0x6000C67")]
		[Address(RVA = "0x9D6D58", Offset = "0x9D6D58", VA = "0x9D6D58")]
		private static double[] ReadAreaFile(string areafilename, int intriangles)
		{
			return null;
		}

		[Token(Token = "0x6000C68")]
		[Address(RVA = "0x9D727C", Offset = "0x9D727C", VA = "0x9D727C")]
		public static List<Edge> ReadEdgeFile(string edgeFile, int invertices)
		{
			return null;
		}
	}
	[Token(Token = "0x2000231")]
	public static class TriangleWriter
	{
		[Token(Token = "0x4000EE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static NumberFormatInfo nfi;

		[Token(Token = "0x6000C6A")]
		[Address(RVA = "0x9D7BD4", Offset = "0x9D7BD4", VA = "0x9D7BD4")]
		public static void Write(Mesh mesh, string filename)
		{
		}

		[Token(Token = "0x6000C6B")]
		[Address(RVA = "0x9D7CB8", Offset = "0x9D7CB8", VA = "0x9D7CB8")]
		public static void WriteNodes(Mesh mesh, string filename)
		{
		}

		[Token(Token = "0x6000C6C")]
		[Address(RVA = "0x9D7E6C", Offset = "0x9D7E6C", VA = "0x9D7E6C")]
		private static void WriteNodes(StreamWriter writer, Mesh mesh)
		{
		}

		[Token(Token = "0x6000C6D")]
		[Address(RVA = "0x9D833C", Offset = "0x9D833C", VA = "0x9D833C")]
		private static void WriteNodes(StreamWriter writer, IEnumerable<TriangleNet.Geometry.Vertex> nodes, bool markers, int attribs, bool jettison)
		{
		}

		[Token(Token = "0x6000C6E")]
		[Address(RVA = "0x9D2710", Offset = "0x9D2710", VA = "0x9D2710")]
		public static void WriteElements(Mesh mesh, string filename)
		{
		}

		[Token(Token = "0x6000C6F")]
		[Address(RVA = "0x9D3074", Offset = "0x9D3074", VA = "0x9D3074")]
		public static void WritePoly(IPolygon polygon, string filename)
		{
		}

		[Token(Token = "0x6000C70")]
		[Address(RVA = "0x9D26A8", Offset = "0x9D26A8", VA = "0x9D26A8")]
		public static void WritePoly(Mesh mesh, string filename)
		{
		}

		[Token(Token = "0x6000C71")]
		[Address(RVA = "0x9D8858", Offset = "0x9D8858", VA = "0x9D8858")]
		public static void WritePoly(Mesh mesh, string filename, bool writeNodes)
		{
		}

		[Token(Token = "0x6000C72")]
		[Address(RVA = "0x9D95C0", Offset = "0x9D95C0", VA = "0x9D95C0")]
		public static void WriteEdges(Mesh mesh, string filename)
		{
		}

		[Token(Token = "0x6000C73")]
		[Address(RVA = "0x9DA0F4", Offset = "0x9DA0F4", VA = "0x9DA0F4")]
		public static void WriteNeighbors(Mesh mesh, string filename)
		{
		}

		[Token(Token = "0x6000C74")]
		[Address(RVA = "0x9DA704", Offset = "0x9DA704", VA = "0x9DA704")]
		public static void WriteVoronoi(Mesh mesh, string filename)
		{
		}

		[Token(Token = "0x6000C75")]
		[Address(RVA = "0x9DB114", Offset = "0x9DB114", VA = "0x9DB114")]
		public static void WriteOffFile(Mesh mesh, string filename)
		{
		}
	}
}
namespace TriangleNet.Geometry
{
	[Token(Token = "0x2000232")]
	public class Edge : IEdge
	{
		[Token(Token = "0x17000134")]
		public int P0
		{
			[Token(Token = "0x6000C77")]
			[Address(RVA = "0x9DB934", Offset = "0x9DB934", VA = "0x9DB934", Slot = "4")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000C78")]
			[Address(RVA = "0x9DB93C", Offset = "0x9DB93C", VA = "0x9DB93C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000135")]
		public int P1
		{
			[Token(Token = "0x6000C79")]
			[Address(RVA = "0x9DB944", Offset = "0x9DB944", VA = "0x9DB944", Slot = "5")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000C7A")]
			[Address(RVA = "0x9DB94C", Offset = "0x9DB94C", VA = "0x9DB94C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000136")]
		public int Boundary
		{
			[Token(Token = "0x6000C7B")]
			[Address(RVA = "0x9DB954", Offset = "0x9DB954", VA = "0x9DB954", Slot = "6")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000C7C")]
			[Address(RVA = "0x9DB95C", Offset = "0x9DB95C", VA = "0x9DB95C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000C7D")]
		[Address(RVA = "0x9DB964", Offset = "0x9DB964", VA = "0x9DB964")]
		public Edge(int p0, int p1)
		{
		}

		[Token(Token = "0x6000C7E")]
		[Address(RVA = "0x9D6B9C", Offset = "0x9D6B9C", VA = "0x9D6B9C")]
		public Edge(int p0, int p1, int boundary)
		{
		}
	}
	[Token(Token = "0x2000233")]
	public static class ExtensionMethods
	{
		[Token(Token = "0x6000C7F")]
		[Address(RVA = "0x9DB994", Offset = "0x9DB994", VA = "0x9DB994")]
		public static IMesh Triangulate(this IPolygon polygon)
		{
			return null;
		}

		[Token(Token = "0x6000C80")]
		[Address(RVA = "0x9DBA04", Offset = "0x9DBA04", VA = "0x9DBA04")]
		public static IMesh Triangulate(this IPolygon polygon, ConstraintOptions options)
		{
			return null;
		}

		[Token(Token = "0x6000C81")]
		[Address(RVA = "0x9DBA80", Offset = "0x9DBA80", VA = "0x9DBA80")]
		public static IMesh Triangulate(this IPolygon polygon, QualityOptions quality)
		{
			return null;
		}

		[Token(Token = "0x6000C82")]
		[Address(RVA = "0x9DBAFC", Offset = "0x9DBAFC", VA = "0x9DBAFC")]
		public static IMesh Triangulate(this IPolygon polygon, ConstraintOptions options, QualityOptions quality)
		{
			return null;
		}

		[Token(Token = "0x6000C83")]
		[Address(RVA = "0x9DBC54", Offset = "0x9DBC54", VA = "0x9DBC54")]
		public static IMesh Triangulate(this IPolygon polygon, ConstraintOptions options, QualityOptions quality, ITriangulator triangulator)
		{
			return null;
		}

		[Token(Token = "0x6000C84")]
		[Address(RVA = "0x9DBDBC", Offset = "0x9DBDBC", VA = "0x9DBDBC")]
		public static bool Intersect(this Rectangle rect, Point p0, Point p1, ref Point c0, ref Point c1)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000234")]
	public interface IEdge
	{
		[Token(Token = "0x17000137")]
		int P0
		{
			[Token(Token = "0x6000C85")]
			get;
		}

		[Token(Token = "0x17000138")]
		int P1
		{
			[Token(Token = "0x6000C86")]
			get;
		}

		[Token(Token = "0x17000139")]
		int Boundary
		{
			[Token(Token = "0x6000C87")]
			get;
		}
	}
	[Token(Token = "0x2000235")]
	public interface IPolygon
	{
		[Token(Token = "0x1700013A")]
		List<Vertex> Points
		{
			[Token(Token = "0x6000C88")]
			get;
		}

		[Token(Token = "0x1700013B")]
		List<IEdge> Segments
		{
			[Token(Token = "0x6000C89")]
			get;
		}

		[Token(Token = "0x1700013C")]
		List<Point> Holes
		{
			[Token(Token = "0x6000C8A")]
			get;
		}

		[Token(Token = "0x1700013D")]
		List<RegionPointer> Regions
		{
			[Token(Token = "0x6000C8B")]
			get;
		}

		[Token(Token = "0x1700013E")]
		bool HasPointMarkers
		{
			[Token(Token = "0x6000C8C")]
			get;
			[Token(Token = "0x6000C8D")]
			set;
		}

		[Token(Token = "0x1700013F")]
		bool HasSegmentMarkers
		{
			[Token(Token = "0x6000C8E")]
			get;
			[Token(Token = "0x6000C8F")]
			set;
		}

		[Token(Token = "0x6000C90")]
		void AddContour(IEnumerable<Vertex> points, int marker, bool hole, bool convex);

		[Token(Token = "0x6000C91")]
		void AddContour(IEnumerable<Vertex> points, int marker, Point hole);

		[Token(Token = "0x6000C92")]
		Rectangle Bounds();
	}
	[Token(Token = "0x2000236")]
	public interface ISegment : IEdge
	{
		[Token(Token = "0x6000C93")]
		Vertex GetVertex(int index);

		[Token(Token = "0x6000C94")]
		ITriangle GetTriangle(int index);
	}
	[Token(Token = "0x2000237")]
	public interface ITriangle
	{
		[Token(Token = "0x17000140")]
		int ID
		{
			[Token(Token = "0x6000C95")]
			get;
		}

		[Token(Token = "0x17000141")]
		int P0
		{
			[Token(Token = "0x6000C96")]
			get;
		}

		[Token(Token = "0x17000142")]
		int P1
		{
			[Token(Token = "0x6000C97")]
			get;
		}

		[Token(Token = "0x17000143")]
		int P2
		{
			[Token(Token = "0x6000C98")]
			get;
		}

		[Token(Token = "0x17000144")]
		bool SupportsNeighbors
		{
			[Token(Token = "0x6000C9A")]
			get;
		}

		[Token(Token = "0x17000145")]
		int N0
		{
			[Token(Token = "0x6000C9B")]
			get;
		}

		[Token(Token = "0x17000146")]
		int N1
		{
			[Token(Token = "0x6000C9C")]
			get;
		}

		[Token(Token = "0x17000147")]
		int N2
		{
			[Token(Token = "0x6000C9D")]
			get;
		}

		[Token(Token = "0x17000148")]
		double Area
		{
			[Token(Token = "0x6000CA0")]
			get;
			[Token(Token = "0x6000CA1")]
			set;
		}

		[Token(Token = "0x17000149")]
		int Region
		{
			[Token(Token = "0x6000CA2")]
			get;
		}

		[Token(Token = "0x6000C99")]
		Vertex GetVertex(int index);

		[Token(Token = "0x6000C9E")]
		ITriangle GetNeighbor(int index);

		[Token(Token = "0x6000C9F")]
		ISegment GetSegment(int index);
	}
	[Token(Token = "0x2000238")]
	public class Point : IComparable<Point>, IEquatable<Point>
	{
		[Token(Token = "0x4000EE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal int id;

		[Token(Token = "0x4000EE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal double x;

		[Token(Token = "0x4000EE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal double y;

		[Token(Token = "0x4000EEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal int mark;

		[Token(Token = "0x1700014A")]
		public int ID
		{
			[Token(Token = "0x6000CA6")]
			[Address(RVA = "0x9DBF40", Offset = "0x9DBF40", VA = "0x9DBF40")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700014B")]
		public double X
		{
			[Token(Token = "0x6000CA7")]
			[Address(RVA = "0x9DBF48", Offset = "0x9DBF48", VA = "0x9DBF48")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x1700014C")]
		public double Y
		{
			[Token(Token = "0x6000CA8")]
			[Address(RVA = "0x9DBF50", Offset = "0x9DBF50", VA = "0x9DBF50")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x1700014D")]
		public int Boundary
		{
			[Token(Token = "0x6000CA9")]
			[Address(RVA = "0x9DBF58", Offset = "0x9DBF58", VA = "0x9DBF58")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000CA3")]
		[Address(RVA = "0x9CF000", Offset = "0x9CF000", VA = "0x9CF000")]
		public Point()
		{
		}

		[Token(Token = "0x6000CA4")]
		[Address(RVA = "0x9D6C88", Offset = "0x9D6C88", VA = "0x9D6C88")]
		public Point(double x, double y)
		{
		}

		[Token(Token = "0x6000CA5")]
		[Address(RVA = "0x9DBF04", Offset = "0x9DBF04", VA = "0x9DBF04")]
		public Point(double x, double y, int mark)
		{
		}

		[Token(Token = "0x6000CAA")]
		[Address(RVA = "0x9CC3D8", Offset = "0x9CC3D8", VA = "0x9CC3D8")]
		public static bool operator ==(Point a, Point b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CAB")]
		[Address(RVA = "0x9CC424", Offset = "0x9CC424", VA = "0x9CC424")]
		public static bool operator !=(Point a, Point b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CAC")]
		[Address(RVA = "0x9DBF90", Offset = "0x9DBF90", VA = "0x9DBF90", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CAD")]
		[Address(RVA = "0x9DBF60", Offset = "0x9DBF60", VA = "0x9DBF60", Slot = "5")]
		public bool Equals(Point p)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CAE")]
		[Address(RVA = "0x9DC038", Offset = "0x9DC038", VA = "0x9DC038", Slot = "4")]
		public int CompareTo(Point other)
		{
			return default(int);
		}

		[Token(Token = "0x6000CAF")]
		[Address(RVA = "0x9DC09C", Offset = "0x9DC09C", VA = "0x9DC09C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000CB0")]
		[Address(RVA = "0x9DC184", Offset = "0x9DC184", VA = "0x9DC184", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000239")]
	public class Polygon : IPolygon
	{
		[Token(Token = "0x4000EEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<Vertex> points;

		[Token(Token = "0x4000EEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private List<Point> holes;

		[Token(Token = "0x4000EED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<RegionPointer> regions;

		[Token(Token = "0x4000EEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<IEdge> segments;

		[Token(Token = "0x1700014E")]
		public List<Vertex> Points
		{
			[Token(Token = "0x6000CB1")]
			[Address(RVA = "0x9DC22C", Offset = "0x9DC22C", VA = "0x9DC22C", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700014F")]
		public List<Point> Holes
		{
			[Token(Token = "0x6000CB2")]
			[Address(RVA = "0x9DC234", Offset = "0x9DC234", VA = "0x9DC234", Slot = "6")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000150")]
		public List<RegionPointer> Regions
		{
			[Token(Token = "0x6000CB3")]
			[Address(RVA = "0x9DC23C", Offset = "0x9DC23C", VA = "0x9DC23C", Slot = "7")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000151")]
		public List<IEdge> Segments
		{
			[Token(Token = "0x6000CB4")]
			[Address(RVA = "0x9DC244", Offset = "0x9DC244", VA = "0x9DC244", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000152")]
		public bool HasPointMarkers
		{
			[Token(Token = "0x6000CB5")]
			[Address(RVA = "0x9DC24C", Offset = "0x9DC24C", VA = "0x9DC24C", Slot = "8")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000CB6")]
			[Address(RVA = "0x9DC254", Offset = "0x9DC254", VA = "0x9DC254", Slot = "9")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000153")]
		public bool HasSegmentMarkers
		{
			[Token(Token = "0x6000CB7")]
			[Address(RVA = "0x9DC260", Offset = "0x9DC260", VA = "0x9DC260", Slot = "10")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000CB8")]
			[Address(RVA = "0x9DC268", Offset = "0x9DC268", VA = "0x9DC268", Slot = "11")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000154")]
		public int Count
		{
			[Token(Token = "0x6000CB9")]
			[Address(RVA = "0x9DC274", Offset = "0x9DC274", VA = "0x9DC274")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000CBA")]
		[Address(RVA = "0x9DC2BC", Offset = "0x9DC2BC", VA = "0x9DC2BC")]
		public Polygon()
		{
		}

		[Token(Token = "0x6000CBB")]
		[Address(RVA = "0x9D5088", Offset = "0x9D5088", VA = "0x9D5088")]
		public Polygon(int capacity)
		{
		}

		[Token(Token = "0x6000CBC")]
		[Address(RVA = "0x9DC2C8", Offset = "0x9DC2C8", VA = "0x9DC2C8")]
		public Polygon(int capacity, bool markers)
		{
		}

		[Token(Token = "0x6000CBD")]
		[Address(RVA = "0x9DC464", Offset = "0x9DC464", VA = "0x9DC464", Slot = "12")]
		public void AddContour(IEnumerable<Vertex> points, int marker = 0, bool hole = false, bool convex = false)
		{
		}

		[Token(Token = "0x6000CBE")]
		[Address(RVA = "0x9DCBD0", Offset = "0x9DCBD0", VA = "0x9DCBD0", Slot = "13")]
		public void AddContour(IEnumerable<Vertex> points, int marker, Point hole)
		{
		}

		[Token(Token = "0x6000CBF")]
		[Address(RVA = "0x9DCEC4", Offset = "0x9DCEC4", VA = "0x9DCEC4", Slot = "14")]
		public Rectangle Bounds()
		{
			return null;
		}

		[Token(Token = "0x6000CC0")]
		[Address(RVA = "0x9DD248", Offset = "0x9DD248", VA = "0x9DD248")]
		public void Add(Vertex vertex)
		{
		}

		[Token(Token = "0x6000CC1")]
		[Address(RVA = "0x9D47A0", Offset = "0x9D47A0", VA = "0x9D47A0")]
		public void Add(Vertex vertex, double[] attributes)
		{
		}

		[Token(Token = "0x6000CC2")]
		[Address(RVA = "0x9D6BD8", Offset = "0x9D6BD8", VA = "0x9D6BD8")]
		public void Add(Edge edge)
		{
		}

		[Token(Token = "0x6000CC3")]
		[Address(RVA = "0x9DC8C4", Offset = "0x9DC8C4", VA = "0x9DC8C4")]
		private Point FindPointInPolygon(List<Vertex> contour)
		{
			return null;
		}

		[Token(Token = "0x6000CC4")]
		[Address(RVA = "0x9DD488", Offset = "0x9DD488", VA = "0x9DD488")]
		private bool IsPointInPolygon(Point point, List<Vertex> poly)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200023A")]
	public class Rectangle
	{
		[Token(Token = "0x4000EF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private double xmin;

		[Token(Token = "0x4000EF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private double ymin;

		[Token(Token = "0x4000EF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private double xmax;

		[Token(Token = "0x4000EF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private double ymax;

		[Token(Token = "0x17000155")]
		public double Left
		{
			[Token(Token = "0x6000CC8")]
			[Address(RVA = "0x9DD748", Offset = "0x9DD748", VA = "0x9DD748")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000156")]
		public double Right
		{
			[Token(Token = "0x6000CC9")]
			[Address(RVA = "0x9DD750", Offset = "0x9DD750", VA = "0x9DD750")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000157")]
		public double Bottom
		{
			[Token(Token = "0x6000CCA")]
			[Address(RVA = "0x9DD758", Offset = "0x9DD758", VA = "0x9DD758")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000158")]
		public double Top
		{
			[Token(Token = "0x6000CCB")]
			[Address(RVA = "0x9DD760", Offset = "0x9DD760", VA = "0x9DD760")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000159")]
		public double Width
		{
			[Token(Token = "0x6000CCC")]
			[Address(RVA = "0x9CCE60", Offset = "0x9CCE60", VA = "0x9CCE60")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x1700015A")]
		public double Height
		{
			[Token(Token = "0x6000CCD")]
			[Address(RVA = "0x9CCE70", Offset = "0x9CCE70", VA = "0x9CCE70")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x6000CC5")]
		[Address(RVA = "0x9DCF44", Offset = "0x9DCF44", VA = "0x9DCF44")]
		public Rectangle()
		{
		}

		[Token(Token = "0x6000CC6")]
		[Address(RVA = "0x9DD6B8", Offset = "0x9DD6B8", VA = "0x9DD6B8")]
		public Rectangle(Rectangle other)
		{
		}

		[Token(Token = "0x6000CC7")]
		[Address(RVA = "0x9DD700", Offset = "0x9DD700", VA = "0x9DD700")]
		public Rectangle(double x, double y, double width, double height)
		{
		}

		[Token(Token = "0x6000CCE")]
		[Address(RVA = "0x9DD768", Offset = "0x9DD768", VA = "0x9DD768")]
		public void Resize(double dx, double dy)
		{
		}

		[Token(Token = "0x6000CCF")]
		[Address(RVA = "0x9DD780", Offset = "0x9DD780", VA = "0x9DD780")]
		public void Expand(Point p)
		{
		}

		[Token(Token = "0x6000CD0")]
		[Address(RVA = "0x9DCF70", Offset = "0x9DCF70", VA = "0x9DCF70")]
		public void Expand(IEnumerable<Point> points)
		{
		}

		[Token(Token = "0x6000CD1")]
		[Address(RVA = "0x9DD2F8", Offset = "0x9DD2F8", VA = "0x9DD2F8")]
		public void Expand(List<Vertex> points)
		{
		}

		[Token(Token = "0x6000CD2")]
		[Address(RVA = "0x9DD83C", Offset = "0x9DD83C", VA = "0x9DD83C")]
		public void Expand(Rectangle other)
		{
		}

		[Token(Token = "0x6000CD3")]
		[Address(RVA = "0x9DD434", Offset = "0x9DD434", VA = "0x9DD434")]
		public bool Contains(Point pt)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CD4")]
		[Address(RVA = "0x9DD8F8", Offset = "0x9DD8F8", VA = "0x9DD8F8")]
		public bool Contains(Rectangle other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CD5")]
		[Address(RVA = "0x9DD954", Offset = "0x9DD954", VA = "0x9DD954")]
		public bool Intersects(Rectangle other)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200023B")]
	public class RegionPointer
	{
		[Token(Token = "0x4000EF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal Point point;

		[Token(Token = "0x4000EF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal int id;

		[Token(Token = "0x6000CD6")]
		[Address(RVA = "0x9D6CB8", Offset = "0x9D6CB8", VA = "0x9D6CB8")]
		public RegionPointer(double x, double y, int id)
		{
		}
	}
	[Token(Token = "0x200023C")]
	public class Vertex : Point
	{
		[Token(Token = "0x4000EF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		internal int hash;

		[Token(Token = "0x4000EF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal double[] attributes;

		[Token(Token = "0x4000EF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal VertexType type;

		[Token(Token = "0x4000EFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal Otri tri;

		[Token(Token = "0x1700015B")]
		public double[] Attributes
		{
			[Token(Token = "0x6000CDB")]
			[Address(RVA = "0x9DDA5C", Offset = "0x9DDA5C", VA = "0x9DDA5C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700015C")]
		public VertexType Type
		{
			[Token(Token = "0x6000CDC")]
			[Address(RVA = "0x9DDA64", Offset = "0x9DDA64", VA = "0x9DDA64")]
			get
			{
				return default(VertexType);
			}
		}

		[Token(Token = "0x1700015D")]
		public double this[int i]
		{
			[Token(Token = "0x6000CDD")]
			[Address(RVA = "0x9CB830", Offset = "0x9CB830", VA = "0x9CB830")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x6000CD7")]
		[Address(RVA = "0x9CF078", Offset = "0x9CF078", VA = "0x9CF078")]
		public Vertex()
		{
		}

		[Token(Token = "0x6000CD8")]
		[Address(RVA = "0x9CCE80", Offset = "0x9CCE80", VA = "0x9CCE80")]
		public Vertex(double x, double y)
		{
		}

		[Token(Token = "0x6000CD9")]
		[Address(RVA = "0x9D4798", Offset = "0x9D4798", VA = "0x9D4798")]
		public Vertex(double x, double y, int mark)
		{
		}

		[Token(Token = "0x6000CDA")]
		[Address(RVA = "0x9DD9B0", Offset = "0x9DD9B0", VA = "0x9DD9B0")]
		public Vertex(double x, double y, int mark, int attribs)
		{
		}

		[Token(Token = "0x6000CDE")]
		[Address(RVA = "0x9DDA6C", Offset = "0x9DDA6C", VA = "0x9DDA6C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
}
namespace ClipperLib
{
	[Token(Token = "0x200023D")]
	public struct DoublePoint
	{
		[Token(Token = "0x4000EFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public double X;

		[Token(Token = "0x4000EFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public double Y;

		[Token(Token = "0x6000CDF")]
		[Address(RVA = "0x9DDA74", Offset = "0x9DDA74", VA = "0x9DDA74")]
		public DoublePoint(double x = 0.0, double y = 0.0)
		{
		}

		[Token(Token = "0x6000CE0")]
		[Address(RVA = "0x9DDA7C", Offset = "0x9DDA7C", VA = "0x9DDA7C")]
		public DoublePoint(DoublePoint dp)
		{
		}

		[Token(Token = "0x6000CE1")]
		[Address(RVA = "0x9DDA84", Offset = "0x9DDA84", VA = "0x9DDA84")]
		public DoublePoint(IntPoint ip)
		{
		}
	}
	[Token(Token = "0x200023E")]
	public class PolyTree : PolyNode
	{
		[Token(Token = "0x4000EFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal List<PolyNode> m_AllPolys;

		[Token(Token = "0x1700015E")]
		public int Total
		{
			[Token(Token = "0x6000CE5")]
			[Address(RVA = "0x9DDC8C", Offset = "0x9DDC8C", VA = "0x9DDC8C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000CE2")]
		[Address(RVA = "0x9DDA94", Offset = "0x9DDA94", VA = "0x9DDA94", Slot = "1")]
		~PolyTree()
		{
		}

		[Token(Token = "0x6000CE3")]
		[Address(RVA = "0x9DDB28", Offset = "0x9DDB28", VA = "0x9DDB28")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000CE4")]
		[Address(RVA = "0x9DDC10", Offset = "0x9DDC10", VA = "0x9DDC10")]
		public PolyNode GetFirst()
		{
			return null;
		}

		[Token(Token = "0x6000CE6")]
		[Address(RVA = "0x9DDCD4", Offset = "0x9DDCD4", VA = "0x9DDCD4")]
		public PolyTree()
		{
		}
	}
	[Token(Token = "0x200023F")]
	public class PolyNode
	{
		[Token(Token = "0x4000EFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal PolyNode m_Parent;

		[Token(Token = "0x4000EFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal List<IntPoint> m_polygon;

		[Token(Token = "0x4000F00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal int m_Index;

		[Token(Token = "0x4000F01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal JoinType m_jointype;

		[Token(Token = "0x4000F02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal EndType m_endtype;

		[Token(Token = "0x4000F03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal List<PolyNode> m_Childs;

		[Token(Token = "0x1700015F")]
		public int ChildCount
		{
			[Token(Token = "0x6000CE8")]
			[Address(RVA = "0x9DDE4C", Offset = "0x9DDE4C", VA = "0x9DDE4C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000160")]
		public List<IntPoint> Contour
		{
			[Token(Token = "0x6000CE9")]
			[Address(RVA = "0x9DDE94", Offset = "0x9DDE94", VA = "0x9DDE94")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000161")]
		public List<PolyNode> Childs
		{
			[Token(Token = "0x6000CED")]
			[Address(RVA = "0x9DE08C", Offset = "0x9DE08C", VA = "0x9DE08C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000162")]
		public PolyNode Parent
		{
			[Token(Token = "0x6000CEE")]
			[Address(RVA = "0x9DE094", Offset = "0x9DE094", VA = "0x9DE094")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000163")]
		public bool IsHole
		{
			[Token(Token = "0x6000CEF")]
			[Address(RVA = "0x9DE09C", Offset = "0x9DE09C", VA = "0x9DE09C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000164")]
		public bool IsOpen
		{
			[Token(Token = "0x6000CF0")]
			[Address(RVA = "0x9DE0B8", Offset = "0x9DE0B8", VA = "0x9DE0B8")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000CF1")]
			[Address(RVA = "0x9DE0C0", Offset = "0x9DE0C0", VA = "0x9DE0C0")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6000CE7")]
		[Address(RVA = "0x9DDE30", Offset = "0x9DDE30", VA = "0x9DDE30")]
		private bool IsHoleNode()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CEA")]
		[Address(RVA = "0x9DDE9C", Offset = "0x9DDE9C", VA = "0x9DDE9C")]
		internal void AddChild(PolyNode Child)
		{
		}

		[Token(Token = "0x6000CEB")]
		[Address(RVA = "0x9DDF70", Offset = "0x9DDF70", VA = "0x9DDF70")]
		public PolyNode GetNext()
		{
			return null;
		}

		[Token(Token = "0x6000CEC")]
		[Address(RVA = "0x9DDFEC", Offset = "0x9DDFEC", VA = "0x9DDFEC")]
		internal PolyNode GetNextSiblingUp()
		{
			return null;
		}

		[Token(Token = "0x6000CF2")]
		[Address(RVA = "0x9DDD58", Offset = "0x9DDD58", VA = "0x9DDD58")]
		public PolyNode()
		{
		}
	}
	[Token(Token = "0x2000240")]
	internal struct Int128
	{
		[Token(Token = "0x4000F05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private long hi;

		[Token(Token = "0x4000F06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private ulong lo;

		[Token(Token = "0x6000CF3")]
		[Address(RVA = "0x9DE0CC", Offset = "0x9DE0CC", VA = "0x9DE0CC")]
		public Int128(long _lo)
		{
		}

		[Token(Token = "0x6000CF4")]
		[Address(RVA = "0x9DE0D8", Offset = "0x9DE0D8", VA = "0x9DE0D8")]
		public Int128(long _hi, ulong _lo)
		{
		}

		[Token(Token = "0x6000CF5")]
		[Address(RVA = "0x9DE0E0", Offset = "0x9DE0E0", VA = "0x9DE0E0")]
		public Int128(Int128 val)
		{
		}

		[Token(Token = "0x6000CF6")]
		[Address(RVA = "0x9DE0E8", Offset = "0x9DE0E8", VA = "0x9DE0E8")]
		public bool IsNegative()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CF7")]
		[Address(RVA = "0x9DE0F4", Offset = "0x9DE0F4", VA = "0x9DE0F4")]
		public static bool operator ==(Int128 val1, Int128 val2)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CF8")]
		[Address(RVA = "0x9DE1A0", Offset = "0x9DE1A0", VA = "0x9DE1A0")]
		public static bool operator !=(Int128 val1, Int128 val2)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CF9")]
		[Address(RVA = "0x9DE1B8", Offset = "0x9DE1B8", VA = "0x9DE1B8", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CFA")]
		[Address(RVA = "0x9DE240", Offset = "0x9DE240", VA = "0x9DE240", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000CFB")]
		[Address(RVA = "0x9DE274", Offset = "0x9DE274", VA = "0x9DE274")]
		public static bool operator >(Int128 val1, Int128 val2)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CFC")]
		[Address(RVA = "0x9DE28C", Offset = "0x9DE28C", VA = "0x9DE28C")]
		public static bool operator <(Int128 val1, Int128 val2)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CFD")]
		[Address(RVA = "0x9DE2A4", Offset = "0x9DE2A4", VA = "0x9DE2A4")]
		public static Int128 operator +(Int128 lhs, Int128 rhs)
		{
			return default(Int128);
		}

		[Token(Token = "0x6000CFE")]
		[Address(RVA = "0x9DE2B4", Offset = "0x9DE2B4", VA = "0x9DE2B4")]
		public static Int128 operator -(Int128 lhs, Int128 rhs)
		{
			return default(Int128);
		}

		[Token(Token = "0x6000CFF")]
		[Address(RVA = "0x9DE2D8", Offset = "0x9DE2D8", VA = "0x9DE2D8")]
		public static Int128 operator -(Int128 val)
		{
			return default(Int128);
		}

		[Token(Token = "0x6000D00")]
		[Address(RVA = "0x9DE2F0", Offset = "0x9DE2F0", VA = "0x9DE2F0")]
		public static Int128 Int128Mul(long lhs, long rhs)
		{
			return default(Int128);
		}

		[Token(Token = "0x6000D01")]
		[Address(RVA = "0x9DE354", Offset = "0x9DE354", VA = "0x9DE354")]
		public static Int128 operator /(Int128 lhs, Int128 rhs)
		{
			return default(Int128);
		}

		[Token(Token = "0x6000D02")]
		[Address(RVA = "0x9DE530", Offset = "0x9DE530", VA = "0x9DE530")]
		public double ToDouble()
		{
			return default(double);
		}
	}
	[Token(Token = "0x2000241")]
	public struct IntPoint
	{
		[Token(Token = "0x4000F07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public long X;

		[Token(Token = "0x4000F08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public long Y;

		[Token(Token = "0x6000D03")]
		[Address(RVA = "0x9DE594", Offset = "0x9DE594", VA = "0x9DE594")]
		public IntPoint(long X, long Y)
		{
		}

		[Token(Token = "0x6000D04")]
		[Address(RVA = "0x9DE59C", Offset = "0x9DE59C", VA = "0x9DE59C")]
		public IntPoint(double x, double y)
		{
		}

		[Token(Token = "0x6000D05")]
		[Address(RVA = "0x9DE5C8", Offset = "0x9DE5C8", VA = "0x9DE5C8")]
		public IntPoint(IntPoint pt)
		{
		}

		[Token(Token = "0x6000D06")]
		[Address(RVA = "0x9DE5D0", Offset = "0x9DE5D0", VA = "0x9DE5D0")]
		public static bool operator ==(IntPoint a, IntPoint b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D07")]
		[Address(RVA = "0x9DE5E8", Offset = "0x9DE5E8", VA = "0x9DE5E8")]
		public static bool operator !=(IntPoint a, IntPoint b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D08")]
		[Address(RVA = "0x9DE600", Offset = "0x9DE600", VA = "0x9DE600", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D09")]
		[Address(RVA = "0x9DE688", Offset = "0x9DE688", VA = "0x9DE688", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000242")]
	public struct IntRect
	{
		[Token(Token = "0x4000F09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public long left;

		[Token(Token = "0x4000F0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public long top;

		[Token(Token = "0x4000F0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public long right;

		[Token(Token = "0x4000F0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public long bottom;

		[Token(Token = "0x6000D0A")]
		[Address(RVA = "0x9DE6EC", Offset = "0x9DE6EC", VA = "0x9DE6EC")]
		public IntRect(long l, long t, long r, long b)
		{
		}

		[Token(Token = "0x6000D0B")]
		[Address(RVA = "0x9DE6F8", Offset = "0x9DE6F8", VA = "0x9DE6F8")]
		public IntRect(IntRect ir)
		{
		}
	}
	[Token(Token = "0x2000243")]
	public enum ClipType
	{
		[Token(Token = "0x4000F0E")]
		ctIntersection,
		[Token(Token = "0x4000F0F")]
		ctUnion,
		[Token(Token = "0x4000F10")]
		ctDifference,
		[Token(Token = "0x4000F11")]
		ctXor
	}
	[Token(Token = "0x2000244")]
	public enum PolyType
	{
		[Token(Token = "0x4000F13")]
		ptSubject,
		[Token(Token = "0x4000F14")]
		ptClip
	}
	[Token(Token = "0x2000245")]
	public enum PolyFillType
	{
		[Token(Token = "0x4000F16")]
		pftEvenOdd,
		[Token(Token = "0x4000F17")]
		pftNonZero,
		[Token(Token = "0x4000F18")]
		pftPositive,
		[Token(Token = "0x4000F19")]
		pftNegative
	}
	[Token(Token = "0x2000246")]
	public enum JoinType
	{
		[Token(Token = "0x4000F1B")]
		jtSquare,
		[Token(Token = "0x4000F1C")]
		jtRound,
		[Token(Token = "0x4000F1D")]
		jtMiter
	}
	[Token(Token = "0x2000247")]
	public enum EndType
	{
		[Token(Token = "0x4000F1F")]
		etClosedPolygon,
		[Token(Token = "0x4000F20")]
		etClosedLine,
		[Token(Token = "0x4000F21")]
		etOpenButt,
		[Token(Token = "0x4000F22")]
		etOpenSquare,
		[Token(Token = "0x4000F23")]
		etOpenRound
	}
	[Token(Token = "0x2000248")]
	public enum EndType_
	{
		[Token(Token = "0x4000F25")]
		etClosed,
		[Token(Token = "0x4000F26")]
		etButt,
		[Token(Token = "0x4000F27")]
		etSquare,
		[Token(Token = "0x4000F28")]
		etRound
	}
	[Token(Token = "0x2000249")]
	internal enum EdgeSide
	{
		[Token(Token = "0x4000F2A")]
		esLeft,
		[Token(Token = "0x4000F2B")]
		esRight
	}
	[Token(Token = "0x200024A")]
	internal enum Direction
	{
		[Token(Token = "0x4000F2D")]
		dRightToLeft,
		[Token(Token = "0x4000F2E")]
		dLeftToRight
	}
	[Token(Token = "0x200024B")]
	internal class TEdge
	{
		[Token(Token = "0x4000F2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal IntPoint Bot;

		[Token(Token = "0x4000F30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal IntPoint Curr;

		[Token(Token = "0x4000F31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal IntPoint Top;

		[Token(Token = "0x4000F32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal IntPoint Delta;

		[Token(Token = "0x4000F33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal double Dx;

		[Token(Token = "0x4000F34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal PolyType PolyTyp;

		[Token(Token = "0x4000F35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		internal EdgeSide Side;

		[Token(Token = "0x4000F36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		internal int WindDelta;

		[Token(Token = "0x4000F37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		internal int WindCnt;

		[Token(Token = "0x4000F38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		internal int WindCnt2;

		[Token(Token = "0x4000F39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		internal int OutIdx;

		[Token(Token = "0x4000F3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		internal TEdge Next;

		[Token(Token = "0x4000F3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		internal TEdge Prev;

		[Token(Token = "0x4000F3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		internal TEdge NextInLML;

		[Token(Token = "0x4000F3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		internal TEdge NextInAEL;

		[Token(Token = "0x4000F3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		internal TEdge PrevInAEL;

		[Token(Token = "0x4000F3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		internal TEdge NextInSEL;

		[Token(Token = "0x4000F40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		internal TEdge PrevInSEL;

		[Token(Token = "0x6000D0C")]
		[Address(RVA = "0x9DE71C", Offset = "0x9DE71C", VA = "0x9DE71C")]
		public TEdge()
		{
		}
	}
	[Token(Token = "0x200024C")]
	public class IntersectNode
	{
		[Token(Token = "0x4000F41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal TEdge Edge1;

		[Token(Token = "0x4000F42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal TEdge Edge2;

		[Token(Token = "0x4000F43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal IntPoint Pt;

		[Token(Token = "0x6000D0D")]
		[Address(RVA = "0x9DE724", Offset = "0x9DE724", VA = "0x9DE724")]
		public IntersectNode()
		{
		}
	}
	[Token(Token = "0x200024D")]
	public class MyIntersectNodeSort : IComparer<IntersectNode>
	{
		[Token(Token = "0x6000D0E")]
		[Address(RVA = "0x9DE72C", Offset = "0x9DE72C", VA = "0x9DE72C", Slot = "4")]
		public int Compare(IntersectNode node1, IntersectNode node2)
		{
			return default(int);
		}

		[Token(Token = "0x6000D0F")]
		[Address(RVA = "0x9DE750", Offset = "0x9DE750", VA = "0x9DE750")]
		public MyIntersectNodeSort()
		{
		}
	}
	[Token(Token = "0x200024E")]
	internal class LocalMinima
	{
		[Token(Token = "0x4000F44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal long Y;

		[Token(Token = "0x4000F45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal TEdge LeftBound;

		[Token(Token = "0x4000F46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal TEdge RightBound;

		[Token(Token = "0x4000F47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal LocalMinima Next;

		[Token(Token = "0x6000D10")]
		[Address(RVA = "0x9DE758", Offset = "0x9DE758", VA = "0x9DE758")]
		public LocalMinima()
		{
		}
	}
	[Token(Token = "0x200024F")]
	internal class Scanbeam
	{
		[Token(Token = "0x4000F48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal long Y;

		[Token(Token = "0x4000F49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal Scanbeam Next;

		[Token(Token = "0x6000D11")]
		[Address(RVA = "0x9DE760", Offset = "0x9DE760", VA = "0x9DE760")]
		public Scanbeam()
		{
		}
	}
	[Token(Token = "0x2000250")]
	internal class OutRec
	{
		[Token(Token = "0x4000F4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal int Idx;

		[Token(Token = "0x4000F4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal bool IsHole;

		[Token(Token = "0x4000F4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
		internal bool IsOpen;

		[Token(Token = "0x4000F4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal OutRec FirstLeft;

		[Token(Token = "0x4000F4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal OutPt Pts;

		[Token(Token = "0x4000F4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal OutPt BottomPt;

		[Token(Token = "0x4000F50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal PolyNode PolyNode;

		[Token(Token = "0x6000D12")]
		[Address(RVA = "0x9DE768", Offset = "0x9DE768", VA = "0x9DE768")]
		public OutRec()
		{
		}
	}
	[Token(Token = "0x2000251")]
	internal class OutPt
	{
		[Token(Token = "0x4000F51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal int Idx;

		[Token(Token = "0x4000F52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal IntPoint Pt;

		[Token(Token = "0x4000F53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal OutPt Next;

		[Token(Token = "0x4000F54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal OutPt Prev;

		[Token(Token = "0x6000D13")]
		[Address(RVA = "0x9DE770", Offset = "0x9DE770", VA = "0x9DE770")]
		public OutPt()
		{
		}
	}
	[Token(Token = "0x2000252")]
	internal class Join
	{
		[Token(Token = "0x4000F55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal OutPt OutPt1;

		[Token(Token = "0x4000F56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal OutPt OutPt2;

		[Token(Token = "0x4000F57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal IntPoint OffPt;

		[Token(Token = "0x6000D14")]
		[Address(RVA = "0x9DE778", Offset = "0x9DE778", VA = "0x9DE778")]
		public Join()
		{
		}
	}
	[Token(Token = "0x2000253")]
	public class ClipperBase
	{
		[Token(Token = "0x4000F58")]
		protected const double horizontal = -3.4E+38;

		[Token(Token = "0x4000F59")]
		protected const int Skip = -2;

		[Token(Token = "0x4000F5A")]
		protected const int Unassigned = -1;

		[Token(Token = "0x4000F5B")]
		protected const double tolerance = 1E-20;

		[Token(Token = "0x4000F5C")]
		internal const long loRange = 1073741823L;

		[Token(Token = "0x4000F5D")]
		internal const long hiRange = 4611686018427387903L;

		[Token(Token = "0x4000F5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal LocalMinima m_MinimaList;

		[Token(Token = "0x4000F5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal LocalMinima m_CurrentLM;

		[Token(Token = "0x4000F60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal List<List<TEdge>> m_edges;

		[Token(Token = "0x4000F61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal bool m_UseFullRange;

		[Token(Token = "0x4000F62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		internal bool m_HasOpenPaths;

		[Token(Token = "0x17000165")]
		public bool PreserveCollinear
		{
			[Token(Token = "0x6000D16")]
			[Address(RVA = "0x9DE7A8", Offset = "0x9DE7A8", VA = "0x9DE7A8")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D17")]
			[Address(RVA = "0x9DE7B0", Offset = "0x9DE7B0", VA = "0x9DE7B0")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6000D15")]
		[Address(RVA = "0x9DE780", Offset = "0x9DE780", VA = "0x9DE780")]
		internal static bool near_zero(double val)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D18")]
		[Address(RVA = "0x9DE7BC", Offset = "0x9DE7BC", VA = "0x9DE7BC")]
		internal static bool IsHorizontal(TEdge e)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D19")]
		[Address(RVA = "0x9DE7DC", Offset = "0x9DE7DC", VA = "0x9DE7DC")]
		internal bool PointIsVertex(IntPoint pt, OutPt pp)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D1A")]
		[Address(RVA = "0x9DE824", Offset = "0x9DE824", VA = "0x9DE824")]
		internal bool PointOnLineSegment(IntPoint pt, IntPoint linePt1, IntPoint linePt2, bool UseFullRange)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D1B")]
		[Address(RVA = "0x9DE94C", Offset = "0x9DE94C", VA = "0x9DE94C")]
		internal bool PointOnPolygon(IntPoint pt, OutPt pp, bool UseFullRange)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D1C")]
		[Address(RVA = "0x9DE9C8", Offset = "0x9DE9C8", VA = "0x9DE9C8")]
		internal bool PointInPolygon(IntPoint pt, OutPt pp, bool UseFullRange)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D1D")]
		[Address(RVA = "0x9DEB04", Offset = "0x9DEB04", VA = "0x9DEB04")]
		internal static bool SlopesEqual(TEdge e1, TEdge e2, bool UseFullRange)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D1E")]
		[Address(RVA = "0x9DEB88", Offset = "0x9DEB88", VA = "0x9DEB88")]
		protected static bool SlopesEqual(IntPoint pt1, IntPoint pt2, IntPoint pt3, bool UseFullRange)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D1F")]
		[Address(RVA = "0x9DEC1C", Offset = "0x9DEC1C", VA = "0x9DEC1C")]
		protected static bool SlopesEqual(IntPoint pt1, IntPoint pt2, IntPoint pt3, IntPoint pt4, bool UseFullRange)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D20")]
		[Address(RVA = "0x9DECB4", Offset = "0x9DECB4", VA = "0x9DECB4")]
		internal ClipperBase()
		{
		}

		[Token(Token = "0x6000D21")]
		[Address(RVA = "0x9DED64", Offset = "0x9DED64", VA = "0x9DED64", Slot = "4")]
		public virtual void Clear()
		{
		}

		[Token(Token = "0x6000D22")]
		[Address(RVA = "0x9DEED0", Offset = "0x9DEED0", VA = "0x9DEED0")]
		private void DisposeLocalMinimaList()
		{
		}

		[Token(Token = "0x6000D23")]
		[Address(RVA = "0x9DEF2C", Offset = "0x9DEF2C", VA = "0x9DEF2C")]
		private void RangeTest(IntPoint Pt, ref bool useFullRange)
		{
		}

		[Token(Token = "0x6000D24")]
		[Address(RVA = "0x9DF004", Offset = "0x9DF004", VA = "0x9DF004")]
		private void InitEdge(TEdge e, TEdge eNext, TEdge ePrev, IntPoint pt)
		{
		}

		[Token(Token = "0x6000D25")]
		[Address(RVA = "0x9DF064", Offset = "0x9DF064", VA = "0x9DF064")]
		private void InitEdge2(TEdge e, PolyType polyType)
		{
		}

		[Token(Token = "0x6000D26")]
		[Address(RVA = "0x9DF120", Offset = "0x9DF120", VA = "0x9DF120")]
		private TEdge FindNextLocMin(TEdge E)
		{
			return null;
		}

		[Token(Token = "0x6000D27")]
		[Address(RVA = "0x9DF210", Offset = "0x9DF210", VA = "0x9DF210")]
		private TEdge ProcessBound(TEdge E, bool IsClockwise)
		{
			return null;
		}

		[Token(Token = "0x6000D28")]
		[Address(RVA = "0x9DF6F0", Offset = "0x9DF6F0", VA = "0x9DF6F0")]
		public bool AddPath(List<IntPoint> pg, PolyType polyType, bool Closed)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D29")]
		[Address(RVA = "0x9E007C", Offset = "0x9E007C", VA = "0x9E007C")]
		public bool AddPaths(List<List<IntPoint>> ppg, PolyType polyType, bool closed)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D2A")]
		[Address(RVA = "0x9E0014", Offset = "0x9E0014", VA = "0x9E0014")]
		internal bool Pt2IsBetweenPt1AndPt3(IntPoint pt1, IntPoint pt2, IntPoint pt3)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D2B")]
		[Address(RVA = "0x9DFFB0", Offset = "0x9DFFB0", VA = "0x9DFFB0")]
		private TEdge RemoveEdge(TEdge e)
		{
			return null;
		}

		[Token(Token = "0x6000D2C")]
		[Address(RVA = "0x9DF0D4", Offset = "0x9DF0D4", VA = "0x9DF0D4")]
		private void SetDx(TEdge e)
		{
		}

		[Token(Token = "0x6000D2D")]
		[Address(RVA = "0x9DF668", Offset = "0x9DF668", VA = "0x9DF668")]
		private void InsertLocalMinima(LocalMinima newLm)
		{
		}

		[Token(Token = "0x6000D2E")]
		[Address(RVA = "0x9E0148", Offset = "0x9E0148", VA = "0x9E0148")]
		protected void PopLocalMinima()
		{
		}

		[Token(Token = "0x6000D2F")]
		[Address(RVA = "0x9DF644", Offset = "0x9DF644", VA = "0x9DF644")]
		private void ReverseHorizontal(TEdge e)
		{
		}

		[Token(Token = "0x6000D30")]
		[Address(RVA = "0x9E0160", Offset = "0x9E0160", VA = "0x9E0160", Slot = "5")]
		protected virtual void Reset()
		{
		}

		[Token(Token = "0x6000D31")]
		[Address(RVA = "0x9E01DC", Offset = "0x9E01DC", VA = "0x9E01DC")]
		public static IntRect GetBounds(List<List<IntPoint>> paths)
		{
			return default(IntRect);
		}
	}
	[Token(Token = "0x2000254")]
	public class Clipper : ClipperBase
	{
		[Token(Token = "0x2000255")]
		internal enum NodeType
		{
			[Token(Token = "0x4000F77")]
			ntAny,
			[Token(Token = "0x4000F78")]
			ntOpen,
			[Token(Token = "0x4000F79")]
			ntClosed
		}

		[Token(Token = "0x4000F64")]
		public const int ioReverseSolution = 1;

		[Token(Token = "0x4000F65")]
		public const int ioStrictlySimple = 2;

		[Token(Token = "0x4000F66")]
		public const int ioPreserveCollinear = 4;

		[Token(Token = "0x4000F67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<OutRec> m_PolyOuts;

		[Token(Token = "0x4000F68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private ClipType m_ClipType;

		[Token(Token = "0x4000F69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Scanbeam m_Scanbeam;

		[Token(Token = "0x4000F6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private TEdge m_ActiveEdges;

		[Token(Token = "0x4000F6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private TEdge m_SortedEdges;

		[Token(Token = "0x4000F6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private List<IntersectNode> m_IntersectList;

		[Token(Token = "0x4000F6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private IComparer<IntersectNode> m_IntersectNodeComparer;

		[Token(Token = "0x4000F6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool m_ExecuteLocked;

		[Token(Token = "0x4000F6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private PolyFillType m_ClipFillType;

		[Token(Token = "0x4000F70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private PolyFillType m_SubjFillType;

		[Token(Token = "0x4000F71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private List<Join> m_Joins;

		[Token(Token = "0x4000F72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private List<Join> m_GhostJoins;

		[Token(Token = "0x4000F73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private bool m_UsingPolyTree;

		[Token(Token = "0x17000166")]
		public bool ReverseSolution
		{
			[Token(Token = "0x6000D36")]
			[Address(RVA = "0x9E0994", Offset = "0x9E0994", VA = "0x9E0994")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D37")]
			[Address(RVA = "0x9E099C", Offset = "0x9E099C", VA = "0x9E099C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000167")]
		public bool StrictlySimple
		{
			[Token(Token = "0x6000D38")]
			[Address(RVA = "0x9E09A8", Offset = "0x9E09A8", VA = "0x9E09A8")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D39")]
			[Address(RVA = "0x9E09B0", Offset = "0x9E09B0", VA = "0x9E09B0")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6000D32")]
		[Address(RVA = "0x9E048C", Offset = "0x9E048C", VA = "0x9E048C")]
		public Clipper(int InitOptions = 0)
		{
		}

		[Token(Token = "0x6000D33")]
		[Address(RVA = "0x9E0680", Offset = "0x9E0680", VA = "0x9E0680", Slot = "4")]
		public override void Clear()
		{
		}

		[Token(Token = "0x6000D34")]
		[Address(RVA = "0x9E078C", Offset = "0x9E078C", VA = "0x9E078C")]
		private void DisposeScanbeamList()
		{
		}

		[Token(Token = "0x6000D35")]
		[Address(RVA = "0x9E07D8", Offset = "0x9E07D8", VA = "0x9E07D8", Slot = "5")]
		protected override void Reset()
		{
		}

		[Token(Token = "0x6000D3A")]
		[Address(RVA = "0x9E084C", Offset = "0x9E084C", VA = "0x9E084C")]
		private void InsertScanbeam(long Y)
		{
		}

		[Token(Token = "0x6000D3B")]
		[Address(RVA = "0x9E09BC", Offset = "0x9E09BC", VA = "0x9E09BC")]
		public bool Execute(ClipType clipType, List<List<IntPoint>> solution, PolyFillType subjFillType, PolyFillType clipFillType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D3C")]
		[Address(RVA = "0x9E113C", Offset = "0x9E113C", VA = "0x9E113C")]
		public bool Execute(ClipType clipType, PolyTree polytree, PolyFillType subjFillType, PolyFillType clipFillType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D3D")]
		[Address(RVA = "0x9E14D8", Offset = "0x9E14D8", VA = "0x9E14D8")]
		public bool Execute(ClipType clipType, List<List<IntPoint>> solution)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D3E")]
		[Address(RVA = "0x9E14E4", Offset = "0x9E14E4", VA = "0x9E14E4")]
		public bool Execute(ClipType clipType, PolyTree polytree)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D3F")]
		[Address(RVA = "0x9E14F0", Offset = "0x9E14F0", VA = "0x9E14F0")]
		internal void FixHoleLinkage(OutRec outRec)
		{
		}

		[Token(Token = "0x6000D40")]
		[Address(RVA = "0x9E0B44", Offset = "0x9E0B44", VA = "0x9E0B44")]
		private bool ExecuteInternal()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D41")]
		[Address(RVA = "0x9E1558", Offset = "0x9E1558", VA = "0x9E1558")]
		private long PopScanbeam()
		{
			return default(long);
		}

		[Token(Token = "0x6000D42")]
		[Address(RVA = "0x9E06E8", Offset = "0x9E06E8", VA = "0x9E06E8")]
		private void DisposeAllPolyPts()
		{
		}

		[Token(Token = "0x6000D43")]
		[Address(RVA = "0x9E26E0", Offset = "0x9E26E0", VA = "0x9E26E0")]
		private void DisposeOutRec(int index)
		{
		}

		[Token(Token = "0x6000D44")]
		[Address(RVA = "0x9E2774", Offset = "0x9E2774", VA = "0x9E2774")]
		private void DisposeOutPts(OutPt pp)
		{
		}

		[Token(Token = "0x6000D45")]
		[Address(RVA = "0x9E27A8", Offset = "0x9E27A8", VA = "0x9E27A8")]
		private void AddJoin(OutPt Op1, OutPt Op2, IntPoint OffPt)
		{
		}

		[Token(Token = "0x6000D46")]
		[Address(RVA = "0x9E28D0", Offset = "0x9E28D0", VA = "0x9E28D0")]
		private void AddGhostJoin(OutPt Op, IntPoint OffPt)
		{
		}

		[Token(Token = "0x6000D47")]
		[Address(RVA = "0x9E1580", Offset = "0x9E1580", VA = "0x9E1580")]
		private void InsertLocalMinimaIntoAEL(long botY)
		{
		}

		[Token(Token = "0x6000D48")]
		[Address(RVA = "0x9E29E4", Offset = "0x9E29E4", VA = "0x9E29E4")]
		private void InsertEdgeIntoAEL(TEdge edge, TEdge startEdge)
		{
		}

		[Token(Token = "0x6000D49")]
		[Address(RVA = "0x9E393C", Offset = "0x9E393C", VA = "0x9E393C")]
		private bool E2InsertsBeforeE1(TEdge e1, TEdge e2)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D4A")]
		[Address(RVA = "0x9E3A18", Offset = "0x9E3A18", VA = "0x9E3A18")]
		private bool IsEvenOddFillType(TEdge edge)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D4B")]
		[Address(RVA = "0x9E3A4C", Offset = "0x9E3A4C", VA = "0x9E3A4C")]
		private bool IsEvenOddAltFillType(TEdge edge)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D4C")]
		[Address(RVA = "0x9E2CF0", Offset = "0x9E2CF0", VA = "0x9E2CF0")]
		private bool IsContributing(TEdge edge)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D4D")]
		[Address(RVA = "0x9E2AE4", Offset = "0x9E2AE4", VA = "0x9E2AE4")]
		private void SetWindingCount(TEdge edge)
		{
		}

		[Token(Token = "0x6000D4E")]
		[Address(RVA = "0x9E31EC", Offset = "0x9E31EC", VA = "0x9E31EC")]
		private void AddEdgeToSEL(TEdge edge)
		{
		}

		[Token(Token = "0x6000D4F")]
		[Address(RVA = "0x9E3A80", Offset = "0x9E3A80", VA = "0x9E3A80")]
		private void CopyAELToSEL()
		{
		}

		[Token(Token = "0x6000D50")]
		[Address(RVA = "0x9E3AC8", Offset = "0x9E3AC8", VA = "0x9E3AC8")]
		private void SwapPositionsInAEL(TEdge edge1, TEdge edge2)
		{
		}

		[Token(Token = "0x6000D51")]
		[Address(RVA = "0x9E3D04", Offset = "0x9E3D04", VA = "0x9E3D04")]
		private void SwapPositionsInSEL(TEdge edge1, TEdge edge2)
		{
		}

		[Token(Token = "0x6000D52")]
		[Address(RVA = "0x9E3F40", Offset = "0x9E3F40", VA = "0x9E3F40")]
		private void AddLocalMaxPoly(TEdge e1, TEdge e2, IntPoint pt)
		{
		}

		[Token(Token = "0x6000D53")]
		[Address(RVA = "0x9E307C", Offset = "0x9E307C", VA = "0x9E307C")]
		private OutPt AddLocalMinPoly(TEdge e1, TEdge e2, IntPoint pt)
		{
			return null;
		}

		[Token(Token = "0x6000D54")]
		[Address(RVA = "0x9E4350", Offset = "0x9E4350", VA = "0x9E4350")]
		private OutRec CreateOutRec()
		{
			return null;
		}

		[Token(Token = "0x6000D55")]
		[Address(RVA = "0x9E2E5C", Offset = "0x9E2E5C", VA = "0x9E2E5C")]
		private OutPt AddOutPt(TEdge e, IntPoint pt)
		{
			return null;
		}

		[Token(Token = "0x6000D56")]
		[Address(RVA = "0x9E4560", Offset = "0x9E4560", VA = "0x9E4560")]
		internal void SwapPoints(ref IntPoint pt1, ref IntPoint pt2)
		{
		}

		[Token(Token = "0x6000D57")]
		[Address(RVA = "0x9E328C", Offset = "0x9E328C", VA = "0x9E328C")]
		private bool HorzSegmentsOverlap(IntPoint Pt1a, IntPoint Pt1b, IntPoint Pt2a, IntPoint Pt2b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D58")]
		[Address(RVA = "0x9E45B0", Offset = "0x9E45B0", VA = "0x9E45B0")]
		private OutPt InsertPolyPtBetween(OutPt p1, OutPt p2, IntPoint pt)
		{
			return null;
		}

		[Token(Token = "0x6000D59")]
		[Address(RVA = "0x9E4498", Offset = "0x9E4498", VA = "0x9E4498")]
		private void SetHoleState(TEdge e, OutRec outRec)
		{
		}

		[Token(Token = "0x6000D5A")]
		[Address(RVA = "0x9E46B0", Offset = "0x9E46B0", VA = "0x9E46B0")]
		private double GetDx(IntPoint pt1, IntPoint pt2)
		{
			return default(double);
		}

		[Token(Token = "0x6000D5B")]
		[Address(RVA = "0x9E46D8", Offset = "0x9E46D8", VA = "0x9E46D8")]
		private bool FirstIsBottomPt(OutPt btmPt1, OutPt btmPt2)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D5C")]
		[Address(RVA = "0x9E4920", Offset = "0x9E4920", VA = "0x9E4920")]
		private OutPt GetBottomPt(OutPt pp)
		{
			return null;
		}

		[Token(Token = "0x6000D5D")]
		[Address(RVA = "0x9E4A00", Offset = "0x9E4A00", VA = "0x9E4A00")]
		private OutRec GetLowermostRec(OutRec outRec1, OutRec outRec2)
		{
			return null;
		}

		[Token(Token = "0x6000D5E")]
		[Address(RVA = "0x9E4AE4", Offset = "0x9E4AE4", VA = "0x9E4AE4")]
		private bool Param1RightOfParam2(OutRec outRec1, OutRec outRec2)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D5F")]
		[Address(RVA = "0x9E4B14", Offset = "0x9E4B14", VA = "0x9E4B14")]
		private OutRec GetOutRec(int idx)
		{
			return null;
		}

		[Token(Token = "0x6000D60")]
		[Address(RVA = "0x9E3FEC", Offset = "0x9E3FEC", VA = "0x9E3FEC")]
		private void AppendPolygon(TEdge e1, TEdge e2)
		{
		}

		[Token(Token = "0x6000D61")]
		[Address(RVA = "0x9E1ECC", Offset = "0x9E1ECC", VA = "0x9E1ECC")]
		private void ReversePolyPtLinks(OutPt pp)
		{
		}

		[Token(Token = "0x6000D62")]
		[Address(RVA = "0x9E4BB4", Offset = "0x9E4BB4", VA = "0x9E4BB4")]
		private static void SwapSides(TEdge edge1, TEdge edge2)
		{
		}

		[Token(Token = "0x6000D63")]
		[Address(RVA = "0x9E4BDC", Offset = "0x9E4BDC", VA = "0x9E4BDC")]
		private static void SwapPolyIndexes(TEdge edge1, TEdge edge2)
		{
		}

		[Token(Token = "0x6000D64")]
		[Address(RVA = "0x9E3310", Offset = "0x9E3310", VA = "0x9E3310")]
		private void IntersectEdges(TEdge e1, TEdge e2, IntPoint pt, bool protect = false)
		{
		}

		[Token(Token = "0x6000D65")]
		[Address(RVA = "0x9E4C04", Offset = "0x9E4C04", VA = "0x9E4C04")]
		private void DeleteFromAEL(TEdge e)
		{
		}

		[Token(Token = "0x6000D66")]
		[Address(RVA = "0x9E4CA8", Offset = "0x9E4CA8", VA = "0x9E4CA8")]
		private void DeleteFromSEL(TEdge e)
		{
		}

		[Token(Token = "0x6000D67")]
		[Address(RVA = "0x9E4D4C", Offset = "0x9E4D4C", VA = "0x9E4D4C")]
		private void UpdateEdgeIntoAEL(ref TEdge e)
		{
		}

		[Token(Token = "0x6000D68")]
		[Address(RVA = "0x9E191C", Offset = "0x9E191C", VA = "0x9E191C")]
		private void ProcessHorizontals(bool isTopOfScanbeam)
		{
		}

		[Token(Token = "0x6000D69")]
		[Address(RVA = "0x9E5344", Offset = "0x9E5344", VA = "0x9E5344")]
		private void GetHorzDirection(TEdge HorzEdge, out Direction Dir, out long Left, out long Right)
		{
		}

		[Token(Token = "0x6000D6A")]
		[Address(RVA = "0x9E5384", Offset = "0x9E5384", VA = "0x9E5384")]
		private void PrepareHorzJoins(TEdge horzEdge, bool isTopOfScanbeam)
		{
		}

		[Token(Token = "0x6000D6B")]
		[Address(RVA = "0x9E4E98", Offset = "0x9E4E98", VA = "0x9E4E98")]
		private void ProcessHorizontal(TEdge horzEdge, bool isTopOfScanbeam)
		{
		}

		[Token(Token = "0x6000D6C")]
		[Address(RVA = "0x9E55FC", Offset = "0x9E55FC", VA = "0x9E55FC")]
		private TEdge GetNextInAEL(TEdge e, Direction Direction)
		{
			return null;
		}

		[Token(Token = "0x6000D6D")]
		[Address(RVA = "0x9E5624", Offset = "0x9E5624", VA = "0x9E5624")]
		private bool IsMinima(TEdge e)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D6E")]
		[Address(RVA = "0x9E5668", Offset = "0x9E5668", VA = "0x9E5668")]
		private bool IsMaxima(TEdge e, double Y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D6F")]
		[Address(RVA = "0x9E5694", Offset = "0x9E5694", VA = "0x9E5694")]
		private bool IsIntermediate(TEdge e, double Y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D70")]
		[Address(RVA = "0x9E553C", Offset = "0x9E553C", VA = "0x9E553C")]
		private TEdge GetMaximaPair(TEdge e)
		{
			return null;
		}

		[Token(Token = "0x6000D71")]
		[Address(RVA = "0x9E1964", Offset = "0x9E1964", VA = "0x9E1964")]
		private bool ProcessIntersections(long botY, long topY)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D72")]
		[Address(RVA = "0x9E56CC", Offset = "0x9E56CC", VA = "0x9E56CC")]
		private void BuildIntersectList(long botY, long topY)
		{
		}

		[Token(Token = "0x6000D73")]
		[Address(RVA = "0x9E5F44", Offset = "0x9E5F44", VA = "0x9E5F44")]
		private bool EdgesAdjacent(IntersectNode inode)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D74")]
		[Address(RVA = "0x9E5F84", Offset = "0x9E5F84", VA = "0x9E5F84")]
		private static int IntersectNodeSort(IntersectNode node1, IntersectNode node2)
		{
			return default(int);
		}

		[Token(Token = "0x6000D75")]
		[Address(RVA = "0x9E599C", Offset = "0x9E599C", VA = "0x9E599C")]
		private bool FixupIntersectionOrder()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D76")]
		[Address(RVA = "0x9E5B80", Offset = "0x9E5B80", VA = "0x9E5B80")]
		private void ProcessIntersectList()
		{
		}

		[Token(Token = "0x6000D77")]
		[Address(RVA = "0x9E5FA8", Offset = "0x9E5FA8", VA = "0x9E5FA8")]
		internal static long Round(double value)
		{
			return default(long);
		}

		[Token(Token = "0x6000D78")]
		[Address(RVA = "0x9E39A8", Offset = "0x9E39A8", VA = "0x9E39A8")]
		private static long TopX(TEdge edge, long currentY)
		{
			return default(long);
		}

		[Token(Token = "0x6000D79")]
		[Address(RVA = "0x9E5C6C", Offset = "0x9E5C6C", VA = "0x9E5C6C")]
		private bool IntersectPoint(TEdge edge1, TEdge edge2, out IntPoint ip)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D7A")]
		[Address(RVA = "0x9E1B04", Offset = "0x9E1B04", VA = "0x9E1B04")]
		private void ProcessEdgesAtTopOfScanbeam(long topY)
		{
		}

		[Token(Token = "0x6000D7B")]
		[Address(RVA = "0x9E5FDC", Offset = "0x9E5FDC", VA = "0x9E5FDC")]
		private void DoMaxima(TEdge e)
		{
		}

		[Token(Token = "0x6000D7C")]
		[Address(RVA = "0x9E6118", Offset = "0x9E6118", VA = "0x9E6118")]
		public static void ReversePaths(List<List<IntPoint>> polys)
		{
		}

		[Token(Token = "0x6000D7D")]
		[Address(RVA = "0x9E6280", Offset = "0x9E6280", VA = "0x9E6280")]
		public static bool Orientation(List<IntPoint> poly)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D7E")]
		[Address(RVA = "0x9E63A8", Offset = "0x9E63A8", VA = "0x9E63A8")]
		private int PointCount(OutPt pts)
		{
			return default(int);
		}

		[Token(Token = "0x6000D7F")]
		[Address(RVA = "0x9E0EC0", Offset = "0x9E0EC0", VA = "0x9E0EC0")]
		private void BuildResult(List<List<IntPoint>> polyg)
		{
		}

		[Token(Token = "0x6000D80")]
		[Address(RVA = "0x9E11A0", Offset = "0x9E11A0", VA = "0x9E11A0")]
		private void BuildResult2(PolyTree polytree)
		{
		}

		[Token(Token = "0x6000D81")]
		[Address(RVA = "0x9E233C", Offset = "0x9E233C", VA = "0x9E233C")]
		private void FixupOutPolygon(OutRec outRec)
		{
		}

		[Token(Token = "0x6000D82")]
		[Address(RVA = "0x9E63D8", Offset = "0x9E63D8", VA = "0x9E63D8")]
		private OutPt DupOutPt(OutPt outPt, bool InsertAfter)
		{
			return null;
		}

		[Token(Token = "0x6000D83")]
		[Address(RVA = "0x9E64DC", Offset = "0x9E64DC", VA = "0x9E64DC")]
		private bool GetOverlap(long a1, long a2, long b1, long b2, out long Left, out long Right)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D84")]
		[Address(RVA = "0x9E65F4", Offset = "0x9E65F4", VA = "0x9E65F4")]
		private bool JoinHorz(OutPt op1, OutPt op1b, OutPt op2, OutPt op2b, IntPoint Pt, bool DiscardLeft)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D85")]
		[Address(RVA = "0x9E6954", Offset = "0x9E6954", VA = "0x9E6954")]
		private bool JoinPoints(Join j, OutRec outRec1, OutRec outRec2)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D86")]
		[Address(RVA = "0x9E7000", Offset = "0x9E7000", VA = "0x9E7000")]
		private int PointInPolygon(IntPoint pt, OutPt op)
		{
			return default(int);
		}

		[Token(Token = "0x6000D87")]
		[Address(RVA = "0x9E7108", Offset = "0x9E7108", VA = "0x9E7108")]
		private bool Poly2ContainsPoly1(OutPt outPt1, OutPt outPt2)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D88")]
		[Address(RVA = "0x9E715C", Offset = "0x9E715C", VA = "0x9E715C")]
		private void FixupFirstLefts1(OutRec OldOutRec, OutRec NewOutRec)
		{
		}

		[Token(Token = "0x6000D89")]
		[Address(RVA = "0x9E7230", Offset = "0x9E7230", VA = "0x9E7230")]
		private void FixupFirstLefts2(OutRec OldOutRec, OutRec NewOutRec)
		{
		}

		[Token(Token = "0x6000D8A")]
		[Address(RVA = "0x9E7390", Offset = "0x9E7390", VA = "0x9E7390")]
		private static OutRec ParseFirstLeft(OutRec FirstLeft)
		{
			return null;
		}

		[Token(Token = "0x6000D8B")]
		[Address(RVA = "0x9E1F24", Offset = "0x9E1F24", VA = "0x9E1F24")]
		private void JoinCommonEdges()
		{
		}

		[Token(Token = "0x6000D8C")]
		[Address(RVA = "0x9E73A8", Offset = "0x9E73A8", VA = "0x9E73A8")]
		private void UpdateOutPtIdxs(OutRec outrec)
		{
		}

		[Token(Token = "0x6000D8D")]
		[Address(RVA = "0x9E24B4", Offset = "0x9E24B4", VA = "0x9E24B4")]
		private void DoSimplePolygons()
		{
		}

		[Token(Token = "0x6000D8E")]
		[Address(RVA = "0x9E6298", Offset = "0x9E6298", VA = "0x9E6298")]
		public static double Area(List<IntPoint> poly)
		{
			return default(double);
		}

		[Token(Token = "0x6000D8F")]
		[Address(RVA = "0x9E1E60", Offset = "0x9E1E60", VA = "0x9E1E60")]
		private double Area(OutRec outRec)
		{
			return default(double);
		}

		[Token(Token = "0x6000D90")]
		[Address(RVA = "0x9E73DC", Offset = "0x9E73DC", VA = "0x9E73DC")]
		public static List<List<IntPoint>> OffsetPaths(List<List<IntPoint>> polys, double delta, JoinType jointype, EndType_ endtype, double MiterLimit)
		{
			return null;
		}

		[Token(Token = "0x6000D91")]
		[Address(RVA = "0x9E7AF0", Offset = "0x9E7AF0", VA = "0x9E7AF0")]
		public static List<List<IntPoint>> SimplifyPolygon(List<IntPoint> poly, PolyFillType fillType = PolyFillType.pftEvenOdd)
		{
			return null;
		}

		[Token(Token = "0x6000D92")]
		[Address(RVA = "0x9E7BD4", Offset = "0x9E7BD4", VA = "0x9E7BD4")]
		public static List<List<IntPoint>> SimplifyPolygons(List<List<IntPoint>> polys, PolyFillType fillType = PolyFillType.pftEvenOdd)
		{
			return null;
		}

		[Token(Token = "0x6000D93")]
		[Address(RVA = "0x9E7CB8", Offset = "0x9E7CB8", VA = "0x9E7CB8")]
		private static double DistanceSqrd(IntPoint pt1, IntPoint pt2)
		{
			return default(double);
		}

		[Token(Token = "0x6000D94")]
		[Address(RVA = "0x9E7CE0", Offset = "0x9E7CE0", VA = "0x9E7CE0")]
		private static double DistanceFromLineSqrd(IntPoint pt, IntPoint ln1, IntPoint ln2)
		{
			return default(double);
		}

		[Token(Token = "0x6000D95")]
		[Address(RVA = "0x9E7D34", Offset = "0x9E7D34", VA = "0x9E7D34")]
		private static bool SlopesNearCollinear(IntPoint pt1, IntPoint pt2, IntPoint pt3, double distSqrd)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D96")]
		[Address(RVA = "0x9E7D70", Offset = "0x9E7D70", VA = "0x9E7D70")]
		private static bool PointsAreClose(IntPoint pt1, IntPoint pt2, double distSqrd)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D97")]
		[Address(RVA = "0x9E7DA0", Offset = "0x9E7DA0", VA = "0x9E7DA0")]
		private static OutPt ExcludeOp(OutPt op)
		{
			return null;
		}

		[Token(Token = "0x6000D98")]
		[Address(RVA = "0x9E7DF4", Offset = "0x9E7DF4", VA = "0x9E7DF4")]
		public static List<IntPoint> CleanPolygon(List<IntPoint> path, double distance = 1.415)
		{
			return null;
		}

		[Token(Token = "0x6000D99")]
		[Address(RVA = "0x9E81E4", Offset = "0x9E81E4", VA = "0x9E81E4")]
		public static List<List<IntPoint>> CleanPolygons(List<List<IntPoint>> polys, double distance = 1.415)
		{
			return null;
		}

		[Token(Token = "0x6000D9A")]
		[Address(RVA = "0x9E8340", Offset = "0x9E8340", VA = "0x9E8340")]
		internal static List<List<IntPoint>> Minkowski(List<IntPoint> poly, List<IntPoint> path, bool IsSum, bool IsClosed)
		{
			return null;
		}

		[Token(Token = "0x6000D9B")]
		[Address(RVA = "0x9E8CF4", Offset = "0x9E8CF4", VA = "0x9E8CF4")]
		public static List<List<IntPoint>> MinkowskiSum(List<IntPoint> poly, List<IntPoint> path, bool IsClosed)
		{
			return null;
		}

		[Token(Token = "0x6000D9C")]
		[Address(RVA = "0x9E8D00", Offset = "0x9E8D00", VA = "0x9E8D00")]
		public static List<List<IntPoint>> MinkowskiDiff(List<IntPoint> poly, List<IntPoint> path, bool IsClosed)
		{
			return null;
		}

		[Token(Token = "0x6000D9D")]
		[Address(RVA = "0x9E8D0C", Offset = "0x9E8D0C", VA = "0x9E8D0C")]
		public static List<List<IntPoint>> PolyTreeToPaths(PolyTree polytree)
		{
			return null;
		}

		[Token(Token = "0x6000D9E")]
		[Address(RVA = "0x9E8DC4", Offset = "0x9E8DC4", VA = "0x9E8DC4")]
		internal static void AddPolyNodeToPaths(PolyNode polynode, NodeType nt, List<List<IntPoint>> paths)
		{
		}

		[Token(Token = "0x6000D9F")]
		[Address(RVA = "0x9E8FC8", Offset = "0x9E8FC8", VA = "0x9E8FC8")]
		public static List<List<IntPoint>> OpenPathsFromPolyTree(PolyTree polytree)
		{
			return null;
		}

		[Token(Token = "0x6000DA0")]
		[Address(RVA = "0x9E9164", Offset = "0x9E9164", VA = "0x9E9164")]
		public static List<List<IntPoint>> ClosedPathsFromPolyTree(PolyTree polytree)
		{
			return null;
		}
	}
	[Token(Token = "0x2000256")]
	public class ClipperOffset
	{
		[Token(Token = "0x4000F7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<List<IntPoint>> m_destPolys;

		[Token(Token = "0x4000F7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private List<IntPoint> m_srcPoly;

		[Token(Token = "0x4000F7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<IntPoint> m_destPoly;

		[Token(Token = "0x4000F7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<DoublePoint> m_normals;

		[Token(Token = "0x4000F7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private double m_delta;

		[Token(Token = "0x4000F7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private double m_sinA;

		[Token(Token = "0x4000F80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private double m_sin;

		[Token(Token = "0x4000F81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private double m_cos;

		[Token(Token = "0x4000F82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private double m_miterLim;

		[Token(Token = "0x4000F83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private double m_StepsPerRad;

		[Token(Token = "0x4000F84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private IntPoint m_lowest;

		[Token(Token = "0x4000F85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private PolyNode m_polyNodes;

		[Token(Token = "0x4000F88")]
		private const double two_pi = Math.PI * 2.0;

		[Token(Token = "0x4000F89")]
		private const double def_arc_tolerance = 0.25;

		[Token(Token = "0x17000168")]
		public double ArcTolerance
		{
			[Token(Token = "0x6000DA1")]
			[Address(RVA = "0x9E921C", Offset = "0x9E921C", VA = "0x9E921C")]
			[CompilerGenerated]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6000DA2")]
			[Address(RVA = "0x9E9224", Offset = "0x9E9224", VA = "0x9E9224")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000169")]
		public double MiterLimit
		{
			[Token(Token = "0x6000DA3")]
			[Address(RVA = "0x9E922C", Offset = "0x9E922C", VA = "0x9E922C")]
			[CompilerGenerated]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6000DA4")]
			[Address(RVA = "0x9E9234", Offset = "0x9E9234", VA = "0x9E9234")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6000DA5")]
		[Address(RVA = "0x9E74D4", Offset = "0x9E74D4", VA = "0x9E74D4")]
		public ClipperOffset(double miterLimit = 2.0, double arcTolerance = 0.25)
		{
		}

		[Token(Token = "0x6000DA6")]
		[Address(RVA = "0x9E923C", Offset = "0x9E923C", VA = "0x9E923C")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000DA7")]
		[Address(RVA = "0x9E92B4", Offset = "0x9E92B4", VA = "0x9E92B4")]
		internal static long Round(double value)
		{
			return default(long);
		}

		[Token(Token = "0x6000DA8")]
		[Address(RVA = "0x9E92E8", Offset = "0x9E92E8", VA = "0x9E92E8")]
		public void AddPath(List<IntPoint> path, JoinType joinType, EndType endType)
		{
		}

		[Token(Token = "0x6000DA9")]
		[Address(RVA = "0x9E75B8", Offset = "0x9E75B8", VA = "0x9E75B8")]
		public void AddPaths(List<List<IntPoint>> paths, JoinType joinType, EndType endType)
		{
		}

		[Token(Token = "0x6000DAA")]
		[Address(RVA = "0x9E978C", Offset = "0x9E978C", VA = "0x9E978C")]
		private void FixOrientations()
		{
		}

		[Token(Token = "0x6000DAB")]
		[Address(RVA = "0x9E9918", Offset = "0x9E9918", VA = "0x9E9918")]
		internal static DoublePoint GetUnitNormal(IntPoint pt1, IntPoint pt2)
		{
			return default(DoublePoint);
		}

		[Token(Token = "0x6000DAC")]
		[Address(RVA = "0x9E99E0", Offset = "0x9E99E0", VA = "0x9E99E0")]
		private void DoOffset(double delta)
		{
		}

		[Token(Token = "0x6000DAD")]
		[Address(RVA = "0x9E770C", Offset = "0x9E770C", VA = "0x9E770C")]
		public void Execute(ref List<List<IntPoint>> solution, double delta)
		{
		}

		[Token(Token = "0x6000DAE")]
		[Address(RVA = "0x9EBB4C", Offset = "0x9EBB4C", VA = "0x9EBB4C")]
		public void Execute(ref PolyTree solution, double delta)
		{
		}

		[Token(Token = "0x6000DAF")]
		[Address(RVA = "0x9EADA8", Offset = "0x9EADA8", VA = "0x9EADA8")]
		private void OffsetPoint(int j, ref int k, JoinType jointype)
		{
		}

		[Token(Token = "0x6000DB0")]
		[Address(RVA = "0x9EB2E0", Offset = "0x9EB2E0", VA = "0x9EB2E0")]
		internal void DoSquare(int j, int k)
		{
		}

		[Token(Token = "0x6000DB1")]
		[Address(RVA = "0x9EC044", Offset = "0x9EC044", VA = "0x9EC044")]
		internal void DoMiter(int j, int k, double r)
		{
		}

		[Token(Token = "0x6000DB2")]
		[Address(RVA = "0x9EB740", Offset = "0x9EB740", VA = "0x9EB740")]
		internal void DoRound(int j, int k)
		{
		}
	}
	[Token(Token = "0x2000257")]
	internal class ClipperException : Exception
	{
		[Token(Token = "0x6000DB3")]
		[Address(RVA = "0x9E0ADC", Offset = "0x9E0ADC", VA = "0x9E0ADC")]
		public ClipperException(string description)
		{
		}
	}
}
namespace NiobiumStudios
{
	[Token(Token = "0x2000258")]
	public class DailyRewardsInterface : MonoBehaviour
	{
		[Token(Token = "0x4000F8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Canvas canvas;

		[Token(Token = "0x4000F8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject dailyRewardPrefab;

		[Token(Token = "0x4000F8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Panel Debug")]
		public bool isDebug;

		[Token(Token = "0x4000F8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject panelDebug;

		[Token(Token = "0x4000F8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UnityEngine.UI.Button buttonAdvanceDay;

		[Token(Token = "0x4000F8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public UnityEngine.UI.Button buttonAdvanceHour;

		[Token(Token = "0x4000F90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public UnityEngine.UI.Button buttonReset;

		[Token(Token = "0x4000F91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public UnityEngine.UI.Button buttonReloadScene;

		[Token(Token = "0x4000F92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Header("Panel Reward Message")]
		public GameObject panelReward;

		[Token(Token = "0x4000F93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Text textReward;

		[Token(Token = "0x4000F94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public UnityEngine.UI.Button buttonCloseReward;

		[Token(Token = "0x4000F95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Image imageReward;

		[Token(Token = "0x4000F96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Header("Panel Reward")]
		public UnityEngine.UI.Button buttonClaim;

		[Token(Token = "0x4000F97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public UnityEngine.UI.Button buttonClose;

		[Token(Token = "0x4000F98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public UnityEngine.UI.Button buttonCloseWindow;

		[Token(Token = "0x4000F99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Text textTimeDue;

		[Token(Token = "0x4000F9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public GridLayoutGroup dailyRewardsGroup;

		[Token(Token = "0x4000F9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public ScrollRect scrollRect;

		[Token(Token = "0x4000F9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private bool readyToClaim;

		[Token(Token = "0x4000F9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private List<DailyRewardUI> dailyRewardsUI;

		[Token(Token = "0x4000F9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private DailyRewards dailyRewards;

		[Token(Token = "0x4000F9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public GameObject UI_mainmenu;

		[Token(Token = "0x4000FA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public TextMeshProUGUI txtTotCoin;

		[Token(Token = "0x6000DB4")]
		[Address(RVA = "0x9EC264", Offset = "0x9EC264", VA = "0x9EC264")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000DB5")]
		[Address(RVA = "0x9EC2E0", Offset = "0x9EC2E0", VA = "0x9EC2E0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000DB6")]
		[Address(RVA = "0x9ECC1C", Offset = "0x9ECC1C", VA = "0x9ECC1C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000DB7")]
		[Address(RVA = "0x9ECDA8", Offset = "0x9ECDA8", VA = "0x9ECDA8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000DB8")]
		[Address(RVA = "0x9EC73C", Offset = "0x9EC73C", VA = "0x9EC73C")]
		private void InitializeDailyRewardsUI()
		{
		}

		[Token(Token = "0x6000DB9")]
		[Address(RVA = "0x9EC9D0", Offset = "0x9EC9D0", VA = "0x9EC9D0")]
		public void UpdateUI()
		{
		}

		[Token(Token = "0x6000DBA")]
		[Address(RVA = "0x9ECF80", Offset = "0x9ECF80", VA = "0x9ECF80")]
		public void SnapToReward()
		{
		}

		[Token(Token = "0x6000DBB")]
		[Address(RVA = "0x9ED080", Offset = "0x9ED080", VA = "0x9ED080")]
		private void Update()
		{
		}

		[Token(Token = "0x6000DBC")]
		[Address(RVA = "0x9ED0AC", Offset = "0x9ED0AC", VA = "0x9ED0AC")]
		private void CheckTimeDifference()
		{
		}

		[Token(Token = "0x6000DBD")]
		[Address(RVA = "0x9ED19C", Offset = "0x9ED19C", VA = "0x9ED19C")]
		private void OnClaimPrize(int day)
		{
		}

		[Token(Token = "0x6000DBE")]
		[Address(RVA = "0x9ED38C", Offset = "0x9ED38C", VA = "0x9ED38C")]
		private void OnInitialize(bool error, string errorMessage)
		{
		}

		[Token(Token = "0x6000DBF")]
		[Address(RVA = "0x9ED3C8", Offset = "0x9ED3C8", VA = "0x9ED3C8")]
		public DailyRewardsInterface()
		{
		}
	}
	[Token(Token = "0x200025A")]
	public class DailyRewardUI : MonoBehaviour
	{
		[Token(Token = "0x200025B")]
		public enum DailyRewardState
		{
			[Token(Token = "0x4000FAE")]
			UNCLAIMED_AVAILABLE,
			[Token(Token = "0x4000FAF")]
			UNCLAIMED_UNAVAILABLE,
			[Token(Token = "0x4000FB0")]
			CLAIMED
		}

		[Token(Token = "0x4000FA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool showRewardName;

		[Token(Token = "0x4000FA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("UI Elements")]
		public Text textDay;

		[Token(Token = "0x4000FA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Text textReward;

		[Token(Token = "0x4000FA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Image imageRewardBackground;

		[Token(Token = "0x4000FA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Image imageReward;

		[Token(Token = "0x4000FA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Color colorClaim;

		[Token(Token = "0x4000FA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Color colorUnclaimed;

		[Token(Token = "0x4000FAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Header("Internal")]
		public int day;

		[Token(Token = "0x4000FAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[HideInInspector]
		public Reward reward;

		[Token(Token = "0x4000FAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public DailyRewardState state;

		[Token(Token = "0x6000DCA")]
		[Address(RVA = "0x9ED70C", Offset = "0x9ED70C", VA = "0x9ED70C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000DCB")]
		[Address(RVA = "0x9ED740", Offset = "0x9ED740", VA = "0x9ED740")]
		public void Initialize()
		{
		}

		[Token(Token = "0x6000DCC")]
		[Address(RVA = "0x9ED88C", Offset = "0x9ED88C", VA = "0x9ED88C")]
		public void Refresh()
		{
		}

		[Token(Token = "0x6000DCD")]
		[Address(RVA = "0x9ED8F4", Offset = "0x9ED8F4", VA = "0x9ED8F4")]
		public DailyRewardUI()
		{
		}
	}
	[Token(Token = "0x200025C")]
	public class DailyRewards : DailyRewardsCore<DailyRewards>
	{
		[Token(Token = "0x200025D")]
		public delegate void OnClaimPrize(int day);

		[Token(Token = "0x4000FB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public List<Reward> rewards;

		[Token(Token = "0x4000FB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public DateTime lastRewardTime;

		[Token(Token = "0x4000FB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public int availableReward;

		[Token(Token = "0x4000FB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public int lastReward;

		[Token(Token = "0x4000FB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool keepOpen;

		[Token(Token = "0x4000FB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public OnClaimPrize onClaimPrize;

		[Token(Token = "0x4000FB7")]
		private const string LAST_REWARD_TIME = "LastRewardTime";

		[Token(Token = "0x4000FB8")]
		private const string LAST_REWARD = "LastReward";

		[Token(Token = "0x4000FB9")]
		private const string DEBUG_TIME = "DebugTime";

		[Token(Token = "0x4000FBA")]
		private const string FMT = "O";

		[Token(Token = "0x4000FBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public TimeSpan debugTime;

		[Token(Token = "0x6000DCE")]
		[Address(RVA = "0x9ED8FC", Offset = "0x9ED8FC", VA = "0x9ED8FC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000DCF")]
		[Address(RVA = "0x9ED900", Offset = "0x9ED900", VA = "0x9ED900")]
		private void InitializeTimer()
		{
		}

		[Token(Token = "0x6000DD0")]
		[Address(RVA = "0x9EDDBC", Offset = "0x9EDDBC", VA = "0x9EDDBC", Slot = "6")]
		protected override void OnApplicationPause(bool pauseStatus)
		{
		}

		[Token(Token = "0x6000DD1")]
		[Address(RVA = "0x9EDE1C", Offset = "0x9EDE1C", VA = "0x9EDE1C")]
		public TimeSpan GetTimeDifference()
		{
			return default(TimeSpan);
		}

		[Token(Token = "0x6000DD2")]
		[Address(RVA = "0x9ED9C0", Offset = "0x9ED9C0", VA = "0x9ED9C0")]
		private void LoadDebugTime()
		{
		}

		[Token(Token = "0x6000DD3")]
		[Address(RVA = "0x9EDA3C", Offset = "0x9EDA3C", VA = "0x9EDA3C")]
		public void CheckRewards()
		{
		}

		[Token(Token = "0x6000DD4")]
		[Address(RVA = "0x9EDF94", Offset = "0x9EDF94", VA = "0x9EDF94")]
		public void ClaimPrize()
		{
		}

		[Token(Token = "0x6000DD5")]
		[Address(RVA = "0x9EDF54", Offset = "0x9EDF54", VA = "0x9EDF54")]
		private string GetLastRewardKey()
		{
			return null;
		}

		[Token(Token = "0x6000DD6")]
		[Address(RVA = "0x9EDF14", Offset = "0x9EDF14", VA = "0x9EDF14")]
		private string GetLastRewardTimeKey()
		{
			return null;
		}

		[Token(Token = "0x6000DD7")]
		[Address(RVA = "0x9EDED4", Offset = "0x9EDED4", VA = "0x9EDED4")]
		private string GetDebugTimeKey()
		{
			return null;
		}

		[Token(Token = "0x6000DD8")]
		[Address(RVA = "0x9EE210", Offset = "0x9EE210", VA = "0x9EE210")]
		public Reward GetReward(int day)
		{
			return null;
		}

		[Token(Token = "0x6000DD9")]
		[Address(RVA = "0x9EE268", Offset = "0x9EE268", VA = "0x9EE268")]
		public void Reset()
		{
		}

		[Token(Token = "0x6000DDA")]
		[Address(RVA = "0x9EE314", Offset = "0x9EE314", VA = "0x9EE314")]
		public DailyRewards()
		{
		}
	}
	[Token(Token = "0x200025E")]
	public abstract class DailyRewardsCore<T> : MonoBehaviour where T : DailyRewardsCore<T>
	{
		[Token(Token = "0x200025F")]
		public delegate void OnInitialize(bool error = false, string errorMessage = "");

		[Token(Token = "0x4000FBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool isSingleton;

		[Token(Token = "0x4000FBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string errorMessage;

		[Token(Token = "0x4000FBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool isErrorConnect;

		[Token(Token = "0x4000FBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public DateTime now;

		[Token(Token = "0x4000FC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int maxRetries;

		[Token(Token = "0x4000FC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public OnInitialize onInitialize;

		[Token(Token = "0x4000FC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool isInitialized;

		[Token(Token = "0x4000FC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static T _instance;

		[Token(Token = "0x1700016A")]
		public static T instance
		{
			[Token(Token = "0x6000DE1")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000DDF")]
		public void InitializeDate()
		{
		}

		[Token(Token = "0x6000DE0")]
		public void RefreshTime()
		{
		}

		[Token(Token = "0x6000DE2")]
		public virtual void TickTime()
		{
		}

		[Token(Token = "0x6000DE3")]
		public string GetFormattedTime(TimeSpan span)
		{
			return null;
		}

		[Token(Token = "0x6000DE4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000DE5")]
		protected virtual void OnApplicationPause(bool pauseStatus)
		{
		}

		[Token(Token = "0x6000DE6")]
		protected DailyRewardsCore()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000260")]
	public class Reward
	{
		[Token(Token = "0x4000FC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string unit;

		[Token(Token = "0x4000FC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int reward;

		[Token(Token = "0x4000FC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Sprite sprite;

		[Token(Token = "0x6000DEB")]
		[Address(RVA = "0x9EE4DC", Offset = "0x9EE4DC", VA = "0x9EE4DC")]
		public Reward()
		{
		}
	}
}
namespace BNG
{
	[Token(Token = "0x2000261")]
	public enum HandPoseId
	{
		[Token(Token = "0x4000FC8")]
		Default = 0,
		[Token(Token = "0x4000FC9")]
		Generic = 1,
		[Token(Token = "0x4000FCA")]
		PingPongBall = 2,
		[Token(Token = "0x4000FCB")]
		Controller = 3,
		[Token(Token = "0x4000FCC")]
		Rock = 4,
		[Token(Token = "0x4000FCD")]
		PistolGrip = 50
	}
	[Token(Token = "0x2000262")]
	public class HandPoseDefinitions : MonoBehaviour
	{
		[Token(Token = "0x6000DEC")]
		[Address(RVA = "0x9EE4E4", Offset = "0x9EE4E4", VA = "0x9EE4E4")]
		public HandPoseDefinitions()
		{
		}
	}
	[Token(Token = "0x2000263")]
	[RequireComponent(typeof(HandPoser))]
	[ExecuteInEditMode]
	public class AutoPoser : MonoBehaviour
	{
		[Token(Token = "0x2000264")]
		[CompilerGenerated]
		private sealed class <updateAutoPoseRoutine>d__33 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000FE6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000FE7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000FE8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public AutoPoser <>4__this;

			[Token(Token = "0x1700016D")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000E06")]
				[Address(RVA = "0x9EFEEC", Offset = "0x9EFEEC", VA = "0x9EFEEC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700016E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000E08")]
				[Address(RVA = "0x9EFF34", Offset = "0x9EFF34", VA = "0x9EFF34", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000E03")]
			[Address(RVA = "0x9EECA0", Offset = "0x9EECA0", VA = "0x9EECA0")]
			[DebuggerHidden]
			public <updateAutoPoseRoutine>d__33(int <>1__state)
			{
			}

			[Token(Token = "0x6000E04")]
			[Address(RVA = "0x9EFE24", Offset = "0x9EFE24", VA = "0x9EFE24", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000E05")]
			[Address(RVA = "0x9EFE28", Offset = "0x9EFE28", VA = "0x9EFE28", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000E07")]
			[Address(RVA = "0x9EFEF4", Offset = "0x9EFEF4", VA = "0x9EFEF4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000FCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Auto Pose Settings")]
		[Tooltip("(Required) A HandPose in the fully open position. AutoPose will lerp each finger joint between OpenHandPose and ClosedHandPose until contact is made at each finger tip.")]
		public HandPose OpenHandPose;

		[Token(Token = "0x4000FCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("(Required) A HandPose in the fully closed position. AutoPose will lerp each finger between OpenHandPose and ClosedHandPose until contact is made at each finger tip.")]
		public HandPose ClosedHandPose;

		[Token(Token = "0x4000FD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Radius (in meters) of the fingertips to use when checking for collisions during auto-posing. Only used if a FingerTipCollider is not defined. (Default : 0.00875)")]
		[Range(0f, 0.02f)]
		[Header("Finger Tip Collision")]
		public float FingerTipRadius;

		[Token(Token = "0x4000FD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("(Optional) Index Finger Offset - Use this to manually position and scale your finger tip collider")]
		public FingerTipCollider ThumbCollider;

		[Token(Token = "0x4000FD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("(Optional) Index Finger Offset - Use this to manually position and scale your finger tip collider")]
		public FingerTipCollider IndexFingerCollider;

		[Token(Token = "0x4000FD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("(Optional) Index Finger Offset - Use this to manually position and scale your finger tip collider")]
		public FingerTipCollider MiddleFingerCollider;

		[Token(Token = "0x4000FD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("(Optional) Index Finger Offset - Use this to manually position and scale your finger tip collider")]
		public FingerTipCollider RingFingerCollider;

		[Token(Token = "0x4000FD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("(Optional) Index Finger Offset - Use this to manually position and scale your finger tip collider")]
		public FingerTipCollider PinkyFingerCollider;

		[Token(Token = "0x4000FD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("If true the hand will auto pose in Update(). Also works in the editor.")]
		[Header("Continuous Update")]
		public bool UpdateContinuously;

		[Token(Token = "0x4000FD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("(Optional) The HandPose to use when UpdateContinuously = true and no collisions have been detected. If not specified, the hand will make a ClosedHandPose shape when no collisions have been found.")]
		public HandPose IdleHandPose;

		[Token(Token = "0x4000FD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public LayerMask CollisionLayerMask;

		[Token(Token = "0x4000FD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Header("Editor Gizmos")]
		public bool ShowGizmos;

		[Token(Token = "0x4000FDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public GizmoDisplayType GizmoType;

		[Token(Token = "0x4000FDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public Color GizmoColor;

		[Token(Token = "0x4000FDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public HandPoser InspectedPose;

		[Token(Token = "0x4000FDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private HandPoseDefinition currentPose;

		[Token(Token = "0x4000FDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private HandPoseDefinition tempPose;

		[Token(Token = "0x4000FDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private HandPoseDefinition collisionPose;

		[Token(Token = "0x4000FE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private int _count;

		[Token(Token = "0x4000FE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private bool _thumbHit;

		[Token(Token = "0x4000FE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAD")]
		private bool _indexHit;

		[Token(Token = "0x4000FE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAE")]
		private bool _middleHit;

		[Token(Token = "0x4000FE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAF")]
		private bool _ringHit;

		[Token(Token = "0x4000FE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private bool _pinkyHit;

		[Token(Token = "0x1700016B")]
		public HandPoseDefinition CollisionPose
		{
			[Token(Token = "0x6000DED")]
			[Address(RVA = "0x9EE4EC", Offset = "0x9EE4EC", VA = "0x9EE4EC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700016C")]
		public bool CollisionDetected
		{
			[Token(Token = "0x6000DEE")]
			[Address(RVA = "0x9EE4F4", Offset = "0x9EE4F4", VA = "0x9EE4F4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000DEF")]
		[Address(RVA = "0x9EE52C", Offset = "0x9EE52C", VA = "0x9EE52C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000DF0")]
		[Address(RVA = "0x9EE5DC", Offset = "0x9EE5DC", VA = "0x9EE5DC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000DF1")]
		[Address(RVA = "0x9EE830", Offset = "0x9EE830", VA = "0x9EE830")]
		private void Update()
		{
		}

		[Token(Token = "0x6000DF2")]
		[Address(RVA = "0x9EEBAC", Offset = "0x9EEBAC", VA = "0x9EEBAC", Slot = "4")]
		public virtual void UpdateAutoPose(bool lerp)
		{
		}

		[Token(Token = "0x6000DF3")]
		[Address(RVA = "0x9EEC0C", Offset = "0x9EEC0C", VA = "0x9EEC0C", Slot = "5")]
		public virtual void UpdateAutoPoseOnce()
		{
		}

		[Token(Token = "0x6000DF4")]
		[Address(RVA = "0x9EEC2C", Offset = "0x9EEC2C", VA = "0x9EEC2C")]
		[IteratorStateMachine(typeof(<updateAutoPoseRoutine>d__33))]
		private IEnumerator updateAutoPoseRoutine()
		{
			return null;
		}

		[Token(Token = "0x6000DF5")]
		[Address(RVA = "0x9EE954", Offset = "0x9EE954", VA = "0x9EE954")]
		public HandPoseDefinition GetAutoPose()
		{
			return null;
		}

		[Token(Token = "0x6000DF6")]
		[Address(RVA = "0x9EECC8", Offset = "0x9EECC8", VA = "0x9EECC8")]
		public HandPoseDefinition CopyHandDefinition(HandPoseDefinition ToCopy)
		{
			return null;
		}

		[Token(Token = "0x6000DF7")]
		[Address(RVA = "0x9EF3E4", Offset = "0x9EF3E4", VA = "0x9EF3E4")]
		public FingerJoint GetJointCopy(FingerJoint ToClone)
		{
			return null;
		}

		[Token(Token = "0x6000DF8")]
		[Address(RVA = "0x9EF29C", Offset = "0x9EF29C", VA = "0x9EF29C")]
		public List<FingerJoint> GetJointsCopy(List<FingerJoint> ToClone)
		{
			return null;
		}

		[Token(Token = "0x6000DF9")]
		[Address(RVA = "0x9EEDF8", Offset = "0x9EEDF8", VA = "0x9EEDF8")]
		public bool GetThumbHit(HandPoser poser)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DFA")]
		[Address(RVA = "0x9EEEE4", Offset = "0x9EEEE4", VA = "0x9EEEE4")]
		public bool GetIndexHit(HandPoser poser)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DFB")]
		[Address(RVA = "0x9EEFD0", Offset = "0x9EEFD0", VA = "0x9EEFD0")]
		public bool GetMiddleHit(HandPoser poser)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DFC")]
		[Address(RVA = "0x9EF0BC", Offset = "0x9EF0BC", VA = "0x9EF0BC")]
		public bool GetRingHit(HandPoser poser)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DFD")]
		[Address(RVA = "0x9EF1A8", Offset = "0x9EF1A8", VA = "0x9EF1A8")]
		public bool GetPinkyHit(HandPoser poser)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DFE")]
		[Address(RVA = "0x9EF6C4", Offset = "0x9EF6C4", VA = "0x9EF6C4", Slot = "6")]
		public virtual bool LoopThroughJoints(List<Transform> fromJoints, List<FingerJoint> toJoints, Vector3 tipPosition, float tipRadius)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DFF")]
		[Address(RVA = "0x9EFA4C", Offset = "0x9EFA4C", VA = "0x9EFA4C", Slot = "7")]
		public virtual bool IsValidCollision(Collider col)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E00")]
		[Address(RVA = "0x9EFAD4", Offset = "0x9EFAD4", VA = "0x9EFAD4")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6000E01")]
		[Address(RVA = "0x9EFCB4", Offset = "0x9EFCB4", VA = "0x9EFCB4")]
		public void DrawJointGizmo(FingerTipCollider tipCollider, Vector3 defaultPosition, float radius, GizmoDisplayType gizmoType)
		{
		}

		[Token(Token = "0x6000E02")]
		[Address(RVA = "0x9EFDE0", Offset = "0x9EFDE0", VA = "0x9EFDE0")]
		public AutoPoser()
		{
		}
	}
	[Token(Token = "0x2000265")]
	public enum GizmoDisplayType
	{
		[Token(Token = "0x4000FEA")]
		Wire,
		[Token(Token = "0x4000FEB")]
		Solid,
		[Token(Token = "0x4000FEC")]
		None
	}
	[Token(Token = "0x2000266")]
	public class BoneMapping : MonoBehaviour
	{
		[Token(Token = "0x4000FED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0f, 1f)]
		public float Weight;

		[Token(Token = "0x4000FEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BoneObject[] Fingers;

		[Token(Token = "0x4000FEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Shown for Debug : ")]
		public bool ShowGizmos;

		[Token(Token = "0x6000E09")]
		[Address(RVA = "0x9EFF3C", Offset = "0x9EFF3C", VA = "0x9EFF3C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E0A")]
		[Address(RVA = "0x9F01E4", Offset = "0x9F01E4", VA = "0x9F01E4")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6000E0B")]
		[Address(RVA = "0x9F0640", Offset = "0x9F0640", VA = "0x9F0640")]
		public BoneMapping()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000267")]
	public class BoneObject
	{
		[Token(Token = "0x4000FF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform[] targetBones;

		[Token(Token = "0x4000FF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform[] destinationBones;

		[Token(Token = "0x6000E0C")]
		[Address(RVA = "0x9F0658", Offset = "0x9F0658", VA = "0x9F0658")]
		public BoneObject()
		{
		}
	}
	[Token(Token = "0x2000268")]
	public class EditorHandle : MonoBehaviour
	{
		[Token(Token = "0x4000FF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool ShowTransformName;

		[Token(Token = "0x4000FF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float Radius;

		[Token(Token = "0x4000FF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Color BaseColor;

		[Token(Token = "0x6000E0D")]
		[Address(RVA = "0x9F06D8", Offset = "0x9F06D8", VA = "0x9F06D8")]
		public EditorHandle()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000269")]
	public class FingerJoint
	{
		[Token(Token = "0x4000FF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		public string TransformName;

		[Token(Token = "0x4000FF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public Vector3 LocalPosition;

		[Token(Token = "0x4000FF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		public Quaternion LocalRotation;

		[Token(Token = "0x6000E0E")]
		[Address(RVA = "0x9EF478", Offset = "0x9EF478", VA = "0x9EF478")]
		public FingerJoint()
		{
		}
	}
	[Token(Token = "0x200026A")]
	public class FingerTipCollider : MonoBehaviour
	{
		[Token(Token = "0x4000FF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0f, 0.02f)]
		[Tooltip("Radius (in meters) of the fingertip to use when checking for collisions during auto-posing. (Default : 0.00875)")]
		public float Radius;

		[Token(Token = "0x6000E0F")]
		[Address(RVA = "0x9F06F8", Offset = "0x9F06F8", VA = "0x9F06F8")]
		public FingerTipCollider()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200026B")]
	public class HandPose : ScriptableObject
	{
		[Token(Token = "0x4000FF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Pose Name")]
		public string PoseName;

		[Token(Token = "0x4000FFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Joint Definitions")]
		[SerializeField]
		public HandPoseDefinition Joints;

		[Token(Token = "0x6000E10")]
		[Address(RVA = "0x9F070C", Offset = "0x9F070C", VA = "0x9F070C")]
		public HandPose()
		{
		}
	}
	[Token(Token = "0x200026C")]
	public class HandPoseBlender : MonoBehaviour
	{
		[Token(Token = "0x4000FFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("If true the HandPoser will be updated in Update by reading ThumbValue, IndexValue, and GripValue")]
		[Header("Run in Update")]
		public bool UpdatePose;

		[Token(Token = "0x4000FFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Blend From / To")]
		[Tooltip("(Required) Blend from this hand pose to the Pose2 hand pose.")]
		public HandPose Pose1;

		[Token(Token = "0x4000FFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("(Required) Blend from the Pose1 hand pose to this hand pose.")]
		public HandPose Pose2;

		[Token(Token = "0x4000FFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Inputs")]
		[Range(0f, 1f)]
		public float ThumbValue;

		[Token(Token = "0x4000FFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Range(0f, 1f)]
		public float IndexValue;

		[Token(Token = "0x4001000")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Range(0f, 1f)]
		public float MiddleValue;

		[Token(Token = "0x4001001")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Range(0f, 1f)]
		public float RingValue;

		[Token(Token = "0x4001002")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Range(0f, 1f)]
		public float PinkyValue;

		[Token(Token = "0x4001003")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Range(0f, 1f)]
		public float GripValue;

		[Token(Token = "0x4001004")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float _lastGripValue;

		[Token(Token = "0x4001005")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected HandPoser handPoser;

		[Token(Token = "0x6000E11")]
		[Address(RVA = "0x9F0714", Offset = "0x9F0714", VA = "0x9F0714")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E12")]
		[Address(RVA = "0x9F076C", Offset = "0x9F076C", VA = "0x9F076C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E13")]
		[Address(RVA = "0x9F0784", Offset = "0x9F0784", VA = "0x9F0784", Slot = "4")]
		public virtual void UpdatePoseFromInputs()
		{
		}

		[Token(Token = "0x6000E14")]
		[Address(RVA = "0x9F0790", Offset = "0x9F0790", VA = "0x9F0790")]
		public void UpdateThumb(float amount)
		{
		}

		[Token(Token = "0x6000E15")]
		[Address(RVA = "0x9F07C8", Offset = "0x9F07C8", VA = "0x9F07C8")]
		public void UpdateIndex(float amount)
		{
		}

		[Token(Token = "0x6000E16")]
		[Address(RVA = "0x9F0800", Offset = "0x9F0800", VA = "0x9F0800")]
		public void UpdateMiddle(float amount)
		{
		}

		[Token(Token = "0x6000E17")]
		[Address(RVA = "0x9F0840", Offset = "0x9F0840", VA = "0x9F0840")]
		public void UpdateRing(float amount)
		{
		}

		[Token(Token = "0x6000E18")]
		[Address(RVA = "0x9F0878", Offset = "0x9F0878", VA = "0x9F0878")]
		public void UpdatePinky(float amount)
		{
		}

		[Token(Token = "0x6000E19")]
		[Address(RVA = "0x9F08B0", Offset = "0x9F08B0", VA = "0x9F08B0")]
		public void UpdateGrip(float amount)
		{
		}

		[Token(Token = "0x6000E1A")]
		[Address(RVA = "0x9F08F4", Offset = "0x9F08F4", VA = "0x9F08F4", Slot = "5")]
		public virtual void DoIdleBlendPose()
		{
		}

		[Token(Token = "0x6000E1B")]
		[Address(RVA = "0x9F09D4", Offset = "0x9F09D4", VA = "0x9F09D4")]
		public HandPoseBlender()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200026D")]
	public class HandPoseDefinition
	{
		[Token(Token = "0x4001006")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		[Header("Wrist")]
		public FingerJoint WristJoint;

		[Token(Token = "0x4001007")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[Header("Thumb")]
		public List<FingerJoint> ThumbJoints;

		[Token(Token = "0x4001008")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[Header("Index")]
		public List<FingerJoint> IndexJoints;

		[Token(Token = "0x4001009")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Middle")]
		[SerializeField]
		public List<FingerJoint> MiddleJoints;

		[Token(Token = "0x400100A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		[Header("Ring")]
		public List<FingerJoint> RingJoints;

		[Token(Token = "0x400100B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[Header("Pinky")]
		public List<FingerJoint> PinkyJoints;

		[Token(Token = "0x400100C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[Header("Other")]
		public List<FingerJoint> OtherJoints;

		[Token(Token = "0x6000E1C")]
		[Address(RVA = "0x9EF294", Offset = "0x9EF294", VA = "0x9EF294")]
		public HandPoseDefinition()
		{
		}
	}
	[Token(Token = "0x200026E")]
	[ExecuteInEditMode]
	public class HandPoser : MonoBehaviour
	{
		[Token(Token = "0x400100D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool ShowGizmos;

		[Token(Token = "0x400100E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Path of the directory where handposes should be stored. Tip : Keep these in a 'Resources' directory so you can use Resources.Load().")]
		public string ResourcePath;

		[Token(Token = "0x400100F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string PoseName;

		[Token(Token = "0x4001010")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The currently selected hand pose. Change this to automatically update the pose in Update")]
		public HandPose CurrentPose;

		[Token(Token = "0x4001011")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Animation Properties")]
		[Tooltip("The speed at which to lerp the bones when changing hand poses")]
		public float AnimationSpeed;

		[Token(Token = "0x4001012")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("If true the local rotation of each bone will be updated while changing hand poses. This should generally be true if you are adjusting a hand pose.")]
		public bool UpdateJointRotations;

		[Token(Token = "0x4001013")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
		[Tooltip("If true the local position of each bone will be updated while changing hand poses. Typically this will be false as joints only adjust their rotations.")]
		public bool UpdateJointPositions;

		[Token(Token = "0x4001014")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3E")]
		[Tooltip("If true the local position of the wrist will be updated. Useful if you need to move the entire hand.")]
		public bool UpdateWristPosition;

		[Token(Token = "0x4001015")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform WristJoint;

		[Token(Token = "0x4001016")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public List<Transform> ThumbJoints;

		[Token(Token = "0x4001017")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public List<Transform> IndexJoints;

		[Token(Token = "0x4001018")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public List<Transform> MiddleJoints;

		[Token(Token = "0x4001019")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public List<Transform> RingJoints;

		[Token(Token = "0x400101A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public List<Transform> PinkyJoints;

		[Token(Token = "0x400101B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public List<Transform> OtherJoints;

		[Token(Token = "0x400101C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private HandPose previousPose;

		[Token(Token = "0x400101D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private bool doSingleAnimation;

		[Token(Token = "0x400101E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
		public bool ContinuousUpdate;

		[Token(Token = "0x400101F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private float editorAnimationTime;

		[Token(Token = "0x4001020")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float maxEditorAnimationTime;

		[Token(Token = "0x1700016F")]
		public HandPoseDefinition HandPoseJoints
		{
			[Token(Token = "0x6000E1D")]
			[Address(RVA = "0x9F09E4", Offset = "0x9F09E4", VA = "0x9F09E4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E1E")]
		[Address(RVA = "0x9F09F0", Offset = "0x9F09F0", VA = "0x9F09F0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E1F")]
		[Address(RVA = "0x9F0A10", Offset = "0x9F0A10", VA = "0x9F0A10")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E20")]
		[Address(RVA = "0x9F0A4C", Offset = "0x9F0A4C", VA = "0x9F0A4C")]
		public void CheckForPoseChange()
		{
		}

		[Token(Token = "0x6000E21")]
		[Address(RVA = "0x9F0A00", Offset = "0x9F0A00", VA = "0x9F0A00")]
		public void OnPoseChanged()
		{
		}

		[Token(Token = "0x6000E22")]
		[Address(RVA = "0x9F0BA0", Offset = "0x9F0BA0", VA = "0x9F0BA0")]
		public FingerJoint GetWristJoint()
		{
			return null;
		}

		[Token(Token = "0x6000E23")]
		[Address(RVA = "0x9F0BB0", Offset = "0x9F0BB0", VA = "0x9F0BB0")]
		public List<FingerJoint> GetThumbJoints()
		{
			return null;
		}

		[Token(Token = "0x6000E24")]
		[Address(RVA = "0x9F0BC0", Offset = "0x9F0BC0", VA = "0x9F0BC0")]
		public List<FingerJoint> GetIndexJoints()
		{
			return null;
		}

		[Token(Token = "0x6000E25")]
		[Address(RVA = "0x9F0BD0", Offset = "0x9F0BD0", VA = "0x9F0BD0")]
		public List<FingerJoint> GetMiddleJoints()
		{
			return null;
		}

		[Token(Token = "0x6000E26")]
		[Address(RVA = "0x9F0BE0", Offset = "0x9F0BE0", VA = "0x9F0BE0")]
		public List<FingerJoint> GetRingJoints()
		{
			return null;
		}

		[Token(Token = "0x6000E27")]
		[Address(RVA = "0x9F0BF0", Offset = "0x9F0BF0", VA = "0x9F0BF0")]
		public List<FingerJoint> GetPinkyJoints()
		{
			return null;
		}

		[Token(Token = "0x6000E28")]
		[Address(RVA = "0x9F0C00", Offset = "0x9F0C00", VA = "0x9F0C00")]
		public List<FingerJoint> GetOtherJoints()
		{
			return null;
		}

		[Token(Token = "0x6000E29")]
		[Address(RVA = "0x9F0C10", Offset = "0x9F0C10", VA = "0x9F0C10")]
		public int GetTotalJointsCount()
		{
			return default(int);
		}

		[Token(Token = "0x6000E2A")]
		[Address(RVA = "0x9F0D00", Offset = "0x9F0D00", VA = "0x9F0D00")]
		public Transform GetTip(List<Transform> transforms)
		{
			return null;
		}

		[Token(Token = "0x6000E2B")]
		[Address(RVA = "0x9F0D70", Offset = "0x9F0D70", VA = "0x9F0D70")]
		public Transform GetThumbTip()
		{
			return null;
		}

		[Token(Token = "0x6000E2C")]
		[Address(RVA = "0x9F0D78", Offset = "0x9F0D78", VA = "0x9F0D78")]
		public Transform GetIndexTip()
		{
			return null;
		}

		[Token(Token = "0x6000E2D")]
		[Address(RVA = "0x9F0D80", Offset = "0x9F0D80", VA = "0x9F0D80")]
		public Transform GetMiddleTip()
		{
			return null;
		}

		[Token(Token = "0x6000E2E")]
		[Address(RVA = "0x9F0D88", Offset = "0x9F0D88", VA = "0x9F0D88")]
		public Transform GetRingTip()
		{
			return null;
		}

		[Token(Token = "0x6000E2F")]
		[Address(RVA = "0x9F0D90", Offset = "0x9F0D90", VA = "0x9F0D90")]
		public Transform GetPinkyTip()
		{
			return null;
		}

		[Token(Token = "0x6000E30")]
		[Address(RVA = "0x9EF480", Offset = "0x9EF480", VA = "0x9EF480")]
		public static Vector3 GetFingerTipPositionWithOffset(List<Transform> jointTransforms, float tipRadius)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000E31")]
		[Address(RVA = "0x9F0D98", Offset = "0x9F0D98", VA = "0x9F0D98", Slot = "4")]
		public virtual List<FingerJoint> GetJointsFromTransforms(List<Transform> jointTransforms)
		{
			return null;
		}

		[Token(Token = "0x6000E32")]
		[Address(RVA = "0x9F0F50", Offset = "0x9F0F50", VA = "0x9F0F50", Slot = "5")]
		public virtual FingerJoint GetJointFromTransform(Transform jointTransform)
		{
			return null;
		}

		[Token(Token = "0x6000E33")]
		[Address(RVA = "0x9F1034", Offset = "0x9F1034", VA = "0x9F1034", Slot = "6")]
		public virtual void UpdateHandPose(HandPose handPose, bool lerp)
		{
		}

		[Token(Token = "0x6000E34")]
		[Address(RVA = "0x9F1058", Offset = "0x9F1058", VA = "0x9F1058", Slot = "7")]
		public virtual void UpdateHandPose(HandPoseDefinition pose, bool lerp)
		{
		}

		[Token(Token = "0x6000E35")]
		[Address(RVA = "0x9F1148", Offset = "0x9F1148", VA = "0x9F1148", Slot = "8")]
		public virtual void UpdateJoint(FingerJoint fromJoint, Transform toTransform, bool doLerp, bool updatePosition, bool updateRotation)
		{
		}

		[Token(Token = "0x6000E36")]
		[Address(RVA = "0x9F11B8", Offset = "0x9F11B8", VA = "0x9F11B8", Slot = "9")]
		public virtual void UpdateJoint(FingerJoint fromJoint, Transform toTransform, float lerpAmount, bool updatePosition, bool updateRotation)
		{
		}

		[Token(Token = "0x6000E37")]
		[Address(RVA = "0x9F1338", Offset = "0x9F1338", VA = "0x9F1338", Slot = "10")]
		public virtual void UpdateJoints(List<FingerJoint> joints, List<Transform> toTransforms, bool doLerp)
		{
		}

		[Token(Token = "0x6000E38")]
		[Address(RVA = "0x9F1390", Offset = "0x9F1390", VA = "0x9F1390", Slot = "11")]
		public virtual void UpdateJoints(List<FingerJoint> joints, List<Transform> toTransforms, float lerpAmount)
		{
		}

		[Token(Token = "0x6000E39")]
		[Address(RVA = "0x9F1578", Offset = "0x9F1578", VA = "0x9F1578", Slot = "12")]
		public virtual HandPoseDefinition GetHandPoseDefinition()
		{
			return null;
		}

		[Token(Token = "0x6000E3A")]
		[Address(RVA = "0x9F16D4", Offset = "0x9F16D4", VA = "0x9F16D4", Slot = "13")]
		public virtual void SavePoseAsScriptablObject(string poseName)
		{
		}

		[Token(Token = "0x6000E3B")]
		[Address(RVA = "0x9F173C", Offset = "0x9F173C", VA = "0x9F173C", Slot = "14")]
		public virtual void CreateUniquePose(string poseName)
		{
		}

		[Token(Token = "0x6000E3C")]
		[Address(RVA = "0x9F1868", Offset = "0x9F1868", VA = "0x9F1868", Slot = "15")]
		public virtual HandPose GetHandPoseScriptableObject()
		{
			return null;
		}

		[Token(Token = "0x6000E3D")]
		[Address(RVA = "0x9F1870", Offset = "0x9F1870", VA = "0x9F1870", Slot = "16")]
		public virtual void DoPoseUpdate()
		{
		}

		[Token(Token = "0x6000E3E")]
		[Address(RVA = "0x9F1934", Offset = "0x9F1934", VA = "0x9F1934", Slot = "17")]
		public virtual void ResetEditorHandles()
		{
		}

		[Token(Token = "0x6000E3F")]
		[Address(RVA = "0x9F1A78", Offset = "0x9F1A78", VA = "0x9F1A78")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6000E40")]
		[Address(RVA = "0x9F1A7C", Offset = "0x9F1A7C", VA = "0x9F1A7C")]
		public HandPoser()
		{
		}
	}
	[Token(Token = "0x200026F")]
	public class PoseableObject : MonoBehaviour
	{
		[Token(Token = "0x2000270")]
		public enum PoseType
		{
			[Token(Token = "0x4001026")]
			HandPose,
			[Token(Token = "0x4001027")]
			AutoPoseOnce,
			[Token(Token = "0x4001028")]
			AutoPoseContinuous,
			[Token(Token = "0x4001029")]
			Animator,
			[Token(Token = "0x400102A")]
			Other,
			[Token(Token = "0x400102B")]
			None
		}

		[Token(Token = "0x4001021")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Pose Type")]
		public PoseType poseType;

		[Token(Token = "0x4001022")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Hand Pose Properties")]
		[Tooltip("Set this HandPose on the Handposer when PoseType is set to 'HandPose'")]
		public HandPose EquipHandPose;

		[Token(Token = "0x4001023")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("If PoseType = AutoPoseOnce, AutoPose will be run for this many seconds")]
		[Header("Auto Pose Properties")]
		public float AutoPoseDuration;

		[Token(Token = "0x4001024")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("Set animator ID to this value if PoseType is set to 'Animator'")]
		[Header("Animator Properties")]
		public int HandPoseID;

		[Token(Token = "0x6000E41")]
		[Address(RVA = "0x9F1B20", Offset = "0x9F1B20", VA = "0x9F1B20")]
		public PoseableObject()
		{
		}
	}
	[Token(Token = "0x2000271")]
	public class SampleHandController : MonoBehaviour
	{
		[Token(Token = "0x400102C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ControllerHandedness ControllerSide;

		[Token(Token = "0x400102D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PoseableObject HeldObject;

		[Token(Token = "0x400102E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected bool wasHoldingObject;

		[Token(Token = "0x400102F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Animator handAnimator;

		[Token(Token = "0x4001030")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private HandPoser handPoser;

		[Token(Token = "0x4001031")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private AutoPoser autoPoser;

		[Token(Token = "0x4001032")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private HandPoseBlender poseBlender;

		[Token(Token = "0x4001033")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static List<UnityEngine.XR.InputDevice> devices;

		[Token(Token = "0x4001034")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private UnityEngine.XR.InputDevice controller;

		[Token(Token = "0x6000E42")]
		[Address(RVA = "0x9F1B34", Offset = "0x9F1B34", VA = "0x9F1B34")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E43")]
		[Address(RVA = "0x9F1D40", Offset = "0x9F1D40", VA = "0x9F1D40", Slot = "4")]
		public virtual void Update()
		{
		}

		[Token(Token = "0x6000E44")]
		[Address(RVA = "0x9F1D4C", Offset = "0x9F1D4C", VA = "0x9F1D4C", Slot = "5")]
		public virtual void DoHandControllerUpdate()
		{
		}

		[Token(Token = "0x6000E45")]
		[Address(RVA = "0x9F1DA8", Offset = "0x9F1DA8", VA = "0x9F1DA8", Slot = "6")]
		public virtual void SetCurrentlyHeldObject(GameObject holdObject)
		{
		}

		[Token(Token = "0x6000E46")]
		[Address(RVA = "0x9F1E5C", Offset = "0x9F1E5C", VA = "0x9F1E5C", Slot = "7")]
		public virtual void ClearCurrentlyHeldObject()
		{
		}

		[Token(Token = "0x6000E47")]
		[Address(RVA = "0x9F1EF4", Offset = "0x9F1EF4", VA = "0x9F1EF4", Slot = "8")]
		public virtual void ResetToIdleComponents()
		{
		}

		[Token(Token = "0x6000E48")]
		[Address(RVA = "0x9F1FD8", Offset = "0x9F1FD8", VA = "0x9F1FD8", Slot = "9")]
		public virtual void UpdateFingerInputs()
		{
		}

		[Token(Token = "0x6000E49")]
		[Address(RVA = "0x9F22E4", Offset = "0x9F22E4", VA = "0x9F22E4", Slot = "10")]
		public virtual void DoHeldItemPose()
		{
		}

		[Token(Token = "0x6000E4A")]
		[Address(RVA = "0x9F2458", Offset = "0x9F2458", VA = "0x9F2458", Slot = "11")]
		public virtual void DisableContinousAutoPose()
		{
		}

		[Token(Token = "0x6000E4B")]
		[Address(RVA = "0x9F24CC", Offset = "0x9F24CC", VA = "0x9F24CC", Slot = "12")]
		public virtual void DoIdlePose()
		{
		}

		[Token(Token = "0x6000E4C")]
		[Address(RVA = "0x9F24EC", Offset = "0x9F24EC", VA = "0x9F24EC", Slot = "13")]
		public virtual bool HoldingObject()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E4D")]
		[Address(RVA = "0x9F2204", Offset = "0x9F2204", VA = "0x9F2204")]
		private float correctValue(float inputValue)
		{
			return default(float);
		}

		[Token(Token = "0x6000E4E")]
		[Address(RVA = "0x9F254C", Offset = "0x9F254C", VA = "0x9F254C", Slot = "14")]
		public virtual void UpdateXRDevices()
		{
		}

		[Token(Token = "0x6000E4F")]
		[Address(RVA = "0x9F21BC", Offset = "0x9F21BC", VA = "0x9F21BC")]
		private float getFeatureUsage(UnityEngine.XR.InputDevice device, InputFeatureUsage<float> usage)
		{
			return default(float);
		}

		[Token(Token = "0x6000E50")]
		[Address(RVA = "0x9F25E0", Offset = "0x9F25E0", VA = "0x9F25E0")]
		private bool getFeatureUsage(UnityEngine.XR.InputDevice device, InputFeatureUsage<bool> usage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E51")]
		[Address(RVA = "0x9F2614", Offset = "0x9F2614", VA = "0x9F2614", Slot = "15")]
		public virtual UnityEngine.XR.InputDevice GetLeftController()
		{
			return default(UnityEngine.XR.InputDevice);
		}

		[Token(Token = "0x6000E52")]
		[Address(RVA = "0x9F26E4", Offset = "0x9F26E4", VA = "0x9F26E4", Slot = "16")]
		public virtual UnityEngine.XR.InputDevice GetRightController()
		{
			return default(UnityEngine.XR.InputDevice);
		}

		[Token(Token = "0x6000E53")]
		[Address(RVA = "0x9F27B4", Offset = "0x9F27B4", VA = "0x9F27B4", Slot = "17")]
		public virtual bool GetThumbIsNear()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E54")]
		[Address(RVA = "0x9F2928", Offset = "0x9F2928", VA = "0x9F2928", Slot = "18")]
		public virtual bool GetIndexIsNear()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E55")]
		[Address(RVA = "0x9F29C8", Offset = "0x9F29C8", VA = "0x9F29C8")]
		public SampleHandController()
		{
		}
	}
	[Token(Token = "0x2000272")]
	public enum ControllerHandedness
	{
		[Token(Token = "0x4001036")]
		Left,
		[Token(Token = "0x4001037")]
		Right,
		[Token(Token = "0x4001038")]
		None
	}
	[Token(Token = "0x2000273")]
	public class SavePoseBinding : MonoBehaviour
	{
		[Token(Token = "0x4001039")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("If this InputAction returns true, save the current hand pose using 'handPoser.CreateUniquePose(SaveNamePrefix)'")]
		[Header("Save Input : ")]
		public InputAction SaveInput;

		[Token(Token = "0x400103A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Save name prefix : ")]
		[Tooltip("Prefix of the hand pose file name to use. For example, a prefix of 'HandPose' will save as 'HandPose 1', 'HandPose 2', etc.")]
		public string SaveNamePrefix;

		[Token(Token = "0x400103B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Debug : ")]
		[Tooltip("If true, the SaveInput binding will be shown on the screen gui. Will not show in VR.")]
		public bool ShowKeybindingToolTip;

		[Token(Token = "0x400103C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private HandPoser handPoser;

		[Token(Token = "0x6000E57")]
		[Address(RVA = "0x9F2A70", Offset = "0x9F2A70", VA = "0x9F2A70")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E58")]
		[Address(RVA = "0x9F2AE4", Offset = "0x9F2AE4", VA = "0x9F2AE4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E59")]
		[Address(RVA = "0x9F2BA8", Offset = "0x9F2BA8", VA = "0x9F2BA8")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000E5A")]
		[Address(RVA = "0x9F2CD0", Offset = "0x9F2CD0", VA = "0x9F2CD0")]
		public SavePoseBinding()
		{
		}
	}
	[Token(Token = "0x2000274")]
	[ExecuteInEditMode]
	public class SkeletonVisualizer : MonoBehaviour
	{
		[Token(Token = "0x400103D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool ShowGizmos;

		[Token(Token = "0x400103E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Range(0f, 1f)]
		public float JointRadius;

		[Token(Token = "0x400103F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 5f)]
		public float BoneThickness;

		[Token(Token = "0x4001040")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Color GizmoColor;

		[Token(Token = "0x4001041")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool ShowTransformNames;

		[Token(Token = "0x4001042")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		private bool isQuiting;

		[Token(Token = "0x6000E5B")]
		[Address(RVA = "0x9F2D30", Offset = "0x9F2D30", VA = "0x9F2D30")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x6000E5C")]
		[Address(RVA = "0x9F2D3C", Offset = "0x9F2D3C", VA = "0x9F2D3C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000E5D")]
		[Address(RVA = "0x9F2D40", Offset = "0x9F2D40", VA = "0x9F2D40", Slot = "4")]
		public virtual bool IsTipOfBone(Transform fingerJoint)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E5E")]
		[Address(RVA = "0x9F2E30", Offset = "0x9F2E30", VA = "0x9F2E30")]
		public void ResetEditorHandles()
		{
		}

		[Token(Token = "0x6000E5F")]
		[Address(RVA = "0x9F2F74", Offset = "0x9F2F74", VA = "0x9F2F74")]
		public SkeletonVisualizer()
		{
		}
	}
	[Token(Token = "0x2000275")]
	public class XRTrackedPoseDriver : MonoBehaviour
	{
		[Token(Token = "0x4001043")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TrackableXRDevice Device;

		[Token(Token = "0x4001044")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected UnityEngine.XR.InputDevice deviceToTrack;

		[Token(Token = "0x4001045")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected Vector3 initialLocalPosition;

		[Token(Token = "0x4001046")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		protected Quaternion initialLocalRotation;

		[Token(Token = "0x4001047")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		protected Vector3 currentLocalPosition;

		[Token(Token = "0x4001048")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected Quaternion currentLocalRotation;

		[Token(Token = "0x4001049")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static List<UnityEngine.XR.InputDevice> devices;

		[Token(Token = "0x6000E60")]
		[Address(RVA = "0x9F2F9C", Offset = "0x9F2F9C", VA = "0x9F2F9C", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000E61")]
		[Address(RVA = "0x9F2FEC", Offset = "0x9F2FEC", VA = "0x9F2FEC", Slot = "5")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6000E62")]
		[Address(RVA = "0x9F3060", Offset = "0x9F3060", VA = "0x9F3060", Slot = "6")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6000E63")]
		[Address(RVA = "0x9F30D4", Offset = "0x9F30D4", VA = "0x9F30D4", Slot = "7")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000E64")]
		[Address(RVA = "0x9F30FC", Offset = "0x9F30FC", VA = "0x9F30FC", Slot = "8")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6000E65")]
		[Address(RVA = "0x9F3108", Offset = "0x9F3108", VA = "0x9F3108", Slot = "9")]
		public virtual void RefreshDeviceStatus()
		{
		}

		[Token(Token = "0x6000E66")]
		[Address(RVA = "0x9F33C8", Offset = "0x9F33C8", VA = "0x9F33C8", Slot = "10")]
		public virtual void UpdateDevice()
		{
		}

		[Token(Token = "0x6000E67")]
		[Address(RVA = "0x9F37D8", Offset = "0x9F37D8", VA = "0x9F37D8", Slot = "11")]
		protected virtual void OnBeforeRender()
		{
		}

		[Token(Token = "0x6000E68")]
		[Address(RVA = "0x9F3500", Offset = "0x9F3500", VA = "0x9F3500")]
		public Vector3 GetHMDLocalPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000E69")]
		[Address(RVA = "0x9F3158", Offset = "0x9F3158", VA = "0x9F3158")]
		public UnityEngine.XR.InputDevice GetHMD()
		{
			return default(UnityEngine.XR.InputDevice);
		}

		[Token(Token = "0x6000E6A")]
		[Address(RVA = "0x9F358C", Offset = "0x9F358C", VA = "0x9F358C")]
		public Quaternion GetHMDLocalRotation()
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000E6B")]
		[Address(RVA = "0x9F3614", Offset = "0x9F3614", VA = "0x9F3614")]
		public Vector3 GetControllerLocalPosition(ControllerHandedness handSide)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000E6C")]
		[Address(RVA = "0x9F36FC", Offset = "0x9F36FC", VA = "0x9F36FC")]
		public Quaternion GetControllerLocalRotation(ControllerHandedness handSide)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000E6D")]
		[Address(RVA = "0x9F3228", Offset = "0x9F3228", VA = "0x9F3228")]
		public UnityEngine.XR.InputDevice GetLeftController()
		{
			return default(UnityEngine.XR.InputDevice);
		}

		[Token(Token = "0x6000E6E")]
		[Address(RVA = "0x9F32F8", Offset = "0x9F32F8", VA = "0x9F32F8")]
		public UnityEngine.XR.InputDevice GetRightController()
		{
			return default(UnityEngine.XR.InputDevice);
		}

		[Token(Token = "0x6000E6F")]
		[Address(RVA = "0x9F37E4", Offset = "0x9F37E4", VA = "0x9F37E4")]
		public XRTrackedPoseDriver()
		{
		}
	}
	[Token(Token = "0x2000276")]
	public enum TrackableXRDevice
	{
		[Token(Token = "0x400104B")]
		HMD,
		[Token(Token = "0x400104C")]
		LeftController,
		[Token(Token = "0x400104D")]
		RightController
	}
	[Token(Token = "0x2000277")]
	public class DemoCube : MonoBehaviour
	{
		[Token(Token = "0x400104E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Material HighlightMaterial;

		[Token(Token = "0x400104F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Material ActiveMaterial;

		[Token(Token = "0x4001050")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool active;

		[Token(Token = "0x4001051")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		private bool hovering;

		[Token(Token = "0x4001052")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Material initialMaterial;

		[Token(Token = "0x4001053")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private MeshRenderer render;

		[Token(Token = "0x6000E71")]
		[Address(RVA = "0x9F3884", Offset = "0x9F3884", VA = "0x9F3884")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E72")]
		[Address(RVA = "0x9F3904", Offset = "0x9F3904", VA = "0x9F3904")]
		public void SetActive(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000E73")]
		[Address(RVA = "0x9F3964", Offset = "0x9F3964", VA = "0x9F3964")]
		public void SetInactive(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000E74")]
		[Address(RVA = "0x9F396C", Offset = "0x9F396C", VA = "0x9F396C")]
		public void SetHovering(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000E75")]
		[Address(RVA = "0x9F3978", Offset = "0x9F3978", VA = "0x9F3978")]
		public void ResetHovering(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000E76")]
		[Address(RVA = "0x9F3910", Offset = "0x9F3910", VA = "0x9F3910")]
		public void UpdateMaterial()
		{
		}

		[Token(Token = "0x6000E77")]
		[Address(RVA = "0x9F3980", Offset = "0x9F3980", VA = "0x9F3980")]
		public DemoCube()
		{
		}
	}
	[Token(Token = "0x2000278")]
	public class DemoScript : MonoBehaviour
	{
		[Token(Token = "0x4001054")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Text LabelToUpdate;

		[Token(Token = "0x4001055")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ProjectileLauncher DemoLauncher;

		[Token(Token = "0x4001056")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int MaxLaunchedObjects;

		[Token(Token = "0x4001057")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<GameObject> launchedObjects;

		[Token(Token = "0x4001058")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Text JoystickText;

		[Token(Token = "0x4001059")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject AmmoObject;

		[Token(Token = "0x400105A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform ItemsHolder;

		[Token(Token = "0x400105B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Dictionary<Grabbable, PosRot> _initalGrabbables;

		[Token(Token = "0x400105C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Rigidbody cubeRigid;

		[Token(Token = "0x400105D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Rigidbody cubeRigid1;

		[Token(Token = "0x400105E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Rigidbody cubeRigid2;

		[Token(Token = "0x400105F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Rigidbody cubeRigid3;

		[Token(Token = "0x4001060")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private List<Grabbable> demoClips;

		[Token(Token = "0x4001061")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector3 rotateX;

		[Token(Token = "0x4001062")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private Vector3 rotateY;

		[Token(Token = "0x4001063")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3 rotateZ;

		[Token(Token = "0x4001064")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private Vector3 rotateXYX;

		[Token(Token = "0x6000E78")]
		[Address(RVA = "0x9F3988", Offset = "0x9F3988", VA = "0x9F3988")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E79")]
		[Address(RVA = "0x9F3E3C", Offset = "0x9F3E3C", VA = "0x9F3E3C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E7A")]
		[Address(RVA = "0x9F3F7C", Offset = "0x9F3F7C", VA = "0x9F3F7C")]
		public void UpdateSliderText(float sliderValue)
		{
		}

		[Token(Token = "0x6000E7B")]
		[Address(RVA = "0x9F40CC", Offset = "0x9F40CC", VA = "0x9F40CC")]
		public void UpdateJoystickText(float leverX, float leverY)
		{
		}

		[Token(Token = "0x6000E7C")]
		[Address(RVA = "0x9F4208", Offset = "0x9F4208", VA = "0x9F4208")]
		public void ResetGrabbables()
		{
		}

		[Token(Token = "0x6000E7D")]
		[Address(RVA = "0x9F4584", Offset = "0x9F4584", VA = "0x9F4584")]
		public void GrabAmmo(Grabber grabber)
		{
		}

		[Token(Token = "0x6000E7E")]
		[Address(RVA = "0x9F4A6C", Offset = "0x9F4A6C", VA = "0x9F4A6C")]
		public void ShootLauncher()
		{
		}

		[Token(Token = "0x6000E7F")]
		[Address(RVA = "0x9F3C10", Offset = "0x9F3C10", VA = "0x9F3C10")]
		private void initGravityCubes()
		{
		}

		[Token(Token = "0x6000E80")]
		[Address(RVA = "0x9F3E40", Offset = "0x9F3E40", VA = "0x9F3E40")]
		private void rotateGravityCubes()
		{
		}

		[Token(Token = "0x6000E81")]
		[Address(RVA = "0x9F4C48", Offset = "0x9F4C48", VA = "0x9F4C48")]
		public DemoScript()
		{
		}
	}
	[Token(Token = "0x2000279")]
	public class PosRot
	{
		[Token(Token = "0x4001065")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 Position;

		[Token(Token = "0x4001066")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Quaternion Rotation;

		[Token(Token = "0x6000E82")]
		[Address(RVA = "0x9F3C08", Offset = "0x9F3C08", VA = "0x9F3C08")]
		public PosRot()
		{
		}
	}
	[Token(Token = "0x200027A")]
	public class CharacterConstraint : MonoBehaviour
	{
		[Token(Token = "0x4001067")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private BNGPlayerController bngController;

		[Token(Token = "0x4001068")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private CharacterController character;

		[Token(Token = "0x6000E83")]
		[Address(RVA = "0x9F4C74", Offset = "0x9F4C74", VA = "0x9F4C74")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000E84")]
		[Address(RVA = "0x9F4D0C", Offset = "0x9F4D0C", VA = "0x9F4D0C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E85")]
		[Address(RVA = "0x9F4D18", Offset = "0x9F4D18", VA = "0x9F4D18", Slot = "4")]
		public virtual void CheckCharacterCollisionMove()
		{
		}

		[Token(Token = "0x6000E86")]
		[Address(RVA = "0x9F4E88", Offset = "0x9F4E88", VA = "0x9F4E88")]
		public CharacterConstraint()
		{
		}
	}
	[Token(Token = "0x200027B")]
	public class CharacterIK : MonoBehaviour
	{
		[Token(Token = "0x4001069")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform FollowLeftController;

		[Token(Token = "0x400106A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform FollowRightController;

		[Token(Token = "0x400106B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform FollowLeftFoot;

		[Token(Token = "0x400106C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform FollowRightFoot;

		[Token(Token = "0x400106D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform FollowHead;

		[Token(Token = "0x400106E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float FootYPosition;

		[Token(Token = "0x400106F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public bool IKActive;

		[Token(Token = "0x4001070")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
		public bool IKFeetActive;

		[Token(Token = "0x4001071")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x46")]
		public bool HideHead;

		[Token(Token = "0x4001072")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x47")]
		public bool HideLeftArm;

		[Token(Token = "0x4001073")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool HideRightArm;

		[Token(Token = "0x4001074")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		public bool HideLeftHand;

		[Token(Token = "0x4001075")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
		public bool HideRightHand;

		[Token(Token = "0x4001076")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4B")]
		public bool HideLegs;

		[Token(Token = "0x4001077")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform HipsJoint;

		[Token(Token = "0x4001078")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public CharacterController FollowPlayer;

		[Token(Token = "0x4001079")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform headBone;

		[Token(Token = "0x400107A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Transform leftShoulderJoint;

		[Token(Token = "0x400107B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Transform rightShoulderJoint;

		[Token(Token = "0x400107C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Transform leftHandJoint;

		[Token(Token = "0x400107D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Transform rightHandJoint;

		[Token(Token = "0x400107E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Animator animator;

		[Token(Token = "0x400107F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float HipOffset;

		[Token(Token = "0x4001080")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public Vector3 hideBoneScale;

		[Token(Token = "0x6000E87")]
		[Address(RVA = "0x9F4E90", Offset = "0x9F4E90", VA = "0x9F4E90")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E88")]
		[Address(RVA = "0x9F4FB4", Offset = "0x9F4FB4", VA = "0x9F4FB4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E89")]
		[Address(RVA = "0x9F541C", Offset = "0x9F541C", VA = "0x9F541C")]
		private void OnAnimatorIK()
		{
		}

		[Token(Token = "0x6000E8A")]
		[Address(RVA = "0x9F5864", Offset = "0x9F5864", VA = "0x9F5864")]
		public CharacterIK()
		{
		}
	}
	[Token(Token = "0x200027C")]
	public class CharacterYOffset : MonoBehaviour
	{
		[Token(Token = "0x6000E8B")]
		[Address(RVA = "0x9F5890", Offset = "0x9F5890", VA = "0x9F5890")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000E8C")]
		[Address(RVA = "0x9F5934", Offset = "0x9F5934", VA = "0x9F5934")]
		public CharacterYOffset()
		{
		}
	}
	[Token(Token = "0x200027D")]
	public class Climbable : Grabbable
	{
		[Token(Token = "0x4001081")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
		private PlayerClimbing playerClimbing;

		[Token(Token = "0x6000E8D")]
		[Address(RVA = "0x9F593C", Offset = "0x9F593C", VA = "0x9F593C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E8E")]
		[Address(RVA = "0x9F5A30", Offset = "0x9F5A30", VA = "0x9F5A30", Slot = "20")]
		public override void GrabItem(Grabber grabbedBy)
		{
		}

		[Token(Token = "0x6000E8F")]
		[Address(RVA = "0x9F5ACC", Offset = "0x9F5ACC", VA = "0x9F5ACC", Slot = "28")]
		public override void DropItem(Grabber droppedBy)
		{
		}

		[Token(Token = "0x6000E90")]
		[Address(RVA = "0x9F5B8C", Offset = "0x9F5B8C", VA = "0x9F5B8C")]
		public Climbable()
		{
		}
	}
	[Token(Token = "0x200027E")]
	public class CollisionSound : MonoBehaviour
	{
		[Token(Token = "0x4001082")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioClip CollisionAudio;

		[Token(Token = "0x4001083")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private AudioSource audioSource;

		[Token(Token = "0x4001084")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float startTime;

		[Token(Token = "0x4001085")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Collider col;

		[Token(Token = "0x4001086")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Grabbable grab;

		[Token(Token = "0x4001087")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float MinimumVolume;

		[Token(Token = "0x4001088")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float MaximumVolume;

		[Token(Token = "0x4001089")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool RecentlyPlayedSound;

		[Token(Token = "0x400108A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float lastPlayedSound;

		[Token(Token = "0x400108B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float LastRelativeVelocity;

		[Token(Token = "0x6000E91")]
		[Address(RVA = "0x9F5B94", Offset = "0x9F5B94", VA = "0x9F5B94")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E92")]
		[Address(RVA = "0x9F5CF4", Offset = "0x9F5CF4", VA = "0x9F5CF4")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6000E93")]
		[Address(RVA = "0x9F60BC", Offset = "0x9F60BC", VA = "0x9F60BC")]
		private void resetLastPlayedSound()
		{
		}

		[Token(Token = "0x6000E94")]
		[Address(RVA = "0x9F60C4", Offset = "0x9F60C4", VA = "0x9F60C4")]
		public CollisionSound()
		{
		}
	}
	[Token(Token = "0x200027F")]
	public class ConstrainLocalPosition : MonoBehaviour
	{
		[Token(Token = "0x400108C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool ConstrainLocalX;

		[Token(Token = "0x400108D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float LocalXMin;

		[Token(Token = "0x400108E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float LocalXMax;

		[Token(Token = "0x400108F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool ConstrainLocalY;

		[Token(Token = "0x4001090")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float LocalYMin;

		[Token(Token = "0x4001091")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float LocalYMax;

		[Token(Token = "0x4001092")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool ConstrainLocalZ;

		[Token(Token = "0x4001093")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float LocalZMin;

		[Token(Token = "0x4001094")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float LocalZMax;

		[Token(Token = "0x4001095")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public bool isChanges;

		[Token(Token = "0x6000E95")]
		[Address(RVA = "0x9F60D8", Offset = "0x9F60D8", VA = "0x9F60D8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E96")]
		[Address(RVA = "0x9F60DC", Offset = "0x9F60DC", VA = "0x9F60DC")]
		private void doConstrain()
		{
		}

		[Token(Token = "0x6000E97")]
		[Address(RVA = "0x9F61F8", Offset = "0x9F61F8", VA = "0x9F61F8")]
		public ConstrainLocalPosition()
		{
		}
	}
	[Token(Token = "0x2000280")]
	public class Damageable : MonoBehaviour
	{
		[Token(Token = "0x2000281")]
		[CompilerGenerated]
		private sealed class <RespawnRoutine>d__22 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40010A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40010A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40010AA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float seconds;

			[Token(Token = "0x40010AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Damageable <>4__this;

			[Token(Token = "0x17000170")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000EA1")]
				[Address(RVA = "0x9F6F9C", Offset = "0x9F6F9C", VA = "0x9F6F9C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000171")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000EA3")]
				[Address(RVA = "0x9F6FE4", Offset = "0x9F6FE4", VA = "0x9F6FE4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000E9E")]
			[Address(RVA = "0x9F6B2C", Offset = "0x9F6B2C", VA = "0x9F6B2C")]
			[DebuggerHidden]
			public <RespawnRoutine>d__22(int <>1__state)
			{
			}

			[Token(Token = "0x6000E9F")]
			[Address(RVA = "0x9F6B7C", Offset = "0x9F6B7C", VA = "0x9F6B7C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000EA0")]
			[Address(RVA = "0x9F6B80", Offset = "0x9F6B80", VA = "0x9F6B80", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000EA2")]
			[Address(RVA = "0x9F6FA4", Offset = "0x9F6FA4", VA = "0x9F6FA4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001096")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float Health;

		[Token(Token = "0x4001097")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float _startingHealth;

		[Token(Token = "0x4001098")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("If specified, this GameObject will be instantiated at this transform's position on death.")]
		public GameObject SpawnOnDeath;

		[Token(Token = "0x4001099")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Activate these GameObjects on Death")]
		public List<GameObject> ActivateGameObjectsOnDeath;

		[Token(Token = "0x400109A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Deactivate these GameObjects on Death")]
		public List<GameObject> DeactivateGameObjectsOnDeath;

		[Token(Token = "0x400109B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Deactivate these Colliders on Death")]
		public List<Collider> DeactivateCollidersOnDeath;

		[Token(Token = "0x400109C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Destroy this object on Death? False if need to respawn.")]
		public bool DestroyOnDeath;

		[Token(Token = "0x400109D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		[Tooltip("If this object is a Grabbable it can be dropped on Death")]
		public bool DropOnDeath;

		[Token(Token = "0x400109E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("How long to wait before destroying this objects")]
		public float DestroyDelay;

		[Token(Token = "0x400109F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("If true the object will be reactivated according to RespawnTime")]
		public bool Respawn;

		[Token(Token = "0x40010A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("If Respawn true, this gameObject will reactivate after RespawnTime. In seconds.")]
		public float RespawnTime;

		[Token(Token = "0x40010A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Remove any decals that were parented to this object on death. Useful for clearing unused decals.")]
		public bool RemoveBulletHolesOnDeath;

		[Token(Token = "0x40010A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Header("Events")]
		[Tooltip("Optional Event to be called when receiving damage. Takes damage amount as a float parameter.")]
		public FloatEvent onDamaged;

		[Token(Token = "0x40010A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Optional Event to be called once health is <= 0")]
		public UnityEvent onDestroyed;

		[Token(Token = "0x40010A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Optional Event to be called once the object has been respawned, if Respawn is true and after RespawnTime")]
		public UnityEvent onRespawn;

		[Token(Token = "0x40010A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool destroyed;

		[Token(Token = "0x40010A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Rigidbody rigid;

		[Token(Token = "0x40010A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private bool initialWasKinematic;

		[Token(Token = "0x6000E98")]
		[Address(RVA = "0x9F6214", Offset = "0x9F6214", VA = "0x9F6214")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E99")]
		[Address(RVA = "0x9F62D8", Offset = "0x9F62D8", VA = "0x9F62D8", Slot = "4")]
		public virtual void DealDamage(float damageAmount)
		{
		}

		[Token(Token = "0x6000E9A")]
		[Address(RVA = "0x9F6388", Offset = "0x9F6388", VA = "0x9F6388", Slot = "5")]
		public virtual void DealDamage(float damageAmount, [Optional] Vector3? hitPosition, [Optional] Vector3? hitNormal, bool reactToHit = true, [Optional] GameObject sender, [Optional] GameObject receiver)
		{
		}

		[Token(Token = "0x6000E9B")]
		[Address(RVA = "0x9F6424", Offset = "0x9F6424", VA = "0x9F6424", Slot = "6")]
		public virtual void DestroyThis()
		{
		}

		[Token(Token = "0x6000E9C")]
		[Address(RVA = "0x9F6AA8", Offset = "0x9F6AA8", VA = "0x9F6AA8")]
		[IteratorStateMachine(typeof(<RespawnRoutine>d__22))]
		private IEnumerator RespawnRoutine(float seconds)
		{
			return null;
		}

		[Token(Token = "0x6000E9D")]
		[Address(RVA = "0x9F6B54", Offset = "0x9F6B54", VA = "0x9F6B54")]
		public Damageable()
		{
		}
	}
	[Token(Token = "0x2000282")]
	public class DamageCollider : MonoBehaviour
	{
		[Token(Token = "0x40010AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float Damage;

		[Token(Token = "0x40010AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Rigidbody ColliderRigidbody;

		[Token(Token = "0x40010AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float MinForce;

		[Token(Token = "0x40010AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float LastRelativeVelocity;

		[Token(Token = "0x40010B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float LastDamageForce;

		[Token(Token = "0x40010B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool TakeCollisionDamage;

		[Token(Token = "0x40010B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float CollisionDamage;

		[Token(Token = "0x40010B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Damageable thisDamageable;

		[Token(Token = "0x6000EA4")]
		[Address(RVA = "0x9F6FEC", Offset = "0x9F6FEC", VA = "0x9F6FEC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000EA5")]
		[Address(RVA = "0x9F70BC", Offset = "0x9F70BC", VA = "0x9F70BC")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6000EA6")]
		[Address(RVA = "0x9F7100", Offset = "0x9F7100", VA = "0x9F7100", Slot = "4")]
		public virtual void OnCollisionEvent(Collision collision)
		{
		}

		[Token(Token = "0x6000EA7")]
		[Address(RVA = "0x9F73D0", Offset = "0x9F73D0", VA = "0x9F73D0")]
		public DamageCollider()
		{
		}
	}
	[Token(Token = "0x2000283")]
	public class DestroyObjectWithDelay : MonoBehaviour
	{
		[Token(Token = "0x40010B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float DestroySeconds;

		[Token(Token = "0x6000EA8")]
		[Address(RVA = "0x9F73F4", Offset = "0x9F73F4", VA = "0x9F73F4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000EA9")]
		[Address(RVA = "0x9F7470", Offset = "0x9F7470", VA = "0x9F7470")]
		public DestroyObjectWithDelay()
		{
		}
	}
	[Token(Token = "0x2000284")]
	public class FollowRigidbody : MonoBehaviour
	{
		[Token(Token = "0x40010B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform FollowTransform;

		[Token(Token = "0x40010B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Rigidbody rigid;

		[Token(Token = "0x6000EAA")]
		[Address(RVA = "0x9F7478", Offset = "0x9F7478", VA = "0x9F7478")]
		private void Start()
		{
		}

		[Token(Token = "0x6000EAB")]
		[Address(RVA = "0x9F74D0", Offset = "0x9F74D0", VA = "0x9F74D0")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000EAC")]
		[Address(RVA = "0x9F7510", Offset = "0x9F7510", VA = "0x9F7510")]
		public FollowRigidbody()
		{
		}
	}
	[Token(Token = "0x2000285")]
	public class FollowTransform : MonoBehaviour
	{
		[Token(Token = "0x40010B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform FollowTarget;

		[Token(Token = "0x40010B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool MatchRotation;

		[Token(Token = "0x6000EAD")]
		[Address(RVA = "0x9F7518", Offset = "0x9F7518", VA = "0x9F7518")]
		private void Update()
		{
		}

		[Token(Token = "0x6000EAE")]
		[Address(RVA = "0x9F75F8", Offset = "0x9F75F8", VA = "0x9F75F8")]
		public FollowTransform()
		{
		}
	}
	[Token(Token = "0x2000286")]
	public class GrabAction : GrabbableEvents
	{
		[Token(Token = "0x40010B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GrabberEvent OnGrabEvent;

		[Token(Token = "0x40010BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Grabbable g;

		[Token(Token = "0x40010BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float lastGrabTime;

		[Token(Token = "0x40010BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float minTimeBetweenGrabs;

		[Token(Token = "0x6000EAF")]
		[Address(RVA = "0x9F7608", Offset = "0x9F7608", VA = "0x9F7608", Slot = "5")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x6000EB0")]
		[Address(RVA = "0x9F7750", Offset = "0x9F7750", VA = "0x9F7750")]
		public GrabAction()
		{
		}
	}
	[Token(Token = "0x2000287")]
	public class GrabbableBezierLine : GrabbableEvents
	{
		[Token(Token = "0x40010BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool HighlightOnGrabbable;

		[Token(Token = "0x40010BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool HighlightOnRemoteGrabbable;

		[Token(Token = "0x40010BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public LineRenderer LineToDraw;

		[Token(Token = "0x40010C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int SegmentCount;

		[Token(Token = "0x40010C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float LerpAmount;

		[Token(Token = "0x40010C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float HeightAdjustment;

		[Token(Token = "0x40010C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Grabber lineToGrabber;

		[Token(Token = "0x40010C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Grabber lineRemoteGrabbing;

		[Token(Token = "0x6000EB1")]
		[Address(RVA = "0x9F7764", Offset = "0x9F7764", VA = "0x9F7764")]
		private void Start()
		{
		}

		[Token(Token = "0x6000EB2")]
		[Address(RVA = "0x9F78A4", Offset = "0x9F78A4", VA = "0x9F78A4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000EB3")]
		[Address(RVA = "0x9F7D34", Offset = "0x9F7D34", VA = "0x9F7D34", Slot = "5")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x6000EB4")]
		[Address(RVA = "0x9F7D60", Offset = "0x9F7D60", VA = "0x9F7D60", Slot = "8")]
		public override void OnBecomesClosestGrabbable(Grabber touchingGrabber)
		{
		}

		[Token(Token = "0x6000EB5")]
		[Address(RVA = "0x9F7E58", Offset = "0x9F7E58", VA = "0x9F7E58", Slot = "10")]
		public override void OnNoLongerClosestGrabbable(Grabber touchingGrabber)
		{
		}

		[Token(Token = "0x6000EB6")]
		[Address(RVA = "0x9F7E90", Offset = "0x9F7E90", VA = "0x9F7E90", Slot = "12")]
		public override void OnBecomesClosestRemoteGrabbable(Grabber touchingGrabber)
		{
		}

		[Token(Token = "0x6000EB7")]
		[Address(RVA = "0x9F7ECC", Offset = "0x9F7ECC", VA = "0x9F7ECC", Slot = "14")]
		public override void OnNoLongerClosestRemoteGrabbable(Grabber touchingGrabber)
		{
		}

		[Token(Token = "0x6000EB8")]
		[Address(RVA = "0x9F7D9C", Offset = "0x9F7D9C", VA = "0x9F7D9C")]
		public void HighlightItem(Grabber touchingGrabber)
		{
		}

		[Token(Token = "0x6000EB9")]
		[Address(RVA = "0x9F781C", Offset = "0x9F781C", VA = "0x9F781C")]
		public void UnhighlightItem()
		{
		}

		[Token(Token = "0x6000EBA")]
		[Address(RVA = "0x9F7BCC", Offset = "0x9F7BCC", VA = "0x9F7BCC")]
		public void DrawBezierCurve(Vector3 point0, Vector3 point1, Vector3 point2, LineRenderer lineRenderer)
		{
		}

		[Token(Token = "0x6000EBB")]
		[Address(RVA = "0x9F7F04", Offset = "0x9F7F04", VA = "0x9F7F04")]
		public GrabbableBezierLine()
		{
		}
	}
	[Token(Token = "0x2000288")]
	public class GrabbableHaptics : GrabbableEvents
	{
		[Token(Token = "0x40010C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool HapticsOnValidPickup;

		[Token(Token = "0x40010C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool HapticsOnValidRemotePickup;

		[Token(Token = "0x40010C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		public bool HapticsOnCollision;

		[Token(Token = "0x40010C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x33")]
		public bool HapticsOnGrab;

		[Token(Token = "0x40010C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float VibrateFrequency;

		[Token(Token = "0x40010CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float VibrateAmplitude;

		[Token(Token = "0x40010CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float VibrateDuration;

		[Token(Token = "0x40010CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Grabber currentGrabber;

		[Token(Token = "0x6000EBC")]
		[Address(RVA = "0x9F7F24", Offset = "0x9F7F24", VA = "0x9F7F24", Slot = "5")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x6000EBD")]
		[Address(RVA = "0x9F8010", Offset = "0x9F8010", VA = "0x9F8010", Slot = "6")]
		public override void OnRelease()
		{
		}

		[Token(Token = "0x6000EBE")]
		[Address(RVA = "0x9F801C", Offset = "0x9F801C", VA = "0x9F801C", Slot = "7")]
		public override void OnBecomesClosestGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6000EBF")]
		[Address(RVA = "0x9F802C", Offset = "0x9F802C", VA = "0x9F802C", Slot = "11")]
		public override void OnBecomesClosestRemoteGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6000EC0")]
		[Address(RVA = "0x9F7F74", Offset = "0x9F7F74", VA = "0x9F7F74")]
		private void doHaptics(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6000EC1")]
		[Address(RVA = "0x9F803C", Offset = "0x9F803C", VA = "0x9F803C")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6000EC2")]
		[Address(RVA = "0x9F8144", Offset = "0x9F8144", VA = "0x9F8144")]
		public GrabbableHaptics()
		{
		}
	}
	[Token(Token = "0x2000289")]
	public class GrabbableHighlight : GrabbableEvents
	{
		[Token(Token = "0x40010CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool HighlightOnGrabbable;

		[Token(Token = "0x40010CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool HighlightOnRemoteGrabbable;

		[Token(Token = "0x6000EC3")]
		[Address(RVA = "0x9F816C", Offset = "0x9F816C", VA = "0x9F816C", Slot = "5")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x6000EC4")]
		[Address(RVA = "0x9F8174", Offset = "0x9F8174", VA = "0x9F8174", Slot = "7")]
		public override void OnBecomesClosestGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6000EC5")]
		[Address(RVA = "0x9F817C", Offset = "0x9F817C", VA = "0x9F817C", Slot = "9")]
		public override void OnNoLongerClosestGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6000EC6")]
		[Address(RVA = "0x9F8180", Offset = "0x9F8180", VA = "0x9F8180", Slot = "11")]
		public override void OnBecomesClosestRemoteGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6000EC7")]
		[Address(RVA = "0x9F8184", Offset = "0x9F8184", VA = "0x9F8184", Slot = "13")]
		public override void OnNoLongerClosestRemoteGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6000EC8")]
		[Address(RVA = "0x9F8178", Offset = "0x9F8178", VA = "0x9F8178")]
		public void HighlightItem()
		{
		}

		[Token(Token = "0x6000EC9")]
		[Address(RVA = "0x9F8170", Offset = "0x9F8170", VA = "0x9F8170")]
		public void UnhighlightItem()
		{
		}

		[Token(Token = "0x6000ECA")]
		[Address(RVA = "0x9F8188", Offset = "0x9F8188", VA = "0x9F8188")]
		public GrabbableHighlight()
		{
		}
	}
	[Token(Token = "0x200028A")]
	public class GrabbableHighlightMaterial : GrabbableEvents
	{
		[Token(Token = "0x40010CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool HighlightOnGrabbable;

		[Token(Token = "0x40010D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool HighlightOnRemoteGrabbable;

		[Token(Token = "0x40010D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Materials to assign to Renderer when not being highlighted. ")]
		public List<Material> StandardMaterials;

		[Token(Token = "0x40010D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Materials to assign to Renderer when being highlighted")]
		public List<Material> HighlightMaterials;

		[Token(Token = "0x40010D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Renderer Renderer;

		[Token(Token = "0x6000ECB")]
		[Address(RVA = "0x9F8198", Offset = "0x9F8198", VA = "0x9F8198")]
		private void Start()
		{
		}

		[Token(Token = "0x6000ECC")]
		[Address(RVA = "0x9F8398", Offset = "0x9F8398", VA = "0x9F8398", Slot = "5")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x6000ECD")]
		[Address(RVA = "0x9F844C", Offset = "0x9F844C", VA = "0x9F844C", Slot = "7")]
		public override void OnBecomesClosestGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6000ECE")]
		[Address(RVA = "0x9F850C", Offset = "0x9F850C", VA = "0x9F850C", Slot = "9")]
		public override void OnNoLongerClosestGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6000ECF")]
		[Address(RVA = "0x9F851C", Offset = "0x9F851C", VA = "0x9F851C", Slot = "11")]
		public override void OnBecomesClosestRemoteGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6000ED0")]
		[Address(RVA = "0x9F852C", Offset = "0x9F852C", VA = "0x9F852C", Slot = "13")]
		public override void OnNoLongerClosestRemoteGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6000ED1")]
		[Address(RVA = "0x9F845C", Offset = "0x9F845C", VA = "0x9F845C")]
		public void HighlightItem()
		{
		}

		[Token(Token = "0x6000ED2")]
		[Address(RVA = "0x9F839C", Offset = "0x9F839C", VA = "0x9F839C")]
		public void UnhighlightItem()
		{
		}

		[Token(Token = "0x6000ED3")]
		[Address(RVA = "0x9F853C", Offset = "0x9F853C", VA = "0x9F853C")]
		public GrabbableHighlightMaterial()
		{
		}
	}
	[Token(Token = "0x200028B")]
	public class GrabbableRingHelper : GrabbableEvents
	{
		[Token(Token = "0x40010D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool RingOnValidPickup;

		[Token(Token = "0x40010D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool RingOnValidRemotePickup;

		[Token(Token = "0x40010D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float RingHelperScale;

		[Token(Token = "0x6000ED4")]
		[Address(RVA = "0x9F854C", Offset = "0x9F854C", VA = "0x9F854C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000ED5")]
		[Address(RVA = "0x9F8804", Offset = "0x9F8804", VA = "0x9F8804")]
		public GrabbableRingHelper()
		{
		}
	}
	[Token(Token = "0x200028C")]
	public class GrabPointTrigger : MonoBehaviour
	{
		[Token(Token = "0x200028D")]
		public enum HandMovement
		{
			[Token(Token = "0x40010E3")]
			Instant,
			[Token(Token = "0x40010E4")]
			Lerp,
			[Token(Token = "0x40010E5")]
			None
		}

		[Token(Token = "0x40010D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Hand Movement")]
		[Tooltip("How to move the hand to the nearest grab point. If set to 'None', the hand model will remain at the controller.")]
		public HandMovement MoveInStyle;

		[Token(Token = "0x40010D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("How to move the hand back to the grabber")]
		public HandMovement MoveOutStyle;

		[Token(Token = "0x40010D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("How to fast to move the hand if MovementStyle = 'Lerp' or 'Linear'")]
		public float HandSpeed;

		[Token(Token = "0x40010DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("If true the hand model will continue to move towards the closest grab point. If false, the hand will only move towards the closest grab point once upon entering the trigger.")]
		public bool LiveUpdateNearestGrabPoint;

		[Token(Token = "0x40010DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("If specified this Grabbable will be grabbed if the user holds down the grab button while this preview is active")]
		[Header("Grabbable Options")]
		public Grabbable GrabObject;

		[Token(Token = "0x40010DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("If specified this Grabbable must be held for this component to work")]
		public Grabbable OtherGrabbableMustBeHeld;

		[Token(Token = "0x40010DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Grab Points to move towards when the grabber is within the Trigger area.")]
		public List<GrabPoint> GrabPoints;

		[Token(Token = "0x40010DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Grabber currentGrabber;

		[Token(Token = "0x40010DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Grabbable dummyGrabbable;

		[Token(Token = "0x40010E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private GrabPoint closestPoint;

		[Token(Token = "0x40010E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Grabber grabberInTrigger;

		[Token(Token = "0x6000ED6")]
		[Address(RVA = "0x9F8820", Offset = "0x9F8820", VA = "0x9F8820")]
		private void Start()
		{
		}

		[Token(Token = "0x6000ED7")]
		[Address(RVA = "0x9F8B7C", Offset = "0x9F8B7C", VA = "0x9F8B7C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000ED8")]
		[Address(RVA = "0x9F9028", Offset = "0x9F9028", VA = "0x9F9028", Slot = "4")]
		public virtual void UpdateGrabPoint(GrabPoint newPoint)
		{
		}

		[Token(Token = "0x6000ED9")]
		[Address(RVA = "0x9F91C8", Offset = "0x9F91C8", VA = "0x9F91C8")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000EDA")]
		[Address(RVA = "0x9F9434", Offset = "0x9F9434", VA = "0x9F9434")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6000EDB")]
		[Address(RVA = "0x9F8FC8", Offset = "0x9F8FC8", VA = "0x9F8FC8")]
		private void setGrabber(Grabber theGrabber)
		{
		}

		[Token(Token = "0x6000EDC")]
		[Address(RVA = "0x9F9578", Offset = "0x9F9578", VA = "0x9F9578", Slot = "5")]
		public virtual void ReleaseGrabber()
		{
		}

		[Token(Token = "0x6000EDD")]
		[Address(RVA = "0x9F9658", Offset = "0x9F9658", VA = "0x9F9658")]
		public GrabPointTrigger()
		{
		}
	}
	[Token(Token = "0x200028E")]
	public class LineToTransform : MonoBehaviour
	{
		[Token(Token = "0x40010E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform ConnectTo;

		[Token(Token = "0x40010E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private LineRenderer line;

		[Token(Token = "0x6000EDE")]
		[Address(RVA = "0x9F9670", Offset = "0x9F9670", VA = "0x9F9670")]
		private void Start()
		{
		}

		[Token(Token = "0x6000EDF")]
		[Address(RVA = "0x9F9674", Offset = "0x9F9674", VA = "0x9F9674")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000EE0")]
		[Address(RVA = "0x9F9678", Offset = "0x9F9678", VA = "0x9F9678")]
		public void UpdateLine()
		{
		}

		[Token(Token = "0x6000EE1")]
		[Address(RVA = "0x9F982C", Offset = "0x9F982C", VA = "0x9F982C")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6000EE2")]
		[Address(RVA = "0x9F9830", Offset = "0x9F9830", VA = "0x9F9830")]
		public LineToTransform()
		{
		}
	}
	[Token(Token = "0x200028F")]
	public class LookAtTransform : MonoBehaviour
	{
		[Token(Token = "0x40010E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform LookAt;

		[Token(Token = "0x40010E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool UseLerp;

		[Token(Token = "0x40010EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float Speed;

		[Token(Token = "0x40010EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool UseUpdate;

		[Token(Token = "0x40010EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool UseLateUpdate;

		[Token(Token = "0x6000EE3")]
		[Address(RVA = "0x9F9838", Offset = "0x9F9838", VA = "0x9F9838")]
		private void Update()
		{
		}

		[Token(Token = "0x6000EE4")]
		[Address(RVA = "0x9F9A38", Offset = "0x9F9A38", VA = "0x9F9A38")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000EE5")]
		[Address(RVA = "0x9F9848", Offset = "0x9F9848", VA = "0x9F9848")]
		private void lookAt()
		{
		}

		[Token(Token = "0x6000EE6")]
		[Address(RVA = "0x9F9A48", Offset = "0x9F9A48", VA = "0x9F9A48")]
		public LookAtTransform()
		{
		}
	}
	[Token(Token = "0x2000290")]
	public class PlaySoundOnGrab : GrabbableEvents
	{
		[Token(Token = "0x40010ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AudioClip SoundToPlay;

		[Token(Token = "0x6000EE7")]
		[Address(RVA = "0x9F9A64", Offset = "0x9F9A64", VA = "0x9F9A64", Slot = "5")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x6000EE8")]
		[Address(RVA = "0x9F9B2C", Offset = "0x9F9B2C", VA = "0x9F9B2C")]
		public PlaySoundOnGrab()
		{
		}
	}
	[Token(Token = "0x2000291")]
	public class PunctureCollider : MonoBehaviour
	{
		[Token(Token = "0x40010EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Minimum distance (in meters) an object must be attached once punctured. Upon initial puncture the object will be inserted this distance from the puncture point.")]
		[Header("Puncture properties : ")]
		public float FRequiredPenetrationForce;

		[Token(Token = "0x40010EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Minimum distance (in meters) an object must be attached once punctured. Upon initial puncture the object will be inserted this distance from the puncture point.")]
		public float MinPenetration;

		[Token(Token = "0x40010F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Minimum distance the object can be penetrated (in meters).")]
		public float MaxPenetration;

		[Token(Token = "0x40010F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("How far away the object must be from it's entry point to consider breaking the joint. Set to 0 if you do not want to break the joint based on distance.")]
		public float BreakDistance;

		[Token(Token = "0x40010F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("How far away the object must be from it's entry point to consider breaking the joint. Set to 0 if you do not want to break the joint based on distance.")]
		public List<Collider> PunctureColliders;

		[Token(Token = "0x40010F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Shown for Debug : ")]
		[Tooltip("Is the object currently embedded in another object?")]
		public bool HasPunctured;

		[Token(Token = "0x40010F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The object currently embedded in")]
		public GameObject PuncturedObject;

		[Token(Token = "0x40010F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("How far (in meters) our object has been embedded into")]
		public float PunctureValue;

		[Token(Token = "0x40010F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float previousPunctureValue;

		[Token(Token = "0x40010F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Collider col;

		[Token(Token = "0x40010F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Collider hitCollilder;

		[Token(Token = "0x40010F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Collider[] ignoreColliders;

		[Token(Token = "0x40010FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Rigidbody rigid;

		[Token(Token = "0x40010FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject jointHelper;

		[Token(Token = "0x40010FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Rigidbody jointHelperRigid;

		[Token(Token = "0x40010FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private ConfigurableJoint jointHelperJoint;

		[Token(Token = "0x40010FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Grabbable thisGrabbable;

		[Token(Token = "0x40010FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private FixedJoint fj;

		[Token(Token = "0x4001100")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float yPuncture;

		[Token(Token = "0x4001101")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private float yPunctureMin;

		[Token(Token = "0x4001102")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float yPunctureMax;

		[Token(Token = "0x4001103")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public float TargetDistance;

		[Token(Token = "0x6000EE9")]
		[Address(RVA = "0x9F9B34", Offset = "0x9F9B34", VA = "0x9F9B34")]
		private void Start()
		{
		}

		[Token(Token = "0x6000EEA")]
		[Address(RVA = "0x9F9C14", Offset = "0x9F9C14", VA = "0x9F9C14")]
		public void FixedUpdate()
		{
		}

		[Token(Token = "0x6000EEB")]
		[Address(RVA = "0x9F9D88", Offset = "0x9F9D88", VA = "0x9F9D88", Slot = "4")]
		public virtual void UpdatePunctureValue()
		{
		}

		[Token(Token = "0x6000EEC")]
		[Address(RVA = "0x9F9F24", Offset = "0x9F9F24", VA = "0x9F9F24", Slot = "5")]
		public virtual void MovePunctureUp()
		{
		}

		[Token(Token = "0x6000EED")]
		[Address(RVA = "0x9F9FD4", Offset = "0x9F9FD4", VA = "0x9F9FD4", Slot = "6")]
		public virtual void MovePunctureDown()
		{
		}

		[Token(Token = "0x6000EEE")]
		[Address(RVA = "0x9FA084", Offset = "0x9FA084", VA = "0x9FA084", Slot = "7")]
		public virtual void CheckBreakDistance()
		{
		}

		[Token(Token = "0x6000EEF")]
		[Address(RVA = "0x9FA30C", Offset = "0x9FA30C", VA = "0x9FA30C", Slot = "8")]
		public virtual void CheckPunctureRelease()
		{
		}

		[Token(Token = "0x6000EF0")]
		[Address(RVA = "0x9FA3B4", Offset = "0x9FA3B4", VA = "0x9FA3B4", Slot = "9")]
		public virtual void AdjustJointMass()
		{
		}

		[Token(Token = "0x6000EF1")]
		[Address(RVA = "0x9FA4B8", Offset = "0x9FA4B8", VA = "0x9FA4B8", Slot = "10")]
		public virtual void ApplyResistanceForce()
		{
		}

		[Token(Token = "0x6000EF2")]
		[Address(RVA = "0x9FA5B4", Offset = "0x9FA5B4", VA = "0x9FA5B4", Slot = "11")]
		public virtual void DoPuncture(Collider colliderHit, Vector3 connectPosition)
		{
		}

		[Token(Token = "0x6000EF3")]
		[Address(RVA = "0x9FA9B8", Offset = "0x9FA9B8", VA = "0x9FA9B8")]
		public void SetPenetration(float penetrationAmount)
		{
		}

		[Token(Token = "0x6000EF4")]
		[Address(RVA = "0x9FA148", Offset = "0x9FA148", VA = "0x9FA148")]
		public void ReleasePuncture()
		{
		}

		[Token(Token = "0x6000EF5")]
		[Address(RVA = "0x9FAAC0", Offset = "0x9FAAC0", VA = "0x9FAAC0", Slot = "12")]
		public virtual bool CanPunctureObject(GameObject go)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EF6")]
		[Address(RVA = "0x9FAB84", Offset = "0x9FAB84", VA = "0x9FAB84")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6000EF7")]
		[Address(RVA = "0x9FAD60", Offset = "0x9FAD60", VA = "0x9FAD60")]
		public PunctureCollider()
		{
		}
	}
	[Token(Token = "0x2000292")]
	public class ReturnToSnapZone : MonoBehaviour
	{
		[Token(Token = "0x4001104")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The SnapZone to return to if not being held")]
		public SnapZone ReturnTo;

		[Token(Token = "0x4001105")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("How fast to Lerp Towards the SnapZone")]
		public float LerpSpeed;

		[Token(Token = "0x4001106")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("How long to wait before starting to Lerp the object back towards the SnapZone. In Seconds.")]
		public float ReturnDelay;

		[Token(Token = "0x4001107")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float currentDelay;

		[Token(Token = "0x4001108")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Grabbable grab;

		[Token(Token = "0x4001109")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Rigidbody rigid;

		[Token(Token = "0x400110A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool useGravityInitial;

		[Token(Token = "0x400110B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("Initiate snap if distance between the Grabbable and SnapZone is <= SnapDistance")]
		public float SnapDistance;

		[Token(Token = "0x6000EF8")]
		[Address(RVA = "0x9FAD74", Offset = "0x9FAD74", VA = "0x9FAD74")]
		private void Start()
		{
		}

		[Token(Token = "0x6000EF9")]
		[Address(RVA = "0x9FAE28", Offset = "0x9FAE28", VA = "0x9FAE28")]
		private void Update()
		{
		}

		[Token(Token = "0x6000EFA")]
		[Address(RVA = "0x9FAF4C", Offset = "0x9FAF4C", VA = "0x9FAF4C")]
		private void moveToSnapZone()
		{
		}

		[Token(Token = "0x6000EFB")]
		[Address(RVA = "0x9FB1E8", Offset = "0x9FB1E8", VA = "0x9FB1E8")]
		public ReturnToSnapZone()
		{
		}
	}
	[Token(Token = "0x2000293")]
	public class RotateTowards : MonoBehaviour
	{
		[Token(Token = "0x400110C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform TargetTransform;

		[Token(Token = "0x6000EFC")]
		[Address(RVA = "0x9FB208", Offset = "0x9FB208", VA = "0x9FB208")]
		private void Update()
		{
		}

		[Token(Token = "0x6000EFD")]
		[Address(RVA = "0x9FB2F0", Offset = "0x9FB2F0", VA = "0x9FB2F0")]
		public RotateTowards()
		{
		}
	}
	[Token(Token = "0x2000294")]
	public class RotateWithHMD : MonoBehaviour
	{
		[Token(Token = "0x400110D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The Transform to rotate along with")]
		public Transform FollowTransform;

		[Token(Token = "0x400110E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The Character Capsule to  rotate along with")]
		public CharacterController Character;

		[Token(Token = "0x400110F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 Offset;

		[Token(Token = "0x4001110")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float RotateSpeed;

		[Token(Token = "0x4001111")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float MovementSmoothing;

		[Token(Token = "0x4001112")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Vector3 velocity;

		[Token(Token = "0x4001113")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("If true this transform will be parented to the characterController. Set this to true if you want the position and rotation to align with the character controller without delay.")]
		public bool ParentToCharacter;

		[Token(Token = "0x4001114")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Transform originalParent;

		[Token(Token = "0x4001115")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform followTransform;

		[Token(Token = "0x4001116")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform camTransform;

		[Token(Token = "0x6000EFE")]
		[Address(RVA = "0x9FB2F8", Offset = "0x9FB2F8", VA = "0x9FB2F8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000EFF")]
		[Address(RVA = "0x9FB504", Offset = "0x9FB504", VA = "0x9FB504")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000F00")]
		[Address(RVA = "0x9FB508", Offset = "0x9FB508", VA = "0x9FB508")]
		private void UpdatePosition()
		{
		}

		[Token(Token = "0x6000F01")]
		[Address(RVA = "0x9FB910", Offset = "0x9FB910", VA = "0x9FB910")]
		public RotateWithHMD()
		{
		}
	}
	[Token(Token = "0x2000295")]
	public class ScaleBetweenPoints : MonoBehaviour
	{
		[Token(Token = "0x4001117")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform Begin;

		[Token(Token = "0x4001118")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform End;

		[Token(Token = "0x4001119")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool DoUpdate;

		[Token(Token = "0x400111A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool DoLateUpdate;

		[Token(Token = "0x400111B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		public bool LookAtTarget;

		[Token(Token = "0x6000F02")]
		[Address(RVA = "0x9FB97C", Offset = "0x9FB97C", VA = "0x9FB97C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F03")]
		[Address(RVA = "0x9FBB80", Offset = "0x9FBB80", VA = "0x9FBB80")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000F04")]
		[Address(RVA = "0x9FB98C", Offset = "0x9FB98C", VA = "0x9FB98C")]
		private void doScale()
		{
		}

		[Token(Token = "0x6000F05")]
		[Address(RVA = "0x9FBB90", Offset = "0x9FBB90", VA = "0x9FBB90")]
		public ScaleBetweenPoints()
		{
		}
	}
	[Token(Token = "0x2000296")]
	public class ScreenFader : MonoBehaviour
	{
		[Token(Token = "0x2000297")]
		[CompilerGenerated]
		private sealed class <fadeOutWithDelay>d__18 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001128")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001129")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400112A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float delaySeconds;

			[Token(Token = "0x400112B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public ScreenFader <>4__this;

			[Token(Token = "0x17000172")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000F16")]
				[Address(RVA = "0x9FC7D0", Offset = "0x9FC7D0", VA = "0x9FC7D0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000173")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000F18")]
				[Address(RVA = "0x9FC818", Offset = "0x9FC818", VA = "0x9FC818", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000F13")]
			[Address(RVA = "0x9FC284", Offset = "0x9FC284", VA = "0x9FC284")]
			[DebuggerHidden]
			public <fadeOutWithDelay>d__18(int <>1__state)
			{
			}

			[Token(Token = "0x6000F14")]
			[Address(RVA = "0x9FC70C", Offset = "0x9FC70C", VA = "0x9FC70C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000F15")]
			[Address(RVA = "0x9FC710", Offset = "0x9FC710", VA = "0x9FC710", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000F17")]
			[Address(RVA = "0x9FC7D8", Offset = "0x9FC7D8", VA = "0x9FC7D8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000298")]
		[CompilerGenerated]
		private sealed class <doFade>d__22 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400112C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400112D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400112E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float alphaFrom;

			[Token(Token = "0x400112F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public ScreenFader <>4__this;

			[Token(Token = "0x4001130")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float alphaTo;

			[Token(Token = "0x4001131")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <alpha>5__2;

			[Token(Token = "0x17000174")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000F1C")]
				[Address(RVA = "0x9FC9CC", Offset = "0x9FC9CC", VA = "0x9FC9CC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000175")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000F1E")]
				[Address(RVA = "0x9FCA14", Offset = "0x9FCA14", VA = "0x9FCA14", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000F19")]
			[Address(RVA = "0x9FC544", Offset = "0x9FC544", VA = "0x9FC544")]
			[DebuggerHidden]
			public <doFade>d__22(int <>1__state)
			{
			}

			[Token(Token = "0x6000F1A")]
			[Address(RVA = "0x9FC820", Offset = "0x9FC820", VA = "0x9FC820", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000F1B")]
			[Address(RVA = "0x9FC824", Offset = "0x9FC824", VA = "0x9FC824", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000F1D")]
			[Address(RVA = "0x9FC9D4", Offset = "0x9FC9D4", VA = "0x9FC9D4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400111C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Should the screen fade in when a new level is loaded")]
		public bool FadeOnSceneLoaded;

		[Token(Token = "0x400111D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Color of the fade. Alpha will be modified when fading in / out")]
		public Color FadeColor;

		[Token(Token = "0x400111E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("How fast to fade in / out")]
		public float FadeInSpeed;

		[Token(Token = "0x400111F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float FadeOutSpeed;

		[Token(Token = "0x4001120")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("Wait X seconds before fading scene in")]
		public float SceneFadeInDelay;

		[Token(Token = "0x4001121")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private GameObject fadeObject;

		[Token(Token = "0x4001122")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private RectTransform fadeObjectRect;

		[Token(Token = "0x4001123")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Canvas fadeCanvas;

		[Token(Token = "0x4001124")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private CanvasGroup canvasGroup;

		[Token(Token = "0x4001125")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Image fadeImage;

		[Token(Token = "0x4001126")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private IEnumerator fadeRoutine;

		[Token(Token = "0x4001127")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private string faderName;

		[Token(Token = "0x6000F06")]
		[Address(RVA = "0x9FBBA0", Offset = "0x9FBBA0", VA = "0x9FBBA0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000F07")]
		[Address(RVA = "0x9FBBAC", Offset = "0x9FBBAC", VA = "0x9FBBAC", Slot = "4")]
		protected virtual void initialize()
		{
		}

		[Token(Token = "0x6000F08")]
		[Address(RVA = "0x9FBFD8", Offset = "0x9FBFD8", VA = "0x9FBFD8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000F09")]
		[Address(RVA = "0x9FC07C", Offset = "0x9FC07C", VA = "0x9FC07C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000F0A")]
		[Address(RVA = "0x9FC120", Offset = "0x9FC120", VA = "0x9FC120")]
		private void OnSceneLoaded(Scene scene, LoadSceneMode mode)
		{
		}

		[Token(Token = "0x6000F0B")]
		[Address(RVA = "0x9FC24C", Offset = "0x9FC24C", VA = "0x9FC24C")]
		public void FadeInOut()
		{
		}

		[Token(Token = "0x6000F0C")]
		[Address(RVA = "0x9FC1C8", Offset = "0x9FC1C8", VA = "0x9FC1C8")]
		[IteratorStateMachine(typeof(<fadeOutWithDelay>d__18))]
		private IEnumerator fadeOutWithDelay(float delaySeconds)
		{
			return null;
		}

		[Token(Token = "0x6000F0D")]
		[Address(RVA = "0x9FC2AC", Offset = "0x9FC2AC", VA = "0x9FC2AC", Slot = "5")]
		public virtual void DoFadeIn()
		{
		}

		[Token(Token = "0x6000F0E")]
		[Address(RVA = "0x9FC400", Offset = "0x9FC400", VA = "0x9FC400", Slot = "6")]
		public virtual void DoFadeOut()
		{
		}

		[Token(Token = "0x6000F0F")]
		[Address(RVA = "0x9FC46C", Offset = "0x9FC46C", VA = "0x9FC46C", Slot = "7")]
		public virtual void SetFadeLevel(float fadeLevel)
		{
		}

		[Token(Token = "0x6000F10")]
		[Address(RVA = "0x9FC374", Offset = "0x9FC374", VA = "0x9FC374")]
		[IteratorStateMachine(typeof(<doFade>d__22))]
		private IEnumerator doFade(float alphaFrom, float alphaTo)
		{
			return null;
		}

		[Token(Token = "0x6000F11")]
		[Address(RVA = "0x9FC56C", Offset = "0x9FC56C", VA = "0x9FC56C", Slot = "8")]
		protected virtual void updateImageAlpha(float alphaValue)
		{
		}

		[Token(Token = "0x6000F12")]
		[Address(RVA = "0x9FC68C", Offset = "0x9FC68C", VA = "0x9FC68C")]
		public ScreenFader()
		{
		}
	}
	[Token(Token = "0x2000299")]
	public class SnapZoneRingHelper : MonoBehaviour
	{
		[Token(Token = "0x4001132")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SnapZone Snap;

		[Token(Token = "0x4001133")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Color RestingColor;

		[Token(Token = "0x4001134")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Color ValidSnapColor;

		[Token(Token = "0x4001135")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float RestingScale;

		[Token(Token = "0x4001136")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float ValidSnapScale;

		[Token(Token = "0x4001137")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private CanvasScaler ringCanvas;

		[Token(Token = "0x4001138")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Text ringText;

		[Token(Token = "0x4001139")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private GrabbablesInTrigger nearbyGrabbables;

		[Token(Token = "0x400113A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool validSnap;

		[Token(Token = "0x400113B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float ScaleSpeed;

		[Token(Token = "0x6000F1F")]
		[Address(RVA = "0x9FCA1C", Offset = "0x9FCA1C", VA = "0x9FCA1C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F20")]
		[Address(RVA = "0x9FCAE8", Offset = "0x9FCAE8", VA = "0x9FCAE8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F21")]
		[Address(RVA = "0x9FCBBC", Offset = "0x9FCBBC", VA = "0x9FCBBC")]
		private bool checkIsValidSnap()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F22")]
		[Address(RVA = "0x9FCC94", Offset = "0x9FCC94", VA = "0x9FCC94")]
		public SnapZoneRingHelper()
		{
		}
	}
	[Token(Token = "0x200029A")]
	public class Tooltip : MonoBehaviour
	{
		[Token(Token = "0x400113C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 TipOffset;

		[Token(Token = "0x400113D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool UseWorldYAxis;

		[Token(Token = "0x400113E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float MaxViewDistance;

		[Token(Token = "0x400113F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Transform childTransform;

		[Token(Token = "0x4001140")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform DrawLineTo;

		[Token(Token = "0x4001141")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private LineToTransform lineTo;

		[Token(Token = "0x4001142")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Transform lookAt;

		[Token(Token = "0x6000F23")]
		[Address(RVA = "0x9FCCC0", Offset = "0x9FCCC0", VA = "0x9FCCC0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F24")]
		[Address(RVA = "0x9FCDFC", Offset = "0x9FCDFC", VA = "0x9FCDFC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F25")]
		[Address(RVA = "0x9FCE08", Offset = "0x9FCE08", VA = "0x9FCE08", Slot = "4")]
		public virtual void UpdateTooltipPosition()
		{
		}

		[Token(Token = "0x6000F26")]
		[Address(RVA = "0x9FD150", Offset = "0x9FD150", VA = "0x9FD150")]
		public Tooltip()
		{
		}
	}
	[Token(Token = "0x200029B")]
	public class VelocityTracker : MonoBehaviour
	{
		[Token(Token = "0x200029C")]
		public enum VelocityTrackingType
		{
			[Token(Token = "0x4001150")]
			Device,
			[Token(Token = "0x4001151")]
			PerFrame
		}

		[Token(Token = "0x4001143")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("This setting determines how retrieve the velocity. If 'Device' is selected and ControllerHand is specified, then velocity will be retrieved from the connected physical controller. Otherwise velocity is calculated on a per frame basis.")]
		public VelocityTrackingType trackingType;

		[Token(Token = "0x4001144")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("If ControllerHand is specified as Left or Right then velocity will attempt to be retrieved from the physical controller. If None, velocity will be calculated per frame.")]
		public ControllerHand controllerHand;

		[Token(Token = "0x4001145")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("How many frames to use when averaging retrieving velocity using GetAveragedVelocity / GetAveragedAngularVelocity")]
		public float AverageVelocityCount;

		[Token(Token = "0x4001146")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Vector3 _velocity;

		[Token(Token = "0x4001147")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 _angularVelocity;

		[Token(Token = "0x4001148")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Vector3 _lastPosition;

		[Token(Token = "0x4001149")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Quaternion _lastRotation;

		[Token(Token = "0x400114A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private List<Vector3> previousVelocities;

		[Token(Token = "0x400114B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private List<Vector3> previousAngularVelocities;

		[Token(Token = "0x400114C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float angle;

		[Token(Token = "0x400114D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector3 axis;

		[Token(Token = "0x400114E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject playSpace;

		[Token(Token = "0x6000F27")]
		[Address(RVA = "0x9FD178", Offset = "0x9FD178", VA = "0x9FD178")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F28")]
		[Address(RVA = "0x9FD1D0", Offset = "0x9FD1D0", VA = "0x9FD1D0")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000F29")]
		[Address(RVA = "0x9FD230", Offset = "0x9FD230", VA = "0x9FD230", Slot = "4")]
		public virtual void UpdateVelocities()
		{
		}

		[Token(Token = "0x6000F2A")]
		[Address(RVA = "0x9FD258", Offset = "0x9FD258", VA = "0x9FD258", Slot = "5")]
		public virtual void UpdateVelocity()
		{
		}

		[Token(Token = "0x6000F2B")]
		[Address(RVA = "0x9FD3B4", Offset = "0x9FD3B4", VA = "0x9FD3B4", Slot = "6")]
		public virtual void UpdateAngularVelocity()
		{
		}

		[Token(Token = "0x6000F2C")]
		[Address(RVA = "0x9FD5E0", Offset = "0x9FD5E0", VA = "0x9FD5E0", Slot = "7")]
		public virtual Vector3 GetVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000F2D")]
		[Address(RVA = "0x9FD76C", Offset = "0x9FD76C", VA = "0x9FD76C", Slot = "8")]
		public virtual Vector3 GetAveragedVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000F2E")]
		[Address(RVA = "0x9FD77C", Offset = "0x9FD77C", VA = "0x9FD77C", Slot = "9")]
		public virtual Vector3 GetAngularVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000F2F")]
		[Address(RVA = "0x9FD788", Offset = "0x9FD788", VA = "0x9FD788", Slot = "10")]
		public virtual Vector3 GetAveragedAngularVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000F30")]
		[Address(RVA = "0x9FD798", Offset = "0x9FD798", VA = "0x9FD798", Slot = "11")]
		public virtual Vector3 GetAveragedVector(List<Vector3> vectors)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000F31")]
		[Address(RVA = "0x9FD8A0", Offset = "0x9FD8A0", VA = "0x9FD8A0")]
		public VelocityTracker()
		{
		}
	}
	[Token(Token = "0x200029D")]
	public enum LocomotionType
	{
		[Token(Token = "0x4001153")]
		Teleport,
		[Token(Token = "0x4001154")]
		SmoothLocomotion,
		[Token(Token = "0x4001155")]
		None
	}
	[Token(Token = "0x200029E")]
	public class BNGPlayerController : MonoBehaviour
	{
		[Token(Token = "0x4001156")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Camera Options : ")]
		[Tooltip("If true the CharacterController will move along with the HMD, as long as there are no obstacle's in the way")]
		public bool MoveCharacterWithCamera;

		[Token(Token = "0x4001157")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[Tooltip("If true the CharacterController will rotate it's Y angle to match the HMD's Y angle")]
		public bool RotateCharacterWithCamera;

		[Token(Token = "0x4001158")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		[Tooltip("If true the CharacterController will resize to match the calculated player height (distance from floor to camera)")]
		public bool ResizeCharacterHeightWithCamera;

		[Token(Token = "0x4001159")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Transform Setup ")]
		[Tooltip("The TrackingSpace represents your tracking space origin.")]
		public Transform TrackingSpace;

		[Token(Token = "0x400115A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The CameraRig is a Transform that is used to offset the main camera. The main camera should be parented to this.")]
		public Transform CameraRig;

		[Token(Token = "0x400115B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The CenterEyeAnchor is typically the Transform that contains your Main Camera")]
		public Transform CenterEyeAnchor;

		[Token(Token = "0x400115C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Ground checks : ")]
		[Tooltip("Raycast against these layers to check if player is grounded")]
		public LayerMask GroundedLayers;

		[Token(Token = "0x400115D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("How far off the ground the player currently is. 0 = Grounded, 1 = 1 Meter in the air.")]
		public float DistanceFromGround;

		[Token(Token = "0x400115E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("DistanceFromGround will subtract this value when determining distance from ground")]
		public float DistanceFromGroundOffset;

		[Token(Token = "0x400115F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Header("Player Capsule Settings : ")]
		[Tooltip("Minimum Height our Player's capsule collider can be (in meters)")]
		public float MinimumCapsuleHeight;

		[Token(Token = "0x4001160")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Maximum Height our Player's capsule collider can be (in meters)")]
		public float MaximumCapsuleHeight;

		[Token(Token = "0x4001161")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[HideInInspector]
		public float LastTeleportTime;

		[Token(Token = "0x4001162")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Player Y Offset : ")]
		[Tooltip("Offset the height of the CharacterController by this amount")]
		public float CharacterControllerYOffset;

		[Token(Token = "0x4001163")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[HideInInspector]
		public float CameraHeight;

		[Token(Token = "0x4001164")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Header("Misc : ")]
		[Tooltip("If true the Camera will be offset by ElevateCameraHeight if no HMD is active or connected. This prevents the camera from falling to the floor and can allow you to use keyboard controls.")]
		public bool ElevateCameraIfNoHMDPresent;

		[Token(Token = "0x4001165")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("How high (in meters) to elevate the player camera if no HMD is present and ElevateCameraIfNoHMDPresent is true. 1.65 = about 5.4' tall. ")]
		public float ElevateCameraHeight;

		[Token(Token = "0x4001166")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Minimum Y position our player is allowed to go. Useful for floating point precision and making sure player didn't fall through the map.")]
		public float MinElevation;

		[Token(Token = "0x4001167")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float MaxElevation;

		[Token(Token = "0x4001168")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[HideInInspector]
		public float LastPlayerMoveTime;

		[Token(Token = "0x4001169")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected CharacterController characterController;

		[Token(Token = "0x400116A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected Rigidbody playerRigid;

		[Token(Token = "0x400116B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected CapsuleCollider playerCapsule;

		[Token(Token = "0x400116C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected SmoothLocomotion smoothLocomotion;

		[Token(Token = "0x400116D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected PlayerClimbing playerClimbing;

		[Token(Token = "0x400116E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected bool isClimbing;

		[Token(Token = "0x400116F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x99")]
		protected bool wasClimbing;

		[Token(Token = "0x4001170")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public RaycastHit groundHit;

		[Token(Token = "0x4001171")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		protected RaycastHit hit;

		[Token(Token = "0x4001172")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		protected Transform mainCamera;

		[Token(Token = "0x4001173")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private Vector3 _initialPosition;

		[Token(Token = "0x4001174")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		public float SphereColliderRadius;

		[Token(Token = "0x4001175")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private Vector3 moveTest;

		[Token(Token = "0x6000F32")]
		[Address(RVA = "0x9FD964", Offset = "0x9FD964", VA = "0x9FD964")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F33")]
		[Address(RVA = "0x9FDB78", Offset = "0x9FDB78", VA = "0x9FDB78")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F34")]
		[Address(RVA = "0x9FDE28", Offset = "0x9FDE28", VA = "0x9FDE28")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000F35")]
		[Address(RVA = "0x9FDE50", Offset = "0x9FDE50", VA = "0x9FDE50", Slot = "4")]
		public virtual void CheckPlayerElevationRespawn()
		{
		}

		[Token(Token = "0x6000F36")]
		[Address(RVA = "0x9FE060", Offset = "0x9FE060", VA = "0x9FE060", Slot = "5")]
		public virtual void UpdateDistanceFromGround()
		{
		}

		[Token(Token = "0x6000F37")]
		[Address(RVA = "0x9FE6C8", Offset = "0x9FE6C8", VA = "0x9FE6C8", Slot = "6")]
		public virtual void RotateTrackingSpaceToCamera()
		{
		}

		[Token(Token = "0x6000F38")]
		[Address(RVA = "0x9FE888", Offset = "0x9FE888", VA = "0x9FE888", Slot = "7")]
		public virtual void UpdateCameraRigPosition()
		{
		}

		[Token(Token = "0x6000F39")]
		[Address(RVA = "0x9FEA74", Offset = "0x9FEA74", VA = "0x9FEA74", Slot = "8")]
		public virtual void UpdateCharacterHeight()
		{
		}

		[Token(Token = "0x6000F3A")]
		[Address(RVA = "0x9FED14", Offset = "0x9FED14", VA = "0x9FED14", Slot = "9")]
		public virtual void UpdateCameraHeight()
		{
		}

		[Token(Token = "0x6000F3B")]
		[Address(RVA = "0x9FED90", Offset = "0x9FED90", VA = "0x9FED90", Slot = "10")]
		public virtual void CheckCharacterCollisionMove()
		{
		}

		[Token(Token = "0x6000F3C")]
		[Address(RVA = "0x9FF01C", Offset = "0x9FF01C", VA = "0x9FF01C", Slot = "11")]
		public virtual void CheckRigidbodyCapsuleMove(Vector3 movePosition)
		{
		}

		[Token(Token = "0x6000F3D")]
		[Address(RVA = "0x9FF188", Offset = "0x9FF188", VA = "0x9FF188", Slot = "12")]
		public virtual bool IsGrounded()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F3E")]
		[Address(RVA = "0x9FF224", Offset = "0x9FF224", VA = "0x9FF224", Slot = "13")]
		public virtual void OnClimbingChange()
		{
		}

		[Token(Token = "0x6000F3F")]
		[Address(RVA = "0x9FF244", Offset = "0x9FF244", VA = "0x9FF244")]
		public BNGPlayerController()
		{
		}
	}
	[Token(Token = "0x200029F")]
	public class Button : MonoBehaviour
	{
		[Token(Token = "0x4001176")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The Local Y position of the button when it is pushed all the way down. Local Y position will never be less than this.")]
		public float MinLocalY;

		[Token(Token = "0x4001177")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("The Local Y position of the button when it is not being pushed. Local Y position will never be greater than this.")]
		public float MaxLocalY;

		[Token(Token = "0x4001178")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("How far away from MinLocalY / MaxLocalY to be considered a click")]
		public float ClickTolerance;

		[Token(Token = "0x4001179")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("If true the button can be pressed by physical object by utiizing a Spring Joint. Set to false if you don't need / want physics interactions, or are using this on a moving platform.")]
		public bool AllowPhysicsForces;

		[Token(Token = "0x400117A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<Grabber> grabbers;

		[Token(Token = "0x400117B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<UITrigger> uiTriggers;

		[Token(Token = "0x400117C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private SpringJoint joint;

		[Token(Token = "0x400117D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool clickingDown;

		[Token(Token = "0x400117E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public AudioClip ButtonClick;

		[Token(Token = "0x400117F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AudioClip ButtonClickUp;

		[Token(Token = "0x4001180")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public UnityEvent onButtonDown;

		[Token(Token = "0x4001181")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public UnityEvent onButtonUp;

		[Token(Token = "0x4001182")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public UnityEvent onButtonDownContinue;

		[Token(Token = "0x4001183")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private AudioSource audioSource;

		[Token(Token = "0x4001184")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Rigidbody rigid;

		[Token(Token = "0x4001185")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private bool isbtnDown;

		[Token(Token = "0x4001186")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private float ButtonSpeed;

		[Token(Token = "0x4001187")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float SpringForce;

		[Token(Token = "0x4001188")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private Vector3 buttonDownPosition;

		[Token(Token = "0x4001189")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3 buttonUpPosition;

		[Token(Token = "0x6000F40")]
		[Address(RVA = "0x9FF29C", Offset = "0x9FF29C", VA = "0x9FF29C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F41")]
		[Address(RVA = "0x9FF3E8", Offset = "0x9FF3E8", VA = "0x9FF3E8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F42")]
		[Address(RVA = "0x9FF7F4", Offset = "0x9FF7F4", VA = "0x9FF7F4", Slot = "4")]
		public virtual Vector3 GetButtonUpPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000F43")]
		[Address(RVA = "0x9FF84C", Offset = "0x9FF84C", VA = "0x9FF84C", Slot = "5")]
		public virtual Vector3 GetButtonDownPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000F44")]
		[Address(RVA = "0x9FF8A4", Offset = "0x9FF8A4", VA = "0x9FF8A4", Slot = "6")]
		public virtual void OnButtonDown()
		{
		}

		[Token(Token = "0x6000F45")]
		[Address(RVA = "0x9FF96C", Offset = "0x9FF96C", VA = "0x9FF96C", Slot = "7")]
		public virtual void OnButtonUp()
		{
		}

		[Token(Token = "0x6000F46")]
		[Address(RVA = "0x9FFA34", Offset = "0x9FFA34", VA = "0x9FFA34", Slot = "8")]
		public virtual void OnButtonDownContinue()
		{
		}

		[Token(Token = "0x6000F47")]
		[Address(RVA = "0x9FFA48", Offset = "0x9FFA48", VA = "0x9FFA48")]
		private void OnTriggerStay(Collider other)
		{
		}

		[Token(Token = "0x6000F48")]
		[Address(RVA = "0x9FFD5C", Offset = "0x9FFD5C", VA = "0x9FFD5C")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6000F49")]
		[Address(RVA = "0x9FFEFC", Offset = "0x9FFEFC", VA = "0x9FFEFC")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000F4A")]
		[Address(RVA = "0xA000C8", Offset = "0xA000C8", VA = "0xA000C8")]
		public Button()
		{
		}
	}
	[Token(Token = "0x20002A0")]
	public class ControllerModelSelector : MonoBehaviour
	{
		[Token(Token = "0x400118A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int disableIndex;

		[Token(Token = "0x400118B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private bool isQuitting;

		[Token(Token = "0x6000F4B")]
		[Address(RVA = "0xA011CC", Offset = "0xA011CC", VA = "0xA011CC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000F4C")]
		[Address(RVA = "0xA01348", Offset = "0xA01348", VA = "0xA01348")]
		public void UpdateControllerModel()
		{
		}

		[Token(Token = "0x6000F4D")]
		[Address(RVA = "0xA01628", Offset = "0xA01628", VA = "0xA01628")]
		public void EnableChildController(int childIndex)
		{
		}

		[Token(Token = "0x6000F4E")]
		[Address(RVA = "0xA016B8", Offset = "0xA016B8", VA = "0xA016B8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000F4F")]
		[Address(RVA = "0xA01848", Offset = "0xA01848", VA = "0xA01848")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x6000F50")]
		[Address(RVA = "0xA01854", Offset = "0xA01854", VA = "0xA01854")]
		public ControllerModelSelector()
		{
		}
	}
	[Token(Token = "0x20002A1")]
	public class Grabbable : MonoBehaviour
	{
		[Token(Token = "0x400118C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool BeingHeld;

		[Token(Token = "0x400118D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<Grabber> validGrabbers;

		[Token(Token = "0x400118E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected List<Grabber> heldByGrabbers;

		[Token(Token = "0x400118F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected bool wasKinematic;

		[Token(Token = "0x4001190")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		protected bool usedGravity;

		[Token(Token = "0x4001191")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		protected CollisionDetectionMode initialCollisionMode;

		[Token(Token = "0x4001192")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected RigidbodyInterpolation initialInterpolationMode;

		[Token(Token = "0x4001193")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		protected bool remoteGrabbing;

		[Token(Token = "0x4001194")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Configure which button is used to initiate the grab")]
		[Header("Grab Settings")]
		public GrabButton GrabButton;

		[Token(Token = "0x4001195")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("'Inherit' will inherit this setting from the Grabber. 'Hold' requires the user to hold the GrabButton down. 'Toggle' will drop / release the Grabbable on button activation.")]
		public HoldType Grabtype;

		[Token(Token = "0x4001196")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Kinematic Physics locks the object in place on the hand / grabber. Physics Joint and Velocity types allow collisions with the environment.")]
		public GrabPhysics GrabPhysics;

		[Token(Token = "0x4001197")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("Snap to a location or grab anywhere on the object")]
		public GrabType GrabMechanic;

		[Token(Token = "0x4001198")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("How fast to Lerp the object to the hand")]
		public float GrabSpeed;

		[Token(Token = "0x4001199")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Tooltip("Can the object be picked up from far away. Must be within RemoteGrabber Trigger")]
		[Header("Remote Grab")]
		public bool RemoteGrabbable;

		[Token(Token = "0x400119A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public RemoteGrabMovement RemoteGrabMechanic;

		[Token(Token = "0x400119B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("Max Distance Object can be Remote Grabbed. Not applicable if RemoteGrabbable is false")]
		public float RemoteGrabDistance;

		[Token(Token = "0x400119C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Multiply controller's velocity times this when throwing")]
		[Header("Throwing")]
		public float ThrowForceMultiplier;

		[Token(Token = "0x400119D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Tooltip("Multiply controller's angular velocity times this when throwing")]
		public float ThrowForceMultiplierAngular;

		[Token(Token = "0x400119E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Drop the item if object's center travels this far from the Grabber's Center (in meters). Set to 0 to disable distance break.")]
		public float BreakDistance;

		[Token(Token = "0x400119F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Tooltip("Enabling this will hide the Transform specified in the Grabber's HandGraphics property")]
		[Header("Hand Options")]
		public bool HideHandGraphics;

		[Token(Token = "0x40011A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6D")]
		[Tooltip("Parent this object to the hands for instantaneous movement. Object will travel 1:1 with the controller but may have trouble detecting fast moving collisions.")]
		public bool ParentToHands;

		[Token(Token = "0x40011A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6E")]
		[Tooltip("If true, the hand model will be attached to the grabbed object. This separates it from a 1:1 match with the controller, but may look more realistic.")]
		public bool ParentHandModel;

		[Token(Token = "0x40011A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6F")]
		[Tooltip("If true, the hand model will snap to the nearest GrabPoint. Otherwise the hand model will stay with the Grabber.")]
		public bool SnapHandModel;

		[Token(Token = "0x40011A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Header("Misc")]
		[Tooltip("Set to false to disable dropping. If false, will be permanently attached to whatever grabs this.")]
		public bool CanBeDropped;

		[Token(Token = "0x40011A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		[Tooltip("Can this object be snapped to snap zones? Set to false if you never want this to be snappable. Further filtering can be done on the SnapZones")]
		public bool CanBeSnappedToSnapZone;

		[Token(Token = "0x40011A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x72")]
		[Tooltip("If true, the object will always have kinematic disabled when dropped, even if it was initially kinematic.")]
		public bool ForceDisableKinematicOnDrop;

		[Token(Token = "0x40011A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x73")]
		[Tooltip("If true, the object will instantly position / rotate to the grabber instead of using velocity / force. This will only happen if no collisions have recently occurred. When using this method, the Grabbable's Rigidbody willbe instantly rotated / moved, taking in to account the interpolation settings. May clip through objects if moving fast enough.")]
		public bool InstantMovement;

		[Token(Token = "0x40011A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[Tooltip("If true, all child colliders will be considered Grabbable. If false, you will need to add the 'GrabbableChild' component to any child colliders that you wish to also be considered grabbable.")]
		public bool MakeChildCollidersGrabbable;

		[Token(Token = "0x40011A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Header("Default Hand Pose")]
		[Tooltip("A hand controller can read this value to determine how to animate when grabbing this object. 'AnimatorID' = specify an Animator ID to be set on the hand animator after grabbing this object. 'HandPose' = use a HandPose scriptable object. 'AutoPoseOnce' = DO an auto pose one time upon grabbing this object. 'AutoPoseContinuous' = Keep running attempting an autopose while grabbing this item.")]
		public HandPoseType handPoseType;

		[Token(Token = "0x40011A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		protected HandPoseType initialHandPoseType;

		[Token(Token = "0x40011AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("If HandPoseType = 'HandPose', this HandPose object will be applied to the hand on pickup")]
		public HandPose SelectedHandPose;

		[Token(Token = "0x40011AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected HandPose initialHandPose;

		[Token(Token = "0x40011AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("This HandPose Id will be passed to the Hand Animator when equipped. You can add new hand poses in the HandPoseDefinitions.cs file.")]
		public HandPoseId CustomHandPose;

		[Token(Token = "0x40011AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		protected HandPoseId initialHandPoseId;

		[Token(Token = "0x40011AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Header("Two-Handed Grab Behavior")]
		[Tooltip("What to do if another grabber grabs this while equipped.")]
		public OtherGrabBehavior SecondaryGrabBehavior;

		[Token(Token = "0x40011AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[Tooltip("How to behave when two hands are grabbing this object. LookAt = Have the primary Grabber 'LookAt' the secondary grabber. For example, holding a rifle in the right controller will have it rotate towards the left controller. AveragePositionRotation = Use a point and rotation in space that is half-way between both grabbers.")]
		public TwoHandedPositionType TwoHandedPosition;

		[Token(Token = "0x40011B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("How far to lerp between grabber positions. For example, 0.5 = halfway between the primary and secondary grabber. 0 = use the primary grabber's position, 1 = use the secondary grabber's position.")]
		[Range(0f, 1f)]
		public float TwoHandedPostionLerpAmount;

		[Token(Token = "0x40011B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[Tooltip("How to behave when two hands are grabbing this object. LookAt = Have the primary Grabber 'LookAt' the secondary grabber. For example, holding a rifle in the right controller will have it rotate towards the left controller. AveragePositionRotation = Use a point and rotation in space that is half-way between both grabbers.")]
		public TwoHandedRotationType TwoHandedRotation;

		[Token(Token = "0x40011B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("How far to lerp / slerp between grabber rotation. For example, 0.5 = halfway between the primary and secondary grabber. 0 = use the primary grabber's rotation, 1 = use the secondary grabber's position.")]
		[Range(0f, 1f)]
		public float TwoHandedRotationLerpAmount;

		[Token(Token = "0x40011B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[Tooltip("How to repond if you are holding an object with two hands, and then drop the primary grabber. For example, you may want to drop the object, transfer it to the second hand, or do nothing at all.")]
		public TwoHandedDropMechanic TwoHandedDropBehavior;

		[Token(Token = "0x40011B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Tooltip("Which vector to use when TwoHandedRotation = LookAtSecondary. Ex : Horizontal = A rifle type setup where you want to aim down the sites; Vertical = A melee type setup where the object is vertical")]
		public TwoHandedLookDirection TwoHandedLookVector;

		[Token(Token = "0x40011B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[Tooltip("How quickly to Lerp towards the SecondaryGrabbable if TwoHandedGrabBehavior = LookAt")]
		public float SecondHandLookSpeed;

		[Token(Token = "0x40011B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[Header("Secondary Grabbale Object")]
		[Tooltip("If specified, this object will be used as a secondary grabbable instead of relying on grab points on this object. If 'TwoHandedGrabBehavior' is specified as LookAt, this is the object the grabber will be rotated towards. If 'TwoHandedGrabBehavior' is specified as AveragePositionRotation, this is the object the grabber use to calculate position.")]
		public Grabbable SecondaryGrabbable;

		[Token(Token = "0x40011B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Header("Grab Restrictions")]
		[Tooltip("The Grabbable can only be grabbed if this grabbable is being held. Example : If you only want a weapon part to be grabbable if the weapon itself is being held.")]
		public Grabbable OtherGrabbableMustBeGrabbed;

		[Token(Token = "0x40011B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Tooltip("A higher Spring Force will make the Grabbable more rigid")]
		[Header("Physics Joint Settings")]
		public float CollisionSpring;

		[Token(Token = "0x40011B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[Tooltip("How much Slerp Force to apply to the joint when something is in contact with the grabbable")]
		public float CollisionSlerp;

		[Token(Token = "0x40011BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Tooltip("How to restrict the Configurable Joint's xMotion when colliding with an object. Position can be free, completely locked, or limited.")]
		public ConfigurableJointMotion CollisionLinearMotionX;

		[Token(Token = "0x40011BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		[Tooltip("How to restrict the Configurable Joint's yMotion when colliding with an object. Position can be free, completely locked, or limited.")]
		public ConfigurableJointMotion CollisionLinearMotionY;

		[Token(Token = "0x40011BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[Tooltip("How to restrict the Configurable Joint's zMotion when colliding with an object. Position can be free, completely locked, or limited.")]
		public ConfigurableJointMotion CollisionLinearMotionZ;

		[Token(Token = "0x40011BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[Tooltip("Restrict the rotation around the X axes to be Free, completely Locked, or Limited when colliding with an object.")]
		public ConfigurableJointMotion CollisionAngularMotionX;

		[Token(Token = "0x40011BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[Tooltip("Restrict the rotation around the Y axes to be Free, completely Locked, or Limited when colliding with an object.")]
		public ConfigurableJointMotion CollisionAngularMotionY;

		[Token(Token = "0x40011BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		[Tooltip("Restrict the rotation around Z axes to be Free, completely Locked, or Limited when colliding with an object.")]
		public ConfigurableJointMotion CollisionAngularMotionZ;

		[Token(Token = "0x40011C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[Tooltip("If true, the object's velocity will be adjusted to match the grabber. This is in addition to any forces added by the configurable joint.")]
		public bool ApplyCorrectiveForce;

		[Token(Token = "0x40011C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		[Header("Velocity Grab Settings")]
		public float MoveVelocityForce;

		[Token(Token = "0x40011C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public float MoveAngularVelocityForce;

		[Token(Token = "0x40011C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		[HideInInspector]
		public float LastGrabTime;

		[Token(Token = "0x40011C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[HideInInspector]
		public float LastDropTime;

		[Token(Token = "0x40011C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		[HideInInspector]
		public bool AddControllerVelocityOnDrop;

		[Token(Token = "0x40011C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private float journeyLength;

		[Token(Token = "0x40011C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[SerializeField]
		[Header("Shown for Debug : ")]
		public List<Collider> collisions;

		[Token(Token = "0x40011CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		protected Transform primaryGrabOffset;

		[Token(Token = "0x40011CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		protected Transform secondaryGrabOffset;

		[Token(Token = "0x40011CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[HideInInspector]
		public GrabPoint ActiveGrabPoint;

		[Token(Token = "0x40011CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		[HideInInspector]
		public Vector3 SecondaryLookOffset;

		[Token(Token = "0x40011D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		[HideInInspector]
		public Transform SecondaryLookAtTransform;

		[Token(Token = "0x40011D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		[HideInInspector]
		public Transform LocalOffsetTransform;

		[Token(Token = "0x40011D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private Transform _grabTransform;

		[Token(Token = "0x40011D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private Transform _grabTransformSecondary;

		[Token(Token = "0x40011D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		[Header("Grab Points")]
		[Tooltip("If Grab Mechanic is set to Snap, the closest GrabPoint will be used. Add a SnapPoint Component to a GrabPoint to specify custom hand poses and rotation.")]
		public List<Transform> GrabPoints;

		[Token(Token = "0x40011D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private bool _canBeMoved;

		[Token(Token = "0x40011D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		protected Transform originalParent;

		[Token(Token = "0x40011D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		protected InputBridge input;

		[Token(Token = "0x40011D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		protected ConfigurableJoint connectedJoint;

		[Token(Token = "0x40011D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		protected Vector3 previousPosition;

		[Token(Token = "0x40011DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
		protected float lastItemTeleportTime;

		[Token(Token = "0x40011DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		protected bool recentlyTeleported;

		[Token(Token = "0x40011DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A9")]
		[HideInInspector]
		public bool UseCustomInspector;

		[Token(Token = "0x40011DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		private BNGPlayerController _player;

		[Token(Token = "0x40011DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		protected Collider col;

		[Token(Token = "0x40011DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		protected Rigidbody rigid;

		[Token(Token = "0x40011E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		protected Grabber flyingTo;

		[Token(Token = "0x40011E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		protected List<GrabbableEvents> events;

		[Token(Token = "0x40011E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		protected bool didParentHands;

		[Token(Token = "0x40011E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D9")]
		private bool initiatedFlick;

		[Token(Token = "0x40011E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1DC")]
		private float flickStartVelocity;

		[Token(Token = "0x40011E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		private float FlickSpeed;

		[Token(Token = "0x40011E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E4")]
		public float lastFlickTime;

		[Token(Token = "0x40011E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		public float FlickForce;

		[Token(Token = "0x40011E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1EC")]
		private float angle;

		[Token(Token = "0x40011E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		private Vector3 axis;

		[Token(Token = "0x40011EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1FC")]
		private Vector3 angularTarget;

		[Token(Token = "0x40011EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		private Vector3 angularMovement;

		[Token(Token = "0x40011EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x214")]
		private bool subscribedToEvents;

		[Token(Token = "0x40011ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x215")]
		private bool grabbableIsLocked;

		[Token(Token = "0x40011EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		private Transform _priorParent;

		[Token(Token = "0x40011EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		private Vector3 _priorLocalOffsetPosition;

		[Token(Token = "0x40011F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22C")]
		private Quaternion _priorLocalOffsetRotation;

		[Token(Token = "0x40011F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		private Grabber _priorPrimaryGrabber;

		[Token(Token = "0x40011F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
		private bool lockPos;

		[Token(Token = "0x40011F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x249")]
		private bool lockRot;

		[Token(Token = "0x40011F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24C")]
		private int lockRequests;

		[Token(Token = "0x40011F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
		private bool quitting;

		[Token(Token = "0x17000176")]
		public bool BeingHeldWithTwoHands
		{
			[Token(Token = "0x6000F51")]
			[Address(RVA = "0xA0185C", Offset = "0xA0185C", VA = "0xA0185C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000177")]
		public List<Grabber> HeldByGrabbers
		{
			[Token(Token = "0x6000F52")]
			[Address(RVA = "0xA01918", Offset = "0xA01918", VA = "0xA01918")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000178")]
		public bool RemoteGrabbing
		{
			[Token(Token = "0x6000F53")]
			[Address(RVA = "0xA01920", Offset = "0xA01920", VA = "0xA01920")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000179")]
		public Vector3 OriginalScale
		{
			[Token(Token = "0x6000F54")]
			[Address(RVA = "0xA01928", Offset = "0xA01928", VA = "0xA01928")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000F55")]
			[Address(RVA = "0xA01938", Offset = "0xA01938", VA = "0xA01938")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700017A")]
		public float lastCollisionSeconds
		{
			[Token(Token = "0x6000F56")]
			[Address(RVA = "0xA01948", Offset = "0xA01948", VA = "0xA01948")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000F57")]
			[Address(RVA = "0xA01950", Offset = "0xA01950", VA = "0xA01950")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x1700017B")]
		public float lastNoCollisionSeconds
		{
			[Token(Token = "0x6000F58")]
			[Address(RVA = "0xA01958", Offset = "0xA01958", VA = "0xA01958")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000F59")]
			[Address(RVA = "0xA01960", Offset = "0xA01960", VA = "0xA01960")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x1700017C")]
		public bool RecentlyCollided
		{
			[Token(Token = "0x6000F5A")]
			[Address(RVA = "0xA01968", Offset = "0xA01968", VA = "0xA01968")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700017D")]
		public float requestSpringTime
		{
			[Token(Token = "0x6000F5B")]
			[Address(RVA = "0xA019E0", Offset = "0xA019E0", VA = "0xA019E0")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000F5C")]
			[Address(RVA = "0xA019E8", Offset = "0xA019E8", VA = "0xA019E8")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x1700017E")]
		private Vector3 grabPosition
		{
			[Token(Token = "0x6000F5D")]
			[Address(RVA = "0xA019F0", Offset = "0xA019F0", VA = "0xA019F0")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700017F")]
		[HideInInspector]
		public Vector3 GrabPositionOffset
		{
			[Token(Token = "0x6000F5E")]
			[Address(RVA = "0xA01A78", Offset = "0xA01A78", VA = "0xA01A78")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000180")]
		[HideInInspector]
		public Vector3 GrabRotationOffset
		{
			[Token(Token = "0x6000F5F")]
			[Address(RVA = "0xA01B38", Offset = "0xA01B38", VA = "0xA01B38")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000181")]
		public Transform grabTransform
		{
			[Token(Token = "0x6000F60")]
			[Address(RVA = "0xA01BF8", Offset = "0xA01BF8", VA = "0xA01BF8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000182")]
		public Transform grabTransformSecondary
		{
			[Token(Token = "0x6000F61")]
			[Address(RVA = "0xA01D4C", Offset = "0xA01D4C", VA = "0xA01D4C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000183")]
		public bool CanBeMoved
		{
			[Token(Token = "0x6000F62")]
			[Address(RVA = "0xA01EB4", Offset = "0xA01EB4", VA = "0xA01EB4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000184")]
		protected BNGPlayerController player
		{
			[Token(Token = "0x6000F63")]
			[Address(RVA = "0xA01EBC", Offset = "0xA01EBC", VA = "0xA01EBC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000185")]
		public Grabber FlyingToGrabber
		{
			[Token(Token = "0x6000F64")]
			[Address(RVA = "0xA01ECC", Offset = "0xA01ECC", VA = "0xA01ECC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000186")]
		public bool DidParentHands
		{
			[Token(Token = "0x6000F65")]
			[Address(RVA = "0xA01ED4", Offset = "0xA01ED4", VA = "0xA01ED4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000F66")]
		[Address(RVA = "0xA01EDC", Offset = "0xA01EDC", VA = "0xA01EDC")]
		protected void Awake()
		{
		}

		[Token(Token = "0x6000F67")]
		[Address(RVA = "0xA0249C", Offset = "0xA0249C", VA = "0xA0249C", Slot = "4")]
		public virtual void Update()
		{
		}

		[Token(Token = "0x6000F68")]
		[Address(RVA = "0xA038F8", Offset = "0xA038F8", VA = "0xA038F8", Slot = "5")]
		public virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6000F69")]
		[Address(RVA = "0xA03A2C", Offset = "0xA03A2C", VA = "0xA03A2C", Slot = "6")]
		public virtual Vector3 GetGrabberWithGrabPointOffset(Grabber grabber, Transform grabPoint)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000F6A")]
		[Address(RVA = "0xA03B9C", Offset = "0xA03B9C", VA = "0xA03B9C", Slot = "7")]
		public virtual Quaternion GetGrabberWithOffsetWorldRotation(Grabber grabber)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000F6B")]
		[Address(RVA = "0xA03270", Offset = "0xA03270", VA = "0xA03270")]
		protected void positionHandGraphics(Grabber g)
		{
		}

		[Token(Token = "0x6000F6C")]
		[Address(RVA = "0xA03C5C", Offset = "0xA03C5C", VA = "0xA03C5C", Slot = "8")]
		public virtual bool IsGrabbable()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F6D")]
		[Address(RVA = "0xA03D34", Offset = "0xA03D34", VA = "0xA03D34", Slot = "9")]
		public virtual void UpdateRemoteGrab()
		{
		}

		[Token(Token = "0x6000F6E")]
		[Address(RVA = "0xA03D78", Offset = "0xA03D78", VA = "0xA03D78", Slot = "10")]
		public virtual void CheckRemoteGrabLinear()
		{
		}

		[Token(Token = "0x6000F6F")]
		[Address(RVA = "0xA04660", Offset = "0xA04660", VA = "0xA04660", Slot = "11")]
		public virtual void CheckRemoteGrabVelocity()
		{
		}

		[Token(Token = "0x6000F70")]
		[Address(RVA = "0xA051B8", Offset = "0xA051B8", VA = "0xA051B8", Slot = "12")]
		public virtual void InitiateFlick()
		{
		}

		[Token(Token = "0x6000F71")]
		[Address(RVA = "0xA0536C", Offset = "0xA0536C", VA = "0xA0536C")]
		public Vector3 GetVelocityToHitTargetByTime(Vector3 startPosition, Vector3 targetPosition, Vector3 gravityBase, float timeToTarget)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000F72")]
		[Address(RVA = "0xA0580C", Offset = "0xA0580C", VA = "0xA0580C", Slot = "13")]
		public virtual void CheckRemoteGrabFlick()
		{
		}

		[Token(Token = "0x6000F73")]
		[Address(RVA = "0xA059E4", Offset = "0xA059E4", VA = "0xA059E4", Slot = "14")]
		public virtual void UpdateFixedJoints()
		{
		}

		[Token(Token = "0x6000F74")]
		[Address(RVA = "0xA05D60", Offset = "0xA05D60", VA = "0xA05D60", Slot = "15")]
		public virtual void UpdatePhysicsJoints()
		{
		}

		[Token(Token = "0x6000F75")]
		[Address(RVA = "0xA061B0", Offset = "0xA061B0", VA = "0xA061B0")]
		private void setPositionSpring(float spring, float damper)
		{
		}

		[Token(Token = "0x6000F76")]
		[Address(RVA = "0xA0633C", Offset = "0xA0633C", VA = "0xA0633C")]
		private void setSlerpDrive(float slerp, float damper)
		{
		}

		[Token(Token = "0x6000F77")]
		[Address(RVA = "0xA06414", Offset = "0xA06414", VA = "0xA06414", Slot = "16")]
		public virtual Vector3 GetGrabberVector3(Grabber grabber, bool isSecondary)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000F78")]
		[Address(RVA = "0xA06468", Offset = "0xA06468", VA = "0xA06468", Slot = "17")]
		public virtual Quaternion GetGrabberQuaternion(Grabber grabber, bool isSecondary)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000F79")]
		[Address(RVA = "0xA05AA0", Offset = "0xA05AA0", VA = "0xA05AA0")]
		private void moveWithVelocity()
		{
		}

		[Token(Token = "0x6000F7A")]
		[Address(RVA = "0xA06650", Offset = "0xA06650", VA = "0xA06650")]
		private void rotateWithVelocity()
		{
		}

		[Token(Token = "0x6000F7B")]
		[Address(RVA = "0xA064A8", Offset = "0xA064A8", VA = "0xA064A8")]
		public Vector3 GetGrabbersAveragedPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000F7C")]
		[Address(RVA = "0xA04AB0", Offset = "0xA04AB0", VA = "0xA04AB0")]
		public Quaternion GetGrabbersAveragedRotation()
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000F7D")]
		[Address(RVA = "0xA06B30", Offset = "0xA06B30", VA = "0xA06B30", Slot = "18")]
		public virtual void UpdateKinematicPhysics()
		{
		}

		[Token(Token = "0x6000F7E")]
		[Address(RVA = "0xA07194", Offset = "0xA07194", VA = "0xA07194", Slot = "19")]
		public virtual void UpdateVelocityPhysics()
		{
		}

		[Token(Token = "0x6000F7F")]
		[Address(RVA = "0xA02FB8", Offset = "0xA02FB8", VA = "0xA02FB8")]
		private void checkParentHands(Grabber g)
		{
		}

		[Token(Token = "0x6000F80")]
		[Address(RVA = "0xA023B0", Offset = "0xA023B0", VA = "0xA023B0")]
		private bool canBeMoved()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F81")]
		[Address(RVA = "0xA03364", Offset = "0xA03364", VA = "0xA03364")]
		private void checkSecondaryLook()
		{
		}

		[Token(Token = "0x6000F82")]
		[Address(RVA = "0xA06FCC", Offset = "0xA06FCC", VA = "0xA06FCC")]
		private void rotateGrabber(bool lerp = false)
		{
		}

		[Token(Token = "0x6000F83")]
		[Address(RVA = "0xA074CC", Offset = "0xA074CC", VA = "0xA074CC")]
		public Transform GetGrabPoint()
		{
			return null;
		}

		[Token(Token = "0x6000F84")]
		[Address(RVA = "0xA074D4", Offset = "0xA074D4", VA = "0xA074D4", Slot = "20")]
		public virtual void GrabItem(Grabber grabbedBy)
		{
		}

		[Token(Token = "0x6000F85")]
		[Address(RVA = "0xA07FB8", Offset = "0xA07FB8", VA = "0xA07FB8", Slot = "21")]
		protected virtual void setupConfigJointGrab(Grabber grabbedBy, GrabType grabType)
		{
		}

		[Token(Token = "0x6000F86")]
		[Address(RVA = "0xA081C8", Offset = "0xA081C8", VA = "0xA081C8", Slot = "22")]
		protected virtual void setupFixedJointGrab(Grabber grabbedBy, GrabType grabType)
		{
		}

		[Token(Token = "0x6000F87")]
		[Address(RVA = "0xA082D8", Offset = "0xA082D8", VA = "0xA082D8", Slot = "23")]
		protected virtual void setupKinematicGrab(Grabber grabbedBy, GrabType grabType)
		{
		}

		[Token(Token = "0x6000F88")]
		[Address(RVA = "0xA083E4", Offset = "0xA083E4", VA = "0xA083E4", Slot = "24")]
		protected virtual void setupVelocityGrab(Grabber grabbedBy, GrabType grabType)
		{
		}

		[Token(Token = "0x6000F89")]
		[Address(RVA = "0xA08430", Offset = "0xA08430", VA = "0xA08430", Slot = "25")]
		public virtual void GrabRemoteItem(Grabber grabbedBy)
		{
		}

		[Token(Token = "0x6000F8A")]
		[Address(RVA = "0xA0853C", Offset = "0xA0853C", VA = "0xA0853C", Slot = "26")]
		public virtual void ResetGrabbing()
		{
		}

		[Token(Token = "0x6000F8B")]
		[Address(RVA = "0xA08618", Offset = "0xA08618", VA = "0xA08618", Slot = "27")]
		public virtual void DropItem(Grabber droppedBy, bool resetVelocity, bool resetParent)
		{
		}

		[Token(Token = "0x6000F8C")]
		[Address(RVA = "0xA073DC", Offset = "0xA073DC", VA = "0xA073DC")]
		private void clearLookAtTransform()
		{
		}

		[Token(Token = "0x6000F8D")]
		[Address(RVA = "0xA02AA4", Offset = "0xA02AA4", VA = "0xA02AA4")]
		private void callEvents(Grabber g)
		{
		}

		[Token(Token = "0x6000F8E")]
		[Address(RVA = "0xA0910C", Offset = "0xA0910C", VA = "0xA0910C", Slot = "28")]
		public virtual void DropItem(Grabber droppedBy)
		{
		}

		[Token(Token = "0x6000F8F")]
		[Address(RVA = "0xA09124", Offset = "0xA09124", VA = "0xA09124", Slot = "29")]
		public virtual void DropItem(bool resetVelocity, bool resetParent)
		{
		}

		[Token(Token = "0x6000F90")]
		[Address(RVA = "0xA09174", Offset = "0xA09174", VA = "0xA09174")]
		public void ResetScale()
		{
		}

		[Token(Token = "0x6000F91")]
		[Address(RVA = "0xA08E08", Offset = "0xA08E08", VA = "0xA08E08")]
		public void ResetParent()
		{
		}

		[Token(Token = "0x6000F92")]
		[Address(RVA = "0xA09178", Offset = "0xA09178", VA = "0xA09178")]
		public void UpdateOriginalParent(Transform newOriginalParent)
		{
		}

		[Token(Token = "0x6000F93")]
		[Address(RVA = "0xA09188", Offset = "0xA09188", VA = "0xA09188")]
		public void UpdateOriginalParent()
		{
		}

		[Token(Token = "0x6000F94")]
		[Address(RVA = "0xA091BC", Offset = "0xA091BC", VA = "0xA091BC")]
		public ControllerHand GetControllerHand(Grabber g)
		{
			return default(ControllerHand);
		}

		[Token(Token = "0x6000F95")]
		[Address(RVA = "0xA09234", Offset = "0xA09234", VA = "0xA09234", Slot = "30")]
		public virtual Grabber GetPrimaryGrabber()
		{
			return null;
		}

		[Token(Token = "0x6000F96")]
		[Address(RVA = "0xA09368", Offset = "0xA09368", VA = "0xA09368", Slot = "31")]
		public virtual Grabber GetClosestGrabber()
		{
			return null;
		}

		[Token(Token = "0x6000F97")]
		[Address(RVA = "0xA09514", Offset = "0xA09514", VA = "0xA09514", Slot = "32")]
		public virtual Transform GetClosestGrabPoint(Grabber grabber)
		{
			return null;
		}

		[Token(Token = "0x6000F98")]
		[Address(RVA = "0xA09844", Offset = "0xA09844", VA = "0xA09844", Slot = "33")]
		public virtual void Release(Vector3 velocity, Vector3 angularVelocity)
		{
		}

		[Token(Token = "0x6000F99")]
		[Address(RVA = "0xA09984", Offset = "0xA09984", VA = "0xA09984", Slot = "34")]
		public virtual bool IsValidCollision(Collision collision)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F9A")]
		[Address(RVA = "0xA099BC", Offset = "0xA099BC", VA = "0xA099BC", Slot = "35")]
		public virtual bool IsValidCollision(Collider col)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F9B")]
		[Address(RVA = "0xA09B54", Offset = "0xA09B54", VA = "0xA09B54", Slot = "36")]
		public virtual void parentHandGraphics(Grabber g)
		{
		}

		[Token(Token = "0x6000F9C")]
		[Address(RVA = "0xA080D0", Offset = "0xA080D0", VA = "0xA080D0")]
		private void setupConfigJoint(Grabber g)
		{
		}

		[Token(Token = "0x6000F9D")]
		[Address(RVA = "0xA08E30", Offset = "0xA08E30", VA = "0xA08E30")]
		private void removeConfigJoint()
		{
		}

		[Token(Token = "0x6000F9E")]
		[Address(RVA = "0xA07E78", Offset = "0xA07E78", VA = "0xA07E78")]
		private void addGrabber(Grabber g)
		{
		}

		[Token(Token = "0x6000F9F")]
		[Address(RVA = "0xA08F04", Offset = "0xA08F04", VA = "0xA08F04")]
		private void removeGrabber(Grabber g)
		{
		}

		[Token(Token = "0x6000FA0")]
		[Address(RVA = "0xA044B4", Offset = "0xA044B4", VA = "0xA044B4")]
		private void movePosition(Vector3 worldPosition)
		{
		}

		[Token(Token = "0x6000FA1")]
		[Address(RVA = "0xA04584", Offset = "0xA04584", VA = "0xA04584")]
		private void moveRotation(Quaternion worldRotation)
		{
		}

		[Token(Token = "0x6000FA2")]
		[Address(RVA = "0xA06F8C", Offset = "0xA06F8C", VA = "0xA06F8C")]
		protected Vector3 getRemotePosition(Grabber toGrabber)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000FA3")]
		[Address(RVA = "0xA04280", Offset = "0xA04280", VA = "0xA04280")]
		protected Quaternion getRemoteRotation(Grabber grabber)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000FA4")]
		[Address(RVA = "0xA02930", Offset = "0xA02930", VA = "0xA02930")]
		private void filterCollisions()
		{
		}

		[Token(Token = "0x6000FA5")]
		[Address(RVA = "0xA09C48", Offset = "0xA09C48", VA = "0xA09C48", Slot = "37")]
		public virtual BNGPlayerController GetBNGPlayerController()
		{
			return null;
		}

		[Token(Token = "0x6000FA6")]
		[Address(RVA = "0xA09D84", Offset = "0xA09D84", VA = "0xA09D84", Slot = "38")]
		public virtual void RequestSpringTime(float seconds)
		{
		}

		[Token(Token = "0x6000FA7")]
		[Address(RVA = "0xA09DBC", Offset = "0xA09DBC", VA = "0xA09DBC", Slot = "39")]
		public virtual void AddValidGrabber(Grabber grabber)
		{
		}

		[Token(Token = "0x6000FA8")]
		[Address(RVA = "0xA09EFC", Offset = "0xA09EFC", VA = "0xA09EFC", Slot = "40")]
		public virtual void RemoveValidGrabber(Grabber grabber)
		{
		}

		[Token(Token = "0x6000FA9")]
		[Address(RVA = "0xA09F8C", Offset = "0xA09F8C", VA = "0xA09F8C", Slot = "41")]
		public virtual void SubscribeToMoveEvents()
		{
		}

		[Token(Token = "0x6000FAA")]
		[Address(RVA = "0xA0A21C", Offset = "0xA0A21C", VA = "0xA0A21C", Slot = "42")]
		public virtual void UnsubscribeFromMoveEvents()
		{
		}

		[Token(Token = "0x6000FAB")]
		[Address(RVA = "0xA0A498", Offset = "0xA0A498", VA = "0xA0A498", Slot = "43")]
		public virtual void LockGrabbable()
		{
		}

		[Token(Token = "0x6000FAC")]
		[Address(RVA = "0xA0A4B4", Offset = "0xA0A4B4", VA = "0xA0A4B4", Slot = "44")]
		public virtual void LockGrabbableWithRotation()
		{
		}

		[Token(Token = "0x6000FAD")]
		[Address(RVA = "0xA0A4D0", Offset = "0xA0A4D0", VA = "0xA0A4D0", Slot = "45")]
		public virtual void RequestLockGrabbable()
		{
		}

		[Token(Token = "0x6000FAE")]
		[Address(RVA = "0xA0A694", Offset = "0xA0A694", VA = "0xA0A694", Slot = "46")]
		public virtual void RequestUnlockGrabbable()
		{
		}

		[Token(Token = "0x6000FAF")]
		[Address(RVA = "0xA0A6C4", Offset = "0xA0A6C4", VA = "0xA0A6C4", Slot = "47")]
		public virtual void ResetLockResets()
		{
		}

		[Token(Token = "0x6000FB0")]
		[Address(RVA = "0xA0A77C", Offset = "0xA0A77C", VA = "0xA0A77C", Slot = "48")]
		public virtual void LockGrabbable(bool lockPosition, bool lockRotation, bool overridePriorLock)
		{
		}

		[Token(Token = "0x6000FB1")]
		[Address(RVA = "0xA0A9B8", Offset = "0xA0A9B8", VA = "0xA0A9B8", Slot = "49")]
		public virtual void UnlockGrabbable()
		{
		}

		[Token(Token = "0x6000FB2")]
		[Address(RVA = "0xA0AD64", Offset = "0xA0AD64", VA = "0xA0AD64")]
		private void OnCollisionStay(Collision collision)
		{
		}

		[Token(Token = "0x6000FB3")]
		[Address(RVA = "0xA0AF2C", Offset = "0xA0AF2C", VA = "0xA0AF2C")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6000FB4")]
		[Address(RVA = "0xA0B054", Offset = "0xA0B054", VA = "0xA0B054")]
		private void OnCollisionExit(Collision collision)
		{
		}

		[Token(Token = "0x6000FB5")]
		[Address(RVA = "0xA0B110", Offset = "0xA0B110", VA = "0xA0B110")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x6000FB6")]
		[Address(RVA = "0xA0B11C", Offset = "0xA0B11C", VA = "0xA0B11C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000FB7")]
		[Address(RVA = "0xA0B148", Offset = "0xA0B148", VA = "0xA0B148")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000FB8")]
		[Address(RVA = "0xA0B298", Offset = "0xA0B298", VA = "0xA0B298")]
		public Grabbable()
		{
		}
	}
	[Token(Token = "0x20002A2")]
	public enum GrabType
	{
		[Token(Token = "0x40011F7")]
		Snap,
		[Token(Token = "0x40011F8")]
		Precise
	}
	[Token(Token = "0x20002A3")]
	public enum RemoteGrabMovement
	{
		[Token(Token = "0x40011FA")]
		Linear,
		[Token(Token = "0x40011FB")]
		Velocity,
		[Token(Token = "0x40011FC")]
		Flick
	}
	[Token(Token = "0x20002A4")]
	public enum GrabPhysics
	{
		[Token(Token = "0x40011FE")]
		None = 2,
		[Token(Token = "0x40011FF")]
		PhysicsJoint = 0,
		[Token(Token = "0x4001200")]
		FixedJoint = 3,
		[Token(Token = "0x4001201")]
		Velocity = 4,
		[Token(Token = "0x4001202")]
		Kinematic = 1
	}
	[Token(Token = "0x20002A5")]
	public enum OtherGrabBehavior
	{
		[Token(Token = "0x4001204")]
		None,
		[Token(Token = "0x4001205")]
		SwapHands,
		[Token(Token = "0x4001206")]
		DualGrab
	}
	[Token(Token = "0x20002A6")]
	public enum TwoHandedPositionType
	{
		[Token(Token = "0x4001208")]
		Lerp,
		[Token(Token = "0x4001209")]
		None
	}
	[Token(Token = "0x20002A7")]
	public enum TwoHandedRotationType
	{
		[Token(Token = "0x400120B")]
		Lerp,
		[Token(Token = "0x400120C")]
		Slerp,
		[Token(Token = "0x400120D")]
		LookAtSecondary,
		[Token(Token = "0x400120E")]
		None
	}
	[Token(Token = "0x20002A8")]
	public enum TwoHandedDropMechanic
	{
		[Token(Token = "0x4001210")]
		Drop,
		[Token(Token = "0x4001211")]
		Transfer,
		[Token(Token = "0x4001212")]
		None
	}
	[Token(Token = "0x20002A9")]
	public enum TwoHandedLookDirection
	{
		[Token(Token = "0x4001214")]
		Horizontal,
		[Token(Token = "0x4001215")]
		Vertical
	}
	[Token(Token = "0x20002AA")]
	public enum HandPoseType
	{
		[Token(Token = "0x4001217")]
		AnimatorID,
		[Token(Token = "0x4001218")]
		HandPose,
		[Token(Token = "0x4001219")]
		AutoPoseOnce,
		[Token(Token = "0x400121A")]
		AutoPoseContinuous,
		[Token(Token = "0x400121B")]
		None
	}
	[Token(Token = "0x20002AB")]
	public class GrabbableChild : MonoBehaviour
	{
		[Token(Token = "0x400121C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The Parent Grabbable Object to be grabbed.")]
		public Grabbable ParentGrabbable;

		[Token(Token = "0x6000FB9")]
		[Address(RVA = "0xA0B33C", Offset = "0xA0B33C", VA = "0xA0B33C")]
		public GrabbableChild()
		{
		}
	}
	[Token(Token = "0x20002AC")]
	[RequireComponent(typeof(Grabbable))]
	public abstract class GrabbableEvents : MonoBehaviour
	{
		[Token(Token = "0x400121D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected Grabbable grab;

		[Token(Token = "0x400121E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected Grabber thisGrabber;

		[Token(Token = "0x400121F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected InputBridge input;

		[Token(Token = "0x6000FBA")]
		[Address(RVA = "0xA0B344", Offset = "0xA0B344", VA = "0xA0B344", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000FBB")]
		[Address(RVA = "0xA0B3DC", Offset = "0xA0B3DC", VA = "0xA0B3DC", Slot = "5")]
		public virtual void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x6000FBC")]
		[Address(RVA = "0xA0B3E4", Offset = "0xA0B3E4", VA = "0xA0B3E4", Slot = "6")]
		public virtual void OnRelease()
		{
		}

		[Token(Token = "0x6000FBD")]
		[Address(RVA = "0xA0B3E8", Offset = "0xA0B3E8", VA = "0xA0B3E8", Slot = "7")]
		public virtual void OnBecomesClosestGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6000FBE")]
		[Address(RVA = "0xA0B3EC", Offset = "0xA0B3EC", VA = "0xA0B3EC", Slot = "8")]
		public virtual void OnBecomesClosestGrabbable(Grabber touchingGrabber)
		{
		}

		[Token(Token = "0x6000FBF")]
		[Address(RVA = "0xA0B3F0", Offset = "0xA0B3F0", VA = "0xA0B3F0", Slot = "9")]
		public virtual void OnNoLongerClosestGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6000FC0")]
		[Address(RVA = "0xA0B3F4", Offset = "0xA0B3F4", VA = "0xA0B3F4", Slot = "10")]
		public virtual void OnNoLongerClosestGrabbable(Grabber touchingGrabber)
		{
		}

		[Token(Token = "0x6000FC1")]
		[Address(RVA = "0xA0B3F8", Offset = "0xA0B3F8", VA = "0xA0B3F8", Slot = "11")]
		public virtual void OnBecomesClosestRemoteGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6000FC2")]
		[Address(RVA = "0xA0B3FC", Offset = "0xA0B3FC", VA = "0xA0B3FC", Slot = "12")]
		public virtual void OnBecomesClosestRemoteGrabbable(Grabber theGrabber)
		{
		}

		[Token(Token = "0x6000FC3")]
		[Address(RVA = "0xA0B400", Offset = "0xA0B400", VA = "0xA0B400", Slot = "13")]
		public virtual void OnNoLongerClosestRemoteGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6000FC4")]
		[Address(RVA = "0xA0B404", Offset = "0xA0B404", VA = "0xA0B404", Slot = "14")]
		public virtual void OnNoLongerClosestRemoteGrabbable(Grabber theGrabber)
		{
		}

		[Token(Token = "0x6000FC5")]
		[Address(RVA = "0xA0B408", Offset = "0xA0B408", VA = "0xA0B408", Slot = "15")]
		public virtual void OnGrip(float gripValue)
		{
		}

		[Token(Token = "0x6000FC6")]
		[Address(RVA = "0xA0B40C", Offset = "0xA0B40C", VA = "0xA0B40C", Slot = "16")]
		public virtual void OnTrigger(float triggerValue)
		{
		}

		[Token(Token = "0x6000FC7")]
		[Address(RVA = "0xA0B410", Offset = "0xA0B410", VA = "0xA0B410", Slot = "17")]
		public virtual void OnTriggerDown()
		{
		}

		[Token(Token = "0x6000FC8")]
		[Address(RVA = "0xA0B414", Offset = "0xA0B414", VA = "0xA0B414", Slot = "18")]
		public virtual void OnTriggerUp()
		{
		}

		[Token(Token = "0x6000FC9")]
		[Address(RVA = "0xA0B418", Offset = "0xA0B418", VA = "0xA0B418", Slot = "19")]
		public virtual void OnButton1()
		{
		}

		[Token(Token = "0x6000FCA")]
		[Address(RVA = "0xA0B41C", Offset = "0xA0B41C", VA = "0xA0B41C", Slot = "20")]
		public virtual void OnButton1Down()
		{
		}

		[Token(Token = "0x6000FCB")]
		[Address(RVA = "0xA0B420", Offset = "0xA0B420", VA = "0xA0B420", Slot = "21")]
		public virtual void OnButton1Up()
		{
		}

		[Token(Token = "0x6000FCC")]
		[Address(RVA = "0xA0B424", Offset = "0xA0B424", VA = "0xA0B424", Slot = "22")]
		public virtual void OnButton2()
		{
		}

		[Token(Token = "0x6000FCD")]
		[Address(RVA = "0xA0B428", Offset = "0xA0B428", VA = "0xA0B428", Slot = "23")]
		public virtual void OnButton2Down()
		{
		}

		[Token(Token = "0x6000FCE")]
		[Address(RVA = "0xA0B42C", Offset = "0xA0B42C", VA = "0xA0B42C", Slot = "24")]
		public virtual void OnButton2Up()
		{
		}

		[Token(Token = "0x6000FCF")]
		[Address(RVA = "0xA0B430", Offset = "0xA0B430", VA = "0xA0B430", Slot = "25")]
		public virtual void OnSnapZoneEnter()
		{
		}

		[Token(Token = "0x6000FD0")]
		[Address(RVA = "0xA0B434", Offset = "0xA0B434", VA = "0xA0B434", Slot = "26")]
		public virtual void OnSnapZoneExit()
		{
		}

		[Token(Token = "0x6000FD1")]
		[Address(RVA = "0xA0B438", Offset = "0xA0B438", VA = "0xA0B438")]
		protected GrabbableEvents()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002AD")]
	public class FloatEvent : UnityEvent<float>
	{
		[Token(Token = "0x6000FD2")]
		[Address(RVA = "0xA0B440", Offset = "0xA0B440", VA = "0xA0B440")]
		public FloatEvent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002AE")]
	public class FloatFloatEvent : UnityEvent<float, float>
	{
		[Token(Token = "0x6000FD3")]
		[Address(RVA = "0xA0B488", Offset = "0xA0B488", VA = "0xA0B488")]
		public FloatFloatEvent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002AF")]
	public class GrabberEvent : UnityEvent<Grabber>
	{
		[Token(Token = "0x6000FD4")]
		[Address(RVA = "0xA0B4D0", Offset = "0xA0B4D0", VA = "0xA0B4D0")]
		public GrabberEvent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002B0")]
	public class GrabbableEvent : UnityEvent<Grabbable>
	{
		[Token(Token = "0x6000FD5")]
		[Address(RVA = "0xA0B518", Offset = "0xA0B518", VA = "0xA0B518")]
		public GrabbableEvent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002B1")]
	public class RaycastHitEvent : UnityEvent<RaycastHit>
	{
		[Token(Token = "0x6000FD6")]
		[Address(RVA = "0xA0B560", Offset = "0xA0B560", VA = "0xA0B560")]
		public RaycastHitEvent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002B2")]
	public class Vector2Event : UnityEvent<Vector2>
	{
		[Token(Token = "0x6000FD7")]
		[Address(RVA = "0xA0B5A8", Offset = "0xA0B5A8", VA = "0xA0B5A8")]
		public Vector2Event()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002B3")]
	public class Vector3Event : UnityEvent<Vector3>
	{
		[Token(Token = "0x6000FD8")]
		[Address(RVA = "0xA0B5F0", Offset = "0xA0B5F0", VA = "0xA0B5F0")]
		public Vector3Event()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002B4")]
	public class PointerEventDataEvent : UnityEvent<PointerEventData>
	{
		[Token(Token = "0x6000FD9")]
		[Address(RVA = "0xA0B638", Offset = "0xA0B638", VA = "0xA0B638")]
		public PointerEventDataEvent()
		{
		}
	}
	[Token(Token = "0x20002B5")]
	public class GrabbablesInTrigger : MonoBehaviour
	{
		[Token(Token = "0x4001220")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Dictionary<Collider, Grabbable> NearbyGrabbables;

		[Token(Token = "0x4001221")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Dictionary<Collider, Grabbable> ValidGrabbables;

		[Token(Token = "0x4001222")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Grabbable ClosestGrabbable;

		[Token(Token = "0x4001223")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Dictionary<Collider, Grabbable> ValidRemoteGrabbables;

		[Token(Token = "0x4001224")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Grabbable ClosestRemoteGrabbable;

		[Token(Token = "0x4001225")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Events")]
		public bool FireGrabbableEvents;

		[Token(Token = "0x4001226")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		[Header("Collision Checks")]
		[Tooltip("If true, Grabbables in the trigger will only be considered valid if no objects are in the way between it and this transform")]
		public bool RaycastRemoteGrabbables;

		[Token(Token = "0x4001227")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
		[Tooltip(" If true, Remote Grabbables must not have any collisions between the Main Camera and the Remote Grabbable we are trying to reach. This can help prevent grabbing items through walls or around corners.")]
		public bool RemoteGrabbablesMustBeVisible;

		[Token(Token = "0x4001228")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("If RaycastRemoteGrabbables is true, use these layers to detect collisions between the grabber and the potential grabbable object. By Default only looking for collisions on the 'Default' layer")]
		public LayerMask RemoteCollisionLayers;

		[Token(Token = "0x4001229")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Grabbable _closest;

		[Token(Token = "0x400122A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float _lastDistance;

		[Token(Token = "0x400122B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float _thisDistance;

		[Token(Token = "0x400122C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Dictionary<Collider, Grabbable> _valids;

		[Token(Token = "0x400122D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Dictionary<Collider, Grabbable> _filtered;

		[Token(Token = "0x400122E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Transform _eyeTransform;

		[Token(Token = "0x6000FDA")]
		[Address(RVA = "0xA0B680", Offset = "0xA0B680", VA = "0xA0B680")]
		private void Start()
		{
		}

		[Token(Token = "0x6000FDB")]
		[Address(RVA = "0xA0B7D0", Offset = "0xA0B7D0", VA = "0xA0B7D0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000FDC")]
		[Address(RVA = "0xA0B7E8", Offset = "0xA0B7E8", VA = "0xA0B7E8")]
		private void updateClosestGrabbable()
		{
		}

		[Token(Token = "0x6000FDD")]
		[Address(RVA = "0xA0B86C", Offset = "0xA0B86C", VA = "0xA0B86C")]
		private void updateClosestRemoteGrabbables()
		{
		}

		[Token(Token = "0x6000FDE")]
		[Address(RVA = "0xA0BB70", Offset = "0xA0BB70", VA = "0xA0BB70", Slot = "4")]
		public virtual Grabbable GetClosestGrabbable(Dictionary<Collider, Grabbable> grabbables, bool remoteOnly = false, bool raycastCheck = false)
		{
			return null;
		}

		[Token(Token = "0x6000FDF")]
		[Address(RVA = "0xA0BF7C", Offset = "0xA0BF7C", VA = "0xA0BF7C", Slot = "5")]
		public virtual bool CheckObjectBetweenGrabbable(Vector3 startingPosition, Grabbable theGrabbable)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FE0")]
		[Address(RVA = "0xA0B918", Offset = "0xA0B918", VA = "0xA0B918")]
		public Dictionary<Collider, Grabbable> GetValidGrabbables(Dictionary<Collider, Grabbable> grabs)
		{
			return null;
		}

		[Token(Token = "0x6000FE1")]
		[Address(RVA = "0xA0C144", Offset = "0xA0C144", VA = "0xA0C144", Slot = "6")]
		protected virtual bool isValidGrabbable(Collider col, Grabbable grab)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FE2")]
		[Address(RVA = "0xA0C3AC", Offset = "0xA0C3AC", VA = "0xA0C3AC", Slot = "7")]
		public virtual Dictionary<Collider, Grabbable> SanitizeGrabbables(Dictionary<Collider, Grabbable> grabs)
		{
			return null;
		}

		[Token(Token = "0x6000FE3")]
		[Address(RVA = "0xA0C728", Offset = "0xA0C728", VA = "0xA0C728", Slot = "8")]
		public virtual void AddNearbyGrabbable(Collider col, Grabbable grabObject)
		{
		}

		[Token(Token = "0x6000FE4")]
		[Address(RVA = "0xA0C85C", Offset = "0xA0C85C", VA = "0xA0C85C", Slot = "9")]
		public virtual void RemoveNearbyGrabbable(Collider col, Grabbable grabObject)
		{
		}

		[Token(Token = "0x6000FE5")]
		[Address(RVA = "0xA0C934", Offset = "0xA0C934", VA = "0xA0C934", Slot = "10")]
		public virtual void RemoveNearbyGrabbable(Grabbable grabObject)
		{
		}

		[Token(Token = "0x6000FE6")]
		[Address(RVA = "0xA0CB24", Offset = "0xA0CB24", VA = "0xA0CB24", Slot = "11")]
		public virtual void AddValidRemoteGrabbable(Collider col, Grabbable grabObject)
		{
		}

		[Token(Token = "0x6000FE7")]
		[Address(RVA = "0xA0CDFC", Offset = "0xA0CDFC", VA = "0xA0CDFC", Slot = "12")]
		public virtual void RemoveValidRemoteGrabbable(Collider col, Grabbable grabObject)
		{
		}

		[Token(Token = "0x6000FE8")]
		[Address(RVA = "0xA0CED4", Offset = "0xA0CED4", VA = "0xA0CED4")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000FE9")]
		[Address(RVA = "0xA0D024", Offset = "0xA0D024", VA = "0xA0D024")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6000FEA")]
		[Address(RVA = "0xA0D14C", Offset = "0xA0D14C", VA = "0xA0D14C")]
		public GrabbablesInTrigger()
		{
		}
	}
	[Token(Token = "0x20002B6")]
	public class GrabbableUnityEvents : GrabbableEvents
	{
		[Token(Token = "0x400122F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GrabberEvent onGrab;

		[Token(Token = "0x4001230")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UnityEvent onRelease;

		[Token(Token = "0x4001231")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public UnityEvent onBecomesClosestGrabbable;

		[Token(Token = "0x4001232")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public UnityEvent onNoLongerClosestGrabbable;

		[Token(Token = "0x4001233")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public UnityEvent onBecomesClosestRemoteGrabbable;

		[Token(Token = "0x4001234")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public UnityEvent onNoLongerClosestRemoteGrabbable;

		[Token(Token = "0x4001235")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public FloatEvent onGrip;

		[Token(Token = "0x4001236")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public FloatEvent onTrigger;

		[Token(Token = "0x4001237")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public UnityEvent onTriggerDown;

		[Token(Token = "0x4001238")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public UnityEvent onTriggerUp;

		[Token(Token = "0x4001239")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public UnityEvent onButton1;

		[Token(Token = "0x400123A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public UnityEvent onButton1Down;

		[Token(Token = "0x400123B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public UnityEvent onButton1Up;

		[Token(Token = "0x400123C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public UnityEvent onButton2;

		[Token(Token = "0x400123D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public UnityEvent onButton2Down;

		[Token(Token = "0x400123E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public UnityEvent onButton2Up;

		[Token(Token = "0x400123F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public UnityEvent onSnapZoneEnter;

		[Token(Token = "0x4001240")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public UnityEvent onSnapZoneExit;

		[Token(Token = "0x6000FEB")]
		[Address(RVA = "0xA0D17C", Offset = "0xA0D17C", VA = "0xA0D17C", Slot = "5")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x6000FEC")]
		[Address(RVA = "0xA0D1EC", Offset = "0xA0D1EC", VA = "0xA0D1EC", Slot = "6")]
		public override void OnRelease()
		{
		}

		[Token(Token = "0x6000FED")]
		[Address(RVA = "0xA0D200", Offset = "0xA0D200", VA = "0xA0D200", Slot = "7")]
		public override void OnBecomesClosestGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6000FEE")]
		[Address(RVA = "0xA0D214", Offset = "0xA0D214", VA = "0xA0D214", Slot = "9")]
		public override void OnNoLongerClosestGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6000FEF")]
		[Address(RVA = "0xA0D228", Offset = "0xA0D228", VA = "0xA0D228", Slot = "11")]
		public override void OnBecomesClosestRemoteGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6000FF0")]
		[Address(RVA = "0xA0D23C", Offset = "0xA0D23C", VA = "0xA0D23C", Slot = "13")]
		public override void OnNoLongerClosestRemoteGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6000FF1")]
		[Address(RVA = "0xA0D250", Offset = "0xA0D250", VA = "0xA0D250", Slot = "15")]
		public override void OnGrip(float gripValue)
		{
		}

		[Token(Token = "0x6000FF2")]
		[Address(RVA = "0xA0D2BC", Offset = "0xA0D2BC", VA = "0xA0D2BC", Slot = "16")]
		public override void OnTrigger(float triggerValue)
		{
		}

		[Token(Token = "0x6000FF3")]
		[Address(RVA = "0xA0D328", Offset = "0xA0D328", VA = "0xA0D328", Slot = "17")]
		public override void OnTriggerDown()
		{
		}

		[Token(Token = "0x6000FF4")]
		[Address(RVA = "0xA0D33C", Offset = "0xA0D33C", VA = "0xA0D33C", Slot = "18")]
		public override void OnTriggerUp()
		{
		}

		[Token(Token = "0x6000FF5")]
		[Address(RVA = "0xA0D350", Offset = "0xA0D350", VA = "0xA0D350", Slot = "19")]
		public override void OnButton1()
		{
		}

		[Token(Token = "0x6000FF6")]
		[Address(RVA = "0xA0D364", Offset = "0xA0D364", VA = "0xA0D364", Slot = "20")]
		public override void OnButton1Down()
		{
		}

		[Token(Token = "0x6000FF7")]
		[Address(RVA = "0xA0D378", Offset = "0xA0D378", VA = "0xA0D378", Slot = "21")]
		public override void OnButton1Up()
		{
		}

		[Token(Token = "0x6000FF8")]
		[Address(RVA = "0xA0D38C", Offset = "0xA0D38C", VA = "0xA0D38C", Slot = "22")]
		public override void OnButton2()
		{
		}

		[Token(Token = "0x6000FF9")]
		[Address(RVA = "0xA0D3A0", Offset = "0xA0D3A0", VA = "0xA0D3A0", Slot = "23")]
		public override void OnButton2Down()
		{
		}

		[Token(Token = "0x6000FFA")]
		[Address(RVA = "0xA0D3B4", Offset = "0xA0D3B4", VA = "0xA0D3B4", Slot = "24")]
		public override void OnButton2Up()
		{
		}

		[Token(Token = "0x6000FFB")]
		[Address(RVA = "0xA0D3C8", Offset = "0xA0D3C8", VA = "0xA0D3C8", Slot = "25")]
		public override void OnSnapZoneEnter()
		{
		}

		[Token(Token = "0x6000FFC")]
		[Address(RVA = "0xA0D3DC", Offset = "0xA0D3DC", VA = "0xA0D3DC", Slot = "26")]
		public override void OnSnapZoneExit()
		{
		}

		[Token(Token = "0x6000FFD")]
		[Address(RVA = "0xA0D3F0", Offset = "0xA0D3F0", VA = "0xA0D3F0")]
		public GrabbableUnityEvents()
		{
		}
	}
	[Token(Token = "0x20002B7")]
	[RequireComponent(typeof(GrabbablesInTrigger))]
	public class Grabber : MonoBehaviour
	{
		[Token(Token = "0x4001241")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Hand Side")]
		[Tooltip("Which controller side. None if not attached to a controller.")]
		public ControllerHand HandSide;

		[Token(Token = "0x4001242")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("The default hold type for all Grabbables. A Grabbable can manually override this default.")]
		[Header("Grab Settings")]
		public HoldType DefaultHoldType;

		[Token(Token = "0x4001243")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The default grab button for all Grabbables. A Grabbable can manually override this default.")]
		public GrabButton DefaultGrabButton;

		[Token(Token = "0x4001244")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("(Optional) Input Action used to enact grab action.")]
		public InputActionReference GrabAction;

		[Token(Token = "0x4001245")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Hold / Release")]
		[Tooltip("0-1 determine how much to consider a grip. Example : 0.75 is holding the grip down 3/4 of the way.")]
		[Range(0f, 1f)]
		public float GripAmount;

		[Token(Token = "0x4001246")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Range(0f, 1f)]
		[Tooltip("How much grip considered to release an object (0-1). Example : 0.75 is holding the grip down 3/4 of the way")]
		public float ReleaseGripAmount;

		[Token(Token = "0x4001247")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("How many seconds to check for grab input while Grip is held down. After grip is held down for this long, grip will need to be repressed in order to pick up an object.")]
		public float GrabCheckSeconds;

		[Token(Token = "0x4001248")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float currentGrabTime;

		[Token(Token = "0x4001249")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Equip on Start")]
		[Tooltip("Assign a Grabbable here if you want to auto equip it on Start")]
		public Grabbable EquipGrabbableOnStart;

		[Token(Token = "0x400124A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Header("Hand Graphics")]
		[Tooltip("Root transform that holds hands models. We may want to hide these while holding certain objects, or parent this object to the grabbable so they follow the object perfectly.")]
		public Transform HandsGraphics;

		[Token(Token = "0x400124B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Transform handsGraphicsParent;

		[Token(Token = "0x400124C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector3 handsGraphicsPosition;

		[Token(Token = "0x400124D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private Quaternion handsGraphicsRotation;

		[Token(Token = "0x400124E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The Grabbable we are currently holding. Null if not holding anything.")]
		[Header("Shown for Debug :")]
		public Grabbable HeldGrabbable;

		[Token(Token = "0x400124F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Same as holding down grip if set to true. Should not have same value as ForceRelease.")]
		public bool ForceGrab;

		[Token(Token = "0x4001250")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
		[Tooltip("Force the release of grip if set to true. Should not have same value as ForceGrab.")]
		public bool ForceRelease;

		[Token(Token = "0x4001251")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[Tooltip("Time.time when we last dropped a Grabbable")]
		public float LastDropTime;

		[Token(Token = "0x4001252")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Grabbable previousClosest;

		[Token(Token = "0x4001253")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Grabbable previousClosestRemote;

		[Token(Token = "0x4001254")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private GrabbablesInTrigger grabsInTrigger;

		[Token(Token = "0x4001255")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Grabbable flyingGrabbable;

		[Token(Token = "0x4001256")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private float flyingTime;

		[Token(Token = "0x4001259")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[HideInInspector]
		public Vector3 PreviousPosition;

		[Token(Token = "0x400125A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[HideInInspector]
		public Transform DummyTransform;

		[Token(Token = "0x400125B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Rigidbody rb;

		[Token(Token = "0x400125C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private InputBridge input;

		[Token(Token = "0x400125D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private ConfigurableJoint joint;

		[Token(Token = "0x400125E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[HideInInspector]
		public bool FreshGrip;

		[Token(Token = "0x400125F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[Tooltip("Called immediately before a Grabbable object is officially grabbed")]
		[Header("Grabber Events")]
		public GrabbableEvent onGrabEvent;

		[Token(Token = "0x4001260")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[Tooltip("Called immediately after a Grabbable object is grabbed. Use this if you need the Grabbable object to be setup before accessing it")]
		public GrabbableEvent onAfterGrabEvent;

		[Token(Token = "0x4001261")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[Tooltip("Called immediately before droppping an item")]
		public GrabbableEvent onReleaseEvent;

		[Token(Token = "0x4001262")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[HideInInspector]
		public VelocityTracker velocityTracker;

		[Token(Token = "0x17000187")]
		public bool HoldingItem
		{
			[Token(Token = "0x6000FFE")]
			[Address(RVA = "0xA0D3F8", Offset = "0xA0D3F8", VA = "0xA0D3F8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000188")]
		public bool RemoteGrabbingItem
		{
			[Token(Token = "0x6000FFF")]
			[Address(RVA = "0xA0D458", Offset = "0xA0D458", VA = "0xA0D458")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000189")]
		public GrabbablesInTrigger GrabsInTrigger
		{
			[Token(Token = "0x6001000")]
			[Address(RVA = "0xA0D4B8", Offset = "0xA0D4B8", VA = "0xA0D4B8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700018A")]
		public Grabbable RemoteGrabbingGrabbable
		{
			[Token(Token = "0x6001001")]
			[Address(RVA = "0xA0D4C0", Offset = "0xA0D4C0", VA = "0xA0D4C0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700018B")]
		public Vector3 handsGraphicsGrabberOffset
		{
			[Token(Token = "0x6001002")]
			[Address(RVA = "0xA0D4C8", Offset = "0xA0D4C8", VA = "0xA0D4C8")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001003")]
			[Address(RVA = "0xA0D4D4", Offset = "0xA0D4D4", VA = "0xA0D4D4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700018C")]
		public Vector3 handsGraphicsGrabberOffsetRotation
		{
			[Token(Token = "0x6001004")]
			[Address(RVA = "0xA0D4E0", Offset = "0xA0D4E0", VA = "0xA0D4E0")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001005")]
			[Address(RVA = "0xA0D4EC", Offset = "0xA0D4EC", VA = "0xA0D4EC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6001006")]
		[Address(RVA = "0xA0D4F8", Offset = "0xA0D4F8", VA = "0xA0D4F8")]
		private void Start()
		{
		}

		[Token(Token = "0x6001007")]
		[Address(RVA = "0xA0D9C4", Offset = "0xA0D9C4", VA = "0xA0D9C4")]
		private void Update()
		{
		}

		[Token(Token = "0x6001008")]
		[Address(RVA = "0xA0E188", Offset = "0xA0E188", VA = "0xA0E188", Slot = "4")]
		protected virtual void updateFreshGrabStatus()
		{
		}

		[Token(Token = "0x6001009")]
		[Address(RVA = "0xA0DB98", Offset = "0xA0DB98", VA = "0xA0DB98")]
		private void checkGrabbableEvents()
		{
		}

		[Token(Token = "0x600100A")]
		[Address(RVA = "0xA0E2DC", Offset = "0xA0E2DC", VA = "0xA0E2DC", Slot = "5")]
		public virtual bool InputCheckGrab()
		{
			return default(bool);
		}

		[Token(Token = "0x600100B")]
		[Address(RVA = "0xA0E3C4", Offset = "0xA0E3C4", VA = "0xA0E3C4", Slot = "6")]
		public virtual bool GetInputDownForGrabbable(Grabbable grabObject)
		{
			return default(bool);
		}

		[Token(Token = "0x600100C")]
		[Address(RVA = "0xA0E528", Offset = "0xA0E528", VA = "0xA0E528")]
		private HoldType getHoldType(Grabbable grab)
		{
			return default(HoldType);
		}

		[Token(Token = "0x600100D")]
		[Address(RVA = "0xA0E6AC", Offset = "0xA0E6AC", VA = "0xA0E6AC", Slot = "7")]
		public virtual GrabButton GetGrabButton(Grabbable grab)
		{
			return default(GrabButton);
		}

		[Token(Token = "0x600100E")]
		[Address(RVA = "0xA0E300", Offset = "0xA0E300", VA = "0xA0E300")]
		private Grabbable getClosestOrRemote()
		{
			return null;
		}

		[Token(Token = "0x600100F")]
		[Address(RVA = "0xA0E0A8", Offset = "0xA0E0A8", VA = "0xA0E0A8")]
		private bool inputCheckRelease()
		{
			return default(bool);
		}

		[Token(Token = "0x6001010")]
		[Address(RVA = "0xA0E1FC", Offset = "0xA0E1FC", VA = "0xA0E1FC")]
		private float getGrabInput(GrabButton btn)
		{
			return default(float);
		}

		[Token(Token = "0x6001011")]
		[Address(RVA = "0xA0E5C0", Offset = "0xA0E5C0", VA = "0xA0E5C0")]
		private bool getToggleInput(GrabButton btn)
		{
			return default(bool);
		}

		[Token(Token = "0x6001012")]
		[Address(RVA = "0xA0E744", Offset = "0xA0E744", VA = "0xA0E744", Slot = "8")]
		public virtual bool TryGrab()
		{
			return default(bool);
		}

		[Token(Token = "0x6001013")]
		[Address(RVA = "0xA0E89C", Offset = "0xA0E89C", VA = "0xA0E89C", Slot = "9")]
		public virtual void GrabGrabbable(Grabbable item)
		{
		}

		[Token(Token = "0x6001014")]
		[Address(RVA = "0xA0EA20", Offset = "0xA0EA20", VA = "0xA0EA20", Slot = "10")]
		public virtual void DidDrop()
		{
		}

		[Token(Token = "0x6001015")]
		[Address(RVA = "0xA0EB44", Offset = "0xA0EB44", VA = "0xA0EB44", Slot = "11")]
		public virtual void HideHandGraphics()
		{
		}

		[Token(Token = "0x6001016")]
		[Address(RVA = "0xA0EBD8", Offset = "0xA0EBD8", VA = "0xA0EBD8", Slot = "12")]
		public virtual void ResetHandGraphics()
		{
		}

		[Token(Token = "0x6001017")]
		[Address(RVA = "0xA0ECD4", Offset = "0xA0ECD4", VA = "0xA0ECD4", Slot = "13")]
		public virtual void TryRelease()
		{
		}

		[Token(Token = "0x6001018")]
		[Address(RVA = "0xA0DAF4", Offset = "0xA0DAF4", VA = "0xA0DAF4")]
		private void resetFlyingGrabbable()
		{
		}

		[Token(Token = "0x6001019")]
		[Address(RVA = "0xA0ED68", Offset = "0xA0ED68", VA = "0xA0ED68", Slot = "14")]
		public virtual Vector3 GetGrabberAveragedVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600101A")]
		[Address(RVA = "0xA0ED88", Offset = "0xA0ED88", VA = "0xA0ED88", Slot = "15")]
		public virtual Vector3 GetGrabberAveragedAngularVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600101B")]
		[Address(RVA = "0xA0EDA8", Offset = "0xA0EDA8", VA = "0xA0EDA8")]
		public Grabber()
		{
		}
	}
	[Token(Token = "0x20002B8")]
	public class GrabPoint : MonoBehaviour
	{
		[Token(Token = "0x4001263")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Hand Pose")]
		public HandPoseType handPoseType;

		[Token(Token = "0x4001264")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("If HandPoseType = 'HandPose', this HandPose object will be applied to the hand when this grab point is in use")]
		public HandPose SelectedHandPose;

		[Token(Token = "0x4001265")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("If HandPoseType = 'AnimatorID', this id will be set on the hand animator when grabbed. Set to 'Default' to inherit the Grabbable's HandPose. Otherwise this HandPose ID will be used.")]
		public HandPoseId HandPose;

		[Token(Token = "0x4001266")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Header("Valid Hands")]
		[Tooltip("Can this Grab Point be used by a left-handed Grabber?")]
		public bool LeftHandIsValid;

		[Token(Token = "0x4001267")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		[Tooltip("Can this Grab Point be used by a right-handed Grabber?")]
		public bool RightHandIsValid;

		[Token(Token = "0x4001268")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Parent to")]
		[Tooltip("If specified, the Hand Model will be parented here when snapped")]
		public Transform HandPosition;

		[Token(Token = "0x4001269")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Range(0f, 360f)]
		[Tooltip("GrabPoint is not considered valid if the angle between the GrabPoint and Grabber is greater than this amount")]
		[Header("Angle Restriction")]
		public float MaxDegreeDifferenceAllowed;

		[Token(Token = "0x400126A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Range(0f, 1f)]
		[Tooltip("Minimum value Hand Animator will blend to. Example : If IndexBlendMin = 0.4 and Trigger button is not held down, the LayerWeight will be set to 0.4")]
		[Header("Finger Blending")]
		public float IndexBlendMin;

		[Token(Token = "0x400126B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Range(0f, 1f)]
		[Tooltip("Maximum value Hand Animator will blend to. Example : If IndexBlendMax = 0.6 and Trigger button is held all the way down, the LayerWeight will be set to 0.6")]
		public float IndexBlendMax;

		[Token(Token = "0x400126C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Range(0f, 1f)]
		[Tooltip("Minimum value Hand Animator will blend to if thumb control is not being touched.")]
		public float ThumbBlendMin;

		[Token(Token = "0x400126D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Range(0f, 1f)]
		[Tooltip("Maximum value Hand Animator will blend to if thumb control is being touched.")]
		public float ThumbBlendMax;

		[Token(Token = "0x400126E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 previewModelOffsetLeft;

		[Token(Token = "0x400126F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector3 previewModelOffsetRight;

		[Token(Token = "0x4001270")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Tooltip("Show a green arc in the Scene view representing MaxDegreeDifferenceAllowed")]
		[Header("Editor")]
		public bool ShowAngleGizmo;

		[Token(Token = "0x4001271")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
		private bool offsetFound;

		[Token(Token = "0x600101C")]
		[Address(RVA = "0xA0EDCC", Offset = "0xA0EDCC", VA = "0xA0EDCC")]
		public void UpdatePreviewTransforms()
		{
		}

		[Token(Token = "0x600101D")]
		[Address(RVA = "0xA0F140", Offset = "0xA0F140", VA = "0xA0F140")]
		public void UpdateHandPosePreview()
		{
		}

		[Token(Token = "0x600101E")]
		[Address(RVA = "0xA0F304", Offset = "0xA0F304", VA = "0xA0F304")]
		public void UpdateAutoPoserPreview()
		{
		}

		[Token(Token = "0x600101F")]
		[Address(RVA = "0xA0F5BC", Offset = "0xA0F5BC", VA = "0xA0F5BC")]
		public void UpdateChildAnimators()
		{
		}

		[Token(Token = "0x6001020")]
		[Address(RVA = "0xA0F744", Offset = "0xA0F744", VA = "0xA0F744")]
		public GrabPoint()
		{
		}
	}
	[Token(Token = "0x20002B9")]
	public class HandModelSelector : MonoBehaviour
	{
		[Token(Token = "0x4001272")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Child index of the hand model to use if nothing stored in playerprefs or LoadHandSelectionFromPrefs set to false")]
		public int DefaultHandsModel;

		[Token(Token = "0x4001273")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("If true, the selected hand model will be saved and loaded from player prefs")]
		public bool LoadHandSelectionFromPrefs;

		[Token(Token = "0x4001274")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Input used to toggle between hands")]
		public ControllerBinding ToggleHandsInput;

		[Token(Token = "0x4001275")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("This transform holds all of the hand models. Can be used to enabled / disabled various hand options.")]
		public Transform LeftHandGFXHolder;

		[Token(Token = "0x4001276")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("This transform holds all of the hand models. Can be used to enabled / disabled various hand options")]
		public Transform RightHandGFXHolder;

		[Token(Token = "0x4001277")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int _selectedHandGFX;

		[Token(Token = "0x4001278")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Used for IK Hands / Body option")]
		public CharacterIK IKBody;

		[Token(Token = "0x4001279")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private UIPointer uiPoint;

		[Token(Token = "0x400127A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private List<Transform> leftHandModels;

		[Token(Token = "0x400127B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform activatedLeftModel;

		[Token(Token = "0x400127C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private List<Transform> rightHandModels;

		[Token(Token = "0x400127D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Transform activatedRightModel;

		[Token(Token = "0x6001021")]
		[Address(RVA = "0xA0F788", Offset = "0xA0F788", VA = "0xA0F788")]
		private void Start()
		{
		}

		[Token(Token = "0x6001022")]
		[Address(RVA = "0xA0FFA0", Offset = "0xA0FFA0", VA = "0xA0FFA0")]
		private void Update()
		{
		}

		[Token(Token = "0x6001023")]
		[Address(RVA = "0xA0F824", Offset = "0xA0F824", VA = "0xA0F824")]
		public void CacheHandModels()
		{
		}

		[Token(Token = "0x6001024")]
		[Address(RVA = "0xA0FA3C", Offset = "0xA0FA3C", VA = "0xA0FA3C")]
		public void ChangeHandsModel(int childIndex, bool save = false)
		{
		}

		[Token(Token = "0x6001025")]
		[Address(RVA = "0xA0FFD8", Offset = "0xA0FFD8", VA = "0xA0FFD8")]
		public HandModelSelector()
		{
		}
	}
	[Token(Token = "0x20002BA")]
	public class HeadCollisionFade : MonoBehaviour
	{
		[Token(Token = "0x400127E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ScreenFader fader;

		[Token(Token = "0x400127F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float FadeDistance;

		[Token(Token = "0x4001280")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float FadeOutDistance;

		[Token(Token = "0x4001281")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float MinFade;

		[Token(Token = "0x4001282")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float MaxFade;

		[Token(Token = "0x4001283")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float FadeSpeed;

		[Token(Token = "0x4001284")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("Only fade the screen if the HMD is registering as Active")]
		public bool CheckOnlyIfHMDActive;

		[Token(Token = "0x4001285")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		public bool IgnoreHeldGrabbables;

		[Token(Token = "0x4001286")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform DistanceTransform;

		[Token(Token = "0x4001287")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int cols;

		[Token(Token = "0x4001288")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float currentFade;

		[Token(Token = "0x4001289")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float lastFade;

		[Token(Token = "0x400128A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public List<Collider> collisions;

		[Token(Token = "0x6001026")]
		[Address(RVA = "0xA0FFF0", Offset = "0xA0FFF0", VA = "0xA0FFF0")]
		private void Start()
		{
		}

		[Token(Token = "0x6001027")]
		[Address(RVA = "0xA100B0", Offset = "0xA100B0", VA = "0xA100B0")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001028")]
		[Address(RVA = "0xA10364", Offset = "0xA10364", VA = "0xA10364")]
		private void OnCollisionEnter(Collision col)
		{
		}

		[Token(Token = "0x6001029")]
		[Address(RVA = "0xA10674", Offset = "0xA10674", VA = "0xA10674")]
		private void OnCollisionExit(Collision col)
		{
		}

		[Token(Token = "0x600102A")]
		[Address(RVA = "0xA10790", Offset = "0xA10790", VA = "0xA10790")]
		public HeadCollisionFade()
		{
		}
	}
	[Token(Token = "0x20002BB")]
	public class HeadCollisionMove : MonoBehaviour
	{
		[Token(Token = "0x20002BC")]
		[CompilerGenerated]
		private sealed class <PushBackPlayer>d__8 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001290")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001291")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001292")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HeadCollisionMove <>4__this;

			[Token(Token = "0x1700018D")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001033")]
				[Address(RVA = "0xA10A38", Offset = "0xA10A38", VA = "0xA10A38", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700018E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001035")]
				[Address(RVA = "0xA10A80", Offset = "0xA10A80", VA = "0xA10A80", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001030")]
			[Address(RVA = "0xA108EC", Offset = "0xA108EC", VA = "0xA108EC")]
			[DebuggerHidden]
			public <PushBackPlayer>d__8(int <>1__state)
			{
			}

			[Token(Token = "0x6001031")]
			[Address(RVA = "0xA10974", Offset = "0xA10974", VA = "0xA10974", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001032")]
			[Address(RVA = "0xA10978", Offset = "0xA10978", VA = "0xA10978", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001034")]
			[Address(RVA = "0xA10A40", Offset = "0xA10A40", VA = "0xA10A40", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400128B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Enable collision? Set to false if you don't want to enable this")]
		public bool CollisionEnabled;

		[Token(Token = "0x400128C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[Tooltip("Only collide against the specified World Tag?")]
		public bool OnlyCollideAgainstWorld;

		[Token(Token = "0x400128D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private string worldTag;

		[Token(Token = "0x400128E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private GameObject cameraRig;

		[Token(Token = "0x400128F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Transform centerEyeAnchor;

		[Token(Token = "0x600102B")]
		[Address(RVA = "0xA107B4", Offset = "0xA107B4", VA = "0xA107B4")]
		private void Start()
		{
		}

		[Token(Token = "0x600102C")]
		[Address(RVA = "0xA107B8", Offset = "0xA107B8", VA = "0xA107B8")]
		private void OnCollisionStay(Collision collision)
		{
		}

		[Token(Token = "0x600102D")]
		[Address(RVA = "0xA10890", Offset = "0xA10890", VA = "0xA10890")]
		private void OnCollisionExit(Collision collision)
		{
		}

		[Token(Token = "0x600102E")]
		[Address(RVA = "0xA1081C", Offset = "0xA1081C", VA = "0xA1081C")]
		[IteratorStateMachine(typeof(<PushBackPlayer>d__8))]
		private IEnumerator PushBackPlayer()
		{
			return null;
		}

		[Token(Token = "0x600102F")]
		[Address(RVA = "0xA10914", Offset = "0xA10914", VA = "0xA10914")]
		public HeadCollisionMove()
		{
		}
	}
	[Token(Token = "0x20002BD")]
	public class HingeHelper : GrabbableEvents
	{
		[Token(Token = "0x4001293")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("If True the SnapGraphics tranfsorm will have its local Y rotation snapped to the nearest degrees specified in SnapDegrees")]
		[Header("Snap Options")]
		public bool SnapToDegrees;

		[Token(Token = "0x4001294")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("Snap the Y rotation to the nearest")]
		public float SnapDegrees;

		[Token(Token = "0x4001295")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The Transform of the object to be rotated if SnapToDegrees is true")]
		public Transform SnapGraphics;

		[Token(Token = "0x4001296")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Play this sound on snap")]
		public AudioClip SnapSound;

		[Token(Token = "0x4001297")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Randomize pitch of SnapSound by this amount")]
		public float RandomizePitch;

		[Token(Token = "0x4001298")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("Add haptics amount (0-1) to controller if SnapToDegrees is True. Set this to 0 for no Haptics.")]
		public float SnapHaptics;

		[Token(Token = "0x4001299")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Text Label (Optional)")]
		public Text LabelToUpdate;

		[Token(Token = "0x400129A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Header("Change Events")]
		public FloatEvent onHingeChange;

		[Token(Token = "0x400129B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public FloatEvent onHingeSnapChange;

		[Token(Token = "0x400129C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Rigidbody rigid;

		[Token(Token = "0x400129D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float _lastDegrees;

		[Token(Token = "0x400129E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float _lastSnapDegrees;

		[Token(Token = "0x6001036")]
		[Address(RVA = "0xA10A88", Offset = "0xA10A88", VA = "0xA10A88")]
		private void Start()
		{
		}

		[Token(Token = "0x6001037")]
		[Address(RVA = "0xA10AE0", Offset = "0xA10AE0", VA = "0xA10AE0")]
		private void Update()
		{
		}

		[Token(Token = "0x6001038")]
		[Address(RVA = "0xA10D7C", Offset = "0xA10D7C", VA = "0xA10D7C")]
		public void OnSnapChange(float yAngle)
		{
		}

		[Token(Token = "0x6001039")]
		[Address(RVA = "0xA11108", Offset = "0xA11108", VA = "0xA11108", Slot = "6")]
		public override void OnRelease()
		{
		}

		[Token(Token = "0x600103A")]
		[Address(RVA = "0xA10D10", Offset = "0xA10D10", VA = "0xA10D10")]
		public void OnHingeChange(float hingeAmount)
		{
		}

		[Token(Token = "0x600103B")]
		[Address(RVA = "0xA10CEC", Offset = "0xA10CEC", VA = "0xA10CEC")]
		private float getSmoothedValue(float val)
		{
			return default(float);
		}

		[Token(Token = "0x600103C")]
		[Address(RVA = "0xA111B4", Offset = "0xA111B4", VA = "0xA111B4")]
		public HingeHelper()
		{
		}
	}
	[Token(Token = "0x20002BE")]
	public enum ControllerHand
	{
		[Token(Token = "0x40012A0")]
		Left,
		[Token(Token = "0x40012A1")]
		Right,
		[Token(Token = "0x40012A2")]
		None
	}
	[Token(Token = "0x20002BF")]
	public enum ControllerBinding
	{
		[Token(Token = "0x40012A4")]
		None,
		[Token(Token = "0x40012A5")]
		AButton,
		[Token(Token = "0x40012A6")]
		AButtonDown,
		[Token(Token = "0x40012A7")]
		BButton,
		[Token(Token = "0x40012A8")]
		BButtonDown,
		[Token(Token = "0x40012A9")]
		XButton,
		[Token(Token = "0x40012AA")]
		XButtonDown,
		[Token(Token = "0x40012AB")]
		YButton,
		[Token(Token = "0x40012AC")]
		YButtonDown,
		[Token(Token = "0x40012AD")]
		LeftTrigger,
		[Token(Token = "0x40012AE")]
		LeftTriggerDown,
		[Token(Token = "0x40012AF")]
		LeftGrip,
		[Token(Token = "0x40012B0")]
		LeftGripDown,
		[Token(Token = "0x40012B1")]
		LeftThumbstick,
		[Token(Token = "0x40012B2")]
		LeftThumbstickDown,
		[Token(Token = "0x40012B3")]
		RightTrigger,
		[Token(Token = "0x40012B4")]
		RightTriggerDown,
		[Token(Token = "0x40012B5")]
		RightGrip,
		[Token(Token = "0x40012B6")]
		RightGripDown,
		[Token(Token = "0x40012B7")]
		RightThumbstick,
		[Token(Token = "0x40012B8")]
		RightThumbstickDown,
		[Token(Token = "0x40012B9")]
		StartButton,
		[Token(Token = "0x40012BA")]
		StartButtonDown,
		[Token(Token = "0x40012BB")]
		BackButton,
		[Token(Token = "0x40012BC")]
		BackButtonDown,
		[Token(Token = "0x40012BD")]
		RightTriggerUp
	}
	[Token(Token = "0x20002C0")]
	public enum GrabbedControllerBinding
	{
		[Token(Token = "0x40012BF")]
		None,
		[Token(Token = "0x40012C0")]
		Button1,
		[Token(Token = "0x40012C1")]
		Button1Down,
		[Token(Token = "0x40012C2")]
		Button2,
		[Token(Token = "0x40012C3")]
		Button2Down,
		[Token(Token = "0x40012C4")]
		Trigger,
		[Token(Token = "0x40012C5")]
		TriggerDown,
		[Token(Token = "0x40012C6")]
		Grip,
		[Token(Token = "0x40012C7")]
		GripDown
	}
	[Token(Token = "0x20002C1")]
	public enum InputAxis
	{
		[Token(Token = "0x40012C9")]
		None,
		[Token(Token = "0x40012CA")]
		LeftThumbStickAxis,
		[Token(Token = "0x40012CB")]
		LeftTouchPadAxis,
		[Token(Token = "0x40012CC")]
		RightThumbStickAxis,
		[Token(Token = "0x40012CD")]
		RightTouchPadAxis
	}
	[Token(Token = "0x20002C2")]
	public enum ControllerType
	{
		[Token(Token = "0x40012CF")]
		None,
		[Token(Token = "0x40012D0")]
		Unknown,
		[Token(Token = "0x40012D1")]
		OculusTouch,
		[Token(Token = "0x40012D2")]
		Wand,
		[Token(Token = "0x40012D3")]
		Knuckles
	}
	[Token(Token = "0x20002C3")]
	public enum HandControl
	{
		[Token(Token = "0x40012D5")]
		LeftGrip,
		[Token(Token = "0x40012D6")]
		RightGrip,
		[Token(Token = "0x40012D7")]
		LeftTrigger,
		[Token(Token = "0x40012D8")]
		RightTrigger,
		[Token(Token = "0x40012D9")]
		None
	}
	[Token(Token = "0x20002C4")]
	public enum GrabButton
	{
		[Token(Token = "0x40012DB")]
		Grip,
		[Token(Token = "0x40012DC")]
		Trigger,
		[Token(Token = "0x40012DD")]
		Inherit
	}
	[Token(Token = "0x20002C5")]
	public enum HoldType
	{
		[Token(Token = "0x40012DF")]
		HoldDown,
		[Token(Token = "0x40012E0")]
		Toggle,
		[Token(Token = "0x40012E1")]
		Inherit
	}
	[Token(Token = "0x20002C6")]
	public enum XRInputSource
	{
		[Token(Token = "0x40012E3")]
		XRInput,
		[Token(Token = "0x40012E4")]
		OVRInput,
		[Token(Token = "0x40012E5")]
		SteamVR,
		[Token(Token = "0x40012E6")]
		Pico,
		[Token(Token = "0x40012E7")]
		UnityInput
	}
	[Token(Token = "0x20002C7")]
	public enum SDKProvider
	{
		[Token(Token = "0x40012E9")]
		Unknown,
		[Token(Token = "0x40012EA")]
		OculusSDK,
		[Token(Token = "0x40012EB")]
		OpenVR
	}
	[Token(Token = "0x20002C8")]
	public class InputBridge : MonoBehaviour
	{
		[Token(Token = "0x20002C9")]
		public delegate void InputsUpdatedAction();

		[Token(Token = "0x20002CA")]
		public delegate void ControllerFoundAction();

		[Token(Token = "0x20002CB")]
		[CompilerGenerated]
		private sealed class <changeOriginModeRoutine>d__177 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001351")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001352")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001353")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public InputBridge <>4__this;

			[Token(Token = "0x4001354")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public TrackingOriginModeFlags trackingOrigin;

			[Token(Token = "0x17000197")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600108F")]
				[Address(RVA = "0xA16098", Offset = "0xA16098", VA = "0xA16098", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000198")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001091")]
				[Address(RVA = "0xA160E0", Offset = "0xA160E0", VA = "0xA160E0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600108C")]
			[Address(RVA = "0xA15E40", Offset = "0xA15E40", VA = "0xA15E40")]
			[DebuggerHidden]
			public <changeOriginModeRoutine>d__177(int <>1__state)
			{
			}

			[Token(Token = "0x600108D")]
			[Address(RVA = "0xA15E68", Offset = "0xA15E68", VA = "0xA15E68", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600108E")]
			[Address(RVA = "0xA15E6C", Offset = "0xA15E6C", VA = "0xA15E6C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001090")]
			[Address(RVA = "0xA160A0", Offset = "0xA160A0", VA = "0xA160A0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20002CC")]
		[CompilerGenerated]
		private sealed class <Vibrate>d__179 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001355")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001356")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001357")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float duration;

			[Token(Token = "0x17000199")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001095")]
				[Address(RVA = "0xA161C0", Offset = "0xA161C0", VA = "0xA161C0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700019A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001097")]
				[Address(RVA = "0xA16208", Offset = "0xA16208", VA = "0xA16208", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001092")]
			[Address(RVA = "0xA160E8", Offset = "0xA160E8", VA = "0xA160E8")]
			[DebuggerHidden]
			public <Vibrate>d__179(int <>1__state)
			{
			}

			[Token(Token = "0x6001093")]
			[Address(RVA = "0xA16110", Offset = "0xA16110", VA = "0xA16110", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001094")]
			[Address(RVA = "0xA16114", Offset = "0xA16114", VA = "0xA16114", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001096")]
			[Address(RVA = "0xA161C8", Offset = "0xA161C8", VA = "0xA161C8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40012EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static InputBridge _instance;

		[Token(Token = "0x40012ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Input Settings")]
		[SerializeField]
		public XRInputSource InputSource;

		[Token(Token = "0x40012EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Specify an InputActionSet for when using the Unity Input system. These actions will be enabled on load.")]
		[SerializeField]
		public InputActionAsset actionSet;

		[Token(Token = "0x40012EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[Header("Tracking Origin")]
		[Tooltip("Set the TrackingOriginModeFlags on device connect. Should typically be set to 'Floor'")]
		public TrackingOriginModeFlags TrackingOrigin;

		[Token(Token = "0x40012F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Header("Thumbstick Deadzone")]
		[Tooltip("Thumbstick X must be greater than this amount to be considered valid")]
		public float ThumbstickDeadzoneX;

		[Token(Token = "0x40012F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Thumbstick Y must be greater than this amount to be considered valid")]
		public float ThumbstickDeadzoneY;

		[Token(Token = "0x40012F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Header("Grip")]
		public float LeftGrip;

		[Token(Token = "0x40012F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool LeftGripDown;

		[Token(Token = "0x40012F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float RightGrip;

		[Token(Token = "0x40012F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool RightGripDown;

		[Token(Token = "0x40012F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Header("Trigger")]
		public float LeftTrigger;

		[Token(Token = "0x40012F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool LeftTriggerNear;

		[Token(Token = "0x40012F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		public bool LeftTriggerUp;

		[Token(Token = "0x40012F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
		public bool LeftTriggerDown;

		[Token(Token = "0x40012FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float RightTrigger;

		[Token(Token = "0x40012FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool RightTriggerUp;

		[Token(Token = "0x40012FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		public bool RightTriggerDown;

		[Token(Token = "0x40012FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
		public bool RightTriggerNear;

		[Token(Token = "0x40012FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x53")]
		public bool LeftThumbNear;

		[Token(Token = "0x40012FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public bool RightThumbNear;

		[Token(Token = "0x4001300")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
		[Header("Thumbstick")]
		public bool LeftThumbstickDown;

		[Token(Token = "0x4001301")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x56")]
		public bool LeftThumbstickUp;

		[Token(Token = "0x4001302")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x57")]
		public bool RightThumbstickDown;

		[Token(Token = "0x4001303")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool RightThumbstickUp;

		[Token(Token = "0x4001304")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		public bool LeftThumbstick;

		[Token(Token = "0x4001305")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5A")]
		public bool RightThumbstick;

		[Token(Token = "0x4001306")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5B")]
		[Header("Buttons")]
		public bool AButton;

		[Token(Token = "0x4001307")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("Returns true if the A Button was pressed down this frame but not last")]
		public bool AButtonDown;

		[Token(Token = "0x4001308")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5D")]
		public bool AButtonUp;

		[Token(Token = "0x4001309")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5E")]
		public bool BButton;

		[Token(Token = "0x400130A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5F")]
		[Tooltip("Returns true if the B Button was pressed down this frame but not last")]
		public bool BButtonDown;

		[Token(Token = "0x400130B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool BButtonUp;

		[Token(Token = "0x400130C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		public bool XButton;

		[Token(Token = "0x400130D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
		[Tooltip("Returns true if the X Button was pressed down this frame but not last")]
		public bool XButtonDown;

		[Token(Token = "0x400130E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x63")]
		public bool XButtonUp;

		[Token(Token = "0x400130F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public bool YButton;

		[Token(Token = "0x4001310")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
		public bool YButtonDown;

		[Token(Token = "0x4001311")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x66")]
		public bool YButtonUp;

		[Token(Token = "0x4001312")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x67")]
		public bool StartButton;

		[Token(Token = "0x4001313")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool StartButtonDown;

		[Token(Token = "0x4001314")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		public bool BackButton;

		[Token(Token = "0x4001315")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6A")]
		public bool BackButtonDown;

		[Token(Token = "0x4001316")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Header("Axis")]
		public Vector2 LeftThumbstickAxis;

		[Token(Token = "0x4001317")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public Vector2 RightThumbstickAxis;

		[Token(Token = "0x4001318")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public Vector2 LeftTouchPadAxis;

		[Token(Token = "0x4001319")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public Vector2 RightTouchPadAxis;

		[Token(Token = "0x400131A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[Header("Finger Tracking")]
		[Tooltip("SteamVR Only - Shows the curl value of the thumb. 0 = Fully extended, 1 = Fully Curled")]
		public float LeftThumbCurl;

		[Token(Token = "0x400131B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float LeftIndexCurl;

		[Token(Token = "0x400131C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public float LeftMiddleCurl;

		[Token(Token = "0x400131D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public float LeftRingCurl;

		[Token(Token = "0x400131E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public float LeftPinkyCurl;

		[Token(Token = "0x400131F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("SteamVR Only - Shows the curl value of the thumb. 0 = Fully extended, 1 = Fully Curled")]
		public float RightThumbCurl;

		[Token(Token = "0x4001320")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public float RightIndexCurl;

		[Token(Token = "0x4001321")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public float RightMiddleCurl;

		[Token(Token = "0x4001322")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public float RightRingCurl;

		[Token(Token = "0x4001323")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public float RightPinkyCurl;

		[Token(Token = "0x4001324")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private float _downThreshold;

		[Token(Token = "0x4001325")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private bool SteamVRSupport;

		[Token(Token = "0x4001326")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[Header("HMD / Hardware")]
		public ControllerType ConnectedControllerType;

		[Token(Token = "0x4001327")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Tooltip("Is there an HMD present and in use.")]
		public bool HMDActive;

		[Token(Token = "0x400132E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCD")]
		[Tooltip("Returns true if the controller has both a Touchpad and a Joystick. Currently on the Valve Index has both.")]
		public bool SupportsBothTouchPadAndJoystick;

		[Token(Token = "0x400132F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCE")]
		[Tooltip("Returns true if the controllers support the 'indexTouch' XR input mapping. Currently only Oculus devices on the Oculus SDK support thumb touch. OpenVR is not supported.")]
		public bool SupportsIndexTouch;

		[Token(Token = "0x4001330")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCF")]
		[Tooltip("Returns true if the controllers support the 'ThumbTouch' (or near thumbstick) XR input mapping. Currently only Oculus devices on the Oculus SDK support thumb touch. OpenVR is not supported.")]
		public bool SupportsThumbTouch;

		[Token(Token = "0x4001331")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static List<UnityEngine.XR.InputDevice> devices;

		[Token(Token = "0x4001334")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private InputAction leftGrip;

		[Token(Token = "0x4001335")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private InputAction leftTrigger;

		[Token(Token = "0x4001336")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private InputAction leftTriggerNear;

		[Token(Token = "0x4001337")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private InputAction rightGrip;

		[Token(Token = "0x4001338")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private InputAction rightTrigger;

		[Token(Token = "0x4001339")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private InputAction rightTriggerNear;

		[Token(Token = "0x400133A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private InputAction leftThumbstick;

		[Token(Token = "0x400133B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private InputAction leftThumbstickDown;

		[Token(Token = "0x400133C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private InputAction leftThumbNear;

		[Token(Token = "0x400133D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private InputAction leftTouchpad;

		[Token(Token = "0x400133E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private InputAction leftTouchpadDown;

		[Token(Token = "0x400133F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private InputAction rightThumbstick;

		[Token(Token = "0x4001340")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private InputAction rightThumbstickDown;

		[Token(Token = "0x4001341")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private InputAction rightThumbNear;

		[Token(Token = "0x4001342")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private InputAction rightTouchpad;

		[Token(Token = "0x4001343")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private InputAction rightTouchpadDown;

		[Token(Token = "0x4001344")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private InputAction aButton;

		[Token(Token = "0x4001345")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private InputAction bButton;

		[Token(Token = "0x4001346")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private InputAction xButton;

		[Token(Token = "0x4001347")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private InputAction yButton;

		[Token(Token = "0x4001348")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private InputAction startButton;

		[Token(Token = "0x4001349")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private InputAction backButton;

		[Token(Token = "0x400134A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		[HideInInspector]
		public bool ShowInputDebugger;

		[Token(Token = "0x400134B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private UnityEngine.XR.InputDevice primaryLeftController;

		[Token(Token = "0x400134C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		private UnityEngine.XR.InputDevice primaryRightController;

		[Token(Token = "0x400134D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		private InputFeatureUsage<Vector2> thumbstickAxis;

		[Token(Token = "0x400134E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		private InputFeatureUsage<Vector2> thumbstickAxisSecondary;

		[Token(Token = "0x400134F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		private InputFeatureUsage<bool> thumbstickAxisClick;

		[Token(Token = "0x4001350")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		private bool setTrackingOrigin;

		[Token(Token = "0x1700018F")]
		public static InputBridge Instance
		{
			[Token(Token = "0x600103D")]
			[Address(RVA = "0xA01460", Offset = "0xA01460", VA = "0xA01460")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000190")]
		public float DownThreshold
		{
			[Token(Token = "0x600103E")]
			[Address(RVA = "0xA111D0", Offset = "0xA111D0", VA = "0xA111D0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000191")]
		public SDKProvider LoadedSDK
		{
			[Token(Token = "0x600103F")]
			[Address(RVA = "0xA111D8", Offset = "0xA111D8", VA = "0xA111D8")]
			[CompilerGenerated]
			get
			{
				return default(SDKProvider);
			}
			[Token(Token = "0x6001040")]
			[Address(RVA = "0xA111E0", Offset = "0xA111E0", VA = "0xA111E0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000192")]
		public bool IsOculusDevice
		{
			[Token(Token = "0x6001041")]
			[Address(RVA = "0xA111E8", Offset = "0xA111E8", VA = "0xA111E8")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001042")]
			[Address(RVA = "0xA111F0", Offset = "0xA111F0", VA = "0xA111F0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000193")]
		public bool IsOculusQuest
		{
			[Token(Token = "0x6001043")]
			[Address(RVA = "0xA111FC", Offset = "0xA111FC", VA = "0xA111FC")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001044")]
			[Address(RVA = "0xA11204", Offset = "0xA11204", VA = "0xA11204")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000194")]
		public bool IsHTCDevice
		{
			[Token(Token = "0x6001045")]
			[Address(RVA = "0xA11210", Offset = "0xA11210", VA = "0xA11210")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001046")]
			[Address(RVA = "0xA11218", Offset = "0xA11218", VA = "0xA11218")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000195")]
		public bool IsPicoDevice
		{
			[Token(Token = "0x6001047")]
			[Address(RVA = "0xA11224", Offset = "0xA11224", VA = "0xA11224")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001048")]
			[Address(RVA = "0xA1122C", Offset = "0xA1122C", VA = "0xA1122C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000196")]
		public bool IsValveIndexController
		{
			[Token(Token = "0x6001049")]
			[Address(RVA = "0xA11238", Offset = "0xA11238", VA = "0xA11238")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600104A")]
			[Address(RVA = "0xA11240", Offset = "0xA11240", VA = "0xA11240")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x14000006")]
		public static event InputsUpdatedAction OnInputsUpdated
		{
			[Token(Token = "0x600104B")]
			[Address(RVA = "0xA1124C", Offset = "0xA1124C", VA = "0xA1124C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600104C")]
			[Address(RVA = "0xA11328", Offset = "0xA11328", VA = "0xA11328")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000007")]
		public static event ControllerFoundAction OnControllerFound
		{
			[Token(Token = "0x600104D")]
			[Address(RVA = "0xA0126C", Offset = "0xA0126C", VA = "0xA0126C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600104E")]
			[Address(RVA = "0xA0176C", Offset = "0xA0176C", VA = "0xA0176C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x600104F")]
		[Address(RVA = "0xA11404", Offset = "0xA11404", VA = "0xA11404")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001050")]
		[Address(RVA = "0xA1173C", Offset = "0xA1173C", VA = "0xA1173C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001051")]
		[Address(RVA = "0xA11750", Offset = "0xA11750", VA = "0xA11750")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001052")]
		[Address(RVA = "0xA11850", Offset = "0xA11850", VA = "0xA11850")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001053")]
		[Address(RVA = "0xA11940", Offset = "0xA11940", VA = "0xA11940")]
		private void Update()
		{
		}

		[Token(Token = "0x6001054")]
		[Address(RVA = "0xA1196C", Offset = "0xA1196C", VA = "0xA1196C", Slot = "4")]
		public virtual void UpdateInputs()
		{
		}

		[Token(Token = "0x6001055")]
		[Address(RVA = "0xA11A58", Offset = "0xA11A58", VA = "0xA11A58", Slot = "5")]
		public virtual void UpdateSteamInput()
		{
		}

		[Token(Token = "0x6001056")]
		[Address(RVA = "0xA11A5C", Offset = "0xA11A5C", VA = "0xA11A5C", Slot = "6")]
		public virtual void UpdateXRInput()
		{
		}

		[Token(Token = "0x6001057")]
		[Address(RVA = "0xA127C4", Offset = "0xA127C4", VA = "0xA127C4", Slot = "7")]
		public virtual void UpdateUnityInput()
		{
		}

		[Token(Token = "0x6001058")]
		[Address(RVA = "0xA12C0C", Offset = "0xA12C0C", VA = "0xA12C0C", Slot = "8")]
		public virtual void CreateUnityInputActions()
		{
		}

		[Token(Token = "0x6001059")]
		[Address(RVA = "0xA1331C", Offset = "0xA1331C", VA = "0xA1331C", Slot = "9")]
		public virtual void EnableActions()
		{
		}

		[Token(Token = "0x600105A")]
		[Address(RVA = "0xA13730", Offset = "0xA13730", VA = "0xA13730", Slot = "10")]
		public virtual void DisableActions()
		{
		}

		[Token(Token = "0x600105B")]
		[Address(RVA = "0xA13284", Offset = "0xA13284", VA = "0xA13284")]
		public InputAction CreateInputAction(string actionName, string binding, bool valueType)
		{
			return null;
		}

		[Token(Token = "0x600105C")]
		[Address(RVA = "0xA13B44", Offset = "0xA13B44", VA = "0xA13B44", Slot = "11")]
		public virtual void UpdateOVRInput()
		{
		}

		[Token(Token = "0x600105D")]
		[Address(RVA = "0xA13BB8", Offset = "0xA13BB8", VA = "0xA13BB8", Slot = "12")]
		public virtual void UpdatePicoInput()
		{
		}

		[Token(Token = "0x600105E")]
		[Address(RVA = "0xA13BBC", Offset = "0xA13BBC", VA = "0xA13BBC", Slot = "13")]
		public virtual void UpdateDeviceActive()
		{
		}

		[Token(Token = "0x600105F")]
		[Address(RVA = "0xA126E4", Offset = "0xA126E4", VA = "0xA126E4")]
		private float correctValue(float inputValue)
		{
			return default(float);
		}

		[Token(Token = "0x6001060")]
		[Address(RVA = "0xA13D40", Offset = "0xA13D40", VA = "0xA13D40")]
		public bool GetControllerBindingValue(ControllerBinding val)
		{
			return default(bool);
		}

		[Token(Token = "0x6001061")]
		[Address(RVA = "0xA13E94", Offset = "0xA13E94", VA = "0xA13E94")]
		public bool GetGrabbedControllerBinding(GrabbedControllerBinding val, ControllerHand hand)
		{
			return default(bool);
		}

		[Token(Token = "0x6001062")]
		[Address(RVA = "0xA13FAC", Offset = "0xA13FAC", VA = "0xA13FAC")]
		public Vector2 GetInputAxisValue(InputAxis val)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001063")]
		[Address(RVA = "0xA1267C", Offset = "0xA1267C", VA = "0xA1267C")]
		private Vector2 ApplyDeadZones(Vector2 pos, float deadZoneX, float deadZoneY)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001064")]
		[Address(RVA = "0xA14048", Offset = "0xA14048", VA = "0xA14048")]
		private void onDeviceChanged(UnityEngine.XR.InputDevice inputDevice)
		{
		}

		[Token(Token = "0x6001065")]
		[Address(RVA = "0xA11590", Offset = "0xA11590", VA = "0xA11590")]
		private void setDeviceProperties()
		{
		}

		[Token(Token = "0x6001066")]
		[Address(RVA = "0xA14070", Offset = "0xA14070", VA = "0xA14070", Slot = "14")]
		public virtual bool GetSupportsIndexTouch()
		{
			return default(bool);
		}

		[Token(Token = "0x6001067")]
		[Address(RVA = "0xA14078", Offset = "0xA14078", VA = "0xA14078", Slot = "15")]
		public virtual SDKProvider GetLoadedSDK()
		{
			return default(SDKProvider);
		}

		[Token(Token = "0x6001068")]
		[Address(RVA = "0xA14120", Offset = "0xA14120", VA = "0xA14120", Slot = "16")]
		public virtual bool GetSupportsThumbTouch()
		{
			return default(bool);
		}

		[Token(Token = "0x6001069")]
		[Address(RVA = "0xA14128", Offset = "0xA14128", VA = "0xA14128", Slot = "17")]
		public virtual bool GetIsOculusDevice()
		{
			return default(bool);
		}

		[Token(Token = "0x600106A")]
		[Address(RVA = "0xA141E4", Offset = "0xA141E4", VA = "0xA141E4", Slot = "18")]
		public virtual bool GetIsOculusQuest()
		{
			return default(bool);
		}

		[Token(Token = "0x600106B")]
		[Address(RVA = "0xA142EC", Offset = "0xA142EC", VA = "0xA142EC", Slot = "19")]
		public virtual bool GetIsHTCDevice()
		{
			return default(bool);
		}

		[Token(Token = "0x600106C")]
		[Address(RVA = "0xA1437C", Offset = "0xA1437C", VA = "0xA1437C", Slot = "20")]
		public virtual bool GetIsPicoDevice()
		{
			return default(bool);
		}

		[Token(Token = "0x600106D")]
		[Address(RVA = "0xA13C70", Offset = "0xA13C70", VA = "0xA13C70")]
		public UnityEngine.XR.InputDevice GetHMD()
		{
			return default(UnityEngine.XR.InputDevice);
		}

		[Token(Token = "0x600106E")]
		[Address(RVA = "0xA143F0", Offset = "0xA143F0", VA = "0xA143F0")]
		public string GetHMDName()
		{
			return null;
		}

		[Token(Token = "0x600106F")]
		[Address(RVA = "0xA14418", Offset = "0xA14418", VA = "0xA14418")]
		public Vector3 GetHMDLocalPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001070")]
		[Address(RVA = "0xA144A4", Offset = "0xA144A4", VA = "0xA144A4")]
		public Quaternion GetHMDLocalRotation()
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001071")]
		[Address(RVA = "0xA12474", Offset = "0xA12474", VA = "0xA12474")]
		public UnityEngine.XR.InputDevice GetLeftController()
		{
			return default(UnityEngine.XR.InputDevice);
		}

		[Token(Token = "0x6001072")]
		[Address(RVA = "0xA12544", Offset = "0xA12544", VA = "0xA12544")]
		public UnityEngine.XR.InputDevice GetRightController()
		{
			return default(UnityEngine.XR.InputDevice);
		}

		[Token(Token = "0x6001073")]
		[Address(RVA = "0xA1452C", Offset = "0xA1452C", VA = "0xA1452C")]
		public Vector3 GetControllerLocalPosition(ControllerHand handSide)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001074")]
		[Address(RVA = "0xA14614", Offset = "0xA14614", VA = "0xA14614")]
		public Quaternion GetControllerLocalRotation(ControllerHand handSide)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001075")]
		[Address(RVA = "0xA146F0", Offset = "0xA146F0", VA = "0xA146F0", Slot = "21")]
		public virtual ControllerType GetControllerType()
		{
			return default(ControllerType);
		}

		[Token(Token = "0x6001076")]
		[Address(RVA = "0xA14724", Offset = "0xA14724", VA = "0xA14724")]
		public Vector3 GetControllerVelocity(ControllerHand hand)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001077")]
		[Address(RVA = "0xA05944", Offset = "0xA05944", VA = "0xA05944")]
		public Vector3 GetControllerAngularVelocity(ControllerHand hand)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001078")]
		[Address(RVA = "0xA14800", Offset = "0xA14800", VA = "0xA14800", Slot = "22")]
		public virtual string GetControllerName()
		{
			return null;
		}

		[Token(Token = "0x6001079")]
		[Address(RVA = "0xA14958", Offset = "0xA14958", VA = "0xA14958", Slot = "23")]
		public virtual bool GetIsValveIndexController()
		{
			return default(bool);
		}

		[Token(Token = "0x600107A")]
		[Address(RVA = "0xA1269C", Offset = "0xA1269C", VA = "0xA1269C")]
		private float getFeatureUsage(UnityEngine.XR.InputDevice device, InputFeatureUsage<float> usage, bool clamp = true)
		{
			return default(float);
		}

		[Token(Token = "0x600107B")]
		[Address(RVA = "0xA12614", Offset = "0xA12614", VA = "0xA12614")]
		private bool getFeatureUsage(UnityEngine.XR.InputDevice device, InputFeatureUsage<bool> usage)
		{
			return default(bool);
		}

		[Token(Token = "0x600107C")]
		[Address(RVA = "0xA12648", Offset = "0xA12648", VA = "0xA12648")]
		private Vector2 getFeatureUsage(UnityEngine.XR.InputDevice device, InputFeatureUsage<Vector2> usage)
		{
			return default(Vector2);
		}

		[Token(Token = "0x600107D")]
		[Address(RVA = "0xA147C4", Offset = "0xA147C4", VA = "0xA147C4")]
		private Vector3 getFeatureUsage(UnityEngine.XR.InputDevice device, InputFeatureUsage<Vector3> usage)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600107E")]
		[Address(RVA = "0xA14A58", Offset = "0xA14A58", VA = "0xA14A58", Slot = "24")]
		public virtual void SetTrackingOriginMode(TrackingOriginModeFlags trackingOrigin)
		{
		}

		[Token(Token = "0x600107F")]
		[Address(RVA = "0xA14A78", Offset = "0xA14A78", VA = "0xA14A78")]
		[IteratorStateMachine(typeof(<changeOriginModeRoutine>d__177))]
		private IEnumerator changeOriginModeRoutine(TrackingOriginModeFlags trackingOrigin)
		{
			return null;
		}

		[Token(Token = "0x6001080")]
		[Address(RVA = "0xA10F34", Offset = "0xA10F34", VA = "0xA10F34")]
		public void VibrateController(float frequency, float amplitude, float duration, ControllerHand hand)
		{
		}

		[Token(Token = "0x6001081")]
		[Address(RVA = "0xA14AFC", Offset = "0xA14AFC", VA = "0xA14AFC")]
		[IteratorStateMachine(typeof(<Vibrate>d__179))]
		private IEnumerator Vibrate(float frequency, float amplitude, float duration, ControllerHand hand)
		{
			return null;
		}

		[Token(Token = "0x6001082")]
		[Address(RVA = "0xA14B6C", Offset = "0xA14B6C", VA = "0xA14B6C")]
		public InputBridge()
		{
		}
	}
	[Token(Token = "0x20002CD")]
	public class JoystickControl : MonoBehaviour
	{
		[Token(Token = "0x4001358")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Any values below this threshold will not be passed to events")]
		[Header("Deadzone")]
		public float DeadZone;

		[Token(Token = "0x4001359")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float MinDegrees;

		[Token(Token = "0x400135A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float MaxDegrees;

		[Token(Token = "0x400135B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float LeverPercentageX;

		[Token(Token = "0x400135C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float LeverPercentageY;

		[Token(Token = "0x400135D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector2 LeverVector;

		[Token(Token = "0x400135E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool UseSmoothLook;

		[Token(Token = "0x400135F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float SmoothLookSpeed;

		[Token(Token = "0x4001360")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public bool KinematicWhileInactive;

		[Token(Token = "0x4001361")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public FloatFloatEvent onJoystickChange;

		[Token(Token = "0x4001362")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector2Event onJoystickVectorChange;

		[Token(Token = "0x4001363")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Grabbable grab;

		[Token(Token = "0x4001364")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Rigidbody rb;

		[Token(Token = "0x4001365")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 currentRotation;

		[Token(Token = "0x4001366")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float angleX;

		[Token(Token = "0x4001367")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float angleY;

		[Token(Token = "0x6001098")]
		[Address(RVA = "0xA16210", Offset = "0xA16210", VA = "0xA16210")]
		private void Start()
		{
		}

		[Token(Token = "0x6001099")]
		[Address(RVA = "0xA162A0", Offset = "0xA162A0", VA = "0xA162A0")]
		private void Update()
		{
		}

		[Token(Token = "0x600109A")]
		[Address(RVA = "0xA16AAC", Offset = "0xA16AAC", VA = "0xA16AAC")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x600109B")]
		[Address(RVA = "0xA165C8", Offset = "0xA165C8", VA = "0xA165C8")]
		private void doJoystickLook()
		{
		}

		[Token(Token = "0x600109C")]
		[Address(RVA = "0xA16B58", Offset = "0xA16B58", VA = "0xA16B58", Slot = "4")]
		public virtual void OnJoystickChange(float leverX, float leverY)
		{
		}

		[Token(Token = "0x600109D")]
		[Address(RVA = "0xA16BCC", Offset = "0xA16BCC", VA = "0xA16BCC", Slot = "5")]
		public virtual void OnJoystickChange(Vector2 joystickVector)
		{
		}

		[Token(Token = "0x600109E")]
		[Address(RVA = "0xA16C40", Offset = "0xA16C40", VA = "0xA16C40")]
		public JoystickControl()
		{
		}
	}
	[Token(Token = "0x20002CE")]
	public class JoystickVehicleControl : MonoBehaviour
	{
		[Token(Token = "0x4001368")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Grab Object")]
		public Grabbable JoystickGrabbable;

		[Token(Token = "0x4001369")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Set to True to Lerp towards the held hand. Set to False for Instant movement")]
		[Header("Movement Speed")]
		public bool UseSmoothLook;

		[Token(Token = "0x400136A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float SmoothLookSpeed;

		[Token(Token = "0x400136B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Hinge X")]
		public Transform HingeXTransform;

		[Token(Token = "0x400136C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float MinXAngle;

		[Token(Token = "0x400136D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float MaxXAngle;

		[Token(Token = "0x400136E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Hinge Y")]
		public Transform HingeYTransform;

		[Token(Token = "0x400136F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float MinYAngle;

		[Token(Token = "0x4001370")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float MaxYAngle;

		[Token(Token = "0x4001371")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Header("Return To Center")]
		[Tooltip("How fast to return to center if nothing is holding the Joystick. Set to 0 if you do not wish to Return to Center")]
		public float ReturnToCenterSpeed;

		[Token(Token = "0x4001372")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Header("Deadzone")]
		[Tooltip("Any values below this threshold will not be passed to events")]
		public float DeadZone;

		[Token(Token = "0x4001373")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public FloatFloatEvent onJoystickChange;

		[Token(Token = "0x4001374")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Vector2Event onJoystickVectorChange;

		[Token(Token = "0x4001375")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Header("Shown for Debug : ")]
		public float LeverPercentageX;

		[Token(Token = "0x4001376")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float LeverPercentageY;

		[Token(Token = "0x4001377")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Vector2 LeverVector;

		[Token(Token = "0x4001378")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float angleX;

		[Token(Token = "0x4001379")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public float angleY;

		[Token(Token = "0x400137A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Quaternion originalRot;

		[Token(Token = "0x400137B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Header("Audio")]
		public AudioClip SwitchGearSound;

		[Token(Token = "0x400137C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private AudioSource audioSource;

		[Token(Token = "0x400137D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Called when lever was down, but is now in the up position")]
		public UnityEvent onLeverUp;

		[Token(Token = "0x400137E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Called if the lever changes position at all")]
		public FloatEvent onLeverChange;

		[Token(Token = "0x400137F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private bool isSoundPlay;

		[Token(Token = "0x600109F")]
		[Address(RVA = "0xA16C6C", Offset = "0xA16C6C", VA = "0xA16C6C")]
		private void Start()
		{
		}

		[Token(Token = "0x60010A0")]
		[Address(RVA = "0xA16CC4", Offset = "0xA16CC4", VA = "0xA16CC4")]
		private void Update()
		{
		}

		[Token(Token = "0x60010A1")]
		[Address(RVA = "0xA172D4", Offset = "0xA172D4", VA = "0xA172D4", Slot = "4")]
		public virtual void CallJoystickEvents()
		{
		}

		[Token(Token = "0x60010A2")]
		[Address(RVA = "0xA17410", Offset = "0xA17410", VA = "0xA17410", Slot = "5")]
		public virtual void OnJoystickChange(float leverX, float leverY)
		{
		}

		[Token(Token = "0x60010A3")]
		[Address(RVA = "0xA17484", Offset = "0xA17484", VA = "0xA17484", Slot = "6")]
		public virtual void OnJoystickChange(Vector2 joystickVector)
		{
		}

		[Token(Token = "0x60010A4")]
		[Address(RVA = "0xA174F8", Offset = "0xA174F8", VA = "0xA174F8")]
		public void GearSystem(float x, float y)
		{
		}

		[Token(Token = "0x60010A5")]
		[Address(RVA = "0xA1771C", Offset = "0xA1771C", VA = "0xA1771C")]
		public JoystickVehicleControl()
		{
		}
	}
	[Token(Token = "0x20002CF")]
	public class Lever : MonoBehaviour
	{
		[Token(Token = "0x4001380")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Rotation Limits")]
		[Tooltip("Minimum X value in Local Euler Angles")]
		public float MinimumXRotation;

		[Token(Token = "0x4001381")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Maximum X value in Local Euler Angles")]
		public float MaximumXRotation;

		[Token(Token = "0x4001382")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Initial Rotation")]
		public float InitialXRotation;

		[Token(Token = "0x4001383")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Audio")]
		public AudioClip SwitchOnSound;

		[Token(Token = "0x4001384")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AudioClip SwitchOffSound;

		[Token(Token = "0x4001385")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Tolerance")]
		[Tooltip("Tolerance before considering a switch flipped On or Off. Ex : 1.25 Tolerance means switch can be 98.25% up and considered switched on, or 1.25% down to be considered switched off.")]
		public float SwitchTolerance;

		[Token(Token = "0x4001386")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Header("Smooth Look")]
		[Tooltip("If true the lever will lerp towards the Grabber. If false the lever will instantly point to the grabber")]
		public bool UseSmoothLook;

		[Token(Token = "0x4001387")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The speed at which to Lerp towards the Grabber if UseSmoothLook is enabled")]
		public float SmoothLookSpeed;

		[Token(Token = "0x4001388")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("If false, the lever's rigidbody will be kinematic when not being held. Disable this if you don't want your lever to interact with physics or if you need moving platform support.")]
		[Header("Moving Platform Support")]
		public bool AllowPhysicsForces;

		[Token(Token = "0x4001389")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
		[Tooltip("If ReturnToCenter true and KinematicWhileInactive true then the lever will smooth look back to center when not being held")]
		[Header("Return to Center (Must be Kinematic)")]
		public bool ReturnToCenter;

		[Token(Token = "0x400138A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("How fast to return to center if not being held")]
		public float ReturnLookSpeed;

		[Token(Token = "0x400138B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("If true the lever will look directly at the Grabber and not factor in an initial offset")]
		[Header("Snap Settings")]
		public bool SnapToGrabber;

		[Token(Token = "0x400138C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
		[Tooltip("If true, the Lever will be dropped once switched on or off")]
		[Header("Misc")]
		public bool DropLeverOnActivation;

		[Token(Token = "0x400138D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Current position of the lever as expressed as a percentage 1-100")]
		[Header("Shown for Debug")]
		public float LeverPercentage;

		[Token(Token = "0x400138E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Tooltip("If true will show an angle helper in editor mode (Gizmos must be enabled)")]
		public bool ShowEditorGizmos;

		[Token(Token = "0x400138F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Called when lever was up, but is now in the down position")]
		[Header("Events")]
		public UnityEvent onLeverDown;

		[Token(Token = "0x4001390")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Called when lever was down, but is now in the up position")]
		public UnityEvent onLeverUp;

		[Token(Token = "0x4001391")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Called if the lever changes position at all")]
		public FloatEvent onLeverChange;

		[Token(Token = "0x4001392")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Grabbable grab;

		[Token(Token = "0x4001393")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Rigidbody rb;

		[Token(Token = "0x4001394")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private AudioSource audioSource;

		[Token(Token = "0x4001395")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public bool switchedOn;

		[Token(Token = "0x4001396")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private ConfigurableJoint configJoint;

		[Token(Token = "0x4001397")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private HingeJoint hingedJoint;

		[Token(Token = "0x4001398")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Vector3 _lastLocalAngle;

		[Token(Token = "0x4001399")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private float temp_angle;

		[Token(Token = "0x400139A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private bool isPlaySound;

		[Token(Token = "0x400139B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private Quaternion initialOffset;

		[Token(Token = "0x60010A6")]
		[Address(RVA = "0xA1779C", Offset = "0xA1779C", VA = "0xA1779C")]
		private void Start()
		{
		}

		[Token(Token = "0x60010A7")]
		[Address(RVA = "0xA179B4", Offset = "0xA179B4", VA = "0xA179B4")]
		private void Awake()
		{
		}

		[Token(Token = "0x60010A8")]
		[Address(RVA = "0xA179E4", Offset = "0xA179E4", VA = "0xA179E4")]
		private void Update()
		{
		}

		[Token(Token = "0x60010A9")]
		[Address(RVA = "0xA17C90", Offset = "0xA17C90", VA = "0xA17C90", Slot = "4")]
		public virtual float GetAnglePercentage(float currentAngle)
		{
			return default(float);
		}

		[Token(Token = "0x60010AA")]
		[Address(RVA = "0xA17E30", Offset = "0xA17E30", VA = "0xA17E30")]
		private void SoundPlay(float x)
		{
		}

		[Token(Token = "0x60010AB")]
		[Address(RVA = "0xA17EEC", Offset = "0xA17EEC", VA = "0xA17EEC")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60010AC")]
		[Address(RVA = "0xA17F68", Offset = "0xA17F68", VA = "0xA17F68")]
		private void doLeverLook()
		{
		}

		[Token(Token = "0x60010AD")]
		[Address(RVA = "0xA18500", Offset = "0xA18500", VA = "0xA18500", Slot = "5")]
		public virtual void SetLeverAngle(float angle)
		{
		}

		[Token(Token = "0x60010AE")]
		[Address(RVA = "0xA1854C", Offset = "0xA1854C", VA = "0xA1854C", Slot = "6")]
		public virtual void OnLeverChange(float percentage)
		{
		}

		[Token(Token = "0x60010AF")]
		[Address(RVA = "0xA185B8", Offset = "0xA185B8", VA = "0xA185B8", Slot = "7")]
		public virtual void OnLeverDown()
		{
		}

		[Token(Token = "0x60010B0")]
		[Address(RVA = "0xA186B4", Offset = "0xA186B4", VA = "0xA186B4", Slot = "8")]
		public virtual void OnLeverUp()
		{
		}

		[Token(Token = "0x60010B1")]
		[Address(RVA = "0xA187B4", Offset = "0xA187B4", VA = "0xA187B4")]
		public Lever()
		{
		}
	}
	[Token(Token = "0x20002D0")]
	public class LocomotionManager : MonoBehaviour
	{
		[Token(Token = "0x400139C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Locomotion Type")]
		[Tooltip("Default locomotion to use if nothing stored in playerprefs. 0 = Teleport. 1 = SmoothLocomotion")]
		public LocomotionType DefaultLocomotion;

		[Token(Token = "0x400139D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private LocomotionType selectedLocomotion;

		[Token(Token = "0x400139E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Save / Loading")]
		[Tooltip("If true, locomotion type will be saved and loaded from player prefs")]
		public bool LoadLocomotionFromPrefs;

		[Token(Token = "0x400139F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Input")]
		public List<ControllerBinding> locomotionToggleInput;

		[Token(Token = "0x40013A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The action used to toggle locomotion type")]
		public InputActionReference LocomotionToggleAction;

		[Token(Token = "0x40013A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private BNGPlayerController player;

		[Token(Token = "0x40013A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private PlayerTeleport teleport;

		[Token(Token = "0x40013A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private SmoothLocomotion smoothLocomotion;

		[Token(Token = "0x40013A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool actionToggle;

		[Token(Token = "0x1700019B")]
		public LocomotionType SelectedLocomotion
		{
			[Token(Token = "0x60010B2")]
			[Address(RVA = "0xA18840", Offset = "0xA18840", VA = "0xA18840")]
			get
			{
				return default(LocomotionType);
			}
		}

		[Token(Token = "0x60010B3")]
		[Address(RVA = "0xA18848", Offset = "0xA18848", VA = "0xA18848")]
		private void Start()
		{
		}

		[Token(Token = "0x60010B4")]
		[Address(RVA = "0xA189A4", Offset = "0xA189A4", VA = "0xA189A4")]
		private void Update()
		{
		}

		[Token(Token = "0x60010B5")]
		[Address(RVA = "0xA189D0", Offset = "0xA189D0", VA = "0xA189D0", Slot = "4")]
		public virtual void CheckControllerToggleInput()
		{
		}

		[Token(Token = "0x60010B6")]
		[Address(RVA = "0xA18AD8", Offset = "0xA18AD8", VA = "0xA18AD8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60010B7")]
		[Address(RVA = "0xA18BD8", Offset = "0xA18BD8", VA = "0xA18BD8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60010B8")]
		[Address(RVA = "0xA18CD8", Offset = "0xA18CD8", VA = "0xA18CD8")]
		public void OnLocomotionToggle(InputAction.CallbackContext context)
		{
		}

		[Token(Token = "0x60010B9")]
		[Address(RVA = "0xA18AB4", Offset = "0xA18AB4", VA = "0xA18AB4")]
		public void LocomotionToggle()
		{
		}

		[Token(Token = "0x60010BA")]
		[Address(RVA = "0xA18CE4", Offset = "0xA18CE4", VA = "0xA18CE4")]
		public void UpdateTeleportStatus()
		{
		}

		[Token(Token = "0x60010BB")]
		[Address(RVA = "0xA1892C", Offset = "0xA1892C", VA = "0xA1892C")]
		public void ChangeLocomotion(LocomotionType locomotionType, bool save)
		{
		}

		[Token(Token = "0x60010BC")]
		[Address(RVA = "0xA18D10", Offset = "0xA18D10", VA = "0xA18D10")]
		public void ChangeLocomotionType(LocomotionType loc)
		{
		}

		[Token(Token = "0x60010BD")]
		[Address(RVA = "0xA18E3C", Offset = "0xA18E3C", VA = "0xA18E3C")]
		private void toggleTeleport(bool enabled)
		{
		}

		[Token(Token = "0x60010BE")]
		[Address(RVA = "0xA18E78", Offset = "0xA18E78", VA = "0xA18E78")]
		private void toggleSmoothLocomotion(bool enabled)
		{
		}

		[Token(Token = "0x60010BF")]
		[Address(RVA = "0xA18F2C", Offset = "0xA18F2C", VA = "0xA18F2C")]
		public void ToggleLocomotionType()
		{
		}

		[Token(Token = "0x60010C0")]
		[Address(RVA = "0xA18F3C", Offset = "0xA18F3C", VA = "0xA18F3C")]
		public LocomotionManager()
		{
		}
	}
	[Token(Token = "0x20002D1")]
	public class PlayerClimbing : MonoBehaviour
	{
		[Token(Token = "0x40013A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Climbing Transforms")]
		public Transform LeftControllerTransform;

		[Token(Token = "0x40013A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform RightControllerTransform;

		[Token(Token = "0x40013A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Set the player's capsule collider height to this amount while climbing. This can allow you to shorten the capsule collider a bit, making it easier to navigate over ledges.")]
		[Header("Capsule Settings")]
		public float ClimbingCapsuleHeight;

		[Token(Token = "0x40013A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("Set the player's capsule collider capsule center to this amount while climbing.")]
		public float ClimbingCapsuleCenter;

		[Token(Token = "0x40013A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Haptics")]
		public bool ApplyHapticsOnGrab;

		[Token(Token = "0x40013AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("Frequency of haptics to play on grab if 'ApplyHapticsOnGrab' is true")]
		public float VibrateFrequency;

		[Token(Token = "0x40013AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Amplitute of haptics to play on grab if 'ApplyHapticsOnGrab' is true")]
		public float VibrateAmplitude;

		[Token(Token = "0x40013AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("Duration of haptics to play on grab if 'ApplyHapticsOnGrab' is true")]
		public float VibrateDuration;

		[Token(Token = "0x40013AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<Grabber> climbers;

		[Token(Token = "0x40013AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool wasGrippingClimbable;

		[Token(Token = "0x40013AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private CharacterController characterController;

		[Token(Token = "0x40013B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private SmoothLocomotion smoothLocomotion;

		[Token(Token = "0x40013B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private PlayerGravity playerGravity;

		[Token(Token = "0x40013B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Rigidbody playerRigid;

		[Token(Token = "0x40013B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool _checkedRigidPlayer;

		[Token(Token = "0x40013B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		private bool _isRigidPlayer;

		[Token(Token = "0x40013B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x72")]
		[Header("Shown for Debug : ")]
		public bool GrippingClimbable;

		[Token(Token = "0x40013B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private Vector3 moveDirection;

		[Token(Token = "0x40013B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector3 previousLeftControllerPosition;

		[Token(Token = "0x40013B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private Vector3 previousRightControllerPosition;

		[Token(Token = "0x40013B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3 controllerMoveAmount;

		[Token(Token = "0x1700019C")]
		public bool IsRigidbodyPlayer
		{
			[Token(Token = "0x60010C1")]
			[Address(RVA = "0xA19038", Offset = "0xA19038", VA = "0xA19038")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60010C2")]
		[Address(RVA = "0xA190E4", Offset = "0xA190E4", VA = "0xA190E4")]
		public void Start()
		{
		}

		[Token(Token = "0x60010C3")]
		[Address(RVA = "0xA19230", Offset = "0xA19230", VA = "0xA19230")]
		public void LateUpdate()
		{
		}

		[Token(Token = "0x60010C4")]
		[Address(RVA = "0xA19304", Offset = "0xA19304", VA = "0xA19304", Slot = "4")]
		public virtual void AddClimber(Climbable climbable, Grabber grab)
		{
		}

		[Token(Token = "0x60010C5")]
		[Address(RVA = "0xA19684", Offset = "0xA19684", VA = "0xA19684", Slot = "5")]
		public virtual void RemoveClimber(Grabber grab)
		{
		}

		[Token(Token = "0x60010C6")]
		[Address(RVA = "0xA19794", Offset = "0xA19794", VA = "0xA19794", Slot = "6")]
		public virtual bool GrippingAtLeastOneClimbable()
		{
			return default(bool);
		}

		[Token(Token = "0x60010C7")]
		[Address(RVA = "0xA198F0", Offset = "0xA198F0", VA = "0xA198F0", Slot = "7")]
		protected virtual void checkClimbing()
		{
		}

		[Token(Token = "0x60010C8")]
		[Address(RVA = "0xA19E7C", Offset = "0xA19E7C", VA = "0xA19E7C")]
		private void DoPhysicalClimbing()
		{
		}

		[Token(Token = "0x60010C9")]
		[Address(RVA = "0xA19CFC", Offset = "0xA19CFC", VA = "0xA19CFC")]
		private void onGrabbedClimbable()
		{
		}

		[Token(Token = "0x60010CA")]
		[Address(RVA = "0xA19DB8", Offset = "0xA19DB8", VA = "0xA19DB8")]
		private void onReleasedClimbable()
		{
		}

		[Token(Token = "0x60010CB")]
		[Address(RVA = "0xA1A230", Offset = "0xA1A230", VA = "0xA1A230")]
		public PlayerClimbing()
		{
		}
	}
	[Token(Token = "0x20002D2")]
	public class PlayerGravity : MonoBehaviour
	{
		[Token(Token = "0x40013BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("If true, will apply gravity to the CharacterController component, or RigidBody if no CC is present.")]
		public bool GravityEnabled;

		[Token(Token = "0x40013BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Amount of Gravity to apply to the CharacterController or Rigidbody. Default is 'Physics.gravity'.")]
		public Vector3 Gravity;

		[Token(Token = "0x40013BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private CharacterController characterController;

		[Token(Token = "0x40013BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private SmoothLocomotion smoothLocomotion;

		[Token(Token = "0x40013BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Rigidbody playerRigidbody;

		[Token(Token = "0x40013BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float _movementY;

		[Token(Token = "0x40013C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Vector3 _initialGravityModifier;

		[Token(Token = "0x40013C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool _validRigidBody;

		[Token(Token = "0x60010CC")]
		[Address(RVA = "0xA1A2B8", Offset = "0xA1A2B8", VA = "0xA1A2B8")]
		private void Start()
		{
		}

		[Token(Token = "0x60010CD")]
		[Address(RVA = "0xA1A3D8", Offset = "0xA1A3D8", VA = "0xA1A3D8")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60010CE")]
		[Address(RVA = "0xA1A550", Offset = "0xA1A550", VA = "0xA1A550")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60010CF")]
		[Address(RVA = "0xA1A1B8", Offset = "0xA1A1B8", VA = "0xA1A1B8")]
		public void ToggleGravity(bool gravityOn)
		{
		}

		[Token(Token = "0x60010D0")]
		[Address(RVA = "0xA1A628", Offset = "0xA1A628", VA = "0xA1A628")]
		public PlayerGravity()
		{
		}
	}
	[Token(Token = "0x20002D3")]
	public class PlayerMovingPlatformSupport : MonoBehaviour
	{
		[Token(Token = "0x40013C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Ground checks : ")]
		[Tooltip("Raycast against these layers to check if player is on a moving platform")]
		public LayerMask GroundedLayers;

		[Token(Token = "0x40013C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		protected RaycastHit groundHit;

		[Token(Token = "0x40013C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private SmoothLocomotion smoothLocomotion;

		[Token(Token = "0x40013C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private CharacterController characterController;

		[Token(Token = "0x40013C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform _initialCharacterParent;

		[Token(Token = "0x40013C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float DistanceFromGround;

		[Token(Token = "0x40013C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public MovingPlatform CurrentPlatform;

		[Token(Token = "0x40013C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool wasOnPlatform;

		[Token(Token = "0x40013CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		private bool requiresReparent;

		[Token(Token = "0x40013CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject _lastHitObject;

		[Token(Token = "0x60010D1")]
		[Address(RVA = "0xA1A658", Offset = "0xA1A658", VA = "0xA1A658")]
		private void Start()
		{
		}

		[Token(Token = "0x60010D2")]
		[Address(RVA = "0xA1A714", Offset = "0xA1A714", VA = "0xA1A714")]
		private void Update()
		{
		}

		[Token(Token = "0x60010D3")]
		[Address(RVA = "0xA1A720", Offset = "0xA1A720", VA = "0xA1A720")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60010D4")]
		[Address(RVA = "0xA1A72C", Offset = "0xA1A72C", VA = "0xA1A72C", Slot = "4")]
		public virtual void CheckMovingPlatform()
		{
		}

		[Token(Token = "0x60010D5")]
		[Address(RVA = "0xA1AAC0", Offset = "0xA1AAC0", VA = "0xA1AAC0", Slot = "5")]
		public virtual void UpdateCurrentPlatform()
		{
		}

		[Token(Token = "0x60010D6")]
		[Address(RVA = "0xA1ABC4", Offset = "0xA1ABC4", VA = "0xA1ABC4", Slot = "6")]
		public virtual void UpdateDistanceFromGround()
		{
		}

		[Token(Token = "0x60010D7")]
		[Address(RVA = "0xA1AFB8", Offset = "0xA1AFB8", VA = "0xA1AFB8")]
		public PlayerMovingPlatformSupport()
		{
		}
	}
	[Token(Token = "0x20002D4")]
	public enum RotationMechanic
	{
		[Token(Token = "0x40013CD")]
		Snap,
		[Token(Token = "0x40013CE")]
		Smooth
	}
	[Token(Token = "0x20002D5")]
	public class PlayerRotation : MonoBehaviour
	{
		[Token(Token = "0x20002D6")]
		public delegate void OnBeforeRotateAction();

		[Token(Token = "0x20002D7")]
		public delegate void OnAfterRotateAction();

		[Token(Token = "0x40013CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Input")]
		[Tooltip("Set to false to skip Update")]
		public bool AllowInput;

		[Token(Token = "0x40013D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Used to determine whether to turn left / right. This can be an X Axis on the thumbstick, for example. -1 to snap left, 1 to snap right.")]
		public List<InputAxis> inputAxis;

		[Token(Token = "0x40013D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Unity Input Action used to rotate the player")]
		public InputActionReference RotateAction;

		[Token(Token = "0x40013D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Snap rotation will rotate a fixed amount of degrees on turn. Smooth will linearly rotate the player.")]
		[Header("Smooth / Snap Turning")]
		public RotationMechanic RotationType;

		[Token(Token = "0x40013D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("How many degrees to rotate if RotationType is set to 'Snap'")]
		[Header("Snap Turn Settings")]
		public float SnapRotationAmount;

		[Token(Token = "0x40013D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Thumbstick X axis must be >= this amount to be considered an input event")]
		public float SnapInputAmount;

		[Token(Token = "0x40013D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Header("Smooth Turn Settings")]
		[Tooltip("How fast to rotate the player if RotationType is set to 'Smooth'")]
		public float SmoothTurnSpeed;

		[Token(Token = "0x40013D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Thumbstick X axis must be >= this amount to be considered an input event")]
		public float SmoothTurnMinInput;

		[Token(Token = "0x40013D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float recentSnapTurnTime;

		[Token(Token = "0x40013D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float rotationAmount;

		[Token(Token = "0x40013D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float xAxis;

		[Token(Token = "0x40013DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float previousXInput;

		[Token(Token = "0x14000008")]
		public static event OnBeforeRotateAction OnBeforeRotate
		{
			[Token(Token = "0x60010D8")]
			[Address(RVA = "0xA1AFC0", Offset = "0xA1AFC0", VA = "0xA1AFC0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60010D9")]
			[Address(RVA = "0xA1B078", Offset = "0xA1B078", VA = "0xA1B078")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000009")]
		public static event OnAfterRotateAction OnAfterRotate
		{
			[Token(Token = "0x60010DA")]
			[Address(RVA = "0xA1B130", Offset = "0xA1B130", VA = "0xA1B130")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60010DB")]
			[Address(RVA = "0xA1B1EC", Offset = "0xA1B1EC", VA = "0xA1B1EC")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x60010DC")]
		[Address(RVA = "0xA1B2A8", Offset = "0xA1B2A8", VA = "0xA1B2A8")]
		private void Update()
		{
		}

		[Token(Token = "0x60010DD")]
		[Address(RVA = "0xA1B304", Offset = "0xA1B304", VA = "0xA1B304", Slot = "4")]
		public virtual float GetAxisInput()
		{
			return default(float);
		}

		[Token(Token = "0x60010DE")]
		[Address(RVA = "0xA1B49C", Offset = "0xA1B49C", VA = "0xA1B49C", Slot = "5")]
		public virtual void DoSnapRotation(float xInput)
		{
		}

		[Token(Token = "0x60010DF")]
		[Address(RVA = "0xA1B678", Offset = "0xA1B678", VA = "0xA1B678", Slot = "6")]
		public virtual bool RecentlySnapTurned()
		{
			return default(bool);
		}

		[Token(Token = "0x60010E0")]
		[Address(RVA = "0xA1B6A8", Offset = "0xA1B6A8", VA = "0xA1B6A8", Slot = "7")]
		public virtual void DoSmoothRotation(float xInput)
		{
		}

		[Token(Token = "0x60010E1")]
		[Address(RVA = "0xA1B7A4", Offset = "0xA1B7A4", VA = "0xA1B7A4")]
		public PlayerRotation()
		{
		}
	}
	[Token(Token = "0x20002D8")]
	public enum TeleportControls
	{
		[Token(Token = "0x40013DE")]
		ThumbstickRotate,
		[Token(Token = "0x40013DF")]
		ThumbstickDown,
		[Token(Token = "0x40013E0")]
		BButton,
		[Token(Token = "0x40013E1")]
		None
	}
	[Token(Token = "0x20002D9")]
	public class PlayerTeleport : MonoBehaviour
	{
		[Token(Token = "0x20002DA")]
		public delegate void OnBeforeTeleportFadeAction();

		[Token(Token = "0x20002DB")]
		public delegate void OnBeforeTeleportAction();

		[Token(Token = "0x20002DC")]
		public delegate void OnAfterTeleportAction();

		[Token(Token = "0x20002DD")]
		[CompilerGenerated]
		private sealed class <doTeleport>d__83 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001416")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001417")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001418")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PlayerTeleport <>4__this;

			[Token(Token = "0x4001419")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 playerDestination;

			[Token(Token = "0x400141A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public bool rotatePlayer;

			[Token(Token = "0x400141B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Quaternion playerRotation;

			[Token(Token = "0x170001A0")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600111A")]
				[Address(RVA = "0xA1E978", Offset = "0xA1E978", VA = "0xA1E978", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001A1")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600111C")]
				[Address(RVA = "0xA1E9C0", Offset = "0xA1E9C0", VA = "0xA1E9C0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001117")]
			[Address(RVA = "0xA1DC18", Offset = "0xA1DC18", VA = "0xA1DC18")]
			[DebuggerHidden]
			public <doTeleport>d__83(int <>1__state)
			{
			}

			[Token(Token = "0x6001118")]
			[Address(RVA = "0xA1E598", Offset = "0xA1E598", VA = "0xA1E598", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001119")]
			[Address(RVA = "0xA1E59C", Offset = "0xA1E59C", VA = "0xA1E59C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600111B")]
			[Address(RVA = "0xA1E980", Offset = "0xA1E980", VA = "0xA1E980", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40013E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The LineRenderer to use when showing a teleport preview")]
		[Header("Colors")]
		public LineRenderer TeleportLine;

		[Token(Token = "0x40013E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("If a Valid Teleport destination is found, color of 'TeleportLine' will be updated to this.")]
		public Color ValidTeleport;

		[Token(Token = "0x40013E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("If a Valid Teleport destination is not found, color of 'TeleportLine' will be updated to this.")]
		public Color InvalidTeleport;

		[Token(Token = "0x40013E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Whether the Teleport should initiate from the left or right controller. This affects input and where the teleport line should begin from.")]
		[Header("Hand Side")]
		public ControllerHand HandSide;

		[Token(Token = "0x40013E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Where the Teleport Line should begin if using the left ControllerHand")]
		[Header("Transform Definitions")]
		public Transform TeleportBeginTransform;

		[Token(Token = "0x40013E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Where the Teleport Line should begin if using the right ControllerHand")]
		public Transform TeleportBeginTransformAlt;

		[Token(Token = "0x40013E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Transform indicating where Player should be placed on teleport.")]
		public Transform TeleportDestination;

		[Token(Token = "0x40013E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HideInInspector]
		[Tooltip("The TeleportDestination if we are hitting one. Null if not.")]
		public TeleportDestination DestinationObject;

		[Token(Token = "0x40013EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("GameObject to move around when initiating a teleport.")]
		public GameObject TeleportMarker;

		[Token(Token = "0x40013EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Transform indicating direction Player will rotate to on teleport.")]
		public Transform DirectionIndicator;

		[Token(Token = "0x40013EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Header("Teleport Physics")]
		public float MaxRange;

		[Token(Token = "0x40013ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[Tooltip("More segments means a smoother line, at the cost of performance.")]
		public int SegmentCount;

		[Token(Token = "0x40013EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("How much velocity to apply when calculating a parabola. Set to a very high number for a straight line.")]
		public float SimulationVelocity;

		[Token(Token = "0x40013EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[Tooltip("Scale of each segment used when calculating parabola")]
		public float SegmentScale;

		[Token(Token = "0x40013F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Header("Layers")]
		[Tooltip("Raycast layers to use when determining collision")]
		public LayerMask CollisionLayers;

		[Token(Token = "0x40013F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[Tooltip("Raycast layers to use when determining if the collided object is a valid teleport. If it is not valid then the line will be red and unable to teleport.")]
		public LayerMask ValidLayers;

		[Token(Token = "0x40013F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Header("Controls")]
		[Tooltip("Method used to initiate a teleport. If these don't fit your needs you can override the KeyDownForTeleport() and KeyUpFromTeleport() methods.")]
		public TeleportControls ControlType;

		[Token(Token = "0x40013F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Unity Input Action used to initiate Teleport")]
		public InputActionReference InitiateTeleportAction;

		[Token(Token = "0x40013F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("If true the user can rotate the teleport marker before initiating a teleport.")]
		public bool AllowTeleportRotation;

		[Token(Token = "0x40013F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA1")]
		private bool _reachThumbThreshold;

		[Token(Token = "0x40013F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA2")]
		[Tooltip("If true the teleport marker will always be the same rotation as the player")]
		public bool ForceStraightArrow;

		[Token(Token = "0x40013F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[Tooltip("Max Angle / Slope the teleport marker can be to be considered a valid teleport.")]
		[Header("Slope")]
		public float MaxSlope;

		[Token(Token = "0x40013F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Header("Offset")]
		[Tooltip("Offset the player's Y position from TeleportDestination")]
		public float TeleportYOffset;

		[Token(Token = "0x40013F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[Tooltip("Use ScreenFader on teleportation if true.")]
		[Header("Screen Fade")]
		public bool FadeScreenOnTeleport;

		[Token(Token = "0x40013FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Tooltip("If FadeScreenOnTeleport = true, fade the screen at this speed.")]
		public float TeleportFadeSpeed;

		[Token(Token = "0x40013FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[Tooltip("Seconds to wait before initiating teleport. Useful if you want to fade the screen  before teleporting.")]
		public float TeleportDelay;

		[Token(Token = "0x40013FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[Header("Physics Material")]
		[Tooltip("Physics Material to apply to the sphere collider when no controls are being issued.")]
		public PhysicMaterial FrictionMaterial;

		[Token(Token = "0x40013FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private CharacterController controller;

		[Token(Token = "0x40013FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private BNGPlayerController playerController;

		[Token(Token = "0x40013FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Rigidbody playerRigid;

		[Token(Token = "0x4001400")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private InputBridge input;

		[Token(Token = "0x4001401")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Transform cameraRig;

		[Token(Token = "0x4001402")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private ScreenFader fader;

		[Token(Token = "0x4001403")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		protected bool aimingTeleport;

		[Token(Token = "0x4001404")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF1")]
		protected bool validTeleport;

		[Token(Token = "0x4001405")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF2")]
		protected bool teleportationEnabled;

		[Token(Token = "0x4001406")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private int _invalidFrames;

		[Token(Token = "0x4001407")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private float _initialLineWidth;

		[Token(Token = "0x400140B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		private bool setVariables;

		[Token(Token = "0x400140C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private Collider _hitObject;

		[Token(Token = "0x400140D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Vector3 _hitVector;

		[Token(Token = "0x400140E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		private float _hitAngle;

		[Token(Token = "0x400140F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private RaycastHit hit;

		[Token(Token = "0x4001410")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private Vector3[] segments;

		[Token(Token = "0x4001411")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private Vector3 segVelocity;

		[Token(Token = "0x4001412")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
		private float segTime;

		[Token(Token = "0x4001413")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private int segCount;

		[Token(Token = "0x4001414")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		private bool isDestination;

		[Token(Token = "0x4001415")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private Vector2 teleportAxis;

		[Token(Token = "0x1700019D")]
		private Transform teleportTransform
		{
			[Token(Token = "0x60010EA")]
			[Address(RVA = "0xA1BAC8", Offset = "0xA1BAC8", VA = "0xA1BAC8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700019E")]
		private Vector2 handedThumbstickAxis
		{
			[Token(Token = "0x60010EB")]
			[Address(RVA = "0xA1BAE4", Offset = "0xA1BAE4", VA = "0xA1BAE4")]
			get
			{
				return default(Vector2);
			}
		}

		[Token(Token = "0x1700019F")]
		public bool AimingTeleport
		{
			[Token(Token = "0x60010EC")]
			[Address(RVA = "0xA1BB24", Offset = "0xA1BB24", VA = "0xA1BB24")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1400000A")]
		public static event OnBeforeTeleportFadeAction OnBeforeTeleportFade
		{
			[Token(Token = "0x60010ED")]
			[Address(RVA = "0xA1BB2C", Offset = "0xA1BB2C", VA = "0xA1BB2C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60010EE")]
			[Address(RVA = "0xA1BBE4", Offset = "0xA1BBE4", VA = "0xA1BBE4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400000B")]
		public static event OnBeforeTeleportAction OnBeforeTeleport
		{
			[Token(Token = "0x60010EF")]
			[Address(RVA = "0xA1BC9C", Offset = "0xA1BC9C", VA = "0xA1BC9C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60010F0")]
			[Address(RVA = "0xA1BD58", Offset = "0xA1BD58", VA = "0xA1BD58")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400000C")]
		public static event OnAfterTeleportAction OnAfterTeleport
		{
			[Token(Token = "0x60010F1")]
			[Address(RVA = "0xA1BE14", Offset = "0xA1BE14", VA = "0xA1BE14")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60010F2")]
			[Address(RVA = "0xA1BED0", Offset = "0xA1BED0", VA = "0xA1BED0")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x60010F3")]
		[Address(RVA = "0xA1BF8C", Offset = "0xA1BF8C", VA = "0xA1BF8C")]
		private void Start()
		{
		}

		[Token(Token = "0x60010F4")]
		[Address(RVA = "0xA1C304", Offset = "0xA1C304", VA = "0xA1C304")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60010F5")]
		[Address(RVA = "0xA1BF90", Offset = "0xA1BF90", VA = "0xA1BF90")]
		private void setupVariables()
		{
		}

		[Token(Token = "0x60010F6")]
		[Address(RVA = "0xA1C3EC", Offset = "0xA1C3EC", VA = "0xA1C3EC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60010F7")]
		[Address(RVA = "0xA1C478", Offset = "0xA1C478", VA = "0xA1C478")]
		public void DoCheckTeleport()
		{
		}

		[Token(Token = "0x60010F8")]
		[Address(RVA = "0xA1C57C", Offset = "0xA1C57C", VA = "0xA1C57C")]
		public void TryOrHideTeleport()
		{
		}

		[Token(Token = "0x60010F9")]
		[Address(RVA = "0xA18F0C", Offset = "0xA18F0C", VA = "0xA18F0C")]
		public void EnableTeleportation()
		{
		}

		[Token(Token = "0x60010FA")]
		[Address(RVA = "0xA18F18", Offset = "0xA18F18", VA = "0xA18F18")]
		public void DisableTeleportation()
		{
		}

		[Token(Token = "0x60010FB")]
		[Address(RVA = "0xA1C598", Offset = "0xA1C598", VA = "0xA1C598", Slot = "4")]
		protected virtual void calculateParabola()
		{
		}

		[Token(Token = "0x60010FC")]
		[Address(RVA = "0xA1D034", Offset = "0xA1D034", VA = "0xA1D034", Slot = "5")]
		protected virtual bool teleportClear()
		{
			return default(bool);
		}

		[Token(Token = "0x60010FD")]
		[Address(RVA = "0xA1D29C", Offset = "0xA1D29C", VA = "0xA1D29C", Slot = "6")]
		protected virtual void hideTeleport()
		{
		}

		[Token(Token = "0x60010FE")]
		[Address(RVA = "0xA1D2F0", Offset = "0xA1D2F0", VA = "0xA1D2F0", Slot = "7")]
		protected virtual void updateTeleport()
		{
		}

		[Token(Token = "0x60010FF")]
		[Address(RVA = "0xA1D348", Offset = "0xA1D348", VA = "0xA1D348", Slot = "8")]
		protected virtual void rotateMarker()
		{
		}

		[Token(Token = "0x6001100")]
		[Address(RVA = "0xA1D6C4", Offset = "0xA1D6C4", VA = "0xA1D6C4", Slot = "9")]
		protected virtual void tryTeleport()
		{
		}

		[Token(Token = "0x6001101")]
		[Address(RVA = "0xA1D98C", Offset = "0xA1D98C", VA = "0xA1D98C", Slot = "10")]
		public virtual void BeforeTeleportFade()
		{
		}

		[Token(Token = "0x6001102")]
		[Address(RVA = "0xA1DA54", Offset = "0xA1DA54", VA = "0xA1DA54", Slot = "11")]
		public virtual void BeforeTeleport()
		{
		}

		[Token(Token = "0x6001103")]
		[Address(RVA = "0xA1DB1C", Offset = "0xA1DB1C", VA = "0xA1DB1C", Slot = "12")]
		public virtual void AfterTeleport()
		{
		}

		[Token(Token = "0x6001104")]
		[Address(RVA = "0xA1D8B8", Offset = "0xA1D8B8", VA = "0xA1D8B8")]
		[IteratorStateMachine(typeof(<doTeleport>d__83))]
		private IEnumerator doTeleport(Vector3 playerDestination, Quaternion playerRotation, bool rotatePlayer)
		{
			return null;
		}

		[Token(Token = "0x6001105")]
		[Address(RVA = "0xA1DC40", Offset = "0xA1DC40", VA = "0xA1DC40")]
		public void TeleportPlayer(Vector3 destination, Quaternion rotation)
		{
		}

		[Token(Token = "0x6001106")]
		[Address(RVA = "0xA1DC64", Offset = "0xA1DC64", VA = "0xA1DC64")]
		public void TeleportPlayerToTransform(Transform destination)
		{
		}

		[Token(Token = "0x6001107")]
		[Address(RVA = "0xA1DD00", Offset = "0xA1DD00", VA = "0xA1DD00", Slot = "13")]
		public virtual bool KeyDownForTeleport()
		{
			return default(bool);
		}

		[Token(Token = "0x6001108")]
		[Address(RVA = "0xA1DFD0", Offset = "0xA1DFD0", VA = "0xA1DFD0", Slot = "14")]
		public virtual bool KeyUpFromTeleport()
		{
			return default(bool);
		}

		[Token(Token = "0x6001109")]
		[Address(RVA = "0xA1E0C0", Offset = "0xA1E0C0", VA = "0xA1E0C0")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x600110A")]
		[Address(RVA = "0xA1E1CC", Offset = "0xA1E1CC", VA = "0xA1E1CC")]
		public PlayerTeleport()
		{
		}
	}
	[Token(Token = "0x20002DE")]
	public class PointerEvents : MonoBehaviour, IPointerClickHandler, IEventSystemHandler, IPointerEnterHandler, IPointerExitHandler, IPointerDownHandler, IPointerUpHandler
	{
		[Token(Token = "0x400141C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Maximium Distance")]
		[Tooltip("Maximum Distance this object can be from the UIPointer to be considered valid and receive events")]
		public float MaxDistance;

		[Token(Token = "0x400141D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("If True then the Unity Events below will be sent. Set to False if you need to disable sending pointer events.")]
		[Header("Enable Events")]
		public bool Enabled;

		[Token(Token = "0x400141E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Unity Events : ")]
		public PointerEventDataEvent OnPointerClickEvent;

		[Token(Token = "0x400141F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public PointerEventDataEvent OnPointerEnterEvent;

		[Token(Token = "0x4001420")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public PointerEventDataEvent OnPointerExitEvent;

		[Token(Token = "0x4001421")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public PointerEventDataEvent OnPointerDownEvent;

		[Token(Token = "0x4001422")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public PointerEventDataEvent OnPointerUpEvent;

		[Token(Token = "0x600111D")]
		[Address(RVA = "0xA1E9C8", Offset = "0xA1E9C8", VA = "0xA1E9C8", Slot = "9")]
		public virtual void OnPointerClick(PointerEventData eventData)
		{
		}

		[Token(Token = "0x600111E")]
		[Address(RVA = "0xA1EA44", Offset = "0xA1EA44", VA = "0xA1EA44", Slot = "10")]
		public virtual void OnPointerEnter(PointerEventData eventData)
		{
		}

		[Token(Token = "0x600111F")]
		[Address(RVA = "0xA1EAC0", Offset = "0xA1EAC0", VA = "0xA1EAC0", Slot = "11")]
		public virtual void OnPointerExit(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001120")]
		[Address(RVA = "0xA1EB20", Offset = "0xA1EB20", VA = "0xA1EB20", Slot = "12")]
		public virtual void OnPointerDown(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001121")]
		[Address(RVA = "0xA1EB9C", Offset = "0xA1EB9C", VA = "0xA1EB9C", Slot = "13")]
		public virtual void OnPointerUp(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001122")]
		[Address(RVA = "0xA1EBFC", Offset = "0xA1EBFC", VA = "0xA1EBFC", Slot = "14")]
		public virtual bool DistanceExceeded(PointerEventData eventData)
		{
			return default(bool);
		}

		[Token(Token = "0x6001123")]
		[Address(RVA = "0xA1EC1C", Offset = "0xA1EC1C", VA = "0xA1EC1C")]
		public PointerEvents()
		{
		}
	}
	[Token(Token = "0x20002DF")]
	public enum RemoteGrabType
	{
		[Token(Token = "0x4001424")]
		Trigger,
		[Token(Token = "0x4001425")]
		Raycast,
		[Token(Token = "0x4001426")]
		Spherecast
	}
	[Token(Token = "0x20002E0")]
	public class RemoteGrabber : MonoBehaviour
	{
		[Token(Token = "0x4001427")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RemoteGrabType PhysicsCheckType;

		[Token(Token = "0x4001428")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("If PhysicsCheckType = Trigger and this is true, an additonal raycast check will occur to check for obstacles in the way")]
		public bool TriggerRequiresRaycast;

		[Token(Token = "0x4001429")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float RaycastLength;

		[Token(Token = "0x400142A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float SphereCastLength;

		[Token(Token = "0x400142B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float SphereCastRadius;

		[Token(Token = "0x400142C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public LayerMask RemoteGrabLayers;

		[Token(Token = "0x400142D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GrabbablesInTrigger ParentGrabber;

		[Token(Token = "0x400142E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Collider _lastColliderHit;

		[Token(Token = "0x400142F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool ShowGizmos;

		[Token(Token = "0x6001124")]
		[Address(RVA = "0xA1EC34", Offset = "0xA1EC34", VA = "0xA1EC34")]
		private void Start()
		{
		}

		[Token(Token = "0x6001125")]
		[Address(RVA = "0xA1ED5C", Offset = "0xA1ED5C", VA = "0xA1ED5C", Slot = "4")]
		public virtual void Update()
		{
		}

		[Token(Token = "0x6001126")]
		[Address(RVA = "0xA1EF84", Offset = "0xA1EF84", VA = "0xA1EF84")]
		private void ObjectHit(Collider colliderHit)
		{
		}

		[Token(Token = "0x6001127")]
		[Address(RVA = "0xA1F100", Offset = "0xA1F100", VA = "0xA1F100")]
		public void RemovePreviousHitObject()
		{
		}

		[Token(Token = "0x6001128")]
		[Address(RVA = "0xA1F238", Offset = "0xA1F238", VA = "0xA1F238")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6001129")]
		[Address(RVA = "0xA1F408", Offset = "0xA1F408", VA = "0xA1F408")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x600112A")]
		[Address(RVA = "0xA1F5B8", Offset = "0xA1F5B8", VA = "0xA1F5B8")]
		public RemoteGrabber()
		{
		}
	}
	[Token(Token = "0x20002E1")]
	public class Slider : MonoBehaviour
	{
		[Token(Token = "0x4001430")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float _slidePercentage;

		[Token(Token = "0x4001431")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FloatEvent onSliderChange;

		[Token(Token = "0x4001432")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float lastSliderPercentage;

		[Token(Token = "0x4001433")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float slideRangeLow;

		[Token(Token = "0x4001434")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float slideRangeHigh;

		[Token(Token = "0x4001435")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float slideRange;

		[Token(Token = "0x170001A2")]
		public float SlidePercentage
		{
			[Token(Token = "0x600112B")]
			[Address(RVA = "0xA1F608", Offset = "0xA1F608", VA = "0xA1F608")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x600112C")]
		[Address(RVA = "0xA1F610", Offset = "0xA1F610", VA = "0xA1F610")]
		private void Start()
		{
		}

		[Token(Token = "0x600112D")]
		[Address(RVA = "0xA1F718", Offset = "0xA1F718", VA = "0xA1F718")]
		private void Update()
		{
		}

		[Token(Token = "0x600112E")]
		[Address(RVA = "0xA1F798", Offset = "0xA1F798", VA = "0xA1F798", Slot = "4")]
		public virtual void OnSliderChange(float percentage)
		{
		}

		[Token(Token = "0x600112F")]
		[Address(RVA = "0xA1F804", Offset = "0xA1F804", VA = "0xA1F804")]
		public Slider()
		{
		}
	}
	[Token(Token = "0x20002E2")]
	public enum MovementVector
	{
		[Token(Token = "0x4001437")]
		HMD,
		[Token(Token = "0x4001438")]
		Controller
	}
	[Token(Token = "0x20002E3")]
	public class SmoothLocomotion : MonoBehaviour
	{
		[Token(Token = "0x20002E4")]
		public delegate void OnBeforeMoveAction();

		[Token(Token = "0x20002E5")]
		public delegate void OnAfterMoveAction();

		[Token(Token = "0x4001439")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PlayerControllerType ControllerType;

		[Token(Token = "0x400143A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Header("CharacterController Settings : ")]
		public float MovementSpeed;

		[Token(Token = "0x400143B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("How much force to apply to the rigidbody when the player is grounded")]
		[Header("Rigidbody Settings : ")]
		public float MovementForce;

		[Token(Token = "0x400143C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("Maximium velocity of the player's rigidbody in X, Z. Used to constrain max speed movement.")]
		public float MaxHorizontalVelocity;

		[Token(Token = "0x400143D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Maximium velocity of the player's rigidbody on the Y axis. Used to constrain max vertical movement, such as jumping and falling.")]
		public float MaxVerticalVelocity;

		[Token(Token = "0x400143E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("How far up from the characters feet is considered a step. Anything below this will be considered grounded.")]
		public float StepHeight;

		[Token(Token = "0x400143F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Maximium angle a slope can be to be considered grounded. Negated if contact distance from the player's feet is less than StepHeight.")]
		public float MaxSlopeAngle;

		[Token(Token = "0x4001440")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Physics Material to apply to the sphere collider while moving. Use this to dynamically adjust friction and bounciness.")]
		public PhysicMaterial MovementMaterial;

		[Token(Token = "0x4001441")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Physics Material to apply to the sphere collider when no controls are being issues. Use this to slow t he player down, or allow them to slide across surfaces.")]
		public PhysicMaterial FrictionMaterial;

		[Token(Token = "0x4001442")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("How much drag to apply to the player while moving")]
		public float MovementDrag;

		[Token(Token = "0x4001443")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("How much drag to apply to the player while standing still. Used to slow down the player or prevent from sliding down a hill.")]
		public float StaticDrag;

		[Token(Token = "0x4001444")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("How much drag to apply to the player when in the air / not grounded.")]
		public float AirDrag;

		[Token(Token = "0x4001445")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("(Optional) If specified, this transform's forward direction will determine the movement direction ")]
		[Header("Forward Direction : ")]
		public Transform ForwardDirection;

		[Token(Token = "0x4001446")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Set to false if you do not want to respond to input commands. (For example, if paused or in a menu)")]
		[Header("Input : ")]
		public bool AllowInput;

		[Token(Token = "0x4001447")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		[Header("Input : ")]
		[Tooltip("Set to false if you do not want SmoothLocomotion to update movement at all.")]
		public bool UpdateMovement;

		[Token(Token = "0x4001448")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Used to determine which direction to move. Example : Left Thumbstick Axis or Touchpad. ")]
		public List<InputAxis> inputAxis;

		[Token(Token = "0x4001449")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Input Action used to affect movement")]
		public InputActionReference MoveAction;

		[Token(Token = "0x400144A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("If true, movement events will only be sent if the Application has focus (Or Play window, if running in the Unity Editor)")]
		public bool RequireAppFocus;

		[Token(Token = "0x400144B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[Header("Sprint : ")]
		public float SprintSpeed;

		[Token(Token = "0x400144C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The key(s) to use to initiate sprint. You can also override the SprintKeyDown() function to determine your sprint criteria.")]
		public List<ControllerBinding> SprintInput;

		[Token(Token = "0x400144D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Unity Input Action used to enable sprinting")]
		public InputActionReference SprintAction;

		[Token(Token = "0x400144E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Header("Strafe : ")]
		public float StrafeSpeed;

		[Token(Token = "0x400144F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public float StrafeSprintSpeed;

		[Token(Token = "0x4001450")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Header("Jump : ")]
		[Tooltip("Amount of 'force' to apply to the player during Jump")]
		public float JumpForce;

		[Token(Token = "0x4001451")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("The key(s) to use to initiate a jump. You can also override the CheckJump() function to determine your jump criteria.")]
		public List<ControllerBinding> JumpInput;

		[Token(Token = "0x4001452")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Unity Input Action used to initiate a jump")]
		public InputActionReference JumpAction;

		[Token(Token = "0x4001453")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Header("Air Control : ")]
		[Tooltip("Can the player move when not grounded? Set to true if you want to be able to move the joysticks and have the player respond to input even when not grounded.")]
		public bool AirControl;

		[Token(Token = "0x4001454")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[Tooltip("How fast the player can move in the air if AirControl = true. Example : 0.5 = Player will move at half the speed of MovementSpeed")]
		public float AirControlSpeed;

		[Token(Token = "0x4001455")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private BNGPlayerController playerController;

		[Token(Token = "0x4001456")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private CharacterController characterController;

		[Token(Token = "0x4001457")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Rigidbody playerRigid;

		[Token(Token = "0x4001458")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private SphereCollider playerSphere;

		[Token(Token = "0x4001459")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private float movementX;

		[Token(Token = "0x400145A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private float movementY;

		[Token(Token = "0x400145B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private float movementZ;

		[Token(Token = "0x400145C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private float _verticalSpeed;

		[Token(Token = "0x400145D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Vector3 additionalMovement;

		[Token(Token = "0x4001460")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public Animator anim_parent;

		[Token(Token = "0x4001461")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private bool playerInitialized;

		[Token(Token = "0x4001462")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		private float lastJumpTime;

		[Token(Token = "0x4001463")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private float lastMoveTime;

		[Token(Token = "0x4001464")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		public float Magnitude;

		[Token(Token = "0x4001465")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[Header("Shown for Debug : ")]
		public int GroundContacts;

		[Token(Token = "0x4001466")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		public float SurfaceAngle;

		[Token(Token = "0x4001467")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public float SurfaceHeight;

		[Token(Token = "0x1400000D")]
		public static event OnBeforeMoveAction OnBeforeMove
		{
			[Token(Token = "0x6001130")]
			[Address(RVA = "0xA1F818", Offset = "0xA1F818", VA = "0xA1F818")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001131")]
			[Address(RVA = "0xA1F8D0", Offset = "0xA1F8D0", VA = "0xA1F8D0")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400000E")]
		public static event OnAfterMoveAction OnAfterMove
		{
			[Token(Token = "0x6001132")]
			[Address(RVA = "0xA1F988", Offset = "0xA1F988", VA = "0xA1F988")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001133")]
			[Address(RVA = "0xA1FA44", Offset = "0xA1FA44", VA = "0xA1FA44")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6001134")]
		[Address(RVA = "0xA1FB00", Offset = "0xA1FB00", VA = "0xA1FB00", Slot = "4")]
		public virtual void Update()
		{
		}

		[Token(Token = "0x6001135")]
		[Address(RVA = "0xA1FCC0", Offset = "0xA1FCC0", VA = "0xA1FCC0", Slot = "5")]
		public virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6001136")]
		[Address(RVA = "0xA1FCF8", Offset = "0xA1FCF8", VA = "0xA1FCF8", Slot = "6")]
		public virtual void CheckControllerReferences()
		{
		}

		[Token(Token = "0x6001137")]
		[Address(RVA = "0xA1FED0", Offset = "0xA1FED0", VA = "0xA1FED0", Slot = "7")]
		public virtual void UpdateInputs()
		{
		}

		[Token(Token = "0x6001138")]
		[Address(RVA = "0xA1FFDC", Offset = "0xA1FFDC", VA = "0xA1FFDC", Slot = "8")]
		public virtual void DoRigidBodyJump()
		{
		}

		[Token(Token = "0x6001139")]
		[Address(RVA = "0xA20070", Offset = "0xA20070", VA = "0xA20070", Slot = "9")]
		public virtual Vector2 GetMovementAxis()
		{
			return default(Vector2);
		}

		[Token(Token = "0x600113A")]
		[Address(RVA = "0xA204B4", Offset = "0xA204B4", VA = "0xA204B4", Slot = "10")]
		public virtual void MoveCharacter()
		{
		}

		[Token(Token = "0x600113B")]
		[Address(RVA = "0xA206BC", Offset = "0xA206BC", VA = "0xA206BC", Slot = "11")]
		public virtual void MoveRigidCharacter(Vector3 moveTo)
		{
		}

		[Token(Token = "0x600113C")]
		[Address(RVA = "0xA206C0", Offset = "0xA206C0", VA = "0xA206C0", Slot = "12")]
		public virtual void MoveRigidCharacter()
		{
		}

		[Token(Token = "0x600113D")]
		[Address(RVA = "0xA20B78", Offset = "0xA20B78", VA = "0xA20B78", Slot = "13")]
		public virtual void MoveCharacter(Vector3 motion)
		{
		}

		[Token(Token = "0x600113E")]
		[Address(RVA = "0xA20E44", Offset = "0xA20E44", VA = "0xA20E44", Slot = "14")]
		public virtual bool CheckJump()
		{
			return default(bool);
		}

		[Token(Token = "0x600113F")]
		[Address(RVA = "0xA20FC4", Offset = "0xA20FC4", VA = "0xA20FC4", Slot = "15")]
		public virtual bool CheckSprint()
		{
			return default(bool);
		}

		[Token(Token = "0x6001140")]
		[Address(RVA = "0xA21134", Offset = "0xA21134", VA = "0xA21134", Slot = "16")]
		public virtual bool IsGrounded()
		{
			return default(bool);
		}

		[Token(Token = "0x6001141")]
		[Address(RVA = "0xA211C8", Offset = "0xA211C8", VA = "0xA211C8", Slot = "17")]
		public virtual void SetupCharacterController()
		{
		}

		[Token(Token = "0x6001142")]
		[Address(RVA = "0xA21394", Offset = "0xA21394", VA = "0xA21394", Slot = "18")]
		public virtual void SetupRigidbodyPlayer()
		{
		}

		[Token(Token = "0x6001143")]
		[Address(RVA = "0xA21628", Offset = "0xA21628", VA = "0xA21628", Slot = "19")]
		public virtual void EnableMovement()
		{
		}

		[Token(Token = "0x6001144")]
		[Address(RVA = "0xA21634", Offset = "0xA21634", VA = "0xA21634", Slot = "20")]
		public virtual void DisableMovement()
		{
		}

		[Token(Token = "0x6001145")]
		[Address(RVA = "0xA2163C", Offset = "0xA2163C", VA = "0xA2163C")]
		private void OnCollisionStay(Collision collisionInfo)
		{
		}

		[Token(Token = "0x6001146")]
		[Address(RVA = "0xA21954", Offset = "0xA21954", VA = "0xA21954")]
		public SmoothLocomotion()
		{
		}
	}
	[Token(Token = "0x20002E6")]
	public enum PlayerControllerType
	{
		[Token(Token = "0x4001469")]
		CharacterController,
		[Token(Token = "0x400146A")]
		Rigidbody
	}
	[Token(Token = "0x20002E7")]
	public class SnapZone : MonoBehaviour
	{
		[Token(Token = "0x400146B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The currently held item. Set this in the editor to equip on Start().")]
		[Header("Starting / Held Item")]
		public Grabbable HeldItem;

		[Token(Token = "0x400146C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("TSet this in the editor to equip on Start().")]
		public Grabbable StartingItem;

		[Token(Token = "0x400146D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Options")]
		[Tooltip("If false, Item will Move back to inventory space if player drops it.")]
		public bool CanDropItem;

		[Token(Token = "0x400146E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		[Tooltip("If false the snap zone cannot have it's content replaced.")]
		public bool CanSwapItem;

		[Token(Token = "0x400146F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		[Tooltip("If false the snap zone cannot have it's content replaced.")]
		public bool CanRemoveItem;

		[Token(Token = "0x4001470")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("Multiply Item Scale times this when in snap zone.")]
		public float ScaleItem;

		[Token(Token = "0x4001471")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float _scaleTo;

		[Token(Token = "0x4001472")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool DisableColliders;

		[Token(Token = "0x4001473")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<Collider> disabledColliders;

		[Token(Token = "0x4001474")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("If true the item inside the SnapZone will be duplicated, instead of removed, from the SnapZone.")]
		public bool DuplicateItemOnGrab;

		[Token(Token = "0x4001475")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("Only snap if Grabbable was dropped maximum of X seconds ago")]
		public float MaxDropTime;

		[Token(Token = "0x4001476")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[HideInInspector]
		public float LastSnapTime;

		[Token(Token = "0x4001477")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Filtering")]
		[Tooltip("If not empty, can only snap objects if transform name contains one of these strings")]
		public List<string> OnlyAllowNames;

		[Token(Token = "0x4001478")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Do not allow snapping if transform contains one of these names")]
		public List<string> ExcludeTransformNames;

		[Token(Token = "0x4001479")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Header("Audio")]
		public AudioClip SoundOnSnap;

		[Token(Token = "0x400147A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public AudioClip SoundOnUnsnap;

		[Token(Token = "0x400147B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Header("Events")]
		public GrabbableEvent OnSnapEvent;

		[Token(Token = "0x400147C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public GrabbableEvent OnDetachEvent;

		[Token(Token = "0x400147D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private GrabbablesInTrigger gZone;

		[Token(Token = "0x400147E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Rigidbody heldItemRigid;

		[Token(Token = "0x400147F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool heldItemWasKinematic;

		[Token(Token = "0x4001480")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Grabbable trackedItem;

		[Token(Token = "0x4001481")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[HideInInspector]
		public Grabbable ClosestGrabbable;

		[Token(Token = "0x4001482")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private SnapZoneOffset offset;

		[Token(Token = "0x600114F")]
		[Address(RVA = "0xA21E24", Offset = "0xA21E24", VA = "0xA21E24")]
		private void Start()
		{
		}

		[Token(Token = "0x6001150")]
		[Address(RVA = "0xA21FA0", Offset = "0xA21FA0", VA = "0xA21FA0")]
		private void Update()
		{
		}

		[Token(Token = "0x6001151")]
		[Address(RVA = "0xA22344", Offset = "0xA22344", VA = "0xA22344")]
		private Grabbable getClosestGrabbable()
		{
			return null;
		}

		[Token(Token = "0x6001152")]
		[Address(RVA = "0xA22994", Offset = "0xA22994", VA = "0xA22994", Slot = "4")]
		public virtual void GrabGrabbable(Grabbable grab)
		{
		}

		[Token(Token = "0x6001153")]
		[Address(RVA = "0xA22888", Offset = "0xA22888", VA = "0xA22888")]
		private void disableGrabbable(Grabbable grab)
		{
		}

		[Token(Token = "0x6001154")]
		[Address(RVA = "0xA22F78", Offset = "0xA22F78", VA = "0xA22F78", Slot = "5")]
		public virtual void GrabEquipped(Grabber grabber)
		{
		}

		[Token(Token = "0x6001155")]
		[Address(RVA = "0xA232BC", Offset = "0xA232BC", VA = "0xA232BC", Slot = "6")]
		public virtual bool CanBeRemoved()
		{
			return default(bool);
		}

		[Token(Token = "0x6001156")]
		[Address(RVA = "0xA23318", Offset = "0xA23318", VA = "0xA23318", Slot = "7")]
		public virtual void ReleaseAll()
		{
		}

		[Token(Token = "0x6001157")]
		[Address(RVA = "0xA23724", Offset = "0xA23724", VA = "0xA23724")]
		public SnapZone()
		{
		}
	}
	[Token(Token = "0x20002E8")]
	public class SnapZoneOffset : MonoBehaviour
	{
		[Token(Token = "0x4001483")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 LocalPositionOffset;

		[Token(Token = "0x4001484")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector3 LocalRotationOffset;

		[Token(Token = "0x6001158")]
		[Address(RVA = "0xA237D4", Offset = "0xA237D4", VA = "0xA237D4")]
		public SnapZoneOffset()
		{
		}
	}
	[Token(Token = "0x20002E9")]
	public class SnapZoneScale : MonoBehaviour
	{
		[Token(Token = "0x4001485")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Local Scale (x, y and z) of Grabbable when inside the SnapZone")]
		public float Scale;

		[Token(Token = "0x6001159")]
		[Address(RVA = "0xA237DC", Offset = "0xA237DC", VA = "0xA237DC")]
		public SnapZoneScale()
		{
		}
	}
	[Token(Token = "0x20002EA")]
	public class SteeringWheel : GrabbableEvents
	{
		[Token(Token = "0x4001486")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Rotation Limits")]
		[Tooltip("Maximum Z value in Local Euler Angles. Can be < -360. Ex : -450")]
		public float MinAngle;

		[Token(Token = "0x4001487")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("Maximum Z value in Local Euler Angles. Can be > 360. Ex : 450")]
		public float MaxAngle;

		[Token(Token = "0x4001488")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Rotation Object")]
		[Tooltip("The Transform to rotate on its Z axis.")]
		public Transform RotatorObject;

		[Token(Token = "0x4001489")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Rotation Speed")]
		[Tooltip("How fast to move the wheel towards the target angle. 0 = Instant.")]
		public float RotationSpeed;

		[Token(Token = "0x400148A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Header("Two-Handed Option")]
		[Tooltip("IF true both hands will effect the rotation of the steering wheel while grabbed with both hands. Set to false if you only want one hand to control the rotation.")]
		public bool AllowTwoHanded;

		[Token(Token = "0x400148B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
		[Header("Return to Center")]
		public bool ReturnToCenter;

		[Token(Token = "0x400148C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float ReturnToCenterSpeed;

		[Token(Token = "0x400148D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Debug Options")]
		public Text DebugText;

		[Token(Token = "0x400148E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Header("Events")]
		[Tooltip("Called if the SteeringWheel changes angle. Returns the current angle in degrees, clamped between MinAngle / MaxAngle")]
		public FloatEvent onAngleChange;

		[Token(Token = "0x400148F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Called every frame. Returns the current current rotation between -1, 1")]
		public FloatEvent onValueChange;

		[Token(Token = "0x4001490")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("If true will show an angle helper in editor mode (Gizmos must be enabled)")]
		[Header("Editor Option")]
		public bool ShowEditorGizmos;

		[Token(Token = "0x4001491")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		protected Vector3 rotatePosition;

		[Token(Token = "0x4001492")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected Vector3 previousPrimaryPosition;

		[Token(Token = "0x4001493")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		protected Vector3 previousSecondaryPosition;

		[Token(Token = "0x4001494")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected float targetAngle;

		[Token(Token = "0x4001495")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		protected float previousTargetAngle;

		[Token(Token = "0x4001496")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected float smoothedAngle;

		[Token(Token = "0x170001A3")]
		public float Angle
		{
			[Token(Token = "0x600115A")]
			[Address(RVA = "0xA237EC", Offset = "0xA237EC", VA = "0xA237EC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001A4")]
		public float RawAngle
		{
			[Token(Token = "0x600115B")]
			[Address(RVA = "0xA23808", Offset = "0xA23808", VA = "0xA23808")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001A5")]
		public float ScaleValue
		{
			[Token(Token = "0x600115C")]
			[Address(RVA = "0xA23810", Offset = "0xA23810", VA = "0xA23810")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001A6")]
		public float ScaleValueInverted
		{
			[Token(Token = "0x600115D")]
			[Address(RVA = "0xA23838", Offset = "0xA23838", VA = "0xA23838")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001A7")]
		public float AngleInverted
		{
			[Token(Token = "0x600115E")]
			[Address(RVA = "0xA23870", Offset = "0xA23870", VA = "0xA23870")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001A8")]
		public Grabber PrimaryGrabber
		{
			[Token(Token = "0x600115F")]
			[Address(RVA = "0xA23890", Offset = "0xA23890", VA = "0xA23890")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001A9")]
		public Grabber SecondaryGrabber
		{
			[Token(Token = "0x6001160")]
			[Address(RVA = "0xA23938", Offset = "0xA23938", VA = "0xA23938")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001161")]
		[Address(RVA = "0xA239DC", Offset = "0xA239DC", VA = "0xA239DC")]
		private void Update()
		{
		}

		[Token(Token = "0x6001162")]
		[Address(RVA = "0xA23AD4", Offset = "0xA23AD4", VA = "0xA23AD4", Slot = "27")]
		public virtual void UpdateAngleCalculations()
		{
		}

		[Token(Token = "0x6001163")]
		[Address(RVA = "0xA23D74", Offset = "0xA23D74", VA = "0xA23D74")]
		public float GetRelativeAngle(Vector3 position1, Vector3 position2)
		{
			return default(float);
		}

		[Token(Token = "0x6001164")]
		[Address(RVA = "0xA23EB0", Offset = "0xA23EB0", VA = "0xA23EB0", Slot = "28")]
		public virtual void ApplyAngleToSteeringWheel(float angle)
		{
		}

		[Token(Token = "0x6001165")]
		[Address(RVA = "0xA23ED8", Offset = "0xA23ED8", VA = "0xA23ED8", Slot = "29")]
		public virtual void UpdatePreviewText()
		{
		}

		[Token(Token = "0x6001166")]
		[Address(RVA = "0xA24054", Offset = "0xA24054", VA = "0xA24054", Slot = "30")]
		public virtual void CallEvents()
		{
		}

		[Token(Token = "0x6001167")]
		[Address(RVA = "0xA240F0", Offset = "0xA240F0", VA = "0xA240F0", Slot = "5")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x6001168")]
		[Address(RVA = "0xA241F8", Offset = "0xA241F8", VA = "0xA241F8", Slot = "31")]
		public virtual void ReturnToCenterAngle()
		{
		}

		[Token(Token = "0x6001169")]
		[Address(RVA = "0xA23894", Offset = "0xA23894", VA = "0xA23894")]
		public Grabber GetPrimaryGrabber()
		{
			return null;
		}

		[Token(Token = "0x600116A")]
		[Address(RVA = "0xA2393C", Offset = "0xA2393C", VA = "0xA2393C")]
		public Grabber GetSecondaryGrabber()
		{
			return null;
		}

		[Token(Token = "0x600116B")]
		[Address(RVA = "0xA242B0", Offset = "0xA242B0", VA = "0xA242B0", Slot = "32")]
		public virtual void UpdatePreviousAngle(float angle)
		{
		}

		[Token(Token = "0x600116C")]
		[Address(RVA = "0xA242B8", Offset = "0xA242B8", VA = "0xA242B8", Slot = "33")]
		public virtual float GetScaledValue(float value, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x600116D")]
		[Address(RVA = "0xA242D8", Offset = "0xA242D8", VA = "0xA242D8")]
		public SteeringWheel()
		{
		}
	}
	[Token(Token = "0x20002EB")]
	public class TrackedDevice : MonoBehaviour
	{
		[Token(Token = "0x4001497")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TrackableDevice Device;

		[Token(Token = "0x4001498")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected UnityEngine.XR.InputDevice deviceToTrack;

		[Token(Token = "0x4001499")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected Vector3 initialLocalPosition;

		[Token(Token = "0x400149A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		protected Quaternion initialLocalRotation;

		[Token(Token = "0x400149B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		protected Vector3 currentLocalPosition;

		[Token(Token = "0x400149C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected Quaternion currentLocalRotation;

		[Token(Token = "0x600116E")]
		[Address(RVA = "0xA24300", Offset = "0xA24300", VA = "0xA24300", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x600116F")]
		[Address(RVA = "0xA24350", Offset = "0xA24350", VA = "0xA24350", Slot = "5")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6001170")]
		[Address(RVA = "0xA243C4", Offset = "0xA243C4", VA = "0xA243C4", Slot = "6")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6001171")]
		[Address(RVA = "0xA24438", Offset = "0xA24438", VA = "0xA24438", Slot = "7")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6001172")]
		[Address(RVA = "0xA24460", Offset = "0xA24460", VA = "0xA24460", Slot = "8")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6001173")]
		[Address(RVA = "0xA2446C", Offset = "0xA2446C", VA = "0xA2446C", Slot = "9")]
		public virtual void RefreshDeviceStatus()
		{
		}

		[Token(Token = "0x6001174")]
		[Address(RVA = "0xA24550", Offset = "0xA24550", VA = "0xA24550", Slot = "10")]
		public virtual void UpdateDevice()
		{
		}

		[Token(Token = "0x6001175")]
		[Address(RVA = "0xA24748", Offset = "0xA24748", VA = "0xA24748", Slot = "11")]
		protected virtual void OnBeforeRender()
		{
		}

		[Token(Token = "0x6001176")]
		[Address(RVA = "0xA24754", Offset = "0xA24754", VA = "0xA24754")]
		public TrackedDevice()
		{
		}
	}
	[Token(Token = "0x20002EC")]
	public enum TrackableDevice
	{
		[Token(Token = "0x400149E")]
		HMD,
		[Token(Token = "0x400149F")]
		LeftController,
		[Token(Token = "0x40014A0")]
		RightController
	}
	[Token(Token = "0x20002ED")]
	public class Arrow : MonoBehaviour
	{
		[Token(Token = "0x20002EE")]
		[CompilerGenerated]
		private sealed class <QueueDestroy>d__14 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40014AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40014AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40014AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Arrow <>4__this;

			[Token(Token = "0x170001AA")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001183")]
				[Address(RVA = "0xA25960", Offset = "0xA25960", VA = "0xA25960", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001AB")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001185")]
				[Address(RVA = "0xA259A8", Offset = "0xA259A8", VA = "0xA259A8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001180")]
			[Address(RVA = "0xA24D28", Offset = "0xA24D28", VA = "0xA24D28")]
			[DebuggerHidden]
			public <QueueDestroy>d__14(int <>1__state)
			{
			}

			[Token(Token = "0x6001181")]
			[Address(RVA = "0xA257E4", Offset = "0xA257E4", VA = "0xA257E4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001182")]
			[Address(RVA = "0xA257E8", Offset = "0xA257E8", VA = "0xA257E8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001184")]
			[Address(RVA = "0xA25968", Offset = "0xA25968", VA = "0xA25968", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20002EF")]
		[CompilerGenerated]
		private sealed class <ReEnableCollider>d__15 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40014AF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40014B0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40014B1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Arrow <>4__this;

			[Token(Token = "0x40014B2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <waitFrames>5__2;

			[Token(Token = "0x40014B3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private int <x>5__3;

			[Token(Token = "0x170001AC")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001189")]
				[Address(RVA = "0xA25A90", Offset = "0xA25A90", VA = "0xA25A90", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001AD")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600118B")]
				[Address(RVA = "0xA25AD8", Offset = "0xA25AD8", VA = "0xA25AD8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001186")]
			[Address(RVA = "0xA24D50", Offset = "0xA24D50", VA = "0xA24D50")]
			[DebuggerHidden]
			public <ReEnableCollider>d__15(int <>1__state)
			{
			}

			[Token(Token = "0x6001187")]
			[Address(RVA = "0xA259B0", Offset = "0xA259B0", VA = "0xA259B0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001188")]
			[Address(RVA = "0xA259B4", Offset = "0xA259B4", VA = "0xA259B4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600118A")]
			[Address(RVA = "0xA25A98", Offset = "0xA25A98", VA = "0xA25A98", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40014A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Rigidbody rb;

		[Token(Token = "0x40014A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Grabbable grab;

		[Token(Token = "0x40014A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool Flying;

		[Token(Token = "0x40014A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float ZVel;

		[Token(Token = "0x40014A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Collider ShaftCollider;

		[Token(Token = "0x40014A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private AudioSource impactSound;

		[Token(Token = "0x40014A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float flightTime;

		[Token(Token = "0x40014A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float destroyTime;

		[Token(Token = "0x40014A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Coroutine queueDestroy;

		[Token(Token = "0x40014AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Projectile ProjectileObject;

		[Token(Token = "0x40014AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float arrowDamage;

		[Token(Token = "0x6001177")]
		[Address(RVA = "0xA2475C", Offset = "0xA2475C", VA = "0xA2475C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001178")]
		[Address(RVA = "0xA2490C", Offset = "0xA2490C", VA = "0xA2490C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001179")]
		[Address(RVA = "0xA24B40", Offset = "0xA24B40", VA = "0xA24B40")]
		public void ShootArrow(Vector3 shotForce)
		{
		}

		[Token(Token = "0x600117A")]
		[Address(RVA = "0xA24CB4", Offset = "0xA24CB4", VA = "0xA24CB4")]
		[IteratorStateMachine(typeof(<QueueDestroy>d__14))]
		private IEnumerator QueueDestroy()
		{
			return null;
		}

		[Token(Token = "0x600117B")]
		[Address(RVA = "0xA24C40", Offset = "0xA24C40", VA = "0xA24C40")]
		[IteratorStateMachine(typeof(<ReEnableCollider>d__15))]
		private IEnumerator ReEnableCollider()
		{
			return null;
		}

		[Token(Token = "0x600117C")]
		[Address(RVA = "0xA24D78", Offset = "0xA24D78", VA = "0xA24D78")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x600117D")]
		[Address(RVA = "0xA25294", Offset = "0xA25294", VA = "0xA25294")]
		private void tryStickArrow(Collision collision)
		{
		}

		[Token(Token = "0x600117E")]
		[Address(RVA = "0xA256C4", Offset = "0xA256C4", VA = "0xA256C4")]
		private void playSoundInterval(float fromSeconds, float toSeconds)
		{
		}

		[Token(Token = "0x600117F")]
		[Address(RVA = "0xA257D4", Offset = "0xA257D4", VA = "0xA257D4")]
		public Arrow()
		{
		}
	}
	[Token(Token = "0x20002F0")]
	public class ArrowGrabArea : MonoBehaviour
	{
		[Token(Token = "0x40014B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Bow theBow;

		[Token(Token = "0x600118C")]
		[Address(RVA = "0xA25AE0", Offset = "0xA25AE0", VA = "0xA25AE0")]
		private void Start()
		{
		}

		[Token(Token = "0x600118D")]
		[Address(RVA = "0xA25B54", Offset = "0xA25B54", VA = "0xA25B54")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x600118E")]
		[Address(RVA = "0xA25EDC", Offset = "0xA25EDC", VA = "0xA25EDC")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x600118F")]
		[Address(RVA = "0xA25FFC", Offset = "0xA25FFC", VA = "0xA25FFC")]
		public ArrowGrabArea()
		{
		}
	}
	[Token(Token = "0x20002F1")]
	public class AutoGrabGrabbable : GrabbableEvents
	{
		[Token(Token = "0x6001190")]
		[Address(RVA = "0xA26004", Offset = "0xA26004", VA = "0xA26004", Slot = "8")]
		public override void OnBecomesClosestGrabbable(Grabber touchingGrabber)
		{
		}

		[Token(Token = "0x6001191")]
		[Address(RVA = "0xA2602C", Offset = "0xA2602C", VA = "0xA2602C")]
		public AutoGrabGrabbable()
		{
		}
	}
	[Token(Token = "0x20002F2")]
	public class Bow : GrabbableEvents
	{
		[Token(Token = "0x40014B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Bow Settings")]
		[Tooltip("")]
		public float BowForce;

		[Token(Token = "0x40014B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("If True the BowModel Transform will align itself with the grabber holding the arrow")]
		public bool AlignBowToArrow;

		[Token(Token = "0x40014B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("If AlignBowToArrow is true this transform will align itself with the grabber holding the arrow")]
		public Transform BowModel;

		[Token(Token = "0x40014B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Arrow Settings")]
		[Tooltip("Arrow will rotate around this if bow is held in left hand or ArrowRestLeftHanded is null")]
		public Transform ArrowRest;

		[Token(Token = "0x40014B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool CanGrabArrowFromKnock;

		[Token(Token = "0x40014BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Name of the prefab used to create an arrow. Must be in a /Resources/ directory.")]
		public string ArrowPrefabName;

		[Token(Token = "0x40014BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Arrow will rotate around this if bow is being held in right hand")]
		public Transform ArrowRestLeftHanded;

		[Token(Token = "0x40014BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform ArrowKnock;

		[Token(Token = "0x40014BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Header("Arrow Positioning")]
		public bool IgnoreXPosition;

		[Token(Token = "0x40014BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		public bool IgnoreYPosition;

		[Token(Token = "0x40014BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6A")]
		public bool AllowNegativeZ;

		[Token(Token = "0x40014C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6B")]
		[Header("Arrow Grabbing")]
		public bool CanGrabArrow;

		[Token(Token = "0x40014C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[HideInInspector]
		public Grabber ClosestGrabber;

		[Token(Token = "0x40014C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[HideInInspector]
		public Arrow GrabbedArrow;

		[Token(Token = "0x40014C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Grabbable arrowGrabbable;

		[Token(Token = "0x40014C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[HideInInspector]
		public Grabber arrowGrabber;

		[Token(Token = "0x40014C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[HideInInspector]
		public Vector3 LastValidPosition;

		[Token(Token = "0x40014C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[Header("String Settings")]
		public float MaxStringDistance;

		[Token(Token = "0x40014C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public float StringDistance;

		[Token(Token = "0x40014C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private float _lastDrawPercent;

		[Token(Token = "0x40014CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private float _lastDrawHaptic;

		[Token(Token = "0x40014CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private float _lastDrawHapticTime;

		[Token(Token = "0x40014CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private bool playedDrawSound;

		[Token(Token = "0x40014CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Vector3 initialKnockPosition;

		[Token(Token = "0x40014CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private bool holdingArrow;

		[Token(Token = "0x40014CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Grabbable bowGrabbable;

		[Token(Token = "0x40014D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Header("Debug Text")]
		public Text PercentageUI;

		[Token(Token = "0x40014D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private List<DrawDefinition> drawDefs;

		[Token(Token = "0x40014D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private AudioSource audioSource;

		[Token(Token = "0x40014D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public Vector3 BowUp;

		[Token(Token = "0x40014D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		public float AlignBowSpeed;

		[Token(Token = "0x170001AE")]
		public float DrawPercent
		{
			[Token(Token = "0x6001192")]
			[Address(RVA = "0xA26034", Offset = "0xA26034", VA = "0xA26034")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001193")]
			[Address(RVA = "0xA2603C", Offset = "0xA2603C", VA = "0xA2603C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6001194")]
		[Address(RVA = "0xA26044", Offset = "0xA26044", VA = "0xA26044")]
		private void Start()
		{
		}

		[Token(Token = "0x6001195")]
		[Address(RVA = "0xA265E4", Offset = "0xA265E4", VA = "0xA265E4")]
		private void Update()
		{
		}

		[Token(Token = "0x6001196")]
		[Address(RVA = "0xA26F1C", Offset = "0xA26F1C", VA = "0xA26F1C")]
		private Transform getArrowRest()
		{
			return null;
		}

		[Token(Token = "0x6001197")]
		[Address(RVA = "0xA26E94", Offset = "0xA26E94", VA = "0xA26E94")]
		private bool canGrabArrowFromKnock()
		{
			return default(bool);
		}

		[Token(Token = "0x6001198")]
		[Address(RVA = "0xA2728C", Offset = "0xA2728C", VA = "0xA2728C")]
		private float getGrabArrowInput()
		{
			return default(float);
		}

		[Token(Token = "0x6001199")]
		[Address(RVA = "0xA273C0", Offset = "0xA273C0", VA = "0xA273C0")]
		private float getGripInput(ControllerHand handSide)
		{
			return default(float);
		}

		[Token(Token = "0x600119A")]
		[Address(RVA = "0xA27380", Offset = "0xA27380", VA = "0xA27380")]
		private float getTriggerInput(ControllerHand handSide)
		{
			return default(float);
		}

		[Token(Token = "0x600119B")]
		[Address(RVA = "0xA27008", Offset = "0xA27008", VA = "0xA27008")]
		private void setKnockPosition()
		{
		}

		[Token(Token = "0x600119C")]
		[Address(RVA = "0xA27238", Offset = "0xA27238", VA = "0xA27238")]
		private void checkDrawSound()
		{
		}

		[Token(Token = "0x600119D")]
		[Address(RVA = "0xA269B0", Offset = "0xA269B0", VA = "0xA269B0")]
		private void updateDrawDistance()
		{
		}

		[Token(Token = "0x600119E")]
		[Address(RVA = "0xA26B6C", Offset = "0xA26B6C", VA = "0xA26B6C")]
		private void checkBowHaptics()
		{
		}

		[Token(Token = "0x600119F")]
		[Address(RVA = "0xA26DE4", Offset = "0xA26DE4", VA = "0xA26DE4")]
		private void resetStringPosition()
		{
		}

		[Token(Token = "0x60011A0")]
		[Address(RVA = "0xA27418", Offset = "0xA27418", VA = "0xA27418", Slot = "27")]
		protected virtual void alignArrow()
		{
		}

		[Token(Token = "0x60011A1")]
		[Address(RVA = "0xA27540", Offset = "0xA27540", VA = "0xA27540", Slot = "28")]
		protected virtual void alignBow()
		{
		}

		[Token(Token = "0x60011A2")]
		[Address(RVA = "0xA278C0", Offset = "0xA278C0", VA = "0xA278C0", Slot = "29")]
		public virtual void ResetBowAlignment()
		{
		}

		[Token(Token = "0x60011A3")]
		[Address(RVA = "0xA25D00", Offset = "0xA25D00", VA = "0xA25D00")]
		public void GrabArrow(Arrow arrow)
		{
		}

		[Token(Token = "0x60011A4")]
		[Address(RVA = "0xA26CC8", Offset = "0xA26CC8", VA = "0xA26CC8")]
		public void ReleaseArrow()
		{
		}

		[Token(Token = "0x60011A5")]
		[Address(RVA = "0xA279E0", Offset = "0xA279E0", VA = "0xA279E0", Slot = "6")]
		public override void OnRelease()
		{
		}

		[Token(Token = "0x60011A6")]
		[Address(RVA = "0xA2799C", Offset = "0xA2799C", VA = "0xA2799C")]
		private void resetArrowValues()
		{
		}

		[Token(Token = "0x60011A7")]
		[Address(RVA = "0xA27A04", Offset = "0xA27A04", VA = "0xA27A04")]
		private void playSoundInterval(float fromSeconds, float toSeconds, float volume)
		{
		}

		[Token(Token = "0x60011A8")]
		[Address(RVA = "0xA27400", Offset = "0xA27400", VA = "0xA27400")]
		private void playBowDraw()
		{
		}

		[Token(Token = "0x60011A9")]
		[Address(RVA = "0xA27980", Offset = "0xA27980", VA = "0xA27980")]
		private void playBowRelease()
		{
		}

		[Token(Token = "0x60011AA")]
		[Address(RVA = "0xA27B38", Offset = "0xA27B38", VA = "0xA27B38")]
		public Bow()
		{
		}
	}
	[Token(Token = "0x20002F3")]
	public class DrawDefinition
	{
		[Token(Token = "0x170001AF")]
		public float DrawPercentage
		{
			[Token(Token = "0x60011AC")]
			[Address(RVA = "0xA27C30", Offset = "0xA27C30", VA = "0xA27C30")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60011AD")]
			[Address(RVA = "0xA27C38", Offset = "0xA27C38", VA = "0xA27C38")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170001B0")]
		public float HapticAmplitude
		{
			[Token(Token = "0x60011AE")]
			[Address(RVA = "0xA27C40", Offset = "0xA27C40", VA = "0xA27C40")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60011AF")]
			[Address(RVA = "0xA27C48", Offset = "0xA27C48", VA = "0xA27C48")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170001B1")]
		public float HapticFrequency
		{
			[Token(Token = "0x60011B0")]
			[Address(RVA = "0xA27C50", Offset = "0xA27C50", VA = "0xA27C50")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60011B1")]
			[Address(RVA = "0xA27C58", Offset = "0xA27C58", VA = "0xA27C58")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x60011B2")]
		[Address(RVA = "0xA27C60", Offset = "0xA27C60", VA = "0xA27C60")]
		public DrawDefinition()
		{
		}
	}
	[Token(Token = "0x20002F4")]
	public class BowArm : MonoBehaviour
	{
		[Token(Token = "0x40014D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Bow BowItem;

		[Token(Token = "0x40014D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float BowPercentStart;

		[Token(Token = "0x40014DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float RotateDegrees;

		[Token(Token = "0x40014DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float Speed;

		[Token(Token = "0x40014DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Quaternion _startRotation;

		[Token(Token = "0x40014DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Quaternion _endRotation;

		[Token(Token = "0x40014DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool RotateX;

		[Token(Token = "0x40014DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
		public bool RotateZ;

		[Token(Token = "0x60011B3")]
		[Address(RVA = "0xA27C68", Offset = "0xA27C68", VA = "0xA27C68")]
		private void Start()
		{
		}

		[Token(Token = "0x60011B4")]
		[Address(RVA = "0xA27DA4", Offset = "0xA27DA4", VA = "0xA27DA4")]
		private void Update()
		{
		}

		[Token(Token = "0x60011B5")]
		[Address(RVA = "0xA27F7C", Offset = "0xA27F7C", VA = "0xA27F7C")]
		public BowArm()
		{
		}
	}
	[Token(Token = "0x20002F5")]
	public class BulletHole : MonoBehaviour
	{
		[Token(Token = "0x40014E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform BulletHoleDecal;

		[Token(Token = "0x40014E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float MaxScale;

		[Token(Token = "0x40014E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float MinScale;

		[Token(Token = "0x40014E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool RandomYRotation;

		[Token(Token = "0x40014E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float DestroyTime;

		[Token(Token = "0x60011B6")]
		[Address(RVA = "0xA27FA0", Offset = "0xA27FA0", VA = "0xA27FA0")]
		private void Start()
		{
		}

		[Token(Token = "0x60011B7")]
		[Address(RVA = "0xA28164", Offset = "0xA28164", VA = "0xA28164")]
		public void TryAttachTo(Collider col)
		{
		}

		[Token(Token = "0x60011B8")]
		[Address(RVA = "0xA28290", Offset = "0xA28290", VA = "0xA28290")]
		private bool transformIsEqualScale(Transform theTransform)
		{
			return default(bool);
		}

		[Token(Token = "0x60011B9")]
		[Address(RVA = "0xA28300", Offset = "0xA28300", VA = "0xA28300")]
		private void DestroySelf()
		{
		}

		[Token(Token = "0x60011BA")]
		[Address(RVA = "0xA2838C", Offset = "0xA2838C", VA = "0xA2838C")]
		public BulletHole()
		{
		}
	}
	[Token(Token = "0x20002F6")]
	public class CalibratePlayerHeight : MonoBehaviour
	{
		[Token(Token = "0x20002F7")]
		[CompilerGenerated]
		private sealed class <setupInitialOffset>d__11 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40014EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40014EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40014EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public CalibratePlayerHeight <>4__this;

			[Token(Token = "0x170001B2")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60011C7")]
				[Address(RVA = "0xA287C4", Offset = "0xA287C4", VA = "0xA287C4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001B3")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60011C9")]
				[Address(RVA = "0xA2880C", Offset = "0xA2880C", VA = "0xA2880C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60011C4")]
			[Address(RVA = "0xA286AC", Offset = "0xA286AC", VA = "0xA286AC")]
			[DebuggerHidden]
			public <setupInitialOffset>d__11(int <>1__state)
			{
			}

			[Token(Token = "0x60011C5")]
			[Address(RVA = "0xA286F8", Offset = "0xA286F8", VA = "0xA286F8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60011C6")]
			[Address(RVA = "0xA286FC", Offset = "0xA286FC", VA = "0xA286FC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60011C8")]
			[Address(RVA = "0xA287CC", Offset = "0xA287CC", VA = "0xA287CC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40014E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Desired height of the player in meters. The player's presence in vr will be adjusted based on their physical height. 1.65 meters = 5.41 feet")]
		public float DesiredPlayerHeight;

		[Token(Token = "0x40014E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Adjust the CharacterControllerYOffset property of this playerController. If not specified one will be found using GetComponentInChildren()")]
		public BNGPlayerController PlayerController;

		[Token(Token = "0x40014E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("If true, the player's virtual height will be adjusted to match DesiredPlayerHeight on Start()")]
		[Header("Startup")]
		public bool CalibrateOnStart;

		[Token(Token = "0x40014E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("If specified, pressing this button / action will activate the calibration")]
		[Header("Input :")]
		public InputAction CalibrateHeightAction;

		[Token(Token = "0x40014E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float _initialOffset;

		[Token(Token = "0x60011BB")]
		[Address(RVA = "0xA283B0", Offset = "0xA283B0", VA = "0xA283B0")]
		private void Start()
		{
		}

		[Token(Token = "0x60011BC")]
		[Address(RVA = "0xA2855C", Offset = "0xA2855C", VA = "0xA2855C")]
		public void CalibrateHeight()
		{
		}

		[Token(Token = "0x60011BD")]
		[Address(RVA = "0xA28564", Offset = "0xA28564", VA = "0xA28564")]
		public void CalibrateHeight(float calibrateHeight)
		{
		}

		[Token(Token = "0x60011BE")]
		[Address(RVA = "0xA28614", Offset = "0xA28614", VA = "0xA28614")]
		public void ResetPlayerHeight()
		{
		}

		[Token(Token = "0x60011BF")]
		[Address(RVA = "0xA28598", Offset = "0xA28598", VA = "0xA28598")]
		public float GetCurrentPlayerHeight()
		{
			return default(float);
		}

		[Token(Token = "0x60011C0")]
		[Address(RVA = "0xA28634", Offset = "0xA28634", VA = "0xA28634", Slot = "4")]
		public virtual void SetInitialOffset()
		{
		}

		[Token(Token = "0x60011C1")]
		[Address(RVA = "0xA284E8", Offset = "0xA284E8", VA = "0xA284E8")]
		[IteratorStateMachine(typeof(<setupInitialOffset>d__11))]
		private IEnumerator setupInitialOffset()
		{
			return null;
		}

		[Token(Token = "0x60011C2")]
		[Address(RVA = "0xA286D4", Offset = "0xA286D4", VA = "0xA286D4")]
		public CalibratePlayerHeight()
		{
		}
	}
	[Token(Token = "0x20002F8")]
	public class CustomCenterOfMass : MonoBehaviour
	{
		[Token(Token = "0x40014ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Local coordinates to use as center of mass if 'CenterOfMassTransform' is not specified.")]
		[Header("Define Center of Mass")]
		public Vector3 CenterOfMass;

		[Token(Token = "0x40014EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Use this Transform's local position for the center of mass if specified.")]
		public Transform CenterOfMassTransform;

		[Token(Token = "0x40014EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Debug Options")]
		[Tooltip("If true a red sphere will in the editor show where the center of mass will be positioned")]
		public bool ShowGizmo;

		[Token(Token = "0x40014F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Rigidbody rigid;

		[Token(Token = "0x60011CA")]
		[Address(RVA = "0xA28814", Offset = "0xA28814", VA = "0xA28814")]
		private void Start()
		{
		}

		[Token(Token = "0x60011CB")]
		[Address(RVA = "0xA2888C", Offset = "0xA2888C", VA = "0xA2888C", Slot = "4")]
		public virtual void SetCenterOfMass(Vector3 center)
		{
		}

		[Token(Token = "0x60011CC")]
		[Address(RVA = "0xA2893C", Offset = "0xA2893C", VA = "0xA2893C", Slot = "5")]
		protected virtual Vector3 getThisCenterOfMass()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60011CD")]
		[Address(RVA = "0xA289C4", Offset = "0xA289C4", VA = "0xA289C4")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x60011CE")]
		[Address(RVA = "0xA28AF0", Offset = "0xA28AF0", VA = "0xA28AF0")]
		public CustomCenterOfMass()
		{
		}
	}
	[Token(Token = "0x20002F9")]
	public class DrawerSound : MonoBehaviour
	{
		[Token(Token = "0x40014F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioClip DrawerOpenSound;

		[Token(Token = "0x40014F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float DrawerOpenValue;

		[Token(Token = "0x40014F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AudioClip DrawerCloseSound;

		[Token(Token = "0x40014F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float DrawerCloseValue;

		[Token(Token = "0x40014F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private bool playedOpenSound;

		[Token(Token = "0x40014F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		private bool playedCloseSound;

		[Token(Token = "0x60011CF")]
		[Address(RVA = "0xA28B58", Offset = "0xA28B58", VA = "0xA28B58")]
		public void OnDrawerUpdate(float drawerValue)
		{
		}

		[Token(Token = "0x60011D0")]
		[Address(RVA = "0xA28CE8", Offset = "0xA28CE8", VA = "0xA28CE8")]
		public DrawerSound()
		{
		}
	}
	[Token(Token = "0x20002FA")]
	public class Explosive : MonoBehaviour
	{
		[Token(Token = "0x20002FB")]
		[CompilerGenerated]
		private sealed class <explosionRoutine>d__6 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40014FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40014FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40014FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Explosive <>4__this;

			[Token(Token = "0x170001B4")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60011D9")]
				[Address(RVA = "0xA2930C", Offset = "0xA2930C", VA = "0xA2930C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001B5")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60011DB")]
				[Address(RVA = "0xA29354", Offset = "0xA29354", VA = "0xA29354", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60011D6")]
			[Address(RVA = "0xA28D94", Offset = "0xA28D94", VA = "0xA28D94")]
			[DebuggerHidden]
			public <explosionRoutine>d__6(int <>1__state)
			{
			}

			[Token(Token = "0x60011D7")]
			[Address(RVA = "0xA28F04", Offset = "0xA28F04", VA = "0xA28F04", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60011D8")]
			[Address(RVA = "0xA28F08", Offset = "0xA28F08", VA = "0xA28F08", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60011DA")]
			[Address(RVA = "0xA29314", Offset = "0xA29314", VA = "0xA29314", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20002FC")]
		[CompilerGenerated]
		private sealed class <dealDelayedDamaged>d__7 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40014FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001500")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001501")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float delayTime;

			[Token(Token = "0x4001502")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Damageable damageable;

			[Token(Token = "0x4001503")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Explosive <>4__this;

			[Token(Token = "0x170001B6")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60011DF")]
				[Address(RVA = "0xA2942C", Offset = "0xA2942C", VA = "0xA2942C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001B7")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60011E1")]
				[Address(RVA = "0xA29474", Offset = "0xA29474", VA = "0xA29474", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60011DC")]
			[Address(RVA = "0xA28E5C", Offset = "0xA28E5C", VA = "0xA28E5C")]
			[DebuggerHidden]
			public <dealDelayedDamaged>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x60011DD")]
			[Address(RVA = "0xA2935C", Offset = "0xA2935C", VA = "0xA2935C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60011DE")]
			[Address(RVA = "0xA29360", Offset = "0xA29360", VA = "0xA29360", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60011E0")]
			[Address(RVA = "0xA29434", Offset = "0xA29434", VA = "0xA29434", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40014F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Explosion Settings : ")]
		[Tooltip("Objects within this radius will have damage and force applied to it")]
		public float ExplosionRadius;

		[Token(Token = "0x40014F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Apply damage to an item if it has a Damageable component attached. ")]
		public float ExplosionDamage;

		[Token(Token = "0x40014F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("If an object has a Rigidbody and is within ExplosionRadius, it will have this amount of ExplosionForce added to it")]
		public float ExplosionForce;

		[Token(Token = "0x40014FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("Add an UpwardsModifier to AddExplosionForce. Use this to make objects fly more up into the air, instead of just outwardly.")]
		public float ExplosiveUpwardsModifier;

		[Token(Token = "0x40014FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Shown for Debug : ")]
		public bool ShowExplosionRadius;

		[Token(Token = "0x60011D1")]
		[Address(RVA = "0xA28D00", Offset = "0xA28D00", VA = "0xA28D00", Slot = "4")]
		public virtual void DoExplosion()
		{
		}

		[Token(Token = "0x60011D2")]
		[Address(RVA = "0xA28D20", Offset = "0xA28D20", VA = "0xA28D20")]
		[IteratorStateMachine(typeof(<explosionRoutine>d__6))]
		private IEnumerator explosionRoutine()
		{
			return null;
		}

		[Token(Token = "0x60011D3")]
		[Address(RVA = "0xA28DBC", Offset = "0xA28DBC", VA = "0xA28DBC")]
		[IteratorStateMachine(typeof(<dealDelayedDamaged>d__7))]
		private IEnumerator dealDelayedDamaged(Damageable damageable, float delayTime)
		{
			return null;
		}

		[Token(Token = "0x60011D4")]
		[Address(RVA = "0xA28E84", Offset = "0xA28E84", VA = "0xA28E84")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60011D5")]
		[Address(RVA = "0xA28EE8", Offset = "0xA28EE8", VA = "0xA28EE8")]
		public Explosive()
		{
		}
	}
	[Token(Token = "0x20002FD")]
	public static class ExtensionMethods
	{
		[Token(Token = "0x60011E2")]
		[Address(RVA = "0xA2947C", Offset = "0xA2947C", VA = "0xA2947C")]
		public static bool GetDown(this ControllerBinding binding)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20002FE")]
	public class Flashlight : GrabbableEvents
	{
		[Token(Token = "0x4001504")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Light SpotLight;

		[Token(Token = "0x4001505")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform LightSwitch;

		[Token(Token = "0x4001506")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 originalSwitchPosition;

		[Token(Token = "0x60011E3")]
		[Address(RVA = "0xA294E4", Offset = "0xA294E4", VA = "0xA294E4")]
		private void Start()
		{
		}

		[Token(Token = "0x60011E4")]
		[Address(RVA = "0xA2951C", Offset = "0xA2951C", VA = "0xA2951C", Slot = "16")]
		public override void OnTrigger(float triggerValue)
		{
		}

		[Token(Token = "0x60011E5")]
		[Address(RVA = "0xA29584", Offset = "0xA29584", VA = "0xA29584", Slot = "18")]
		public override void OnTriggerUp()
		{
		}

		[Token(Token = "0x60011E6")]
		[Address(RVA = "0xA295CC", Offset = "0xA295CC", VA = "0xA295CC")]
		public Flashlight()
		{
		}
	}
	[Token(Token = "0x20002FF")]
	public class FPSText : MonoBehaviour
	{
		[Token(Token = "0x4001507")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Text text;

		[Token(Token = "0x4001508")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float deltaTime;

		[Token(Token = "0x60011E7")]
		[Address(RVA = "0xA295D4", Offset = "0xA295D4", VA = "0xA295D4")]
		private void Start()
		{
		}

		[Token(Token = "0x60011E8")]
		[Address(RVA = "0xA2962C", Offset = "0xA2962C", VA = "0xA2962C")]
		private void Update()
		{
		}

		[Token(Token = "0x60011E9")]
		[Address(RVA = "0xA29714", Offset = "0xA29714", VA = "0xA29714")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x60011EA")]
		[Address(RVA = "0xA297D8", Offset = "0xA297D8", VA = "0xA297D8")]
		public FPSText()
		{
		}
	}
	[Token(Token = "0x2000300")]
	public class GrappleShot : GrabbableEvents
	{
		[Token(Token = "0x4001509")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Range")]
		public float MaxRange;

		[Token(Token = "0x400150A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Header("CharacterController Grapple Settings")]
		[Tooltip("(CharacterController Player Only) How much movement speed to apply to the CharacterController to move towards the grapple")]
		public float GrappleReelForce;

		[Token(Token = "0x400150B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("currentGrappleDistance must be greater than this to reel in")]
		public float MinReelDistance;

		[Token(Token = "0x400150C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Header("Rigidbody Grapple Settings")]
		[Tooltip("(Rigidbody Player Only) How much force to apply to the player to move towards the grapple")]
		public float GrappleForce;

		[Token(Token = "0x400150D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("(Rigidbody Player Only) Type of ForceMode to use to move the player towards the grapple point. ForceMode. ForceMode.Acceleration will let you preserve momentum and Swing Around. Use lower number for Acceleration (ex : 3). ForceMode.Velocity will immediately alter your player's velocity, resulting in a smooth but linear movement. Use higher numbers (ex : 200).")]
		public ForceMode GrappleForceMode;

		[Token(Token = "0x400150E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Header("Raycast Layers")]
		public LayerMask GrappleLayers;

		[Token(Token = "0x400150F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Header("Component definitions")]
		public Transform MuzzleTransform;

		[Token(Token = "0x4001510")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform HitTargetPrefab;

		[Token(Token = "0x4001511")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public LineRenderer GrappleLine;

		[Token(Token = "0x4001512")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public LineRenderer HelperLine;

		[Token(Token = "0x4001513")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public AudioClip GrappleShotSound;

		[Token(Token = "0x4001514")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool grappling;

		[Token(Token = "0x4001515")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		private bool wasGrappling;

		[Token(Token = "0x4001516")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private CharacterController characterController;

		[Token(Token = "0x4001517")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private SmoothLocomotion smoothLocomotion;

		[Token(Token = "0x4001518")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private PlayerGravity playerGravity;

		[Token(Token = "0x4001519")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private PlayerClimbing playerClimbing;

		[Token(Token = "0x400151A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Rigidbody playerRigid;

		[Token(Token = "0x400151B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private AudioSource audioSource;

		[Token(Token = "0x400151C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Header("Shown for Debug :")]
		public float currentGrappleDistance;

		[Token(Token = "0x400151D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private bool validTargetFound;

		[Token(Token = "0x400151E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAD")]
		private bool isDynamic;

		[Token(Token = "0x400151F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Rigidbody grappleTargetRigid;

		[Token(Token = "0x4001520")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Collider grappleTargetCollider;

		[Token(Token = "0x4001521")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Transform grappleTargetParent;

		[Token(Token = "0x4001522")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private bool requireRelease;

		[Token(Token = "0x4001523")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC9")]
		private bool climbing;

		[Token(Token = "0x4001524")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Climbable ClimbHelper;

		[Token(Token = "0x60011EB")]
		[Address(RVA = "0xA297E0", Offset = "0xA297E0", VA = "0xA297E0")]
		private void Start()
		{
		}

		[Token(Token = "0x60011EC")]
		[Address(RVA = "0xA299E4", Offset = "0xA299E4", VA = "0xA299E4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60011ED")]
		[Address(RVA = "0xA2A11C", Offset = "0xA2A11C", VA = "0xA2A11C", Slot = "16")]
		public override void OnTrigger(float triggerValue)
		{
		}

		[Token(Token = "0x60011EE")]
		[Address(RVA = "0xA2A198", Offset = "0xA2A198", VA = "0xA2A198")]
		private void updateGrappleDistance()
		{
		}

		[Token(Token = "0x60011EF")]
		[Address(RVA = "0xA2AA6C", Offset = "0xA2AA6C", VA = "0xA2AA6C", Slot = "5")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x60011F0")]
		[Address(RVA = "0xA2AA74", Offset = "0xA2AA74", VA = "0xA2AA74", Slot = "6")]
		public override void OnRelease()
		{
		}

		[Token(Token = "0x60011F1")]
		[Address(RVA = "0xA2A8B8", Offset = "0xA2A8B8", VA = "0xA2A8B8")]
		private void onReleaseGrapple()
		{
		}

		[Token(Token = "0x60011F2")]
		[Address(RVA = "0xA29A5C", Offset = "0xA29A5C", VA = "0xA29A5C")]
		private void drawGrappleHelper()
		{
		}

		[Token(Token = "0x60011F3")]
		[Address(RVA = "0xA29FE4", Offset = "0xA29FE4", VA = "0xA29FE4")]
		private void drawGrappleLine()
		{
		}

		[Token(Token = "0x60011F4")]
		[Address(RVA = "0xA2A06C", Offset = "0xA2A06C", VA = "0xA2A06C")]
		private void hideGrappleLine()
		{
		}

		[Token(Token = "0x60011F5")]
		[Address(RVA = "0xA2AB24", Offset = "0xA2AB24", VA = "0xA2AB24")]
		private void showGrappleHelper(Vector3 pos, Quaternion rot)
		{
		}

		[Token(Token = "0x60011F6")]
		[Address(RVA = "0xA29ED0", Offset = "0xA29ED0", VA = "0xA29ED0")]
		private void hideGrappleHelper()
		{
		}

		[Token(Token = "0x60011F7")]
		[Address(RVA = "0xA2A274", Offset = "0xA2A274", VA = "0xA2A274")]
		private void reelInGrapple(float triggerValue)
		{
		}

		[Token(Token = "0x60011F8")]
		[Address(RVA = "0xA2A7D4", Offset = "0xA2A7D4", VA = "0xA2A7D4")]
		private void shootGrapple()
		{
		}

		[Token(Token = "0x60011F9")]
		[Address(RVA = "0xA2ACF0", Offset = "0xA2ACF0", VA = "0xA2ACF0")]
		private void dropGrapple()
		{
		}

		[Token(Token = "0x60011FA")]
		[Address(RVA = "0xA2AA90", Offset = "0xA2AA90", VA = "0xA2AA90")]
		private void changeGravity(bool gravityOn)
		{
		}

		[Token(Token = "0x60011FB")]
		[Address(RVA = "0xA2ACFC", Offset = "0xA2ACFC", VA = "0xA2ACFC")]
		public GrappleShot()
		{
		}
	}
	[Token(Token = "0x2000301")]
	public class HandJet : GrabbableEvents
	{
		[Token(Token = "0x4001525")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Movement Speed to apply if using a CharacterController, or Force to apply if using a Rigidbody controller.")]
		public float JetForce;

		[Token(Token = "0x4001526")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Enabled while jetting")]
		public ParticleSystem JetFX;

		[Token(Token = "0x4001527")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("If true the player will float in the air when not jetting. (Works for Rigidbody player only)")]
		public bool DisableGravityWhileHeld;

		[Token(Token = "0x4001528")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private CharacterController characterController;

		[Token(Token = "0x4001529")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private SmoothLocomotion smoothLocomotion;

		[Token(Token = "0x400152A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private PlayerGravity playerGravity;

		[Token(Token = "0x400152B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Rigidbody playerRigid;

		[Token(Token = "0x400152C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private AudioSource audioSource;

		[Token(Token = "0x400152D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Vector3 moveDirection;

		[Token(Token = "0x400152E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private Vector3 addRigidForce;

		[Token(Token = "0x60011FC")]
		[Address(RVA = "0xA2AD18", Offset = "0xA2AD18", VA = "0xA2AD18")]
		private void Start()
		{
		}

		[Token(Token = "0x60011FD")]
		[Address(RVA = "0xA2AEE4", Offset = "0xA2AEE4", VA = "0xA2AEE4", Slot = "16")]
		public override void OnTrigger(float triggerValue)
		{
		}

		[Token(Token = "0x60011FE")]
		[Address(RVA = "0xA2B2EC", Offset = "0xA2B2EC", VA = "0xA2B2EC")]
		public void FixedUpdate()
		{
		}

		[Token(Token = "0x60011FF")]
		[Address(RVA = "0xA2B428", Offset = "0xA2B428", VA = "0xA2B428", Slot = "5")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x6001200")]
		[Address(RVA = "0xA2B43C", Offset = "0xA2B43C", VA = "0xA2B43C")]
		public void ChangeGravity(bool gravityOn)
		{
		}

		[Token(Token = "0x6001201")]
		[Address(RVA = "0xA2B4D0", Offset = "0xA2B4D0", VA = "0xA2B4D0", Slot = "6")]
		public override void OnRelease()
		{
		}

		[Token(Token = "0x6001202")]
		[Address(RVA = "0xA2AF28", Offset = "0xA2AF28", VA = "0xA2AF28")]
		private void doJet(float triggerValue)
		{
		}

		[Token(Token = "0x6001203")]
		[Address(RVA = "0xA2B1E4", Offset = "0xA2B1E4", VA = "0xA2B1E4")]
		private void stopJet()
		{
		}

		[Token(Token = "0x6001204")]
		[Address(RVA = "0xA2B4FC", Offset = "0xA2B4FC", VA = "0xA2B4FC", Slot = "18")]
		public override void OnTriggerUp()
		{
		}

		[Token(Token = "0x6001205")]
		[Address(RVA = "0xA2B518", Offset = "0xA2B518", VA = "0xA2B518")]
		public HandJet()
		{
		}
	}
	[Token(Token = "0x2000302")]
	public class HandModelSwitcher : MonoBehaviour
	{
		[Token(Token = "0x400152F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int HandModelId;

		[Token(Token = "0x4001530")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HandModelSelector hms;

		[Token(Token = "0x6001206")]
		[Address(RVA = "0xA2B530", Offset = "0xA2B530", VA = "0xA2B530")]
		private void Start()
		{
		}

		[Token(Token = "0x6001207")]
		[Address(RVA = "0xA2B648", Offset = "0xA2B648", VA = "0xA2B648")]
		public void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6001208")]
		[Address(RVA = "0xA2B70C", Offset = "0xA2B70C", VA = "0xA2B70C")]
		public HandModelSwitcher()
		{
		}
	}
	[Token(Token = "0x2000303")]
	public class IKDummy : MonoBehaviour
	{
		[Token(Token = "0x4001531")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform ThisEyeBone;

		[Token(Token = "0x4001532")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform PlayerTransform;

		[Token(Token = "0x4001533")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform HeadFollow;

		[Token(Token = "0x4001534")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform RightHandFollow;

		[Token(Token = "0x4001535")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform LeftHandFollow;

		[Token(Token = "0x4001536")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector3 HandRotationOffset;

		[Token(Token = "0x4001537")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Animator animator;

		[Token(Token = "0x4001538")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform headBone;

		[Token(Token = "0x4001539")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform leftHandDummy;

		[Token(Token = "0x400153A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Transform rightHandDummy;

		[Token(Token = "0x400153B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Transform leftHandOnPlayer;

		[Token(Token = "0x400153C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Transform rightHandOnPlayer;

		[Token(Token = "0x400153D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Transform lookatDummy;

		[Token(Token = "0x400153E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Vector3 localPos;

		[Token(Token = "0x400153F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private Quaternion localRot;

		[Token(Token = "0x4001540")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Transform cam;

		[Token(Token = "0x4001541")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector3 leftHandLocalPos;

		[Token(Token = "0x4001542")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private Vector3 rightHandLocalPos;

		[Token(Token = "0x4001543")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Quaternion leftHandLocalRot;

		[Token(Token = "0x4001544")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Quaternion rightHandLocalRot;

		[Token(Token = "0x4001545")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public Vector3 LeftHandsOffset;

		[Token(Token = "0x4001546")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		public Vector3 RightHandsOffset;

		[Token(Token = "0x6001209")]
		[Address(RVA = "0xA2B71C", Offset = "0xA2B71C", VA = "0xA2B71C")]
		private void Start()
		{
		}

		[Token(Token = "0x600120A")]
		[Address(RVA = "0xA2BA18", Offset = "0xA2BA18", VA = "0xA2BA18")]
		public Transform SetParentAndLocalPosRot(string transformName, Transform parentToSet)
		{
			return null;
		}

		[Token(Token = "0x600120B")]
		[Address(RVA = "0xA2BB30", Offset = "0xA2BB30", VA = "0xA2BB30")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600120C")]
		[Address(RVA = "0xA2BDF0", Offset = "0xA2BDF0", VA = "0xA2BDF0")]
		private void OnAnimatorIK()
		{
		}

		[Token(Token = "0x600120D")]
		[Address(RVA = "0xA2C11C", Offset = "0xA2C11C", VA = "0xA2C11C")]
		public IKDummy()
		{
		}
	}
	[Token(Token = "0x2000304")]
	public class LaserPointer : MonoBehaviour
	{
		[Token(Token = "0x4001547")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float MaxRange;

		[Token(Token = "0x4001548")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public LayerMask ValidLayers;

		[Token(Token = "0x4001549")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform LaserEnd;

		[Token(Token = "0x400154A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool Active;

		[Token(Token = "0x400154B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private LineRenderer line;

		[Token(Token = "0x600120E")]
		[Address(RVA = "0xA2C1A4", Offset = "0xA2C1A4", VA = "0xA2C1A4")]
		private void Start()
		{
		}

		[Token(Token = "0x600120F")]
		[Address(RVA = "0xA2C1FC", Offset = "0xA2C1FC", VA = "0xA2C1FC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001210")]
		[Address(RVA = "0xA2C520", Offset = "0xA2C520", VA = "0xA2C520")]
		public LaserPointer()
		{
		}
	}
	[Token(Token = "0x2000305")]
	public class LaserSword : GrabbableEvents
	{
		[Token(Token = "0x400154C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Grabbable grabbable;

		[Token(Token = "0x400154D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform BladeTransform;

		[Token(Token = "0x400154E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform RaycastTransform;

		[Token(Token = "0x400154F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public LayerMask LaserCollision;

		[Token(Token = "0x4001550")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public ParticleSystem CollisionParticle;

		[Token(Token = "0x4001551")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool BladeEnabled;

		[Token(Token = "0x4001552")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		private bool SaberSwitchOn;

		[Token(Token = "0x4001553")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float LaserLength;

		[Token(Token = "0x4001554")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float LaserActivateSpeed;

		[Token(Token = "0x4001555")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public AudioSource CollisionAudio;

		[Token(Token = "0x4001556")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public bool Colliding;

		[Token(Token = "0x6001211")]
		[Address(RVA = "0xA2C538", Offset = "0xA2C538", VA = "0xA2C538")]
		private void Start()
		{
		}

		[Token(Token = "0x6001212")]
		[Address(RVA = "0xA2C5FC", Offset = "0xA2C5FC", VA = "0xA2C5FC")]
		private void Update()
		{
		}

		[Token(Token = "0x6001213")]
		[Address(RVA = "0xA2CB7C", Offset = "0xA2CB7C", VA = "0xA2CB7C", Slot = "16")]
		public override void OnTrigger(float triggerValue)
		{
		}

		[Token(Token = "0x6001214")]
		[Address(RVA = "0xA2C7EC", Offset = "0xA2C7EC", VA = "0xA2C7EC")]
		private void checkCollision()
		{
		}

		[Token(Token = "0x6001215")]
		[Address(RVA = "0xA2CB98", Offset = "0xA2CB98", VA = "0xA2CB98")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6001216")]
		[Address(RVA = "0xA2CCC0", Offset = "0xA2CCC0", VA = "0xA2CCC0")]
		public LaserSword()
		{
		}
	}
	[Token(Token = "0x2000306")]
	public class LiquidWobble : MonoBehaviour
	{
		[Token(Token = "0x4001557")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Renderer rend;

		[Token(Token = "0x4001558")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 lastPos;

		[Token(Token = "0x4001559")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector3 velocity;

		[Token(Token = "0x400155A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 lastRot;

		[Token(Token = "0x400155B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Vector3 angularVelocity;

		[Token(Token = "0x400155C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float MaxWobble;

		[Token(Token = "0x400155D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float WobbleSpeed;

		[Token(Token = "0x400155E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float Recovery;

		[Token(Token = "0x400155F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float wobbleAmountX;

		[Token(Token = "0x4001560")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float wobbleAmountZ;

		[Token(Token = "0x4001561")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float wobbleAmountToAddX;

		[Token(Token = "0x4001562")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float wobbleAmountToAddZ;

		[Token(Token = "0x4001563")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float pulse;

		[Token(Token = "0x4001564")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float time;

		[Token(Token = "0x6001217")]
		[Address(RVA = "0xA2CCD4", Offset = "0xA2CCD4", VA = "0xA2CCD4")]
		private void Start()
		{
		}

		[Token(Token = "0x6001218")]
		[Address(RVA = "0xA2CD2C", Offset = "0xA2CD2C", VA = "0xA2CD2C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001219")]
		[Address(RVA = "0xA2CFDC", Offset = "0xA2CFDC", VA = "0xA2CFDC")]
		public LiquidWobble()
		{
		}
	}
	[Token(Token = "0x2000307")]
	public class Marker : GrabbableEvents
	{
		[Token(Token = "0x2000308")]
		[CompilerGenerated]
		private sealed class <WriteRoutine>d__18 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001575")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001576")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001577")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Marker <>4__this;

			[Token(Token = "0x170001B8")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001224")]
				[Address(RVA = "0xA2DBE0", Offset = "0xA2DBE0", VA = "0xA2DBE0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001B9")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001226")]
				[Address(RVA = "0xA2DC28", Offset = "0xA2DC28", VA = "0xA2DC28", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001221")]
			[Address(RVA = "0xA2D118", Offset = "0xA2D118", VA = "0xA2D118")]
			[DebuggerHidden]
			public <WriteRoutine>d__18(int <>1__state)
			{
			}

			[Token(Token = "0x6001222")]
			[Address(RVA = "0xA2D8D8", Offset = "0xA2D8D8", VA = "0xA2D8D8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001223")]
			[Address(RVA = "0xA2D8DC", Offset = "0xA2D8DC", VA = "0xA2D8DC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001225")]
			[Address(RVA = "0xA2DBE8", Offset = "0xA2DBE8", VA = "0xA2DBE8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001565")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Material DrawMaterial;

		[Token(Token = "0x4001566")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Color DrawColor;

		[Token(Token = "0x4001567")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float LineWidth;

		[Token(Token = "0x4001568")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform RaycastStart;

		[Token(Token = "0x4001569")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public LayerMask DrawingLayers;

		[Token(Token = "0x400156A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float RaycastLength;

		[Token(Token = "0x400156B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float MinDrawDistance;

		[Token(Token = "0x400156C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float ReuseTolerance;

		[Token(Token = "0x400156D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool IsNewDraw;

		[Token(Token = "0x400156E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector3 lastDrawPoint;

		[Token(Token = "0x400156F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private LineRenderer LineRenderer;

		[Token(Token = "0x4001570")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Transform root;

		[Token(Token = "0x4001571")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Transform lastTransform;

		[Token(Token = "0x4001572")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Coroutine drawRoutine;

		[Token(Token = "0x4001573")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float lastLineWidth;

		[Token(Token = "0x4001574")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private int renderLifeTime;

		[Token(Token = "0x600121A")]
		[Address(RVA = "0xA2D000", Offset = "0xA2D000", VA = "0xA2D000", Slot = "5")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x600121B")]
		[Address(RVA = "0xA2D0D0", Offset = "0xA2D0D0", VA = "0xA2D0D0", Slot = "6")]
		public override void OnRelease()
		{
		}

		[Token(Token = "0x600121C")]
		[Address(RVA = "0xA2D05C", Offset = "0xA2D05C", VA = "0xA2D05C")]
		[IteratorStateMachine(typeof(<WriteRoutine>d__18))]
		private IEnumerator WriteRoutine()
		{
			return null;
		}

		[Token(Token = "0x600121D")]
		[Address(RVA = "0xA2D140", Offset = "0xA2D140", VA = "0xA2D140")]
		private void InitDraw(Vector3 position, Quaternion rotation, float lineWidth, Color lineColor)
		{
		}

		[Token(Token = "0x600121E")]
		[Address(RVA = "0xA2D2B4", Offset = "0xA2D2B4", VA = "0xA2D2B4")]
		private Vector3 DrawPoint(Vector3 lastDrawPoint, Vector3 endPosition, float lineWidth, Color lineColor, Quaternion rotation)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600121F")]
		[Address(RVA = "0xA2D7E8", Offset = "0xA2D7E8", VA = "0xA2D7E8")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6001220")]
		[Address(RVA = "0xA2D8A0", Offset = "0xA2D8A0", VA = "0xA2D8A0")]
		public Marker()
		{
		}
	}
	[Token(Token = "0x2000309")]
	public class MoveToWaypoint : MonoBehaviour
	{
		[Token(Token = "0x4001578")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool IsActive;

		[Token(Token = "0x4001579")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Waypoint Destination;

		[Token(Token = "0x400157A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float MovementSpeed;

		[Token(Token = "0x400157B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool ReachedDestination;

		[Token(Token = "0x400157C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Delay in seconds to way before starting movement towards Destination")]
		public float StartDelay;

		[Token(Token = "0x400157D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private bool reachedDelay;

		[Token(Token = "0x400157E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float delayedTime;

		[Token(Token = "0x400157F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Vector3 previousPosition;

		[Token(Token = "0x4001580")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector3 PositionDifference;

		[Token(Token = "0x4001581")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public bool MoveInUpdate;

		[Token(Token = "0x4001582")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
		public bool MoveInFixedUpdate;

		[Token(Token = "0x4001583")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Rigidbody rigid;

		[Token(Token = "0x6001227")]
		[Address(RVA = "0xA2DC30", Offset = "0xA2DC30", VA = "0xA2DC30")]
		private void Start()
		{
		}

		[Token(Token = "0x6001228")]
		[Address(RVA = "0xA2DCA0", Offset = "0xA2DCA0", VA = "0xA2DCA0")]
		private void Update()
		{
		}

		[Token(Token = "0x6001229")]
		[Address(RVA = "0xA2E128", Offset = "0xA2E128", VA = "0xA2E128")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x600122A")]
		[Address(RVA = "0xA2DD58", Offset = "0xA2DD58", VA = "0xA2DD58")]
		private void movePlatform(float timeDelta)
		{
		}

		[Token(Token = "0x600122B")]
		[Address(RVA = "0xA2E154", Offset = "0xA2E154", VA = "0xA2E154")]
		private void resetDelayStatus()
		{
		}

		[Token(Token = "0x600122C")]
		[Address(RVA = "0xA2E160", Offset = "0xA2E160", VA = "0xA2E160")]
		public MoveToWaypoint()
		{
		}
	}
	[Token(Token = "0x200030A")]
	public class MovingPlatform : MonoBehaviour
	{
		[Token(Token = "0x4001584")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("If set to ParentToPlatform the CharacterController will be parented to any MovingPlatform object below it each frame. If set to PositionDifference the movement will be read from the PositionDifference property of the MoveToWaypoint object below it. ")]
		public MovingPlatformMethod MovementMethod;

		[Token(Token = "0x4001585")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[HideInInspector]
		public Vector3 PositionDelta;

		[Token(Token = "0x4001586")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public Quaternion RotationDelta;

		[Token(Token = "0x4001587")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected Vector3 previousPosition;

		[Token(Token = "0x4001588")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		protected Quaternion previousRotation;

		[Token(Token = "0x600122D")]
		[Address(RVA = "0xA2E180", Offset = "0xA2E180", VA = "0xA2E180")]
		protected void Update()
		{
		}

		[Token(Token = "0x600122E")]
		[Address(RVA = "0xA2E2C8", Offset = "0xA2E2C8", VA = "0xA2E2C8")]
		public MovingPlatform()
		{
		}
	}
	[Token(Token = "0x200030B")]
	public enum MovingPlatformMethod
	{
		[Token(Token = "0x400158A")]
		ParentToPlatform,
		[Token(Token = "0x400158B")]
		PositionDifference
	}
	[Token(Token = "0x200030C")]
	public class PlayerScaler : MonoBehaviour
	{
		[Token(Token = "0x400158C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<Transform> ScaleObjects;

		[Token(Token = "0x400158D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float Scale;

		[Token(Token = "0x400158E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float scaleSpeed;

		[Token(Token = "0x600122F")]
		[Address(RVA = "0xA2E2D0", Offset = "0xA2E2D0", VA = "0xA2E2D0")]
		private void Update()
		{
		}

		[Token(Token = "0x6001230")]
		[Address(RVA = "0xA2E508", Offset = "0xA2E508", VA = "0xA2E508")]
		public PlayerScaler()
		{
		}
	}
	[Token(Token = "0x200030D")]
	public class ProjectileLauncher : MonoBehaviour
	{
		[Token(Token = "0x400158F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject ProjectileObject;

		[Token(Token = "0x4001590")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float ProjectileForce;

		[Token(Token = "0x4001591")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AudioClip LaunchSound;

		[Token(Token = "0x4001592")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ParticleSystem LaunchParticles;

		[Token(Token = "0x4001593")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform MuzzleTransform;

		[Token(Token = "0x4001594")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float _initialProjectileForce;

		[Token(Token = "0x6001231")]
		[Address(RVA = "0xA2E51C", Offset = "0xA2E51C", VA = "0xA2E51C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001232")]
		[Address(RVA = "0xA2E528", Offset = "0xA2E528", VA = "0xA2E528")]
		public GameObject ShootProjectile(float projectileForce)
		{
			return null;
		}

		[Token(Token = "0x6001233")]
		[Address(RVA = "0xA2E7D4", Offset = "0xA2E7D4", VA = "0xA2E7D4")]
		public void ShootProjectile()
		{
		}

		[Token(Token = "0x6001234")]
		[Address(RVA = "0xA2E7DC", Offset = "0xA2E7DC", VA = "0xA2E7DC")]
		public void SetForce(float force)
		{
		}

		[Token(Token = "0x6001235")]
		[Address(RVA = "0xA2E7E4", Offset = "0xA2E7E4", VA = "0xA2E7E4")]
		public float GetInitialProjectileForce()
		{
			return default(float);
		}

		[Token(Token = "0x6001236")]
		[Address(RVA = "0xA2E7EC", Offset = "0xA2E7EC", VA = "0xA2E7EC")]
		public ProjectileLauncher()
		{
		}
	}
	[Token(Token = "0x200030E")]
	public class SceneLoader : MonoBehaviour
	{
		[Token(Token = "0x200030F")]
		[CompilerGenerated]
		private sealed class <FadeThenLoadScene>d__6 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400159A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400159B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400159C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SceneLoader <>4__this;

			[Token(Token = "0x170001BA")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600123F")]
				[Address(RVA = "0xA2EC34", Offset = "0xA2EC34", VA = "0xA2EC34", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001BB")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001241")]
				[Address(RVA = "0xA2EC7C", Offset = "0xA2EC7C", VA = "0xA2EC7C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600123C")]
			[Address(RVA = "0xA2E914", Offset = "0xA2E914", VA = "0xA2E914")]
			[DebuggerHidden]
			public <FadeThenLoadScene>d__6(int <>1__state)
			{
			}

			[Token(Token = "0x600123D")]
			[Address(RVA = "0xA2EA68", Offset = "0xA2EA68", VA = "0xA2EA68", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600123E")]
			[Address(RVA = "0xA2EA6C", Offset = "0xA2EA6C", VA = "0xA2EA6C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001240")]
			[Address(RVA = "0xA2EC3C", Offset = "0xA2EC3C", VA = "0xA2EC3C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000310")]
		[CompilerGenerated]
		private sealed class <FadeInOut>d__7 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400159D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400159E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400159F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SceneLoader <>4__this;

			[Token(Token = "0x170001BC")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001245")]
				[Address(RVA = "0xA2EE14", Offset = "0xA2EE14", VA = "0xA2EE14", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001BD")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001247")]
				[Address(RVA = "0xA2EE5C", Offset = "0xA2EE5C", VA = "0xA2EE5C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001242")]
			[Address(RVA = "0xA2E9B0", Offset = "0xA2E9B0", VA = "0xA2E9B0")]
			[DebuggerHidden]
			public <FadeInOut>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x6001243")]
			[Address(RVA = "0xA2EC84", Offset = "0xA2EC84", VA = "0xA2EC84", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001244")]
			[Address(RVA = "0xA2EC88", Offset = "0xA2EC88", VA = "0xA2EC88", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001246")]
			[Address(RVA = "0xA2EE1C", Offset = "0xA2EE1C", VA = "0xA2EE1C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001595")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The Unity 'LoadSceneMode' method of loading the scene (In most cases should be 'Single'). ")]
		public LoadSceneMode loadSceneMode;

		[Token(Token = "0x4001596")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("If true, the ScreenFader component will fade the screen to black before loading a level.")]
		public bool UseSceenFader;

		[Token(Token = "0x4001597")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Wait this long in seconds before attempting to load the scene. Useful if you need to fade the screen out before attempting to load the level.")]
		public float ScreenFadeTime;

		[Token(Token = "0x4001598")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ScreenFader sf;

		[Token(Token = "0x4001599")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private string _loadSceneName;

		[Token(Token = "0x6001237")]
		[Address(RVA = "0xA2E7FC", Offset = "0xA2E7FC", VA = "0xA2E7FC")]
		public void LoadScene(string SceneName)
		{
		}

		[Token(Token = "0x6001238")]
		[Address(RVA = "0xA2E8A0", Offset = "0xA2E8A0", VA = "0xA2E8A0")]
		[IteratorStateMachine(typeof(<FadeThenLoadScene>d__6))]
		public IEnumerator FadeThenLoadScene()
		{
			return null;
		}

		[Token(Token = "0x6001239")]
		[Address(RVA = "0xA2E93C", Offset = "0xA2E93C", VA = "0xA2E93C")]
		[IteratorStateMachine(typeof(<FadeInOut>d__7))]
		public IEnumerator FadeInOut()
		{
			return null;
		}

		[Token(Token = "0x600123A")]
		[Address(RVA = "0xA2E9D8", Offset = "0xA2E9D8", VA = "0xA2E9D8")]
		public void FadeInAndOut()
		{
		}

		[Token(Token = "0x600123B")]
		[Address(RVA = "0xA2E9F8", Offset = "0xA2E9F8", VA = "0xA2E9F8")]
		public SceneLoader()
		{
		}
	}
	[Token(Token = "0x2000311")]
	public class SlidingDoorMover : MonoBehaviour
	{
		[Token(Token = "0x40015A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float DoorSpeed;

		[Token(Token = "0x40015A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float OpenXValue;

		[Token(Token = "0x40015A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float targetXPosition;

		[Token(Token = "0x40015A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float smoothedPosition;

		[Token(Token = "0x6001248")]
		[Address(RVA = "0xA2EE64", Offset = "0xA2EE64", VA = "0xA2EE64")]
		private void Update()
		{
		}

		[Token(Token = "0x6001249")]
		[Address(RVA = "0xA2EED8", Offset = "0xA2EED8", VA = "0xA2EED8")]
		public void SetTargetPosition(float targetValue)
		{
		}

		[Token(Token = "0x600124A")]
		[Address(RVA = "0xA2EEE8", Offset = "0xA2EEE8", VA = "0xA2EEE8")]
		public SlidingDoorMover()
		{
		}
	}
	[Token(Token = "0x2000312")]
	public class TimeController : MonoBehaviour
	{
		[Token(Token = "0x2000313")]
		[CompilerGenerated]
		private sealed class <resumeTimeRoutine>d__20 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40015B1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40015B2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40015B3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TimeController <>4__this;

			[Token(Token = "0x170001BF")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001256")]
				[Address(RVA = "0xA2F4B8", Offset = "0xA2F4B8", VA = "0xA2F4B8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001C0")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001258")]
				[Address(RVA = "0xA2F500", Offset = "0xA2F500", VA = "0xA2F500", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001253")]
			[Address(RVA = "0xA2F304", Offset = "0xA2F304", VA = "0xA2F304")]
			[DebuggerHidden]
			public <resumeTimeRoutine>d__20(int <>1__state)
			{
			}

			[Token(Token = "0x6001254")]
			[Address(RVA = "0xA2F348", Offset = "0xA2F348", VA = "0xA2F348", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001255")]
			[Address(RVA = "0xA2F34C", Offset = "0xA2F34C", VA = "0xA2F34C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001257")]
			[Address(RVA = "0xA2F4C0", Offset = "0xA2F4C0", VA = "0xA2F4C0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40015A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Timescale to slow down to if slow down key is pressed")]
		public float SlowTimeScale;

		[Token(Token = "0x40015A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("If true, Y Button will always slow time. Useful for debugging. Otherwise call SlowTime / ResumeTime yourself")]
		public bool YKeySlowsTime;

		[Token(Token = "0x40015A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Input Action used to initiate slow time")]
		public InputActionReference SlowTimeAction;

		[Token(Token = "0x40015A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("(Optional) Play this clip when starting to slow time")]
		public AudioClip SlowTimeClip;

		[Token(Token = "0x40015A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("(Optional) Play this clip when ending slow mo")]
		public AudioClip SpeedupTimeClip;

		[Token(Token = "0x40015A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("If true, will set Time.fixedDeltaTime to the device refresh rate")]
		public bool SetFixedDelta;

		[Token(Token = "0x40015AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		[Tooltip("If true, will check for input in Update to slow down time. If false you'll need to call SlowTime() / ResumeTime() manually from script")]
		public bool CheckInput;

		[Token(Token = "0x40015AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
		private bool _slowingTime;

		[Token(Token = "0x40015AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B")]
		private bool routineRunning;

		[Token(Token = "0x40015AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float originalFixedDelta;

		[Token(Token = "0x40015AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private AudioSource audioSource;

		[Token(Token = "0x40015AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool ForceTimeScale;

		[Token(Token = "0x40015B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private IEnumerator resumeRoutine;

		[Token(Token = "0x170001BE")]
		public bool TimeSlowing
		{
			[Token(Token = "0x600124B")]
			[Address(RVA = "0xA2EEFC", Offset = "0xA2EEFC", VA = "0xA2EEFC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600124C")]
		[Address(RVA = "0xA2EF04", Offset = "0xA2EF04", VA = "0xA2EF04")]
		private void Start()
		{
		}

		[Token(Token = "0x600124D")]
		[Address(RVA = "0xA2EF98", Offset = "0xA2EF98", VA = "0xA2EF98")]
		private void Update()
		{
		}

		[Token(Token = "0x600124E")]
		[Address(RVA = "0xA2F19C", Offset = "0xA2F19C", VA = "0xA2F19C", Slot = "4")]
		public virtual bool SlowTimeInputDown()
		{
			return default(bool);
		}

		[Token(Token = "0x600124F")]
		[Address(RVA = "0xA2EFE0", Offset = "0xA2EFE0", VA = "0xA2EFE0")]
		public void SlowTime()
		{
		}

		[Token(Token = "0x6001250")]
		[Address(RVA = "0xA2F128", Offset = "0xA2F128", VA = "0xA2F128")]
		public void ResumeTime()
		{
		}

		[Token(Token = "0x6001251")]
		[Address(RVA = "0xA2F290", Offset = "0xA2F290", VA = "0xA2F290")]
		[IteratorStateMachine(typeof(<resumeTimeRoutine>d__20))]
		private IEnumerator resumeTimeRoutine()
		{
			return null;
		}

		[Token(Token = "0x6001252")]
		[Address(RVA = "0xA2F32C", Offset = "0xA2F32C", VA = "0xA2F32C")]
		public TimeController()
		{
		}
	}
	[Token(Token = "0x2000314")]
	public class ToggleActiveOnInputAction : MonoBehaviour
	{
		[Token(Token = "0x40015B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InputActionReference InputAction;

		[Token(Token = "0x40015B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject ToggleObject;

		[Token(Token = "0x6001259")]
		[Address(RVA = "0xA2F508", Offset = "0xA2F508", VA = "0xA2F508")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600125A")]
		[Address(RVA = "0xA2F5A8", Offset = "0xA2F5A8", VA = "0xA2F5A8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600125B")]
		[Address(RVA = "0xA2F648", Offset = "0xA2F648", VA = "0xA2F648")]
		public void ToggleActive(InputAction.CallbackContext context)
		{
		}

		[Token(Token = "0x600125C")]
		[Address(RVA = "0xA2F6E0", Offset = "0xA2F6E0", VA = "0xA2F6E0")]
		public ToggleActiveOnInputAction()
		{
		}
	}
	[Token(Token = "0x2000315")]
	public class VehicleController : MonoBehaviour
	{
		[Token(Token = "0x2000316")]
		[CompilerGenerated]
		private sealed class <crankEngine>d__33 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40015D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40015D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40015D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VehicleController <>4__this;

			[Token(Token = "0x170001C1")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001279")]
				[Address(RVA = "0xA307E4", Offset = "0xA307E4", VA = "0xA307E4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001C2")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600127B")]
				[Address(RVA = "0xA3082C", Offset = "0xA3082C", VA = "0xA3082C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001276")]
			[Address(RVA = "0xA2FA9C", Offset = "0xA2FA9C", VA = "0xA2FA9C")]
			[DebuggerHidden]
			public <crankEngine>d__33(int <>1__state)
			{
			}

			[Token(Token = "0x6001277")]
			[Address(RVA = "0xA305D8", Offset = "0xA305D8", VA = "0xA305D8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001278")]
			[Address(RVA = "0xA305DC", Offset = "0xA305DC", VA = "0xA305DC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600127A")]
			[Address(RVA = "0xA307EC", Offset = "0xA307EC", VA = "0xA307EC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40015B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Engine Properties")]
		public float MotorTorque;

		[Token(Token = "0x40015B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float MaxSpeed;

		[Token(Token = "0x40015B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float MaxSteeringAngle;

		[Token(Token = "0x40015B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GearSystem[] gearsystem;

		[Token(Token = "0x40015BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float maxReverseSpeed;

		[Token(Token = "0x40015BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("If true and SteeringGrabbable is being held, the right / left trigger will act as input for acceleration / defceleration.")]
		[Header("Steering Grabbable")]
		public bool CheckTriggerInput;

		[Token(Token = "0x40015BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Grabbable SteeringGrabbable;

		[Token(Token = "0x40015BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Is the Engine on and ready for input. If false, engine will need to be started first.")]
		[Header("Engine Status")]
		public bool EngineOn;

		[Token(Token = "0x40015BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("How long it takes to start the engine")]
		public float CrankTime;

		[Token(Token = "0x40015BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Header("Speedometer")]
		[Tooltip("Output the current speed to this label if specified")]
		public Text SpeedLabel;

		[Token(Token = "0x40015C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Audio Setup")]
		public AudioSource EngineAudio;

		[Token(Token = "0x40015C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Sound to play / loop when EngineOn = true. Pitch will be altered according to speed.")]
		public AudioClip IdleSound;

		[Token(Token = "0x40015C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("If specified this clip will play before the engine is turned on. Clip to play when starting the Engine.")]
		public AudioClip CrankSound;

		[Token(Token = "0x40015C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public AudioClip CollisionSound;

		[Token(Token = "0x40015C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[HideInInspector]
		public float SteeringAngle;

		[Token(Token = "0x40015C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[HideInInspector]
		public float MotorInput;

		[Token(Token = "0x40015C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[HideInInspector]
		public float CurrentSpeed;

		[Token(Token = "0x40015C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Header("Wheel Configuration")]
		public List<WheelObject> Wheels;

		[Token(Token = "0x40015C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Vector3 initialPosition;

		[Token(Token = "0x40015C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Rigidbody rb;

		[Token(Token = "0x40015CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private bool wasHoldingSteering;

		[Token(Token = "0x40015CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA1")]
		private bool isHoldingSteering;

		[Token(Token = "0x40015CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public float handBrakeTorque;

		[Token(Token = "0x40015CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static float gearAngle;

		[Token(Token = "0x40015CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public int MotorTorqeMultiplayer;

		[Token(Token = "0x40015CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private float initialTorque;

		[Token(Token = "0x40015D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public GameObject img_speedometerArrow;

		[Token(Token = "0x40015D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public GearControll gearcontrol;

		[Token(Token = "0x40015D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public Vector3 centerOfGravity;

		[Token(Token = "0x40015D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		protected bool crankingEngine;

		[Token(Token = "0x600125D")]
		[Address(RVA = "0xA2F6E8", Offset = "0xA2F6E8", VA = "0xA2F6E8")]
		private void Start()
		{
		}

		[Token(Token = "0x600125E")]
		[Address(RVA = "0xA2F784", Offset = "0xA2F784", VA = "0xA2F784")]
		private void Update()
		{
		}

		[Token(Token = "0x600125F")]
		[Address(RVA = "0xA2F9EC", Offset = "0xA2F9EC", VA = "0xA2F9EC", Slot = "4")]
		public virtual void CrankEngine()
		{
		}

		[Token(Token = "0x6001260")]
		[Address(RVA = "0xA2FA28", Offset = "0xA2FA28", VA = "0xA2FA28")]
		[IteratorStateMachine(typeof(<crankEngine>d__33))]
		private IEnumerator crankEngine()
		{
			return null;
		}

		[Token(Token = "0x6001261")]
		[Address(RVA = "0xA2FAC4", Offset = "0xA2FAC4", VA = "0xA2FAC4", Slot = "5")]
		public virtual void CheckOutOfBounds()
		{
		}

		[Token(Token = "0x6001262")]
		[Address(RVA = "0xA2FB20", Offset = "0xA2FB20", VA = "0xA2FB20", Slot = "6")]
		public virtual void GetTorqueInputFromTriggers()
		{
		}

		[Token(Token = "0x6001263")]
		[Address(RVA = "0xA2FC74", Offset = "0xA2FC74", VA = "0xA2FC74")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001264")]
		[Address(RVA = "0xA2FD14", Offset = "0xA2FD14", VA = "0xA2FD14")]
		private void CalculateAndCapSpeed()
		{
		}

		[Token(Token = "0x6001265")]
		[Address(RVA = "0xA2FE58", Offset = "0xA2FE58", VA = "0xA2FE58", Slot = "7")]
		public virtual void UpdateWheelTorque()
		{
		}

		[Token(Token = "0x6001266")]
		[Address(RVA = "0xA2FF68", Offset = "0xA2FF68", VA = "0xA2FF68")]
		private void BrackStatus()
		{
		}

		[Token(Token = "0x6001267")]
		[Address(RVA = "0xA30104", Offset = "0xA30104", VA = "0xA30104")]
		public void Breck()
		{
		}

		[Token(Token = "0x6001268")]
		[Address(RVA = "0xA2F914", Offset = "0xA2F914", VA = "0xA2F914")]
		public void GearType(int gear)
		{
		}

		[Token(Token = "0x6001269")]
		[Address(RVA = "0xA301AC", Offset = "0xA301AC", VA = "0xA301AC", Slot = "8")]
		public virtual void SetSteeringAngle(float steeringAngle)
		{
		}

		[Token(Token = "0x600126A")]
		[Address(RVA = "0xA301B4", Offset = "0xA301B4", VA = "0xA301B4", Slot = "9")]
		public virtual void SetSteeringAngleInverted(float steeringAngle)
		{
		}

		[Token(Token = "0x600126B")]
		[Address(RVA = "0xA301C0", Offset = "0xA301C0", VA = "0xA301C0", Slot = "10")]
		public virtual void SetSteeringAngle(Vector2 steeringAngle)
		{
		}

		[Token(Token = "0x600126C")]
		[Address(RVA = "0xA301C8", Offset = "0xA301C8", VA = "0xA301C8", Slot = "11")]
		public virtual void SetSteeringAngleInverted(Vector2 steeringAngle)
		{
		}

		[Token(Token = "0x600126D")]
		[Address(RVA = "0xA301D4", Offset = "0xA301D4", VA = "0xA301D4", Slot = "12")]
		public virtual void SetMotorTorqueInput(float input)
		{
		}

		[Token(Token = "0x600126E")]
		[Address(RVA = "0xA301DC", Offset = "0xA301DC", VA = "0xA301DC", Slot = "13")]
		public virtual void SetMotorTorqueInputInverted(float input)
		{
		}

		[Token(Token = "0x600126F")]
		[Address(RVA = "0xA301E8", Offset = "0xA301E8", VA = "0xA301E8", Slot = "14")]
		public virtual void SetMotorTorqueInput(Vector2 input)
		{
		}

		[Token(Token = "0x6001270")]
		[Address(RVA = "0xA301F0", Offset = "0xA301F0", VA = "0xA301F0", Slot = "15")]
		public virtual void SetMotorTorqueInputInverted(Vector2 input)
		{
		}

		[Token(Token = "0x6001271")]
		[Address(RVA = "0xA301FC", Offset = "0xA301FC", VA = "0xA301FC", Slot = "16")]
		public virtual void UpdateWheelVisuals(WheelObject wheel)
		{
		}

		[Token(Token = "0x6001272")]
		[Address(RVA = "0xA302E0", Offset = "0xA302E0", VA = "0xA302E0", Slot = "17")]
		public virtual void UpdateEngineAudio()
		{
		}

		[Token(Token = "0x6001273")]
		[Address(RVA = "0xA30394", Offset = "0xA30394", VA = "0xA30394")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6001274")]
		[Address(RVA = "0xA304B8", Offset = "0xA304B8", VA = "0xA304B8")]
		private float correctValue(float inputValue)
		{
			return default(float);
		}

		[Token(Token = "0x6001275")]
		[Address(RVA = "0xA30598", Offset = "0xA30598", VA = "0xA30598")]
		public VehicleController()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000317")]
	public class WheelObject
	{
		[Token(Token = "0x40015D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public WheelCollider Wheel;

		[Token(Token = "0x40015D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform WheelVisual;

		[Token(Token = "0x40015D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool ApplyTorque;

		[Token(Token = "0x40015DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool ApplySteering;

		[Token(Token = "0x40015DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		public bool ApplyBrake;

		[Token(Token = "0x600127C")]
		[Address(RVA = "0xA30834", Offset = "0xA30834", VA = "0xA30834")]
		public WheelObject()
		{
		}
	}
	[Token(Token = "0x2000318")]
	public class VREmulator : MonoBehaviour
	{
		[Token(Token = "0x40015DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Use Emulator if true and HMDIsActive is false")]
		[Header("Enable / Disable : ")]
		public bool EmulatorEnabled;

		[Token(Token = "0x40015DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[Tooltip("Set to false if you want to use in standalone builds as well as the editor")]
		public bool EditorOnly;

		[Token(Token = "0x40015DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		[Tooltip("If true the game window must have focus for the emulator to be active")]
		public bool RequireGameFocus;

		[Token(Token = "0x40015DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[Tooltip("Action set used specifically to mimic or supplement a vr setup")]
		[Header("Input : ")]
		public InputActionAsset EmulatorActionSet;

		[Token(Token = "0x40015E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Player Teleportation")]
		[Tooltip("Will set the PlayerTeleport component's ForceStraightArrow = true while the emulator is active.")]
		public bool ForceStraightTeleportRotation;

		[Token(Token = "0x40015E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		[Header("Move Player Up / Down")]
		[Tooltip("If true, move the player eye offset up / down whenever PlayerUpAction / PlayerDownAction is called.")]
		public bool AllowUpDownControls;

		[Token(Token = "0x40015E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Unity Input Action used to move the player up")]
		public InputActionReference PlayerUpAction;

		[Token(Token = "0x40015E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Unity Input Action used to move the player down")]
		public InputActionReference PlayerDownAction;

		[Token(Token = "0x40015E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Minimum height in meters the player can shrink to when using the PlayerDownAction")]
		public float MinPlayerHeight;

		[Token(Token = "0x40015E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("Maximum height in meters the player can grow to when using the PlayerUpAction")]
		public float MaxPlayerHeight;

		[Token(Token = "0x40015E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Header("Head Look")]
		[Tooltip("Unity Input Action used to lock the camera in game mode to look around")]
		public InputActionReference LockCameraAction;

		[Token(Token = "0x40015E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Unity Input Action used to lock the camera in game mode to look around")]
		public InputActionReference CameraLookAction;

		[Token(Token = "0x40015E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Multiply the CameraLookAction by this amount")]
		public float CameraLookSensitivityX;

		[Token(Token = "0x40015E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("Multiply the CameraLookAction by this amount")]
		public float CameraLookSensitivityY;

		[Token(Token = "0x40015EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Minimum local Eulers degrees the camera can rotate")]
		public float MinimumCameraY;

		[Token(Token = "0x40015EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Tooltip("Minimum local Eulers degrees the camera can rotate")]
		public float MaximumCameraY;

		[Token(Token = "0x40015EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Header("Controller Emulation")]
		[Tooltip("Unity Input Action used to mimic holding the Left Grip")]
		public InputActionReference LeftGripAction;

		[Token(Token = "0x40015ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Unity Input Action used to mimic holding the Left Trigger")]
		public InputActionReference LeftTriggerAction;

		[Token(Token = "0x40015EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Unity Input Action used to mimic having your thumb near a button")]
		public InputActionReference LeftThumbNearAction;

		[Token(Token = "0x40015EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Unity Input Action used to move mimic holding the Right Grip")]
		public InputActionReference RightGripAction;

		[Token(Token = "0x40015F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Unity Input Action used to move mimic holding the Right Grip")]
		public InputActionReference RightTriggerAction;

		[Token(Token = "0x40015F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Unity Input Action used to mimic having your thumb near a button")]
		public InputActionReference RightThumbNearAction;

		[Token(Token = "0x40015F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float mouseRotationX;

		[Token(Token = "0x40015F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private float mouseRotationY;

		[Token(Token = "0x40015F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Transform mainCameraTransform;

		[Token(Token = "0x40015F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Transform leftControllerTranform;

		[Token(Token = "0x40015F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Transform rightControllerTranform;

		[Token(Token = "0x40015F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Transform leftHandAnchor;

		[Token(Token = "0x40015F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Transform rightHandAnchor;

		[Token(Token = "0x40015F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private BNGPlayerController player;

		[Token(Token = "0x40015FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private SmoothLocomotion smoothLocomotion;

		[Token(Token = "0x40015FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private PlayerTeleport playerTeleport;

		[Token(Token = "0x40015FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private bool didFirstActivate;

		[Token(Token = "0x40015FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Grabber grabberLeft;

		[Token(Token = "0x40015FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Grabber grabberRight;

		[Token(Token = "0x40015FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private float _originalPlayerYOffset;

		[Token(Token = "0x4001600")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		[Header("Shown for Debug : ")]
		public bool HMDIsActive;

		[Token(Token = "0x4001601")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public Vector3 LeftControllerPosition;

		[Token(Token = "0x4001602")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		public Vector3 RightControllerPosition;

		[Token(Token = "0x4001603")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private bool priorStraightSetting;

		[Token(Token = "0x4001604")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		private float prevVal;

		[Token(Token = "0x4001605")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private bool isQuitting;

		[Token(Token = "0x600127D")]
		[Address(RVA = "0xA3083C", Offset = "0xA3083C", VA = "0xA3083C")]
		private void Start()
		{
		}

		[Token(Token = "0x600127E")]
		[Address(RVA = "0xA30C58", Offset = "0xA30C58", VA = "0xA30C58")]
		public void OnBeforeRender()
		{
		}

		[Token(Token = "0x600127F")]
		[Address(RVA = "0xA30CE4", Offset = "0xA30CE4", VA = "0xA30CE4")]
		private void onFirstActivate()
		{
		}

		[Token(Token = "0x6001280")]
		[Address(RVA = "0xA30D08", Offset = "0xA30D08", VA = "0xA30D08")]
		private void Update()
		{
		}

		[Token(Token = "0x6001281")]
		[Address(RVA = "0xA312B4", Offset = "0xA312B4", VA = "0xA312B4", Slot = "4")]
		public virtual bool HasRequiredFocus()
		{
			return default(bool);
		}

		[Token(Token = "0x6001282")]
		[Address(RVA = "0xA30E00", Offset = "0xA30E00", VA = "0xA30E00")]
		public void CheckHeadControls()
		{
		}

		[Token(Token = "0x6001283")]
		[Address(RVA = "0xA312D4", Offset = "0xA312D4", VA = "0xA312D4")]
		public void UpdateInputs()
		{
		}

		[Token(Token = "0x6001284")]
		[Address(RVA = "0xA31058", Offset = "0xA31058", VA = "0xA31058")]
		public void CheckPlayerControls()
		{
		}

		[Token(Token = "0x6001285")]
		[Address(RVA = "0xA31BCC", Offset = "0xA31BCC", VA = "0xA31BCC")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001286")]
		[Address(RVA = "0xA31BD0", Offset = "0xA31BD0", VA = "0xA31BD0", Slot = "5")]
		public virtual void UpdateControllerPositions()
		{
		}

		[Token(Token = "0x6001287")]
		[Address(RVA = "0xA31958", Offset = "0xA31958", VA = "0xA31958")]
		private void checkGrabbers()
		{
		}

		[Token(Token = "0x6001288")]
		[Address(RVA = "0xA31CEC", Offset = "0xA31CEC", VA = "0xA31CEC", Slot = "6")]
		public virtual void ResetHands()
		{
		}

		[Token(Token = "0x6001289")]
		[Address(RVA = "0xA31E58", Offset = "0xA31E58", VA = "0xA31E58", Slot = "7")]
		public virtual void ResetAll()
		{
		}

		[Token(Token = "0x600128A")]
		[Address(RVA = "0xA31F6C", Offset = "0xA31F6C", VA = "0xA31F6C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600128B")]
		[Address(RVA = "0xA32468", Offset = "0xA32468", VA = "0xA32468")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600128C")]
		[Address(RVA = "0xA3297C", Offset = "0xA3297C", VA = "0xA3297C")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x600128D")]
		[Address(RVA = "0xA32988", Offset = "0xA32988", VA = "0xA32988")]
		public VREmulator()
		{
		}
	}
	[Token(Token = "0x2000319")]
	public class Waypoint : MonoBehaviour
	{
		[Token(Token = "0x4001606")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Waypoint Destination;

		[Token(Token = "0x600128E")]
		[Address(RVA = "0xA329E0", Offset = "0xA329E0", VA = "0xA329E0")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x600128F")]
		[Address(RVA = "0xA32B38", Offset = "0xA32B38", VA = "0xA32B38")]
		public Waypoint()
		{
		}
	}
	[Token(Token = "0x200031A")]
	public class Zipline : GrabbableEvents
	{
		[Token(Token = "0x4001607")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform ZiplineStart;

		[Token(Token = "0x4001608")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform ZiplineEnd;

		[Token(Token = "0x4001609")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float ZiplineSpeed;

		[Token(Token = "0x400160A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public bool UseLinearMovement;

		[Token(Token = "0x400160B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float lastMoveTime;

		[Token(Token = "0x400160C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private bool movingForward;

		[Token(Token = "0x400160D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private AudioSource audioSource;

		[Token(Token = "0x6001290")]
		[Address(RVA = "0xA32B40", Offset = "0xA32B40", VA = "0xA32B40")]
		private void Start()
		{
		}

		[Token(Token = "0x6001291")]
		[Address(RVA = "0xA32C0C", Offset = "0xA32C0C", VA = "0xA32C0C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001292")]
		[Address(RVA = "0xA32CD4", Offset = "0xA32CD4", VA = "0xA32CD4")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6001293")]
		[Address(RVA = "0xA32DEC", Offset = "0xA32DEC", VA = "0xA32DEC", Slot = "16")]
		public override void OnTrigger(float triggerValue)
		{
		}

		[Token(Token = "0x6001294")]
		[Address(RVA = "0xA33124", Offset = "0xA33124", VA = "0xA33124", Slot = "19")]
		public override void OnButton1()
		{
		}

		[Token(Token = "0x6001295")]
		[Address(RVA = "0xA3315C", Offset = "0xA3315C", VA = "0xA3315C", Slot = "22")]
		public override void OnButton2()
		{
		}

		[Token(Token = "0x6001296")]
		[Address(RVA = "0xA32E40", Offset = "0xA32E40", VA = "0xA32E40")]
		private void moveTowards(Vector3 pos, bool forwardDirection)
		{
		}

		[Token(Token = "0x6001297")]
		[Address(RVA = "0xA33194", Offset = "0xA33194", VA = "0xA33194")]
		public Zipline()
		{
		}
	}
	[Token(Token = "0x200031B")]
	public class ControllerOffsetHelper : MonoBehaviour
	{
		[Token(Token = "0x200031C")]
		[CompilerGenerated]
		private sealed class <checkForController>d__7 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001614")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001615")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001616")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ControllerOffsetHelper <>4__this;

			[Token(Token = "0x170001C3")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60012A3")]
				[Address(RVA = "0xA33BA0", Offset = "0xA33BA0", VA = "0xA33BA0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001C4")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60012A5")]
				[Address(RVA = "0xA33BE8", Offset = "0xA33BE8", VA = "0xA33BE8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60012A0")]
			[Address(RVA = "0xA332CC", Offset = "0xA332CC", VA = "0xA332CC")]
			[DebuggerHidden]
			public <checkForController>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x60012A1")]
			[Address(RVA = "0xA33A90", Offset = "0xA33A90", VA = "0xA33A90", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60012A2")]
			[Address(RVA = "0xA33A94", Offset = "0xA33A94", VA = "0xA33A94", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60012A4")]
			[Address(RVA = "0xA33BA8", Offset = "0xA33BA8", VA = "0xA33BA8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400160E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ControllerHand ControllerHand;

		[Token(Token = "0x400160F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Shown for Debug :")]
		[Tooltip("The model of controller found")]
		[SerializeField]
		private string thisControllerModel;

		[Token(Token = "0x4001610")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private ControllerOffset thisOffset;

		[Token(Token = "0x4001611")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The position offset is defined within this script and loaded once the controller is found.")]
		public Vector3 OffsetPosition;

		[Token(Token = "0x4001612")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("The rotation offset is defined within this script and loaded once the controller is found.")]
		public Vector3 OffsetRotation;

		[Token(Token = "0x4001613")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public List<ControllerOffset> ControllerOffsets;

		[Token(Token = "0x6001298")]
		[Address(RVA = "0xA331B8", Offset = "0xA331B8", VA = "0xA331B8")]
		private void Start()
		{
		}

		[Token(Token = "0x6001299")]
		[Address(RVA = "0xA33258", Offset = "0xA33258", VA = "0xA33258")]
		[IteratorStateMachine(typeof(<checkForController>d__7))]
		private IEnumerator checkForController()
		{
			return null;
		}

		[Token(Token = "0x600129A")]
		[Address(RVA = "0xA332F4", Offset = "0xA332F4", VA = "0xA332F4", Slot = "4")]
		public virtual void OnControllerFound()
		{
		}

		[Token(Token = "0x600129B")]
		[Address(RVA = "0xA33418", Offset = "0xA33418", VA = "0xA33418", Slot = "5")]
		public virtual ControllerOffset GetControllerOffset(string controllerName)
		{
			return null;
		}

		[Token(Token = "0x600129C")]
		[Address(RVA = "0xA33518", Offset = "0xA33518", VA = "0xA33518", Slot = "6")]
		public virtual void DefineControllerOffsets()
		{
		}

		[Token(Token = "0x600129D")]
		[Address(RVA = "0xA339B8", Offset = "0xA339B8", VA = "0xA339B8", Slot = "7")]
		public virtual ControllerOffset GetOpenXROffset()
		{
			return null;
		}

		[Token(Token = "0x600129E")]
		[Address(RVA = "0xA33A5C", Offset = "0xA33A5C", VA = "0xA33A5C")]
		public ControllerOffsetHelper()
		{
		}
	}
	[Token(Token = "0x200031D")]
	public class ControllerOffset
	{
		[Token(Token = "0x170001C5")]
		public string ControllerName
		{
			[Token(Token = "0x60012A6")]
			[Address(RVA = "0xA33BF0", Offset = "0xA33BF0", VA = "0xA33BF0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60012A7")]
			[Address(RVA = "0xA33BF8", Offset = "0xA33BF8", VA = "0xA33BF8")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170001C6")]
		public Vector3 LeftControllerPositionOffset
		{
			[Token(Token = "0x60012A8")]
			[Address(RVA = "0xA33C00", Offset = "0xA33C00", VA = "0xA33C00")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60012A9")]
			[Address(RVA = "0xA33C0C", Offset = "0xA33C0C", VA = "0xA33C0C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170001C7")]
		public Vector3 RightControllerPositionOffset
		{
			[Token(Token = "0x60012AA")]
			[Address(RVA = "0xA33C18", Offset = "0xA33C18", VA = "0xA33C18")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60012AB")]
			[Address(RVA = "0xA33C24", Offset = "0xA33C24", VA = "0xA33C24")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170001C8")]
		public Vector3 LeftControllerRotationOffset
		{
			[Token(Token = "0x60012AC")]
			[Address(RVA = "0xA33C30", Offset = "0xA33C30", VA = "0xA33C30")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60012AD")]
			[Address(RVA = "0xA33C3C", Offset = "0xA33C3C", VA = "0xA33C3C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170001C9")]
		public Vector3 RightControlleRotationOffset
		{
			[Token(Token = "0x60012AE")]
			[Address(RVA = "0xA33C48", Offset = "0xA33C48", VA = "0xA33C48")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60012AF")]
			[Address(RVA = "0xA33C54", Offset = "0xA33C54", VA = "0xA33C54")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x60012B0")]
		[Address(RVA = "0xA339B0", Offset = "0xA339B0", VA = "0xA339B0")]
		public ControllerOffset()
		{
		}
	}
	[Token(Token = "0x200031E")]
	public class DetachableLimb : MonoBehaviour
	{
		[Token(Token = "0x400161C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform ShrinkBone;

		[Token(Token = "0x400161D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject ReplaceGrabbableWith;

		[Token(Token = "0x400161E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject EnableOnDetach;

		[Token(Token = "0x60012B1")]
		[Address(RVA = "0xA33C60", Offset = "0xA33C60", VA = "0xA33C60")]
		public void DoDismemberment(Grabber grabbedBy)
		{
		}

		[Token(Token = "0x60012B2")]
		[Address(RVA = "0xA33F10", Offset = "0xA33F10", VA = "0xA33F10")]
		public void ReverseDismemberment()
		{
		}

		[Token(Token = "0x60012B3")]
		[Address(RVA = "0xA34030", Offset = "0xA34030", VA = "0xA34030")]
		public DetachableLimb()
		{
		}
	}
	[Token(Token = "0x200031F")]
	public class DoorHelper : MonoBehaviour
	{
		[Token(Token = "0x400161F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioClip DoorOpenSound;

		[Token(Token = "0x4001620")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AudioClip DoorCloseSound;

		[Token(Token = "0x4001621")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Does the handle need to be turned in order to open the door from the closed position?")]
		public bool RequireHandleTurnToOpen;

		[Token(Token = "0x4001622")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		private bool handleLocked;

		[Token(Token = "0x4001623")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform HandleFollower;

		[Token(Token = "0x4001624")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float DegreesTurned;

		[Token(Token = "0x4001625")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float DegreesTurnToOpen;

		[Token(Token = "0x4001626")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform DoorLockTransform;

		[Token(Token = "0x4001627")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float initialLockPosition;

		[Token(Token = "0x4001628")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private HingeJoint hinge;

		[Token(Token = "0x4001629")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Rigidbody rigid;

		[Token(Token = "0x400162A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool playedOpenSound;

		[Token(Token = "0x400162B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		private bool readyToPlayCloseSound;

		[Token(Token = "0x400162C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float AngularVelocitySnapDoor;

		[Token(Token = "0x400162D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float angle;

		[Token(Token = "0x400162E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float AngularVelocity;

		[Token(Token = "0x400162F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("If true the door will not respond to user input")]
		public bool DoorIsLocked;

		[Token(Token = "0x4001630")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public float lockPos;

		[Token(Token = "0x4001631")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 currentRotation;

		[Token(Token = "0x4001632")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private float moveLockAmount;

		[Token(Token = "0x4001633")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float rotateAngles;

		[Token(Token = "0x4001634")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float ratio;

		[Token(Token = "0x60012B4")]
		[Address(RVA = "0xA34038", Offset = "0xA34038", VA = "0xA34038")]
		private void Start()
		{
		}

		[Token(Token = "0x60012B5")]
		[Address(RVA = "0xA3412C", Offset = "0xA3412C", VA = "0xA3412C")]
		private void Update()
		{
		}

		[Token(Token = "0x60012B6")]
		[Address(RVA = "0xA345A4", Offset = "0xA345A4", VA = "0xA345A4")]
		public DoorHelper()
		{
		}
	}
	[Token(Token = "0x2000320")]
	public class GrabberArea : MonoBehaviour
	{
		[Token(Token = "0x4001635")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Grabber InArea;

		[Token(Token = "0x4001636")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<Grabber> grabbersInArea;

		[Token(Token = "0x60012B7")]
		[Address(RVA = "0xA345C4", Offset = "0xA345C4", VA = "0xA345C4")]
		private void Update()
		{
		}

		[Token(Token = "0x60012B8")]
		[Address(RVA = "0xA345E4", Offset = "0xA345E4", VA = "0xA345E4")]
		public Grabber GetOpenGrabber()
		{
			return null;
		}

		[Token(Token = "0x60012B9")]
		[Address(RVA = "0xA34774", Offset = "0xA34774", VA = "0xA34774")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x60012BA")]
		[Address(RVA = "0xA34918", Offset = "0xA34918", VA = "0xA34918")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x60012BB")]
		[Address(RVA = "0xA34A0C", Offset = "0xA34A0C", VA = "0xA34A0C")]
		public GrabberArea()
		{
		}
	}
	[Token(Token = "0x2000321")]
	public class HandCollision : MonoBehaviour
	{
		[Token(Token = "0x4001637")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HandController HandControl;

		[Token(Token = "0x4001638")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Grabber HandGrabber;

		[Token(Token = "0x4001639")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool EnableHandCollision;

		[Token(Token = "0x400163A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool EnableCollisionOnPoint;

		[Token(Token = "0x400163B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		public bool EnableCollisionOnFist;

		[Token(Token = "0x400163C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B")]
		public bool EnableCollisionOnAllPoses;

		[Token(Token = "0x400163D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool EnableCollisionDuringGrab;

		[Token(Token = "0x400163E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float PointAmount;

		[Token(Token = "0x400163F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float GripAmount;

		[Token(Token = "0x4001640")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool MakingFist;

		[Token(Token = "0x4001641")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<Collider> handColliders;

		[Token(Token = "0x60012BC")]
		[Address(RVA = "0xA34A14", Offset = "0xA34A14", VA = "0xA34A14")]
		private void Start()
		{
		}

		[Token(Token = "0x60012BD")]
		[Address(RVA = "0xA34B90", Offset = "0xA34B90", VA = "0xA34B90")]
		private void Update()
		{
		}

		[Token(Token = "0x60012BE")]
		[Address(RVA = "0xA34E94", Offset = "0xA34E94", VA = "0xA34E94")]
		public HandCollision()
		{
		}
	}
	[Token(Token = "0x2000322")]
	public class HandController : MonoBehaviour
	{
		[Token(Token = "0x4001642")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("HandController parent will be set to this on Start if specified")]
		public Transform HandAnchor;

		[Token(Token = "0x4001643")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("If true, this transform will be parented to HandAnchor and it's position / rotation set to 0,0,0.")]
		public bool ResetHandAnchorPosition;

		[Token(Token = "0x4001644")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Animator HandAnimator;

		[Token(Token = "0x4001645")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("(Optional) If specified, this HandPoser can be used when setting poses retrieved from a grabbed Grabbable.")]
		public HandPoser handPoser;

		[Token(Token = "0x4001646")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("(Optional) If specified, this AutoPoser component can be used when if set on the Grabbable, or if AutoPose is set to true")]
		public AutoPoser autoPoser;

		[Token(Token = "0x4001647")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private HandPoseBlender poseBlender;

		[Token(Token = "0x4001648")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("How to handle the hand when nothing is being grabbed / idle. Ex : Can use an Animator to control the hand via blending, a HandPoser to control via blend states, AutoPoser to continually auto pose while nothing is being held, or 'None' if you want to handle the idle state yourself.")]
		public HandPoserType IdlePoseType;

		[Token(Token = "0x4001649")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("If true, the idle hand pose will be determined by the connected Valve Index Controller's finger tracking. Requires the SteamVR SDK. Make sure IdlePoseType is set to 'HandPoser'")]
		public bool UseIndexFingerTracking;

		[Token(Token = "0x400164A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("How fast to Lerp the Layer Animations")]
		public float HandAnimationSpeed;

		[Token(Token = "0x400164B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Check the state of this grabber to determine animation state. If null, a child Grabber component will be used.")]
		public Grabber grabber;

		[Token(Token = "0x400164C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Header("Shown for Debug : ")]
		public float GripAmount;

		[Token(Token = "0x400164D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float _prevGrip;

		[Token(Token = "0x400164E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float PointAmount;

		[Token(Token = "0x400164F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float _prevPoint;

		[Token(Token = "0x4001650")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float ThumbAmount;

		[Token(Token = "0x4001651")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float _prevThumb;

		[Token(Token = "0x4001652")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private bool _thumbIsNear;

		[Token(Token = "0x4001653")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
		private bool _indexIsNear;

		[Token(Token = "0x4001654")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float _triggerValue;

		[Token(Token = "0x4001655")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float _gripValue;

		[Token(Token = "0x4001656")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public int PoseId;

		[Token(Token = "0x4001657")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private ControllerOffsetHelper offset;

		[Token(Token = "0x4001658")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private InputBridge input;

		[Token(Token = "0x4001659")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Rigidbody rigid;

		[Token(Token = "0x400165A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Transform offsetTransform;

		[Token(Token = "0x400165B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public GameObject PreviousHeldObject;

		[Token(Token = "0x400165C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public bool DoUpdateAnimationStates;

		[Token(Token = "0x400165D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB1")]
		public bool DoUpdateHandPoser;

		[Token(Token = "0x170001CA")]
		private Vector3 offsetPosition
		{
			[Token(Token = "0x60012BF")]
			[Address(RVA = "0xA34EAC", Offset = "0xA34EAC", VA = "0xA34EAC")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170001CB")]
		private Vector3 offsetRotation
		{
			[Token(Token = "0x60012C0")]
			[Address(RVA = "0xA34F70", Offset = "0xA34F70", VA = "0xA34F70")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x60012C1")]
		[Address(RVA = "0xA35034", Offset = "0xA35034", VA = "0xA35034")]
		private void Start()
		{
		}

		[Token(Token = "0x60012C2")]
		[Address(RVA = "0xA35398", Offset = "0xA35398", VA = "0xA35398")]
		public void Update()
		{
		}

		[Token(Token = "0x60012C3")]
		[Address(RVA = "0xA353EC", Offset = "0xA353EC", VA = "0xA353EC", Slot = "4")]
		public virtual void UpdateHeldObjectState()
		{
		}

		[Token(Token = "0x60012C4")]
		[Address(RVA = "0xA3544C", Offset = "0xA3544C", VA = "0xA3544C", Slot = "5")]
		public virtual void UpdateIdleState()
		{
		}

		[Token(Token = "0x60012C5")]
		[Address(RVA = "0xA35498", Offset = "0xA35498", VA = "0xA35498", Slot = "6")]
		public virtual bool HoldingObject()
		{
			return default(bool);
		}

		[Token(Token = "0x60012C6")]
		[Address(RVA = "0xA35540", Offset = "0xA35540", VA = "0xA35540", Slot = "7")]
		public virtual void CheckForGrabChange()
		{
		}

		[Token(Token = "0x60012C7")]
		[Address(RVA = "0xA356A4", Offset = "0xA356A4", VA = "0xA356A4", Slot = "8")]
		public virtual void OnGrabChange(GameObject newlyHeldObject)
		{
		}

		[Token(Token = "0x60012C8")]
		[Address(RVA = "0xA35848", Offset = "0xA35848", VA = "0xA35848", Slot = "9")]
		public virtual void OnGrabDrop()
		{
		}

		[Token(Token = "0x60012C9")]
		[Address(RVA = "0xA358D4", Offset = "0xA358D4", VA = "0xA358D4", Slot = "10")]
		public virtual void SetHandAnimator()
		{
		}

		[Token(Token = "0x60012CA")]
		[Address(RVA = "0xA359A8", Offset = "0xA359A8", VA = "0xA359A8", Slot = "11")]
		public virtual void UpdateFromInputs()
		{
		}

		[Token(Token = "0x60012CB")]
		[Address(RVA = "0xA35B98", Offset = "0xA35B98", VA = "0xA35B98", Slot = "12")]
		public virtual void UpdateAnimimationStates()
		{
		}

		[Token(Token = "0x60012CC")]
		[Address(RVA = "0xA35F98", Offset = "0xA35F98", VA = "0xA35F98")]
		private void setAnimatorBlend(float min, float max, float input, int animationLayer)
		{
		}

		[Token(Token = "0x60012CD")]
		[Address(RVA = "0xA35FC0", Offset = "0xA35FC0", VA = "0xA35FC0", Slot = "13")]
		public virtual bool IsAnimatorGrabbable()
		{
			return default(bool);
		}

		[Token(Token = "0x60012CE")]
		[Address(RVA = "0xA360A8", Offset = "0xA360A8", VA = "0xA360A8", Slot = "14")]
		public virtual void UpdateHandPoser()
		{
		}

		[Token(Token = "0x60012CF")]
		[Address(RVA = "0xA362D8", Offset = "0xA362D8", VA = "0xA362D8", Slot = "15")]
		public virtual bool IsHandPoserGrabbable()
		{
			return default(bool);
		}

		[Token(Token = "0x60012D0")]
		[Address(RVA = "0xA363C0", Offset = "0xA363C0", VA = "0xA363C0", Slot = "16")]
		public virtual void UpdateHandPoserIdleState()
		{
		}

		[Token(Token = "0x60012D1")]
		[Address(RVA = "0xA36568", Offset = "0xA36568", VA = "0xA36568", Slot = "17")]
		public virtual void UpdateIndexFingerBlending()
		{
		}

		[Token(Token = "0x60012D2")]
		[Address(RVA = "0xA3656C", Offset = "0xA3656C", VA = "0xA3656C", Slot = "18")]
		public virtual bool SetupPoseBlender()
		{
			return default(bool);
		}

		[Token(Token = "0x60012D3")]
		[Address(RVA = "0xA367C4", Offset = "0xA367C4", VA = "0xA367C4", Slot = "19")]
		public virtual HandPose GetDefaultOpenPose()
		{
			return null;
		}

		[Token(Token = "0x60012D4")]
		[Address(RVA = "0xA3681C", Offset = "0xA3681C", VA = "0xA3681C", Slot = "20")]
		public virtual HandPose GetDefaultClosedPose()
		{
			return null;
		}

		[Token(Token = "0x60012D5")]
		[Address(RVA = "0xA36874", Offset = "0xA36874", VA = "0xA36874", Slot = "21")]
		public virtual void EnableHandPoser()
		{
		}

		[Token(Token = "0x60012D6")]
		[Address(RVA = "0xA368F8", Offset = "0xA368F8", VA = "0xA368F8", Slot = "22")]
		public virtual void EnableAutoPoser(bool continuous)
		{
		}

		[Token(Token = "0x60012D7")]
		[Address(RVA = "0xA36A94", Offset = "0xA36A94", VA = "0xA36A94", Slot = "23")]
		public virtual void DisablePoseBlender()
		{
		}

		[Token(Token = "0x60012D8")]
		[Address(RVA = "0xA36B0C", Offset = "0xA36B0C", VA = "0xA36B0C", Slot = "24")]
		public virtual void DisableAutoPoser()
		{
		}

		[Token(Token = "0x60012D9")]
		[Address(RVA = "0xA36B84", Offset = "0xA36B84", VA = "0xA36B84", Slot = "25")]
		public virtual bool IsAutoPoserGrabbable()
		{
			return default(bool);
		}

		[Token(Token = "0x60012DA")]
		[Address(RVA = "0xA36C70", Offset = "0xA36C70", VA = "0xA36C70", Slot = "26")]
		public virtual void EnableHandAnimator()
		{
		}

		[Token(Token = "0x60012DB")]
		[Address(RVA = "0xA36D48", Offset = "0xA36D48", VA = "0xA36D48", Slot = "27")]
		public virtual void DisableHandAnimator()
		{
		}

		[Token(Token = "0x60012DC")]
		[Address(RVA = "0xA36DE4", Offset = "0xA36DE4", VA = "0xA36DE4", Slot = "28")]
		public virtual void OnGrabberGrabbed(Grabbable grabbed)
		{
		}

		[Token(Token = "0x60012DD")]
		[Address(RVA = "0xA36EE0", Offset = "0xA36EE0", VA = "0xA36EE0", Slot = "29")]
		public virtual void UpdateCurrentHandPose()
		{
		}

		[Token(Token = "0x60012DE")]
		[Address(RVA = "0xA36F88", Offset = "0xA36F88", VA = "0xA36F88", Slot = "30")]
		public virtual void OnGrabberReleased(Grabbable released)
		{
		}

		[Token(Token = "0x60012DF")]
		[Address(RVA = "0xA36F94", Offset = "0xA36F94", VA = "0xA36F94")]
		public HandController()
		{
		}
	}
	[Token(Token = "0x2000323")]
	public enum HandPoserType
	{
		[Token(Token = "0x400165F")]
		HandPoser,
		[Token(Token = "0x4001660")]
		Animator,
		[Token(Token = "0x4001661")]
		AutoPoser,
		[Token(Token = "0x4001662")]
		None
	}
	[Token(Token = "0x2000324")]
	public class HandleGFXHelper : MonoBehaviour
	{
		[Token(Token = "0x4001663")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform LookAt;

		[Token(Token = "0x4001664")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Grabbable HandleGrabbable;

		[Token(Token = "0x4001665")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float Speed;

		[Token(Token = "0x4001666")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float LocalYMin;

		[Token(Token = "0x4001667")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float LocalYMax;

		[Token(Token = "0x4001668")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 initialRot;

		[Token(Token = "0x60012E0")]
		[Address(RVA = "0xA36FB8", Offset = "0xA36FB8", VA = "0xA36FB8")]
		private void Start()
		{
		}

		[Token(Token = "0x60012E1")]
		[Address(RVA = "0xA36FE8", Offset = "0xA36FE8", VA = "0xA36FE8")]
		private void Update()
		{
		}

		[Token(Token = "0x60012E2")]
		[Address(RVA = "0xA37274", Offset = "0xA37274", VA = "0xA37274")]
		public HandleGFXHelper()
		{
		}
	}
	[Token(Token = "0x2000325")]
	public class HandleHelper : MonoBehaviour
	{
		[Token(Token = "0x2000326")]
		[CompilerGenerated]
		private sealed class <doRelease>d__10 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001670")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001671")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001672")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HandleHelper <>4__this;

			[Token(Token = "0x170001CC")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60012EB")]
				[Address(RVA = "0xA3794C", Offset = "0xA3794C", VA = "0xA3794C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001CD")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60012ED")]
				[Address(RVA = "0xA37994", Offset = "0xA37994", VA = "0xA37994", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60012E8")]
			[Address(RVA = "0xA3785C", Offset = "0xA3785C", VA = "0xA3785C")]
			[DebuggerHidden]
			public <doRelease>d__10(int <>1__state)
			{
			}

			[Token(Token = "0x60012E9")]
			[Address(RVA = "0xA3788C", Offset = "0xA3788C", VA = "0xA3788C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60012EA")]
			[Address(RVA = "0xA37890", Offset = "0xA37890", VA = "0xA37890", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60012EC")]
			[Address(RVA = "0xA37954", Offset = "0xA37954", VA = "0xA37954", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001669")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Rigidbody ParentRigid;

		[Token(Token = "0x400166A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform HandleTransform;

		[Token(Token = "0x400166B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Grabbable thisGrab;

		[Token(Token = "0x400166C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Rigidbody rb;

		[Token(Token = "0x400166D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool didRelease;

		[Token(Token = "0x400166E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Collider col;

		[Token(Token = "0x400166F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3 lastAngularVelocity;

		[Token(Token = "0x60012E3")]
		[Address(RVA = "0xA37290", Offset = "0xA37290", VA = "0xA37290")]
		private void Start()
		{
		}

		[Token(Token = "0x60012E4")]
		[Address(RVA = "0xA37438", Offset = "0xA37438", VA = "0xA37438")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60012E5")]
		[Address(RVA = "0xA37828", Offset = "0xA37828", VA = "0xA37828")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x60012E6")]
		[Address(RVA = "0xA377B4", Offset = "0xA377B4", VA = "0xA377B4")]
		[IteratorStateMachine(typeof(<doRelease>d__10))]
		private IEnumerator doRelease()
		{
			return null;
		}

		[Token(Token = "0x60012E7")]
		[Address(RVA = "0xA37884", Offset = "0xA37884", VA = "0xA37884")]
		public HandleHelper()
		{
		}
	}
	[Token(Token = "0x2000327")]
	public class HandPhysics : MonoBehaviour
	{
		[Token(Token = "0x2000328")]
		[CompilerGenerated]
		private sealed class <UnignoreAllCollisions>d__31 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400168A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400168B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400168C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HandPhysics <>4__this;

			[Token(Token = "0x400168D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Grabbable <thisGrabbable>5__2;

			[Token(Token = "0x170001CF")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001309")]
				[Address(RVA = "0xA3AB90", Offset = "0xA3AB90", VA = "0xA3AB90", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001D0")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600130B")]
				[Address(RVA = "0xA3ABD8", Offset = "0xA3ABD8", VA = "0xA3ABD8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001306")]
			[Address(RVA = "0xA3AA80", Offset = "0xA3AA80", VA = "0xA3AA80")]
			[DebuggerHidden]
			public <UnignoreAllCollisions>d__31(int <>1__state)
			{
			}

			[Token(Token = "0x6001307")]
			[Address(RVA = "0xA3AAA8", Offset = "0xA3AAA8", VA = "0xA3AAA8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001308")]
			[Address(RVA = "0xA3AAAC", Offset = "0xA3AAAC", VA = "0xA3AAAC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600130A")]
			[Address(RVA = "0xA3AB98", Offset = "0xA3AB98", VA = "0xA3AB98", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001673")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("This is the object our physical hand should try to follow / match. Should typically be an object on the controller Transform")]
		public Transform AttachTo;

		[Token(Token = "0x4001674")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Amount of Velocity to apply to hands when trying to reach anchor point")]
		public float HandVelocity;

		[Token(Token = "0x4001675")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("If true, Hand COlliders will be disabled while grabbing an object")]
		public bool DisableHandCollidersOnGrab;

		[Token(Token = "0x4001676")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("If the hand exceeds this distance from it's origin it will snap back to the original position. Specified in meters.")]
		public float SnapBackDistance;

		[Token(Token = "0x4001677")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("This is the Grabber to use when this hand is active.")]
		public Grabber ThisGrabber;

		[Token(Token = "0x4001678")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Disable this Grabber when this hand is active. (Optional)")]
		public Grabber DisableGrabber;

		[Token(Token = "0x4001679")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("This is the RemoteGrabber to use when this hand is active.")]
		public RemoteGrabber ThisRemoteGrabber;

		[Token(Token = "0x400167A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Disable this RemoteGrabber when this hand is active. (Optional)")]
		public RemoteGrabber DisableRemoteGrabber;

		[Token(Token = "0x400167B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Assign Hand Colliders this material if provided")]
		public PhysicMaterial ColliderMaterial;

		[Token(Token = "0x400167C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform HandModel;

		[Token(Token = "0x400167D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform HandModelOffset;

		[Token(Token = "0x400167E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private List<Collider> handColliders;

		[Token(Token = "0x400167F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Rigidbody rigid;

		[Token(Token = "0x4001680")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private ConfigurableJoint configJoint;

		[Token(Token = "0x4001681")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Grabbable heldGrabbable;

		[Token(Token = "0x4001682")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private List<Collider> collisions;

		[Token(Token = "0x4001683")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private LineRenderer line;

		[Token(Token = "0x4001684")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3 localHandOffset;

		[Token(Token = "0x4001685")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private Vector3 localHandOffsetRotation;

		[Token(Token = "0x4001686")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private bool wasHoldingObject;

		[Token(Token = "0x4001687")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Grabbable remoteIgnoredGrabbable;

		[Token(Token = "0x4001688")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Transform _priorParent;

		[Token(Token = "0x4001689")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Vector3 _priorLocalOffsetPosition;

		[Token(Token = "0x170001CE")]
		public bool HoldingObject
		{
			[Token(Token = "0x60012EE")]
			[Address(RVA = "0xA3799C", Offset = "0xA3799C", VA = "0xA3799C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60012EF")]
		[Address(RVA = "0xA37A40", Offset = "0xA37A40", VA = "0xA37A40")]
		private void Start()
		{
		}

		[Token(Token = "0x60012F0")]
		[Address(RVA = "0xA37FF4", Offset = "0xA37FF4", VA = "0xA37FF4")]
		private void Update()
		{
		}

		[Token(Token = "0x60012F1")]
		[Address(RVA = "0xA387E0", Offset = "0xA387E0", VA = "0xA387E0")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60012F2")]
		[Address(RVA = "0xA37D6C", Offset = "0xA37D6C", VA = "0xA37D6C")]
		private void initHandColliders()
		{
		}

		[Token(Token = "0x60012F3")]
		[Address(RVA = "0xA38514", Offset = "0xA38514", VA = "0xA38514")]
		private void checkRemoteCollision()
		{
		}

		[Token(Token = "0x60012F4")]
		[Address(RVA = "0xA38348", Offset = "0xA38348", VA = "0xA38348")]
		private void drawDistanceLine()
		{
		}

		[Token(Token = "0x60012F5")]
		[Address(RVA = "0xA386B4", Offset = "0xA386B4", VA = "0xA386B4")]
		private void checkBreakDistance()
		{
		}

		[Token(Token = "0x60012F6")]
		[Address(RVA = "0xA3817C", Offset = "0xA3817C", VA = "0xA3817C")]
		private void updateHandGraphics()
		{
		}

		[Token(Token = "0x60012F7")]
		[Address(RVA = "0xA38D70", Offset = "0xA38D70", VA = "0xA38D70")]
		[IteratorStateMachine(typeof(<UnignoreAllCollisions>d__31))]
		private IEnumerator UnignoreAllCollisions()
		{
			return null;
		}

		[Token(Token = "0x60012F8")]
		[Address(RVA = "0xA38C58", Offset = "0xA38C58", VA = "0xA38C58")]
		public void IgnoreGrabbableCollisions(Grabbable grab, bool ignorePhysics)
		{
		}

		[Token(Token = "0x60012F9")]
		[Address(RVA = "0xA38DE4", Offset = "0xA38DE4", VA = "0xA38DE4")]
		public void DisableHandColliders()
		{
		}

		[Token(Token = "0x60012FA")]
		[Address(RVA = "0xA38EF4", Offset = "0xA38EF4", VA = "0xA38EF4")]
		public void EnableHandColliders()
		{
		}

		[Token(Token = "0x60012FB")]
		[Address(RVA = "0xA39004", Offset = "0xA39004", VA = "0xA39004", Slot = "4")]
		public virtual void OnGrabbedObject(Grabbable grabbedObject)
		{
		}

		[Token(Token = "0x60012FC")]
		[Address(RVA = "0xA39050", Offset = "0xA39050", VA = "0xA39050", Slot = "5")]
		public virtual void LockLocalPosition()
		{
		}

		[Token(Token = "0x60012FD")]
		[Address(RVA = "0xA390A0", Offset = "0xA390A0", VA = "0xA390A0", Slot = "6")]
		public virtual void UnlockLocalPosition()
		{
		}

		[Token(Token = "0x60012FE")]
		[Address(RVA = "0xA390C8", Offset = "0xA390C8", VA = "0xA390C8", Slot = "7")]
		public virtual void OnReleasedObject(Grabbable grabbedObject)
		{
		}

		[Token(Token = "0x60012FF")]
		[Address(RVA = "0xA39174", Offset = "0xA39174", VA = "0xA39174")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001300")]
		[Address(RVA = "0xA39408", Offset = "0xA39408", VA = "0xA39408", Slot = "8")]
		public virtual void LockOffset()
		{
		}

		[Token(Token = "0x6001301")]
		[Address(RVA = "0xA39454", Offset = "0xA39454", VA = "0xA39454", Slot = "9")]
		public virtual void UnlockOffset()
		{
		}

		[Token(Token = "0x6001302")]
		[Address(RVA = "0xA39580", Offset = "0xA39580", VA = "0xA39580")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001303")]
		[Address(RVA = "0xA39838", Offset = "0xA39838", VA = "0xA39838")]
		private void OnCollisionStay(Collision collision)
		{
		}

		[Token(Token = "0x6001304")]
		[Address(RVA = "0xA399D4", Offset = "0xA399D4", VA = "0xA399D4")]
		public bool IsValidCollision(Collider col)
		{
			return default(bool);
		}

		[Token(Token = "0x6001305")]
		[Address(RVA = "0xA399DC", Offset = "0xA399DC", VA = "0xA399DC")]
		public HandPhysics()
		{
		}
	}
	[Token(Token = "0x2000329")]
	public class HandRepresentationHelper : MonoBehaviour
	{
		[Token(Token = "0x400168E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The GameObject to be shown or hidden depending on Distance from OtherHandTransform")]
		public Transform HandToToggle;

		[Token(Token = "0x400168F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The other Hand Transform used to calculate distance")]
		public Transform OtherHandTransform;

		[Token(Token = "0x4001690")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Distance required to show this Transform in meters")]
		public float DistanceToShow;

		[Token(Token = "0x600130C")]
		[Address(RVA = "0xA3ABE0", Offset = "0xA3ABE0", VA = "0xA3ABE0")]
		private void Update()
		{
		}

		[Token(Token = "0x600130D")]
		[Address(RVA = "0xA3ACD4", Offset = "0xA3ACD4", VA = "0xA3ACD4")]
		public HandRepresentationHelper()
		{
		}
	}
	[Token(Token = "0x200032A")]
	public class IgnoreColliders : MonoBehaviour
	{
		[Token(Token = "0x4001691")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<Collider> CollidersToIgnore;

		[Token(Token = "0x4001692")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private CharacterController player;

		[Token(Token = "0x600130E")]
		[Address(RVA = "0xA3ACE8", Offset = "0xA3ACE8", VA = "0xA3ACE8")]
		private void FindPlayer()
		{
		}

		[Token(Token = "0x600130F")]
		[Address(RVA = "0xA3AE70", Offset = "0xA3AE70", VA = "0xA3AE70")]
		private void Start()
		{
		}

		[Token(Token = "0x6001310")]
		[Address(RVA = "0xA3B04C", Offset = "0xA3B04C", VA = "0xA3B04C")]
		public IgnoreColliders()
		{
		}
	}
	[Token(Token = "0x200032B")]
	public class InvalidTeleportArea : MonoBehaviour
	{
		[Token(Token = "0x6001311")]
		[Address(RVA = "0xA3B054", Offset = "0xA3B054", VA = "0xA3B054")]
		public InvalidTeleportArea()
		{
		}
	}
	[Token(Token = "0x200032C")]
	public class JointBreaker : MonoBehaviour
	{
		[Token(Token = "0x4001693")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float BreakDistance;

		[Token(Token = "0x4001694")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float JointDistance;

		[Token(Token = "0x4001695")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool DestroyJointOnBreak;

		[Token(Token = "0x4001696")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GrabberEvent OnBreakEvent;

		[Token(Token = "0x4001697")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Joint theJoint;

		[Token(Token = "0x4001698")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 startPos;

		[Token(Token = "0x4001699")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private bool brokeJoint;

		[Token(Token = "0x6001312")]
		[Address(RVA = "0xA3B05C", Offset = "0xA3B05C", VA = "0xA3B05C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001313")]
		[Address(RVA = "0xA3B0D8", Offset = "0xA3B0D8", VA = "0xA3B0D8")]
		private void Update()
		{
		}

		[Token(Token = "0x6001314")]
		[Address(RVA = "0xA3B1C4", Offset = "0xA3B1C4", VA = "0xA3B1C4")]
		public void BreakJoint()
		{
		}

		[Token(Token = "0x6001315")]
		[Address(RVA = "0xA3B334", Offset = "0xA3B334", VA = "0xA3B334")]
		public JointBreaker()
		{
		}
	}
	[Token(Token = "0x200032D")]
	public class JointHelper : MonoBehaviour
	{
		[Token(Token = "0x400169A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool LockXPosition;

		[Token(Token = "0x400169B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool LockYPosition;

		[Token(Token = "0x400169C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public bool LockZPosition;

		[Token(Token = "0x400169D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
		public bool LockXScale;

		[Token(Token = "0x400169E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool LockYScale;

		[Token(Token = "0x400169F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		public bool LockZScale;

		[Token(Token = "0x40016A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
		public bool LockXRotation;

		[Token(Token = "0x40016A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F")]
		public bool LockYRotation;

		[Token(Token = "0x40016A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool LockZRotation;

		[Token(Token = "0x40016A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Vector3 initialPosition;

		[Token(Token = "0x40016A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 initialRotation;

		[Token(Token = "0x40016A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Vector3 initialScale;

		[Token(Token = "0x40016A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3 currentPosition;

		[Token(Token = "0x40016A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Vector3 currentScale;

		[Token(Token = "0x40016A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 currentRotation;

		[Token(Token = "0x6001316")]
		[Address(RVA = "0xA3B34C", Offset = "0xA3B34C", VA = "0xA3B34C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001317")]
		[Address(RVA = "0xA3B3BC", Offset = "0xA3B3BC", VA = "0xA3B3BC")]
		private void lockPosition()
		{
		}

		[Token(Token = "0x6001318")]
		[Address(RVA = "0xA3B59C", Offset = "0xA3B59C", VA = "0xA3B59C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001319")]
		[Address(RVA = "0xA3B5A0", Offset = "0xA3B5A0", VA = "0xA3B5A0")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x600131A")]
		[Address(RVA = "0xA3B5A4", Offset = "0xA3B5A4", VA = "0xA3B5A4")]
		public JointHelper()
		{
		}
	}
	[Token(Token = "0x200032E")]
	public class RagdollHelper : MonoBehaviour
	{
		[Token(Token = "0x40016A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Transform player;

		[Token(Token = "0x40016AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<Collider> colliders;

		[Token(Token = "0x40016AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Collider playerCol;

		[Token(Token = "0x600131B")]
		[Address(RVA = "0xA3B5BC", Offset = "0xA3B5BC", VA = "0xA3B5BC")]
		private void Start()
		{
		}

		[Token(Token = "0x600131C")]
		[Address(RVA = "0xA3B7D0", Offset = "0xA3B7D0", VA = "0xA3B7D0")]
		public RagdollHelper()
		{
		}
	}
	[Token(Token = "0x200032F")]
	public class RingHelper : MonoBehaviour
	{
		[Token(Token = "0x40016AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The Grabbable Object to Observe")]
		public Grabbable grabbable;

		[Token(Token = "0x40016AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("(Optional) If specified, the ring helper will only be valid if this Grabpoint is the nearest on the the grabbable object")]
		public GrabPoint Grabpoint;

		[Token(Token = "0x40016AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Default Color of the ring")]
		public Color RingColor;

		[Token(Token = "0x40016AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Color to use if selected by primary controller")]
		public Color RingSelectedColor;

		[Token(Token = "0x40016B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Color to use if selected by secondary controller")]
		public Color RingSecondarySelectedColor;

		[Token(Token = "0x40016B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float ringSizeInRange;

		[Token(Token = "0x40016B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float ringSizeGrabbable;

		[Token(Token = "0x40016B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Don't show grab rings if left and right controllers / grabbers are  holding something")]
		public bool HideIfHandsAreFull;

		[Token(Token = "0x40016B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Tooltip("How fast to lerp the opacity if being hidden / shown")]
		public float RingFadeSpeed;

		[Token(Token = "0x40016B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Canvas canvas;

		[Token(Token = "0x40016B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Text text;

		[Token(Token = "0x40016B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private CanvasScaler scaler;

		[Token(Token = "0x40016B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Grabber leftGrabber;

		[Token(Token = "0x40016B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Grabber rightGrabber;

		[Token(Token = "0x40016BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Grabber closestGrabber;

		[Token(Token = "0x40016BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private bool handsFull;

		[Token(Token = "0x40016BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private float _initalOpacity;

		[Token(Token = "0x40016BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private float _currentOpacity;

		[Token(Token = "0x40016BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Transform mainCam;

		[Token(Token = "0x600131D")]
		[Address(RVA = "0xA3B7D8", Offset = "0xA3B7D8", VA = "0xA3B7D8")]
		private void Start()
		{
		}

		[Token(Token = "0x600131E")]
		[Address(RVA = "0xA3B9DC", Offset = "0xA3B9DC", VA = "0xA3B9DC")]
		private void Update()
		{
		}

		[Token(Token = "0x600131F")]
		[Address(RVA = "0xA3BFDC", Offset = "0xA3BFDC", VA = "0xA3BFDC", Slot = "4")]
		public virtual void AssignCamera()
		{
		}

		[Token(Token = "0x6001320")]
		[Address(RVA = "0xA3C0D0", Offset = "0xA3C0D0", VA = "0xA3C0D0", Slot = "5")]
		public virtual void AssignGrabbers()
		{
		}

		[Token(Token = "0x6001321")]
		[Address(RVA = "0xA3BED0", Offset = "0xA3BED0", VA = "0xA3BED0")]
		private Color getSelectedColor()
		{
			return default(Color);
		}

		[Token(Token = "0x6001322")]
		[Address(RVA = "0xA3C220", Offset = "0xA3C220", VA = "0xA3C220")]
		public RingHelper()
		{
		}
	}
	[Token(Token = "0x2000330")]
	public class ScaleMaterialHelper : MonoBehaviour
	{
		[Token(Token = "0x40016BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Renderer ren;

		[Token(Token = "0x40016C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector2 Tiling;

		[Token(Token = "0x40016C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector2 Offset;

		[Token(Token = "0x6001323")]
		[Address(RVA = "0xA3C258", Offset = "0xA3C258", VA = "0xA3C258")]
		private void Start()
		{
		}

		[Token(Token = "0x6001324")]
		[Address(RVA = "0xA3C2B8", Offset = "0xA3C2B8", VA = "0xA3C2B8")]
		private void updateTexture()
		{
		}

		[Token(Token = "0x6001325")]
		[Address(RVA = "0xA3C3A8", Offset = "0xA3C3A8", VA = "0xA3C3A8")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6001326")]
		[Address(RVA = "0xA3C3D0", Offset = "0xA3C3D0", VA = "0xA3C3D0")]
		public ScaleMaterialHelper()
		{
		}
	}
	[Token(Token = "0x2000331")]
	public class StaticBatch : MonoBehaviour
	{
		[Token(Token = "0x40016C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Material CombineMaterial;

		[Token(Token = "0x6001327")]
		[Address(RVA = "0xA3C3E0", Offset = "0xA3C3E0", VA = "0xA3C3E0")]
		private void Start()
		{
		}

		[Token(Token = "0x6001328")]
		[Address(RVA = "0xA3CA98", Offset = "0xA3CA98", VA = "0xA3CA98")]
		public StaticBatch()
		{
		}
	}
	[Token(Token = "0x2000332")]
	public class TeleportDestination : MonoBehaviour
	{
		[Token(Token = "0x40016C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Where the player will be teleported to")]
		public Transform DestinationTransform;

		[Token(Token = "0x40016C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Snap player to this rotation?")]
		public bool ForcePlayerRotation;

		[Token(Token = "0x40016C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Called when a player uses the teleporter to enter this destination.")]
		public UnityEvent OnPlayerTeleported;

		[Token(Token = "0x6001329")]
		[Address(RVA = "0xA3CAA0", Offset = "0xA3CAA0", VA = "0xA3CAA0")]
		public TeleportDestination()
		{
		}
	}
	[Token(Token = "0x2000333")]
	public class TeleportPlayerOnEnter : MonoBehaviour
	{
		[Token(Token = "0x40016C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform TeleportDestination;

		[Token(Token = "0x600132A")]
		[Address(RVA = "0xA3CAA8", Offset = "0xA3CAA8", VA = "0xA3CAA8")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x600132B")]
		[Address(RVA = "0xA3CBDC", Offset = "0xA3CBDC", VA = "0xA3CBDC")]
		public TeleportPlayerOnEnter()
		{
		}
	}
	[Token(Token = "0x2000334")]
	public class UITrigger : MonoBehaviour
	{
		[Token(Token = "0x600132C")]
		[Address(RVA = "0xA3CBE4", Offset = "0xA3CBE4", VA = "0xA3CBE4")]
		public UITrigger()
		{
		}
	}
	[Token(Token = "0x2000335")]
	public class VRIFGrabpointUpdater : MonoBehaviour
	{
		[Token(Token = "0x40016C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("This is the local position of the hand model that was defined in your previous xr rig, as well as what was used in the previewer.")]
		[Header("Right Hand Model")]
		public Vector3 PriorModelOffsetRightPosition;

		[Token(Token = "0x40016C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("This is the local position of the NEW hand model that is currently defined in your xr rig, as well as what is used in the previewer.")]
		public Vector3 NewModelOffsetRightPosition;

		[Token(Token = "0x40016C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("This is the local rotation of the hand model that was defined in your previous xr rig, as well as what was used in the previewer.")]
		public Vector3 PriorModelOffsetRightRotation;

		[Token(Token = "0x40016CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("This is the local rotation of the NEW hand model that is currently defined in your xr rig, as well as what is used in the previewer.")]
		public Vector3 NewModelOffsetRightRotation;

		[Token(Token = "0x40016CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Header("Left Hand Model")]
		[Tooltip("This is the local position of the hand model that was defined in your previous xr rig, as well as what was used in the previewer.")]
		public Vector3 PriorModelOffsetLeftPosition;

		[Token(Token = "0x40016CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Tooltip("This is the local position of the NEW hand model that is currently defined in your xr rig, as well as what is used in the previewer.")]
		public Vector3 NewModelOffsetLeftPosition;

		[Token(Token = "0x40016CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("This is the local rotation of the hand model that was defined in your previous xr rig, as well as what was used in the previewer.")]
		public Vector3 PriorModelOffsetLeftRotation;

		[Token(Token = "0x40016CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Tooltip("This is the local rotation of the NEW hand model that is currently defined in your xr rig, as well as what is used in the previewer.")]
		public Vector3 NewModelOffsetLeftRotation;

		[Token(Token = "0x600132D")]
		[Address(RVA = "0xA3CBEC", Offset = "0xA3CBEC", VA = "0xA3CBEC")]
		private void Start()
		{
		}

		[Token(Token = "0x600132E")]
		[Address(RVA = "0xA3CBF0", Offset = "0xA3CBF0", VA = "0xA3CBF0")]
		public void ApplyGrabPointUpdate()
		{
		}

		[Token(Token = "0x600132F")]
		[Address(RVA = "0xA3CF5C", Offset = "0xA3CF5C", VA = "0xA3CF5C")]
		public VRIFGrabpointUpdater()
		{
		}
	}
	[Token(Token = "0x2000336")]
	public class UIButtonCollider : MonoBehaviour
	{
		[Token(Token = "0x40016CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("If true, this button can be held down and the button's click event will be fired repeatedly. If false, the button's click event will only be called once per trigger enter")]
		[Header("Hold Button Down Option")]
		public bool CanBeHeldDown;

		[Token(Token = "0x40016D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Amount of time that must first pass before continuing to fire the button's click event. This value is used once. The 'HoldDownDelay' value is then used for each subsequent delay. ")]
		public float InitialHoldDownDelay;

		[Token(Token = "0x40016D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The amount of time that must pass in-between click events while the button is held down. ")]
		public float HoldDownDelay;

		[Token(Token = "0x40016D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Header("Animate Key")]
		[Tooltip("If true, this transform will be animated down on the Z axis by the PressedInZValue amount.")]
		public bool AnimateKey;

		[Token(Token = "0x40016D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("If AnimateKey is true, this transform will be animated down on the Z axis by this amount.")]
		public float PressedInZValue;

		[Token(Token = "0x40016D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("How fast to Lerp the key in")]
		public float PressInSpeed;

		[Token(Token = "0x40016D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private UnityEngine.UI.Button uiButton;

		[Token(Token = "0x40016D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected int itemsInTrigger;

		[Token(Token = "0x40016D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		protected bool readyForDownEvent;

		[Token(Token = "0x40016D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected int clickCount;

		[Token(Token = "0x40016D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		protected float lastPressTime;

		[Token(Token = "0x40016DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected BoxCollider boxCollider;

		[Token(Token = "0x40016DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected float colliderInitialCenterZ;

		[Token(Token = "0x6001330")]
		[Address(RVA = "0xA3CFAC", Offset = "0xA3CFAC", VA = "0xA3CFAC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001331")]
		[Address(RVA = "0xA3D094", Offset = "0xA3D094", VA = "0xA3D094")]
		private void Update()
		{
		}

		[Token(Token = "0x6001332")]
		[Address(RVA = "0xA3D540", Offset = "0xA3D540", VA = "0xA3D540")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6001333")]
		[Address(RVA = "0xA3D5E4", Offset = "0xA3D5E4", VA = "0xA3D5E4")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6001334")]
		[Address(RVA = "0xA3D688", Offset = "0xA3D688", VA = "0xA3D688")]
		public UIButtonCollider()
		{
		}
	}
	[Token(Token = "0x2000337")]
	public class UICanvasGroup : MonoBehaviour
	{
		[Token(Token = "0x40016DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<GameObject> CanvasObjects;

		[Token(Token = "0x6001335")]
		[Address(RVA = "0xA3D6B8", Offset = "0xA3D6B8", VA = "0xA3D6B8")]
		public void ActivateCanvas(int CanvasIndex)
		{
		}

		[Token(Token = "0x6001336")]
		[Address(RVA = "0xA3D7B4", Offset = "0xA3D7B4", VA = "0xA3D7B4")]
		public UICanvasGroup()
		{
		}
	}
	[Token(Token = "0x2000338")]
	public class UIPointer : MonoBehaviour
	{
		[Token(Token = "0x40016DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The controller side this pointer is on")]
		public ControllerHand ControllerSide;

		[Token(Token = "0x40016DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("If true this object will update the VRUISystem's Left or Right Transform property")]
		public bool AutoUpdateUITransforms;

		[Token(Token = "0x40016DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject cursor;

		[Token(Token = "0x40016E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GameObject _cursor;

		[Token(Token = "0x40016E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("If true the cursor and LineRenderer will be Hidden. Otherwise it will still be show at a fixed length")]
		public bool HidePointerIfNoObjectsFound;

		[Token(Token = "0x40016E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("How long the line / cursor should extend if no objects are found to point at")]
		public float FixedPointerLength;

		[Token(Token = "0x40016E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("If true the cursor object will scale based on how far away the pointer is from the origin. A cursor far away will have a larger cusor than one up close.")]
		public bool CursorScaling;

		[Token(Token = "0x40016E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("Minimum scale of the Cursor object if CursorScaling is enabled")]
		public float CursorMinScale;

		[Token(Token = "0x40016E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float CursorMaxScale;

		[Token(Token = "0x40016E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Vector3 _cursorInitialLocalScale;

		[Token(Token = "0x40016E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Example : 0.5 = Line Goes Half Way. 1 = Line reaches end.")]
		public float LineDistanceModifier;

		[Token(Token = "0x40016E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private VRUISystem uiSystem;

		[Token(Token = "0x40016E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private PointerEvents selectedPointerEvents;

		[Token(Token = "0x40016EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private PointerEventData data;

		[Token(Token = "0x40016EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("LineRenderer to use when showing a valid UI Canvas. Leave null to attempt a GetComponent<> on this object.")]
		public LineRenderer lineRenderer;

		[Token(Token = "0x6001337")]
		[Address(RVA = "0xA3D7BC", Offset = "0xA3D7BC", VA = "0xA3D7BC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001338")]
		[Address(RVA = "0xA3DB34", Offset = "0xA3DB34", VA = "0xA3DB34")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001339")]
		[Address(RVA = "0xA3DB38", Offset = "0xA3DB38", VA = "0xA3DB38")]
		private void updateUITransforms()
		{
		}

		[Token(Token = "0x600133A")]
		[Address(RVA = "0xA3DBC8", Offset = "0xA3DBC8", VA = "0xA3DBC8")]
		public void Update()
		{
		}

		[Token(Token = "0x600133B")]
		[Address(RVA = "0xA3DBD4", Offset = "0xA3DBD4", VA = "0xA3DBD4", Slot = "4")]
		public virtual void UpdatePointer()
		{
		}

		[Token(Token = "0x600133C")]
		[Address(RVA = "0xA3E1A8", Offset = "0xA3E1A8", VA = "0xA3E1A8", Slot = "5")]
		public virtual void HidePointer()
		{
		}

		[Token(Token = "0x600133D")]
		[Address(RVA = "0xA3E320", Offset = "0xA3E320", VA = "0xA3E320")]
		public UIPointer()
		{
		}
	}
	[Token(Token = "0x2000339")]
	[RequireComponent(typeof(GraphicRaycaster))]
	[RequireComponent(typeof(Canvas))]
	public class VRCanvas : MonoBehaviour
	{
		[Token(Token = "0x600133E")]
		[Address(RVA = "0xA3E35C", Offset = "0xA3E35C", VA = "0xA3E35C")]
		private void Start()
		{
		}

		[Token(Token = "0x600133F")]
		[Address(RVA = "0xA3E3CC", Offset = "0xA3E3CC", VA = "0xA3E3CC")]
		public VRCanvas()
		{
		}
	}
	[Token(Token = "0x200033A")]
	public class VRKeyboard : MonoBehaviour
	{
		[Token(Token = "0x200033B")]
		[CompilerGenerated]
		private sealed class <IncreaseInputFieldCareteRoutine>d__11 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40016F0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40016F1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40016F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VRKeyboard <>4__this;

			[Token(Token = "0x170001D1")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600134E")]
				[Address(RVA = "0xA3EFF0", Offset = "0xA3EFF0", VA = "0xA3EFF0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001D2")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001350")]
				[Address(RVA = "0xA3F038", Offset = "0xA3F038", VA = "0xA3F038", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600134B")]
			[Address(RVA = "0xA3EEB4", Offset = "0xA3EEB4", VA = "0xA3EEB4")]
			[DebuggerHidden]
			public <IncreaseInputFieldCareteRoutine>d__11(int <>1__state)
			{
			}

			[Token(Token = "0x600134C")]
			[Address(RVA = "0xA3EF14", Offset = "0xA3EF14", VA = "0xA3EF14", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600134D")]
			[Address(RVA = "0xA3EF18", Offset = "0xA3EF18", VA = "0xA3EF18", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600134F")]
			[Address(RVA = "0xA3EFF8", Offset = "0xA3EFF8", VA = "0xA3EFF8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200033C")]
		[CompilerGenerated]
		private sealed class <DecreaseInputFieldCareteRoutine>d__12 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40016F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40016F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40016F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VRKeyboard <>4__this;

			[Token(Token = "0x170001D3")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001354")]
				[Address(RVA = "0xA3F11C", Offset = "0xA3F11C", VA = "0xA3F11C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001D4")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001356")]
				[Address(RVA = "0xA3F164", Offset = "0xA3F164", VA = "0xA3F164", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001351")]
			[Address(RVA = "0xA3EEDC", Offset = "0xA3EEDC", VA = "0xA3EEDC")]
			[DebuggerHidden]
			public <DecreaseInputFieldCareteRoutine>d__12(int <>1__state)
			{
			}

			[Token(Token = "0x6001352")]
			[Address(RVA = "0xA3F040", Offset = "0xA3F040", VA = "0xA3F040", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001353")]
			[Address(RVA = "0xA3F044", Offset = "0xA3F044", VA = "0xA3F044", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001355")]
			[Address(RVA = "0xA3F124", Offset = "0xA3F124", VA = "0xA3F124", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40016EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InputField AttachedInputField;

		[Token(Token = "0x40016ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool UseShift;

		[Token(Token = "0x40016EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Sound FX")]
		public AudioClip KeyPressSound;

		[Token(Token = "0x40016EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<VRKeyboardKey> KeyboardKeys;

		[Token(Token = "0x6001340")]
		[Address(RVA = "0xA3E3D4", Offset = "0xA3E3D4", VA = "0xA3E3D4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001341")]
		[Address(RVA = "0xA3E458", Offset = "0xA3E458", VA = "0xA3E458")]
		public void PressKey(string key)
		{
		}

		[Token(Token = "0x6001342")]
		[Address(RVA = "0xA3E53C", Offset = "0xA3E53C", VA = "0xA3E53C")]
		public void UpdateInputField(string key)
		{
		}

		[Token(Token = "0x6001343")]
		[Address(RVA = "0xA3E9EC", Offset = "0xA3E9EC", VA = "0xA3E9EC", Slot = "4")]
		public virtual void PlayClickSound()
		{
		}

		[Token(Token = "0x6001344")]
		[Address(RVA = "0xA3E9CC", Offset = "0xA3E9CC", VA = "0xA3E9CC")]
		public void MoveCaretUp()
		{
		}

		[Token(Token = "0x6001345")]
		[Address(RVA = "0xA3E804", Offset = "0xA3E804", VA = "0xA3E804")]
		public void MoveCaretBack()
		{
		}

		[Token(Token = "0x6001346")]
		[Address(RVA = "0xA3E824", Offset = "0xA3E824", VA = "0xA3E824")]
		public void ToggleShift()
		{
		}

		[Token(Token = "0x6001347")]
		[Address(RVA = "0xA3EDCC", Offset = "0xA3EDCC", VA = "0xA3EDCC")]
		[IteratorStateMachine(typeof(<IncreaseInputFieldCareteRoutine>d__11))]
		private IEnumerator IncreaseInputFieldCareteRoutine()
		{
			return null;
		}

		[Token(Token = "0x6001348")]
		[Address(RVA = "0xA3EE40", Offset = "0xA3EE40", VA = "0xA3EE40")]
		[IteratorStateMachine(typeof(<DecreaseInputFieldCareteRoutine>d__12))]
		private IEnumerator DecreaseInputFieldCareteRoutine()
		{
			return null;
		}

		[Token(Token = "0x6001349")]
		[Address(RVA = "0xA3EF04", Offset = "0xA3EF04", VA = "0xA3EF04")]
		public void AttachToInputField(InputField inputField)
		{
		}

		[Token(Token = "0x600134A")]
		[Address(RVA = "0xA3EF0C", Offset = "0xA3EF0C", VA = "0xA3EF0C")]
		public VRKeyboard()
		{
		}
	}
	[Token(Token = "0x200033D")]
	public class VRKeyboardKey : MonoBehaviour
	{
		[Token(Token = "0x40016F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private UnityEngine.UI.Button thisButton;

		[Token(Token = "0x40016F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Text thisButtonText;

		[Token(Token = "0x40016F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private VRKeyboard vrKeyboard;

		[Token(Token = "0x40016F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string Keycode;

		[Token(Token = "0x40016FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string KeycodeShift;

		[Token(Token = "0x40016FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public bool UseShiftKey;

		[Token(Token = "0x6001357")]
		[Address(RVA = "0xA3F16C", Offset = "0xA3F16C", VA = "0xA3F16C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001358")]
		[Address(RVA = "0xA3F2C8", Offset = "0xA3F2C8", VA = "0xA3F2C8", Slot = "4")]
		public virtual void ToggleShift()
		{
		}

		[Token(Token = "0x6001359")]
		[Address(RVA = "0xA3F390", Offset = "0xA3F390", VA = "0xA3F390", Slot = "5")]
		public virtual void OnKeyHit()
		{
		}

		[Token(Token = "0x600135A")]
		[Address(RVA = "0xA3F3D8", Offset = "0xA3F3D8", VA = "0xA3F3D8", Slot = "6")]
		public virtual void OnKeyHit(string key)
		{
		}

		[Token(Token = "0x600135B")]
		[Address(RVA = "0xA3F4DC", Offset = "0xA3F4DC", VA = "0xA3F4DC")]
		public VRKeyboardKey()
		{
		}
	}
	[Token(Token = "0x200033E")]
	public class VRTextInput : MonoBehaviour
	{
		[Token(Token = "0x40016FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private InputField thisInputField;

		[Token(Token = "0x40016FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool AttachToVRKeyboard;

		[Token(Token = "0x40016FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool ActivateKeyboardOnSelect;

		[Token(Token = "0x40016FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		public bool DeactivateKeyboardOnDeselect;

		[Token(Token = "0x4001700")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public VRKeyboard AttachedKeyboard;

		[Token(Token = "0x4001701")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool isFocused;

		[Token(Token = "0x4001702")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool wasFocused;

		[Token(Token = "0x600135C")]
		[Address(RVA = "0xA3F4E4", Offset = "0xA3F4E4", VA = "0xA3F4E4")]
		private void Awake()
		{
		}

		[Token(Token = "0x600135D")]
		[Address(RVA = "0xA3F5D0", Offset = "0xA3F5D0", VA = "0xA3F5D0")]
		private void Update()
		{
		}

		[Token(Token = "0x600135E")]
		[Address(RVA = "0xA3F690", Offset = "0xA3F690", VA = "0xA3F690")]
		public void OnInputSelect()
		{
		}

		[Token(Token = "0x600135F")]
		[Address(RVA = "0xA3F760", Offset = "0xA3F760", VA = "0xA3F760")]
		public void OnInputDeselect()
		{
		}

		[Token(Token = "0x6001360")]
		[Address(RVA = "0xA3F81C", Offset = "0xA3F81C", VA = "0xA3F81C")]
		private void Reset()
		{
		}

		[Token(Token = "0x6001361")]
		[Address(RVA = "0xA3F930", Offset = "0xA3F930", VA = "0xA3F930")]
		public VRTextInput()
		{
		}
	}
	[Token(Token = "0x200033F")]
	public class VRUISystem : BaseInputModule
	{
		[Token(Token = "0x4001703")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("XR Controller Options : ")]
		[Tooltip("This setting determines if LeftPointerTransform or RightPointerTransform will be used as a forward vector for World Space UI events")]
		public ControllerHand SelectedHand;

		[Token(Token = "0x4001704")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("A transform on the left controller to use when raycasting for world space UI events")]
		public Transform LeftPointerTransform;

		[Token(Token = "0x4001705")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("A transform on the right controller to use when raycasting for world space UI events")]
		public Transform RightPointerTransform;

		[Token(Token = "0x4001706")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Controller Binding to use for input down, up, etc.")]
		public List<ControllerBinding> ControllerInput;

		[Token(Token = "0x4001707")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Unity Input Action used to simulate a click or touch event")]
		public InputActionReference UIInputAction;

		[Token(Token = "0x4001708")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("If true a PhysicsRaycaster component will be added to the UI camera, allowing physical objects to use IPointer events such as OnPointClick, OnPointEnter, etc.")]
		public bool AddPhysicsRaycaster;

		[Token(Token = "0x4001709")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public LayerMask PhysicsRaycasterEventMask;

		[Token(Token = "0x400170A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("If true the Right Thumbstick will send scroll events to the UI")]
		public bool RightThumbstickScroll;

		[Token(Token = "0x400170B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Header("Shown for Debug : ")]
		public GameObject PressingObject;

		[Token(Token = "0x400170C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public GameObject DraggingObject;

		[Token(Token = "0x400170D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public GameObject ReleasingObject;

		[Token(Token = "0x400170F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Camera cameraCaster;

		[Token(Token = "0x4001710")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private GameObject _initialPressObject;

		[Token(Token = "0x4001711")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private bool _lastInputDown;

		[Token(Token = "0x4001712")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB9")]
		private bool inputDown;

		[Token(Token = "0x4001713")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static VRUISystem _instance;

		[Token(Token = "0x170001D5")]
		public PointerEventData EventData
		{
			[Token(Token = "0x6001362")]
			[Address(RVA = "0xA3F940", Offset = "0xA3F940", VA = "0xA3F940")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001363")]
			[Address(RVA = "0xA3F948", Offset = "0xA3F948", VA = "0xA3F948")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001D6")]
		public static VRUISystem Instance
		{
			[Token(Token = "0x6001364")]
			[Address(RVA = "0xA3D934", Offset = "0xA3D934", VA = "0xA3D934")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001365")]
		[Address(RVA = "0xA3F950", Offset = "0xA3F950", VA = "0xA3F950", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6001366")]
		[Address(RVA = "0xA3F960", Offset = "0xA3F960", VA = "0xA3F960", Slot = "27")]
		protected virtual void initEventSystem()
		{
		}

		[Token(Token = "0x6001367")]
		[Address(RVA = "0xA3FA5C", Offset = "0xA3FA5C", VA = "0xA3FA5C", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6001368")]
		[Address(RVA = "0xA3FA88", Offset = "0xA3FA88", VA = "0xA3FA88")]
		private void init()
		{
		}

		[Token(Token = "0x6001369")]
		[Address(RVA = "0xA3FC10", Offset = "0xA3FC10", VA = "0xA3FC10", Slot = "17")]
		public override void Process()
		{
		}

		[Token(Token = "0x600136A")]
		[Address(RVA = "0xA3FC14", Offset = "0xA3FC14", VA = "0xA3FC14")]
		public void DoProcess()
		{
		}

		[Token(Token = "0x600136B")]
		[Address(RVA = "0xA3FFE0", Offset = "0xA3FFE0", VA = "0xA3FFE0", Slot = "28")]
		public virtual bool InputReady()
		{
			return default(bool);
		}

		[Token(Token = "0x600136C")]
		[Address(RVA = "0xA40158", Offset = "0xA40158", VA = "0xA40158", Slot = "29")]
		public virtual bool CameraCasterReady()
		{
			return default(bool);
		}

		[Token(Token = "0x600136D")]
		[Address(RVA = "0xA401F0", Offset = "0xA401F0", VA = "0xA401F0", Slot = "30")]
		public virtual void PressDown()
		{
		}

		[Token(Token = "0x600136E")]
		[Address(RVA = "0xA4042C", Offset = "0xA4042C", VA = "0xA4042C", Slot = "31")]
		public virtual void Press()
		{
		}

		[Token(Token = "0x600136F")]
		[Address(RVA = "0xA40608", Offset = "0xA40608", VA = "0xA40608", Slot = "32")]
		public virtual void Release()
		{
		}

		[Token(Token = "0x6001370")]
		[Address(RVA = "0xA40864", Offset = "0xA40864", VA = "0xA40864", Slot = "33")]
		public virtual void ClearAll()
		{
		}

		[Token(Token = "0x6001371")]
		[Address(RVA = "0xA408E0", Offset = "0xA408E0", VA = "0xA408E0", Slot = "34")]
		public virtual void SetPressingObject(GameObject pressing)
		{
		}

		[Token(Token = "0x6001372")]
		[Address(RVA = "0xA4091C", Offset = "0xA4091C", VA = "0xA4091C", Slot = "35")]
		public virtual void SetDraggingObject(GameObject dragging)
		{
		}

		[Token(Token = "0x6001373")]
		[Address(RVA = "0xA40958", Offset = "0xA40958", VA = "0xA40958", Slot = "36")]
		public virtual void SetReleasingObject(GameObject releasing)
		{
		}

		[Token(Token = "0x6001374")]
		[Address(RVA = "0xA40960", Offset = "0xA40960", VA = "0xA40960", Slot = "37")]
		public virtual void AssignCameraToAllCanvases(Camera cam)
		{
		}

		[Token(Token = "0x6001375")]
		[Address(RVA = "0xA40A34", Offset = "0xA40A34", VA = "0xA40A34", Slot = "38")]
		public virtual void AddCanvas(Canvas canvas)
		{
		}

		[Token(Token = "0x6001376")]
		[Address(RVA = "0xA40A48", Offset = "0xA40A48", VA = "0xA40A48", Slot = "39")]
		public virtual void AddCanvasToCamera(Canvas canvas, Camera cam)
		{
		}

		[Token(Token = "0x6001377")]
		[Address(RVA = "0xA40ADC", Offset = "0xA40ADC", VA = "0xA40ADC", Slot = "40")]
		public virtual void UpdateControllerHand(ControllerHand hand)
		{
		}

		[Token(Token = "0x6001378")]
		[Address(RVA = "0xA40C84", Offset = "0xA40C84", VA = "0xA40C84")]
		public VRUISystem()
		{
		}
	}
	[Token(Token = "0x2000340")]
	public class DestroyIfPlayMode : MonoBehaviour
	{
		[Token(Token = "0x6001379")]
		[Address(RVA = "0xA40D8C", Offset = "0xA40D8C", VA = "0xA40D8C")]
		private void Start()
		{
		}

		[Token(Token = "0x600137A")]
		[Address(RVA = "0xA40E3C", Offset = "0xA40E3C", VA = "0xA40E3C")]
		public DestroyIfPlayMode()
		{
		}
	}
	[Token(Token = "0x2000341")]
	public class VRUtils : MonoBehaviour
	{
		[Token(Token = "0x4001714")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static VRUtils _instance;

		[Token(Token = "0x4001715")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Color LogTextColor;

		[Token(Token = "0x4001716")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Color WarnTextColor;

		[Token(Token = "0x4001717")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Color ErrTextColor;

		[Token(Token = "0x4001718")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform DebugTextHolder;

		[Token(Token = "0x4001719")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float MaxTextEntries;

		[Token(Token = "0x400171A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public string LastDebugMsg;

		[Token(Token = "0x400171B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int lastDebugMsgCount;

		[Token(Token = "0x170001D7")]
		public static VRUtils Instance
		{
			[Token(Token = "0x600137B")]
			[Address(RVA = "0xA3EAA0", Offset = "0xA3EAA0", VA = "0xA3EAA0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600137C")]
		[Address(RVA = "0xA40E44", Offset = "0xA40E44", VA = "0xA40E44")]
		private void Awake()
		{
		}

		[Token(Token = "0x600137D")]
		[Address(RVA = "0xA40F40", Offset = "0xA40F40", VA = "0xA40F40")]
		public void Log(string msg)
		{
		}

		[Token(Token = "0x600137E")]
		[Address(RVA = "0xA41498", Offset = "0xA41498", VA = "0xA41498")]
		public void Warn(string msg)
		{
		}

		[Token(Token = "0x600137F")]
		[Address(RVA = "0xA41528", Offset = "0xA41528", VA = "0xA41528")]
		public void Error(string msg)
		{
		}

		[Token(Token = "0x6001380")]
		[Address(RVA = "0xA40FD0", Offset = "0xA40FD0", VA = "0xA40FD0")]
		public void VRDebugLog(string msg, Color logColor)
		{
		}

		[Token(Token = "0x6001381")]
		[Address(RVA = "0xA415B8", Offset = "0xA415B8", VA = "0xA415B8")]
		public void CullDebugPanel()
		{
		}

		[Token(Token = "0x6001382")]
		[Address(RVA = "0xA3EC14", Offset = "0xA3EC14", VA = "0xA3EC14")]
		public AudioSource PlaySpatialClipAt(AudioClip clip, Vector3 pos, float volume, float spatialBlend = 1f, float randomizePitch = 0f)
		{
			return null;
		}

		[Token(Token = "0x6001383")]
		[Address(RVA = "0xA41680", Offset = "0xA41680", VA = "0xA41680")]
		private float getRandomizedPitch(float randomAmount)
		{
			return default(float);
		}

		[Token(Token = "0x6001384")]
		[Address(RVA = "0xA416C4", Offset = "0xA416C4", VA = "0xA416C4")]
		public VRUtils()
		{
		}
	}
	[Token(Token = "0x2000342")]
	public class AmmoDispenser : MonoBehaviour
	{
		[Token(Token = "0x400171C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Grabber LeftGrabber;

		[Token(Token = "0x400171D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Grabber RightGrabber;

		[Token(Token = "0x400171E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject AmmoDispenserObject;

		[Token(Token = "0x400171F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject PistolClip;

		[Token(Token = "0x4001720")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject ShotgunShell;

		[Token(Token = "0x4001721")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject RifleClip;

		[Token(Token = "0x4001722")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public int CurrentPistolClips;

		[Token(Token = "0x4001723")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public int CurrentRifleClips;

		[Token(Token = "0x4001724")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int CurrentShotgunShells;

		[Token(Token = "0x6001385")]
		[Address(RVA = "0xA416F8", Offset = "0xA416F8", VA = "0xA416F8")]
		private void Update()
		{
		}

		[Token(Token = "0x6001386")]
		[Address(RVA = "0xA4176C", Offset = "0xA4176C", VA = "0xA4176C")]
		private bool grabberHasWeapon(Grabber g)
		{
			return default(bool);
		}

		[Token(Token = "0x6001387")]
		[Address(RVA = "0xA418A8", Offset = "0xA418A8", VA = "0xA418A8")]
		public GameObject GetAmmo()
		{
			return null;
		}

		[Token(Token = "0x6001388")]
		[Address(RVA = "0xA41BD0", Offset = "0xA41BD0", VA = "0xA41BD0")]
		public void GrabAmmo(Grabber grabber)
		{
		}

		[Token(Token = "0x6001389")]
		[Address(RVA = "0xA41E70", Offset = "0xA41E70", VA = "0xA41E70", Slot = "4")]
		public virtual void AddAmmo(string AmmoName)
		{
		}

		[Token(Token = "0x600138A")]
		[Address(RVA = "0xA41F4C", Offset = "0xA41F4C", VA = "0xA41F4C")]
		public AmmoDispenser()
		{
		}
	}
	[Token(Token = "0x2000343")]
	public class AmmoDisplay : MonoBehaviour
	{
		[Token(Token = "0x4001725")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RaycastWeapon Weapon;

		[Token(Token = "0x4001726")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Text AmmoLabel;

		[Token(Token = "0x600138B")]
		[Address(RVA = "0xA41F64", Offset = "0xA41F64", VA = "0xA41F64")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x600138C")]
		[Address(RVA = "0xA42048", Offset = "0xA42048", VA = "0xA42048")]
		public AmmoDisplay()
		{
		}
	}
	[Token(Token = "0x2000344")]
	public class Bullet : MonoBehaviour
	{
		[Token(Token = "0x600138D")]
		[Address(RVA = "0xA42050", Offset = "0xA42050", VA = "0xA42050")]
		public Bullet()
		{
		}
	}
	[Token(Token = "0x2000345")]
	public class BulletInsert : MonoBehaviour
	{
		[Token(Token = "0x4001727")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RaycastWeapon Weapon;

		[Token(Token = "0x4001728")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string AcceptBulletName;

		[Token(Token = "0x4001729")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AudioClip InsertSound;

		[Token(Token = "0x600138E")]
		[Address(RVA = "0xA42058", Offset = "0xA42058", VA = "0xA42058")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x600138F")]
		[Address(RVA = "0xA422A0", Offset = "0xA422A0", VA = "0xA422A0")]
		public BulletInsert()
		{
		}
	}
	[Token(Token = "0x2000346")]
	public class MagazineSlide : MonoBehaviour
	{
		[Token(Token = "0x2000347")]
		[CompilerGenerated]
		private sealed class <EjectMagRoutine>d__23 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001739")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400173A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400173B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Grabbable ejectedMag;

			[Token(Token = "0x400173C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public MagazineSlide <>4__this;

			[Token(Token = "0x170001D8")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60013A0")]
				[Address(RVA = "0xA436D4", Offset = "0xA436D4", VA = "0xA436D4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001D9")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60013A2")]
				[Address(RVA = "0xA4371C", Offset = "0xA4371C", VA = "0xA4371C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600139D")]
			[Address(RVA = "0xA431A8", Offset = "0xA431A8", VA = "0xA431A8")]
			[DebuggerHidden]
			public <EjectMagRoutine>d__23(int <>1__state)
			{
			}

			[Token(Token = "0x600139E")]
			[Address(RVA = "0xA4344C", Offset = "0xA4344C", VA = "0xA4344C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600139F")]
			[Address(RVA = "0xA43450", Offset = "0xA43450", VA = "0xA43450", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60013A1")]
			[Address(RVA = "0xA436DC", Offset = "0xA436DC", VA = "0xA436DC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400172A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Clip transform name must contain this to be considered valid")]
		public string AcceptableMagazineName;

		[Token(Token = "0x400172B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Grabbable AttachedWeapon;

		[Token(Token = "0x400172C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float ClipSnapDistance;

		[Token(Token = "0x400172D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float ClipUnsnapDistance;

		[Token(Token = "0x400172E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float EjectForce;

		[Token(Token = "0x400172F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Grabbable HeldMagazine;

		[Token(Token = "0x4001730")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Collider HeldCollider;

		[Token(Token = "0x4001731")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float MagazineDistance;

		[Token(Token = "0x4001732")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private bool magazineInPlace;

		[Token(Token = "0x4001733")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
		private bool lockedInPlace;

		[Token(Token = "0x4001734")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AudioClip ClipAttachSound;

		[Token(Token = "0x4001735")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public AudioClip ClipDetachSound;

		[Token(Token = "0x4001736")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private RaycastWeapon parentWeapon;

		[Token(Token = "0x4001737")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GrabberArea grabClipArea;

		[Token(Token = "0x4001738")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float lastEjectTime;

		[Token(Token = "0x6001390")]
		[Address(RVA = "0xA422F8", Offset = "0xA422F8", VA = "0xA422F8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001391")]
		[Address(RVA = "0xA42468", Offset = "0xA42468", VA = "0xA42468")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001392")]
		[Address(RVA = "0xA42A54", Offset = "0xA42A54", VA = "0xA42A54")]
		private bool recentlyEjected()
		{
			return default(bool);
		}

		[Token(Token = "0x6001393")]
		[Address(RVA = "0xA42A04", Offset = "0xA42A04", VA = "0xA42A04")]
		private void moveMagazine(Vector3 localPosition)
		{
		}

		[Token(Token = "0x6001394")]
		[Address(RVA = "0xA4283C", Offset = "0xA4283C", VA = "0xA4283C")]
		public void CheckGrabClipInput()
		{
		}

		[Token(Token = "0x6001395")]
		[Address(RVA = "0xA42A84", Offset = "0xA42A84", VA = "0xA42A84")]
		private void attachMagazine()
		{
		}

		[Token(Token = "0x6001396")]
		[Address(RVA = "0xA42D34", Offset = "0xA42D34", VA = "0xA42D34")]
		private Grabbable detachMagazine()
		{
			return null;
		}

		[Token(Token = "0x6001397")]
		[Address(RVA = "0xA430D4", Offset = "0xA430D4", VA = "0xA430D4")]
		public void EjectMagazine()
		{
		}

		[Token(Token = "0x6001398")]
		[Address(RVA = "0xA43118", Offset = "0xA43118", VA = "0xA43118")]
		[IteratorStateMachine(typeof(<EjectMagRoutine>d__23))]
		private IEnumerator EjectMagRoutine(Grabbable ejectedMag)
		{
			return null;
		}

		[Token(Token = "0x6001399")]
		[Address(RVA = "0xA43008", Offset = "0xA43008", VA = "0xA43008")]
		public void OnGrabClipArea(Grabber grabbedBy)
		{
		}

		[Token(Token = "0x600139A")]
		[Address(RVA = "0xA431D0", Offset = "0xA431D0", VA = "0xA431D0", Slot = "4")]
		public virtual void AttachGrabbableMagazine(Grabbable mag, Collider magCollider)
		{
		}

		[Token(Token = "0x600139B")]
		[Address(RVA = "0xA432C4", Offset = "0xA432C4", VA = "0xA432C4")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x600139C")]
		[Address(RVA = "0xA433E0", Offset = "0xA433E0", VA = "0xA433E0")]
		public MagazineSlide()
		{
		}
	}
	[Token(Token = "0x2000348")]
	public class Projectile : MonoBehaviour
	{
		[Token(Token = "0x2000349")]
		[CompilerGenerated]
		private sealed class <CheckForRaycast>d__13 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001745")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001746")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001747")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Projectile <>4__this;

			[Token(Token = "0x170001DA")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60013AD")]
				[Address(RVA = "0xA44060", Offset = "0xA44060", VA = "0xA44060", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001DB")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60013AF")]
				[Address(RVA = "0xA440A8", Offset = "0xA440A8", VA = "0xA440A8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60013AA")]
			[Address(RVA = "0xA43F34", Offset = "0xA43F34", VA = "0xA43F34")]
			[DebuggerHidden]
			public <CheckForRaycast>d__13(int <>1__state)
			{
			}

			[Token(Token = "0x60013AB")]
			[Address(RVA = "0xA43F7C", Offset = "0xA43F7C", VA = "0xA43F7C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60013AC")]
			[Address(RVA = "0xA43F80", Offset = "0xA43F80", VA = "0xA43F80", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60013AE")]
			[Address(RVA = "0xA44068", Offset = "0xA44068", VA = "0xA44068", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400173D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject HitFXPrefab;

		[Token(Token = "0x400173E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool _checkRaycast;

		[Token(Token = "0x400173F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float Damage;

		[Token(Token = "0x4001740")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float AddRigidForce;

		[Token(Token = "0x4001741")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public LayerMask ValidLayers;

		[Token(Token = "0x4001742")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool StickToObject;

		[Token(Token = "0x4001743")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float MinForceHit;

		[Token(Token = "0x4001744")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Unity Event called when the projectile damages something")]
		public UnityEvent onDealtDamageEvent;

		[Token(Token = "0x60013A3")]
		[Address(RVA = "0xA43724", Offset = "0xA43724", VA = "0xA43724")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x60013A4")]
		[Address(RVA = "0xA43730", Offset = "0xA43730", VA = "0xA43730", Slot = "4")]
		public virtual void OnCollisionEvent(Collision collision)
		{
		}

		[Token(Token = "0x60013A5")]
		[Address(RVA = "0xA43AB8", Offset = "0xA43AB8", VA = "0xA43AB8", Slot = "5")]
		public virtual void DoHitFX(Vector3 pos, Quaternion rot, Collider col)
		{
		}

		[Token(Token = "0x60013A6")]
		[Address(RVA = "0xA43C9C", Offset = "0xA43C9C", VA = "0xA43C9C", Slot = "6")]
		public virtual void MarkAsRaycastBullet()
		{
		}

		[Token(Token = "0x60013A7")]
		[Address(RVA = "0xA43D38", Offset = "0xA43D38", VA = "0xA43D38", Slot = "7")]
		public virtual void DoRayCastProjectile()
		{
		}

		[Token(Token = "0x60013A8")]
		[Address(RVA = "0xA43CC4", Offset = "0xA43CC4", VA = "0xA43CC4")]
		[IteratorStateMachine(typeof(<CheckForRaycast>d__13))]
		private IEnumerator CheckForRaycast()
		{
			return null;
		}

		[Token(Token = "0x60013A9")]
		[Address(RVA = "0xA43F5C", Offset = "0xA43F5C", VA = "0xA43F5C")]
		public Projectile()
		{
		}
	}
	[Token(Token = "0x200034A")]
	public class RaycastWeapon : GrabbableEvents
	{
		[Token(Token = "0x200034B")]
		[CompilerGenerated]
		private sealed class <doMuzzleFlash>d__74 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400177D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400177E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400177F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public RaycastWeapon <>4__this;

			[Token(Token = "0x170001DC")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60013CB")]
				[Address(RVA = "0xA45E58", Offset = "0xA45E58", VA = "0xA45E58", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001DD")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60013CD")]
				[Address(RVA = "0xA45EA0", Offset = "0xA45EA0", VA = "0xA45EA0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60013C8")]
			[Address(RVA = "0xA459A0", Offset = "0xA459A0", VA = "0xA459A0")]
			[DebuggerHidden]
			public <doMuzzleFlash>d__74(int <>1__state)
			{
			}

			[Token(Token = "0x60013C9")]
			[Address(RVA = "0xA45D20", Offset = "0xA45D20", VA = "0xA45D20", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60013CA")]
			[Address(RVA = "0xA45D24", Offset = "0xA45D24", VA = "0xA45D24", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60013CC")]
			[Address(RVA = "0xA45E60", Offset = "0xA45E60", VA = "0xA45E60", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200034C")]
		[CompilerGenerated]
		private sealed class <animateSlideAndEject>d__75 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001780")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001781")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001782")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public RaycastWeapon <>4__this;

			[Token(Token = "0x4001783")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <frames>5__2;

			[Token(Token = "0x4001784")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private bool <slideEndReached>5__3;

			[Token(Token = "0x4001785")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Vector3 <slideDestination>5__4;

			[Token(Token = "0x4001786")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private bool <slideBeginningReached>5__5;

			[Token(Token = "0x170001DE")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60013D1")]
				[Address(RVA = "0xA46604", Offset = "0xA46604", VA = "0xA46604", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001DF")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60013D3")]
				[Address(RVA = "0xA4664C", Offset = "0xA4664C", VA = "0xA4664C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60013CE")]
			[Address(RVA = "0xA45A3C", Offset = "0xA45A3C", VA = "0xA45A3C")]
			[DebuggerHidden]
			public <animateSlideAndEject>d__75(int <>1__state)
			{
			}

			[Token(Token = "0x60013CF")]
			[Address(RVA = "0xA45EA8", Offset = "0xA45EA8", VA = "0xA45EA8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60013D0")]
			[Address(RVA = "0xA45EAC", Offset = "0xA45EAC", VA = "0xA45EAC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60013D2")]
			[Address(RVA = "0xA4660C", Offset = "0xA4660C", VA = "0xA4660C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001748")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("General : ")]
		public float MaxRange;

		[Token(Token = "0x4001749")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float Damage;

		[Token(Token = "0x400174A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Semi requires user to press trigger repeatedly, Auto to hold down")]
		public FiringType FiringMethod;

		[Token(Token = "0x400174B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public ReloadType ReloadMethod;

		[Token(Token = "0x400174C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Ex : 0.2 = 5 Shots per second")]
		public float FiringRate;

		[Token(Token = "0x400174D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float lastShotTime;

		[Token(Token = "0x400174E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Amount of force to apply to a Rigidbody once damaged")]
		public float BulletImpactForce;

		[Token(Token = "0x400174F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("Current Internal Ammo if you are keeping track of ammo yourself. Firing will deduct from this number. Reloading will cause this to equal MaxInternalAmmo.")]
		public float InternalAmmo;

		[Token(Token = "0x4001750")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Maximum amount of internal ammo this weapon can hold. Does not account for attached clips.  For example, a shotgun has internal ammo")]
		public float MaxInternalAmmo;

		[Token(Token = "0x4001751")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Tooltip("Set true to automatically chamber a new round on fire. False to require charging. Example : Bolt-Action Rifle does not auto chamber. ")]
		public bool AutoChamberRounds;

		[Token(Token = "0x4001752")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
		[Tooltip("Does it matter if rounds are chambered or not. Does the user have to charge weapon as soon as ammo is inserted")]
		public bool MustChamberRounds;

		[Token(Token = "0x4001753")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x56")]
		[Tooltip("If true a projectile will always be used instead of a raycast")]
		[Header("Projectile Settings : ")]
		public bool AlwaysFireProjectile;

		[Token(Token = "0x4001754")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x57")]
		[Tooltip("If true the ProjectilePrefab will be instantiated during slowmo instead of using a raycast.")]
		public bool FireProjectileInSlowMo;

		[Token(Token = "0x4001755")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("How fast to fire the weapon during slowmo. Keep in mind this is affected by Time.timeScale")]
		public float SlowMoRateOfFire;

		[Token(Token = "0x4001756")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("Amount of force to apply to Projectile")]
		public float ShotForce;

		[Token(Token = "0x4001757")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Amount of force to apply to the BulletCasingPrefab object")]
		public float BulletCasingForce;

		[Token(Token = "0x4001758")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Header("Recoil : ")]
		[Tooltip("How much force to apply to the tip of the barrel")]
		public Vector3 RecoilForce;

		[Token(Token = "0x4001759")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Time in seconds to allow the gun to be springy")]
		public float RecoilDuration;

		[Token(Token = "0x400175A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Rigidbody weaponRigid;

		[Token(Token = "0x400175B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Header("Raycast Options : ")]
		public LayerMask ValidLayers;

		[Token(Token = "0x400175C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Transform of trigger to animate rotation of")]
		[Header("Weapon Setup : ")]
		public Transform TriggerTransform;

		[Token(Token = "0x400175D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Animate this back on fire")]
		public Transform SlideTransform;

		[Token(Token = "0x400175E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Where our raycast or projectile will start from.")]
		public Transform MuzzlePointTransform;

		[Token(Token = "0x400175F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Where to eject a bullet casing (optional)")]
		public Transform EjectPointTransform;

		[Token(Token = "0x4001760")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Transform of Chambered Bullet inside the weapon. Hide this when no bullet is chambered. (Optional)")]
		public Transform ChamberedBullet;

		[Token(Token = "0x4001761")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Tooltip("Make this active on fire. Randomize scale / rotation")]
		public GameObject MuzzleFlashObject;

		[Token(Token = "0x4001762")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[Tooltip("Eject this at EjectPointTransform (optional)")]
		public GameObject BulletCasingPrefab;

		[Token(Token = "0x4001763")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Tooltip("If time is slowed this object will be instantiated at muzzle point instead of using a raycast")]
		public GameObject ProjectilePrefab;

		[Token(Token = "0x4001764")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Tooltip("Hit Effects spawned at point of impact")]
		public GameObject HitFXPrefab;

		[Token(Token = "0x4001765")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Tooltip("Play this sound on shoot")]
		public AudioClip GunShotSound;

		[Token(Token = "0x4001766")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[Tooltip("Volume to play the GunShotSound clip at. Range 0-1")]
		[Range(0f, 1f)]
		public float GunShotVolume;

		[Token(Token = "0x4001767")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[Tooltip("Play this sound if no ammo and user presses trigger")]
		public AudioClip EmptySound;

		[Token(Token = "0x4001768")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[Tooltip("Volume to play the EmptySound clip at. Range 0-1")]
		[Range(0f, 1f)]
		public float EmptySoundVolume;

		[Token(Token = "0x4001769")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		[Header("Slide Configuration : ")]
		[Tooltip("How far back to move the slide on fire")]
		public float SlideDistance;

		[Token(Token = "0x400176A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[Tooltip("Should the slide be forced back if we shoot the last bullet")]
		public bool ForceSlideBackOnLastShot;

		[Token(Token = "0x400176B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		[Tooltip("How fast to move back the slide on fire. Default : 1")]
		public float slideSpeed;

		[Token(Token = "0x400176C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private float minSlideDistance;

		[Token(Token = "0x400176D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[Tooltip("Controller Input used to eject clip")]
		[Header("Inputs : ")]
		public List<GrabbedControllerBinding> EjectInput;

		[Token(Token = "0x400176E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[Tooltip("Controller Input used to release the charging mechanism.")]
		public List<GrabbedControllerBinding> ReleaseSlideInput;

		[Token(Token = "0x400176F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[Tooltip("Controller Input used to release reload the weapon if ReloadMethod = InternalAmmo.")]
		public List<GrabbedControllerBinding> ReloadInput;

		[Token(Token = "0x4001770")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[Header("Shown for Debug : ")]
		[Tooltip("Is there currently a bullet chambered and ready to be fired")]
		public bool BulletInChamber;

		[Token(Token = "0x4001771")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x119")]
		[Tooltip("Is there currently a bullet chambered and that must be ejected")]
		public bool EmptyBulletInChamber;

		[Token(Token = "0x4001772")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[Header("Events")]
		[Tooltip("Unity Event called when Shoot() method is successfully called")]
		public UnityEvent onShootEvent;

		[Token(Token = "0x4001773")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[Tooltip("Unity Event called when something attaches ammo to the weapon")]
		public UnityEvent onAttachedAmmoEvent;

		[Token(Token = "0x4001774")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[Tooltip("Unity Event called when something detaches ammo from the weapon")]
		public UnityEvent onDetachedAmmoEvent;

		[Token(Token = "0x4001775")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[Tooltip("Unity Event called when the charging handle is successfully pulled back on the weapon")]
		public UnityEvent onWeaponChargedEvent;

		[Token(Token = "0x4001776")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		[Tooltip("Unity Event called when weapon damaged something")]
		public FloatEvent onDealtDamageEvent;

		[Token(Token = "0x4001777")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		[Tooltip("Passes along Raycast Hit info whenever a Raycast hit is successfully detected. Use this to display fx, add force, etc.")]
		public RaycastHitEvent onRaycastHitEvent;

		[Token(Token = "0x4001778")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		protected bool slideForcedBack;

		[Token(Token = "0x4001779")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		protected WeaponSlide ws;

		[Token(Token = "0x400177A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		protected bool readyToShoot;

		[Token(Token = "0x400177B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x161")]
		protected bool playedEmptySound;

		[Token(Token = "0x400177C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		protected IEnumerator shotRoutine;

		[Token(Token = "0x60013B0")]
		[Address(RVA = "0xA440B0", Offset = "0xA440B0", VA = "0xA440B0")]
		private void Start()
		{
		}

		[Token(Token = "0x60013B1")]
		[Address(RVA = "0xA44248", Offset = "0xA44248", VA = "0xA44248", Slot = "16")]
		public override void OnTrigger(float triggerValue)
		{
		}

		[Token(Token = "0x60013B2")]
		[Address(RVA = "0xA44384", Offset = "0xA44384", VA = "0xA44384")]
		private void checkSlideInput()
		{
		}

		[Token(Token = "0x60013B3")]
		[Address(RVA = "0xA4448C", Offset = "0xA4448C", VA = "0xA4448C")]
		private void checkEjectInput()
		{
		}

		[Token(Token = "0x60013B4")]
		[Address(RVA = "0xA44594", Offset = "0xA44594", VA = "0xA44594", Slot = "27")]
		public virtual void CheckReloadInput()
		{
		}

		[Token(Token = "0x60013B5")]
		[Address(RVA = "0xA446A8", Offset = "0xA446A8", VA = "0xA446A8", Slot = "28")]
		public virtual void UnlockSlide()
		{
		}

		[Token(Token = "0x60013B6")]
		[Address(RVA = "0xA44730", Offset = "0xA44730", VA = "0xA44730", Slot = "29")]
		public virtual void EjectMagazine()
		{
		}

		[Token(Token = "0x60013B7")]
		[Address(RVA = "0xA447E0", Offset = "0xA447E0", VA = "0xA447E0", Slot = "30")]
		public virtual void Shoot()
		{
		}

		[Token(Token = "0x60013B8")]
		[Address(RVA = "0xA44DD8", Offset = "0xA44DD8", VA = "0xA44DD8", Slot = "31")]
		public virtual void ApplyRecoil()
		{
		}

		[Token(Token = "0x60013B9")]
		[Address(RVA = "0xA44F50", Offset = "0xA44F50", VA = "0xA44F50", Slot = "32")]
		public virtual void OnRaycastHit(RaycastHit hit)
		{
		}

		[Token(Token = "0x60013BA")]
		[Address(RVA = "0xA45298", Offset = "0xA45298", VA = "0xA45298", Slot = "33")]
		public virtual void ApplyParticleFX(Vector3 position, Quaternion rotation, Collider attachTo)
		{
		}

		[Token(Token = "0x60013BB")]
		[Address(RVA = "0xA453F8", Offset = "0xA453F8", VA = "0xA453F8", Slot = "34")]
		public virtual void OnAttachedAmmo()
		{
		}

		[Token(Token = "0x60013BC")]
		[Address(RVA = "0xA45420", Offset = "0xA45420", VA = "0xA45420", Slot = "35")]
		public virtual void OnDetachedAmmo()
		{
		}

		[Token(Token = "0x60013BD")]
		[Address(RVA = "0xA45448", Offset = "0xA45448", VA = "0xA45448", Slot = "36")]
		public virtual int GetBulletCount()
		{
			return default(int);
		}

		[Token(Token = "0x60013BE")]
		[Address(RVA = "0xA454DC", Offset = "0xA454DC", VA = "0xA454DC", Slot = "37")]
		public virtual void RemoveBullet()
		{
		}

		[Token(Token = "0x60013BF")]
		[Address(RVA = "0xA455E0", Offset = "0xA455E0", VA = "0xA455E0", Slot = "38")]
		public virtual void Reload()
		{
		}

		[Token(Token = "0x60013C0")]
		[Address(RVA = "0xA4419C", Offset = "0xA4419C", VA = "0xA4419C")]
		private void updateChamberedBullet()
		{
		}

		[Token(Token = "0x60013C1")]
		[Address(RVA = "0xA44D8C", Offset = "0xA44D8C", VA = "0xA44D8C")]
		private void chamberRound()
		{
		}

		[Token(Token = "0x60013C2")]
		[Address(RVA = "0xA455EC", Offset = "0xA455EC", VA = "0xA455EC")]
		private void randomizeMuzzleFlashScaleRotation()
		{
		}

		[Token(Token = "0x60013C3")]
		[Address(RVA = "0xA456D4", Offset = "0xA456D4", VA = "0xA456D4", Slot = "39")]
		public virtual void OnWeaponCharged(bool allowCasingEject)
		{
		}

		[Token(Token = "0x60013C4")]
		[Address(RVA = "0xA45788", Offset = "0xA45788", VA = "0xA45788", Slot = "40")]
		protected virtual void ejectCasing()
		{
		}

		[Token(Token = "0x60013C5")]
		[Address(RVA = "0xA4592C", Offset = "0xA4592C", VA = "0xA4592C", Slot = "41")]
		[IteratorStateMachine(typeof(<doMuzzleFlash>d__74))]
		protected virtual IEnumerator doMuzzleFlash()
		{
			return null;
		}

		[Token(Token = "0x60013C6")]
		[Address(RVA = "0xA459C8", Offset = "0xA459C8", VA = "0xA459C8", Slot = "42")]
		[IteratorStateMachine(typeof(<animateSlideAndEject>d__75))]
		protected virtual IEnumerator animateSlideAndEject()
		{
			return null;
		}

		[Token(Token = "0x60013C7")]
		[Address(RVA = "0xA45A64", Offset = "0xA45A64", VA = "0xA45A64")]
		public RaycastWeapon()
		{
		}
	}
	[Token(Token = "0x200034D")]
	public enum FiringType
	{
		[Token(Token = "0x4001788")]
		Semi,
		[Token(Token = "0x4001789")]
		Automatic
	}
	[Token(Token = "0x200034E")]
	public enum ReloadType
	{
		[Token(Token = "0x400178B")]
		InfiniteAmmo,
		[Token(Token = "0x400178C")]
		ManualClip,
		[Token(Token = "0x400178D")]
		InternalAmmo
	}
	[Token(Token = "0x200034F")]
	public class WeaponSlide : MonoBehaviour
	{
		[Token(Token = "0x2000350")]
		[CompilerGenerated]
		private sealed class <UnlockSlideRoutine>d__27 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400179E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400179F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40017A0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public WeaponSlide <>4__this;

			[Token(Token = "0x170001E0")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60013E5")]
				[Address(RVA = "0xA47228", Offset = "0xA47228", VA = "0xA47228", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001E1")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60013E7")]
				[Address(RVA = "0xA47270", Offset = "0xA47270", VA = "0xA47270", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60013E2")]
			[Address(RVA = "0xA47124", Offset = "0xA47124", VA = "0xA47124")]
			[DebuggerHidden]
			public <UnlockSlideRoutine>d__27(int <>1__state)
			{
			}

			[Token(Token = "0x60013E3")]
			[Address(RVA = "0xA4716C", Offset = "0xA4716C", VA = "0xA4716C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60013E4")]
			[Address(RVA = "0xA47170", Offset = "0xA47170", VA = "0xA47170", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60013E6")]
			[Address(RVA = "0xA47230", Offset = "0xA47230", VA = "0xA47230", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400178E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float MinLocalZ;

		[Token(Token = "0x400178F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float MaxLocalZ;

		[Token(Token = "0x4001790")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool slidingBack;

		[Token(Token = "0x4001791")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool LockedBack;

		[Token(Token = "0x4001792")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AudioClip SlideReleaseSound;

		[Token(Token = "0x4001793")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AudioClip LockedBackSound;

		[Token(Token = "0x4001794")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool ZeroMassWhenNotHeld;

		[Token(Token = "0x4001795")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private RaycastWeapon parentWeapon;

		[Token(Token = "0x4001796")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Grabbable parentGrabbable;

		[Token(Token = "0x4001797")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Vector3 initialLocalPos;

		[Token(Token = "0x4001798")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Grabbable thisGrabbable;

		[Token(Token = "0x4001799")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private AudioSource audioSource;

		[Token(Token = "0x400179A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Rigidbody rigid;

		[Token(Token = "0x400179B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float initialMass;

		[Token(Token = "0x400179C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private Vector3 _lockPosition;

		[Token(Token = "0x400179D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private bool lockSlidePosition;

		[Token(Token = "0x60013D4")]
		[Address(RVA = "0xA46654", Offset = "0xA46654", VA = "0xA46654")]
		private void Start()
		{
		}

		[Token(Token = "0x60013D5")]
		[Address(RVA = "0xA46854", Offset = "0xA46854", VA = "0xA46854", Slot = "4")]
		public virtual void OnEnable()
		{
		}

		[Token(Token = "0x60013D6")]
		[Address(RVA = "0xA4690C", Offset = "0xA4690C", VA = "0xA4690C", Slot = "5")]
		public virtual void OnDisable()
		{
		}

		[Token(Token = "0x60013D7")]
		[Address(RVA = "0xA469C4", Offset = "0xA469C4", VA = "0xA469C4")]
		private void Update()
		{
		}

		[Token(Token = "0x60013D8")]
		[Address(RVA = "0xA46C7C", Offset = "0xA46C7C", VA = "0xA46C7C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60013D9")]
		[Address(RVA = "0xA46D58", Offset = "0xA46D58", VA = "0xA46D58", Slot = "6")]
		public virtual void LockBack()
		{
		}

		[Token(Token = "0x60013DA")]
		[Address(RVA = "0xA46DE8", Offset = "0xA46DE8", VA = "0xA46DE8", Slot = "7")]
		public virtual void UnlockBack()
		{
		}

		[Token(Token = "0x60013DB")]
		[Address(RVA = "0xA46B5C", Offset = "0xA46B5C", VA = "0xA46B5C")]
		private void onSlideBack()
		{
		}

		[Token(Token = "0x60013DC")]
		[Address(RVA = "0xA46C24", Offset = "0xA46C24", VA = "0xA46C24")]
		private void onSlideForward()
		{
		}

		[Token(Token = "0x60013DD")]
		[Address(RVA = "0xA4701C", Offset = "0xA4701C", VA = "0xA4701C", Slot = "8")]
		public virtual void LockSlidePosition()
		{
		}

		[Token(Token = "0x60013DE")]
		[Address(RVA = "0xA47080", Offset = "0xA47080", VA = "0xA47080", Slot = "9")]
		public virtual void UnlockSlidePosition()
		{
		}

		[Token(Token = "0x60013DF")]
		[Address(RVA = "0xA470B0", Offset = "0xA470B0", VA = "0xA470B0")]
		[IteratorStateMachine(typeof(<UnlockSlideRoutine>d__27))]
		public IEnumerator UnlockSlideRoutine()
		{
			return null;
		}

		[Token(Token = "0x60013E0")]
		[Address(RVA = "0xA46EE8", Offset = "0xA46EE8", VA = "0xA46EE8")]
		private void playSoundInterval(float fromSeconds, float toSeconds, float volume)
		{
		}

		[Token(Token = "0x60013E1")]
		[Address(RVA = "0xA4714C", Offset = "0xA4714C", VA = "0xA4714C")]
		public WeaponSlide()
		{
		}
	}
}
namespace STB.LowPolyCharacterPack
{
	[Token(Token = "0x2000351")]
	[RequireComponent(typeof(Camera))]
	[ExecuteInEditMode]
	public class STBDepthOfFieldDeprecated : STBPostEffectsBase
	{
		[Token(Token = "0x2000352")]
		public enum Dof34QualitySetting
		{
			[Token(Token = "0x40017CD")]
			OnlyBackground = 1,
			[Token(Token = "0x40017CE")]
			BackgroundAndForeground
		}

		[Token(Token = "0x2000353")]
		public enum DofResolution
		{
			[Token(Token = "0x40017D0")]
			High = 2,
			[Token(Token = "0x40017D1")]
			Medium,
			[Token(Token = "0x40017D2")]
			Low
		}

		[Token(Token = "0x2000354")]
		public enum DofBlurriness
		{
			[Token(Token = "0x40017D4")]
			Low = 1,
			[Token(Token = "0x40017D5")]
			High = 2,
			[Token(Token = "0x40017D6")]
			VeryHigh = 4
		}

		[Token(Token = "0x2000355")]
		public enum BokehDestination
		{
			[Token(Token = "0x40017D8")]
			Background = 1,
			[Token(Token = "0x40017D9")]
			Foreground,
			[Token(Token = "0x40017DA")]
			BackgroundAndForeground
		}

		[Token(Token = "0x40017A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int SMOOTH_DOWNSAMPLE_PASS;

		[Token(Token = "0x40017A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static float BOKEH_EXTRA_BLUR;

		[Token(Token = "0x40017A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Dof34QualitySetting quality;

		[Token(Token = "0x40017A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DofResolution resolution;

		[Token(Token = "0x40017A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool simpleTweakMode;

		[Token(Token = "0x40017A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float focalPoint;

		[Token(Token = "0x40017A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float smoothness;

		[Token(Token = "0x40017A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float focalZDistance;

		[Token(Token = "0x40017A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float focalZStartCurve;

		[Token(Token = "0x40017AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float focalZEndCurve;

		[Token(Token = "0x40017AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float focalStartCurve;

		[Token(Token = "0x40017AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float focalEndCurve;

		[Token(Token = "0x40017AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float focalDistance01;

		[Token(Token = "0x40017AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform objectFocus;

		[Token(Token = "0x40017AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float focalSize;

		[Token(Token = "0x40017B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public DofBlurriness bluriness;

		[Token(Token = "0x40017B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float maxBlurSpread;

		[Token(Token = "0x40017B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float foregroundBlurExtrude;

		[Token(Token = "0x40017B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Shader dofBlurShader;

		[Token(Token = "0x40017B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Material dofBlurMaterial;

		[Token(Token = "0x40017B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Shader dofShader;

		[Token(Token = "0x40017B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Material dofMaterial;

		[Token(Token = "0x40017B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public bool visualize;

		[Token(Token = "0x40017B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public BokehDestination bokehDestination;

		[Token(Token = "0x40017B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float widthOverHeight;

		[Token(Token = "0x40017BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float oneOverBaseSize;

		[Token(Token = "0x40017BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public bool bokeh;

		[Token(Token = "0x40017BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
		public bool bokehSupport;

		[Token(Token = "0x40017BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Shader bokehShader;

		[Token(Token = "0x40017BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Texture2D bokehTexture;

		[Token(Token = "0x40017BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public float bokehScale;

		[Token(Token = "0x40017C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public float bokehIntensity;

		[Token(Token = "0x40017C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public float bokehThresholdContrast;

		[Token(Token = "0x40017C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public float bokehThresholdLuminance;

		[Token(Token = "0x40017C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public int bokehDownsample;

		[Token(Token = "0x40017C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Material bokehMaterial;

		[Token(Token = "0x40017C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Camera _camera;

		[Token(Token = "0x40017C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private RenderTexture foregroundTexture;

		[Token(Token = "0x40017C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private RenderTexture mediumRezWorkTexture;

		[Token(Token = "0x40017C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private RenderTexture finalDefocus;

		[Token(Token = "0x40017C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private RenderTexture lowRezWorkTexture;

		[Token(Token = "0x40017CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private RenderTexture bokehSource;

		[Token(Token = "0x40017CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private RenderTexture bokehSource2;

		[Token(Token = "0x60013E8")]
		[Address(RVA = "0xA47278", Offset = "0xA47278", VA = "0xA47278")]
		private void CreateMaterials()
		{
		}

		[Token(Token = "0x60013E9")]
		[Address(RVA = "0xA47784", Offset = "0xA47784", VA = "0xA47784", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60013EA")]
		[Address(RVA = "0xA47A68", Offset = "0xA47A68", VA = "0xA47A68")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60013EB")]
		[Address(RVA = "0xA47BD0", Offset = "0xA47BD0", VA = "0xA47BD0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60013EC")]
		[Address(RVA = "0xA47C50", Offset = "0xA47C50", VA = "0xA47C50")]
		private float FocalDistance01(float worldDist)
		{
			return default(float);
		}

		[Token(Token = "0x60013ED")]
		[Address(RVA = "0xA47D3C", Offset = "0xA47D3C", VA = "0xA47D3C")]
		private int GetDividerBasedOnQuality()
		{
			return default(int);
		}

		[Token(Token = "0x60013EE")]
		[Address(RVA = "0xA47D60", Offset = "0xA47D60", VA = "0xA47D60")]
		private int GetLowResolutionDividerBasedOnQuality(int baseDivider)
		{
			return default(int);
		}

		[Token(Token = "0x60013EF")]
		[Address(RVA = "0xA47D84", Offset = "0xA47D84", VA = "0xA47D84")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60013F0")]
		[Address(RVA = "0xA48AF0", Offset = "0xA48AF0", VA = "0xA48AF0")]
		private void Blur(RenderTexture from, RenderTexture to, DofBlurriness iterations, int blurPass, float spread)
		{
		}

		[Token(Token = "0x60013F1")]
		[Address(RVA = "0xA490A0", Offset = "0xA490A0", VA = "0xA490A0")]
		private void BlurFg(RenderTexture from, RenderTexture to, DofBlurriness iterations, int blurPass, float spread)
		{
		}

		[Token(Token = "0x60013F2")]
		[Address(RVA = "0xA49414", Offset = "0xA49414", VA = "0xA49414")]
		private void BlurHex(RenderTexture from, RenderTexture to, int blurPass, float spread, RenderTexture tmp)
		{
		}

		[Token(Token = "0x60013F3")]
		[Address(RVA = "0xA489C8", Offset = "0xA489C8", VA = "0xA489C8")]
		private void Downsample(RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x60013F4")]
		[Address(RVA = "0xA48CD0", Offset = "0xA48CD0", VA = "0xA48CD0")]
		private void AddBokeh(RenderTexture bokehInfo, RenderTexture tempTex, RenderTexture finalTarget)
		{
		}

		[Token(Token = "0x60013F5")]
		[Address(RVA = "0xA492AC", Offset = "0xA492AC", VA = "0xA492AC")]
		private void ReleaseTextures()
		{
		}

		[Token(Token = "0x60013F6")]
		[Address(RVA = "0xA48618", Offset = "0xA48618", VA = "0xA48618")]
		private void AllocateTextures(bool blurForeground, RenderTexture source, int divider, int lowTexDivider)
		{
		}

		[Token(Token = "0x60013F7")]
		[Address(RVA = "0xA497EC", Offset = "0xA497EC", VA = "0xA497EC")]
		public STBDepthOfFieldDeprecated()
		{
		}
	}
	[Token(Token = "0x2000356")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(Camera))]
	public class STBPostEffectsBase : MonoBehaviour
	{
		[Token(Token = "0x40017DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected bool supportHDRTextures;

		[Token(Token = "0x40017DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		protected bool supportDX11;

		[Token(Token = "0x40017DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		protected bool isSupported;

		[Token(Token = "0x60013F9")]
		[Address(RVA = "0xA47378", Offset = "0xA47378", VA = "0xA47378")]
		protected Material CheckShaderAndCreateMaterial(Shader s, Material m2Create)
		{
			return null;
		}

		[Token(Token = "0x60013FA")]
		[Address(RVA = "0xA498F0", Offset = "0xA498F0", VA = "0xA498F0")]
		protected Material CreateMaterial(Shader s, Material m2Create)
		{
			return null;
		}

		[Token(Token = "0x60013FB")]
		[Address(RVA = "0xA49AD4", Offset = "0xA49AD4", VA = "0xA49AD4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60013FC")]
		[Address(RVA = "0xA49AE0", Offset = "0xA49AE0", VA = "0xA49AE0")]
		protected bool CheckSupport()
		{
			return default(bool);
		}

		[Token(Token = "0x60013FD")]
		[Address(RVA = "0xA49AE8", Offset = "0xA49AE8", VA = "0xA49AE8", Slot = "4")]
		public virtual bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60013FE")]
		[Address(RVA = "0xA49BA8", Offset = "0xA49BA8", VA = "0xA49BA8")]
		protected void Start()
		{
		}

		[Token(Token = "0x60013FF")]
		[Address(RVA = "0xA478AC", Offset = "0xA478AC", VA = "0xA478AC")]
		protected bool CheckSupport(bool needDepth)
		{
			return default(bool);
		}

		[Token(Token = "0x6001400")]
		[Address(RVA = "0xA49BB4", Offset = "0xA49BB4", VA = "0xA49BB4")]
		protected bool CheckSupport(bool needDepth, bool needHdr)
		{
			return default(bool);
		}

		[Token(Token = "0x6001401")]
		[Address(RVA = "0xA49C0C", Offset = "0xA49C0C", VA = "0xA49C0C")]
		public bool Dx11Support()
		{
			return default(bool);
		}

		[Token(Token = "0x6001402")]
		[Address(RVA = "0xA479B0", Offset = "0xA479B0", VA = "0xA479B0")]
		protected void ReportAutoDisable()
		{
		}

		[Token(Token = "0x6001403")]
		[Address(RVA = "0xA49C14", Offset = "0xA49C14", VA = "0xA49C14")]
		private bool CheckShader(Shader s)
		{
			return default(bool);
		}

		[Token(Token = "0x6001404")]
		[Address(RVA = "0xA498D0", Offset = "0xA498D0", VA = "0xA498D0")]
		protected void NotSupported()
		{
		}

		[Token(Token = "0x6001405")]
		[Address(RVA = "0xA49E98", Offset = "0xA49E98", VA = "0xA49E98")]
		protected void DrawBorder(RenderTexture dest, Material material)
		{
		}

		[Token(Token = "0x6001406")]
		[Address(RVA = "0xA4986C", Offset = "0xA4986C", VA = "0xA4986C")]
		public STBPostEffectsBase()
		{
		}
	}
	[Token(Token = "0x2000357")]
	internal class STBQuads
	{
		[Token(Token = "0x40017DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Mesh[] meshes;

		[Token(Token = "0x40017DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static int currentQuads;

		[Token(Token = "0x6001407")]
		[Address(RVA = "0xA4A210", Offset = "0xA4A210", VA = "0xA4A210")]
		private static bool HasMeshes()
		{
			return default(bool);
		}

		[Token(Token = "0x6001408")]
		[Address(RVA = "0xA47A6C", Offset = "0xA47A6C", VA = "0xA47A6C")]
		public static void Cleanup()
		{
		}

		[Token(Token = "0x6001409")]
		[Address(RVA = "0xA495B4", Offset = "0xA495B4", VA = "0xA495B4")]
		public static Mesh[] GetMeshes(int totalWidth, int totalHeight)
		{
			return null;
		}

		[Token(Token = "0x600140A")]
		[Address(RVA = "0xA4A2E0", Offset = "0xA4A2E0", VA = "0xA4A2E0")]
		private static Mesh GetMesh(int triCount, int triOffset, int totalWidth, int totalHeight)
		{
			return null;
		}

		[Token(Token = "0x600140B")]
		[Address(RVA = "0xA4A664", Offset = "0xA4A664", VA = "0xA4A664")]
		public STBQuads()
		{
		}
	}
	[Token(Token = "0x2000358")]
	public class BasicDefines
	{
		[Token(Token = "0x40017E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static string VERSION;

		[Token(Token = "0x600140C")]
		[Address(RVA = "0xA4A66C", Offset = "0xA4A66C", VA = "0xA4A66C")]
		public BasicDefines()
		{
		}
	}
	[Token(Token = "0x2000359")]
	public class CharactersShowHandler : MonoBehaviour
	{
		[Token(Token = "0x40017E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<Transform> containersList;

		[Token(Token = "0x40017E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int actualCharacterIndex;

		[Token(Token = "0x40017E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<Transform> CharacterList;

		[Token(Token = "0x40017E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool toLeft;

		[Token(Token = "0x40017E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool toRight;

		[Token(Token = "0x600140E")]
		[Address(RVA = "0xA4A6E0", Offset = "0xA4A6E0", VA = "0xA4A6E0")]
		private void Start()
		{
		}

		[Token(Token = "0x600140F")]
		[Address(RVA = "0xA4AC04", Offset = "0xA4AC04", VA = "0xA4AC04")]
		public void GoToLeft()
		{
		}

		[Token(Token = "0x6001410")]
		[Address(RVA = "0xA4AC10", Offset = "0xA4AC10", VA = "0xA4AC10")]
		public void GoToRight()
		{
		}

		[Token(Token = "0x6001411")]
		[Address(RVA = "0xA4AC1C", Offset = "0xA4AC1C", VA = "0xA4AC1C")]
		public static Transform GetTransformInChildsByName(Transform mainTransform, string name)
		{
			return null;
		}

		[Token(Token = "0x6001412")]
		[Address(RVA = "0xA4AAD8", Offset = "0xA4AAD8", VA = "0xA4AAD8")]
		private void HandleAll()
		{
		}

		[Token(Token = "0x6001413")]
		[Address(RVA = "0xA4AF70", Offset = "0xA4AF70", VA = "0xA4AF70")]
		private void Update()
		{
		}

		[Token(Token = "0x6001414")]
		[Address(RVA = "0xA4AF74", Offset = "0xA4AF74", VA = "0xA4AF74")]
		public CharactersShowHandler()
		{
		}
	}
	[Token(Token = "0x200035A")]
	public class RagdollConfigurator : MonoBehaviour
	{
		[Token(Token = "0x40017E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float massMultiplier;

		[Token(Token = "0x6001415")]
		[Address(RVA = "0xA4B02C", Offset = "0xA4B02C", VA = "0xA4B02C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001416")]
		[Address(RVA = "0xA4B04C", Offset = "0xA4B04C", VA = "0xA4B04C")]
		public void ChangeAllChildJoints(Transform src)
		{
		}

		[Token(Token = "0x6001417")]
		[Address(RVA = "0xA4B424", Offset = "0xA4B424", VA = "0xA4B424")]
		public RagdollConfigurator()
		{
		}
	}
	[Token(Token = "0x200035B")]
	public class Rotator : MonoBehaviour
	{
		[Token(Token = "0x40017E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 rotationVector;

		[Token(Token = "0x6001418")]
		[Address(RVA = "0xA4B434", Offset = "0xA4B434", VA = "0xA4B434")]
		private void Update()
		{
		}

		[Token(Token = "0x6001419")]
		[Address(RVA = "0xA4B490", Offset = "0xA4B490", VA = "0xA4B490")]
		public Rotator()
		{
		}
	}
}
