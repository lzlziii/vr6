using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Globalization;
using System.Net.Sockets;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Threading;
using System.Threading.Tasks;
using DG.Tweening.Core;
using DG.Tweening.Plugins.Core.PathCore;
using DG.Tweening.Plugins.Options;
using ExitGames.Client.Photon.LoadBalancing;
using ExitGames.Client.Photon.Voice;
using HellTap.MeshDecimator.Algorithms;
using HellTap.MeshDecimator.Collections;
using HellTap.MeshDecimator.Math;
using HellTap.MeshDecimator.Unity;
using Il2CppDummyDll;
using MagicLightProbes;
using POpusCodec;
using POpusCodec.Enums;
using RootMotion.FinalIK;
using Unity.Collections;
using UnityEngine;
using UnityEngine.AI;
using UnityEngine.Animations;
using UnityEngine.Audio;
using UnityEngine.Events;
using UnityEngine.Playables;
using UnityEngine.Rendering;
using UnityEngine.Scripting;
using UnityEngine.Serialization;
using UnityEngine.UI;

[assembly: AssemblyVersion("0.0.0.0")]
[Token(Token = "0x2000002")]
public class JsonNetSample : MonoBehaviour
{
	[Token(Token = "0x2000003")]
	public class Product
	{
		[Token(Token = "0x4000002")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string Name;

		[Token(Token = "0x4000003")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public DateTime ExpiryDate;

		[Token(Token = "0x4000004")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public decimal Price;

		[Token(Token = "0x4000005")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string[] Sizes;

		[Token(Token = "0x6000009")]
		[Address(RVA = "0xB89AE4", Offset = "0xB89AE4", VA = "0xB89AE4", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x600000A")]
		[Address(RVA = "0xB89C24", Offset = "0xB89C24", VA = "0xB89C24", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x600000B")]
		[Address(RVA = "0xB89A88", Offset = "0xB89A88", VA = "0xB89A88")]
		public Product()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x2000004")]
	public class CharacterListItem
	{
		[Token(Token = "0x17000001")]
		public int Id
		{
			[Token(Token = "0x600000C")]
			[Address(RVA = "0xB89C88", Offset = "0xB89C88", VA = "0xB89C88")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600000D")]
			[Address(RVA = "0xB89C90", Offset = "0xB89C90", VA = "0xB89C90")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000002")]
		public string Name
		{
			[Token(Token = "0x600000E")]
			[Address(RVA = "0xB89C98", Offset = "0xB89C98", VA = "0xB89C98")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600000F")]
			[Address(RVA = "0xB89CA0", Offset = "0xB89CA0", VA = "0xB89CA0")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000003")]
		public int Level
		{
			[Token(Token = "0x6000010")]
			[Address(RVA = "0xB89CA8", Offset = "0xB89CA8", VA = "0xB89CA8")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000011")]
			[Address(RVA = "0xB89CB0", Offset = "0xB89CB0", VA = "0xB89CB0")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000004")]
		public string Class
		{
			[Token(Token = "0x6000012")]
			[Address(RVA = "0xB89CB8", Offset = "0xB89CB8", VA = "0xB89CB8")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000013")]
			[Address(RVA = "0xB89CC0", Offset = "0xB89CC0", VA = "0xB89CC0")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000005")]
		public string Sex
		{
			[Token(Token = "0x6000014")]
			[Address(RVA = "0xB89CC8", Offset = "0xB89CC8", VA = "0xB89CC8")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000015")]
			[Address(RVA = "0xB89CD0", Offset = "0xB89CD0", VA = "0xB89CD0")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6000016")]
		[Address(RVA = "0xB89CD8", Offset = "0xB89CD8", VA = "0xB89CD8")]
		public CharacterListItem()
		{
		}
	}

	[Token(Token = "0x2000005")]
	public class Movie
	{
		[Token(Token = "0x17000006")]
		public string Name
		{
			[Token(Token = "0x6000017")]
			[Address(RVA = "0xB89CE0", Offset = "0xB89CE0", VA = "0xB89CE0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000018")]
			[Address(RVA = "0xB89CE8", Offset = "0xB89CE8", VA = "0xB89CE8")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000007")]
		public string Description
		{
			[Token(Token = "0x6000019")]
			[Address(RVA = "0xB89CF0", Offset = "0xB89CF0", VA = "0xB89CF0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600001A")]
			[Address(RVA = "0xB89CF8", Offset = "0xB89CF8", VA = "0xB89CF8")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000008")]
		public string Classification
		{
			[Token(Token = "0x600001B")]
			[Address(RVA = "0xB89D00", Offset = "0xB89D00", VA = "0xB89D00")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600001C")]
			[Address(RVA = "0xB89D08", Offset = "0xB89D08", VA = "0xB89D08")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000009")]
		public string Studio
		{
			[Token(Token = "0x600001D")]
			[Address(RVA = "0xB89D10", Offset = "0xB89D10", VA = "0xB89D10")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600001E")]
			[Address(RVA = "0xB89D18", Offset = "0xB89D18", VA = "0xB89D18")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700000A")]
		public DateTime? ReleaseDate
		{
			[Token(Token = "0x600001F")]
			[Address(RVA = "0xB89D20", Offset = "0xB89D20", VA = "0xB89D20")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000020")]
			[Address(RVA = "0xB89D2C", Offset = "0xB89D2C", VA = "0xB89D2C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700000B")]
		public List<string> ReleaseCountries
		{
			[Token(Token = "0x6000021")]
			[Address(RVA = "0xB89D34", Offset = "0xB89D34", VA = "0xB89D34")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000022")]
			[Address(RVA = "0xB89D3C", Offset = "0xB89D3C", VA = "0xB89D3C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6000023")]
		[Address(RVA = "0xB89D44", Offset = "0xB89D44", VA = "0xB89D44")]
		public Movie()
		{
		}
	}

	[Token(Token = "0x4000001")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text Output;

	[Token(Token = "0x6000001")]
	[Address(RVA = "0xB8910C", Offset = "0xB8910C", VA = "0xB8910C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000002")]
	[Address(RVA = "0xB89A00", Offset = "0xB89A00", VA = "0xB89A00")]
	private void WriteLine(string msg)
	{
	}

	[Token(Token = "0x6000003")]
	[Address(RVA = "0xB891B0", Offset = "0xB891B0", VA = "0xB891B0")]
	private void TestJson()
	{
	}

	[Token(Token = "0x6000004")]
	[Address(RVA = "0xB892B0", Offset = "0xB892B0", VA = "0xB892B0")]
	private void SerailizeJson()
	{
	}

	[Token(Token = "0x6000005")]
	[Address(RVA = "0xB89424", Offset = "0xB89424", VA = "0xB89424")]
	private void DeserializeJson()
	{
	}

	[Token(Token = "0x6000006")]
	[Address(RVA = "0xB894E0", Offset = "0xB894E0", VA = "0xB894E0")]
	private void LinqToJson()
	{
	}

	[Token(Token = "0x6000007")]
	[Address(RVA = "0xB89668", Offset = "0xB89668", VA = "0xB89668")]
	private void JsonPath()
	{
	}

	[Token(Token = "0x6000008")]
	[Address(RVA = "0xB89ADC", Offset = "0xB89ADC", VA = "0xB89ADC")]
	public JsonNetSample()
	{
	}
}
[Token(Token = "0x2000006")]
public class MLPForceSaveProbes : MonoBehaviour
{
	[Token(Token = "0x6000024")]
	[Address(RVA = "0xB89D4C", Offset = "0xB89D4C", VA = "0xB89D4C")]
	public MLPForceSaveProbes()
	{
	}
}
[Token(Token = "0x2000007")]
[CreateAssetMenu(fileName = "New MLP Settings Asset", menuName = "Magic Tools/Magic Light Probes/Create New Settings Asset", order = 1)]
public class MLPSettings : ScriptableObject
{
	[Token(Token = "0x4000011")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public global::MagicLightProbes.MagicLightProbes.Workflow workflow;

	[Token(Token = "0x4000012")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float probesSpacing;

	[Token(Token = "0x4000013")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float cornersDetectionThreshold;

	[Token(Token = "0x4000014")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float cornerProbesSpacing;

	[Token(Token = "0x4000015")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float distanceFromGeometry;

	[Token(Token = "0x4000016")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int divideVolumeOnProbesCount;

	[Token(Token = "0x4000017")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool useVolumeBottom;

	[Token(Token = "0x4000018")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	public bool selectedObjectsAsGlobal;

	[Token(Token = "0x4000019")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float maxHeightAboveGeometry;

	[Token(Token = "0x400001A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float maxHeightAboveTerrain;

	[Token(Token = "0x400001B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public LayerMask collisionDetectionLayers;

	[Token(Token = "0x400001C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float collisionDetectionRadius;

	[Token(Token = "0x400001D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public bool considerDistanceToLights;

	[Token(Token = "0x400001E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public global::MagicLightProbes.MagicLightProbes.FillingMode fillingMode;

	[Token(Token = "0x400001F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float lightIntensityThreshold;

	[Token(Token = "0x4000020")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public bool cullByColor;

	[Token(Token = "0x4000021")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float colorThreshold;

	[Token(Token = "0x4000022")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public bool fillEquivalentVolume;

	[Token(Token = "0x4000023")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float equivalentVolumeFillingRate;

	[Token(Token = "0x4000024")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public bool fillUnlitVolume;

	[Token(Token = "0x4000025")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public float unlitVolumeFillingRate;

	[Token(Token = "0x4000026")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public bool optimizeForMixedLighting;

	[Token(Token = "0x4000027")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
	public bool tryPreventLightLeakage;

	[Token(Token = "0x4000028")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public global::MagicLightProbes.MagicLightProbes.BoundsDisplayMode boundsDisplayMode;

	[Token(Token = "0x6000025")]
	[Address(RVA = "0xB89D54", Offset = "0xB89D54", VA = "0xB89D54")]
	public MLPSettings()
	{
	}
}
[Token(Token = "0x2000008")]
public class NavMeshCleaner : MonoBehaviour
{
	[Token(Token = "0x4000029")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<UnityEngine.Vector3> m_WalkablePoint;

	[Token(Token = "0x400002A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float m_Height;

	[Token(Token = "0x400002B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float m_Offset;

	[Token(Token = "0x400002C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int m_MidLayerCount;

	[Token(Token = "0x6000026")]
	[Address(RVA = "0xB89D5C", Offset = "0xB89D5C", VA = "0xB89D5C")]
	public NavMeshCleaner()
	{
	}
}
[Token(Token = "0x2000009")]
public class AndroidAudioInAEC : IAudioPusher<short>, IAudioSource, IDisposable
{
	[Token(Token = "0x200000A")]
	private class DataCallback : AndroidJavaProxy
	{
		[Token(Token = "0x4000030")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Action<short[]> callback;

		[Token(Token = "0x4000031")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private IntPtr javaBuf;

		[Token(Token = "0x4000032")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int cntFrame;

		[Token(Token = "0x4000033")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int cntShort;

		[Token(Token = "0x600002C")]
		[Address(RVA = "0xB8A770", Offset = "0xB8A770", VA = "0xB8A770")]
		public DataCallback(Action<short[]> callback, IntPtr javaBuf)
		{
		}

		[Token(Token = "0x600002D")]
		[Address(RVA = "0xB8A808", Offset = "0xB8A808", VA = "0xB8A808")]
		public void OnData()
		{
		}

		[Token(Token = "0x600002E")]
		[Address(RVA = "0xB8A860", Offset = "0xB8A860", VA = "0xB8A860")]
		public void OnStop()
		{
		}
	}

	[Token(Token = "0x400002D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private AndroidJavaObject audioIn;

	[Token(Token = "0x400002E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private IntPtr javaBuf;

	[Token(Token = "0x400002F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private DataCallback callback;

	[Token(Token = "0x1700000C")]
	public int Channels
	{
		[Token(Token = "0x6000029")]
		[Address(RVA = "0xB8A800", Offset = "0xB8A800", VA = "0xB8A800", Slot = "6")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700000D")]
	public int SamplingRate
	{
		[Token(Token = "0x600002A")]
		[Address(RVA = "0xB8A7F8", Offset = "0xB8A7F8", VA = "0xB8A7F8", Slot = "5")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x6000027")]
	[Address(RVA = "0xB89DE8", Offset = "0xB89DE8", VA = "0xB89DE8")]
	public AndroidAudioInAEC()
	{
	}

	[Token(Token = "0x6000028")]
	[Address(RVA = "0xB89DF0", Offset = "0xB89DF0", VA = "0xB89DF0", Slot = "4")]
	public void SetCallback(Action<short[]> callback, LocalVoice localVoice)
	{
	}

	[Token(Token = "0x600002B")]
	[Address(RVA = "0xB8A6B0", Offset = "0xB8A6B0", VA = "0xB8A6B0", Slot = "7")]
	public void Dispose()
	{
	}
}
[Token(Token = "0x200000B")]
public class AudioClipWrapper : IAudioReader<float>, IDataReader<float>, IDisposable, IAudioSource
{
	[Token(Token = "0x4000034")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private AudioClip audioClip;

	[Token(Token = "0x4000035")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int readPos;

	[Token(Token = "0x4000036")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float startTime;

	[Token(Token = "0x4000038")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	private bool playing;

	[Token(Token = "0x1700000E")]
	public bool Loop
	{
		[Token(Token = "0x600002F")]
		[Address(RVA = "0xB8A86C", Offset = "0xB8A86C", VA = "0xB8A86C")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000030")]
		[Address(RVA = "0xB8A874", Offset = "0xB8A874", VA = "0xB8A874")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x1700000F")]
	public int SamplingRate
	{
		[Token(Token = "0x6000033")]
		[Address(RVA = "0xB8A9C4", Offset = "0xB8A9C4", VA = "0xB8A9C4", Slot = "6")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000010")]
	public int Channels
	{
		[Token(Token = "0x6000034")]
		[Address(RVA = "0xB8A9E0", Offset = "0xB8A9E0", VA = "0xB8A9E0", Slot = "7")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x6000031")]
	[Address(RVA = "0xB8A880", Offset = "0xB8A880", VA = "0xB8A880")]
	public AudioClipWrapper(AudioClip audioClip)
	{
	}

	[Token(Token = "0x6000032")]
	[Address(RVA = "0xB8A8BC", Offset = "0xB8A8BC", VA = "0xB8A8BC", Slot = "4")]
	public bool Read(float[] buffer)
	{
		return default(bool);
	}

	[Token(Token = "0x6000035")]
	[Address(RVA = "0xB8A9FC", Offset = "0xB8A9FC", VA = "0xB8A9FC", Slot = "5")]
	public void Dispose()
	{
	}
}
[Token(Token = "0x200000C")]
public class AudioOutCapture : MonoBehaviour
{
	[Token(Token = "0x14000001")]
	public event Action<float[], int> OnAudioFrame
	{
		[Token(Token = "0x6000036")]
		[Address(RVA = "0xB8AA00", Offset = "0xB8AA00", VA = "0xB8AA00")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000037")]
		[Address(RVA = "0xB8AAB0", Offset = "0xB8AAB0", VA = "0xB8AAB0")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6000038")]
	[Address(RVA = "0xB8AB60", Offset = "0xB8AB60", VA = "0xB8AB60")]
	private void OnAudioFilterRead(float[] frame, int channels)
	{
	}

	[Token(Token = "0x6000039")]
	[Address(RVA = "0xB8AB7C", Offset = "0xB8AB7C", VA = "0xB8AB7C")]
	public AudioOutCapture()
	{
	}
}
[Token(Token = "0x200000D")]
public class AudioStreamPlayer : IAudioOut
{
	[Token(Token = "0x400003A")]
	private const int maxPlayLagMs = 100;

	[Token(Token = "0x400003B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private int maxPlayLagSamples;

	[Token(Token = "0x400003C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private int playDelaySamples;

	[Token(Token = "0x400003D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int bufferSamples;

	[Token(Token = "0x400003E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private int channels;

	[Token(Token = "0x400003F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int frameSize;

	[Token(Token = "0x4000040")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private int frameSamples;

	[Token(Token = "0x4000041")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int streamSamplePos;

	[Token(Token = "0x4000043")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int streamSamplePosAvg;

	[Token(Token = "0x4000044")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private AudioSource source;

	[Token(Token = "0x4000045")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private string logPrefix;

	[Token(Token = "0x4000046")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool debugInfo;

	[Token(Token = "0x4000047")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private int sourceTimeSamplesPrev;

	[Token(Token = "0x4000048")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private int playLoopCount;

	[Token(Token = "0x4000049")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Queue<float[]> frameQueue;

	[Token(Token = "0x400004A")]
	public const int FRAME_POOL_CAPACITY = 50;

	[Token(Token = "0x400004B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private PrimitiveArrayPool<float> framePool;

	[Token(Token = "0x17000011")]
	public int CurrentBufferLag
	{
		[Token(Token = "0x600003A")]
		[Address(RVA = "0xB8AB84", Offset = "0xB8AB84", VA = "0xB8AB84", Slot = "9")]
		[CompilerGenerated]
		get
		{
			return default(int);
		}
		[Token(Token = "0x600003B")]
		[Address(RVA = "0xB8AB8C", Offset = "0xB8AB8C", VA = "0xB8AB8C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000012")]
	public AudioSource AudioSource
	{
		[Token(Token = "0x600003C")]
		[Address(RVA = "0xB8AB94", Offset = "0xB8AB94", VA = "0xB8AB94")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000013")]
	private int playSamplePos
	{
		[Token(Token = "0x600003E")]
		[Address(RVA = "0xB8ACA4", Offset = "0xB8ACA4", VA = "0xB8ACA4")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x600003F")]
		[Address(RVA = "0xB8AD48", Offset = "0xB8AD48", VA = "0xB8AD48")]
		set
		{
		}
	}

	[Token(Token = "0x17000014")]
	public bool IsPlaying
	{
		[Token(Token = "0x6000040")]
		[Address(RVA = "0xB8AE14", Offset = "0xB8AE14", VA = "0xB8AE14", Slot = "4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600003D")]
	[Address(RVA = "0xB8AB9C", Offset = "0xB8AB9C", VA = "0xB8AB9C")]
	public AudioStreamPlayer(AudioSource audioSource, string logPrefix, bool debugInfo)
	{
	}

	[Token(Token = "0x6000041")]
	[Address(RVA = "0xB8AE30", Offset = "0xB8AE30", VA = "0xB8AE30", Slot = "5")]
	public void Start(int frequency, int channels, int frameSamples, int playDelayMs)
	{
	}

	[Token(Token = "0x6000042")]
	[Address(RVA = "0xB8AFA0", Offset = "0xB8AFA0", VA = "0xB8AFA0", Slot = "8")]
	public void Service()
	{
	}

	[Token(Token = "0x6000043")]
	[Address(RVA = "0xB8B664", Offset = "0xB8B664", VA = "0xB8B664", Slot = "7")]
	public void OnAudioFrame(float[] frame)
	{
	}

	[Token(Token = "0x6000044")]
	[Address(RVA = "0xB8B90C", Offset = "0xB8B90C", VA = "0xB8B90C", Slot = "6")]
	public void Stop()
	{
	}
}
[Token(Token = "0x200000E")]
public class IOSAudioForceToSpeaker : MonoBehaviour
{
	[Token(Token = "0x6000045")]
	[Address(RVA = "0xB8B940", Offset = "0xB8B940", VA = "0xB8B940")]
	private void PhotonVoiceCreated()
	{
	}

	[Token(Token = "0x6000046")]
	[Address(RVA = "0xB8B944", Offset = "0xB8B944", VA = "0xB8B944")]
	public IOSAudioForceToSpeaker()
	{
	}
}
[Token(Token = "0x200000F")]
public class MicWrapper : IAudioReader<float>, IDataReader<float>, IDisposable, IAudioSource
{
	[Token(Token = "0x400004C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private AudioClip mic;

	[Token(Token = "0x400004D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private string device;

	[Token(Token = "0x400004E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int micPrevPos;

	[Token(Token = "0x400004F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private int micLoopCnt;

	[Token(Token = "0x4000050")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int readAbsPos;

	[Token(Token = "0x17000015")]
	public int SamplingRate
	{
		[Token(Token = "0x6000048")]
		[Address(RVA = "0xB8BB5C", Offset = "0xB8BB5C", VA = "0xB8BB5C", Slot = "6")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000016")]
	public int Channels
	{
		[Token(Token = "0x6000049")]
		[Address(RVA = "0xB8BB78", Offset = "0xB8BB78", VA = "0xB8BB78", Slot = "7")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x6000047")]
	[Address(RVA = "0xB8B94C", Offset = "0xB8B94C", VA = "0xB8B94C")]
	public MicWrapper(string device, int suggestedFrequency)
	{
	}

	[Token(Token = "0x600004A")]
	[Address(RVA = "0xB8BB94", Offset = "0xB8BB94", VA = "0xB8BB94", Slot = "5")]
	public void Dispose()
	{
	}

	[Token(Token = "0x600004B")]
	[Address(RVA = "0xB8BBA0", Offset = "0xB8BBA0", VA = "0xB8BBA0", Slot = "4")]
	public bool Read(float[] buffer)
	{
		return default(bool);
	}
}
[Serializable]
[Token(Token = "0x2000010")]
public class SECTR_AudioAmbience
{
	[Token(Token = "0x4000051")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[SECTR_ToolTip("The looping 2D cue to play as long as this ambience is active.", null, false)]
	public SECTR_AudioCue BackgroundLoop;

	[Token(Token = "0x4000052")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SECTR_ToolTip("A list of one-shots that will play randomly around the listener.")]
	public List<SECTR_AudioCue> OneShots;

	[Token(Token = "0x4000053")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SECTR_ToolTip("The min and max time between one-shot playback.", "OneShots")]
	public UnityEngine.Vector2 OneShotInterval;

	[Token(Token = "0x4000054")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SECTR_ToolTip("The a volume scalar for the Cues in this Ambience. Combines with the base Cue volume.")]
	public float Volume;

	[Token(Token = "0x4000055")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SECTR_ToolTip("When enabled the higher probability one shots will be more likely to play, gets the probability from the cue.")]
	public bool UseOneShotCuesProbability;

	[Token(Token = "0x4000056")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	public float TotalProbability;

	[Token(Token = "0x600004C")]
	[Address(RVA = "0xB8BCA0", Offset = "0xB8BCA0", VA = "0xB8BCA0")]
	public SECTR_AudioAmbience()
	{
	}
}
[Token(Token = "0x2000011")]
public class SECTR_AudioBus : ScriptableObject
{
	[Token(Token = "0x4000057")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[HideInInspector]
	private SECTR_AudioBus parent;

	[Token(Token = "0x4000058")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<SECTR_AudioBus> children;

	[Token(Token = "0x4000059")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float userVolume;

	[Token(Token = "0x400005A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float userPitch;

	[Token(Token = "0x400005B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float effectiveVolume;

	[Token(Token = "0x400005C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float effectivePitch;

	[Token(Token = "0x400005D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool muted;

	[Token(Token = "0x400005E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SECTR_ToolTip("The volume of this bus, between 0 and 1.", 0f, 1f)]
	public float Volume;

	[Token(Token = "0x400005F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SECTR_ToolTip("The pitch of this bus, between 0 and 2.", 0f, 2f)]
	public float Pitch;

	[Token(Token = "0x17000017")]
	public float UserVolume
	{
		[Token(Token = "0x600004E")]
		[Address(RVA = "0xB8BD40", Offset = "0xB8BD40", VA = "0xB8BD40")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600004D")]
		[Address(RVA = "0xB8BD38", Offset = "0xB8BD38", VA = "0xB8BD38")]
		set
		{
		}
	}

	[Token(Token = "0x17000018")]
	public float UserPitch
	{
		[Token(Token = "0x6000050")]
		[Address(RVA = "0xB8BD50", Offset = "0xB8BD50", VA = "0xB8BD50")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600004F")]
		[Address(RVA = "0xB8BD48", Offset = "0xB8BD48", VA = "0xB8BD48")]
		set
		{
		}
	}

	[Token(Token = "0x17000019")]
	public bool Muted
	{
		[Token(Token = "0x6000051")]
		[Address(RVA = "0xB8BD58", Offset = "0xB8BD58", VA = "0xB8BD58")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000052")]
		[Address(RVA = "0xB8BD60", Offset = "0xB8BD60", VA = "0xB8BD60")]
		set
		{
		}
	}

	[Token(Token = "0x1700001A")]
	public float EffectiveVolume
	{
		[Token(Token = "0x6000053")]
		[Address(RVA = "0xB8BD6C", Offset = "0xB8BD6C", VA = "0xB8BD6C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000054")]
		[Address(RVA = "0xB8BD74", Offset = "0xB8BD74", VA = "0xB8BD74")]
		set
		{
		}
	}

	[Token(Token = "0x1700001B")]
	public float EffectivePitch
	{
		[Token(Token = "0x6000055")]
		[Address(RVA = "0xB8BDA8", Offset = "0xB8BDA8", VA = "0xB8BDA8")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000056")]
		[Address(RVA = "0xB8BDB0", Offset = "0xB8BDB0", VA = "0xB8BDB0")]
		set
		{
		}
	}

	[Token(Token = "0x1700001C")]
	public SECTR_AudioBus Parent
	{
		[Token(Token = "0x6000058")]
		[Address(RVA = "0xB8C05C", Offset = "0xB8C05C", VA = "0xB8C05C")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000057")]
		[Address(RVA = "0xB8BDDC", Offset = "0xB8BDDC", VA = "0xB8BDDC")]
		set
		{
		}
	}

	[Token(Token = "0x1700001D")]
	public List<SECTR_AudioBus> Children
	{
		[Token(Token = "0x6000059")]
		[Address(RVA = "0xB8C064", Offset = "0xB8C064", VA = "0xB8C064")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600005A")]
	[Address(RVA = "0xB8C06C", Offset = "0xB8C06C", VA = "0xB8C06C")]
	public bool IsAncestorOf(SECTR_AudioBus bus)
	{
		return default(bool);
	}

	[Token(Token = "0x600005B")]
	[Address(RVA = "0xB8C11C", Offset = "0xB8C11C", VA = "0xB8C11C")]
	public bool IsDecendentOf(SECTR_AudioBus bus)
	{
		return default(bool);
	}

	[Token(Token = "0x600005C")]
	[Address(RVA = "0xB8C1C8", Offset = "0xB8C1C8", VA = "0xB8C1C8")]
	public void ResetUserVolume()
	{
	}

	[Token(Token = "0x600005D")]
	[Address(RVA = "0xB8C2B0", Offset = "0xB8C2B0", VA = "0xB8C2B0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600005E")]
	[Address(RVA = "0xB8C330", Offset = "0xB8C330", VA = "0xB8C330")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600005F")]
	[Address(RVA = "0xB8BF44", Offset = "0xB8BF44", VA = "0xB8BF44")]
	private void _AddChild(SECTR_AudioBus child)
	{
	}

	[Token(Token = "0x6000060")]
	[Address(RVA = "0xB8BEEC", Offset = "0xB8BEEC", VA = "0xB8BEEC")]
	private void _RemoveChild(SECTR_AudioBus child)
	{
	}

	[Token(Token = "0x6000061")]
	[Address(RVA = "0xB8C3B0", Offset = "0xB8C3B0", VA = "0xB8C3B0")]
	public SECTR_AudioBus()
	{
	}
}
[Token(Token = "0x2000012")]
public class SECTR_AudioCue : ScriptableObject
{
	[Token(Token = "0x2000013")]
	public enum PlaybackModes
	{
		[Token(Token = "0x4000080")]
		Random,
		[Token(Token = "0x4000081")]
		Shuffle,
		[Token(Token = "0x4000082")]
		Loop,
		[Token(Token = "0x4000083")]
		PingPong
	}

	[Token(Token = "0x2000014")]
	public enum FalloffTypes
	{
		[Token(Token = "0x4000085")]
		Linear,
		[Token(Token = "0x4000086")]
		Logrithmic
	}

	[Token(Token = "0x2000015")]
	public enum Spatializations
	{
		[Token(Token = "0x4000088")]
		Simple2D,
		[Token(Token = "0x4000089")]
		Infinite3D,
		[Token(Token = "0x400008A")]
		Local3D,
		[Token(Token = "0x400008B")]
		Occludable3D
	}

	[Serializable]
	[Token(Token = "0x2000016")]
	public class ClipData
	{
		[Token(Token = "0x400008C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private AudioClip clip;

		[Token(Token = "0x400008D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private bool playedInShuffle;

		[Token(Token = "0x400008E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float volume;

		[Token(Token = "0x400008F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private SECTR_ULong bakeTimestamp;

		[Token(Token = "0x4000090")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimationCurve HDRCurve;

		[Token(Token = "0x17000024")]
		public AudioClip Clip
		{
			[Token(Token = "0x6000073")]
			[Address(RVA = "0xB8CCA8", Offset = "0xB8CCA8", VA = "0xB8CCA8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000025")]
		public float Volume
		{
			[Token(Token = "0x6000074")]
			[Address(RVA = "0xB8CCB0", Offset = "0xB8CCB0", VA = "0xB8CCB0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000075")]
			[Address(RVA = "0xB8CCB8", Offset = "0xB8CCB8", VA = "0xB8CCB8")]
			set
			{
			}
		}

		[Token(Token = "0x17000026")]
		public bool PlayedInShuffle
		{
			[Token(Token = "0x6000076")]
			[Address(RVA = "0xB8CCC0", Offset = "0xB8CCC0", VA = "0xB8CCC0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000077")]
			[Address(RVA = "0xB8CCC8", Offset = "0xB8CCC8", VA = "0xB8CCC8")]
			set
			{
			}
		}

		[Token(Token = "0x6000072")]
		[Address(RVA = "0xB8CC70", Offset = "0xB8CC70", VA = "0xB8CC70")]
		public ClipData(AudioClip clip)
		{
		}
	}

	[Token(Token = "0x4000060")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	[SerializeField]
	private SECTR_AudioCue template;

	[Token(Token = "0x4000061")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[HideInInspector]
	[SerializeField]
	private SECTR_AudioBus bus;

	[Token(Token = "0x4000062")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int clipPlaybackIndex;

	[Token(Token = "0x4000063")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private bool needsShuffling;

	[Token(Token = "0x4000064")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
	private bool pingPongIncrement;

	[Token(Token = "0x4000065")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SECTR_ToolTip("List of Audio Clips for this Cue to choose from.")]
	public List<ClipData> AudioClips;

	[Token(Token = "0x4000066")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SECTR_ToolTip("The rules for selecting which audio clip to play next")]
	public PlaybackModes PlaybackMode;

	[Token(Token = "0x4000067")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SECTR_ToolTip("Determines if the sound should be mixed in HDR or LDR.")]
	public bool HDR;

	[Token(Token = "0x4000068")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SECTR_ToolTip("The loudness, in dB(SPL), of this HDR Cue.")]
	public UnityEngine.Vector2 Loudness;

	[Token(Token = "0x4000069")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SECTR_ToolTip("The volume of this Cue.")]
	public UnityEngine.Vector2 Volume;

	[Token(Token = "0x400006A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SECTR_ToolTip("The pitch adjustment of this Cue.")]
	public UnityEngine.Vector2 Pitch;

	[Token(Token = "0x400006B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SECTR_ToolTip("Set to true to auto-loop this Cue.")]
	public bool Loops;

	[Token(Token = "0x400006C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[SECTR_ToolTip("Cue priority, lower is more important.", 0f, 255f)]
	public int Priority;

	[Token(Token = "0x400006D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SECTR_ToolTip("Prevent this Cue from recieving Audio Effects.")]
	public bool BypassEffects;

	[Token(Token = "0x400006E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[SECTR_ToolTip("Maximum number of instances of this Cue that can be played at once.", 1f, -1f)]
	public int MaxInstances;

	[Token(Token = "0x400006F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SECTR_ToolTip("Number of seconds over which to fade in the Cue when played.", 0f, -1f)]
	public float FadeInTime;

	[Token(Token = "0x4000070")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[SECTR_ToolTip("Number of seconds over which to fade out the Cue when stopped.", 0f, -1f)]
	public float FadeOutTime;

	[Token(Token = "0x4000071")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SECTR_ToolTip("Sets rules for how to spatialize this sound.")]
	public Spatializations Spatialization;

	[Token(Token = "0x4000072")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	[SECTR_ToolTip("Expands or narrows the range of speakers out of which this Cue plays.", 0f, 360f)]
	public float Spread;

	[Token(Token = "0x4000073")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SECTR_ToolTip("Moves the sound around the speaker field.", -1f, 1f)]
	public float Pan2D;

	[Token(Token = "0x4000074")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	[SECTR_ToolTip("Attenuation style of this clip.")]
	public FalloffTypes Falloff;

	[Token(Token = "0x4000075")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SECTR_ToolTip("The range at which the sound is no longer audible.", 0f, -1f)]
	public float MaxDistance;

	[Token(Token = "0x4000076")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	[SECTR_ToolTip("The range within which the sound will be at peak volume/loudness.", 0f, -1f)]
	public float MinDistance;

	[Token(Token = "0x4000077")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SECTR_ToolTip("Scales the amount of doppler effect applied to this Cue.", 0f, 1f)]
	public float DopplerLevel;

	[Token(Token = "0x4000078")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	[SECTR_ToolTip("Prevents too many instances of a cue playing near one another.", 0f, -1f)]
	public int ProximityLimit;

	[Token(Token = "0x4000079")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SECTR_ToolTip("The size of the proximity limit check.", "ProximityLimit", 0f, -1f)]
	public float ProximityRange;

	[Token(Token = "0x400007A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	[SECTR_ToolTip("Allows you to scale down the amount of occlusion applied to this Cue (when occluded).", 0f, 1f)]
	public float OcclusionScale;

	[Token(Token = "0x400007B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SECTR_ToolTip("The chance that this cue will actually make a sound when played.", 0f, 1f)]
	public float PlayProbability;

	[Token(Token = "0x400007C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	[SECTR_ToolTip("Random delay before start of playback.")]
	public UnityEngine.Vector2 Delay;

	[Token(Token = "0x400007D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[SECTR_ToolTip("Special prefab to use when playing this Cue. Useful for adding effects to this source.", null, false)]
	public GameObject Prefab;

	[Token(Token = "0x400007E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[SECTR_ToolTip("Control parameters for this Cue")]
	public List<SECTR_CueParam> ControlParams;

	[Token(Token = "0x1700001E")]
	public SECTR_AudioCue Template
	{
		[Token(Token = "0x6000063")]
		[Address(RVA = "0xB8C4D8", Offset = "0xB8C4D8", VA = "0xB8C4D8")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000062")]
		[Address(RVA = "0xB8C43C", Offset = "0xB8C43C", VA = "0xB8C43C")]
		set
		{
		}
	}

	[Token(Token = "0x1700001F")]
	public SECTR_AudioBus Bus
	{
		[Token(Token = "0x6000065")]
		[Address(RVA = "0xB8C558", Offset = "0xB8C558", VA = "0xB8C558")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000064")]
		[Address(RVA = "0xB8C4E0", Offset = "0xB8C4E0", VA = "0xB8C4E0")]
		set
		{
		}
	}

	[Token(Token = "0x17000020")]
	public SECTR_AudioCue SourceCue
	{
		[Token(Token = "0x6000066")]
		[Address(RVA = "0xB8C560", Offset = "0xB8C560", VA = "0xB8C560")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000021")]
	public bool Is3D
	{
		[Token(Token = "0x6000067")]
		[Address(RVA = "0xB8C5D0", Offset = "0xB8C5D0", VA = "0xB8C5D0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000022")]
	public bool IsLocal
	{
		[Token(Token = "0x6000068")]
		[Address(RVA = "0xB8C5E0", Offset = "0xB8C5E0", VA = "0xB8C5E0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000023")]
	public int ClipIndex
	{
		[Token(Token = "0x6000069")]
		[Address(RVA = "0xB8C5F0", Offset = "0xB8C5F0", VA = "0xB8C5F0")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x600006A")]
	[Address(RVA = "0xB8C5F8", Offset = "0xB8C5F8", VA = "0xB8C5F8")]
	public ClipData GetNextClip()
	{
		return null;
	}

	[Token(Token = "0x600006B")]
	[Address(RVA = "0xB8C898", Offset = "0xB8C898", VA = "0xB8C898")]
	public float MinClipLength()
	{
		return default(float);
	}

	[Token(Token = "0x600006C")]
	[Address(RVA = "0xB8C9B4", Offset = "0xB8C9B4", VA = "0xB8C9B4")]
	public float MaxClipLength()
	{
		return default(float);
	}

	[Token(Token = "0x600006D")]
	[Address(RVA = "0xB8CAB8", Offset = "0xB8CAB8", VA = "0xB8CAB8")]
	public void ResetClipIndex()
	{
	}

	[Token(Token = "0x600006E")]
	[Address(RVA = "0xB8CACC", Offset = "0xB8CACC", VA = "0xB8CACC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600006F")]
	[Address(RVA = "0xB8CAE0", Offset = "0xB8CAE0", VA = "0xB8CAE0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000070")]
	[Address(RVA = "0xB8C754", Offset = "0xB8C754", VA = "0xB8C754")]
	private void _ShuffleClips()
	{
	}

	[Token(Token = "0x6000071")]
	[Address(RVA = "0xB8CAE4", Offset = "0xB8CAE4", VA = "0xB8CAE4")]
	public SECTR_AudioCue()
	{
	}
}
[Token(Token = "0x2000017")]
public interface SECTR_IAudioInstance
{
	[Token(Token = "0x17000027")]
	int Generation
	{
		[Token(Token = "0x6000078")]
		get;
	}

	[Token(Token = "0x17000028")]
	bool Active
	{
		[Token(Token = "0x6000079")]
		get;
	}

	[Token(Token = "0x17000029")]
	UnityEngine.Vector3 Position
	{
		[Token(Token = "0x600007A")]
		get;
		[Token(Token = "0x600007B")]
		set;
	}

	[Token(Token = "0x1700002A")]
	UnityEngine.Vector3 LocalPosition
	{
		[Token(Token = "0x600007C")]
		get;
		[Token(Token = "0x600007D")]
		set;
	}

	[Token(Token = "0x1700002B")]
	float Volume
	{
		[Token(Token = "0x600007E")]
		get;
		[Token(Token = "0x600007F")]
		set;
	}

	[Token(Token = "0x1700002C")]
	float Pitch
	{
		[Token(Token = "0x6000080")]
		get;
		[Token(Token = "0x6000081")]
		set;
	}

	[Token(Token = "0x1700002D")]
	bool Mute
	{
		[Token(Token = "0x6000082")]
		get;
		[Token(Token = "0x6000083")]
		set;
	}

	[Token(Token = "0x1700002E")]
	bool Pause
	{
		[Token(Token = "0x6000084")]
		get;
		[Token(Token = "0x6000085")]
		set;
	}

	[Token(Token = "0x1700002F")]
	int TimeSamples
	{
		[Token(Token = "0x6000086")]
		get;
		[Token(Token = "0x6000087")]
		set;
	}

	[Token(Token = "0x17000030")]
	float TimeSeconds
	{
		[Token(Token = "0x6000088")]
		get;
		[Token(Token = "0x6000089")]
		set;
	}

	[Token(Token = "0x600008A")]
	void Stop(bool stopImmediately);

	[Token(Token = "0x600008B")]
	void ForceInfinite();

	[Token(Token = "0x600008C")]
	void ForceOcclusion(bool occluded);

	[Token(Token = "0x600008D")]
	void SetParameter(string param, float value);

	[Token(Token = "0x600008E")]
	AudioSource GetInternalAudioSource();
}
[Token(Token = "0x2000018")]
public struct SECTR_AudioCueInstance : SECTR_IAudioInstance
{
	[Token(Token = "0x4000091")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private SECTR_IAudioInstance internalInstance;

	[Token(Token = "0x4000092")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private int generation;

	[Token(Token = "0x17000031")]
	public int Generation
	{
		[Token(Token = "0x6000090")]
		[Address(RVA = "0xB8CCE0", Offset = "0xB8CCE0", VA = "0xB8CCE0", Slot = "4")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000032")]
	public bool Active
	{
		[Token(Token = "0x6000091")]
		[Address(RVA = "0xB8CCE8", Offset = "0xB8CCE8", VA = "0xB8CCE8", Slot = "5")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000033")]
	public UnityEngine.Vector3 Position
	{
		[Token(Token = "0x6000092")]
		[Address(RVA = "0xB8CE14", Offset = "0xB8CE14", VA = "0xB8CE14", Slot = "6")]
		get
		{
			return default(UnityEngine.Vector3);
		}
		[Token(Token = "0x6000093")]
		[Address(RVA = "0xB8CF04", Offset = "0xB8CF04", VA = "0xB8CF04", Slot = "7")]
		set
		{
		}
	}

	[Token(Token = "0x17000034")]
	public UnityEngine.Vector3 LocalPosition
	{
		[Token(Token = "0x6000094")]
		[Address(RVA = "0xB8CFF0", Offset = "0xB8CFF0", VA = "0xB8CFF0", Slot = "8")]
		get
		{
			return default(UnityEngine.Vector3);
		}
		[Token(Token = "0x6000095")]
		[Address(RVA = "0xB8D0E0", Offset = "0xB8D0E0", VA = "0xB8D0E0", Slot = "9")]
		set
		{
		}
	}

	[Token(Token = "0x17000035")]
	public float Volume
	{
		[Token(Token = "0x6000096")]
		[Address(RVA = "0xB8D1CC", Offset = "0xB8D1CC", VA = "0xB8D1CC", Slot = "10")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000097")]
		[Address(RVA = "0xB8D28C", Offset = "0xB8D28C", VA = "0xB8D28C", Slot = "11")]
		set
		{
		}
	}

	[Token(Token = "0x17000036")]
	public float Pitch
	{
		[Token(Token = "0x6000098")]
		[Address(RVA = "0xB8D35C", Offset = "0xB8D35C", VA = "0xB8D35C", Slot = "12")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000099")]
		[Address(RVA = "0xB8D41C", Offset = "0xB8D41C", VA = "0xB8D41C", Slot = "13")]
		set
		{
		}
	}

	[Token(Token = "0x17000037")]
	public bool Mute
	{
		[Token(Token = "0x600009A")]
		[Address(RVA = "0xB8D4EC", Offset = "0xB8D4EC", VA = "0xB8D4EC", Slot = "14")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600009B")]
		[Address(RVA = "0xB8D5AC", Offset = "0xB8D5AC", VA = "0xB8D5AC", Slot = "15")]
		set
		{
		}
	}

	[Token(Token = "0x17000038")]
	public bool Pause
	{
		[Token(Token = "0x600009C")]
		[Address(RVA = "0xB8D670", Offset = "0xB8D670", VA = "0xB8D670", Slot = "16")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600009D")]
		[Address(RVA = "0xB8D730", Offset = "0xB8D730", VA = "0xB8D730", Slot = "17")]
		set
		{
		}
	}

	[Token(Token = "0x17000039")]
	public float TimeSeconds
	{
		[Token(Token = "0x600009E")]
		[Address(RVA = "0xB8D7F4", Offset = "0xB8D7F4", VA = "0xB8D7F4", Slot = "20")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600009F")]
		[Address(RVA = "0xB8D8B4", Offset = "0xB8D8B4", VA = "0xB8D8B4", Slot = "21")]
		set
		{
		}
	}

	[Token(Token = "0x1700003A")]
	public int TimeSamples
	{
		[Token(Token = "0x60000A0")]
		[Address(RVA = "0xB8D984", Offset = "0xB8D984", VA = "0xB8D984", Slot = "18")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60000A1")]
		[Address(RVA = "0xB8DA44", Offset = "0xB8DA44", VA = "0xB8DA44", Slot = "19")]
		set
		{
		}
	}

	[Token(Token = "0x600008F")]
	[Address(RVA = "0xB8CCD4", Offset = "0xB8CCD4", VA = "0xB8CCD4")]
	public SECTR_AudioCueInstance(SECTR_IAudioInstance internalInstance, int generation)
	{
	}

	[Token(Token = "0x60000A2")]
	[Address(RVA = "0xB8DB08", Offset = "0xB8DB08", VA = "0xB8DB08", Slot = "22")]
	public void Stop(bool stopImmediately)
	{
	}

	[Token(Token = "0x60000A3")]
	[Address(RVA = "0xB8DBCC", Offset = "0xB8DBCC", VA = "0xB8DBCC", Slot = "23")]
	public void ForceInfinite()
	{
	}

	[Token(Token = "0x60000A4")]
	[Address(RVA = "0xB8DC88", Offset = "0xB8DC88", VA = "0xB8DC88", Slot = "24")]
	public void ForceOcclusion(bool occluded)
	{
	}

	[Token(Token = "0x60000A5")]
	[Address(RVA = "0xB8DD4C", Offset = "0xB8DD4C", VA = "0xB8DD4C", Slot = "25")]
	public void SetParameter(string param, float value)
	{
	}

	[Token(Token = "0x60000A6")]
	[Address(RVA = "0xB8DE24", Offset = "0xB8DE24", VA = "0xB8DE24", Slot = "26")]
	public AudioSource GetInternalAudioSource()
	{
		return null;
	}

	[Token(Token = "0x60000A7")]
	[Address(RVA = "0xB8DEE4", Offset = "0xB8DEE4", VA = "0xB8DEE4")]
	public SECTR_IAudioInstance GetInternalInstance()
	{
		return null;
	}

	[Token(Token = "0x60000A8")]
	[Address(RVA = "0xB8DEEC", Offset = "0xB8DEEC", VA = "0xB8DEEC")]
	public static implicit operator bool(SECTR_AudioCueInstance x)
	{
		return default(bool);
	}
}
[Token(Token = "0x2000019")]
public abstract class SECTR_AudioEnvironment : MonoBehaviour
{
	[Token(Token = "0x4000093")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool ambienceActive;

	[Token(Token = "0x4000094")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SECTR_ToolTip("The configuraiton of the ambient audio in this Reverb Zone.")]
	public SECTR_AudioAmbience Ambience;

	[Token(Token = "0x1700003B")]
	public bool Active
	{
		[Token(Token = "0x60000A9")]
		[Address(RVA = "0xB8DF10", Offset = "0xB8DF10", VA = "0xB8DF10")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60000AA")]
	[Address(RVA = "0xB8DF18", Offset = "0xB8DF18", VA = "0xB8DF18")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60000AB")]
	[Address(RVA = "0xB8DF60", Offset = "0xB8DF60", VA = "0xB8DF60")]
	protected void Activate()
	{
	}

	[Token(Token = "0x60000AC")]
	[Address(RVA = "0xB8DF3C", Offset = "0xB8DF3C", VA = "0xB8DF3C")]
	protected void Deactivate()
	{
	}

	[Token(Token = "0x60000AD")]
	[Address(RVA = "0xB8E134", Offset = "0xB8E134", VA = "0xB8E134")]
	protected SECTR_AudioEnvironment()
	{
	}
}
[Token(Token = "0x200001A")]
[AddComponentMenu("SECTR/Audio/SECTR Audio Environment Trigger")]
public class SECTR_AudioEnvironmentTrigger : SECTR_AudioEnvironment
{
	[Token(Token = "0x4000095")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private GameObject activator;

	[Token(Token = "0x60000AE")]
	[Address(RVA = "0xB8E198", Offset = "0xB8E198", VA = "0xB8E198")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000AF")]
	[Address(RVA = "0xB8E20C", Offset = "0xB8E20C", VA = "0xB8E20C")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60000B0")]
	[Address(RVA = "0xB8E2A0", Offset = "0xB8E2A0", VA = "0xB8E2A0")]
	private void OnTriggerEnter2D(Collider2D other)
	{
	}

	[Token(Token = "0x60000B1")]
	[Address(RVA = "0xB8E334", Offset = "0xB8E334", VA = "0xB8E334")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x60000B2")]
	[Address(RVA = "0xB8E3DC", Offset = "0xB8E3DC", VA = "0xB8E3DC")]
	private void OnTriggerExit2D(Collider2D other)
	{
	}

	[Token(Token = "0x60000B3")]
	[Address(RVA = "0xB8E484", Offset = "0xB8E484", VA = "0xB8E484")]
	public SECTR_AudioEnvironmentTrigger()
	{
	}
}
[Token(Token = "0x200001B")]
[RequireComponent(typeof(AudioReverbZone))]
[AddComponentMenu("SECTR/Audio/SECTR Audio Environment Zone")]
public class SECTR_AudioEnvironmentZone : SECTR_AudioEnvironment
{
	[Token(Token = "0x4000096")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private AudioReverbZone cachedZone;

	[Token(Token = "0x60000B4")]
	[Address(RVA = "0xB8E488", Offset = "0xB8E488", VA = "0xB8E488")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000B5")]
	[Address(RVA = "0xB8E4D8", Offset = "0xB8E4D8", VA = "0xB8E4D8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60000B6")]
	[Address(RVA = "0xB8E500", Offset = "0xB8E500", VA = "0xB8E500")]
	private void Update()
	{
	}

	[Token(Token = "0x60000B7")]
	[Address(RVA = "0xB8E6E0", Offset = "0xB8E6E0", VA = "0xB8E6E0")]
	public SECTR_AudioEnvironmentZone()
	{
	}
}
[Token(Token = "0x200001C")]
public abstract class SECTR_AudioSource : MonoBehaviour
{
	[Token(Token = "0x4000097")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	[SerializeField]
	protected float volume;

	[Token(Token = "0x4000098")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[HideInInspector]
	[SerializeField]
	protected float pitch;

	[Token(Token = "0x4000099")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool playedFromStart;

	[Token(Token = "0x400009A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SECTR_ToolTip("The Cue to play from this source.", null, false)]
	public SECTR_AudioCue Cue;

	[Token(Token = "0x400009B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SECTR_ToolTip("If the Cue should be forced to loop when playing.")]
	public bool Loop;

	[Token(Token = "0x400009C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	[SECTR_ToolTip("Should the Cue auto-play when created.")]
	public bool PlayOnStart;

	[Token(Token = "0x1700003C")]
	public float Volume
	{
		[Token(Token = "0x60000B8")]
		[Address(RVA = "0xB8E6E4", Offset = "0xB8E6E4", VA = "0xB8E6E4")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60000B9")]
		[Address(RVA = "0xB8E6EC", Offset = "0xB8E6EC", VA = "0xB8E6EC")]
		set
		{
		}
	}

	[Token(Token = "0x1700003D")]
	public float Pitch
	{
		[Token(Token = "0x60000BA")]
		[Address(RVA = "0xB8E720", Offset = "0xB8E720", VA = "0xB8E720")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60000BB")]
		[Address(RVA = "0xB8E728", Offset = "0xB8E728", VA = "0xB8E728")]
		set
		{
		}
	}

	[Token(Token = "0x1700003E")]
	public abstract bool IsPlaying
	{
		[Token(Token = "0x60000BC")]
		get;
	}

	[Token(Token = "0x60000BD")]
	public abstract void Play();

	[Token(Token = "0x60000BE")]
	public abstract void Stop(bool stopImmediately);

	[Token(Token = "0x60000BF")]
	[Address(RVA = "0xB8E75C", Offset = "0xB8E75C", VA = "0xB8E75C")]
	public void PlayEvent()
	{
	}

	[Token(Token = "0x60000C0")]
	[Address(RVA = "0xB8E768", Offset = "0xB8E768", VA = "0xB8E768")]
	public void StopEvent(bool stopImmediately)
	{
	}

	[Token(Token = "0x60000C1")]
	[Address(RVA = "0xB8E778", Offset = "0xB8E778", VA = "0xB8E778")]
	private void Start()
	{
	}

	[Token(Token = "0x60000C2")]
	[Address(RVA = "0xB8E7A4", Offset = "0xB8E7A4", VA = "0xB8E7A4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000C3")]
	[Address(RVA = "0xB8E7C4", Offset = "0xB8E7C4", VA = "0xB8E7C4", Slot = "7")]
	protected virtual void OnDisable()
	{
	}

	[Token(Token = "0x60000C4")]
	protected abstract void OnVolumePitchChanged();

	[Token(Token = "0x60000C5")]
	[Address(RVA = "0xB8E7D4", Offset = "0xB8E7D4", VA = "0xB8E7D4")]
	protected SECTR_AudioSource()
	{
	}
}
[Token(Token = "0x200001D")]
[AddComponentMenu("SECTR/Audio/SECTR Audio System")]
[RequireComponent(typeof(SECTR_Member))]
[RequireComponent(typeof(AudioListener))]
[ExecuteInEditMode]
public class SECTR_AudioSystem : MonoBehaviour
{
	[Token(Token = "0x200001E")]
	private class Instance : SECTR_IAudioInstance
	{
		[Token(Token = "0x200001F")]
		[Flags]
		private enum Flags
		{
			[Token(Token = "0x40000DD")]
			Loops = 1,
			[Token(Token = "0x40000DE")]
			FadingIn = 2,
			[Token(Token = "0x40000DF")]
			FadingOut = 4,
			[Token(Token = "0x40000E0")]
			Muted = 8,
			[Token(Token = "0x40000E1")]
			Local = 0x10,
			[Token(Token = "0x40000E2")]
			ThreeD = 0x20,
			[Token(Token = "0x40000E3")]
			Paused = 0x40,
			[Token(Token = "0x40000E4")]
			HDR = 0x80,
			[Token(Token = "0x40000E5")]
			Occludable = 0x100,
			[Token(Token = "0x40000E6")]
			Occluded = 0x200,
			[Token(Token = "0x40000E7")]
			ForcedInfinite = 0x400,
			[Token(Token = "0x40000E8")]
			Delayed = 0x800
		}

		[Token(Token = "0x40000C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int generation;

		[Token(Token = "0x40000C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private AudioSource source;

		[Token(Token = "0x40000CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private AudioLowPassFilter lowpass;

		[Token(Token = "0x40000CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private SECTR_AudioCue audioCue;

		[Token(Token = "0x40000CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Transform parent;

		[Token(Token = "0x40000CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private UnityEngine.Vector3 localPosition;

		[Token(Token = "0x40000CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Flags flags;

		[Token(Token = "0x40000CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float nextTestTime;

		[Token(Token = "0x40000D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float fadeStarTime;

		[Token(Token = "0x40000D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float basePitch;

		[Token(Token = "0x40000D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float baseVolumeLoudness;

		[Token(Token = "0x40000D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float userVolume;

		[Token(Token = "0x40000D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float userPitch;

		[Token(Token = "0x40000D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float occlusionAlpha;

		[Token(Token = "0x40000D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private AnimationCurve hdrCurve;

		[Token(Token = "0x40000D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Dictionary<SECTR_CueParam, float> paramTable;

		[Token(Token = "0x40000D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private List<float> volumeParamValues;

		[Token(Token = "0x40000D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private List<float> pitchParamValues;

		[Token(Token = "0x40000DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Dictionary<SECTR_CueParam.AttributeData, float> attributeParamValues;

		[Token(Token = "0x40000DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Dictionary<SECTR_CueParam.AttributeData, float> attributeParamBaseValues;

		[Token(Token = "0x17000043")]
		public int Generation
		{
			[Token(Token = "0x60000E1")]
			[Address(RVA = "0xB93944", Offset = "0xB93944", VA = "0xB93944", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000044")]
		public bool Active
		{
			[Token(Token = "0x60000E2")]
			[Address(RVA = "0xB934B4", Offset = "0xB934B4", VA = "0xB934B4", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000045")]
		public UnityEngine.Vector3 Position
		{
			[Token(Token = "0x60000E3")]
			[Address(RVA = "0xB93748", Offset = "0xB93748", VA = "0xB93748", Slot = "6")]
			get
			{
				return default(UnityEngine.Vector3);
			}
			[Token(Token = "0x60000E4")]
			[Address(RVA = "0xB93994", Offset = "0xB93994", VA = "0xB93994", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x17000046")]
		public UnityEngine.Vector3 LocalPosition
		{
			[Token(Token = "0x60000E5")]
			[Address(RVA = "0xB93B0C", Offset = "0xB93B0C", VA = "0xB93B0C", Slot = "8")]
			get
			{
				return default(UnityEngine.Vector3);
			}
			[Token(Token = "0x60000E6")]
			[Address(RVA = "0xB93B18", Offset = "0xB93B18", VA = "0xB93B18", Slot = "9")]
			set
			{
			}
		}

		[Token(Token = "0x17000047")]
		public float Volume
		{
			[Token(Token = "0x60000E7")]
			[Address(RVA = "0xB93BE0", Offset = "0xB93BE0", VA = "0xB93BE0", Slot = "10")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60000E8")]
			[Address(RVA = "0xB93BE8", Offset = "0xB93BE8", VA = "0xB93BE8", Slot = "11")]
			set
			{
			}
		}

		[Token(Token = "0x17000048")]
		public float Pitch
		{
			[Token(Token = "0x60000E9")]
			[Address(RVA = "0xB93C20", Offset = "0xB93C20", VA = "0xB93C20", Slot = "12")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60000EA")]
			[Address(RVA = "0xB93C28", Offset = "0xB93C28", VA = "0xB93C28", Slot = "13")]
			set
			{
			}
		}

		[Token(Token = "0x17000049")]
		public bool Mute
		{
			[Token(Token = "0x60000EB")]
			[Address(RVA = "0xB93C60", Offset = "0xB93C60", VA = "0xB93C60", Slot = "14")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60000EC")]
			[Address(RVA = "0xB93C78", Offset = "0xB93C78", VA = "0xB93C78", Slot = "15")]
			set
			{
			}
		}

		[Token(Token = "0x1700004A")]
		public bool Pause
		{
			[Token(Token = "0x60000ED")]
			[Address(RVA = "0xB93D3C", Offset = "0xB93D3C", VA = "0xB93D3C", Slot = "16")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60000EE")]
			[Address(RVA = "0xB900B4", Offset = "0xB900B4", VA = "0xB900B4", Slot = "17")]
			set
			{
			}
		}

		[Token(Token = "0x1700004B")]
		public float TimeSeconds
		{
			[Token(Token = "0x60000EF")]
			[Address(RVA = "0xB93D64", Offset = "0xB93D64", VA = "0xB93D64", Slot = "20")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60000F0")]
			[Address(RVA = "0xB93DEC", Offset = "0xB93DEC", VA = "0xB93DEC", Slot = "21")]
			set
			{
			}
		}

		[Token(Token = "0x1700004C")]
		public int TimeSamples
		{
			[Token(Token = "0x60000F1")]
			[Address(RVA = "0xB93E80", Offset = "0xB93E80", VA = "0xB93E80", Slot = "18")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60000F2")]
			[Address(RVA = "0xB93F08", Offset = "0xB93F08", VA = "0xB93F08", Slot = "19")]
			set
			{
			}
		}

		[Token(Token = "0x1700004D")]
		public bool Loops
		{
			[Token(Token = "0x60000F7")]
			[Address(RVA = "0xB9394C", Offset = "0xB9394C", VA = "0xB9394C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700004E")]
		public bool Local
		{
			[Token(Token = "0x60000F8")]
			[Address(RVA = "0xB93988", Offset = "0xB93988", VA = "0xB93988")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700004F")]
		public bool ThreeD
		{
			[Token(Token = "0x60000F9")]
			[Address(RVA = "0xB9397C", Offset = "0xB9397C", VA = "0xB9397C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000050")]
		public bool FadingIn
		{
			[Token(Token = "0x60000FA")]
			[Address(RVA = "0xB943D4", Offset = "0xB943D4", VA = "0xB943D4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000051")]
		public bool FadingOut
		{
			[Token(Token = "0x60000FB")]
			[Address(RVA = "0xB93568", Offset = "0xB93568", VA = "0xB93568")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000052")]
		public bool Muted
		{
			[Token(Token = "0x60000FC")]
			[Address(RVA = "0xB93C6C", Offset = "0xB93C6C", VA = "0xB93C6C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000053")]
		public bool Paused
		{
			[Token(Token = "0x60000FD")]
			[Address(RVA = "0xB93964", Offset = "0xB93964", VA = "0xB93964")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000054")]
		public bool HDR
		{
			[Token(Token = "0x60000FE")]
			[Address(RVA = "0xB943E0", Offset = "0xB943E0", VA = "0xB943E0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000055")]
		public bool Occludable
		{
			[Token(Token = "0x60000FF")]
			[Address(RVA = "0xB943EC", Offset = "0xB943EC", VA = "0xB943EC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000056")]
		public bool Occluded
		{
			[Token(Token = "0x6000100")]
			[Address(RVA = "0xB943F8", Offset = "0xB943F8", VA = "0xB943F8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000057")]
		public bool ForcedInfinite
		{
			[Token(Token = "0x6000101")]
			[Address(RVA = "0xB94404", Offset = "0xB94404", VA = "0xB94404")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000058")]
		public bool Delayed
		{
			[Token(Token = "0x6000102")]
			[Address(RVA = "0xB93958", Offset = "0xB93958", VA = "0xB93958")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000059")]
		public SECTR_AudioBus Bus
		{
			[Token(Token = "0x6000103")]
			[Address(RVA = "0xB90034", Offset = "0xB90034", VA = "0xB90034")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700005A")]
		public SECTR_AudioCue Cue
		{
			[Token(Token = "0x6000104")]
			[Address(RVA = "0xB94410", Offset = "0xB94410", VA = "0xB94410")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60000F3")]
		[Address(RVA = "0xB93F9C", Offset = "0xB93F9C", VA = "0xB93F9C", Slot = "23")]
		public void ForceInfinite()
		{
		}

		[Token(Token = "0x60000F4")]
		[Address(RVA = "0xB94094", Offset = "0xB94094", VA = "0xB94094", Slot = "24")]
		public void ForceOcclusion(bool occluded)
		{
		}

		[Token(Token = "0x60000F5")]
		[Address(RVA = "0xB9413C", Offset = "0xB9413C", VA = "0xB9413C", Slot = "25")]
		public void SetParameter(string param, float value)
		{
		}

		[Token(Token = "0x60000F6")]
		[Address(RVA = "0xB943CC", Offset = "0xB943CC", VA = "0xB943CC", Slot = "26")]
		public AudioSource GetInternalAudioSource()
		{
			return null;
		}

		[Token(Token = "0x6000105")]
		[Address(RVA = "0xB8EF6C", Offset = "0xB8EF6C", VA = "0xB8EF6C")]
		public void Init(SECTR_AudioCue audioCue, Transform parent, UnityEngine.Vector3 localPosition, bool loops)
		{
		}

		[Token(Token = "0x6000106")]
		[Address(RVA = "0xB8F64C", Offset = "0xB8F64C", VA = "0xB8F64C")]
		public void Clone(Instance instance, UnityEngine.Vector3 newPosition)
		{
		}

		[Token(Token = "0x6000107")]
		[Address(RVA = "0xB93574", Offset = "0xB93574", VA = "0xB93574")]
		public void Uninit()
		{
		}

		[Token(Token = "0x6000108")]
		[Address(RVA = "0xB8F164", Offset = "0xB8F164", VA = "0xB8F164")]
		public void Play()
		{
		}

		[Token(Token = "0x6000109")]
		[Address(RVA = "0xB91CC4", Offset = "0xB91CC4", VA = "0xB91CC4", Slot = "22")]
		public void Stop(bool stopImmediately)
		{
		}

		[Token(Token = "0x600010A")]
		[Address(RVA = "0xB924EC", Offset = "0xB924EC", VA = "0xB924EC")]
		public void Update(float deltaTime, bool volumeOnly)
		{
		}

		[Token(Token = "0x600010B")]
		[Address(RVA = "0xB93D20", Offset = "0xB93D20", VA = "0xB93D20")]
		private void _SetFlag(Flags flag, bool on)
		{
		}

		[Token(Token = "0x600010C")]
		[Address(RVA = "0xB93D54", Offset = "0xB93D54", VA = "0xB93D54")]
		private bool _GetFlag(Flags flag)
		{
			return default(bool);
		}

		[Token(Token = "0x600010D")]
		[Address(RVA = "0xB94614", Offset = "0xB94614", VA = "0xB94614")]
		private bool _AcquireSource()
		{
			return default(bool);
		}

		[Token(Token = "0x600010E")]
		[Address(RVA = "0xB95158", Offset = "0xB95158", VA = "0xB95158")]
		private void _ReleaseSource()
		{
		}

		[Token(Token = "0x600010F")]
		[Address(RVA = "0xB94418", Offset = "0xB94418", VA = "0xB94418")]
		private void _AddProximityInstance(SECTR_AudioCue srcCue)
		{
		}

		[Token(Token = "0x6000110")]
		[Address(RVA = "0xB945A0", Offset = "0xB945A0", VA = "0xB945A0")]
		private void _ScheduleNextTest()
		{
		}

		[Token(Token = "0x6000111")]
		[Address(RVA = "0xB953D8", Offset = "0xB953D8", VA = "0xB953D8")]
		private void _Stop(bool stopImmediately)
		{
		}

		[Token(Token = "0x6000112")]
		[Address(RVA = "0xB917D8", Offset = "0xB917D8", VA = "0xB917D8")]
		public Instance()
		{
		}
	}

	[Token(Token = "0x2000020")]
	[Flags]
	public enum OcclusionModes
	{
		[Token(Token = "0x40000EA")]
		Graph = 1,
		[Token(Token = "0x40000EB")]
		Raycast = 2,
		[Token(Token = "0x40000EC")]
		Distance = 4
	}

	[Token(Token = "0x400009D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static SECTR_AudioSystem system;

	[Token(Token = "0x400009E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static Stack<Instance> instancePool;

	[Token(Token = "0x400009F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static Stack<AudioSource> simpleSourcePool;

	[Token(Token = "0x40000A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static Stack<AudioSource> lowpassSourcePool;

	[Token(Token = "0x40000A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static Dictionary<GameObject, Stack<AudioSource>> prefabSourcePool;

	[Token(Token = "0x40000A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private static Transform sourcePoolParent;

	[Token(Token = "0x40000A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private static List<Instance> activeInstances;

	[Token(Token = "0x40000A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private static Dictionary<SECTR_AudioCue, int> maxInstancesTable;

	[Token(Token = "0x40000A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private static Dictionary<SECTR_AudioCue, List<Instance>> proximityTable;

	[Token(Token = "0x40000A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private static float currentTime;

	[Token(Token = "0x40000A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private static List<SECTR_AudioAmbience> ambienceStack;

	[Token(Token = "0x40000A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private static SECTR_AudioAmbience currentAmbience;

	[Token(Token = "0x40000A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private static SECTR_AudioCueInstance ambienceLoop;

	[Token(Token = "0x40000AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private static SECTR_AudioCueInstance ambienceOneShot;

	[Token(Token = "0x40000AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private static float nextAmbienceOneShotTime;

	[Token(Token = "0x40000AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private static SECTR_AudioCue currentMusic;

	[Token(Token = "0x40000AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private static SECTR_AudioCueInstance musicLoop;

	[Token(Token = "0x40000AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private static float windowHDRMax;

	[Token(Token = "0x40000AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private static float windowHDRMin;

	[Token(Token = "0x40000B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private static float currentLoudness;

	[Token(Token = "0x40000B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private static List<SECTR_Graph.Node> occlusionPath;

	[Token(Token = "0x40000B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private static SECTR_Member cachedMember;

	[Token(Token = "0x40000B3")]
	private const float EPSILON = 0.001f;

	[Token(Token = "0x40000B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SECTR_ToolTip("The maximum number of instances that can be active at once. Inaudible sounds do not count against this limit.")]
	public int MaxInstances;

	[Token(Token = "0x40000B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SECTR_ToolTip("The number of instances to allocate with lowpass effects (for occlusion and the like).")]
	public int LowpassInstances;

	[Token(Token = "0x40000B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SECTR_ToolTip("The Bus at the top of the mixing heirarchy. Required to play sounds.", null, false)]
	public SECTR_AudioBus MasterBus;

	[Token(Token = "0x40000B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SECTR_ToolTip("The baseline settings for any environmental audio. Will be audible when no other ambiences are active.")]
	public SECTR_AudioAmbience DefaultAmbience;

	[Token(Token = "0x40000B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SECTR_ToolTip("Minimum Loudness for the HDR mixer. Current Loudness will never drop below this.", 0f, 200f)]
	public float HDRBaseLoudness;

	[Token(Token = "0x40000B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SECTR_ToolTip("The maximum difference between the loudest sound and the softest sound before sounds are simply culled out.", 0f, 200f)]
	public float HDRWindowSize;

	[Token(Token = "0x40000BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SECTR_ToolTip("Speed at which HDR window decays after a loud sound is played.", 0f, 100f)]
	public float HDRDecay;

	[Token(Token = "0x40000BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SECTR_ToolTip("Should sounds close to the listener be blended into 2D (to avoid harsh stereo switching).")]
	public bool BlendNearbySounds;

	[Token(Token = "0x40000BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SECTR_ToolTip("Objects close to the listener will be blended into 2D, as a kind of fake HRTF. This determines the start and end of that blend.", "BlendNearbySounds")]
	public UnityEngine.Vector2 NearBlendRange;

	[Token(Token = "0x40000BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SECTR_ToolTip("Determines what kind of logic to use for computing sound occlusion.", null, typeof(OcclusionModes))]
	public OcclusionModes OcclusionFlags;

	[Token(Token = "0x40000BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[SECTR_ToolTip("The distance beyond which sounds will be considered occluded, if Distance occlusion is enabled.", "OcclusionFlags")]
	public float OcclusionDistance;

	[Token(Token = "0x40000BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SECTR_ToolTip("The layers to test against when raycasting for occlusion.", "OcclusionFlags")]
	public LayerMask RaycastLayers;

	[Token(Token = "0x40000C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[SECTR_ToolTip("The amount by which to decrease the volume of occluded sounds.", "OcclusionFlags", 0f, 1f)]
	public float OcclusionVolume;

	[Token(Token = "0x40000C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SECTR_ToolTip("The frequency cutoff of the lowpass filter for occluded sounds.", "OcclusionFlags", 10f, 22000f)]
	public float OcclusionCutoff;

	[Token(Token = "0x40000C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[SECTR_ToolTip("The resonance Q of the lowpass filter for occluded sounds.", "OcclusionFlags", 1f, 10f)]
	public float OcclusionResonanceQ;

	[Token(Token = "0x40000C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SECTR_ToolTip("The amount of time between tests to see if looping sounds should start or stop running.")]
	public UnityEngine.Vector2 RetestInterval;

	[Token(Token = "0x40000C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SECTR_ToolTip("The amount of buffer to give before culling distant sounds.")]
	public float CullingBuffer;

	[Token(Token = "0x40000C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[SECTR_ToolTip("Enable or disable of the in-game audio HUD.", true)]
	public bool ShowAudioHUD;

	[Token(Token = "0x40000C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SECTR_ToolTip("Material to use to render HUD lines.", true)]
	public Material HUDLineMaterial;

	[Token(Token = "0x40000C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SECTR_ToolTip("In the editor only, puts the listener at the AudioSystem, not at the Scene Camera.", true)]
	public bool Debugging;

	[Token(Token = "0x1700003F")]
	public static bool Initialized
	{
		[Token(Token = "0x60000C6")]
		[Address(RVA = "0xB8E614", Offset = "0xB8E614", VA = "0xB8E614")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000040")]
	public static SECTR_Member Member
	{
		[Token(Token = "0x60000C7")]
		[Address(RVA = "0xB8E7EC", Offset = "0xB8E7EC", VA = "0xB8E7EC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000041")]
	public static SECTR_AudioSystem System
	{
		[Token(Token = "0x60000C8")]
		[Address(RVA = "0xB8E834", Offset = "0xB8E834", VA = "0xB8E834")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000042")]
	public static Transform Listener
	{
		[Token(Token = "0x60000C9")]
		[Address(RVA = "0xB8E68C", Offset = "0xB8E68C", VA = "0xB8E68C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60000CA")]
	[Address(RVA = "0xB8E87C", Offset = "0xB8E87C", VA = "0xB8E87C")]
	public static SECTR_AudioCueInstance Play(SECTR_AudioCue audioCue, UnityEngine.Vector3 position, bool loop)
	{
		return default(SECTR_AudioCueInstance);
	}

	[Token(Token = "0x60000CB")]
	[Address(RVA = "0xB8E888", Offset = "0xB8E888", VA = "0xB8E888")]
	public static SECTR_AudioCueInstance Play(SECTR_AudioCue audioCue, Transform parent, UnityEngine.Vector3 localPosition, bool loop)
	{
		return default(SECTR_AudioCueInstance);
	}

	[Token(Token = "0x60000CC")]
	[Address(RVA = "0xB8F48C", Offset = "0xB8F48C", VA = "0xB8F48C")]
	public static SECTR_AudioCueInstance Clone(SECTR_AudioCueInstance instance, UnityEngine.Vector3 newPosition)
	{
		return default(SECTR_AudioCueInstance);
	}

	[Token(Token = "0x60000CD")]
	[Address(RVA = "0xB8F7EC", Offset = "0xB8F7EC", VA = "0xB8F7EC")]
	public static void PlayMusic(SECTR_AudioCue musicCue)
	{
	}

	[Token(Token = "0x60000CE")]
	[Address(RVA = "0xB8F9C0", Offset = "0xB8F9C0", VA = "0xB8F9C0")]
	public static void StopMusic(bool stopImmediate)
	{
	}

	[Token(Token = "0x60000CF")]
	[Address(RVA = "0xB8DF94", Offset = "0xB8DF94", VA = "0xB8DF94")]
	public static void PushAmbience(SECTR_AudioAmbience ambience)
	{
	}

	[Token(Token = "0x60000D0")]
	[Address(RVA = "0xB8E0AC", Offset = "0xB8E0AC", VA = "0xB8E0AC")]
	public static void RemoveAmbience(SECTR_AudioAmbience ambience)
	{
	}

	[Token(Token = "0x60000D1")]
	[Address(RVA = "0xB8FA28", Offset = "0xB8FA28", VA = "0xB8FA28")]
	public static void SetBusVolume(string busName, float volume)
	{
	}

	[Token(Token = "0x60000D2")]
	[Address(RVA = "0xB8FC44", Offset = "0xB8FC44", VA = "0xB8FC44")]
	public static void SetBusVolume(SECTR_AudioBus bus, float volume)
	{
	}

	[Token(Token = "0x60000D3")]
	[Address(RVA = "0xB8FD14", Offset = "0xB8FD14", VA = "0xB8FD14")]
	public static void MuteBus(string busName, bool mute)
	{
	}

	[Token(Token = "0x60000D4")]
	[Address(RVA = "0xB8FDEC", Offset = "0xB8FDEC", VA = "0xB8FDEC")]
	public static void MuteBus(SECTR_AudioBus bus, bool mute)
	{
	}

	[Token(Token = "0x60000D5")]
	[Address(RVA = "0xB8FEB4", Offset = "0xB8FEB4", VA = "0xB8FEB4")]
	public static void PauseBus(SECTR_AudioBus bus, bool paused)
	{
	}

	[Token(Token = "0x60000D6")]
	[Address(RVA = "0xB90168", Offset = "0xB90168", VA = "0xB90168")]
	public static bool IsOccluded(UnityEngine.Vector3 worldSpacePosition, OcclusionModes occlusionFlags)
	{
		return default(bool);
	}

	[Token(Token = "0x60000D7")]
	[Address(RVA = "0xB90F0C", Offset = "0xB90F0C", VA = "0xB90F0C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000D8")]
	[Address(RVA = "0xB91B00", Offset = "0xB91B00", VA = "0xB91B00")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60000D9")]
	[Address(RVA = "0xB91CDC", Offset = "0xB91CDC", VA = "0xB91CDC")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60000DA")]
	[Address(RVA = "0xB8EC18", Offset = "0xB8EC18", VA = "0xB8EC18")]
	private static bool _CheckInstances(SECTR_AudioCue audioCue, bool isPlaying)
	{
		return default(bool);
	}

	[Token(Token = "0x60000DB")]
	[Address(RVA = "0xB8ECE0", Offset = "0xB8ECE0", VA = "0xB8ECE0")]
	private static bool _CheckProximity(SECTR_AudioCue audioCue, Transform parent, UnityEngine.Vector3 position, Instance testInstance)
	{
		return default(bool);
	}

	[Token(Token = "0x60000DC")]
	[Address(RVA = "0xB9196C", Offset = "0xB9196C", VA = "0xB9196C")]
	private static float _UpdateTime()
	{
		return default(float);
	}

	[Token(Token = "0x60000DD")]
	[Address(RVA = "0xB919C8", Offset = "0xB919C8", VA = "0xB919C8")]
	private static void _UpdateBusPitchVolume(SECTR_AudioBus bus, float effectiveVolume, float effectivePitch)
	{
	}

	[Token(Token = "0x60000DE")]
	[Address(RVA = "0xB91F24", Offset = "0xB91F24", VA = "0xB91F24")]
	private static void _UpdateAmbience()
	{
	}

	[Token(Token = "0x60000DF")]
	[Address(RVA = "0xB8FB10", Offset = "0xB8FB10", VA = "0xB8FB10")]
	private static SECTR_AudioBus _FindBus(SECTR_AudioBus bus, string busName)
	{
		return null;
	}

	[Token(Token = "0x60000E0")]
	[Address(RVA = "0xB93870", Offset = "0xB93870", VA = "0xB93870")]
	public SECTR_AudioSystem()
	{
	}
}
[Token(Token = "0x2000021")]
[AddComponentMenu("SECTR/Audio/SECTR Character Audio")]
public class SECTR_CharacterAudio : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000022")]
	public class SurfaceSound
	{
		[Token(Token = "0x40000F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SECTR_ToolTip("The material that this set applies to.")]
		public PhysicMaterial SurfaceMaterial;

		[Token(Token = "0x40000F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SECTR_ToolTip("Default footstep sound. Used if no material specific sound exists.")]
		public SECTR_AudioCue FootstepCue;

		[Token(Token = "0x40000F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SECTR_ToolTip("Default footstep sound. Used if no material specific sound exists.")]
		public SECTR_AudioCue JumpCue;

		[Token(Token = "0x40000F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SECTR_ToolTip("Default landing sound. Used if no material specific sound exists.")]
		public SECTR_AudioCue LandCue;

		[Token(Token = "0x600011A")]
		[Address(RVA = "0xB959CC", Offset = "0xB959CC", VA = "0xB959CC")]
		public SurfaceSound()
		{
		}
	}

	[Token(Token = "0x40000ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Dictionary<PhysicMaterial, SurfaceSound> surfaceTable;

	[Token(Token = "0x40000EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SECTR_ToolTip("Default sounds to play if there is no material specific sound.")]
	public SurfaceSound DefaultSounds;

	[Token(Token = "0x40000EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SECTR_ToolTip("List of surface specific sounds.")]
	public List<SurfaceSound> SurfaceSounds;

	[Token(Token = "0x6000113")]
	[Address(RVA = "0xB95624", Offset = "0xB95624", VA = "0xB95624")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000114")]
	[Address(RVA = "0xB95784", Offset = "0xB95784", VA = "0xB95784")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000115")]
	[Address(RVA = "0xB9578C", Offset = "0xB9578C", VA = "0xB9578C")]
	private void OnFootstep(PhysicMaterial currentMaterial)
	{
	}

	[Token(Token = "0x6000116")]
	[Address(RVA = "0xB95888", Offset = "0xB95888", VA = "0xB95888")]
	private void OnJump(PhysicMaterial currentMaterial)
	{
	}

	[Token(Token = "0x6000117")]
	[Address(RVA = "0xB958D4", Offset = "0xB958D4", VA = "0xB958D4")]
	private void OnLand(PhysicMaterial currentMaterial)
	{
	}

	[Token(Token = "0x6000118")]
	[Address(RVA = "0xB957D8", Offset = "0xB957D8", VA = "0xB957D8")]
	private SurfaceSound _GetCurrentSurface(PhysicMaterial currentMaterial)
	{
		return null;
	}

	[Token(Token = "0x6000119")]
	[Address(RVA = "0xB95920", Offset = "0xB95920", VA = "0xB95920")]
	public SECTR_CharacterAudio()
	{
	}
}
[Token(Token = "0x2000023")]
[RequireComponent(typeof(AudioSource))]
[ExecuteInEditMode]
[AddComponentMenu("")]
public class SECTR_ComputeRMS : MonoBehaviour
{
	[Token(Token = "0x2000024")]
	private struct BakeInfo
	{
		[Token(Token = "0x40000FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SECTR_AudioCue cue;

		[Token(Token = "0x40000FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public SECTR_AudioCue.ClipData clipData;

		[Token(Token = "0x6000122")]
		[Address(RVA = "0xB965C0", Offset = "0xB965C0", VA = "0xB965C0")]
		public BakeInfo(SECTR_AudioCue cue, SECTR_AudioCue.ClipData clipData)
		{
		}
	}

	[Token(Token = "0x40000F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private List<BakeInfo> hdrBakeList;

	[Token(Token = "0x40000F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<SECTR_ComputeRMS> activeBakeList;

	[Token(Token = "0x40000F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int hdrBakeIndex;

	[Token(Token = "0x40000F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private SECTR_AudioCue cue;

	[Token(Token = "0x40000F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private SECTR_AudioCue.ClipData clipData;

	[Token(Token = "0x40000F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private List<float> samples;

	[Token(Token = "0x40000FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int numChannels;

	[Token(Token = "0x1700005B")]
	public float Progress
	{
		[Token(Token = "0x600011B")]
		[Address(RVA = "0xB959D4", Offset = "0xB959D4", VA = "0xB959D4")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x600011C")]
	[Address(RVA = "0xB95BAC", Offset = "0xB95BAC", VA = "0xB95BAC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600011D")]
	[Address(RVA = "0xB95BB0", Offset = "0xB95BB0", VA = "0xB95BB0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600011E")]
	[Address(RVA = "0xB95BB4", Offset = "0xB95BB4", VA = "0xB95BB4")]
	private void Update()
	{
	}

	[Token(Token = "0x600011F")]
	[Address(RVA = "0xB96498", Offset = "0xB96498", VA = "0xB96498")]
	private void OnAudioFilterRead(float[] samples, int numChannels)
	{
	}

	[Token(Token = "0x6000120")]
	[Address(RVA = "0xB96324", Offset = "0xB96324", VA = "0xB96324")]
	public void _StartCompute(SECTR_AudioCue cue, SECTR_AudioCue.ClipData clipData)
	{
	}

	[Token(Token = "0x6000121")]
	[Address(RVA = "0xB96500", Offset = "0xB96500", VA = "0xB96500")]
	public SECTR_ComputeRMS()
	{
	}
}
[Serializable]
[Token(Token = "0x2000025")]
public class SECTR_CueParam
{
	[Token(Token = "0x2000026")]
	public enum TargetType
	{
		[Token(Token = "0x4000104")]
		Volume,
		[Token(Token = "0x4000105")]
		Pitch,
		[Token(Token = "0x4000106")]
		Attribute
	}

	[Serializable]
	[Token(Token = "0x2000027")]
	public class AttributeData
	{
		[Token(Token = "0x4000107")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Type componentType;

		[Token(Token = "0x4000108")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private string componentTypeString;

		[Token(Token = "0x4000109")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string attributeName;

		[Token(Token = "0x400010A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool fieldAttribute;

		[Token(Token = "0x1700005C")]
		public Type ComponentType
		{
			[Token(Token = "0x6000125")]
			[Address(RVA = "0xB9555C", Offset = "0xB9555C", VA = "0xB9555C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000124")]
			[Address(RVA = "0xB9672C", Offset = "0xB9672C", VA = "0xB9672C")]
			set
			{
			}
		}

		[Token(Token = "0x6000126")]
		[Address(RVA = "0xB967BC", Offset = "0xB967BC", VA = "0xB967BC")]
		public AttributeData()
		{
		}
	}

	[Token(Token = "0x40000FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string name;

	[Token(Token = "0x40000FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TargetType affects;

	[Token(Token = "0x40000FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float defaultValue;

	[Token(Token = "0x4000100")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AnimationCurve curve;

	[Token(Token = "0x4000101")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AttributeData attributeData;

	[Token(Token = "0x4000102")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool toggle;

	[Token(Token = "0x6000123")]
	[Address(RVA = "0xB965C8", Offset = "0xB965C8", VA = "0xB965C8")]
	public SECTR_CueParam()
	{
	}
}
[Token(Token = "0x2000028")]
[AddComponentMenu("SECTR/Audio/SECTR Door Audio")]
public class SECTR_DoorAudio : MonoBehaviour
{
	[Token(Token = "0x400010B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private SECTR_AudioCueInstance instance;

	[Token(Token = "0x400010C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SECTR_ToolTip("Sound to play while door is in Open state.", null, false)]
	public SECTR_AudioCue OpenLoopCue;

	[Token(Token = "0x400010D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SECTR_ToolTip("Sound to play while door is in Closed state.", null, false)]
	public SECTR_AudioCue ClosedLoopCue;

	[Token(Token = "0x400010E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SECTR_ToolTip("Sound to play when door starts to open.", null, false)]
	public SECTR_AudioCue OpeningCue;

	[Token(Token = "0x400010F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SECTR_ToolTip("Sound to play while door starts to close.", null, false)]
	public SECTR_AudioCue ClosingCue;

	[Token(Token = "0x4000110")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SECTR_ToolTip("Sound to play while waiting for the door to start opening.", null, false)]
	public SECTR_AudioCue WaitingCue;

	[Token(Token = "0x6000127")]
	[Address(RVA = "0xB967C4", Offset = "0xB967C4", VA = "0xB967C4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000128")]
	[Address(RVA = "0xB967DC", Offset = "0xB967DC", VA = "0xB967DC")]
	private void OnOpen()
	{
	}

	[Token(Token = "0x6000129")]
	[Address(RVA = "0xB96868", Offset = "0xB96868", VA = "0xB96868")]
	private void OnOpening()
	{
	}

	[Token(Token = "0x600012A")]
	[Address(RVA = "0xB968F4", Offset = "0xB968F4", VA = "0xB968F4")]
	private void OnClose()
	{
	}

	[Token(Token = "0x600012B")]
	[Address(RVA = "0xB96980", Offset = "0xB96980", VA = "0xB96980")]
	private void OnClosing()
	{
	}

	[Token(Token = "0x600012C")]
	[Address(RVA = "0xB96A0C", Offset = "0xB96A0C", VA = "0xB96A0C")]
	private void OnWaiting()
	{
	}

	[Token(Token = "0x600012D")]
	[Address(RVA = "0xB967D0", Offset = "0xB967D0", VA = "0xB967D0")]
	private void _Stop(bool stopImmediately)
	{
	}

	[Token(Token = "0x600012E")]
	[Address(RVA = "0xB96A98", Offset = "0xB96A98", VA = "0xB96A98")]
	public SECTR_DoorAudio()
	{
	}
}
[Token(Token = "0x2000029")]
[ExecuteInEditMode]
[AddComponentMenu("SECTR/Audio/SECTR Impact Audio")]
public class SECTR_ImpactAudio : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x200002A")]
	public class ImpactSound
	{
		[Token(Token = "0x4000117")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PhysicMaterial SurfaceMaterial;

		[Token(Token = "0x4000118")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SECTR_AudioCue ImpactCue;

		[Token(Token = "0x6000133")]
		[Address(RVA = "0xB96EC0", Offset = "0xB96EC0", VA = "0xB96EC0")]
		public ImpactSound()
		{
		}
	}

	[Token(Token = "0x4000111")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float nextImpactTime;

	[Token(Token = "0x4000112")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Dictionary<PhysicMaterial, ImpactSound> surfaceTable;

	[Token(Token = "0x4000113")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SECTR_ToolTip("Default sound to play on impact.")]
	public ImpactSound DefaultSound;

	[Token(Token = "0x4000114")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SECTR_ToolTip("Surface specific impact sounds.")]
	public List<ImpactSound> SurfaceImpacts;

	[Token(Token = "0x4000115")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SECTR_ToolTip("The minimum relative speed at the time of impact required to trigger this cue.")]
	public float MinImpactSpeed;

	[Token(Token = "0x4000116")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SECTR_ToolTip("The minimum amount of time between playback of this sound.")]
	public float MinImpactInterval;

	[Token(Token = "0x600012F")]
	[Address(RVA = "0xB96AA0", Offset = "0xB96AA0", VA = "0xB96AA0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000130")]
	[Address(RVA = "0xB96C00", Offset = "0xB96C00", VA = "0xB96C00")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000131")]
	[Address(RVA = "0xB96C08", Offset = "0xB96C08", VA = "0xB96C08")]
	private void OnCollisionStay(Collision collision)
	{
	}

	[Token(Token = "0x6000132")]
	[Address(RVA = "0xB96E38", Offset = "0xB96E38", VA = "0xB96E38")]
	public SECTR_ImpactAudio()
	{
	}
}
[Token(Token = "0x200002B")]
[AddComponentMenu("SECTR/Audio/SECTR Music Trigger")]
[ExecuteInEditMode]
public class SECTR_MusicTrigger : MonoBehaviour
{
	[Token(Token = "0x4000119")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private GameObject activator;

	[Token(Token = "0x400011A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SECTR_ToolTip("The Cue to play as music. If null, this trigger will stop the current music.", null, false)]
	public SECTR_AudioCue Cue;

	[Token(Token = "0x400011B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SECTR_ToolTip("Should music be forced to loop when playing.")]
	public bool Loop;

	[Token(Token = "0x400011C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	[SECTR_ToolTip("Should the music stop when leaving the trigger.")]
	public bool StopOnExit;

	[Token(Token = "0x6000134")]
	[Address(RVA = "0xB96EC8", Offset = "0xB96EC8", VA = "0xB96EC8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000135")]
	[Address(RVA = "0xB96FB4", Offset = "0xB96FB4", VA = "0xB96FB4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000136")]
	[Address(RVA = "0xB96FD0", Offset = "0xB96FD0", VA = "0xB96FD0")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000137")]
	[Address(RVA = "0xB9709C", Offset = "0xB9709C", VA = "0xB9709C")]
	private void OnTriggerEnter2D(Collider2D other)
	{
	}

	[Token(Token = "0x6000138")]
	[Address(RVA = "0xB97168", Offset = "0xB97168", VA = "0xB97168")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6000139")]
	[Address(RVA = "0xB971E8", Offset = "0xB971E8", VA = "0xB971E8")]
	private void OnTriggerExit2D(Collider2D other)
	{
	}

	[Token(Token = "0x600013A")]
	[Address(RVA = "0xB96F3C", Offset = "0xB96F3C", VA = "0xB96F3C")]
	private void _Play()
	{
	}

	[Token(Token = "0x600013B")]
	[Address(RVA = "0xB96FC8", Offset = "0xB96FC8", VA = "0xB96FC8")]
	private void _Stop(bool stopImmediately)
	{
	}

	[Token(Token = "0x600013C")]
	[Address(RVA = "0xB97284", Offset = "0xB97284", VA = "0xB97284")]
	public SECTR_MusicTrigger()
	{
	}
}
[Token(Token = "0x200002C")]
[AddComponentMenu("SECTR/Audio/SECTR Point Source")]
[ExecuteInEditMode]
public class SECTR_PointSource : SECTR_AudioSource
{
	[Token(Token = "0x400011D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected SECTR_AudioCueInstance instance;

	[Token(Token = "0x1700005D")]
	public override bool IsPlaying
	{
		[Token(Token = "0x600013D")]
		[Address(RVA = "0xB97294", Offset = "0xB97294", VA = "0xB97294", Slot = "4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600013E")]
	[Address(RVA = "0xB972BC", Offset = "0xB972BC", VA = "0xB972BC", Slot = "5")]
	public override void Play()
	{
	}

	[Token(Token = "0x600013F")]
	[Address(RVA = "0xB97424", Offset = "0xB97424", VA = "0xB97424", Slot = "6")]
	public override void Stop(bool stopImmediately)
	{
	}

	[Token(Token = "0x6000140")]
	[Address(RVA = "0xB97430", Offset = "0xB97430", VA = "0xB97430", Slot = "8")]
	protected override void OnVolumePitchChanged()
	{
	}

	[Token(Token = "0x6000141")]
	[Address(RVA = "0xB97490", Offset = "0xB97490", VA = "0xB97490")]
	public SECTR_PointSource()
	{
	}
}
[Token(Token = "0x200002D")]
[ExecuteInEditMode]
[AddComponentMenu("SECTR/Audio/SECTR Propagation Source")]
[RequireComponent(typeof(SECTR_Member))]
public class SECTR_PropagationSource : SECTR_AudioSource
{
	[Token(Token = "0x200002E")]
	private class PathSound
	{
		[Token(Token = "0x4000125")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public SECTR_AudioCueInstance instance;

		[Token(Token = "0x4000126")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SECTR_Portal firstPortal;

		[Token(Token = "0x4000127")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public SECTR_Portal secondPortal;

		[Token(Token = "0x4000128")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float firstDistance;

		[Token(Token = "0x4000129")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float secondDistance;

		[Token(Token = "0x400012A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float distance;

		[Token(Token = "0x400012B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public UnityEngine.Vector3 position;

		[Token(Token = "0x400012C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public UnityEngine.Vector3 lastListenerPosition;

		[Token(Token = "0x400012D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float weight;

		[Token(Token = "0x400012E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool occluded;

		[Token(Token = "0x600014B")]
		[Address(RVA = "0xB98388", Offset = "0xB98388", VA = "0xB98388")]
		public PathSound()
		{
		}
	}

	[Token(Token = "0x400011E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private SECTR_Member cachedMember;

	[Token(Token = "0x400011F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private List<SECTR_Graph.Node> path;

	[Token(Token = "0x4000120")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private List<PathSound> activeSounds;

	[Token(Token = "0x4000121")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float directDistanceToListener;

	[Token(Token = "0x4000122")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private bool playing;

	[Token(Token = "0x4000123")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
	private bool played;

	[Token(Token = "0x4000124")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SECTR_ToolTip("When the listener gets within this distance of a portal, the sound direction will start to blend towards the next portal or source position.", 0f, -1f)]
	public float InterpDistance;

	[Token(Token = "0x1700005E")]
	public override bool IsPlaying
	{
		[Token(Token = "0x6000142")]
		[Address(RVA = "0xB974A8", Offset = "0xB974A8", VA = "0xB974A8", Slot = "4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000143")]
	[Address(RVA = "0xB97508", Offset = "0xB97508", VA = "0xB97508", Slot = "5")]
	public override void Play()
	{
	}

	[Token(Token = "0x6000144")]
	[Address(RVA = "0xB97514", Offset = "0xB97514", VA = "0xB97514", Slot = "6")]
	public override void Stop(bool stopImmediately)
	{
	}

	[Token(Token = "0x6000145")]
	[Address(RVA = "0xB975E8", Offset = "0xB975E8", VA = "0xB975E8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000146")]
	[Address(RVA = "0xB97638", Offset = "0xB97638", VA = "0xB97638", Slot = "7")]
	protected override void OnDisable()
	{
	}

	[Token(Token = "0x6000147")]
	[Address(RVA = "0xB9765C", Offset = "0xB9765C", VA = "0xB9765C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000148")]
	[Address(RVA = "0xB985D0", Offset = "0xB985D0", VA = "0xB985D0", Slot = "8")]
	protected override void OnVolumePitchChanged()
	{
	}

	[Token(Token = "0x6000149")]
	[Address(RVA = "0xB98398", Offset = "0xB98398", VA = "0xB98398")]
	private void _ComputeSoundSpatialization(UnityEngine.Vector3 listenerPosition, float distanceToListener, PathSound pathSound)
	{
	}

	[Token(Token = "0x600014A")]
	[Address(RVA = "0xB985D4", Offset = "0xB985D4", VA = "0xB985D4")]
	public SECTR_PropagationSource()
	{
	}
}
[Token(Token = "0x200002F")]
[ExecuteInEditMode]
[AddComponentMenu("SECTR/Audio/SECTR Region Source")]
public class SECTR_RegionSource : SECTR_PointSource
{
	[Token(Token = "0x400012F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SECTR_ToolTip("Determine the closest point by raycast instead of bounding box. More accurate but more expensive.")]
	public bool Raycast;

	[Token(Token = "0x600014C")]
	[Address(RVA = "0xB986B4", Offset = "0xB986B4", VA = "0xB986B4")]
	private void Update()
	{
	}

	[Token(Token = "0x600014D")]
	[Address(RVA = "0xB98978", Offset = "0xB98978", VA = "0xB98978")]
	public SECTR_RegionSource()
	{
	}
}
[Token(Token = "0x2000030")]
[ExecuteInEditMode]
[AddComponentMenu("SECTR/Audio/SECTR Spline Source")]
public class SECTR_SplineSource : SECTR_PointSource
{
	[Token(Token = "0x2000031")]
	private class SplineNode
	{
		[Token(Token = "0x4000134")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public UnityEngine.Vector3 Point;

		[Token(Token = "0x4000135")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Quaternion Rot;

		[Token(Token = "0x4000136")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float T;

		[Token(Token = "0x4000137")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityEngine.Vector2 EaseIO;

		[Token(Token = "0x6000158")]
		[Address(RVA = "0xB99824", Offset = "0xB99824", VA = "0xB99824")]
		public SplineNode(UnityEngine.Vector3 p, Quaternion q, float t, UnityEngine.Vector2 io)
		{
		}

		[Token(Token = "0x6000159")]
		[Address(RVA = "0xB998A4", Offset = "0xB998A4", VA = "0xB998A4")]
		public SplineNode(SplineNode o)
		{
		}
	}

	[Token(Token = "0x4000130")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private List<SplineNode> nodes;

	[Token(Token = "0x4000131")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SECTR_ToolTip("Array of scene objects to use as control points for the spline")]
	public List<Transform> SplinePoints;

	[Token(Token = "0x4000132")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SECTR_ToolTip("Determines if the spline is open or closed (i.e. a loop).")]
	public bool Closed;

	[Token(Token = "0x4000133")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[SECTR_ToolTip("The maximum speed at which to interpolate the sound in space.", 0f, -1f)]
	public float MaxInterpSpeed;

	[Token(Token = "0x600014E")]
	[Address(RVA = "0xB98990", Offset = "0xB98990", VA = "0xB98990", Slot = "5")]
	public override void Play()
	{
	}

	[Token(Token = "0x600014F")]
	[Address(RVA = "0xB98C68", Offset = "0xB98C68", VA = "0xB98C68")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000150")]
	[Address(RVA = "0xB99610", Offset = "0xB99610", VA = "0xB99610")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000151")]
	[Address(RVA = "0xB99614", Offset = "0xB99614", VA = "0xB99614", Slot = "7")]
	protected override void OnDisable()
	{
	}

	[Token(Token = "0x6000152")]
	[Address(RVA = "0xB99624", Offset = "0xB99624", VA = "0xB99624")]
	private void Update()
	{
	}

	[Token(Token = "0x6000153")]
	[Address(RVA = "0xB98C6C", Offset = "0xB98C6C", VA = "0xB98C6C")]
	private void _SetupSpline()
	{
	}

	[Token(Token = "0x6000154")]
	[Address(RVA = "0xB98A00", Offset = "0xB98A00", VA = "0xB98A00")]
	private UnityEngine.Vector3 _GetClosestPointOnSpline(UnityEngine.Vector3 point)
	{
		return default(UnityEngine.Vector3);
	}

	[Token(Token = "0x6000155")]
	[Address(RVA = "0xB998F8", Offset = "0xB998F8", VA = "0xB998F8")]
	private UnityEngine.Vector3 _GetHermiteAtT(float timeParam)
	{
		return default(UnityEngine.Vector3);
	}

	[Token(Token = "0x6000156")]
	[Address(RVA = "0xB99BF8", Offset = "0xB99BF8", VA = "0xB99BF8")]
	private float _Ease(float t, float k1, float k2)
	{
		return default(float);
	}

	[Token(Token = "0x6000157")]
	[Address(RVA = "0xB99CD0", Offset = "0xB99CD0", VA = "0xB99CD0")]
	public SECTR_SplineSource()
	{
	}
}
[Token(Token = "0x2000032")]
[AddComponentMenu("SECTR/Audio/SECTR Start Music")]
public class SECTR_StartMusic : MonoBehaviour
{
	[Token(Token = "0x4000138")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SECTR_ToolTip("The music to play on Start.")]
	public SECTR_AudioCue Cue;

	[Token(Token = "0x600015A")]
	[Address(RVA = "0xB99DAC", Offset = "0xB99DAC", VA = "0xB99DAC")]
	private void Start()
	{
	}

	[Token(Token = "0x600015B")]
	[Address(RVA = "0xB99E0C", Offset = "0xB99E0C", VA = "0xB99E0C")]
	public SECTR_StartMusic()
	{
	}
}
[Token(Token = "0x2000033")]
[AddComponentMenu("SECTR/Audio/SECTR Trigger Source")]
[ExecuteInEditMode]
public class SECTR_TriggerSource : SECTR_PointSource
{
	[Token(Token = "0x4000139")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private GameObject activator;

	[Token(Token = "0x600015C")]
	[Address(RVA = "0xB99E14", Offset = "0xB99E14", VA = "0xB99E14")]
	public SECTR_TriggerSource()
	{
	}

	[Token(Token = "0x600015D")]
	[Address(RVA = "0xB99E40", Offset = "0xB99E40", VA = "0xB99E40")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600015E")]
	[Address(RVA = "0xB99ED0", Offset = "0xB99ED0", VA = "0xB99ED0")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600015F")]
	[Address(RVA = "0xB99F6C", Offset = "0xB99F6C", VA = "0xB99F6C")]
	private void OnTriggerEnter2D(Collider2D other)
	{
	}

	[Token(Token = "0x6000160")]
	[Address(RVA = "0xB9A008", Offset = "0xB9A008", VA = "0xB9A008")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6000161")]
	[Address(RVA = "0xB9A0B0", Offset = "0xB9A0B0", VA = "0xB9A0B0")]
	private void OnTriggerExit2D(Collider2D other)
	{
	}
}
[Token(Token = "0x2000034")]
[RequireComponent(typeof(Animator))]
[AddComponentMenu("SECTR/Audio/SECTR Door")]
public class SECTR_Door : MonoBehaviour
{
	[Token(Token = "0x400013A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int controlParam;

	[Token(Token = "0x400013B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private int canOpenParam;

	[Token(Token = "0x400013C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int closedState;

	[Token(Token = "0x400013D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private int waitingState;

	[Token(Token = "0x400013E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int openingState;

	[Token(Token = "0x400013F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private int openState;

	[Token(Token = "0x4000140")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int closingState;

	[Token(Token = "0x4000141")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private int lastState;

	[Token(Token = "0x4000142")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Animator cachedAnimator;

	[Token(Token = "0x4000143")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int openCount;

	[Token(Token = "0x4000144")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SECTR_ToolTip("The portal this door affects (if any).")]
	public SECTR_Portal Portal;

	[Token(Token = "0x4000145")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SECTR_ToolTip("The name of the control param in the door.")]
	public string ControlParam;

	[Token(Token = "0x4000146")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SECTR_ToolTip("The name of the control param that indicates if we are allowed to open.")]
	public string CanOpenParam;

	[Token(Token = "0x4000147")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SECTR_ToolTip("The full name (layer and state) of the Open state in the Animation Controller.")]
	public string OpenState;

	[Token(Token = "0x4000148")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SECTR_ToolTip("The full name (layer and state) of the Closed state in the Animation Controller.")]
	public string ClosedState;

	[Token(Token = "0x4000149")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SECTR_ToolTip("The full name (layer and state) of the Opening state in the Animation Controller.")]
	public string OpeningState;

	[Token(Token = "0x400014A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SECTR_ToolTip("The full name (layer and state) of the Closing state in the Animation Controller.")]
	public string ClosingState;

	[Token(Token = "0x400014B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SECTR_ToolTip("The full name (layer and state) of the Wating state in the Animation Controller.")]
	public string WaitingState;

	[Token(Token = "0x6000162")]
	[Address(RVA = "0xB9A158", Offset = "0xB9A158", VA = "0xB9A158")]
	public void OpenDoor()
	{
	}

	[Token(Token = "0x6000163")]
	[Address(RVA = "0xB9A168", Offset = "0xB9A168", VA = "0xB9A168")]
	public void CloseDoor()
	{
	}

	[Token(Token = "0x6000164")]
	[Address(RVA = "0xB9A178", Offset = "0xB9A178", VA = "0xB9A178")]
	public bool IsFullyOpen()
	{
		return default(bool);
	}

	[Token(Token = "0x6000165")]
	[Address(RVA = "0xB9A1E4", Offset = "0xB9A1E4", VA = "0xB9A1E4")]
	public bool IsClosed()
	{
		return default(bool);
	}

	[Token(Token = "0x6000166")]
	[Address(RVA = "0xB9A250", Offset = "0xB9A250", VA = "0xB9A250", Slot = "4")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x6000167")]
	[Address(RVA = "0xB9A32C", Offset = "0xB9A32C", VA = "0xB9A32C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000168")]
	[Address(RVA = "0xB9A414", Offset = "0xB9A414", VA = "0xB9A414")]
	private void Update()
	{
	}

	[Token(Token = "0x6000169")]
	[Address(RVA = "0xB9A650", Offset = "0xB9A650", VA = "0xB9A650", Slot = "5")]
	protected virtual void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600016A")]
	[Address(RVA = "0xB9A660", Offset = "0xB9A660", VA = "0xB9A660", Slot = "6")]
	protected virtual void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x600016B")]
	[Address(RVA = "0xB9A670", Offset = "0xB9A670", VA = "0xB9A670", Slot = "7")]
	protected virtual bool CanOpen()
	{
		return default(bool);
	}

	[Token(Token = "0x600016C")]
	[Address(RVA = "0xB9A678", Offset = "0xB9A678", VA = "0xB9A678")]
	public SECTR_Door()
	{
	}
}
[Token(Token = "0x2000035")]
public static class SECTR_Geometry
{
	[Token(Token = "0x400014C")]
	public const float kVERTEX_EPSILON = 0.001f;

	[Token(Token = "0x400014D")]
	public const float kBOUNDS_CHEAT = 0.01f;

	[Token(Token = "0x600016D")]
	[Address(RVA = "0xB9A788", Offset = "0xB9A788", VA = "0xB9A788")]
	public static Bounds ComputeBounds(Light light)
	{
		return default(Bounds);
	}

	[Token(Token = "0x600016E")]
	[Address(RVA = "0xB9AAEC", Offset = "0xB9AAEC", VA = "0xB9AAEC")]
	public static Bounds ComputeBounds(Terrain terrain)
	{
		return default(Bounds);
	}

	[Token(Token = "0x600016F")]
	[Address(RVA = "0xB9AC78", Offset = "0xB9AC78", VA = "0xB9AC78")]
	public static bool FrustumIntersectsBounds(Bounds bounds, List<Plane> frustum, int inMask, out int outMask)
	{
		return default(bool);
	}

	[Token(Token = "0x6000170")]
	[Address(RVA = "0xB9AE40", Offset = "0xB9AE40", VA = "0xB9AE40")]
	public static bool FrustumContainsBounds(Bounds bounds, List<Plane> frustum)
	{
		return default(bool);
	}

	[Token(Token = "0x6000171")]
	[Address(RVA = "0xB9AFEC", Offset = "0xB9AFEC", VA = "0xB9AFEC")]
	public static bool BoundsContainsBounds(Bounds container, Bounds contained)
	{
		return default(bool);
	}

	[Token(Token = "0x6000172")]
	[Address(RVA = "0xB9B048", Offset = "0xB9B048", VA = "0xB9B048")]
	public static bool BoundsIntersectsSphere(Bounds bounds, UnityEngine.Vector3 sphereCenter, float sphereRadius)
	{
		return default(bool);
	}

	[Token(Token = "0x6000173")]
	[Address(RVA = "0xB9B0F8", Offset = "0xB9B0F8", VA = "0xB9B0F8")]
	public static Bounds ProjectBounds(Bounds bounds, UnityEngine.Vector3 projection)
	{
		return default(Bounds);
	}

	[Token(Token = "0x6000174")]
	[Address(RVA = "0xB9B1A4", Offset = "0xB9B1A4", VA = "0xB9B1A4")]
	public static bool IsPointInFrontOfPlane(UnityEngine.Vector3 position, UnityEngine.Vector3 center, UnityEngine.Vector3 normal)
	{
		return default(bool);
	}

	[Token(Token = "0x6000175")]
	[Address(RVA = "0xB9B2B8", Offset = "0xB9B2B8", VA = "0xB9B2B8")]
	public static bool IsPolygonConvex(UnityEngine.Vector3[] verts)
	{
		return default(bool);
	}

	[Token(Token = "0x6000176")]
	[Address(RVA = "0xB9B584", Offset = "0xB9B584", VA = "0xB9B584")]
	public static int CompareVectorsCW(UnityEngine.Vector3 a, UnityEngine.Vector3 b, UnityEngine.Vector3 centroid, UnityEngine.Vector3 normal)
	{
		return default(int);
	}
}
[Token(Token = "0x2000036")]
public static class SECTR_Graph
{
	[Token(Token = "0x2000037")]
	public class Node : IComparable<Node>
	{
		[Token(Token = "0x4000152")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public SECTR_Portal Portal;

		[Token(Token = "0x4000153")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SECTR_Sector Sector;

		[Token(Token = "0x4000154")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float CostPlusEstimate;

		[Token(Token = "0x4000155")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float Cost;

		[Token(Token = "0x4000156")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int Depth;

		[Token(Token = "0x4000157")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool ForwardTraversal;

		[Token(Token = "0x4000158")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Node Parent;

		[Token(Token = "0x600017C")]
		[Address(RVA = "0xB9DC28", Offset = "0xB9DC28", VA = "0xB9DC28", Slot = "4")]
		public int CompareTo(Node other)
		{
			return default(int);
		}

		[Token(Token = "0x600017D")]
		[Address(RVA = "0xB9DC58", Offset = "0xB9DC58", VA = "0xB9DC58")]
		public static void ReconstructPath(List<Node> path, Node currentNode)
		{
		}

		[Token(Token = "0x600017E")]
		[Address(RVA = "0xB9DCC8", Offset = "0xB9DCC8", VA = "0xB9DCC8")]
		public Node()
		{
		}
	}

	[Token(Token = "0x400014E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static List<SECTR_Sector> initialSectors;

	[Token(Token = "0x400014F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static List<SECTR_Sector> goalSectors;

	[Token(Token = "0x4000150")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static SECTR_PriorityQueue<Node> openSet;

	[Token(Token = "0x4000151")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static Dictionary<SECTR_Portal, Node> closedSet;

	[Token(Token = "0x6000177")]
	[Address(RVA = "0xB9B690", Offset = "0xB9B690", VA = "0xB9B690")]
	public static void DepthWalk(ref List<Node> nodes, SECTR_Sector root, SECTR_Portal.PortalFlags stopFlags, int maxDepth)
	{
	}

	[Token(Token = "0x6000178")]
	[Address(RVA = "0xB9BC18", Offset = "0xB9BC18", VA = "0xB9BC18")]
	public static void BreadthWalk(ref List<Node> nodes, SECTR_Sector root, SECTR_Portal.PortalFlags stopFlags, int maxDepth)
	{
	}

	[Token(Token = "0x6000179")]
	[Address(RVA = "0xB9042C", Offset = "0xB9042C", VA = "0xB9042C")]
	public static void FindShortestPath(ref List<Node> path, UnityEngine.Vector3 start, UnityEngine.Vector3 goal, SECTR_Portal.PortalFlags stopFlags)
	{
	}

	[Token(Token = "0x600017A")]
	[Address(RVA = "0xB9C1A8", Offset = "0xB9C1A8", VA = "0xB9C1A8")]
	public static string GetGraphAsDot(string graphName)
	{
		return null;
	}
}
[Token(Token = "0x2000038")]
public abstract class SECTR_Hull : MonoBehaviour
{
	[Token(Token = "0x4000159")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Mesh previousMesh;

	[Token(Token = "0x400015A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private UnityEngine.Vector3[] vertsCW;

	[Token(Token = "0x400015B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private UnityEngine.Vector3 meshCentroid;

	[Token(Token = "0x400015C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	protected UnityEngine.Vector3 meshNormal;

	[Token(Token = "0x400015D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SECTR_ToolTip("Convex, planar mesh that defines the portal shape.")]
	public Mesh HullMesh;

	[Token(Token = "0x1700005F")]
	public UnityEngine.Vector3[] VertsCW
	{
		[Token(Token = "0x600017F")]
		[Address(RVA = "0xB9DCD0", Offset = "0xB9DCD0", VA = "0xB9DCD0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000060")]
	public UnityEngine.Vector3 Normal
	{
		[Token(Token = "0x6000180")]
		[Address(RVA = "0xB9E34C", Offset = "0xB9E34C", VA = "0xB9E34C")]
		get
		{
			return default(UnityEngine.Vector3);
		}
	}

	[Token(Token = "0x17000061")]
	public UnityEngine.Vector3 ReverseNormal
	{
		[Token(Token = "0x6000181")]
		[Address(RVA = "0xB9E388", Offset = "0xB9E388", VA = "0xB9E388")]
		get
		{
			return default(UnityEngine.Vector3);
		}
	}

	[Token(Token = "0x17000062")]
	public UnityEngine.Vector3 Center
	{
		[Token(Token = "0x6000182")]
		[Address(RVA = "0xB9E3D0", Offset = "0xB9E3D0", VA = "0xB9E3D0")]
		get
		{
			return default(UnityEngine.Vector3);
		}
	}

	[Token(Token = "0x17000063")]
	public Plane HullPlane
	{
		[Token(Token = "0x6000183")]
		[Address(RVA = "0xB9E444", Offset = "0xB9E444", VA = "0xB9E444")]
		get
		{
			return default(Plane);
		}
	}

	[Token(Token = "0x17000064")]
	public Plane ReverseHullPlane
	{
		[Token(Token = "0x6000184")]
		[Address(RVA = "0xB9E4BC", Offset = "0xB9E4BC", VA = "0xB9E4BC")]
		get
		{
			return default(Plane);
		}
	}

	[Token(Token = "0x17000065")]
	public Bounds BoundingBox
	{
		[Token(Token = "0x6000185")]
		[Address(RVA = "0xB9E534", Offset = "0xB9E534", VA = "0xB9E534")]
		get
		{
			return default(Bounds);
		}
	}

	[Token(Token = "0x6000186")]
	[Address(RVA = "0xB9E708", Offset = "0xB9E708", VA = "0xB9E708")]
	public bool IsPointInHull(UnityEngine.Vector3 p, float distanceTolerance)
	{
		return default(bool);
	}

	[Token(Token = "0x6000187")]
	[Address(RVA = "0xB9DCE8", Offset = "0xB9DCE8", VA = "0xB9DCE8")]
	protected void ComputeVerts()
	{
	}

	[Token(Token = "0x6000188")]
	[Address(RVA = "0xB9E9FC", Offset = "0xB9E9FC", VA = "0xB9E9FC")]
	protected SECTR_Hull()
	{
	}
}
[Token(Token = "0x2000039")]
[ExecuteInEditMode]
[AddComponentMenu("SECTR/Core/SECTR Member")]
public class SECTR_Member : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x200003A")]
	public class Child
	{
		[Token(Token = "0x4000187")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GameObject gameObject;

		[Token(Token = "0x4000188")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int gameObjectHash;

		[Token(Token = "0x4000189")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SECTR_Member member;

		[Token(Token = "0x400018A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Renderer renderer;

		[Token(Token = "0x400018B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int renderHash;

		[Token(Token = "0x400018C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Light light;

		[Token(Token = "0x400018D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int lightHash;

		[Token(Token = "0x400018E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Terrain terrain;

		[Token(Token = "0x400018F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int terrainHash;

		[Token(Token = "0x4000190")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public Bounds rendererBounds;

		[Token(Token = "0x4000191")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public Bounds lightBounds;

		[Token(Token = "0x4000192")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public Bounds terrainBounds;

		[Token(Token = "0x4000193")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public bool shadowLight;

		[Token(Token = "0x4000194")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9D")]
		public bool rendererCastsShadows;

		[Token(Token = "0x4000195")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9E")]
		public bool terrainCastsShadows;

		[Token(Token = "0x4000196")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public LayerMask layer;

		[Token(Token = "0x4000197")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public UnityEngine.Vector3 shadowLightPosition;

		[Token(Token = "0x4000198")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public float shadowLightRange;

		[Token(Token = "0x4000199")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public LightType shadowLightType;

		[Token(Token = "0x400019A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public int shadowCullingMask;

		[Token(Token = "0x400019B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public bool processed;

		[Token(Token = "0x400019C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBD")]
		public bool renderCulled;

		[Token(Token = "0x400019D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBE")]
		public bool lightCulled;

		[Token(Token = "0x400019E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBF")]
		public bool terrainCulled;

		[Token(Token = "0x60001AF")]
		[Address(RVA = "0xBA09E0", Offset = "0xBA09E0", VA = "0xBA09E0")]
		public void Init(GameObject gameObject, Renderer renderer, Light light, Terrain terrain, SECTR_Member member, bool dirShadowCaster, UnityEngine.Vector3 shadowVec)
		{
		}

		[Token(Token = "0x60001B0")]
		[Address(RVA = "0xBA2424", Offset = "0xBA2424", VA = "0xBA2424", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60001B1")]
		[Address(RVA = "0xBA24B8", Offset = "0xBA24B8", VA = "0xBA24B8", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60001B2")]
		[Address(RVA = "0xBA1904", Offset = "0xBA1904", VA = "0xBA1904")]
		public static bool operator ==(Child x, Child y)
		{
			return default(bool);
		}

		[Token(Token = "0x60001B3")]
		[Address(RVA = "0xBA18D8", Offset = "0xBA18D8", VA = "0xBA18D8")]
		public static bool operator !=(Child x, Child y)
		{
			return default(bool);
		}

		[Token(Token = "0x60001B4")]
		[Address(RVA = "0xBA1930", Offset = "0xBA1930", VA = "0xBA1930")]
		public Child()
		{
		}
	}

	[Token(Token = "0x200003B")]
	public enum BoundsUpdateModes
	{
		[Token(Token = "0x40001A0")]
		Start,
		[Token(Token = "0x40001A1")]
		Movement,
		[Token(Token = "0x40001A2")]
		Always,
		[Token(Token = "0x40001A3")]
		Static,
		[Token(Token = "0x40001A4")]
		SelfOnly
	}

	[Token(Token = "0x200003C")]
	public enum ChildCullModes
	{
		[Token(Token = "0x40001A6")]
		Default,
		[Token(Token = "0x40001A7")]
		Group,
		[Token(Token = "0x40001A8")]
		Individual
	}

	[Token(Token = "0x200003D")]
	public delegate void MembershipChanged(List<SECTR_Sector> left, List<SECTR_Sector> joined);

	[Token(Token = "0x400015E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[HideInInspector]
	private List<Child> children;

	[Token(Token = "0x400015F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[HideInInspector]
	[SerializeField]
	private List<Child> renderers;

	[Token(Token = "0x4000160")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	[HideInInspector]
	private List<Child> lights;

	[Token(Token = "0x4000161")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	[HideInInspector]
	private List<Child> terrains;

	[Token(Token = "0x4000162")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[HideInInspector]
	[SerializeField]
	private List<Child> shadowLights;

	[Token(Token = "0x4000163")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[HideInInspector]
	[SerializeField]
	private List<Child> shadowCasters;

	[Token(Token = "0x4000164")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[HideInInspector]
	[SerializeField]
	private Bounds totalBounds;

	[Token(Token = "0x4000165")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	[HideInInspector]
	private Bounds renderBounds;

	[Token(Token = "0x4000166")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	[HideInInspector]
	private Bounds lightBounds;

	[Token(Token = "0x4000167")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[HideInInspector]
	[SerializeField]
	private bool hasRenderBounds;

	[Token(Token = "0x4000168")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
	[HideInInspector]
	[SerializeField]
	private bool hasLightBounds;

	[Token(Token = "0x4000169")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x92")]
	[HideInInspector]
	[SerializeField]
	private bool shadowCaster;

	[Token(Token = "0x400016A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x93")]
	[HideInInspector]
	[SerializeField]
	private bool shadowLight;

	[Token(Token = "0x400016B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	[HideInInspector]
	[SerializeField]
	private bool frozen;

	[Token(Token = "0x400016C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x95")]
	[SerializeField]
	[HideInInspector]
	private bool neverJoin;

	[Token(Token = "0x400016D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[HideInInspector]
	[SerializeField]
	protected List<Light> bakedOnlyLights;

	[Token(Token = "0x400016E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	protected bool isSector;

	[Token(Token = "0x400016F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	protected SECTR_Member childProxy;

	[Token(Token = "0x4000170")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	protected bool hasChildProxy;

	[Token(Token = "0x4000171")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB1")]
	private bool started;

	[Token(Token = "0x4000172")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB2")]
	private bool usedStartSector;

	[Token(Token = "0x4000173")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private List<SECTR_Sector> sectors;

	[Token(Token = "0x4000174")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private List<SECTR_Sector> newSectors;

	[Token(Token = "0x4000175")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private List<SECTR_Sector> leftSectors;

	[Token(Token = "0x4000176")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private Dictionary<Transform, Child> childTable;

	[Token(Token = "0x4000177")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private Dictionary<Light, Light> bakedOnlyTable;

	[Token(Token = "0x4000178")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private UnityEngine.Vector3 lastPosition;

	[Token(Token = "0x4000179")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private Stack<Child> childPool;

	[Token(Token = "0x400017A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static List<SECTR_Member> allMembers;

	[Token(Token = "0x400017B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static Dictionary<Transform, SECTR_Member> allMemberTable;

	[Token(Token = "0x400017C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	[SECTR_ToolTip("Set to true if Sector membership should only change when crossing a portal.")]
	public bool PortalDetermined;

	[Token(Token = "0x400017D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	[SECTR_ToolTip("If set, forces the initial Sector to be the specified Sector.", "PortalDetermined")]
	public SECTR_Sector ForceStartSector;

	[Token(Token = "0x400017E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	[SECTR_ToolTip("Determines how often the bounds are recomputed. More frequent updates requires more CPU.")]
	public BoundsUpdateModes BoundsUpdateMode;

	[Token(Token = "0x400017F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
	[SECTR_ToolTip("Adds a buffer on bounding box to compensate for minor imprecisions.")]
	public float ExtraBounds;

	[Token(Token = "0x4000180")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	[SECTR_ToolTip("Override computed bounds with the user specified bounds. Advanced users only.")]
	public bool OverrideBounds;

	[Token(Token = "0x4000181")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
	[SECTR_ToolTip("User specified override bounds. Auto-populated with the current bounds when override is inactive.", "OverrideBounds")]
	public Bounds BoundsOverride;

	[Token(Token = "0x4000182")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	[SECTR_ToolTip("Optional shadow casting directional light to use in membership calculations. Bounds will be extruded away from light, if set.")]
	public Light DirShadowCaster;

	[Token(Token = "0x4000183")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	[SECTR_ToolTip("Distance by which to extend the bounds away from the shadow casting light.", "DirShadowCaster")]
	public float DirShadowDistance;

	[Token(Token = "0x4000184")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
	[SECTR_ToolTip("Determines if this SectorCuller should cull individual children, or cull all children based on the aggregate bounds.")]
	public ChildCullModes ChildCulling;

	[NonSerialized]
	[Token(Token = "0x4000185")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	[HideInInspector]
	public int LastVisibleFrameNumber;

	[Token(Token = "0x17000066")]
	public static List<SECTR_Member> All
	{
		[Token(Token = "0x600018A")]
		[Address(RVA = "0xB9EAD0", Offset = "0xB9EAD0", VA = "0xB9EAD0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000067")]
	public bool CullEachChild
	{
		[Token(Token = "0x600018B")]
		[Address(RVA = "0xB9EB28", Offset = "0xB9EB28", VA = "0xB9EB28")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000068")]
	public List<SECTR_Sector> Sectors
	{
		[Token(Token = "0x600018C")]
		[Address(RVA = "0xB9EB58", Offset = "0xB9EB58", VA = "0xB9EB58")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000069")]
	public List<Child> Children
	{
		[Token(Token = "0x600018D")]
		[Address(RVA = "0xB9EB60", Offset = "0xB9EB60", VA = "0xB9EB60")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700006A")]
	public List<Child> Renderers
	{
		[Token(Token = "0x600018E")]
		[Address(RVA = "0xB9EB84", Offset = "0xB9EB84", VA = "0xB9EB84")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700006B")]
	public bool ShadowCaster
	{
		[Token(Token = "0x600018F")]
		[Address(RVA = "0xB9EBA8", Offset = "0xB9EBA8", VA = "0xB9EBA8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700006C")]
	public List<Child> ShadowCasters
	{
		[Token(Token = "0x6000190")]
		[Address(RVA = "0xB9EBCC", Offset = "0xB9EBCC", VA = "0xB9EBCC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700006D")]
	public List<Child> Lights
	{
		[Token(Token = "0x6000191")]
		[Address(RVA = "0xB9EBF0", Offset = "0xB9EBF0", VA = "0xB9EBF0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700006E")]
	public bool ShadowLight
	{
		[Token(Token = "0x6000192")]
		[Address(RVA = "0xB9EC14", Offset = "0xB9EC14", VA = "0xB9EC14")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700006F")]
	public List<Child> ShadowLights
	{
		[Token(Token = "0x6000193")]
		[Address(RVA = "0xB9EC38", Offset = "0xB9EC38", VA = "0xB9EC38")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000070")]
	public List<Child> Terrains
	{
		[Token(Token = "0x6000194")]
		[Address(RVA = "0xB9EC5C", Offset = "0xB9EC5C", VA = "0xB9EC5C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000071")]
	public Bounds TotalBounds
	{
		[Token(Token = "0x6000195")]
		[Address(RVA = "0xB9EC80", Offset = "0xB9EC80", VA = "0xB9EC80")]
		get
		{
			return default(Bounds);
		}
	}

	[Token(Token = "0x17000072")]
	public Bounds RenderBounds
	{
		[Token(Token = "0x6000196")]
		[Address(RVA = "0xB9EC94", Offset = "0xB9EC94", VA = "0xB9EC94")]
		get
		{
			return default(Bounds);
		}
	}

	[Token(Token = "0x17000073")]
	public bool HasRenderBounds
	{
		[Token(Token = "0x6000197")]
		[Address(RVA = "0xB9ECC4", Offset = "0xB9ECC4", VA = "0xB9ECC4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000074")]
	public Bounds LightBounds
	{
		[Token(Token = "0x6000198")]
		[Address(RVA = "0xB9ECE8", Offset = "0xB9ECE8", VA = "0xB9ECE8")]
		get
		{
			return default(Bounds);
		}
	}

	[Token(Token = "0x17000075")]
	public bool HasLightBounds
	{
		[Token(Token = "0x6000199")]
		[Address(RVA = "0xB9ED18", Offset = "0xB9ED18", VA = "0xB9ED18")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000076")]
	public bool Frozen
	{
		[Token(Token = "0x600019D")]
		[Address(RVA = "0xB9ED94", Offset = "0xB9ED94", VA = "0xB9ED94")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600019C")]
		[Address(RVA = "0xB9ED80", Offset = "0xB9ED80", VA = "0xB9ED80")]
		set
		{
		}
	}

	[Token(Token = "0x17000077")]
	public SECTR_Member ChildProxy
	{
		[Token(Token = "0x600019E")]
		[Address(RVA = "0xB9ED9C", Offset = "0xB9ED9C", VA = "0xB9ED9C")]
		set
		{
		}
	}

	[Token(Token = "0x17000078")]
	public bool NeverJoin
	{
		[Token(Token = "0x600019F")]
		[Address(RVA = "0xB9EE14", Offset = "0xB9EE14", VA = "0xB9EE14")]
		set
		{
		}
	}

	[Token(Token = "0x17000079")]
	public bool IsSector
	{
		[Token(Token = "0x60001A0")]
		[Address(RVA = "0xB9EE20", Offset = "0xB9EE20", VA = "0xB9EE20")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x14000002")]
	public event MembershipChanged Changed
	{
		[Token(Token = "0x60001A3")]
		[Address(RVA = "0xBA0120", Offset = "0xBA0120", VA = "0xBA0120")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60001A4")]
		[Address(RVA = "0xBA01C0", Offset = "0xBA01C0", VA = "0xBA01C0")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x600019A")]
	[Address(RVA = "0xB9ED3C", Offset = "0xB9ED3C", VA = "0xB9ED3C")]
	public bool IsVisibleThisFrame()
	{
		return default(bool);
	}

	[Token(Token = "0x600019B")]
	[Address(RVA = "0xB9ED5C", Offset = "0xB9ED5C", VA = "0xB9ED5C")]
	public bool WasVisibleLastFrame()
	{
		return default(bool);
	}

	[Token(Token = "0x60001A1")]
	[Address(RVA = "0xB9EE28", Offset = "0xB9EE28", VA = "0xB9EE28")]
	public void ForceUpdate(bool updateChildren)
	{
	}

	[Token(Token = "0x60001A2")]
	[Address(RVA = "0xB9FFAC", Offset = "0xB9FFAC", VA = "0xB9FFAC")]
	public void SectorDisabled(SECTR_Sector sector)
	{
	}

	[Token(Token = "0x60001A5")]
	[Address(RVA = "0xBA0260", Offset = "0xBA0260", VA = "0xBA0260")]
	private void Start()
	{
	}

	[Token(Token = "0x60001A6")]
	[Address(RVA = "0xBA02BC", Offset = "0xBA02BC", VA = "0xBA02BC", Slot = "4")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x60001A7")]
	[Address(RVA = "0xBA0508", Offset = "0xBA0508", VA = "0xBA0508", Slot = "5")]
	protected virtual void OnDisable()
	{
	}

	[Token(Token = "0x60001A8")]
	[Address(RVA = "0xBA093C", Offset = "0xBA093C", VA = "0xBA093C")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60001A9")]
	[Address(RVA = "0xB9EE84", Offset = "0xB9EE84", VA = "0xB9EE84")]
	private void _UpdateChildren()
	{
	}

	[Token(Token = "0x60001AA")]
	[Address(RVA = "0xBA1068", Offset = "0xBA1068", VA = "0xBA1068")]
	private void _AddChildren(Transform childTransform, bool dirShadowCaster, UnityEngine.Vector3 shadowVec)
	{
	}

	[Token(Token = "0x60001AB")]
	[Address(RVA = "0xB9F854", Offset = "0xB9F854", VA = "0xB9F854")]
	private void _UpdateSectorMembership()
	{
	}

	[Token(Token = "0x60001AC")]
	[Address(RVA = "0xBA1938", Offset = "0xBA1938", VA = "0xBA1938")]
	private SECTR_Portal _CrossedPortal(SECTR_Sector sector)
	{
		return null;
	}

	[Token(Token = "0x60001AD")]
	[Address(RVA = "0xBA1FD8", Offset = "0xBA1FD8", VA = "0xBA1FD8")]
	public SECTR_Member()
	{
	}
}
[Token(Token = "0x200003E")]
public static class SECTR_Modules
{
	[Token(Token = "0x40001A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool AUDIO;

	[Token(Token = "0x40001AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
	public static bool VIS;

	[Token(Token = "0x40001AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
	public static bool STREAM;

	[Token(Token = "0x40001AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3")]
	public static bool DEV;

	[Token(Token = "0x40001AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static string VERSION;

	[Token(Token = "0x60001B9")]
	[Address(RVA = "0xBA2638", Offset = "0xBA2638", VA = "0xBA2638")]
	static SECTR_Modules()
	{
	}

	[Token(Token = "0x60001BA")]
	[Address(RVA = "0xBA27F8", Offset = "0xBA27F8", VA = "0xBA27F8")]
	public static bool HasPro()
	{
		return default(bool);
	}

	[Token(Token = "0x60001BB")]
	[Address(RVA = "0xBA2800", Offset = "0xBA2800", VA = "0xBA2800")]
	public static bool HasComplete()
	{
		return default(bool);
	}
}
[Token(Token = "0x200003F")]
[ExecuteInEditMode]
[AddComponentMenu("SECTR/Core/SECTR Portal")]
public class SECTR_Portal : SECTR_Hull
{
	[Token(Token = "0x2000040")]
	[Flags]
	public enum PortalFlags
	{
		[Token(Token = "0x40001B4")]
		Closed = 1,
		[Token(Token = "0x40001B5")]
		Locked = 2,
		[Token(Token = "0x40001B6")]
		PassThrough = 4
	}

	[Token(Token = "0x2000041")]
	[CompilerGenerated]
	private sealed class <GetSectors>d__17 : IEnumerable<SECTR_Sector>, IEnumerable, IEnumerator<SECTR_Sector>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40001B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40001B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private SECTR_Sector <>2__current;

		[Token(Token = "0x40001B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int <>l__initialThreadId;

		[Token(Token = "0x40001BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public SECTR_Portal <>4__this;

		[Token(Token = "0x1700007E")]
		private SECTR_Sector System.Collections.Generic.IEnumerator<SECTR_Sector>.Current
		{
			[Token(Token = "0x60001CC")]
			[Address(RVA = "0xBA3044", Offset = "0xBA3044", VA = "0xBA3044", Slot = "6")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700007F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60001CE")]
			[Address(RVA = "0xBA308C", Offset = "0xBA308C", VA = "0xBA308C", Slot = "9")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001C9")]
		[Address(RVA = "0xBA2C88", Offset = "0xBA2C88", VA = "0xBA2C88")]
		[DebuggerHidden]
		public <GetSectors>d__17(int <>1__state)
		{
		}

		[Token(Token = "0x60001CA")]
		[Address(RVA = "0xBA2FC4", Offset = "0xBA2FC4", VA = "0xBA2FC4", Slot = "7")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60001CB")]
		[Address(RVA = "0xBA2FC8", Offset = "0xBA2FC8", VA = "0xBA2FC8", Slot = "8")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60001CD")]
		[Address(RVA = "0xBA304C", Offset = "0xBA304C", VA = "0xBA304C", Slot = "10")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}

		[Token(Token = "0x60001CF")]
		[Address(RVA = "0xBA3094", Offset = "0xBA3094", VA = "0xBA3094", Slot = "4")]
		[DebuggerHidden]
		private IEnumerator<SECTR_Sector> System.Collections.Generic.IEnumerable<SECTR_Sector>.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x60001D0")]
		[Address(RVA = "0xBA3138", Offset = "0xBA3138", VA = "0xBA3138", Slot = "5")]
		[DebuggerHidden]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}
	}

	[Token(Token = "0x40001AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[HideInInspector]
	[SerializeField]
	private SECTR_Sector frontSector;

	[Token(Token = "0x40001AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[HideInInspector]
	[SerializeField]
	private SECTR_Sector backSector;

	[Token(Token = "0x40001B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool visited;

	[Token(Token = "0x40001B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static List<SECTR_Portal> allPortals;

	[Token(Token = "0x40001B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[SECTR_ToolTip("Flags for this Portal. Used in graph traversals and the like.", null, typeof(PortalFlags))]
	public PortalFlags Flags;

	[Token(Token = "0x1700007A")]
	public static List<SECTR_Portal> All
	{
		[Token(Token = "0x60001BC")]
		[Address(RVA = "0xBA28A0", Offset = "0xBA28A0", VA = "0xBA28A0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700007B")]
	public SECTR_Sector FrontSector
	{
		[Token(Token = "0x60001BE")]
		[Address(RVA = "0xBA1C30", Offset = "0xBA1C30", VA = "0xBA1C30")]
		get
		{
			return null;
		}
		[Token(Token = "0x60001BD")]
		[Address(RVA = "0xBA28F8", Offset = "0xBA28F8", VA = "0xBA28F8")]
		set
		{
		}
	}

	[Token(Token = "0x1700007C")]
	public SECTR_Sector BackSector
	{
		[Token(Token = "0x60001C0")]
		[Address(RVA = "0xBA1CC0", Offset = "0xBA1CC0", VA = "0xBA1CC0")]
		get
		{
			return null;
		}
		[Token(Token = "0x60001BF")]
		[Address(RVA = "0xBA2B10", Offset = "0xBA2B10", VA = "0xBA2B10")]
		set
		{
		}
	}

	[Token(Token = "0x1700007D")]
	public bool Visited
	{
		[Token(Token = "0x60001C1")]
		[Address(RVA = "0xBA2BFC", Offset = "0xBA2BFC", VA = "0xBA2BFC")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60001C2")]
		[Address(RVA = "0xBA2C04", Offset = "0xBA2C04", VA = "0xBA2C04")]
		set
		{
		}
	}

	[Token(Token = "0x60001C3")]
	[Address(RVA = "0xBA2C10", Offset = "0xBA2C10", VA = "0xBA2C10")]
	[IteratorStateMachine(typeof(<GetSectors>d__17))]
	public IEnumerable<SECTR_Sector> GetSectors()
	{
		return null;
	}

	[Token(Token = "0x60001C4")]
	[Address(RVA = "0xBA2CBC", Offset = "0xBA2CBC", VA = "0xBA2CBC")]
	public void SetFlag(PortalFlags flag, bool on)
	{
	}

	[Token(Token = "0x60001C5")]
	[Address(RVA = "0xBA2CD8", Offset = "0xBA2CD8", VA = "0xBA2CD8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60001C6")]
	[Address(RVA = "0xBA2E28", Offset = "0xBA2E28", VA = "0xBA2E28")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60001C7")]
	[Address(RVA = "0xBA2F30", Offset = "0xBA2F30", VA = "0xBA2F30")]
	public SECTR_Portal()
	{
	}
}
[Token(Token = "0x2000042")]
public class SECTR_PriorityQueue<T> where T : IComparable<T>
{
	[Token(Token = "0x40001BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private List<T> data;

	[Token(Token = "0x17000080")]
	public int Count
	{
		[Token(Token = "0x60001D3")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60001D4")]
		set
		{
		}
	}

	[Token(Token = "0x17000081")]
	public T this[int index]
	{
		[Token(Token = "0x60001D5")]
		get
		{
			return (T)null;
		}
		[Token(Token = "0x60001D6")]
		set
		{
		}
	}

	[Token(Token = "0x60001D1")]
	public SECTR_PriorityQueue()
	{
	}

	[Token(Token = "0x60001D2")]
	public SECTR_PriorityQueue(int capacity)
	{
	}

	[Token(Token = "0x60001D7")]
	public void Enqueue(T item)
	{
	}

	[Token(Token = "0x60001D8")]
	public T Dequeue()
	{
		return (T)null;
	}

	[Token(Token = "0x60001D9")]
	public T Peek()
	{
		return (T)null;
	}

	[Token(Token = "0x60001DA")]
	public override string ToString()
	{
		return null;
	}

	[Token(Token = "0x60001DB")]
	public bool IsConsistent()
	{
		return default(bool);
	}

	[Token(Token = "0x60001DC")]
	public void Clear()
	{
	}

	[Token(Token = "0x60001DD")]
	private void _SwapElements(int i, int j)
	{
	}

	[Token(Token = "0x60001DE")]
	private void _Update(int i)
	{
	}
}
[Token(Token = "0x2000043")]
[ExecuteInEditMode]
[AddComponentMenu("SECTR/Core/SECTR Sector")]
public class SECTR_Sector : SECTR_Member
{
	[Token(Token = "0x40001BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	private List<SECTR_Portal> portals;

	[Token(Token = "0x40001BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	private List<SECTR_Member> members;

	[Token(Token = "0x40001BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	private bool visited;

	[Token(Token = "0x40001BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static List<SECTR_Sector> allSectors;

	[Token(Token = "0x40001C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	[SECTR_ToolTip("The terrain Sector attached on the top side of this Sector.")]
	public SECTR_Sector TopTerrain;

	[Token(Token = "0x40001C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	[SECTR_ToolTip("The terrain Sector attached on the bottom side of this Sector.")]
	public SECTR_Sector BottomTerrain;

	[Token(Token = "0x40001C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	[SECTR_ToolTip("The terrain Sector attached on the left side of this Sector.")]
	public SECTR_Sector LeftTerrain;

	[Token(Token = "0x40001C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	[SECTR_ToolTip("The terrain Sector attached on the right side of this Sector.")]
	public SECTR_Sector RightTerrain;

	[Token(Token = "0x17000082")]
	public new static List<SECTR_Sector> All
	{
		[Token(Token = "0x60001E0")]
		[Address(RVA = "0xBA3230", Offset = "0xBA3230", VA = "0xBA3230")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000083")]
	public bool Visited
	{
		[Token(Token = "0x60001E3")]
		[Address(RVA = "0xBA3470", Offset = "0xBA3470", VA = "0xBA3470")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60001E4")]
		[Address(RVA = "0xBA3478", Offset = "0xBA3478", VA = "0xBA3478")]
		set
		{
		}
	}

	[Token(Token = "0x17000084")]
	public List<SECTR_Portal> Portals
	{
		[Token(Token = "0x60001E5")]
		[Address(RVA = "0xBA3484", Offset = "0xBA3484", VA = "0xBA3484")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000085")]
	public List<SECTR_Member> Members
	{
		[Token(Token = "0x60001E6")]
		[Address(RVA = "0xBA348C", Offset = "0xBA348C", VA = "0xBA348C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000086")]
	public bool IsConnectedTerrain
	{
		[Token(Token = "0x60001E7")]
		[Address(RVA = "0xBA3494", Offset = "0xBA3494", VA = "0xBA3494")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60001DF")]
	[Address(RVA = "0xBA313C", Offset = "0xBA313C", VA = "0xBA313C")]
	private SECTR_Sector()
	{
	}

	[Token(Token = "0x60001E1")]
	[Address(RVA = "0xBA3288", Offset = "0xBA3288", VA = "0xBA3288")]
	public static void GetContaining(ref List<SECTR_Sector> sectors, UnityEngine.Vector3 position)
	{
	}

	[Token(Token = "0x60001E2")]
	[Address(RVA = "0xBA1DF8", Offset = "0xBA1DF8", VA = "0xBA1DF8")]
	public static void GetContaining(ref List<SECTR_Sector> sectors, Bounds bounds)
	{
	}

	[Token(Token = "0x60001E8")]
	[Address(RVA = "0xBA356C", Offset = "0xBA356C", VA = "0xBA356C")]
	public void ConnectTerrainNeighbors()
	{
	}

	[Token(Token = "0x60001E9")]
	[Address(RVA = "0xBA3744", Offset = "0xBA3744", VA = "0xBA3744")]
	public void DisonnectTerrainNeighbors()
	{
	}

	[Token(Token = "0x60001EA")]
	[Address(RVA = "0xBA2A3C", Offset = "0xBA2A3C", VA = "0xBA2A3C")]
	public void Register(SECTR_Portal portal)
	{
	}

	[Token(Token = "0x60001EB")]
	[Address(RVA = "0xBA29E4", Offset = "0xBA29E4", VA = "0xBA29E4")]
	public void Deregister(SECTR_Portal portal)
	{
	}

	[Token(Token = "0x60001EC")]
	[Address(RVA = "0xBA1D50", Offset = "0xBA1D50", VA = "0xBA1D50")]
	public void Register(SECTR_Member member)
	{
	}

	[Token(Token = "0x60001ED")]
	[Address(RVA = "0xBA08E4", Offset = "0xBA08E4", VA = "0xBA08E4")]
	public void Deregister(SECTR_Member member)
	{
	}

	[Token(Token = "0x60001EE")]
	[Address(RVA = "0xBA3ADC", Offset = "0xBA3ADC", VA = "0xBA3ADC", Slot = "4")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x60001EF")]
	[Address(RVA = "0xBA3C58", Offset = "0xBA3C58", VA = "0xBA3C58", Slot = "5")]
	protected override void OnDisable()
	{
	}

	[Token(Token = "0x60001F0")]
	[Address(RVA = "0xBA3684", Offset = "0xBA3684", VA = "0xBA3684")]
	protected static Terrain GetTerrain(SECTR_Sector sector)
	{
		return null;
	}
}
[Token(Token = "0x2000044")]
[AttributeUsage(AttributeTargets.Field)]
public class SECTR_ToolTip : Attribute
{
	[Token(Token = "0x40001C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private string tipText;

	[Token(Token = "0x40001C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private string dependentProperty;

	[Token(Token = "0x40001C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float min;

	[Token(Token = "0x40001C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float max;

	[Token(Token = "0x40001C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Type enumType;

	[Token(Token = "0x40001C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool hasRange;

	[Token(Token = "0x40001CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	private bool devOnly;

	[Token(Token = "0x40001CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
	private bool sceneObjectOverride;

	[Token(Token = "0x40001CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x33")]
	private bool allowSceneObjects;

	[Token(Token = "0x40001CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private bool treatAsLayer;

	[Token(Token = "0x17000087")]
	public string TipText
	{
		[Token(Token = "0x60001FA")]
		[Address(RVA = "0xBA4030", Offset = "0xBA4030", VA = "0xBA4030")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000088")]
	public string DependentProperty
	{
		[Token(Token = "0x60001FB")]
		[Address(RVA = "0xBA4038", Offset = "0xBA4038", VA = "0xBA4038")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000089")]
	public float Min
	{
		[Token(Token = "0x60001FC")]
		[Address(RVA = "0xBA4040", Offset = "0xBA4040", VA = "0xBA4040")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x1700008A")]
	public float Max
	{
		[Token(Token = "0x60001FD")]
		[Address(RVA = "0xBA4048", Offset = "0xBA4048", VA = "0xBA4048")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x1700008B")]
	public Type EnumType
	{
		[Token(Token = "0x60001FE")]
		[Address(RVA = "0xBA4050", Offset = "0xBA4050", VA = "0xBA4050")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700008C")]
	public bool HasRange
	{
		[Token(Token = "0x60001FF")]
		[Address(RVA = "0xBA4058", Offset = "0xBA4058", VA = "0xBA4058")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700008D")]
	public bool DevOnly
	{
		[Token(Token = "0x6000200")]
		[Address(RVA = "0xBA4060", Offset = "0xBA4060", VA = "0xBA4060")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700008E")]
	public bool SceneObjectOverride
	{
		[Token(Token = "0x6000201")]
		[Address(RVA = "0xBA4068", Offset = "0xBA4068", VA = "0xBA4068")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700008F")]
	public bool AllowSceneObjects
	{
		[Token(Token = "0x6000202")]
		[Address(RVA = "0xBA4070", Offset = "0xBA4070", VA = "0xBA4070")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000090")]
	public bool TreatAsLayer
	{
		[Token(Token = "0x6000203")]
		[Address(RVA = "0xBA4078", Offset = "0xBA4078", VA = "0xBA4078")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60001F2")]
	[Address(RVA = "0xBA3E60", Offset = "0xBA3E60", VA = "0xBA3E60")]
	public SECTR_ToolTip(string tipText)
	{
	}

	[Token(Token = "0x60001F3")]
	[Address(RVA = "0xBA3E88", Offset = "0xBA3E88", VA = "0xBA3E88")]
	public SECTR_ToolTip(string tipText, float min, float max)
	{
	}

	[Token(Token = "0x60001F4")]
	[Address(RVA = "0xBA3ECC", Offset = "0xBA3ECC", VA = "0xBA3ECC")]
	public SECTR_ToolTip(string tipText, string dependentProperty)
	{
	}

	[Token(Token = "0x60001F5")]
	[Address(RVA = "0xBA3EF8", Offset = "0xBA3EF8", VA = "0xBA3EF8")]
	public SECTR_ToolTip(string tipText, string dependentProperty, float min, float max)
	{
	}

	[Token(Token = "0x60001F6")]
	[Address(RVA = "0xBA3F40", Offset = "0xBA3F40", VA = "0xBA3F40")]
	public SECTR_ToolTip(string tipText, bool devOnly)
	{
	}

	[Token(Token = "0x60001F7")]
	[Address(RVA = "0xBA3F70", Offset = "0xBA3F70", VA = "0xBA3F70")]
	public SECTR_ToolTip(string tipText, bool devOnly, bool treatAsLayer)
	{
	}

	[Token(Token = "0x60001F8")]
	[Address(RVA = "0xBA3FB0", Offset = "0xBA3FB0", VA = "0xBA3FB0")]
	public SECTR_ToolTip(string tipText, string dependentProperty, Type enumType)
	{
	}

	[Token(Token = "0x60001F9")]
	[Address(RVA = "0xBA3FEC", Offset = "0xBA3FEC", VA = "0xBA3FEC")]
	public SECTR_ToolTip(string tipText, string dependentProperty, bool allowSceneObjects)
	{
	}
}
[Serializable]
[Token(Token = "0x2000045")]
public class SECTR_ULong
{
	[Token(Token = "0x40001CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[SerializeField]
	private int first;

	[Token(Token = "0x40001CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[SerializeField]
	private int second;

	[Token(Token = "0x17000091")]
	public ulong value
	{
		[Token(Token = "0x6000204")]
		[Address(RVA = "0xBA4080", Offset = "0xBA4080", VA = "0xBA4080")]
		get
		{
			return default(ulong);
		}
		[Token(Token = "0x6000205")]
		[Address(RVA = "0xBA4090", Offset = "0xBA4090", VA = "0xBA4090")]
		set
		{
		}
	}

	[Token(Token = "0x6000206")]
	[Address(RVA = "0xBA409C", Offset = "0xBA409C", VA = "0xBA409C")]
	public SECTR_ULong(ulong newValue)
	{
	}

	[Token(Token = "0x6000207")]
	[Address(RVA = "0xBA40C8", Offset = "0xBA40C8", VA = "0xBA40C8")]
	public SECTR_ULong()
	{
	}

	[Token(Token = "0x6000208")]
	[Address(RVA = "0xBA40E4", Offset = "0xBA40E4", VA = "0xBA40E4", Slot = "3")]
	public override string ToString()
	{
		return null;
	}

	[Token(Token = "0x6000209")]
	[Address(RVA = "0xBA41C4", Offset = "0xBA41C4", VA = "0xBA41C4")]
	public static bool operator >(SECTR_ULong a, ulong b)
	{
		return default(bool);
	}

	[Token(Token = "0x600020A")]
	[Address(RVA = "0xBA41EC", Offset = "0xBA41EC", VA = "0xBA41EC")]
	public static bool operator >(ulong a, SECTR_ULong b)
	{
		return default(bool);
	}

	[Token(Token = "0x600020B")]
	[Address(RVA = "0xBA4214", Offset = "0xBA4214", VA = "0xBA4214")]
	public static bool operator <(SECTR_ULong a, ulong b)
	{
		return default(bool);
	}

	[Token(Token = "0x600020C")]
	[Address(RVA = "0xBA423C", Offset = "0xBA423C", VA = "0xBA423C")]
	public static bool operator <(ulong a, SECTR_ULong b)
	{
		return default(bool);
	}
}
[Token(Token = "0x2000046")]
public class AnimateRadar : MonoBehaviour
{
	[Token(Token = "0x40001D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float rim;

	[Token(Token = "0x40001D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool AnimatingRim;

	[Token(Token = "0x40001D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Range(0.001f, 1f)]
	public float RimMargin;

	[Token(Token = "0x40001D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float RimSpeed;

	[Token(Token = "0x40001D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool AnimatingNoise;

	[Token(Token = "0x40001D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public UnityEngine.Vector2 NoiseSpeed;

	[Token(Token = "0x40001D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Material Mat;

	[Token(Token = "0x40001D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float RimWidth;

	[Token(Token = "0x40001D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float RimFalloff;

	[Token(Token = "0x40001D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private UnityEngine.Vector2 NoiseOffset;

	[Token(Token = "0x600020D")]
	[Address(RVA = "0xBA4264", Offset = "0xBA4264", VA = "0xBA4264")]
	private void Awake()
	{
	}

	[Token(Token = "0x600020E")]
	[Address(RVA = "0xBA4318", Offset = "0xBA4318", VA = "0xBA4318")]
	private void Update()
	{
	}

	[Token(Token = "0x600020F")]
	[Address(RVA = "0xBA4360", Offset = "0xBA4360", VA = "0xBA4360")]
	public void AnimateRim(bool animate, float margin, float speed)
	{
	}

	[Token(Token = "0x6000210")]
	[Address(RVA = "0xBA4428", Offset = "0xBA4428", VA = "0xBA4428")]
	public void AnimateNoise(bool animate, UnityEngine.Vector3 NoiseOffset)
	{
	}

	[Token(Token = "0x6000211")]
	[Address(RVA = "0xBA44C4", Offset = "0xBA44C4", VA = "0xBA44C4")]
	public AnimateRadar()
	{
	}
}
namespace TextureArrayInspector
{
	[Token(Token = "0x2000047")]
	public static class AssetsExtensions
	{
		[Token(Token = "0x6000212")]
		[Address(RVA = "0xBA44D0", Offset = "0xBA44D0", VA = "0xBA44D0")]
		public static string GUID(this UnityEngine.Object obj)
		{
			return null;
		}

		[Token(Token = "0x6000213")]
		public static T GUIDtoObj<T>(this string guid) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x6000214")]
		[Address(RVA = "0xBA4554", Offset = "0xBA4554", VA = "0xBA4554")]
		public static string[] GetUserData(this UnityEngine.Object obj, string param)
		{
			return null;
		}

		[Token(Token = "0x6000215")]
		[Address(RVA = "0xBA45C4", Offset = "0xBA45C4", VA = "0xBA45C4")]
		public static string[] GetUserData(string guid, string param)
		{
			return null;
		}

		[Token(Token = "0x6000216")]
		[Address(RVA = "0xBA4634", Offset = "0xBA4634", VA = "0xBA4634")]
		public static void SetUserData(this UnityEngine.Object obj, string param, string[] data, bool reload = false)
		{
		}

		[Token(Token = "0x6000217")]
		[Address(RVA = "0xBA469C", Offset = "0xBA469C", VA = "0xBA469C")]
		public static void SetUserData(string guid, string param, string[] data, bool reload = false)
		{
		}

		[Token(Token = "0x6000218")]
		[Address(RVA = "0xBA4704", Offset = "0xBA4704", VA = "0xBA4704")]
		public static void Reimport(this UnityEngine.Object obj)
		{
		}
	}
	[Token(Token = "0x2000048")]
	public static class CoordinatesExtensions
	{
		[Token(Token = "0x2000049")]
		[CompilerGenerated]
		private sealed class <CircleAround>d__43 : IEnumerable<UnityEngine.Vector3>, IEnumerable, IEnumerator<UnityEngine.Vector3>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40001DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40001DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private UnityEngine.Vector3 <>2__current;

			[Token(Token = "0x40001DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x40001DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			private int numPoints;

			[Token(Token = "0x40001DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public int <>3__numPoints;

			[Token(Token = "0x40001DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private bool endWhereStart;

			[Token(Token = "0x40001E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
			public bool <>3__endWhereStart;

			[Token(Token = "0x40001E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private UnityEngine.Vector3 center;

			[Token(Token = "0x40001E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public UnityEngine.Vector3 <>3__center;

			[Token(Token = "0x40001E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private float radius;

			[Token(Token = "0x40001E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			public float <>3__radius;

			[Token(Token = "0x40001E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private float <radianStep>5__2;

			[Token(Token = "0x40001E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			private int <i>5__3;

			[Token(Token = "0x17000092")]
			private UnityEngine.Vector3 System.Collections.Generic.IEnumerator<UnityEngine.Vector3>.Current
			{
				[Token(Token = "0x6000248")]
				[Address(RVA = "0xBA6760", Offset = "0xBA6760", VA = "0xBA6760", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return default(UnityEngine.Vector3);
				}
			}

			[Token(Token = "0x17000093")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600024A")]
				[Address(RVA = "0xBA67AC", Offset = "0xBA67AC", VA = "0xBA67AC", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000245")]
			[Address(RVA = "0xBA6648", Offset = "0xBA6648", VA = "0xBA6648")]
			[DebuggerHidden]
			public <CircleAround>d__43(int <>1__state)
			{
			}

			[Token(Token = "0x6000246")]
			[Address(RVA = "0xBA667C", Offset = "0xBA667C", VA = "0xBA667C", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000247")]
			[Address(RVA = "0xBA6680", Offset = "0xBA6680", VA = "0xBA6680", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000249")]
			[Address(RVA = "0xBA676C", Offset = "0xBA676C", VA = "0xBA676C", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x600024B")]
			[Address(RVA = "0xBA6810", Offset = "0xBA6810", VA = "0xBA6810", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<UnityEngine.Vector3> System.Collections.Generic.IEnumerable<UnityEngine.Vector3>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x600024C")]
			[Address(RVA = "0xBA68E4", Offset = "0xBA68E4", VA = "0xBA68E4", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x6000219")]
		[Address(RVA = "0xBA476C", Offset = "0xBA476C", VA = "0xBA476C")]
		public static bool InRange(this Rect rect, UnityEngine.Vector2 pos)
		{
			return default(bool);
		}

		[Token(Token = "0x600021A")]
		[Address(RVA = "0xBA47EC", Offset = "0xBA47EC", VA = "0xBA47EC")]
		public static UnityEngine.Vector3 ToDir(this float angle)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x600021B")]
		[Address(RVA = "0xBA4818", Offset = "0xBA4818", VA = "0xBA4818")]
		public static float ToAngle(this UnityEngine.Vector3 dir)
		{
			return default(float);
		}

		[Token(Token = "0x600021C")]
		[Address(RVA = "0xBA4838", Offset = "0xBA4838", VA = "0xBA4838")]
		public static UnityEngine.Vector3 V3(this UnityEngine.Vector2 v2)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x600021D")]
		[Address(RVA = "0xBA4844", Offset = "0xBA4844", VA = "0xBA4844")]
		public static UnityEngine.Vector2 V2(this UnityEngine.Vector3 v3)
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x600021E")]
		[Address(RVA = "0xBA484C", Offset = "0xBA484C", VA = "0xBA484C")]
		public static UnityEngine.Vector3 ToV3(this float f)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x600021F")]
		[Address(RVA = "0xBA4858", Offset = "0xBA4858", VA = "0xBA4858")]
		public static Quaternion EulerToQuat(this UnityEngine.Vector3 v)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000220")]
		[Address(RVA = "0xBA48B8", Offset = "0xBA48B8", VA = "0xBA48B8")]
		public static Quaternion EulerToQuat(this float f)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000221")]
		[Address(RVA = "0xBA4908", Offset = "0xBA4908", VA = "0xBA4908")]
		public static UnityEngine.Vector3 Direction(this float angle)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6000222")]
		[Address(RVA = "0xBA4934", Offset = "0xBA4934", VA = "0xBA4934")]
		public static float Angle(this UnityEngine.Vector3 dir)
		{
			return default(float);
		}

		[Token(Token = "0x6000223")]
		[Address(RVA = "0xBA4954", Offset = "0xBA4954", VA = "0xBA4954")]
		public static Rect Clamp(this Rect r, float p)
		{
			return default(Rect);
		}

		[Token(Token = "0x6000224")]
		[Address(RVA = "0xBA49E8", Offset = "0xBA49E8", VA = "0xBA49E8")]
		public static Rect ClampFromLeft(this Rect r, float p)
		{
			return default(Rect);
		}

		[Token(Token = "0x6000225")]
		[Address(RVA = "0xBA4AA0", Offset = "0xBA4AA0", VA = "0xBA4AA0")]
		public static Rect Clamp(this Rect r, int p)
		{
			return default(Rect);
		}

		[Token(Token = "0x6000226")]
		[Address(RVA = "0xBA4B1C", Offset = "0xBA4B1C", VA = "0xBA4B1C")]
		public static Rect ClampFromLeft(this Rect r, int p)
		{
			return default(Rect);
		}

		[Token(Token = "0x6000227")]
		[Address(RVA = "0xBA4BB4", Offset = "0xBA4BB4", VA = "0xBA4BB4")]
		public static Rect Intersect(Rect r1, Rect r2)
		{
			return default(Rect);
		}

		[Token(Token = "0x6000228")]
		[Address(RVA = "0xBA4D24", Offset = "0xBA4D24", VA = "0xBA4D24")]
		public static Rect Intersect(Rect r1, CoordRect r2)
		{
			return default(Rect);
		}

		[Token(Token = "0x6000229")]
		[Address(RVA = "0xBA4E84", Offset = "0xBA4E84", VA = "0xBA4E84")]
		public static Rect ToRect(this UnityEngine.Vector3 center, float range)
		{
			return default(Rect);
		}

		[Token(Token = "0x600022A")]
		[Address(RVA = "0xBA4EC0", Offset = "0xBA4EC0", VA = "0xBA4EC0")]
		public static UnityEngine.Vector3 Average(this UnityEngine.Vector3[] vecs)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x600022B")]
		[Address(RVA = "0xBA4F74", Offset = "0xBA4F74", VA = "0xBA4F74")]
		public static bool Intersects(this Rect r1, Rect r2)
		{
			return default(bool);
		}

		[Token(Token = "0x600022C")]
		[Address(RVA = "0xBA5020", Offset = "0xBA5020", VA = "0xBA5020")]
		public static bool Intersects(this Rect r1, Rect[] rects)
		{
			return default(bool);
		}

		[Token(Token = "0x600022D")]
		[Address(RVA = "0xBA50C4", Offset = "0xBA50C4", VA = "0xBA50C4")]
		public static bool Contains(this Rect r1, Rect r2)
		{
			return default(bool);
		}

		[Token(Token = "0x600022E")]
		[Address(RVA = "0xBA5174", Offset = "0xBA5174", VA = "0xBA5174")]
		public static Rect Extend(this Rect r, float f)
		{
			return default(Rect);
		}

		[Token(Token = "0x600022F")]
		[Address(RVA = "0xBA5210", Offset = "0xBA5210", VA = "0xBA5210")]
		public static float DistToRectCenter(this UnityEngine.Vector3 pos, float offsetX, float offsetZ, float size)
		{
			return default(float);
		}

		[Token(Token = "0x6000230")]
		[Address(RVA = "0xBA523C", Offset = "0xBA523C", VA = "0xBA523C")]
		public static float DistToRectAxisAligned(this UnityEngine.Vector3 pos, float offsetX, float offsetZ, float size)
		{
			return default(float);
		}

		[Token(Token = "0x6000231")]
		[Address(RVA = "0xBA5288", Offset = "0xBA5288", VA = "0xBA5288")]
		public static float DistToRectCenter(this UnityEngine.Vector3[] poses, float offsetX, float offsetZ, float size)
		{
			return default(float);
		}

		[Token(Token = "0x6000232")]
		[Address(RVA = "0xBA5320", Offset = "0xBA5320", VA = "0xBA5320")]
		public static float DistToRectAxisAligned(this UnityEngine.Vector3[] poses, float offsetX, float offsetZ, float size)
		{
			return default(float);
		}

		[Token(Token = "0x6000233")]
		[Address(RVA = "0xBA53D8", Offset = "0xBA53D8", VA = "0xBA53D8")]
		public static float DistAxisAligned(this UnityEngine.Vector3 center, UnityEngine.Vector3 pos)
		{
			return default(float);
		}

		[Token(Token = "0x6000234")]
		[Address(RVA = "0xBA5404", Offset = "0xBA5404", VA = "0xBA5404")]
		public static Coord RoundToCoord(this UnityEngine.Vector2 pos)
		{
			return default(Coord);
		}

		[Token(Token = "0x6000235")]
		[Address(RVA = "0xBA546C", Offset = "0xBA546C", VA = "0xBA546C")]
		public static Coord FloorToCoord(this UnityEngine.Vector3 pos, float cellSize)
		{
			return default(Coord);
		}

		[Token(Token = "0x6000236")]
		[Address(RVA = "0xBA5568", Offset = "0xBA5568", VA = "0xBA5568")]
		public static Coord CeilToCoord(this UnityEngine.Vector3 pos, float cellSize)
		{
			return default(Coord);
		}

		[Token(Token = "0x6000237")]
		[Address(RVA = "0xBA5664", Offset = "0xBA5664", VA = "0xBA5664")]
		public static Coord RoundToCoord(this UnityEngine.Vector3 pos, float cellSize)
		{
			return default(Coord);
		}

		[Token(Token = "0x6000238")]
		[Address(RVA = "0xBA5838", Offset = "0xBA5838", VA = "0xBA5838")]
		public static CoordRect ToCoordRect(this UnityEngine.Vector3 pos, float range, float cellSize)
		{
			return default(CoordRect);
		}

		[Token(Token = "0x6000239")]
		[Address(RVA = "0xBA5A4C", Offset = "0xBA5A4C", VA = "0xBA5A4C")]
		public static CoordRect ToFixedSizeCoordRect(this UnityEngine.Vector3 pos, float range, float cellSize)
		{
			return default(CoordRect);
		}

		[Token(Token = "0x600023A")]
		[Address(RVA = "0xBA5B48", Offset = "0xBA5B48", VA = "0xBA5B48")]
		public static CoordRect GetHeightRect(this Terrain terrain)
		{
			return default(CoordRect);
		}

		[Token(Token = "0x600023B")]
		[Address(RVA = "0xBA5CE8", Offset = "0xBA5CE8", VA = "0xBA5CE8")]
		public static CoordRect GetSplatRect(this Terrain terrain)
		{
			return default(CoordRect);
		}

		[Token(Token = "0x600023C")]
		[Address(RVA = "0xBA5E88", Offset = "0xBA5E88", VA = "0xBA5E88")]
		public static float[,] SafeGetHeights(this TerrainData data, int offsetX, int offsetZ, int sizeX, int sizeZ)
		{
			return null;
		}

		[Token(Token = "0x600023D")]
		[Address(RVA = "0xBA5F08", Offset = "0xBA5F08", VA = "0xBA5F08")]
		public static float[,,] SafeGetAlphamaps(this TerrainData data, int offsetX, int offsetZ, int sizeX, int sizeZ)
		{
			return null;
		}

		[Token(Token = "0x600023E")]
		[Address(RVA = "0xBA5F88", Offset = "0xBA5F88", VA = "0xBA5F88")]
		public static float GetInterpolated(this float[,] array, float x, float z)
		{
			return default(float);
		}

		[Token(Token = "0x600023F")]
		[Address(RVA = "0xBA6090", Offset = "0xBA6090", VA = "0xBA6090")]
		public static bool Equal(UnityEngine.Vector3 v1, UnityEngine.Vector3 v2)
		{
			return default(bool);
		}

		[Token(Token = "0x6000240")]
		[Address(RVA = "0xBA6190", Offset = "0xBA6190", VA = "0xBA6190")]
		public static bool Equal(Ray r1, Ray r2)
		{
			return default(bool);
		}

		[Token(Token = "0x6000241")]
		[Address(RVA = "0xBA6250", Offset = "0xBA6250", VA = "0xBA6250")]
		public static UnityEngine.Vector3[] InverseTransformPoint(this Transform tfm, UnityEngine.Vector3[] points)
		{
			return null;
		}

		[Token(Token = "0x6000242")]
		[Address(RVA = "0xBA62DC", Offset = "0xBA62DC", VA = "0xBA62DC")]
		public static UnityEngine.Vector3 GetCenter(this UnityEngine.Vector3[] poses)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6000243")]
		[Address(RVA = "0xBA6364", Offset = "0xBA6364", VA = "0xBA6364")]
		public static bool Approximately(Rect r1, Rect r2)
		{
			return default(bool);
		}

		[Token(Token = "0x6000244")]
		[Address(RVA = "0xBA6590", Offset = "0xBA6590", VA = "0xBA6590")]
		[IteratorStateMachine(typeof(<CircleAround>d__43))]
		public static IEnumerable<UnityEngine.Vector3> CircleAround(this UnityEngine.Vector3 center, float radius, int numPoints, bool endWhereStart = false)
		{
			return null;
		}
	}
	[Token(Token = "0x200004A")]
	public static class Extensions
	{
		[Token(Token = "0x17000094")]
		public static bool isPlaying
		{
			[Token(Token = "0x6000266")]
			[Address(RVA = "0xBA8258", Offset = "0xBA8258", VA = "0xBA8258")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600024D")]
		[Address(RVA = "0xBA68E8", Offset = "0xBA68E8", VA = "0xBA68E8")]
		public static void RemoveChildren(this Transform tfm)
		{
		}

		[Token(Token = "0x600024E")]
		[Address(RVA = "0xBA6994", Offset = "0xBA6994", VA = "0xBA6994")]
		public static Transform FindChildRecursive(this Transform tfm, string name)
		{
			return null;
		}

		[Token(Token = "0x600024F")]
		[Address(RVA = "0xBA6AC8", Offset = "0xBA6AC8", VA = "0xBA6AC8")]
		public static void ToggleDisplayWireframe(this Transform tfm, bool show)
		{
		}

		[Token(Token = "0x6000250")]
		[Address(RVA = "0xBA6ACC", Offset = "0xBA6ACC", VA = "0xBA6ACC")]
		public static int ToInt(this Coord coord)
		{
			return default(int);
		}

		[Token(Token = "0x6000251")]
		[Address(RVA = "0xBA6B0C", Offset = "0xBA6B0C", VA = "0xBA6B0C")]
		public static Coord ToCoord(this int hash)
		{
			return default(Coord);
		}

		[Token(Token = "0x6000252")]
		public static void CheckAdd<TKey, TValue>(this Dictionary<TKey, TValue> dict, TKey key, TValue value, bool replace = true)
		{
		}

		[Token(Token = "0x6000253")]
		public static void CheckRemove<TKey, TValue>(this Dictionary<TKey, TValue> dict, TKey key)
		{
		}

		[Token(Token = "0x6000254")]
		public static TValue CheckGet<TKey, TValue>(this Dictionary<TKey, TValue> dict, TKey key)
		{
			return (TValue)null;
		}

		[Token(Token = "0x6000255")]
		public static TKey AnyKey<TKey, TValue>(this Dictionary<TKey, TValue> dict)
		{
			return (TKey)null;
		}

		[Token(Token = "0x6000256")]
		public static TValue AnyValue<TKey, TValue>(this Dictionary<TKey, TValue> dict)
		{
			return (TValue)null;
		}

		[Token(Token = "0x6000257")]
		public static T Any<T>(this HashSet<T> hashSet)
		{
			return (T)null;
		}

		[Token(Token = "0x6000258")]
		public static void CheckAdd<T>(this HashSet<T> set, T obj)
		{
		}

		[Token(Token = "0x6000259")]
		public static void CheckRemove<T>(this HashSet<T> set, T obj)
		{
		}

		[Token(Token = "0x600025A")]
		public static void SetState<T>(this HashSet<T> set, T obj, bool state)
		{
		}

		[Token(Token = "0x600025B")]
		[Address(RVA = "0xBA6B8C", Offset = "0xBA6B8C", VA = "0xBA6B8C")]
		public static void Normalize(this float[,,] array, int pinnedLayer)
		{
		}

		[Token(Token = "0x600025C")]
		[Address(RVA = "0xBA6D54", Offset = "0xBA6D54", VA = "0xBA6D54")]
		public static void DrawDebug(this UnityEngine.Vector3 pos, float range = 1f, [Optional] Color color)
		{
		}

		[Token(Token = "0x600025D")]
		[Address(RVA = "0xBA6EEC", Offset = "0xBA6EEC", VA = "0xBA6EEC")]
		public static void DrawDebug(this Rect rect, [Optional] Color color)
		{
		}

		[Token(Token = "0x600025E")]
		[Address(RVA = "0xBA71C8", Offset = "0xBA71C8", VA = "0xBA71C8")]
		public static void Resize(this Terrain terrain, int resolution, UnityEngine.Vector3 size)
		{
		}

		[Token(Token = "0x600025F")]
		[Address(RVA = "0xBA7344", Offset = "0xBA7344", VA = "0xBA7344")]
		public static Transform AddChild(this Transform tfm, string name = "", [Optional] UnityEngine.Vector3 offset)
		{
			return null;
		}

		[Token(Token = "0x6000260")]
		public static T CreateObjectWithComponent<T>(string name = "", [Optional] Transform parent, [Optional] UnityEngine.Vector3 offset) where T : MonoBehaviour
		{
			return null;
		}

		[Token(Token = "0x6000261")]
		[Address(RVA = "0xBA7420", Offset = "0xBA7420", VA = "0xBA7420")]
		public static float EvaluateMultithreaded(this AnimationCurve curve, float time)
		{
			return default(float);
		}

		[Token(Token = "0x6000262")]
		[Address(RVA = "0xBA779C", Offset = "0xBA779C", VA = "0xBA779C")]
		public static bool IdenticalTo(this AnimationCurve c1, AnimationCurve c2)
		{
			return default(bool);
		}

		[Token(Token = "0x6000263")]
		[Address(RVA = "0xBA79C4", Offset = "0xBA79C4", VA = "0xBA79C4")]
		public static Keyframe[] Copy(this Keyframe[] src)
		{
			return null;
		}

		[Token(Token = "0x6000264")]
		[Address(RVA = "0xBA7B20", Offset = "0xBA7B20", VA = "0xBA7B20")]
		public static AnimationCurve Copy(this AnimationCurve src)
		{
			return null;
		}

		[Token(Token = "0x6000265")]
		[Address(RVA = "0xBA7BA4", Offset = "0xBA7BA4", VA = "0xBA7BA4")]
		public static object Parse(this string s, Type t)
		{
			return null;
		}

		[Token(Token = "0x6000267")]
		[Address(RVA = "0xBA8260", Offset = "0xBA8260", VA = "0xBA8260")]
		public static bool IsEditor()
		{
			return default(bool);
		}

		[Token(Token = "0x6000268")]
		[Address(RVA = "0xBA8268", Offset = "0xBA8268", VA = "0xBA8268")]
		public static bool IsSelected(Transform transform)
		{
			return default(bool);
		}

		[Token(Token = "0x6000269")]
		[Address(RVA = "0xBA8270", Offset = "0xBA8270", VA = "0xBA8270")]
		public static Camera GetMainCamera()
		{
			return null;
		}

		[Token(Token = "0x600026A")]
		[Address(RVA = "0xBA8318", Offset = "0xBA8318", VA = "0xBA8318")]
		public static UnityEngine.Vector3[] GetCamPoses(bool genAroundMainCam = true, [Optional] string genAroundTag, [Optional] UnityEngine.Vector3[] camPoses)
		{
			return null;
		}

		[Token(Token = "0x600026B")]
		[Address(RVA = "0xBA8574", Offset = "0xBA8574", VA = "0xBA8574")]
		public static UnityEngine.Vector2 GetMousePosition()
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x600026C")]
		[Address(RVA = "0xBA857C", Offset = "0xBA857C", VA = "0xBA857C")]
		public static void GizmosDrawFrame(UnityEngine.Vector3 center, UnityEngine.Vector3 size, int resolution, float level = 30f)
		{
		}

		[Token(Token = "0x600026D")]
		[Address(RVA = "0xBA92F4", Offset = "0xBA92F4", VA = "0xBA92F4")]
		public static void Planar(this Mesh mesh, float size, int resolution)
		{
		}

		[Token(Token = "0x600026E")]
		[Address(RVA = "0xBA9530", Offset = "0xBA9530", VA = "0xBA9530")]
		public static string LogBinary(this int src)
		{
			return null;
		}

		[Token(Token = "0x600026F")]
		public static string ToStringArray<T>(this T[] array)
		{
			return null;
		}

		[Token(Token = "0x6000270")]
		[Address(RVA = "0xBA95EC", Offset = "0xBA95EC", VA = "0xBA95EC")]
		public static Color[] ToColors(this UnityEngine.Vector4[] src)
		{
			return null;
		}

		[Token(Token = "0x6000271")]
		[Address(RVA = "0xBA9690", Offset = "0xBA9690", VA = "0xBA9690")]
		public static Texture2D GetBiggestTexture(this Texture2D[] textures)
		{
			return null;
		}

		[Token(Token = "0x6000272")]
		[Address(RVA = "0xBA9810", Offset = "0xBA9810", VA = "0xBA9810")]
		public static void CheckSetInt(this Material mat, string name, int val)
		{
		}

		[Token(Token = "0x6000273")]
		[Address(RVA = "0xBA9860", Offset = "0xBA9860", VA = "0xBA9860")]
		public static void CheckSetFloat(this Material mat, string name, float val)
		{
		}

		[Token(Token = "0x6000274")]
		[Address(RVA = "0xBA98BC", Offset = "0xBA98BC", VA = "0xBA98BC")]
		public static void CheckSetTexture(this Material mat, string name, Texture tex)
		{
		}

		[Token(Token = "0x6000275")]
		[Address(RVA = "0xBA990C", Offset = "0xBA990C", VA = "0xBA990C")]
		public static void CheckSetVector(this Material mat, string name, UnityEngine.Vector4 val)
		{
		}

		[Token(Token = "0x6000276")]
		[Address(RVA = "0xBA998C", Offset = "0xBA998C", VA = "0xBA998C")]
		public static void CheckSetColor(this Material mat, string name, Color val)
		{
		}
	}
	[Token(Token = "0x200004B")]
	public static class ReflectionExtensions
	{
		[Token(Token = "0x200004C")]
		[CompilerGenerated]
		private sealed class <UsableFields>d__2 : IEnumerable<FieldInfo>, IEnumerable, IEnumerator<FieldInfo>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40001E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40001E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private FieldInfo <>2__current;

			[Token(Token = "0x40001E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x40001EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			private bool nonPublic;

			[Token(Token = "0x40001EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
			public bool <>3__nonPublic;

			[Token(Token = "0x40001EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
			private bool includeStatic;

			[Token(Token = "0x40001ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x27")]
			public bool <>3__includeStatic;

			[Token(Token = "0x40001EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Type type;

			[Token(Token = "0x40001EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Type <>3__type;

			[Token(Token = "0x40001F0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private FieldInfo[] <fields>5__2;

			[Token(Token = "0x40001F1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private int <i>5__3;

			[Token(Token = "0x17000095")]
			private FieldInfo System.Collections.Generic.IEnumerator<System.Reflection.FieldInfo>.Current
			{
				[Token(Token = "0x600028A")]
				[Address(RVA = "0xBAAB08", Offset = "0xBAAB08", VA = "0xBAAB08", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000096")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600028C")]
				[Address(RVA = "0xBAAB50", Offset = "0xBAAB50", VA = "0xBAAB50", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000287")]
			[Address(RVA = "0xBA9B08", Offset = "0xBA9B08", VA = "0xBA9B08")]
			[DebuggerHidden]
			public <UsableFields>d__2(int <>1__state)
			{
			}

			[Token(Token = "0x6000288")]
			[Address(RVA = "0xBAA9E8", Offset = "0xBAA9E8", VA = "0xBAA9E8", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000289")]
			[Address(RVA = "0xBAA9EC", Offset = "0xBAA9EC", VA = "0xBAA9EC", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600028B")]
			[Address(RVA = "0xBAAB10", Offset = "0xBAAB10", VA = "0xBAAB10", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x600028D")]
			[Address(RVA = "0xBAAB58", Offset = "0xBAAB58", VA = "0xBAAB58", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<FieldInfo> System.Collections.Generic.IEnumerable<System.Reflection.FieldInfo>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x600028E")]
			[Address(RVA = "0xBAAC0C", Offset = "0xBAAC0C", VA = "0xBAAC0C", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x200004D")]
		[CompilerGenerated]
		private sealed class <UsableProperties>d__3 : IEnumerable<PropertyInfo>, IEnumerable, IEnumerator<PropertyInfo>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40001F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40001F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private PropertyInfo <>2__current;

			[Token(Token = "0x40001F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x40001F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			private bool nonPublic;

			[Token(Token = "0x40001F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
			public bool <>3__nonPublic;

			[Token(Token = "0x40001F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Type type;

			[Token(Token = "0x40001F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Type <>3__type;

			[Token(Token = "0x40001F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private bool skipItems;

			[Token(Token = "0x40001FA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
			public bool <>3__skipItems;

			[Token(Token = "0x40001FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private PropertyInfo[] <properties>5__2;

			[Token(Token = "0x40001FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private int <i>5__3;

			[Token(Token = "0x17000097")]
			private PropertyInfo System.Collections.Generic.IEnumerator<System.Reflection.PropertyInfo>.Current
			{
				[Token(Token = "0x6000292")]
				[Address(RVA = "0xBAAD44", Offset = "0xBAAD44", VA = "0xBAAD44", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000098")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000294")]
				[Address(RVA = "0xBAAD8C", Offset = "0xBAAD8C", VA = "0xBAAD8C", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600028F")]
			[Address(RVA = "0xBA9BD4", Offset = "0xBA9BD4", VA = "0xBA9BD4")]
			[DebuggerHidden]
			public <UsableProperties>d__3(int <>1__state)
			{
			}

			[Token(Token = "0x6000290")]
			[Address(RVA = "0xBAAC10", Offset = "0xBAAC10", VA = "0xBAAC10", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000291")]
			[Address(RVA = "0xBAAC14", Offset = "0xBAAC14", VA = "0xBAAC14", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000293")]
			[Address(RVA = "0xBAAD4C", Offset = "0xBAAD4C", VA = "0xBAAD4C", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6000295")]
			[Address(RVA = "0xBAAD94", Offset = "0xBAAD94", VA = "0xBAAD94", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<PropertyInfo> System.Collections.Generic.IEnumerable<System.Reflection.PropertyInfo>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6000296")]
			[Address(RVA = "0xBAAE48", Offset = "0xBAAE48", VA = "0xBAAE48", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x200004E")]
		[CompilerGenerated]
		private sealed class <UsableMembers>d__4 : IEnumerable<MemberInfo>, IEnumerable, IEnumerator<MemberInfo>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40001FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40001FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private MemberInfo <>2__current;

			[Token(Token = "0x40001FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4000200")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			private bool nonPublic;

			[Token(Token = "0x4000201")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
			public bool <>3__nonPublic;

			[Token(Token = "0x4000202")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Type type;

			[Token(Token = "0x4000203")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Type <>3__type;

			[Token(Token = "0x4000204")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private bool skipItems;

			[Token(Token = "0x4000205")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
			public bool <>3__skipItems;

			[Token(Token = "0x4000206")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private BindingFlags <flags>5__2;

			[Token(Token = "0x4000207")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private FieldInfo[] <fields>5__3;

			[Token(Token = "0x4000208")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private PropertyInfo[] <properties>5__4;

			[Token(Token = "0x4000209")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private int <i>5__5;

			[Token(Token = "0x17000099")]
			private MemberInfo System.Collections.Generic.IEnumerator<System.Reflection.MemberInfo>.Current
			{
				[Token(Token = "0x600029A")]
				[Address(RVA = "0xBAB050", Offset = "0xBAB050", VA = "0xBAB050", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700009A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600029C")]
				[Address(RVA = "0xBAB098", Offset = "0xBAB098", VA = "0xBAB098", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000297")]
			[Address(RVA = "0xBA9CA0", Offset = "0xBA9CA0", VA = "0xBA9CA0")]
			[DebuggerHidden]
			public <UsableMembers>d__4(int <>1__state)
			{
			}

			[Token(Token = "0x6000298")]
			[Address(RVA = "0xBAAE4C", Offset = "0xBAAE4C", VA = "0xBAAE4C", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000299")]
			[Address(RVA = "0xBAAE50", Offset = "0xBAAE50", VA = "0xBAAE50", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600029B")]
			[Address(RVA = "0xBAB058", Offset = "0xBAB058", VA = "0xBAB058", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x600029D")]
			[Address(RVA = "0xBAB0A0", Offset = "0xBAB0A0", VA = "0xBAB0A0", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<MemberInfo> System.Collections.Generic.IEnumerable<System.Reflection.MemberInfo>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x600029E")]
			[Address(RVA = "0xBAB154", Offset = "0xBAB154", VA = "0xBAB154", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x200004F")]
		[CompilerGenerated]
		private sealed class <Subtypes>d__8 : IEnumerable<Type>, IEnumerable, IEnumerator<Type>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400020A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400020B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private Type <>2__current;

			[Token(Token = "0x400020C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x400020D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Type parent;

			[Token(Token = "0x400020E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Type <>3__parent;

			[Token(Token = "0x400020F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private Type[] <types>5__2;

			[Token(Token = "0x4000210")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private int <t>5__3;

			[Token(Token = "0x1700009B")]
			private Type System.Collections.Generic.IEnumerator<System.Type>.Current
			{
				[Token(Token = "0x60002A2")]
				[Address(RVA = "0xBAB254", Offset = "0xBAB254", VA = "0xBAB254", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700009C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60002A4")]
				[Address(RVA = "0xBAB29C", Offset = "0xBAB29C", VA = "0xBAB29C", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600029F")]
			[Address(RVA = "0xBAA7AC", Offset = "0xBAA7AC", VA = "0xBAA7AC")]
			[DebuggerHidden]
			public <Subtypes>d__8(int <>1__state)
			{
			}

			[Token(Token = "0x60002A0")]
			[Address(RVA = "0xBAB158", Offset = "0xBAB158", VA = "0xBAB158", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60002A1")]
			[Address(RVA = "0xBAB15C", Offset = "0xBAB15C", VA = "0xBAB15C", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60002A3")]
			[Address(RVA = "0xBAB25C", Offset = "0xBAB25C", VA = "0xBAB25C", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x60002A5")]
			[Address(RVA = "0xBAB2A4", Offset = "0xBAB2A4", VA = "0xBAB2A4", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<Type> System.Collections.Generic.IEnumerable<System.Type>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x60002A6")]
			[Address(RVA = "0xBAB348", Offset = "0xBAB348", VA = "0xBAB348", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x6000277")]
		[Address(RVA = "0xBA9A0C", Offset = "0xBA9A0C", VA = "0xBA9A0C")]
		public static object CallStaticMethodFrom(string assembly, string type, string method, object[] parameters)
		{
			return null;
		}

		[Token(Token = "0x6000278")]
		public static void GetPropertiesFrom<T1, T2>(this T1 dst, T2 src) where T1 : class where T2 : class
		{
		}

		[Token(Token = "0x6000279")]
		[Address(RVA = "0xBA9A70", Offset = "0xBA9A70", VA = "0xBA9A70")]
		[IteratorStateMachine(typeof(<UsableFields>d__2))]
		public static IEnumerable<FieldInfo> UsableFields(this Type type, bool nonPublic = false, bool includeStatic = false)
		{
			return null;
		}

		[Token(Token = "0x600027A")]
		[Address(RVA = "0xBA9B3C", Offset = "0xBA9B3C", VA = "0xBA9B3C")]
		[IteratorStateMachine(typeof(<UsableProperties>d__3))]
		public static IEnumerable<PropertyInfo> UsableProperties(this Type type, bool nonPublic = false, bool skipItems = true)
		{
			return null;
		}

		[Token(Token = "0x600027B")]
		[Address(RVA = "0xBA9C08", Offset = "0xBA9C08", VA = "0xBA9C08")]
		[IteratorStateMachine(typeof(<UsableMembers>d__4))]
		public static IEnumerable<MemberInfo> UsableMembers(this Type type, bool nonPublic = false, bool skipItems = true)
		{
			return null;
		}

		[Token(Token = "0x600027C")]
		[Address(RVA = "0xBA9CD4", Offset = "0xBA9CD4", VA = "0xBA9CD4")]
		public static void PrintAllFields(this Type type, BindingFlags flags)
		{
		}

		[Token(Token = "0x600027D")]
		[Address(RVA = "0xBA9FB0", Offset = "0xBA9FB0", VA = "0xBA9FB0")]
		public static void PrintAllFields(this Type type)
		{
		}

		[Token(Token = "0x600027E")]
		[Address(RVA = "0xBA9FE8", Offset = "0xBA9FE8", VA = "0xBA9FE8")]
		public static Component CopyComponent(Component src, GameObject go)
		{
			return null;
		}

		[Token(Token = "0x600027F")]
		[Address(RVA = "0xBAA734", Offset = "0xBAA734", VA = "0xBAA734")]
		[IteratorStateMachine(typeof(<Subtypes>d__8))]
		public static IEnumerable<Type> Subtypes(this Type parent)
		{
			return null;
		}

		[Token(Token = "0x6000280")]
		[Address(RVA = "0xBAA7E0", Offset = "0xBAA7E0", VA = "0xBAA7E0")]
		public static Type GetTerrainInspectorType()
		{
			return null;
		}

		[Token(Token = "0x6000281")]
		[Address(RVA = "0xBAA7E8", Offset = "0xBAA7E8", VA = "0xBAA7E8")]
		public static object GetTerrainInspectorField(string fieldName, [Optional] Type inspectorType)
		{
			return null;
		}

		[Token(Token = "0x6000282")]
		[Address(RVA = "0xBAA8E4", Offset = "0xBAA8E4", VA = "0xBAA8E4")]
		public static void SetTerrainInspectorField(string fieldName, object obj, [Optional] Type inspectorType)
		{
		}

		[Token(Token = "0x6000283")]
		public static T GetAddComponent<T>(this GameObject go) where T : Component
		{
			return null;
		}

		[Token(Token = "0x6000284")]
		public static void ReflectionReset<T>(this T obj)
		{
		}

		[Token(Token = "0x6000285")]
		public static T ReflectionCopy<T>(this T obj)
		{
			return (T)null;
		}

		[Token(Token = "0x6000286")]
		public static void ReflectionCopyFrom<T>(this T dst, object src)
		{
		}
	}
	[Token(Token = "0x2000050")]
	public static class TextureExtensions
	{
		[Token(Token = "0x2000051")]
		public enum TextureType
		{
			[Token(Token = "0x4000213")]
			RGBA,
			[Token(Token = "0x4000214")]
			RGB,
			[Token(Token = "0x4000215")]
			Normal,
			[Token(Token = "0x4000216")]
			Monochrome,
			[Token(Token = "0x4000217")]
			MonochromeFloat,
			[Token(Token = "0x4000218")]
			Manual
		}

		[Token(Token = "0x4000211")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly HashSet<TextureFormat> uncompressedFormats;

		[Token(Token = "0x60002A7")]
		[Address(RVA = "0xBAB34C", Offset = "0xBAB34C", VA = "0xBAB34C")]
		public static bool IsReadable(this Texture2D tex)
		{
			return default(bool);
		}

		[Token(Token = "0x60002A8")]
		[Address(RVA = "0xBAB3EC", Offset = "0xBAB3EC", VA = "0xBAB3EC")]
		public static bool IsLinear(this Texture tex)
		{
			return default(bool);
		}

		[Token(Token = "0x60002A9")]
		[Address(RVA = "0xBAB3F4", Offset = "0xBAB3F4", VA = "0xBAB3F4")]
		public static Texture2D ReadableClone(this Texture2D tex)
		{
			return null;
		}

		[Token(Token = "0x60002AA")]
		[Address(RVA = "0xBAB520", Offset = "0xBAB520", VA = "0xBAB520")]
		public static Texture2D UncompressedClone(this Texture2D tex)
		{
			return null;
		}

		[Token(Token = "0x60002AB")]
		[Address(RVA = "0xBAB650", Offset = "0xBAB650", VA = "0xBAB650")]
		public static Texture2D ResizedClone(this Texture2D tex, int newWidth, int newHeight)
		{
			return null;
		}

		[Token(Token = "0x60002AC")]
		[Address(RVA = "0xBAB78C", Offset = "0xBAB78C", VA = "0xBAB78C")]
		public static Color[] ResizeColorArray(this Color[] srcColors, int oldWidth, int oldHeight, int newWidth, int newHeight)
		{
			return null;
		}

		[Token(Token = "0x60002AD")]
		[Address(RVA = "0xBABBA0", Offset = "0xBABBA0", VA = "0xBABBA0")]
		public static Texture2D ColorTexture(int width, int height, Color color, bool linear = true)
		{
			return null;
		}

		[Token(Token = "0x60002AE")]
		[Address(RVA = "0xBABCD0", Offset = "0xBABCD0", VA = "0xBABCD0")]
		public static Texture2D Clone(this Texture2D src)
		{
			return null;
		}

		[Token(Token = "0x60002AF")]
		[Address(RVA = "0xBABDE8", Offset = "0xBABDE8", VA = "0xBABDE8")]
		public static void ClearAlpha(this Texture2D tex)
		{
		}

		[Token(Token = "0x60002B0")]
		[Address(RVA = "0xBABE60", Offset = "0xBABE60", VA = "0xBABE60")]
		public static void ApplyGamma(this Texture2D tex, float gamma = 2.2f)
		{
		}

		[Token(Token = "0x60002B1")]
		[Address(RVA = "0xBABF44", Offset = "0xBABF44", VA = "0xBABF44")]
		public static void RestoreNormalmap(this Texture2D tex)
		{
		}

		[Token(Token = "0x60002B2")]
		[Address(RVA = "0xBAC014", Offset = "0xBAC014", VA = "0xBAC014")]
		public static void SaveAsPNG(this Texture2D origTex, string savePath, bool linear = false, bool normal = false)
		{
		}

		[Token(Token = "0x60002B3")]
		[Address(RVA = "0xBAC2D8", Offset = "0xBAC2D8", VA = "0xBAC2D8")]
		public static Hash128 GetHash(this Texture2D tex)
		{
			return default(Hash128);
		}

		[Token(Token = "0x60002B4")]
		[Address(RVA = "0xBAC24C", Offset = "0xBAC24C", VA = "0xBAC24C")]
		public static bool IsCompressed(this TextureFormat format)
		{
			return default(bool);
		}

		[Token(Token = "0x60002B5")]
		[Address(RVA = "0xBAC2E4", Offset = "0xBAC2E4", VA = "0xBAC2E4")]
		public static TextureFormat AutoFormat(TextureType type, bool compressed)
		{
			return default(TextureFormat);
		}
	}
	[Token(Token = "0x2000052")]
	public static class TextureArrayTools
	{
		[Token(Token = "0x60002B7")]
		[Address(RVA = "0xBAC3F0", Offset = "0xBAC3F0", VA = "0xBAC3F0")]
		public static void SetTexture(this Texture2DArray dstArr, Texture2D src, int dstCh, bool apply = true)
		{
		}

		[Token(Token = "0x60002B8")]
		[Address(RVA = "0xBAC870", Offset = "0xBAC870", VA = "0xBAC870")]
		public static void SetTextureAlpha(this Texture2DArray dstArr, Texture2D src, Texture2D alpha, int dstCh, bool apply = true)
		{
		}

		[Token(Token = "0x60002B9")]
		[Address(RVA = "0xBACCD4", Offset = "0xBACCD4", VA = "0xBACCD4")]
		public static Texture2D GetTexture(this Texture2DArray srcArr, int srcCh, bool readable = true)
		{
			return null;
		}

		[Token(Token = "0x60002BA")]
		[Address(RVA = "0xBACE20", Offset = "0xBACE20", VA = "0xBACE20")]
		public static Texture2D[] GetTextures(this Texture2DArray srcArr)
		{
			return null;
		}

		[Token(Token = "0x60002BB")]
		[Address(RVA = "0xBACF18", Offset = "0xBACF18", VA = "0xBACF18")]
		public static Color GetPixel(this Texture2DArray srcArr, int x, int y, int ch)
		{
			return default(Color);
		}

		[Token(Token = "0x60002BC")]
		[Address(RVA = "0xBACF54", Offset = "0xBACF54", VA = "0xBACF54")]
		public static void FillTexture(this Texture2DArray srcArr, Texture2D dst, int srcCh)
		{
		}

		[Token(Token = "0x60002BD")]
		[Address(RVA = "0xBAD3BC", Offset = "0xBAD3BC", VA = "0xBAD3BC")]
		public static void CopyTexture(Texture2DArray srcArr, int srcCh, Texture2DArray dstArr, int dstCh)
		{
		}

		[Token(Token = "0x60002BE")]
		[Address(RVA = "0xBAD5FC", Offset = "0xBAD5FC", VA = "0xBAD5FC")]
		public static void CopyTextures(Texture2DArray srcArr, Texture2DArray dstArr, int length)
		{
		}

		[Token(Token = "0x60002BF")]
		[Address(RVA = "0xBAD3C4", Offset = "0xBAD3C4", VA = "0xBAD3C4")]
		public static void CopyTextures(Texture2DArray srcArr, int srcIndex, Texture2DArray dstArr, int dstIndex, int length)
		{
		}

		[Token(Token = "0x60002C0")]
		[Address(RVA = "0xBAD610", Offset = "0xBAD610", VA = "0xBAD610")]
		public static void Add(ref Texture2DArray texArr, Texture2D tex)
		{
		}

		[Token(Token = "0x60002C1")]
		[Address(RVA = "0xBAD618", Offset = "0xBAD618", VA = "0xBAD618")]
		public static Texture2DArray Add(Texture2DArray texArr, Texture2D tex)
		{
			return null;
		}

		[Token(Token = "0x60002C2")]
		[Address(RVA = "0xBAD78C", Offset = "0xBAD78C", VA = "0xBAD78C")]
		public static void Insert(ref Texture2DArray texArr, int pos, Texture2D tex)
		{
		}

		[Token(Token = "0x60002C3")]
		[Address(RVA = "0xBAD794", Offset = "0xBAD794", VA = "0xBAD794")]
		public static Texture2DArray Insert(Texture2DArray texArr, int pos, Texture2D tex)
		{
			return null;
		}

		[Token(Token = "0x60002C4")]
		[Address(RVA = "0xBADA64", Offset = "0xBADA64", VA = "0xBADA64")]
		public static Texture2DArray InsertRange(Texture2DArray texArr, int pos, Texture2DArray addArr)
		{
			return null;
		}

		[Token(Token = "0x60002C5")]
		[Address(RVA = "0xBADC60", Offset = "0xBADC60", VA = "0xBADC60")]
		public static void Switch(ref Texture2DArray texArr, int num1, int num2)
		{
		}

		[Token(Token = "0x60002C6")]
		[Address(RVA = "0xBADC68", Offset = "0xBADC68", VA = "0xBADC68")]
		public static void Switch(this Texture2DArray texArr, int num1, int num2)
		{
		}

		[Token(Token = "0x60002C7")]
		[Address(RVA = "0xBADD14", Offset = "0xBADD14", VA = "0xBADD14")]
		public static void Clear(this Texture2DArray texArr, int chNum)
		{
		}

		[Token(Token = "0x60002C8")]
		[Address(RVA = "0xBADE0C", Offset = "0xBADE0C", VA = "0xBADE0C")]
		public static void RemoveAt(ref Texture2DArray texArr, int num)
		{
		}

		[Token(Token = "0x60002C9")]
		[Address(RVA = "0xBADE14", Offset = "0xBADE14", VA = "0xBADE14")]
		public static Texture2DArray RemoveAt(Texture2DArray texArr, int num)
		{
			return null;
		}

		[Token(Token = "0x60002CA")]
		[Address(RVA = "0xBADFB0", Offset = "0xBADFB0", VA = "0xBADFB0")]
		public static void ChangeCount(ref Texture2DArray texArr, int newSize)
		{
		}

		[Token(Token = "0x60002CB")]
		[Address(RVA = "0xBADFB8", Offset = "0xBADFB8", VA = "0xBADFB8")]
		public static Texture2DArray ChangeCount(Texture2DArray texArr, int newSize)
		{
			return null;
		}

		[Token(Token = "0x60002CC")]
		[Address(RVA = "0xBAE110", Offset = "0xBAE110", VA = "0xBAE110")]
		public static Texture2DArray ResizedClone(this Texture2DArray texArr, int newWidth, int newHeight)
		{
			return null;
		}

		[Token(Token = "0x60002CD")]
		[Address(RVA = "0xBAE260", Offset = "0xBAE260", VA = "0xBAE260")]
		public static Texture2DArray FormattedClone(this Texture2DArray texArr, TextureFormat format)
		{
			return null;
		}

		[Token(Token = "0x60002CE")]
		[Address(RVA = "0xBAE3BC", Offset = "0xBAE3BC", VA = "0xBAE3BC")]
		public static Texture2DArray LinearClone(this Texture2DArray texArr, bool linear)
		{
			return null;
		}

		[Token(Token = "0x60002CF")]
		[Address(RVA = "0xBAE504", Offset = "0xBAE504", VA = "0xBAE504")]
		public static Texture2DArray WritableClone(this Texture2DArray texArr)
		{
			return null;
		}

		[Token(Token = "0x60002D0")]
		[Address(RVA = "0xBAE658", Offset = "0xBAE658", VA = "0xBAE658")]
		public static int GetMipMapCount(this Texture2DArray texArr)
		{
			return default(int);
		}

		[Token(Token = "0x60002D1")]
		[Address(RVA = "0xBAE720", Offset = "0xBAE720", VA = "0xBAE720")]
		public static bool IsReadWrite(this Texture2DArray texArr)
		{
			return default(bool);
		}

		[Token(Token = "0x60002D2")]
		[Address(RVA = "0xBAD788", Offset = "0xBAD788", VA = "0xBAD788")]
		public static void Rewrite(ref Texture2DArray texArr, Texture2DArray newArr)
		{
		}
	}
	[Token(Token = "0x2000053")]
	public class Layout
	{
		[Token(Token = "0x2000054")]
		public struct Val
		{
			[Token(Token = "0x4000259")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public float val;

			[Token(Token = "0x400025A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public bool ovd;

			[Token(Token = "0x6000312")]
			[Address(RVA = "0xC0ABDC", Offset = "0xC0ABDC", VA = "0xC0ABDC")]
			public static implicit operator Val(bool b)
			{
				return default(Val);
			}

			[Token(Token = "0x6000313")]
			[Address(RVA = "0xC0ABF4", Offset = "0xC0ABF4", VA = "0xC0ABF4")]
			public static implicit operator Val(float f)
			{
				return default(Val);
			}

			[Token(Token = "0x6000314")]
			[Address(RVA = "0xC0AC00", Offset = "0xC0AC00", VA = "0xC0AC00")]
			public static implicit operator Val(int i)
			{
				return default(Val);
			}

			[Token(Token = "0x6000315")]
			[Address(RVA = "0xC0AC10", Offset = "0xC0AC10", VA = "0xC0AC10")]
			public static implicit operator bool(Val v)
			{
				return default(bool);
			}

			[Token(Token = "0x6000316")]
			[Address(RVA = "0xC0AC24", Offset = "0xC0AC24", VA = "0xC0AC24")]
			public static implicit operator float(Val v)
			{
				return default(float);
			}

			[Token(Token = "0x6000317")]
			[Address(RVA = "0xC0AC2C", Offset = "0xC0AC2C", VA = "0xC0AC2C")]
			public static implicit operator int(Val v)
			{
				return default(int);
			}

			[Token(Token = "0x6000318")]
			[Address(RVA = "0xC0AC4C", Offset = "0xC0AC4C", VA = "0xC0AC4C")]
			public void Verify(float def)
			{
			}

			[Token(Token = "0x6000319")]
			[Address(RVA = "0xC0AC60", Offset = "0xC0AC60", VA = "0xC0AC60")]
			public void Verify(int def)
			{
			}

			[Token(Token = "0x600031A")]
			[Address(RVA = "0xC0AC78", Offset = "0xC0AC78", VA = "0xC0AC78")]
			public void Verify(bool def)
			{
			}
		}

		[Token(Token = "0x2000055")]
		public enum IconAligment
		{
			[Token(Token = "0x400025C")]
			resize,
			[Token(Token = "0x400025D")]
			min,
			[Token(Token = "0x400025E")]
			max,
			[Token(Token = "0x400025F")]
			center
		}

		[Token(Token = "0x2000056")]
		public delegate void ChangeAction();

		[Token(Token = "0x2000057")]
		public enum HelpboxType
		{
			[Token(Token = "0x4000261")]
			off,
			[Token(Token = "0x4000262")]
			empty,
			[Token(Token = "0x4000263")]
			info,
			[Token(Token = "0x4000264")]
			warning,
			[Token(Token = "0x4000265")]
			error
		}

		[Token(Token = "0x2000058")]
		public enum DragState
		{
			[Token(Token = "0x4000267")]
			Pressed,
			[Token(Token = "0x4000268")]
			Drag,
			[Token(Token = "0x4000269")]
			Released
		}

		[Token(Token = "0x2000059")]
		public enum DragSide
		{
			[Token(Token = "0x400026B")]
			right,
			[Token(Token = "0x400026C")]
			left,
			[Token(Token = "0x400026D")]
			top,
			[Token(Token = "0x400026E")]
			bottom,
			[Token(Token = "0x400026F")]
			rightTop,
			[Token(Token = "0x4000270")]
			leftTop,
			[Token(Token = "0x4000271")]
			rightBottom,
			[Token(Token = "0x4000272")]
			leftBottom
		}

		[Token(Token = "0x200005A")]
		public interface ILayered
		{
			[Token(Token = "0x1700009D")]
			int selected
			{
				[Token(Token = "0x6000324")]
				get;
				[Token(Token = "0x6000325")]
				set;
			}

			[Token(Token = "0x1700009E")]
			bool expanded
			{
				[Token(Token = "0x6000326")]
				get;
				[Token(Token = "0x6000327")]
				set;
			}

			[Token(Token = "0x600031F")]
			void OnLayerHeader(Layout layout, int num);

			[Token(Token = "0x6000320")]
			void OnLayerGUI(Layout layout, int num);

			[Token(Token = "0x6000321")]
			void AddLayer(int num);

			[Token(Token = "0x6000322")]
			void RemoveLayer(int num);

			[Token(Token = "0x6000323")]
			void SwitchLayers(int n1, int n2);
		}

		[Token(Token = "0x4000219")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Rect field;

		[Token(Token = "0x400021A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Rect cursor;

		[Token(Token = "0x400021B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Rect lastRect;

		[Token(Token = "0x400021C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int margin;

		[Token(Token = "0x400021D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public int rightMargin;

		[Token(Token = "0x400021E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public int lineHeight;

		[Token(Token = "0x400021F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float bottomPoint;

		[Token(Token = "0x4000220")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int verticalPadding;

		[Token(Token = "0x4000221")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public int horizontalPadding;

		[Token(Token = "0x4000222")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public UnityEngine.Object undoObject;

		[Token(Token = "0x4000223")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public string undoName;

		[Token(Token = "0x4000224")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public int repaintsLeft;

		[Token(Token = "0x4000225")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public UnityEngine.Vector2 scroll;

		[Token(Token = "0x4000226")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public float zoom;

		[Token(Token = "0x4000227")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float zoomStep;

		[Token(Token = "0x4000228")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float minZoom;

		[Token(Token = "0x4000229")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float maxZoom;

		[Token(Token = "0x400022A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public int scrollButton;

		[NonSerialized]
		[Token(Token = "0x400022B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public GUIStyle labelStyle;

		[NonSerialized]
		[Token(Token = "0x400022C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public GUIStyle boldLabelStyle;

		[NonSerialized]
		[Token(Token = "0x400022D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public GUIStyle foldoutStyle;

		[NonSerialized]
		[Token(Token = "0x400022E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public GUIStyle fieldStyle;

		[NonSerialized]
		[Token(Token = "0x400022F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public GUIStyle dragFieldStyle;

		[NonSerialized]
		[Token(Token = "0x4000230")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public GUIStyle buttonStyle;

		[NonSerialized]
		[Token(Token = "0x4000231")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public GUIStyle enumZoomStyle;

		[NonSerialized]
		[Token(Token = "0x4000232")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public GUIStyle urlStyle;

		[NonSerialized]
		[Token(Token = "0x4000233")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public GUIStyle toolbarStyle;

		[NonSerialized]
		[Token(Token = "0x4000234")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public GUIStyle toolbarButtonStyle;

		[NonSerialized]
		[Token(Token = "0x4000235")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public GUIStyle helpBoxStyle;

		[NonSerialized]
		[Token(Token = "0x4000236")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Dictionary<string, Texture2D> icons;

		[Token(Token = "0x4000237")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Material iconMat;

		[Token(Token = "0x4000238")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Material textureMat;

		[Token(Token = "0x4000239")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly string[] textureSimpleIcons;

		[Token(Token = "0x400023A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static readonly string[] textureModeIcons;

		[Token(Token = "0x400023B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static readonly string[] textureChannelsIcons;

		[NonSerialized]
		[Token(Token = "0x400023C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Dictionary<string, GUIStyle> elementStyles;

		[Token(Token = "0x400023D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private UnityEngine.Vector2 sliderClickPos;

		[Token(Token = "0x400023E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private int sliderDraggingId;

		[Token(Token = "0x400023F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		private float sliderOriginalValue;

		[Token(Token = "0x4000241")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static Rect currentlyFocusedRect;

		[Token(Token = "0x4000242")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public bool change;

		[Token(Token = "0x4000243")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x109")]
		public bool lastChange;

		[Token(Token = "0x4000244")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		public float fieldSize;

		[Token(Token = "0x4000245")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public float sliderSize;

		[Token(Token = "0x4000246")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		public bool monitorChange;

		[Token(Token = "0x4000247")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x115")]
		public bool markup;

		[Token(Token = "0x4000248")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x116")]
		public bool useEvent;

		[Token(Token = "0x4000249")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x117")]
		public bool disabled;

		[Token(Token = "0x400024A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public int fontSize;

		[Token(Token = "0x400024B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		public int iconOffset;

		[Token(Token = "0x400024C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public bool dragChange;

		[Token(Token = "0x400024D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x121")]
		public bool slider;

		[Token(Token = "0x400024E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x122")]
		public bool delayed;

		[Token(Token = "0x400024F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private Type curveWindowType;

		[Token(Token = "0x4000250")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private AnimationCurve windowCurveRef;

		[Token(Token = "0x4000251")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		public DragState dragState;

		[Token(Token = "0x4000252")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		public Rect dragRect;

		[Token(Token = "0x4000253")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		public UnityEngine.Vector2 dragPos;

		[Token(Token = "0x4000254")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
		public UnityEngine.Vector2 dragDelta;

		[Token(Token = "0x4000255")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
		public UnityEngine.Vector2 dragOffset;

		[Token(Token = "0x4000256")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		public int dragId;

		[Token(Token = "0x4000257")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		public DragSide dragSide;

		[Token(Token = "0x4000258")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		public Rect dragInitialRect;

		[Token(Token = "0x14000003")]
		public event ChangeAction OnBeforeChange
		{
			[Token(Token = "0x60002EC")]
			[Address(RVA = "0xBB0C50", Offset = "0xBB0C50", VA = "0xBB0C50")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60002ED")]
			[Address(RVA = "0xBB0CF0", Offset = "0xBB0CF0", VA = "0xBB0CF0")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x60002D3")]
		[Address(RVA = "0xBAE73C", Offset = "0xBAE73C", VA = "0xBAE73C")]
		public static Rect GetInspectorRect()
		{
			return default(Rect);
		}

		[Token(Token = "0x60002D4")]
		[Address(RVA = "0xBAE750", Offset = "0xBAE750", VA = "0xBAE750")]
		public static void SetInspectorRect(Rect rect)
		{
		}

		[Token(Token = "0x60002D5")]
		[Address(RVA = "0xBAE844", Offset = "0xBAE844", VA = "0xBAE844")]
		public void Par([Optional] Val height, [Optional] Val margin, [Optional] Val padding)
		{
		}

		[Token(Token = "0x60002D6")]
		[Address(RVA = "0xBAEA2C", Offset = "0xBAEA2C", VA = "0xBAEA2C")]
		public Rect Inset([Optional] Val width, [Optional] Val margin, [Optional] Val rightMargin, [Optional] Val padding)
		{
			return default(Rect);
		}

		[Token(Token = "0x60002D7")]
		[Address(RVA = "0xBAEB78", Offset = "0xBAEB78", VA = "0xBAEB78")]
		public Rect ParInset([Optional] Val height, [Optional] Val width, [Optional] Val margin, [Optional] Val rightMargin, [Optional] Val verticalPadding, [Optional] Val horizontalPadding)
		{
			return default(Rect);
		}

		[Token(Token = "0x60002D8")]
		[Address(RVA = "0xBAEBC0", Offset = "0xBAEBC0", VA = "0xBAEBC0")]
		public void Repaint(int numTimes)
		{
		}

		[Token(Token = "0x60002D9")]
		[Address(RVA = "0xBAEBD8", Offset = "0xBAEBD8", VA = "0xBAEBD8")]
		public void Repaint()
		{
		}

		[Token(Token = "0x60002DA")]
		[Address(RVA = "0xBAEBDC", Offset = "0xBAEBDC", VA = "0xBAEBDC")]
		public void Zoom()
		{
		}

		[Token(Token = "0x60002DB")]
		[Address(RVA = "0xBAED68", Offset = "0xBAED68", VA = "0xBAED68")]
		public void Scroll()
		{
		}

		[Token(Token = "0x60002DC")]
		[Address(RVA = "0xBAEE24", Offset = "0xBAEE24", VA = "0xBAEE24")]
		public void ScrollWheel(int step = 3)
		{
		}

		[Token(Token = "0x60002DD")]
		[Address(RVA = "0xBAEEA0", Offset = "0xBAEEA0", VA = "0xBAEEA0")]
		public Rect ToDisplay(Rect rect)
		{
			return default(Rect);
		}

		[Token(Token = "0x60002DE")]
		[Address(RVA = "0xBAEF64", Offset = "0xBAEF64", VA = "0xBAEF64")]
		public Rect ToInternal(Rect rect)
		{
			return default(Rect);
		}

		[Token(Token = "0x60002DF")]
		[Address(RVA = "0xBAF028", Offset = "0xBAF028", VA = "0xBAF028")]
		public UnityEngine.Vector2 ToInternal(UnityEngine.Vector2 pos)
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x60002E0")]
		[Address(RVA = "0xBAF044", Offset = "0xBAF044", VA = "0xBAF044")]
		public UnityEngine.Vector2 ToDisplay(UnityEngine.Vector2 pos)
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x60002E1")]
		[Address(RVA = "0xBAF060", Offset = "0xBAF060", VA = "0xBAF060")]
		public void Focus(UnityEngine.Vector2 pos)
		{
		}

		[Token(Token = "0x60002E2")]
		[Address(RVA = "0xBAF0D8", Offset = "0xBAF0D8", VA = "0xBAF0D8")]
		public void CheckStyles()
		{
		}

		[Token(Token = "0x60002E3")]
		[Address(RVA = "0xBAF0DC", Offset = "0xBAF0DC", VA = "0xBAF0DC")]
		public Texture2D GetIcon(string textureName)
		{
			return null;
		}

		[Token(Token = "0x60002E4")]
		[Address(RVA = "0xBAF244", Offset = "0xBAF244", VA = "0xBAF244")]
		public bool Icon(string textureName, Rect rect, IconAligment horizontalAlign = IconAligment.resize, IconAligment verticalAlign = IconAligment.resize, int animationFrames = 0, bool frame = false, bool tile = false, bool clickable = false)
		{
			return default(bool);
		}

		[Token(Token = "0x60002E5")]
		[Address(RVA = "0xBAF450", Offset = "0xBAF450", VA = "0xBAF450")]
		public bool Icon(Texture2D texture, Rect rect, IconAligment horizontalAlign = IconAligment.resize, IconAligment verticalAlign = IconAligment.resize, bool frame = false, bool tile = false, bool clickable = false, bool alphaBlend = true)
		{
			return default(bool);
		}

		[Token(Token = "0x60002E6")]
		[Address(RVA = "0xBAF910", Offset = "0xBAF910", VA = "0xBAF910")]
		public void TextureIcon(Texture2D texture, Rect rect)
		{
		}

		[Token(Token = "0x60002E7")]
		[Address(RVA = "0xBAFA1C", Offset = "0xBAFA1C", VA = "0xBAFA1C")]
		public void Texture(Texture2D texture, Rect rect, ref int mode)
		{
		}

		[Token(Token = "0x60002E8")]
		[Address(RVA = "0xBAFFA8", Offset = "0xBAFFA8", VA = "0xBAFFA8")]
		public void TextureTool(ref int mode, ref int channel, [Optional] Rect rect)
		{
		}

		[Token(Token = "0x60002E9")]
		[Address(RVA = "0xBB0494", Offset = "0xBB0494", VA = "0xBB0494")]
		public void Element(string textureName, Rect rect, RectOffset borders, RectOffset offset)
		{
		}

		[Token(Token = "0x60002EA")]
		[Address(RVA = "0xBB07DC", Offset = "0xBB07DC", VA = "0xBB07DC")]
		private float StepRound(float src)
		{
			return default(float);
		}

		[Token(Token = "0x60002EB")]
		[Address(RVA = "0xBB0894", Offset = "0xBB0894", VA = "0xBB0894")]
		public float DragChangeField(float val, Rect sliderRect, float min = 0f, float max = 0f, float minStep = 0.2f)
		{
			return default(float);
		}

		[Token(Token = "0x60002EE")]
		[Address(RVA = "0xBB0D90", Offset = "0xBB0D90", VA = "0xBB0D90")]
		public void SetChange(bool change)
		{
		}

		[Token(Token = "0x60002EF")]
		public void Field<T>(ref T src, [Optional] string label, [Optional] Rect rect, float min = -200000000f, float max = 200000000f, bool limit = true, [Optional] Val fieldSize, [Optional] Val sliderSize, [Optional] Val monitorChange, [Optional] Val useEvent, [Optional] Val disabled, [Optional] Val dragChange, [Optional] Val slider, [Optional] Val quadratic, [Optional] Val allowSceneObject, [Optional] Val delayed, [Optional] GUIStyle style, [Optional] string tooltip)
		{
		}

		[Token(Token = "0x60002F0")]
		public T Field<T>(T src, [Optional] string label, [Optional] Rect rect, float min = -200000000f, float max = 200000000f, bool limit = true, [Optional] Val fieldSize, [Optional] Val sliderSize, [Optional] Val monitorChange, [Optional] Val markup, [Optional] Val useEvent, [Optional] Val disabled, [Optional] Val dragChange, [Optional] Val slider, [Optional] Val quadratic, [Optional] Val allowSceneObject, [Optional] Val delayed, [Optional] GUIStyle style, [Optional] string tooltip)
		{
			return (T)null;
		}

		[Token(Token = "0x60002F1")]
		[Address(RVA = "0xBB0DBC", Offset = "0xBB0DBC", VA = "0xBB0DBC")]
		public void Curve(AnimationCurve src, Rect rect, [Optional] Rect ranges, [Optional] Color color, [Optional] string tooltip)
		{
		}

		[Token(Token = "0x60002F2")]
		[Address(RVA = "0xBB0EE4", Offset = "0xBB0EE4", VA = "0xBB0EE4")]
		public void Label([Optional] string label, [Optional] Rect rect, [Optional] string url, bool helpbox = false, int messageType = 0, [Optional] Val fontSize, [Optional] Val disabled, FontStyle fontStyle = FontStyle.Normal, TextAnchor textAnchor = TextAnchor.UpperLeft, bool prefix = false, [Optional] string icon, [Optional] string tooltip)
		{
		}

		[Token(Token = "0x60002F3")]
		[Address(RVA = "0xBB1268", Offset = "0xBB1268", VA = "0xBB1268")]
		public string EditableLabel([Optional] string label, [Optional] Rect rect, [Optional] Val fontSize, [Optional] Val disabled, FontStyle fontStyle = FontStyle.Normal, TextAnchor textAnchor = TextAnchor.UpperLeft, [Optional] string tooltip)
		{
			return null;
		}

		[Token(Token = "0x60002F4")]
		[Address(RVA = "0xBAFCE0", Offset = "0xBAFCE0", VA = "0xBAFCE0")]
		public bool Button([Optional] string label, [Optional] Rect rect, [Optional] Val monitorChange, [Optional] Val disabled, [Optional] string icon, bool iconCenter = false, int iconAnimFrames = 0, [Optional] GUIStyle style, [Optional] string tooltip)
		{
			return default(bool);
		}

		[Token(Token = "0x60002F5")]
		[Address(RVA = "0xBB16F8", Offset = "0xBB16F8", VA = "0xBB16F8")]
		public void CheckButton(ref bool src, [Optional] string label, [Optional] Rect rect, [Optional] Val monitorChange, [Optional] Val disabled, [Optional] string icon, [Optional] string tooltip)
		{
		}

		[Token(Token = "0x60002F6")]
		[Address(RVA = "0xBB1720", Offset = "0xBB1720", VA = "0xBB1720")]
		public bool CheckButton(bool src, [Optional] string label, [Optional] Rect rect, [Optional] Val monitorChange, [Optional] Val disabled, [Optional] string icon, [Optional] string tooltip)
		{
			return default(bool);
		}

		[Token(Token = "0x60002F7")]
		[Address(RVA = "0xBB1990", Offset = "0xBB1990", VA = "0xBB1990")]
		public void Toggle(ref bool src, [Optional] string label, [Optional] Rect rect, [Optional] Val monitorChange, [Optional] Val disabled, [Optional] string onIcon, [Optional] string offIcon, [Optional] string tooltip)
		{
		}

		[Token(Token = "0x60002F8")]
		[Address(RVA = "0xBB19C0", Offset = "0xBB19C0", VA = "0xBB19C0")]
		public bool Toggle(bool src, [Optional] string label, [Optional] Rect rect, [Optional] Val monitorChange, [Optional] Val disabled, [Optional] string onIcon, [Optional] string offIcon, [Optional] string tooltip)
		{
			return default(bool);
		}

		[Token(Token = "0x60002F9")]
		[Address(RVA = "0xBB1B8C", Offset = "0xBB1B8C", VA = "0xBB1B8C")]
		public void LayersField(ref int src, [Optional] string label, [Optional] Rect rect, [Optional] Val monitorChange, [Optional] Val disabled, [Optional] string onIcon, [Optional] string offIcon, [Optional] string tooltip)
		{
		}

		[Token(Token = "0x60002FA")]
		[Address(RVA = "0xBB1BB0", Offset = "0xBB1BB0", VA = "0xBB1BB0")]
		public int LayersField(int src, [Optional] string label, [Optional] Rect rect, [Optional] Val monitorChange, [Optional] Val disabled, [Optional] string onIcon, [Optional] string offIcon, [Optional] string tooltip)
		{
			return default(int);
		}

		[Token(Token = "0x60002FB")]
		[Address(RVA = "0xBB1D24", Offset = "0xBB1D24", VA = "0xBB1D24")]
		public void Foldout(ref bool src, [Optional] string label, [Optional] Rect rect, [Optional] Val disabled, [Optional] string tooltip, bool bold = true)
		{
		}

		[Token(Token = "0x60002FC")]
		[Address(RVA = "0xBB1D50", Offset = "0xBB1D50", VA = "0xBB1D50")]
		public bool Foldout(bool src, [Optional] string label, [Optional] Rect rect, [Optional] Val disabled, [Optional] string tooltip, bool bold = true)
		{
			return default(bool);
		}

		[Token(Token = "0x60002FD")]
		[Address(RVA = "0xBB1EAC", Offset = "0xBB1EAC", VA = "0xBB1EAC")]
		public void ToggleFoldout(ref bool unfolded, ref bool enabled, [Optional] string label, [Optional] Rect rect, [Optional] Val disabled, [Optional] string tooltip)
		{
		}

		[Token(Token = "0x60002FE")]
		[Address(RVA = "0xBB1FDC", Offset = "0xBB1FDC", VA = "0xBB1FDC")]
		public void Gauge(float progress, string label, [Optional] Rect rect, [Optional] Val disabled, [Optional] string tooltip)
		{
		}

		[Token(Token = "0x60002FF")]
		[Address(RVA = "0xBB20CC", Offset = "0xBB20CC", VA = "0xBB20CC")]
		public int Popup(int selected, string[] displayedOptions, [Optional] string label, [Optional] Rect rect, [Optional] Val disabled, [Optional] string tooltip)
		{
			return default(int);
		}

		[Token(Token = "0x6000300")]
		public T ScriptableAssetField<T>(T asset, Func<T> construct, [Optional] string savePath, [Optional] Val fieldSize) where T : ScriptableObject, ISerializationCallbackReceiver
		{
			return null;
		}

		[Token(Token = "0x6000301")]
		public void AssetNewSaveField<T>(ref T asset, string label, [Optional] Rect rect, string saveFilename = "Data.asset", string saveType = "asset", [Optional] Func<T> create) where T : UnityEngine.Object
		{
		}

		[Token(Token = "0x6000302")]
		public T AssetNewSaveField<T>(T asset, string label, [Optional] Rect rect, string saveFilename = "Data", string saveType = "asset", [Optional] Func<T> create) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x6000303")]
		public T SaveAsset<T>(T asset, [Optional] string savePath, string filename = "Data", string type = "asset", string caption = "Save Data as Unity Asset") where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x6000304")]
		[Address(RVA = "0xBB21C8", Offset = "0xBB21C8", VA = "0xBB21C8")]
		public void SaveRawBytes(byte[] bytes, [Optional] string savePath, string filename = "Data", string type = "asset")
		{
		}

		[Token(Token = "0x6000305")]
		private T ReleaseAsset<T>(T asset, [Optional] string savePath) where T : ScriptableObject, ISerializationCallbackReceiver
		{
			return null;
		}

		[Token(Token = "0x6000306")]
		public T LoadAsset<T>(string label = "Load Unity Asset", [Optional] string[] filters) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x6000307")]
		[Address(RVA = "0xBB21CC", Offset = "0xBB21CC", VA = "0xBB21CC")]
		public bool DragDrop(Rect initialRect, int id, [Optional] Action<UnityEngine.Vector2, Rect> onDrag, [Optional] Action<UnityEngine.Vector2, Rect> onPress, [Optional] Action<UnityEngine.Vector2, Rect> onRelease)
		{
			return default(bool);
		}

		[Token(Token = "0x6000308")]
		[Address(RVA = "0xBB2468", Offset = "0xBB2468", VA = "0xBB2468")]
		public Rect ResizeRect(Rect rectBase, int id, int border = 6, bool sideResize = true)
		{
			return default(Rect);
		}

		[Token(Token = "0x6000309")]
		[Address(RVA = "0xBB2BA4", Offset = "0xBB2BA4", VA = "0xBB2BA4")]
		public Rect GetBackgroundRect(Action<Layout> onGUI, bool fullWidth = true)
		{
			return default(Rect);
		}

		[Token(Token = "0x600030A")]
		[Address(RVA = "0xBB2D94", Offset = "0xBB2D94", VA = "0xBB2D94")]
		public void Layer(ILayered obj, int num, [Optional] Val disabled, bool displayFoldout = true, int expandHeaderBackground = 0, [Optional] string tooltip)
		{
		}

		[Token(Token = "0x600030B")]
		[Address(RVA = "0xBB3330", Offset = "0xBB3330", VA = "0xBB3330")]
		public void LayerButtons(ILayered obj, int count, [Optional] string label, [Optional] Rect rect, bool addBeforeSelected = false, [Optional] string tooltip)
		{
		}

		[Token(Token = "0x600030C")]
		[Address(RVA = "0xBB44BC", Offset = "0xBB44BC", VA = "0xBB44BC")]
		public void Foreground(Rect startAnchor, Rect endAnchor, int padding = 3)
		{
		}

		[Token(Token = "0x600030D")]
		[Address(RVA = "0xBB45FC", Offset = "0xBB45FC", VA = "0xBB45FC")]
		public void Foreground(Rect startAnchor, int padding = 3)
		{
		}

		[Token(Token = "0x600030E")]
		[Address(RVA = "0xBB4790", Offset = "0xBB4790", VA = "0xBB4790")]
		public void MatKeyword(Material mat, string keyword, string label)
		{
		}

		[Token(Token = "0x600030F")]
		public void MatField<T>(Material mat, string name, [Optional] string label, [Optional] Rect rect, float min = -200000000f, float max = 200000000f, bool limit = true, [Optional] Val fieldSize, [Optional] Val sliderSize, [Optional] Val monitorChange, [Optional] Val useEvent, [Optional] Val disabled, [Optional] Val dragChange, [Optional] Val slider, [Optional] Val quadratic, [Optional] Val allowSceneObject, [Optional] Val delayed, [Optional] GUIStyle style, [Optional] string tooltip, bool zwOfVector4 = false)
		{
		}

		[Token(Token = "0x6000310")]
		[Address(RVA = "0xBB4850", Offset = "0xBB4850", VA = "0xBB4850")]
		public Layout()
		{
		}
	}
	[Token(Token = "0x200005C")]
	public class TextureArrayDecorator
	{
		[Token(Token = "0x4000276")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Texture2DArray texArr;

		[Token(Token = "0x600032B")]
		[Address(RVA = "0xC0AF7C", Offset = "0xC0AF7C", VA = "0xC0AF7C")]
		public TextureArrayDecorator(Texture2DArray texArr)
		{
		}

		[Token(Token = "0x600032C")]
		[Address(RVA = "0xC0AFA8", Offset = "0xC0AFA8", VA = "0xC0AFA8")]
		public void SetSource(Texture2D tex, int ch, bool isAlpha = false, bool saveSources = true)
		{
		}

		[Token(Token = "0x600032D")]
		[Address(RVA = "0xC0AFAC", Offset = "0xC0AFAC", VA = "0xC0AFAC")]
		public void FindAndSetSource(Texture2D tex, string texPath, bool isAlpha = false)
		{
		}

		[Token(Token = "0x600032E")]
		[Address(RVA = "0xC0AFB0", Offset = "0xC0AFB0", VA = "0xC0AFB0")]
		public Texture2D GetSource(int ch, bool isAlpha = false)
		{
			return null;
		}

		[Token(Token = "0x600032F")]
		[Address(RVA = "0xC0AFB8", Offset = "0xC0AFB8", VA = "0xC0AFB8")]
		public Texture2D GetPreview(int ch)
		{
			return null;
		}

		[Token(Token = "0x6000330")]
		[Address(RVA = "0xC0AFC0", Offset = "0xC0AFC0", VA = "0xC0AFC0")]
		public void ApplySource(int ch)
		{
		}

		[Token(Token = "0x6000331")]
		[Address(RVA = "0xC0AFC4", Offset = "0xC0AFC4", VA = "0xC0AFC4")]
		public void ApplyAllSources()
		{
		}

		[Token(Token = "0x6000332")]
		[Address(RVA = "0xC0AFC8", Offset = "0xC0AFC8", VA = "0xC0AFC8")]
		public void Add(Texture2D tex, Texture2D al)
		{
		}

		[Token(Token = "0x6000333")]
		[Address(RVA = "0xC0AFCC", Offset = "0xC0AFCC", VA = "0xC0AFCC")]
		public void Insert(Texture2D tex, Texture2D al, int index)
		{
		}

		[Token(Token = "0x6000334")]
		[Address(RVA = "0xC0AFD0", Offset = "0xC0AFD0", VA = "0xC0AFD0")]
		public void Switch(int ch1, int ch2)
		{
		}

		[Token(Token = "0x6000335")]
		[Address(RVA = "0xC0AFD4", Offset = "0xC0AFD4", VA = "0xC0AFD4")]
		public void RemoveAt(int index)
		{
		}

		[Token(Token = "0x6000336")]
		[Address(RVA = "0xC0AFD8", Offset = "0xC0AFD8", VA = "0xC0AFD8")]
		public void Resize(int width, int height)
		{
		}

		[Token(Token = "0x6000337")]
		[Address(RVA = "0xC0AFFC", Offset = "0xC0AFFC", VA = "0xC0AFFC")]
		public void Format(TextureFormat format)
		{
		}

		[Token(Token = "0x6000338")]
		[Address(RVA = "0xC0B01C", Offset = "0xC0B01C", VA = "0xC0B01C")]
		public void ReadWrite(bool readWrite)
		{
		}

		[Token(Token = "0x6000339")]
		[Address(RVA = "0xC0B070", Offset = "0xC0B070", VA = "0xC0B070")]
		public void Linear(bool linear)
		{
		}

		[Token(Token = "0x600033A")]
		[Address(RVA = "0xC0AFF8", Offset = "0xC0AFF8", VA = "0xC0AFF8")]
		public void Rewrite(Texture2DArray oldArr, Texture2DArray newArr)
		{
		}

		[Token(Token = "0x600033B")]
		[Address(RVA = "0xC0AFA4", Offset = "0xC0AFA4", VA = "0xC0AFA4")]
		public void LoadSources()
		{
		}

		[Token(Token = "0x600033C")]
		[Address(RVA = "0xC0B094", Offset = "0xC0B094", VA = "0xC0B094")]
		public void SaveSources()
		{
		}

		[Token(Token = "0x600033D")]
		[Address(RVA = "0xC0B098", Offset = "0xC0B098", VA = "0xC0B098")]
		public static void UnlinkTexture(string texGuid, string arrGuid, bool isAlpha = false)
		{
		}

		[Token(Token = "0x600033E")]
		[Address(RVA = "0xC0B09C", Offset = "0xC0B09C", VA = "0xC0B09C")]
		public static void LinkTexture(string texGuid, string arrGuid, bool isAlpha = false)
		{
		}
	}
	[Token(Token = "0x200005D")]
	public static class ArrayTools
	{
		[Token(Token = "0x600033F")]
		public static void RemoveAt<T>(ref T[] array, int num)
		{
		}

		[Token(Token = "0x6000340")]
		public static T[] RemoveAt<T>(T[] array, int num)
		{
			return null;
		}

		[Token(Token = "0x6000341")]
		public static void Remove<T>(ref T[] array, T obj) where T : class
		{
		}

		[Token(Token = "0x6000342")]
		public static T[] Remove<T>(T[] array, T obj) where T : class
		{
			return null;
		}

		[Token(Token = "0x6000343")]
		public static void Add<T>(ref T[] array, T element)
		{
		}

		[Token(Token = "0x6000344")]
		public static T[] Add<T>(T[] array, T element)
		{
			return null;
		}

		[Token(Token = "0x6000345")]
		public static void Insert<T>(ref T[] array, int pos, T element)
		{
		}

		[Token(Token = "0x6000346")]
		public static T[] Insert<T>(T[] array, int pos, T element)
		{
			return null;
		}

		[Token(Token = "0x6000347")]
		public static T[] InsertRange<T>(T[] array, int after, T[] add)
		{
			return null;
		}

		[Token(Token = "0x6000348")]
		public static void Resize<T>(ref T[] array, int newSize, [Optional] Func<int, T> createElement)
		{
		}

		[Token(Token = "0x6000349")]
		public static T[] Resize<T>(T[] array, int newSize, [Optional] Func<int, T> createElement)
		{
			return null;
		}

		[Token(Token = "0x600034A")]
		public static void Append<T>(ref T[] array, T[] additional)
		{
		}

		[Token(Token = "0x600034B")]
		public static T[] Append<T>(T[] array, T[] additional)
		{
			return null;
		}

		[Token(Token = "0x600034C")]
		public static void Switch<T>(T[] array, int num1, int num2)
		{
		}

		[Token(Token = "0x600034D")]
		public static void Switch<T>(T[] array, T obj1, T obj2) where T : class
		{
		}

		[Token(Token = "0x600034E")]
		public static T[] Truncated<T>(this T[] src, int length)
		{
			return null;
		}

		[Token(Token = "0x600034F")]
		public static bool Equals<T>(T[] a1, T[] a2) where T : class
		{
			return default(bool);
		}

		[Token(Token = "0x6000350")]
		public static bool EqualsEquatable<T>(T[] a1, T[] a2) where T : IEquatable<T>
		{
			return default(bool);
		}

		[Token(Token = "0x6000351")]
		[Address(RVA = "0xC0B0A0", Offset = "0xC0B0A0", VA = "0xC0B0A0")]
		public static bool EqualsVector3(UnityEngine.Vector3[] a1, UnityEngine.Vector3[] a2, float delta = float.Epsilon)
		{
			return default(bool);
		}

		[Token(Token = "0x6000352")]
		public static int Find<T>(this T[] array, T obj)
		{
			return default(int);
		}

		[Token(Token = "0x6000353")]
		public static int FindCount<T>(this T[] array, T obj)
		{
			return default(int);
		}

		[Token(Token = "0x6000354")]
		public static bool Contains<T>(this T[] array, T obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000355")]
		public static void RemoveAll<T>(ref T[] array, T obj) where T : class
		{
		}

		[Token(Token = "0x6000356")]
		public static T[] RemoveAll<T>(T[] array, T obj) where T : class
		{
			return null;
		}

		[Token(Token = "0x6000357")]
		public static bool MatchElements<T>(T[] arr1, T[] arr2)
		{
			return default(bool);
		}

		[Token(Token = "0x6000358")]
		public static void CheckAdd<T>(ref T[] array, T element)
		{
		}

		[Token(Token = "0x6000359")]
		public static T[] CheckAdd<T>(T[] array, T element)
		{
			return null;
		}

		[Token(Token = "0x600035A")]
		public static T Any<T>(T[] array) where T : class
		{
			return null;
		}

		[Token(Token = "0x600035B")]
		public static bool IsEmpty<T>(T[] array) where T : class
		{
			return default(bool);
		}

		[Token(Token = "0x600035C")]
		[Address(RVA = "0xC0B170", Offset = "0xC0B170", VA = "0xC0B170")]
		public static string ToStringMemberwise(this Array array, string separator = ", ")
		{
			return null;
		}

		[Token(Token = "0x600035D")]
		[Address(RVA = "0xC0B274", Offset = "0xC0B274", VA = "0xC0B274")]
		public static void QSort(float[] array)
		{
		}

		[Token(Token = "0x600035E")]
		[Address(RVA = "0xC0B294", Offset = "0xC0B294", VA = "0xC0B294")]
		public static void QSort(float[] array, int l, int r)
		{
		}

		[Token(Token = "0x600035F")]
		public static void QSort<T>(T[] array, float[] reference)
		{
		}

		[Token(Token = "0x6000360")]
		public static void QSort<T>(T[] array, float[] reference, int l, int r)
		{
		}

		[Token(Token = "0x6000361")]
		public static void QSort<T>(List<T> list, float[] reference)
		{
		}

		[Token(Token = "0x6000362")]
		public static void QSort<T>(List<T> list, float[] reference, int l, int r)
		{
		}

		[Token(Token = "0x6000363")]
		[Address(RVA = "0xC0B378", Offset = "0xC0B378", VA = "0xC0B378")]
		public static int[] Order(int[] array, [Optional] int[] order, int max = 0, int steps = 1000000, [Optional] int[] stepsArray)
		{
			return null;
		}

		[Token(Token = "0x6000364")]
		public static T[] Convert<T, Y>(Y[] src)
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x200005E")]
	public struct Coord : CustomSerialization.IStruct
	{
		[Token(Token = "0x200005F")]
		[CompilerGenerated]
		private sealed class <DistanceStep>d__45 : IEnumerable<Coord>, IEnumerable, IEnumerator<Coord>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000279")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400027A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private Coord <>2__current;

			[Token(Token = "0x400027B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			private int <>l__initialThreadId;

			[Token(Token = "0x400027C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Coord <>4__this;

			[Token(Token = "0x400027D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Coord <>3__<>4__this;

			[Token(Token = "0x400027E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private int i;

			[Token(Token = "0x400027F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public int <>3__i;

			[Token(Token = "0x4000280")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int dist;

			[Token(Token = "0x4000281")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public int <>3__dist;

			[Token(Token = "0x170000A4")]
			private Coord System.Collections.Generic.IEnumerator<TextureArrayInspector.Coord>.Current
			{
				[Token(Token = "0x6000399")]
				[Address(RVA = "0xC0C4F8", Offset = "0xC0C4F8", VA = "0xC0C4F8", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return default(Coord);
				}
			}

			[Token(Token = "0x170000A5")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600039B")]
				[Address(RVA = "0xC0C540", Offset = "0xC0C540", VA = "0xC0C540", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000396")]
			[Address(RVA = "0xC0BE00", Offset = "0xC0BE00", VA = "0xC0BE00")]
			[DebuggerHidden]
			public <DistanceStep>d__45(int <>1__state)
			{
			}

			[Token(Token = "0x6000397")]
			[Address(RVA = "0xC0C3C0", Offset = "0xC0C3C0", VA = "0xC0C3C0", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000398")]
			[Address(RVA = "0xC0C3C4", Offset = "0xC0C3C4", VA = "0xC0C3C4", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600039A")]
			[Address(RVA = "0xC0C500", Offset = "0xC0C500", VA = "0xC0C500", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x600039C")]
			[Address(RVA = "0xC0C59C", Offset = "0xC0C59C", VA = "0xC0C59C", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<Coord> System.Collections.Generic.IEnumerable<TextureArrayInspector.Coord>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x600039D")]
			[Address(RVA = "0xC0C650", Offset = "0xC0C650", VA = "0xC0C650", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x2000060")]
		[CompilerGenerated]
		private sealed class <DistancePerimeter>d__46 : IEnumerable<Coord>, IEnumerable, IEnumerator<Coord>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000282")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000283")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private Coord <>2__current;

			[Token(Token = "0x4000284")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4000285")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Coord <>4__this;

			[Token(Token = "0x4000286")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Coord <>3__<>4__this;

			[Token(Token = "0x4000287")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private int dist;

			[Token(Token = "0x4000288")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public int <>3__dist;

			[Token(Token = "0x4000289")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int <i>5__2;

			[Token(Token = "0x400028A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private IEnumerator<Coord> <>7__wrap2;

			[Token(Token = "0x170000A6")]
			private Coord System.Collections.Generic.IEnumerator<TextureArrayInspector.Coord>.Current
			{
				[Token(Token = "0x60003A2")]
				[Address(RVA = "0xC0C9DC", Offset = "0xC0C9DC", VA = "0xC0C9DC", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return default(Coord);
				}
			}

			[Token(Token = "0x170000A7")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60003A4")]
				[Address(RVA = "0xC0CA24", Offset = "0xC0CA24", VA = "0xC0CA24", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600039E")]
			[Address(RVA = "0xC0BEC0", Offset = "0xC0BEC0", VA = "0xC0BEC0")]
			[DebuggerHidden]
			public <DistancePerimeter>d__46(int <>1__state)
			{
			}

			[Token(Token = "0x600039F")]
			[Address(RVA = "0xC0C654", Offset = "0xC0C654", VA = "0xC0C654", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60003A0")]
			[Address(RVA = "0xC0C670", Offset = "0xC0C670", VA = "0xC0C670", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60003A1")]
			[Address(RVA = "0xC0C92C", Offset = "0xC0C92C", VA = "0xC0C92C")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x60003A3")]
			[Address(RVA = "0xC0C9E4", Offset = "0xC0C9E4", VA = "0xC0C9E4", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x60003A5")]
			[Address(RVA = "0xC0CA80", Offset = "0xC0CA80", VA = "0xC0CA80", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<Coord> System.Collections.Generic.IEnumerable<TextureArrayInspector.Coord>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x60003A6")]
			[Address(RVA = "0xC0CB2C", Offset = "0xC0CB2C", VA = "0xC0CB2C", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x2000061")]
		[CompilerGenerated]
		private sealed class <DistanceArea>d__47 : IEnumerable<Coord>, IEnumerable, IEnumerator<Coord>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400028B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400028C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private Coord <>2__current;

			[Token(Token = "0x400028D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			private int <>l__initialThreadId;

			[Token(Token = "0x400028E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Coord <>4__this;

			[Token(Token = "0x400028F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Coord <>3__<>4__this;

			[Token(Token = "0x4000290")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private int maxDist;

			[Token(Token = "0x4000291")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public int <>3__maxDist;

			[Token(Token = "0x4000292")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int <i>5__2;

			[Token(Token = "0x4000293")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private IEnumerator<Coord> <>7__wrap2;

			[Token(Token = "0x170000A8")]
			private Coord System.Collections.Generic.IEnumerator<TextureArrayInspector.Coord>.Current
			{
				[Token(Token = "0x60003AB")]
				[Address(RVA = "0xC0CED4", Offset = "0xC0CED4", VA = "0xC0CED4", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return default(Coord);
				}
			}

			[Token(Token = "0x170000A9")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60003AD")]
				[Address(RVA = "0xC0CF1C", Offset = "0xC0CF1C", VA = "0xC0CF1C", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60003A7")]
			[Address(RVA = "0xC0BF80", Offset = "0xC0BF80", VA = "0xC0BF80")]
			[DebuggerHidden]
			public <DistanceArea>d__47(int <>1__state)
			{
			}

			[Token(Token = "0x60003A8")]
			[Address(RVA = "0xC0CB30", Offset = "0xC0CB30", VA = "0xC0CB30", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60003A9")]
			[Address(RVA = "0xC0CB4C", Offset = "0xC0CB4C", VA = "0xC0CB4C", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60003AA")]
			[Address(RVA = "0xC0CE24", Offset = "0xC0CE24", VA = "0xC0CE24")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x60003AC")]
			[Address(RVA = "0xC0CEDC", Offset = "0xC0CEDC", VA = "0xC0CEDC", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x60003AE")]
			[Address(RVA = "0xC0CF78", Offset = "0xC0CF78", VA = "0xC0CF78", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<Coord> System.Collections.Generic.IEnumerable<TextureArrayInspector.Coord>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x60003AF")]
			[Address(RVA = "0xC0D024", Offset = "0xC0D024", VA = "0xC0D024", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x2000062")]
		[CompilerGenerated]
		private sealed class <DistanceArea>d__48 : IEnumerable<Coord>, IEnumerable, IEnumerator<Coord>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000294")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000295")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private Coord <>2__current;

			[Token(Token = "0x4000296")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4000297")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Coord <>4__this;

			[Token(Token = "0x4000298")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Coord <>3__<>4__this;

			[Token(Token = "0x4000299")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private CoordRect rect;

			[Token(Token = "0x400029A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public CoordRect <>3__rect;

			[Token(Token = "0x400029B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private int <maxDist>5__2;

			[Token(Token = "0x400029C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			private int <i>5__3;

			[Token(Token = "0x400029D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private IEnumerator<Coord> <>7__wrap3;

			[Token(Token = "0x170000AA")]
			private Coord System.Collections.Generic.IEnumerator<TextureArrayInspector.Coord>.Current
			{
				[Token(Token = "0x60003B4")]
				[Address(RVA = "0xC0D5C0", Offset = "0xC0D5C0", VA = "0xC0D5C0", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return default(Coord);
				}
			}

			[Token(Token = "0x170000AB")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60003B6")]
				[Address(RVA = "0xC0D608", Offset = "0xC0D608", VA = "0xC0D608", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60003B0")]
			[Address(RVA = "0xC0C044", Offset = "0xC0C044", VA = "0xC0C044")]
			[DebuggerHidden]
			public <DistanceArea>d__48(int <>1__state)
			{
			}

			[Token(Token = "0x60003B1")]
			[Address(RVA = "0xC0D028", Offset = "0xC0D028", VA = "0xC0D028", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60003B2")]
			[Address(RVA = "0xC0D044", Offset = "0xC0D044", VA = "0xC0D044", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60003B3")]
			[Address(RVA = "0xC0D510", Offset = "0xC0D510", VA = "0xC0D510")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x60003B5")]
			[Address(RVA = "0xC0D5C8", Offset = "0xC0D5C8", VA = "0xC0D5C8", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x60003B7")]
			[Address(RVA = "0xC0D664", Offset = "0xC0D664", VA = "0xC0D664", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<Coord> System.Collections.Generic.IEnumerable<TextureArrayInspector.Coord>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x60003B8")]
			[Address(RVA = "0xC0D710", Offset = "0xC0D710", VA = "0xC0D710", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x2000063")]
		[CompilerGenerated]
		private sealed class <MultiDistanceArea>d__49 : IEnumerable<Coord>, IEnumerable, IEnumerator<Coord>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400029E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400029F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private Coord <>2__current;

			[Token(Token = "0x40002A0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			private int <>l__initialThreadId;

			[Token(Token = "0x40002A1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private Coord[] coords;

			[Token(Token = "0x40002A2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Coord[] <>3__coords;

			[Token(Token = "0x40002A3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private int maxDist;

			[Token(Token = "0x40002A4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public int <>3__maxDist;

			[Token(Token = "0x40002A5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int <c>5__2;

			[Token(Token = "0x40002A6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private int <i>5__3;

			[Token(Token = "0x40002A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private int <c>5__4;

			[Token(Token = "0x40002A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private IEnumerator<Coord> <>7__wrap4;

			[Token(Token = "0x170000AC")]
			private Coord System.Collections.Generic.IEnumerator<TextureArrayInspector.Coord>.Current
			{
				[Token(Token = "0x60003BD")]
				[Address(RVA = "0xC0DB80", Offset = "0xC0DB80", VA = "0xC0DB80", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return default(Coord);
				}
			}

			[Token(Token = "0x170000AD")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60003BF")]
				[Address(RVA = "0xC0DBC8", Offset = "0xC0DBC8", VA = "0xC0DBC8", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60003B9")]
			[Address(RVA = "0xC0C100", Offset = "0xC0C100", VA = "0xC0C100")]
			[DebuggerHidden]
			public <MultiDistanceArea>d__49(int <>1__state)
			{
			}

			[Token(Token = "0x60003BA")]
			[Address(RVA = "0xC0D714", Offset = "0xC0D714", VA = "0xC0D714", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60003BB")]
			[Address(RVA = "0xC0D730", Offset = "0xC0D730", VA = "0xC0D730", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60003BC")]
			[Address(RVA = "0xC0DAD0", Offset = "0xC0DAD0", VA = "0xC0DAD0")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x60003BE")]
			[Address(RVA = "0xC0DB88", Offset = "0xC0DB88", VA = "0xC0DB88", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x60003C0")]
			[Address(RVA = "0xC0DC24", Offset = "0xC0DC24", VA = "0xC0DC24", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<Coord> System.Collections.Generic.IEnumerable<TextureArrayInspector.Coord>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x60003C1")]
			[Address(RVA = "0xC0DCD0", Offset = "0xC0DCD0", VA = "0xC0DCD0", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x4000277")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int x;

		[Token(Token = "0x4000278")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int z;

		[Token(Token = "0x1700009F")]
		public int Minimal
		{
			[Token(Token = "0x6000375")]
			[Address(RVA = "0xC0B7DC", Offset = "0xC0B7DC", VA = "0xC0B7DC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000A0")]
		public int SqrMagnitude
		{
			[Token(Token = "0x6000376")]
			[Address(RVA = "0xC0B7EC", Offset = "0xC0B7EC", VA = "0xC0B7EC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000A1")]
		public UnityEngine.Vector3 vector3
		{
			[Token(Token = "0x6000377")]
			[Address(RVA = "0xC0B7FC", Offset = "0xC0B7FC", VA = "0xC0B7FC")]
			get
			{
				return default(UnityEngine.Vector3);
			}
		}

		[Token(Token = "0x170000A2")]
		public UnityEngine.Vector2 vector2
		{
			[Token(Token = "0x6000378")]
			[Address(RVA = "0xC0B810", Offset = "0xC0B810", VA = "0xC0B810")]
			get
			{
				return default(UnityEngine.Vector2);
			}
		}

		[Token(Token = "0x170000A3")]
		public static Coord zero
		{
			[Token(Token = "0x6000379")]
			[Address(RVA = "0xC0B820", Offset = "0xC0B820", VA = "0xC0B820")]
			get
			{
				return default(Coord);
			}
		}

		[Token(Token = "0x6000365")]
		[Address(RVA = "0xC0B590", Offset = "0xC0B590", VA = "0xC0B590")]
		public static bool operator >(Coord c1, Coord c2)
		{
			return default(bool);
		}

		[Token(Token = "0x6000366")]
		[Address(RVA = "0xC0B5B0", Offset = "0xC0B5B0", VA = "0xC0B5B0")]
		public static bool operator <(Coord c1, Coord c2)
		{
			return default(bool);
		}

		[Token(Token = "0x6000367")]
		[Address(RVA = "0xC0B5D0", Offset = "0xC0B5D0", VA = "0xC0B5D0")]
		public static bool operator ==(Coord c1, Coord c2)
		{
			return default(bool);
		}

		[Token(Token = "0x6000368")]
		[Address(RVA = "0xC0B5F0", Offset = "0xC0B5F0", VA = "0xC0B5F0")]
		public static bool operator !=(Coord c1, Coord c2)
		{
			return default(bool);
		}

		[Token(Token = "0x6000369")]
		[Address(RVA = "0xC0B610", Offset = "0xC0B610", VA = "0xC0B610")]
		public static Coord operator +(Coord c, int s)
		{
			return default(Coord);
		}

		[Token(Token = "0x600036A")]
		[Address(RVA = "0xC0B62C", Offset = "0xC0B62C", VA = "0xC0B62C")]
		public static Coord operator +(Coord c1, Coord c2)
		{
			return default(Coord);
		}

		[Token(Token = "0x600036B")]
		[Address(RVA = "0xC0B644", Offset = "0xC0B644", VA = "0xC0B644")]
		public static Coord operator -(Coord c, int s)
		{
			return default(Coord);
		}

		[Token(Token = "0x600036C")]
		[Address(RVA = "0xC0B658", Offset = "0xC0B658", VA = "0xC0B658")]
		public static Coord operator -(Coord c1, Coord c2)
		{
			return default(Coord);
		}

		[Token(Token = "0x600036D")]
		[Address(RVA = "0xC0B670", Offset = "0xC0B670", VA = "0xC0B670")]
		public static Coord operator *(Coord c, int s)
		{
			return default(Coord);
		}

		[Token(Token = "0x600036E")]
		[Address(RVA = "0xC0B684", Offset = "0xC0B684", VA = "0xC0B684")]
		public static UnityEngine.Vector2 operator *(Coord c, UnityEngine.Vector2 s)
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x600036F")]
		[Address(RVA = "0xC0B69C", Offset = "0xC0B69C", VA = "0xC0B69C")]
		public static UnityEngine.Vector3 operator *(Coord c, UnityEngine.Vector3 s)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6000370")]
		[Address(RVA = "0xC0B6B4", Offset = "0xC0B6B4", VA = "0xC0B6B4")]
		public static Coord operator *(Coord c, float s)
		{
			return default(Coord);
		}

		[Token(Token = "0x6000371")]
		[Address(RVA = "0xC0B6FC", Offset = "0xC0B6FC", VA = "0xC0B6FC")]
		public static Coord operator /(Coord c, int s)
		{
			return default(Coord);
		}

		[Token(Token = "0x6000372")]
		[Address(RVA = "0xC0B710", Offset = "0xC0B710", VA = "0xC0B710")]
		public static Coord operator /(Coord c, float s)
		{
			return default(Coord);
		}

		[Token(Token = "0x6000373")]
		[Address(RVA = "0xC0B758", Offset = "0xC0B758", VA = "0xC0B758", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000374")]
		[Address(RVA = "0xC0B7C8", Offset = "0xC0B7C8", VA = "0xC0B7C8", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x600037A")]
		[Address(RVA = "0xC0B624", Offset = "0xC0B624", VA = "0xC0B624")]
		public Coord(int x, int z)
		{
		}

		[Token(Token = "0x600037B")]
		[Address(RVA = "0xC0B828", Offset = "0xC0B828", VA = "0xC0B828")]
		public static Coord PickCell(int ix, int iz, int cellRes)
		{
			return default(Coord);
		}

		[Token(Token = "0x600037C")]
		[Address(RVA = "0xC0B870", Offset = "0xC0B870", VA = "0xC0B870")]
		public static Coord PickCell(Coord c, int cellRes)
		{
			return default(Coord);
		}

		[Token(Token = "0x600037D")]
		[Address(RVA = "0xC0B8BC", Offset = "0xC0B8BC", VA = "0xC0B8BC")]
		public static Coord PickCellByPos(float fx, float fz, float cellSize = 1f)
		{
			return default(Coord);
		}

		[Token(Token = "0x600037E")]
		[Address(RVA = "0xC0B934", Offset = "0xC0B934", VA = "0xC0B934")]
		public static Coord PickCellByPos(UnityEngine.Vector3 v, float cellSize = 1f)
		{
			return default(Coord);
		}

		[Token(Token = "0x600037F")]
		[Address(RVA = "0xC0B940", Offset = "0xC0B940", VA = "0xC0B940")]
		public static Coord FloorToCoord(float fx, float fz)
		{
			return default(Coord);
		}

		[Token(Token = "0x6000380")]
		[Address(RVA = "0xC0B9A4", Offset = "0xC0B9A4", VA = "0xC0B9A4")]
		public void ClampPositive()
		{
		}

		[Token(Token = "0x6000381")]
		[Address(RVA = "0xC0B9B8", Offset = "0xC0B9B8", VA = "0xC0B9B8")]
		public void ClampByRect(CoordRect rect)
		{
		}

		[Token(Token = "0x6000382")]
		[Address(RVA = "0xC0BA20", Offset = "0xC0BA20", VA = "0xC0BA20")]
		public static Coord Min(Coord c1, Coord c2)
		{
			return default(Coord);
		}

		[Token(Token = "0x6000383")]
		[Address(RVA = "0xC0BA40", Offset = "0xC0BA40", VA = "0xC0BA40")]
		public static Coord Max(Coord c1, Coord c2)
		{
			return default(Coord);
		}

		[Token(Token = "0x6000384")]
		[Address(RVA = "0xC0BA60", Offset = "0xC0BA60", VA = "0xC0BA60")]
		public Coord BaseFloor(int cellSize)
		{
			return default(Coord);
		}

		[Token(Token = "0x6000385")]
		[Address(RVA = "0xC0BAA4", Offset = "0xC0BAA4", VA = "0xC0BAA4")]
		public Coord BaseCeil(int cellSize)
		{
			return default(Coord);
		}

		[Token(Token = "0x6000386")]
		[Address(RVA = "0xC0BAF0", Offset = "0xC0BAF0", VA = "0xC0BAF0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000387")]
		[Address(RVA = "0xC0BCB4", Offset = "0xC0BCB4", VA = "0xC0BCB4")]
		public static int DistanceAxisAligned(Coord c1, Coord c2)
		{
			return default(int);
		}

		[Token(Token = "0x6000388")]
		[Address(RVA = "0xC0BCD8", Offset = "0xC0BCD8", VA = "0xC0BCD8")]
		public static int DistanceAxisAligned(Coord c, CoordRect rect)
		{
			return default(int);
		}

		[Token(Token = "0x6000389")]
		[Address(RVA = "0xC0BD20", Offset = "0xC0BD20", VA = "0xC0BD20")]
		public static float Distance(Coord c1, Coord c2)
		{
			return default(float);
		}

		[Token(Token = "0x600038A")]
		[Address(RVA = "0xC0BD44", Offset = "0xC0BD44", VA = "0xC0BD44")]
		public static float DistanceSq(Coord c1, Coord c2)
		{
			return default(float);
		}

		[Token(Token = "0x600038B")]
		[Address(RVA = "0xC0BD6C", Offset = "0xC0BD6C", VA = "0xC0BD6C")]
		[IteratorStateMachine(typeof(<DistanceStep>d__45))]
		public IEnumerable<Coord> DistanceStep(int i, int dist)
		{
			return null;
		}

		[Token(Token = "0x600038C")]
		[Address(RVA = "0xC0BE34", Offset = "0xC0BE34", VA = "0xC0BE34")]
		[IteratorStateMachine(typeof(<DistancePerimeter>d__46))]
		public IEnumerable<Coord> DistancePerimeter(int dist)
		{
			return null;
		}

		[Token(Token = "0x600038D")]
		[Address(RVA = "0xC0BEF4", Offset = "0xC0BEF4", VA = "0xC0BEF4")]
		[IteratorStateMachine(typeof(<DistanceArea>d__47))]
		public IEnumerable<Coord> DistanceArea(int maxDist)
		{
			return null;
		}

		[Token(Token = "0x600038E")]
		[Address(RVA = "0xC0BFB4", Offset = "0xC0BFB4", VA = "0xC0BFB4")]
		[IteratorStateMachine(typeof(<DistanceArea>d__48))]
		public IEnumerable<Coord> DistanceArea(CoordRect rect)
		{
			return null;
		}

		[Token(Token = "0x600038F")]
		[Address(RVA = "0xC0C078", Offset = "0xC0C078", VA = "0xC0C078")]
		[IteratorStateMachine(typeof(<MultiDistanceArea>d__49))]
		public static IEnumerable<Coord> MultiDistanceArea(Coord[] coords, int maxDist)
		{
			return null;
		}

		[Token(Token = "0x6000390")]
		[Address(RVA = "0xC0C134", Offset = "0xC0C134", VA = "0xC0C134")]
		public UnityEngine.Vector3 ToVector3(float cellSize)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6000391")]
		[Address(RVA = "0xC0C154", Offset = "0xC0C154", VA = "0xC0C154")]
		public UnityEngine.Vector2 ToVector2(float cellSize)
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x6000392")]
		[Address(RVA = "0xC0C170", Offset = "0xC0C170", VA = "0xC0C170")]
		public Rect ToRect(float cellSize)
		{
			return default(Rect);
		}

		[Token(Token = "0x6000393")]
		[Address(RVA = "0xC0C1B8", Offset = "0xC0C1B8", VA = "0xC0C1B8")]
		public CoordRect ToCoordRect(int cellSize)
		{
			return default(CoordRect);
		}

		[Token(Token = "0x6000394")]
		[Address(RVA = "0xC0C1F0", Offset = "0xC0C1F0", VA = "0xC0C1F0", Slot = "4")]
		public string Encode()
		{
			return null;
		}

		[Token(Token = "0x6000395")]
		[Address(RVA = "0xC0C280", Offset = "0xC0C280", VA = "0xC0C280", Slot = "5")]
		public void Decode(string[] lineMembers)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000064")]
	public struct CoordRect : CustomSerialization.IStruct
	{
		[Token(Token = "0x2000065")]
		[CompilerGenerated]
		private sealed class <Cells>d__58 : IEnumerable<Coord>, IEnumerable, IEnumerator<Coord>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40002AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40002AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private Coord <>2__current;

			[Token(Token = "0x40002AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			private int <>l__initialThreadId;

			[Token(Token = "0x40002AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public CoordRect <>4__this;

			[Token(Token = "0x40002AF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public CoordRect <>3__<>4__this;

			[Token(Token = "0x40002B0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private int cellSize;

			[Token(Token = "0x40002B1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			public int <>3__cellSize;

			[Token(Token = "0x40002B2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private Coord <min>5__2;

			[Token(Token = "0x40002B3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private Coord <max>5__3;

			[Token(Token = "0x40002B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private int <x>5__4;

			[Token(Token = "0x40002B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			private int <z>5__5;

			[Token(Token = "0x170000B4")]
			private Coord System.Collections.Generic.IEnumerator<TextureArrayInspector.Coord>.Current
			{
				[Token(Token = "0x60003FC")]
				[Address(RVA = "0xC0F5FC", Offset = "0xC0F5FC", VA = "0xC0F5FC", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return default(Coord);
				}
			}

			[Token(Token = "0x170000B5")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60003FE")]
				[Address(RVA = "0xC0F644", Offset = "0xC0F644", VA = "0xC0F644", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60003F9")]
			[Address(RVA = "0xC0F01C", Offset = "0xC0F01C", VA = "0xC0F01C")]
			[DebuggerHidden]
			public <Cells>d__58(int <>1__state)
			{
			}

			[Token(Token = "0x60003FA")]
			[Address(RVA = "0xC0F52C", Offset = "0xC0F52C", VA = "0xC0F52C", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60003FB")]
			[Address(RVA = "0xC0F530", Offset = "0xC0F530", VA = "0xC0F530", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60003FD")]
			[Address(RVA = "0xC0F604", Offset = "0xC0F604", VA = "0xC0F604", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x60003FF")]
			[Address(RVA = "0xC0F6A0", Offset = "0xC0F6A0", VA = "0xC0F6A0", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<Coord> System.Collections.Generic.IEnumerable<TextureArrayInspector.Coord>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6000400")]
			[Address(RVA = "0xC0F758", Offset = "0xC0F758", VA = "0xC0F758", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x40002A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Coord offset;

		[Token(Token = "0x40002AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Coord size;

		[Token(Token = "0x170000AE")]
		public bool isZero
		{
			[Token(Token = "0x60003C2")]
			[Address(RVA = "0xC0DCD4", Offset = "0xC0DCD4", VA = "0xC0DCD4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000AF")]
		public Rect rect
		{
			[Token(Token = "0x60003C7")]
			[Address(RVA = "0xC0DE14", Offset = "0xC0DE14", VA = "0xC0DE14")]
			get
			{
				return default(Rect);
			}
		}

		[Token(Token = "0x170000B0")]
		public Coord Max
		{
			[Token(Token = "0x60003CF")]
			[Address(RVA = "0xC0D4AC", Offset = "0xC0D4AC", VA = "0xC0D4AC")]
			get
			{
				return default(Coord);
			}
			[Token(Token = "0x60003D0")]
			[Address(RVA = "0xC0E16C", Offset = "0xC0E16C", VA = "0xC0E16C")]
			set
			{
			}
		}

		[Token(Token = "0x170000B1")]
		public Coord Min
		{
			[Token(Token = "0x60003D1")]
			[Address(RVA = "0xC0E18C", Offset = "0xC0E18C", VA = "0xC0E18C")]
			get
			{
				return default(Coord);
			}
			[Token(Token = "0x60003D2")]
			[Address(RVA = "0xC0E194", Offset = "0xC0E194", VA = "0xC0E194")]
			set
			{
			}
		}

		[Token(Token = "0x170000B2")]
		public Coord Center
		{
			[Token(Token = "0x60003D3")]
			[Address(RVA = "0xC0E19C", Offset = "0xC0E19C", VA = "0xC0E19C")]
			get
			{
				return default(Coord);
			}
		}

		[Token(Token = "0x170000B3")]
		public int Count
		{
			[Token(Token = "0x60003D4")]
			[Address(RVA = "0xC0E1CC", Offset = "0xC0E1CC", VA = "0xC0E1CC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60003C3")]
		[Address(RVA = "0xC0DCF4", Offset = "0xC0DCF4", VA = "0xC0DCF4")]
		public CoordRect(Coord offset, Coord size)
		{
		}

		[Token(Token = "0x60003C4")]
		[Address(RVA = "0xC0C1D8", Offset = "0xC0C1D8", VA = "0xC0C1D8")]
		public CoordRect(int offsetX, int offsetZ, int sizeX, int sizeZ)
		{
		}

		[Token(Token = "0x60003C5")]
		[Address(RVA = "0xC0DCFC", Offset = "0xC0DCFC", VA = "0xC0DCFC")]
		public CoordRect(float offsetX, float offsetZ, float sizeX, float sizeZ)
		{
		}

		[Token(Token = "0x60003C6")]
		[Address(RVA = "0xC0DD54", Offset = "0xC0DD54", VA = "0xC0DD54")]
		public CoordRect(Rect r)
		{
		}

		[Token(Token = "0x60003C8")]
		[Address(RVA = "0xC0DE58", Offset = "0xC0DE58", VA = "0xC0DE58")]
		public static CoordRect PickIntersectingCells(CoordRect rect, int cellRes)
		{
			return default(CoordRect);
		}

		[Token(Token = "0x60003C9")]
		[Address(RVA = "0xC0DED8", Offset = "0xC0DED8", VA = "0xC0DED8")]
		public static CoordRect PickIntersectingCellsByPos(float rectMinX, float rectMinZ, float rectMaxX, float rectMaxZ, float cellSize)
		{
			return default(CoordRect);
		}

		[Token(Token = "0x60003CA")]
		[Address(RVA = "0xC0DFC8", Offset = "0xC0DFC8", VA = "0xC0DFC8")]
		public static CoordRect PickIntersectingCellsByPos(UnityEngine.Vector3 pos, float range, float cellSize = 1f)
		{
			return default(CoordRect);
		}

		[Token(Token = "0x60003CB")]
		[Address(RVA = "0xC0DFE4", Offset = "0xC0DFE4", VA = "0xC0DFE4")]
		public static CoordRect PickIntersectingCellsByPos(Rect rect, float cellSize = 1f)
		{
			return default(CoordRect);
		}

		[Token(Token = "0x60003CC")]
		[Address(RVA = "0xC0E090", Offset = "0xC0E090", VA = "0xC0E090")]
		public int GetPos(int x, int z)
		{
			return default(int);
		}

		[Token(Token = "0x60003CD")]
		[Address(RVA = "0xC0E0A8", Offset = "0xC0E0A8", VA = "0xC0E0A8")]
		public int GetPos(UnityEngine.Vector2 v)
		{
			return default(int);
		}

		[Token(Token = "0x60003CE")]
		[Address(RVA = "0xC0E108", Offset = "0xC0E108", VA = "0xC0E108")]
		public int GetPos(float x, float z)
		{
			return default(int);
		}

		[Token(Token = "0x60003D5")]
		[Address(RVA = "0xC0E1D8", Offset = "0xC0E1D8", VA = "0xC0E1D8")]
		public static bool operator >(CoordRect c1, CoordRect c2)
		{
			return default(bool);
		}

		[Token(Token = "0x60003D6")]
		[Address(RVA = "0xC0E1F8", Offset = "0xC0E1F8", VA = "0xC0E1F8")]
		public static bool operator <(CoordRect c1, CoordRect c2)
		{
			return default(bool);
		}

		[Token(Token = "0x60003D7")]
		[Address(RVA = "0xC0E218", Offset = "0xC0E218", VA = "0xC0E218")]
		public static bool operator ==(CoordRect c1, CoordRect c2)
		{
			return default(bool);
		}

		[Token(Token = "0x60003D8")]
		[Address(RVA = "0xC0E258", Offset = "0xC0E258", VA = "0xC0E258")]
		public static bool operator !=(CoordRect c1, CoordRect c2)
		{
			return default(bool);
		}

		[Token(Token = "0x60003D9")]
		[Address(RVA = "0xC0E298", Offset = "0xC0E298", VA = "0xC0E298")]
		public static CoordRect operator *(CoordRect c, int s)
		{
			return default(CoordRect);
		}

		[Token(Token = "0x60003DA")]
		[Address(RVA = "0xC0E2BC", Offset = "0xC0E2BC", VA = "0xC0E2BC")]
		public static CoordRect operator *(CoordRect c, float s)
		{
			return default(CoordRect);
		}

		[Token(Token = "0x60003DB")]
		[Address(RVA = "0xC0E338", Offset = "0xC0E338", VA = "0xC0E338")]
		public static CoordRect operator /(CoordRect c, int s)
		{
			return default(CoordRect);
		}

		[Token(Token = "0x60003DC")]
		[Address(RVA = "0xC0E35C", Offset = "0xC0E35C", VA = "0xC0E35C")]
		public CoordRect MapSized(int resolution)
		{
			return default(CoordRect);
		}

		[Token(Token = "0x60003DD")]
		[Address(RVA = "0xC0E554", Offset = "0xC0E554", VA = "0xC0E554")]
		public void Expand(int v)
		{
		}

		[Token(Token = "0x60003DE")]
		[Address(RVA = "0xC0E574", Offset = "0xC0E574", VA = "0xC0E574")]
		public CoordRect Expanded(int v)
		{
			return default(CoordRect);
		}

		[Token(Token = "0x60003DF")]
		[Address(RVA = "0xC0E59C", Offset = "0xC0E59C", VA = "0xC0E59C")]
		public void Contract(int v)
		{
		}

		[Token(Token = "0x60003E0")]
		[Address(RVA = "0xC0E5BC", Offset = "0xC0E5BC", VA = "0xC0E5BC")]
		public CoordRect Contracted(int v)
		{
			return default(CoordRect);
		}

		[Token(Token = "0x60003E1")]
		[Address(RVA = "0xC0E5E4", Offset = "0xC0E5E4", VA = "0xC0E5E4", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60003E2")]
		[Address(RVA = "0xC0E65C", Offset = "0xC0E65C", VA = "0xC0E65C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60003E3")]
		[Address(RVA = "0xC0E68C", Offset = "0xC0E68C", VA = "0xC0E68C")]
		public void Clamp(Coord min, Coord max)
		{
		}

		[Token(Token = "0x60003E4")]
		[Address(RVA = "0xC0E6F8", Offset = "0xC0E6F8", VA = "0xC0E6F8")]
		public static CoordRect Intersect(CoordRect c1, CoordRect c2)
		{
			return default(CoordRect);
		}

		[Token(Token = "0x60003E5")]
		[Address(RVA = "0xC0E738", Offset = "0xC0E738", VA = "0xC0E738")]
		public static bool IsIntersecting(CoordRect c1, CoordRect c2)
		{
			return default(bool);
		}

		[Token(Token = "0x60003E6")]
		[Address(RVA = "0xC0E8B4", Offset = "0xC0E8B4", VA = "0xC0E8B4")]
		public static CoordRect Combine(CoordRect[] rects)
		{
			return default(CoordRect);
		}

		[Token(Token = "0x60003E7")]
		[Address(RVA = "0xC0E99C", Offset = "0xC0E99C", VA = "0xC0E99C")]
		public Coord CoordByNum(int num)
		{
			return default(Coord);
		}

		[Token(Token = "0x60003E8")]
		[Address(RVA = "0xC0E878", Offset = "0xC0E878", VA = "0xC0E878")]
		public bool Contains(int x, int z)
		{
			return default(bool);
		}

		[Token(Token = "0x60003E9")]
		[Address(RVA = "0xC0E9BC", Offset = "0xC0E9BC", VA = "0xC0E9BC")]
		public bool Contains(float x, float z)
		{
			return default(bool);
		}

		[Token(Token = "0x60003EA")]
		[Address(RVA = "0xC0EA10", Offset = "0xC0EA10", VA = "0xC0EA10")]
		public bool Contains(float x, float z, float margins)
		{
			return default(bool);
		}

		[Token(Token = "0x60003EB")]
		[Address(RVA = "0xC0EA6C", Offset = "0xC0EA6C", VA = "0xC0EA6C")]
		public bool CheckInRange(float x, float z)
		{
			return default(bool);
		}

		[Token(Token = "0x60003EC")]
		[Address(RVA = "0xC0EAC0", Offset = "0xC0EAC0", VA = "0xC0EAC0")]
		public bool CheckInRange(int x, int z)
		{
			return default(bool);
		}

		[Token(Token = "0x60003ED")]
		[Address(RVA = "0xC0D4C8", Offset = "0xC0D4C8", VA = "0xC0D4C8")]
		public bool CheckInRange(Coord coord)
		{
			return default(bool);
		}

		[Token(Token = "0x60003EE")]
		[Address(RVA = "0xC0EAFC", Offset = "0xC0EAFC", VA = "0xC0EAFC")]
		public bool CheckInRangeAndBounds(int x, int z)
		{
			return default(bool);
		}

		[Token(Token = "0x60003EF")]
		[Address(RVA = "0xC0EB48", Offset = "0xC0EB48", VA = "0xC0EB48")]
		public bool CheckInRangeAndBounds(Coord coord)
		{
			return default(bool);
		}

		[Token(Token = "0x60003F0")]
		[Address(RVA = "0xC0EB98", Offset = "0xC0EB98", VA = "0xC0EB98")]
		public bool Contains(CoordRect r)
		{
			return default(bool);
		}

		[Token(Token = "0x60003F1")]
		[Address(RVA = "0xC0EBEC", Offset = "0xC0EBEC", VA = "0xC0EBEC")]
		public bool ContainsOrIntersects(CoordRect r)
		{
			return default(bool);
		}

		[Token(Token = "0x60003F2")]
		[Address(RVA = "0xC0EC50", Offset = "0xC0EC50", VA = "0xC0EC50")]
		public bool Divisible(float factor)
		{
			return default(bool);
		}

		[Token(Token = "0x60003F3")]
		[Address(RVA = "0xC0ECD4", Offset = "0xC0ECD4", VA = "0xC0ECD4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60003F4")]
		[Address(RVA = "0xC0EF90", Offset = "0xC0EF90", VA = "0xC0EF90")]
		[IteratorStateMachine(typeof(<Cells>d__58))]
		public IEnumerable<Coord> Cells(int cellSize)
		{
			return null;
		}

		[Token(Token = "0x60003F5")]
		[Address(RVA = "0xC0F050", Offset = "0xC0F050", VA = "0xC0F050")]
		public CoordRect Approximate(int val)
		{
			return default(CoordRect);
		}

		[Token(Token = "0x60003F6")]
		[Address(RVA = "0xC0F0EC", Offset = "0xC0F0EC", VA = "0xC0F0EC")]
		public void DrawGizmo()
		{
		}

		[Token(Token = "0x60003F7")]
		[Address(RVA = "0xC0F0F0", Offset = "0xC0F0F0", VA = "0xC0F0F0", Slot = "4")]
		public string Encode()
		{
			return null;
		}

		[Token(Token = "0x60003F8")]
		[Address(RVA = "0xC0F344", Offset = "0xC0F344", VA = "0xC0F344", Slot = "5")]
		public void Decode(string[] lineMembers)
		{
		}
	}
	[Token(Token = "0x2000066")]
	public static class CustomSerialization
	{
		[Token(Token = "0x2000067")]
		public interface IStruct
		{
			[Token(Token = "0x6000408")]
			string Encode();

			[Token(Token = "0x6000409")]
			void Decode(string[] lineMembers);
		}

		[Token(Token = "0x2000068")]
		public interface IStructLink
		{
			[Token(Token = "0x600040A")]
			string Encode(Func<object, int> writeClass);

			[Token(Token = "0x600040B")]
			void Decode(string[] lineMembers, Func<int, object> readClass);
		}

		[Token(Token = "0x2000069")]
		private struct Value
		{
			[Token(Token = "0x40002B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public string name;

			[Token(Token = "0x40002B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Type type;

			[Token(Token = "0x40002B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public object obj;
		}

		[Token(Token = "0x200006A")]
		[CompilerGenerated]
		private sealed class <Values>d__4 : IEnumerable<Value>, IEnumerable, IEnumerator<Value>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40002B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40002BA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private Value <>2__current;

			[Token(Token = "0x40002BB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private int <>l__initialThreadId;

			[Token(Token = "0x40002BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private object obj;

			[Token(Token = "0x40002BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public object <>3__obj;

			[Token(Token = "0x40002BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private Type <objType>5__2;

			[Token(Token = "0x40002BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private Type <elementType>5__3;

			[Token(Token = "0x40002C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private Array <array>5__4;

			[Token(Token = "0x40002C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private int <i>5__5;

			[Token(Token = "0x40002C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			private IEnumerator<FieldInfo> <>7__wrap5;

			[Token(Token = "0x40002C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			private IEnumerator<PropertyInfo> <>7__wrap6;

			[Token(Token = "0x170000B6")]
			private Value System.Collections.Generic.IEnumerator<TextureArrayInspector.CustomSerialization.Value>.Current
			{
				[Token(Token = "0x6000411")]
				[Address(RVA = "0xC1833C", Offset = "0xC1833C", VA = "0xC1833C", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return default(Value);
				}
			}

			[Token(Token = "0x170000B7")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000413")]
				[Address(RVA = "0xC18390", Offset = "0xC18390", VA = "0xC18390", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600040C")]
			[Address(RVA = "0xC0FC54", Offset = "0xC0FC54", VA = "0xC0FC54")]
			[DebuggerHidden]
			public <Values>d__4(int <>1__state)
			{
			}

			[Token(Token = "0x600040D")]
			[Address(RVA = "0xC17978", Offset = "0xC17978", VA = "0xC17978", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600040E")]
			[Address(RVA = "0xC179B0", Offset = "0xC179B0", VA = "0xC179B0", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600040F")]
			[Address(RVA = "0xC181DC", Offset = "0xC181DC", VA = "0xC181DC")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6000410")]
			[Address(RVA = "0xC1828C", Offset = "0xC1828C", VA = "0xC1828C")]
			private void <>m__Finally2()
			{
			}

			[Token(Token = "0x6000412")]
			[Address(RVA = "0xC18350", Offset = "0xC18350", VA = "0xC18350", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6000414")]
			[Address(RVA = "0xC183F4", Offset = "0xC183F4", VA = "0xC183F4", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<Value> System.Collections.Generic.IEnumerable<TextureArrayInspector.CustomSerialization.Value>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6000415")]
			[Address(RVA = "0xC18498", Offset = "0xC18498", VA = "0xC18498", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x6000401")]
		[Address(RVA = "0xC0F75C", Offset = "0xC0F75C", VA = "0xC0F75C")]
		public static Type GetStandardAssembliesType(string s)
		{
			return null;
		}

		[Token(Token = "0x6000402")]
		[Address(RVA = "0xC0FBDC", Offset = "0xC0FBDC", VA = "0xC0FBDC")]
		[IteratorStateMachine(typeof(<Values>d__4))]
		private static IEnumerable<Value> Values(object obj)
		{
			return null;
		}

		[Token(Token = "0x6000403")]
		[Address(RVA = "0xC0FC88", Offset = "0xC0FC88", VA = "0xC0FC88")]
		public static int WriteClass(object obj, List<string> classes, List<UnityEngine.Object> objects, List<float> floats, List<object> references)
		{
			return default(int);
		}

		[Token(Token = "0x6000404")]
		[Address(RVA = "0xC146BC", Offset = "0xC146BC", VA = "0xC146BC")]
		public static object ReadClass(int slotNum, List<string> classes, List<UnityEngine.Object> objects, List<float> floats, List<object> references)
		{
			return null;
		}

		[Token(Token = "0x6000405")]
		[Address(RVA = "0xC170D8", Offset = "0xC170D8", VA = "0xC170D8")]
		public static object DeepCopy(object src)
		{
			return null;
		}

		[Token(Token = "0x6000406")]
		[Address(RVA = "0xC17258", Offset = "0xC17258", VA = "0xC17258")]
		public static string ExportXML(List<string> classes, List<UnityEngine.Object> objects, List<float> floats)
		{
			return null;
		}

		[Token(Token = "0x6000407")]
		[Address(RVA = "0xC1746C", Offset = "0xC1746C", VA = "0xC1746C")]
		public static void ImportXML(string xml, out List<string> classes, out List<UnityEngine.Object> objects, out List<float> floats)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200006D")]
	public class Matrix : Matrix2<float>
	{
		[Token(Token = "0x200006E")]
		public enum WrapMode
		{
			[Token(Token = "0x40002CF")]
			Once,
			[Token(Token = "0x40002D0")]
			Clamp,
			[Token(Token = "0x40002D1")]
			Tile,
			[Token(Token = "0x40002D2")]
			PingPong
		}

		[Token(Token = "0x200006F")]
		public class Stacker
		{
			[Token(Token = "0x40002D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public CoordRect smallRect;

			[Token(Token = "0x40002D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public CoordRect bigRect;

			[Token(Token = "0x40002D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public bool preserveDetail;

			[Token(Token = "0x40002D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private Matrix downscaled;

			[Token(Token = "0x40002D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private Matrix upscaled;

			[Token(Token = "0x40002D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private Matrix difference;

			[Token(Token = "0x40002D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private bool isDownscaled;

			[Token(Token = "0x170000B8")]
			public Matrix matrix
			{
				[Token(Token = "0x6000460")]
				[Address(RVA = "0xC1F308", Offset = "0xC1F308", VA = "0xC1F308")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600045F")]
			[Address(RVA = "0xC1F1BC", Offset = "0xC1F1BC", VA = "0xC1F1BC")]
			public Stacker(CoordRect smallRect, CoordRect bigRect)
			{
			}

			[Token(Token = "0x6000461")]
			[Address(RVA = "0xC1F324", Offset = "0xC1F324", VA = "0xC1F324")]
			public void ToSmall()
			{
			}

			[Token(Token = "0x6000462")]
			[Address(RVA = "0xC1F3DC", Offset = "0xC1F3DC", VA = "0xC1F3DC")]
			public void ToBig()
			{
			}
		}

		[Token(Token = "0x600041A")]
		[Address(RVA = "0xC184C4", Offset = "0xC184C4", VA = "0xC184C4")]
		public float GetInterpolatedValue(UnityEngine.Vector2 pos)
		{
			return default(float);
		}

		[Token(Token = "0x600041B")]
		[Address(RVA = "0xC1868C", Offset = "0xC1868C", VA = "0xC1868C")]
		public float GetAveragedValue(int x, int z, int steps)
		{
			return default(float);
		}

		[Token(Token = "0x600041C")]
		[Address(RVA = "0xC18784", Offset = "0xC18784", VA = "0xC18784")]
		public Matrix()
		{
		}

		[Token(Token = "0x600041D")]
		[Address(RVA = "0xC18804", Offset = "0xC18804", VA = "0xC18804")]
		public Matrix(CoordRect rect, [Optional] float[] array)
		{
		}

		[Token(Token = "0x600041E")]
		[Address(RVA = "0xC18970", Offset = "0xC18970", VA = "0xC18970")]
		public Matrix(Coord offset, Coord size, [Optional] float[] array)
		{
		}

		[Token(Token = "0x600041F")]
		[Address(RVA = "0xC18ADC", Offset = "0xC18ADC", VA = "0xC18ADC")]
		public Matrix(Texture2D texture)
		{
		}

		[Token(Token = "0x6000420")]
		[Address(RVA = "0xC18D4C", Offset = "0xC18D4C", VA = "0xC18D4C", Slot = "5")]
		public override object Clone()
		{
			return null;
		}

		[Token(Token = "0x6000421")]
		[Address(RVA = "0xC18E34", Offset = "0xC18E34", VA = "0xC18E34")]
		public Matrix Copy([Optional] Matrix result)
		{
			return null;
		}

		[Token(Token = "0x6000422")]
		[Address(RVA = "0xC18F28", Offset = "0xC18F28", VA = "0xC18F28")]
		public bool[] InRect([Optional] CoordRect area)
		{
			return null;
		}

		[Token(Token = "0x6000423")]
		[Address(RVA = "0xC19044", Offset = "0xC19044", VA = "0xC19044")]
		public Texture2D ToTexture()
		{
			return null;
		}

		[Token(Token = "0x6000424")]
		[Address(RVA = "0xC1904C", Offset = "0xC1904C", VA = "0xC1904C")]
		public Texture2D ToTexture(int width, int height)
		{
			return null;
		}

		[Token(Token = "0x6000425")]
		[Address(RVA = "0xC190DC", Offset = "0xC190DC", VA = "0xC190DC")]
		public void WriteTexture(Texture2D texture)
		{
		}

		[Token(Token = "0x6000426")]
		[Address(RVA = "0xC190EC", Offset = "0xC190EC", VA = "0xC190EC")]
		public void WriteIntersectingTexture(Texture2D texture, int textureOffsetX, int textureOffsetZ, float rangeMin = 0f, float rangeMax = 1f)
		{
		}

		[Token(Token = "0x6000427")]
		[Address(RVA = "0xC192FC", Offset = "0xC192FC", VA = "0xC192FC")]
		public void WriteTextureInterpolated(Texture2D texture, CoordRect textureRect, WrapMode wrap = WrapMode.Once, float rangeMin = 0f, float rangeMax = 1f)
		{
		}

		[Token(Token = "0x6000428")]
		[Address(RVA = "0xC199CC", Offset = "0xC199CC", VA = "0xC199CC")]
		public void ReadArrayDirect(float[,] array)
		{
		}

		[Token(Token = "0x6000429")]
		[Address(RVA = "0xC19AB4", Offset = "0xC19AB4", VA = "0xC19AB4")]
		public void ReadArrayResize(float[,] array)
		{
		}

		[Token(Token = "0x600042A")]
		[Address(RVA = "0xC19C04", Offset = "0xC19C04", VA = "0xC19C04")]
		public void Fill(float[,] array, CoordRect arrayRect)
		{
		}

		[Token(Token = "0x600042B")]
		[Address(RVA = "0xC19D40", Offset = "0xC19D40", VA = "0xC19D40")]
		public void Pour(float[,] array, CoordRect arrayRect)
		{
		}

		[Token(Token = "0x600042C")]
		[Address(RVA = "0xC19E7C", Offset = "0xC19E7C", VA = "0xC19E7C")]
		public void Pour(float[,,] array, int channel, CoordRect arrayRect)
		{
		}

		[Token(Token = "0x600042D")]
		[Address(RVA = "0xC19FE0", Offset = "0xC19FE0", VA = "0xC19FE0")]
		public float[,] ReadHeighmap(TerrainData data, float height = 1f)
		{
			return null;
		}

		[Token(Token = "0x600042E")]
		[Address(RVA = "0xC1A1A8", Offset = "0xC1A1A8", VA = "0xC1A1A8")]
		public void WriteHeightmap(TerrainData data, [Optional] float[,] array, float brushFallof = 0.5f, bool delayLod = false)
		{
		}

		[Token(Token = "0x600042F")]
		[Address(RVA = "0xC1A50C", Offset = "0xC1A50C", VA = "0xC1A50C")]
		public float[,,] ReadSplatmap(TerrainData data, int channel, [Optional] float[,,] array)
		{
			return null;
		}

		[Token(Token = "0x6000430")]
		[Address(RVA = "0xC1A6F4", Offset = "0xC1A6F4", VA = "0xC1A6F4")]
		public static void AddSplatmaps(TerrainData data, Matrix[] matrices, int[] channels, float[] opacity, [Optional] float[,,] array, float brushFallof = 0.5f)
		{
		}

		[Token(Token = "0x6000431")]
		[Address(RVA = "0xC1ADD8", Offset = "0xC1ADD8", VA = "0xC1ADD8")]
		public void FillTexture([Optional] Texture2D texture, [Optional] Color[] colors, float rangeMin = 0f, float rangeMax = 1f, bool resizeTexture = false)
		{
		}

		[Token(Token = "0x6000432")]
		[Address(RVA = "0xC18BC0", Offset = "0xC18BC0", VA = "0xC18BC0")]
		public void FromTexture(Texture2D texture)
		{
		}

		[Token(Token = "0x6000433")]
		[Address(RVA = "0xC1B0E4", Offset = "0xC1B0E4", VA = "0xC1B0E4")]
		public void FromTextureAlpha(Texture2D texture)
		{
		}

		[Token(Token = "0x6000434")]
		[Address(RVA = "0xC1B274", Offset = "0xC1B274", VA = "0xC1B274")]
		public void FromTextureTiled(Texture2D texture)
		{
		}

		[Token(Token = "0x6000435")]
		[Address(RVA = "0xC1B3D8", Offset = "0xC1B3D8", VA = "0xC1B3D8")]
		public Texture2D SimpleToTexture([Optional] Texture2D texture, [Optional] Color[] colors, float rangeMin = 0f, float rangeMax = 1f, [Optional] string savePath)
		{
			return null;
		}

		[Token(Token = "0x6000436")]
		[Address(RVA = "0xC1B5C4", Offset = "0xC1B5C4", VA = "0xC1B5C4")]
		public void SimpleFromTexture(Texture2D texture)
		{
		}

		[Token(Token = "0x6000437")]
		[Address(RVA = "0xC1B6D4", Offset = "0xC1B6D4", VA = "0xC1B6D4")]
		public void ImportRaw(string path)
		{
		}

		[Token(Token = "0x6000438")]
		[Address(RVA = "0xC1B914", Offset = "0xC1B914", VA = "0xC1B914")]
		public void Replicate(Matrix source, bool tile = false)
		{
		}

		[Token(Token = "0x6000439")]
		[Address(RVA = "0xC1BA80", Offset = "0xC1BA80", VA = "0xC1BA80")]
		public float GetArea(int x, int z, int range)
		{
			return default(float);
		}

		[Token(Token = "0x600043A")]
		[Address(RVA = "0xC1971C", Offset = "0xC1971C", VA = "0xC1971C")]
		public float GetInterpolated(float x, float z, WrapMode wrap = WrapMode.Once)
		{
			return default(float);
		}

		[Token(Token = "0x600043B")]
		[Address(RVA = "0xC1BBC8", Offset = "0xC1BBC8", VA = "0xC1BBC8")]
		public Matrix Resize(CoordRect newRect, [Optional] Matrix result)
		{
			return null;
		}

		[Token(Token = "0x600043C")]
		[Address(RVA = "0xC1BD50", Offset = "0xC1BD50", VA = "0xC1BD50")]
		public Matrix Downscale(int factor, [Optional] Matrix result)
		{
			return null;
		}

		[Token(Token = "0x600043D")]
		[Address(RVA = "0xC1BD80", Offset = "0xC1BD80", VA = "0xC1BD80")]
		public Matrix Upscale(int factor, [Optional] Matrix result)
		{
			return null;
		}

		[Token(Token = "0x600043E")]
		[Address(RVA = "0xC1BDB0", Offset = "0xC1BDB0", VA = "0xC1BDB0")]
		public Matrix BlurredUpscale(int factor)
		{
			return null;
		}

		[Token(Token = "0x600043F")]
		[Address(RVA = "0xC1C394", Offset = "0xC1C394", VA = "0xC1C394")]
		public Matrix OutdatedResize(CoordRect newRect, float smoothness = 1f, [Optional] Matrix result)
		{
			return null;
		}

		[Token(Token = "0x6000440")]
		[Address(RVA = "0xC1C87C", Offset = "0xC1C87C", VA = "0xC1C87C")]
		public Matrix OutdatedUpscale(int factor, [Optional] Matrix result)
		{
			return null;
		}

		[Token(Token = "0x6000441")]
		[Address(RVA = "0xC1CFE0", Offset = "0xC1CFE0", VA = "0xC1CFE0")]
		public float OutdatedGetInterpolated(float x, float z)
		{
			return default(float);
		}

		[Token(Token = "0x6000442")]
		[Address(RVA = "0xC1D114", Offset = "0xC1D114", VA = "0xC1D114")]
		public Matrix TestResize(CoordRect newRect)
		{
			return null;
		}

		[Token(Token = "0x6000443")]
		[Address(RVA = "0xC1CBD4", Offset = "0xC1CBD4", VA = "0xC1CBD4")]
		public Matrix OutdatedDownscale(int factor = 2, float smoothness = 1f, [Optional] Matrix result)
		{
			return null;
		}

		[Token(Token = "0x6000444")]
		[Address(RVA = "0xC1D260", Offset = "0xC1D260", VA = "0xC1D260")]
		public void Spread(float strength = 0.5f, int iterations = 4, [Optional] Matrix copy)
		{
		}

		[Token(Token = "0x6000445")]
		[Address(RVA = "0xC1D704", Offset = "0xC1D704", VA = "0xC1D704")]
		public void Spread([Optional] Func<float, float, float> spreadFn, int iterations = 4)
		{
		}

		[Token(Token = "0x6000446")]
		[Address(RVA = "0xC1DB00", Offset = "0xC1DB00", VA = "0xC1DB00")]
		public void SimpleBlur(int iterations, float strength)
		{
		}

		[Token(Token = "0x6000447")]
		[Address(RVA = "0xC1C028", Offset = "0xC1C028", VA = "0xC1C028")]
		public void Blur([Optional] Func<float, float, float, float> blurFn, float intensity = 0.666f, bool additive = false, bool takemax = false, bool horizontal = true, bool vertical = true, [Optional] Matrix reference)
		{
		}

		[Token(Token = "0x6000448")]
		[Address(RVA = "0xC1DD54", Offset = "0xC1DD54", VA = "0xC1DD54")]
		public void LossBlur(int step = 2, bool horizontal = true, bool vertical = true, [Optional] Matrix reference)
		{
		}

		[Token(Token = "0x6000449")]
		[Address(RVA = "0xC1E0B0", Offset = "0xC1E0B0", VA = "0xC1E0B0")]
		public static void BlendLayers(Matrix[] matrices, [Optional] float[] opacity)
		{
		}

		[Token(Token = "0x600044A")]
		[Address(RVA = "0xC1E268", Offset = "0xC1E268", VA = "0xC1E268")]
		public static void NormalizeLayers(Matrix[] matrices, float[] opacity)
		{
		}

		[Token(Token = "0x600044B")]
		[Address(RVA = "0xC1A478", Offset = "0xC1A478", VA = "0xC1A478")]
		public float Fallof(int x, int z, float fallof)
		{
			return default(float);
		}

		[Token(Token = "0x600044C")]
		[Address(RVA = "0xC1E478", Offset = "0xC1E478", VA = "0xC1E478")]
		public void FillEmpty()
		{
		}

		[Token(Token = "0x600044D")]
		[Address(RVA = "0xC1E6C8", Offset = "0xC1E6C8", VA = "0xC1E6C8")]
		public static void Blend(Matrix src, Matrix dst, float factor)
		{
		}

		[Token(Token = "0x600044E")]
		[Address(RVA = "0xC1E808", Offset = "0xC1E808", VA = "0xC1E808")]
		public static void Mask(Matrix src, Matrix dst, Matrix mask)
		{
		}

		[Token(Token = "0x600044F")]
		[Address(RVA = "0xC1E9B8", Offset = "0xC1E9B8", VA = "0xC1E9B8")]
		public static void SafeBorders(Matrix src, Matrix dst, int safeBorders)
		{
		}

		[Token(Token = "0x6000450")]
		[Address(RVA = "0xC1EB50", Offset = "0xC1EB50", VA = "0xC1EB50")]
		public void Add(Matrix add)
		{
		}

		[Token(Token = "0x6000451")]
		[Address(RVA = "0xC1EBC8", Offset = "0xC1EBC8", VA = "0xC1EBC8")]
		public void Add(Matrix add, Matrix mask)
		{
		}

		[Token(Token = "0x6000452")]
		[Address(RVA = "0xC1EC60", Offset = "0xC1EC60", VA = "0xC1EC60")]
		public void Add(float add)
		{
		}

		[Token(Token = "0x6000453")]
		[Address(RVA = "0xC1ECB4", Offset = "0xC1ECB4", VA = "0xC1ECB4")]
		public void Subtract(Matrix m)
		{
		}

		[Token(Token = "0x6000454")]
		[Address(RVA = "0xC1ED2C", Offset = "0xC1ED2C", VA = "0xC1ED2C")]
		public void InvSubtract(Matrix m)
		{
		}

		[Token(Token = "0x6000455")]
		[Address(RVA = "0xC1EDA0", Offset = "0xC1EDA0", VA = "0xC1EDA0")]
		public void Multiply(Matrix m)
		{
		}

		[Token(Token = "0x6000456")]
		[Address(RVA = "0xC1EE18", Offset = "0xC1EE18", VA = "0xC1EE18")]
		public void Multiply(float m)
		{
		}

		[Token(Token = "0x6000457")]
		[Address(RVA = "0xC1EE6C", Offset = "0xC1EE6C", VA = "0xC1EE6C")]
		public void Max(Matrix m)
		{
		}

		[Token(Token = "0x6000458")]
		[Address(RVA = "0xC1EEE4", Offset = "0xC1EEE4", VA = "0xC1EEE4")]
		public bool CheckRange(float min, float max)
		{
			return default(bool);
		}

		[Token(Token = "0x6000459")]
		[Address(RVA = "0xC1EF48", Offset = "0xC1EF48", VA = "0xC1EF48")]
		public void Invert()
		{
		}

		[Token(Token = "0x600045A")]
		[Address(RVA = "0xC1EF9C", Offset = "0xC1EF9C", VA = "0xC1EF9C")]
		public void InvertOne()
		{
		}

		[Token(Token = "0x600045B")]
		[Address(RVA = "0xC1EFF4", Offset = "0xC1EFF4", VA = "0xC1EFF4")]
		public void Clamp01()
		{
		}

		[Token(Token = "0x600045C")]
		[Address(RVA = "0xC1F060", Offset = "0xC1F060", VA = "0xC1F060")]
		public void ClampSubtract(Matrix m)
		{
		}

		[Token(Token = "0x600045D")]
		[Address(RVA = "0xC1F0F8", Offset = "0xC1F0F8", VA = "0xC1F0F8")]
		public bool IsEmpty(float delta = 0.0001f)
		{
			return default(bool);
		}

		[Token(Token = "0x600045E")]
		[Address(RVA = "0xC1F158", Offset = "0xC1F158", VA = "0xC1F158")]
		public float MaxValue()
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000070")]
	public class Matrix2<T> : ICloneable
	{
		[Token(Token = "0x40002DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CoordRect rect;

		[Token(Token = "0x40002DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int count;

		[Token(Token = "0x40002DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T[] array;

		[Token(Token = "0x40002DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int pos;

		[Token(Token = "0x170000B9")]
		public T this[int x, int z]
		{
			[Token(Token = "0x6000467")]
			get
			{
				return (T)null;
			}
			[Token(Token = "0x6000468")]
			set
			{
			}
		}

		[Token(Token = "0x170000BA")]
		public T this[float x, float z]
		{
			[Token(Token = "0x6000469")]
			get
			{
				return (T)null;
			}
			[Token(Token = "0x600046A")]
			set
			{
			}
		}

		[Token(Token = "0x170000BB")]
		public T this[Coord c]
		{
			[Token(Token = "0x600046B")]
			get
			{
				return (T)null;
			}
			[Token(Token = "0x600046C")]
			set
			{
			}
		}

		[Token(Token = "0x170000BC")]
		public T this[UnityEngine.Vector2 pos]
		{
			[Token(Token = "0x600046E")]
			get
			{
				return (T)null;
			}
			[Token(Token = "0x600046F")]
			set
			{
			}
		}

		[Token(Token = "0x6000463")]
		public Matrix2()
		{
		}

		[Token(Token = "0x6000464")]
		public Matrix2(int x, int z, [Optional] T[] array)
		{
		}

		[Token(Token = "0x6000465")]
		public Matrix2(CoordRect rect, [Optional] T[] array)
		{
		}

		[Token(Token = "0x6000466")]
		public Matrix2(Coord offset, Coord size, [Optional] T[] array)
		{
		}

		[Token(Token = "0x600046D")]
		public T CheckGet(int x, int z)
		{
			return (T)null;
		}

		[Token(Token = "0x6000470")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000471")]
		public void ChangeRect(CoordRect newRect, bool forceNewArray = false)
		{
		}

		[Token(Token = "0x6000472")]
		public virtual object Clone()
		{
			return null;
		}

		[Token(Token = "0x6000473")]
		public Matrix2<T> Clone(Matrix2<T> result)
		{
			return null;
		}

		[Token(Token = "0x6000474")]
		public void Fill(T v)
		{
		}

		[Token(Token = "0x6000475")]
		public void Fill(Matrix2<T> m, bool removeBorders = false)
		{
		}

		[Token(Token = "0x6000476")]
		public void SetPos(int x, int z)
		{
		}

		[Token(Token = "0x6000477")]
		public void SetPos(int x, int z, int s)
		{
		}

		[Token(Token = "0x6000478")]
		public void MoveX()
		{
		}

		[Token(Token = "0x6000479")]
		public void MoveZ()
		{
		}

		[Token(Token = "0x600047A")]
		public void MovePrevX()
		{
		}

		[Token(Token = "0x600047B")]
		public void MovePrevZ()
		{
		}

		[Token(Token = "0x600047C")]
		public void RemoveBorders()
		{
		}

		[Token(Token = "0x600047D")]
		public void RemoveBorders(int borderMinX, int borderMinZ, int borderMaxX, int borderMaxZ)
		{
		}

		[Token(Token = "0x600047E")]
		public void RemoveBorders(CoordRect centerRect)
		{
		}
	}
}
namespace RootMotion
{
	[Token(Token = "0x2000071")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page3.html")]
	[AddComponentMenu("Scripts/RootMotion/Baker")]
	public abstract class Baker : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000072")]
		public enum Mode
		{
			[Token(Token = "0x40002ED")]
			AnimationClips,
			[Token(Token = "0x40002EE")]
			AnimationStates,
			[Token(Token = "0x40002EF")]
			PlayableDirector,
			[Token(Token = "0x40002F0")]
			Realtime
		}

		[Token(Token = "0x40002DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(1f, 90f)]
		[Tooltip("In AnimationClips, AnimationStates or PlayableDirector mode - the frame rate at which the animation clip will be sampled. In Realtime mode - the frame rate at which the pose will be sampled. With the latter, the frame rate is not guaranteed if the player is not able to reach it.")]
		public int frameRate;

		[Token(Token = "0x40002DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Range(0f, 0.1f)]
		[Tooltip("Maximum allowed error for keyframe reduction.")]
		public float keyReductionError;

		[Token(Token = "0x40002E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("AnimationClips mode can be used to bake a batch of AnimationClips directly without the need of setting up an AnimatorController. AnimationStates mode is useful for when you need to set up a more complex rig with layers and AvatarMasks in Mecanim. PlayableDirector mode bakes a Timeline. Realtime mode is for continuous baking of gameplay, ragdoll phsysics or PuppetMaster dynamics.")]
		public Mode mode;

		[Token(Token = "0x40002E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("AnimationClips to bake.")]
		public AnimationClip[] animationClips;

		[Token(Token = "0x40002E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The name of the AnimationStates to bake (must be on the base layer) in the Animator above (Right-click on this component header and select 'Find Animation States' to have Baker fill those in automatically, required that state names match with the names of the clips used in them).")]
		public string[] animationStates;

		[Token(Token = "0x40002E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Sets the baked animation clip to loop time and matches the last frame keys with the first. Note that when overwriting a previously baked clip, AnimationClipSettings will be copied from the existing clip.")]
		public bool loop;

		[Token(Token = "0x40002E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The folder to save the baked AnimationClips to.")]
		public string saveToFolder;

		[Token(Token = "0x40002E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("String that will be added to each clip or animation state name for the saved clip. For example if your animation state/clip names were 'Idle' and 'Walk', then with '_Baked' as Append Name, the Baker will create 'Idle_Baked' and 'Walk_Baked' animation clips.")]
		public string appendName;

		[Token(Token = "0x40002E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Name of the created AnimationClip file.")]
		public string saveName;

		[Token(Token = "0x40002E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HideInInspector]
		public Animator animator;

		[Token(Token = "0x40002EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[HideInInspector]
		public PlayableDirector director;

		[Token(Token = "0x170000BD")]
		public bool isBaking
		{
			[Token(Token = "0x6000483")]
			[Address(RVA = "0xC1F584", Offset = "0xC1F584", VA = "0xC1F584")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000484")]
			[Address(RVA = "0xC1F58C", Offset = "0xC1F58C", VA = "0xC1F58C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000BE")]
		public float bakingProgress
		{
			[Token(Token = "0x6000485")]
			[Address(RVA = "0xC1F598", Offset = "0xC1F598", VA = "0xC1F598")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000486")]
			[Address(RVA = "0xC1F5A0", Offset = "0xC1F5A0", VA = "0xC1F5A0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000BF")]
		protected float clipLength
		{
			[Token(Token = "0x600048C")]
			[Address(RVA = "0xC1F5A8", Offset = "0xC1F5A8", VA = "0xC1F5A8")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600048D")]
			[Address(RVA = "0xC1F5B0", Offset = "0xC1F5B0", VA = "0xC1F5B0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x600047F")]
		[Address(RVA = "0xC1F474", Offset = "0xC1F474", VA = "0xC1F474")]
		[ContextMenu("User Manual")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6000480")]
		[Address(RVA = "0xC1F4B8", Offset = "0xC1F4B8", VA = "0xC1F4B8")]
		[ContextMenu("Scrpt Reference")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000481")]
		[Address(RVA = "0xC1F4FC", Offset = "0xC1F4FC", VA = "0xC1F4FC")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000482")]
		[Address(RVA = "0xC1F540", Offset = "0xC1F540", VA = "0xC1F540")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000487")]
		protected abstract Transform GetCharacterRoot();

		[Token(Token = "0x6000488")]
		protected abstract void OnStartBaking();

		[Token(Token = "0x6000489")]
		protected abstract void OnSetLoopFrame(float time);

		[Token(Token = "0x600048A")]
		protected abstract void OnSetCurves(ref AnimationClip clip);

		[Token(Token = "0x600048B")]
		protected abstract void OnSetKeyframes(float time, bool lastFrame);

		[Token(Token = "0x600048E")]
		[Address(RVA = "0xC1F5B8", Offset = "0xC1F5B8", VA = "0xC1F5B8")]
		public void BakeClip()
		{
		}

		[Token(Token = "0x600048F")]
		[Address(RVA = "0xC1F5BC", Offset = "0xC1F5BC", VA = "0xC1F5BC")]
		public void StartBaking()
		{
		}

		[Token(Token = "0x6000490")]
		[Address(RVA = "0xC1F5C0", Offset = "0xC1F5C0", VA = "0xC1F5C0")]
		public void StopBaking()
		{
		}

		[Token(Token = "0x6000491")]
		[Address(RVA = "0xC1F5C4", Offset = "0xC1F5C4", VA = "0xC1F5C4")]
		protected Baker()
		{
		}
	}
	[Token(Token = "0x2000073")]
	public class GenericBaker : Baker
	{
		[Token(Token = "0x40002F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[Tooltip("If true, produced AnimationClips will be marked as Legacy and usable with the Legacy animation system.")]
		public bool markAsLegacy;

		[Token(Token = "0x40002F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Root Transform of the hierarchy to bake.")]
		public Transform root;

		[Token(Token = "0x40002F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Root Node used for root motion.")]
		public Transform rootNode;

		[Token(Token = "0x40002F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("List of Transforms to ignore, rotation curves will not be baked for these Transforms.")]
		public Transform[] ignoreList;

		[Token(Token = "0x40002F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("LocalPosition curves will be baked for these Transforms only. If you are baking a character, the pelvis bone should be added to this array.")]
		public Transform[] bakePositionList;

		[Token(Token = "0x40002F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private BakerTransform[] children;

		[Token(Token = "0x40002F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private BakerTransform rootChild;

		[Token(Token = "0x40002F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private int rootChildIndex;

		[Token(Token = "0x6000492")]
		[Address(RVA = "0xC1F6BC", Offset = "0xC1F6BC", VA = "0xC1F6BC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000493")]
		[Address(RVA = "0xC1FAD8", Offset = "0xC1FAD8", VA = "0xC1FAD8", Slot = "4")]
		protected override Transform GetCharacterRoot()
		{
			return null;
		}

		[Token(Token = "0x6000494")]
		[Address(RVA = "0xC1FAE0", Offset = "0xC1FAE0", VA = "0xC1FAE0", Slot = "5")]
		protected override void OnStartBaking()
		{
		}

		[Token(Token = "0x6000495")]
		[Address(RVA = "0xC1FCCC", Offset = "0xC1FCCC", VA = "0xC1FCCC", Slot = "6")]
		protected override void OnSetLoopFrame(float time)
		{
		}

		[Token(Token = "0x6000496")]
		[Address(RVA = "0xC1FF30", Offset = "0xC1FF30", VA = "0xC1FF30", Slot = "7")]
		protected override void OnSetCurves(ref AnimationClip clip)
		{
		}

		[Token(Token = "0x6000497")]
		[Address(RVA = "0xC20248", Offset = "0xC20248", VA = "0xC20248", Slot = "8")]
		protected override void OnSetKeyframes(float time, bool lastFrame)
		{
		}

		[Token(Token = "0x6000498")]
		[Address(RVA = "0xC1F8D4", Offset = "0xC1F8D4", VA = "0xC1F8D4")]
		private bool IsIgnored(Transform t)
		{
			return default(bool);
		}

		[Token(Token = "0x6000499")]
		[Address(RVA = "0xC1F98C", Offset = "0xC1F98C", VA = "0xC1F98C")]
		private bool BakePosition(Transform t)
		{
			return default(bool);
		}

		[Token(Token = "0x600049A")]
		[Address(RVA = "0xC204A8", Offset = "0xC204A8", VA = "0xC204A8")]
		public GenericBaker()
		{
		}
	}
	[Token(Token = "0x2000074")]
	public class TQ
	{
		[Token(Token = "0x40002F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public UnityEngine.Vector3 t;

		[Token(Token = "0x40002FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Quaternion q;

		[Token(Token = "0x600049B")]
		[Address(RVA = "0xC20504", Offset = "0xC20504", VA = "0xC20504")]
		public TQ(UnityEngine.Vector3 translation, Quaternion rotation)
		{
		}
	}
	[Token(Token = "0x2000075")]
	public class AvatarUtility
	{
		[Token(Token = "0x600049C")]
		[Address(RVA = "0xC20568", Offset = "0xC20568", VA = "0xC20568")]
		public static Quaternion GetPostRotation(Avatar avatar, AvatarIKGoal avatarIKGoal)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600049D")]
		[Address(RVA = "0xC207B8", Offset = "0xC207B8", VA = "0xC207B8")]
		public static TQ GetIKGoalTQ(Avatar avatar, float humanScale, AvatarIKGoal avatarIKGoal, TQ bodyPositionRotation, TQ boneTQ)
		{
			return null;
		}

		[Token(Token = "0x600049E")]
		[Address(RVA = "0xC20798", Offset = "0xC20798", VA = "0xC20798")]
		public static HumanBodyBones HumanIDFromAvatarIKGoal(AvatarIKGoal avatarIKGoal)
		{
			return default(HumanBodyBones);
		}

		[Token(Token = "0x600049F")]
		[Address(RVA = "0xC20E10", Offset = "0xC20E10", VA = "0xC20E10")]
		public AvatarUtility()
		{
		}
	}
	[Token(Token = "0x2000076")]
	public static class BakerUtilities
	{
		[Token(Token = "0x60004A0")]
		[Address(RVA = "0xC20E18", Offset = "0xC20E18", VA = "0xC20E18")]
		public static void ReduceKeyframes(AnimationCurve curve, float maxError)
		{
		}

		[Token(Token = "0x60004A1")]
		[Address(RVA = "0xC20E50", Offset = "0xC20E50", VA = "0xC20E50")]
		public static Keyframe[] GetReducedKeyframes(AnimationCurve curve, float maxError)
		{
			return null;
		}

		[Token(Token = "0x60004A2")]
		[Address(RVA = "0xC21214", Offset = "0xC21214", VA = "0xC21214")]
		public static void SetLoopFrame(float time, AnimationCurve curve)
		{
		}

		[Token(Token = "0x60004A3")]
		[Address(RVA = "0xC213F4", Offset = "0xC213F4", VA = "0xC213F4")]
		public static void SetTangentMode(AnimationCurve curve)
		{
		}

		[Token(Token = "0x60004A4")]
		[Address(RVA = "0xC213F8", Offset = "0xC213F8", VA = "0xC213F8")]
		public static Quaternion EnsureQuaternionContinuity(Quaternion lastQ, Quaternion q)
		{
			return default(Quaternion);
		}
	}
	[Serializable]
	[Token(Token = "0x2000077")]
	public class BakerHumanoidQT
	{
		[Token(Token = "0x40002FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Transform transform;

		[Token(Token = "0x40002FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string Qx;

		[Token(Token = "0x40002FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private string Qy;

		[Token(Token = "0x40002FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string Qz;

		[Token(Token = "0x40002FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private string Qw;

		[Token(Token = "0x4000300")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private string Tx;

		[Token(Token = "0x4000301")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private string Ty;

		[Token(Token = "0x4000302")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private string Tz;

		[Token(Token = "0x4000303")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AnimationCurve rotX;

		[Token(Token = "0x4000304")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public AnimationCurve rotY;

		[Token(Token = "0x4000305")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public AnimationCurve rotZ;

		[Token(Token = "0x4000306")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public AnimationCurve rotW;

		[Token(Token = "0x4000307")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public AnimationCurve posX;

		[Token(Token = "0x4000308")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public AnimationCurve posY;

		[Token(Token = "0x4000309")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public AnimationCurve posZ;

		[Token(Token = "0x400030A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private AvatarIKGoal goal;

		[Token(Token = "0x400030B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private Quaternion lastQ;

		[Token(Token = "0x400030C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private bool lastQSet;

		[Token(Token = "0x60004A5")]
		[Address(RVA = "0xC2158C", Offset = "0xC2158C", VA = "0xC2158C")]
		public BakerHumanoidQT(string name)
		{
		}

		[Token(Token = "0x60004A6")]
		[Address(RVA = "0xC21848", Offset = "0xC21848", VA = "0xC21848")]
		public BakerHumanoidQT(Transform transform, AvatarIKGoal goal, string name)
		{
		}

		[Token(Token = "0x60004A7")]
		[Address(RVA = "0xC21704", Offset = "0xC21704", VA = "0xC21704")]
		public void Reset()
		{
		}

		[Token(Token = "0x60004A8")]
		[Address(RVA = "0xC219D0", Offset = "0xC219D0", VA = "0xC219D0")]
		public void SetIKKeyframes(float time, Avatar avatar, Transform root, float humanScale, UnityEngine.Vector3 bodyPosition, Quaternion bodyRotation)
		{
		}

		[Token(Token = "0x60004A9")]
		[Address(RVA = "0xC21D60", Offset = "0xC21D60", VA = "0xC21D60")]
		public void SetKeyframes(float time, UnityEngine.Vector3 pos, Quaternion rot)
		{
		}

		[Token(Token = "0x60004AA")]
		[Address(RVA = "0xC21E50", Offset = "0xC21E50", VA = "0xC21E50")]
		public void MoveLastKeyframes(float time)
		{
		}

		[Token(Token = "0x60004AB")]
		[Address(RVA = "0xC21F34", Offset = "0xC21F34", VA = "0xC21F34")]
		public void SetLoopFrame(float time)
		{
		}

		[Token(Token = "0x60004AC")]
		[Address(RVA = "0xC21EB8", Offset = "0xC21EB8", VA = "0xC21EB8")]
		private void MoveLastKeyframe(float time, AnimationCurve curve)
		{
		}

		[Token(Token = "0x60004AD")]
		[Address(RVA = "0xC21F9C", Offset = "0xC21F9C", VA = "0xC21F9C")]
		public void MultiplyLength(AnimationCurve curve, float mlp)
		{
		}

		[Token(Token = "0x60004AE")]
		[Address(RVA = "0xC22044", Offset = "0xC22044", VA = "0xC22044")]
		public void SetCurves(ref AnimationClip clip, float maxError, float lengthMlp)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000078")]
	public class BakerMuscle
	{
		[Token(Token = "0x400030D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AnimationCurve curve;

		[Token(Token = "0x400030E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int muscleIndex;

		[Token(Token = "0x400030F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private string propertyName;

		[Token(Token = "0x60004AF")]
		[Address(RVA = "0xC22330", Offset = "0xC22330", VA = "0xC22330")]
		public BakerMuscle(int muscleIndex)
		{
		}

		[Token(Token = "0x60004B0")]
		[Address(RVA = "0xC22394", Offset = "0xC22394", VA = "0xC22394")]
		private string MuscleNameToPropertyName(string n)
		{
			return null;
		}

		[Token(Token = "0x60004B1")]
		[Address(RVA = "0xC22E28", Offset = "0xC22E28", VA = "0xC22E28")]
		public void MultiplyLength(AnimationCurve curve, float mlp)
		{
		}

		[Token(Token = "0x60004B2")]
		[Address(RVA = "0xC22ED0", Offset = "0xC22ED0", VA = "0xC22ED0")]
		public void SetCurves(ref AnimationClip clip, float maxError, float lengthMlp)
		{
		}

		[Token(Token = "0x60004B3")]
		[Address(RVA = "0xC22DC8", Offset = "0xC22DC8", VA = "0xC22DC8")]
		public void Reset()
		{
		}

		[Token(Token = "0x60004B4")]
		[Address(RVA = "0xC22FC4", Offset = "0xC22FC4", VA = "0xC22FC4")]
		public void SetKeyframe(float time, float[] muscles)
		{
		}

		[Token(Token = "0x60004B5")]
		[Address(RVA = "0xC23000", Offset = "0xC23000", VA = "0xC23000")]
		public void SetLoopFrame(float time)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000079")]
	public class BakerTransform
	{
		[Token(Token = "0x4000310")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform transform;

		[Token(Token = "0x4000311")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AnimationCurve posX;

		[Token(Token = "0x4000312")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AnimationCurve posY;

		[Token(Token = "0x4000313")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimationCurve posZ;

		[Token(Token = "0x4000314")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimationCurve rotX;

		[Token(Token = "0x4000315")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AnimationCurve rotY;

		[Token(Token = "0x4000316")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AnimationCurve rotZ;

		[Token(Token = "0x4000317")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public AnimationCurve rotW;

		[Token(Token = "0x4000318")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private string relativePath;

		[Token(Token = "0x4000319")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool recordPosition;

		[Token(Token = "0x400031A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private UnityEngine.Vector3 relativePosition;

		[Token(Token = "0x400031B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool isRootNode;

		[Token(Token = "0x400031C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Quaternion relativeRotation;

		[Token(Token = "0x60004B6")]
		[Address(RVA = "0xC1FA44", Offset = "0xC1FA44", VA = "0xC1FA44")]
		public BakerTransform(Transform transform, Transform root, bool recordPosition, bool isRootNode)
		{
		}

		[Token(Token = "0x60004B7")]
		[Address(RVA = "0xC1FCB8", Offset = "0xC1FCB8", VA = "0xC1FCB8")]
		public void SetRelativeSpace(UnityEngine.Vector3 position, Quaternion rotation)
		{
		}

		[Token(Token = "0x60004B8")]
		[Address(RVA = "0xC1FF94", Offset = "0xC1FF94", VA = "0xC1FF94")]
		public void SetCurves(ref AnimationClip clip)
		{
		}

		[Token(Token = "0x60004B9")]
		[Address(RVA = "0xC23008", Offset = "0xC23008", VA = "0xC23008")]
		private void AddRootMotionCurves(ref AnimationClip clip)
		{
		}

		[Token(Token = "0x60004BA")]
		[Address(RVA = "0xC1FBB0", Offset = "0xC1FBB0", VA = "0xC1FBB0")]
		public void Reset()
		{
		}

		[Token(Token = "0x60004BB")]
		[Address(RVA = "0xC23290", Offset = "0xC23290", VA = "0xC23290")]
		public void ReduceKeyframes(float maxError)
		{
		}

		[Token(Token = "0x60004BC")]
		[Address(RVA = "0xC202B4", Offset = "0xC202B4", VA = "0xC202B4")]
		public void SetKeyframes(float time)
		{
		}

		[Token(Token = "0x60004BD")]
		[Address(RVA = "0xC1FD38", Offset = "0xC1FD38", VA = "0xC1FD38")]
		public void AddLoopFrame(float time)
		{
		}
	}
	[Token(Token = "0x200007A")]
	public class HumanoidBaker : Baker
	{
		[Token(Token = "0x400031D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[Tooltip("Should the hand IK curves be added to the animation? Disable this if the original hand positions are not important when using the clip on another character via Humanoid retargeting.")]
		public bool bakeHandIK;

		[Token(Token = "0x400031E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Range(0f, 0.1f)]
		[Tooltip("Max keyframe reduction error for the Root.Q/T, LeftFoot IK and RightFoot IK channels. Having a larger error value for 'Key Reduction Error' and a smaller one for this enables you to optimize clip data size without the floating feet effect by enabling 'Foot IK' in the Animator.")]
		public float IKKeyReductionError;

		[Token(Token = "0x400031F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[Range(1f, 9f)]
		[Tooltip("Frame rate divider for the muscle curves. If you have 'Frame Rate' set to 30, and this value set to 3, the muscle curves will be baked at 10 fps. Only the Root Q/T and Hand and Foot IK curves will be baked at 30. This enables you to optimize clip data size without the floating feet effect by enabling 'Foot IK' in the Animator.")]
		public int muscleFrameRateDiv;

		[Token(Token = "0x4000320")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private BakerMuscle[] bakerMuscles;

		[Token(Token = "0x4000321")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private BakerHumanoidQT rootQT;

		[Token(Token = "0x4000322")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private BakerHumanoidQT leftFootQT;

		[Token(Token = "0x4000323")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private BakerHumanoidQT rightFootQT;

		[Token(Token = "0x4000324")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private BakerHumanoidQT leftHandQT;

		[Token(Token = "0x4000325")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private BakerHumanoidQT rightHandQT;

		[Token(Token = "0x4000326")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private float[] muscles;

		[Token(Token = "0x4000327")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private HumanPose pose;

		[Token(Token = "0x4000328")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private HumanPoseHandler handler;

		[Token(Token = "0x4000329")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private UnityEngine.Vector3 bodyPosition;

		[Token(Token = "0x400032A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private Quaternion bodyRotation;

		[Token(Token = "0x400032B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		private int mN;

		[Token(Token = "0x400032C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Quaternion lastBodyRotation;

		[Token(Token = "0x60004BE")]
		[Address(RVA = "0xC232F8", Offset = "0xC232F8", VA = "0xC232F8")]
		private void Awake()
		{
		}

		[Token(Token = "0x60004BF")]
		[Address(RVA = "0xC237B0", Offset = "0xC237B0", VA = "0xC237B0", Slot = "4")]
		protected override Transform GetCharacterRoot()
		{
			return null;
		}

		[Token(Token = "0x60004C0")]
		[Address(RVA = "0xC237CC", Offset = "0xC237CC", VA = "0xC237CC", Slot = "5")]
		protected override void OnStartBaking()
		{
		}

		[Token(Token = "0x60004C1")]
		[Address(RVA = "0xC238A8", Offset = "0xC238A8", VA = "0xC238A8", Slot = "6")]
		protected override void OnSetLoopFrame(float time)
		{
		}

		[Token(Token = "0x60004C2")]
		[Address(RVA = "0xC23964", Offset = "0xC23964", VA = "0xC23964", Slot = "7")]
		protected override void OnSetCurves(ref AnimationClip clip)
		{
		}

		[Token(Token = "0x60004C3")]
		[Address(RVA = "0xC23B04", Offset = "0xC23B04", VA = "0xC23B04", Slot = "8")]
		protected override void OnSetKeyframes(float time, bool lastFrame)
		{
		}

		[Token(Token = "0x60004C4")]
		[Address(RVA = "0xC23E18", Offset = "0xC23E18", VA = "0xC23E18")]
		private void UpdateHumanPose()
		{
		}

		[Token(Token = "0x60004C5")]
		[Address(RVA = "0xC23EF0", Offset = "0xC23EF0", VA = "0xC23EF0")]
		public HumanoidBaker()
		{
		}
	}
	[Token(Token = "0x200007B")]
	public class CameraController : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200007C")]
		public enum UpdateMode
		{
			[Token(Token = "0x4000354")]
			Update,
			[Token(Token = "0x4000355")]
			FixedUpdate,
			[Token(Token = "0x4000356")]
			LateUpdate,
			[Token(Token = "0x4000357")]
			FixedLateUpdate
		}

		[Token(Token = "0x400032D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x400032E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform rotationSpace;

		[Token(Token = "0x400032F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UpdateMode updateMode;

		[Token(Token = "0x4000330")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool lockCursor;

		[Token(Token = "0x4000331")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		[Header("Position")]
		public bool smoothFollow;

		[Token(Token = "0x4000332")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityEngine.Vector3 offset;

		[Token(Token = "0x4000333")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float followSpeed;

		[Token(Token = "0x4000334")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Rotation")]
		public float rotationSensitivity;

		[Token(Token = "0x4000335")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float yMinLimit;

		[Token(Token = "0x4000336")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float yMaxLimit;

		[Token(Token = "0x4000337")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool rotateAlways;

		[Token(Token = "0x4000338")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
		public bool rotateOnLeftButton;

		[Token(Token = "0x4000339")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4E")]
		public bool rotateOnRightButton;

		[Token(Token = "0x400033A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4F")]
		public bool rotateOnMiddleButton;

		[Token(Token = "0x400033B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Distance")]
		public float distance;

		[Token(Token = "0x400033C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float minDistance;

		[Token(Token = "0x400033D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float maxDistance;

		[Token(Token = "0x400033E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float zoomSpeed;

		[Token(Token = "0x400033F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float zoomSensitivity;

		[Token(Token = "0x4000340")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Header("Blocking")]
		public LayerMask blockingLayers;

		[Token(Token = "0x4000341")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float blockingRadius;

		[Token(Token = "0x4000342")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float blockingSmoothTime;

		[Token(Token = "0x4000343")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float blockingOriginOffset;

		[Token(Token = "0x4000344")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[Range(0f, 1f)]
		public float blockedOffset;

		[Token(Token = "0x4000348")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private UnityEngine.Vector3 targetDistance;

		[Token(Token = "0x4000349")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private UnityEngine.Vector3 position;

		[Token(Token = "0x400034A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private Quaternion rotation;

		[Token(Token = "0x400034B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private UnityEngine.Vector3 smoothPosition;

		[Token(Token = "0x400034C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Camera cam;

		[Token(Token = "0x400034D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private bool fixedFrame;

		[Token(Token = "0x400034E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private float fixedDeltaTime;

		[Token(Token = "0x400034F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Quaternion r;

		[Token(Token = "0x4000350")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private UnityEngine.Vector3 lastUp;

		[Token(Token = "0x4000351")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private float blockedDistance;

		[Token(Token = "0x4000352")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private float blockedDistanceV;

		[Token(Token = "0x170000C0")]
		public float x
		{
			[Token(Token = "0x60004C6")]
			[Address(RVA = "0xC23F94", Offset = "0xC23F94", VA = "0xC23F94")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60004C7")]
			[Address(RVA = "0xC23F9C", Offset = "0xC23F9C", VA = "0xC23F9C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000C1")]
		public float y
		{
			[Token(Token = "0x60004C8")]
			[Address(RVA = "0xC23FA4", Offset = "0xC23FA4", VA = "0xC23FA4")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60004C9")]
			[Address(RVA = "0xC23FAC", Offset = "0xC23FAC", VA = "0xC23FAC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000C2")]
		public float distanceTarget
		{
			[Token(Token = "0x60004CA")]
			[Address(RVA = "0xC23FB4", Offset = "0xC23FB4", VA = "0xC23FB4")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60004CB")]
			[Address(RVA = "0xC23FBC", Offset = "0xC23FBC", VA = "0xC23FBC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000C3")]
		private float zoomAdd
		{
			[Token(Token = "0x60004D5")]
			[Address(RVA = "0xC24A14", Offset = "0xC24A14", VA = "0xC24A14")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x60004CC")]
		[Address(RVA = "0xC23FC4", Offset = "0xC23FC4", VA = "0xC23FC4")]
		public void SetAngles(Quaternion rotation)
		{
		}

		[Token(Token = "0x60004CD")]
		[Address(RVA = "0xC23FFC", Offset = "0xC23FFC", VA = "0xC23FFC")]
		public void SetAngles(float yaw, float pitch)
		{
		}

		[Token(Token = "0x60004CE")]
		[Address(RVA = "0xC24004", Offset = "0xC24004", VA = "0xC24004", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x60004CF")]
		[Address(RVA = "0xC2412C", Offset = "0xC2412C", VA = "0xC2412C", Slot = "5")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x60004D0")]
		[Address(RVA = "0xC24174", Offset = "0xC24174", VA = "0xC24174", Slot = "6")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x60004D1")]
		[Address(RVA = "0xC241CC", Offset = "0xC241CC", VA = "0xC241CC", Slot = "7")]
		protected virtual void LateUpdate()
		{
		}

		[Token(Token = "0x60004D2")]
		[Address(RVA = "0xC24224", Offset = "0xC24224", VA = "0xC24224")]
		public void UpdateInput()
		{
		}

		[Token(Token = "0x60004D3")]
		[Address(RVA = "0xC24158", Offset = "0xC24158", VA = "0xC24158")]
		public void UpdateTransform()
		{
		}

		[Token(Token = "0x60004D4")]
		[Address(RVA = "0xC243B0", Offset = "0xC243B0", VA = "0xC243B0")]
		public void UpdateTransform(float deltaTime)
		{
		}

		[Token(Token = "0x60004D6")]
		[Address(RVA = "0xC249D8", Offset = "0xC249D8", VA = "0xC249D8")]
		private float ClampAngle(float angle, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x60004D7")]
		[Address(RVA = "0xC24A80", Offset = "0xC24A80", VA = "0xC24A80")]
		public CameraController()
		{
		}
	}
	[Token(Token = "0x200007D")]
	public class CameraControllerFPS : MonoBehaviour
	{
		[Token(Token = "0x4000358")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float rotationSensitivity;

		[Token(Token = "0x4000359")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float yMinLimit;

		[Token(Token = "0x400035A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float yMaxLimit;

		[Token(Token = "0x400035B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float x;

		[Token(Token = "0x400035C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float y;

		[Token(Token = "0x60004D8")]
		[Address(RVA = "0xC24B48", Offset = "0xC24B48", VA = "0xC24B48")]
		private void Awake()
		{
		}

		[Token(Token = "0x60004D9")]
		[Address(RVA = "0xC24B74", Offset = "0xC24B74", VA = "0xC24B74")]
		public void LateUpdate()
		{
		}

		[Token(Token = "0x60004DA")]
		[Address(RVA = "0xC24D98", Offset = "0xC24D98", VA = "0xC24D98")]
		private float ClampAngle(float angle, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x60004DB")]
		[Address(RVA = "0xC24DD4", Offset = "0xC24DD4", VA = "0xC24DD4")]
		public CameraControllerFPS()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200007E")]
	public enum Axis
	{
		[Token(Token = "0x400035E")]
		X,
		[Token(Token = "0x400035F")]
		Y,
		[Token(Token = "0x4000360")]
		Z
	}
	[Token(Token = "0x200007F")]
	public class AxisTools
	{
		[Token(Token = "0x60004DC")]
		[Address(RVA = "0xC24DF0", Offset = "0xC24DF0", VA = "0xC24DF0")]
		public static UnityEngine.Vector3 ToVector3(Axis axis)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x60004DD")]
		[Address(RVA = "0xC24ED0", Offset = "0xC24ED0", VA = "0xC24ED0")]
		public static Axis ToAxis(UnityEngine.Vector3 v)
		{
			return default(Axis);
		}

		[Token(Token = "0x60004DE")]
		[Address(RVA = "0xC24F08", Offset = "0xC24F08", VA = "0xC24F08")]
		public static Axis GetAxisToPoint(Transform t, UnityEngine.Vector3 worldPosition)
		{
			return default(Axis);
		}

		[Token(Token = "0x60004DF")]
		[Address(RVA = "0xC25050", Offset = "0xC25050", VA = "0xC25050")]
		public static Axis GetAxisToDirection(Transform t, UnityEngine.Vector3 direction)
		{
			return default(Axis);
		}

		[Token(Token = "0x60004E0")]
		[Address(RVA = "0xC25004", Offset = "0xC25004", VA = "0xC25004")]
		public static UnityEngine.Vector3 GetAxisVectorToPoint(Transform t, UnityEngine.Vector3 worldPosition)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x60004E1")]
		[Address(RVA = "0xC2514C", Offset = "0xC2514C", VA = "0xC2514C")]
		public static UnityEngine.Vector3 GetAxisVectorToDirection(Transform t, UnityEngine.Vector3 direction)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x60004E2")]
		[Address(RVA = "0xC25190", Offset = "0xC25190", VA = "0xC25190")]
		public static UnityEngine.Vector3 GetAxisVectorToDirection(Quaternion r, UnityEngine.Vector3 direction)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x60004E3")]
		[Address(RVA = "0xC2561C", Offset = "0xC2561C", VA = "0xC2561C")]
		public AxisTools()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000080")]
	public class BipedLimbOrientations
	{
		[Serializable]
		[Token(Token = "0x2000081")]
		public class LimbOrientation
		{
			[Token(Token = "0x4000365")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public UnityEngine.Vector3 upperBoneForwardAxis;

			[Token(Token = "0x4000366")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public UnityEngine.Vector3 lowerBoneForwardAxis;

			[Token(Token = "0x4000367")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public UnityEngine.Vector3 lastBoneLeftAxis;

			[Token(Token = "0x60004E7")]
			[Address(RVA = "0xC25918", Offset = "0xC25918", VA = "0xC25918")]
			public LimbOrientation(UnityEngine.Vector3 upperBoneForwardAxis, UnityEngine.Vector3 lowerBoneForwardAxis, UnityEngine.Vector3 lastBoneLeftAxis)
			{
			}
		}

		[Token(Token = "0x4000361")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public LimbOrientation leftArm;

		[Token(Token = "0x4000362")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LimbOrientation rightArm;

		[Token(Token = "0x4000363")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LimbOrientation leftLeg;

		[Token(Token = "0x4000364")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LimbOrientation rightLeg;

		[Token(Token = "0x170000C4")]
		public static BipedLimbOrientations UMA
		{
			[Token(Token = "0x60004E5")]
			[Address(RVA = "0xC25664", Offset = "0xC25664", VA = "0xC25664")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C5")]
		public static BipedLimbOrientations MaxBiped
		{
			[Token(Token = "0x60004E6")]
			[Address(RVA = "0xC2598C", Offset = "0xC2598C", VA = "0xC2598C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60004E4")]
		[Address(RVA = "0xC25624", Offset = "0xC25624", VA = "0xC25624")]
		public BipedLimbOrientations(LimbOrientation leftArm, LimbOrientation rightArm, LimbOrientation leftLeg, LimbOrientation rightLeg)
		{
		}
	}
	[Token(Token = "0x2000082")]
	public static class BipedNaming
	{
		[Serializable]
		[Token(Token = "0x2000083")]
		public enum BoneType
		{
			[Token(Token = "0x400037B")]
			Unassigned,
			[Token(Token = "0x400037C")]
			Spine,
			[Token(Token = "0x400037D")]
			Head,
			[Token(Token = "0x400037E")]
			Arm,
			[Token(Token = "0x400037F")]
			Leg,
			[Token(Token = "0x4000380")]
			Tail,
			[Token(Token = "0x4000381")]
			Eye
		}

		[Serializable]
		[Token(Token = "0x2000084")]
		public enum BoneSide
		{
			[Token(Token = "0x4000383")]
			Center,
			[Token(Token = "0x4000384")]
			Left,
			[Token(Token = "0x4000385")]
			Right
		}

		[Token(Token = "0x4000368")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static string[] typeLeft;

		[Token(Token = "0x4000369")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static string[] typeRight;

		[Token(Token = "0x400036A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static string[] typeSpine;

		[Token(Token = "0x400036B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static string[] typeHead;

		[Token(Token = "0x400036C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static string[] typeArm;

		[Token(Token = "0x400036D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static string[] typeLeg;

		[Token(Token = "0x400036E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static string[] typeTail;

		[Token(Token = "0x400036F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static string[] typeEye;

		[Token(Token = "0x4000370")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public static string[] typeExclude;

		[Token(Token = "0x4000371")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public static string[] typeExcludeSpine;

		[Token(Token = "0x4000372")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public static string[] typeExcludeHead;

		[Token(Token = "0x4000373")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public static string[] typeExcludeArm;

		[Token(Token = "0x4000374")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public static string[] typeExcludeLeg;

		[Token(Token = "0x4000375")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public static string[] typeExcludeTail;

		[Token(Token = "0x4000376")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public static string[] typeExcludeEye;

		[Token(Token = "0x4000377")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public static string[] pelvis;

		[Token(Token = "0x4000378")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public static string[] hand;

		[Token(Token = "0x4000379")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public static string[] foot;

		[Token(Token = "0x60004E8")]
		[Address(RVA = "0xC25C40", Offset = "0xC25C40", VA = "0xC25C40")]
		public static Transform[] GetBonesOfType(BoneType boneType, Transform[] bones)
		{
			return null;
		}

		[Token(Token = "0x60004E9")]
		[Address(RVA = "0xC25F04", Offset = "0xC25F04", VA = "0xC25F04")]
		public static Transform[] GetBonesOfSide(BoneSide boneSide, Transform[] bones)
		{
			return null;
		}

		[Token(Token = "0x60004EA")]
		[Address(RVA = "0xC26138", Offset = "0xC26138", VA = "0xC26138")]
		public static Transform[] GetBonesOfTypeAndSide(BoneType boneType, BoneSide boneSide, Transform[] bones)
		{
			return null;
		}

		[Token(Token = "0x60004EB")]
		[Address(RVA = "0xC261AC", Offset = "0xC261AC", VA = "0xC261AC")]
		public static Transform GetFirstBoneOfTypeAndSide(BoneType boneType, BoneSide boneSide, Transform[] bones)
		{
			return null;
		}

		[Token(Token = "0x60004EC")]
		[Address(RVA = "0xC26240", Offset = "0xC26240", VA = "0xC26240")]
		public static Transform GetNamingMatch(Transform[] transforms, params string[][] namings)
		{
			return null;
		}

		[Token(Token = "0x60004ED")]
		[Address(RVA = "0xC25DEC", Offset = "0xC25DEC", VA = "0xC25DEC")]
		public static BoneType GetBoneType(string boneName)
		{
			return default(BoneType);
		}

		[Token(Token = "0x60004EE")]
		[Address(RVA = "0xC260B0", Offset = "0xC260B0", VA = "0xC260B0")]
		public static BoneSide GetBoneSide(string boneName)
		{
			return default(BoneSide);
		}

		[Token(Token = "0x60004EF")]
		[Address(RVA = "0xC26978", Offset = "0xC26978", VA = "0xC26978")]
		public static Transform GetBone(Transform[] transforms, BoneType boneType, BoneSide boneSide = BoneSide.Center, params string[][] namings)
		{
			return null;
		}

		[Token(Token = "0x60004F0")]
		[Address(RVA = "0xC267D0", Offset = "0xC267D0", VA = "0xC267D0")]
		private static bool isLeft(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x60004F1")]
		[Address(RVA = "0xC268A4", Offset = "0xC268A4", VA = "0xC268A4")]
		private static bool isRight(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x60004F2")]
		[Address(RVA = "0xC26428", Offset = "0xC26428", VA = "0xC26428")]
		private static bool isSpine(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x60004F3")]
		[Address(RVA = "0xC264C4", Offset = "0xC264C4", VA = "0xC264C4")]
		private static bool isHead(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x60004F4")]
		[Address(RVA = "0xC26560", Offset = "0xC26560", VA = "0xC26560")]
		private static bool isArm(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x60004F5")]
		[Address(RVA = "0xC265FC", Offset = "0xC265FC", VA = "0xC265FC")]
		private static bool isLeg(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x60004F6")]
		[Address(RVA = "0xC26698", Offset = "0xC26698", VA = "0xC26698")]
		private static bool isTail(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x60004F7")]
		[Address(RVA = "0xC26734", Offset = "0xC26734", VA = "0xC26734")]
		private static bool isEye(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x60004F8")]
		[Address(RVA = "0xC26B60", Offset = "0xC26B60", VA = "0xC26B60")]
		private static bool isTypeExclude(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x60004F9")]
		[Address(RVA = "0xC26354", Offset = "0xC26354", VA = "0xC26354")]
		private static bool matchesNaming(string boneName, string[] namingConvention)
		{
			return default(bool);
		}

		[Token(Token = "0x60004FA")]
		[Address(RVA = "0xC26ADC", Offset = "0xC26ADC", VA = "0xC26ADC")]
		private static bool excludesNaming(string boneName, string[] namingConvention)
		{
			return default(bool);
		}

		[Token(Token = "0x60004FB")]
		[Address(RVA = "0xC26BC0", Offset = "0xC26BC0", VA = "0xC26BC0")]
		private static bool matchesLastLetter(string boneName, string[] namingConvention)
		{
			return default(bool);
		}

		[Token(Token = "0x60004FC")]
		[Address(RVA = "0xC26C80", Offset = "0xC26C80", VA = "0xC26C80")]
		private static bool LastLetterIs(string boneName, string letter)
		{
			return default(bool);
		}

		[Token(Token = "0x60004FD")]
		[Address(RVA = "0xC26A68", Offset = "0xC26A68", VA = "0xC26A68")]
		private static string firstLetter(string boneName)
		{
			return null;
		}

		[Token(Token = "0x60004FE")]
		[Address(RVA = "0xC269F8", Offset = "0xC269F8", VA = "0xC269F8")]
		private static string lastLetter(string boneName)
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x2000085")]
	public class BipedReferences
	{
		[Token(Token = "0x2000086")]
		public struct AutoDetectParams
		{
			[Token(Token = "0x4000397")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool legsParentInSpine;

			[Token(Token = "0x4000398")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
			public bool includeEyes;

			[Token(Token = "0x170000C8")]
			public static AutoDetectParams Default
			{
				[Token(Token = "0x6000519")]
				[Address(RVA = "0xC2C594", Offset = "0xC2C594", VA = "0xC2C594")]
				get
				{
					return default(AutoDetectParams);
				}
			}

			[Token(Token = "0x6000518")]
			[Address(RVA = "0xC2C580", Offset = "0xC2C580", VA = "0xC2C580")]
			public AutoDetectParams(bool legsParentInSpine, bool includeEyes)
			{
			}
		}

		[Token(Token = "0x4000386")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform root;

		[Token(Token = "0x4000387")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform pelvis;

		[Token(Token = "0x4000388")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform leftThigh;

		[Token(Token = "0x4000389")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform leftCalf;

		[Token(Token = "0x400038A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform leftFoot;

		[Token(Token = "0x400038B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform rightThigh;

		[Token(Token = "0x400038C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform rightCalf;

		[Token(Token = "0x400038D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform rightFoot;

		[Token(Token = "0x400038E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform leftUpperArm;

		[Token(Token = "0x400038F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform leftForearm;

		[Token(Token = "0x4000390")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform leftHand;

		[Token(Token = "0x4000391")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Transform rightUpperArm;

		[Token(Token = "0x4000392")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Transform rightForearm;

		[Token(Token = "0x4000393")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Transform rightHand;

		[Token(Token = "0x4000394")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Transform head;

		[Token(Token = "0x4000395")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Transform[] spine;

		[Token(Token = "0x4000396")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Transform[] eyes;

		[Token(Token = "0x170000C6")]
		public virtual bool isFilled
		{
			[Token(Token = "0x6000500")]
			[Address(RVA = "0xC28C78", Offset = "0xC28C78", VA = "0xC28C78", Slot = "4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000C7")]
		public bool isEmpty
		{
			[Token(Token = "0x6000501")]
			[Address(RVA = "0xC28FD4", Offset = "0xC28FD4", VA = "0xC28FD4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000502")]
		[Address(RVA = "0xC28FE4", Offset = "0xC28FE4", VA = "0xC28FE4", Slot = "5")]
		public virtual bool IsEmpty(bool includeRoot)
		{
			return default(bool);
		}

		[Token(Token = "0x6000503")]
		[Address(RVA = "0xC29370", Offset = "0xC29370", VA = "0xC29370", Slot = "6")]
		public virtual bool Contains(Transform t, bool ignoreRoot = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6000504")]
		[Address(RVA = "0xC29700", Offset = "0xC29700", VA = "0xC29700")]
		public static bool AutoDetectReferences(ref BipedReferences references, Transform root, AutoDetectParams autoDetectParams)
		{
			return default(bool);
		}

		[Token(Token = "0x6000505")]
		[Address(RVA = "0xC29D24", Offset = "0xC29D24", VA = "0xC29D24")]
		public static void DetectReferencesByNaming(ref BipedReferences references, Transform root, AutoDetectParams autoDetectParams)
		{
		}

		[Token(Token = "0x6000506")]
		[Address(RVA = "0xC29960", Offset = "0xC29960", VA = "0xC29960")]
		public static void AssignHumanoidReferences(ref BipedReferences references, Animator animator, AutoDetectParams autoDetectParams)
		{
		}

		[Token(Token = "0x6000507")]
		[Address(RVA = "0xC2A520", Offset = "0xC2A520", VA = "0xC2A520")]
		public static bool SetupError(BipedReferences references, ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000508")]
		[Address(RVA = "0xC2A600", Offset = "0xC2A600", VA = "0xC2A600")]
		public static bool SetupWarning(BipedReferences references, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000509")]
		[Address(RVA = "0xC2B078", Offset = "0xC2B078", VA = "0xC2B078")]
		private static bool IsNeckBone(Transform bone, Transform leftUpperArm)
		{
			return default(bool);
		}

		[Token(Token = "0x600050A")]
		[Address(RVA = "0xC2AE98", Offset = "0xC2AE98", VA = "0xC2AE98")]
		private static bool AddBoneToEyes(Transform bone, ref BipedReferences references, AutoDetectParams autoDetectParams)
		{
			return default(bool);
		}

		[Token(Token = "0x600050B")]
		[Address(RVA = "0xC2AC38", Offset = "0xC2AC38", VA = "0xC2AC38")]
		private static bool AddBoneToSpine(Transform bone, ref BipedReferences references, AutoDetectParams autoDetectParams)
		{
			return default(bool);
		}

		[Token(Token = "0x600050C")]
		[Address(RVA = "0xC2A69C", Offset = "0xC2A69C", VA = "0xC2A69C")]
		private static void DetectLimb(BipedNaming.BoneType boneType, BipedNaming.BoneSide boneSide, ref Transform firstBone, ref Transform secondBone, ref Transform lastBone, Transform[] transforms)
		{
		}

		[Token(Token = "0x600050D")]
		[Address(RVA = "0xC2AF8C", Offset = "0xC2AF8C", VA = "0xC2AF8C")]
		private static void AddBoneToHierarchy(ref Transform[] bones, Transform transform)
		{
		}

		[Token(Token = "0x600050E")]
		[Address(RVA = "0xC2B158", Offset = "0xC2B158", VA = "0xC2B158")]
		private static bool LimbError(Transform bone1, Transform bone2, Transform bone3, ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x600050F")]
		[Address(RVA = "0xC2BC18", Offset = "0xC2BC18", VA = "0xC2BC18")]
		private static bool LimbWarning(Transform bone1, Transform bone2, Transform bone3, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000510")]
		[Address(RVA = "0xC2B6D8", Offset = "0xC2B6D8", VA = "0xC2B6D8")]
		private static bool SpineError(BipedReferences references, ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000511")]
		[Address(RVA = "0xC2BEEC", Offset = "0xC2BEEC", VA = "0xC2BEEC")]
		private static bool SpineWarning(BipedReferences references, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000512")]
		[Address(RVA = "0xC2BA2C", Offset = "0xC2BA2C", VA = "0xC2BA2C")]
		private static bool EyesError(BipedReferences references, ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000513")]
		[Address(RVA = "0xC2BEF4", Offset = "0xC2BEF4", VA = "0xC2BEF4")]
		private static bool EyesWarning(BipedReferences references, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000514")]
		[Address(RVA = "0xC2BEFC", Offset = "0xC2BEFC", VA = "0xC2BEFC")]
		private static bool RootHeightWarning(BipedReferences references, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000515")]
		[Address(RVA = "0xC2C0B0", Offset = "0xC2C0B0", VA = "0xC2C0B0")]
		private static bool FacingAxisWarning(BipedReferences references, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000516")]
		[Address(RVA = "0xC2C518", Offset = "0xC2C518", VA = "0xC2C518")]
		private static float GetVerticalOffset(UnityEngine.Vector3 p1, UnityEngine.Vector3 p2, Quaternion rotation)
		{
			return default(float);
		}

		[Token(Token = "0x6000517")]
		[Address(RVA = "0xC298F8", Offset = "0xC298F8", VA = "0xC298F8")]
		public BipedReferences()
		{
		}
	}
	[Token(Token = "0x2000087")]
	public class Comments : MonoBehaviour
	{
		[Token(Token = "0x4000399")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Multiline]
		public string text;

		[Token(Token = "0x600051A")]
		[Address(RVA = "0xC2C59C", Offset = "0xC2C59C", VA = "0xC2C59C")]
		public Comments()
		{
		}
	}
	[Token(Token = "0x2000088")]
	public class DemoGUIMessage : MonoBehaviour
	{
		[Token(Token = "0x400039A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string text;

		[Token(Token = "0x400039B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Color color;

		[Token(Token = "0x600051B")]
		[Address(RVA = "0xC2C5A4", Offset = "0xC2C5A4", VA = "0xC2C5A4")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x600051C")]
		[Address(RVA = "0xC2C69C", Offset = "0xC2C69C", VA = "0xC2C69C")]
		public DemoGUIMessage()
		{
		}
	}
	[Token(Token = "0x2000089")]
	public class Hierarchy
	{
		[Token(Token = "0x600051D")]
		[Address(RVA = "0xC2C494", Offset = "0xC2C494", VA = "0xC2C494")]
		public static bool HierarchyIsValid(Transform[] bones)
		{
			return default(bool);
		}

		[Token(Token = "0x600051E")]
		[Address(RVA = "0xC2C388", Offset = "0xC2C388", VA = "0xC2C388")]
		public static UnityEngine.Object ContainsDuplicate(UnityEngine.Object[] objects)
		{
			return null;
		}

		[Token(Token = "0x600051F")]
		[Address(RVA = "0xC2A778", Offset = "0xC2A778", VA = "0xC2A778")]
		public static bool IsAncestor(Transform transform, Transform ancestor)
		{
			return default(bool);
		}

		[Token(Token = "0x6000520")]
		[Address(RVA = "0xC2AD88", Offset = "0xC2AD88", VA = "0xC2AD88")]
		public static bool ContainsChild(Transform transform, Transform child)
		{
			return default(bool);
		}

		[Token(Token = "0x6000521")]
		[Address(RVA = "0xC2A9F8", Offset = "0xC2A9F8", VA = "0xC2A9F8")]
		public static void AddAncestors(Transform transform, Transform blocker, ref Transform[] array)
		{
		}

		[Token(Token = "0x6000522")]
		[Address(RVA = "0xC2C6AC", Offset = "0xC2C6AC", VA = "0xC2C6AC")]
		public static Transform GetAncestor(Transform transform, int minChildCount)
		{
			return null;
		}

		[Token(Token = "0x6000523")]
		[Address(RVA = "0xC2A8A8", Offset = "0xC2A8A8", VA = "0xC2A8A8")]
		public static Transform GetFirstCommonAncestor(Transform t1, Transform t2)
		{
			return null;
		}

		[Token(Token = "0x6000524")]
		[Address(RVA = "0xC2C7A0", Offset = "0xC2C7A0", VA = "0xC2C7A0")]
		public static Transform GetFirstCommonAncestor(Transform[] transforms)
		{
			return null;
		}

		[Token(Token = "0x6000525")]
		[Address(RVA = "0xC2CB0C", Offset = "0xC2CB0C", VA = "0xC2CB0C")]
		public static Transform GetFirstCommonAncestorRecursive(Transform transform, Transform[] transforms)
		{
			return null;
		}

		[Token(Token = "0x6000526")]
		[Address(RVA = "0xC2C904", Offset = "0xC2C904", VA = "0xC2C904")]
		public static bool IsCommonAncestor(Transform transform, Transform[] transforms)
		{
			return default(bool);
		}

		[Token(Token = "0x6000527")]
		[Address(RVA = "0xC2CC94", Offset = "0xC2CC94", VA = "0xC2CC94")]
		public Hierarchy()
		{
		}
	}
	[Token(Token = "0x200008A")]
	public class InspectorComment : PropertyAttribute
	{
		[Token(Token = "0x400039C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string name;

		[Token(Token = "0x400039D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string color;

		[Token(Token = "0x6000528")]
		[Address(RVA = "0xC2CC9C", Offset = "0xC2CC9C", VA = "0xC2CC9C")]
		public InspectorComment(string name)
		{
		}

		[Token(Token = "0x6000529")]
		[Address(RVA = "0xC2CD04", Offset = "0xC2CD04", VA = "0xC2CD04")]
		public InspectorComment(string name, string color)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200008B")]
	public enum InterpolationMode
	{
		[Token(Token = "0x400039F")]
		None,
		[Token(Token = "0x40003A0")]
		InOutCubic,
		[Token(Token = "0x40003A1")]
		InOutQuintic,
		[Token(Token = "0x40003A2")]
		InOutSine,
		[Token(Token = "0x40003A3")]
		InQuintic,
		[Token(Token = "0x40003A4")]
		InQuartic,
		[Token(Token = "0x40003A5")]
		InCubic,
		[Token(Token = "0x40003A6")]
		InQuadratic,
		[Token(Token = "0x40003A7")]
		InElastic,
		[Token(Token = "0x40003A8")]
		InElasticSmall,
		[Token(Token = "0x40003A9")]
		InElasticBig,
		[Token(Token = "0x40003AA")]
		InSine,
		[Token(Token = "0x40003AB")]
		InBack,
		[Token(Token = "0x40003AC")]
		OutQuintic,
		[Token(Token = "0x40003AD")]
		OutQuartic,
		[Token(Token = "0x40003AE")]
		OutCubic,
		[Token(Token = "0x40003AF")]
		OutInCubic,
		[Token(Token = "0x40003B0")]
		OutInQuartic,
		[Token(Token = "0x40003B1")]
		OutElastic,
		[Token(Token = "0x40003B2")]
		OutElasticSmall,
		[Token(Token = "0x40003B3")]
		OutElasticBig,
		[Token(Token = "0x40003B4")]
		OutSine,
		[Token(Token = "0x40003B5")]
		OutBack,
		[Token(Token = "0x40003B6")]
		OutBackCubic,
		[Token(Token = "0x40003B7")]
		OutBackQuartic,
		[Token(Token = "0x40003B8")]
		BackInCubic,
		[Token(Token = "0x40003B9")]
		BackInQuartic
	}
	[Token(Token = "0x200008C")]
	public class Interp
	{
		[Token(Token = "0x600052A")]
		[Address(RVA = "0xC2CD6C", Offset = "0xC2CD6C", VA = "0xC2CD6C")]
		public static float Float(float t, InterpolationMode mode)
		{
			return default(float);
		}

		[Token(Token = "0x600052B")]
		[Address(RVA = "0xC2D6F4", Offset = "0xC2D6F4", VA = "0xC2D6F4")]
		public static UnityEngine.Vector3 V3(UnityEngine.Vector3 v1, UnityEngine.Vector3 v2, float t, InterpolationMode mode)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x600052C")]
		[Address(RVA = "0xC2D764", Offset = "0xC2D764", VA = "0xC2D764")]
		public static float LerpValue(float value, float target, float increaseSpeed, float decreaseSpeed)
		{
			return default(float);
		}

		[Token(Token = "0x600052D")]
		[Address(RVA = "0xC2D16C", Offset = "0xC2D16C", VA = "0xC2D16C")]
		private static float None(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x600052E")]
		[Address(RVA = "0xC2D178", Offset = "0xC2D178", VA = "0xC2D178")]
		private static float InOutCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x600052F")]
		[Address(RVA = "0xC2D19C", Offset = "0xC2D19C", VA = "0xC2D19C")]
		private static float InOutQuintic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000530")]
		[Address(RVA = "0xC2D1D8", Offset = "0xC2D1D8", VA = "0xC2D1D8")]
		private static float InQuintic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000531")]
		[Address(RVA = "0xC2D1F0", Offset = "0xC2D1F0", VA = "0xC2D1F0")]
		private static float InQuartic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000532")]
		[Address(RVA = "0xC2D204", Offset = "0xC2D204", VA = "0xC2D204")]
		private static float InCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000533")]
		[Address(RVA = "0xC2D218", Offset = "0xC2D218", VA = "0xC2D218")]
		private static float InQuadratic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000534")]
		[Address(RVA = "0xC2D228", Offset = "0xC2D228", VA = "0xC2D228")]
		private static float OutQuintic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000535")]
		[Address(RVA = "0xC2D270", Offset = "0xC2D270", VA = "0xC2D270")]
		private static float OutQuartic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000536")]
		[Address(RVA = "0xC2D2A8", Offset = "0xC2D2A8", VA = "0xC2D2A8")]
		private static float OutCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000537")]
		[Address(RVA = "0xC2D2D0", Offset = "0xC2D2D0", VA = "0xC2D2D0")]
		private static float OutInCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000538")]
		[Address(RVA = "0xC2D7D4", Offset = "0xC2D7D4", VA = "0xC2D7D4")]
		private static float OutInQuartic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000539")]
		[Address(RVA = "0xC2D304", Offset = "0xC2D304", VA = "0xC2D304")]
		private static float BackInCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x600053A")]
		[Address(RVA = "0xC2D32C", Offset = "0xC2D32C", VA = "0xC2D32C")]
		private static float BackInQuartic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x600053B")]
		[Address(RVA = "0xC2D35C", Offset = "0xC2D35C", VA = "0xC2D35C")]
		private static float OutBackCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x600053C")]
		[Address(RVA = "0xC2D390", Offset = "0xC2D390", VA = "0xC2D390")]
		private static float OutBackQuartic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x600053D")]
		[Address(RVA = "0xC2D3D4", Offset = "0xC2D3D4", VA = "0xC2D3D4")]
		private static float OutElasticSmall(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x600053E")]
		[Address(RVA = "0xC2D438", Offset = "0xC2D438", VA = "0xC2D438")]
		private static float OutElasticBig(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x600053F")]
		[Address(RVA = "0xC2D49C", Offset = "0xC2D49C", VA = "0xC2D49C")]
		private static float InElasticSmall(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000540")]
		[Address(RVA = "0xC2D4F0", Offset = "0xC2D4F0", VA = "0xC2D4F0")]
		private static float InElasticBig(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000541")]
		[Address(RVA = "0xC2D544", Offset = "0xC2D544", VA = "0xC2D544")]
		private static float InSine(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000542")]
		[Address(RVA = "0xC2D57C", Offset = "0xC2D57C", VA = "0xC2D57C")]
		private static float OutSine(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000543")]
		[Address(RVA = "0xC2D5B0", Offset = "0xC2D5B0", VA = "0xC2D5B0")]
		private static float InOutSine(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000544")]
		[Address(RVA = "0xC2D808", Offset = "0xC2D808", VA = "0xC2D808")]
		private static float InElastic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000545")]
		[Address(RVA = "0xC2D5F4", Offset = "0xC2D5F4", VA = "0xC2D5F4")]
		private static float OutElastic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000546")]
		[Address(RVA = "0xC2D684", Offset = "0xC2D684", VA = "0xC2D684")]
		private static float InBack(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000547")]
		[Address(RVA = "0xC2D6B4", Offset = "0xC2D6B4", VA = "0xC2D6B4")]
		private static float OutBack(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000548")]
		[Address(RVA = "0xC2D898", Offset = "0xC2D898", VA = "0xC2D898")]
		public Interp()
		{
		}
	}
	[Token(Token = "0x200008D")]
	public class LargeHeader : PropertyAttribute
	{
		[Token(Token = "0x40003BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string name;

		[Token(Token = "0x40003BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string color;

		[Token(Token = "0x6000549")]
		[Address(RVA = "0xC2D8A0", Offset = "0xC2D8A0", VA = "0xC2D8A0")]
		public LargeHeader(string name)
		{
		}

		[Token(Token = "0x600054A")]
		[Address(RVA = "0xC2D908", Offset = "0xC2D908", VA = "0xC2D908")]
		public LargeHeader(string name, string color)
		{
		}
	}
	[Token(Token = "0x200008E")]
	public static class LayerMaskExtensions
	{
		[Token(Token = "0x600054B")]
		[Address(RVA = "0xC2D970", Offset = "0xC2D970", VA = "0xC2D970")]
		public static bool Contains(LayerMask mask, int layer)
		{
			return default(bool);
		}

		[Token(Token = "0x600054C")]
		[Address(RVA = "0xC2D9BC", Offset = "0xC2D9BC", VA = "0xC2D9BC")]
		public static LayerMask Create(params string[] layerNames)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x600054D")]
		[Address(RVA = "0xC2DA78", Offset = "0xC2DA78", VA = "0xC2DA78")]
		public static LayerMask Create(params int[] layerNumbers)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x600054E")]
		[Address(RVA = "0xC2D9D0", Offset = "0xC2D9D0", VA = "0xC2D9D0")]
		public static LayerMask NamesToMask(params string[] layerNames)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x600054F")]
		[Address(RVA = "0xC2DA8C", Offset = "0xC2DA8C", VA = "0xC2DA8C")]
		public static LayerMask LayerNumbersToMask(params int[] layerNumbers)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x6000550")]
		[Address(RVA = "0xC2DB1C", Offset = "0xC2DB1C", VA = "0xC2DB1C")]
		public static LayerMask Inverse(this LayerMask original)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x6000551")]
		[Address(RVA = "0xC2DB44", Offset = "0xC2DB44", VA = "0xC2DB44")]
		public static LayerMask AddToMask(this LayerMask original, params string[] layerNames)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x6000552")]
		[Address(RVA = "0xC2DB90", Offset = "0xC2DB90", VA = "0xC2DB90")]
		public static LayerMask RemoveFromMask(this LayerMask original, params string[] layerNames)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x6000553")]
		[Address(RVA = "0xC2DBF8", Offset = "0xC2DBF8", VA = "0xC2DBF8")]
		public static string[] MaskToNames(this LayerMask original)
		{
			return null;
		}

		[Token(Token = "0x6000554")]
		[Address(RVA = "0xC2DD4C", Offset = "0xC2DD4C", VA = "0xC2DD4C")]
		public static int[] MaskToNumbers(this LayerMask original)
		{
			return null;
		}

		[Token(Token = "0x6000555")]
		[Address(RVA = "0xC2DE84", Offset = "0xC2DE84", VA = "0xC2DE84")]
		public static string MaskToString(this LayerMask original)
		{
			return null;
		}

		[Token(Token = "0x6000556")]
		[Address(RVA = "0xC2DEDC", Offset = "0xC2DEDC", VA = "0xC2DEDC")]
		public static string MaskToString(this LayerMask original, string delimiter)
		{
			return null;
		}
	}
	[Token(Token = "0x200008F")]
	public static class QuaTools
	{
		[Token(Token = "0x6000557")]
		[Address(RVA = "0xC2DF00", Offset = "0xC2DF00", VA = "0xC2DF00")]
		public static float GetYaw(Quaternion space, UnityEngine.Vector3 forward)
		{
			return default(float);
		}

		[Token(Token = "0x6000558")]
		[Address(RVA = "0xC2DF58", Offset = "0xC2DF58", VA = "0xC2DF58")]
		public static float GetPitch(Quaternion space, UnityEngine.Vector3 forward)
		{
			return default(float);
		}

		[Token(Token = "0x6000559")]
		[Address(RVA = "0xC2E088", Offset = "0xC2E088", VA = "0xC2E088")]
		public static float GetBank(Quaternion space, UnityEngine.Vector3 forward, UnityEngine.Vector3 up)
		{
			return default(float);
		}

		[Token(Token = "0x600055A")]
		[Address(RVA = "0xC2E208", Offset = "0xC2E208", VA = "0xC2E208")]
		public static float GetYaw(Quaternion space, Quaternion rotation)
		{
			return default(float);
		}

		[Token(Token = "0x600055B")]
		[Address(RVA = "0xC2E2E4", Offset = "0xC2E2E4", VA = "0xC2E2E4")]
		public static float GetPitch(Quaternion space, Quaternion rotation)
		{
			return default(float);
		}

		[Token(Token = "0x600055C")]
		[Address(RVA = "0xC2E3C0", Offset = "0xC2E3C0", VA = "0xC2E3C0")]
		public static float GetBank(Quaternion space, Quaternion rotation)
		{
			return default(float);
		}

		[Token(Token = "0x600055D")]
		[Address(RVA = "0xC2E5D8", Offset = "0xC2E5D8", VA = "0xC2E5D8")]
		public static Quaternion Lerp(Quaternion fromRotation, Quaternion toRotation, float weight)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600055E")]
		[Address(RVA = "0xC2E624", Offset = "0xC2E624", VA = "0xC2E624")]
		public static Quaternion Slerp(Quaternion fromRotation, Quaternion toRotation, float weight)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600055F")]
		[Address(RVA = "0xC2E670", Offset = "0xC2E670", VA = "0xC2E670")]
		public static Quaternion LinearBlend(Quaternion q, float weight)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000560")]
		[Address(RVA = "0xC2E774", Offset = "0xC2E774", VA = "0xC2E774")]
		public static Quaternion SphericalBlend(Quaternion q, float weight)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000561")]
		[Address(RVA = "0xC2E878", Offset = "0xC2E878", VA = "0xC2E878")]
		public static Quaternion FromToAroundAxis(UnityEngine.Vector3 fromDirection, UnityEngine.Vector3 toDirection, UnityEngine.Vector3 axis)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000562")]
		[Address(RVA = "0xC2E98C", Offset = "0xC2E98C", VA = "0xC2E98C")]
		public static Quaternion RotationToLocalSpace(Quaternion space, Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000563")]
		[Address(RVA = "0xC2EA34", Offset = "0xC2EA34", VA = "0xC2EA34")]
		public static Quaternion FromToRotation(Quaternion from, Quaternion to)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000564")]
		[Address(RVA = "0xC2EB40", Offset = "0xC2EB40", VA = "0xC2EB40")]
		public static UnityEngine.Vector3 GetAxis(UnityEngine.Vector3 v)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6000565")]
		[Address(RVA = "0xC2ECA8", Offset = "0xC2ECA8", VA = "0xC2ECA8")]
		public static Quaternion ClampRotation(Quaternion rotation, float clampWeight, int clampSmoothing)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000566")]
		[Address(RVA = "0xC2EE8C", Offset = "0xC2EE8C", VA = "0xC2EE8C")]
		public static float ClampAngle(float angle, float clampWeight, int clampSmoothing)
		{
			return default(float);
		}

		[Token(Token = "0x6000567")]
		[Address(RVA = "0xC2EF5C", Offset = "0xC2EF5C", VA = "0xC2EF5C")]
		public static Quaternion MatchRotation(Quaternion targetRotation, UnityEngine.Vector3 targetforwardAxis, UnityEngine.Vector3 targetUpAxis, UnityEngine.Vector3 forwardAxis, UnityEngine.Vector3 upAxis)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000568")]
		[Address(RVA = "0xC2F0E0", Offset = "0xC2F0E0", VA = "0xC2F0E0")]
		public static UnityEngine.Vector3 ToBiPolar(UnityEngine.Vector3 euler)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6000569")]
		[Address(RVA = "0xC2F1EC", Offset = "0xC2F1EC", VA = "0xC2F1EC")]
		public static float ToBiPolar(float angle)
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000090")]
	public abstract class Singleton<T> : MonoBehaviour where T : Singleton<T>
	{
		[Token(Token = "0x40003BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static T sInstance;

		[Token(Token = "0x170000C9")]
		public static T instance
		{
			[Token(Token = "0x600056A")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600056B")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x600056C")]
		protected Singleton()
		{
		}
	}
	[Token(Token = "0x2000091")]
	public class SolverManager : MonoBehaviour
	{
		[Token(Token = "0x40003BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("If true, will fix all the Transforms used by the solver to their initial state in each Update. This prevents potential problems with unanimated bones and animator culling with a small cost of performance. Not recommended for CCD and FABRIK solvers.")]
		public bool fixTransforms;

		[Token(Token = "0x40003BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Animator animator;

		[Token(Token = "0x40003BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Animation legacy;

		[Token(Token = "0x40003C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool updateFrame;

		[Token(Token = "0x40003C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool componentInitiated;

		[Token(Token = "0x40003C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		private bool skipSolverUpdate;

		[Token(Token = "0x170000CA")]
		private bool animatePhysics
		{
			[Token(Token = "0x6000573")]
			[Address(RVA = "0xC2F360", Offset = "0xC2F360", VA = "0xC2F360")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000CB")]
		private bool isAnimated
		{
			[Token(Token = "0x6000577")]
			[Address(RVA = "0xC2F620", Offset = "0xC2F620", VA = "0xC2F620")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600056D")]
		[Address(RVA = "0xC2F244", Offset = "0xC2F244", VA = "0xC2F244")]
		public void Disable()
		{
		}

		[Token(Token = "0x600056E")]
		[Address(RVA = "0xC2F2D8", Offset = "0xC2F2D8", VA = "0xC2F2D8", Slot = "4")]
		protected virtual void InitiateSolver()
		{
		}

		[Token(Token = "0x600056F")]
		[Address(RVA = "0xC2F2DC", Offset = "0xC2F2DC", VA = "0xC2F2DC", Slot = "5")]
		protected virtual void UpdateSolver()
		{
		}

		[Token(Token = "0x6000570")]
		[Address(RVA = "0xC2F2E0", Offset = "0xC2F2E0", VA = "0xC2F2E0", Slot = "6")]
		protected virtual void FixTransforms()
		{
		}

		[Token(Token = "0x6000571")]
		[Address(RVA = "0xC2F2E4", Offset = "0xC2F2E4", VA = "0xC2F2E4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000572")]
		[Address(RVA = "0xC2F35C", Offset = "0xC2F35C", VA = "0xC2F35C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000574")]
		[Address(RVA = "0xC2F30C", Offset = "0xC2F30C", VA = "0xC2F30C")]
		private void Initiate()
		{
		}

		[Token(Token = "0x6000575")]
		[Address(RVA = "0xC2F5E4", Offset = "0xC2F5E4", VA = "0xC2F5E4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000576")]
		[Address(RVA = "0xC2F42C", Offset = "0xC2F42C", VA = "0xC2F42C")]
		private void FindAnimatorRecursive(Transform t, bool findInChildren)
		{
		}

		[Token(Token = "0x6000578")]
		[Address(RVA = "0xC2F6B8", Offset = "0xC2F6B8", VA = "0xC2F6B8")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000579")]
		[Address(RVA = "0xC2F704", Offset = "0xC2F704", VA = "0xC2F704")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600057A")]
		[Address(RVA = "0xC2F750", Offset = "0xC2F750", VA = "0xC2F750")]
		public void UpdateSolverExternal()
		{
		}

		[Token(Token = "0x600057B")]
		[Address(RVA = "0xC2F788", Offset = "0xC2F788", VA = "0xC2F788")]
		public SolverManager()
		{
		}
	}
	[Token(Token = "0x2000092")]
	public class TriggerEventBroadcaster : MonoBehaviour
	{
		[Token(Token = "0x40003C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject target;

		[Token(Token = "0x600057C")]
		[Address(RVA = "0xC2F798", Offset = "0xC2F798", VA = "0xC2F798")]
		private void OnTriggerEnter(Collider collider)
		{
		}

		[Token(Token = "0x600057D")]
		[Address(RVA = "0xC2F84C", Offset = "0xC2F84C", VA = "0xC2F84C")]
		private void OnTriggerStay(Collider collider)
		{
		}

		[Token(Token = "0x600057E")]
		[Address(RVA = "0xC2F900", Offset = "0xC2F900", VA = "0xC2F900")]
		private void OnTriggerExit(Collider collider)
		{
		}

		[Token(Token = "0x600057F")]
		[Address(RVA = "0xC2F9B4", Offset = "0xC2F9B4", VA = "0xC2F9B4")]
		public TriggerEventBroadcaster()
		{
		}
	}
	[Token(Token = "0x2000093")]
	public static class V2Tools
	{
		[Token(Token = "0x6000580")]
		[Address(RVA = "0xC2F9BC", Offset = "0xC2F9BC", VA = "0xC2F9BC")]
		public static UnityEngine.Vector2 XZ(UnityEngine.Vector3 v)
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x6000581")]
		[Address(RVA = "0xC2F9C4", Offset = "0xC2F9C4", VA = "0xC2F9C4")]
		public static float DeltaAngle(UnityEngine.Vector2 dir1, UnityEngine.Vector2 dir2)
		{
			return default(float);
		}

		[Token(Token = "0x6000582")]
		[Address(RVA = "0xC2FA54", Offset = "0xC2FA54", VA = "0xC2FA54")]
		public static float DeltaAngleXZ(UnityEngine.Vector3 dir1, UnityEngine.Vector3 dir2)
		{
			return default(float);
		}

		[Token(Token = "0x6000583")]
		[Address(RVA = "0xC2FAE8", Offset = "0xC2FAE8", VA = "0xC2FAE8")]
		public static bool LineCircleIntersect(UnityEngine.Vector2 p1, UnityEngine.Vector2 p2, UnityEngine.Vector2 c, float r)
		{
			return default(bool);
		}

		[Token(Token = "0x6000584")]
		[Address(RVA = "0xC2FB98", Offset = "0xC2FB98", VA = "0xC2FB98")]
		public static bool RayCircleIntersect(UnityEngine.Vector2 p1, UnityEngine.Vector2 dir, UnityEngine.Vector2 c, float r)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000094")]
	public static class V3Tools
	{
		[Token(Token = "0x6000585")]
		[Address(RVA = "0xC2FBF4", Offset = "0xC2FBF4", VA = "0xC2FBF4")]
		public static float GetYaw(UnityEngine.Vector3 forward)
		{
			return default(float);
		}

		[Token(Token = "0x6000586")]
		[Address(RVA = "0xC2FC14", Offset = "0xC2FC14", VA = "0xC2FC14")]
		public static float GetPitch(UnityEngine.Vector3 forward)
		{
			return default(float);
		}

		[Token(Token = "0x6000587")]
		[Address(RVA = "0xC2FCE8", Offset = "0xC2FCE8", VA = "0xC2FCE8")]
		public static float GetBank(UnityEngine.Vector3 forward, UnityEngine.Vector3 up)
		{
			return default(float);
		}

		[Token(Token = "0x6000588")]
		[Address(RVA = "0xC2FDA0", Offset = "0xC2FDA0", VA = "0xC2FDA0")]
		public static float GetYaw(UnityEngine.Vector3 spaceForward, UnityEngine.Vector3 spaceUp, UnityEngine.Vector3 forward)
		{
			return default(float);
		}

		[Token(Token = "0x6000589")]
		[Address(RVA = "0xC2FDFC", Offset = "0xC2FDFC", VA = "0xC2FDFC")]
		public static float GetPitch(UnityEngine.Vector3 spaceForward, UnityEngine.Vector3 spaceUp, UnityEngine.Vector3 forward)
		{
			return default(float);
		}

		[Token(Token = "0x600058A")]
		[Address(RVA = "0xC2FE58", Offset = "0xC2FE58", VA = "0xC2FE58")]
		public static float GetBank(UnityEngine.Vector3 spaceForward, UnityEngine.Vector3 spaceUp, UnityEngine.Vector3 forward, UnityEngine.Vector3 up)
		{
			return default(float);
		}

		[Token(Token = "0x600058B")]
		[Address(RVA = "0xC2FF70", Offset = "0xC2FF70", VA = "0xC2FF70")]
		public static UnityEngine.Vector3 Lerp(UnityEngine.Vector3 fromVector, UnityEngine.Vector3 toVector, float weight)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x600058C")]
		[Address(RVA = "0xC2FFCC", Offset = "0xC2FFCC", VA = "0xC2FFCC")]
		public static UnityEngine.Vector3 Slerp(UnityEngine.Vector3 fromVector, UnityEngine.Vector3 toVector, float weight)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x600058D")]
		[Address(RVA = "0xC30004", Offset = "0xC30004", VA = "0xC30004")]
		public static UnityEngine.Vector3 ExtractVertical(UnityEngine.Vector3 v, UnityEngine.Vector3 verticalAxis, float weight)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x600058E")]
		[Address(RVA = "0xC30154", Offset = "0xC30154", VA = "0xC30154")]
		public static UnityEngine.Vector3 ExtractHorizontal(UnityEngine.Vector3 v, UnityEngine.Vector3 normal, float weight)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x600058F")]
		[Address(RVA = "0xC302D0", Offset = "0xC302D0", VA = "0xC302D0")]
		public static UnityEngine.Vector3 ClampDirection(UnityEngine.Vector3 direction, UnityEngine.Vector3 normalDirection, float clampWeight, int clampSmoothing)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6000590")]
		[Address(RVA = "0xC30500", Offset = "0xC30500", VA = "0xC30500")]
		public static UnityEngine.Vector3 ClampDirection(UnityEngine.Vector3 direction, UnityEngine.Vector3 normalDirection, float clampWeight, int clampSmoothing, out bool changed)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6000591")]
		[Address(RVA = "0xC30750", Offset = "0xC30750", VA = "0xC30750")]
		public static UnityEngine.Vector3 ClampDirection(UnityEngine.Vector3 direction, UnityEngine.Vector3 normalDirection, float clampWeight, int clampSmoothing, out float clampValue)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6000592")]
		[Address(RVA = "0xC309A8", Offset = "0xC309A8", VA = "0xC309A8")]
		public static UnityEngine.Vector3 LineToPlane(UnityEngine.Vector3 origin, UnityEngine.Vector3 direction, UnityEngine.Vector3 planeNormal, UnityEngine.Vector3 planePoint)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6000593")]
		[Address(RVA = "0xC30B54", Offset = "0xC30B54", VA = "0xC30B54")]
		public static UnityEngine.Vector3 PointToPlane(UnityEngine.Vector3 point, UnityEngine.Vector3 planePosition, UnityEngine.Vector3 planeNormal)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6000594")]
		[Address(RVA = "0xC30D4C", Offset = "0xC30D4C", VA = "0xC30D4C")]
		public static UnityEngine.Vector3 TransformPointUnscaled(Transform t, UnityEngine.Vector3 point)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6000595")]
		[Address(RVA = "0xC30DC8", Offset = "0xC30DC8", VA = "0xC30DC8")]
		public static UnityEngine.Vector3 InverseTransformPointUnscaled(Transform t, UnityEngine.Vector3 point)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6000596")]
		[Address(RVA = "0xC30E58", Offset = "0xC30E58", VA = "0xC30E58")]
		public static UnityEngine.Vector3 InverseTransformPoint(UnityEngine.Vector3 tPos, Quaternion tRot, UnityEngine.Vector3 tScale, UnityEngine.Vector3 point)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6000597")]
		[Address(RVA = "0xC30EF0", Offset = "0xC30EF0", VA = "0xC30EF0")]
		public static UnityEngine.Vector3 TransformPoint(UnityEngine.Vector3 tPos, Quaternion tRot, UnityEngine.Vector3 tScale, UnityEngine.Vector3 point)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6000598")]
		[Address(RVA = "0xC30EE0", Offset = "0xC30EE0", VA = "0xC30EE0")]
		public static UnityEngine.Vector3 Div(UnityEngine.Vector3 v1, UnityEngine.Vector3 v2)
		{
			return default(UnityEngine.Vector3);
		}
	}
	[Token(Token = "0x2000095")]
	public static class Warning
	{
		[Token(Token = "0x2000096")]
		public delegate void Logger(string message);

		[Token(Token = "0x40003C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool logged;

		[Token(Token = "0x6000599")]
		[Address(RVA = "0xC30F6C", Offset = "0xC30F6C", VA = "0xC30F6C")]
		public static void Log(string message, Logger logger, bool logInEditMode = false)
		{
		}

		[Token(Token = "0x600059A")]
		[Address(RVA = "0xC2A46C", Offset = "0xC2A46C", VA = "0xC2A46C")]
		public static void Log(string message, Transform context, bool logInEditMode = false)
		{
		}
	}
}
namespace RootMotion.FinalIK
{
	[Token(Token = "0x2000097")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page4.html")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/Biped IK")]
	public class BipedIK : SolverManager
	{
		[Token(Token = "0x40003C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public BipedReferences references;

		[Token(Token = "0x40003C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public BipedIKSolvers solvers;

		[Token(Token = "0x600059F")]
		[Address(RVA = "0xC31118", Offset = "0xC31118", VA = "0xC31118")]
		[ContextMenu("User Manual")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x60005A0")]
		[Address(RVA = "0xC3115C", Offset = "0xC3115C", VA = "0xC3115C")]
		[ContextMenu("Scrpt Reference")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x60005A1")]
		[Address(RVA = "0xC311A0", Offset = "0xC311A0", VA = "0xC311A0")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60005A2")]
		[Address(RVA = "0xC311E4", Offset = "0xC311E4", VA = "0xC311E4")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60005A3")]
		[Address(RVA = "0xC31228", Offset = "0xC31228", VA = "0xC31228")]
		public float GetIKPositionWeight(AvatarIKGoal goal)
		{
			return default(float);
		}

		[Token(Token = "0x60005A4")]
		[Address(RVA = "0xC312C0", Offset = "0xC312C0", VA = "0xC312C0")]
		public float GetIKRotationWeight(AvatarIKGoal goal)
		{
			return default(float);
		}

		[Token(Token = "0x60005A5")]
		[Address(RVA = "0xC312DC", Offset = "0xC312DC", VA = "0xC312DC")]
		public void SetIKPositionWeight(AvatarIKGoal goal, float weight)
		{
		}

		[Token(Token = "0x60005A6")]
		[Address(RVA = "0xC31308", Offset = "0xC31308", VA = "0xC31308")]
		public void SetIKRotationWeight(AvatarIKGoal goal, float weight)
		{
		}

		[Token(Token = "0x60005A7")]
		[Address(RVA = "0xC31334", Offset = "0xC31334", VA = "0xC31334")]
		public void SetIKPosition(AvatarIKGoal goal, UnityEngine.Vector3 IKPosition)
		{
		}

		[Token(Token = "0x60005A8")]
		[Address(RVA = "0xC31370", Offset = "0xC31370", VA = "0xC31370")]
		public void SetIKRotation(AvatarIKGoal goal, Quaternion IKRotation)
		{
		}

		[Token(Token = "0x60005A9")]
		[Address(RVA = "0xC313B0", Offset = "0xC313B0", VA = "0xC313B0")]
		public UnityEngine.Vector3 GetIKPosition(AvatarIKGoal goal)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x60005AA")]
		[Address(RVA = "0xC313D0", Offset = "0xC313D0", VA = "0xC313D0")]
		public Quaternion GetIKRotation(AvatarIKGoal goal)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60005AB")]
		[Address(RVA = "0xC313F0", Offset = "0xC313F0", VA = "0xC313F0")]
		public void SetLookAtWeight(float weight, float bodyWeight, float headWeight, float eyesWeight, float clampWeight, float clampWeightHead, float clampWeightEyes)
		{
		}

		[Token(Token = "0x60005AC")]
		[Address(RVA = "0xC31414", Offset = "0xC31414", VA = "0xC31414")]
		public void SetLookAtPosition(UnityEngine.Vector3 lookAtPosition)
		{
		}

		[Token(Token = "0x60005AD")]
		[Address(RVA = "0xC3143C", Offset = "0xC3143C", VA = "0xC3143C")]
		public void SetSpinePosition(UnityEngine.Vector3 spinePosition)
		{
		}

		[Token(Token = "0x60005AE")]
		[Address(RVA = "0xC31464", Offset = "0xC31464", VA = "0xC31464")]
		public void SetSpineWeight(float weight)
		{
		}

		[Token(Token = "0x60005AF")]
		[Address(RVA = "0xC31244", Offset = "0xC31244", VA = "0xC31244")]
		public IKSolverLimb GetGoalIK(AvatarIKGoal goal)
		{
			return null;
		}

		[Token(Token = "0x60005B0")]
		[Address(RVA = "0xC31488", Offset = "0xC31488", VA = "0xC31488")]
		public void InitiateBipedIK()
		{
		}

		[Token(Token = "0x60005B1")]
		[Address(RVA = "0xC31494", Offset = "0xC31494", VA = "0xC31494")]
		public void UpdateBipedIK()
		{
		}

		[Token(Token = "0x60005B2")]
		[Address(RVA = "0xC314A0", Offset = "0xC314A0", VA = "0xC314A0")]
		public void SetToDefaults()
		{
		}

		[Token(Token = "0x60005B3")]
		[Address(RVA = "0xC3170C", Offset = "0xC3170C", VA = "0xC3170C", Slot = "6")]
		protected override void FixTransforms()
		{
		}

		[Token(Token = "0x60005B4")]
		[Address(RVA = "0xC317A8", Offset = "0xC317A8", VA = "0xC317A8", Slot = "4")]
		protected override void InitiateSolver()
		{
		}

		[Token(Token = "0x60005B5")]
		[Address(RVA = "0xC31AC8", Offset = "0xC31AC8", VA = "0xC31AC8", Slot = "5")]
		protected override void UpdateSolver()
		{
		}

		[Token(Token = "0x60005B6")]
		[Address(RVA = "0xC31F34", Offset = "0xC31F34", VA = "0xC31F34")]
		public void LogWarning(string message)
		{
		}

		[Token(Token = "0x60005B7")]
		[Address(RVA = "0xC31F58", Offset = "0xC31F58", VA = "0xC31F58")]
		public BipedIK()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000098")]
	public class BipedIKSolvers
	{
		[Token(Token = "0x40003C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public IKSolverLimb leftFoot;

		[Token(Token = "0x40003C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public IKSolverLimb rightFoot;

		[Token(Token = "0x40003C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public IKSolverLimb leftHand;

		[Token(Token = "0x40003CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public IKSolverLimb rightHand;

		[Token(Token = "0x40003CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public IKSolverFABRIK spine;

		[Token(Token = "0x40003CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverLookAt lookAt;

		[Token(Token = "0x40003CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public IKSolverAim aim;

		[Token(Token = "0x40003CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Constraints pelvis;

		[Token(Token = "0x40003CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private IKSolverLimb[] _limbs;

		[Token(Token = "0x40003D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private IKSolver[] _ikSolvers;

		[Token(Token = "0x170000CC")]
		public IKSolverLimb[] limbs
		{
			[Token(Token = "0x60005B8")]
			[Address(RVA = "0xC315DC", Offset = "0xC315DC", VA = "0xC315DC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000CD")]
		public IKSolver[] ikSolvers
		{
			[Token(Token = "0x60005B9")]
			[Address(RVA = "0xC3217C", Offset = "0xC3217C", VA = "0xC3217C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60005BA")]
		[Address(RVA = "0xC31958", Offset = "0xC31958", VA = "0xC31958")]
		public void AssignReferences(BipedReferences references)
		{
		}

		[Token(Token = "0x60005BB")]
		[Address(RVA = "0xC31FF0", Offset = "0xC31FF0", VA = "0xC31FF0")]
		public BipedIKSolvers()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000099")]
	public abstract class Constraint
	{
		[Token(Token = "0x40003D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform transform;

		[Token(Token = "0x40003D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float weight;

		[Token(Token = "0x170000CE")]
		public bool isValid
		{
			[Token(Token = "0x60005BC")]
			[Address(RVA = "0xC32338", Offset = "0xC32338", VA = "0xC32338")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60005BD")]
		public abstract void UpdateConstraint();

		[Token(Token = "0x60005BE")]
		[Address(RVA = "0xC32398", Offset = "0xC32398", VA = "0xC32398")]
		protected Constraint()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200009A")]
	public class ConstraintPosition : Constraint
	{
		[Token(Token = "0x40003D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public UnityEngine.Vector3 position;

		[Token(Token = "0x60005BF")]
		[Address(RVA = "0xC323A0", Offset = "0xC323A0", VA = "0xC323A0", Slot = "4")]
		public override void UpdateConstraint()
		{
		}

		[Token(Token = "0x60005C0")]
		[Address(RVA = "0xC32438", Offset = "0xC32438", VA = "0xC32438")]
		public ConstraintPosition()
		{
		}

		[Token(Token = "0x60005C1")]
		[Address(RVA = "0xC32440", Offset = "0xC32440", VA = "0xC32440")]
		public ConstraintPosition(Transform transform)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200009B")]
	public class ConstraintPositionOffset : Constraint
	{
		[Token(Token = "0x40003D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public UnityEngine.Vector3 offset;

		[Token(Token = "0x40003D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private UnityEngine.Vector3 defaultLocalPosition;

		[Token(Token = "0x40003D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private UnityEngine.Vector3 lastLocalPosition;

		[Token(Token = "0x40003D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool initiated;

		[Token(Token = "0x170000CF")]
		private bool positionChanged
		{
			[Token(Token = "0x60005C5")]
			[Address(RVA = "0xC3256C", Offset = "0xC3256C", VA = "0xC3256C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60005C2")]
		[Address(RVA = "0xC32468", Offset = "0xC32468", VA = "0xC32468", Slot = "4")]
		public override void UpdateConstraint()
		{
		}

		[Token(Token = "0x60005C3")]
		[Address(RVA = "0xC325C8", Offset = "0xC325C8", VA = "0xC325C8")]
		public ConstraintPositionOffset()
		{
		}

		[Token(Token = "0x60005C4")]
		[Address(RVA = "0xC325D0", Offset = "0xC325D0", VA = "0xC325D0")]
		public ConstraintPositionOffset(Transform transform)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200009C")]
	public class ConstraintRotation : Constraint
	{
		[Token(Token = "0x40003D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Quaternion rotation;

		[Token(Token = "0x60005C6")]
		[Address(RVA = "0xC325F8", Offset = "0xC325F8", VA = "0xC325F8", Slot = "4")]
		public override void UpdateConstraint()
		{
		}

		[Token(Token = "0x60005C7")]
		[Address(RVA = "0xC32674", Offset = "0xC32674", VA = "0xC32674")]
		public ConstraintRotation()
		{
		}

		[Token(Token = "0x60005C8")]
		[Address(RVA = "0xC3267C", Offset = "0xC3267C", VA = "0xC3267C")]
		public ConstraintRotation(Transform transform)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200009D")]
	public class ConstraintRotationOffset : Constraint
	{
		[Token(Token = "0x40003D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Quaternion offset;

		[Token(Token = "0x40003DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Quaternion defaultRotation;

		[Token(Token = "0x40003DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Quaternion defaultLocalRotation;

		[Token(Token = "0x40003DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Quaternion lastLocalRotation;

		[Token(Token = "0x40003DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Quaternion defaultTargetLocalRotation;

		[Token(Token = "0x40003DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private bool initiated;

		[Token(Token = "0x170000D0")]
		private bool rotationChanged
		{
			[Token(Token = "0x60005CC")]
			[Address(RVA = "0xC327A8", Offset = "0xC327A8", VA = "0xC327A8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60005C9")]
		[Address(RVA = "0xC326A4", Offset = "0xC326A4", VA = "0xC326A4", Slot = "4")]
		public override void UpdateConstraint()
		{
		}

		[Token(Token = "0x60005CA")]
		[Address(RVA = "0xC32800", Offset = "0xC32800", VA = "0xC32800")]
		public ConstraintRotationOffset()
		{
		}

		[Token(Token = "0x60005CB")]
		[Address(RVA = "0xC32808", Offset = "0xC32808", VA = "0xC32808")]
		public ConstraintRotationOffset(Transform transform)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200009E")]
	public class Constraints
	{
		[Token(Token = "0x40003DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform transform;

		[Token(Token = "0x40003E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x40003E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEngine.Vector3 positionOffset;

		[Token(Token = "0x40003E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public UnityEngine.Vector3 position;

		[Token(Token = "0x40003E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Range(0f, 1f)]
		public float positionWeight;

		[Token(Token = "0x40003E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public UnityEngine.Vector3 rotationOffset;

		[Token(Token = "0x40003E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public UnityEngine.Vector3 rotation;

		[Token(Token = "0x40003E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Range(0f, 1f)]
		public float rotationWeight;

		[Token(Token = "0x60005CD")]
		[Address(RVA = "0xC32830", Offset = "0xC32830", VA = "0xC32830")]
		public bool IsValid()
		{
			return default(bool);
		}

		[Token(Token = "0x60005CE")]
		[Address(RVA = "0xC31A78", Offset = "0xC31A78", VA = "0xC31A78")]
		public void Initiate(Transform transform)
		{
		}

		[Token(Token = "0x60005CF")]
		[Address(RVA = "0xC31C3C", Offset = "0xC31C3C", VA = "0xC31C3C")]
		public void Update()
		{
		}

		[Token(Token = "0x60005D0")]
		[Address(RVA = "0xC32330", Offset = "0xC32330", VA = "0xC32330")]
		public Constraints()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200009F")]
	public class Finger
	{
		[Serializable]
		[Token(Token = "0x20000A0")]
		public enum DOF
		{
			[Token(Token = "0x40003FA")]
			One,
			[Token(Token = "0x40003FB")]
			Three
		}

		[Token(Token = "0x40003E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Range(0f, 1f)]
		[Tooltip("Master Weight for the finger.")]
		public float weight;

		[Token(Token = "0x40003E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[Tooltip("The weight of rotating the finger tip and bending the finger to the target.")]
		[Range(0f, 1f)]
		public float rotationWeight;

		[Token(Token = "0x40003E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Rotational degrees of freedom. When set to 'One' the fingers will be able to be rotated only around a single axis. When 3, all 3 axes are free to rotate around.")]
		public DOF rotationDOF;

		[Token(Token = "0x40003EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("If enabled, keeps bone1 twist angle fixed relative to bone2.")]
		public bool fixBone1Twist;

		[Token(Token = "0x40003EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The first bone of the finger.")]
		public Transform bone1;

		[Token(Token = "0x40003EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The second bone of the finger.")]
		public Transform bone2;

		[Token(Token = "0x40003ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The (optional) third bone of the finger. This can be ignored for thumbs.")]
		public Transform bone3;

		[Token(Token = "0x40003EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The fingertip object. If your character doesn't have tip bones, you can create an empty GameObject and parent it to the last bone in the finger. Place it to the tip of the finger.")]
		public Transform tip;

		[Token(Token = "0x40003EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The IK target (optional, can use IKPosition and IKRotation directly).")]
		public Transform target;

		[Token(Token = "0x40003F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private IKSolverLimb solver;

		[Token(Token = "0x40003F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Quaternion bone3RelativeToTarget;

		[Token(Token = "0x40003F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private UnityEngine.Vector3 bone3DefaultLocalPosition;

		[Token(Token = "0x40003F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private Quaternion bone3DefaultLocalRotation;

		[Token(Token = "0x40003F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private UnityEngine.Vector3 bone1Axis;

		[Token(Token = "0x40003F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private UnityEngine.Vector3 tipAxis;

		[Token(Token = "0x40003F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private UnityEngine.Vector3 bone1TwistAxis;

		[Token(Token = "0x40003F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private UnityEngine.Vector3 defaultBendNormal;

		[Token(Token = "0x170000D1")]
		public bool initiated
		{
			[Token(Token = "0x60005D1")]
			[Address(RVA = "0xC32890", Offset = "0xC32890", VA = "0xC32890")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60005D2")]
			[Address(RVA = "0xC32898", Offset = "0xC32898", VA = "0xC32898")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000D2")]
		public UnityEngine.Vector3 IKPosition
		{
			[Token(Token = "0x60005D3")]
			[Address(RVA = "0xC328A4", Offset = "0xC328A4", VA = "0xC328A4")]
			get
			{
				return default(UnityEngine.Vector3);
			}
			[Token(Token = "0x60005D4")]
			[Address(RVA = "0xC328C4", Offset = "0xC328C4", VA = "0xC328C4")]
			set
			{
			}
		}

		[Token(Token = "0x170000D3")]
		public Quaternion IKRotation
		{
			[Token(Token = "0x60005D5")]
			[Address(RVA = "0xC328E4", Offset = "0xC328E4", VA = "0xC328E4")]
			get
			{
				return default(Quaternion);
			}
			[Token(Token = "0x60005D6")]
			[Address(RVA = "0xC32904", Offset = "0xC32904", VA = "0xC32904")]
			set
			{
			}
		}

		[Token(Token = "0x60005D7")]
		[Address(RVA = "0xC32924", Offset = "0xC32924", VA = "0xC32924")]
		public bool IsValid(ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x60005D8")]
		[Address(RVA = "0xC32A10", Offset = "0xC32A10", VA = "0xC32A10")]
		public void Initiate(Transform hand, int index)
		{
		}

		[Token(Token = "0x60005D9")]
		[Address(RVA = "0xC33078", Offset = "0xC33078", VA = "0xC33078")]
		public void FixTransforms()
		{
		}

		[Token(Token = "0x60005DA")]
		[Address(RVA = "0xC33144", Offset = "0xC33144", VA = "0xC33144")]
		public void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x60005DB")]
		[Address(RVA = "0xC331FC", Offset = "0xC331FC", VA = "0xC331FC")]
		public void Update(float masterWeight)
		{
		}

		[Token(Token = "0x60005DC")]
		[Address(RVA = "0xC33794", Offset = "0xC33794", VA = "0xC33794")]
		public Finger()
		{
		}
	}
	[Token(Token = "0x20000A1")]
	public class FingerRig : SolverManager
	{
		[Token(Token = "0x40003FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Range(0f, 1f)]
		[Tooltip("The master weight for all fingers.")]
		public float weight;

		[Token(Token = "0x40003FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Finger[] fingers;

		[Token(Token = "0x170000D4")]
		public bool initiated
		{
			[Token(Token = "0x60005DD")]
			[Address(RVA = "0xC347A4", Offset = "0xC347A4", VA = "0xC347A4")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60005DE")]
			[Address(RVA = "0xC347AC", Offset = "0xC347AC", VA = "0xC347AC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60005DF")]
		[Address(RVA = "0xC347B8", Offset = "0xC347B8", VA = "0xC347B8")]
		public bool IsValid(ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x60005E0")]
		[Address(RVA = "0xC34830", Offset = "0xC34830", VA = "0xC34830")]
		[ContextMenu("Auto-detect")]
		public void AutoDetect()
		{
		}

		[Token(Token = "0x60005E1")]
		[Address(RVA = "0xC34B24", Offset = "0xC34B24", VA = "0xC34B24")]
		public void AddFinger(Transform bone1, Transform bone2, Transform bone3, Transform tip, [Optional] Transform target)
		{
		}

		[Token(Token = "0x60005E2")]
		[Address(RVA = "0xC34C94", Offset = "0xC34C94", VA = "0xC34C94")]
		public void RemoveFinger(int index)
		{
		}

		[Token(Token = "0x60005E3")]
		[Address(RVA = "0xC34A3C", Offset = "0xC34A3C", VA = "0xC34A3C")]
		private void AddChildrenRecursive(Transform parent, ref Transform[] array)
		{
		}

		[Token(Token = "0x60005E4")]
		[Address(RVA = "0xC34DF8", Offset = "0xC34DF8", VA = "0xC34DF8", Slot = "4")]
		protected override void InitiateSolver()
		{
		}

		[Token(Token = "0x60005E5")]
		[Address(RVA = "0xC34EA8", Offset = "0xC34EA8", VA = "0xC34EA8")]
		public void UpdateFingerSolvers()
		{
		}

		[Token(Token = "0x60005E6")]
		[Address(RVA = "0xC34F10", Offset = "0xC34F10", VA = "0xC34F10")]
		public void FixFingerTransforms()
		{
		}

		[Token(Token = "0x60005E7")]
		[Address(RVA = "0xC34F7C", Offset = "0xC34F7C", VA = "0xC34F7C")]
		public void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x60005E8")]
		[Address(RVA = "0xC34FDC", Offset = "0xC34FDC", VA = "0xC34FDC", Slot = "5")]
		protected override void UpdateSolver()
		{
		}

		[Token(Token = "0x60005E9")]
		[Address(RVA = "0xC34FE0", Offset = "0xC34FE0", VA = "0xC34FE0", Slot = "6")]
		protected override void FixTransforms()
		{
		}

		[Token(Token = "0x60005EA")]
		[Address(RVA = "0xC34FF4", Offset = "0xC34FF4", VA = "0xC34FF4")]
		public FingerRig()
		{
		}
	}
	[Token(Token = "0x20000A2")]
	public abstract class Grounder : MonoBehaviour
	{
		[Token(Token = "0x20000A3")]
		public delegate void GrounderDelegate();

		[Token(Token = "0x40003FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The master weight. Use this to fade in/out the grounding effect.")]
		[Range(0f, 1f)]
		public float weight;

		[Token(Token = "0x4000400")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The Grounding solver. Not to confuse with IK solvers.")]
		public Grounding solver;

		[Token(Token = "0x4000401")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GrounderDelegate OnPreGrounder;

		[Token(Token = "0x4000402")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GrounderDelegate OnPostGrounder;

		[Token(Token = "0x170000D5")]
		public bool initiated
		{
			[Token(Token = "0x60005EC")]
			[Address(RVA = "0xC35054", Offset = "0xC35054", VA = "0xC35054")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60005ED")]
			[Address(RVA = "0xC3505C", Offset = "0xC3505C", VA = "0xC3505C")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x60005EB")]
		public abstract void ResetPosition();

		[Token(Token = "0x60005EE")]
		[Address(RVA = "0xC35068", Offset = "0xC35068", VA = "0xC35068")]
		protected UnityEngine.Vector3 GetSpineOffsetTarget()
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x60005EF")]
		[Address(RVA = "0xC35318", Offset = "0xC35318", VA = "0xC35318")]
		protected void LogWarning(string message)
		{
		}

		[Token(Token = "0x60005F0")]
		[Address(RVA = "0xC3512C", Offset = "0xC3512C", VA = "0xC3512C")]
		private UnityEngine.Vector3 GetLegSpineBendVector(Grounding.Leg leg)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x60005F1")]
		[Address(RVA = "0xC35340", Offset = "0xC35340", VA = "0xC35340")]
		private UnityEngine.Vector3 GetLegSpineTangent(Grounding.Leg leg)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x60005F2")]
		protected abstract void OpenUserManual();

		[Token(Token = "0x60005F3")]
		protected abstract void OpenScriptReference();

		[Token(Token = "0x60005F4")]
		[Address(RVA = "0xC354B4", Offset = "0xC354B4", VA = "0xC354B4")]
		protected Grounder()
		{
		}
	}
	[Token(Token = "0x20000A4")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page9.html")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Grounder/Grounder Biped")]
	public class GrounderBipedIK : Grounder
	{
		[Token(Token = "0x4000404")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The BipedIK componet.")]
		public BipedIK ik;

		[Token(Token = "0x4000405")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("The amount of spine bending towards upward slopes.")]
		public float spineBend;

		[Token(Token = "0x4000406")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("The interpolation speed of spine bending.")]
		public float spineSpeed;

		[Token(Token = "0x4000407")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Transform[] feet;

		[Token(Token = "0x4000408")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Quaternion[] footRotations;

		[Token(Token = "0x4000409")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private UnityEngine.Vector3 animatedPelvisLocalPosition;

		[Token(Token = "0x400040A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private UnityEngine.Vector3 solvedPelvisLocalPosition;

		[Token(Token = "0x400040B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private UnityEngine.Vector3 spineOffset;

		[Token(Token = "0x400040C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private float lastWeight;

		[Token(Token = "0x60005F9")]
		[Address(RVA = "0xC356BC", Offset = "0xC356BC", VA = "0xC356BC", Slot = "5")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x60005FA")]
		[Address(RVA = "0xC35700", Offset = "0xC35700", VA = "0xC35700", Slot = "6")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x60005FB")]
		[Address(RVA = "0xC35744", Offset = "0xC35744", VA = "0xC35744", Slot = "4")]
		public override void ResetPosition()
		{
		}

		[Token(Token = "0x60005FC")]
		[Address(RVA = "0xC35824", Offset = "0xC35824", VA = "0xC35824")]
		private bool IsReadyToInitiate()
		{
			return default(bool);
		}

		[Token(Token = "0x60005FD")]
		[Address(RVA = "0xC358C4", Offset = "0xC358C4", VA = "0xC358C4")]
		private void Update()
		{
		}

		[Token(Token = "0x60005FE")]
		[Address(RVA = "0xC35918", Offset = "0xC35918", VA = "0xC35918")]
		private void Initiate()
		{
		}

		[Token(Token = "0x60005FF")]
		[Address(RVA = "0xC35E8C", Offset = "0xC35E8C", VA = "0xC35E8C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000600")]
		[Address(RVA = "0xC35ECC", Offset = "0xC35ECC", VA = "0xC35ECC")]
		private void OnSolverUpdate()
		{
		}

		[Token(Token = "0x6000601")]
		[Address(RVA = "0xC36544", Offset = "0xC36544", VA = "0xC36544")]
		private void SetLegIK(IKSolverLimb limb, int index)
		{
		}

		[Token(Token = "0x6000602")]
		[Address(RVA = "0xC3666C", Offset = "0xC3666C", VA = "0xC3666C")]
		private void OnPostSolverUpdate()
		{
		}

		[Token(Token = "0x6000603")]
		[Address(RVA = "0xC3683C", Offset = "0xC3683C", VA = "0xC3683C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000604")]
		[Address(RVA = "0xC369E4", Offset = "0xC369E4", VA = "0xC369E4")]
		public GrounderBipedIK()
		{
		}
	}
	[Token(Token = "0x20000A5")]
	[HelpURL("https://www.youtube.com/watch?v=9MiZiaJorws&index=6&list=PLVxSIA1OaTOu8Nos3CalXbJ2DrKnntMv6")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Grounder/Grounder Full Body Biped")]
	public class GrounderFBBIK : Grounder
	{
		[Serializable]
		[Token(Token = "0x20000A6")]
		public class SpineEffector
		{
			[Token(Token = "0x4000414")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The type of the effector.")]
			public FullBodyBipedEffector effectorType;

			[Token(Token = "0x4000415")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("The weight of horizontal bend offset towards the slope.")]
			public float horizontalWeight;

			[Token(Token = "0x4000416")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("The vertical bend offset weight.")]
			public float verticalWeight;

			[Token(Token = "0x6000613")]
			[Address(RVA = "0xC3767C", Offset = "0xC3767C", VA = "0xC3767C")]
			public SpineEffector()
			{
			}

			[Token(Token = "0x6000614")]
			[Address(RVA = "0xC3768C", Offset = "0xC3768C", VA = "0xC3768C")]
			public SpineEffector(FullBodyBipedEffector effectorType, float horizontalWeight, float verticalWeight)
			{
			}
		}

		[Token(Token = "0x400040D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Reference to the FBBIK componet.")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x400040E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("The amount of spine bending towards upward slopes.")]
		public float spineBend;

		[Token(Token = "0x400040F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("The interpolation speed of spine bending.")]
		public float spineSpeed;

		[Token(Token = "0x4000410")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public SpineEffector[] spine;

		[Token(Token = "0x4000411")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform[] feet;

		[Token(Token = "0x4000412")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private UnityEngine.Vector3 spineOffset;

		[Token(Token = "0x4000413")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private bool firstSolve;

		[Token(Token = "0x6000605")]
		[Address(RVA = "0xC36A70", Offset = "0xC36A70", VA = "0xC36A70")]
		[ContextMenu("TUTORIAL VIDEO")]
		private void OpenTutorial()
		{
		}

		[Token(Token = "0x6000606")]
		[Address(RVA = "0xC36AB4", Offset = "0xC36AB4", VA = "0xC36AB4", Slot = "5")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000607")]
		[Address(RVA = "0xC36AF8", Offset = "0xC36AF8", VA = "0xC36AF8", Slot = "6")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000608")]
		[Address(RVA = "0xC36B3C", Offset = "0xC36B3C", VA = "0xC36B3C", Slot = "4")]
		public override void ResetPosition()
		{
		}

		[Token(Token = "0x6000609")]
		[Address(RVA = "0xC36BA4", Offset = "0xC36BA4", VA = "0xC36BA4")]
		private bool IsReadyToInitiate()
		{
			return default(bool);
		}

		[Token(Token = "0x600060A")]
		[Address(RVA = "0xC36C2C", Offset = "0xC36C2C", VA = "0xC36C2C")]
		private void Update()
		{
		}

		[Token(Token = "0x600060B")]
		[Address(RVA = "0xC36E9C", Offset = "0xC36E9C", VA = "0xC36E9C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x600060C")]
		[Address(RVA = "0xC36EA8", Offset = "0xC36EA8", VA = "0xC36EA8")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600060D")]
		[Address(RVA = "0xC36C88", Offset = "0xC36C88", VA = "0xC36C88")]
		private void Initiate()
		{
		}

		[Token(Token = "0x600060E")]
		[Address(RVA = "0xC36EB4", Offset = "0xC36EB4", VA = "0xC36EB4")]
		private void OnSolverUpdate()
		{
		}

		[Token(Token = "0x600060F")]
		[Address(RVA = "0xC37224", Offset = "0xC37224", VA = "0xC37224")]
		private void SetLegIK(IKEffector effector, Grounding.Leg leg)
		{
		}

		[Token(Token = "0x6000610")]
		[Address(RVA = "0xC373A8", Offset = "0xC373A8", VA = "0xC373A8")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000611")]
		[Address(RVA = "0xC374DC", Offset = "0xC374DC", VA = "0xC374DC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000612")]
		[Address(RVA = "0xC375F0", Offset = "0xC375F0", VA = "0xC375F0")]
		public GrounderFBBIK()
		{
		}
	}
	[Token(Token = "0x20000A7")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page9.html")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Grounder/Grounder IK")]
	public class GrounderIK : Grounder
	{
		[Token(Token = "0x4000417")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public IK[] legs;

		[Token(Token = "0x4000418")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("The pelvis transform. Common ancestor of all the legs.")]
		public Transform pelvis;

		[Token(Token = "0x4000419")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The root Transform of the character, with the rigidbody and the collider.")]
		public Transform characterRoot;

		[Token(Token = "0x400041A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The weight of rotating the character root to the ground normal (range: 0 - 1).")]
		[Range(0f, 1f)]
		public float rootRotationWeight;

		[Token(Token = "0x400041B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("The speed of rotating the character root to the ground normal (range: 0 - inf).")]
		public float rootRotationSpeed;

		[Token(Token = "0x400041C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The maximum angle of root rotation (range: 0 - 90).")]
		public float maxRootRotationAngle;

		[Token(Token = "0x400041D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Transform[] feet;

		[Token(Token = "0x400041E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Quaternion[] footRotations;

		[Token(Token = "0x400041F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private UnityEngine.Vector3 animatedPelvisLocalPosition;

		[Token(Token = "0x4000420")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private UnityEngine.Vector3 solvedPelvisLocalPosition;

		[Token(Token = "0x4000421")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private int solvedFeet;

		[Token(Token = "0x4000422")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private bool solved;

		[Token(Token = "0x4000423")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float lastWeight;

		[Token(Token = "0x4000424")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Rigidbody characterRootRigidbody;

		[Token(Token = "0x6000615")]
		[Address(RVA = "0xC376D0", Offset = "0xC376D0", VA = "0xC376D0", Slot = "5")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000616")]
		[Address(RVA = "0xC37714", Offset = "0xC37714", VA = "0xC37714", Slot = "6")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000617")]
		[Address(RVA = "0xC37758", Offset = "0xC37758", VA = "0xC37758", Slot = "4")]
		public override void ResetPosition()
		{
		}

		[Token(Token = "0x6000618")]
		[Address(RVA = "0xC37770", Offset = "0xC37770", VA = "0xC37770")]
		private bool IsReadyToInitiate()
		{
			return default(bool);
		}

		[Token(Token = "0x6000619")]
		[Address(RVA = "0xC37990", Offset = "0xC37990", VA = "0xC37990")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600061A")]
		[Address(RVA = "0xC37A70", Offset = "0xC37A70", VA = "0xC37A70")]
		private void Update()
		{
		}

		[Token(Token = "0x600061B")]
		[Address(RVA = "0xC3815C", Offset = "0xC3815C", VA = "0xC3815C")]
		private void Initiate()
		{
		}

		[Token(Token = "0x600061C")]
		[Address(RVA = "0xC385BC", Offset = "0xC385BC", VA = "0xC385BC")]
		private void OnSolverUpdate()
		{
		}

		[Token(Token = "0x600061D")]
		[Address(RVA = "0xC38768", Offset = "0xC38768", VA = "0xC38768")]
		private void SetLegIK(int index)
		{
		}

		[Token(Token = "0x600061E")]
		[Address(RVA = "0xC38AF0", Offset = "0xC38AF0", VA = "0xC38AF0")]
		private void OnPostSolverUpdate()
		{
		}

		[Token(Token = "0x600061F")]
		[Address(RVA = "0xC38CC8", Offset = "0xC38CC8", VA = "0xC38CC8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000620")]
		[Address(RVA = "0xC38ECC", Offset = "0xC38ECC", VA = "0xC38ECC")]
		public GrounderIK()
		{
		}
	}
	[Token(Token = "0x20000A8")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page9.html")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Grounder/Grounder Quadruped")]
	public class GrounderQuadruped : Grounder
	{
		[Token(Token = "0x20000A9")]
		public struct Foot
		{
			[Token(Token = "0x4000442")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IKSolver solver;

			[Token(Token = "0x4000443")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Transform transform;

			[Token(Token = "0x4000444")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Quaternion rotation;

			[Token(Token = "0x4000445")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Grounding.Leg leg;

			[Token(Token = "0x6000633")]
			[Address(RVA = "0xC39A28", Offset = "0xC39A28", VA = "0xC39A28")]
			public Foot(IKSolver solver, Transform transform)
			{
			}
		}

		[Token(Token = "0x4000425")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The Grounding solver for the forelegs.")]
		public Grounding forelegSolver;

		[Token(Token = "0x4000426")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("The weight of rotating the character root to the ground angle (range: 0 - 1).")]
		[Range(0f, 1f)]
		public float rootRotationWeight;

		[Token(Token = "0x4000427")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("The maximum angle of rotating the quadruped downwards (going downhill, range: -90 - 0).")]
		[Range(-90f, 0f)]
		public float minRootRotation;

		[Token(Token = "0x4000428")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The maximum angle of rotating the quadruped upwards (going uphill, range: 0 - 90).")]
		[Range(0f, 90f)]
		public float maxRootRotation;

		[Token(Token = "0x4000429")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Tooltip("The speed of interpolating the character root rotation (range: 0 - inf).")]
		public float rootRotationSpeed;

		[Token(Token = "0x400042A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The maximum IK offset for the legs (range: 0 - inf).")]
		public float maxLegOffset;

		[Token(Token = "0x400042B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("The maximum IK offset for the forelegs (range: 0 - inf).")]
		public float maxForeLegOffset;

		[Token(Token = "0x400042C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The weight of maintaining the head's rotation as it was before solving the Grounding (range: 0 - 1).")]
		[Range(0f, 1f)]
		public float maintainHeadRotationWeight;

		[Token(Token = "0x400042D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The root Transform of the character, with the rigidbody and the collider.")]
		public Transform characterRoot;

		[Token(Token = "0x400042E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The pelvis transform. Common ancestor of both legs and the spine.")]
		public Transform pelvis;

		[Token(Token = "0x400042F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The last bone in the spine that is the common parent for both forelegs.")]
		public Transform lastSpineBone;

		[Token(Token = "0x4000430")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The head (optional, if you intend to maintain it's rotation).")]
		public Transform head;

		[Token(Token = "0x4000431")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public IK[] legs;

		[Token(Token = "0x4000432")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public IK[] forelegs;

		[Token(Token = "0x4000433")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[HideInInspector]
		public UnityEngine.Vector3 gravity;

		[Token(Token = "0x4000434")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Foot[] feet;

		[Token(Token = "0x4000435")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private UnityEngine.Vector3 animatedPelvisLocalPosition;

		[Token(Token = "0x4000436")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private Quaternion animatedPelvisLocalRotation;

		[Token(Token = "0x4000437")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private Quaternion animatedHeadLocalRotation;

		[Token(Token = "0x4000438")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private UnityEngine.Vector3 solvedPelvisLocalPosition;

		[Token(Token = "0x4000439")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Quaternion solvedPelvisLocalRotation;

		[Token(Token = "0x400043A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Quaternion solvedHeadLocalRotation;

		[Token(Token = "0x400043B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private int solvedFeet;

		[Token(Token = "0x400043C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		private bool solved;

		[Token(Token = "0x400043D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private float angle;

		[Token(Token = "0x400043E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private Transform forefeetRoot;

		[Token(Token = "0x400043F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Quaternion headRotation;

		[Token(Token = "0x4000440")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private float lastWeight;

		[Token(Token = "0x4000441")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private Rigidbody characterRootRigidbody;

		[Token(Token = "0x6000621")]
		[Address(RVA = "0xC38F58", Offset = "0xC38F58", VA = "0xC38F58", Slot = "5")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000622")]
		[Address(RVA = "0xC38F9C", Offset = "0xC38F9C", VA = "0xC38F9C", Slot = "6")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000623")]
		[Address(RVA = "0xC38FE0", Offset = "0xC38FE0", VA = "0xC38FE0", Slot = "4")]
		public override void ResetPosition()
		{
		}

		[Token(Token = "0x6000624")]
		[Address(RVA = "0xC39008", Offset = "0xC39008", VA = "0xC39008")]
		private bool IsReadyToInitiate()
		{
			return default(bool);
		}

		[Token(Token = "0x6000625")]
		[Address(RVA = "0xC3910C", Offset = "0xC3910C", VA = "0xC3910C")]
		private bool IsReadyToInitiateLegs(IK[] ikComponents)
		{
			return default(bool);
		}

		[Token(Token = "0x6000626")]
		[Address(RVA = "0xC39304", Offset = "0xC39304", VA = "0xC39304")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000627")]
		[Address(RVA = "0xC39368", Offset = "0xC39368", VA = "0xC39368")]
		private void Update()
		{
		}

		[Token(Token = "0x6000628")]
		[Address(RVA = "0xC393C0", Offset = "0xC393C0", VA = "0xC393C0")]
		private void Initiate()
		{
		}

		[Token(Token = "0x6000629")]
		[Address(RVA = "0xC396D4", Offset = "0xC396D4", VA = "0xC396D4")]
		private Transform[] InitiateFeet(IK[] ikComponents, ref Foot[] f, int indexOffset)
		{
			return null;
		}

		[Token(Token = "0x600062A")]
		[Address(RVA = "0xC39A5C", Offset = "0xC39A5C", VA = "0xC39A5C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600062B")]
		[Address(RVA = "0xC39AEC", Offset = "0xC39AEC", VA = "0xC39AEC")]
		private void RootRotation()
		{
		}

		[Token(Token = "0x600062C")]
		[Address(RVA = "0xC39F3C", Offset = "0xC39F3C", VA = "0xC39F3C")]
		private void OnSolverUpdate()
		{
		}

		[Token(Token = "0x600062D")]
		[Address(RVA = "0xC3A5FC", Offset = "0xC3A5FC", VA = "0xC3A5FC")]
		private void UpdateForefeetRoot()
		{
		}

		[Token(Token = "0x600062E")]
		[Address(RVA = "0xC3A8B4", Offset = "0xC3A8B4", VA = "0xC3A8B4")]
		private void SetFootIK(Foot foot, float maxOffset)
		{
		}

		[Token(Token = "0x600062F")]
		[Address(RVA = "0xC3A9E8", Offset = "0xC3A9E8", VA = "0xC3A9E8")]
		private void OnPostSolverUpdate()
		{
		}

		[Token(Token = "0x6000630")]
		[Address(RVA = "0xC3ACB0", Offset = "0xC3ACB0", VA = "0xC3ACB0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000631")]
		[Address(RVA = "0xC3ACE0", Offset = "0xC3ACE0", VA = "0xC3ACE0")]
		private void DestroyLegs(IK[] ikComponents)
		{
		}

		[Token(Token = "0x6000632")]
		[Address(RVA = "0xC3AEDC", Offset = "0xC3AEDC", VA = "0xC3AEDC")]
		public GrounderQuadruped()
		{
		}
	}
	[Token(Token = "0x20000AA")]
	[HelpURL("https://www.youtube.com/watch?v=9MiZiaJorws&index=6&list=PLVxSIA1OaTOu8Nos3CalXbJ2DrKnntMv6")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Grounder/Grounder VRIK")]
	public class GrounderVRIK : Grounder
	{
		[Token(Token = "0x4000446")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Reference to the VRIK componet.")]
		public VRIK ik;

		[Token(Token = "0x4000447")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Transform[] feet;

		[Token(Token = "0x6000634")]
		[Address(RVA = "0xC3B00C", Offset = "0xC3B00C", VA = "0xC3B00C")]
		[ContextMenu("TUTORIAL VIDEO")]
		private void OpenTutorial()
		{
		}

		[Token(Token = "0x6000635")]
		[Address(RVA = "0xC3B050", Offset = "0xC3B050", VA = "0xC3B050", Slot = "5")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000636")]
		[Address(RVA = "0xC3B094", Offset = "0xC3B094", VA = "0xC3B094", Slot = "6")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000637")]
		[Address(RVA = "0xC3B0D8", Offset = "0xC3B0D8", VA = "0xC3B0D8", Slot = "4")]
		public override void ResetPosition()
		{
		}

		[Token(Token = "0x6000638")]
		[Address(RVA = "0xC3B0F0", Offset = "0xC3B0F0", VA = "0xC3B0F0")]
		private bool IsReadyToInitiate()
		{
			return default(bool);
		}

		[Token(Token = "0x6000639")]
		[Address(RVA = "0xC3B178", Offset = "0xC3B178", VA = "0xC3B178")]
		private void Update()
		{
		}

		[Token(Token = "0x600063A")]
		[Address(RVA = "0xC3B1CC", Offset = "0xC3B1CC", VA = "0xC3B1CC")]
		private void Initiate()
		{
		}

		[Token(Token = "0x600063B")]
		[Address(RVA = "0xC3B34C", Offset = "0xC3B34C", VA = "0xC3B34C")]
		private void OnSolverUpdate()
		{
		}

		[Token(Token = "0x600063C")]
		[Address(RVA = "0xC3B3B8", Offset = "0xC3B3B8", VA = "0xC3B3B8")]
		private void SetLegIK(IKSolverVR.PositionOffset positionOffset, Transform bone, Grounding.Leg leg)
		{
		}

		[Token(Token = "0x600063D")]
		[Address(RVA = "0xC3B43C", Offset = "0xC3B43C", VA = "0xC3B43C")]
		private void OnPostSolverUpdate()
		{
		}

		[Token(Token = "0x600063E")]
		[Address(RVA = "0xC3B440", Offset = "0xC3B440", VA = "0xC3B440")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x600063F")]
		[Address(RVA = "0xC3B574", Offset = "0xC3B574", VA = "0xC3B574")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000640")]
		[Address(RVA = "0xC3B70C", Offset = "0xC3B70C", VA = "0xC3B70C")]
		public GrounderVRIK()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000AB")]
	public class Grounding
	{
		[Serializable]
		[Token(Token = "0x20000AC")]
		public enum Quality
		{
			[Token(Token = "0x4000461")]
			Fastest,
			[Token(Token = "0x4000462")]
			Simple,
			[Token(Token = "0x4000463")]
			Best
		}

		[Token(Token = "0x20000AD")]
		public class Leg
		{
			[Token(Token = "0x4000466")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Quaternion rotationOffset;

			[Token(Token = "0x400046C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public bool invertFootCenter;

			[Token(Token = "0x400046F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			private Grounding grounding;

			[Token(Token = "0x4000470")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
			private float lastTime;

			[Token(Token = "0x4000471")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
			private float deltaTime;

			[Token(Token = "0x4000472")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			private UnityEngine.Vector3 lastPosition;

			[Token(Token = "0x4000473")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
			private Quaternion toHitNormal;

			[Token(Token = "0x4000474")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
			private Quaternion r;

			[Token(Token = "0x4000475")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
			private UnityEngine.Vector3 up;

			[Token(Token = "0x4000476")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
			private bool doOverrideFootPosition;

			[Token(Token = "0x4000477")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
			private UnityEngine.Vector3 overrideFootPosition;

			[Token(Token = "0x4000478")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
			private UnityEngine.Vector3 transformPosition;

			[Token(Token = "0x170000DE")]
			public bool isGrounded
			{
				[Token(Token = "0x6000659")]
				[Address(RVA = "0xC3CCA0", Offset = "0xC3CCA0", VA = "0xC3CCA0")]
				[CompilerGenerated]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x600065A")]
				[Address(RVA = "0xC3CCA8", Offset = "0xC3CCA8", VA = "0xC3CCA8")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000DF")]
			public UnityEngine.Vector3 IKPosition
			{
				[Token(Token = "0x600065B")]
				[Address(RVA = "0xC3CCB4", Offset = "0xC3CCB4", VA = "0xC3CCB4")]
				[CompilerGenerated]
				get
				{
					return default(UnityEngine.Vector3);
				}
				[Token(Token = "0x600065C")]
				[Address(RVA = "0xC3CCC0", Offset = "0xC3CCC0", VA = "0xC3CCC0")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000E0")]
			public bool initiated
			{
				[Token(Token = "0x600065D")]
				[Address(RVA = "0xC3CCCC", Offset = "0xC3CCCC", VA = "0xC3CCCC")]
				[CompilerGenerated]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x600065E")]
				[Address(RVA = "0xC3CCD4", Offset = "0xC3CCD4", VA = "0xC3CCD4")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000E1")]
			public float heightFromGround
			{
				[Token(Token = "0x600065F")]
				[Address(RVA = "0xC3CCE0", Offset = "0xC3CCE0", VA = "0xC3CCE0")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000660")]
				[Address(RVA = "0xC3CCE8", Offset = "0xC3CCE8", VA = "0xC3CCE8")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000E2")]
			public UnityEngine.Vector3 velocity
			{
				[Token(Token = "0x6000661")]
				[Address(RVA = "0xC3CCF0", Offset = "0xC3CCF0", VA = "0xC3CCF0")]
				[CompilerGenerated]
				get
				{
					return default(UnityEngine.Vector3);
				}
				[Token(Token = "0x6000662")]
				[Address(RVA = "0xC3CCFC", Offset = "0xC3CCFC", VA = "0xC3CCFC")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000E3")]
			public Transform transform
			{
				[Token(Token = "0x6000663")]
				[Address(RVA = "0xC3CD08", Offset = "0xC3CD08", VA = "0xC3CD08")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x6000664")]
				[Address(RVA = "0xC3CD10", Offset = "0xC3CD10", VA = "0xC3CD10")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000E4")]
			public float IKOffset
			{
				[Token(Token = "0x6000665")]
				[Address(RVA = "0xC3CD18", Offset = "0xC3CD18", VA = "0xC3CD18")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000666")]
				[Address(RVA = "0xC3CD20", Offset = "0xC3CD20", VA = "0xC3CD20")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000E5")]
			public RaycastHit heelHit
			{
				[Token(Token = "0x6000667")]
				[Address(RVA = "0xC3CD28", Offset = "0xC3CD28", VA = "0xC3CD28")]
				[CompilerGenerated]
				get
				{
					return default(RaycastHit);
				}
				[Token(Token = "0x6000668")]
				[Address(RVA = "0xC3CD40", Offset = "0xC3CD40", VA = "0xC3CD40")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000E6")]
			public RaycastHit capsuleHit
			{
				[Token(Token = "0x6000669")]
				[Address(RVA = "0xC3CD60", Offset = "0xC3CD60", VA = "0xC3CD60")]
				[CompilerGenerated]
				get
				{
					return default(RaycastHit);
				}
				[Token(Token = "0x600066A")]
				[Address(RVA = "0xC3CD78", Offset = "0xC3CD78", VA = "0xC3CD78")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000E7")]
			public RaycastHit GetHitPoint
			{
				[Token(Token = "0x600066B")]
				[Address(RVA = "0xC3CD98", Offset = "0xC3CD98", VA = "0xC3CD98")]
				get
				{
					return default(RaycastHit);
				}
			}

			[Token(Token = "0x170000E8")]
			public float stepHeightFromGround
			{
				[Token(Token = "0x6000671")]
				[Address(RVA = "0xC3D688", Offset = "0xC3D688", VA = "0xC3D688")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170000E9")]
			private float rootYOffset
			{
				[Token(Token = "0x600067A")]
				[Address(RVA = "0xC3D7D8", Offset = "0xC3D7D8", VA = "0xC3D7D8")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x600066C")]
			[Address(RVA = "0xC3CDE0", Offset = "0xC3CDE0", VA = "0xC3CDE0")]
			public void SetFootPosition(UnityEngine.Vector3 position)
			{
			}

			[Token(Token = "0x600066D")]
			[Address(RVA = "0xC3BC20", Offset = "0xC3BC20", VA = "0xC3BC20")]
			public void Initiate(Grounding grounding, Transform transform)
			{
			}

			[Token(Token = "0x600066E")]
			[Address(RVA = "0xC3CDF4", Offset = "0xC3CDF4", VA = "0xC3CDF4")]
			public void OnEnable()
			{
			}

			[Token(Token = "0x600066F")]
			[Address(RVA = "0xC3C910", Offset = "0xC3C910", VA = "0xC3C910")]
			public void Reset()
			{
			}

			[Token(Token = "0x6000670")]
			[Address(RVA = "0xC3BD10", Offset = "0xC3BD10", VA = "0xC3BD10")]
			public void Process()
			{
			}

			[Token(Token = "0x6000672")]
			[Address(RVA = "0xC3D298", Offset = "0xC3D298", VA = "0xC3D298")]
			private RaycastHit GetCapsuleHit(UnityEngine.Vector3 offsetFromHeel)
			{
				return default(RaycastHit);
			}

			[Token(Token = "0x6000673")]
			[Address(RVA = "0xC3CE34", Offset = "0xC3CE34", VA = "0xC3CE34")]
			private RaycastHit GetRaycastHit(UnityEngine.Vector3 offsetFromHeel)
			{
				return default(RaycastHit);
			}

			[Token(Token = "0x6000674")]
			[Address(RVA = "0xC3D71C", Offset = "0xC3D71C", VA = "0xC3D71C")]
			private UnityEngine.Vector3 RotateNormal(UnityEngine.Vector3 normal)
			{
				return default(UnityEngine.Vector3);
			}

			[Token(Token = "0x6000675")]
			[Address(RVA = "0xC3D100", Offset = "0xC3D100", VA = "0xC3D100")]
			private void SetFootToPoint(UnityEngine.Vector3 normal, UnityEngine.Vector3 point)
			{
			}

			[Token(Token = "0x6000676")]
			[Address(RVA = "0xC3D180", Offset = "0xC3D180", VA = "0xC3D180")]
			private void SetFootToPlane(UnityEngine.Vector3 planeNormal, UnityEngine.Vector3 planePoint, UnityEngine.Vector3 heelHitPoint)
			{
			}

			[Token(Token = "0x6000677")]
			[Address(RVA = "0xC3D788", Offset = "0xC3D788", VA = "0xC3D788")]
			private float GetHeightFromGround(UnityEngine.Vector3 hitPoint)
			{
				return default(float);
			}

			[Token(Token = "0x6000678")]
			[Address(RVA = "0xC3D6BC", Offset = "0xC3D6BC", VA = "0xC3D6BC")]
			private void RotateFoot()
			{
			}

			[Token(Token = "0x6000679")]
			[Address(RVA = "0xC3D864", Offset = "0xC3D864", VA = "0xC3D864")]
			private Quaternion GetRotationOffsetTarget()
			{
				return default(Quaternion);
			}

			[Token(Token = "0x600067B")]
			[Address(RVA = "0xC3BB80", Offset = "0xC3BB80", VA = "0xC3BB80")]
			public Leg()
			{
			}
		}

		[Token(Token = "0x20000AE")]
		public class Pelvis
		{
			[Token(Token = "0x400047B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private Grounding grounding;

			[Token(Token = "0x400047C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private UnityEngine.Vector3 lastRootPosition;

			[Token(Token = "0x400047D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float damperF;

			[Token(Token = "0x400047E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private bool initiated;

			[Token(Token = "0x400047F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private float lastTime;

			[Token(Token = "0x170000EA")]
			public UnityEngine.Vector3 IKOffset
			{
				[Token(Token = "0x600067C")]
				[Address(RVA = "0xC3DA14", Offset = "0xC3DA14", VA = "0xC3DA14")]
				[CompilerGenerated]
				get
				{
					return default(UnityEngine.Vector3);
				}
				[Token(Token = "0x600067D")]
				[Address(RVA = "0xC3DA20", Offset = "0xC3DA20", VA = "0xC3DA20")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000EB")]
			public float heightOffset
			{
				[Token(Token = "0x600067E")]
				[Address(RVA = "0xC3DA2C", Offset = "0xC3DA2C", VA = "0xC3DA2C")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x600067F")]
				[Address(RVA = "0xC3DA34", Offset = "0xC3DA34", VA = "0xC3DA34")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x6000680")]
			[Address(RVA = "0xC3BCE8", Offset = "0xC3BCE8", VA = "0xC3BCE8")]
			public void Initiate(Grounding grounding)
			{
			}

			[Token(Token = "0x6000681")]
			[Address(RVA = "0xC3C87C", Offset = "0xC3C87C", VA = "0xC3C87C")]
			public void Reset()
			{
			}

			[Token(Token = "0x6000682")]
			[Address(RVA = "0xC3DA3C", Offset = "0xC3DA3C", VA = "0xC3DA3C")]
			public void OnEnable()
			{
			}

			[Token(Token = "0x6000683")]
			[Address(RVA = "0xC3C690", Offset = "0xC3C690", VA = "0xC3C690")]
			public void Process(float lowestOffset, float highestOffset, bool isGrounded)
			{
			}

			[Token(Token = "0x6000684")]
			[Address(RVA = "0xC3BC18", Offset = "0xC3BC18", VA = "0xC3BC18")]
			public Pelvis()
			{
			}
		}

		[Token(Token = "0x4000448")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Tooltip("Layers to ground the character to. Make sure to exclude the layer of the character controller.")]
		public LayerMask layers;

		[Token(Token = "0x4000449")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[Tooltip("Max step height. Maximum vertical distance of Grounding from the root of the character.")]
		public float maxStep;

		[Token(Token = "0x400044A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The height offset of the root.")]
		public float heightOffset;

		[Token(Token = "0x400044B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("The speed of moving the feet up/down.")]
		public float footSpeed;

		[Token(Token = "0x400044C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("CapsuleCast radius. Should match approximately with the size of the feet.")]
		public float footRadius;

		[Token(Token = "0x400044D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("Offset of the foot center along character forward axis.")]
		[HideInInspector]
		public float footCenterOffset;

		[Token(Token = "0x400044E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Amount of velocity based prediction of the foot positions.")]
		public float prediction;

		[Token(Token = "0x400044F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("Weight of rotating the feet to the ground normal offset.")]
		[Range(0f, 1f)]
		public float footRotationWeight;

		[Token(Token = "0x4000450")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Speed of slerping the feet to their grounded rotations.")]
		public float footRotationSpeed;

		[Token(Token = "0x4000451")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Range(0f, 90f)]
		[Tooltip("Max Foot Rotation Angle. Max angular offset from the foot's rotation.")]
		public float maxFootRotationAngle;

		[Token(Token = "0x4000452")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("If true, solver will rotate with the character root so the character can be grounded for example to spherical planets. For performance reasons leave this off unless needed.")]
		public bool rotateSolver;

		[Token(Token = "0x4000453")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("The speed of moving the character up/down.")]
		public float pelvisSpeed;

		[Token(Token = "0x4000454")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Used for smoothing out vertical pelvis movement (range 0 - 1).")]
		[Range(0f, 1f)]
		public float pelvisDamper;

		[Token(Token = "0x4000455")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("The weight of lowering the pelvis to the lowest foot.")]
		public float lowerPelvisWeight;

		[Token(Token = "0x4000456")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("The weight of lifting the pelvis to the highest foot. This is useful when you don't want the feet to go too high relative to the body when crouching.")]
		public float liftPelvisWeight;

		[Token(Token = "0x4000457")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("The radius of the spherecast from the root that determines whether the character root is grounded.")]
		public float rootSphereCastRadius;

		[Token(Token = "0x4000458")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("If false, keeps the foot that is over a ledge at the root level. If true, lowers the overstepping foot and body by the 'Max Step' value.")]
		public bool overstepFallsDown;

		[Token(Token = "0x4000459")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Tooltip("The raycasting quality. Fastest is a single raycast per foot, Simple is three raycasts, Best is one raycast and a capsule cast per foot.")]
		public Quality quality;

		[Token(Token = "0x400045F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private bool initiated;

		[Token(Token = "0x170000D6")]
		public Leg[] legs
		{
			[Token(Token = "0x6000641")]
			[Address(RVA = "0xC3B760", Offset = "0xC3B760", VA = "0xC3B760")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000642")]
			[Address(RVA = "0xC3B768", Offset = "0xC3B768", VA = "0xC3B768")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000D7")]
		public Pelvis pelvis
		{
			[Token(Token = "0x6000643")]
			[Address(RVA = "0xC3B770", Offset = "0xC3B770", VA = "0xC3B770")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000644")]
			[Address(RVA = "0xC3B778", Offset = "0xC3B778", VA = "0xC3B778")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000D8")]
		public bool isGrounded
		{
			[Token(Token = "0x6000645")]
			[Address(RVA = "0xC3B780", Offset = "0xC3B780", VA = "0xC3B780")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000646")]
			[Address(RVA = "0xC3B788", Offset = "0xC3B788", VA = "0xC3B788")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000D9")]
		public Transform root
		{
			[Token(Token = "0x6000647")]
			[Address(RVA = "0xC3B794", Offset = "0xC3B794", VA = "0xC3B794")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000648")]
			[Address(RVA = "0xC3B79C", Offset = "0xC3B79C", VA = "0xC3B79C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000DA")]
		public RaycastHit rootHit
		{
			[Token(Token = "0x6000649")]
			[Address(RVA = "0xC3B7A4", Offset = "0xC3B7A4", VA = "0xC3B7A4")]
			[CompilerGenerated]
			get
			{
				return default(RaycastHit);
			}
			[Token(Token = "0x600064A")]
			[Address(RVA = "0xC3B7BC", Offset = "0xC3B7BC", VA = "0xC3B7BC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000DB")]
		public bool rootGrounded
		{
			[Token(Token = "0x600064B")]
			[Address(RVA = "0xC3B7DC", Offset = "0xC3B7DC", VA = "0xC3B7DC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000DC")]
		public UnityEngine.Vector3 up
		{
			[Token(Token = "0x6000653")]
			[Address(RVA = "0xC36604", Offset = "0xC36604", VA = "0xC36604")]
			get
			{
				return default(UnityEngine.Vector3);
			}
		}

		[Token(Token = "0x170000DD")]
		private bool useRootRotation
		{
			[Token(Token = "0x6000656")]
			[Address(RVA = "0xC3C9A4", Offset = "0xC3C9A4", VA = "0xC3C9A4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600064C")]
		[Address(RVA = "0xC3B824", Offset = "0xC3B824", VA = "0xC3B824")]
		public RaycastHit GetRootHit(float maxDistanceMlp = 10f)
		{
			return default(RaycastHit);
		}

		[Token(Token = "0x600064D")]
		[Address(RVA = "0xC3BA84", Offset = "0xC3BA84", VA = "0xC3BA84")]
		public bool IsValid(ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x600064E")]
		[Address(RVA = "0xC35C18", Offset = "0xC35C18", VA = "0xC35C18")]
		public void Initiate(Transform root, Transform[] feet)
		{
		}

		[Token(Token = "0x600064F")]
		[Address(RVA = "0xC36344", Offset = "0xC36344", VA = "0xC36344")]
		public void Update()
		{
		}

		[Token(Token = "0x6000650")]
		[Address(RVA = "0xC37FE4", Offset = "0xC37FE4", VA = "0xC37FE4")]
		public UnityEngine.Vector3 GetLegsPlaneNormal()
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6000651")]
		[Address(RVA = "0xC357AC", Offset = "0xC357AC", VA = "0xC357AC")]
		public void Reset()
		{
		}

		[Token(Token = "0x6000652")]
		[Address(RVA = "0xC3BCF8", Offset = "0xC3BCF8", VA = "0xC3BCF8")]
		public void LogWarning(string message)
		{
		}

		[Token(Token = "0x6000654")]
		[Address(RVA = "0xC3CA58", Offset = "0xC3CA58", VA = "0xC3CA58")]
		public float GetVerticalOffset(UnityEngine.Vector3 p1, UnityEngine.Vector3 p2)
		{
			return default(float);
		}

		[Token(Token = "0x6000655")]
		[Address(RVA = "0xC3CADC", Offset = "0xC3CADC", VA = "0xC3CADC")]
		public UnityEngine.Vector3 Flatten(UnityEngine.Vector3 v)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6000657")]
		[Address(RVA = "0xC3CC30", Offset = "0xC3CC30", VA = "0xC3CC30")]
		public UnityEngine.Vector3 GetFootCenterOffset()
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6000658")]
		[Address(RVA = "0xC3556C", Offset = "0xC3556C", VA = "0xC3556C")]
		public Grounding()
		{
		}
	}
	[Token(Token = "0x20000AF")]
	[HelpURL("https://www.youtube.com/watch?v=wT8fViZpLmQ&index=3&list=PLVxSIA1OaTOu8Nos3CalXbJ2DrKnntMv6")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/Aim IK")]
	public class AimIK : IK
	{
		[Token(Token = "0x4000480")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverAim solver;

		[Token(Token = "0x6000685")]
		[Address(RVA = "0xC3DA90", Offset = "0xC3DA90", VA = "0xC3DA90", Slot = "8")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000686")]
		[Address(RVA = "0xC3DAD4", Offset = "0xC3DAD4", VA = "0xC3DAD4", Slot = "9")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000687")]
		[Address(RVA = "0xC3DB18", Offset = "0xC3DB18", VA = "0xC3DB18")]
		[ContextMenu("TUTORIAL VIDEO")]
		private void OpenSetupTutorial()
		{
		}

		[Token(Token = "0x6000688")]
		[Address(RVA = "0xC3DB5C", Offset = "0xC3DB5C", VA = "0xC3DB5C")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000689")]
		[Address(RVA = "0xC3DBA0", Offset = "0xC3DBA0", VA = "0xC3DBA0")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x600068A")]
		[Address(RVA = "0xC3DBE4", Offset = "0xC3DBE4", VA = "0xC3DBE4", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x600068B")]
		[Address(RVA = "0xC3DBEC", Offset = "0xC3DBEC", VA = "0xC3DBEC")]
		public AimIK()
		{
		}
	}
	[Token(Token = "0x20000B0")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/Arm IK")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page2.html")]
	public class ArmIK : IK
	{
		[Token(Token = "0x4000481")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverArm solver;

		[Token(Token = "0x600068C")]
		[Address(RVA = "0xC3DC5C", Offset = "0xC3DC5C", VA = "0xC3DC5C", Slot = "8")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x600068D")]
		[Address(RVA = "0xC3DCA0", Offset = "0xC3DCA0", VA = "0xC3DCA0", Slot = "9")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x600068E")]
		[Address(RVA = "0xC3DCE4", Offset = "0xC3DCE4", VA = "0xC3DCE4")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x600068F")]
		[Address(RVA = "0xC3DD28", Offset = "0xC3DD28", VA = "0xC3DD28")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000690")]
		[Address(RVA = "0xC3DD6C", Offset = "0xC3DD6C", VA = "0xC3DD6C", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6000691")]
		[Address(RVA = "0xC3DD74", Offset = "0xC3DD74", VA = "0xC3DD74")]
		public ArmIK()
		{
		}
	}
	[Token(Token = "0x20000B1")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/CCD IK")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page5.html")]
	public class CCDIK : IK
	{
		[Token(Token = "0x4000482")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverCCD solver;

		[Token(Token = "0x6000692")]
		[Address(RVA = "0xC3DDDC", Offset = "0xC3DDDC", VA = "0xC3DDDC", Slot = "8")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000693")]
		[Address(RVA = "0xC3DE20", Offset = "0xC3DE20", VA = "0xC3DE20", Slot = "9")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000694")]
		[Address(RVA = "0xC3DE64", Offset = "0xC3DE64", VA = "0xC3DE64")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000695")]
		[Address(RVA = "0xC3DEA8", Offset = "0xC3DEA8", VA = "0xC3DEA8")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000696")]
		[Address(RVA = "0xC3DEEC", Offset = "0xC3DEEC", VA = "0xC3DEEC", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6000697")]
		[Address(RVA = "0xC3DEF4", Offset = "0xC3DEF4", VA = "0xC3DEF4")]
		public CCDIK()
		{
		}
	}
	[Token(Token = "0x20000B2")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/FABRIK")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page6.html")]
	public class FABRIK : IK
	{
		[Token(Token = "0x4000483")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverFABRIK solver;

		[Token(Token = "0x6000698")]
		[Address(RVA = "0xC3DF5C", Offset = "0xC3DF5C", VA = "0xC3DF5C", Slot = "8")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000699")]
		[Address(RVA = "0xC3DFA0", Offset = "0xC3DFA0", VA = "0xC3DFA0", Slot = "9")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x600069A")]
		[Address(RVA = "0xC3DFE4", Offset = "0xC3DFE4", VA = "0xC3DFE4")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x600069B")]
		[Address(RVA = "0xC3E028", Offset = "0xC3E028", VA = "0xC3E028")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x600069C")]
		[Address(RVA = "0xC3E06C", Offset = "0xC3E06C", VA = "0xC3E06C", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x600069D")]
		[Address(RVA = "0xC3E074", Offset = "0xC3E074", VA = "0xC3E074")]
		public FABRIK()
		{
		}
	}
	[Token(Token = "0x20000B3")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page7.html")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/FABRIK Root")]
	public class FABRIKRoot : IK
	{
		[Token(Token = "0x4000484")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverFABRIKRoot solver;

		[Token(Token = "0x600069E")]
		[Address(RVA = "0xC3E0DC", Offset = "0xC3E0DC", VA = "0xC3E0DC", Slot = "8")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x600069F")]
		[Address(RVA = "0xC3E120", Offset = "0xC3E120", VA = "0xC3E120", Slot = "9")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x60006A0")]
		[Address(RVA = "0xC3E164", Offset = "0xC3E164", VA = "0xC3E164")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60006A1")]
		[Address(RVA = "0xC3E1A8", Offset = "0xC3E1A8", VA = "0xC3E1A8")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60006A2")]
		[Address(RVA = "0xC3E1EC", Offset = "0xC3E1EC", VA = "0xC3E1EC", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x60006A3")]
		[Address(RVA = "0xC3E1F4", Offset = "0xC3E1F4", VA = "0xC3E1F4")]
		public FABRIKRoot()
		{
		}
	}
	[Token(Token = "0x20000B4")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/Full Body Biped IK")]
	[HelpURL("https://www.youtube.com/watch?v=7__IafZGwvI&index=1&list=PLVxSIA1OaTOu8Nos3CalXbJ2DrKnntMv6")]
	public class FullBodyBipedIK : IK
	{
		[Token(Token = "0x4000485")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public BipedReferences references;

		[Token(Token = "0x4000486")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public IKSolverFullBodyBiped solver;

		[Token(Token = "0x60006A4")]
		[Address(RVA = "0xC3E25C", Offset = "0xC3E25C", VA = "0xC3E25C", Slot = "8")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x60006A5")]
		[Address(RVA = "0xC3E2A0", Offset = "0xC3E2A0", VA = "0xC3E2A0", Slot = "9")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x60006A6")]
		[Address(RVA = "0xC3E2E4", Offset = "0xC3E2E4", VA = "0xC3E2E4")]
		[ContextMenu("TUTORIAL VIDEO (SETUP)")]
		private void OpenSetupTutorial()
		{
		}

		[Token(Token = "0x60006A7")]
		[Address(RVA = "0xC3E328", Offset = "0xC3E328", VA = "0xC3E328")]
		[ContextMenu("TUTORIAL VIDEO (INSPECTOR)")]
		private void OpenInspectorTutorial()
		{
		}

		[Token(Token = "0x60006A8")]
		[Address(RVA = "0xC3E36C", Offset = "0xC3E36C", VA = "0xC3E36C")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60006A9")]
		[Address(RVA = "0xC3E3B0", Offset = "0xC3E3B0", VA = "0xC3E3B0")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60006AA")]
		[Address(RVA = "0xC3E3F4", Offset = "0xC3E3F4", VA = "0xC3E3F4")]
		public void SetReferences(BipedReferences references, Transform rootNode)
		{
		}

		[Token(Token = "0x60006AB")]
		[Address(RVA = "0xC3E418", Offset = "0xC3E418", VA = "0xC3E418", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x60006AC")]
		[Address(RVA = "0xC3E420", Offset = "0xC3E420", VA = "0xC3E420")]
		public bool ReferencesError(ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x60006AD")]
		[Address(RVA = "0xC3E5DC", Offset = "0xC3E5DC", VA = "0xC3E5DC")]
		public bool ReferencesWarning(ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x60006AE")]
		[Address(RVA = "0xC3EA8C", Offset = "0xC3EA8C", VA = "0xC3EA8C")]
		[ContextMenu("Reinitiate")]
		private void Reinitiate()
		{
		}

		[Token(Token = "0x60006AF")]
		[Address(RVA = "0xC3EAAC", Offset = "0xC3EAAC", VA = "0xC3EAAC")]
		[ContextMenu("Auto-detect References")]
		private void AutoDetectReferences()
		{
		}

		[Token(Token = "0x60006B0")]
		[Address(RVA = "0xC3EB84", Offset = "0xC3EB84", VA = "0xC3EB84")]
		public FullBodyBipedIK()
		{
		}
	}
	[Token(Token = "0x20000B5")]
	public abstract class IK : SolverManager
	{
		[Token(Token = "0x60006B1")]
		public abstract IKSolver GetIKSolver();

		[Token(Token = "0x60006B2")]
		[Address(RVA = "0xC3EC1C", Offset = "0xC3EC1C", VA = "0xC3EC1C", Slot = "5")]
		protected override void UpdateSolver()
		{
		}

		[Token(Token = "0x60006B3")]
		[Address(RVA = "0xC3EC94", Offset = "0xC3EC94", VA = "0xC3EC94", Slot = "4")]
		protected override void InitiateSolver()
		{
		}

		[Token(Token = "0x60006B4")]
		[Address(RVA = "0xC3ED04", Offset = "0xC3ED04", VA = "0xC3ED04", Slot = "6")]
		protected override void FixTransforms()
		{
		}

		[Token(Token = "0x60006B5")]
		protected abstract void OpenUserManual();

		[Token(Token = "0x60006B6")]
		protected abstract void OpenScriptReference();

		[Token(Token = "0x60006B7")]
		[Address(RVA = "0xC3DC54", Offset = "0xC3DC54", VA = "0xC3DC54")]
		protected IK()
		{
		}
	}
	[Token(Token = "0x20000B6")]
	public class IKExecutionOrder : MonoBehaviour
	{
		[Token(Token = "0x4000487")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The IK components, assign in the order in which you wish to update them.")]
		public IK[] IKComponents;

		[Token(Token = "0x4000488")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool solveHead;

		[Token(Token = "0x60006B8")]
		[Address(RVA = "0xC3ED54", Offset = "0xC3ED54", VA = "0xC3ED54")]
		private void Start()
		{
		}

		[Token(Token = "0x60006B9")]
		[Address(RVA = "0xC3EDB8", Offset = "0xC3EDB8", VA = "0xC3EDB8")]
		public void Solve()
		{
		}

		[Token(Token = "0x60006BA")]
		[Address(RVA = "0xC3EE34", Offset = "0xC3EE34", VA = "0xC3EE34")]
		public IKExecutionOrder()
		{
		}
	}
	[Token(Token = "0x20000B7")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page11.html")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/Leg IK")]
	public class LegIK : IK
	{
		[Token(Token = "0x4000489")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverLeg solver;

		[Token(Token = "0x60006BB")]
		[Address(RVA = "0xC3EE44", Offset = "0xC3EE44", VA = "0xC3EE44", Slot = "8")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x60006BC")]
		[Address(RVA = "0xC3EE88", Offset = "0xC3EE88", VA = "0xC3EE88", Slot = "9")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x60006BD")]
		[Address(RVA = "0xC3EECC", Offset = "0xC3EECC", VA = "0xC3EECC")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60006BE")]
		[Address(RVA = "0xC3EF10", Offset = "0xC3EF10", VA = "0xC3EF10")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60006BF")]
		[Address(RVA = "0xC3EF54", Offset = "0xC3EF54", VA = "0xC3EF54", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x60006C0")]
		[Address(RVA = "0xC3EF5C", Offset = "0xC3EF5C", VA = "0xC3EF5C")]
		public LegIK()
		{
		}
	}
	[Token(Token = "0x20000B8")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page12.html")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/Limb IK")]
	public class LimbIK : IK
	{
		[Token(Token = "0x400048A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverLimb solver;

		[Token(Token = "0x60006C1")]
		[Address(RVA = "0xC3EFC4", Offset = "0xC3EFC4", VA = "0xC3EFC4", Slot = "8")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x60006C2")]
		[Address(RVA = "0xC3F008", Offset = "0xC3F008", VA = "0xC3F008", Slot = "9")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x60006C3")]
		[Address(RVA = "0xC3F04C", Offset = "0xC3F04C", VA = "0xC3F04C")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60006C4")]
		[Address(RVA = "0xC3F090", Offset = "0xC3F090", VA = "0xC3F090")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60006C5")]
		[Address(RVA = "0xC3F0D4", Offset = "0xC3F0D4", VA = "0xC3F0D4", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x60006C6")]
		[Address(RVA = "0xC3F0DC", Offset = "0xC3F0DC", VA = "0xC3F0DC")]
		public LimbIK()
		{
		}
	}
	[Token(Token = "0x20000B9")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page13.html")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/Look At IK")]
	public class LookAtIK : IK
	{
		[Token(Token = "0x400048B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverLookAt solver;

		[Token(Token = "0x60006C7")]
		[Address(RVA = "0xC3F144", Offset = "0xC3F144", VA = "0xC3F144", Slot = "8")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x60006C8")]
		[Address(RVA = "0xC3F188", Offset = "0xC3F188", VA = "0xC3F188", Slot = "9")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x60006C9")]
		[Address(RVA = "0xC3F1CC", Offset = "0xC3F1CC", VA = "0xC3F1CC")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60006CA")]
		[Address(RVA = "0xC3F210", Offset = "0xC3F210", VA = "0xC3F210")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60006CB")]
		[Address(RVA = "0xC3F254", Offset = "0xC3F254", VA = "0xC3F254", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x60006CC")]
		[Address(RVA = "0xC3F25C", Offset = "0xC3F25C", VA = "0xC3F25C")]
		public LookAtIK()
		{
		}
	}
	[Token(Token = "0x20000BA")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page15.html")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/Trigonometric IK")]
	public class TrigonometricIK : IK
	{
		[Token(Token = "0x400048C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverTrigonometric solver;

		[Token(Token = "0x60006CD")]
		[Address(RVA = "0xC3F2C4", Offset = "0xC3F2C4", VA = "0xC3F2C4", Slot = "8")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x60006CE")]
		[Address(RVA = "0xC3F308", Offset = "0xC3F308", VA = "0xC3F308", Slot = "9")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x60006CF")]
		[Address(RVA = "0xC3F34C", Offset = "0xC3F34C", VA = "0xC3F34C")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60006D0")]
		[Address(RVA = "0xC3F390", Offset = "0xC3F390", VA = "0xC3F390")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60006D1")]
		[Address(RVA = "0xC3F3D4", Offset = "0xC3F3D4", VA = "0xC3F3D4", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x60006D2")]
		[Address(RVA = "0xC3F3DC", Offset = "0xC3F3DC", VA = "0xC3F3DC")]
		public TrigonometricIK()
		{
		}
	}
	[Token(Token = "0x20000BB")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/VR IK")]
	public class VRIK : IK
	{
		[Serializable]
		[Token(Token = "0x20000BC")]
		public class References
		{
			[Token(Token = "0x400048F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform root;

			[Token(Token = "0x4000490")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Transform pelvis;

			[Token(Token = "0x4000491")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Transform spine;

			[Token(Token = "0x4000492")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("Optional")]
			public Transform chest;

			[Token(Token = "0x4000493")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[Tooltip("Optional")]
			public Transform neck;

			[Token(Token = "0x4000494")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Transform head;

			[Token(Token = "0x4000495")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			[Tooltip("Optional")]
			public Transform leftShoulder;

			[Token(Token = "0x4000496")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Transform leftUpperArm;

			[Token(Token = "0x4000497")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public Transform leftForearm;

			[Token(Token = "0x4000498")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public Transform leftHand;

			[Token(Token = "0x4000499")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[Tooltip("Optional")]
			public Transform rightShoulder;

			[Token(Token = "0x400049A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public Transform rightUpperArm;

			[Token(Token = "0x400049B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			public Transform rightForearm;

			[Token(Token = "0x400049C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			public Transform rightHand;

			[Token(Token = "0x170000EC")]
			public bool isFilled
			{
				[Token(Token = "0x60006DD")]
				[Address(RVA = "0xC3FAE4", Offset = "0xC3FAE4", VA = "0xC3FAE4")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x170000ED")]
			public bool isEmpty
			{
				[Token(Token = "0x60006DE")]
				[Address(RVA = "0xC3F868", Offset = "0xC3F868", VA = "0xC3F868")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x60006DC")]
			[Address(RVA = "0xC3FD1C", Offset = "0xC3FD1C", VA = "0xC3FD1C")]
			public Transform[] GetTransforms()
			{
				return null;
			}

			[Token(Token = "0x60006DF")]
			[Address(RVA = "0xC3F52C", Offset = "0xC3F52C", VA = "0xC3F52C")]
			public static bool AutoDetectReferences(Transform root, out References references)
			{
				return default(bool);
			}

			[Token(Token = "0x60006E0")]
			[Address(RVA = "0xC3FD14", Offset = "0xC3FD14", VA = "0xC3FD14")]
			public References()
			{
			}
		}

		[Token(Token = "0x400048D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[ContextMenuItem("Auto-detect References", "AutoDetectReferences")]
		[Tooltip("Bone mapping. Right-click on the component header and select 'Auto-detect References' of fill in manually if not a Humanoid character. Chest, neck, shoulder and toe bones are optional. VRIK also supports legless characters. If you do not wish to use legs, leave all leg references empty.")]
		public References references;

		[Token(Token = "0x400048E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The VRIK solver.")]
		public IKSolverVR solver;

		[Token(Token = "0x60006D3")]
		[Address(RVA = "0xC3F444", Offset = "0xC3F444", VA = "0xC3F444", Slot = "8")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x60006D4")]
		[Address(RVA = "0xC3F488", Offset = "0xC3F488", VA = "0xC3F488", Slot = "9")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x60006D5")]
		[Address(RVA = "0xC3F4CC", Offset = "0xC3F4CC", VA = "0xC3F4CC")]
		[ContextMenu("TUTORIAL VIDEO (STEAMVR SETUP)")]
		private void OpenSetupTutorial()
		{
		}

		[Token(Token = "0x60006D6")]
		[Address(RVA = "0xC3F510", Offset = "0xC3F510", VA = "0xC3F510")]
		[ContextMenu("Auto-detect References")]
		public void AutoDetectReferences()
		{
		}

		[Token(Token = "0x60006D7")]
		[Address(RVA = "0xC3F7D8", Offset = "0xC3F7D8", VA = "0xC3F7D8")]
		[ContextMenu("Guess Hand Orientations")]
		public void GuessHandOrientations()
		{
		}

		[Token(Token = "0x60006D8")]
		[Address(RVA = "0xC3F800", Offset = "0xC3F800", VA = "0xC3F800", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x60006D9")]
		[Address(RVA = "0xC3F808", Offset = "0xC3F808", VA = "0xC3F808", Slot = "4")]
		protected override void InitiateSolver()
		{
		}

		[Token(Token = "0x60006DA")]
		[Address(RVA = "0xC3FAEC", Offset = "0xC3FAEC", VA = "0xC3FAEC", Slot = "5")]
		protected override void UpdateSolver()
		{
		}

		[Token(Token = "0x60006DB")]
		[Address(RVA = "0xC3FC7C", Offset = "0xC3FC7C", VA = "0xC3FC7C")]
		public VRIK()
		{
		}
	}
	[Token(Token = "0x20000BD")]
	[RequireComponent(typeof(Animator))]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK Jobs/Aim IKJ")]
	public class AimIKJ : MonoBehaviour
	{
		[Token(Token = "0x400049D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The target Transform of this solver.")]
		public Transform target;

		[Token(Token = "0x400049E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Optional secondary target for another axis of the 'Aim Transform'. Needs 'Pole Weight' to be greater than 0 to have any effect.")]
		public Transform poleTarget;

		[Token(Token = "0x400049F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The transform that you want to be aimed at the target. Needs to be a lineal descendant of the bone hierarchy. For example, if you wish to aim a gun, it should be the gun, one of it's children or the hand bone.")]
		public Transform aimTransform;

		[Token(Token = "0x40004A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The X value of the local axis of the 'Aim Transform' that you want to be aimed at IKPosition.")]
		[Space(5f)]
		public float axisX;

		[Token(Token = "0x40004A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("The Y value of the local axis of the 'Aim Transform' that you want to be aimed at IKPosition.")]
		public float axisY;

		[Token(Token = "0x40004A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The Z value of the local axis of the 'Aim Transform' that you want to be aimed at IKPosition.")]
		public float axisZ;

		[Token(Token = "0x40004A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("The X value of the local axis of the 'Aim Transform' that you want oriented towards the 'Pole Target'.")]
		[Space(5f)]
		public float poleAxisX;

		[Token(Token = "0x40004A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The Y value of the local axis of the 'Aim Transform' that you want oriented towards the 'Pole Target'.")]
		public float poleAxisY;

		[Token(Token = "0x40004A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("The Z value of the local axis of the 'Aim Transform' that you want oriented towards the 'Pole Target'.")]
		public float poleAxisZ;

		[Token(Token = "0x40004A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Space(5f)]
		[Tooltip("The master weight of this solver.")]
		[Range(0f, 1f)]
		public float weight;

		[Token(Token = "0x40004A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("The weight of the 'Pole Target'")]
		[Range(0f, 1f)]
		public float poleWeight;

		[Token(Token = "0x40004A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Minimum angular offset from last reached angle. Will stop solving if offset is less than tolerance.If tolerance is zero, will iterate until maxIterations.")]
		public float tolerance;

		[Token(Token = "0x40004A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Tooltip("Max solver iterations per frame. If target position offset is less than 'Tolerance', will stop solving.")]
		public int maxIterations;

		[Token(Token = "0x40004AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Range(0f, 1f)]
		[Tooltip("Clamping rotation of the solver. 0 is free rotation, 1 is completely clamped to animated rotation.")]
		public float clampWeight;

		[Token(Token = "0x40004AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("Number of sine smoothing iterations applied on clamping to make the clamping point smoother.")]
		[Range(0f, 2f)]
		public int clampSmoothing;

		[Token(Token = "0x40004AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("If true, rotation limits (if existing) will be applied on each iteration. Only RotationLimitAngle and RotationLimitHinge can be used with this solver.")]
		public bool useRotationLimits;

		[Token(Token = "0x40004AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		[Tooltip("Useful for 2D games. If true, will solve only in the XY plane.")]
		public bool XY;

		[Token(Token = "0x40004AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Space(5f)]
		[Tooltip("The list of bones used by the solver. Must be assigned in order of hierarchy. All bones must be in the same hierarchy branch.")]
		public Transform[] bones;

		[Token(Token = "0x40004B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Animator animator;

		[Token(Token = "0x40004B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private PlayableGraph graph;

		[Token(Token = "0x40004B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private AnimationScriptPlayable IKPlayable;

		[Token(Token = "0x40004B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private AimIKJob job;

		[Token(Token = "0x170000EE")]
		public bool initiated
		{
			[Token(Token = "0x60006E1")]
			[Address(RVA = "0xC3FFEC", Offset = "0xC3FFEC", VA = "0xC3FFEC")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60006E2")]
			[Address(RVA = "0xC3FFF4", Offset = "0xC3FFF4", VA = "0xC3FFF4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000EF")]
		public UnityEngine.Vector3 axis
		{
			[Token(Token = "0x60006E3")]
			[Address(RVA = "0xC40000", Offset = "0xC40000", VA = "0xC40000")]
			get
			{
				return default(UnityEngine.Vector3);
			}
			[Token(Token = "0x60006E4")]
			[Address(RVA = "0xC4000C", Offset = "0xC4000C", VA = "0xC4000C")]
			set
			{
			}
		}

		[Token(Token = "0x170000F0")]
		public UnityEngine.Vector3 poleAxis
		{
			[Token(Token = "0x60006E5")]
			[Address(RVA = "0xC40018", Offset = "0xC40018", VA = "0xC40018")]
			get
			{
				return default(UnityEngine.Vector3);
			}
			[Token(Token = "0x60006E6")]
			[Address(RVA = "0xC40024", Offset = "0xC40024", VA = "0xC40024")]
			set
			{
			}
		}

		[Token(Token = "0x60006E7")]
		[Address(RVA = "0xC40030", Offset = "0xC40030", VA = "0xC40030")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60006E8")]
		[Address(RVA = "0xC40DB0", Offset = "0xC40DB0", VA = "0xC40DB0")]
		private void Update()
		{
		}

		[Token(Token = "0x60006E9")]
		[Address(RVA = "0xC41104", Offset = "0xC41104", VA = "0xC41104")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60006EA")]
		[Address(RVA = "0xC41200", Offset = "0xC41200", VA = "0xC41200")]
		public AimIKJ()
		{
		}
	}
	[Token(Token = "0x20000BE")]
	public struct AimIKJob : IAnimationJob
	{
		[Token(Token = "0x40004B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public TransformSceneHandle _target;

		[Token(Token = "0x40004B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public TransformSceneHandle _poleTarget;

		[Token(Token = "0x40004B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public TransformStreamHandle _transform;

		[Token(Token = "0x40004B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public PropertySceneHandle _IKPositionWeight;

		[Token(Token = "0x40004B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public PropertySceneHandle _poleWeight;

		[Token(Token = "0x40004B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public PropertySceneHandle _axisX;

		[Token(Token = "0x40004BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public PropertySceneHandle _axisY;

		[Token(Token = "0x40004BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public PropertySceneHandle _axisZ;

		[Token(Token = "0x40004BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public PropertySceneHandle _poleAxisX;

		[Token(Token = "0x40004BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public PropertySceneHandle _poleAxisY;

		[Token(Token = "0x40004BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public PropertySceneHandle _poleAxisZ;

		[Token(Token = "0x40004BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public PropertySceneHandle _clampWeight;

		[Token(Token = "0x40004C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public PropertySceneHandle _clampSmoothing;

		[Token(Token = "0x40004C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public PropertySceneHandle _maxIterations;

		[Token(Token = "0x40004C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public PropertySceneHandle _tolerance;

		[Token(Token = "0x40004C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public PropertySceneHandle _XY;

		[Token(Token = "0x40004C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public PropertySceneHandle _useRotationLimits;

		[Token(Token = "0x40004C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private NativeArray<TransformStreamHandle> bones;

		[Token(Token = "0x40004C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private NativeArray<PropertySceneHandle> boneWeights;

		[Token(Token = "0x40004C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private UnityEngine.Vector3 lastLocalDirection;

		[Token(Token = "0x40004C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private float step;

		[Token(Token = "0x40004C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private NativeArray<Quaternion> limitDefaultLocalRotationArray;

		[Token(Token = "0x40004CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private NativeArray<UnityEngine.Vector3> limitAxisArray;

		[Token(Token = "0x40004CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private NativeArray<int> hingeFlags;

		[Token(Token = "0x40004CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private NativeArray<PropertySceneHandle> hingeMinArray;

		[Token(Token = "0x40004CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private NativeArray<PropertySceneHandle> hingeMaxArray;

		[Token(Token = "0x40004CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private NativeArray<PropertySceneHandle> hingeUseLimitsArray;

		[Token(Token = "0x40004CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private NativeArray<Quaternion> hingeLastRotations;

		[Token(Token = "0x40004D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private NativeArray<float> hingeLastAngles;

		[Token(Token = "0x40004D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private NativeArray<int> angleFlags;

		[Token(Token = "0x40004D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private NativeArray<UnityEngine.Vector3> angleSecondaryAxisArray;

		[Token(Token = "0x40004D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private NativeArray<PropertySceneHandle> angleLimitArray;

		[Token(Token = "0x40004D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private NativeArray<PropertySceneHandle> angleTwistLimitArray;

		[Token(Token = "0x60006EB")]
		[Address(RVA = "0xC4061C", Offset = "0xC4061C", VA = "0xC4061C")]
		public void Setup(Animator animator, Transform[] bones, Transform target, Transform poleTarget, Transform aimTransform)
		{
		}

		[Token(Token = "0x60006EC")]
		[Address(RVA = "0xC41288", Offset = "0xC41288", VA = "0xC41288")]
		private void SetUpRotationLimits(Animator animator, Transform[] bones)
		{
		}

		[Token(Token = "0x60006ED")]
		[Address(RVA = "0xC41A14", Offset = "0xC41A14", VA = "0xC41A14")]
		private void DisposeRotationLimits()
		{
		}

		[Token(Token = "0x60006EE")]
		[Address(RVA = "0xC41B40", Offset = "0xC41B40", VA = "0xC41B40", Slot = "5")]
		public void ProcessRootMotion(AnimationStream stream)
		{
		}

		[Token(Token = "0x60006EF")]
		[Address(RVA = "0xC41B44", Offset = "0xC41B44", VA = "0xC41B44", Slot = "4")]
		public void ProcessAnimation(AnimationStream stream)
		{
		}

		[Token(Token = "0x60006F0")]
		[Address(RVA = "0xC41B78", Offset = "0xC41B78", VA = "0xC41B78")]
		private void Update(AnimationStream s)
		{
		}

		[Token(Token = "0x60006F1")]
		[Address(RVA = "0xC429F8", Offset = "0xC429F8", VA = "0xC429F8")]
		private void RotateToTarget(AnimationStream s, UnityEngine.Vector3 targetPosition, UnityEngine.Vector3 polePosition, int i, float weight, float poleWeight, bool XY, bool useRotationLimits, UnityEngine.Vector3 axis, UnityEngine.Vector3 poleAxis)
		{
		}

		[Token(Token = "0x60006F2")]
		[Address(RVA = "0xC427C0", Offset = "0xC427C0", VA = "0xC427C0")]
		public float GetAngle(AnimationStream s, UnityEngine.Vector3 axis, UnityEngine.Vector3 IKPosition)
		{
			return default(float);
		}

		[Token(Token = "0x60006F3")]
		[Address(RVA = "0xC42500", Offset = "0xC42500", VA = "0xC42500")]
		private UnityEngine.Vector3 GetClampedIKPosition(AnimationStream s, float clampWeight, int clampSmoothing, UnityEngine.Vector3 IKPosition, UnityEngine.Vector3 transformPosition, UnityEngine.Vector3 transformAxis)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x60006F4")]
		[Address(RVA = "0xC42968", Offset = "0xC42968", VA = "0xC42968")]
		private UnityEngine.Vector3 GetLocalDirection(AnimationStream s, UnityEngine.Vector3 transformAxis)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x60006F5")]
		[Address(RVA = "0xC43B5C", Offset = "0xC43B5C", VA = "0xC43B5C")]
		private float GetPositionOffset(AnimationStream s, UnityEngine.Vector3 localDirection)
		{
			return default(float);
		}

		[Token(Token = "0x60006F6")]
		[Address(RVA = "0xC41188", Offset = "0xC41188", VA = "0xC41188")]
		public void Dispose()
		{
		}
	}
	[Token(Token = "0x20000BF")]
	[RequireComponent(typeof(Animator))]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK Jobs/CCD IKJ")]
	public class CCDIKJ : MonoBehaviour
	{
		[Token(Token = "0x40004D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The target Transform of this solver.")]
		public Transform target;

		[Token(Token = "0x40004D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 1f)]
		[Tooltip("The master weight of this solver.")]
		public float weight;

		[Token(Token = "0x40004D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("Minimum offset from last reached position. Will stop solving if offset is less than tolerance.If tolerance is zero, will iterate until maxIterations.")]
		public float tolerance;

		[Token(Token = "0x40004D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Max solver iterations per frame. If target position offset is less than 'Tolerance', will stop solving.")]
		public int maxIterations;

		[Token(Token = "0x40004D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("If true, rotation limits (if existing) will be applied on each iteration. Only RotationLimitAngle and RotationLimitHinge can be used with this solver.")]
		public bool useRotationLimits;

		[Token(Token = "0x40004DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		[Tooltip("Useful for 2D games. If true, will solve only in the XY plane.")]
		public bool XY;

		[Token(Token = "0x40004DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The list of bones used by the solver. Must be assigned in order of hierarchy. All bones must be in the same hierarchy branch.")]
		public Transform[] bones;

		[Token(Token = "0x40004DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Animator animator;

		[Token(Token = "0x40004DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private PlayableGraph graph;

		[Token(Token = "0x40004DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private AnimationScriptPlayable IKPlayable;

		[Token(Token = "0x40004E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private CCDIKJob job;

		[Token(Token = "0x170000F1")]
		public bool initiated
		{
			[Token(Token = "0x60006F7")]
			[Address(RVA = "0xC43B88", Offset = "0xC43B88", VA = "0xC43B88")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60006F8")]
			[Address(RVA = "0xC43B90", Offset = "0xC43B90", VA = "0xC43B90")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60006F9")]
		[Address(RVA = "0xC43B9C", Offset = "0xC43B9C", VA = "0xC43B9C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60006FA")]
		[Address(RVA = "0xC44428", Offset = "0xC44428", VA = "0xC44428")]
		private void Update()
		{
		}

		[Token(Token = "0x60006FB")]
		[Address(RVA = "0xC445B4", Offset = "0xC445B4", VA = "0xC445B4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60006FC")]
		[Address(RVA = "0xC446D0", Offset = "0xC446D0", VA = "0xC446D0")]
		public CCDIKJ()
		{
		}
	}
	[Token(Token = "0x20000C0")]
	public struct CCDIKJob : IAnimationJob
	{
		[Token(Token = "0x40004E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public TransformSceneHandle _target;

		[Token(Token = "0x40004E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public PropertySceneHandle _IKPositionWeight;

		[Token(Token = "0x40004E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PropertySceneHandle _maxIterations;

		[Token(Token = "0x40004E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PropertySceneHandle _tolerance;

		[Token(Token = "0x40004E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PropertySceneHandle _XY;

		[Token(Token = "0x40004E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public PropertySceneHandle _useRotationLimits;

		[Token(Token = "0x40004E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private NativeArray<TransformStreamHandle> bones;

		[Token(Token = "0x40004E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private NativeArray<PropertySceneHandle> boneWeights;

		[Token(Token = "0x40004E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private NativeArray<float> boneSqrMags;

		[Token(Token = "0x40004EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float chainSqrMag;

		[Token(Token = "0x40004EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private UnityEngine.Vector3 lastLocalDirection;

		[Token(Token = "0x40004EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private NativeArray<Quaternion> limitDefaultLocalRotationArray;

		[Token(Token = "0x40004ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private NativeArray<UnityEngine.Vector3> limitAxisArray;

		[Token(Token = "0x40004EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private NativeArray<int> hingeFlags;

		[Token(Token = "0x40004EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private NativeArray<PropertySceneHandle> hingeMinArray;

		[Token(Token = "0x40004F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private NativeArray<PropertySceneHandle> hingeMaxArray;

		[Token(Token = "0x40004F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private NativeArray<PropertySceneHandle> hingeUseLimitsArray;

		[Token(Token = "0x40004F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private NativeArray<Quaternion> hingeLastRotations;

		[Token(Token = "0x40004F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private NativeArray<float> hingeLastAngles;

		[Token(Token = "0x40004F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private NativeArray<int> angleFlags;

		[Token(Token = "0x40004F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private NativeArray<UnityEngine.Vector3> angleSecondaryAxisArray;

		[Token(Token = "0x40004F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private NativeArray<PropertySceneHandle> angleLimitArray;

		[Token(Token = "0x40004F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private NativeArray<PropertySceneHandle> angleTwistLimitArray;

		[Token(Token = "0x60006FD")]
		[Address(RVA = "0xC43F5C", Offset = "0xC43F5C", VA = "0xC43F5C")]
		public void Setup(Animator animator, Transform[] bones, Transform target)
		{
		}

		[Token(Token = "0x60006FE")]
		[Address(RVA = "0xC44740", Offset = "0xC44740", VA = "0xC44740")]
		private void SetUpRotationLimits(Animator animator, Transform[] bones)
		{
		}

		[Token(Token = "0x60006FF")]
		[Address(RVA = "0xC44ECC", Offset = "0xC44ECC", VA = "0xC44ECC")]
		private void DisposeRotationLimits()
		{
		}

		[Token(Token = "0x6000700")]
		[Address(RVA = "0xC44FF8", Offset = "0xC44FF8", VA = "0xC44FF8", Slot = "5")]
		public void ProcessRootMotion(AnimationStream stream)
		{
		}

		[Token(Token = "0x6000701")]
		[Address(RVA = "0xC44FFC", Offset = "0xC44FFC", VA = "0xC44FFC", Slot = "4")]
		public void ProcessAnimation(AnimationStream stream)
		{
		}

		[Token(Token = "0x6000702")]
		[Address(RVA = "0xC45030", Offset = "0xC45030", VA = "0xC45030")]
		private void Update(AnimationStream s)
		{
		}

		[Token(Token = "0x6000703")]
		[Address(RVA = "0xC454E4", Offset = "0xC454E4", VA = "0xC454E4")]
		private void Read(AnimationStream s)
		{
		}

		[Token(Token = "0x6000704")]
		[Address(RVA = "0xC45A68", Offset = "0xC45A68", VA = "0xC45A68")]
		private void Solve(AnimationStream s, UnityEngine.Vector3 targetPosition, bool XY, float weight, int it, bool useRotationLimits)
		{
		}

		[Token(Token = "0x6000705")]
		[Address(RVA = "0xC458E4", Offset = "0xC458E4", VA = "0xC458E4")]
		private UnityEngine.Vector3 GetLocalDirection(AnimationStream s)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6000706")]
		[Address(RVA = "0xC45A3C", Offset = "0xC45A3C", VA = "0xC45A3C")]
		private float GetPositionOffset(AnimationStream s, UnityEngine.Vector3 localDirection)
		{
			return default(float);
		}

		[Token(Token = "0x6000707")]
		[Address(RVA = "0xC45628", Offset = "0xC45628", VA = "0xC45628")]
		private UnityEngine.Vector3 GetSingularityOffset(AnimationStream s, UnityEngine.Vector3 IKPosition, bool useRotationLimits)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6000708")]
		[Address(RVA = "0xC46518", Offset = "0xC46518", VA = "0xC46518")]
		private bool SingularityDetected(AnimationStream s, UnityEngine.Vector3 IKPosition)
		{
			return default(bool);
		}

		[Token(Token = "0x6000709")]
		[Address(RVA = "0xC44638", Offset = "0xC44638", VA = "0xC44638")]
		public void Dispose()
		{
		}
	}
	[Token(Token = "0x20000C1")]
	public class IKJBoneParams : MonoBehaviour
	{
		[Token(Token = "0x40004F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0f, 1f)]
		public float weight;

		[Token(Token = "0x600070A")]
		[Address(RVA = "0xC466AC", Offset = "0xC466AC", VA = "0xC466AC")]
		public IKJBoneParams()
		{
		}
	}
	[Token(Token = "0x20000C2")]
	public static class RotationLimitUtilities
	{
		[Token(Token = "0x600070B")]
		[Address(RVA = "0xC43838", Offset = "0xC43838", VA = "0xC43838")]
		public static Quaternion LimitHinge(Quaternion rotation, float min, float max, bool useLimits, UnityEngine.Vector3 axis, ref Quaternion lastRotation, ref float lastAngle)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600070C")]
		[Address(RVA = "0xC466BC", Offset = "0xC466BC", VA = "0xC466BC")]
		public static Quaternion Limit1DOF(Quaternion rotation, UnityEngine.Vector3 axis)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600070D")]
		[Address(RVA = "0xC43AF8", Offset = "0xC43AF8", VA = "0xC43AF8")]
		public static Quaternion LimitAngle(Quaternion rotation, UnityEngine.Vector3 axis, UnityEngine.Vector3 secondaryAxis, float limit, float twistLimit)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600070E")]
		[Address(RVA = "0xC46790", Offset = "0xC46790", VA = "0xC46790")]
		public static Quaternion LimitSwing(Quaternion rotation, UnityEngine.Vector3 axis, float limit)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600070F")]
		[Address(RVA = "0xC46AB0", Offset = "0xC46AB0", VA = "0xC46AB0")]
		public static Quaternion LimitTwist(Quaternion rotation, UnityEngine.Vector3 axis, UnityEngine.Vector3 orthoAxis, float twistLimit)
		{
			return default(Quaternion);
		}
	}
	[Serializable]
	[Token(Token = "0x20000C3")]
	public class FABRIKChain
	{
		[Token(Token = "0x40004F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public FABRIK ik;

		[Token(Token = "0x40004FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0f, 1f)]
		public float pull;

		[Token(Token = "0x40004FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Range(0f, 1f)]
		public float pin;

		[Token(Token = "0x40004FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int[] children;

		[Token(Token = "0x6000710")]
		[Address(RVA = "0xC46D08", Offset = "0xC46D08", VA = "0xC46D08")]
		public bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000711")]
		[Address(RVA = "0xC46DCC", Offset = "0xC46DCC", VA = "0xC46DCC")]
		public void Initiate()
		{
		}

		[Token(Token = "0x6000712")]
		[Address(RVA = "0xC46DEC", Offset = "0xC46DEC", VA = "0xC46DEC")]
		public void Stage1(FABRIKChain[] chain)
		{
		}

		[Token(Token = "0x6000713")]
		[Address(RVA = "0xC47040", Offset = "0xC47040", VA = "0xC47040")]
		public void Stage2(UnityEngine.Vector3 rootPosition, FABRIKChain[] chain)
		{
		}

		[Token(Token = "0x6000714")]
		[Address(RVA = "0xC46EAC", Offset = "0xC46EAC", VA = "0xC46EAC")]
		private UnityEngine.Vector3 GetCentroid(FABRIKChain[] chain)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6000715")]
		[Address(RVA = "0xC47124", Offset = "0xC47124", VA = "0xC47124")]
		public FABRIKChain()
		{
		}
	}
	[Token(Token = "0x20000C4")]
	public class FBBIKArmBending : MonoBehaviour
	{
		[Token(Token = "0x40004FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x40004FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEngine.Vector3 bendDirectionOffsetLeft;

		[Token(Token = "0x40004FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public UnityEngine.Vector3 bendDirectionOffsetRight;

		[Token(Token = "0x4000500")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UnityEngine.Vector3 characterSpaceBendOffsetLeft;

		[Token(Token = "0x4000501")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public UnityEngine.Vector3 characterSpaceBendOffsetRight;

		[Token(Token = "0x4000502")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Quaternion leftHandTargetRotation;

		[Token(Token = "0x4000503")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Quaternion rightHandTargetRotation;

		[Token(Token = "0x4000504")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool initiated;

		[Token(Token = "0x6000716")]
		[Address(RVA = "0xC47184", Offset = "0xC47184", VA = "0xC47184")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000717")]
		[Address(RVA = "0xC47620", Offset = "0xC47620", VA = "0xC47620")]
		private void OnPostFBBIK()
		{
		}

		[Token(Token = "0x6000718")]
		[Address(RVA = "0xC477B4", Offset = "0xC477B4", VA = "0xC477B4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000719")]
		[Address(RVA = "0xC478C0", Offset = "0xC478C0", VA = "0xC478C0")]
		public FBBIKArmBending()
		{
		}
	}
	[Token(Token = "0x20000C5")]
	public class FBBIKHeadEffector : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20000C6")]
		public class BendBone
		{
			[Token(Token = "0x4000533")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("Assign spine and/or neck bones.")]
			public Transform transform;

			[Token(Token = "0x4000534")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("The weight of rotating this bone.")]
			[Range(0f, 1f)]
			public float weight;

			[Token(Token = "0x4000535")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			private Quaternion defaultLocalRotation;

			[Token(Token = "0x6000728")]
			[Address(RVA = "0xC4AB70", Offset = "0xC4AB70", VA = "0xC4AB70")]
			public BendBone()
			{
			}

			[Token(Token = "0x6000729")]
			[Address(RVA = "0xC4ABD0", Offset = "0xC4ABD0", VA = "0xC4ABD0")]
			public BendBone(Transform transform, float weight)
			{
			}

			[Token(Token = "0x600072A")]
			[Address(RVA = "0xC48294", Offset = "0xC48294", VA = "0xC48294")]
			public void StoreDefaultLocalState()
			{
			}

			[Token(Token = "0x600072B")]
			[Address(RVA = "0xC48664", Offset = "0xC48664", VA = "0xC48664")]
			public void FixTransforms()
			{
			}
		}

		[Token(Token = "0x4000505")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Reference to the FBBIK component.")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x4000506")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[LargeHeader("Position")]
		[Tooltip("Master weight for positioning the head.")]
		[Range(0f, 1f)]
		public float positionWeight;

		[Token(Token = "0x4000507")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("The weight of moving the body along with the head")]
		[Range(0f, 1f)]
		public float bodyWeight;

		[Token(Token = "0x4000508")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Range(0f, 1f)]
		[Tooltip("The weight of moving the thighs along with the head")]
		public float thighWeight;

		[Token(Token = "0x4000509")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("If false, hands will not pull the head away if they are too far. Disabling this will improve performance significantly.")]
		public bool handsPullBody;

		[Token(Token = "0x400050A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[LargeHeader("Rotation")]
		[Tooltip("The weight of rotating the head bone after solving")]
		[Range(0f, 1f)]
		public float rotationWeight;

		[Token(Token = "0x400050B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("Clamping the rotation of the body")]
		[Range(0f, 1f)]
		public float bodyClampWeight;

		[Token(Token = "0x400050C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Clamping the rotation of the head")]
		[Range(0f, 1f)]
		public float headClampWeight;

		[Token(Token = "0x400050D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Range(0f, 1f)]
		[Tooltip("The master weight of bending/twisting the spine to the rotation of the head effector. This is similar to CCD, but uses the rotation of the head effector not the position.")]
		public float bendWeight;

		[Token(Token = "0x400050E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The bones to use for bending.")]
		public BendBone[] bendBones;

		[Token(Token = "0x400050F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[LargeHeader("CCD")]
		[Range(0f, 1f)]
		[Tooltip("Optional. The master weight of the CCD (Cyclic Coordinate Descent) IK effect that bends the spine towards the head effector before FBBIK solves.")]
		public float CCDWeight;

		[Token(Token = "0x4000510")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Range(0f, 1f)]
		[Tooltip("The weight of rolling the bones in towards the target")]
		public float roll;

		[Token(Token = "0x4000511")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Smoothing the CCD effect.")]
		[Range(0f, 1000f)]
		public float damper;

		[Token(Token = "0x4000512")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Bones to use for the CCD pass. Assign spine and/or neck bones.")]
		public Transform[] CCDBones;

		[Token(Token = "0x4000513")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Range(0f, 1f)]
		[Tooltip("Stretching the spine/neck to help reach the target. This is useful for making sure the head stays locked relative to the VR headset. NB! Stretching is done after FBBIK has solved so if you have the hand effectors pinned and spine bones included in the 'Stretch Bones', the hands might become offset from their target positions.")]
		[LargeHeader("Stretching")]
		public float postStretchWeight;

		[Token(Token = "0x4000514")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Tooltip("Stretch magnitude limit.")]
		public float maxStretch;

		[Token(Token = "0x4000515")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("If > 0, dampers the stretching effect.")]
		public float stretchDamper;

		[Token(Token = "0x4000516")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Tooltip("If true, will fix head position to this Transform no matter what. Good for making sure the head will not budge away from the VR headset")]
		public bool fixHead;

		[Token(Token = "0x4000517")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Bones to use for stretching. The more bones you add, the less noticable the effect.")]
		public Transform[] stretchBones;

		[Token(Token = "0x4000518")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[LargeHeader("Chest Direction")]
		public UnityEngine.Vector3 chestDirection;

		[Token(Token = "0x4000519")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[Range(0f, 1f)]
		public float chestDirectionWeight;

		[Token(Token = "0x400051A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Transform[] chestBones;

		[Token(Token = "0x400051B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public IKSolver.UpdateDelegate OnPostHeadEffectorFK;

		[Token(Token = "0x400051C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private UnityEngine.Vector3 offset;

		[Token(Token = "0x400051D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private UnityEngine.Vector3 headToBody;

		[Token(Token = "0x400051E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private UnityEngine.Vector3 shoulderCenterToHead;

		[Token(Token = "0x400051F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private UnityEngine.Vector3 headToLeftThigh;

		[Token(Token = "0x4000520")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private UnityEngine.Vector3 headToRightThigh;

		[Token(Token = "0x4000521")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private UnityEngine.Vector3 leftShoulderPos;

		[Token(Token = "0x4000522")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private UnityEngine.Vector3 rightShoulderPos;

		[Token(Token = "0x4000523")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private float shoulderDist;

		[Token(Token = "0x4000524")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private float leftShoulderDist;

		[Token(Token = "0x4000525")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private float rightShoulderDist;

		[Token(Token = "0x4000526")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Quaternion chestRotation;

		[Token(Token = "0x4000527")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Quaternion headRotationRelativeToRoot;

		[Token(Token = "0x4000528")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private Quaternion[] ccdDefaultLocalRotations;

		[Token(Token = "0x4000529")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private UnityEngine.Vector3 headLocalPosition;

		[Token(Token = "0x400052A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		private Quaternion headLocalRotation;

		[Token(Token = "0x400052B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private UnityEngine.Vector3[] stretchLocalPositions;

		[Token(Token = "0x400052C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private Quaternion[] stretchLocalRotations;

		[Token(Token = "0x400052D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private UnityEngine.Vector3[] chestLocalPositions;

		[Token(Token = "0x400052E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private Quaternion[] chestLocalRotations;

		[Token(Token = "0x400052F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private int bendBonesCount;

		[Token(Token = "0x4000530")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		private int ccdBonesCount;

		[Token(Token = "0x4000531")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private int stretchBonesCount;

		[Token(Token = "0x4000532")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		private int chestBonesCount;

		[Token(Token = "0x600071A")]
		[Address(RVA = "0xC478C8", Offset = "0xC478C8", VA = "0xC478C8")]
		private void Start()
		{
		}

		[Token(Token = "0x600071B")]
		[Address(RVA = "0xC47E20", Offset = "0xC47E20", VA = "0xC47E20")]
		private void OnStoreDefaultLocalState()
		{
		}

		[Token(Token = "0x600071C")]
		[Address(RVA = "0xC482C0", Offset = "0xC482C0", VA = "0xC482C0")]
		private void OnFixTransforms()
		{
		}

		[Token(Token = "0x600071D")]
		[Address(RVA = "0xC4868C", Offset = "0xC4868C", VA = "0xC4868C")]
		private void OnPreRead()
		{
		}

		[Token(Token = "0x600071E")]
		[Address(RVA = "0xC48F88", Offset = "0xC48F88", VA = "0xC48F88")]
		private void SpineBend()
		{
		}

		[Token(Token = "0x600071F")]
		[Address(RVA = "0xC49380", Offset = "0xC49380", VA = "0xC49380")]
		private void CCDPass()
		{
		}

		[Token(Token = "0x6000720")]
		[Address(RVA = "0xC49790", Offset = "0xC49790", VA = "0xC49790")]
		private void Iterate(int iteration)
		{
		}

		[Token(Token = "0x6000721")]
		[Address(RVA = "0xC4A108", Offset = "0xC4A108", VA = "0xC4A108")]
		private void OnPostUpdate()
		{
		}

		[Token(Token = "0x6000722")]
		[Address(RVA = "0xC48CCC", Offset = "0xC48CCC", VA = "0xC48CCC")]
		private void ChestDirection()
		{
		}

		[Token(Token = "0x6000723")]
		[Address(RVA = "0xC4A344", Offset = "0xC4A344", VA = "0xC4A344")]
		private void PostStretching()
		{
		}

		[Token(Token = "0x6000724")]
		[Address(RVA = "0xC4A028", Offset = "0xC4A028", VA = "0xC4A028")]
		private void LerpSolverPosition(IKEffector effector, UnityEngine.Vector3 position, float weight, UnityEngine.Vector3 offset)
		{
		}

		[Token(Token = "0x6000725")]
		[Address(RVA = "0xC49F28", Offset = "0xC49F28", VA = "0xC49F28")]
		private void Solve(ref UnityEngine.Vector3 pos1, ref UnityEngine.Vector3 pos2, float nominalDistance)
		{
		}

		[Token(Token = "0x6000726")]
		[Address(RVA = "0xC4A6A4", Offset = "0xC4A6A4", VA = "0xC4A6A4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000727")]
		[Address(RVA = "0xC4A9C8", Offset = "0xC4A9C8", VA = "0xC4A9C8")]
		public FBBIKHeadEffector()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000C7")]
	public class FBIKChain
	{
		[Serializable]
		[Token(Token = "0x20000C8")]
		public class ChildConstraint
		{
			[Token(Token = "0x400054D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float pushElasticity;

			[Token(Token = "0x400054E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float pullElasticity;

			[Token(Token = "0x400054F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[SerializeField]
			private Transform bone1;

			[Token(Token = "0x4000550")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[SerializeField]
			private Transform bone2;

			[Token(Token = "0x4000553")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float crossFade;

			[Token(Token = "0x4000554")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float inverseCrossFade;

			[Token(Token = "0x4000555")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int chain1Index;

			[Token(Token = "0x4000556")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private int chain2Index;

			[Token(Token = "0x170000F2")]
			public float nominalDistance
			{
				[Token(Token = "0x6000740")]
				[Address(RVA = "0xC4DBA4", Offset = "0xC4DBA4", VA = "0xC4DBA4")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000741")]
				[Address(RVA = "0xC4DBAC", Offset = "0xC4DBAC", VA = "0xC4DBAC")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000F3")]
			public bool isRigid
			{
				[Token(Token = "0x6000742")]
				[Address(RVA = "0xC4DBB4", Offset = "0xC4DBB4", VA = "0xC4DBB4")]
				[CompilerGenerated]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6000743")]
				[Address(RVA = "0xC4DBBC", Offset = "0xC4DBBC", VA = "0xC4DBBC")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x6000744")]
			[Address(RVA = "0xC4DBC8", Offset = "0xC4DBC8", VA = "0xC4DBC8")]
			public ChildConstraint(Transform bone1, Transform bone2, float pushElasticity = 0f, float pullElasticity = 0f)
			{
			}

			[Token(Token = "0x6000745")]
			[Address(RVA = "0xC4B8B0", Offset = "0xC4B8B0", VA = "0xC4B8B0")]
			public void Initiate(IKSolverFullBody solver)
			{
			}

			[Token(Token = "0x6000746")]
			[Address(RVA = "0xC4BF5C", Offset = "0xC4BF5C", VA = "0xC4BF5C")]
			public void OnPreSolve(IKSolverFullBody solver)
			{
			}

			[Token(Token = "0x6000747")]
			[Address(RVA = "0xC4D968", Offset = "0xC4D968", VA = "0xC4D968")]
			public void Solve(IKSolverFullBody solver)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000C9")]
		public enum Smoothing
		{
			[Token(Token = "0x4000558")]
			None,
			[Token(Token = "0x4000559")]
			Exponential,
			[Token(Token = "0x400055A")]
			Cubic
		}

		[Token(Token = "0x4000536")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Range(0f, 1f)]
		public float pin;

		[Token(Token = "0x4000537")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[Range(0f, 1f)]
		public float pull;

		[Token(Token = "0x4000538")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0f, 1f)]
		public float push;

		[Token(Token = "0x4000539")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Range(-1f, 1f)]
		public float pushParent;

		[Token(Token = "0x400053A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 1f)]
		public float reach;

		[Token(Token = "0x400053B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Smoothing reachSmoothing;

		[Token(Token = "0x400053C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Smoothing pushSmoothing;

		[Token(Token = "0x400053D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public IKSolver.Node[] nodes;

		[Token(Token = "0x400053E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int[] children;

		[Token(Token = "0x400053F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public ChildConstraint[] childConstraints;

		[Token(Token = "0x4000540")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public IKConstraintBend bendConstraint;

		[Token(Token = "0x4000541")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float rootLength;

		[Token(Token = "0x4000542")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private bool initiated;

		[Token(Token = "0x4000543")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float length;

		[Token(Token = "0x4000544")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float distance;

		[Token(Token = "0x4000545")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private IKSolver.Point p;

		[Token(Token = "0x4000546")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float reachForce;

		[Token(Token = "0x4000547")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float pullParentSum;

		[Token(Token = "0x4000548")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float[] crossFades;

		[Token(Token = "0x4000549")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float sqrMag1;

		[Token(Token = "0x400054A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float sqrMag2;

		[Token(Token = "0x400054B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float sqrMagDif;

		[Token(Token = "0x400054C")]
		private const float maxLimbLength = 0.99999f;

		[Token(Token = "0x600072C")]
		[Address(RVA = "0xC4AC4C", Offset = "0xC4AC4C", VA = "0xC4AC4C")]
		public FBIKChain()
		{
		}

		[Token(Token = "0x600072D")]
		[Address(RVA = "0xC4ADB4", Offset = "0xC4ADB4", VA = "0xC4ADB4")]
		public FBIKChain(float pin, float pull, params Transform[] nodeTransforms)
		{
		}

		[Token(Token = "0x600072E")]
		[Address(RVA = "0xC4AEE8", Offset = "0xC4AEE8", VA = "0xC4AEE8")]
		public void SetNodes(params Transform[] boneTransforms)
		{
		}

		[Token(Token = "0x600072F")]
		[Address(RVA = "0xC4B020", Offset = "0xC4B020", VA = "0xC4B020")]
		public int GetNodeIndex(Transform boneTransform)
		{
			return default(int);
		}

		[Token(Token = "0x6000730")]
		[Address(RVA = "0xC4B0DC", Offset = "0xC4B0DC", VA = "0xC4B0DC")]
		public bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000731")]
		[Address(RVA = "0xC4B1E8", Offset = "0xC4B1E8", VA = "0xC4B1E8")]
		public void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6000732")]
		[Address(RVA = "0xC4BB78", Offset = "0xC4BB78", VA = "0xC4BB78")]
		public void ReadPose(IKSolverFullBody solver, bool fullBody)
		{
		}

		[Token(Token = "0x6000733")]
		[Address(RVA = "0xC4B354", Offset = "0xC4B354", VA = "0xC4B354")]
		private void CalculateBoneLengths(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6000734")]
		[Address(RVA = "0xC4C140", Offset = "0xC4C140", VA = "0xC4C140")]
		public void Reach(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6000735")]
		[Address(RVA = "0xC4C3D4", Offset = "0xC4C3D4", VA = "0xC4C3D4")]
		public UnityEngine.Vector3 Push(IKSolverFullBody solver)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6000736")]
		[Address(RVA = "0xC4C6A4", Offset = "0xC4C6A4", VA = "0xC4C6A4")]
		public void SolveTrigonometric(IKSolverFullBody solver, bool calculateBendDirection = false)
		{
		}

		[Token(Token = "0x6000737")]
		[Address(RVA = "0xC4D06C", Offset = "0xC4D06C", VA = "0xC4D06C")]
		public void Stage1(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6000738")]
		[Address(RVA = "0xC4D564", Offset = "0xC4D564", VA = "0xC4D564")]
		public void Stage2(IKSolverFullBody solver, UnityEngine.Vector3 position)
		{
		}

		[Token(Token = "0x6000739")]
		[Address(RVA = "0xC4D764", Offset = "0xC4D764", VA = "0xC4D764")]
		public void SolveConstraintSystems(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x600073A")]
		[Address(RVA = "0xC4D450", Offset = "0xC4D450", VA = "0xC4D450")]
		private UnityEngine.Vector3 SolveFABRIKJoint(UnityEngine.Vector3 pos1, UnityEngine.Vector3 pos2, float length)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x600073B")]
		[Address(RVA = "0xC4CF0C", Offset = "0xC4CF0C", VA = "0xC4CF0C")]
		protected UnityEngine.Vector3 GetDirToBendPoint(UnityEngine.Vector3 direction, UnityEngine.Vector3 bendDirection, float directionMagnitude)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x600073C")]
		[Address(RVA = "0xC4D3EC", Offset = "0xC4D3EC", VA = "0xC4D3EC")]
		private void SolveChildConstraints(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x600073D")]
		[Address(RVA = "0xC4D840", Offset = "0xC4D840", VA = "0xC4D840")]
		private void SolveLinearConstraint(IKSolver.Node node1, IKSolver.Node node2, float crossFade, float distance)
		{
		}

		[Token(Token = "0x600073E")]
		[Address(RVA = "0xC4D318", Offset = "0xC4D318", VA = "0xC4D318")]
		public void ForwardReach(UnityEngine.Vector3 position)
		{
		}

		[Token(Token = "0x600073F")]
		[Address(RVA = "0xC4D668", Offset = "0xC4D668", VA = "0xC4D668")]
		private void BackwardReach(UnityEngine.Vector3 position)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000CA")]
	public class IKConstraintBend
	{
		[Token(Token = "0x400055B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform bone1;

		[Token(Token = "0x400055C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform bone2;

		[Token(Token = "0x400055D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform bone3;

		[Token(Token = "0x400055E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform bendGoal;

		[Token(Token = "0x400055F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityEngine.Vector3 direction;

		[Token(Token = "0x4000560")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Quaternion rotationOffset;

		[Token(Token = "0x4000561")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Range(0f, 1f)]
		public float weight;

		[Token(Token = "0x4000562")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public UnityEngine.Vector3 defaultLocalDirection;

		[Token(Token = "0x4000563")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public UnityEngine.Vector3 defaultChildDirection;

		[NonSerialized]
		[Token(Token = "0x4000564")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float clampF;

		[Token(Token = "0x4000565")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private int chainIndex1;

		[Token(Token = "0x4000566")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private int nodeIndex1;

		[Token(Token = "0x4000567")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private int chainIndex2;

		[Token(Token = "0x4000568")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private int nodeIndex2;

		[Token(Token = "0x4000569")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private int chainIndex3;

		[Token(Token = "0x400056A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int nodeIndex3;

		[Token(Token = "0x400056C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x85")]
		private bool limbOrientationsSet;

		[Token(Token = "0x170000F4")]
		public bool initiated
		{
			[Token(Token = "0x6000749")]
			[Address(RVA = "0xC4DDE0", Offset = "0xC4DDE0", VA = "0xC4DDE0")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600074A")]
			[Address(RVA = "0xC4DDE8", Offset = "0xC4DDE8", VA = "0xC4DDE8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000748")]
		[Address(RVA = "0xC4DC08", Offset = "0xC4DC08", VA = "0xC4DC08")]
		public bool IsValid(IKSolverFullBody solver, Warning.Logger logger)
		{
			return default(bool);
		}

		[Token(Token = "0x600074B")]
		[Address(RVA = "0xC4AD48", Offset = "0xC4AD48", VA = "0xC4AD48")]
		public IKConstraintBend()
		{
		}

		[Token(Token = "0x600074C")]
		[Address(RVA = "0xC4DDF4", Offset = "0xC4DDF4", VA = "0xC4DDF4")]
		public IKConstraintBend(Transform bone1, Transform bone2, Transform bone3)
		{
		}

		[Token(Token = "0x600074D")]
		[Address(RVA = "0xC4B904", Offset = "0xC4B904", VA = "0xC4B904")]
		public void SetBones(Transform bone1, Transform bone2, Transform bone3)
		{
		}

		[Token(Token = "0x600074E")]
		[Address(RVA = "0xC4B910", Offset = "0xC4B910", VA = "0xC4B910")]
		public void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x600074F")]
		[Address(RVA = "0xC4DFC8", Offset = "0xC4DFC8", VA = "0xC4DFC8")]
		public void SetLimbOrientation(UnityEngine.Vector3 upper, UnityEngine.Vector3 lower, UnityEngine.Vector3 last)
		{
		}

		[Token(Token = "0x6000750")]
		[Address(RVA = "0xC4E31C", Offset = "0xC4E31C", VA = "0xC4E31C")]
		public void LimitBend(float solverWeight, float positionWeight)
		{
		}

		[Token(Token = "0x6000751")]
		[Address(RVA = "0xC4C8DC", Offset = "0xC4C8DC", VA = "0xC4C8DC")]
		public UnityEngine.Vector3 GetDir(IKSolverFullBody solver)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6000752")]
		[Address(RVA = "0xC4DE80", Offset = "0xC4DE80", VA = "0xC4DE80")]
		private UnityEngine.Vector3 OrthoToLimb(IKSolverFullBody solver, UnityEngine.Vector3 tangent)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6000753")]
		[Address(RVA = "0xC4DF24", Offset = "0xC4DF24", VA = "0xC4DF24")]
		private UnityEngine.Vector3 OrthoToBone1(IKSolverFullBody solver, UnityEngine.Vector3 tangent)
		{
			return default(UnityEngine.Vector3);
		}
	}
	[Serializable]
	[Token(Token = "0x20000CB")]
	public class IKEffector
	{
		[Token(Token = "0x400056D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform bone;

		[Token(Token = "0x400056E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x400056F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 1f)]
		public float positionWeight;

		[Token(Token = "0x4000570")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Range(0f, 1f)]
		public float rotationWeight;

		[Token(Token = "0x4000571")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityEngine.Vector3 position;

		[Token(Token = "0x4000572")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Quaternion rotation;

		[Token(Token = "0x4000573")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public UnityEngine.Vector3 positionOffset;

		[Token(Token = "0x4000575")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		public bool effectChildNodes;

		[Token(Token = "0x4000576")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Range(0f, 1f)]
		public float maintainRelativePositionWeight;

		[Token(Token = "0x4000577")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform[] childBones;

		[Token(Token = "0x4000578")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform planeBone1;

		[Token(Token = "0x4000579")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Transform planeBone2;

		[Token(Token = "0x400057A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Transform planeBone3;

		[Token(Token = "0x400057B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Quaternion planeRotationOffset;

		[Token(Token = "0x400057C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float posW;

		[Token(Token = "0x400057D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float rotW;

		[Token(Token = "0x400057E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private UnityEngine.Vector3[] localPositions;

		[Token(Token = "0x400057F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private bool usePlaneNodes;

		[Token(Token = "0x4000580")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private Quaternion animatedPlaneRotation;

		[Token(Token = "0x4000581")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private UnityEngine.Vector3 animatedPosition;

		[Token(Token = "0x4000582")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private bool firstUpdate;

		[Token(Token = "0x4000583")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private int chainIndex;

		[Token(Token = "0x4000584")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private int nodeIndex;

		[Token(Token = "0x4000585")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private int plane1ChainIndex;

		[Token(Token = "0x4000586")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private int plane1NodeIndex;

		[Token(Token = "0x4000587")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private int plane2ChainIndex;

		[Token(Token = "0x4000588")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private int plane2NodeIndex;

		[Token(Token = "0x4000589")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private int plane3ChainIndex;

		[Token(Token = "0x400058A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private int plane3NodeIndex;

		[Token(Token = "0x400058B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private int[] childChainIndexes;

		[Token(Token = "0x400058C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private int[] childNodeIndexes;

		[Token(Token = "0x170000F5")]
		public bool isEndEffector
		{
			[Token(Token = "0x6000755")]
			[Address(RVA = "0xC4E6E4", Offset = "0xC4E6E4", VA = "0xC4E6E4")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000756")]
			[Address(RVA = "0xC4E6EC", Offset = "0xC4E6EC", VA = "0xC4E6EC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000754")]
		[Address(RVA = "0xC4A648", Offset = "0xC4A648", VA = "0xC4A648")]
		public IKSolver.Node GetNode(IKSolverFullBody solver)
		{
			return null;
		}

		[Token(Token = "0x6000757")]
		[Address(RVA = "0xC4E6F8", Offset = "0xC4E6F8", VA = "0xC4E6F8")]
		public void PinToBone(float positionWeight, float rotationWeight)
		{
		}

		[Token(Token = "0x6000758")]
		[Address(RVA = "0xC4E77C", Offset = "0xC4E77C", VA = "0xC4E77C")]
		public IKEffector()
		{
		}

		[Token(Token = "0x6000759")]
		[Address(RVA = "0xC4E91C", Offset = "0xC4E91C", VA = "0xC4E91C")]
		public IKEffector(Transform bone, Transform[] childBones)
		{
		}

		[Token(Token = "0x600075A")]
		[Address(RVA = "0xC4EAD8", Offset = "0xC4EAD8", VA = "0xC4EAD8")]
		public bool IsValid(IKSolver solver, ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x600075B")]
		[Address(RVA = "0xC4EDCC", Offset = "0xC4EDCC", VA = "0xC4EDCC")]
		public void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x600075C")]
		[Address(RVA = "0xC4F06C", Offset = "0xC4F06C", VA = "0xC4F06C")]
		public void ResetOffset(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x600075D")]
		[Address(RVA = "0xC4F18C", Offset = "0xC4F18C", VA = "0xC4F18C")]
		public void SetToTarget()
		{
		}

		[Token(Token = "0x600075E")]
		[Address(RVA = "0xC4F228", Offset = "0xC4F228", VA = "0xC4F228")]
		public void OnPreSolve(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x600075F")]
		[Address(RVA = "0xC4F8DC", Offset = "0xC4F8DC", VA = "0xC4F8DC")]
		public void OnPostWrite()
		{
		}

		[Token(Token = "0x6000760")]
		[Address(RVA = "0xC4F934", Offset = "0xC4F934", VA = "0xC4F934")]
		private Quaternion GetPlaneRotation(IKSolverFullBody solver)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000761")]
		[Address(RVA = "0xC4FB08", Offset = "0xC4FB08", VA = "0xC4FB08")]
		public void Update(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6000762")]
		[Address(RVA = "0xC4FD64", Offset = "0xC4FD64", VA = "0xC4FD64")]
		private UnityEngine.Vector3 GetPosition(IKSolverFullBody solver, out Quaternion planeRotationOffset)
		{
			return default(UnityEngine.Vector3);
		}
	}
	[Serializable]
	[Token(Token = "0x20000CC")]
	public class IKMapping
	{
		[Serializable]
		[Token(Token = "0x20000CD")]
		public class BoneMap
		{
			[Token(Token = "0x400058D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform transform;

			[Token(Token = "0x400058E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int chainIndex;

			[Token(Token = "0x400058F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public int nodeIndex;

			[Token(Token = "0x4000590")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public UnityEngine.Vector3 defaultLocalPosition;

			[Token(Token = "0x4000591")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public Quaternion defaultLocalRotation;

			[Token(Token = "0x4000592")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public UnityEngine.Vector3 localSwingAxis;

			[Token(Token = "0x4000593")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public UnityEngine.Vector3 localTwistAxis;

			[Token(Token = "0x4000594")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public UnityEngine.Vector3 planePosition;

			[Token(Token = "0x4000595")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public UnityEngine.Vector3 ikPosition;

			[Token(Token = "0x4000596")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			public Quaternion defaultLocalTargetRotation;

			[Token(Token = "0x4000597")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			private Quaternion maintainRotation;

			[Token(Token = "0x4000598")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
			public float length;

			[Token(Token = "0x4000599")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			public Quaternion animatedRotation;

			[Token(Token = "0x400059A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			private Transform planeBone1;

			[Token(Token = "0x400059B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			private Transform planeBone2;

			[Token(Token = "0x400059C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			private Transform planeBone3;

			[Token(Token = "0x400059D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
			private int plane1ChainIndex;

			[Token(Token = "0x400059E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
			private int plane1NodeIndex;

			[Token(Token = "0x400059F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			private int plane2ChainIndex;

			[Token(Token = "0x40005A0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
			private int plane2NodeIndex;

			[Token(Token = "0x40005A1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
			private int plane3ChainIndex;

			[Token(Token = "0x40005A2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
			private int plane3NodeIndex;

			[Token(Token = "0x170000F6")]
			public UnityEngine.Vector3 swingDirection
			{
				[Token(Token = "0x6000769")]
				[Address(RVA = "0xC502B0", Offset = "0xC502B0", VA = "0xC502B0")]
				get
				{
					return default(UnityEngine.Vector3);
				}
			}

			[Token(Token = "0x170000F7")]
			public bool isNodeBone
			{
				[Token(Token = "0x600076C")]
				[Address(RVA = "0xC50368", Offset = "0xC50368", VA = "0xC50368")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x170000F8")]
			private Quaternion lastAnimatedTargetRotation
			{
				[Token(Token = "0x6000780")]
				[Address(RVA = "0xC50730", Offset = "0xC50730", VA = "0xC50730")]
				get
				{
					return default(Quaternion);
				}
			}

			[Token(Token = "0x6000768")]
			[Address(RVA = "0xC50284", Offset = "0xC50284", VA = "0xC50284")]
			public void Initiate(Transform transform, IKSolverFullBody solver)
			{
			}

			[Token(Token = "0x600076A")]
			[Address(RVA = "0xC502E0", Offset = "0xC502E0", VA = "0xC502E0")]
			public void StoreDefaultLocalState()
			{
			}

			[Token(Token = "0x600076B")]
			[Address(RVA = "0xC50324", Offset = "0xC50324", VA = "0xC50324")]
			public void FixTransform(bool position)
			{
			}

			[Token(Token = "0x600076D")]
			[Address(RVA = "0xC50378", Offset = "0xC50378", VA = "0xC50378")]
			public void SetLength(BoneMap nextBone)
			{
			}

			[Token(Token = "0x600076E")]
			[Address(RVA = "0xC5044C", Offset = "0xC5044C", VA = "0xC5044C")]
			public void SetLocalSwingAxis(BoneMap swingTarget)
			{
			}

			[Token(Token = "0x600076F")]
			[Address(RVA = "0xC50454", Offset = "0xC50454", VA = "0xC50454")]
			public void SetLocalSwingAxis(BoneMap bone1, BoneMap bone2)
			{
			}

			[Token(Token = "0x6000770")]
			[Address(RVA = "0xC50520", Offset = "0xC50520", VA = "0xC50520")]
			public void SetLocalTwistAxis(UnityEngine.Vector3 twistDirection, UnityEngine.Vector3 normalDirection)
			{
			}

			[Token(Token = "0x6000771")]
			[Address(RVA = "0xC5058C", Offset = "0xC5058C", VA = "0xC5058C")]
			public void SetPlane(IKSolverFullBody solver, Transform planeBone1, Transform planeBone2, Transform planeBone3)
			{
			}

			[Token(Token = "0x6000772")]
			[Address(RVA = "0xC50620", Offset = "0xC50620", VA = "0xC50620")]
			public void UpdatePlane(bool rotation, bool position)
			{
			}

			[Token(Token = "0x6000773")]
			[Address(RVA = "0xC50898", Offset = "0xC50898", VA = "0xC50898")]
			public void SetIKPosition()
			{
			}

			[Token(Token = "0x6000774")]
			[Address(RVA = "0xC508C4", Offset = "0xC508C4", VA = "0xC508C4")]
			public void MaintainRotation()
			{
			}

			[Token(Token = "0x6000775")]
			[Address(RVA = "0xC508F0", Offset = "0xC508F0", VA = "0xC508F0")]
			public void SetToIKPosition()
			{
			}

			[Token(Token = "0x6000776")]
			[Address(RVA = "0xC50918", Offset = "0xC50918", VA = "0xC50918")]
			public void FixToNode(IKSolverFullBody solver, float weight, [Optional] IKSolver.Node fixNode)
			{
			}

			[Token(Token = "0x6000777")]
			[Address(RVA = "0xC509DC", Offset = "0xC509DC", VA = "0xC509DC")]
			public UnityEngine.Vector3 GetPlanePosition(IKSolverFullBody solver)
			{
				return default(UnityEngine.Vector3);
			}

			[Token(Token = "0x6000778")]
			[Address(RVA = "0xC50B70", Offset = "0xC50B70", VA = "0xC50B70")]
			public void PositionToPlane(IKSolverFullBody solver)
			{
			}

			[Token(Token = "0x6000779")]
			[Address(RVA = "0xC50B94", Offset = "0xC50B94", VA = "0xC50B94")]
			public void RotateToPlane(IKSolverFullBody solver, float weight)
			{
			}

			[Token(Token = "0x600077A")]
			[Address(RVA = "0xC50CB4", Offset = "0xC50CB4", VA = "0xC50CB4")]
			public void Swing(UnityEngine.Vector3 swingTarget, float weight)
			{
			}

			[Token(Token = "0x600077B")]
			[Address(RVA = "0xC50D18", Offset = "0xC50D18", VA = "0xC50D18")]
			public void Swing(UnityEngine.Vector3 pos1, UnityEngine.Vector3 pos2, float weight)
			{
			}

			[Token(Token = "0x600077C")]
			[Address(RVA = "0xC50E98", Offset = "0xC50E98", VA = "0xC50E98")]
			public void Twist(UnityEngine.Vector3 twistDirection, UnityEngine.Vector3 normalDirection, float weight)
			{
			}

			[Token(Token = "0x600077D")]
			[Address(RVA = "0xC51018", Offset = "0xC51018", VA = "0xC51018")]
			public void RotateToMaintain(float weight)
			{
			}

			[Token(Token = "0x600077E")]
			[Address(RVA = "0xC51094", Offset = "0xC51094", VA = "0xC51094")]
			public void RotateToEffector(IKSolverFullBody solver, float weight)
			{
			}

			[Token(Token = "0x600077F")]
			[Address(RVA = "0xC50A54", Offset = "0xC50A54", VA = "0xC50A54")]
			private Quaternion GetTargetRotation(IKSolverFullBody solver)
			{
				return default(Quaternion);
			}

			[Token(Token = "0x6000781")]
			[Address(RVA = "0xC511BC", Offset = "0xC511BC", VA = "0xC511BC")]
			public BoneMap()
			{
			}
		}

		[Token(Token = "0x6000763")]
		[Address(RVA = "0xC50020", Offset = "0xC50020", VA = "0xC50020", Slot = "4")]
		public virtual bool IsValid(IKSolver solver, ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000764")]
		[Address(RVA = "0xC50028", Offset = "0xC50028", VA = "0xC50028", Slot = "5")]
		public virtual void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6000765")]
		[Address(RVA = "0xC5002C", Offset = "0xC5002C", VA = "0xC5002C")]
		protected bool BoneIsValid(Transform bone, IKSolver solver, ref string message, [Optional] Warning.Logger logger)
		{
			return default(bool);
		}

		[Token(Token = "0x6000766")]
		[Address(RVA = "0xC50168", Offset = "0xC50168", VA = "0xC50168")]
		protected UnityEngine.Vector3 SolveFABRIKJoint(UnityEngine.Vector3 pos1, UnityEngine.Vector3 pos2, float length)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6000767")]
		[Address(RVA = "0xC5027C", Offset = "0xC5027C", VA = "0xC5027C")]
		public IKMapping()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000CE")]
	public class IKMappingBone : IKMapping
	{
		[Token(Token = "0x40005A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform bone;

		[Token(Token = "0x40005A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0f, 1f)]
		public float maintainRotationWeight;

		[Token(Token = "0x40005A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private BoneMap boneMap;

		[Token(Token = "0x6000782")]
		[Address(RVA = "0xC511D8", Offset = "0xC511D8", VA = "0xC511D8", Slot = "4")]
		public override bool IsValid(IKSolver solver, ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000783")]
		[Address(RVA = "0xC51274", Offset = "0xC51274", VA = "0xC51274")]
		public IKMappingBone()
		{
		}

		[Token(Token = "0x6000784")]
		[Address(RVA = "0xC512F8", Offset = "0xC512F8", VA = "0xC512F8")]
		public IKMappingBone(Transform bone)
		{
		}

		[Token(Token = "0x6000785")]
		[Address(RVA = "0xC51390", Offset = "0xC51390", VA = "0xC51390")]
		public void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6000786")]
		[Address(RVA = "0xC513A8", Offset = "0xC513A8", VA = "0xC513A8")]
		public void FixTransforms()
		{
		}

		[Token(Token = "0x6000787")]
		[Address(RVA = "0xC513C4", Offset = "0xC513C4", VA = "0xC513C4", Slot = "5")]
		public override void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6000788")]
		[Address(RVA = "0xC51450", Offset = "0xC51450", VA = "0xC51450")]
		public void ReadPose()
		{
		}

		[Token(Token = "0x6000789")]
		[Address(RVA = "0xC51468", Offset = "0xC51468", VA = "0xC51468")]
		public void WritePose(float solverWeight)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000CF")]
	public class IKMappingLimb : IKMapping
	{
		[Serializable]
		[Token(Token = "0x20000D0")]
		public enum BoneMapType
		{
			[Token(Token = "0x40005B2")]
			Parent,
			[Token(Token = "0x40005B3")]
			Bone1,
			[Token(Token = "0x40005B4")]
			Bone2,
			[Token(Token = "0x40005B5")]
			Bone3
		}

		[Token(Token = "0x40005A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform parentBone;

		[Token(Token = "0x40005A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform bone1;

		[Token(Token = "0x40005A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform bone2;

		[Token(Token = "0x40005A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform bone3;

		[Token(Token = "0x40005AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Range(0f, 1f)]
		public float maintainRotationWeight;

		[Token(Token = "0x40005AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Range(0f, 1f)]
		public float weight;

		[NonSerialized]
		[Token(Token = "0x40005AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool updatePlaneRotations;

		[Token(Token = "0x40005AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private BoneMap boneMapParent;

		[Token(Token = "0x40005AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private BoneMap boneMap1;

		[Token(Token = "0x40005AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private BoneMap boneMap2;

		[Token(Token = "0x40005B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private BoneMap boneMap3;

		[Token(Token = "0x600078A")]
		[Address(RVA = "0xC5148C", Offset = "0xC5148C", VA = "0xC5148C", Slot = "4")]
		public override bool IsValid(IKSolver solver, ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x600078B")]
		[Address(RVA = "0xC51500", Offset = "0xC51500", VA = "0xC51500")]
		public BoneMap GetBoneMap(BoneMapType boneMap)
		{
			return null;
		}

		[Token(Token = "0x600078C")]
		[Address(RVA = "0xC515C8", Offset = "0xC515C8", VA = "0xC515C8")]
		public void SetLimbOrientation(UnityEngine.Vector3 upper, UnityEngine.Vector3 lower)
		{
		}

		[Token(Token = "0x600078D")]
		[Address(RVA = "0xC51880", Offset = "0xC51880", VA = "0xC51880")]
		public IKMappingLimb()
		{
		}

		[Token(Token = "0x600078E")]
		[Address(RVA = "0xC5199C", Offset = "0xC5199C", VA = "0xC5199C")]
		public IKMappingLimb(Transform bone1, Transform bone2, Transform bone3, [Optional] Transform parentBone)
		{
		}

		[Token(Token = "0x600078F")]
		[Address(RVA = "0xC51AE4", Offset = "0xC51AE4", VA = "0xC51AE4")]
		public void SetBones(Transform bone1, Transform bone2, Transform bone3, [Optional] Transform parentBone)
		{
		}

		[Token(Token = "0x6000790")]
		[Address(RVA = "0xC51AF0", Offset = "0xC51AF0", VA = "0xC51AF0")]
		public void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6000791")]
		[Address(RVA = "0xC51B88", Offset = "0xC51B88", VA = "0xC51B88")]
		public void FixTransforms()
		{
		}

		[Token(Token = "0x6000792")]
		[Address(RVA = "0xC51C30", Offset = "0xC51C30", VA = "0xC51C30", Slot = "5")]
		public override void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6000793")]
		[Address(RVA = "0xC51E8C", Offset = "0xC51E8C", VA = "0xC51E8C")]
		public void ReadPose()
		{
		}

		[Token(Token = "0x6000794")]
		[Address(RVA = "0xC51EEC", Offset = "0xC51EEC", VA = "0xC51EEC")]
		public void WritePose(IKSolverFullBody solver, bool fullBody)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000D1")]
	public class IKMappingSpine : IKMapping
	{
		[Token(Token = "0x40005B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform[] spineBones;

		[Token(Token = "0x40005B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform leftUpperArmBone;

		[Token(Token = "0x40005B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform rightUpperArmBone;

		[Token(Token = "0x40005B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform leftThighBone;

		[Token(Token = "0x40005BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform rightThighBone;

		[Token(Token = "0x40005BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Range(1f, 3f)]
		public int iterations;

		[Token(Token = "0x40005BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Range(0f, 1f)]
		public float twistWeight;

		[Token(Token = "0x40005BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int rootNodeIndex;

		[Token(Token = "0x40005BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private BoneMap[] spine;

		[Token(Token = "0x40005BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private BoneMap leftUpperArm;

		[Token(Token = "0x40005C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private BoneMap rightUpperArm;

		[Token(Token = "0x40005C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private BoneMap leftThigh;

		[Token(Token = "0x40005C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private BoneMap rightThigh;

		[Token(Token = "0x40005C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool useFABRIK;

		[Token(Token = "0x6000795")]
		[Address(RVA = "0xC52034", Offset = "0xC52034", VA = "0xC52034", Slot = "4")]
		public override bool IsValid(IKSolver solver, ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000796")]
		[Address(RVA = "0xC52354", Offset = "0xC52354", VA = "0xC52354")]
		public IKMappingSpine()
		{
		}

		[Token(Token = "0x6000797")]
		[Address(RVA = "0xC52490", Offset = "0xC52490", VA = "0xC52490")]
		public IKMappingSpine(Transform[] spineBones, Transform leftUpperArmBone, Transform rightUpperArmBone, Transform leftThighBone, Transform rightThighBone)
		{
		}

		[Token(Token = "0x6000798")]
		[Address(RVA = "0xC52600", Offset = "0xC52600", VA = "0xC52600")]
		public void SetBones(Transform[] spineBones, Transform leftUpperArmBone, Transform rightUpperArmBone, Transform leftThighBone, Transform rightThighBone)
		{
		}

		[Token(Token = "0x6000799")]
		[Address(RVA = "0xC52610", Offset = "0xC52610", VA = "0xC52610")]
		public void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x600079A")]
		[Address(RVA = "0xC5266C", Offset = "0xC5266C", VA = "0xC5266C")]
		public void FixTransforms()
		{
		}

		[Token(Token = "0x600079B")]
		[Address(RVA = "0xC526E4", Offset = "0xC526E4", VA = "0xC526E4", Slot = "5")]
		public override void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x600079C")]
		[Address(RVA = "0xC52CF8", Offset = "0xC52CF8", VA = "0xC52CF8")]
		private bool UseFABRIK()
		{
			return default(bool);
		}

		[Token(Token = "0x600079D")]
		[Address(RVA = "0xC52D30", Offset = "0xC52D30", VA = "0xC52D30")]
		public void ReadPose()
		{
		}

		[Token(Token = "0x600079E")]
		[Address(RVA = "0xC52F94", Offset = "0xC52F94", VA = "0xC52F94")]
		public void WritePose(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x600079F")]
		[Address(RVA = "0xC532BC", Offset = "0xC532BC", VA = "0xC532BC")]
		public void ForwardReach(UnityEngine.Vector3 position)
		{
		}

		[Token(Token = "0x60007A0")]
		[Address(RVA = "0xC5339C", Offset = "0xC5339C", VA = "0xC5339C")]
		private void BackwardReach(UnityEngine.Vector3 position)
		{
		}

		[Token(Token = "0x60007A1")]
		[Address(RVA = "0xC53450", Offset = "0xC53450", VA = "0xC53450")]
		private void MapToSolverPositions(IKSolverFullBody solver)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000D2")]
	public abstract class IKSolver
	{
		[Serializable]
		[Token(Token = "0x20000D3")]
		public class Point
		{
			[Token(Token = "0x40005CE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform transform;

			[Token(Token = "0x40005CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Range(0f, 1f)]
			public float weight;

			[Token(Token = "0x40005D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public UnityEngine.Vector3 solverPosition;

			[Token(Token = "0x40005D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Quaternion solverRotation;

			[Token(Token = "0x40005D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public UnityEngine.Vector3 defaultLocalPosition;

			[Token(Token = "0x40005D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			public Quaternion defaultLocalRotation;

			[Token(Token = "0x60007B8")]
			[Address(RVA = "0xC53D28", Offset = "0xC53D28", VA = "0xC53D28")]
			public void StoreDefaultLocalState()
			{
			}

			[Token(Token = "0x60007B9")]
			[Address(RVA = "0xC53D6C", Offset = "0xC53D6C", VA = "0xC53D6C")]
			public void FixTransform()
			{
			}

			[Token(Token = "0x60007BA")]
			[Address(RVA = "0xC53E4C", Offset = "0xC53E4C", VA = "0xC53E4C")]
			public void UpdateSolverPosition()
			{
			}

			[Token(Token = "0x60007BB")]
			[Address(RVA = "0xC53E78", Offset = "0xC53E78", VA = "0xC53E78")]
			public void UpdateSolverLocalPosition()
			{
			}

			[Token(Token = "0x60007BC")]
			[Address(RVA = "0xC53EA4", Offset = "0xC53EA4", VA = "0xC53EA4")]
			public void UpdateSolverState()
			{
			}

			[Token(Token = "0x60007BD")]
			[Address(RVA = "0xC53EE8", Offset = "0xC53EE8", VA = "0xC53EE8")]
			public void UpdateSolverLocalState()
			{
			}

			[Token(Token = "0x60007BE")]
			[Address(RVA = "0xC53F2C", Offset = "0xC53F2C", VA = "0xC53F2C")]
			public Point()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000D4")]
		public class Bone : Point
		{
			[Token(Token = "0x40005D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public float length;

			[Token(Token = "0x40005D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public float sqrMag;

			[Token(Token = "0x40005D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public UnityEngine.Vector3 axis;

			[Token(Token = "0x40005D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			private RotationLimit _rotationLimit;

			[Token(Token = "0x40005D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			private bool isLimited;

			[Token(Token = "0x170000FA")]
			public RotationLimit rotationLimit
			{
				[Token(Token = "0x60007BF")]
				[Address(RVA = "0xC53F8C", Offset = "0xC53F8C", VA = "0xC53F8C")]
				get
				{
					return null;
				}
				[Token(Token = "0x60007C0")]
				[Address(RVA = "0xC5406C", Offset = "0xC5406C", VA = "0xC5406C")]
				set
				{
				}
			}

			[Token(Token = "0x60007C1")]
			[Address(RVA = "0xC540E4", Offset = "0xC540E4", VA = "0xC540E4")]
			public void Swing(UnityEngine.Vector3 swingTarget, float weight = 1f)
			{
			}

			[Token(Token = "0x60007C2")]
			[Address(RVA = "0xC54350", Offset = "0xC54350", VA = "0xC54350")]
			public static void SolverSwing(Bone[] bones, int index, UnityEngine.Vector3 swingTarget, float weight = 1f)
			{
			}

			[Token(Token = "0x60007C3")]
			[Address(RVA = "0xC5460C", Offset = "0xC5460C", VA = "0xC5460C")]
			public void Swing2D(UnityEngine.Vector3 swingTarget, float weight = 1f)
			{
			}

			[Token(Token = "0x60007C4")]
			[Address(RVA = "0xC54800", Offset = "0xC54800", VA = "0xC54800")]
			public void SetToSolverPosition()
			{
			}

			[Token(Token = "0x60007C5")]
			[Address(RVA = "0xC54828", Offset = "0xC54828", VA = "0xC54828")]
			public Bone()
			{
			}

			[Token(Token = "0x60007C6")]
			[Address(RVA = "0xC54894", Offset = "0xC54894", VA = "0xC54894")]
			public Bone(Transform transform)
			{
			}

			[Token(Token = "0x60007C7")]
			[Address(RVA = "0xC5490C", Offset = "0xC5490C", VA = "0xC5490C")]
			public Bone(Transform transform, float weight)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000D5")]
		public class Node : Point
		{
			[Token(Token = "0x40005D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public float length;

			[Token(Token = "0x40005DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public float effectorPositionWeight;

			[Token(Token = "0x40005DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public float effectorRotationWeight;

			[Token(Token = "0x40005DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public UnityEngine.Vector3 offset;

			[Token(Token = "0x60007C8")]
			[Address(RVA = "0xC54994", Offset = "0xC54994", VA = "0xC54994")]
			public Node()
			{
			}

			[Token(Token = "0x60007C9")]
			[Address(RVA = "0xC4AFFC", Offset = "0xC4AFFC", VA = "0xC4AFFC")]
			public Node(Transform transform)
			{
			}

			[Token(Token = "0x60007CA")]
			[Address(RVA = "0xC54998", Offset = "0xC54998", VA = "0xC54998")]
			public Node(Transform transform, float weight)
			{
			}
		}

		[Token(Token = "0x20000D6")]
		public delegate void UpdateDelegate();

		[Token(Token = "0x20000D7")]
		public delegate void IterationDelegate(int i);

		[Token(Token = "0x40005C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[HideInInspector]
		public bool executedInEditor;

		[Token(Token = "0x40005C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[HideInInspector]
		public UnityEngine.Vector3 IKPosition;

		[Token(Token = "0x40005C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 1f)]
		[Tooltip("The positional or the master weight of the solver.")]
		public float IKPositionWeight;

		[Token(Token = "0x40005C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UpdateDelegate OnPreInitiate;

		[Token(Token = "0x40005C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UpdateDelegate OnPostInitiate;

		[Token(Token = "0x40005CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UpdateDelegate OnPreUpdate;

		[Token(Token = "0x40005CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public UpdateDelegate OnPostUpdate;

		[Token(Token = "0x40005CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected bool firstInitiation;

		[Token(Token = "0x40005CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		[HideInInspector]
		protected Transform root;

		[Token(Token = "0x170000F9")]
		public bool initiated
		{
			[Token(Token = "0x60007AB")]
			[Address(RVA = "0xC53934", Offset = "0xC53934", VA = "0xC53934")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60007AC")]
			[Address(RVA = "0xC5393C", Offset = "0xC5393C", VA = "0xC5393C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60007A2")]
		[Address(RVA = "0xC53694", Offset = "0xC53694", VA = "0xC53694")]
		public bool IsValid()
		{
			return default(bool);
		}

		[Token(Token = "0x60007A3")]
		public abstract bool IsValid(ref string message);

		[Token(Token = "0x60007A4")]
		[Address(RVA = "0xC53708", Offset = "0xC53708", VA = "0xC53708")]
		public void Initiate(Transform root)
		{
		}

		[Token(Token = "0x60007A5")]
		[Address(RVA = "0xC53880", Offset = "0xC53880", VA = "0xC53880")]
		public void Update()
		{
		}

		[Token(Token = "0x60007A6")]
		[Address(RVA = "0xC538F0", Offset = "0xC538F0", VA = "0xC538F0", Slot = "5")]
		public virtual UnityEngine.Vector3 GetIKPosition()
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x60007A7")]
		[Address(RVA = "0xC538FC", Offset = "0xC538FC", VA = "0xC538FC")]
		public void SetIKPosition(UnityEngine.Vector3 position)
		{
		}

		[Token(Token = "0x60007A8")]
		[Address(RVA = "0xC53908", Offset = "0xC53908", VA = "0xC53908")]
		public float GetIKPositionWeight()
		{
			return default(float);
		}

		[Token(Token = "0x60007A9")]
		[Address(RVA = "0xC53910", Offset = "0xC53910", VA = "0xC53910")]
		public void SetIKPositionWeight(float weight)
		{
		}

		[Token(Token = "0x60007AA")]
		[Address(RVA = "0xC5392C", Offset = "0xC5392C", VA = "0xC5392C")]
		public Transform GetRoot()
		{
			return null;
		}

		[Token(Token = "0x60007AD")]
		public abstract Point[] GetPoints();

		[Token(Token = "0x60007AE")]
		public abstract Point GetPoint(Transform transform);

		[Token(Token = "0x60007AF")]
		public abstract void FixTransforms();

		[Token(Token = "0x60007B0")]
		public abstract void StoreDefaultLocalState();

		[Token(Token = "0x60007B1")]
		protected abstract void OnInitiate();

		[Token(Token = "0x60007B2")]
		protected abstract void OnUpdate();

		[Token(Token = "0x60007B3")]
		[Address(RVA = "0xC53948", Offset = "0xC53948", VA = "0xC53948")]
		protected void LogWarning(string message)
		{
		}

		[Token(Token = "0x60007B4")]
		[Address(RVA = "0xC53960", Offset = "0xC53960", VA = "0xC53960")]
		public static Transform ContainsDuplicateBone(Bone[] bones)
		{
			return null;
		}

		[Token(Token = "0x60007B5")]
		[Address(RVA = "0xC53A84", Offset = "0xC53A84", VA = "0xC53A84")]
		public static bool HierarchyIsValid(Bone[] bones)
		{
			return default(bool);
		}

		[Token(Token = "0x60007B6")]
		[Address(RVA = "0xC53B1C", Offset = "0xC53B1C", VA = "0xC53B1C")]
		protected static float PreSolveBones(ref Bone[] bones)
		{
			return default(float);
		}

		[Token(Token = "0x60007B7")]
		[Address(RVA = "0xC53D10", Offset = "0xC53D10", VA = "0xC53D10")]
		protected IKSolver()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000D8")]
	public class IKSolverAim : IKSolverHeuristic
	{
		[Token(Token = "0x40005DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Transform transform;

		[Token(Token = "0x40005DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public UnityEngine.Vector3 axis;

		[Token(Token = "0x40005DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public UnityEngine.Vector3 poleAxis;

		[Token(Token = "0x40005E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public UnityEngine.Vector3 polePosition;

		[Token(Token = "0x40005E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[Range(0f, 1f)]
		public float poleWeight;

		[Token(Token = "0x40005E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Transform poleTarget;

		[Token(Token = "0x40005E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Range(0f, 1f)]
		public float clampWeight;

		[Token(Token = "0x40005E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[Range(0f, 2f)]
		public int clampSmoothing;

		[Token(Token = "0x40005E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public IterationDelegate OnPreIteration;

		[Token(Token = "0x40005E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private float step;

		[Token(Token = "0x40005E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private UnityEngine.Vector3 clampedIKPosition;

		[Token(Token = "0x40005E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private RotationLimit transformLimit;

		[Token(Token = "0x40005E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Transform lastTransform;

		[Token(Token = "0x170000FB")]
		public UnityEngine.Vector3 transformAxis
		{
			[Token(Token = "0x60007D4")]
			[Address(RVA = "0xC54BE8", Offset = "0xC54BE8", VA = "0xC54BE8")]
			get
			{
				return default(UnityEngine.Vector3);
			}
		}

		[Token(Token = "0x170000FC")]
		public UnityEngine.Vector3 transformPoleAxis
		{
			[Token(Token = "0x60007D5")]
			[Address(RVA = "0xC54C18", Offset = "0xC54C18", VA = "0xC54C18")]
			get
			{
				return default(UnityEngine.Vector3);
			}
		}

		[Token(Token = "0x170000FD")]
		protected override int minBones
		{
			[Token(Token = "0x60007D8")]
			[Address(RVA = "0xC5584C", Offset = "0xC5584C", VA = "0xC5584C", Slot = "12")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000FE")]
		protected override UnityEngine.Vector3 localDirection
		{
			[Token(Token = "0x60007DC")]
			[Address(RVA = "0xC55D8C", Offset = "0xC55D8C", VA = "0xC55D8C", Slot = "15")]
			get
			{
				return default(UnityEngine.Vector3);
			}
		}

		[Token(Token = "0x60007D3")]
		[Address(RVA = "0xC54AB0", Offset = "0xC54AB0", VA = "0xC54AB0")]
		public float GetAngle()
		{
			return default(float);
		}

		[Token(Token = "0x60007D6")]
		[Address(RVA = "0xC54C48", Offset = "0xC54C48", VA = "0xC54C48", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x60007D7")]
		[Address(RVA = "0xC54ED4", Offset = "0xC54ED4", VA = "0xC54ED4", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x60007D9")]
		[Address(RVA = "0xC557A4", Offset = "0xC557A4", VA = "0xC557A4")]
		private void Solve()
		{
		}

		[Token(Token = "0x60007DA")]
		[Address(RVA = "0xC55440", Offset = "0xC55440", VA = "0xC55440")]
		private UnityEngine.Vector3 GetClampedIKPosition()
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x60007DB")]
		[Address(RVA = "0xC55854", Offset = "0xC55854", VA = "0xC55854")]
		private void RotateToTarget(UnityEngine.Vector3 targetPosition, Bone bone, float weight)
		{
		}

		[Token(Token = "0x60007DD")]
		[Address(RVA = "0xC55DEC", Offset = "0xC55DEC", VA = "0xC55DEC")]
		public IKSolverAim()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000D9")]
	public class IKSolverArm : IKSolver
	{
		[Token(Token = "0x40005EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Range(0f, 1f)]
		public float IKRotationWeight;

		[Token(Token = "0x40005EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public Quaternion IKRotation;

		[Token(Token = "0x40005EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Point chest;

		[Token(Token = "0x40005ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Point shoulder;

		[Token(Token = "0x40005EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Point upperArm;

		[Token(Token = "0x40005EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Point forearm;

		[Token(Token = "0x40005F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Point hand;

		[Token(Token = "0x40005F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public bool isLeft;

		[Token(Token = "0x40005F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public IKSolverVR.Arm arm;

		[Token(Token = "0x40005F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private UnityEngine.Vector3[] positions;

		[Token(Token = "0x40005F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Quaternion[] rotations;

		[Token(Token = "0x60007DE")]
		[Address(RVA = "0xC55E90", Offset = "0xC55E90", VA = "0xC55E90", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x60007DF")]
		[Address(RVA = "0xC561EC", Offset = "0xC561EC", VA = "0xC561EC")]
		public bool SetChain(Transform chest, Transform shoulder, Transform upperArm, Transform forearm, Transform hand, Transform root)
		{
			return default(bool);
		}

		[Token(Token = "0x60007E0")]
		[Address(RVA = "0xC5624C", Offset = "0xC5624C", VA = "0xC5624C", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x60007E1")]
		[Address(RVA = "0xC56390", Offset = "0xC56390", VA = "0xC56390", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x60007E2")]
		[Address(RVA = "0xC564F0", Offset = "0xC564F0", VA = "0xC564F0", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x60007E3")]
		[Address(RVA = "0xC56530", Offset = "0xC56530", VA = "0xC56530", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x60007E4")]
		[Address(RVA = "0xC56580", Offset = "0xC56580", VA = "0xC56580", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x60007E5")]
		[Address(RVA = "0xC568E0", Offset = "0xC568E0", VA = "0xC568E0", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x60007E6")]
		[Address(RVA = "0xC56900", Offset = "0xC56900", VA = "0xC56900")]
		private void Solve()
		{
		}

		[Token(Token = "0x60007E7")]
		[Address(RVA = "0xC565D8", Offset = "0xC565D8", VA = "0xC565D8")]
		private void Read()
		{
		}

		[Token(Token = "0x60007E8")]
		[Address(RVA = "0xC56964", Offset = "0xC56964", VA = "0xC56964")]
		private void Write()
		{
		}

		[Token(Token = "0x60007E9")]
		[Address(RVA = "0xC56ADC", Offset = "0xC56ADC", VA = "0xC56ADC")]
		public IKSolverArm()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000DA")]
	public class IKSolverCCD : IKSolverHeuristic
	{
		[Token(Token = "0x40005F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public IterationDelegate OnPreIteration;

		[Token(Token = "0x60007EA")]
		[Address(RVA = "0xC56C70", Offset = "0xC56C70", VA = "0xC56C70")]
		public void FadeOutBoneWeights()
		{
		}

		[Token(Token = "0x60007EB")]
		[Address(RVA = "0xC56CE0", Offset = "0xC56CE0", VA = "0xC56CE0", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x60007EC")]
		[Address(RVA = "0xC56D50", Offset = "0xC56D50", VA = "0xC56D50", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x60007ED")]
		[Address(RVA = "0xC57004", Offset = "0xC57004", VA = "0xC57004")]
		protected void Solve(UnityEngine.Vector3 targetPosition)
		{
		}

		[Token(Token = "0x60007EE")]
		[Address(RVA = "0xC57694", Offset = "0xC57694", VA = "0xC57694")]
		public IKSolverCCD()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000DB")]
	public class IKSolverFABRIK : IKSolverHeuristic
	{
		[Token(Token = "0x40005F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public IterationDelegate OnPreIteration;

		[Token(Token = "0x40005F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool[] limitedBones;

		[Token(Token = "0x40005F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private UnityEngine.Vector3[] solverLocalPositions;

		[Token(Token = "0x170000FF")]
		protected override bool boneLengthCanBeZero
		{
			[Token(Token = "0x60007F4")]
			[Address(RVA = "0xC5863C", Offset = "0xC5863C", VA = "0xC5863C", Slot = "13")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60007EF")]
		[Address(RVA = "0xC5769C", Offset = "0xC5769C", VA = "0xC5769C")]
		public void SolveForward(UnityEngine.Vector3 position)
		{
		}

		[Token(Token = "0x60007F0")]
		[Address(RVA = "0xC57C7C", Offset = "0xC57C7C", VA = "0xC57C7C")]
		public void SolveBackward(UnityEngine.Vector3 position)
		{
		}

		[Token(Token = "0x60007F1")]
		[Address(RVA = "0xC57DAC", Offset = "0xC57DAC", VA = "0xC57DAC", Slot = "5")]
		public override UnityEngine.Vector3 GetIKPosition()
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x60007F2")]
		[Address(RVA = "0xC57E34", Offset = "0xC57E34", VA = "0xC57E34", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x60007F3")]
		[Address(RVA = "0xC58330", Offset = "0xC58330", VA = "0xC58330", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x60007F5")]
		[Address(RVA = "0xC58644", Offset = "0xC58644", VA = "0xC58644")]
		private UnityEngine.Vector3 SolveJoint(UnityEngine.Vector3 pos1, UnityEngine.Vector3 pos2, float length)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x60007F6")]
		[Address(RVA = "0xC57774", Offset = "0xC57774", VA = "0xC57774")]
		private void OnPreSolve()
		{
		}

		[Token(Token = "0x60007F7")]
		[Address(RVA = "0xC57D64", Offset = "0xC57D64", VA = "0xC57D64")]
		private void OnPostSolve()
		{
		}

		[Token(Token = "0x60007F8")]
		[Address(RVA = "0xC585F4", Offset = "0xC585F4", VA = "0xC585F4")]
		private void Solve(UnityEngine.Vector3 targetPosition)
		{
		}

		[Token(Token = "0x60007F9")]
		[Address(RVA = "0xC57B10", Offset = "0xC57B10", VA = "0xC57B10")]
		private void ForwardReach(UnityEngine.Vector3 position)
		{
		}

		[Token(Token = "0x60007FA")]
		[Address(RVA = "0xC58CF0", Offset = "0xC58CF0", VA = "0xC58CF0")]
		private void SolverMove(int index, UnityEngine.Vector3 offset)
		{
		}

		[Token(Token = "0x60007FB")]
		[Address(RVA = "0xC58D58", Offset = "0xC58D58", VA = "0xC58D58")]
		private void SolverRotate(int index, Quaternion rotation, bool recursive)
		{
		}

		[Token(Token = "0x60007FC")]
		[Address(RVA = "0xC58E28", Offset = "0xC58E28", VA = "0xC58E28")]
		private void SolverRotateChildren(int index, Quaternion rotation)
		{
		}

		[Token(Token = "0x60007FD")]
		[Address(RVA = "0xC58EF0", Offset = "0xC58EF0", VA = "0xC58EF0")]
		private void SolverMoveChildrenAroundPoint(int index, Quaternion rotation)
		{
		}

		[Token(Token = "0x60007FE")]
		[Address(RVA = "0xC580A8", Offset = "0xC580A8", VA = "0xC580A8")]
		private Quaternion GetParentSolverRotation(int index)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60007FF")]
		[Address(RVA = "0xC581EC", Offset = "0xC581EC", VA = "0xC581EC")]
		private UnityEngine.Vector3 GetParentSolverPosition(int index)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6000800")]
		[Address(RVA = "0xC58FE0", Offset = "0xC58FE0", VA = "0xC58FE0")]
		private Quaternion GetLimitedRotation(int index, Quaternion q, out bool changed)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000801")]
		[Address(RVA = "0xC588E0", Offset = "0xC588E0", VA = "0xC588E0")]
		private void LimitForward(int rotateBone, int limitBone)
		{
		}

		[Token(Token = "0x6000802")]
		[Address(RVA = "0xC57D54", Offset = "0xC57D54", VA = "0xC57D54")]
		private void BackwardReach(UnityEngine.Vector3 position)
		{
		}

		[Token(Token = "0x6000803")]
		[Address(RVA = "0xC59650", Offset = "0xC59650", VA = "0xC59650")]
		private void BackwardReachUnlimited(UnityEngine.Vector3 position)
		{
		}

		[Token(Token = "0x6000804")]
		[Address(RVA = "0xC591A0", Offset = "0xC591A0", VA = "0xC591A0")]
		private void BackwardReachLimited(UnityEngine.Vector3 position)
		{
		}

		[Token(Token = "0x6000805")]
		[Address(RVA = "0xC58760", Offset = "0xC58760", VA = "0xC58760")]
		private void MapToSolverPositions()
		{
		}

		[Token(Token = "0x6000806")]
		[Address(RVA = "0xC58830", Offset = "0xC58830", VA = "0xC58830")]
		private void MapToSolverPositionsLimited()
		{
		}

		[Token(Token = "0x6000807")]
		[Address(RVA = "0xC59708", Offset = "0xC59708", VA = "0xC59708")]
		public IKSolverFABRIK()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000DC")]
	public class IKSolverFABRIKRoot : IKSolver
	{
		[Token(Token = "0x40005F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public int iterations;

		[Token(Token = "0x40005FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Range(0f, 1f)]
		public float rootPin;

		[Token(Token = "0x40005FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public FABRIKChain[] chains;

		[Token(Token = "0x40005FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool zeroWeightApplied;

		[Token(Token = "0x40005FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool[] isRoot;

		[Token(Token = "0x40005FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private UnityEngine.Vector3 rootDefaultPosition;

		[Token(Token = "0x6000808")]
		[Address(RVA = "0xC5978C", Offset = "0xC5978C", VA = "0xC5978C", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000809")]
		[Address(RVA = "0xC59DE0", Offset = "0xC59DE0", VA = "0xC59DE0", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x600080A")]
		[Address(RVA = "0xC59E6C", Offset = "0xC59E6C", VA = "0xC59E6C", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x600080B")]
		[Address(RVA = "0xC59F00", Offset = "0xC59F00", VA = "0xC59F00", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x600080C")]
		[Address(RVA = "0xC59FE8", Offset = "0xC59FE8", VA = "0xC59FE8")]
		private bool IsRoot(int index)
		{
			return default(bool);
		}

		[Token(Token = "0x600080D")]
		[Address(RVA = "0xC5A078", Offset = "0xC5A078", VA = "0xC5A078", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x600080E")]
		[Address(RVA = "0xC5A478", Offset = "0xC5A478", VA = "0xC5A478", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x600080F")]
		[Address(RVA = "0xC5A650", Offset = "0xC5A650", VA = "0xC5A650", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x6000810")]
		[Address(RVA = "0xC5A518", Offset = "0xC5A518", VA = "0xC5A518")]
		private void AddPointsToArray(ref Point[] array, FABRIKChain chain)
		{
		}

		[Token(Token = "0x6000811")]
		[Address(RVA = "0xC5A250", Offset = "0xC5A250", VA = "0xC5A250")]
		private UnityEngine.Vector3 GetCentroid()
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6000812")]
		[Address(RVA = "0xC5A6D4", Offset = "0xC5A6D4", VA = "0xC5A6D4")]
		public IKSolverFABRIKRoot()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000DD")]
	public class IKSolverFullBody : IKSolver
	{
		[Token(Token = "0x40005FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Range(0f, 10f)]
		public int iterations;

		[Token(Token = "0x4000600")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public FBIKChain[] chain;

		[Token(Token = "0x4000601")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public IKEffector[] effectors;

		[Token(Token = "0x4000602")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public IKMappingSpine spineMapping;

		[Token(Token = "0x4000603")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public IKMappingBone[] boneMappings;

		[Token(Token = "0x4000604")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public IKMappingLimb[] limbMappings;

		[Token(Token = "0x4000605")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public bool FABRIKPass;

		[Token(Token = "0x4000606")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public UpdateDelegate OnPreRead;

		[Token(Token = "0x4000607")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public UpdateDelegate OnPreSolve;

		[Token(Token = "0x4000608")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public IterationDelegate OnPreIteration;

		[Token(Token = "0x4000609")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public IterationDelegate OnPostIteration;

		[Token(Token = "0x400060A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public UpdateDelegate OnPreBend;

		[Token(Token = "0x400060B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public UpdateDelegate OnPostSolve;

		[Token(Token = "0x400060C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public UpdateDelegate OnStoreDefaultLocalState;

		[Token(Token = "0x400060D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public UpdateDelegate OnFixTransforms;

		[Token(Token = "0x6000813")]
		[Address(RVA = "0xC5A734", Offset = "0xC5A734", VA = "0xC5A734")]
		public IKEffector GetEffector(Transform t)
		{
			return null;
		}

		[Token(Token = "0x6000814")]
		[Address(RVA = "0xC5A810", Offset = "0xC5A810", VA = "0xC5A810")]
		public FBIKChain GetChain(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x6000815")]
		[Address(RVA = "0xC5A858", Offset = "0xC5A858", VA = "0xC5A858")]
		public int GetChainIndex(Transform transform)
		{
			return default(int);
		}

		[Token(Token = "0x6000816")]
		[Address(RVA = "0xC5A96C", Offset = "0xC5A96C", VA = "0xC5A96C")]
		public Node GetNode(int chainIndex, int nodeIndex)
		{
			return null;
		}

		[Token(Token = "0x6000817")]
		[Address(RVA = "0xC5A9BC", Offset = "0xC5A9BC", VA = "0xC5A9BC")]
		public void GetChainAndNodeIndexes(Transform transform, out int chainIndex, out int nodeIndex)
		{
		}

		[Token(Token = "0x6000818")]
		[Address(RVA = "0xC5AA30", Offset = "0xC5AA30", VA = "0xC5AA30", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x6000819")]
		[Address(RVA = "0xC5ABC8", Offset = "0xC5ABC8", VA = "0xC5ABC8", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x600081A")]
		[Address(RVA = "0xC5AD24", Offset = "0xC5AD24", VA = "0xC5AD24", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x600081B")]
		[Address(RVA = "0xC5AF24", Offset = "0xC5AF24", VA = "0xC5AF24", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x600081C")]
		[Address(RVA = "0xC5AFF8", Offset = "0xC5AFF8", VA = "0xC5AFF8", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x600081D")]
		[Address(RVA = "0xC5B0E0", Offset = "0xC5B0E0", VA = "0xC5B0E0", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x600081E")]
		[Address(RVA = "0xC5B240", Offset = "0xC5B240", VA = "0xC5B240", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x600081F")]
		[Address(RVA = "0xC5B3DC", Offset = "0xC5B3DC", VA = "0xC5B3DC", Slot = "12")]
		protected virtual void ReadPose()
		{
		}

		[Token(Token = "0x6000820")]
		[Address(RVA = "0xC5B614", Offset = "0xC5B614", VA = "0xC5B614", Slot = "13")]
		protected virtual void Solve()
		{
		}

		[Token(Token = "0x6000821")]
		[Address(RVA = "0xC5B8F4", Offset = "0xC5B8F4", VA = "0xC5B8F4", Slot = "14")]
		protected virtual void ApplyBendConstraints()
		{
		}

		[Token(Token = "0x6000822")]
		[Address(RVA = "0xC5B92C", Offset = "0xC5B92C", VA = "0xC5B92C", Slot = "15")]
		protected virtual void WritePose()
		{
		}

		[Token(Token = "0x6000823")]
		[Address(RVA = "0xC5BA10", Offset = "0xC5BA10", VA = "0xC5BA10")]
		public IKSolverFullBody()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000DE")]
	public enum FullBodyBipedEffector
	{
		[Token(Token = "0x400060F")]
		Body,
		[Token(Token = "0x4000610")]
		LeftShoulder,
		[Token(Token = "0x4000611")]
		RightShoulder,
		[Token(Token = "0x4000612")]
		LeftThigh,
		[Token(Token = "0x4000613")]
		RightThigh,
		[Token(Token = "0x4000614")]
		LeftHand,
		[Token(Token = "0x4000615")]
		RightHand,
		[Token(Token = "0x4000616")]
		LeftFoot,
		[Token(Token = "0x4000617")]
		RightFoot
	}
	[Serializable]
	[Token(Token = "0x20000DF")]
	public enum FullBodyBipedChain
	{
		[Token(Token = "0x4000619")]
		LeftArm,
		[Token(Token = "0x400061A")]
		RightArm,
		[Token(Token = "0x400061B")]
		LeftLeg,
		[Token(Token = "0x400061C")]
		RightLeg
	}
	[Serializable]
	[Token(Token = "0x20000E0")]
	public class IKSolverFullBodyBiped : IKSolverFullBody
	{
		[Token(Token = "0x400061D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Transform rootNode;

		[Token(Token = "0x400061E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[Range(0f, 1f)]
		public float spineStiffness;

		[Token(Token = "0x400061F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[Range(-1f, 1f)]
		public float pullBodyVertical;

		[Token(Token = "0x4000620")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[Range(-1f, 1f)]
		public float pullBodyHorizontal;

		[Token(Token = "0x4000622")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private UnityEngine.Vector3 offset;

		[Token(Token = "0x17000100")]
		public IKEffector bodyEffector
		{
			[Token(Token = "0x6000824")]
			[Address(RVA = "0xC5BB20", Offset = "0xC5BB20", VA = "0xC5BB20")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000101")]
		public IKEffector leftShoulderEffector
		{
			[Token(Token = "0x6000825")]
			[Address(RVA = "0xC5BC60", Offset = "0xC5BC60", VA = "0xC5BC60")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000102")]
		public IKEffector rightShoulderEffector
		{
			[Token(Token = "0x6000826")]
			[Address(RVA = "0xC5BC68", Offset = "0xC5BC68", VA = "0xC5BC68")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000103")]
		public IKEffector leftThighEffector
		{
			[Token(Token = "0x6000827")]
			[Address(RVA = "0xC5BC70", Offset = "0xC5BC70", VA = "0xC5BC70")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000104")]
		public IKEffector rightThighEffector
		{
			[Token(Token = "0x6000828")]
			[Address(RVA = "0xC5BC78", Offset = "0xC5BC78", VA = "0xC5BC78")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000105")]
		public IKEffector leftHandEffector
		{
			[Token(Token = "0x6000829")]
			[Address(RVA = "0xC5BC80", Offset = "0xC5BC80", VA = "0xC5BC80")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000106")]
		public IKEffector rightHandEffector
		{
			[Token(Token = "0x600082A")]
			[Address(RVA = "0xC5BC88", Offset = "0xC5BC88", VA = "0xC5BC88")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000107")]
		public IKEffector leftFootEffector
		{
			[Token(Token = "0x600082B")]
			[Address(RVA = "0xC5BC90", Offset = "0xC5BC90", VA = "0xC5BC90")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000108")]
		public IKEffector rightFootEffector
		{
			[Token(Token = "0x600082C")]
			[Address(RVA = "0xC5BC98", Offset = "0xC5BC98", VA = "0xC5BC98")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000109")]
		public FBIKChain leftArmChain
		{
			[Token(Token = "0x600082D")]
			[Address(RVA = "0xC5BCA0", Offset = "0xC5BCA0", VA = "0xC5BCA0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700010A")]
		public FBIKChain rightArmChain
		{
			[Token(Token = "0x600082E")]
			[Address(RVA = "0xC5BCCC", Offset = "0xC5BCCC", VA = "0xC5BCCC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700010B")]
		public FBIKChain leftLegChain
		{
			[Token(Token = "0x600082F")]
			[Address(RVA = "0xC5BCF8", Offset = "0xC5BCF8", VA = "0xC5BCF8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700010C")]
		public FBIKChain rightLegChain
		{
			[Token(Token = "0x6000830")]
			[Address(RVA = "0xC5BD24", Offset = "0xC5BD24", VA = "0xC5BD24")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700010D")]
		public IKMappingLimb leftArmMapping
		{
			[Token(Token = "0x6000831")]
			[Address(RVA = "0xC5BD50", Offset = "0xC5BD50", VA = "0xC5BD50")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700010E")]
		public IKMappingLimb rightArmMapping
		{
			[Token(Token = "0x6000832")]
			[Address(RVA = "0xC5BD78", Offset = "0xC5BD78", VA = "0xC5BD78")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700010F")]
		public IKMappingLimb leftLegMapping
		{
			[Token(Token = "0x6000833")]
			[Address(RVA = "0xC5BDA4", Offset = "0xC5BDA4", VA = "0xC5BDA4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000110")]
		public IKMappingLimb rightLegMapping
		{
			[Token(Token = "0x6000834")]
			[Address(RVA = "0xC5BDD0", Offset = "0xC5BDD0", VA = "0xC5BDD0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000111")]
		public IKMappingBone headMapping
		{
			[Token(Token = "0x6000835")]
			[Address(RVA = "0xC5BDFC", Offset = "0xC5BDFC", VA = "0xC5BDFC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000112")]
		public UnityEngine.Vector3 pullBodyOffset
		{
			[Token(Token = "0x6000845")]
			[Address(RVA = "0xC5DBEC", Offset = "0xC5DBEC", VA = "0xC5DBEC")]
			[CompilerGenerated]
			get
			{
				return default(UnityEngine.Vector3);
			}
			[Token(Token = "0x6000846")]
			[Address(RVA = "0xC5DBF8", Offset = "0xC5DBF8", VA = "0xC5DBF8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000836")]
		[Address(RVA = "0xC5BE24", Offset = "0xC5BE24", VA = "0xC5BE24")]
		public void SetChainWeights(FullBodyBipedChain c, float pull, float reach = 0f)
		{
		}

		[Token(Token = "0x6000837")]
		[Address(RVA = "0xC5BF24", Offset = "0xC5BF24", VA = "0xC5BF24")]
		public void SetEffectorWeights(FullBodyBipedEffector effector, float positionWeight, float rotationWeight)
		{
		}

		[Token(Token = "0x6000838")]
		[Address(RVA = "0xC5BE74", Offset = "0xC5BE74", VA = "0xC5BE74")]
		public FBIKChain GetChain(FullBodyBipedChain c)
		{
			return null;
		}

		[Token(Token = "0x6000839")]
		[Address(RVA = "0xC5BF9C", Offset = "0xC5BF9C", VA = "0xC5BF9C")]
		public FBIKChain GetChain(FullBodyBipedEffector effector)
		{
			return null;
		}

		[Token(Token = "0x600083A")]
		[Address(RVA = "0xC5BB28", Offset = "0xC5BB28", VA = "0xC5BB28")]
		public IKEffector GetEffector(FullBodyBipedEffector effector)
		{
			return null;
		}

		[Token(Token = "0x600083B")]
		[Address(RVA = "0xC5C064", Offset = "0xC5C064", VA = "0xC5C064")]
		public IKEffector GetEndEffector(FullBodyBipedChain c)
		{
			return null;
		}

		[Token(Token = "0x600083C")]
		[Address(RVA = "0xC5C114", Offset = "0xC5C114", VA = "0xC5C114")]
		public IKMappingLimb GetLimbMapping(FullBodyBipedChain chain)
		{
			return null;
		}

		[Token(Token = "0x600083D")]
		[Address(RVA = "0xC5C1C0", Offset = "0xC5C1C0", VA = "0xC5C1C0")]
		public IKMappingLimb GetLimbMapping(FullBodyBipedEffector effector)
		{
			return null;
		}

		[Token(Token = "0x600083E")]
		[Address(RVA = "0xC5C26C", Offset = "0xC5C26C", VA = "0xC5C26C")]
		public IKMappingSpine GetSpineMapping()
		{
			return null;
		}

		[Token(Token = "0x600083F")]
		[Address(RVA = "0xC5C274", Offset = "0xC5C274", VA = "0xC5C274")]
		public IKMappingBone GetHeadMapping()
		{
			return null;
		}

		[Token(Token = "0x6000840")]
		[Address(RVA = "0xC5C29C", Offset = "0xC5C29C", VA = "0xC5C29C")]
		public IKConstraintBend GetBendConstraint(FullBodyBipedChain limb)
		{
			return null;
		}

		[Token(Token = "0x6000841")]
		[Address(RVA = "0xC5C35C", Offset = "0xC5C35C", VA = "0xC5C35C", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000842")]
		[Address(RVA = "0xC5C4EC", Offset = "0xC5C4EC", VA = "0xC5C4EC")]
		public void SetToReferences(BipedReferences references, [Optional] Transform rootNode)
		{
		}

		[Token(Token = "0x6000843")]
		[Address(RVA = "0xC5D4E4", Offset = "0xC5D4E4", VA = "0xC5D4E4")]
		public static Transform DetectRootNodeBone(BipedReferences references)
		{
			return null;
		}

		[Token(Token = "0x6000844")]
		[Address(RVA = "0xC5DA94", Offset = "0xC5DA94", VA = "0xC5DA94")]
		public void SetLimbOrientations(BipedLimbOrientations o)
		{
		}

		[Token(Token = "0x6000847")]
		[Address(RVA = "0xC5DAF0", Offset = "0xC5DAF0", VA = "0xC5DAF0")]
		private void SetLimbOrientation(FullBodyBipedChain chain, BipedLimbOrientations.LimbOrientation limbOrientation)
		{
		}

		[Token(Token = "0x6000848")]
		[Address(RVA = "0xC5D934", Offset = "0xC5D934", VA = "0xC5D934")]
		private static Transform GetLeftClavicle(BipedReferences references)
		{
			return null;
		}

		[Token(Token = "0x6000849")]
		[Address(RVA = "0xC5D9E4", Offset = "0xC5D9E4", VA = "0xC5D9E4")]
		private static Transform GetRightClavicle(BipedReferences references)
		{
			return null;
		}

		[Token(Token = "0x600084A")]
		[Address(RVA = "0xC5DC04", Offset = "0xC5DC04", VA = "0xC5DC04")]
		private static bool Contains(Transform[] array, Transform transform)
		{
			return default(bool);
		}

		[Token(Token = "0x600084B")]
		[Address(RVA = "0xC5DCC8", Offset = "0xC5DCC8", VA = "0xC5DCC8", Slot = "12")]
		protected override void ReadPose()
		{
		}

		[Token(Token = "0x600084C")]
		[Address(RVA = "0xC5DD98", Offset = "0xC5DD98", VA = "0xC5DD98")]
		private void PullBody()
		{
		}

		[Token(Token = "0x600084D")]
		[Address(RVA = "0xC5DEB4", Offset = "0xC5DEB4", VA = "0xC5DEB4")]
		private UnityEngine.Vector3 GetBodyOffset()
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x600084E")]
		[Address(RVA = "0xC5E044", Offset = "0xC5E044", VA = "0xC5E044")]
		private UnityEngine.Vector3 GetHandBodyPull(IKEffector effector, FBIKChain arm, UnityEngine.Vector3 offset)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x600084F")]
		[Address(RVA = "0xC5E1BC", Offset = "0xC5E1BC", VA = "0xC5E1BC", Slot = "14")]
		protected override void ApplyBendConstraints()
		{
		}

		[Token(Token = "0x6000850")]
		[Address(RVA = "0xC5E41C", Offset = "0xC5E41C", VA = "0xC5E41C", Slot = "15")]
		protected override void WritePose()
		{
		}

		[Token(Token = "0x6000851")]
		[Address(RVA = "0xC5E494", Offset = "0xC5E494", VA = "0xC5E494")]
		public IKSolverFullBodyBiped()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000E1")]
	public class IKSolverHeuristic : IKSolver
	{
		[Token(Token = "0x4000623")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform target;

		[Token(Token = "0x4000624")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float tolerance;

		[Token(Token = "0x4000625")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public int maxIterations;

		[Token(Token = "0x4000626")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool useRotationLimits;

		[Token(Token = "0x4000627")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		public bool XY;

		[Token(Token = "0x4000628")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Bone[] bones;

		[Token(Token = "0x4000629")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected UnityEngine.Vector3 lastLocalDirection;

		[Token(Token = "0x400062A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		protected float chainLength;

		[Token(Token = "0x17000113")]
		protected virtual int minBones
		{
			[Token(Token = "0x6000859")]
			[Address(RVA = "0xC5ECD4", Offset = "0xC5ECD4", VA = "0xC5ECD4", Slot = "12")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000114")]
		protected virtual bool boneLengthCanBeZero
		{
			[Token(Token = "0x600085A")]
			[Address(RVA = "0xC5ECDC", Offset = "0xC5ECDC", VA = "0xC5ECDC", Slot = "13")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000115")]
		protected virtual bool allowCommonParent
		{
			[Token(Token = "0x600085B")]
			[Address(RVA = "0xC5ECE4", Offset = "0xC5ECE4", VA = "0xC5ECE4", Slot = "14")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000116")]
		protected virtual UnityEngine.Vector3 localDirection
		{
			[Token(Token = "0x600085F")]
			[Address(RVA = "0xC5F188", Offset = "0xC5F188", VA = "0xC5F188", Slot = "15")]
			get
			{
				return default(UnityEngine.Vector3);
			}
		}

		[Token(Token = "0x17000117")]
		protected float positionOffset
		{
			[Token(Token = "0x6000860")]
			[Address(RVA = "0xC5F244", Offset = "0xC5F244", VA = "0xC5F244")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000852")]
		[Address(RVA = "0xC5E4A0", Offset = "0xC5E4A0", VA = "0xC5E4A0")]
		public bool SetChain(Transform[] hierarchy, Transform root)
		{
			return default(bool);
		}

		[Token(Token = "0x6000853")]
		[Address(RVA = "0xC5E624", Offset = "0xC5E624", VA = "0xC5E624")]
		public void AddBone(Transform bone)
		{
		}

		[Token(Token = "0x6000854")]
		[Address(RVA = "0xC5E750", Offset = "0xC5E750", VA = "0xC5E750", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6000855")]
		[Address(RVA = "0xC5E7B0", Offset = "0xC5E7B0", VA = "0xC5E7B0", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x6000856")]
		[Address(RVA = "0xC5E824", Offset = "0xC5E824", VA = "0xC5E824", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000857")]
		[Address(RVA = "0xC5EBF0", Offset = "0xC5EBF0", VA = "0xC5EBF0", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x6000858")]
		[Address(RVA = "0xC5EBF8", Offset = "0xC5EBF8", VA = "0xC5EBF8", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x600085C")]
		[Address(RVA = "0xC5ECEC", Offset = "0xC5ECEC", VA = "0xC5ECEC", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x600085D")]
		[Address(RVA = "0xC5ECF0", Offset = "0xC5ECF0", VA = "0xC5ECF0", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x600085E")]
		[Address(RVA = "0xC5ECF4", Offset = "0xC5ECF4", VA = "0xC5ECF4")]
		protected void InitiateBones()
		{
		}

		[Token(Token = "0x6000861")]
		[Address(RVA = "0xC5F28C", Offset = "0xC5F28C", VA = "0xC5F28C")]
		protected UnityEngine.Vector3 GetSingularityOffset()
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6000862")]
		[Address(RVA = "0xC5F644", Offset = "0xC5F644", VA = "0xC5F644")]
		private bool SingularityDetected()
		{
			return default(bool);
		}

		[Token(Token = "0x6000863")]
		[Address(RVA = "0xC5F8D8", Offset = "0xC5F8D8", VA = "0xC5F8D8")]
		public IKSolverHeuristic()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000E2")]
	public class IKSolverLeg : IKSolver
	{
		[Token(Token = "0x400062B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Range(0f, 1f)]
		public float IKRotationWeight;

		[Token(Token = "0x400062C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public Quaternion IKRotation;

		[Token(Token = "0x400062D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Point pelvis;

		[Token(Token = "0x400062E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Point thigh;

		[Token(Token = "0x400062F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Point calf;

		[Token(Token = "0x4000630")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Point foot;

		[Token(Token = "0x4000631")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Point toe;

		[Token(Token = "0x4000632")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public IKSolverVR.Leg leg;

		[Token(Token = "0x4000633")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public UnityEngine.Vector3 heelOffset;

		[Token(Token = "0x4000634")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private UnityEngine.Vector3[] positions;

		[Token(Token = "0x4000635")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Quaternion[] rotations;

		[Token(Token = "0x6000864")]
		[Address(RVA = "0xC5F940", Offset = "0xC5F940", VA = "0xC5F940", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000865")]
		[Address(RVA = "0xC5FC9C", Offset = "0xC5FC9C", VA = "0xC5FC9C")]
		public bool SetChain(Transform pelvis, Transform thigh, Transform calf, Transform foot, Transform toe, Transform root)
		{
			return default(bool);
		}

		[Token(Token = "0x6000866")]
		[Address(RVA = "0xC5FD00", Offset = "0xC5FD00", VA = "0xC5FD00", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x6000867")]
		[Address(RVA = "0xC5FE44", Offset = "0xC5FE44", VA = "0xC5FE44", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x6000868")]
		[Address(RVA = "0xC5FFA4", Offset = "0xC5FFA4", VA = "0xC5FFA4", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6000869")]
		[Address(RVA = "0xC5FFF4", Offset = "0xC5FFF4", VA = "0xC5FFF4", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x600086A")]
		[Address(RVA = "0xC60054", Offset = "0xC60054", VA = "0xC60054", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x600086B")]
		[Address(RVA = "0xC603B0", Offset = "0xC603B0", VA = "0xC603B0", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x600086C")]
		[Address(RVA = "0xC603D0", Offset = "0xC603D0", VA = "0xC603D0")]
		private void Solve()
		{
		}

		[Token(Token = "0x600086D")]
		[Address(RVA = "0xC600AC", Offset = "0xC600AC", VA = "0xC600AC")]
		private void Read()
		{
		}

		[Token(Token = "0x600086E")]
		[Address(RVA = "0xC6045C", Offset = "0xC6045C", VA = "0xC6045C")]
		private void Write()
		{
		}

		[Token(Token = "0x600086F")]
		[Address(RVA = "0xC60694", Offset = "0xC60694", VA = "0xC60694")]
		public IKSolverLeg()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000E3")]
	public class IKSolverLimb : IKSolverTrigonometric
	{
		[Serializable]
		[Token(Token = "0x20000E4")]
		public enum BendModifier
		{
			[Token(Token = "0x4000647")]
			Animation,
			[Token(Token = "0x4000648")]
			Target,
			[Token(Token = "0x4000649")]
			Parent,
			[Token(Token = "0x400064A")]
			Arm,
			[Token(Token = "0x400064B")]
			Goal
		}

		[Serializable]
		[Token(Token = "0x20000E5")]
		public struct AxisDirection
		{
			[Token(Token = "0x400064C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UnityEngine.Vector3 direction;

			[Token(Token = "0x400064D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public UnityEngine.Vector3 axis;

			[Token(Token = "0x400064E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float dot;

			[Token(Token = "0x600087A")]
			[Address(RVA = "0xC61C18", Offset = "0xC61C18", VA = "0xC61C18")]
			public AxisDirection(UnityEngine.Vector3 direction, UnityEngine.Vector3 axis)
			{
			}
		}

		[Token(Token = "0x4000636")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public AvatarIKGoal goal;

		[Token(Token = "0x4000637")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public BendModifier bendModifier;

		[Token(Token = "0x4000638")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Range(0f, 1f)]
		public float maintainRotationWeight;

		[Token(Token = "0x4000639")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[Range(0f, 1f)]
		public float bendModifierWeight;

		[Token(Token = "0x400063A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Transform bendGoal;

		[Token(Token = "0x400063B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private bool maintainBendFor1Frame;

		[Token(Token = "0x400063C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC1")]
		private bool maintainRotationFor1Frame;

		[Token(Token = "0x400063D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private Quaternion defaultRootRotation;

		[Token(Token = "0x400063E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private Quaternion parentDefaultRotation;

		[Token(Token = "0x400063F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private Quaternion bone3RotationBeforeSolve;

		[Token(Token = "0x4000640")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private Quaternion maintainRotation;

		[Token(Token = "0x4000641")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		private Quaternion bone3DefaultRotation;

		[Token(Token = "0x4000642")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		private UnityEngine.Vector3 _bendNormal;

		[Token(Token = "0x4000643")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private UnityEngine.Vector3 animationNormal;

		[Token(Token = "0x4000644")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private AxisDirection[] axisDirectionsLeft;

		[Token(Token = "0x4000645")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private AxisDirection[] axisDirectionsRight;

		[Token(Token = "0x17000118")]
		private AxisDirection[] axisDirections
		{
			[Token(Token = "0x6000877")]
			[Address(RVA = "0xC61BFC", Offset = "0xC61BFC", VA = "0xC61BFC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000870")]
		[Address(RVA = "0xC6082C", Offset = "0xC6082C", VA = "0xC6082C")]
		public void MaintainRotation()
		{
		}

		[Token(Token = "0x6000871")]
		[Address(RVA = "0xC60870", Offset = "0xC60870", VA = "0xC60870")]
		public void MaintainBend()
		{
		}

		[Token(Token = "0x6000872")]
		[Address(RVA = "0xC608DC", Offset = "0xC608DC", VA = "0xC608DC", Slot = "12")]
		protected override void OnInitiateVirtual()
		{
		}

		[Token(Token = "0x6000873")]
		[Address(RVA = "0xC60E24", Offset = "0xC60E24", VA = "0xC60E24", Slot = "13")]
		protected override void OnUpdateVirtual()
		{
		}

		[Token(Token = "0x6000874")]
		[Address(RVA = "0xC61940", Offset = "0xC61940", VA = "0xC61940", Slot = "14")]
		protected override void OnPostSolveVirtual()
		{
		}

		[Token(Token = "0x6000875")]
		[Address(RVA = "0xC619E8", Offset = "0xC619E8", VA = "0xC619E8")]
		public IKSolverLimb()
		{
		}

		[Token(Token = "0x6000876")]
		[Address(RVA = "0xC61B7C", Offset = "0xC61B7C", VA = "0xC61B7C")]
		public IKSolverLimb(AvatarIKGoal goal)
		{
		}

		[Token(Token = "0x6000878")]
		[Address(RVA = "0xC60C38", Offset = "0xC60C38", VA = "0xC60C38")]
		private void StoreAxisDirections(ref AxisDirection[] axisDirections)
		{
		}

		[Token(Token = "0x6000879")]
		[Address(RVA = "0xC60EE0", Offset = "0xC60EE0", VA = "0xC60EE0")]
		private UnityEngine.Vector3 GetModifiedBendNormal()
		{
			return default(UnityEngine.Vector3);
		}
	}
	[Serializable]
	[Token(Token = "0x20000E6")]
	public class IKSolverLookAt : IKSolver
	{
		[Serializable]
		[Token(Token = "0x20000E7")]
		public class LookAtBone : Bone
		{
			[Token(Token = "0x4000660")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			public UnityEngine.Vector3 baseForwardOffsetEuler;

			[Token(Token = "0x1700011F")]
			public UnityEngine.Vector3 forward
			{
				[Token(Token = "0x600089A")]
				[Address(RVA = "0xC639E4", Offset = "0xC639E4", VA = "0xC639E4")]
				get
				{
					return default(UnityEngine.Vector3);
				}
			}

			[Token(Token = "0x6000896")]
			[Address(RVA = "0xC6403C", Offset = "0xC6403C", VA = "0xC6403C")]
			public LookAtBone()
			{
			}

			[Token(Token = "0x6000897")]
			[Address(RVA = "0xC62B44", Offset = "0xC62B44", VA = "0xC62B44")]
			public LookAtBone(Transform transform)
			{
			}

			[Token(Token = "0x6000898")]
			[Address(RVA = "0xC62DF4", Offset = "0xC62DF4", VA = "0xC62DF4")]
			public void Initiate(Transform root)
			{
			}

			[Token(Token = "0x6000899")]
			[Address(RVA = "0xC63D2C", Offset = "0xC63D2C", VA = "0xC63D2C")]
			public void LookAt(UnityEngine.Vector3 direction, float weight)
			{
			}
		}

		[Token(Token = "0x400064F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform target;

		[Token(Token = "0x4000650")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public LookAtBone[] spine;

		[Token(Token = "0x4000651")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public LookAtBone head;

		[Token(Token = "0x4000652")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public LookAtBone[] eyes;

		[Token(Token = "0x4000653")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Range(0f, 1f)]
		public float bodyWeight;

		[Token(Token = "0x4000654")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[Range(0f, 1f)]
		public float headWeight;

		[Token(Token = "0x4000655")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Range(0f, 1f)]
		public float eyesWeight;

		[Token(Token = "0x4000656")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[Range(0f, 1f)]
		public float clampWeight;

		[Token(Token = "0x4000657")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Range(0f, 1f)]
		public float clampWeightHead;

		[Token(Token = "0x4000658")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[Range(0f, 1f)]
		public float clampWeightEyes;

		[Token(Token = "0x4000659")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Range(0f, 2f)]
		public int clampSmoothing;

		[Token(Token = "0x400065A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public AnimationCurve spineWeightCurve;

		[Token(Token = "0x400065B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public UnityEngine.Vector3 spineTargetOffset;

		[Token(Token = "0x400065C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected UnityEngine.Vector3[] spineForwards;

		[Token(Token = "0x400065D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		protected UnityEngine.Vector3[] headForwards;

		[Token(Token = "0x400065E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected UnityEngine.Vector3[] eyeForward;

		[Token(Token = "0x400065F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private bool isDirty;

		[Token(Token = "0x17000119")]
		protected bool spineIsValid
		{
			[Token(Token = "0x600088A")]
			[Address(RVA = "0xC62348", Offset = "0xC62348", VA = "0xC62348")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700011A")]
		protected bool spineIsEmpty
		{
			[Token(Token = "0x600088B")]
			[Address(RVA = "0xC624F0", Offset = "0xC624F0", VA = "0xC624F0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700011B")]
		protected bool headIsValid
		{
			[Token(Token = "0x600088D")]
			[Address(RVA = "0xC62414", Offset = "0xC62414", VA = "0xC62414")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700011C")]
		protected bool headIsEmpty
		{
			[Token(Token = "0x600088E")]
			[Address(RVA = "0xC62514", Offset = "0xC62514", VA = "0xC62514")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700011D")]
		protected bool eyesIsValid
		{
			[Token(Token = "0x6000890")]
			[Address(RVA = "0xC62424", Offset = "0xC62424", VA = "0xC62424")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700011E")]
		protected bool eyesIsEmpty
		{
			[Token(Token = "0x6000891")]
			[Address(RVA = "0xC62580", Offset = "0xC62580", VA = "0xC62580")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600087B")]
		[Address(RVA = "0xC61DB4", Offset = "0xC61DB4", VA = "0xC61DB4")]
		public void SetLookAtWeight(float weight)
		{
		}

		[Token(Token = "0x600087C")]
		[Address(RVA = "0xC61DD0", Offset = "0xC61DD0", VA = "0xC61DD0")]
		public void SetLookAtWeight(float weight, float bodyWeight)
		{
		}

		[Token(Token = "0x600087D")]
		[Address(RVA = "0xC61DFC", Offset = "0xC61DFC", VA = "0xC61DFC")]
		public void SetLookAtWeight(float weight, float bodyWeight, float headWeight)
		{
		}

		[Token(Token = "0x600087E")]
		[Address(RVA = "0xC61E34", Offset = "0xC61E34", VA = "0xC61E34")]
		public void SetLookAtWeight(float weight, float bodyWeight, float headWeight, float eyesWeight)
		{
		}

		[Token(Token = "0x600087F")]
		[Address(RVA = "0xC61E7C", Offset = "0xC61E7C", VA = "0xC61E7C")]
		public void SetLookAtWeight(float weight, float bodyWeight, float headWeight, float eyesWeight, float clampWeight)
		{
		}

		[Token(Token = "0x6000880")]
		[Address(RVA = "0xC61ED4", Offset = "0xC61ED4", VA = "0xC61ED4")]
		public void SetLookAtWeight(float weight, float bodyWeight = 0f, float headWeight = 1f, float eyesWeight = 0.5f, float clampWeight = 0.5f, float clampWeightHead = 0.5f, float clampWeightEyes = 0.3f)
		{
		}

		[Token(Token = "0x6000881")]
		[Address(RVA = "0xC61F44", Offset = "0xC61F44", VA = "0xC61F44", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6000882")]
		[Address(RVA = "0xC6205C", Offset = "0xC6205C", VA = "0xC6205C")]
		public void SetDirty()
		{
		}

		[Token(Token = "0x6000883")]
		[Address(RVA = "0xC62068", Offset = "0xC62068", VA = "0xC62068", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x6000884")]
		[Address(RVA = "0xC62198", Offset = "0xC62198", VA = "0xC62198", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000885")]
		[Address(RVA = "0xC625A4", Offset = "0xC625A4", VA = "0xC625A4", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x6000886")]
		[Address(RVA = "0xC627C8", Offset = "0xC627C8", VA = "0xC627C8", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x6000887")]
		[Address(RVA = "0xC62928", Offset = "0xC62928", VA = "0xC62928")]
		public bool SetChain(Transform[] spine, Transform head, Transform[] eyes, Transform root)
		{
			return default(bool);
		}

		[Token(Token = "0x6000888")]
		[Address(RVA = "0xC62B6C", Offset = "0xC62B6C", VA = "0xC62B6C", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x6000889")]
		[Address(RVA = "0xC62EE0", Offset = "0xC62EE0", VA = "0xC62EE0", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x600088C")]
		[Address(RVA = "0xC62FA4", Offset = "0xC62FA4", VA = "0xC62FA4")]
		protected void SolveSpine()
		{
		}

		[Token(Token = "0x600088F")]
		[Address(RVA = "0xC631C0", Offset = "0xC631C0", VA = "0xC631C0")]
		protected void SolveHead()
		{
		}

		[Token(Token = "0x6000892")]
		[Address(RVA = "0xC63508", Offset = "0xC63508", VA = "0xC63508")]
		protected void SolveEyes()
		{
		}

		[Token(Token = "0x6000893")]
		[Address(RVA = "0xC63A14", Offset = "0xC63A14", VA = "0xC63A14")]
		protected UnityEngine.Vector3[] GetForwards(ref UnityEngine.Vector3[] forwards, UnityEngine.Vector3 baseForward, UnityEngine.Vector3 targetForward, int bones, float clamp)
		{
			return null;
		}

		[Token(Token = "0x6000894")]
		[Address(RVA = "0xC629D8", Offset = "0xC629D8", VA = "0xC629D8")]
		protected void SetBones(Transform[] array, ref LookAtBone[] bones)
		{
		}

		[Token(Token = "0x6000895")]
		[Address(RVA = "0xC63E34", Offset = "0xC63E34", VA = "0xC63E34")]
		public IKSolverLookAt()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000E8")]
	public class IKSolverTrigonometric : IKSolver
	{
		[Serializable]
		[Token(Token = "0x20000E9")]
		public class TrigonometricBone : Bone
		{
			[Token(Token = "0x400066A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			private Quaternion targetToLocalSpace;

			[Token(Token = "0x400066B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			private UnityEngine.Vector3 defaultLocalBendNormal;

			[Token(Token = "0x60008B2")]
			[Address(RVA = "0xC652E0", Offset = "0xC652E0", VA = "0xC652E0")]
			public void Initiate(UnityEngine.Vector3 childPosition, UnityEngine.Vector3 bendNormal)
			{
			}

			[Token(Token = "0x60008B3")]
			[Address(RVA = "0xC65B88", Offset = "0xC65B88", VA = "0xC65B88")]
			public Quaternion GetRotation(UnityEngine.Vector3 direction, UnityEngine.Vector3 bendNormal)
			{
				return default(Quaternion);
			}

			[Token(Token = "0x60008B4")]
			[Address(RVA = "0xC608AC", Offset = "0xC608AC", VA = "0xC608AC")]
			public UnityEngine.Vector3 GetBendNormalFromCurrentRotation()
			{
				return default(UnityEngine.Vector3);
			}

			[Token(Token = "0x60008B5")]
			[Address(RVA = "0xC65C24", Offset = "0xC65C24", VA = "0xC65C24")]
			public TrigonometricBone()
			{
			}
		}

		[Token(Token = "0x4000661")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform target;

		[Token(Token = "0x4000662")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Range(0f, 1f)]
		public float IKRotationWeight;

		[Token(Token = "0x4000663")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public Quaternion IKRotation;

		[Token(Token = "0x4000664")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public UnityEngine.Vector3 bendNormal;

		[Token(Token = "0x4000665")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public TrigonometricBone bone1;

		[Token(Token = "0x4000666")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public TrigonometricBone bone2;

		[Token(Token = "0x4000667")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public TrigonometricBone bone3;

		[Token(Token = "0x4000668")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected UnityEngine.Vector3 weightIKPosition;

		[Token(Token = "0x4000669")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		protected bool directHierarchy;

		[Token(Token = "0x600089B")]
		[Address(RVA = "0xC64044", Offset = "0xC64044", VA = "0xC64044")]
		public void SetBendGoalPosition(UnityEngine.Vector3 goalPosition, float weight)
		{
		}

		[Token(Token = "0x600089C")]
		[Address(RVA = "0xC641D8", Offset = "0xC641D8", VA = "0xC641D8")]
		public void SetBendPlaneToCurrent()
		{
		}

		[Token(Token = "0x600089D")]
		[Address(RVA = "0xC64358", Offset = "0xC64358", VA = "0xC64358")]
		public void SetIKRotation(Quaternion rotation)
		{
		}

		[Token(Token = "0x600089E")]
		[Address(RVA = "0xC64364", Offset = "0xC64364", VA = "0xC64364")]
		public void SetIKRotationWeight(float weight)
		{
		}

		[Token(Token = "0x600089F")]
		[Address(RVA = "0xC64380", Offset = "0xC64380", VA = "0xC64380")]
		public Quaternion GetIKRotation()
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60008A0")]
		[Address(RVA = "0xC6438C", Offset = "0xC6438C", VA = "0xC6438C")]
		public float GetIKRotationWeight()
		{
			return default(float);
		}

		[Token(Token = "0x60008A1")]
		[Address(RVA = "0xC64394", Offset = "0xC64394", VA = "0xC64394", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x60008A2")]
		[Address(RVA = "0xC64480", Offset = "0xC64480", VA = "0xC64480", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x60008A3")]
		[Address(RVA = "0xC64578", Offset = "0xC64578", VA = "0xC64578", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x60008A4")]
		[Address(RVA = "0xC645B8", Offset = "0xC645B8", VA = "0xC645B8", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x60008A5")]
		[Address(RVA = "0xC64608", Offset = "0xC64608", VA = "0xC64608", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x60008A6")]
		[Address(RVA = "0xC649AC", Offset = "0xC649AC", VA = "0xC649AC")]
		public bool SetChain(Transform bone1, Transform bone2, Transform bone3, Transform root)
		{
			return default(bool);
		}

		[Token(Token = "0x60008A7")]
		[Address(RVA = "0xC649F8", Offset = "0xC649F8", VA = "0xC649F8")]
		public static void Solve(Transform bone1, Transform bone2, Transform bone3, UnityEngine.Vector3 targetPosition, UnityEngine.Vector3 bendNormal, float weight)
		{
		}

		[Token(Token = "0x60008A8")]
		[Address(RVA = "0xC64EEC", Offset = "0xC64EEC", VA = "0xC64EEC")]
		private static UnityEngine.Vector3 GetDirectionToBendPoint(UnityEngine.Vector3 direction, float directionMag, UnityEngine.Vector3 bendDirection, float sqrMag1, float sqrMag2)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x60008A9")]
		[Address(RVA = "0xC65044", Offset = "0xC65044", VA = "0xC65044", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x60008AA")]
		[Address(RVA = "0xC651F0", Offset = "0xC651F0", VA = "0xC651F0")]
		private bool IsDirectHierarchy()
		{
			return default(bool);
		}

		[Token(Token = "0x60008AB")]
		[Address(RVA = "0xC65170", Offset = "0xC65170", VA = "0xC65170")]
		private void InitiateBones()
		{
		}

		[Token(Token = "0x60008AC")]
		[Address(RVA = "0xC653D0", Offset = "0xC653D0", VA = "0xC653D0", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x60008AD")]
		[Address(RVA = "0xC65C18", Offset = "0xC65C18", VA = "0xC65C18", Slot = "12")]
		protected virtual void OnInitiateVirtual()
		{
		}

		[Token(Token = "0x60008AE")]
		[Address(RVA = "0xC65C1C", Offset = "0xC65C1C", VA = "0xC65C1C", Slot = "13")]
		protected virtual void OnUpdateVirtual()
		{
		}

		[Token(Token = "0x60008AF")]
		[Address(RVA = "0xC65C20", Offset = "0xC65C20", VA = "0xC65C20", Slot = "14")]
		protected virtual void OnPostSolveVirtual()
		{
		}

		[Token(Token = "0x60008B0")]
		[Address(RVA = "0xC659C8", Offset = "0xC659C8", VA = "0xC659C8")]
		protected UnityEngine.Vector3 GetBendDirection(UnityEngine.Vector3 IKPosition, UnityEngine.Vector3 bendNormal)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x60008B1")]
		[Address(RVA = "0xC61A54", Offset = "0xC61A54", VA = "0xC61A54")]
		public IKSolverTrigonometric()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000EA")]
	public class IKSolverVR : IKSolver
	{
		[Serializable]
		[Token(Token = "0x20000EB")]
		public class Arm : BodyPart
		{
			[Serializable]
			[Token(Token = "0x20000EC")]
			public enum ShoulderRotationMode
			{
				[Token(Token = "0x40006A1")]
				YawPitch,
				[Token(Token = "0x40006A2")]
				FromTo
			}

			[Token(Token = "0x4000683")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[Tooltip("The hand target. This should not be the hand controller itself, but a child GameObject parented to it so you could adjust it's position/rotation to match the orientation of the hand bone. The best practice for setup would be to move the hand controller to the avatar's hand as it it was held by the avatar, duplicate the avatar's hand bone and parent it to the hand controller. Then assign the duplicate to this slot.")]
			public Transform target;

			[Token(Token = "0x4000684")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[Tooltip("The elbow will be bent towards this Transform if 'Bend Goal Weight' > 0.")]
			public Transform bendGoal;

			[Token(Token = "0x4000685")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[Tooltip("Positional weight of the hand target. Note that if you have nulled the target, the hand will still be pulled to the last position of the target until you set this value to 0.")]
			[Range(0f, 1f)]
			public float positionWeight;

			[Token(Token = "0x4000686")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			[Tooltip("Rotational weight of the hand target. Note that if you have nulled the target, the hand will still be rotated to the last rotation of the target until you set this value to 0.")]
			[Range(0f, 1f)]
			public float rotationWeight;

			[Token(Token = "0x4000687")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[Tooltip("Different techniques for shoulder bone rotation.")]
			public ShoulderRotationMode shoulderRotationMode;

			[Token(Token = "0x4000688")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			[Tooltip("The weight of shoulder rotation")]
			[Range(0f, 1f)]
			public float shoulderRotationWeight;

			[Token(Token = "0x4000689")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			[Range(0f, 1f)]
			[Tooltip("The weight of twisting the shoulders backwards when arms are lifted up.")]
			public float shoulderTwistWeight;

			[Token(Token = "0x400068A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			[Range(0f, 1f)]
			[Tooltip("If greater than 0, will bend the elbow towards the 'Bend Goal' Transform.")]
			public float bendGoalWeight;

			[Token(Token = "0x400068B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			[Range(-180f, 180f)]
			[Tooltip("Angular offset of the elbow bending direction.")]
			public float swivelOffset;

			[Token(Token = "0x400068C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			[Tooltip("Local axis of the hand bone that points from the wrist towards the palm. Used for defining hand bone orientation. If you have copied VRIK component from another avatar that has different bone orientations, right-click on VRIK header and select 'Guess Hand Orientations' from the context menu.")]
			public UnityEngine.Vector3 wristToPalmAxis;

			[Token(Token = "0x400068D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			[Tooltip("Local axis of the hand bone that points from the palm towards the thumb. Used for defining hand bone orientation. If you have copied VRIK component from another avatar that has different bone orientations, right-click on VRIK header and select 'Guess Hand Orientations' from the context menu.")]
			public UnityEngine.Vector3 palmToThumbAxis;

			[Token(Token = "0x400068E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
			[Range(0.01f, 2f)]
			[Tooltip("Use this to make the arm shorter/longer. Works by displacement of hand and forearm localPosition.")]
			public float armLengthMlp;

			[Token(Token = "0x400068F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			[Tooltip("Evaluates stretching of the arm by target distance relative to arm length. Value at time 1 represents stretching amount at the point where distance to the target is equal to arm length. Value at time 2 represents stretching amount at the point where distance to the target is double the arm length. Value represents the amount of stretching. Linear stretching would be achieved with a linear curve going up by 45 degrees. Increase the range of stretching by moving the last key up and right at the same amount. Smoothing in the curve can help reduce elbow snapping (start stretching the arm slightly before target distance reaches arm length). To get a good optimal value for this curve, please go to the 'VRIK (Basic)' demo scene and copy the stretch curve over from the Pilot character.")]
			public AnimationCurve stretchCurve;

			[NonSerialized]
			[Token(Token = "0x4000690")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			[HideInInspector]
			public UnityEngine.Vector3 IKPosition;

			[NonSerialized]
			[Token(Token = "0x4000691")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
			[HideInInspector]
			public Quaternion IKRotation;

			[NonSerialized]
			[Token(Token = "0x4000692")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
			[HideInInspector]
			public UnityEngine.Vector3 bendDirection;

			[NonSerialized]
			[Token(Token = "0x4000693")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			[HideInInspector]
			public UnityEngine.Vector3 handPositionOffset;

			[Token(Token = "0x4000696")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
			private bool hasShoulder;

			[Token(Token = "0x4000697")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
			private UnityEngine.Vector3 chestForwardAxis;

			[Token(Token = "0x4000698")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
			private UnityEngine.Vector3 chestUpAxis;

			[Token(Token = "0x4000699")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
			private Quaternion chestRotation;

			[Token(Token = "0x400069A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
			private UnityEngine.Vector3 chestForward;

			[Token(Token = "0x400069B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
			private UnityEngine.Vector3 chestUp;

			[Token(Token = "0x400069C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
			private Quaternion forearmRelToUpperArm;

			[Token(Token = "0x400069D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
			private UnityEngine.Vector3 upperArmBendAxis;

			[Token(Token = "0x400069E")]
			private const float yawOffsetAngle = 45f;

			[Token(Token = "0x400069F")]
			private const float pitchOffsetAngle = -30f;

			[Token(Token = "0x17000121")]
			public UnityEngine.Vector3 position
			{
				[Token(Token = "0x60008D1")]
				[Address(RVA = "0xC690E4", Offset = "0xC690E4", VA = "0xC690E4")]
				[CompilerGenerated]
				get
				{
					return default(UnityEngine.Vector3);
				}
				[Token(Token = "0x60008D2")]
				[Address(RVA = "0xC690F0", Offset = "0xC690F0", VA = "0xC690F0")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000122")]
			public Quaternion rotation
			{
				[Token(Token = "0x60008D3")]
				[Address(RVA = "0xC690FC", Offset = "0xC690FC", VA = "0xC690FC")]
				[CompilerGenerated]
				get
				{
					return default(Quaternion);
				}
				[Token(Token = "0x60008D4")]
				[Address(RVA = "0xC69108", Offset = "0xC69108", VA = "0xC69108")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000123")]
			private VirtualBone shoulder
			{
				[Token(Token = "0x60008D5")]
				[Address(RVA = "0xC69114", Offset = "0xC69114", VA = "0xC69114")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000124")]
			private VirtualBone upperArm
			{
				[Token(Token = "0x60008D6")]
				[Address(RVA = "0xC6913C", Offset = "0xC6913C", VA = "0xC6913C")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000125")]
			private VirtualBone forearm
			{
				[Token(Token = "0x60008D7")]
				[Address(RVA = "0xC69170", Offset = "0xC69170", VA = "0xC69170")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000126")]
			private VirtualBone hand
			{
				[Token(Token = "0x60008D8")]
				[Address(RVA = "0xC691B0", Offset = "0xC691B0", VA = "0xC691B0")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60008D9")]
			[Address(RVA = "0xC691F0", Offset = "0xC691F0", VA = "0xC691F0", Slot = "4")]
			protected override void OnRead(UnityEngine.Vector3[] positions, Quaternion[] rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs, int rootIndex, int index)
			{
			}

			[Token(Token = "0x60008DA")]
			[Address(RVA = "0xC69AF0", Offset = "0xC69AF0", VA = "0xC69AF0", Slot = "5")]
			public override void PreSolve()
			{
			}

			[Token(Token = "0x60008DB")]
			[Address(RVA = "0xC69D9C", Offset = "0xC69D9C", VA = "0xC69D9C", Slot = "7")]
			public override void ApplyOffsets(float scale)
			{
			}

			[Token(Token = "0x60008DC")]
			[Address(RVA = "0xC69DC0", Offset = "0xC69DC0", VA = "0xC69DC0")]
			private void Stretching()
			{
			}

			[Token(Token = "0x60008DD")]
			[Address(RVA = "0xC677EC", Offset = "0xC677EC", VA = "0xC677EC")]
			public void Solve(bool isLeft)
			{
			}

			[Token(Token = "0x60008DE")]
			[Address(RVA = "0xC6A7F4", Offset = "0xC6A7F4", VA = "0xC6A7F4", Slot = "8")]
			public override void ResetOffsets()
			{
			}

			[Token(Token = "0x60008DF")]
			[Address(RVA = "0xC6A84C", Offset = "0xC6A84C", VA = "0xC6A84C", Slot = "6")]
			public override void Write(ref UnityEngine.Vector3[] solvedPositions, ref Quaternion[] solvedRotations)
			{
			}

			[Token(Token = "0x60008E0")]
			[Address(RVA = "0xC6A110", Offset = "0xC6A110", VA = "0xC6A110")]
			private float DamperValue(float value, float min, float max, float weight = 1f)
			{
				return default(float);
			}

			[Token(Token = "0x60008E1")]
			[Address(RVA = "0xC6A190", Offset = "0xC6A190", VA = "0xC6A190")]
			private UnityEngine.Vector3 GetBendNormal(UnityEngine.Vector3 dir)
			{
				return default(UnityEngine.Vector3);
			}

			[Token(Token = "0x60008E2")]
			[Address(RVA = "0xC6AA58", Offset = "0xC6AA58", VA = "0xC6AA58")]
			private void Visualize(VirtualBone bone1, VirtualBone bone2, VirtualBone bone3, Color color)
			{
			}

			[Token(Token = "0x60008E3")]
			[Address(RVA = "0xC68F58", Offset = "0xC68F58", VA = "0xC68F58")]
			public Arm()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000ED")]
		public abstract class BodyPart
		{
			[Token(Token = "0x40006A5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[HideInInspector]
			public VirtualBone[] bones;

			[Token(Token = "0x40006A6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			protected bool initiated;

			[Token(Token = "0x40006A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			protected UnityEngine.Vector3 rootPosition;

			[Token(Token = "0x40006A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			protected Quaternion rootRotation;

			[Token(Token = "0x40006A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			protected int index;

			[Token(Token = "0x40006AA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			protected int LOD;

			[Token(Token = "0x17000127")]
			public float sqrMag
			{
				[Token(Token = "0x60008E9")]
				[Address(RVA = "0xC6AC08", Offset = "0xC6AC08", VA = "0xC6AC08")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x60008EA")]
				[Address(RVA = "0xC6AC10", Offset = "0xC6AC10", VA = "0xC6AC10")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000128")]
			public float mag
			{
				[Token(Token = "0x60008EB")]
				[Address(RVA = "0xC6AC18", Offset = "0xC6AC18", VA = "0xC6AC18")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x60008EC")]
				[Address(RVA = "0xC6AC20", Offset = "0xC6AC20", VA = "0xC6AC20")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x60008E4")]
			protected abstract void OnRead(UnityEngine.Vector3[] positions, Quaternion[] rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs, int rootIndex, int index);

			[Token(Token = "0x60008E5")]
			public abstract void PreSolve();

			[Token(Token = "0x60008E6")]
			public abstract void Write(ref UnityEngine.Vector3[] solvedPositions, ref Quaternion[] solvedRotations);

			[Token(Token = "0x60008E7")]
			public abstract void ApplyOffsets(float scale);

			[Token(Token = "0x60008E8")]
			public abstract void ResetOffsets();

			[Token(Token = "0x60008ED")]
			[Address(RVA = "0xC6AC28", Offset = "0xC6AC28", VA = "0xC6AC28")]
			public void SetLOD(int LOD)
			{
			}

			[Token(Token = "0x60008EE")]
			[Address(RVA = "0xC605D4", Offset = "0xC605D4", VA = "0xC605D4")]
			public void Read(UnityEngine.Vector3[] positions, Quaternion[] rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs, int rootIndex, int index)
			{
			}

			[Token(Token = "0x60008EF")]
			[Address(RVA = "0xC6AC30", Offset = "0xC6AC30", VA = "0xC6AC30")]
			public void MovePosition(UnityEngine.Vector3 position)
			{
			}

			[Token(Token = "0x60008F0")]
			[Address(RVA = "0xC6ACB8", Offset = "0xC6ACB8", VA = "0xC6ACB8")]
			public void MoveRotation(Quaternion rotation)
			{
			}

			[Token(Token = "0x60008F1")]
			[Address(RVA = "0xC6AD50", Offset = "0xC6AD50", VA = "0xC6AD50")]
			public void Translate(UnityEngine.Vector3 position, Quaternion rotation)
			{
			}

			[Token(Token = "0x60008F2")]
			[Address(RVA = "0xC6AD98", Offset = "0xC6AD98", VA = "0xC6AD98")]
			public void TranslateRoot(UnityEngine.Vector3 newRootPos, Quaternion newRootRot)
			{
			}

			[Token(Token = "0x60008F3")]
			[Address(RVA = "0xC6A68C", Offset = "0xC6A68C", VA = "0xC6A68C")]
			public void RotateTo(VirtualBone bone, Quaternion rotation, float weight = 1f)
			{
			}

			[Token(Token = "0x60008F4")]
			[Address(RVA = "0xC6AEC0", Offset = "0xC6AEC0", VA = "0xC6AEC0")]
			public void Visualize(Color color)
			{
			}

			[Token(Token = "0x60008F5")]
			[Address(RVA = "0xC6AFE4", Offset = "0xC6AFE4", VA = "0xC6AFE4")]
			public void Visualize()
			{
			}

			[Token(Token = "0x60008F6")]
			[Address(RVA = "0xC6AB70", Offset = "0xC6AB70", VA = "0xC6AB70")]
			protected BodyPart()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000EE")]
		public class Footstep
		{
			[Token(Token = "0x40006AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float stepSpeed;

			[Token(Token = "0x40006AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public UnityEngine.Vector3 characterSpaceOffset;

			[Token(Token = "0x40006AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public UnityEngine.Vector3 position;

			[Token(Token = "0x40006AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public Quaternion rotation;

			[Token(Token = "0x40006AF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public Quaternion stepToRootRot;

			[Token(Token = "0x40006B0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			public bool isSupportLeg;

			[Token(Token = "0x40006B1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
			public bool relaxFlag;

			[Token(Token = "0x40006B3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public UnityEngine.Vector3 stepFrom;

			[Token(Token = "0x40006B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public UnityEngine.Vector3 stepTo;

			[Token(Token = "0x40006B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			public Quaternion stepFromRot;

			[Token(Token = "0x40006B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			public Quaternion stepToRot;

			[Token(Token = "0x40006B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
			private Quaternion footRelativeToRoot;

			[Token(Token = "0x40006B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
			private float supportLegW;

			[Token(Token = "0x40006B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			private float supportLegWV;

			[Token(Token = "0x17000129")]
			public bool isStepping
			{
				[Token(Token = "0x60008F7")]
				[Address(RVA = "0xC6AFF8", Offset = "0xC6AFF8", VA = "0xC6AFF8")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x1700012A")]
			public float stepProgress
			{
				[Token(Token = "0x60008F8")]
				[Address(RVA = "0xC6B00C", Offset = "0xC6B00C", VA = "0xC6B00C")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x60008F9")]
				[Address(RVA = "0xC6B014", Offset = "0xC6B014", VA = "0xC6B014")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x60008FA")]
			[Address(RVA = "0xC6B01C", Offset = "0xC6B01C", VA = "0xC6B01C")]
			public Footstep(Quaternion rootRotation, UnityEngine.Vector3 footPosition, Quaternion footRotation, UnityEngine.Vector3 characterSpaceOffset)
			{
			}

			[Token(Token = "0x60008FB")]
			[Address(RVA = "0xC6B1E0", Offset = "0xC6B1E0", VA = "0xC6B1E0")]
			public void Reset(Quaternion rootRotation, UnityEngine.Vector3 footPosition, Quaternion footRotation)
			{
			}

			[Token(Token = "0x60008FC")]
			[Address(RVA = "0xC6B228", Offset = "0xC6B228", VA = "0xC6B228")]
			public void StepTo(UnityEngine.Vector3 p, Quaternion rootRotation, float stepThreshold)
			{
			}

			[Token(Token = "0x60008FD")]
			[Address(RVA = "0xC6B46C", Offset = "0xC6B46C", VA = "0xC6B46C")]
			public void UpdateStepping(UnityEngine.Vector3 p, Quaternion rootRotation, float speed)
			{
			}

			[Token(Token = "0x60008FE")]
			[Address(RVA = "0xC6B674", Offset = "0xC6B674", VA = "0xC6B674")]
			public void UpdateStanding(Quaternion rootRotation, float minAngle, float speed)
			{
			}

			[Token(Token = "0x60008FF")]
			[Address(RVA = "0xC6B858", Offset = "0xC6B858", VA = "0xC6B858")]
			public void Update(InterpolationMode interpolation, UnityEvent onStep)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000EF")]
		public class Leg : BodyPart
		{
			[Token(Token = "0x40006BA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[Tooltip("The foot/toe target. This should not be the foot tracker itself, but a child GameObject parented to it so you could adjust it's position/rotation to match the orientation of the foot/toe bone. If a toe bone is assigned in the References, the solver will match the toe bone to this target. If no toe bone assigned, foot bone will be used instead.")]
			public Transform target;

			[Token(Token = "0x40006BB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[Tooltip("The knee will be bent towards this Transform if 'Bend Goal Weight' > 0.")]
			public Transform bendGoal;

			[Token(Token = "0x40006BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[Range(0f, 1f)]
			[Tooltip("Positional weight of the toe/foot target. Note that if you have nulled the target, the foot will still be pulled to the last position of the target until you set this value to 0.")]
			public float positionWeight;

			[Token(Token = "0x40006BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			[Range(0f, 1f)]
			[Tooltip("Rotational weight of the toe/foot target. Note that if you have nulled the target, the foot will still be rotated to the last rotation of the target until you set this value to 0.")]
			public float rotationWeight;

			[Token(Token = "0x40006BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[Range(0f, 1f)]
			[Tooltip("If greater than 0, will bend the knee towards the 'Bend Goal' Transform.")]
			public float bendGoalWeight;

			[Token(Token = "0x40006BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			[Range(-180f, 180f)]
			[Tooltip("Angular offset of knee bending direction.")]
			public float swivelOffset;

			[Token(Token = "0x40006C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			[Range(0f, 1f)]
			[Tooltip("If 0, the bend plane will be locked to the rotation of the pelvis and rotating the foot will have no effect on the knee direction. If 1, to the target rotation of the leg so that the knee will bend towards the forward axis of the foot. Values in between will be slerped between the two.")]
			public float bendToTargetWeight;

			[Token(Token = "0x40006C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			[Range(0.01f, 2f)]
			[Tooltip("Use this to make the leg shorter/longer. Works by displacement of foot and calf localPosition.")]
			public float legLengthMlp;

			[Token(Token = "0x40006C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			[Tooltip("Evaluates stretching of the leg by target distance relative to leg length. Value at time 1 represents stretching amount at the point where distance to the target is equal to leg length. Value at time 1 represents stretching amount at the point where distance to the target is double the leg length. Value represents the amount of stretching. Linear stretching would be achieved with a linear curve going up by 45 degrees. Increase the range of stretching by moving the last key up and right at the same amount. Smoothing in the curve can help reduce knee snapping (start stretching the arm slightly before target distance reaches leg length). To get a good optimal value for this curve, please go to the 'VRIK (Basic)' demo scene and copy the stretch curve over from the Pilot character.")]
			public AnimationCurve stretchCurve;

			[NonSerialized]
			[Token(Token = "0x40006C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			[HideInInspector]
			public UnityEngine.Vector3 IKPosition;

			[NonSerialized]
			[Token(Token = "0x40006C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			[HideInInspector]
			public Quaternion IKRotation;

			[NonSerialized]
			[Token(Token = "0x40006C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
			[HideInInspector]
			public UnityEngine.Vector3 footPositionOffset;

			[NonSerialized]
			[Token(Token = "0x40006C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			[HideInInspector]
			public UnityEngine.Vector3 heelPositionOffset;

			[NonSerialized]
			[Token(Token = "0x40006C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
			[HideInInspector]
			public Quaternion footRotationOffset;

			[NonSerialized]
			[Token(Token = "0x40006C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
			[HideInInspector]
			public float currentMag;

			[Token(Token = "0x40006C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			[HideInInspector]
			public bool useAnimatedBendNormal;

			[Token(Token = "0x40006CE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
			private UnityEngine.Vector3 footPosition;

			[Token(Token = "0x40006CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
			private Quaternion footRotation;

			[Token(Token = "0x40006D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
			private UnityEngine.Vector3 bendNormal;

			[Token(Token = "0x40006D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
			private Quaternion calfRelToThigh;

			[Token(Token = "0x40006D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
			private Quaternion thighRelToFoot;

			[Token(Token = "0x40006D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
			private UnityEngine.Vector3 bendNormalRelToPelvis;

			[Token(Token = "0x40006D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
			private UnityEngine.Vector3 bendNormalRelToTarget;

			[Token(Token = "0x1700012B")]
			public UnityEngine.Vector3 position
			{
				[Token(Token = "0x6000900")]
				[Address(RVA = "0xC6B9CC", Offset = "0xC6B9CC", VA = "0xC6B9CC")]
				[CompilerGenerated]
				get
				{
					return default(UnityEngine.Vector3);
				}
				[Token(Token = "0x6000901")]
				[Address(RVA = "0xC6B9D8", Offset = "0xC6B9D8", VA = "0xC6B9D8")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x1700012C")]
			public Quaternion rotation
			{
				[Token(Token = "0x6000902")]
				[Address(RVA = "0xC6B9E4", Offset = "0xC6B9E4", VA = "0xC6B9E4")]
				[CompilerGenerated]
				get
				{
					return default(Quaternion);
				}
				[Token(Token = "0x6000903")]
				[Address(RVA = "0xC6B9F0", Offset = "0xC6B9F0", VA = "0xC6B9F0")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x1700012D")]
			public bool hasToes
			{
				[Token(Token = "0x6000904")]
				[Address(RVA = "0xC6B9FC", Offset = "0xC6B9FC", VA = "0xC6B9FC")]
				[CompilerGenerated]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6000905")]
				[Address(RVA = "0xC6BA04", Offset = "0xC6BA04", VA = "0xC6BA04")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x1700012E")]
			public VirtualBone thigh
			{
				[Token(Token = "0x6000906")]
				[Address(RVA = "0xC6BA10", Offset = "0xC6BA10", VA = "0xC6BA10")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700012F")]
			private VirtualBone calf
			{
				[Token(Token = "0x6000907")]
				[Address(RVA = "0xC6BA38", Offset = "0xC6BA38", VA = "0xC6BA38")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000130")]
			private VirtualBone foot
			{
				[Token(Token = "0x6000908")]
				[Address(RVA = "0xC6BA64", Offset = "0xC6BA64", VA = "0xC6BA64")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000131")]
			private VirtualBone toes
			{
				[Token(Token = "0x6000909")]
				[Address(RVA = "0xC6BA90", Offset = "0xC6BA90", VA = "0xC6BA90")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000132")]
			public VirtualBone lastBone
			{
				[Token(Token = "0x600090A")]
				[Address(RVA = "0xC6BABC", Offset = "0xC6BABC", VA = "0xC6BABC")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000133")]
			public UnityEngine.Vector3 thighRelativeToPelvis
			{
				[Token(Token = "0x600090B")]
				[Address(RVA = "0xC6BAF0", Offset = "0xC6BAF0", VA = "0xC6BAF0")]
				[CompilerGenerated]
				get
				{
					return default(UnityEngine.Vector3);
				}
				[Token(Token = "0x600090C")]
				[Address(RVA = "0xC6BAFC", Offset = "0xC6BAFC", VA = "0xC6BAFC")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x600090D")]
			[Address(RVA = "0xC6BB08", Offset = "0xC6BB08", VA = "0xC6BB08", Slot = "4")]
			protected override void OnRead(UnityEngine.Vector3[] positions, Quaternion[] rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs, int rootIndex, int index)
			{
			}

			[Token(Token = "0x600090E")]
			[Address(RVA = "0xC6C0C0", Offset = "0xC6C0C0", VA = "0xC6C0C0", Slot = "5")]
			public override void PreSolve()
			{
			}

			[Token(Token = "0x600090F")]
			[Address(RVA = "0xC6C8F0", Offset = "0xC6C8F0", VA = "0xC6C8F0", Slot = "7")]
			public override void ApplyOffsets(float scale)
			{
			}

			[Token(Token = "0x6000910")]
			[Address(RVA = "0xC6C8A0", Offset = "0xC6C8A0", VA = "0xC6C8A0")]
			private void ApplyPositionOffset(UnityEngine.Vector3 offset, float weight)
			{
			}

			[Token(Token = "0x6000911")]
			[Address(RVA = "0xC6C654", Offset = "0xC6C654", VA = "0xC6C654")]
			private void ApplyRotationOffset(Quaternion offset, float weight)
			{
			}

			[Token(Token = "0x6000912")]
			[Address(RVA = "0xC6CDCC", Offset = "0xC6CDCC", VA = "0xC6CDCC")]
			public void Solve(bool stretch)
			{
			}

			[Token(Token = "0x6000913")]
			[Address(RVA = "0xC6D7D4", Offset = "0xC6D7D4", VA = "0xC6D7D4")]
			private void FixTwistRotations()
			{
			}

			[Token(Token = "0x6000914")]
			[Address(RVA = "0xC6D014", Offset = "0xC6D014", VA = "0xC6D014")]
			private void Stretching()
			{
			}

			[Token(Token = "0x6000915")]
			[Address(RVA = "0xC6DC2C", Offset = "0xC6DC2C", VA = "0xC6DC2C", Slot = "6")]
			public override void Write(ref UnityEngine.Vector3[] solvedPositions, ref Quaternion[] solvedRotations)
			{
			}

			[Token(Token = "0x6000916")]
			[Address(RVA = "0xC6DE34", Offset = "0xC6DE34", VA = "0xC6DE34", Slot = "8")]
			public override void ResetOffsets()
			{
			}

			[Token(Token = "0x6000917")]
			[Address(RVA = "0xC6DF14", Offset = "0xC6DF14", VA = "0xC6DF14")]
			public Leg()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000F0")]
		public class Locomotion
		{
			[Token(Token = "0x40006D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("Used for blending in/out of procedural locomotion.")]
			[Range(0f, 1f)]
			public float weight;

			[Token(Token = "0x40006D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("Tries to maintain this distance between the legs.")]
			public float footDistance;

			[Token(Token = "0x40006D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("Makes a step only if step target position is at least this far from the current footstep or the foot does not reach the current footstep anymore or footstep angle is past the 'Angle Threshold'.")]
			public float stepThreshold;

			[Token(Token = "0x40006D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[Tooltip("Makes a step only if step target position is at least 'Step Threshold' far from the current footstep or the foot does not reach the current footstep anymore or footstep angle is past this value.")]
			public float angleThreshold;

			[Token(Token = "0x40006D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("Multiplies angle of the center of mass - center of pressure vector. Larger value makes the character step sooner if losing balance.")]
			public float comAngleMlp;

			[Token(Token = "0x40006DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[Tooltip("Maximum magnitude of head/hand target velocity used in prediction.")]
			public float maxVelocity;

			[Token(Token = "0x40006DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("The amount of head/hand target velocity prediction.")]
			public float velocityFactor;

			[Token(Token = "0x40006DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[Tooltip("How much can a leg be extended before it is forced to step to another position? 1 means fully stretched.")]
			[Range(0.9f, 1f)]
			public float maxLegStretch;

			[Token(Token = "0x40006DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[Tooltip("The speed of lerping the root of the character towards the horizontal mid-point of the footsteps.")]
			public float rootSpeed;

			[Token(Token = "0x40006DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			[Tooltip("The speed of moving a foot to the next position.")]
			public float stepSpeed;

			[Token(Token = "0x40006DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[Tooltip("The height of the foot by normalized step progress (0 - 1).")]
			public AnimationCurve stepHeight;

			[Token(Token = "0x40006E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			[Tooltip("Reduce this value if locomotion makes the head bob too much.")]
			public float maxBodyYOffset;

			[Token(Token = "0x40006E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[Tooltip("The height offset of the heel by normalized step progress (0 - 1).")]
			public AnimationCurve heelHeight;

			[Token(Token = "0x40006E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[Tooltip("Rotates the foot while the leg is not stepping to relax the twist rotation of the leg if ideal rotation is past this angle.")]
			[Range(0f, 180f)]
			public float relaxLegTwistMinAngle;

			[Token(Token = "0x40006E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			[Tooltip("The speed of rotating the foot while the leg is not stepping to relax the twist rotation of the leg.")]
			public float relaxLegTwistSpeed;

			[Token(Token = "0x40006E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[Tooltip("Interpolation mode of the step.")]
			public InterpolationMode stepInterpolation;

			[Token(Token = "0x40006E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			[Tooltip("Offset for the approximated center of mass.")]
			public UnityEngine.Vector3 offset;

			[Token(Token = "0x40006E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			[HideInInspector]
			public bool blockingEnabled;

			[Token(Token = "0x40006E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			[HideInInspector]
			public LayerMask blockingLayers;

			[Token(Token = "0x40006E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			[HideInInspector]
			public float raycastRadius;

			[Token(Token = "0x40006E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			[HideInInspector]
			public float raycastHeight;

			[Token(Token = "0x40006EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			[Tooltip("Called when the left foot has finished a step.")]
			public UnityEvent onLeftFootstep;

			[Token(Token = "0x40006EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			[Tooltip("Called when the right foot has finished a step")]
			public UnityEvent onRightFootstep;

			[Token(Token = "0x40006ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			private Footstep[] footsteps;

			[Token(Token = "0x40006EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			private UnityEngine.Vector3 lastComPosition;

			[Token(Token = "0x40006EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
			private UnityEngine.Vector3 comVelocity;

			[Token(Token = "0x40006F0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
			private int leftFootIndex;

			[Token(Token = "0x40006F1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
			private int rightFootIndex;

			[Token(Token = "0x17000134")]
			public UnityEngine.Vector3 centerOfMass
			{
				[Token(Token = "0x6000918")]
				[Address(RVA = "0xC6DFF4", Offset = "0xC6DFF4", VA = "0xC6DFF4")]
				[CompilerGenerated]
				get
				{
					return default(UnityEngine.Vector3);
				}
				[Token(Token = "0x6000919")]
				[Address(RVA = "0xC6E000", Offset = "0xC6E000", VA = "0xC6E000")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000135")]
			public UnityEngine.Vector3 leftFootstepPosition
			{
				[Token(Token = "0x6000920")]
				[Address(RVA = "0xC70270", Offset = "0xC70270", VA = "0xC70270")]
				get
				{
					return default(UnityEngine.Vector3);
				}
			}

			[Token(Token = "0x17000136")]
			public UnityEngine.Vector3 rightFootstepPosition
			{
				[Token(Token = "0x6000921")]
				[Address(RVA = "0xC702A4", Offset = "0xC702A4", VA = "0xC702A4")]
				get
				{
					return default(UnityEngine.Vector3);
				}
			}

			[Token(Token = "0x17000137")]
			public Quaternion leftFootstepRotation
			{
				[Token(Token = "0x6000922")]
				[Address(RVA = "0xC702DC", Offset = "0xC702DC", VA = "0xC702DC")]
				get
				{
					return default(Quaternion);
				}
			}

			[Token(Token = "0x17000138")]
			public Quaternion rightFootstepRotation
			{
				[Token(Token = "0x6000923")]
				[Address(RVA = "0xC70310", Offset = "0xC70310", VA = "0xC70310")]
				get
				{
					return default(Quaternion);
				}
			}

			[Token(Token = "0x600091A")]
			[Address(RVA = "0xC6E00C", Offset = "0xC6E00C", VA = "0xC6E00C")]
			public void Initiate(UnityEngine.Vector3[] positions, Quaternion[] rotations, bool hasToes, float scale)
			{
			}

			[Token(Token = "0x600091B")]
			[Address(RVA = "0xC6E314", Offset = "0xC6E314", VA = "0xC6E314")]
			public void Reset(UnityEngine.Vector3[] positions, Quaternion[] rotations)
			{
			}

			[Token(Token = "0x600091C")]
			[Address(RVA = "0xC6E4F8", Offset = "0xC6E4F8", VA = "0xC6E4F8")]
			public void Relax()
			{
			}

			[Token(Token = "0x600091D")]
			[Address(RVA = "0xC6E544", Offset = "0xC6E544", VA = "0xC6E544")]
			public void AddDeltaRotation(Quaternion delta, UnityEngine.Vector3 pivot)
			{
			}

			[Token(Token = "0x600091E")]
			[Address(RVA = "0xC6E90C", Offset = "0xC6E90C", VA = "0xC6E90C")]
			public void AddDeltaPosition(UnityEngine.Vector3 delta)
			{
			}

			[Token(Token = "0x600091F")]
			[Address(RVA = "0xC6E9C4", Offset = "0xC6E9C4", VA = "0xC6E9C4")]
			public void Solve(VirtualBone rootBone, Spine spine, Leg leftLeg, Leg rightLeg, Arm leftArm, Arm rightArm, int supportLegIndex, out UnityEngine.Vector3 leftFootPosition, out UnityEngine.Vector3 rightFootPosition, out Quaternion leftFootRotation, out Quaternion rightFootRotation, out float leftFootOffset, out float rightFootOffset, out float leftHeelOffset, out float rightHeelOffset, float scale)
			{
			}

			[Token(Token = "0x6000924")]
			[Address(RVA = "0xC6FEA0", Offset = "0xC6FEA0", VA = "0xC6FEA0")]
			private bool StepBlocked(UnityEngine.Vector3 fromPosition, UnityEngine.Vector3 toPosition, UnityEngine.Vector3 rootPosition)
			{
				return default(bool);
			}

			[Token(Token = "0x6000925")]
			[Address(RVA = "0xC70054", Offset = "0xC70054", VA = "0xC70054")]
			private bool CanStep()
			{
				return default(bool);
			}

			[Token(Token = "0x6000926")]
			[Address(RVA = "0xC700C0", Offset = "0xC700C0", VA = "0xC700C0")]
			private static bool GetLineSphereCollision(UnityEngine.Vector3 lineStart, UnityEngine.Vector3 lineEnd, UnityEngine.Vector3 sphereCenter, float sphereRadius)
			{
				return default(bool);
			}

			[Token(Token = "0x6000927")]
			[Address(RVA = "0xC70348", Offset = "0xC70348", VA = "0xC70348")]
			public Locomotion()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000F1")]
		public class Spine : BodyPart
		{
			[Token(Token = "0x40006F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[Tooltip("The head target. This should not be the camera Transform itself, but a child GameObject parented to it so you could adjust it's position/rotation  to match the orientation of the head bone. The best practice for setup would be to move the camera to the avatar's eyes, duplicate the avatar's head bone and parent it to the camera. Then assign the duplicate to this slot.")]
			public Transform headTarget;

			[Token(Token = "0x40006F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[Tooltip("The pelvis target (optional), useful for seated rigs or if you had an additional tracker on the backpack or belt are. The best practice for setup would be to duplicate the avatar's pelvis bone and parenting it to the pelvis tracker. Then assign the duplicate to this slot.")]
			public Transform pelvisTarget;

			[Token(Token = "0x40006F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[Tooltip("Positional weight of the head target. Note that if you have nulled the headTarget, the head will still be pulled to the last position of the headTarget until you set this value to 0.")]
			[Range(0f, 1f)]
			public float positionWeight;

			[Token(Token = "0x40006F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			[Tooltip("Rotational weight of the head target. Note that if you have nulled the headTarget, the head will still be rotated to the last rotation of the headTarget until you set this value to 0.")]
			[Range(0f, 1f)]
			public float rotationWeight;

			[Token(Token = "0x40006F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[Tooltip("Positional weight of the pelvis target. Note that if you have nulled the pelvisTarget, the pelvis will still be pulled to the last position of the pelvisTarget until you set this value to 0.")]
			[Range(0f, 1f)]
			public float pelvisPositionWeight;

			[Token(Token = "0x40006F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			[Tooltip("Rotational weight of the pelvis target. Note that if you have nulled the pelvisTarget, the pelvis will still be rotated to the last rotation of the pelvisTarget until you set this value to 0.")]
			[Range(0f, 1f)]
			public float pelvisRotationWeight;

			[Token(Token = "0x40006F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			[Tooltip("If 'Chest Goal Weight' is greater than 0, the chest will be turned towards this Transform.")]
			public Transform chestGoal;

			[Token(Token = "0x40006F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			[Tooltip("Weight of turning the chest towards the 'Chest Goal'.")]
			[Range(0f, 1f)]
			public float chestGoalWeight;

			[Token(Token = "0x40006FA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			[Tooltip("Minimum height of the head from the root of the character.")]
			public float minHeadHeight;

			[Token(Token = "0x40006FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			[Tooltip("Determines how much the body will follow the position of the head.")]
			[Range(0f, 1f)]
			public float bodyPosStiffness;

			[Token(Token = "0x40006FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			[Tooltip("Determines how much the body will follow the rotation of the head.")]
			[Range(0f, 1f)]
			public float bodyRotStiffness;

			[Token(Token = "0x40006FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			[Range(0f, 1f)]
			[FormerlySerializedAs("chestRotationWeight")]
			[Tooltip("Determines how much the chest will rotate to the rotation of the head.")]
			public float neckStiffness;

			[Token(Token = "0x40006FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			[Tooltip("The amount of rotation applied to the chest based on hand positions.")]
			[Range(0f, 1f)]
			public float rotateChestByHands;

			[Token(Token = "0x40006FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			[Tooltip("Clamps chest rotation. Value of 0.5 allows 90 degrees of rotation for the chest relative to the head. Value of 0 allows 180 degrees and value of 1 means the chest will be locked relative to the head.")]
			[Range(0f, 1f)]
			public float chestClampWeight;

			[Token(Token = "0x4000700")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
			[Tooltip("Clamps head rotation. Value of 0.5 allows 90 degrees of rotation for the head relative to the headTarget. Value of 0 allows 180 degrees and value of 1 means head rotation will be locked to the target.")]
			[Range(0f, 1f)]
			public float headClampWeight;

			[Token(Token = "0x4000701")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			[Tooltip("Moves the body horizontally along -character.forward axis by that value when the player is crouching.")]
			public float moveBodyBackWhenCrouching;

			[Token(Token = "0x4000702")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
			[Tooltip("How much will the pelvis maintain it's animated position?")]
			[Range(0f, 1f)]
			public float maintainPelvisPosition;

			[Token(Token = "0x4000703")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			[Tooltip("Will automatically rotate the root of the character if the head target has turned past this angle.")]
			[Range(0f, 180f)]
			public float maxRootAngle;

			[Token(Token = "0x4000704")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
			[Tooltip("Angular offset for root heading. Adjust this value to turn the root relative to the HMD around the vertical axis. Usefulf for fighting or shooting games where you would sometimes want the avatar to stand at an angled stance.")]
			[Range(-180f, 180f)]
			public float rootHeadingOffset;

			[NonSerialized]
			[Token(Token = "0x4000705")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			[HideInInspector]
			public UnityEngine.Vector3 IKPositionHead;

			[NonSerialized]
			[Token(Token = "0x4000706")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
			[HideInInspector]
			public Quaternion IKRotationHead;

			[NonSerialized]
			[Token(Token = "0x4000707")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
			[HideInInspector]
			public UnityEngine.Vector3 IKPositionPelvis;

			[NonSerialized]
			[Token(Token = "0x4000708")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
			[HideInInspector]
			public Quaternion IKRotationPelvis;

			[NonSerialized]
			[Token(Token = "0x4000709")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
			[HideInInspector]
			public UnityEngine.Vector3 goalPositionChest;

			[NonSerialized]
			[Token(Token = "0x400070A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
			[HideInInspector]
			public UnityEngine.Vector3 pelvisPositionOffset;

			[NonSerialized]
			[Token(Token = "0x400070B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
			[HideInInspector]
			public UnityEngine.Vector3 chestPositionOffset;

			[NonSerialized]
			[Token(Token = "0x400070C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
			[HideInInspector]
			public UnityEngine.Vector3 headPositionOffset;

			[NonSerialized]
			[Token(Token = "0x400070D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
			[HideInInspector]
			public Quaternion pelvisRotationOffset;

			[NonSerialized]
			[Token(Token = "0x400070E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
			[HideInInspector]
			public Quaternion chestRotationOffset;

			[NonSerialized]
			[Token(Token = "0x400070F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
			[HideInInspector]
			public Quaternion headRotationOffset;

			[NonSerialized]
			[Token(Token = "0x4000710")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
			[HideInInspector]
			public UnityEngine.Vector3 faceDirection;

			[NonSerialized]
			[Token(Token = "0x4000711")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
			[HideInInspector]
			public UnityEngine.Vector3 locomotionHeadPositionOffset;

			[NonSerialized]
			[Token(Token = "0x4000712")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
			[HideInInspector]
			public UnityEngine.Vector3 headPosition;

			[Token(Token = "0x4000715")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
			private Quaternion headRotation;

			[Token(Token = "0x4000716")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
			private Quaternion pelvisRotation;

			[Token(Token = "0x4000717")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
			private Quaternion anchorRelativeToPelvis;

			[Token(Token = "0x4000718")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
			private Quaternion pelvisRelativeRotation;

			[Token(Token = "0x4000719")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1BC")]
			private Quaternion chestRelativeRotation;

			[Token(Token = "0x400071A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
			private UnityEngine.Vector3 headDeltaPosition;

			[Token(Token = "0x400071B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
			private Quaternion pelvisDeltaRotation;

			[Token(Token = "0x400071C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
			private Quaternion chestTargetRotation;

			[Token(Token = "0x400071D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
			private int pelvisIndex;

			[Token(Token = "0x400071E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1FC")]
			private int spineIndex;

			[Token(Token = "0x400071F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
			private int chestIndex;

			[Token(Token = "0x4000720")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x204")]
			private int neckIndex;

			[Token(Token = "0x4000721")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
			private int headIndex;

			[Token(Token = "0x4000722")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20C")]
			private float length;

			[Token(Token = "0x4000723")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
			private bool hasChest;

			[Token(Token = "0x4000724")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x211")]
			private bool hasNeck;

			[Token(Token = "0x4000725")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x212")]
			private bool hasLegs;

			[Token(Token = "0x4000726")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x214")]
			private float headHeight;

			[Token(Token = "0x4000727")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
			private float sizeMlp;

			[Token(Token = "0x4000728")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x21C")]
			private UnityEngine.Vector3 chestForward;

			[Token(Token = "0x17000139")]
			public VirtualBone pelvis
			{
				[Token(Token = "0x6000928")]
				[Address(RVA = "0xC6FE38", Offset = "0xC6FE38", VA = "0xC6FE38")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700013A")]
			public VirtualBone firstSpineBone
			{
				[Token(Token = "0x6000929")]
				[Address(RVA = "0xC70440", Offset = "0xC70440", VA = "0xC70440")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700013B")]
			public VirtualBone chest
			{
				[Token(Token = "0x600092A")]
				[Address(RVA = "0xC70474", Offset = "0xC70474", VA = "0xC70474")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700013C")]
			private VirtualBone neck
			{
				[Token(Token = "0x600092B")]
				[Address(RVA = "0xC704BC", Offset = "0xC704BC", VA = "0xC704BC")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700013D")]
			public VirtualBone head
			{
				[Token(Token = "0x600092C")]
				[Address(RVA = "0xC6FE6C", Offset = "0xC6FE6C", VA = "0xC6FE6C")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700013E")]
			public Quaternion anchorRotation
			{
				[Token(Token = "0x600092D")]
				[Address(RVA = "0xC704F0", Offset = "0xC704F0", VA = "0xC704F0")]
				[CompilerGenerated]
				get
				{
					return default(Quaternion);
				}
				[Token(Token = "0x600092E")]
				[Address(RVA = "0xC70504", Offset = "0xC70504", VA = "0xC70504")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x1700013F")]
			public Quaternion anchorRelativeToHead
			{
				[Token(Token = "0x600092F")]
				[Address(RVA = "0xC70518", Offset = "0xC70518", VA = "0xC70518")]
				[CompilerGenerated]
				get
				{
					return default(Quaternion);
				}
				[Token(Token = "0x6000930")]
				[Address(RVA = "0xC7052C", Offset = "0xC7052C", VA = "0xC7052C")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x6000931")]
			[Address(RVA = "0xC70540", Offset = "0xC70540", VA = "0xC70540", Slot = "4")]
			protected override void OnRead(UnityEngine.Vector3[] positions, Quaternion[] rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs, int rootIndex, int index)
			{
			}

			[Token(Token = "0x6000932")]
			[Address(RVA = "0xC711A0", Offset = "0xC711A0", VA = "0xC711A0", Slot = "5")]
			public override void PreSolve()
			{
			}

			[Token(Token = "0x6000933")]
			[Address(RVA = "0xC71388", Offset = "0xC71388", VA = "0xC71388", Slot = "7")]
			public override void ApplyOffsets(float scale)
			{
			}

			[Token(Token = "0x6000934")]
			[Address(RVA = "0xC71B30", Offset = "0xC71B30", VA = "0xC71B30")]
			private void CalculateChestTargetRotation(VirtualBone rootBone, Arm[] arms)
			{
			}

			[Token(Token = "0x6000935")]
			[Address(RVA = "0xC7216C", Offset = "0xC7216C", VA = "0xC7216C")]
			public void Solve(VirtualBone rootBone, Leg[] legs, Arm[] arms, float scale)
			{
			}

			[Token(Token = "0x6000936")]
			[Address(RVA = "0xC72AD0", Offset = "0xC72AD0", VA = "0xC72AD0")]
			private void FABRIKPass(UnityEngine.Vector3 animatedPelvisPos, UnityEngine.Vector3 rootUp, float weight)
			{
			}

			[Token(Token = "0x6000937")]
			[Address(RVA = "0xC73278", Offset = "0xC73278", VA = "0xC73278")]
			private void SolvePelvis()
			{
			}

			[Token(Token = "0x6000938")]
			[Address(RVA = "0xC73858", Offset = "0xC73858", VA = "0xC73858", Slot = "6")]
			public override void Write(ref UnityEngine.Vector3[] solvedPositions, ref Quaternion[] solvedRotations)
			{
			}

			[Token(Token = "0x6000939")]
			[Address(RVA = "0xC73A28", Offset = "0xC73A28", VA = "0xC73A28", Slot = "8")]
			public override void ResetOffsets()
			{
			}

			[Token(Token = "0x600093A")]
			[Address(RVA = "0xC71D74", Offset = "0xC71D74", VA = "0xC71D74")]
			private void AdjustChestByHands(ref Quaternion chestTargetRotation, Arm[] arms)
			{
			}

			[Token(Token = "0x600093B")]
			[Address(RVA = "0xC72FA0", Offset = "0xC72FA0", VA = "0xC72FA0")]
			public void InverseTranslateToHead(Leg[] legs, bool limited, bool useCurrentLegMag, UnityEngine.Vector3 offset, float w)
			{
			}

			[Token(Token = "0x600093C")]
			[Address(RVA = "0xC726B0", Offset = "0xC726B0", VA = "0xC726B0")]
			private void TranslatePelvis(Leg[] legs, UnityEngine.Vector3 deltaPosition, Quaternion deltaRotation, float scale)
			{
			}

			[Token(Token = "0x600093D")]
			[Address(RVA = "0xC73AFC", Offset = "0xC73AFC", VA = "0xC73AFC")]
			private UnityEngine.Vector3 LimitPelvisPosition(Leg[] legs, UnityEngine.Vector3 pelvisPosition, bool useCurrentLegMag, int it = 2)
			{
				return default(UnityEngine.Vector3);
			}

			[Token(Token = "0x600093E")]
			[Address(RVA = "0xC7307C", Offset = "0xC7307C", VA = "0xC7307C")]
			private void Bend(VirtualBone[] bones, int firstIndex, int lastIndex, Quaternion targetRotation, float clampWeight, bool uniformWeight, float w)
			{
			}

			[Token(Token = "0x600093F")]
			[Address(RVA = "0xC72D30", Offset = "0xC72D30", VA = "0xC72D30")]
			private void Bend(VirtualBone[] bones, int firstIndex, int lastIndex, Quaternion targetRotation, Quaternion rotationOffset, float clampWeight, bool uniformWeight, float w)
			{
			}

			[Token(Token = "0x6000940")]
			[Address(RVA = "0xC73F08", Offset = "0xC73F08", VA = "0xC73F08")]
			public Spine()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000F2")]
		public enum PositionOffset
		{
			[Token(Token = "0x400072A")]
			Pelvis,
			[Token(Token = "0x400072B")]
			Chest,
			[Token(Token = "0x400072C")]
			Head,
			[Token(Token = "0x400072D")]
			LeftHand,
			[Token(Token = "0x400072E")]
			RightHand,
			[Token(Token = "0x400072F")]
			LeftFoot,
			[Token(Token = "0x4000730")]
			RightFoot,
			[Token(Token = "0x4000731")]
			LeftHeel,
			[Token(Token = "0x4000732")]
			RightHeel
		}

		[Serializable]
		[Token(Token = "0x20000F3")]
		public enum RotationOffset
		{
			[Token(Token = "0x4000734")]
			Pelvis,
			[Token(Token = "0x4000735")]
			Chest,
			[Token(Token = "0x4000736")]
			Head
		}

		[Serializable]
		[Token(Token = "0x20000F4")]
		public class VirtualBone
		{
			[Token(Token = "0x4000737")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public UnityEngine.Vector3 readPosition;

			[Token(Token = "0x4000738")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Quaternion readRotation;

			[Token(Token = "0x4000739")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public UnityEngine.Vector3 solverPosition;

			[Token(Token = "0x400073A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Quaternion solverRotation;

			[Token(Token = "0x400073B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public float length;

			[Token(Token = "0x400073C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			public float sqrMag;

			[Token(Token = "0x400073D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public UnityEngine.Vector3 axis;

			[Token(Token = "0x6000941")]
			[Address(RVA = "0xC6C030", Offset = "0xC6C030", VA = "0xC6C030")]
			public VirtualBone(UnityEngine.Vector3 position, Quaternion rotation)
			{
			}

			[Token(Token = "0x6000942")]
			[Address(RVA = "0xC6C0A0", Offset = "0xC6C0A0", VA = "0xC6C0A0")]
			public void Read(UnityEngine.Vector3 position, Quaternion rotation)
			{
			}

			[Token(Token = "0x6000943")]
			[Address(RVA = "0xC74024", Offset = "0xC74024", VA = "0xC74024")]
			public static void SwingRotation(VirtualBone[] bones, int index, UnityEngine.Vector3 swingTarget, float weight = 1f)
			{
			}

			[Token(Token = "0x6000944")]
			[Address(RVA = "0xC74224", Offset = "0xC74224", VA = "0xC74224")]
			public static float PreSolve(ref VirtualBone[] bones)
			{
				return default(float);
			}

			[Token(Token = "0x6000945")]
			[Address(RVA = "0xC73D98", Offset = "0xC73D98", VA = "0xC73D98")]
			public static void RotateAroundPoint(VirtualBone[] bones, int index, UnityEngine.Vector3 point, Quaternion rotation)
			{
			}

			[Token(Token = "0x6000946")]
			[Address(RVA = "0xC74384", Offset = "0xC74384", VA = "0xC74384")]
			public static void RotateBy(VirtualBone[] bones, int index, Quaternion rotation)
			{
			}

			[Token(Token = "0x6000947")]
			[Address(RVA = "0xC7452C", Offset = "0xC7452C", VA = "0xC7452C")]
			public static void RotateBy(VirtualBone[] bones, Quaternion rotation)
			{
			}

			[Token(Token = "0x6000948")]
			[Address(RVA = "0xC746B4", Offset = "0xC746B4", VA = "0xC746B4")]
			public static void RotateTo(VirtualBone[] bones, int index, Quaternion rotation)
			{
			}

			[Token(Token = "0x6000949")]
			[Address(RVA = "0xC6D3F0", Offset = "0xC6D3F0", VA = "0xC6D3F0")]
			public static void SolveTrigonometric(VirtualBone[] bones, int first, int second, int third, UnityEngine.Vector3 targetPosition, UnityEngine.Vector3 bendNormal, float weight)
			{
			}

			[Token(Token = "0x600094A")]
			[Address(RVA = "0xC74758", Offset = "0xC74758", VA = "0xC74758")]
			private static UnityEngine.Vector3 GetDirectionToBendPoint(UnityEngine.Vector3 direction, float directionMag, UnityEngine.Vector3 bendDirection, float sqrMag1, float sqrMag2)
			{
				return default(UnityEngine.Vector3);
			}

			[Token(Token = "0x600094B")]
			[Address(RVA = "0xC7348C", Offset = "0xC7348C", VA = "0xC7348C")]
			public static void SolveFABRIK(VirtualBone[] bones, UnityEngine.Vector3 startPosition, UnityEngine.Vector3 targetPosition, float weight, float minNormalizedTargetDistance, int iterations, float length, UnityEngine.Vector3 startOffset)
			{
			}

			[Token(Token = "0x600094C")]
			[Address(RVA = "0xC748B0", Offset = "0xC748B0", VA = "0xC748B0")]
			private static UnityEngine.Vector3 SolveFABRIKJoint(UnityEngine.Vector3 pos1, UnityEngine.Vector3 pos2, float length)
			{
				return default(UnityEngine.Vector3);
			}

			[Token(Token = "0x600094D")]
			[Address(RVA = "0xC749C4", Offset = "0xC749C4", VA = "0xC749C4")]
			public static void SolveCCD(VirtualBone[] bones, UnityEngine.Vector3 targetPosition, float weight, int iterations)
			{
			}
		}

		[Token(Token = "0x400066C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform[] solverTransforms;

		[Token(Token = "0x400066D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool hasChest;

		[Token(Token = "0x400066E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		private bool hasNeck;

		[Token(Token = "0x400066F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
		private bool hasShoulders;

		[Token(Token = "0x4000670")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x63")]
		private bool hasToes;

		[Token(Token = "0x4000671")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private bool hasLegs;

		[Token(Token = "0x4000672")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private UnityEngine.Vector3[] readPositions;

		[Token(Token = "0x4000673")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Quaternion[] readRotations;

		[Token(Token = "0x4000674")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private UnityEngine.Vector3[] solvedPositions;

		[Token(Token = "0x4000675")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Quaternion[] solvedRotations;

		[Token(Token = "0x4000676")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Quaternion[] defaultLocalRotations;

		[Token(Token = "0x4000677")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private UnityEngine.Vector3[] defaultLocalPositions;

		[Token(Token = "0x4000678")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private UnityEngine.Vector3 rootV;

		[Token(Token = "0x4000679")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private UnityEngine.Vector3 rootVelocity;

		[Token(Token = "0x400067A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private UnityEngine.Vector3 bodyOffset;

		[Token(Token = "0x400067B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private int supportLegIndex;

		[Token(Token = "0x400067C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private int lastLOD;

		[Token(Token = "0x400067D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[Tooltip("LOD 0: Full quality solving. LOD 1: Shoulder solving, stretching plant feet disabled, spine solving quality reduced. This provides about 30% of performance gain. LOD 2: Culled, but updating root position and rotation if locomotion is enabled.")]
		[Range(0f, 2f)]
		public int LOD;

		[Token(Token = "0x400067E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Tooltip("Scale of the character. Value of 1 means normal adult human size.")]
		public float scale;

		[Token(Token = "0x4000680")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[Tooltip("The left arm solver.")]
		public Arm leftArm;

		[Token(Token = "0x4000681")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[Tooltip("The right arm solver.")]
		public Arm rightArm;

		[Token(Token = "0x4000682")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Arm[] arms;

		[Token(Token = "0x17000120")]
		[HideInInspector]
		public VirtualBone rootBone
		{
			[Token(Token = "0x60008CD")]
			[Address(RVA = "0xC68DE4", Offset = "0xC68DE4", VA = "0xC68DE4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60008CE")]
			[Address(RVA = "0xC68DEC", Offset = "0xC68DEC", VA = "0xC68DEC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60008B6")]
		[Address(RVA = "0xC65C2C", Offset = "0xC65C2C", VA = "0xC65C2C")]
		public void SetToReferences(VRIK.References references)
		{
		}

		[Token(Token = "0x60008B7")]
		[Address(RVA = "0xC65E3C", Offset = "0xC65E3C", VA = "0xC65E3C")]
		public void GuessHandOrientations(VRIK.References references, bool onlyIfZero)
		{
		}

		[Token(Token = "0x60008B8")]
		[Address(RVA = "0xC65E38", Offset = "0xC65E38", VA = "0xC65E38")]
		public void DefaultAnimationCurves()
		{
		}

		[Token(Token = "0x60008B9")]
		[Address(RVA = "0xC6613C", Offset = "0xC6613C", VA = "0xC6613C")]
		public void AddPositionOffset(PositionOffset positionOffset, UnityEngine.Vector3 value)
		{
		}

		[Token(Token = "0x60008BA")]
		[Address(RVA = "0xC66188", Offset = "0xC66188", VA = "0xC66188")]
		public void AddRotationOffset(RotationOffset rotationOffset, UnityEngine.Vector3 value)
		{
		}

		[Token(Token = "0x60008BB")]
		[Address(RVA = "0xC661A4", Offset = "0xC661A4", VA = "0xC661A4")]
		public void AddRotationOffset(RotationOffset rotationOffset, Quaternion value)
		{
		}

		[Token(Token = "0x60008BC")]
		[Address(RVA = "0xC661A8", Offset = "0xC661A8", VA = "0xC661A8")]
		public void AddPlatformMotion(UnityEngine.Vector3 deltaPosition, Quaternion deltaRotation, UnityEngine.Vector3 platformPivot)
		{
		}

		[Token(Token = "0x60008BD")]
		[Address(RVA = "0xC661AC", Offset = "0xC661AC", VA = "0xC661AC")]
		public void Reset()
		{
		}

		[Token(Token = "0x60008BE")]
		[Address(RVA = "0xC6662C", Offset = "0xC6662C", VA = "0xC6662C", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x60008BF")]
		[Address(RVA = "0xC66780", Offset = "0xC66780", VA = "0xC66780", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x60008C0")]
		[Address(RVA = "0xC6696C", Offset = "0xC6696C", VA = "0xC6696C", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x60008C1")]
		[Address(RVA = "0xC669DC", Offset = "0xC669DC", VA = "0xC669DC", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x60008C2")]
		[Address(RVA = "0xC66A4C", Offset = "0xC66A4C", VA = "0xC66A4C", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x60008C3")]
		[Address(RVA = "0xC66C48", Offset = "0xC66C48", VA = "0xC66C48")]
		private UnityEngine.Vector3 GetNormal(Transform[] transforms)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x60008C4")]
		[Address(RVA = "0xC66EB8", Offset = "0xC66EB8", VA = "0xC66EB8")]
		private static Keyframe[] GetSineKeyframes(float mag)
		{
			return null;
		}

		[Token(Token = "0x60008C5")]
		[Address(RVA = "0xC661F0", Offset = "0xC661F0", VA = "0xC661F0")]
		private void UpdateSolverTransforms()
		{
		}

		[Token(Token = "0x60008C6")]
		[Address(RVA = "0xC66FCC", Offset = "0xC66FCC", VA = "0xC66FCC", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x60008C7")]
		[Address(RVA = "0xC67008", Offset = "0xC67008", VA = "0xC67008", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x60008C8")]
		[Address(RVA = "0xC67324", Offset = "0xC67324", VA = "0xC67324")]
		private void WriteTransforms()
		{
		}

		[Token(Token = "0x60008C9")]
		[Address(RVA = "0xC66340", Offset = "0xC66340", VA = "0xC66340")]
		private void Read(UnityEngine.Vector3[] positions, Quaternion[] rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs)
		{
		}

		[Token(Token = "0x60008CA")]
		[Address(RVA = "0xC67080", Offset = "0xC67080", VA = "0xC67080")]
		private void Solve()
		{
		}

		[Token(Token = "0x60008CB")]
		[Address(RVA = "0xC67778", Offset = "0xC67778", VA = "0xC67778")]
		private UnityEngine.Vector3 GetPosition(int index)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x60008CC")]
		[Address(RVA = "0xC677B4", Offset = "0xC677B4", VA = "0xC677B4")]
		private Quaternion GetRotation(int index)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60008CF")]
		[Address(RVA = "0xC67260", Offset = "0xC67260", VA = "0xC67260")]
		private void Write()
		{
		}

		[Token(Token = "0x60008D0")]
		[Address(RVA = "0xC68DF4", Offset = "0xC68DF4", VA = "0xC68DF4")]
		public IKSolverVR()
		{
		}
	}
	[Token(Token = "0x20000F5")]
	public class TwistRelaxer : MonoBehaviour
	{
		[Token(Token = "0x400073E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public IK ik;

		[Token(Token = "0x400073F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("If using multiple solvers, add them in inverse hierarchical order - first forearm roll bone, then forearm bone and upper arm bone.")]
		public TwistSolver[] twistSolvers;

		[Token(Token = "0x600094E")]
		[Address(RVA = "0xC74B78", Offset = "0xC74B78", VA = "0xC74B78")]
		public void Start()
		{
		}

		[Token(Token = "0x600094F")]
		[Address(RVA = "0xC751A4", Offset = "0xC751A4", VA = "0xC751A4")]
		private void OnPostUpdate()
		{
		}

		[Token(Token = "0x6000950")]
		[Address(RVA = "0xC75738", Offset = "0xC75738", VA = "0xC75738")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000951")]
		[Address(RVA = "0xC757E8", Offset = "0xC757E8", VA = "0xC757E8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000952")]
		[Address(RVA = "0xC75900", Offset = "0xC75900", VA = "0xC75900")]
		public TwistRelaxer()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000F6")]
	public class TwistSolver
	{
		[Token(Token = "0x4000740")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Tooltip("The transform that this solver operates on.")]
		public Transform transform;

		[Token(Token = "0x4000741")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("If this is the forearm roll bone, the parent should be the forearm bone. If null, will be found automatically.")]
		public Transform parent;

		[Token(Token = "0x4000742")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("If this is the forearm roll bone, the child should be the hand bone. If null, will attempt to find automatically. Assign the hand manually if the hand bone is not a child of the roll bone.")]
		public Transform[] children;

		[Token(Token = "0x4000743")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Range(0f, 1f)]
		[Tooltip("The weight of relaxing the twist of this Transform")]
		public float weight;

		[Token(Token = "0x4000744")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("If 0.5, this Transform will be twisted half way from parent to child. If 1, the twist angle will be locked to the child and will rotate with along with it.")]
		[Range(0f, 1f)]
		public float parentChildCrossfade;

		[Token(Token = "0x4000745")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Rotation offset around the twist axis.")]
		[Range(-180f, 180f)]
		public float twistAngleOffset;

		[Token(Token = "0x4000746")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private UnityEngine.Vector3 twistAxis;

		[Token(Token = "0x4000747")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private UnityEngine.Vector3 axis;

		[Token(Token = "0x4000748")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private UnityEngine.Vector3 axisRelativeToParentDefault;

		[Token(Token = "0x4000749")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private UnityEngine.Vector3 axisRelativeToChildDefault;

		[Token(Token = "0x400074A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Quaternion[] childRotations;

		[Token(Token = "0x400074B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool inititated;

		[Token(Token = "0x6000953")]
		[Address(RVA = "0xC75958", Offset = "0xC75958", VA = "0xC75958")]
		public TwistSolver()
		{
		}

		[Token(Token = "0x6000954")]
		[Address(RVA = "0xC74D40", Offset = "0xC74D40", VA = "0xC74D40")]
		public void Initiate()
		{
		}

		[Token(Token = "0x6000955")]
		[Address(RVA = "0xC75254", Offset = "0xC75254", VA = "0xC75254")]
		public void Relax()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000F7")]
	public class InteractionEffector
	{
		[Token(Token = "0x400074F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Poser poser;

		[Token(Token = "0x4000750")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private IKEffector effector;

		[Token(Token = "0x4000751")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float timer;

		[Token(Token = "0x4000752")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float length;

		[Token(Token = "0x4000753")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float weight;

		[Token(Token = "0x4000754")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float fadeInSpeed;

		[Token(Token = "0x4000755")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float defaultPositionWeight;

		[Token(Token = "0x4000756")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float defaultRotationWeight;

		[Token(Token = "0x4000757")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float defaultPull;

		[Token(Token = "0x4000758")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float defaultReach;

		[Token(Token = "0x4000759")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float defaultPush;

		[Token(Token = "0x400075A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float defaultPushParent;

		[Token(Token = "0x400075B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float defaultBendGoalWeight;

		[Token(Token = "0x400075C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float resetTimer;

		[Token(Token = "0x400075D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool positionWeightUsed;

		[Token(Token = "0x400075E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		private bool rotationWeightUsed;

		[Token(Token = "0x400075F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
		private bool pullUsed;

		[Token(Token = "0x4000760")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x63")]
		private bool reachUsed;

		[Token(Token = "0x4000761")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private bool pushUsed;

		[Token(Token = "0x4000762")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
		private bool pushParentUsed;

		[Token(Token = "0x4000763")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x66")]
		private bool bendGoalWeightUsed;

		[Token(Token = "0x4000764")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x67")]
		private bool pickedUp;

		[Token(Token = "0x4000765")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool defaults;

		[Token(Token = "0x4000766")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		private bool pickUpOnPostFBBIK;

		[Token(Token = "0x4000767")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private UnityEngine.Vector3 pickUpPosition;

		[Token(Token = "0x4000768")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private UnityEngine.Vector3 pausePositionRelative;

		[Token(Token = "0x4000769")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private Quaternion pickUpRotation;

		[Token(Token = "0x400076A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private Quaternion pauseRotationRelative;

		[Token(Token = "0x400076B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private InteractionTarget interactionTarget;

		[Token(Token = "0x400076C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Transform target;

		[Token(Token = "0x400076D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private List<bool> triggered;

		[Token(Token = "0x400076E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private InteractionSystem interactionSystem;

		[Token(Token = "0x400076F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private bool started;

		[Token(Token = "0x17000140")]
		public FullBodyBipedEffector effectorType
		{
			[Token(Token = "0x6000956")]
			[Address(RVA = "0xC75A40", Offset = "0xC75A40", VA = "0xC75A40")]
			[CompilerGenerated]
			get
			{
				return default(FullBodyBipedEffector);
			}
			[Token(Token = "0x6000957")]
			[Address(RVA = "0xC75A48", Offset = "0xC75A48", VA = "0xC75A48")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000141")]
		public bool isPaused
		{
			[Token(Token = "0x6000958")]
			[Address(RVA = "0xC75A50", Offset = "0xC75A50", VA = "0xC75A50")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000959")]
			[Address(RVA = "0xC75A58", Offset = "0xC75A58", VA = "0xC75A58")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000142")]
		public InteractionObject interactionObject
		{
			[Token(Token = "0x600095A")]
			[Address(RVA = "0xC75A64", Offset = "0xC75A64", VA = "0xC75A64")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600095B")]
			[Address(RVA = "0xC75A6C", Offset = "0xC75A6C", VA = "0xC75A6C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000143")]
		public bool inInteraction
		{
			[Token(Token = "0x600095C")]
			[Address(RVA = "0xC75A74", Offset = "0xC75A74", VA = "0xC75A74")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000144")]
		public float progress
		{
			[Token(Token = "0x6000965")]
			[Address(RVA = "0xC77C38", Offset = "0xC77C38", VA = "0xC77C38")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x600095D")]
		[Address(RVA = "0xC75AD4", Offset = "0xC75AD4", VA = "0xC75AD4")]
		public InteractionEffector(FullBodyBipedEffector effectorType)
		{
		}

		[Token(Token = "0x600095E")]
		[Address(RVA = "0xC75B64", Offset = "0xC75B64", VA = "0xC75B64")]
		public void Initiate(InteractionSystem interactionSystem)
		{
		}

		[Token(Token = "0x600095F")]
		[Address(RVA = "0xC75BF0", Offset = "0xC75BF0", VA = "0xC75BF0")]
		private void StoreDefaults()
		{
		}

		[Token(Token = "0x6000960")]
		[Address(RVA = "0xC75D5C", Offset = "0xC75D5C", VA = "0xC75D5C")]
		public bool ResetToDefaults(float speed)
		{
			return default(bool);
		}

		[Token(Token = "0x6000961")]
		[Address(RVA = "0xC76138", Offset = "0xC76138", VA = "0xC76138")]
		public bool Pause()
		{
			return default(bool);
		}

		[Token(Token = "0x6000962")]
		[Address(RVA = "0xC76258", Offset = "0xC76258", VA = "0xC76258")]
		public bool Resume()
		{
			return default(bool);
		}

		[Token(Token = "0x6000963")]
		[Address(RVA = "0xC762AC", Offset = "0xC762AC", VA = "0xC762AC")]
		public bool Start(InteractionObject interactionObject, string tag, float fadeInTime, bool interrupt)
		{
			return default(bool);
		}

		[Token(Token = "0x6000964")]
		[Address(RVA = "0xC768FC", Offset = "0xC768FC", VA = "0xC768FC")]
		public void Update(Transform root, float speed)
		{
		}

		[Token(Token = "0x6000966")]
		[Address(RVA = "0xC773F0", Offset = "0xC773F0", VA = "0xC773F0")]
		private void TriggerUntriggeredEvents(bool checkTime, out bool pickUp, out bool pause)
		{
		}

		[Token(Token = "0x6000967")]
		[Address(RVA = "0xC77610", Offset = "0xC77610", VA = "0xC77610")]
		private void PickUp(Transform root)
		{
		}

		[Token(Token = "0x6000968")]
		[Address(RVA = "0xC77AEC", Offset = "0xC77AEC", VA = "0xC77AEC")]
		public bool Stop()
		{
			return default(bool);
		}

		[Token(Token = "0x6000969")]
		[Address(RVA = "0xC77DAC", Offset = "0xC77DAC", VA = "0xC77DAC")]
		public void OnPostFBBIK()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000F8")]
	public class InteractionLookAt
	{
		[Token(Token = "0x4000770")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Tooltip("(Optional) reference to the LookAtIK component that will be used to make the character look at the objects that it is interacting with.")]
		public LookAtIK ik;

		[Token(Token = "0x4000771")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Interpolation speed of the LookAtIK target.")]
		public float lerpSpeed;

		[Token(Token = "0x4000772")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Interpolation speed of the LookAtIK weight.")]
		public float weightSpeed;

		[Token(Token = "0x4000773")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public bool isPaused;

		[Token(Token = "0x4000774")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Transform lookAtTarget;

		[Token(Token = "0x4000775")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float stopLookTime;

		[Token(Token = "0x4000776")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float weight;

		[Token(Token = "0x4000777")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool firstFBBIKSolve;

		[Token(Token = "0x600096A")]
		[Address(RVA = "0xC78074", Offset = "0xC78074", VA = "0xC78074")]
		public void Look(Transform target, float time)
		{
		}

		[Token(Token = "0x600096B")]
		[Address(RVA = "0xC78184", Offset = "0xC78184", VA = "0xC78184")]
		public void OnFixTransforms()
		{
		}

		[Token(Token = "0x600096C")]
		[Address(RVA = "0xC7821C", Offset = "0xC7821C", VA = "0xC7821C")]
		public void Update()
		{
		}

		[Token(Token = "0x600096D")]
		[Address(RVA = "0xC7840C", Offset = "0xC7840C", VA = "0xC7840C")]
		public void SolveSpine()
		{
		}

		[Token(Token = "0x600096E")]
		[Address(RVA = "0xC784B4", Offset = "0xC784B4", VA = "0xC784B4")]
		public void SolveHead()
		{
		}

		[Token(Token = "0x600096F")]
		[Address(RVA = "0xC78560", Offset = "0xC78560", VA = "0xC78560")]
		public InteractionLookAt()
		{
		}
	}
	[Token(Token = "0x20000F9")]
	[HelpURL("https://www.youtube.com/watch?v=r5jiZnsDH3M")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Interaction System/Interaction Object")]
	public class InteractionObject : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20000FA")]
		public class InteractionEvent
		{
			[Token(Token = "0x4000781")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The time of the event since interaction start.")]
			public float time;

			[Token(Token = "0x4000782")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("If true, the interaction will be paused on this event. The interaction can be resumed by InteractionSystem.ResumeInteraction() or InteractionSystem.ResumeAll;")]
			public bool pause;

			[Token(Token = "0x4000783")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
			[Tooltip("If true, the object will be parented to the effector bone on this event. Note that picking up like this can be done by only a single effector at a time. If you wish to pick up an object with both hands, see the Interaction PickUp2Handed demo scene.")]
			public bool pickUp;

			[Token(Token = "0x4000784")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("The animations called on this event.")]
			public AnimatorEvent[] animations;

			[Token(Token = "0x4000785")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("The messages sent on this event using GameObject.SendMessage().")]
			public Message[] messages;

			[Token(Token = "0x4000786")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("The UnityEvent to invoke on this event.")]
			public UnityEvent unityEvent;

			[Token(Token = "0x600098C")]
			[Address(RVA = "0xC77C68", Offset = "0xC77C68", VA = "0xC77C68")]
			public void Activate(Transform t)
			{
			}

			[Token(Token = "0x600098D")]
			[Address(RVA = "0xC79464", Offset = "0xC79464", VA = "0xC79464")]
			public InteractionEvent()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000FB")]
		public class Message
		{
			[Token(Token = "0x4000787")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The name of the function called.")]
			public string function;

			[Token(Token = "0x4000788")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("The recipient game object.")]
			public GameObject recipient;

			[Token(Token = "0x4000789")]
			private const string empty = "";

			[Token(Token = "0x600098E")]
			[Address(RVA = "0xC7936C", Offset = "0xC7936C", VA = "0xC7936C")]
			public void Send(Transform t)
			{
			}

			[Token(Token = "0x600098F")]
			[Address(RVA = "0xC7946C", Offset = "0xC7946C", VA = "0xC7946C")]
			public Message()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000FC")]
		public class AnimatorEvent
		{
			[Token(Token = "0x400078A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The Animator component that will receive the AnimatorEvents.")]
			public Animator animator;

			[Token(Token = "0x400078B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("The Animation component that will receive the AnimatorEvents (Legacy).")]
			public Animation animation;

			[Token(Token = "0x400078C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("The name of the animation state.")]
			public string animationState;

			[Token(Token = "0x400078D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("The crossfading time.")]
			public float crossfadeTime;

			[Token(Token = "0x400078E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[Tooltip("The layer of the animation state (if using Legacy, the animation state will be forced to this layer).")]
			public int layer;

			[Token(Token = "0x400078F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[Tooltip("Should the animation always start from 0 normalized time?")]
			public bool resetNormalizedTime;

			[Token(Token = "0x4000790")]
			private const string empty = "";

			[Token(Token = "0x6000990")]
			[Address(RVA = "0xC79290", Offset = "0xC79290", VA = "0xC79290")]
			public void Activate(bool pickUp)
			{
			}

			[Token(Token = "0x6000991")]
			[Address(RVA = "0xC79474", Offset = "0xC79474", VA = "0xC79474")]
			private void Activate(Animator animator)
			{
			}

			[Token(Token = "0x6000992")]
			[Address(RVA = "0xC79524", Offset = "0xC79524", VA = "0xC79524")]
			private void Activate(Animation animation)
			{
			}

			[Token(Token = "0x6000993")]
			[Address(RVA = "0xC795FC", Offset = "0xC795FC", VA = "0xC795FC")]
			public AnimatorEvent()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000FD")]
		public class WeightCurve
		{
			[Serializable]
			[Token(Token = "0x20000FE")]
			public enum Type
			{
				[Token(Token = "0x4000794")]
				PositionWeight,
				[Token(Token = "0x4000795")]
				RotationWeight,
				[Token(Token = "0x4000796")]
				PositionOffsetX,
				[Token(Token = "0x4000797")]
				PositionOffsetY,
				[Token(Token = "0x4000798")]
				PositionOffsetZ,
				[Token(Token = "0x4000799")]
				Pull,
				[Token(Token = "0x400079A")]
				Reach,
				[Token(Token = "0x400079B")]
				RotateBoneWeight,
				[Token(Token = "0x400079C")]
				Push,
				[Token(Token = "0x400079D")]
				PushParent,
				[Token(Token = "0x400079E")]
				PoserWeight,
				[Token(Token = "0x400079F")]
				BendGoalWeight
			}

			[Token(Token = "0x4000791")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The type of the curve (InteractionObject.WeightCurve.Type).")]
			public Type type;

			[Token(Token = "0x4000792")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("The weight curve.")]
			public AnimationCurve curve;

			[Token(Token = "0x6000994")]
			[Address(RVA = "0xC78BA0", Offset = "0xC78BA0", VA = "0xC78BA0")]
			public float GetValue(float timer)
			{
				return default(float);
			}

			[Token(Token = "0x6000995")]
			[Address(RVA = "0xC79610", Offset = "0xC79610", VA = "0xC79610")]
			public WeightCurve()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000FF")]
		public class Multiplier
		{
			[Token(Token = "0x40007A0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The curve type to multiply.")]
			public WeightCurve.Type curve;

			[Token(Token = "0x40007A1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("The multiplier of the curve's value.")]
			public float multiplier;

			[Token(Token = "0x40007A2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("The resulting value will be applied to this channel.")]
			public WeightCurve.Type result;

			[Token(Token = "0x6000996")]
			[Address(RVA = "0xC791A8", Offset = "0xC791A8", VA = "0xC791A8")]
			public float GetValue(WeightCurve weightCurve, float timer)
			{
				return default(float);
			}

			[Token(Token = "0x6000997")]
			[Address(RVA = "0xC79618", Offset = "0xC79618", VA = "0xC79618")]
			public Multiplier()
			{
			}
		}

		[Token(Token = "0x4000778")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("If the Interaction System has a 'Look At' LookAtIK component assigned, will use it to make the character look at the specified Transform. If unassigned, will look at this GameObject.")]
		public Transform otherLookAtTarget;

		[Token(Token = "0x4000779")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The root Transform of the InteractionTargets. If null, will use this GameObject. GetComponentsInChildren<InteractionTarget>() will be used at initiation to find all InteractionTargets associated with this InteractionObject.")]
		public Transform otherTargetsRoot;

		[Token(Token = "0x400077A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("If assigned, all PositionOffset channels will be applied in the rotation space of this Transform. If not, they will be in the rotation space of the character.")]
		public Transform positionOffsetSpace;

		[Token(Token = "0x400077B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public WeightCurve[] weightCurves;

		[Token(Token = "0x400077C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Multiplier[] multipliers;

		[Token(Token = "0x400077D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public InteractionEvent[] events;

		[Token(Token = "0x4000780")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private InteractionTarget[] targets;

		[Token(Token = "0x17000145")]
		public float length
		{
			[Token(Token = "0x6000978")]
			[Address(RVA = "0xC78794", Offset = "0xC78794", VA = "0xC78794")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000979")]
			[Address(RVA = "0xC7879C", Offset = "0xC7879C", VA = "0xC7879C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000146")]
		public InteractionSystem lastUsedInteractionSystem
		{
			[Token(Token = "0x600097A")]
			[Address(RVA = "0xC787A4", Offset = "0xC787A4", VA = "0xC787A4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600097B")]
			[Address(RVA = "0xC787AC", Offset = "0xC787AC", VA = "0xC787AC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000147")]
		public Transform lookAtTarget
		{
			[Token(Token = "0x600097D")]
			[Address(RVA = "0xC78964", Offset = "0xC78964", VA = "0xC78964")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000148")]
		public Transform targetsRoot
		{
			[Token(Token = "0x6000985")]
			[Address(RVA = "0xC77D2C", Offset = "0xC77D2C", VA = "0xC77D2C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000970")]
		[Address(RVA = "0xC78574", Offset = "0xC78574", VA = "0xC78574")]
		[ContextMenu("User Manual")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6000971")]
		[Address(RVA = "0xC785B8", Offset = "0xC785B8", VA = "0xC785B8")]
		[ContextMenu("Scrpt Reference")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000972")]
		[Address(RVA = "0xC785FC", Offset = "0xC785FC", VA = "0xC785FC")]
		[ContextMenu("TUTORIAL VIDEO (PART 1: BASICS)")]
		private void OpenTutorial1()
		{
		}

		[Token(Token = "0x6000973")]
		[Address(RVA = "0xC78640", Offset = "0xC78640", VA = "0xC78640")]
		[ContextMenu("TUTORIAL VIDEO (PART 2: PICKING UP...)")]
		private void OpenTutorial2()
		{
		}

		[Token(Token = "0x6000974")]
		[Address(RVA = "0xC78684", Offset = "0xC78684", VA = "0xC78684")]
		[ContextMenu("TUTORIAL VIDEO (PART 3: ANIMATION)")]
		private void OpenTutorial3()
		{
		}

		[Token(Token = "0x6000975")]
		[Address(RVA = "0xC786C8", Offset = "0xC786C8", VA = "0xC786C8")]
		[ContextMenu("TUTORIAL VIDEO (PART 4: TRIGGERS)")]
		private void OpenTutorial4()
		{
		}

		[Token(Token = "0x6000976")]
		[Address(RVA = "0xC7870C", Offset = "0xC7870C", VA = "0xC7870C")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000977")]
		[Address(RVA = "0xC78750", Offset = "0xC78750", VA = "0xC78750")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x600097C")]
		[Address(RVA = "0xC787B4", Offset = "0xC787B4", VA = "0xC787B4")]
		public void Initiate()
		{
		}

		[Token(Token = "0x600097E")]
		[Address(RVA = "0xC789E4", Offset = "0xC789E4", VA = "0xC789E4")]
		public InteractionTarget GetTarget(FullBodyBipedEffector effectorType, InteractionSystem interactionSystem)
		{
			return null;
		}

		[Token(Token = "0x600097F")]
		[Address(RVA = "0xC76868", Offset = "0xC76868", VA = "0xC76868")]
		public bool CurveUsed(WeightCurve.Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000980")]
		[Address(RVA = "0xC78B34", Offset = "0xC78B34", VA = "0xC78B34")]
		public InteractionTarget[] GetTargets()
		{
			return null;
		}

		[Token(Token = "0x6000981")]
		[Address(RVA = "0xC7672C", Offset = "0xC7672C", VA = "0xC7672C")]
		public Transform GetTarget(FullBodyBipedEffector effectorType, string tag)
		{
			return null;
		}

		[Token(Token = "0x6000982")]
		[Address(RVA = "0xC76860", Offset = "0xC76860", VA = "0xC76860")]
		public void OnStartInteraction(InteractionSystem interactionSystem)
		{
		}

		[Token(Token = "0x6000983")]
		[Address(RVA = "0xC76FE0", Offset = "0xC76FE0", VA = "0xC76FE0")]
		public void Apply(IKSolverFullBodyBiped solver, FullBodyBipedEffector effector, InteractionTarget target, float timer, float weight)
		{
		}

		[Token(Token = "0x6000984")]
		[Address(RVA = "0xC778D8", Offset = "0xC778D8", VA = "0xC778D8")]
		public float GetValue(WeightCurve.Type weightCurveType, InteractionTarget target, float timer)
		{
			return default(float);
		}

		[Token(Token = "0x6000986")]
		[Address(RVA = "0xC791D8", Offset = "0xC791D8", VA = "0xC791D8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000987")]
		[Address(RVA = "0xC78BBC", Offset = "0xC78BBC", VA = "0xC78BBC")]
		private void Apply(IKSolverFullBodyBiped solver, FullBodyBipedEffector effector, WeightCurve.Type type, float value, float weight)
		{
		}

		[Token(Token = "0x6000988")]
		[Address(RVA = "0xC78B3C", Offset = "0xC78B3C", VA = "0xC78B3C")]
		private Transform GetTarget(FullBodyBipedEffector effectorType)
		{
			return null;
		}

		[Token(Token = "0x6000989")]
		[Address(RVA = "0xC7914C", Offset = "0xC7914C", VA = "0xC7914C")]
		private int GetWeightCurveIndex(WeightCurve.Type weightCurveType)
		{
			return default(int);
		}

		[Token(Token = "0x600098A")]
		[Address(RVA = "0xC791DC", Offset = "0xC791DC", VA = "0xC791DC")]
		private int GetMultiplierIndex(WeightCurve.Type weightCurveType)
		{
			return default(int);
		}

		[Token(Token = "0x600098B")]
		[Address(RVA = "0xC79238", Offset = "0xC79238", VA = "0xC79238")]
		public InteractionObject()
		{
		}
	}
	[Token(Token = "0x2000100")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Interaction System/Interaction System")]
	[HelpURL("https://www.youtube.com/watch?v=r5jiZnsDH3M")]
	public class InteractionSystem : MonoBehaviour
	{
		[Token(Token = "0x2000101")]
		public delegate void InteractionDelegate(FullBodyBipedEffector effectorType, InteractionObject interactionObject);

		[Token(Token = "0x2000102")]
		public delegate void InteractionEventDelegate(FullBodyBipedEffector effectorType, InteractionObject interactionObject, InteractionObject.InteractionEvent interactionEvent);

		[Token(Token = "0x40007A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("If not empty, only the targets with the specified tag will be used by this Interaction System.")]
		public string targetTag;

		[Token(Token = "0x40007A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The fade in time of the interaction.")]
		public float fadeInTime;

		[Token(Token = "0x40007A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("The master speed for all interactions.")]
		public float speed;

		[Token(Token = "0x40007A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("If > 0, lerps all the FBBIK channels used by the Interaction System back to their default or initial values when not in interaction.")]
		public float resetToDefaultsSpeed;

		[Token(Token = "0x40007A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Triggering")]
		[Tooltip("The collider that registers OnTriggerEnter and OnTriggerExit events with InteractionTriggers.")]
		[FormerlySerializedAs("collider")]
		public Collider characterCollider;

		[Token(Token = "0x40007A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Will be used by Interaction Triggers that need the camera's position. Assign the first person view character camera.")]
		[FormerlySerializedAs("camera")]
		public Transform FPSCamera;

		[Token(Token = "0x40007A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The layers that will be raycasted from the camera (along camera.forward). All InteractionTrigger look at target colliders should be included.")]
		public LayerMask camRaycastLayers;

		[Token(Token = "0x40007AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("Max distance of raycasting from the camera.")]
		public float camRaycastDistance;

		[Token(Token = "0x40007AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private List<InteractionTrigger> inContact;

		[Token(Token = "0x40007AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private List<int> bestRangeIndexes;

		[Token(Token = "0x40007AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public InteractionDelegate OnInteractionStart;

		[Token(Token = "0x40007AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public InteractionDelegate OnInteractionPause;

		[Token(Token = "0x40007B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public InteractionDelegate OnInteractionPickUp;

		[Token(Token = "0x40007B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public InteractionDelegate OnInteractionResume;

		[Token(Token = "0x40007B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public InteractionDelegate OnInteractionStop;

		[Token(Token = "0x40007B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public InteractionEventDelegate OnInteractionEvent;

		[Token(Token = "0x40007B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public RaycastHit raycastHit;

		[Token(Token = "0x40007B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Tooltip("Reference to the FBBIK component.")]
		[SerializeField]
		[Space(10f)]
		private FullBodyBipedIK fullBody;

		[Token(Token = "0x40007B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Tooltip("Handles looking at the interactions.")]
		public InteractionLookAt lookAt;

		[Token(Token = "0x40007B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private InteractionEffector[] interactionEffectors;

		[Token(Token = "0x40007B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Collider lastCollider;

		[Token(Token = "0x40007BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Collider c;

		[Token(Token = "0x17000149")]
		public bool inInteraction
		{
			[Token(Token = "0x60009A0")]
			[Address(RVA = "0xC79848", Offset = "0xC79848", VA = "0xC79848")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700014A")]
		public FullBodyBipedIK ik
		{
			[Token(Token = "0x60009BA")]
			[Address(RVA = "0xC7B2A8", Offset = "0xC7B2A8", VA = "0xC7B2A8")]
			get
			{
				return null;
			}
			[Token(Token = "0x60009BB")]
			[Address(RVA = "0xC7B2B0", Offset = "0xC7B2B0", VA = "0xC7B2B0")]
			set
			{
			}
		}

		[Token(Token = "0x1700014B")]
		public List<InteractionTrigger> triggersInRange
		{
			[Token(Token = "0x60009BC")]
			[Address(RVA = "0xC7B2B8", Offset = "0xC7B2B8", VA = "0xC7B2B8")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60009BD")]
			[Address(RVA = "0xC7B2C0", Offset = "0xC7B2C0", VA = "0xC7B2C0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700014C")]
		public bool initiated
		{
			[Token(Token = "0x60009BE")]
			[Address(RVA = "0xC7B2C8", Offset = "0xC7B2C8", VA = "0xC7B2C8")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60009BF")]
			[Address(RVA = "0xC7B2D0", Offset = "0xC7B2D0", VA = "0xC7B2D0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000998")]
		[Address(RVA = "0xC79628", Offset = "0xC79628", VA = "0xC79628")]
		[ContextMenu("User Manual")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6000999")]
		[Address(RVA = "0xC7966C", Offset = "0xC7966C", VA = "0xC7966C")]
		[ContextMenu("Scrpt Reference")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x600099A")]
		[Address(RVA = "0xC796B0", Offset = "0xC796B0", VA = "0xC796B0")]
		[ContextMenu("TUTORIAL VIDEO (PART 1: BASICS)")]
		private void OpenTutorial1()
		{
		}

		[Token(Token = "0x600099B")]
		[Address(RVA = "0xC796F4", Offset = "0xC796F4", VA = "0xC796F4")]
		[ContextMenu("TUTORIAL VIDEO (PART 2: PICKING UP...)")]
		private void OpenTutorial2()
		{
		}

		[Token(Token = "0x600099C")]
		[Address(RVA = "0xC79738", Offset = "0xC79738", VA = "0xC79738")]
		[ContextMenu("TUTORIAL VIDEO (PART 3: ANIMATION)")]
		private void OpenTutorial3()
		{
		}

		[Token(Token = "0x600099D")]
		[Address(RVA = "0xC7977C", Offset = "0xC7977C", VA = "0xC7977C")]
		[ContextMenu("TUTORIAL VIDEO (PART 4: TRIGGERS)")]
		private void OpenTutorial4()
		{
		}

		[Token(Token = "0x600099E")]
		[Address(RVA = "0xC797C0", Offset = "0xC797C0", VA = "0xC797C0")]
		[ContextMenu("Support")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x600099F")]
		[Address(RVA = "0xC79804", Offset = "0xC79804", VA = "0xC79804")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60009A1")]
		[Address(RVA = "0xC799C0", Offset = "0xC799C0", VA = "0xC799C0")]
		public bool IsInInteraction(FullBodyBipedEffector effectorType)
		{
			return default(bool);
		}

		[Token(Token = "0x60009A2")]
		[Address(RVA = "0xC79A78", Offset = "0xC79A78", VA = "0xC79A78")]
		public bool IsPaused(FullBodyBipedEffector effectorType)
		{
			return default(bool);
		}

		[Token(Token = "0x60009A3")]
		[Address(RVA = "0xC79B30", Offset = "0xC79B30", VA = "0xC79B30")]
		public bool IsPaused()
		{
			return default(bool);
		}

		[Token(Token = "0x60009A4")]
		[Address(RVA = "0xC79BC8", Offset = "0xC79BC8", VA = "0xC79BC8")]
		public bool IsInSync()
		{
			return default(bool);
		}

		[Token(Token = "0x60009A5")]
		[Address(RVA = "0xC79CAC", Offset = "0xC79CAC", VA = "0xC79CAC")]
		public bool StartInteraction(FullBodyBipedEffector effectorType, InteractionObject interactionObject, bool interrupt)
		{
			return default(bool);
		}

		[Token(Token = "0x60009A6")]
		[Address(RVA = "0xC79DA4", Offset = "0xC79DA4", VA = "0xC79DA4")]
		public bool PauseInteraction(FullBodyBipedEffector effectorType)
		{
			return default(bool);
		}

		[Token(Token = "0x60009A7")]
		[Address(RVA = "0xC79E28", Offset = "0xC79E28", VA = "0xC79E28")]
		public bool ResumeInteraction(FullBodyBipedEffector effectorType)
		{
			return default(bool);
		}

		[Token(Token = "0x60009A8")]
		[Address(RVA = "0xC79EAC", Offset = "0xC79EAC", VA = "0xC79EAC")]
		public bool StopInteraction(FullBodyBipedEffector effectorType)
		{
			return default(bool);
		}

		[Token(Token = "0x60009A9")]
		[Address(RVA = "0xC79F30", Offset = "0xC79F30", VA = "0xC79F30")]
		public void PauseAll()
		{
		}

		[Token(Token = "0x60009AA")]
		[Address(RVA = "0xC79F98", Offset = "0xC79F98", VA = "0xC79F98")]
		public void ResumeAll()
		{
		}

		[Token(Token = "0x60009AB")]
		[Address(RVA = "0xC7A000", Offset = "0xC7A000", VA = "0xC7A000")]
		public void StopAll()
		{
		}

		[Token(Token = "0x60009AC")]
		[Address(RVA = "0xC7A05C", Offset = "0xC7A05C", VA = "0xC7A05C")]
		public InteractionObject GetInteractionObject(FullBodyBipedEffector effectorType)
		{
			return null;
		}

		[Token(Token = "0x60009AD")]
		[Address(RVA = "0xC7A0DC", Offset = "0xC7A0DC", VA = "0xC7A0DC")]
		public float GetProgress(FullBodyBipedEffector effectorType)
		{
			return default(float);
		}

		[Token(Token = "0x60009AE")]
		[Address(RVA = "0xC7A184", Offset = "0xC7A184", VA = "0xC7A184")]
		public float GetMinActiveProgress()
		{
			return default(float);
		}

		[Token(Token = "0x60009AF")]
		[Address(RVA = "0xC7A254", Offset = "0xC7A254", VA = "0xC7A254")]
		public bool TriggerInteraction(int index, bool interrupt)
		{
			return default(bool);
		}

		[Token(Token = "0x60009B0")]
		[Address(RVA = "0xC7A4E4", Offset = "0xC7A4E4", VA = "0xC7A4E4")]
		public bool TriggerInteraction(int index, bool interrupt, out InteractionObject interactionObject)
		{
			return default(bool);
		}

		[Token(Token = "0x60009B1")]
		[Address(RVA = "0xC7A6A0", Offset = "0xC7A6A0", VA = "0xC7A6A0")]
		public bool TriggerInteraction(int index, bool interrupt, out InteractionTarget interactionTarget)
		{
			return default(bool);
		}

		[Token(Token = "0x60009B2")]
		[Address(RVA = "0xC7A908", Offset = "0xC7A908", VA = "0xC7A908")]
		public InteractionTrigger.Range GetClosestInteractionRange()
		{
			return null;
		}

		[Token(Token = "0x60009B3")]
		[Address(RVA = "0xC7AB94", Offset = "0xC7AB94", VA = "0xC7AB94")]
		public InteractionObject GetClosestInteractionObjectInRange()
		{
			return null;
		}

		[Token(Token = "0x60009B4")]
		[Address(RVA = "0xC7ABCC", Offset = "0xC7ABCC", VA = "0xC7ABCC")]
		public InteractionTarget GetClosestInteractionTargetInRange()
		{
			return null;
		}

		[Token(Token = "0x60009B5")]
		[Address(RVA = "0xC7AC2C", Offset = "0xC7AC2C", VA = "0xC7AC2C")]
		public InteractionObject[] GetClosestInteractionObjectsInRange()
		{
			return null;
		}

		[Token(Token = "0x60009B6")]
		[Address(RVA = "0xC7AD34", Offset = "0xC7AD34", VA = "0xC7AD34")]
		public InteractionTarget[] GetClosestInteractionTargetsInRange()
		{
			return null;
		}

		[Token(Token = "0x60009B7")]
		[Address(RVA = "0xC7AF14", Offset = "0xC7AF14", VA = "0xC7AF14")]
		public bool TriggerEffectorsReady(int index)
		{
			return default(bool);
		}

		[Token(Token = "0x60009B8")]
		[Address(RVA = "0xC7B188", Offset = "0xC7B188", VA = "0xC7B188")]
		public InteractionTrigger.Range GetTriggerRange(int index)
		{
			return null;
		}

		[Token(Token = "0x60009B9")]
		[Address(RVA = "0xC7A9F0", Offset = "0xC7A9F0", VA = "0xC7A9F0")]
		public int GetClosestTriggerIndex()
		{
			return default(int);
		}

		[Token(Token = "0x60009C0")]
		[Address(RVA = "0xC7B2DC", Offset = "0xC7B2DC", VA = "0xC7B2DC")]
		public void Start()
		{
		}

		[Token(Token = "0x60009C1")]
		[Address(RVA = "0xC7BA74", Offset = "0xC7BA74", VA = "0xC7BA74")]
		private void InteractionPause(FullBodyBipedEffector effector, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x60009C2")]
		[Address(RVA = "0xC7BA94", Offset = "0xC7BA94", VA = "0xC7BA94")]
		private void InteractionResume(FullBodyBipedEffector effector, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x60009C3")]
		[Address(RVA = "0xC7BAB0", Offset = "0xC7BAB0", VA = "0xC7BAB0")]
		private void InteractionStop(FullBodyBipedEffector effector, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x60009C4")]
		[Address(RVA = "0xC7BACC", Offset = "0xC7BACC", VA = "0xC7BACC")]
		private void LookAtInteraction(FullBodyBipedEffector effector, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x60009C5")]
		[Address(RVA = "0xC7BB20", Offset = "0xC7BB20", VA = "0xC7BB20")]
		public void OnTriggerEnter(Collider c)
		{
		}

		[Token(Token = "0x60009C6")]
		[Address(RVA = "0xC7BC8C", Offset = "0xC7BC8C", VA = "0xC7BC8C")]
		public void OnTriggerExit(Collider c)
		{
		}

		[Token(Token = "0x60009C7")]
		[Address(RVA = "0xC7BD88", Offset = "0xC7BD88", VA = "0xC7BD88")]
		private bool ContactIsInRange(int index, out int bestRangeIndex)
		{
			return default(bool);
		}

		[Token(Token = "0x60009C8")]
		[Address(RVA = "0xC7BF34", Offset = "0xC7BF34", VA = "0xC7BF34")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60009C9")]
		[Address(RVA = "0xC7C018", Offset = "0xC7C018", VA = "0xC7C018")]
		public void Update()
		{
		}

		[Token(Token = "0x60009CA")]
		[Address(RVA = "0xC7C2D8", Offset = "0xC7C2D8", VA = "0xC7C2D8")]
		private void Raycasting()
		{
		}

		[Token(Token = "0x60009CB")]
		[Address(RVA = "0xC7B82C", Offset = "0xC7B82C", VA = "0xC7B82C")]
		private void UpdateTriggerEventBroadcasting()
		{
		}

		[Token(Token = "0x60009CC")]
		[Address(RVA = "0xC7C408", Offset = "0xC7C408", VA = "0xC7C408")]
		private void UpdateEffectors()
		{
		}

		[Token(Token = "0x60009CD")]
		[Address(RVA = "0xC7C514", Offset = "0xC7C514", VA = "0xC7C514")]
		private void OnPreFBBIK()
		{
		}

		[Token(Token = "0x60009CE")]
		[Address(RVA = "0xC7C59C", Offset = "0xC7C59C", VA = "0xC7C59C")]
		private void OnPostFBBIK()
		{
		}

		[Token(Token = "0x60009CF")]
		[Address(RVA = "0xC7C65C", Offset = "0xC7C65C", VA = "0xC7C65C")]
		private void OnFixTransforms()
		{
		}

		[Token(Token = "0x60009D0")]
		[Address(RVA = "0xC7C674", Offset = "0xC7C674", VA = "0xC7C674")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60009D1")]
		[Address(RVA = "0xC798E0", Offset = "0xC798E0", VA = "0xC798E0")]
		private bool IsValid(bool log)
		{
			return default(bool);
		}

		[Token(Token = "0x60009D2")]
		[Address(RVA = "0xC7A3D0", Offset = "0xC7A3D0", VA = "0xC7A3D0")]
		private bool TriggerIndexIsValid(int index)
		{
			return default(bool);
		}

		[Token(Token = "0x60009D3")]
		[Address(RVA = "0xC7CA6C", Offset = "0xC7CA6C", VA = "0xC7CA6C")]
		public InteractionSystem()
		{
		}
	}
	[Token(Token = "0x2000103")]
	[HelpURL("https://www.youtube.com/watch?v=r5jiZnsDH3M")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Interaction System/Interaction Target")]
	public class InteractionTarget : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000104")]
		public enum RotationMode
		{
			[Token(Token = "0x40007C8")]
			TwoDOF,
			[Token(Token = "0x40007C9")]
			ThreeDOF
		}

		[Serializable]
		[Token(Token = "0x2000105")]
		public class Multiplier
		{
			[Token(Token = "0x40007CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The curve type (InteractionObject.WeightCurve.Type).")]
			public InteractionObject.WeightCurve.Type curve;

			[Token(Token = "0x40007CB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("Multiplier of the curve's value.")]
			public float multiplier;

			[Token(Token = "0x60009E8")]
			[Address(RVA = "0xC7DAC4", Offset = "0xC7DAC4", VA = "0xC7DAC4")]
			public Multiplier()
			{
			}
		}

		[Token(Token = "0x40007BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The type of the FBBIK effector.")]
		public FullBodyBipedEffector effectorType;

		[Token(Token = "0x40007BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("InteractionObject weight curve multipliers for this effector target.")]
		public Multiplier[] multipliers;

		[Token(Token = "0x40007BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The interaction speed multiplier for this effector. This can be used to make interactions faster/slower for specific effectors.")]
		public float interactionSpeedMlp;

		[Token(Token = "0x40007BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The pivot to twist/swing this interaction target about. For symmetric objects that can be interacted with from a certain angular range.")]
		public Transform pivot;

		[Token(Token = "0x40007BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("2 or 3 degrees of freedom to match this InteractionTarget's rotation to the effector bone rotation.")]
		public RotationMode rotationMode;

		[Token(Token = "0x40007C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("The axis of twisting the interaction target (blue line).")]
		public UnityEngine.Vector3 twistAxis;

		[Token(Token = "0x40007C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("The weight of twisting the interaction target towards the effector bone in the start of the interaction.")]
		public float twistWeight;

		[Token(Token = "0x40007C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("The weight of swinging the interaction target towards the effector bone in the start of the interaction. Swing is defined as a 3-DOF rotation around any axis, while twist is only around the twist axis.")]
		public float swingWeight;

		[Token(Token = "0x40007C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The weight of rotating this InteractionTarget to the effector bone in the start of the interaction (and during if 'Rotate Once' is disabled")]
		[Range(0f, 1f)]
		public float threeDOFWeight;

		[Token(Token = "0x40007C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Tooltip("If true, will twist/swing around the pivot only once at the start of the interaction. If false, will continue rotating throuout the whole interaction.")]
		public bool rotateOnce;

		[Token(Token = "0x40007C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Quaternion defaultLocalRotation;

		[Token(Token = "0x40007C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Transform lastPivot;

		[Token(Token = "0x60009DC")]
		[Address(RVA = "0xC7D100", Offset = "0xC7D100", VA = "0xC7D100")]
		[ContextMenu("User Manual")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x60009DD")]
		[Address(RVA = "0xC7D144", Offset = "0xC7D144", VA = "0xC7D144")]
		[ContextMenu("Scrpt Reference")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x60009DE")]
		[Address(RVA = "0xC7D188", Offset = "0xC7D188", VA = "0xC7D188")]
		[ContextMenu("TUTORIAL VIDEO (PART 1: BASICS)")]
		private void OpenTutorial1()
		{
		}

		[Token(Token = "0x60009DF")]
		[Address(RVA = "0xC7D1CC", Offset = "0xC7D1CC", VA = "0xC7D1CC")]
		[ContextMenu("TUTORIAL VIDEO (PART 2: PICKING UP...)")]
		private void OpenTutorial2()
		{
		}

		[Token(Token = "0x60009E0")]
		[Address(RVA = "0xC7D210", Offset = "0xC7D210", VA = "0xC7D210")]
		[ContextMenu("TUTORIAL VIDEO (PART 3: ANIMATION)")]
		private void OpenTutorial3()
		{
		}

		[Token(Token = "0x60009E1")]
		[Address(RVA = "0xC7D254", Offset = "0xC7D254", VA = "0xC7D254")]
		[ContextMenu("TUTORIAL VIDEO (PART 4: TRIGGERS)")]
		private void OpenTutorial4()
		{
		}

		[Token(Token = "0x60009E2")]
		[Address(RVA = "0xC7D298", Offset = "0xC7D298", VA = "0xC7D298")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60009E3")]
		[Address(RVA = "0xC7D2DC", Offset = "0xC7D2DC", VA = "0xC7D2DC")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60009E4")]
		[Address(RVA = "0xC7D320", Offset = "0xC7D320", VA = "0xC7D320")]
		public float GetValue(InteractionObject.WeightCurve.Type curveType)
		{
			return default(float);
		}

		[Token(Token = "0x60009E5")]
		[Address(RVA = "0xC7D384", Offset = "0xC7D384", VA = "0xC7D384")]
		public void ResetRotation()
		{
		}

		[Token(Token = "0x60009E6")]
		[Address(RVA = "0xC7D410", Offset = "0xC7D410", VA = "0xC7D410")]
		public void RotateTo(Transform bone)
		{
		}

		[Token(Token = "0x60009E7")]
		[Address(RVA = "0xC7DA50", Offset = "0xC7DA50", VA = "0xC7DA50")]
		public InteractionTarget()
		{
		}
	}
	[Token(Token = "0x2000106")]
	[HelpURL("https://www.youtube.com/watch?v=-TDZpNjt2mk&index=15&list=PLVxSIA1OaTOu8Nos3CalXbJ2DrKnntMv6")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Interaction System/Interaction Trigger")]
	public class InteractionTrigger : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000107")]
		public class CharacterPosition
		{
			[Token(Token = "0x40007CD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("If false, will not care where the character stands, as long as it is in contact with the trigger collider.")]
			public bool use;

			[Token(Token = "0x40007CE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("The offset of the character's position relative to the trigger in XZ plane. Y position of the character is unlimited as long as it is contact with the collider.")]
			public UnityEngine.Vector2 offset;

			[Token(Token = "0x40007CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[Tooltip("Angle offset from the default forward direction.")]
			[Range(-180f, 180f)]
			public float angleOffset;

			[Token(Token = "0x40007D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("Max angular offset of the character's forward from the direction of this trigger.")]
			[Range(0f, 180f)]
			public float maxAngle;

			[Token(Token = "0x40007D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[Tooltip("Max offset of the character's position from this range's center.")]
			public float radius;

			[Token(Token = "0x40007D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("If true, will rotate the trigger around it's Y axis relative to the position of the character, so the object can be interacted with from all sides.")]
			public bool orbit;

			[Token(Token = "0x40007D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
			[Tooltip("Fixes the Y axis of the trigger to Vector3.up. This makes the trigger symmetrical relative to the object. For example a gun will be able to be picked up from the same direction relative to the barrel no matter which side the gun is resting on.")]
			public bool fixYAxis;

			[Token(Token = "0x1700014D")]
			public UnityEngine.Vector3 offset3D
			{
				[Token(Token = "0x60009F0")]
				[Address(RVA = "0xC7DEDC", Offset = "0xC7DEDC", VA = "0xC7DEDC")]
				get
				{
					return default(UnityEngine.Vector3);
				}
			}

			[Token(Token = "0x1700014E")]
			public UnityEngine.Vector3 direction3D
			{
				[Token(Token = "0x60009F1")]
				[Address(RVA = "0xC7DEE8", Offset = "0xC7DEE8", VA = "0xC7DEE8")]
				get
				{
					return default(UnityEngine.Vector3);
				}
			}

			[Token(Token = "0x60009F2")]
			[Address(RVA = "0xC7DFA8", Offset = "0xC7DFA8", VA = "0xC7DFA8")]
			public bool IsInRange(Transform character, Transform trigger, out float error)
			{
				return default(bool);
			}

			[Token(Token = "0x60009F3")]
			[Address(RVA = "0xC7E70C", Offset = "0xC7E70C", VA = "0xC7E70C")]
			public CharacterPosition()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000108")]
		public class CameraPosition
		{
			[Token(Token = "0x40007D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("What the camera should be looking at to trigger the interaction? If null, this camera position will not be used.")]
			public Collider lookAtTarget;

			[Token(Token = "0x40007D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("The direction from the lookAtTarget towards the camera (in lookAtTarget's space).")]
			public UnityEngine.Vector3 direction;

			[Token(Token = "0x40007D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[Tooltip("Max distance from the lookAtTarget to the camera.")]
			public float maxDistance;

			[Token(Token = "0x40007D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("Max angle between the direction and the direction towards the camera.")]
			[Range(0f, 180f)]
			public float maxAngle;

			[Token(Token = "0x40007D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[Tooltip("Fixes the Y axis of the trigger to Vector3.up. This makes the trigger symmetrical relative to the object.")]
			public bool fixYAxis;

			[Token(Token = "0x60009F4")]
			[Address(RVA = "0xC7E720", Offset = "0xC7E720", VA = "0xC7E720")]
			public Quaternion GetRotation()
			{
				return default(Quaternion);
			}

			[Token(Token = "0x60009F5")]
			[Address(RVA = "0xC7E898", Offset = "0xC7E898", VA = "0xC7E898")]
			public bool IsInRange(Transform raycastFrom, RaycastHit hit, Transform trigger, out float error)
			{
				return default(bool);
			}

			[Token(Token = "0x60009F6")]
			[Address(RVA = "0xC7EBA0", Offset = "0xC7EBA0", VA = "0xC7EBA0")]
			public CameraPosition()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000109")]
		public class Range
		{
			[Serializable]
			[Token(Token = "0x200010A")]
			public class Interaction
			{
				[Token(Token = "0x40007DE")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[Tooltip("The InteractionObject to interact with.")]
				public InteractionObject interactionObject;

				[Token(Token = "0x40007DF")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				[Tooltip("The effectors to interact with.")]
				public FullBodyBipedEffector[] effectors;

				[Token(Token = "0x60009F9")]
				[Address(RVA = "0xC7EC24", Offset = "0xC7EC24", VA = "0xC7EC24")]
				public Interaction()
				{
				}
			}

			[Token(Token = "0x40007D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[HideInInspector]
			public string name;

			[Token(Token = "0x40007DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[HideInInspector]
			public bool show;

			[Token(Token = "0x40007DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("The range for the character's position and rotation.")]
			public CharacterPosition characterPosition;

			[Token(Token = "0x40007DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("The range for the character camera's position and rotation.")]
			public CameraPosition cameraPosition;

			[Token(Token = "0x40007DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[Tooltip("Definitions of the interactions associated with this range.")]
			public Interaction[] interactions;

			[Token(Token = "0x60009F7")]
			[Address(RVA = "0xC7DDD4", Offset = "0xC7DDD4", VA = "0xC7DDD4")]
			public bool IsInRange(Transform character, Transform raycastFrom, RaycastHit raycastHit, Transform trigger, out float maxError)
			{
				return default(bool);
			}

			[Token(Token = "0x60009F8")]
			[Address(RVA = "0xC7EC14", Offset = "0xC7EC14", VA = "0xC7EC14")]
			public Range()
			{
			}
		}

		[Token(Token = "0x40007CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The valid ranges of the character's and/or it's camera's position for triggering interaction when the character is in contact with the collider of this trigger.")]
		public Range[] ranges;

		[Token(Token = "0x60009E9")]
		[Address(RVA = "0xC7DACC", Offset = "0xC7DACC", VA = "0xC7DACC")]
		[ContextMenu("User Manual")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x60009EA")]
		[Address(RVA = "0xC7DB10", Offset = "0xC7DB10", VA = "0xC7DB10")]
		[ContextMenu("Scrpt Reference")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x60009EB")]
		[Address(RVA = "0xC7DB54", Offset = "0xC7DB54", VA = "0xC7DB54")]
		[ContextMenu("TUTORIAL VIDEO")]
		private void OpenTutorial4()
		{
		}

		[Token(Token = "0x60009EC")]
		[Address(RVA = "0xC7DB98", Offset = "0xC7DB98", VA = "0xC7DB98")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60009ED")]
		[Address(RVA = "0xC7DBDC", Offset = "0xC7DBDC", VA = "0xC7DBDC")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60009EE")]
		[Address(RVA = "0xC7DC20", Offset = "0xC7DC20", VA = "0xC7DC20")]
		public int GetBestRangeIndex(Transform character, Transform raycastFrom, RaycastHit raycastHit)
		{
			return default(int);
		}

		[Token(Token = "0x60009EF")]
		[Address(RVA = "0xC7DE84", Offset = "0xC7DE84", VA = "0xC7DE84")]
		public InteractionTrigger()
		{
		}
	}
	[Token(Token = "0x200010B")]
	public class GenericPoser : Poser
	{
		[Serializable]
		[Token(Token = "0x200010C")]
		public class Map
		{
			[Token(Token = "0x40007E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform bone;

			[Token(Token = "0x40007E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Transform target;

			[Token(Token = "0x40007E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private UnityEngine.Vector3 defaultLocalPosition;

			[Token(Token = "0x40007E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private Quaternion defaultLocalRotation;

			[Token(Token = "0x6000A01")]
			[Address(RVA = "0xC7EF18", Offset = "0xC7EF18", VA = "0xC7EF18")]
			public Map(Transform bone, Transform target)
			{
			}

			[Token(Token = "0x6000A02")]
			[Address(RVA = "0xC7F254", Offset = "0xC7F254", VA = "0xC7F254")]
			public void StoreDefaultState()
			{
			}

			[Token(Token = "0x6000A03")]
			[Address(RVA = "0xC7F214", Offset = "0xC7F214", VA = "0xC7F214")]
			public void FixTransform()
			{
			}

			[Token(Token = "0x6000A04")]
			[Address(RVA = "0xC7F098", Offset = "0xC7F098", VA = "0xC7F098")]
			public void Update(float localRotationWeight, float localPositionWeight)
			{
			}
		}

		[Token(Token = "0x40007E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Map[] maps;

		[Token(Token = "0x60009FA")]
		[Address(RVA = "0xC7EC2C", Offset = "0xC7EC2C", VA = "0xC7EC2C", Slot = "7")]
		[ContextMenu("Auto-Mapping")]
		public override void AutoMapping()
		{
		}

		[Token(Token = "0x60009FB")]
		[Address(RVA = "0xC7EFA4", Offset = "0xC7EFA4", VA = "0xC7EFA4", Slot = "8")]
		protected override void InitiatePoser()
		{
		}

		[Token(Token = "0x60009FC")]
		[Address(RVA = "0xC7EFA8", Offset = "0xC7EFA8", VA = "0xC7EFA8", Slot = "9")]
		protected override void UpdatePoser()
		{
		}

		[Token(Token = "0x60009FD")]
		[Address(RVA = "0xC7F1B8", Offset = "0xC7F1B8", VA = "0xC7F1B8", Slot = "10")]
		protected override void FixPoserTransforms()
		{
		}

		[Token(Token = "0x60009FE")]
		[Address(RVA = "0xC7EF48", Offset = "0xC7EF48", VA = "0xC7EF48")]
		private void StoreDefaultState()
		{
		}

		[Token(Token = "0x60009FF")]
		[Address(RVA = "0xC7EE84", Offset = "0xC7EE84", VA = "0xC7EE84")]
		private Transform GetTargetNamed(string tName, Transform[] array)
		{
			return null;
		}

		[Token(Token = "0x6000A00")]
		[Address(RVA = "0xC7F298", Offset = "0xC7F298", VA = "0xC7F298")]
		public GenericPoser()
		{
		}
	}
	[Token(Token = "0x200010D")]
	public class HandPoser : Poser
	{
		[Token(Token = "0x40007E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected Transform[] children;

		[Token(Token = "0x40007E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform _poseRoot;

		[Token(Token = "0x40007E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform[] poseChildren;

		[Token(Token = "0x40007E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private UnityEngine.Vector3[] defaultLocalPositions;

		[Token(Token = "0x40007E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Quaternion[] defaultLocalRotations;

		[Token(Token = "0x6000A05")]
		[Address(RVA = "0xC7F2B8", Offset = "0xC7F2B8", VA = "0xC7F2B8", Slot = "7")]
		public override void AutoMapping()
		{
		}

		[Token(Token = "0x6000A06")]
		[Address(RVA = "0xC7F374", Offset = "0xC7F374", VA = "0xC7F374", Slot = "8")]
		protected override void InitiatePoser()
		{
		}

		[Token(Token = "0x6000A07")]
		[Address(RVA = "0xC7F518", Offset = "0xC7F518", VA = "0xC7F518", Slot = "10")]
		protected override void FixPoserTransforms()
		{
		}

		[Token(Token = "0x6000A08")]
		[Address(RVA = "0xC7F600", Offset = "0xC7F600", VA = "0xC7F600", Slot = "9")]
		protected override void UpdatePoser()
		{
		}

		[Token(Token = "0x6000A09")]
		[Address(RVA = "0xC7F3C8", Offset = "0xC7F3C8", VA = "0xC7F3C8")]
		protected void StoreDefaultState()
		{
		}

		[Token(Token = "0x6000A0A")]
		[Address(RVA = "0xC7F930", Offset = "0xC7F930", VA = "0xC7F930")]
		public HandPoser()
		{
		}
	}
	[Token(Token = "0x200010E")]
	public abstract class Poser : SolverManager
	{
		[Token(Token = "0x40007EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform poseRoot;

		[Token(Token = "0x40007EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Range(0f, 1f)]
		public float weight;

		[Token(Token = "0x40007EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Range(0f, 1f)]
		public float localRotationWeight;

		[Token(Token = "0x40007ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Range(0f, 1f)]
		public float localPositionWeight;

		[Token(Token = "0x40007EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private bool initiated;

		[Token(Token = "0x6000A0B")]
		public abstract void AutoMapping();

		[Token(Token = "0x6000A0C")]
		[Address(RVA = "0xC7F940", Offset = "0xC7F940", VA = "0xC7F940")]
		public void UpdateManual()
		{
		}

		[Token(Token = "0x6000A0D")]
		protected abstract void InitiatePoser();

		[Token(Token = "0x6000A0E")]
		protected abstract void UpdatePoser();

		[Token(Token = "0x6000A0F")]
		protected abstract void FixPoserTransforms();

		[Token(Token = "0x6000A10")]
		[Address(RVA = "0xC7F94C", Offset = "0xC7F94C", VA = "0xC7F94C", Slot = "5")]
		protected override void UpdateSolver()
		{
		}

		[Token(Token = "0x6000A11")]
		[Address(RVA = "0xC7F990", Offset = "0xC7F990", VA = "0xC7F990", Slot = "4")]
		protected override void InitiateSolver()
		{
		}

		[Token(Token = "0x6000A12")]
		[Address(RVA = "0xC7F9BC", Offset = "0xC7F9BC", VA = "0xC7F9BC", Slot = "6")]
		protected override void FixTransforms()
		{
		}

		[Token(Token = "0x6000A13")]
		[Address(RVA = "0xC7F2A8", Offset = "0xC7F2A8", VA = "0xC7F2A8")]
		protected Poser()
		{
		}
	}
	[Token(Token = "0x200010F")]
	public class RagdollUtility : MonoBehaviour
	{
		[Token(Token = "0x2000110")]
		public class Rigidbone
		{
			[Token(Token = "0x40007FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Rigidbody r;

			[Token(Token = "0x4000800")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Transform t;

			[Token(Token = "0x4000801")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Collider collider;

			[Token(Token = "0x4000802")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Joint joint;

			[Token(Token = "0x4000803")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Rigidbody c;

			[Token(Token = "0x4000804")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public bool updateAnchor;

			[Token(Token = "0x4000805")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public UnityEngine.Vector3 deltaPosition;

			[Token(Token = "0x4000806")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Quaternion deltaRotation;

			[Token(Token = "0x4000807")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public float deltaTime;

			[Token(Token = "0x4000808")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public UnityEngine.Vector3 lastPosition;

			[Token(Token = "0x4000809")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public Quaternion lastRotation;

			[Token(Token = "0x6000A26")]
			[Address(RVA = "0xC7FF7C", Offset = "0xC7FF7C", VA = "0xC7FF7C")]
			public Rigidbone(Rigidbody r)
			{
			}

			[Token(Token = "0x6000A27")]
			[Address(RVA = "0xC80AC4", Offset = "0xC80AC4", VA = "0xC80AC4")]
			public void RecordVelocity()
			{
			}

			[Token(Token = "0x6000A28")]
			[Address(RVA = "0xC80884", Offset = "0xC80884", VA = "0xC80884")]
			public void WakeUp(float velocityWeight, float angularVelocityWeight)
			{
			}
		}

		[Token(Token = "0x2000111")]
		public class Child
		{
			[Token(Token = "0x400080A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform t;

			[Token(Token = "0x400080B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public UnityEngine.Vector3 localPosition;

			[Token(Token = "0x400080C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public Quaternion localRotation;

			[Token(Token = "0x6000A29")]
			[Address(RVA = "0xC800D0", Offset = "0xC800D0", VA = "0xC800D0")]
			public Child(Transform transform)
			{
			}

			[Token(Token = "0x6000A2A")]
			[Address(RVA = "0xC80BDC", Offset = "0xC80BDC", VA = "0xC80BDC")]
			public void FixTransform(float weight)
			{
			}

			[Token(Token = "0x6000A2B")]
			[Address(RVA = "0xC80B98", Offset = "0xC80B98", VA = "0xC80B98")]
			public void StoreLocalState()
			{
			}
		}

		[Token(Token = "0x2000112")]
		[CompilerGenerated]
		private sealed class <DisableRagdollSmooth>d__21 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400080D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400080E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400080F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public RagdollUtility <>4__this;

			[Token(Token = "0x17000151")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000A2F")]
				[Address(RVA = "0xC810E0", Offset = "0xC810E0", VA = "0xC810E0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000152")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000A31")]
				[Address(RVA = "0xC81128", Offset = "0xC81128", VA = "0xC81128", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000A2C")]
			[Address(RVA = "0xC8012C", Offset = "0xC8012C", VA = "0xC8012C")]
			[DebuggerHidden]
			public <DisableRagdollSmooth>d__21(int <>1__state)
			{
			}

			[Token(Token = "0x6000A2D")]
			[Address(RVA = "0xC80EFC", Offset = "0xC80EFC", VA = "0xC80EFC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000A2E")]
			[Address(RVA = "0xC80F00", Offset = "0xC80F00", VA = "0xC80F00", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000A30")]
			[Address(RVA = "0xC810E8", Offset = "0xC810E8", VA = "0xC810E8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40007EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("If you have multiple IK components, then this should be the one that solves last each frame.")]
		public IK ik;

		[Token(Token = "0x40007F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("How long does it take to blend from ragdoll to animation?")]
		public float ragdollToAnimationTime;

		[Token(Token = "0x40007F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("If true, IK can be used on top of physical ragdoll simulation.")]
		public bool applyIkOnRagdoll;

		[Token(Token = "0x40007F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("How much velocity transfer from animation to ragdoll?")]
		public float applyVelocity;

		[Token(Token = "0x40007F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("How much angular velocity to transfer from animation to ragdoll?")]
		public float applyAngularVelocity;

		[Token(Token = "0x40007F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Animator animator;

		[Token(Token = "0x40007F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Rigidbone[] rigidbones;

		[Token(Token = "0x40007F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Child[] children;

		[Token(Token = "0x40007F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool enableRagdollFlag;

		[Token(Token = "0x40007F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private AnimatorUpdateMode animatorUpdateMode;

		[Token(Token = "0x40007F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private IK[] allIKComponents;

		[Token(Token = "0x40007FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool[] fixTransforms;

		[Token(Token = "0x40007FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float ragdollWeight;

		[Token(Token = "0x40007FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float ragdollWeightV;

		[Token(Token = "0x40007FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool fixedFrame;

		[Token(Token = "0x40007FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool[] disabledIKComponents;

		[Token(Token = "0x1700014F")]
		private bool isRagdoll
		{
			[Token(Token = "0x6000A1F")]
			[Address(RVA = "0xC7FA00", Offset = "0xC7FA00", VA = "0xC7FA00")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000150")]
		private bool ikUsed
		{
			[Token(Token = "0x6000A21")]
			[Address(RVA = "0xC804B8", Offset = "0xC804B8", VA = "0xC804B8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000A14")]
		[Address(RVA = "0xC7F9D4", Offset = "0xC7F9D4", VA = "0xC7F9D4")]
		public void EnableRagdoll()
		{
		}

		[Token(Token = "0x6000A15")]
		[Address(RVA = "0xC7FA64", Offset = "0xC7FA64", VA = "0xC7FA64")]
		public void DisableRagdoll()
		{
		}

		[Token(Token = "0x6000A16")]
		[Address(RVA = "0xC7FB70", Offset = "0xC7FB70", VA = "0xC7FB70")]
		public void Start()
		{
		}

		[Token(Token = "0x6000A17")]
		[Address(RVA = "0xC7FB08", Offset = "0xC7FB08", VA = "0xC7FB08")]
		[IteratorStateMachine(typeof(<DisableRagdollSmooth>d__21))]
		private IEnumerator DisableRagdollSmooth()
		{
			return null;
		}

		[Token(Token = "0x6000A18")]
		[Address(RVA = "0xC80154", Offset = "0xC80154", VA = "0xC80154")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A19")]
		[Address(RVA = "0xC8037C", Offset = "0xC8037C", VA = "0xC8037C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000A1A")]
		[Address(RVA = "0xC8041C", Offset = "0xC8041C", VA = "0xC8041C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000A1B")]
		[Address(RVA = "0xC8060C", Offset = "0xC8060C", VA = "0xC8060C")]
		private void AfterLastIK()
		{
		}

		[Token(Token = "0x6000A1C")]
		[Address(RVA = "0xC8048C", Offset = "0xC8048C", VA = "0xC8048C")]
		private void AfterAnimation()
		{
		}

		[Token(Token = "0x6000A1D")]
		[Address(RVA = "0xC805D8", Offset = "0xC805D8", VA = "0xC805D8")]
		private void OnFinalPose()
		{
		}

		[Token(Token = "0x6000A1E")]
		[Address(RVA = "0xC8068C", Offset = "0xC8068C", VA = "0xC8068C")]
		private void RagdollEnabler()
		{
		}

		[Token(Token = "0x6000A20")]
		[Address(RVA = "0xC80630", Offset = "0xC80630", VA = "0xC80630")]
		private void RecordVelocities()
		{
		}

		[Token(Token = "0x6000A22")]
		[Address(RVA = "0xC7FAAC", Offset = "0xC7FAAC", VA = "0xC7FAAC")]
		private void StoreLocalState()
		{
		}

		[Token(Token = "0x6000A23")]
		[Address(RVA = "0xC803B0", Offset = "0xC803B0", VA = "0xC803B0")]
		private void FixTransforms(float weight)
		{
		}

		[Token(Token = "0x6000A24")]
		[Address(RVA = "0xC80CEC", Offset = "0xC80CEC", VA = "0xC80CEC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000A25")]
		[Address(RVA = "0xC80E04", Offset = "0xC80E04", VA = "0xC80E04")]
		public RagdollUtility()
		{
		}
	}
	[Token(Token = "0x2000113")]
	public abstract class RotationLimit : MonoBehaviour
	{
		[Token(Token = "0x4000810")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEngine.Vector3 axis;

		[Token(Token = "0x4000811")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[HideInInspector]
		public Quaternion defaultLocalRotation;

		[Token(Token = "0x4000813")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		private bool initiated;

		[Token(Token = "0x4000814")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x36")]
		private bool applicationQuit;

		[Token(Token = "0x4000815")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x37")]
		private bool defaultLocalRotationSet;

		[Token(Token = "0x17000153")]
		public UnityEngine.Vector3 secondaryAxis
		{
			[Token(Token = "0x6000A37")]
			[Address(RVA = "0xC81594", Offset = "0xC81594", VA = "0xC81594")]
			get
			{
				return default(UnityEngine.Vector3);
			}
		}

		[Token(Token = "0x17000154")]
		public UnityEngine.Vector3 crossAxis
		{
			[Token(Token = "0x6000A38")]
			[Address(RVA = "0xC815A0", Offset = "0xC815A0", VA = "0xC815A0")]
			get
			{
				return default(UnityEngine.Vector3);
			}
		}

		[Token(Token = "0x17000155")]
		public bool defaultLocalRotationOverride
		{
			[Token(Token = "0x6000A39")]
			[Address(RVA = "0xC815D0", Offset = "0xC815D0", VA = "0xC815D0")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000A3A")]
			[Address(RVA = "0xC815D8", Offset = "0xC815D8", VA = "0xC815D8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000A32")]
		[Address(RVA = "0xC81130", Offset = "0xC81130", VA = "0xC81130")]
		public void SetDefaultLocalRotation()
		{
		}

		[Token(Token = "0x6000A33")]
		[Address(RVA = "0xC8116C", Offset = "0xC8116C", VA = "0xC8116C")]
		public void SetDefaultLocalRotation(Quaternion localRotation)
		{
		}

		[Token(Token = "0x6000A34")]
		[Address(RVA = "0xC81184", Offset = "0xC81184", VA = "0xC81184")]
		public Quaternion GetLimitedLocalRotation(Quaternion localRotation, out bool changed)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000A35")]
		[Address(RVA = "0xC81504", Offset = "0xC81504", VA = "0xC81504")]
		public bool Apply()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A36")]
		[Address(RVA = "0xC81568", Offset = "0xC81568", VA = "0xC81568")]
		public void Disable()
		{
		}

		[Token(Token = "0x6000A3B")]
		protected abstract Quaternion LimitRotation(Quaternion rotation);

		[Token(Token = "0x6000A3C")]
		[Address(RVA = "0xC81408", Offset = "0xC81408", VA = "0xC81408")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000A3D")]
		[Address(RVA = "0xC815E4", Offset = "0xC815E4", VA = "0xC815E4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000A3E")]
		[Address(RVA = "0xC815E8", Offset = "0xC815E8", VA = "0xC815E8")]
		public void LogWarning(string message)
		{
		}

		[Token(Token = "0x6000A3F")]
		[Address(RVA = "0xC81610", Offset = "0xC81610", VA = "0xC81610")]
		protected static Quaternion Limit1DOF(Quaternion rotation, UnityEngine.Vector3 axis)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000A40")]
		[Address(RVA = "0xC816E4", Offset = "0xC816E4", VA = "0xC816E4")]
		protected static Quaternion LimitTwist(Quaternion rotation, UnityEngine.Vector3 axis, UnityEngine.Vector3 orthoAxis, float twistLimit)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000A41")]
		[Address(RVA = "0xC8193C", Offset = "0xC8193C", VA = "0xC8193C")]
		protected static float GetOrthogonalAngle(UnityEngine.Vector3 v1, UnityEngine.Vector3 v2, UnityEngine.Vector3 normal)
		{
			return default(float);
		}

		[Token(Token = "0x6000A42")]
		[Address(RVA = "0xC81A90", Offset = "0xC81A90", VA = "0xC81A90")]
		protected RotationLimit()
		{
		}
	}
	[Token(Token = "0x2000114")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page14.html")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Rotation Limits/Rotation Limit Angle")]
	public class RotationLimitAngle : RotationLimit
	{
		[Token(Token = "0x4000816")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Range(0f, 180f)]
		public float limit;

		[Token(Token = "0x4000817")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Range(0f, 180f)]
		public float twistLimit;

		[Token(Token = "0x6000A43")]
		[Address(RVA = "0xC81AF0", Offset = "0xC81AF0", VA = "0xC81AF0")]
		[ContextMenu("User Manual")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6000A44")]
		[Address(RVA = "0xC81B34", Offset = "0xC81B34", VA = "0xC81B34")]
		[ContextMenu("Scrpt Reference")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000A45")]
		[Address(RVA = "0xC81B78", Offset = "0xC81B78", VA = "0xC81B78")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000A46")]
		[Address(RVA = "0xC81BBC", Offset = "0xC81BBC", VA = "0xC81BBC")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000A47")]
		[Address(RVA = "0xC81C00", Offset = "0xC81C00", VA = "0xC81C00", Slot = "4")]
		protected override Quaternion LimitRotation(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000A48")]
		[Address(RVA = "0xC81C38", Offset = "0xC81C38", VA = "0xC81C38")]
		private Quaternion LimitSwing(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000A49")]
		[Address(RVA = "0xC81F5C", Offset = "0xC81F5C", VA = "0xC81F5C")]
		public RotationLimitAngle()
		{
		}
	}
	[Token(Token = "0x2000115")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page14.html")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Rotation Limits/Rotation Limit Hinge")]
	public class RotationLimitHinge : RotationLimit
	{
		[Token(Token = "0x4000818")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool useLimits;

		[Token(Token = "0x4000819")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float min;

		[Token(Token = "0x400081A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float max;

		[Token(Token = "0x400081B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[HideInInspector]
		public float zeroAxisDisplayOffset;

		[Token(Token = "0x400081C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float lastAngle;

		[Token(Token = "0x6000A4A")]
		[Address(RVA = "0xC81F6C", Offset = "0xC81F6C", VA = "0xC81F6C")]
		[ContextMenu("User Manual")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6000A4B")]
		[Address(RVA = "0xC81FB0", Offset = "0xC81FB0", VA = "0xC81FB0")]
		[ContextMenu("Scrpt Reference")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000A4C")]
		[Address(RVA = "0xC81FF4", Offset = "0xC81FF4", VA = "0xC81FF4")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000A4D")]
		[Address(RVA = "0xC82038", Offset = "0xC82038", VA = "0xC82038")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000A4E")]
		[Address(RVA = "0xC8207C", Offset = "0xC8207C", VA = "0xC8207C", Slot = "4")]
		protected override Quaternion LimitRotation(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000A4F")]
		[Address(RVA = "0xC82080", Offset = "0xC82080", VA = "0xC82080")]
		private Quaternion LimitHinge(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000A50")]
		[Address(RVA = "0xC822A0", Offset = "0xC822A0", VA = "0xC822A0")]
		public RotationLimitHinge()
		{
		}
	}
	[Token(Token = "0x2000116")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Rotation Limits/Rotation Limit Polygonal")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page14.html")]
	public class RotationLimitPolygonal : RotationLimit
	{
		[Serializable]
		[Token(Token = "0x2000117")]
		public class ReachCone
		{
			[Token(Token = "0x4000822")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public UnityEngine.Vector3[] tetrahedron;

			[Token(Token = "0x4000823")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float volume;

			[Token(Token = "0x4000824")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public UnityEngine.Vector3 S;

			[Token(Token = "0x4000825")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public UnityEngine.Vector3 B;

			[Token(Token = "0x17000156")]
			public UnityEngine.Vector3 o
			{
				[Token(Token = "0x6000A61")]
				[Address(RVA = "0xC83FE8", Offset = "0xC83FE8", VA = "0xC83FE8")]
				get
				{
					return default(UnityEngine.Vector3);
				}
			}

			[Token(Token = "0x17000157")]
			public UnityEngine.Vector3 a
			{
				[Token(Token = "0x6000A62")]
				[Address(RVA = "0xC84014", Offset = "0xC84014", VA = "0xC84014")]
				get
				{
					return default(UnityEngine.Vector3);
				}
			}

			[Token(Token = "0x17000158")]
			public UnityEngine.Vector3 b
			{
				[Token(Token = "0x6000A63")]
				[Address(RVA = "0xC84044", Offset = "0xC84044", VA = "0xC84044")]
				get
				{
					return default(UnityEngine.Vector3);
				}
			}

			[Token(Token = "0x17000159")]
			public UnityEngine.Vector3 c
			{
				[Token(Token = "0x6000A64")]
				[Address(RVA = "0xC84074", Offset = "0xC84074", VA = "0xC84074")]
				get
				{
					return default(UnityEngine.Vector3);
				}
			}

			[Token(Token = "0x1700015A")]
			public bool isValid
			{
				[Token(Token = "0x6000A66")]
				[Address(RVA = "0xC83530", Offset = "0xC83530", VA = "0xC83530")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6000A65")]
			[Address(RVA = "0xC839D4", Offset = "0xC839D4", VA = "0xC839D4")]
			public ReachCone(UnityEngine.Vector3 _o, UnityEngine.Vector3 _a, UnityEngine.Vector3 _b, UnityEngine.Vector3 _c)
			{
			}

			[Token(Token = "0x6000A67")]
			[Address(RVA = "0xC83B38", Offset = "0xC83B38", VA = "0xC83B38")]
			public void Calculate()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000118")]
		public class LimitPoint
		{
			[Token(Token = "0x4000826")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public UnityEngine.Vector3 point;

			[Token(Token = "0x4000827")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public float tangentWeight;

			[Token(Token = "0x6000A68")]
			[Address(RVA = "0xC83540", Offset = "0xC83540", VA = "0xC83540")]
			public LimitPoint()
			{
			}
		}

		[Token(Token = "0x400081D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Range(0f, 180f)]
		public float twistLimit;

		[Token(Token = "0x400081E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Range(0f, 3f)]
		public int smoothIterations;

		[Token(Token = "0x400081F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public LimitPoint[] points;

		[Token(Token = "0x4000820")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[HideInInspector]
		public UnityEngine.Vector3[] P;

		[Token(Token = "0x4000821")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[HideInInspector]
		public ReachCone[] reachCones;

		[Token(Token = "0x6000A51")]
		[Address(RVA = "0xC822B8", Offset = "0xC822B8", VA = "0xC822B8")]
		[ContextMenu("User Manual")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6000A52")]
		[Address(RVA = "0xC822FC", Offset = "0xC822FC", VA = "0xC822FC")]
		[ContextMenu("Scrpt Reference")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000A53")]
		[Address(RVA = "0xC82340", Offset = "0xC82340", VA = "0xC82340")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000A54")]
		[Address(RVA = "0xC82384", Offset = "0xC82384", VA = "0xC82384")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000A55")]
		[Address(RVA = "0xC823C8", Offset = "0xC823C8", VA = "0xC823C8")]
		public void SetLimitPoints(LimitPoint[] points)
		{
		}

		[Token(Token = "0x6000A56")]
		[Address(RVA = "0xC82A00", Offset = "0xC82A00", VA = "0xC82A00", Slot = "4")]
		protected override Quaternion LimitRotation(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000A57")]
		[Address(RVA = "0xC82A88", Offset = "0xC82A88", VA = "0xC82A88")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A58")]
		[Address(RVA = "0xC83068", Offset = "0xC83068", VA = "0xC83068")]
		public void ResetToDefault()
		{
		}

		[Token(Token = "0x6000A59")]
		[Address(RVA = "0xC82454", Offset = "0xC82454", VA = "0xC82454")]
		public void BuildReachCones()
		{
		}

		[Token(Token = "0x6000A5A")]
		[Address(RVA = "0xC835A4", Offset = "0xC835A4", VA = "0xC835A4")]
		private UnityEngine.Vector3[] SmoothPoints()
		{
			return null;
		}

		[Token(Token = "0x6000A5B")]
		[Address(RVA = "0xC83DAC", Offset = "0xC83DAC", VA = "0xC83DAC")]
		private float GetScalar(int k)
		{
			return default(float);
		}

		[Token(Token = "0x6000A5C")]
		[Address(RVA = "0xC83DF4", Offset = "0xC83DF4", VA = "0xC83DF4")]
		private UnityEngine.Vector3 PointToTangentPlane(UnityEngine.Vector3 p, float r)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6000A5D")]
		[Address(RVA = "0xC83E54", Offset = "0xC83E54", VA = "0xC83E54")]
		private UnityEngine.Vector3 TangentPointToSphere(UnityEngine.Vector3 q, float r)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6000A5E")]
		[Address(RVA = "0xC82DC4", Offset = "0xC82DC4", VA = "0xC82DC4")]
		private Quaternion LimitSwing(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000A5F")]
		[Address(RVA = "0xC83EC0", Offset = "0xC83EC0", VA = "0xC83EC0")]
		private int GetReachCone(UnityEngine.Vector3 L)
		{
			return default(int);
		}

		[Token(Token = "0x6000A60")]
		[Address(RVA = "0xC83F8C", Offset = "0xC83F8C", VA = "0xC83F8C")]
		public RotationLimitPolygonal()
		{
		}
	}
	[Token(Token = "0x2000119")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Rotation Limits/Rotation Limit Spline")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page14.html")]
	public class RotationLimitSpline : RotationLimit
	{
		[Token(Token = "0x4000828")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Range(0f, 180f)]
		public float twistLimit;

		[Token(Token = "0x4000829")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public AnimationCurve spline;

		[Token(Token = "0x6000A69")]
		[Address(RVA = "0xC840A4", Offset = "0xC840A4", VA = "0xC840A4")]
		[ContextMenu("User Manual")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6000A6A")]
		[Address(RVA = "0xC840E8", Offset = "0xC840E8", VA = "0xC840E8")]
		[ContextMenu("Scrpt Reference")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000A6B")]
		[Address(RVA = "0xC8412C", Offset = "0xC8412C", VA = "0xC8412C")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000A6C")]
		[Address(RVA = "0xC84170", Offset = "0xC84170", VA = "0xC84170")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000A6D")]
		[Address(RVA = "0xC841B4", Offset = "0xC841B4", VA = "0xC841B4")]
		public void SetSpline(Keyframe[] keyframes)
		{
		}

		[Token(Token = "0x6000A6E")]
		[Address(RVA = "0xC841D0", Offset = "0xC841D0", VA = "0xC841D0", Slot = "4")]
		protected override Quaternion LimitRotation(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000A6F")]
		[Address(RVA = "0xC84208", Offset = "0xC84208", VA = "0xC84208")]
		public Quaternion LimitSwing(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000A70")]
		[Address(RVA = "0xC845B4", Offset = "0xC845B4", VA = "0xC845B4")]
		public RotationLimitSpline()
		{
		}
	}
	[Token(Token = "0x200011A")]
	public class AimController : MonoBehaviour
	{
		[Token(Token = "0x200011B")]
		[CompilerGenerated]
		private sealed class <TurnToTarget>d__37 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000849")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400084A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400084B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public AimController <>4__this;

			[Token(Token = "0x1700015C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000A7B")]
				[Address(RVA = "0xC85594", Offset = "0xC85594", VA = "0xC85594", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700015D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000A7D")]
				[Address(RVA = "0xC855DC", Offset = "0xC855DC", VA = "0xC855DC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000A78")]
			[Address(RVA = "0xC853A0", Offset = "0xC853A0", VA = "0xC853A0")]
			[DebuggerHidden]
			public <TurnToTarget>d__37(int <>1__state)
			{
			}

			[Token(Token = "0x6000A79")]
			[Address(RVA = "0xC854AC", Offset = "0xC854AC", VA = "0xC854AC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000A7A")]
			[Address(RVA = "0xC854B0", Offset = "0xC854B0", VA = "0xC854B0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000A7C")]
			[Address(RVA = "0xC8559C", Offset = "0xC8559C", VA = "0xC8559C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400082A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Reference to the AimIK component.")]
		public AimIK ik;

		[Token(Token = "0x400082B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Master weight of the IK solver.")]
		[Range(0f, 1f)]
		public float weight;

		[Token(Token = "0x400082C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Target Smoothing")]
		[Tooltip("The target to aim at. Do not use the Target transform that is assigned to AimIK. Set to null if you wish to stop aiming.")]
		public Transform target;

		[Token(Token = "0x400082D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The time it takes to switch targets.")]
		public float targetSwitchSmoothTime;

		[Token(Token = "0x400082E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("The time it takes to blend in/out of AimIK weight.")]
		public float weightSmoothTime;

		[Token(Token = "0x400082F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Turning Towards The Target")]
		[Tooltip("Enables smooth turning towards the target according to the parameters under this header.")]
		public bool smoothTurnTowardsTarget;

		[Token(Token = "0x4000830")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("Speed of turning towards the target using Vector3.RotateTowards.")]
		public float maxRadiansDelta;

		[Token(Token = "0x4000831")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Speed of moving towards the target using Vector3.RotateTowards.")]
		public float maxMagnitudeDelta;

		[Token(Token = "0x4000832")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("Speed of slerping towards the target.")]
		public float slerpSpeed;

		[Token(Token = "0x4000833")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Smoothing time for turning towards the yaw and pitch of the target using Mathf.SmoothDampAngle. Value of 0 means smooth damping is disabled.")]
		public float smoothDampTime;

		[Token(Token = "0x4000834")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("The position of the pivot that the aim target is rotated around relative to the root of the character.")]
		public UnityEngine.Vector3 pivotOffsetFromRoot;

		[Token(Token = "0x4000835")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Minimum distance of aiming from the first bone. Keeps the solver from failing if the target is too close.")]
		public float minDistance;

		[Token(Token = "0x4000836")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("Offset applied to the target in world space. Convenient for scripting aiming inaccuracy.")]
		public UnityEngine.Vector3 offset;

		[Token(Token = "0x4000837")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Header("RootRotation")]
		[Tooltip("Character root will be rotate around the Y axis to keep root forward within this angle from the aiming direction.")]
		[Range(0f, 180f)]
		public float maxRootAngle;

		[Token(Token = "0x4000838")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Tooltip("If enabled, aligns the root forward to target direction after 'Max Root Angle' has been exceeded.")]
		public bool turnToTarget;

		[Token(Token = "0x4000839")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The time of turning towards the target direction if 'Max Root Angle has been exceeded and 'Turn To Target' is enabled.")]
		public float turnToTargetTime;

		[Token(Token = "0x400083A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[Header("Mode")]
		[Tooltip("If true, AimIK will consider whatever the current direction of the weapon to be the forward aiming direction and work additively on top of that. This enables you to use recoil and reloading animations seamlessly with AimIK. Adjust the Vector3 value below if the weapon is not aiming perfectly forward in the aiming animation clip.")]
		public bool useAnimatedAimDirection;

		[Token(Token = "0x400083B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The direction of the animated weapon aiming in character space. Tweak this value to adjust the aiming. 'Use Animated Aim Direction' must be enabled for this property to work.")]
		public UnityEngine.Vector3 animatedAimDirection;

		[Token(Token = "0x400083C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Transform lastTarget;

		[Token(Token = "0x400083D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float switchWeight;

		[Token(Token = "0x400083E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private float switchWeightV;

		[Token(Token = "0x400083F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float weightV;

		[Token(Token = "0x4000840")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private UnityEngine.Vector3 lastPosition;

		[Token(Token = "0x4000841")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private UnityEngine.Vector3 dir;

		[Token(Token = "0x4000842")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private bool lastSmoothTowardsTarget;

		[Token(Token = "0x4000843")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB5")]
		private bool turningToTarget;

		[Token(Token = "0x4000844")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private float turnToTargetMlp;

		[Token(Token = "0x4000845")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private float turnToTargetMlpV;

		[Token(Token = "0x4000846")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private float yawV;

		[Token(Token = "0x4000847")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private float pitchV;

		[Token(Token = "0x4000848")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private float dirMagV;

		[Token(Token = "0x1700015B")]
		private UnityEngine.Vector3 pivot
		{
			[Token(Token = "0x6000A73")]
			[Address(RVA = "0xC8463C", Offset = "0xC8463C", VA = "0xC8463C")]
			get
			{
				return default(UnityEngine.Vector3);
			}
		}

		[Token(Token = "0x6000A71")]
		[Address(RVA = "0xC845C0", Offset = "0xC845C0", VA = "0xC845C0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A72")]
		[Address(RVA = "0xC846C0", Offset = "0xC846C0", VA = "0xC846C0")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000A74")]
		[Address(RVA = "0xC84F10", Offset = "0xC84F10", VA = "0xC84F10")]
		private void ApplyMinDistance()
		{
		}

		[Token(Token = "0x6000A75")]
		[Address(RVA = "0xC85094", Offset = "0xC85094", VA = "0xC85094")]
		private void RootRotation()
		{
		}

		[Token(Token = "0x6000A76")]
		[Address(RVA = "0xC85338", Offset = "0xC85338", VA = "0xC85338")]
		[IteratorStateMachine(typeof(<TurnToTarget>d__37))]
		private IEnumerator TurnToTarget()
		{
			return null;
		}

		[Token(Token = "0x6000A77")]
		[Address(RVA = "0xC853C8", Offset = "0xC853C8", VA = "0xC853C8")]
		public AimController()
		{
		}
	}
	[Token(Token = "0x200011C")]
	public class AimPoser : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200011D")]
		public class Pose
		{
			[Token(Token = "0x400084E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool visualize;

			[Token(Token = "0x400084F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string name;

			[Token(Token = "0x4000850")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public UnityEngine.Vector3 direction;

			[Token(Token = "0x4000851")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float yaw;

			[Token(Token = "0x4000852")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float pitch;

			[Token(Token = "0x4000853")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float angleBuffer;

			[Token(Token = "0x6000A81")]
			[Address(RVA = "0xC856B4", Offset = "0xC856B4", VA = "0xC856B4")]
			public bool IsInDirection(UnityEngine.Vector3 d)
			{
				return default(bool);
			}

			[Token(Token = "0x6000A82")]
			[Address(RVA = "0xC85C24", Offset = "0xC85C24", VA = "0xC85C24")]
			public void SetAngleBuffer(float value)
			{
			}

			[Token(Token = "0x6000A83")]
			[Address(RVA = "0xC85C2C", Offset = "0xC85C2C", VA = "0xC85C2C")]
			public Pose()
			{
			}
		}

		[Token(Token = "0x400084C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float angleBuffer;

		[Token(Token = "0x400084D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Pose[] poses;

		[Token(Token = "0x6000A7E")]
		[Address(RVA = "0xC855E4", Offset = "0xC855E4", VA = "0xC855E4")]
		public Pose GetPose(UnityEngine.Vector3 localDirection)
		{
			return null;
		}

		[Token(Token = "0x6000A7F")]
		[Address(RVA = "0xC85B64", Offset = "0xC85B64", VA = "0xC85B64")]
		public void SetPoseActive(Pose pose)
		{
		}

		[Token(Token = "0x6000A80")]
		[Address(RVA = "0xC85BC4", Offset = "0xC85BC4", VA = "0xC85BC4")]
		public AimPoser()
		{
		}
	}
	[Token(Token = "0x200011E")]
	public class Amplifier : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x200011F")]
		public class Body
		{
			[Serializable]
			[Token(Token = "0x2000120")]
			public class EffectorLink
			{
				[Token(Token = "0x400085E")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[Tooltip("Type of the FBBIK effector to use")]
				public FullBodyBipedEffector effector;

				[Token(Token = "0x400085F")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[Tooltip("Weight of using this effector")]
				public float weight;

				[Token(Token = "0x6000A89")]
				[Address(RVA = "0xC860F0", Offset = "0xC860F0", VA = "0xC860F0")]
				public EffectorLink()
				{
				}
			}

			[Token(Token = "0x4000855")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The Transform that's motion we are reading.")]
			public Transform transform;

			[Token(Token = "0x4000856")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("Amplify the 'transform's' position relative to this Transform.")]
			public Transform relativeTo;

			[Token(Token = "0x4000857")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("Linking the body to effectors. One Body can be used to offset more than one effector.")]
			public EffectorLink[] effectorLinks;

			[Token(Token = "0x4000858")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("Amplification magnitude along the up axis of the character.")]
			public float verticalWeight;

			[Token(Token = "0x4000859")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[Tooltip("Amplification magnitude along the horizontal axes of the character.")]
			public float horizontalWeight;

			[Token(Token = "0x400085A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[Tooltip("Speed of the amplifier. 0 means instant.")]
			public float speed;

			[Token(Token = "0x400085B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private UnityEngine.Vector3 lastRelativePos;

			[Token(Token = "0x400085C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private UnityEngine.Vector3 smoothDelta;

			[Token(Token = "0x400085D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			private bool firstUpdate;

			[Token(Token = "0x6000A86")]
			[Address(RVA = "0xC85D98", Offset = "0xC85D98", VA = "0xC85D98")]
			public void Update(IKSolverFullBodyBiped solver, float w, float deltaTime)
			{
			}

			[Token(Token = "0x6000A87")]
			[Address(RVA = "0xC860C8", Offset = "0xC860C8", VA = "0xC860C8")]
			private static UnityEngine.Vector3 Multiply(UnityEngine.Vector3 v1, UnityEngine.Vector3 v2)
			{
				return default(UnityEngine.Vector3);
			}

			[Token(Token = "0x6000A88")]
			[Address(RVA = "0xC860D8", Offset = "0xC860D8", VA = "0xC860D8")]
			public Body()
			{
			}
		}

		[Token(Token = "0x4000854")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The amplified bodies.")]
		public Body[] bodies;

		[Token(Token = "0x6000A84")]
		[Address(RVA = "0xC85C48", Offset = "0xC85C48", VA = "0xC85C48", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6000A85")]
		[Address(RVA = "0xC860A8", Offset = "0xC860A8", VA = "0xC860A8")]
		public Amplifier()
		{
		}
	}
	[Token(Token = "0x2000121")]
	public class BodyTilt : OffsetModifier
	{
		[Token(Token = "0x4000860")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("Speed of tilting")]
		public float tiltSpeed;

		[Token(Token = "0x4000861")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Sensitivity of tilting")]
		public float tiltSensitivity;

		[Token(Token = "0x4000862")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The OffsetPose components")]
		public OffsetPose poseLeft;

		[Token(Token = "0x4000863")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The OffsetPose components")]
		public OffsetPose poseRight;

		[Token(Token = "0x4000864")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float tiltAngle;

		[Token(Token = "0x4000865")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private UnityEngine.Vector3 lastForward;

		[Token(Token = "0x6000A8A")]
		[Address(RVA = "0xC860F8", Offset = "0xC860F8", VA = "0xC860F8", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000A8B")]
		[Address(RVA = "0xC86160", Offset = "0xC86160", VA = "0xC86160", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6000A8C")]
		[Address(RVA = "0xC86400", Offset = "0xC86400", VA = "0xC86400")]
		public BodyTilt()
		{
		}
	}
	[Token(Token = "0x2000122")]
	public class CCDBendGoal : MonoBehaviour
	{
		[Token(Token = "0x4000866")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public CCDIK ik;

		[Token(Token = "0x4000867")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 1f)]
		public float weight;

		[Token(Token = "0x6000A8D")]
		[Address(RVA = "0xC8641C", Offset = "0xC8641C", VA = "0xC8641C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A8E")]
		[Address(RVA = "0xC864EC", Offset = "0xC864EC", VA = "0xC864EC")]
		private void BeforeIK()
		{
		}

		[Token(Token = "0x6000A8F")]
		[Address(RVA = "0xC86780", Offset = "0xC86780", VA = "0xC86780")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000A90")]
		[Address(RVA = "0xC8688C", Offset = "0xC8688C", VA = "0xC8688C")]
		public CCDBendGoal()
		{
		}
	}
	[Token(Token = "0x2000123")]
	[ExecuteInEditMode]
	public class EditorIK : MonoBehaviour
	{
		[Token(Token = "0x4000868")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("If slot assigned, will update Animator before IK.")]
		public Animator animator;

		[Token(Token = "0x4000869")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Create/Final IK/Editor IK Pose")]
		public EditorIKPose defaultPose;

		[Token(Token = "0x400086A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public Transform[] bones;

		[Token(Token = "0x1700015E")]
		public IK ik
		{
			[Token(Token = "0x6000A91")]
			[Address(RVA = "0xC8689C", Offset = "0xC8689C", VA = "0xC8689C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A92")]
			[Address(RVA = "0xC868A4", Offset = "0xC868A4", VA = "0xC868A4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000A93")]
		[Address(RVA = "0xC868AC", Offset = "0xC868AC", VA = "0xC868AC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000A94")]
		[Address(RVA = "0xC86A20", Offset = "0xC86A20", VA = "0xC86A20")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000A95")]
		[Address(RVA = "0xC86C7C", Offset = "0xC86C7C", VA = "0xC86C7C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000A96")]
		[Address(RVA = "0xC86DA8", Offset = "0xC86DA8", VA = "0xC86DA8")]
		public void StoreDefaultPose()
		{
		}

		[Token(Token = "0x6000A97")]
		[Address(RVA = "0xC86F5C", Offset = "0xC86F5C", VA = "0xC86F5C")]
		public bool Initiate()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A98")]
		[Address(RVA = "0xC87160", Offset = "0xC87160", VA = "0xC87160")]
		public void Update()
		{
		}

		[Token(Token = "0x6000A99")]
		[Address(RVA = "0xC873D4", Offset = "0xC873D4", VA = "0xC873D4")]
		public EditorIK()
		{
		}
	}
	[Token(Token = "0x2000124")]
	[CreateAssetMenu(fileName = "Editor IK Pose", menuName = "Final IK/Editor IK Pose", order = 1)]
	public class EditorIKPose : ScriptableObject
	{
		[Token(Token = "0x400086C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEngine.Vector3[] localPositions;

		[Token(Token = "0x400086D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Quaternion[] localRotations;

		[Token(Token = "0x1700015F")]
		public bool poseStored
		{
			[Token(Token = "0x6000A9A")]
			[Address(RVA = "0xC86AFC", Offset = "0xC86AFC", VA = "0xC86AFC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000A9B")]
		[Address(RVA = "0xC86E1C", Offset = "0xC86E1C", VA = "0xC86E1C")]
		public void Store(Transform[] T)
		{
		}

		[Token(Token = "0x6000A9C")]
		[Address(RVA = "0xC86B20", Offset = "0xC86B20", VA = "0xC86B20")]
		public bool Restore(Transform[] T)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A9D")]
		[Address(RVA = "0xC8742C", Offset = "0xC8742C", VA = "0xC8742C")]
		public EditorIKPose()
		{
		}
	}
	[Token(Token = "0x2000125")]
	public class HitReaction : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x2000126")]
		public abstract class HitPoint
		{
			[Token(Token = "0x4000870")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("Just for visual clarity, not used at all")]
			public string name;

			[Token(Token = "0x4000871")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("Linking this hit point to a collider")]
			public Collider collider;

			[Token(Token = "0x4000872")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("Only used if this hit point gets hit when already processing another hit")]
			[SerializeField]
			private float crossFadeTime;

			[Token(Token = "0x4000877")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			private float length;

			[Token(Token = "0x4000878")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private float crossFadeSpeed;

			[Token(Token = "0x4000879")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			private float lastTime;

			[Token(Token = "0x17000161")]
			public bool inProgress
			{
				[Token(Token = "0x6000AA2")]
				[Address(RVA = "0xC8754C", Offset = "0xC8754C", VA = "0xC8754C")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x17000162")]
			protected float crossFader
			{
				[Token(Token = "0x6000AA3")]
				[Address(RVA = "0xC87A4C", Offset = "0xC87A4C", VA = "0xC87A4C")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000AA4")]
				[Address(RVA = "0xC87A54", Offset = "0xC87A54", VA = "0xC87A54")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000163")]
			protected float timer
			{
				[Token(Token = "0x6000AA5")]
				[Address(RVA = "0xC87A5C", Offset = "0xC87A5C", VA = "0xC87A5C")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000AA6")]
				[Address(RVA = "0xC87A64", Offset = "0xC87A64", VA = "0xC87A64")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000164")]
			protected UnityEngine.Vector3 force
			{
				[Token(Token = "0x6000AA7")]
				[Address(RVA = "0xC87A6C", Offset = "0xC87A6C", VA = "0xC87A6C")]
				[CompilerGenerated]
				get
				{
					return default(UnityEngine.Vector3);
				}
				[Token(Token = "0x6000AA8")]
				[Address(RVA = "0xC87A78", Offset = "0xC87A78", VA = "0xC87A78")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000165")]
			protected UnityEngine.Vector3 point
			{
				[Token(Token = "0x6000AA9")]
				[Address(RVA = "0xC87A84", Offset = "0xC87A84", VA = "0xC87A84")]
				[CompilerGenerated]
				get
				{
					return default(UnityEngine.Vector3);
				}
				[Token(Token = "0x6000AAA")]
				[Address(RVA = "0xC87A90", Offset = "0xC87A90", VA = "0xC87A90")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x6000AAB")]
			[Address(RVA = "0xC87914", Offset = "0xC87914", VA = "0xC87914")]
			public void Hit(UnityEngine.Vector3 force, UnityEngine.Vector3 point)
			{
			}

			[Token(Token = "0x6000AAC")]
			[Address(RVA = "0xC87620", Offset = "0xC87620", VA = "0xC87620")]
			public void Apply(IKSolverFullBodyBiped solver, float weight)
			{
			}

			[Token(Token = "0x6000AAD")]
			protected abstract float GetLength();

			[Token(Token = "0x6000AAE")]
			protected abstract void CrossFadeStart();

			[Token(Token = "0x6000AAF")]
			protected abstract void OnApply(IKSolverFullBodyBiped solver, float weight);

			[Token(Token = "0x6000AB0")]
			[Address(RVA = "0xC87A9C", Offset = "0xC87A9C", VA = "0xC87A9C")]
			protected HitPoint()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000127")]
		public class HitPointEffector : HitPoint
		{
			[Serializable]
			[Token(Token = "0x2000128")]
			public class EffectorLink
			{
				[Token(Token = "0x400087D")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[Tooltip("The FBBIK effector type")]
				public FullBodyBipedEffector effector;

				[Token(Token = "0x400087E")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[Tooltip("The weight of this effector (could also be negative)")]
				public float weight;

				[Token(Token = "0x400087F")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				private UnityEngine.Vector3 lastValue;

				[Token(Token = "0x4000880")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
				private UnityEngine.Vector3 current;

				[Token(Token = "0x6000AB5")]
				[Address(RVA = "0xC87DD0", Offset = "0xC87DD0", VA = "0xC87DD0")]
				public void Apply(IKSolverFullBodyBiped solver, UnityEngine.Vector3 offset, float crossFader)
				{
				}

				[Token(Token = "0x6000AB6")]
				[Address(RVA = "0xC87C2C", Offset = "0xC87C2C", VA = "0xC87C2C")]
				public void CrossFadeStart()
				{
				}

				[Token(Token = "0x6000AB7")]
				[Address(RVA = "0xC87E80", Offset = "0xC87E80", VA = "0xC87E80")]
				public EffectorLink()
				{
				}
			}

			[Token(Token = "0x400087A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[Tooltip("Offset magnitude in the direction of the hit force")]
			public AnimationCurve offsetInForceDirection;

			[Token(Token = "0x400087B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[Tooltip("Offset magnitude in the direction of character.up")]
			public AnimationCurve offsetInUpDirection;

			[Token(Token = "0x400087C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[Tooltip("Linking this offset to the FBBIK effectors")]
			public EffectorLink[] effectorLinks;

			[Token(Token = "0x6000AB1")]
			[Address(RVA = "0xC87AB0", Offset = "0xC87AB0", VA = "0xC87AB0", Slot = "4")]
			protected override float GetLength()
			{
				return default(float);
			}

			[Token(Token = "0x6000AB2")]
			[Address(RVA = "0xC87BCC", Offset = "0xC87BCC", VA = "0xC87BCC", Slot = "5")]
			protected override void CrossFadeStart()
			{
			}

			[Token(Token = "0x6000AB3")]
			[Address(RVA = "0xC87C40", Offset = "0xC87C40", VA = "0xC87C40", Slot = "6")]
			protected override void OnApply(IKSolverFullBodyBiped solver, float weight)
			{
			}

			[Token(Token = "0x6000AB4")]
			[Address(RVA = "0xC87E6C", Offset = "0xC87E6C", VA = "0xC87E6C")]
			public HitPointEffector()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000129")]
		public class HitPointBone : HitPoint
		{
			[Serializable]
			[Token(Token = "0x200012A")]
			public class BoneLink
			{
				[Token(Token = "0x4000884")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[Tooltip("Reference to the bone that this hit point rotates")]
				public Transform bone;

				[Token(Token = "0x4000885")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				[Range(0f, 1f)]
				[Tooltip("Weight of rotating the bone")]
				public float weight;

				[Token(Token = "0x4000886")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
				private Quaternion lastValue;

				[Token(Token = "0x4000887")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
				private Quaternion current;

				[Token(Token = "0x6000ABC")]
				[Address(RVA = "0xC88140", Offset = "0xC88140", VA = "0xC88140")]
				public void Apply(IKSolverFullBodyBiped solver, Quaternion offset, float crossFader)
				{
				}

				[Token(Token = "0x6000ABD")]
				[Address(RVA = "0xC87F6C", Offset = "0xC87F6C", VA = "0xC87F6C")]
				public void CrossFadeStart()
				{
				}

				[Token(Token = "0x6000ABE")]
				[Address(RVA = "0xC882E0", Offset = "0xC882E0", VA = "0xC882E0")]
				public BoneLink()
				{
				}
			}

			[Token(Token = "0x4000881")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[Tooltip("The angle to rotate the bone around it's rigidbody's world center of mass")]
			public AnimationCurve aroundCenterOfMass;

			[Token(Token = "0x4000882")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[Tooltip("Linking this hit point to bone(s)")]
			public BoneLink[] boneLinks;

			[Token(Token = "0x4000883")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private Rigidbody rigidbody;

			[Token(Token = "0x6000AB8")]
			[Address(RVA = "0xC87E88", Offset = "0xC87E88", VA = "0xC87E88", Slot = "4")]
			protected override float GetLength()
			{
				return default(float);
			}

			[Token(Token = "0x6000AB9")]
			[Address(RVA = "0xC87F14", Offset = "0xC87F14", VA = "0xC87F14", Slot = "5")]
			protected override void CrossFadeStart()
			{
			}

			[Token(Token = "0x6000ABA")]
			[Address(RVA = "0xC87F78", Offset = "0xC87F78", VA = "0xC87F78", Slot = "6")]
			protected override void OnApply(IKSolverFullBodyBiped solver, float weight)
			{
			}

			[Token(Token = "0x6000ABB")]
			[Address(RVA = "0xC882CC", Offset = "0xC882CC", VA = "0xC882CC")]
			public HitPointBone()
			{
			}
		}

		[Token(Token = "0x400086E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Hit points for the FBBIK effectors")]
		public HitPointEffector[] effectorHitPoints;

		[Token(Token = "0x400086F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip(" Hit points for bones without an effector, such as the head")]
		public HitPointBone[] boneHitPoints;

		[Token(Token = "0x17000160")]
		public bool inProgress
		{
			[Token(Token = "0x6000A9E")]
			[Address(RVA = "0xC874B0", Offset = "0xC874B0", VA = "0xC874B0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000A9F")]
		[Address(RVA = "0xC87560", Offset = "0xC87560", VA = "0xC87560", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6000AA0")]
		[Address(RVA = "0xC876F8", Offset = "0xC876F8", VA = "0xC876F8")]
		public void Hit(Collider collider, UnityEngine.Vector3 force, UnityEngine.Vector3 point)
		{
		}

		[Token(Token = "0x6000AA1")]
		[Address(RVA = "0xC87A3C", Offset = "0xC87A3C", VA = "0xC87A3C")]
		public HitReaction()
		{
		}
	}
	[Token(Token = "0x200012B")]
	public class HitReactionVRIK : OffsetModifierVRIK
	{
		[Serializable]
		[Token(Token = "0x200012C")]
		public abstract class Offset
		{
			[Token(Token = "0x400088B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("Just for visual clarity, not used at all")]
			public string name;

			[Token(Token = "0x400088C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("Linking this hit point to a collider")]
			public Collider collider;

			[Token(Token = "0x400088D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[SerializeField]
			[Tooltip("Only used if this hit point gets hit when already processing another hit")]
			private float crossFadeTime;

			[Token(Token = "0x4000892")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			private float length;

			[Token(Token = "0x4000893")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private float crossFadeSpeed;

			[Token(Token = "0x4000894")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			private float lastTime;

			[Token(Token = "0x17000166")]
			protected float crossFader
			{
				[Token(Token = "0x6000AC2")]
				[Address(RVA = "0xC88850", Offset = "0xC88850", VA = "0xC88850")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000AC3")]
				[Address(RVA = "0xC88858", Offset = "0xC88858", VA = "0xC88858")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000167")]
			protected float timer
			{
				[Token(Token = "0x6000AC4")]
				[Address(RVA = "0xC88860", Offset = "0xC88860", VA = "0xC88860")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000AC5")]
				[Address(RVA = "0xC88868", Offset = "0xC88868", VA = "0xC88868")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000168")]
			protected UnityEngine.Vector3 force
			{
				[Token(Token = "0x6000AC6")]
				[Address(RVA = "0xC88870", Offset = "0xC88870", VA = "0xC88870")]
				[CompilerGenerated]
				get
				{
					return default(UnityEngine.Vector3);
				}
				[Token(Token = "0x6000AC7")]
				[Address(RVA = "0xC8887C", Offset = "0xC8887C", VA = "0xC8887C")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000169")]
			protected UnityEngine.Vector3 point
			{
				[Token(Token = "0x6000AC8")]
				[Address(RVA = "0xC88888", Offset = "0xC88888", VA = "0xC88888")]
				[CompilerGenerated]
				get
				{
					return default(UnityEngine.Vector3);
				}
				[Token(Token = "0x6000AC9")]
				[Address(RVA = "0xC88894", Offset = "0xC88894", VA = "0xC88894")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x6000ACA")]
			[Address(RVA = "0xC88700", Offset = "0xC88700", VA = "0xC88700")]
			public void Hit(UnityEngine.Vector3 force, AnimationCurve[] curves, UnityEngine.Vector3 point)
			{
			}

			[Token(Token = "0x6000ACB")]
			[Address(RVA = "0xC883FC", Offset = "0xC883FC", VA = "0xC883FC")]
			public void Apply(VRIK ik, AnimationCurve[] curves, float weight)
			{
			}

			[Token(Token = "0x6000ACC")]
			protected abstract float GetLength(AnimationCurve[] curves);

			[Token(Token = "0x6000ACD")]
			protected abstract void CrossFadeStart();

			[Token(Token = "0x6000ACE")]
			protected abstract void OnApply(VRIK ik, AnimationCurve[] curves, float weight);

			[Token(Token = "0x6000ACF")]
			[Address(RVA = "0xC888A0", Offset = "0xC888A0", VA = "0xC888A0")]
			protected Offset()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200012D")]
		public class PositionOffset : Offset
		{
			[Serializable]
			[Token(Token = "0x200012E")]
			public class PositionOffsetLink
			{
				[Token(Token = "0x4000898")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[Tooltip("The FBBIK effector type")]
				public IKSolverVR.PositionOffset positionOffset;

				[Token(Token = "0x4000899")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[Tooltip("The weight of this effector (could also be negative)")]
				public float weight;

				[Token(Token = "0x400089A")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				private UnityEngine.Vector3 lastValue;

				[Token(Token = "0x400089B")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
				private UnityEngine.Vector3 current;

				[Token(Token = "0x6000AD4")]
				[Address(RVA = "0xC88C84", Offset = "0xC88C84", VA = "0xC88C84")]
				public void Apply(VRIK ik, UnityEngine.Vector3 offset, float crossFader)
				{
				}

				[Token(Token = "0x6000AD5")]
				[Address(RVA = "0xC88AA8", Offset = "0xC88AA8", VA = "0xC88AA8")]
				public void CrossFadeStart()
				{
				}

				[Token(Token = "0x6000AD6")]
				[Address(RVA = "0xC88D18", Offset = "0xC88D18", VA = "0xC88D18")]
				public PositionOffsetLink()
				{
				}
			}

			[Token(Token = "0x4000895")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[Tooltip("Offset magnitude in the direction of the hit force")]
			public int forceDirCurveIndex;

			[Token(Token = "0x4000896")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			[Tooltip("Offset magnitude in the direction of character.up")]
			public int upDirCurveIndex;

			[Token(Token = "0x4000897")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[Tooltip("Linking this offset to the VRIK position offsets")]
			public PositionOffsetLink[] offsetLinks;

			[Token(Token = "0x6000AD0")]
			[Address(RVA = "0xC888B4", Offset = "0xC888B4", VA = "0xC888B4", Slot = "4")]
			protected override float GetLength(AnimationCurve[] curves)
			{
				return default(float);
			}

			[Token(Token = "0x6000AD1")]
			[Address(RVA = "0xC88A48", Offset = "0xC88A48", VA = "0xC88A48", Slot = "5")]
			protected override void CrossFadeStart()
			{
			}

			[Token(Token = "0x6000AD2")]
			[Address(RVA = "0xC88ABC", Offset = "0xC88ABC", VA = "0xC88ABC", Slot = "6")]
			protected override void OnApply(VRIK ik, AnimationCurve[] curves, float weight)
			{
			}

			[Token(Token = "0x6000AD3")]
			[Address(RVA = "0xC88CFC", Offset = "0xC88CFC", VA = "0xC88CFC")]
			public PositionOffset()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200012F")]
		public class RotationOffset : Offset
		{
			[Serializable]
			[Token(Token = "0x2000130")]
			public class RotationOffsetLink
			{
				[Token(Token = "0x400089F")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[Tooltip("Reference to the bone that this hit point rotates")]
				public IKSolverVR.RotationOffset rotationOffset;

				[Token(Token = "0x40008A0")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[Tooltip("Weight of rotating the bone")]
				[Range(0f, 1f)]
				public float weight;

				[Token(Token = "0x40008A1")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				private Quaternion lastValue;

				[Token(Token = "0x40008A2")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
				private Quaternion current;

				[Token(Token = "0x6000ADB")]
				[Address(RVA = "0xC890D8", Offset = "0xC890D8", VA = "0xC890D8")]
				public void Apply(VRIK ik, Quaternion offset, float crossFader)
				{
				}

				[Token(Token = "0x6000ADC")]
				[Address(RVA = "0xC88E50", Offset = "0xC88E50", VA = "0xC88E50")]
				public void CrossFadeStart()
				{
				}

				[Token(Token = "0x6000ADD")]
				[Address(RVA = "0xC891F4", Offset = "0xC891F4", VA = "0xC891F4")]
				public RotationOffsetLink()
				{
				}
			}

			[Token(Token = "0x400089C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[Tooltip("The angle to rotate the bone around it's rigidbody's world center of mass")]
			public int curveIndex;

			[Token(Token = "0x400089D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[Tooltip("Linking this hit point to bone(s)")]
			public RotationOffsetLink[] offsetLinks;

			[Token(Token = "0x400089E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private Rigidbody rigidbody;

			[Token(Token = "0x6000AD7")]
			[Address(RVA = "0xC88D20", Offset = "0xC88D20", VA = "0xC88D20", Slot = "4")]
			protected override float GetLength(AnimationCurve[] curves)
			{
				return default(float);
			}

			[Token(Token = "0x6000AD8")]
			[Address(RVA = "0xC88DF8", Offset = "0xC88DF8", VA = "0xC88DF8", Slot = "5")]
			protected override void CrossFadeStart()
			{
			}

			[Token(Token = "0x6000AD9")]
			[Address(RVA = "0xC88E5C", Offset = "0xC88E5C", VA = "0xC88E5C", Slot = "6")]
			protected override void OnApply(VRIK ik, AnimationCurve[] curves, float weight)
			{
			}

			[Token(Token = "0x6000ADA")]
			[Address(RVA = "0xC891E0", Offset = "0xC891E0", VA = "0xC891E0")]
			public RotationOffset()
			{
			}
		}

		[Token(Token = "0x4000888")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimationCurve[] offsetCurves;

		[Token(Token = "0x4000889")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Hit points for the FBBIK effectors")]
		public PositionOffset[] positionOffsets;

		[Token(Token = "0x400088A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip(" Hit points for bones without an effector, such as the head")]
		public RotationOffset[] rotationOffsets;

		[Token(Token = "0x6000ABF")]
		[Address(RVA = "0xC88344", Offset = "0xC88344", VA = "0xC88344", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6000AC0")]
		[Address(RVA = "0xC884DC", Offset = "0xC884DC", VA = "0xC884DC")]
		public void Hit(Collider collider, UnityEngine.Vector3 force, UnityEngine.Vector3 point)
		{
		}

		[Token(Token = "0x6000AC1")]
		[Address(RVA = "0xC88830", Offset = "0xC88830", VA = "0xC88830")]
		public HitReactionVRIK()
		{
		}
	}
	[Token(Token = "0x2000131")]
	public class Inertia : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x2000132")]
		public class Body
		{
			[Serializable]
			[Token(Token = "0x2000133")]
			public class EffectorLink
			{
				[Token(Token = "0x40008B0")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[Tooltip("Type of the FBBIK effector to use")]
				public FullBodyBipedEffector effector;

				[Token(Token = "0x40008B1")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[Tooltip("Weight of using this effector")]
				public float weight;

				[Token(Token = "0x6000AE4")]
				[Address(RVA = "0xC897BC", Offset = "0xC897BC", VA = "0xC897BC")]
				public EffectorLink()
				{
				}
			}

			[Token(Token = "0x40008A5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The Transform to follow, can be any bone of the character")]
			public Transform transform;

			[Token(Token = "0x40008A6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("Linking the body to effectors. One Body can be used to offset more than one effector")]
			public EffectorLink[] effectorLinks;

			[Token(Token = "0x40008A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("The speed to follow the Transform")]
			public float speed;

			[Token(Token = "0x40008A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[Tooltip("The acceleration, smaller values means lazyer following")]
			public float acceleration;

			[Token(Token = "0x40008A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("Matching target velocity")]
			[Range(0f, 1f)]
			public float matchVelocity;

			[Token(Token = "0x40008AA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[Tooltip("gravity applied to the Body")]
			public float gravity;

			[Token(Token = "0x40008AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private UnityEngine.Vector3 delta;

			[Token(Token = "0x40008AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private UnityEngine.Vector3 lazyPoint;

			[Token(Token = "0x40008AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private UnityEngine.Vector3 direction;

			[Token(Token = "0x40008AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			private UnityEngine.Vector3 lastPosition;

			[Token(Token = "0x40008AF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private bool firstUpdate;

			[Token(Token = "0x6000AE1")]
			[Address(RVA = "0xC892C4", Offset = "0xC892C4", VA = "0xC892C4")]
			public void Reset()
			{
			}

			[Token(Token = "0x6000AE2")]
			[Address(RVA = "0xC89444", Offset = "0xC89444", VA = "0xC89444")]
			public void Update(IKSolverFullBodyBiped solver, float weight, float deltaTime)
			{
			}

			[Token(Token = "0x6000AE3")]
			[Address(RVA = "0xC897A0", Offset = "0xC897A0", VA = "0xC897A0")]
			public Body()
			{
			}
		}

		[Token(Token = "0x40008A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The array of Bodies")]
		public Body[] bodies;

		[Token(Token = "0x40008A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The array of OffsetLimits")]
		public OffsetLimits[] limits;

		[Token(Token = "0x6000ADE")]
		[Address(RVA = "0xC89258", Offset = "0xC89258", VA = "0xC89258")]
		public void ResetBodies()
		{
		}

		[Token(Token = "0x6000ADF")]
		[Address(RVA = "0xC893A0", Offset = "0xC893A0", VA = "0xC893A0", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6000AE0")]
		[Address(RVA = "0xC89790", Offset = "0xC89790", VA = "0xC89790")]
		public Inertia()
		{
		}
	}
	[Token(Token = "0x2000134")]
	public class LookAtController : MonoBehaviour
	{
		[Token(Token = "0x40008B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LookAtIK ik;

		[Token(Token = "0x40008B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Target Smoothing")]
		[Tooltip("The target to look at. Do not use the Target transform that is assigned to LookAtIK. Set to null if you wish to stop looking.")]
		public Transform target;

		[Token(Token = "0x40008B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Range(0f, 1f)]
		public float weight;

		[Token(Token = "0x40008B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public UnityEngine.Vector3 offset;

		[Token(Token = "0x40008B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The time it takes to switch targets.")]
		public float targetSwitchSmoothTime;

		[Token(Token = "0x40008B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("The time it takes to blend in/out of LookAtIK weight.")]
		public float weightSmoothTime;

		[Token(Token = "0x40008B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Turning Towards The Target")]
		[Tooltip("Enables smooth turning towards the target according to the parameters under this header.")]
		public bool smoothTurnTowardsTarget;

		[Token(Token = "0x40008B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("Speed of turning towards the target using Vector3.RotateTowards.")]
		public float maxRadiansDelta;

		[Token(Token = "0x40008BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Speed of moving towards the target using Vector3.RotateTowards.")]
		public float maxMagnitudeDelta;

		[Token(Token = "0x40008BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("Speed of slerping towards the target.")]
		public float slerpSpeed;

		[Token(Token = "0x40008BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The position of the pivot that the look at target is rotated around relative to the root of the character.")]
		public UnityEngine.Vector3 pivotOffsetFromRoot;

		[Token(Token = "0x40008BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("Minimum distance of looking from the first bone. Keeps the solver from failing if the target is too close.")]
		public float minDistance;

		[Token(Token = "0x40008BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Header("RootRotation")]
		[Tooltip("Character root will be rotate around the Y axis to keep root forward within this angle from the look direction.")]
		[Range(0f, 180f)]
		public float maxRootAngle;

		[Token(Token = "0x40008BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Transform lastTarget;

		[Token(Token = "0x40008C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float switchWeight;

		[Token(Token = "0x40008C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float switchWeightV;

		[Token(Token = "0x40008C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float weightV;

		[Token(Token = "0x40008C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private UnityEngine.Vector3 lastPosition;

		[Token(Token = "0x40008C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private UnityEngine.Vector3 dir;

		[Token(Token = "0x40008C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private bool lastSmoothTowardsTarget;

		[Token(Token = "0x1700016A")]
		private UnityEngine.Vector3 pivot
		{
			[Token(Token = "0x6000AE7")]
			[Address(RVA = "0xC8982C", Offset = "0xC8982C", VA = "0xC8982C")]
			get
			{
				return default(UnityEngine.Vector3);
			}
		}

		[Token(Token = "0x6000AE5")]
		[Address(RVA = "0xC897C4", Offset = "0xC897C4", VA = "0xC897C4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000AE6")]
		[Address(RVA = "0xC898B0", Offset = "0xC898B0", VA = "0xC898B0")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000AE8")]
		[Address(RVA = "0xC89DB0", Offset = "0xC89DB0", VA = "0xC89DB0")]
		private void ApplyMinDistance()
		{
		}

		[Token(Token = "0x6000AE9")]
		[Address(RVA = "0xC89F34", Offset = "0xC89F34", VA = "0xC89F34")]
		private void RootRotation()
		{
		}

		[Token(Token = "0x6000AEA")]
		[Address(RVA = "0xC8A180", Offset = "0xC8A180", VA = "0xC8A180")]
		public LookAtController()
		{
		}
	}
	[Token(Token = "0x2000135")]
	public abstract class OffsetModifier : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000136")]
		public class OffsetLimits
		{
			[Token(Token = "0x40008C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The effector type (this is just an enum)")]
			public FullBodyBipedEffector effector;

			[Token(Token = "0x40008CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("Spring force, if zero then this is a hard limit, if not, offset can exceed the limit.")]
			public float spring;

			[Token(Token = "0x40008CB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("Which axes to limit the offset on?")]
			public bool x;

			[Token(Token = "0x40008CC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
			[Tooltip("Which axes to limit the offset on?")]
			public bool y;

			[Token(Token = "0x40008CD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
			[Tooltip("Which axes to limit the offset on?")]
			public bool z;

			[Token(Token = "0x40008CE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[Tooltip("The limits")]
			public float minX;

			[Token(Token = "0x40008CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("The limits")]
			public float maxX;

			[Token(Token = "0x40008D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[Tooltip("The limits")]
			public float minY;

			[Token(Token = "0x40008D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("The limits")]
			public float maxY;

			[Token(Token = "0x40008D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[Tooltip("The limits")]
			public float minZ;

			[Token(Token = "0x40008D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[Tooltip("The limits")]
			public float maxZ;

			[Token(Token = "0x6000AF3")]
			[Address(RVA = "0xC8A37C", Offset = "0xC8A37C", VA = "0xC8A37C")]
			public void Apply(IKEffector e, Quaternion rootRotation)
			{
			}

			[Token(Token = "0x6000AF4")]
			[Address(RVA = "0xC8A5EC", Offset = "0xC8A5EC", VA = "0xC8A5EC")]
			private float SpringAxis(float value, float min, float max)
			{
				return default(float);
			}

			[Token(Token = "0x6000AF5")]
			[Address(RVA = "0xC8A65C", Offset = "0xC8A65C", VA = "0xC8A65C")]
			private float Spring(float value, float limit, bool negative)
			{
				return default(float);
			}

			[Token(Token = "0x6000AF6")]
			[Address(RVA = "0xC8A6A4", Offset = "0xC8A6A4", VA = "0xC8A6A4")]
			public OffsetLimits()
			{
			}
		}

		[Token(Token = "0x2000137")]
		[CompilerGenerated]
		private sealed class <Initiate>d__8 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40008D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40008D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40008D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public OffsetModifier <>4__this;

			[Token(Token = "0x1700016C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000AFA")]
				[Address(RVA = "0xC8A800", Offset = "0xC8A800", VA = "0xC8A800", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700016D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000AFC")]
				[Address(RVA = "0xC8A848", Offset = "0xC8A848", VA = "0xC8A848", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000AF7")]
			[Address(RVA = "0xC8A280", Offset = "0xC8A280", VA = "0xC8A280")]
			[DebuggerHidden]
			public <Initiate>d__8(int <>1__state)
			{
			}

			[Token(Token = "0x6000AF8")]
			[Address(RVA = "0xC8A6AC", Offset = "0xC8A6AC", VA = "0xC8A6AC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000AF9")]
			[Address(RVA = "0xC8A6B0", Offset = "0xC8A6B0", VA = "0xC8A6B0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000AFB")]
			[Address(RVA = "0xC8A808", Offset = "0xC8A808", VA = "0xC8A808", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40008C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The master weight")]
		public float weight;

		[Token(Token = "0x40008C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Reference to the FBBIK component")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x40008C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected float lastTime;

		[Token(Token = "0x1700016B")]
		protected float deltaTime
		{
			[Token(Token = "0x6000AEB")]
			[Address(RVA = "0xC85D78", Offset = "0xC85D78", VA = "0xC85D78")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000AEC")]
		protected abstract void OnModifyOffset();

		[Token(Token = "0x6000AED")]
		[Address(RVA = "0xC86140", Offset = "0xC86140", VA = "0xC86140", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000AEE")]
		[Address(RVA = "0xC8A218", Offset = "0xC8A218", VA = "0xC8A218")]
		[IteratorStateMachine(typeof(<Initiate>d__8))]
		private IEnumerator Initiate()
		{
			return null;
		}

		[Token(Token = "0x6000AEF")]
		[Address(RVA = "0xC8A2A8", Offset = "0xC8A2A8", VA = "0xC8A2A8")]
		private void ModifyOffset()
		{
		}

		[Token(Token = "0x6000AF0")]
		[Address(RVA = "0xC896E8", Offset = "0xC896E8", VA = "0xC896E8")]
		protected void ApplyLimits(OffsetLimits[] limits)
		{
		}

		[Token(Token = "0x6000AF1")]
		[Address(RVA = "0xC8A4E0", Offset = "0xC8A4E0", VA = "0xC8A4E0", Slot = "6")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6000AF2")]
		[Address(RVA = "0xC860B8", Offset = "0xC860B8", VA = "0xC860B8")]
		protected OffsetModifier()
		{
		}
	}
	[Token(Token = "0x2000138")]
	public abstract class OffsetModifierVRIK : MonoBehaviour
	{
		[Token(Token = "0x2000139")]
		[CompilerGenerated]
		private sealed class <Initiate>d__7 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40008DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40008DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40008DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public OffsetModifierVRIK <>4__this;

			[Token(Token = "0x1700016F")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000B07")]
				[Address(RVA = "0xC8AC54", Offset = "0xC8AC54", VA = "0xC8AC54", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000170")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000B09")]
				[Address(RVA = "0xC8AC9C", Offset = "0xC8AC9C", VA = "0xC8AC9C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000B04")]
			[Address(RVA = "0xC8A8F8", Offset = "0xC8A8F8", VA = "0xC8A8F8")]
			[DebuggerHidden]
			public <Initiate>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x6000B05")]
			[Address(RVA = "0xC8AB00", Offset = "0xC8AB00", VA = "0xC8AB00", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000B06")]
			[Address(RVA = "0xC8AB04", Offset = "0xC8AB04", VA = "0xC8AB04", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000B08")]
			[Address(RVA = "0xC8AC5C", Offset = "0xC8AC5C", VA = "0xC8AC5C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40008D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The master weight")]
		public float weight;

		[Token(Token = "0x40008D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Reference to the VRIK component")]
		public VRIK ik;

		[Token(Token = "0x40008D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float lastTime;

		[Token(Token = "0x1700016E")]
		protected float deltaTime
		{
			[Token(Token = "0x6000AFD")]
			[Address(RVA = "0xC8A850", Offset = "0xC8A850", VA = "0xC8A850")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000AFE")]
		protected abstract void OnModifyOffset();

		[Token(Token = "0x6000AFF")]
		[Address(RVA = "0xC8A870", Offset = "0xC8A870", VA = "0xC8A870", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000B00")]
		[Address(RVA = "0xC8A890", Offset = "0xC8A890", VA = "0xC8A890")]
		[IteratorStateMachine(typeof(<Initiate>d__7))]
		private IEnumerator Initiate()
		{
			return null;
		}

		[Token(Token = "0x6000B01")]
		[Address(RVA = "0xC8A920", Offset = "0xC8A920", VA = "0xC8A920")]
		private void ModifyOffset()
		{
		}

		[Token(Token = "0x6000B02")]
		[Address(RVA = "0xC8A9F4", Offset = "0xC8A9F4", VA = "0xC8A9F4", Slot = "6")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6000B03")]
		[Address(RVA = "0xC88840", Offset = "0xC88840", VA = "0xC88840")]
		protected OffsetModifierVRIK()
		{
		}
	}
	[Token(Token = "0x200013A")]
	public class OffsetPose : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200013B")]
		public class EffectorLink
		{
			[Token(Token = "0x40008DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public FullBodyBipedEffector effector;

			[Token(Token = "0x40008DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public UnityEngine.Vector3 offset;

			[Token(Token = "0x40008E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public UnityEngine.Vector3 pin;

			[Token(Token = "0x40008E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public UnityEngine.Vector3 pinWeight;

			[Token(Token = "0x6000B0D")]
			[Address(RVA = "0xC8ACA4", Offset = "0xC8ACA4", VA = "0xC8ACA4")]
			public void Apply(IKSolverFullBodyBiped solver, float weight, Quaternion rotation)
			{
			}

			[Token(Token = "0x6000B0E")]
			[Address(RVA = "0xC8AFF0", Offset = "0xC8AFF0", VA = "0xC8AFF0")]
			public EffectorLink()
			{
			}
		}

		[Token(Token = "0x40008DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public EffectorLink[] effectorLinks;

		[Token(Token = "0x6000B0A")]
		[Address(RVA = "0xC8634C", Offset = "0xC8634C", VA = "0xC8634C")]
		public void Apply(IKSolverFullBodyBiped solver, float weight)
		{
		}

		[Token(Token = "0x6000B0B")]
		[Address(RVA = "0xC8AEF4", Offset = "0xC8AEF4", VA = "0xC8AEF4")]
		public void Apply(IKSolverFullBodyBiped solver, float weight, Quaternion rotation)
		{
		}

		[Token(Token = "0x6000B0C")]
		[Address(RVA = "0xC8AF98", Offset = "0xC8AF98", VA = "0xC8AF98")]
		public OffsetPose()
		{
		}
	}
	[Token(Token = "0x200013C")]
	public class PenetrationAvoidance : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x200013D")]
		public class Avoider
		{
			[Serializable]
			[Token(Token = "0x200013E")]
			public class EffectorLink
			{
				[Token(Token = "0x40008ED")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[Tooltip("Effector to apply the offset to.")]
				public FullBodyBipedEffector effector;

				[Token(Token = "0x40008EE")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[Tooltip("Multiplier of the offset value, can be negative.")]
				public float weight;

				[Token(Token = "0x6000B15")]
				[Address(RVA = "0xC8B644", Offset = "0xC8B644", VA = "0xC8B644")]
				public EffectorLink()
				{
				}
			}

			[Token(Token = "0x40008E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("Bones to start the raycast from. Multiple raycasts can be used by assigning more than 1 bone.")]
			public Transform[] raycastFrom;

			[Token(Token = "0x40008E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("The Transform to raycast towards. Usually the body part that you want to keep from penetrating.")]
			public Transform raycastTo;

			[Token(Token = "0x40008E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("If 0, will use simple raycasting, if > 0, will use sphere casting (better, but slower).")]
			[Range(0f, 1f)]
			public float raycastRadius;

			[Token(Token = "0x40008E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("Linking this to FBBIK effectors.")]
			public EffectorLink[] effectors;

			[Token(Token = "0x40008E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[Tooltip("The time of smooth interpolation of the offset value to avoid penetration.")]
			public float smoothTimeIn;

			[Token(Token = "0x40008E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			[Tooltip("The time of smooth interpolation of the offset value blending out of penetration avoidance.")]
			public float smoothTimeOut;

			[Token(Token = "0x40008E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[Tooltip("Layers to keep penetrating from.")]
			public LayerMask layers;

			[Token(Token = "0x40008EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private UnityEngine.Vector3 offset;

			[Token(Token = "0x40008EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private UnityEngine.Vector3 offsetTarget;

			[Token(Token = "0x40008EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			private UnityEngine.Vector3 offsetV;

			[Token(Token = "0x6000B11")]
			[Address(RVA = "0xC8B068", Offset = "0xC8B068", VA = "0xC8B068")]
			public void Solve(IKSolverFullBodyBiped solver, float weight)
			{
			}

			[Token(Token = "0x6000B12")]
			[Address(RVA = "0xC8B208", Offset = "0xC8B208", VA = "0xC8B208")]
			private UnityEngine.Vector3 GetOffsetTarget(IKSolverFullBodyBiped solver)
			{
				return default(UnityEngine.Vector3);
			}

			[Token(Token = "0x6000B13")]
			[Address(RVA = "0xC8B310", Offset = "0xC8B310", VA = "0xC8B310")]
			private UnityEngine.Vector3 Raycast(UnityEngine.Vector3 from, UnityEngine.Vector3 to)
			{
				return default(UnityEngine.Vector3);
			}

			[Token(Token = "0x6000B14")]
			[Address(RVA = "0xC8B630", Offset = "0xC8B630", VA = "0xC8B630")]
			public Avoider()
			{
			}
		}

		[Token(Token = "0x40008E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Definitions of penetration avoidances.")]
		public Avoider[] avoiders;

		[Token(Token = "0x6000B0F")]
		[Address(RVA = "0xC8AFF8", Offset = "0xC8AFF8", VA = "0xC8AFF8", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6000B10")]
		[Address(RVA = "0xC8B1F8", Offset = "0xC8B1F8", VA = "0xC8B1F8")]
		public PenetrationAvoidance()
		{
		}
	}
	[Token(Token = "0x200013F")]
	public class Recoil : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x2000140")]
		public class RecoilOffset
		{
			[Serializable]
			[Token(Token = "0x2000141")]
			public class EffectorLink
			{
				[Token(Token = "0x400090C")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[Tooltip("Type of the FBBIK effector to use")]
				public FullBodyBipedEffector effector;

				[Token(Token = "0x400090D")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[Tooltip("Weight of using this effector")]
				public float weight;

				[Token(Token = "0x6000B25")]
				[Address(RVA = "0xC8C998", Offset = "0xC8C998", VA = "0xC8C998")]
				public EffectorLink()
				{
				}
			}

			[Token(Token = "0x4000906")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("Offset vector for the associated effector when doing recoil.")]
			public UnityEngine.Vector3 offset;

			[Token(Token = "0x4000907")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[Tooltip("When firing before the last recoil has faded, how much of the current recoil offset will be maintained?")]
			[Range(0f, 1f)]
			public float additivity;

			[Token(Token = "0x4000908")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("Max additive recoil for automatic fire.")]
			public float maxAdditiveOffsetMag;

			[Token(Token = "0x4000909")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("Linking this recoil offset to FBBIK effectors.")]
			public EffectorLink[] effectorLinks;

			[Token(Token = "0x400090A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private UnityEngine.Vector3 additiveOffset;

			[Token(Token = "0x400090B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private UnityEngine.Vector3 lastOffset;

			[Token(Token = "0x6000B22")]
			[Address(RVA = "0xC8B7E8", Offset = "0xC8B7E8", VA = "0xC8B7E8")]
			public void Start()
			{
			}

			[Token(Token = "0x6000B23")]
			[Address(RVA = "0xC8C344", Offset = "0xC8C344", VA = "0xC8C344")]
			public void Apply(IKSolverFullBodyBiped solver, Quaternion rotation, float masterWeight, float length, float timeLeft)
			{
			}

			[Token(Token = "0x6000B24")]
			[Address(RVA = "0xC8C984", Offset = "0xC8C984", VA = "0xC8C984")]
			public RecoilOffset()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000142")]
		public enum Handedness
		{
			[Token(Token = "0x400090F")]
			Right,
			[Token(Token = "0x4000910")]
			Left
		}

		[Token(Token = "0x40008EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Reference to the AimIK component. Optional, only used to getting the aiming direction.")]
		public AimIK aimIK;

		[Token(Token = "0x40008F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Set this true if you are using IKExecutionOrder.cs or a custom script to force AimIK solve after FBBIK.")]
		public bool aimIKSolvedLast;

		[Token(Token = "0x40008F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("Which hand is holding the weapon?")]
		public Handedness handedness;

		[Token(Token = "0x40008F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Check for 2-handed weapons.")]
		public bool twoHanded;

		[Token(Token = "0x40008F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Weight curve for the recoil offsets. Recoil procedure is as long as this curve.")]
		public AnimationCurve recoilWeight;

		[Token(Token = "0x40008F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("How much is the magnitude randomized each time Recoil is called?")]
		public float magnitudeRandom;

		[Token(Token = "0x40008F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Tooltip("How much is the rotation randomized each time Recoil is called?")]
		public UnityEngine.Vector3 rotationRandom;

		[Token(Token = "0x40008F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Rotating the primary hand bone for the recoil (in local space).")]
		public UnityEngine.Vector3 handRotationOffset;

		[Token(Token = "0x40008F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Tooltip("Time of blending in another recoil when doing automatic fire.")]
		public float blendTime;

		[Token(Token = "0x40008F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Space(10f)]
		[Tooltip("FBBIK effector position offsets for the recoil (in aiming direction space).")]
		public RecoilOffset[] offsets;

		[Token(Token = "0x40008F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[HideInInspector]
		public Quaternion rotationOffset;

		[Token(Token = "0x40008FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float magnitudeMlp;

		[Token(Token = "0x40008FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float endTime;

		[Token(Token = "0x40008FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Quaternion handRotation;

		[Token(Token = "0x40008FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Quaternion secondaryHandRelativeRotation;

		[Token(Token = "0x40008FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Quaternion randomRotation;

		[Token(Token = "0x40008FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private float length;

		[Token(Token = "0x4000900")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private bool initiated;

		[Token(Token = "0x4000901")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private float blendWeight;

		[Token(Token = "0x4000902")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private float w;

		[Token(Token = "0x4000903")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Quaternion primaryHandRotation;

		[Token(Token = "0x4000904")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private bool handRotationsSet;

		[Token(Token = "0x4000905")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private UnityEngine.Vector3 aimIKAxis;

		[Token(Token = "0x17000171")]
		public bool isFinished
		{
			[Token(Token = "0x6000B16")]
			[Address(RVA = "0xC8B64C", Offset = "0xC8B64C", VA = "0xC8B64C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000172")]
		private IKEffector primaryHandEffector
		{
			[Token(Token = "0x6000B1C")]
			[Address(RVA = "0xC8C548", Offset = "0xC8C548", VA = "0xC8C548")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000173")]
		private IKEffector secondaryHandEffector
		{
			[Token(Token = "0x6000B1D")]
			[Address(RVA = "0xC8C584", Offset = "0xC8C584", VA = "0xC8C584")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000174")]
		private Transform primaryHand
		{
			[Token(Token = "0x6000B1E")]
			[Address(RVA = "0xC8C510", Offset = "0xC8C510", VA = "0xC8C510")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000175")]
		private Transform secondaryHand
		{
			[Token(Token = "0x6000B1F")]
			[Address(RVA = "0xC8C52C", Offset = "0xC8C52C", VA = "0xC8C52C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B17")]
		[Address(RVA = "0xC8B670", Offset = "0xC8B670", VA = "0xC8B670")]
		public void SetHandRotations(Quaternion leftHandRotation, Quaternion rightHandRotation)
		{
		}

		[Token(Token = "0x6000B18")]
		[Address(RVA = "0xC8B69C", Offset = "0xC8B69C", VA = "0xC8B69C")]
		public void Fire(float magnitude)
		{
		}

		[Token(Token = "0x6000B19")]
		[Address(RVA = "0xC8B8BC", Offset = "0xC8B8BC", VA = "0xC8B8BC", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6000B1A")]
		[Address(RVA = "0xC8C5C0", Offset = "0xC8C5C0", VA = "0xC8C5C0")]
		private void AfterFBBIK()
		{
		}

		[Token(Token = "0x6000B1B")]
		[Address(RVA = "0xC8C6D8", Offset = "0xC8C6D8", VA = "0xC8C6D8")]
		private void AfterAimIK()
		{
		}

		[Token(Token = "0x6000B20")]
		[Address(RVA = "0xC8C728", Offset = "0xC8C728", VA = "0xC8C728", Slot = "6")]
		protected override void OnDestroy()
		{
		}

		[Token(Token = "0x6000B21")]
		[Address(RVA = "0xC8C8F8", Offset = "0xC8C8F8", VA = "0xC8C8F8")]
		public Recoil()
		{
		}
	}
	[Token(Token = "0x2000143")]
	public class ShoulderRotator : MonoBehaviour
	{
		[Token(Token = "0x4000911")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Weight of shoulder rotation")]
		public float weight;

		[Token(Token = "0x4000912")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("The greater the offset, the sooner the shoulder will start rotating")]
		public float offset;

		[Token(Token = "0x4000913")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private FullBodyBipedIK ik;

		[Token(Token = "0x4000914")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool skip;

		[Token(Token = "0x6000B26")]
		[Address(RVA = "0xC8C9A0", Offset = "0xC8C9A0", VA = "0xC8C9A0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B27")]
		[Address(RVA = "0xC8CA90", Offset = "0xC8CA90", VA = "0xC8CA90")]
		private void RotateShoulders()
		{
		}

		[Token(Token = "0x6000B28")]
		[Address(RVA = "0xC8CB6C", Offset = "0xC8CB6C", VA = "0xC8CB6C")]
		private void RotateShoulder(FullBodyBipedChain chain, float weight, float offset)
		{
		}

		[Token(Token = "0x6000B29")]
		[Address(RVA = "0xC8CF70", Offset = "0xC8CF70", VA = "0xC8CF70")]
		private IKMapping.BoneMap GetParentBoneMap(FullBodyBipedChain chain)
		{
			return null;
		}

		[Token(Token = "0x6000B2A")]
		[Address(RVA = "0xC8CFA4", Offset = "0xC8CFA4", VA = "0xC8CFA4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000B2B")]
		[Address(RVA = "0xC8D0B0", Offset = "0xC8D0B0", VA = "0xC8D0B0")]
		public ShoulderRotator()
		{
		}
	}
	[Token(Token = "0x2000144")]
	public static class VRIKCalibrator
	{
		[Serializable]
		[Token(Token = "0x2000145")]
		public class Settings
		{
			[Token(Token = "0x4000915")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("Multiplies character scale")]
			public float scaleMlp;

			[Token(Token = "0x4000916")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("Local axis of the HMD facing forward.")]
			public UnityEngine.Vector3 headTrackerForward;

			[Token(Token = "0x4000917")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("Local axis of the HMD facing up.")]
			public UnityEngine.Vector3 headTrackerUp;

			[Token(Token = "0x4000918")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[Tooltip("Local axis of the hand trackers pointing from the wrist towards the palm.")]
			public UnityEngine.Vector3 handTrackerForward;

			[Token(Token = "0x4000919")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[Tooltip("Local axis of the hand trackers pointing in the direction of the surface normal of the back of the hand.")]
			public UnityEngine.Vector3 handTrackerUp;

			[Token(Token = "0x400091A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			[Tooltip("Local axis of the foot trackers towards the player's forward direction.")]
			public UnityEngine.Vector3 footTrackerForward;

			[Token(Token = "0x400091B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[Tooltip("Local axis of the foot tracker towards the up direction.")]
			public UnityEngine.Vector3 footTrackerUp;

			[Token(Token = "0x400091C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			[Tooltip("Offset of the head bone from the HMD in (headTrackerForward, headTrackerUp) space relative to the head tracker.")]
			[Space(10f)]
			public UnityEngine.Vector3 headOffset;

			[Token(Token = "0x400091D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			[Tooltip("Offset of the hand bones from the hand trackers in (handTrackerForward, handTrackerUp) space relative to the hand trackers.")]
			public UnityEngine.Vector3 handOffset;

			[Token(Token = "0x400091E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			[Tooltip("Forward offset of the foot bones from the foot trackers.")]
			public float footForwardOffset;

			[Token(Token = "0x400091F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			[Tooltip("Inward offset of the foot bones from the foot trackers.")]
			public float footInwardOffset;

			[Token(Token = "0x4000920")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			[Tooltip("Used for adjusting foot heading relative to the foot trackers.")]
			[Range(-180f, 180f)]
			public float footHeadingOffset;

			[Token(Token = "0x4000921")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			[Range(0f, 1f)]
			public float pelvisPositionWeight;

			[Token(Token = "0x4000922")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			[Range(0f, 1f)]
			public float pelvisRotationWeight;

			[Token(Token = "0x6000B3B")]
			[Address(RVA = "0xC8F288", Offset = "0xC8F288", VA = "0xC8F288")]
			public Settings()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000146")]
		public class CalibrationData
		{
			[Serializable]
			[Token(Token = "0x2000147")]
			public class Target
			{
				[Token(Token = "0x400092F")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				public bool used;

				[Token(Token = "0x4000930")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				public UnityEngine.Vector3 localPosition;

				[Token(Token = "0x4000931")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
				public Quaternion localRotation;

				[Token(Token = "0x6000B3D")]
				[Address(RVA = "0xC8EA0C", Offset = "0xC8EA0C", VA = "0xC8EA0C")]
				public Target(Transform t)
				{
				}

				[Token(Token = "0x6000B3E")]
				[Address(RVA = "0xC8E3D4", Offset = "0xC8E3D4", VA = "0xC8E3D4")]
				public void SetTo(Transform t)
				{
				}
			}

			[Token(Token = "0x4000923")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float scale;

			[Token(Token = "0x4000924")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Target head;

			[Token(Token = "0x4000925")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Target leftHand;

			[Token(Token = "0x4000926")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Target rightHand;

			[Token(Token = "0x4000927")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Target pelvis;

			[Token(Token = "0x4000928")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Target leftFoot;

			[Token(Token = "0x4000929")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public Target rightFoot;

			[Token(Token = "0x400092A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Target leftLegGoal;

			[Token(Token = "0x400092B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public Target rightLegGoal;

			[Token(Token = "0x400092C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public UnityEngine.Vector3 pelvisTargetRight;

			[Token(Token = "0x400092D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			public float pelvisPositionWeight;

			[Token(Token = "0x400092E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public float pelvisRotationWeight;

			[Token(Token = "0x6000B3C")]
			[Address(RVA = "0xC8D93C", Offset = "0xC8D93C", VA = "0xC8D93C")]
			public CalibrationData()
			{
			}
		}

		[Token(Token = "0x6000B2C")]
		[Address(RVA = "0xC8D0C4", Offset = "0xC8D0C4", VA = "0xC8D0C4")]
		public static void RecalibrateScale(VRIK ik, CalibrationData data, Settings settings)
		{
		}

		[Token(Token = "0x6000B2D")]
		[Address(RVA = "0xC8D0D4", Offset = "0xC8D0D4", VA = "0xC8D0D4")]
		public static void RecalibrateScale(VRIK ik, CalibrationData data, float scaleMlp)
		{
		}

		[Token(Token = "0x6000B2E")]
		[Address(RVA = "0xC8D0D8", Offset = "0xC8D0D8", VA = "0xC8D0D8")]
		private static void CalibrateScale(VRIK ik, Settings settings)
		{
		}

		[Token(Token = "0x6000B2F")]
		[Address(RVA = "0xC8D0E8", Offset = "0xC8D0E8", VA = "0xC8D0E8")]
		private static void CalibrateScale(VRIK ik, float scaleMlp = 1f)
		{
		}

		[Token(Token = "0x6000B30")]
		[Address(RVA = "0xC8D0EC", Offset = "0xC8D0EC", VA = "0xC8D0EC")]
		public static CalibrationData Calibrate(VRIK ik, Settings settings, Transform headTracker, [Optional] Transform bodyTracker, [Optional] Transform leftHandTracker, [Optional] Transform rightHandTracker, [Optional] Transform leftFootTracker, [Optional] Transform rightFootTracker)
		{
			return null;
		}

		[Token(Token = "0x6000B31")]
		[Address(RVA = "0xC8D944", Offset = "0xC8D944", VA = "0xC8D944")]
		private static void CalibrateLeg(Settings settings, Transform tracker, IKSolverVR.Leg leg, Transform lastBone, UnityEngine.Vector3 rootForward, bool isLeft)
		{
		}

		[Token(Token = "0x6000B32")]
		[Address(RVA = "0xC8DFFC", Offset = "0xC8DFFC", VA = "0xC8DFFC")]
		public static void Calibrate(VRIK ik, CalibrationData data, Transform headTracker, [Optional] Transform bodyTracker, [Optional] Transform leftHandTracker, [Optional] Transform rightHandTracker, [Optional] Transform leftFootTracker, [Optional] Transform rightFootTracker)
		{
		}

		[Token(Token = "0x6000B33")]
		[Address(RVA = "0xC8E430", Offset = "0xC8E430", VA = "0xC8E430")]
		private static void CalibrateLeg(CalibrationData data, Transform tracker, IKSolverVR.Leg leg, Transform lastBone, UnityEngine.Vector3 rootForward, bool isLeft)
		{
		}

		[Token(Token = "0x6000B34")]
		[Address(RVA = "0xC8E698", Offset = "0xC8E698", VA = "0xC8E698")]
		public static CalibrationData Calibrate(VRIK ik, Transform centerEyeAnchor, Transform leftHandAnchor, Transform rightHandAnchor, UnityEngine.Vector3 centerEyePositionOffset, UnityEngine.Vector3 centerEyeRotationOffset, UnityEngine.Vector3 handPositionOffset, UnityEngine.Vector3 handRotationOffset, float scaleMlp = 1f)
		{
			return null;
		}

		[Token(Token = "0x6000B35")]
		[Address(RVA = "0xC8E7D0", Offset = "0xC8E7D0", VA = "0xC8E7D0")]
		public static void CalibrateHead(VRIK ik, Transform centerEyeAnchor, UnityEngine.Vector3 anchorPositionOffset, UnityEngine.Vector3 anchorRotationOffset)
		{
		}

		[Token(Token = "0x6000B36")]
		[Address(RVA = "0xC8EAC0", Offset = "0xC8EAC0", VA = "0xC8EAC0")]
		public static void CalibrateBody(VRIK ik, Transform pelvisTracker, UnityEngine.Vector3 trackerPositionOffset, UnityEngine.Vector3 trackerRotationOffset)
		{
		}

		[Token(Token = "0x6000B37")]
		[Address(RVA = "0xC8E7D4", Offset = "0xC8E7D4", VA = "0xC8E7D4")]
		public static void CalibrateHands(VRIK ik, Transform leftHandAnchor, Transform rightHandAnchor, UnityEngine.Vector3 anchorPositionOffset, UnityEngine.Vector3 anchorRotationOffset)
		{
		}

		[Token(Token = "0x6000B38")]
		[Address(RVA = "0xC8EAC4", Offset = "0xC8EAC4", VA = "0xC8EAC4")]
		private static void CalibrateHand(Transform hand, Transform forearm, Transform target, Transform anchor, UnityEngine.Vector3 positionOffset, UnityEngine.Vector3 rotationOffset, bool isLeft)
		{
		}

		[Token(Token = "0x6000B39")]
		[Address(RVA = "0xC8EE5C", Offset = "0xC8EE5C", VA = "0xC8EE5C")]
		public static UnityEngine.Vector3 GuessWristToPalmAxis(Transform hand, Transform forearm)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6000B3A")]
		[Address(RVA = "0xC8EF40", Offset = "0xC8EF40", VA = "0xC8EF40")]
		public static UnityEngine.Vector3 GuessPalmToThumbAxis(Transform hand, Transform forearm)
		{
			return default(UnityEngine.Vector3);
		}
	}
	[Token(Token = "0x2000148")]
	public class VRIKLODController : MonoBehaviour
	{
		[Token(Token = "0x4000932")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Renderer LODRenderer;

		[Token(Token = "0x4000933")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float LODDistance;

		[Token(Token = "0x4000934")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool allowCulled;

		[Token(Token = "0x4000935")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private VRIK ik;

		[Token(Token = "0x6000B3F")]
		[Address(RVA = "0xC8F41C", Offset = "0xC8F41C", VA = "0xC8F41C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B40")]
		[Address(RVA = "0xC8F46C", Offset = "0xC8F46C", VA = "0xC8F46C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B41")]
		[Address(RVA = "0xC8F494", Offset = "0xC8F494", VA = "0xC8F494")]
		private int GetLODLevel()
		{
			return default(int);
		}

		[Token(Token = "0x6000B42")]
		[Address(RVA = "0xC8F5B4", Offset = "0xC8F5B4", VA = "0xC8F5B4")]
		public VRIKLODController()
		{
		}
	}
	[Token(Token = "0x2000149")]
	public class VRIKRootController : MonoBehaviour
	{
		[Token(Token = "0x4000937")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Transform pelvisTarget;

		[Token(Token = "0x4000938")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Transform leftFootTarget;

		[Token(Token = "0x4000939")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform rightFootTarget;

		[Token(Token = "0x400093A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private VRIK ik;

		[Token(Token = "0x17000176")]
		public UnityEngine.Vector3 pelvisTargetRight
		{
			[Token(Token = "0x6000B43")]
			[Address(RVA = "0xC8F5CC", Offset = "0xC8F5CC", VA = "0xC8F5CC")]
			[CompilerGenerated]
			get
			{
				return default(UnityEngine.Vector3);
			}
			[Token(Token = "0x6000B44")]
			[Address(RVA = "0xC8F5D8", Offset = "0xC8F5D8", VA = "0xC8F5D8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000B45")]
		[Address(RVA = "0xC8F5E4", Offset = "0xC8F5E4", VA = "0xC8F5E4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000B46")]
		[Address(RVA = "0xC8F5E8", Offset = "0xC8F5E8", VA = "0xC8F5E8")]
		public void Calibrate()
		{
		}

		[Token(Token = "0x6000B47")]
		[Address(RVA = "0xC8F5EC", Offset = "0xC8F5EC", VA = "0xC8F5EC")]
		public void Calibrate(VRIKCalibrator.CalibrationData data)
		{
		}

		[Token(Token = "0x6000B48")]
		[Address(RVA = "0xC8F5F0", Offset = "0xC8F5F0", VA = "0xC8F5F0")]
		private void OnPreUpdate()
		{
		}

		[Token(Token = "0x6000B49")]
		[Address(RVA = "0xC8F5F4", Offset = "0xC8F5F4", VA = "0xC8F5F4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000B4A")]
		[Address(RVA = "0xC8F5F8", Offset = "0xC8F5F8", VA = "0xC8F5F8")]
		public VRIKRootController()
		{
		}
	}
}
namespace RootMotion.Demos
{
	[Token(Token = "0x200014A")]
	public class FKOffset : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200014B")]
		public class Offset
		{
			[Token(Token = "0x400093D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[HideInInspector]
			public string name;

			[Token(Token = "0x400093E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public HumanBodyBones bone;

			[Token(Token = "0x400093F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public UnityEngine.Vector3 rotationOffset;

			[Token(Token = "0x4000940")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Transform t;

			[Token(Token = "0x6000B4F")]
			[Address(RVA = "0xC90778", Offset = "0xC90778", VA = "0xC90778")]
			public void Apply(Animator animator)
			{
			}

			[Token(Token = "0x6000B50")]
			[Address(RVA = "0xC90920", Offset = "0xC90920", VA = "0xC90920")]
			public Offset()
			{
			}
		}

		[Token(Token = "0x400093B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Offset[] offsets;

		[Token(Token = "0x400093C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Animator animator;

		[Token(Token = "0x6000B4B")]
		[Address(RVA = "0xC8F600", Offset = "0xC8F600", VA = "0xC8F600")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B4C")]
		[Address(RVA = "0xC8F650", Offset = "0xC8F650", VA = "0xC8F650")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000B4D")]
		[Address(RVA = "0xC8F6B8", Offset = "0xC8F6B8", VA = "0xC8F6B8")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000B4E")]
		[Address(RVA = "0xC8F770", Offset = "0xC8F770", VA = "0xC8F770")]
		public FKOffset()
		{
		}
	}
	[Token(Token = "0x200014C")]
	public class AimBoxing : MonoBehaviour
	{
		[Token(Token = "0x4000941")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AimIK aimIK;

		[Token(Token = "0x4000942")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform pin;

		[Token(Token = "0x6000B51")]
		[Address(RVA = "0xC90928", Offset = "0xC90928", VA = "0xC90928")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000B52")]
		[Address(RVA = "0xC909A8", Offset = "0xC909A8", VA = "0xC909A8")]
		public AimBoxing()
		{
		}
	}
	[Token(Token = "0x200014D")]
	public class AimSwing : MonoBehaviour
	{
		[Token(Token = "0x4000943")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AimIK ik;

		[Token(Token = "0x4000944")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The direction of the animated weapon swing in character space. Tweak this value to adjust the aiming.")]
		public UnityEngine.Vector3 animatedSwingDirection;

		[Token(Token = "0x6000B53")]
		[Address(RVA = "0xC909B0", Offset = "0xC909B0", VA = "0xC909B0")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000B54")]
		[Address(RVA = "0xC90A1C", Offset = "0xC90A1C", VA = "0xC90A1C")]
		public AimSwing()
		{
		}
	}
	[Token(Token = "0x200014E")]
	public class SecondHandOnGun : MonoBehaviour
	{
		[Token(Token = "0x4000945")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AimIK aim;

		[Token(Token = "0x4000946")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LimbIK leftArmIK;

		[Token(Token = "0x4000947")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform leftHand;

		[Token(Token = "0x4000948")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform rightHand;

		[Token(Token = "0x4000949")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UnityEngine.Vector3 leftHandPositionOffset;

		[Token(Token = "0x400094A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public UnityEngine.Vector3 leftHandRotationOffset;

		[Token(Token = "0x400094B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private UnityEngine.Vector3 leftHandPosRelToRight;

		[Token(Token = "0x400094C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Quaternion leftHandRotRelToRight;

		[Token(Token = "0x6000B55")]
		[Address(RVA = "0xC90A7C", Offset = "0xC90A7C", VA = "0xC90A7C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B56")]
		[Address(RVA = "0xC90AB4", Offset = "0xC90AB4", VA = "0xC90AB4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000B57")]
		[Address(RVA = "0xC90D70", Offset = "0xC90D70", VA = "0xC90D70")]
		public SecondHandOnGun()
		{
		}
	}
	[Token(Token = "0x200014F")]
	public class SimpleAimingSystem : MonoBehaviour
	{
		[Token(Token = "0x400094D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("AimPoser is a tool that returns an animation name based on direction.")]
		public AimPoser aimPoser;

		[Token(Token = "0x400094E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Reference to the AimIK component.")]
		public AimIK aim;

		[Token(Token = "0x400094F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Reference to the LookAt component (only used for the head in this instance).")]
		public LookAtIK lookAt;

		[Token(Token = "0x4000950")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Reference to the Animator component.")]
		public Animator animator;

		[Token(Token = "0x4000951")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Time of cross-fading from pose to pose.")]
		public float crossfadeTime;

		[Token(Token = "0x4000952")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("Will keep the aim target at a distance.")]
		public float minAimDistance;

		[Token(Token = "0x4000953")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private AimPoser.Pose aimPose;

		[Token(Token = "0x4000954")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private AimPoser.Pose lastPose;

		[Token(Token = "0x6000B58")]
		[Address(RVA = "0xC90D78", Offset = "0xC90D78", VA = "0xC90D78")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B59")]
		[Address(RVA = "0xC90DB0", Offset = "0xC90DB0", VA = "0xC90DB0")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000B5A")]
		[Address(RVA = "0xC90EFC", Offset = "0xC90EFC", VA = "0xC90EFC")]
		private void Pose()
		{
		}

		[Token(Token = "0x6000B5B")]
		[Address(RVA = "0xC9106C", Offset = "0xC9106C", VA = "0xC9106C")]
		private void LimitAimTarget()
		{
		}

		[Token(Token = "0x6000B5C")]
		[Address(RVA = "0xC91250", Offset = "0xC91250", VA = "0xC91250")]
		private void DirectCrossFade(string state, float target)
		{
		}

		[Token(Token = "0x6000B5D")]
		[Address(RVA = "0xC912E0", Offset = "0xC912E0", VA = "0xC912E0")]
		public SimpleAimingSystem()
		{
		}
	}
	[Token(Token = "0x2000150")]
	public class TerrainOffset : MonoBehaviour
	{
		[Token(Token = "0x4000955")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AimIK aimIK;

		[Token(Token = "0x4000956")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEngine.Vector3 raycastOffset;

		[Token(Token = "0x4000957")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public LayerMask raycastLayers;

		[Token(Token = "0x4000958")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float min;

		[Token(Token = "0x4000959")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float max;

		[Token(Token = "0x400095A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float lerpSpeed;

		[Token(Token = "0x400095B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private RaycastHit hit;

		[Token(Token = "0x400095C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private UnityEngine.Vector3 offset;

		[Token(Token = "0x6000B5E")]
		[Address(RVA = "0xC912F4", Offset = "0xC912F4", VA = "0xC912F4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000B5F")]
		[Address(RVA = "0xC91460", Offset = "0xC91460", VA = "0xC91460")]
		private UnityEngine.Vector3 GetGroundHeightOffset(UnityEngine.Vector3 worldPosition)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6000B60")]
		[Address(RVA = "0xC9165C", Offset = "0xC9165C", VA = "0xC9165C")]
		public TerrainOffset()
		{
		}
	}
	[Token(Token = "0x2000151")]
	public class BipedIKvsAnimatorIK : MonoBehaviour
	{
		[Token(Token = "0x400095D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[LargeHeader("References")]
		public Animator animator;

		[Token(Token = "0x400095E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BipedIK bipedIK;

		[Token(Token = "0x400095F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[LargeHeader("Look At")]
		public Transform lookAtTargetBiped;

		[Token(Token = "0x4000960")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform lookAtTargetAnimator;

		[Token(Token = "0x4000961")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Range(0f, 1f)]
		public float lookAtWeight;

		[Token(Token = "0x4000962")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Range(0f, 1f)]
		public float lookAtBodyWeight;

		[Token(Token = "0x4000963")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Range(0f, 1f)]
		public float lookAtHeadWeight;

		[Token(Token = "0x4000964")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Range(0f, 1f)]
		public float lookAtEyesWeight;

		[Token(Token = "0x4000965")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Range(0f, 1f)]
		public float lookAtClampWeight;

		[Token(Token = "0x4000966")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Range(0f, 1f)]
		public float lookAtClampWeightHead;

		[Token(Token = "0x4000967")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Range(0f, 1f)]
		public float lookAtClampWeightEyes;

		[Token(Token = "0x4000968")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[LargeHeader("Foot")]
		public Transform footTargetBiped;

		[Token(Token = "0x4000969")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform footTargetAnimator;

		[Token(Token = "0x400096A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Range(0f, 1f)]
		public float footPositionWeight;

		[Token(Token = "0x400096B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Range(0f, 1f)]
		public float footRotationWeight;

		[Token(Token = "0x400096C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[LargeHeader("Hand")]
		public Transform handTargetBiped;

		[Token(Token = "0x400096D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Transform handTargetAnimator;

		[Token(Token = "0x400096E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Range(0f, 1f)]
		public float handPositionWeight;

		[Token(Token = "0x400096F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[Range(0f, 1f)]
		public float handRotationWeight;

		[Token(Token = "0x6000B61")]
		[Address(RVA = "0xC9168C", Offset = "0xC9168C", VA = "0xC9168C")]
		private void OnAnimatorIK(int layer)
		{
		}

		[Token(Token = "0x6000B62")]
		[Address(RVA = "0xC91AB8", Offset = "0xC91AB8", VA = "0xC91AB8")]
		public BipedIKvsAnimatorIK()
		{
		}
	}
	[Token(Token = "0x2000152")]
	public class MechSpider : MonoBehaviour
	{
		[Token(Token = "0x4000970")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LayerMask raycastLayers;

		[Token(Token = "0x4000971")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float scale;

		[Token(Token = "0x4000972")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform body;

		[Token(Token = "0x4000973")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public MechSpiderLeg[] legs;

		[Token(Token = "0x4000974")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float legRotationWeight;

		[Token(Token = "0x4000975")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float rootPositionSpeed;

		[Token(Token = "0x4000976")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float rootRotationSpeed;

		[Token(Token = "0x4000977")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float breatheSpeed;

		[Token(Token = "0x4000978")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float breatheMagnitude;

		[Token(Token = "0x4000979")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float height;

		[Token(Token = "0x400097A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float minHeight;

		[Token(Token = "0x400097B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float raycastHeight;

		[Token(Token = "0x400097C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float raycastDistance;

		[Token(Token = "0x400097E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private UnityEngine.Vector3 lastPosition;

		[Token(Token = "0x400097F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private UnityEngine.Vector3 defaultBodyLocalPosition;

		[Token(Token = "0x4000980")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float sine;

		[Token(Token = "0x4000981")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private RaycastHit rootHit;

		[Token(Token = "0x17000177")]
		public UnityEngine.Vector3 velocity
		{
			[Token(Token = "0x6000B63")]
			[Address(RVA = "0xC91AD8", Offset = "0xC91AD8", VA = "0xC91AD8")]
			[CompilerGenerated]
			get
			{
				return default(UnityEngine.Vector3);
			}
			[Token(Token = "0x6000B64")]
			[Address(RVA = "0xC91AE4", Offset = "0xC91AE4", VA = "0xC91AE4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000B65")]
		[Address(RVA = "0xC91AF0", Offset = "0xC91AF0", VA = "0xC91AF0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B66")]
		[Address(RVA = "0xC91B20", Offset = "0xC91B20", VA = "0xC91B20")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B67")]
		[Address(RVA = "0xC924A4", Offset = "0xC924A4", VA = "0xC924A4")]
		private UnityEngine.Vector3 GetLegCentroid()
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6000B68")]
		[Address(RVA = "0xC92220", Offset = "0xC92220", VA = "0xC92220")]
		private UnityEngine.Vector3 GetLegsPlaneNormal()
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6000B69")]
		[Address(RVA = "0xC925B4", Offset = "0xC925B4", VA = "0xC925B4")]
		public MechSpider()
		{
		}
	}
	[Token(Token = "0x2000153")]
	public class MechSpiderController : MonoBehaviour
	{
		[Token(Token = "0x4000982")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MechSpider mechSpider;

		[Token(Token = "0x4000983")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform cameraTransform;

		[Token(Token = "0x4000984")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float speed;

		[Token(Token = "0x4000985")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float turnSpeed;

		[Token(Token = "0x17000178")]
		public UnityEngine.Vector3 inputVector
		{
			[Token(Token = "0x6000B6A")]
			[Address(RVA = "0xC925E0", Offset = "0xC925E0", VA = "0xC925E0")]
			get
			{
				return default(UnityEngine.Vector3);
			}
		}

		[Token(Token = "0x6000B6B")]
		[Address(RVA = "0xC92660", Offset = "0xC92660", VA = "0xC92660")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B6C")]
		[Address(RVA = "0xC929A4", Offset = "0xC929A4", VA = "0xC929A4")]
		public MechSpiderController()
		{
		}
	}
	[Token(Token = "0x2000154")]
	public class MechSpiderLeg : MonoBehaviour
	{
		[Token(Token = "0x2000155")]
		[CompilerGenerated]
		private sealed class <Step>d__33 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400099C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400099D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400099E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MechSpiderLeg <>4__this;

			[Token(Token = "0x400099F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public UnityEngine.Vector3 stepStartPosition;

			[Token(Token = "0x40009A0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public UnityEngine.Vector3 targetPosition;

			[Token(Token = "0x1700017B")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000B7B")]
				[Address(RVA = "0xC939AC", Offset = "0xC939AC", VA = "0xC939AC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700017C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000B7D")]
				[Address(RVA = "0xC939F4", Offset = "0xC939F4", VA = "0xC939F4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000B78")]
			[Address(RVA = "0xC93650", Offset = "0xC93650", VA = "0xC93650")]
			[DebuggerHidden]
			public <Step>d__33(int <>1__state)
			{
			}

			[Token(Token = "0x6000B79")]
			[Address(RVA = "0xC93708", Offset = "0xC93708", VA = "0xC93708", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000B7A")]
			[Address(RVA = "0xC9370C", Offset = "0xC9370C", VA = "0xC9370C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000B7C")]
			[Address(RVA = "0xC939B4", Offset = "0xC939B4", VA = "0xC939B4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000986")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MechSpider mechSpider;

		[Token(Token = "0x4000987")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MechSpiderLeg unSync;

		[Token(Token = "0x4000988")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityEngine.Vector3 offset;

		[Token(Token = "0x4000989")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float minDelay;

		[Token(Token = "0x400098A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float maxOffset;

		[Token(Token = "0x400098B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float stepSpeed;

		[Token(Token = "0x400098C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float footHeight;

		[Token(Token = "0x400098D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float velocityPrediction;

		[Token(Token = "0x400098E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float raycastFocus;

		[Token(Token = "0x400098F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AnimationCurve yOffset;

		[Token(Token = "0x4000990")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform foot;

		[Token(Token = "0x4000991")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public UnityEngine.Vector3 footUpAxis;

		[Token(Token = "0x4000992")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float footRotationSpeed;

		[Token(Token = "0x4000993")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public ParticleSystem sand;

		[Token(Token = "0x4000994")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private IK ik;

		[Token(Token = "0x4000995")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float stepProgress;

		[Token(Token = "0x4000996")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private float lastStepTime;

		[Token(Token = "0x4000997")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private UnityEngine.Vector3 defaultPosition;

		[Token(Token = "0x4000998")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private RaycastHit hit;

		[Token(Token = "0x4000999")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Quaternion lastFootLocalRotation;

		[Token(Token = "0x400099A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private UnityEngine.Vector3 smoothHitNormal;

		[Token(Token = "0x400099B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private UnityEngine.Vector3 lastStepPosition;

		[Token(Token = "0x17000179")]
		public bool isStepping
		{
			[Token(Token = "0x6000B6D")]
			[Address(RVA = "0xC929B8", Offset = "0xC929B8", VA = "0xC929B8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700017A")]
		public UnityEngine.Vector3 position
		{
			[Token(Token = "0x6000B6E")]
			[Address(RVA = "0xC92584", Offset = "0xC92584", VA = "0xC92584")]
			get
			{
				return default(UnityEngine.Vector3);
			}
			[Token(Token = "0x6000B6F")]
			[Address(RVA = "0xC929CC", Offset = "0xC929CC", VA = "0xC929CC")]
			set
			{
			}
		}

		[Token(Token = "0x6000B70")]
		[Address(RVA = "0xC92A18", Offset = "0xC92A18", VA = "0xC92A18")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000B71")]
		[Address(RVA = "0xC92C60", Offset = "0xC92C60", VA = "0xC92C60")]
		private void AfterIK()
		{
		}

		[Token(Token = "0x6000B72")]
		[Address(RVA = "0xC92E38", Offset = "0xC92E38", VA = "0xC92E38")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B73")]
		[Address(RVA = "0xC93050", Offset = "0xC93050", VA = "0xC93050")]
		private UnityEngine.Vector3 GetStepTarget(out bool stepFound, float focus, float distance)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6000B74")]
		[Address(RVA = "0xC932B0", Offset = "0xC932B0", VA = "0xC932B0")]
		private void UpdatePosition(float distance)
		{
		}

		[Token(Token = "0x6000B75")]
		[Address(RVA = "0xC93418", Offset = "0xC93418", VA = "0xC93418")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B76")]
		[Address(RVA = "0xC92FAC", Offset = "0xC92FAC", VA = "0xC92FAC")]
		[IteratorStateMachine(typeof(<Step>d__33))]
		private IEnumerator Step(UnityEngine.Vector3 stepStartPosition, UnityEngine.Vector3 targetPosition)
		{
			return null;
		}

		[Token(Token = "0x6000B77")]
		[Address(RVA = "0xC93678", Offset = "0xC93678", VA = "0xC93678")]
		public MechSpiderLeg()
		{
		}
	}
	[Token(Token = "0x2000156")]
	public class MechSpiderParticles : MonoBehaviour
	{
		[Token(Token = "0x40009A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MechSpiderController mechSpiderController;

		[Token(Token = "0x40009A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ParticleSystem particles;

		[Token(Token = "0x6000B7E")]
		[Address(RVA = "0xC939FC", Offset = "0xC939FC", VA = "0xC939FC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B7F")]
		[Address(RVA = "0xC93AC8", Offset = "0xC93AC8", VA = "0xC93AC8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B80")]
		[Address(RVA = "0xC93D3C", Offset = "0xC93D3C", VA = "0xC93D3C")]
		public MechSpiderParticles()
		{
		}
	}
	[Token(Token = "0x2000157")]
	public class AnimationWarping : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x2000158")]
		public struct Warp
		{
			[Token(Token = "0x40009A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Tooltip("Layer of the 'Animation State' in the Animator.")]
			public int animationLayer;

			[Token(Token = "0x40009A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Tooltip("Name of the state in the Animator to warp.")]
			public string animationState;

			[Token(Token = "0x40009A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("Warping weight by normalized time of the animation state.")]
			public AnimationCurve weightCurve;

			[Token(Token = "0x40009AA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("Animated point to warp from. This should be in character space so keep this Transform parented to the root of the character.")]
			public Transform warpFrom;

			[Token(Token = "0x40009AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("World space point to warp to.")]
			public Transform warpTo;

			[Token(Token = "0x40009AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("Which FBBIK effector to use?")]
			public FullBodyBipedEffector effector;
		}

		[Serializable]
		[Token(Token = "0x2000159")]
		public enum EffectorMode
		{
			[Token(Token = "0x40009AE")]
			PositionOffset,
			[Token(Token = "0x40009AF")]
			Position
		}

		[Token(Token = "0x40009A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Reference to the Animator component to use")]
		public Animator animator;

		[Token(Token = "0x40009A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Using effector.positionOffset or effector.position with effector.positionWeight? The former will enable you to use effector.position for other things, the latter will weigh in the effectors, hence using Reach and Pull in the process.")]
		public EffectorMode effectorMode;

		[Token(Token = "0x40009A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Space(10f)]
		[Tooltip("The array of warps, can have multiple simultaneous warps.")]
		public Warp[] warps;

		[Token(Token = "0x40009A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private EffectorMode lastMode;

		[Token(Token = "0x6000B81")]
		[Address(RVA = "0xC93D44", Offset = "0xC93D44", VA = "0xC93D44", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000B82")]
		[Address(RVA = "0xC93D64", Offset = "0xC93D64", VA = "0xC93D64")]
		public float GetWarpWeight(int warpIndex)
		{
			return default(float);
		}

		[Token(Token = "0x6000B83")]
		[Address(RVA = "0xC93F7C", Offset = "0xC93F7C", VA = "0xC93F7C", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6000B84")]
		[Address(RVA = "0xC94234", Offset = "0xC94234", VA = "0xC94234")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000B85")]
		[Address(RVA = "0xC942C8", Offset = "0xC942C8", VA = "0xC942C8")]
		public AnimationWarping()
		{
		}
	}
	[Token(Token = "0x200015A")]
	public class AnimatorController3rdPerson : MonoBehaviour
	{
		[Token(Token = "0x40009B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float rotateSpeed;

		[Token(Token = "0x40009B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float blendSpeed;

		[Token(Token = "0x40009B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float maxAngle;

		[Token(Token = "0x40009B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float moveSpeed;

		[Token(Token = "0x40009B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float rootMotionWeight;

		[Token(Token = "0x40009B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected Animator animator;

		[Token(Token = "0x40009B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected UnityEngine.Vector3 moveBlend;

		[Token(Token = "0x40009B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		protected UnityEngine.Vector3 moveInput;

		[Token(Token = "0x40009B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected UnityEngine.Vector3 velocity;

		[Token(Token = "0x6000B86")]
		[Address(RVA = "0xC942D0", Offset = "0xC942D0", VA = "0xC942D0", Slot = "4")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000B87")]
		[Address(RVA = "0xC94320", Offset = "0xC94320", VA = "0xC94320")]
		private void OnAnimatorMove()
		{
		}

		[Token(Token = "0x6000B88")]
		[Address(RVA = "0xC94528", Offset = "0xC94528", VA = "0xC94528", Slot = "5")]
		public virtual void Move(UnityEngine.Vector3 moveInput, bool isMoving, UnityEngine.Vector3 faceDirection, UnityEngine.Vector3 aimTarget)
		{
		}

		[Token(Token = "0x6000B89")]
		[Address(RVA = "0xC94750", Offset = "0xC94750", VA = "0xC94750")]
		public AnimatorController3rdPerson()
		{
		}
	}
	[Token(Token = "0x200015B")]
	public class AnimatorController3rdPersonIK : AnimatorController3rdPerson
	{
		[Token(Token = "0x40009B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Range(0f, 1f)]
		public float headLookWeight;

		[Token(Token = "0x40009BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public UnityEngine.Vector3 gunHoldOffset;

		[Token(Token = "0x40009BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public UnityEngine.Vector3 leftHandOffset;

		[Token(Token = "0x40009BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Recoil recoil;

		[Token(Token = "0x40009BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private AimIK aim;

		[Token(Token = "0x40009BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private FullBodyBipedIK ik;

		[Token(Token = "0x40009BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private UnityEngine.Vector3 headLookAxis;

		[Token(Token = "0x40009C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private UnityEngine.Vector3 leftHandPosRelToRightHand;

		[Token(Token = "0x40009C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Quaternion leftHandRotRelToRightHand;

		[Token(Token = "0x40009C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private UnityEngine.Vector3 aimTarget;

		[Token(Token = "0x40009C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private Quaternion rightHandRotation;

		[Token(Token = "0x6000B8A")]
		[Address(RVA = "0xC94764", Offset = "0xC94764", VA = "0xC94764", Slot = "4")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000B8B")]
		[Address(RVA = "0xC948F8", Offset = "0xC948F8", VA = "0xC948F8", Slot = "5")]
		public override void Move(UnityEngine.Vector3 moveInput, bool isMoving, UnityEngine.Vector3 faceDirection, UnityEngine.Vector3 aimTarget)
		{
		}

		[Token(Token = "0x6000B8C")]
		[Address(RVA = "0xC94968", Offset = "0xC94968", VA = "0xC94968")]
		private void Read()
		{
		}

		[Token(Token = "0x6000B8D")]
		[Address(RVA = "0xC94AA0", Offset = "0xC94AA0", VA = "0xC94AA0")]
		private void AimIK()
		{
		}

		[Token(Token = "0x6000B8E")]
		[Address(RVA = "0xC94AFC", Offset = "0xC94AFC", VA = "0xC94AFC")]
		private void FBBIK()
		{
		}

		[Token(Token = "0x6000B8F")]
		[Address(RVA = "0xC95144", Offset = "0xC95144", VA = "0xC95144")]
		private void OnPreRead()
		{
		}

		[Token(Token = "0x6000B90")]
		[Address(RVA = "0xC94F58", Offset = "0xC94F58", VA = "0xC94F58")]
		private void HeadLookAt(UnityEngine.Vector3 lookAtTarget)
		{
		}

		[Token(Token = "0x6000B91")]
		[Address(RVA = "0xC953E8", Offset = "0xC953E8", VA = "0xC953E8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000B92")]
		[Address(RVA = "0xC954F4", Offset = "0xC954F4", VA = "0xC954F4")]
		public AnimatorController3rdPersonIK()
		{
		}
	}
	[Token(Token = "0x200015C")]
	public class CharacterAnimationThirdPersonIK : CharacterAnimationThirdPerson
	{
		[Token(Token = "0x40009C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private FullBodyBipedIK ik;

		[Token(Token = "0x6000B93")]
		[Address(RVA = "0xC95510", Offset = "0xC95510", VA = "0xC95510", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000B94")]
		[Address(RVA = "0xC955E4", Offset = "0xC955E4", VA = "0xC955E4", Slot = "7")]
		protected override void LateUpdate()
		{
		}

		[Token(Token = "0x6000B95")]
		[Address(RVA = "0xC95938", Offset = "0xC95938", VA = "0xC95938")]
		private void RotateEffector(IKEffector effector, Quaternion rotation, float mlp)
		{
		}

		[Token(Token = "0x6000B96")]
		[Address(RVA = "0xC95A28", Offset = "0xC95A28", VA = "0xC95A28")]
		public CharacterAnimationThirdPersonIK()
		{
		}
	}
	[Token(Token = "0x200015D")]
	public class CharacterController3rdPerson : MonoBehaviour
	{
		[Token(Token = "0x40009C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public CameraController cam;

		[Token(Token = "0x40009C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private AnimatorController3rdPerson animatorController;

		[Token(Token = "0x1700017D")]
		private static UnityEngine.Vector3 inputVector
		{
			[Token(Token = "0x6000B99")]
			[Address(RVA = "0xC95CC8", Offset = "0xC95CC8", VA = "0xC95CC8")]
			get
			{
				return default(UnityEngine.Vector3);
			}
		}

		[Token(Token = "0x1700017E")]
		private static UnityEngine.Vector3 inputVectorRaw
		{
			[Token(Token = "0x6000B9A")]
			[Address(RVA = "0xC95D48", Offset = "0xC95D48", VA = "0xC95D48")]
			get
			{
				return default(UnityEngine.Vector3);
			}
		}

		[Token(Token = "0x6000B97")]
		[Address(RVA = "0xC95A70", Offset = "0xC95A70", VA = "0xC95A70")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B98")]
		[Address(RVA = "0xC95AD8", Offset = "0xC95AD8", VA = "0xC95AD8")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000B9B")]
		[Address(RVA = "0xC95DC8", Offset = "0xC95DC8", VA = "0xC95DC8")]
		public CharacterController3rdPerson()
		{
		}
	}
	[Token(Token = "0x200015E")]
	public class EffectorOffset : OffsetModifier
	{
		[Token(Token = "0x40009C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Range(0f, 1f)]
		public float handsMaintainRelativePositionWeight;

		[Token(Token = "0x40009C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityEngine.Vector3 bodyOffset;

		[Token(Token = "0x40009C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public UnityEngine.Vector3 leftShoulderOffset;

		[Token(Token = "0x40009CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public UnityEngine.Vector3 rightShoulderOffset;

		[Token(Token = "0x40009CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public UnityEngine.Vector3 leftThighOffset;

		[Token(Token = "0x40009CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public UnityEngine.Vector3 rightThighOffset;

		[Token(Token = "0x40009CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public UnityEngine.Vector3 leftHandOffset;

		[Token(Token = "0x40009CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public UnityEngine.Vector3 rightHandOffset;

		[Token(Token = "0x40009CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public UnityEngine.Vector3 leftFootOffset;

		[Token(Token = "0x40009D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public UnityEngine.Vector3 rightFootOffset;

		[Token(Token = "0x6000B9C")]
		[Address(RVA = "0xC95DD0", Offset = "0xC95DD0", VA = "0xC95DD0", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6000B9D")]
		[Address(RVA = "0xC9622C", Offset = "0xC9622C", VA = "0xC9622C")]
		public EffectorOffset()
		{
		}
	}
	[Token(Token = "0x200015F")]
	public class ExplosionDemo : MonoBehaviour
	{
		[Token(Token = "0x40009D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SimpleLocomotion character;

		[Token(Token = "0x40009D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float forceMlp;

		[Token(Token = "0x40009D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float upForce;

		[Token(Token = "0x40009D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float weightFalloffSpeed;

		[Token(Token = "0x40009D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimationCurve weightFalloff;

		[Token(Token = "0x40009D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AnimationCurve explosionForceByDistance;

		[Token(Token = "0x40009D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AnimationCurve scale;

		[Token(Token = "0x40009D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float weight;

		[Token(Token = "0x40009D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private UnityEngine.Vector3 defaultScale;

		[Token(Token = "0x40009DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Rigidbody r;

		[Token(Token = "0x40009DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private FullBodyBipedIK ik;

		[Token(Token = "0x6000B9E")]
		[Address(RVA = "0xC96234", Offset = "0xC96234", VA = "0xC96234")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B9F")]
		[Address(RVA = "0xC962D8", Offset = "0xC962D8", VA = "0xC962D8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000BA0")]
		[Address(RVA = "0xC96734", Offset = "0xC96734", VA = "0xC96734")]
		private void SetEffectorWeights(float w)
		{
		}

		[Token(Token = "0x6000BA1")]
		[Address(RVA = "0xC967D4", Offset = "0xC967D4", VA = "0xC967D4")]
		public ExplosionDemo()
		{
		}
	}
	[Token(Token = "0x2000160")]
	public class FBBIKSettings : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000161")]
		public class Limb
		{
			[Token(Token = "0x40009E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public FBIKChain.Smoothing reachSmoothing;

			[Token(Token = "0x40009E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float maintainRelativePositionWeight;

			[Token(Token = "0x40009E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float mappingWeight;

			[Token(Token = "0x6000BA6")]
			[Address(RVA = "0xC96968", Offset = "0xC96968", VA = "0xC96968")]
			public void Apply(FullBodyBipedChain chain, IKSolverFullBodyBiped solver)
			{
			}

			[Token(Token = "0x6000BA7")]
			[Address(RVA = "0xC96A8C", Offset = "0xC96A8C", VA = "0xC96A8C")]
			public Limb()
			{
			}
		}

		[Token(Token = "0x40009DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x40009DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool disableAfterStart;

		[Token(Token = "0x40009DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Limb leftArm;

		[Token(Token = "0x40009DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Limb rightArm;

		[Token(Token = "0x40009E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Limb leftLeg;

		[Token(Token = "0x40009E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Limb rightLeg;

		[Token(Token = "0x40009E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float rootPin;

		[Token(Token = "0x40009E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool bodyEffectChildNodes;

		[Token(Token = "0x6000BA2")]
		[Address(RVA = "0xC96844", Offset = "0xC96844", VA = "0xC96844")]
		public void UpdateSettings()
		{
		}

		[Token(Token = "0x6000BA3")]
		[Address(RVA = "0xC969E0", Offset = "0xC969E0", VA = "0xC969E0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000BA4")]
		[Address(RVA = "0xC96A78", Offset = "0xC96A78", VA = "0xC96A78")]
		private void Update()
		{
		}

		[Token(Token = "0x6000BA5")]
		[Address(RVA = "0xC96A7C", Offset = "0xC96A7C", VA = "0xC96A7C")]
		public FBBIKSettings()
		{
		}
	}
	[Token(Token = "0x2000162")]
	public class FBIKBendGoal : MonoBehaviour
	{
		[Token(Token = "0x40009E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x40009E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FullBodyBipedChain chain;

		[Token(Token = "0x40009E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float weight;

		[Token(Token = "0x6000BA8")]
		[Address(RVA = "0xC96A9C", Offset = "0xC96A9C", VA = "0xC96A9C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000BA9")]
		[Address(RVA = "0xC96B04", Offset = "0xC96B04", VA = "0xC96B04")]
		private void Update()
		{
		}

		[Token(Token = "0x6000BAA")]
		[Address(RVA = "0xC96BCC", Offset = "0xC96BCC", VA = "0xC96BCC")]
		public FBIKBendGoal()
		{
		}
	}
	[Token(Token = "0x2000163")]
	public class FBIKBoxing : MonoBehaviour
	{
		[Token(Token = "0x40009EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The target we want to hit")]
		public Transform target;

		[Token(Token = "0x40009EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The pin Transform is used to reference the exact hit point in the animation (used by AimIK to aim the upper body to follow the target).In Legacy and Generic modes you can just create and position a reference point in your animating software and include it in the FBX. Then in Unity if you added a GameObject with the exact same name under the character's root, it would be animated to the required position.In Humanoid mode however, Mecanim loses track of any Transform that does not belong to the avatar, so in this case the pin point has to be manually set inside the Unity Editor.")]
		public Transform pin;

		[Token(Token = "0x40009EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The Full Body Biped IK component")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x40009ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The Aim IK component. Aim IK is ust used for following the target slightly with the body.")]
		public AimIK aim;

		[Token(Token = "0x40009EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The master weight")]
		public float weight;

		[Token(Token = "0x40009EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("The effector type of the punching hand")]
		public FullBodyBipedEffector effector;

		[Token(Token = "0x40009F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Weight of aiming the body to follow the target")]
		public AnimationCurve aimWeight;

		[Token(Token = "0x40009F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Animator animator;

		[Token(Token = "0x6000BAB")]
		[Address(RVA = "0xC96BD4", Offset = "0xC96BD4", VA = "0xC96BD4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000BAC")]
		[Address(RVA = "0xC96C24", Offset = "0xC96C24", VA = "0xC96C24")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000BAD")]
		[Address(RVA = "0xC96DBC", Offset = "0xC96DBC", VA = "0xC96DBC")]
		public FBIKBoxing()
		{
		}
	}
	[Token(Token = "0x2000164")]
	public class FBIKHandsOnProp : MonoBehaviour
	{
		[Token(Token = "0x40009F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x40009F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool leftHanded;

		[Token(Token = "0x6000BAE")]
		[Address(RVA = "0xC96DC4", Offset = "0xC96DC4", VA = "0xC96DC4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000BAF")]
		[Address(RVA = "0xC96E94", Offset = "0xC96E94", VA = "0xC96E94")]
		private void OnPreRead()
		{
		}

		[Token(Token = "0x6000BB0")]
		[Address(RVA = "0xC96F20", Offset = "0xC96F20", VA = "0xC96F20")]
		private void HandsOnProp(IKEffector mainHand, IKEffector otherHand)
		{
		}

		[Token(Token = "0x6000BB1")]
		[Address(RVA = "0xC973F4", Offset = "0xC973F4", VA = "0xC973F4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000BB2")]
		[Address(RVA = "0xC97500", Offset = "0xC97500", VA = "0xC97500")]
		public FBIKHandsOnProp()
		{
		}
	}
	[Token(Token = "0x2000165")]
	public class FPSAiming : MonoBehaviour
	{
		[Token(Token = "0x40009F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0f, 1f)]
		public float aimWeight;

		[Token(Token = "0x40009F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Range(0f, 1f)]
		public float sightWeight;

		[Token(Token = "0x40009F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 180f)]
		public float maxAngle;

		[Token(Token = "0x40009F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public UnityEngine.Vector3 aimOffset;

		[Token(Token = "0x40009F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool animatePhysics;

		[Token(Token = "0x40009F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform gun;

		[Token(Token = "0x40009FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform gunTarget;

		[Token(Token = "0x40009FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x40009FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AimIK gunAim;

		[Token(Token = "0x40009FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public AimIK headAim;

		[Token(Token = "0x40009FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public CameraControllerFPS cam;

		[Token(Token = "0x40009FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Recoil recoil;

		[Token(Token = "0x4000A00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Range(0f, 1f)]
		public float cameraRecoilWeight;

		[Token(Token = "0x4000A01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private UnityEngine.Vector3 gunTargetDefaultLocalPosition;

		[Token(Token = "0x4000A02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private UnityEngine.Vector3 gunTargetDefaultLocalRotation;

		[Token(Token = "0x4000A03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private UnityEngine.Vector3 camDefaultLocalPosition;

		[Token(Token = "0x4000A04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private UnityEngine.Vector3 camRelativeToGunTarget;

		[Token(Token = "0x4000A05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private bool updateFrame;

		[Token(Token = "0x6000BB3")]
		[Address(RVA = "0xC97508", Offset = "0xC97508", VA = "0xC97508")]
		private void Start()
		{
		}

		[Token(Token = "0x6000BB4")]
		[Address(RVA = "0xC976A4", Offset = "0xC976A4", VA = "0xC976A4")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000BB5")]
		[Address(RVA = "0xC976B0", Offset = "0xC976B0", VA = "0xC976B0")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000BB6")]
		[Address(RVA = "0xC97970", Offset = "0xC97970", VA = "0xC97970")]
		private void Aiming()
		{
		}

		[Token(Token = "0x6000BB7")]
		[Address(RVA = "0xC97C14", Offset = "0xC97C14", VA = "0xC97C14")]
		private void LookDownTheSight()
		{
		}

		[Token(Token = "0x6000BB8")]
		[Address(RVA = "0xC97774", Offset = "0xC97774", VA = "0xC97774")]
		private void RotateCharacter()
		{
		}

		[Token(Token = "0x6000BB9")]
		[Address(RVA = "0xC988CC", Offset = "0xC988CC", VA = "0xC988CC")]
		public FPSAiming()
		{
		}
	}
	[Token(Token = "0x2000166")]
	public class FPSCharacter : MonoBehaviour
	{
		[Token(Token = "0x4000A06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0f, 1f)]
		public float walkSpeed;

		[Token(Token = "0x4000A07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float sVel;

		[Token(Token = "0x4000A08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Animator animator;

		[Token(Token = "0x4000A09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private FPSAiming FPSAiming;

		[Token(Token = "0x6000BBA")]
		[Address(RVA = "0xC988EC", Offset = "0xC988EC", VA = "0xC988EC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000BBB")]
		[Address(RVA = "0xC98968", Offset = "0xC98968", VA = "0xC98968")]
		private void Update()
		{
		}

		[Token(Token = "0x6000BBC")]
		[Address(RVA = "0xC98A64", Offset = "0xC98A64", VA = "0xC98A64")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000BBD")]
		[Address(RVA = "0xC98B10", Offset = "0xC98B10", VA = "0xC98B10")]
		public FPSCharacter()
		{
		}
	}
	[Token(Token = "0x2000167")]
	public class HitReactionTrigger : MonoBehaviour
	{
		[Token(Token = "0x4000A0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HitReaction hitReaction;

		[Token(Token = "0x4000A0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float hitForce;

		[Token(Token = "0x4000A0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string colliderName;

		[Token(Token = "0x6000BBE")]
		[Address(RVA = "0xC98B20", Offset = "0xC98B20", VA = "0xC98B20")]
		private void Update()
		{
		}

		[Token(Token = "0x6000BBF")]
		[Address(RVA = "0xC98C64", Offset = "0xC98C64", VA = "0xC98C64")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000BC0")]
		[Address(RVA = "0xC98DC8", Offset = "0xC98DC8", VA = "0xC98DC8")]
		public HitReactionTrigger()
		{
		}
	}
	[Token(Token = "0x2000168")]
	public class HoldingHands : MonoBehaviour
	{
		[Token(Token = "0x4000A0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FullBodyBipedIK rightHandChar;

		[Token(Token = "0x4000A0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FullBodyBipedIK leftHandChar;

		[Token(Token = "0x4000A0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform rightHandTarget;

		[Token(Token = "0x4000A10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform leftHandTarget;

		[Token(Token = "0x4000A11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float crossFade;

		[Token(Token = "0x4000A12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float speed;

		[Token(Token = "0x4000A13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Quaternion rightHandRotation;

		[Token(Token = "0x4000A14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Quaternion leftHandRotation;

		[Token(Token = "0x6000BC1")]
		[Address(RVA = "0xC98DD8", Offset = "0xC98DD8", VA = "0xC98DD8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000BC2")]
		[Address(RVA = "0xC98FA4", Offset = "0xC98FA4", VA = "0xC98FA4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000BC3")]
		[Address(RVA = "0xC993B4", Offset = "0xC993B4", VA = "0xC993B4")]
		public HoldingHands()
		{
		}
	}
	[Token(Token = "0x2000169")]
	public class InteractionC2CDemo : MonoBehaviour
	{
		[Token(Token = "0x4000A15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InteractionSystem character1;

		[Token(Token = "0x4000A16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InteractionSystem character2;

		[Token(Token = "0x4000A17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public InteractionObject handShake;

		[Token(Token = "0x6000BC4")]
		[Address(RVA = "0xC993C4", Offset = "0xC993C4", VA = "0xC993C4")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000BC5")]
		[Address(RVA = "0xC994AC", Offset = "0xC994AC", VA = "0xC994AC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000BC6")]
		[Address(RVA = "0xC99598", Offset = "0xC99598", VA = "0xC99598")]
		public InteractionC2CDemo()
		{
		}
	}
	[Token(Token = "0x200016A")]
	public class InteractionDemo : MonoBehaviour
	{
		[Token(Token = "0x4000A18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InteractionSystem interactionSystem;

		[Token(Token = "0x4000A19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool interrupt;

		[Token(Token = "0x4000A1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public InteractionObject ball;

		[Token(Token = "0x4000A1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public InteractionObject benchMain;

		[Token(Token = "0x4000A1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public InteractionObject benchHands;

		[Token(Token = "0x4000A1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public InteractionObject button;

		[Token(Token = "0x4000A1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public InteractionObject cigarette;

		[Token(Token = "0x4000A1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public InteractionObject door;

		[Token(Token = "0x4000A20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool isSitting;

		[Token(Token = "0x6000BC7")]
		[Address(RVA = "0xC995A0", Offset = "0xC995A0", VA = "0xC995A0")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000BC8")]
		[Address(RVA = "0xC99AA0", Offset = "0xC99AA0", VA = "0xC99AA0")]
		public InteractionDemo()
		{
		}
	}
	[Token(Token = "0x200016B")]
	public class InteractionSystemTestGUI : MonoBehaviour
	{
		[Token(Token = "0x4000A21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The object to interact to")]
		public InteractionObject interactionObject;

		[Token(Token = "0x4000A22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The effectors to interact with")]
		public FullBodyBipedEffector[] effectors;

		[Token(Token = "0x4000A23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private InteractionSystem interactionSystem;

		[Token(Token = "0x6000BC9")]
		[Address(RVA = "0xC99AA8", Offset = "0xC99AA8", VA = "0xC99AA8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000BCA")]
		[Address(RVA = "0xC99AF8", Offset = "0xC99AF8", VA = "0xC99AF8")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000BCB")]
		[Address(RVA = "0xC99DA4", Offset = "0xC99DA4", VA = "0xC99DA4")]
		public InteractionSystemTestGUI()
		{
		}
	}
	[Token(Token = "0x200016C")]
	public class KissingRig : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200016D")]
		public class Partner
		{
			[Token(Token = "0x4000A28")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public FullBodyBipedIK ik;

			[Token(Token = "0x4000A29")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Transform mouth;

			[Token(Token = "0x4000A2A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Transform mouthTarget;

			[Token(Token = "0x4000A2B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Transform touchTargetLeftHand;

			[Token(Token = "0x4000A2C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Transform touchTargetRightHand;

			[Token(Token = "0x4000A2D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public float bodyWeightHorizontal;

			[Token(Token = "0x4000A2E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public float bodyWeightVertical;

			[Token(Token = "0x4000A2F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public float neckRotationWeight;

			[Token(Token = "0x4000A30")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			public float headTiltAngle;

			[Token(Token = "0x4000A31")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public UnityEngine.Vector3 headTiltAxis;

			[Token(Token = "0x4000A32")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			private Quaternion neckRotation;

			[Token(Token = "0x1700017F")]
			private Transform neck
			{
				[Token(Token = "0x6000BD1")]
				[Address(RVA = "0xC9A5B0", Offset = "0xC9A5B0", VA = "0xC9A5B0")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000BCF")]
			[Address(RVA = "0xC99DD4", Offset = "0xC99DD4", VA = "0xC99DD4")]
			public void Initiate()
			{
			}

			[Token(Token = "0x6000BD0")]
			[Address(RVA = "0xC99E50", Offset = "0xC99E50", VA = "0xC99E50")]
			public void Update(float weight)
			{
			}

			[Token(Token = "0x6000BD2")]
			[Address(RVA = "0xC9A448", Offset = "0xC9A448", VA = "0xC9A448")]
			private void InverseTransformEffector(FullBodyBipedEffector effector, Transform target, UnityEngine.Vector3 targetPosition, float weight)
			{
			}

			[Token(Token = "0x6000BD3")]
			[Address(RVA = "0xC9A5FC", Offset = "0xC9A5FC", VA = "0xC9A5FC")]
			public Partner()
			{
			}
		}

		[Token(Token = "0x4000A24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Partner partner1;

		[Token(Token = "0x4000A25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Partner partner2;

		[Token(Token = "0x4000A26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float weight;

		[Token(Token = "0x4000A27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int iterations;

		[Token(Token = "0x6000BCC")]
		[Address(RVA = "0xC99DAC", Offset = "0xC99DAC", VA = "0xC99DAC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000BCD")]
		[Address(RVA = "0xC99DF4", Offset = "0xC99DF4", VA = "0xC99DF4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000BCE")]
		[Address(RVA = "0xC9A438", Offset = "0xC9A438", VA = "0xC9A438")]
		public KissingRig()
		{
		}
	}
	[Token(Token = "0x200016E")]
	public class MotionAbsorb : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x200016F")]
		public enum Mode
		{
			[Token(Token = "0x4000A3B")]
			Position,
			[Token(Token = "0x4000A3C")]
			PositionOffset
		}

		[Serializable]
		[Token(Token = "0x2000170")]
		public class Absorber
		{
			[Token(Token = "0x4000A3D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The type of effector (hand, foot, shoulder...) - this is just an enum")]
			public FullBodyBipedEffector effector;

			[Token(Token = "0x4000A3E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("How much should motion be absorbed on this effector")]
			public float weight;

			[Token(Token = "0x4000A3F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private UnityEngine.Vector3 position;

			[Token(Token = "0x4000A40")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			private Quaternion rotation;

			[Token(Token = "0x4000A41")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private IKEffector e;

			[Token(Token = "0x6000BDA")]
			[Address(RVA = "0xC9A774", Offset = "0xC9A774", VA = "0xC9A774")]
			public void SetToBone(IKSolverFullBodyBiped solver, Mode mode)
			{
			}

			[Token(Token = "0x6000BDB")]
			[Address(RVA = "0xC9A948", Offset = "0xC9A948", VA = "0xC9A948")]
			public void UpdateEffectorWeights(float w)
			{
			}

			[Token(Token = "0x6000BDC")]
			[Address(RVA = "0xC9A96C", Offset = "0xC9A96C", VA = "0xC9A96C")]
			public void SetPosition(float w)
			{
			}

			[Token(Token = "0x6000BDD")]
			[Address(RVA = "0xC9AA7C", Offset = "0xC9AA7C", VA = "0xC9AA7C")]
			public void SetRotation(float w)
			{
			}

			[Token(Token = "0x6000BDE")]
			[Address(RVA = "0xC9AC14", Offset = "0xC9AC14", VA = "0xC9AC14")]
			public Absorber()
			{
			}
		}

		[Token(Token = "0x4000A33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("Use either effector position, position weight, rotation, rotationWeight or positionOffset and rotating the bone directly.")]
		public Mode mode;

		[Token(Token = "0x4000A34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Array containing the absorbers")]
		public Absorber[] absorbers;

		[Token(Token = "0x4000A35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Weight falloff curve (how fast will the effect reduce after impact)")]
		public AnimationCurve falloff;

		[Token(Token = "0x4000A36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("How fast will the impact fade away. (if 1, effect lasts for 1 second)")]
		public float falloffSpeed;

		[Token(Token = "0x4000A37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float timer;

		[Token(Token = "0x4000A38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float w;

		[Token(Token = "0x4000A39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Mode initialMode;

		[Token(Token = "0x6000BD4")]
		[Address(RVA = "0xC9A610", Offset = "0xC9A610", VA = "0xC9A610", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000BD5")]
		[Address(RVA = "0xC9A6F4", Offset = "0xC9A6F4", VA = "0xC9A6F4")]
		private void OnCollisionEnter(Collision c)
		{
		}

		[Token(Token = "0x6000BD6")]
		[Address(RVA = "0xC9A83C", Offset = "0xC9A83C", VA = "0xC9A83C", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6000BD7")]
		[Address(RVA = "0xC9AA00", Offset = "0xC9AA00", VA = "0xC9AA00")]
		private void AfterIK()
		{
		}

		[Token(Token = "0x6000BD8")]
		[Address(RVA = "0xC9AAEC", Offset = "0xC9AAEC", VA = "0xC9AAEC", Slot = "6")]
		protected override void OnDestroy()
		{
		}

		[Token(Token = "0x6000BD9")]
		[Address(RVA = "0xC9AC04", Offset = "0xC9AC04", VA = "0xC9AC04")]
		public MotionAbsorb()
		{
		}
	}
	[Token(Token = "0x2000171")]
	public class MotionAbsorbCharacter : MonoBehaviour
	{
		[Token(Token = "0x4000A42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Animator animator;

		[Token(Token = "0x4000A43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MotionAbsorb motionAbsorb;

		[Token(Token = "0x4000A44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform cube;

		[Token(Token = "0x4000A45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float cubeRandomPosition;

		[Token(Token = "0x4000A46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AnimationCurve motionAbsorbWeight;

		[Token(Token = "0x4000A47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private UnityEngine.Vector3 cubeDefaultPosition;

		[Token(Token = "0x4000A48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private AnimatorStateInfo info;

		[Token(Token = "0x4000A49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Rigidbody cubeRigidbody;

		[Token(Token = "0x6000BDF")]
		[Address(RVA = "0xC9AC74", Offset = "0xC9AC74", VA = "0xC9AC74")]
		private void Start()
		{
		}

		[Token(Token = "0x6000BE0")]
		[Address(RVA = "0xC9ACE4", Offset = "0xC9ACE4", VA = "0xC9ACE4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000BE1")]
		[Address(RVA = "0xC9ADB4", Offset = "0xC9ADB4", VA = "0xC9ADB4")]
		private void SwingStart()
		{
		}

		[Token(Token = "0x6000BE2")]
		[Address(RVA = "0xC9AEFC", Offset = "0xC9AEFC", VA = "0xC9AEFC")]
		public MotionAbsorbCharacter()
		{
		}
	}
	[Token(Token = "0x2000172")]
	public class OffsetEffector : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x2000173")]
		public class EffectorLink
		{
			[Token(Token = "0x4000A4B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public FullBodyBipedEffector effectorType;

			[Token(Token = "0x4000A4C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float weightMultiplier;

			[Token(Token = "0x4000A4D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[HideInInspector]
			public UnityEngine.Vector3 localPosition;

			[Token(Token = "0x6000BE6")]
			[Address(RVA = "0xC9B17C", Offset = "0xC9B17C", VA = "0xC9B17C")]
			public EffectorLink()
			{
			}
		}

		[Token(Token = "0x4000A4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public EffectorLink[] effectorLinks;

		[Token(Token = "0x6000BE3")]
		[Address(RVA = "0xC9AF10", Offset = "0xC9AF10", VA = "0xC9AF10", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000BE4")]
		[Address(RVA = "0xC9AFFC", Offset = "0xC9AFFC", VA = "0xC9AFFC", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6000BE5")]
		[Address(RVA = "0xC9B174", Offset = "0xC9B174", VA = "0xC9B174")]
		public OffsetEffector()
		{
		}
	}
	[Token(Token = "0x2000174")]
	public class PendulumExample : MonoBehaviour
	{
		[Token(Token = "0x4000A4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0f, 1f)]
		[Tooltip("The master weight of this script.")]
		public float weight;

		[Token(Token = "0x4000A4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Multiplier for the distance of the root to the target.")]
		public float hangingDistanceMlp;

		[Token(Token = "0x4000A50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		[Tooltip("Where does the root of the character land when weight is blended out?")]
		public UnityEngine.Vector3 rootTargetPosition;

		[Token(Token = "0x4000A51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[HideInInspector]
		[Tooltip("How is the root of the character rotated when weight is blended out?")]
		public Quaternion rootTargetRotation;

		[Token(Token = "0x4000A52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform target;

		[Token(Token = "0x4000A53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform leftHandTarget;

		[Token(Token = "0x4000A54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform rightHandTarget;

		[Token(Token = "0x4000A55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform leftFootTarget;

		[Token(Token = "0x4000A56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform rightFootTarget;

		[Token(Token = "0x4000A57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Transform pelvisTarget;

		[Token(Token = "0x4000A58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Transform bodyTarget;

		[Token(Token = "0x4000A59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Transform headTarget;

		[Token(Token = "0x4000A5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public UnityEngine.Vector3 pelvisDownAxis;

		[Token(Token = "0x4000A5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private FullBodyBipedIK ik;

		[Token(Token = "0x4000A5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Quaternion rootRelativeToPelvis;

		[Token(Token = "0x4000A5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private UnityEngine.Vector3 pelvisToRoot;

		[Token(Token = "0x4000A5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private float lastWeight;

		[Token(Token = "0x6000BE7")]
		[Address(RVA = "0xC9B18C", Offset = "0xC9B18C", VA = "0xC9B18C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000BE8")]
		[Address(RVA = "0xC9B48C", Offset = "0xC9B48C", VA = "0xC9B48C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000BE9")]
		[Address(RVA = "0xC9BC88", Offset = "0xC9BC88", VA = "0xC9BC88")]
		public PendulumExample()
		{
		}
	}
	[Token(Token = "0x2000175")]
	public abstract class PickUp2Handed : MonoBehaviour
	{
		[Token(Token = "0x4000A5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int GUIspace;

		[Token(Token = "0x4000A60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InteractionSystem interactionSystem;

		[Token(Token = "0x4000A61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public InteractionObject obj;

		[Token(Token = "0x4000A62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform pivot;

		[Token(Token = "0x4000A63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform holdPoint;

		[Token(Token = "0x4000A64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float pickUpTime;

		[Token(Token = "0x4000A65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float holdWeight;

		[Token(Token = "0x4000A66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float holdWeightVel;

		[Token(Token = "0x4000A67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private UnityEngine.Vector3 pickUpPosition;

		[Token(Token = "0x4000A68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Quaternion pickUpRotation;

		[Token(Token = "0x17000180")]
		private bool holding
		{
			[Token(Token = "0x6000BF1")]
			[Address(RVA = "0xC9C080", Offset = "0xC9C080", VA = "0xC9C080")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000181")]
		private bool holdingLeft
		{
			[Token(Token = "0x6000BF2")]
			[Address(RVA = "0xC9C150", Offset = "0xC9C150", VA = "0xC9C150")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000182")]
		private bool holdingRight
		{
			[Token(Token = "0x6000BF3")]
			[Address(RVA = "0xC9C0A8", Offset = "0xC9C0A8", VA = "0xC9C0A8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000BEA")]
		[Address(RVA = "0xC9BCF4", Offset = "0xC9BCF4", VA = "0xC9BCF4")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000BEB")]
		protected abstract void RotatePivot();

		[Token(Token = "0x6000BEC")]
		[Address(RVA = "0xC9C1F8", Offset = "0xC9C1F8", VA = "0xC9C1F8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000BED")]
		[Address(RVA = "0xC9C3B8", Offset = "0xC9C3B8", VA = "0xC9C3B8")]
		private void OnPause(FullBodyBipedEffector effectorType, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x6000BEE")]
		[Address(RVA = "0xC9C528", Offset = "0xC9C528", VA = "0xC9C528")]
		private void OnStart(FullBodyBipedEffector effectorType, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x6000BEF")]
		[Address(RVA = "0xC9C5F8", Offset = "0xC9C5F8", VA = "0xC9C5F8")]
		private void OnDrop(FullBodyBipedEffector effectorType, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x6000BF0")]
		[Address(RVA = "0xC9C724", Offset = "0xC9C724", VA = "0xC9C724")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000BF4")]
		[Address(RVA = "0xC9C8A4", Offset = "0xC9C8A4", VA = "0xC9C8A4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000BF5")]
		[Address(RVA = "0xC9CAA0", Offset = "0xC9CAA0", VA = "0xC9CAA0")]
		protected PickUp2Handed()
		{
		}
	}
	[Token(Token = "0x2000176")]
	public class PickUpBox : PickUp2Handed
	{
		[Token(Token = "0x6000BF6")]
		[Address(RVA = "0xC9CAB4", Offset = "0xC9CAB4", VA = "0xC9CAB4", Slot = "4")]
		protected override void RotatePivot()
		{
		}

		[Token(Token = "0x6000BF7")]
		[Address(RVA = "0xC9CC94", Offset = "0xC9CC94", VA = "0xC9CC94")]
		public PickUpBox()
		{
		}
	}
	[Token(Token = "0x2000177")]
	public class PickUpSphere : PickUp2Handed
	{
		[Token(Token = "0x6000BF8")]
		[Address(RVA = "0xC9CCA8", Offset = "0xC9CCA8", VA = "0xC9CCA8", Slot = "4")]
		protected override void RotatePivot()
		{
		}

		[Token(Token = "0x6000BF9")]
		[Address(RVA = "0xC9CDBC", Offset = "0xC9CDBC", VA = "0xC9CDBC")]
		public PickUpSphere()
		{
		}
	}
	[Token(Token = "0x2000178")]
	public class RagdollUtilityDemo : MonoBehaviour
	{
		[Token(Token = "0x4000A69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RagdollUtility ragdollUtility;

		[Token(Token = "0x4000A6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform root;

		[Token(Token = "0x4000A6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Rigidbody pelvis;

		[Token(Token = "0x6000BFA")]
		[Address(RVA = "0xC9CDD0", Offset = "0xC9CDD0", VA = "0xC9CDD0")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000BFB")]
		[Address(RVA = "0xC9CE68", Offset = "0xC9CE68", VA = "0xC9CE68")]
		private void Update()
		{
		}

		[Token(Token = "0x6000BFC")]
		[Address(RVA = "0xC9CF80", Offset = "0xC9CF80", VA = "0xC9CF80")]
		public RagdollUtilityDemo()
		{
		}
	}
	[Token(Token = "0x2000179")]
	public class RecoilTest : MonoBehaviour
	{
		[Token(Token = "0x4000A6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float magnitude;

		[Token(Token = "0x4000A6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Recoil recoil;

		[Token(Token = "0x6000BFD")]
		[Address(RVA = "0xC9CF88", Offset = "0xC9CF88", VA = "0xC9CF88")]
		private void Start()
		{
		}

		[Token(Token = "0x6000BFE")]
		[Address(RVA = "0xC9CFD8", Offset = "0xC9CFD8", VA = "0xC9CFD8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000BFF")]
		[Address(RVA = "0xC9D024", Offset = "0xC9D024", VA = "0xC9D024")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000C00")]
		[Address(RVA = "0xC9D0BC", Offset = "0xC9D0BC", VA = "0xC9D0BC")]
		public RecoilTest()
		{
		}
	}
	[Token(Token = "0x200017A")]
	public class ResetInteractionObject : MonoBehaviour
	{
		[Token(Token = "0x200017B")]
		[CompilerGenerated]
		private sealed class <ResetObject>d__7 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000A73")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000A74")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000A75")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float resetTime;

			[Token(Token = "0x4000A76")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public ResetInteractionObject <>4__this;

			[Token(Token = "0x17000183")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000C08")]
				[Address(RVA = "0xC9D3FC", Offset = "0xC9D3FC", VA = "0xC9D3FC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000184")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000C0A")]
				[Address(RVA = "0xC9D444", Offset = "0xC9D444", VA = "0xC9D444", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000C05")]
			[Address(RVA = "0xC9D230", Offset = "0xC9D230", VA = "0xC9D230")]
			[DebuggerHidden]
			public <ResetObject>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x6000C06")]
			[Address(RVA = "0xC9D268", Offset = "0xC9D268", VA = "0xC9D268", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000C07")]
			[Address(RVA = "0xC9D26C", Offset = "0xC9D26C", VA = "0xC9D26C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000C09")]
			[Address(RVA = "0xC9D404", Offset = "0xC9D404", VA = "0xC9D404", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000A6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float resetDelay;

		[Token(Token = "0x4000A6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private UnityEngine.Vector3 defaultPosition;

		[Token(Token = "0x4000A70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Quaternion defaultRotation;

		[Token(Token = "0x4000A71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform defaultParent;

		[Token(Token = "0x4000A72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Rigidbody r;

		[Token(Token = "0x6000C01")]
		[Address(RVA = "0xC9D0CC", Offset = "0xC9D0CC", VA = "0xC9D0CC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000C02")]
		[Address(RVA = "0xC9D17C", Offset = "0xC9D17C", VA = "0xC9D17C")]
		private void OnPickUp(Transform t)
		{
		}

		[Token(Token = "0x6000C03")]
		[Address(RVA = "0xC9D1B8", Offset = "0xC9D1B8", VA = "0xC9D1B8")]
		[IteratorStateMachine(typeof(<ResetObject>d__7))]
		private IEnumerator ResetObject(float resetTime)
		{
			return null;
		}

		[Token(Token = "0x6000C04")]
		[Address(RVA = "0xC9D258", Offset = "0xC9D258", VA = "0xC9D258")]
		public ResetInteractionObject()
		{
		}
	}
	[Token(Token = "0x200017C")]
	public class SoccerDemo : MonoBehaviour
	{
		[Token(Token = "0x200017D")]
		[CompilerGenerated]
		private sealed class <ResetDelayed>d__4 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000A7A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000A7B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000A7C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SoccerDemo <>4__this;

			[Token(Token = "0x17000185")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000C11")]
				[Address(RVA = "0xC9D6B8", Offset = "0xC9D6B8", VA = "0xC9D6B8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000186")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000C13")]
				[Address(RVA = "0xC9D700", Offset = "0xC9D700", VA = "0xC9D700", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000C0E")]
			[Address(RVA = "0xC9D55C", Offset = "0xC9D55C", VA = "0xC9D55C")]
			[DebuggerHidden]
			public <ResetDelayed>d__4(int <>1__state)
			{
			}

			[Token(Token = "0x6000C0F")]
			[Address(RVA = "0xC9D58C", Offset = "0xC9D58C", VA = "0xC9D58C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000C10")]
			[Address(RVA = "0xC9D590", Offset = "0xC9D590", VA = "0xC9D590", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000C12")]
			[Address(RVA = "0xC9D6C0", Offset = "0xC9D6C0", VA = "0xC9D6C0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000A77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Animator animator;

		[Token(Token = "0x4000A78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private UnityEngine.Vector3 defaultPosition;

		[Token(Token = "0x4000A79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Quaternion defaultRotation;

		[Token(Token = "0x6000C0B")]
		[Address(RVA = "0xC9D44C", Offset = "0xC9D44C", VA = "0xC9D44C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000C0C")]
		[Address(RVA = "0xC9D4F4", Offset = "0xC9D4F4", VA = "0xC9D4F4")]
		[IteratorStateMachine(typeof(<ResetDelayed>d__4))]
		private IEnumerator ResetDelayed()
		{
			return null;
		}

		[Token(Token = "0x6000C0D")]
		[Address(RVA = "0xC9D584", Offset = "0xC9D584", VA = "0xC9D584")]
		public SoccerDemo()
		{
		}
	}
	[Token(Token = "0x200017E")]
	public class TouchWalls : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200017F")]
		public class EffectorLink
		{
			[Token(Token = "0x4000A7F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool enabled;

			[Token(Token = "0x4000A80")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public FullBodyBipedEffector effectorType;

			[Token(Token = "0x4000A81")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public InteractionObject interactionObject;

			[Token(Token = "0x4000A82")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Transform spherecastFrom;

			[Token(Token = "0x4000A83")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float spherecastRadius;

			[Token(Token = "0x4000A84")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float minDistance;

			[Token(Token = "0x4000A85")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float distanceMlp;

			[Token(Token = "0x4000A86")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public LayerMask touchLayers;

			[Token(Token = "0x4000A87")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public float lerpSpeed;

			[Token(Token = "0x4000A88")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public float minSwitchTime;

			[Token(Token = "0x4000A89")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public float releaseDistance;

			[Token(Token = "0x4000A8A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			public bool sliding;

			[Token(Token = "0x4000A8B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private UnityEngine.Vector3 raycastDirectionLocal;

			[Token(Token = "0x4000A8C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			private float raycastDistance;

			[Token(Token = "0x4000A8D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private bool inTouch;

			[Token(Token = "0x4000A8E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			private RaycastHit hit;

			[Token(Token = "0x4000A8F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			private UnityEngine.Vector3 targetPosition;

			[Token(Token = "0x4000A90")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
			private Quaternion targetRotation;

			[Token(Token = "0x4000A91")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
			private bool initiated;

			[Token(Token = "0x4000A92")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			private float nextSwitchTime;

			[Token(Token = "0x4000A93")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
			private float speedF;

			[Token(Token = "0x6000C18")]
			[Address(RVA = "0xC9D76C", Offset = "0xC9D76C", VA = "0xC9D76C")]
			public void Initiate(InteractionSystem interactionSystem)
			{
			}

			[Token(Token = "0x6000C19")]
			[Address(RVA = "0xC9E2A8", Offset = "0xC9E2A8", VA = "0xC9E2A8")]
			private bool FindWalls(UnityEngine.Vector3 direction)
			{
				return default(bool);
			}

			[Token(Token = "0x6000C1A")]
			[Address(RVA = "0xC9DB30", Offset = "0xC9DB30", VA = "0xC9DB30")]
			public void Update(InteractionSystem interactionSystem)
			{
			}

			[Token(Token = "0x6000C1B")]
			[Address(RVA = "0xC9E390", Offset = "0xC9E390", VA = "0xC9E390")]
			private void StopTouch(InteractionSystem interactionSystem)
			{
			}

			[Token(Token = "0x6000C1C")]
			[Address(RVA = "0xC9E474", Offset = "0xC9E474", VA = "0xC9E474")]
			private void OnInteractionStart(FullBodyBipedEffector effectorType, InteractionObject interactionObject)
			{
			}

			[Token(Token = "0x6000C1D")]
			[Address(RVA = "0xC9E500", Offset = "0xC9E500", VA = "0xC9E500")]
			private void OnInteractionResume(FullBodyBipedEffector effectorType, InteractionObject interactionObject)
			{
			}

			[Token(Token = "0x6000C1E")]
			[Address(RVA = "0xC9E588", Offset = "0xC9E588", VA = "0xC9E588")]
			private void OnInteractionStop(FullBodyBipedEffector effectorType, InteractionObject interactionObject)
			{
			}

			[Token(Token = "0x6000C1F")]
			[Address(RVA = "0xC9E0E8", Offset = "0xC9E0E8", VA = "0xC9E0E8")]
			public void Destroy(InteractionSystem interactionSystem)
			{
			}

			[Token(Token = "0x6000C20")]
			[Address(RVA = "0xC9E610", Offset = "0xC9E610", VA = "0xC9E610")]
			public EffectorLink()
			{
			}
		}

		[Token(Token = "0x4000A7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InteractionSystem interactionSystem;

		[Token(Token = "0x4000A7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EffectorLink[] effectorLinks;

		[Token(Token = "0x6000C14")]
		[Address(RVA = "0xC9D708", Offset = "0xC9D708", VA = "0xC9D708")]
		private void Start()
		{
		}

		[Token(Token = "0x6000C15")]
		[Address(RVA = "0xC9DAD0", Offset = "0xC9DAD0", VA = "0xC9DAD0")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000C16")]
		[Address(RVA = "0xC9E038", Offset = "0xC9E038", VA = "0xC9E038")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000C17")]
		[Address(RVA = "0xC9E2A0", Offset = "0xC9E2A0", VA = "0xC9E2A0")]
		public TouchWalls()
		{
		}
	}
	[Token(Token = "0x2000180")]
	public class TransferMotion : MonoBehaviour
	{
		[Token(Token = "0x4000A94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The Transform to transfer motion to.")]
		public Transform to;

		[Token(Token = "0x4000A95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The amount of motion to transfer.")]
		[Range(0f, 1f)]
		public float transferMotion;

		[Token(Token = "0x4000A96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private UnityEngine.Vector3 lastPosition;

		[Token(Token = "0x6000C21")]
		[Address(RVA = "0xC9E64C", Offset = "0xC9E64C", VA = "0xC9E64C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000C22")]
		[Address(RVA = "0xC9E67C", Offset = "0xC9E67C", VA = "0xC9E67C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000C23")]
		[Address(RVA = "0xC9E72C", Offset = "0xC9E72C", VA = "0xC9E72C")]
		public TransferMotion()
		{
		}
	}
	[Token(Token = "0x2000181")]
	public class TwoHandedProp : MonoBehaviour
	{
		[Token(Token = "0x4000A97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The left hand target parented to the right hand.")]
		public Transform leftHandTarget;

		[Token(Token = "0x4000A98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private FullBodyBipedIK ik;

		[Token(Token = "0x4000A99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private UnityEngine.Vector3 targetPosRelativeToRight;

		[Token(Token = "0x4000A9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Quaternion targetRotRelativeToRight;

		[Token(Token = "0x6000C24")]
		[Address(RVA = "0xC9E740", Offset = "0xC9E740", VA = "0xC9E740")]
		private void Start()
		{
		}

		[Token(Token = "0x6000C25")]
		[Address(RVA = "0xC9E924", Offset = "0xC9E924", VA = "0xC9E924")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000C26")]
		[Address(RVA = "0xC9EBC0", Offset = "0xC9EBC0", VA = "0xC9EBC0")]
		private void AfterFBBIK()
		{
		}

		[Token(Token = "0x6000C27")]
		[Address(RVA = "0xC9EC88", Offset = "0xC9EC88", VA = "0xC9EC88")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000C28")]
		[Address(RVA = "0xC9ED94", Offset = "0xC9ED94", VA = "0xC9ED94")]
		public TwoHandedProp()
		{
		}
	}
	[Token(Token = "0x2000182")]
	public class UserControlInteractions : UserControlThirdPerson
	{
		[Token(Token = "0x4000A9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public CharacterThirdPerson character;

		[Token(Token = "0x4000A9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public InteractionSystem interactionSystem;

		[Token(Token = "0x4000A9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool disableInputInInteraction;

		[Token(Token = "0x4000A9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float enableInputAtProgress;

		[Token(Token = "0x6000C29")]
		[Address(RVA = "0xC9ED9C", Offset = "0xC9ED9C", VA = "0xC9ED9C", Slot = "5")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6000C2A")]
		[Address(RVA = "0xC9EEB4", Offset = "0xC9EEB4", VA = "0xC9EEB4")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000C2B")]
		[Address(RVA = "0xC9F07C", Offset = "0xC9F07C", VA = "0xC9F07C")]
		public UserControlInteractions()
		{
		}
	}
	[Token(Token = "0x2000183")]
	public class GrounderDemo : MonoBehaviour
	{
		[Token(Token = "0x4000A9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject[] characters;

		[Token(Token = "0x6000C2C")]
		[Address(RVA = "0xC9F098", Offset = "0xC9F098", VA = "0xC9F098")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000C2D")]
		[Address(RVA = "0xC9F2A0", Offset = "0xC9F2A0", VA = "0xC9F2A0")]
		public void Activate(int index)
		{
		}

		[Token(Token = "0x6000C2E")]
		[Address(RVA = "0xC9F30C", Offset = "0xC9F30C", VA = "0xC9F30C")]
		public GrounderDemo()
		{
		}
	}
	[Token(Token = "0x2000184")]
	public class PlatformRotator : MonoBehaviour
	{
		[Token(Token = "0x2000185")]
		[CompilerGenerated]
		private sealed class <SwitchRotation>d__14 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000AAC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000AAD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000AAE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PlatformRotator <>4__this;

			[Token(Token = "0x17000187")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000C38")]
				[Address(RVA = "0xC9FA58", Offset = "0xC9FA58", VA = "0xC9FA58", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000188")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000C3A")]
				[Address(RVA = "0xC9FAA0", Offset = "0xC9FAA0", VA = "0xC9FAA0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000C35")]
			[Address(RVA = "0xC9F6EC", Offset = "0xC9F6EC", VA = "0xC9F6EC")]
			[DebuggerHidden]
			public <SwitchRotation>d__14(int <>1__state)
			{
			}

			[Token(Token = "0x6000C36")]
			[Address(RVA = "0xC9F8DC", Offset = "0xC9F8DC", VA = "0xC9F8DC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000C37")]
			[Address(RVA = "0xC9F8E0", Offset = "0xC9F8E0", VA = "0xC9F8E0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000C39")]
			[Address(RVA = "0xC9FA60", Offset = "0xC9FA60", VA = "0xC9FA60", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000AA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float maxAngle;

		[Token(Token = "0x4000AA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float switchRotationTime;

		[Token(Token = "0x4000AA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float random;

		[Token(Token = "0x4000AA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float rotationSpeed;

		[Token(Token = "0x4000AA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityEngine.Vector3 movePosition;

		[Token(Token = "0x4000AA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float moveSpeed;

		[Token(Token = "0x4000AA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int characterLayer;

		[Token(Token = "0x4000AA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Quaternion defaultRotation;

		[Token(Token = "0x4000AA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Quaternion targetRotation;

		[Token(Token = "0x4000AA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private UnityEngine.Vector3 targetPosition;

		[Token(Token = "0x4000AAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private UnityEngine.Vector3 velocity;

		[Token(Token = "0x4000AAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Rigidbody r;

		[Token(Token = "0x6000C2F")]
		[Address(RVA = "0xC9F314", Offset = "0xC9F314", VA = "0xC9F314")]
		private void Start()
		{
		}

		[Token(Token = "0x6000C30")]
		[Address(RVA = "0xC9F438", Offset = "0xC9F438", VA = "0xC9F438")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000C31")]
		[Address(RVA = "0xC9F3D0", Offset = "0xC9F3D0", VA = "0xC9F3D0")]
		[IteratorStateMachine(typeof(<SwitchRotation>d__14))]
		private IEnumerator SwitchRotation()
		{
			return null;
		}

		[Token(Token = "0x6000C32")]
		[Address(RVA = "0xC9F714", Offset = "0xC9F714", VA = "0xC9F714")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6000C33")]
		[Address(RVA = "0xC9F7EC", Offset = "0xC9F7EC", VA = "0xC9F7EC")]
		private void OnCollisionExit(Collision collision)
		{
		}

		[Token(Token = "0x6000C34")]
		[Address(RVA = "0xC9F8C0", Offset = "0xC9F8C0", VA = "0xC9F8C0")]
		public PlatformRotator()
		{
		}
	}
	[Token(Token = "0x2000186")]
	public class BendGoal : MonoBehaviour
	{
		[Token(Token = "0x4000AAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LimbIK limbIK;

		[Token(Token = "0x4000AB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 1f)]
		public float weight;

		[Token(Token = "0x6000C3B")]
		[Address(RVA = "0xC9FAA8", Offset = "0xC9FAA8", VA = "0xC9FAA8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000C3C")]
		[Address(RVA = "0xC9FB10", Offset = "0xC9FB10", VA = "0xC9FB10")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000C3D")]
		[Address(RVA = "0xC9FBBC", Offset = "0xC9FBBC", VA = "0xC9FBBC")]
		public BendGoal()
		{
		}
	}
	[Token(Token = "0x2000187")]
	public class Turret : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000188")]
		public class Part
		{
			[Token(Token = "0x4000AB3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform transform;

			[Token(Token = "0x4000AB4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private RotationLimit rotationLimit;

			[Token(Token = "0x6000C40")]
			[Address(RVA = "0xC9FC30", Offset = "0xC9FC30", VA = "0xC9FC30")]
			public void AimAt(Transform target)
			{
			}

			[Token(Token = "0x6000C41")]
			[Address(RVA = "0xC9FD50", Offset = "0xC9FD50", VA = "0xC9FD50")]
			public Part()
			{
			}
		}

		[Token(Token = "0x4000AB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x4000AB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Part[] parts;

		[Token(Token = "0x6000C3E")]
		[Address(RVA = "0xC9FBCC", Offset = "0xC9FBCC", VA = "0xC9FBCC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000C3F")]
		[Address(RVA = "0xC9FD48", Offset = "0xC9FD48", VA = "0xC9FD48")]
		public Turret()
		{
		}
	}
	[Token(Token = "0x2000189")]
	public class HitReactionVRIKTrigger : MonoBehaviour
	{
		[Token(Token = "0x4000AB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HitReactionVRIK hitReaction;

		[Token(Token = "0x4000AB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float hitForce;

		[Token(Token = "0x4000AB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string colliderName;

		[Token(Token = "0x6000C42")]
		[Address(RVA = "0xC9FD58", Offset = "0xC9FD58", VA = "0xC9FD58")]
		private void Update()
		{
		}

		[Token(Token = "0x6000C43")]
		[Address(RVA = "0xC9FE9C", Offset = "0xC9FE9C", VA = "0xC9FE9C")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000C44")]
		[Address(RVA = "0xCA0000", Offset = "0xCA0000", VA = "0xCA0000")]
		public HitReactionVRIKTrigger()
		{
		}
	}
	[Token(Token = "0x200018A")]
	public class VRIKCalibrationBasic : MonoBehaviour
	{
		[Token(Token = "0x4000AB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The VRIK component.")]
		public VRIK ik;

		[Token(Token = "0x4000AB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("HMD.")]
		[Header("Head")]
		public Transform centerEyeAnchor;

		[Token(Token = "0x4000ABA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Position offset of the camera from the head bone (root space).")]
		public UnityEngine.Vector3 headAnchorPositionOffset;

		[Token(Token = "0x4000ABB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("Rotation offset of the camera from the head bone (root space).")]
		public UnityEngine.Vector3 headAnchorRotationOffset;

		[Token(Token = "0x4000ABC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Hands")]
		[Tooltip("Left Hand Controller")]
		public Transform leftHandAnchor;

		[Token(Token = "0x4000ABD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Right Hand Controller")]
		public Transform rightHandAnchor;

		[Token(Token = "0x4000ABE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Position offset of the hand controller from the hand bone (controller space).")]
		public UnityEngine.Vector3 handAnchorPositionOffset;

		[Token(Token = "0x4000ABF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("Rotation offset of the hand controller from the hand bone (controller space).")]
		public UnityEngine.Vector3 handAnchorRotationOffset;

		[Token(Token = "0x4000AC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Header("Scale")]
		[Tooltip("Multiplies the scale of the root.")]
		public float scaleMlp;

		[Token(Token = "0x4000AC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Header("Data stored by Calibration")]
		public VRIKCalibrator.CalibrationData data;

		[Token(Token = "0x6000C45")]
		[Address(RVA = "0xCA0010", Offset = "0xCA0010", VA = "0xCA0010")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000C46")]
		[Address(RVA = "0xCA0198", Offset = "0xCA0198", VA = "0xCA0198")]
		public VRIKCalibrationBasic()
		{
		}
	}
	[Token(Token = "0x200018B")]
	public class VRIKCalibrationController : MonoBehaviour
	{
		[Token(Token = "0x4000AC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Reference to the VRIK component on the avatar.")]
		public VRIK ik;

		[Token(Token = "0x4000AC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The settings for VRIK calibration.")]
		public VRIKCalibrator.Settings settings;

		[Token(Token = "0x4000AC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The HMD.")]
		public Transform headTracker;

		[Token(Token = "0x4000AC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("(Optional) A tracker placed anywhere on the body of the player, preferrably close to the pelvis, on the belt area.")]
		public Transform bodyTracker;

		[Token(Token = "0x4000AC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("(Optional) A tracker or hand controller device placed anywhere on or in the player's left hand.")]
		public Transform leftHandTracker;

		[Token(Token = "0x4000AC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("(Optional) A tracker or hand controller device placed anywhere on or in the player's right hand.")]
		public Transform rightHandTracker;

		[Token(Token = "0x4000AC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("(Optional) A tracker placed anywhere on the ankle or toes of the player's left leg.")]
		public Transform leftFootTracker;

		[Token(Token = "0x4000AC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("(Optional) A tracker placed anywhere on the ankle or toes of the player's right leg.")]
		public Transform rightFootTracker;

		[Token(Token = "0x4000ACA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Header("Data stored by Calibration")]
		public VRIKCalibrator.CalibrationData data;

		[Token(Token = "0x6000C47")]
		[Address(RVA = "0xCA0208", Offset = "0xCA0208", VA = "0xCA0208")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000C48")]
		[Address(RVA = "0xCA0360", Offset = "0xCA0360", VA = "0xCA0360")]
		public VRIKCalibrationController()
		{
		}
	}
	[Token(Token = "0x200018C")]
	public class VRIKPlatform : MonoBehaviour
	{
		[Token(Token = "0x4000ACB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VRIK ik;

		[Token(Token = "0x4000ACC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private UnityEngine.Vector3 lastPosition;

		[Token(Token = "0x4000ACD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Quaternion lastRotation;

		[Token(Token = "0x6000C49")]
		[Address(RVA = "0xCA03C8", Offset = "0xCA03C8", VA = "0xCA03C8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000C4A")]
		[Address(RVA = "0xCA0418", Offset = "0xCA0418", VA = "0xCA0418")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000C4B")]
		[Address(RVA = "0xCA05F0", Offset = "0xCA05F0", VA = "0xCA05F0")]
		public VRIKPlatform()
		{
		}
	}
	[Token(Token = "0x200018D")]
	public class VRIKPlatformController : MonoBehaviour
	{
		[Token(Token = "0x4000ACE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VRIK ik;

		[Token(Token = "0x4000ACF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform trackingSpace;

		[Token(Token = "0x4000AD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform platform;

		[Token(Token = "0x4000AD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool moveToPlatform;

		[Token(Token = "0x4000AD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform lastPlatform;

		[Token(Token = "0x4000AD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private UnityEngine.Vector3 lastPosition;

		[Token(Token = "0x4000AD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Quaternion lastRotation;

		[Token(Token = "0x6000C4C")]
		[Address(RVA = "0xCA0648", Offset = "0xCA0648", VA = "0xCA0648")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000C4D")]
		[Address(RVA = "0xCA0B68", Offset = "0xCA0B68", VA = "0xCA0B68")]
		public VRIKPlatformController()
		{
		}
	}
	[Token(Token = "0x200018E")]
	public abstract class CharacterAnimationBase : MonoBehaviour
	{
		[Token(Token = "0x4000AD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool smoothFollow;

		[Token(Token = "0x4000AD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float smoothFollowSpeed;

		[Token(Token = "0x4000AD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected bool animatePhysics;

		[Token(Token = "0x4000AD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private UnityEngine.Vector3 lastPosition;

		[Token(Token = "0x4000AD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private UnityEngine.Vector3 localPosition;

		[Token(Token = "0x4000ADA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Quaternion localRotation;

		[Token(Token = "0x4000ADB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Quaternion lastRotation;

		[Token(Token = "0x17000189")]
		public virtual bool animationGrounded
		{
			[Token(Token = "0x6000C4F")]
			[Address(RVA = "0xCA0BE4", Offset = "0xCA0BE4", VA = "0xCA0BE4", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000C4E")]
		[Address(RVA = "0xCA0BC4", Offset = "0xCA0BC4", VA = "0xCA0BC4", Slot = "4")]
		public virtual UnityEngine.Vector3 GetPivotPoint()
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6000C50")]
		[Address(RVA = "0xCA0BEC", Offset = "0xCA0BEC", VA = "0xCA0BEC")]
		public float GetAngleFromForward(UnityEngine.Vector3 worldDirection)
		{
			return default(float);
		}

		[Token(Token = "0x6000C51")]
		[Address(RVA = "0xCA0C4C", Offset = "0xCA0C4C", VA = "0xCA0C4C", Slot = "6")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000C52")]
		[Address(RVA = "0xC95928", Offset = "0xC95928", VA = "0xC95928", Slot = "7")]
		protected virtual void LateUpdate()
		{
		}

		[Token(Token = "0x6000C53")]
		[Address(RVA = "0xCA103C", Offset = "0xCA103C", VA = "0xCA103C", Slot = "8")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6000C54")]
		[Address(RVA = "0xCA0DD0", Offset = "0xCA0DD0", VA = "0xCA0DD0")]
		private void SmoothFollow()
		{
		}

		[Token(Token = "0x6000C55")]
		[Address(RVA = "0xCA104C", Offset = "0xCA104C", VA = "0xCA104C")]
		protected CharacterAnimationBase()
		{
		}
	}
	[Token(Token = "0x200018F")]
	public class CharacterAnimationSimple : CharacterAnimationBase
	{
		[Token(Token = "0x4000ADC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public CharacterThirdPerson characterController;

		[Token(Token = "0x4000ADD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float pivotOffset;

		[Token(Token = "0x4000ADE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public AnimationCurve moveSpeed;

		[Token(Token = "0x4000ADF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Animator animator;

		[Token(Token = "0x6000C56")]
		[Address(RVA = "0xCA1064", Offset = "0xCA1064", VA = "0xCA1064", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000C57")]
		[Address(RVA = "0xCA10BC", Offset = "0xCA10BC", VA = "0xCA10BC", Slot = "4")]
		public override UnityEngine.Vector3 GetPivotPoint()
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6000C58")]
		[Address(RVA = "0xCA114C", Offset = "0xCA114C", VA = "0xCA114C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000C59")]
		[Address(RVA = "0xCA1270", Offset = "0xCA1270", VA = "0xCA1270")]
		public CharacterAnimationSimple()
		{
		}
	}
	[Token(Token = "0x2000190")]
	public class CharacterAnimationThirdPerson : CharacterAnimationBase
	{
		[Token(Token = "0x4000AE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public CharacterThirdPerson characterController;

		[Token(Token = "0x4000AE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private float turnSensitivity;

		[Token(Token = "0x4000AE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[SerializeField]
		private float turnSpeed;

		[Token(Token = "0x4000AE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private float runCycleLegOffset;

		[Token(Token = "0x4000AE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[Range(0.1f, 3f)]
		[SerializeField]
		private float animSpeedMultiplier;

		[Token(Token = "0x4000AE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected Animator animator;

		[Token(Token = "0x4000AE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private UnityEngine.Vector3 lastForward;

		[Token(Token = "0x4000AE7")]
		private const string groundedDirectional = "Grounded Directional";

		[Token(Token = "0x4000AE8")]
		private const string groundedStrafe = "Grounded Strafe";

		[Token(Token = "0x4000AE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float deltaAngle;

		[Token(Token = "0x4000AEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float jumpLeg;

		[Token(Token = "0x4000AEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private bool lastJump;

		[Token(Token = "0x1700018A")]
		public override bool animationGrounded
		{
			[Token(Token = "0x6000C5C")]
			[Address(RVA = "0xCA12A4", Offset = "0xCA12A4", VA = "0xCA12A4", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000C5A")]
		[Address(RVA = "0xC95568", Offset = "0xC95568", VA = "0xC95568", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000C5B")]
		[Address(RVA = "0xCA1288", Offset = "0xCA1288", VA = "0xCA1288", Slot = "4")]
		public override UnityEngine.Vector3 GetPivotPoint()
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6000C5D")]
		[Address(RVA = "0xCA1398", Offset = "0xCA1398", VA = "0xCA1398", Slot = "9")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000C5E")]
		[Address(RVA = "0xCA1788", Offset = "0xCA1788", VA = "0xCA1788")]
		private void OnAnimatorMove()
		{
		}

		[Token(Token = "0x6000C5F")]
		[Address(RVA = "0xC95A4C", Offset = "0xC95A4C", VA = "0xC95A4C")]
		public CharacterAnimationThirdPerson()
		{
		}
	}
	[Token(Token = "0x2000191")]
	public abstract class CharacterBase : MonoBehaviour
	{
		[Token(Token = "0x4000AEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("If specified, will use the direction from the character to this Transform as the gravity vector instead of Physics.gravity. Physics.gravity.magnitude will be used as the magnitude of the gravity vector.")]
		[Header("Base Parameters")]
		public Transform gravityTarget;

		[Token(Token = "0x4000AED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Multiplies gravity applied to the character even if 'Individual Gravity' is unchecked.")]
		public float gravityMultiplier;

		[Token(Token = "0x4000AEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float airborneThreshold;

		[Token(Token = "0x4000AEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float slopeStartAngle;

		[Token(Token = "0x4000AF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float slopeEndAngle;

		[Token(Token = "0x4000AF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float spherecastRadius;

		[Token(Token = "0x4000AF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public LayerMask groundLayers;

		[Token(Token = "0x4000AF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private PhysicMaterial zeroFrictionMaterial;

		[Token(Token = "0x4000AF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private PhysicMaterial highFrictionMaterial;

		[Token(Token = "0x4000AF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected Rigidbody r;

		[Token(Token = "0x4000AF6")]
		protected const float half = 0.5f;

		[Token(Token = "0x4000AF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected float originalHeight;

		[Token(Token = "0x4000AF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		protected UnityEngine.Vector3 originalCenter;

		[Token(Token = "0x4000AF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected CapsuleCollider capsule;

		[Token(Token = "0x6000C60")]
		public abstract void Move(UnityEngine.Vector3 deltaPosition, Quaternion deltaRotation);

		[Token(Token = "0x6000C61")]
		[Address(RVA = "0xBB4CEC", Offset = "0xBB4CEC", VA = "0xBB4CEC")]
		protected UnityEngine.Vector3 GetGravity()
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6000C62")]
		[Address(RVA = "0xBB4ED8", Offset = "0xBB4ED8", VA = "0xBB4ED8", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000C63")]
		[Address(RVA = "0xBB5088", Offset = "0xBB5088", VA = "0xBB5088", Slot = "6")]
		protected virtual RaycastHit GetSpherecastHit()
		{
			return default(RaycastHit);
		}

		[Token(Token = "0x6000C64")]
		[Address(RVA = "0xBB5228", Offset = "0xBB5228", VA = "0xBB5228")]
		public float GetAngleFromForward(UnityEngine.Vector3 worldDirection)
		{
			return default(float);
		}

		[Token(Token = "0x6000C65")]
		[Address(RVA = "0xBB5288", Offset = "0xBB5288", VA = "0xBB5288")]
		protected void RigidbodyRotateAround(UnityEngine.Vector3 point, UnityEngine.Vector3 axis, float angle)
		{
		}

		[Token(Token = "0x6000C66")]
		[Address(RVA = "0xBB53EC", Offset = "0xBB53EC", VA = "0xBB53EC")]
		protected void ScaleCapsule(float mlp)
		{
		}

		[Token(Token = "0x6000C67")]
		[Address(RVA = "0xBB55F0", Offset = "0xBB55F0", VA = "0xBB55F0")]
		protected void HighFriction()
		{
		}

		[Token(Token = "0x6000C68")]
		[Address(RVA = "0xBB5614", Offset = "0xBB5614", VA = "0xBB5614")]
		protected void ZeroFriction()
		{
		}

		[Token(Token = "0x6000C69")]
		[Address(RVA = "0xBB5638", Offset = "0xBB5638", VA = "0xBB5638")]
		protected float GetSlopeDamper(UnityEngine.Vector3 velocity, UnityEngine.Vector3 groundNormal)
		{
			return default(float);
		}

		[Token(Token = "0x6000C6A")]
		[Address(RVA = "0xBB5784", Offset = "0xBB5784", VA = "0xBB5784")]
		protected CharacterBase()
		{
		}
	}
	[Token(Token = "0x2000192")]
	public class CharacterThirdPerson : CharacterBase
	{
		[Serializable]
		[Token(Token = "0x2000193")]
		public enum MoveMode
		{
			[Token(Token = "0x4000B34")]
			Directional,
			[Token(Token = "0x4000B35")]
			Strafe
		}

		[Token(Token = "0x2000194")]
		public struct AnimState
		{
			[Token(Token = "0x4000B36")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UnityEngine.Vector3 moveDirection;

			[Token(Token = "0x4000B37")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public bool jump;

			[Token(Token = "0x4000B38")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
			public bool crouch;

			[Token(Token = "0x4000B39")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE")]
			public bool onGround;

			[Token(Token = "0x4000B3A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF")]
			public bool isStrafing;

			[Token(Token = "0x4000B3B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float yVelocity;

			[Token(Token = "0x4000B3C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public bool doubleJump;
		}

		[Token(Token = "0x2000195")]
		[CompilerGenerated]
		private sealed class <JumpSmooth>d__75 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000B3D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000B3E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000B3F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public CharacterThirdPerson <>4__this;

			[Token(Token = "0x4000B40")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public UnityEngine.Vector3 jumpVelocity;

			[Token(Token = "0x4000B41")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private int <steps>5__2;

			[Token(Token = "0x4000B42")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int <stepsToTake>5__3;

			[Token(Token = "0x1700018C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000C80")]
				[Address(RVA = "0xBB81E4", Offset = "0xBB81E4", VA = "0xBB81E4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700018D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000C82")]
				[Address(RVA = "0xBB822C", Offset = "0xBB822C", VA = "0xBB822C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000C7D")]
			[Address(RVA = "0xBB7FB0", Offset = "0xBB7FB0", VA = "0xBB7FB0")]
			[DebuggerHidden]
			public <JumpSmooth>d__75(int <>1__state)
			{
			}

			[Token(Token = "0x6000C7E")]
			[Address(RVA = "0xBB80EC", Offset = "0xBB80EC", VA = "0xBB80EC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000C7F")]
			[Address(RVA = "0xBB80F0", Offset = "0xBB80F0", VA = "0xBB80F0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000C81")]
			[Address(RVA = "0xBB81EC", Offset = "0xBB81EC", VA = "0xBB81EC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000AFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Header("References")]
		public CharacterAnimationBase characterAnimation;

		[Token(Token = "0x4000AFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public UserControlThirdPerson userControl;

		[Token(Token = "0x4000AFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public CameraController cam;

		[Token(Token = "0x4000AFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Header("Movement")]
		public MoveMode moveMode;

		[Token(Token = "0x4000AFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public bool smoothPhysics;

		[Token(Token = "0x4000AFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float smoothAccelerationTime;

		[Token(Token = "0x4000B00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float linearAccelerationSpeed;

		[Token(Token = "0x4000B01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float platformFriction;

		[Token(Token = "0x4000B02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public float groundStickyEffect;

		[Token(Token = "0x4000B03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public float maxVerticalVelocityOnGround;

		[Token(Token = "0x4000B04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public float velocityToGroundTangentWeight;

		[Token(Token = "0x4000B05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Header("Rotation")]
		public bool lookInCameraDirection;

		[Token(Token = "0x4000B06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public float turnSpeed;

		[Token(Token = "0x4000B07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public float stationaryTurnSpeedMlp;

		[Token(Token = "0x4000B08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[Header("Jumping and Falling")]
		public bool smoothJump;

		[Token(Token = "0x4000B09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public float airSpeed;

		[Token(Token = "0x4000B0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public float airControl;

		[Token(Token = "0x4000B0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public float jumpPower;

		[Token(Token = "0x4000B0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public float jumpRepeatDelayTime;

		[Token(Token = "0x4000B0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public bool doubleJumpEnabled;

		[Token(Token = "0x4000B0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public float doubleJumpPowerMlp;

		[Token(Token = "0x4000B0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Header("Wall Running")]
		public LayerMask wallRunLayers;

		[Token(Token = "0x4000B10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		public float wallRunMaxLength;

		[Token(Token = "0x4000B11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public float wallRunMinMoveMag;

		[Token(Token = "0x4000B12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		public float wallRunMinVelocityY;

		[Token(Token = "0x4000B13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public float wallRunRotationSpeed;

		[Token(Token = "0x4000B14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		public float wallRunMaxRotationAngle;

		[Token(Token = "0x4000B15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public float wallRunWeightSpeed;

		[Token(Token = "0x4000B16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		[Header("Crouching")]
		public float crouchCapsuleScaleMlp;

		[Token(Token = "0x4000B18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		public AnimState animState;

		[Token(Token = "0x4000B19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		protected UnityEngine.Vector3 moveDirection;

		[Token(Token = "0x4000B1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private Animator animator;

		[Token(Token = "0x4000B1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private UnityEngine.Vector3 normal;

		[Token(Token = "0x4000B1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		private UnityEngine.Vector3 platformVelocity;

		[Token(Token = "0x4000B1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private UnityEngine.Vector3 platformAngularVelocity;

		[Token(Token = "0x4000B1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		private RaycastHit hit;

		[Token(Token = "0x4000B1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private float jumpLeg;

		[Token(Token = "0x4000B20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		private float jumpEndTime;

		[Token(Token = "0x4000B21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private float forwardMlp;

		[Token(Token = "0x4000B22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
		private float groundDistance;

		[Token(Token = "0x4000B23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private float lastAirTime;

		[Token(Token = "0x4000B24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
		private float stickyForce;

		[Token(Token = "0x4000B25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private UnityEngine.Vector3 wallNormal;

		[Token(Token = "0x4000B26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
		private UnityEngine.Vector3 moveDirectionVelocity;

		[Token(Token = "0x4000B27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		private float wallRunWeight;

		[Token(Token = "0x4000B28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
		private float lastWallRunWeight;

		[Token(Token = "0x4000B29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		private float fixedDeltaTime;

		[Token(Token = "0x4000B2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
		private UnityEngine.Vector3 fixedDeltaPosition;

		[Token(Token = "0x4000B2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		private Quaternion fixedDeltaRotation;

		[Token(Token = "0x4000B2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		private bool fixedFrame;

		[Token(Token = "0x4000B2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C4")]
		private float wallRunEndTime;

		[Token(Token = "0x4000B2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		private UnityEngine.Vector3 gravity;

		[Token(Token = "0x4000B2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D4")]
		private UnityEngine.Vector3 verticalVelocity;

		[Token(Token = "0x4000B30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		private float velocityY;

		[Token(Token = "0x4000B31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E4")]
		private bool doubleJumped;

		[Token(Token = "0x4000B32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E5")]
		private bool jumpReleased;

		[Token(Token = "0x1700018B")]
		public bool onGround
		{
			[Token(Token = "0x6000C6B")]
			[Address(RVA = "0xBB57A4", Offset = "0xBB57A4", VA = "0xBB57A4")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000C6C")]
			[Address(RVA = "0xBB57AC", Offset = "0xBB57AC", VA = "0xBB57AC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000C6D")]
		[Address(RVA = "0xBB57B8", Offset = "0xBB57B8", VA = "0xBB57B8", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000C6E")]
		[Address(RVA = "0xBB5988", Offset = "0xBB5988", VA = "0xBB5988")]
		private void OnAnimatorMove()
		{
		}

		[Token(Token = "0x6000C6F")]
		[Address(RVA = "0xBB5A0C", Offset = "0xBB5A0C", VA = "0xBB5A0C", Slot = "4")]
		public override void Move(UnityEngine.Vector3 deltaPosition, Quaternion deltaRotation)
		{
		}

		[Token(Token = "0x6000C70")]
		[Address(RVA = "0xBB5B20", Offset = "0xBB5B20", VA = "0xBB5B20")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000C71")]
		[Address(RVA = "0xBB6B48", Offset = "0xBB6B48", VA = "0xBB6B48", Slot = "7")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000C72")]
		[Address(RVA = "0xBB6FD8", Offset = "0xBB6FD8", VA = "0xBB6FD8", Slot = "8")]
		protected virtual void LateUpdate()
		{
		}

		[Token(Token = "0x6000C73")]
		[Address(RVA = "0xBB61D4", Offset = "0xBB61D4", VA = "0xBB61D4")]
		private void MoveFixed(UnityEngine.Vector3 deltaPosition)
		{
		}

		[Token(Token = "0x6000C74")]
		[Address(RVA = "0xBB70B0", Offset = "0xBB70B0", VA = "0xBB70B0")]
		private void WallRun()
		{
		}

		[Token(Token = "0x6000C75")]
		[Address(RVA = "0xBB7738", Offset = "0xBB7738", VA = "0xBB7738")]
		private bool CanWallRun()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C76")]
		[Address(RVA = "0xBB6BD4", Offset = "0xBB6BD4", VA = "0xBB6BD4")]
		private UnityEngine.Vector3 GetMoveDirection()
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6000C77")]
		[Address(RVA = "0xBB7828", Offset = "0xBB7828", VA = "0xBB7828", Slot = "9")]
		protected virtual void Rotate()
		{
		}

		[Token(Token = "0x6000C78")]
		[Address(RVA = "0xBB7CA8", Offset = "0xBB7CA8", VA = "0xBB7CA8")]
		private UnityEngine.Vector3 GetForwardDirection()
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6000C79")]
		[Address(RVA = "0xBB7DD0", Offset = "0xBB7DD0", VA = "0xBB7DD0", Slot = "10")]
		protected virtual bool Jump()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C7A")]
		[Address(RVA = "0xBB7F24", Offset = "0xBB7F24", VA = "0xBB7F24")]
		[IteratorStateMachine(typeof(<JumpSmooth>d__75))]
		private IEnumerator JumpSmooth(UnityEngine.Vector3 jumpVelocity)
		{
			return null;
		}

		[Token(Token = "0x6000C7B")]
		[Address(RVA = "0xBB65E8", Offset = "0xBB65E8", VA = "0xBB65E8")]
		private void GroundCheck()
		{
		}

		[Token(Token = "0x6000C7C")]
		[Address(RVA = "0xBB7FD8", Offset = "0xBB7FD8", VA = "0xBB7FD8")]
		public CharacterThirdPerson()
		{
		}
	}
	[Token(Token = "0x2000196")]
	public class SimpleLocomotion : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000197")]
		public enum RotationMode
		{
			[Token(Token = "0x4000B51")]
			Smooth,
			[Token(Token = "0x4000B52")]
			Linear
		}

		[Token(Token = "0x4000B43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The component that updates the camera.")]
		public CameraController cameraController;

		[Token(Token = "0x4000B44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Acceleration of movement.")]
		public float accelerationTime;

		[Token(Token = "0x4000B45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("Turning speed.")]
		public float turnTime;

		[Token(Token = "0x4000B46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("If true, will run on left shift, if not will walk on left shift.")]
		public bool walkByDefault;

		[Token(Token = "0x4000B47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("Smooth or linear rotation.")]
		public RotationMode rotationMode;

		[Token(Token = "0x4000B48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Procedural motion speed (if not using root motion).")]
		public float moveSpeed;

		[Token(Token = "0x4000B4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Animator animator;

		[Token(Token = "0x4000B4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float speed;

		[Token(Token = "0x4000B4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float angleVel;

		[Token(Token = "0x4000B4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float speedVel;

		[Token(Token = "0x4000B4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private UnityEngine.Vector3 linearTargetDirection;

		[Token(Token = "0x4000B4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private CharacterController characterController;

		[Token(Token = "0x1700018E")]
		public bool isGrounded
		{
			[Token(Token = "0x6000C83")]
			[Address(RVA = "0xBB8234", Offset = "0xBB8234", VA = "0xBB8234")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000C84")]
			[Address(RVA = "0xBB823C", Offset = "0xBB823C", VA = "0xBB823C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000C85")]
		[Address(RVA = "0xBB8248", Offset = "0xBB8248", VA = "0xBB8248")]
		private void Start()
		{
		}

		[Token(Token = "0x6000C86")]
		[Address(RVA = "0xBB82DC", Offset = "0xBB82DC", VA = "0xBB82DC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000C87")]
		[Address(RVA = "0xBB88F4", Offset = "0xBB88F4", VA = "0xBB88F4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000C88")]
		[Address(RVA = "0xBB8324", Offset = "0xBB8324", VA = "0xBB8324")]
		private void Rotate()
		{
		}

		[Token(Token = "0x6000C89")]
		[Address(RVA = "0xBB868C", Offset = "0xBB868C", VA = "0xBB868C")]
		private void Move()
		{
		}

		[Token(Token = "0x6000C8A")]
		[Address(RVA = "0xBB8924", Offset = "0xBB8924", VA = "0xBB8924")]
		private UnityEngine.Vector3 GetInputVector()
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6000C8B")]
		[Address(RVA = "0xBB89BC", Offset = "0xBB89BC", VA = "0xBB89BC")]
		private UnityEngine.Vector3 GetInputVectorRaw()
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6000C8C")]
		[Address(RVA = "0xBB8A3C", Offset = "0xBB8A3C", VA = "0xBB8A3C")]
		public SimpleLocomotion()
		{
		}
	}
	[Token(Token = "0x2000198")]
	public class UserControlAI : UserControlThirdPerson
	{
		[Token(Token = "0x4000B53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform moveTarget;

		[Token(Token = "0x4000B54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float stoppingDistance;

		[Token(Token = "0x4000B55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float stoppingThreshold;

		[Token(Token = "0x4000B56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Navigator navigator;

		[Token(Token = "0x6000C8D")]
		[Address(RVA = "0xBB8A64", Offset = "0xBB8A64", VA = "0xBB8A64", Slot = "4")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000C8E")]
		[Address(RVA = "0xBB8B80", Offset = "0xBB8B80", VA = "0xBB8B80", Slot = "5")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6000C8F")]
		[Address(RVA = "0xBB91E4", Offset = "0xBB91E4", VA = "0xBB91E4")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6000C90")]
		[Address(RVA = "0xBB93D0", Offset = "0xBB93D0", VA = "0xBB93D0")]
		public UserControlAI()
		{
		}
	}
	[Token(Token = "0x2000199")]
	public class UserControlThirdPerson : MonoBehaviour
	{
		[Token(Token = "0x200019A")]
		public struct State
		{
			[Token(Token = "0x4000B5C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UnityEngine.Vector3 move;

			[Token(Token = "0x4000B5D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public UnityEngine.Vector3 lookPos;

			[Token(Token = "0x4000B5E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public bool crouch;

			[Token(Token = "0x4000B5F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
			public bool jump;

			[Token(Token = "0x4000B60")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public int actionIndex;
		}

		[Token(Token = "0x4000B57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool walkByDefault;

		[Token(Token = "0x4000B58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool canCrouch;

		[Token(Token = "0x4000B59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public bool canJump;

		[Token(Token = "0x4000B5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public State state;

		[Token(Token = "0x4000B5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected Transform cam;

		[Token(Token = "0x6000C91")]
		[Address(RVA = "0xBB8AA0", Offset = "0xBB8AA0", VA = "0xBB8AA0", Slot = "4")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000C92")]
		[Address(RVA = "0xBB93FC", Offset = "0xBB93FC", VA = "0xBB93FC", Slot = "5")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000C93")]
		[Address(RVA = "0xBB93EC", Offset = "0xBB93EC", VA = "0xBB93EC")]
		public UserControlThirdPerson()
		{
		}
	}
	[Token(Token = "0x200019B")]
	public class ApplicationQuit : MonoBehaviour
	{
		[Token(Token = "0x6000C94")]
		[Address(RVA = "0xBB9740", Offset = "0xBB9740", VA = "0xBB9740")]
		private void Update()
		{
		}

		[Token(Token = "0x6000C95")]
		[Address(RVA = "0xBB9778", Offset = "0xBB9778", VA = "0xBB9778")]
		public ApplicationQuit()
		{
		}
	}
	[Token(Token = "0x200019C")]
	public class SlowMo : MonoBehaviour
	{
		[Token(Token = "0x4000B61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public KeyCode[] keyCodes;

		[Token(Token = "0x4000B62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool mouse0;

		[Token(Token = "0x4000B63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool mouse1;

		[Token(Token = "0x4000B64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float slowMoTimeScale;

		[Token(Token = "0x6000C96")]
		[Address(RVA = "0xBB9780", Offset = "0xBB9780", VA = "0xBB9780")]
		private void Update()
		{
		}

		[Token(Token = "0x6000C97")]
		[Address(RVA = "0xBB97A8", Offset = "0xBB97A8", VA = "0xBB97A8")]
		private bool IsSlowMotion()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C98")]
		[Address(RVA = "0xBB984C", Offset = "0xBB984C", VA = "0xBB984C")]
		public SlowMo()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200019D")]
	public class Navigator
	{
		[Token(Token = "0x200019E")]
		public enum State
		{
			[Token(Token = "0x4000B74")]
			Idle,
			[Token(Token = "0x4000B75")]
			Seeking,
			[Token(Token = "0x4000B76")]
			OnPath
		}

		[Token(Token = "0x4000B65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Tooltip("Should this Navigator be actively seeking a path.")]
		public bool activeTargetSeeking;

		[Token(Token = "0x4000B66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[Tooltip("Increase this value if the character starts running in a circle, not able to reach the corner because of a too large turning radius.")]
		public float cornerRadius;

		[Token(Token = "0x4000B67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Recalculate path if target position has moved by this distance from the position it was at when the path was originally calculated")]
		public float recalculateOnPathDistance;

		[Token(Token = "0x4000B68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Sample within this distance from sourcePosition.")]
		public float maxSampleDistance;

		[Token(Token = "0x4000B69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Interval of updating the path")]
		public float nextPathInterval;

		[Token(Token = "0x4000B6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform transform;

		[Token(Token = "0x4000B6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int cornerIndex;

		[Token(Token = "0x4000B6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private UnityEngine.Vector3[] corners;

		[Token(Token = "0x4000B6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private NavMeshPath path;

		[Token(Token = "0x4000B70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private UnityEngine.Vector3 lastTargetPosition;

		[Token(Token = "0x4000B71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private bool initiated;

		[Token(Token = "0x4000B72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float nextPathTime;

		[Token(Token = "0x1700018F")]
		public UnityEngine.Vector3 normalizedDeltaPosition
		{
			[Token(Token = "0x6000C99")]
			[Address(RVA = "0xBB9860", Offset = "0xBB9860", VA = "0xBB9860")]
			[CompilerGenerated]
			get
			{
				return default(UnityEngine.Vector3);
			}
			[Token(Token = "0x6000C9A")]
			[Address(RVA = "0xBB986C", Offset = "0xBB986C", VA = "0xBB986C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000190")]
		public State state
		{
			[Token(Token = "0x6000C9B")]
			[Address(RVA = "0xBB9878", Offset = "0xBB9878", VA = "0xBB9878")]
			[CompilerGenerated]
			get
			{
				return default(State);
			}
			[Token(Token = "0x6000C9C")]
			[Address(RVA = "0xBB9880", Offset = "0xBB9880", VA = "0xBB9880")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000C9D")]
		[Address(RVA = "0xBB8ACC", Offset = "0xBB8ACC", VA = "0xBB8ACC")]
		public void Initiate(Transform transform)
		{
		}

		[Token(Token = "0x6000C9E")]
		[Address(RVA = "0xBB8DA0", Offset = "0xBB8DA0", VA = "0xBB8DA0")]
		public void Update(UnityEngine.Vector3 targetPosition)
		{
		}

		[Token(Token = "0x6000C9F")]
		[Address(RVA = "0xBB9960", Offset = "0xBB9960", VA = "0xBB9960")]
		private void CalculatePath(UnityEngine.Vector3 targetPosition)
		{
		}

		[Token(Token = "0x6000CA0")]
		[Address(RVA = "0xBB99C4", Offset = "0xBB99C4", VA = "0xBB99C4")]
		private bool Find(UnityEngine.Vector3 targetPosition)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CA1")]
		[Address(RVA = "0xBB9888", Offset = "0xBB9888", VA = "0xBB9888")]
		private void Stop()
		{
		}

		[Token(Token = "0x6000CA2")]
		[Address(RVA = "0xBB98E4", Offset = "0xBB98E4", VA = "0xBB98E4")]
		private float HorDistance(UnityEngine.Vector3 p1, UnityEngine.Vector3 p2)
		{
			return default(float);
		}

		[Token(Token = "0x6000CA3")]
		[Address(RVA = "0xBB920C", Offset = "0xBB920C", VA = "0xBB920C")]
		public void Visualize()
		{
		}

		[Token(Token = "0x6000CA4")]
		[Address(RVA = "0xBB9AF8", Offset = "0xBB9AF8", VA = "0xBB9AF8")]
		public Navigator()
		{
		}
	}
}
namespace POpusCodec
{
	[Token(Token = "0x200019F")]
	public class OpusDecoder : IDisposable
	{
		[Token(Token = "0x4000B77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IntPtr _handle;

		[Token(Token = "0x4000B78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string _version;

		[Token(Token = "0x4000B79")]
		private const int MaxFrameSize = 5760;

		[Token(Token = "0x4000B7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool _previousPacketInvalid;

		[Token(Token = "0x4000B7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int _channelCount;

		[Token(Token = "0x4000B7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly float[] EmptyBufferFloat;

		[Token(Token = "0x4000B7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly short[] EmptyBufferShort;

		[Token(Token = "0x4000B7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Bandwidth? _previousPacketBandwidth;

		[Token(Token = "0x4000B7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float[] bufferFloat;

		[Token(Token = "0x4000B80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private short[] bufferShort;

		[Token(Token = "0x17000191")]
		public string Version
		{
			[Token(Token = "0x6000CA5")]
			[Address(RVA = "0xBB9B5C", Offset = "0xBB9B5C", VA = "0xBB9B5C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000192")]
		public Bandwidth? PreviousPacketBandwidth
		{
			[Token(Token = "0x6000CA6")]
			[Address(RVA = "0xBB9B64", Offset = "0xBB9B64", VA = "0xBB9B64")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000CA7")]
		[Address(RVA = "0xBB9B6C", Offset = "0xBB9B6C", VA = "0xBB9B6C")]
		public OpusDecoder(SamplingRate outputSamplingRateHz, Channels numChannels)
		{
		}

		[Token(Token = "0x6000CA8")]
		[Address(RVA = "0xBBA040", Offset = "0xBBA040", VA = "0xBBA040")]
		public float[] DecodePacketFloat(byte[] packetData)
		{
			return null;
		}

		[Token(Token = "0x6000CA9")]
		[Address(RVA = "0xBBA324", Offset = "0xBBA324", VA = "0xBBA324")]
		public short[] DecodePacketShort(byte[] packetData)
		{
			return null;
		}

		[Token(Token = "0x6000CAA")]
		[Address(RVA = "0xBBA588", Offset = "0xBBA588", VA = "0xBBA588", Slot = "4")]
		public void Dispose()
		{
		}
	}
	[Token(Token = "0x20001A0")]
	public class OpusEncoder : IDisposable
	{
		[Token(Token = "0x4000B81")]
		public const int BitrateMax = -1;

		[Token(Token = "0x4000B82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IntPtr _handle;

		[Token(Token = "0x4000B83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string _version;

		[Token(Token = "0x4000B84")]
		private const int RecommendedMaxPacketSize = 4000;

		[Token(Token = "0x4000B85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int _frameSizePerChannel;

		[Token(Token = "0x4000B86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private SamplingRate _inputSamplingRate;

		[Token(Token = "0x4000B87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Channels _inputChannels;

		[Token(Token = "0x4000B88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly byte[] writePacket;

		[Token(Token = "0x4000B89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly ArraySegment<byte> EmptyBuffer;

		[Token(Token = "0x4000B8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Delay _encoderDelay;

		[Token(Token = "0x17000193")]
		public SamplingRate InputSamplingRate
		{
			[Token(Token = "0x6000CAC")]
			[Address(RVA = "0xBBA6F0", Offset = "0xBBA6F0", VA = "0xBBA6F0")]
			get
			{
				return default(SamplingRate);
			}
		}

		[Token(Token = "0x17000194")]
		public Channels InputChannels
		{
			[Token(Token = "0x6000CAD")]
			[Address(RVA = "0xBBA6F8", Offset = "0xBBA6F8", VA = "0xBBA6F8")]
			get
			{
				return default(Channels);
			}
		}

		[Token(Token = "0x17000195")]
		public string Version
		{
			[Token(Token = "0x6000CAE")]
			[Address(RVA = "0xBBA700", Offset = "0xBBA700", VA = "0xBBA700")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000196")]
		public Delay EncoderDelay
		{
			[Token(Token = "0x6000CB0")]
			[Address(RVA = "0xBBA81C", Offset = "0xBBA81C", VA = "0xBBA81C")]
			get
			{
				return default(Delay);
			}
			[Token(Token = "0x6000CAF")]
			[Address(RVA = "0xBBA708", Offset = "0xBBA708", VA = "0xBBA708")]
			set
			{
			}
		}

		[Token(Token = "0x17000197")]
		public int FrameSizePerChannel
		{
			[Token(Token = "0x6000CB1")]
			[Address(RVA = "0xBBA824", Offset = "0xBBA824", VA = "0xBBA824")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000198")]
		public int Bitrate
		{
			[Token(Token = "0x6000CB2")]
			[Address(RVA = "0xBBA82C", Offset = "0xBBA82C", VA = "0xBBA82C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000CB3")]
			[Address(RVA = "0xBBA90C", Offset = "0xBBA90C", VA = "0xBBA90C")]
			set
			{
			}
		}

		[Token(Token = "0x17000199")]
		public Bandwidth MaxBandwidth
		{
			[Token(Token = "0x6000CB4")]
			[Address(RVA = "0xBBA9E4", Offset = "0xBBA9E4", VA = "0xBBA9E4")]
			get
			{
				return default(Bandwidth);
			}
			[Token(Token = "0x6000CB5")]
			[Address(RVA = "0xBBA9F0", Offset = "0xBBA9F0", VA = "0xBBA9F0")]
			set
			{
			}
		}

		[Token(Token = "0x1700019A")]
		public Complexity Complexity
		{
			[Token(Token = "0x6000CB6")]
			[Address(RVA = "0xBBAA00", Offset = "0xBBAA00", VA = "0xBBAA00")]
			get
			{
				return default(Complexity);
			}
			[Token(Token = "0x6000CB7")]
			[Address(RVA = "0xBBAA0C", Offset = "0xBBAA0C", VA = "0xBBAA0C")]
			set
			{
			}
		}

		[Token(Token = "0x1700019B")]
		public int ExpectedPacketLossPercentage
		{
			[Token(Token = "0x6000CB8")]
			[Address(RVA = "0xBBAA1C", Offset = "0xBBAA1C", VA = "0xBBAA1C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000CB9")]
			[Address(RVA = "0xBBAA28", Offset = "0xBBAA28", VA = "0xBBAA28")]
			set
			{
			}
		}

		[Token(Token = "0x1700019C")]
		public SignalHint SignalHint
		{
			[Token(Token = "0x6000CBA")]
			[Address(RVA = "0xBBAA38", Offset = "0xBBAA38", VA = "0xBBAA38")]
			get
			{
				return default(SignalHint);
			}
			[Token(Token = "0x6000CBB")]
			[Address(RVA = "0xBBAA44", Offset = "0xBBAA44", VA = "0xBBAA44")]
			set
			{
			}
		}

		[Token(Token = "0x1700019D")]
		public ForceChannels ForceChannels
		{
			[Token(Token = "0x6000CBC")]
			[Address(RVA = "0xBBAA54", Offset = "0xBBAA54", VA = "0xBBAA54")]
			get
			{
				return default(ForceChannels);
			}
			[Token(Token = "0x6000CBD")]
			[Address(RVA = "0xBBAA60", Offset = "0xBBAA60", VA = "0xBBAA60")]
			set
			{
			}
		}

		[Token(Token = "0x1700019E")]
		public bool UseInbandFEC
		{
			[Token(Token = "0x6000CBE")]
			[Address(RVA = "0xBBAA70", Offset = "0xBBAA70", VA = "0xBBAA70")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000CBF")]
			[Address(RVA = "0xBBAA90", Offset = "0xBBAA90", VA = "0xBBAA90")]
			set
			{
			}
		}

		[Token(Token = "0x1700019F")]
		public bool UseUnconstrainedVBR
		{
			[Token(Token = "0x6000CC0")]
			[Address(RVA = "0xBBAAA0", Offset = "0xBBAAA0", VA = "0xBBAAA0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000CC1")]
			[Address(RVA = "0xBBAAC0", Offset = "0xBBAAC0", VA = "0xBBAAC0")]
			set
			{
			}
		}

		[Token(Token = "0x170001A0")]
		public bool DtxEnabled
		{
			[Token(Token = "0x6000CC2")]
			[Address(RVA = "0xBBAAD4", Offset = "0xBBAAD4", VA = "0xBBAAD4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000CC3")]
			[Address(RVA = "0xBBAAF4", Offset = "0xBBAAF4", VA = "0xBBAAF4")]
			set
			{
			}
		}

		[Token(Token = "0x6000CC4")]
		[Address(RVA = "0xBBAB04", Offset = "0xBBAB04", VA = "0xBBAB04")]
		public OpusEncoder(SamplingRate inputSamplingRateHz, Channels numChannels, int bitrate, OpusApplicationType applicationType, Delay encoderDelay)
		{
		}

		[Token(Token = "0x6000CC5")]
		[Address(RVA = "0xBBB0C4", Offset = "0xBBB0C4", VA = "0xBBB0C4")]
		public ArraySegment<byte> Encode(float[] pcmSamples)
		{
			return default(ArraySegment<byte>);
		}

		[Token(Token = "0x6000CC6")]
		[Address(RVA = "0xBBB280", Offset = "0xBBB280", VA = "0xBBB280")]
		public ArraySegment<byte> Encode(short[] pcmSamples)
		{
			return default(ArraySegment<byte>);
		}

		[Token(Token = "0x6000CC7")]
		[Address(RVA = "0xBBB43C", Offset = "0xBBB43C", VA = "0xBBB43C", Slot = "4")]
		public void Dispose()
		{
		}
	}
	[Token(Token = "0x20001A1")]
	public class OpusException : Exception
	{
		[Token(Token = "0x4000B8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private OpusStatusCode _statusCode;

		[Token(Token = "0x170001A1")]
		public OpusStatusCode StatusCode
		{
			[Token(Token = "0x6000CC9")]
			[Address(RVA = "0xBBB5AC", Offset = "0xBBB5AC", VA = "0xBBB5AC")]
			get
			{
				return default(OpusStatusCode);
			}
		}

		[Token(Token = "0x6000CCA")]
		[Address(RVA = "0xBB9FCC", Offset = "0xBB9FCC", VA = "0xBB9FCC")]
		public OpusException(OpusStatusCode statusCode, string message)
		{
		}
	}
	[Token(Token = "0x20001A2")]
	internal class Wrapper
	{
		[Token(Token = "0x4000B8C")]
		private const string lib_name = "opus_egpv";

		[PreserveSig]
		[Token(Token = "0x6000CCB")]
		[Address(RVA = "0xBBB5B4", Offset = "0xBBB5B4", VA = "0xBBB5B4")]
		private static extern int opus_encoder_get_size(Channels channels);

		[PreserveSig]
		[Token(Token = "0x6000CCC")]
		[Address(RVA = "0xBBB630", Offset = "0xBBB630", VA = "0xBBB630")]
		private static extern OpusStatusCode opus_encoder_init(IntPtr st, SamplingRate Fs, Channels channels, OpusApplicationType application);

		[PreserveSig]
		[Token(Token = "0x6000CCD")]
		[Address(RVA = "0xBB9F68", Offset = "0xBB9F68", VA = "0xBB9F68")]
		public static extern IntPtr opus_get_version_string();

		[PreserveSig]
		[Token(Token = "0x6000CCE")]
		[Address(RVA = "0xBBB6CC", Offset = "0xBBB6CC", VA = "0xBBB6CC")]
		private static extern int opus_encode(IntPtr st, short[] pcm, int frame_size, byte[] data, int max_data_bytes);

		[PreserveSig]
		[Token(Token = "0x6000CCF")]
		[Address(RVA = "0xBBB788", Offset = "0xBBB788", VA = "0xBBB788")]
		private static extern int opus_encode_float(IntPtr st, float[] pcm, int frame_size, byte[] data, int max_data_bytes);

		[PreserveSig]
		[Token(Token = "0x6000CD0")]
		[Address(RVA = "0xBBB844", Offset = "0xBBB844", VA = "0xBBB844")]
		private static extern int opus_encoder_ctl_set(IntPtr st, OpusCtlSetRequest request, int value);

		[PreserveSig]
		[Token(Token = "0x6000CD1")]
		[Address(RVA = "0xBBB8D8", Offset = "0xBBB8D8", VA = "0xBBB8D8")]
		private static extern int opus_encoder_ctl_get(IntPtr st, OpusCtlGetRequest request, ref int value);

		[PreserveSig]
		[Token(Token = "0x6000CD2")]
		[Address(RVA = "0xBBB968", Offset = "0xBBB968", VA = "0xBBB968")]
		private static extern int opus_decoder_ctl_set(IntPtr st, OpusCtlSetRequest request, int value);

		[PreserveSig]
		[Token(Token = "0x6000CD3")]
		[Address(RVA = "0xBBB9FC", Offset = "0xBBB9FC", VA = "0xBBB9FC")]
		private static extern int opus_decoder_ctl_get(IntPtr st, OpusCtlGetRequest request, ref int value);

		[PreserveSig]
		[Token(Token = "0x6000CD4")]
		[Address(RVA = "0xBBBA8C", Offset = "0xBBBA8C", VA = "0xBBBA8C")]
		private static extern int opus_decoder_get_size(Channels channels);

		[PreserveSig]
		[Token(Token = "0x6000CD5")]
		[Address(RVA = "0xBBBB08", Offset = "0xBBBB08", VA = "0xBBBB08")]
		private static extern OpusStatusCode opus_decoder_init(IntPtr st, SamplingRate Fs, Channels channels);

		[PreserveSig]
		[Token(Token = "0x6000CD6")]
		[Address(RVA = "0xBBBB9C", Offset = "0xBBBB9C", VA = "0xBBBB9C")]
		private static extern int opus_decode(IntPtr st, byte[] data, int len, short[] pcm, int frame_size, int decode_fec);

		[PreserveSig]
		[Token(Token = "0x6000CD7")]
		[Address(RVA = "0xBBBC60", Offset = "0xBBBC60", VA = "0xBBBC60")]
		private static extern int opus_decode_float(IntPtr st, byte[] data, int len, float[] pcm, int frame_size, int decode_fec);

		[PreserveSig]
		[Token(Token = "0x6000CD8")]
		[Address(RVA = "0xBBA2A0", Offset = "0xBBA2A0", VA = "0xBBA2A0")]
		public static extern int opus_packet_get_bandwidth(byte[] data);

		[PreserveSig]
		[Token(Token = "0x6000CD9")]
		[Address(RVA = "0xBBBD24", Offset = "0xBBBD24", VA = "0xBBBD24")]
		public static extern int opus_packet_get_nb_channels(byte[] data);

		[PreserveSig]
		[Token(Token = "0x6000CDA")]
		[Address(RVA = "0xBBBDA8", Offset = "0xBBBDA8", VA = "0xBBBDA8")]
		private static extern IntPtr opus_strerror(OpusStatusCode error);

		[Token(Token = "0x6000CDB")]
		[Address(RVA = "0xBBAF6C", Offset = "0xBBAF6C", VA = "0xBBAF6C")]
		public static IntPtr opus_encoder_create(SamplingRate Fs, Channels channels, OpusApplicationType application)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000CDC")]
		[Address(RVA = "0xBBB340", Offset = "0xBBB340", VA = "0xBBB340")]
		public static int opus_encode(IntPtr st, short[] pcm, int frame_size, byte[] data)
		{
			return default(int);
		}

		[Token(Token = "0x6000CDD")]
		[Address(RVA = "0xBBB184", Offset = "0xBBB184", VA = "0xBBB184")]
		public static int opus_encode(IntPtr st, float[] pcm, int frame_size, byte[] data)
		{
			return default(int);
		}

		[Token(Token = "0x6000CDE")]
		[Address(RVA = "0xBBB4B0", Offset = "0xBBB4B0", VA = "0xBBB4B0")]
		public static void opus_encoder_destroy(IntPtr st)
		{
		}

		[Token(Token = "0x6000CDF")]
		[Address(RVA = "0xBBA838", Offset = "0xBBA838", VA = "0xBBA838")]
		public static int get_opus_encoder_ctl(IntPtr st, OpusCtlGetRequest request)
		{
			return default(int);
		}

		[Token(Token = "0x6000CE0")]
		[Address(RVA = "0xBBA91C", Offset = "0xBBA91C", VA = "0xBBA91C")]
		public static void set_opus_encoder_ctl(IntPtr st, OpusCtlSetRequest request, int value)
		{
		}

		[Token(Token = "0x6000CE1")]
		[Address(RVA = "0xBBBEA0", Offset = "0xBBBEA0", VA = "0xBBBEA0")]
		public static int get_opus_decoder_ctl(IntPtr st, OpusCtlGetRequest request)
		{
			return default(int);
		}

		[Token(Token = "0x6000CE2")]
		[Address(RVA = "0xBBBF74", Offset = "0xBBBF74", VA = "0xBBBF74")]
		public static void set_opus_decoder_ctl(IntPtr st, OpusCtlSetRequest request, int value)
		{
		}

		[Token(Token = "0x6000CE3")]
		[Address(RVA = "0xBB9E18", Offset = "0xBB9E18", VA = "0xBB9E18")]
		public static IntPtr opus_decoder_create(SamplingRate Fs, Channels channels)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000CE4")]
		[Address(RVA = "0xBBA5FC", Offset = "0xBBA5FC", VA = "0xBBA5FC")]
		public static void opus_decoder_destroy(IntPtr st)
		{
		}

		[Token(Token = "0x6000CE5")]
		[Address(RVA = "0xBBA454", Offset = "0xBBA454", VA = "0xBBA454")]
		public static int opus_decode(IntPtr st, byte[] data, short[] pcm, int decode_fec, int channels)
		{
			return default(int);
		}

		[Token(Token = "0x6000CE6")]
		[Address(RVA = "0xBBA16C", Offset = "0xBBA16C", VA = "0xBBA16C")]
		public static int opus_decode(IntPtr st, byte[] data, float[] pcm, int decode_fec, int channels)
		{
			return default(int);
		}

		[Token(Token = "0x6000CE7")]
		[Address(RVA = "0xBBBE24", Offset = "0xBBBE24", VA = "0xBBBE24")]
		private static void HandleStatusCode(OpusStatusCode statusCode)
		{
		}

		[Token(Token = "0x6000CE8")]
		[Address(RVA = "0xBBC03C", Offset = "0xBBC03C", VA = "0xBBC03C")]
		public Wrapper()
		{
		}
	}
}
namespace POpusCodec.Enums
{
	[Token(Token = "0x20001A3")]
	public enum Bandwidth
	{
		[Token(Token = "0x4000B8E")]
		Narrowband = 1101,
		[Token(Token = "0x4000B8F")]
		Mediumband,
		[Token(Token = "0x4000B90")]
		Wideband,
		[Token(Token = "0x4000B91")]
		SuperWideband,
		[Token(Token = "0x4000B92")]
		Fullband
	}
	[Token(Token = "0x20001A4")]
	public enum Channels
	{
		[Token(Token = "0x4000B94")]
		Mono = 1,
		[Token(Token = "0x4000B95")]
		Stereo
	}
	[Token(Token = "0x20001A5")]
	public enum Complexity
	{
		[Token(Token = "0x4000B97")]
		Complexity0,
		[Token(Token = "0x4000B98")]
		Complexity1,
		[Token(Token = "0x4000B99")]
		Complexity2,
		[Token(Token = "0x4000B9A")]
		Complexity3,
		[Token(Token = "0x4000B9B")]
		Complexity4,
		[Token(Token = "0x4000B9C")]
		Complexity5,
		[Token(Token = "0x4000B9D")]
		Complexity6,
		[Token(Token = "0x4000B9E")]
		Complexity7,
		[Token(Token = "0x4000B9F")]
		Complexity8,
		[Token(Token = "0x4000BA0")]
		Complexity9,
		[Token(Token = "0x4000BA1")]
		Complexity10
	}
	[Token(Token = "0x20001A6")]
	public enum Delay
	{
		[Token(Token = "0x4000BA3")]
		Delay2dot5ms = 5,
		[Token(Token = "0x4000BA4")]
		Delay5ms = 10,
		[Token(Token = "0x4000BA5")]
		Delay10ms = 20,
		[Token(Token = "0x4000BA6")]
		Delay20ms = 40,
		[Token(Token = "0x4000BA7")]
		Delay40ms = 80,
		[Token(Token = "0x4000BA8")]
		Delay60ms = 120
	}
	[Token(Token = "0x20001A7")]
	public enum ForceChannels
	{
		[Token(Token = "0x4000BAA")]
		NoForce = -1000,
		[Token(Token = "0x4000BAB")]
		Mono = 1,
		[Token(Token = "0x4000BAC")]
		Stereo = 2
	}
	[Token(Token = "0x20001A8")]
	public enum OpusApplicationType
	{
		[Token(Token = "0x4000BAE")]
		Voip = 2048,
		[Token(Token = "0x4000BAF")]
		Audio = 2049,
		[Token(Token = "0x4000BB0")]
		RestrictedLowDelay = 2051
	}
	[Token(Token = "0x20001A9")]
	internal enum OpusCtlGetRequest
	{
		[Token(Token = "0x4000BB2")]
		Application = 4001,
		[Token(Token = "0x4000BB3")]
		Bitrate = 4003,
		[Token(Token = "0x4000BB4")]
		MaxBandwidth = 4005,
		[Token(Token = "0x4000BB5")]
		VBR = 4007,
		[Token(Token = "0x4000BB6")]
		Bandwidth = 4009,
		[Token(Token = "0x4000BB7")]
		Complexity = 4011,
		[Token(Token = "0x4000BB8")]
		InbandFec = 4013,
		[Token(Token = "0x4000BB9")]
		PacketLossPercentage = 4015,
		[Token(Token = "0x4000BBA")]
		Dtx = 4017,
		[Token(Token = "0x4000BBB")]
		VBRConstraint = 4021,
		[Token(Token = "0x4000BBC")]
		ForceChannels = 4023,
		[Token(Token = "0x4000BBD")]
		Signal = 4025,
		[Token(Token = "0x4000BBE")]
		LookAhead = 4027,
		[Token(Token = "0x4000BBF")]
		SampleRate = 4029,
		[Token(Token = "0x4000BC0")]
		FinalRange = 4031,
		[Token(Token = "0x4000BC1")]
		Pitch = 4033,
		[Token(Token = "0x4000BC2")]
		Gain = 4035,
		[Token(Token = "0x4000BC3")]
		LsbDepth = 4037,
		[Token(Token = "0x4000BC4")]
		LastPacketDurationRequest = 4039
	}
	[Token(Token = "0x20001AA")]
	internal enum OpusCtlSetRequest
	{
		[Token(Token = "0x4000BC6")]
		Application = 4000,
		[Token(Token = "0x4000BC7")]
		Bitrate = 4002,
		[Token(Token = "0x4000BC8")]
		MaxBandwidth = 4004,
		[Token(Token = "0x4000BC9")]
		VBR = 4006,
		[Token(Token = "0x4000BCA")]
		Bandwidth = 4008,
		[Token(Token = "0x4000BCB")]
		Complexity = 4010,
		[Token(Token = "0x4000BCC")]
		InbandFec = 4012,
		[Token(Token = "0x4000BCD")]
		PacketLossPercentage = 4014,
		[Token(Token = "0x4000BCE")]
		Dtx = 4016,
		[Token(Token = "0x4000BCF")]
		VBRConstraint = 4020,
		[Token(Token = "0x4000BD0")]
		ForceChannels = 4022,
		[Token(Token = "0x4000BD1")]
		Signal = 4024,
		[Token(Token = "0x4000BD2")]
		Gain = 4034,
		[Token(Token = "0x4000BD3")]
		LsbDepth = 4036
	}
	[Token(Token = "0x20001AB")]
	public enum OpusStatusCode
	{
		[Token(Token = "0x4000BD5")]
		OK = 0,
		[Token(Token = "0x4000BD6")]
		BadArguments = -1,
		[Token(Token = "0x4000BD7")]
		BufferTooSmall = -2,
		[Token(Token = "0x4000BD8")]
		InternalError = -3,
		[Token(Token = "0x4000BD9")]
		InvalidPacket = -4,
		[Token(Token = "0x4000BDA")]
		Unimplemented = -5,
		[Token(Token = "0x4000BDB")]
		InvalidState = -6,
		[Token(Token = "0x4000BDC")]
		AllocFail = -7
	}
	[Token(Token = "0x20001AC")]
	public enum SamplingRate
	{
		[Token(Token = "0x4000BDE")]
		Sampling08000 = 8000,
		[Token(Token = "0x4000BDF")]
		Sampling12000 = 12000,
		[Token(Token = "0x4000BE0")]
		Sampling16000 = 16000,
		[Token(Token = "0x4000BE1")]
		Sampling24000 = 24000,
		[Token(Token = "0x4000BE2")]
		Sampling48000 = 48000
	}
	[Token(Token = "0x20001AD")]
	public enum SignalHint
	{
		[Token(Token = "0x4000BE4")]
		Auto = -1000,
		[Token(Token = "0x4000BE5")]
		Voice = 3001,
		[Token(Token = "0x4000BE6")]
		Music = 3002
	}
}
namespace ExitGames.Client.Photon.Voice
{
	[Token(Token = "0x20001AE")]
	public static class AudioUtil
	{
		[Token(Token = "0x20001AF")]
		public class Resampler<T> : LocalVoiceFramed<T>.IProcessor, IDisposable
		{
			[Token(Token = "0x4000BE7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			protected T[] frameResampled;

			[Token(Token = "0x4000BE8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int channels;

			[Token(Token = "0x6000CF0")]
			public Resampler(int dstSize, int channels)
			{
			}

			[Token(Token = "0x6000CF1")]
			public T[] Process(T[] buf)
			{
				return null;
			}

			[Token(Token = "0x6000CF2")]
			public void Dispose()
			{
			}
		}

		[Token(Token = "0x20001B0")]
		public interface ILevelMeter
		{
			[Token(Token = "0x170001A2")]
			float CurrentAvgAmp
			{
				[Token(Token = "0x6000CF3")]
				get;
			}

			[Token(Token = "0x170001A3")]
			float CurrentPeakAmp
			{
				[Token(Token = "0x6000CF4")]
				get;
			}

			[Token(Token = "0x170001A4")]
			float AccumAvgPeakAmp
			{
				[Token(Token = "0x6000CF5")]
				get;
			}

			[Token(Token = "0x6000CF6")]
			void ResetAccumAvgPeakAmp();
		}

		[Token(Token = "0x20001B1")]
		public class LevelMetterDummy : ILevelMeter
		{
			[Token(Token = "0x170001A5")]
			public float CurrentAvgAmp
			{
				[Token(Token = "0x6000CF7")]
				[Address(RVA = "0xBBC500", Offset = "0xBBC500", VA = "0xBBC500", Slot = "4")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170001A6")]
			public float CurrentPeakAmp
			{
				[Token(Token = "0x6000CF8")]
				[Address(RVA = "0xBBC508", Offset = "0xBBC508", VA = "0xBBC508", Slot = "5")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170001A7")]
			public float AccumAvgPeakAmp
			{
				[Token(Token = "0x6000CF9")]
				[Address(RVA = "0xBBC510", Offset = "0xBBC510", VA = "0xBBC510", Slot = "6")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x6000CFA")]
			[Address(RVA = "0xBBC518", Offset = "0xBBC518", VA = "0xBBC518", Slot = "7")]
			public void ResetAccumAvgPeakAmp()
			{
			}

			[Token(Token = "0x6000CFB")]
			[Address(RVA = "0xBBC51C", Offset = "0xBBC51C", VA = "0xBBC51C")]
			public LevelMetterDummy()
			{
			}
		}

		[Token(Token = "0x20001B2")]
		public abstract class LevelMeter<T> : LocalVoiceFramed<T>.IProcessor, IDisposable, ILevelMeter
		{
			[Token(Token = "0x4000BE9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			protected float ampSum;

			[Token(Token = "0x4000BEA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			protected float ampPeak;

			[Token(Token = "0x4000BEB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			protected int bufferSize;

			[Token(Token = "0x4000BEC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			protected float[] buffer;

			[Token(Token = "0x4000BED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			protected int prevValuesPtr;

			[Token(Token = "0x4000BEE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			protected float accumAvgPeakAmpSum;

			[Token(Token = "0x4000BEF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			protected int accumAvgPeakAmpCount;

			[Token(Token = "0x170001A8")]
			public float CurrentAvgAmp
			{
				[Token(Token = "0x6000CFD")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170001A9")]
			public float CurrentPeakAmp
			{
				[Token(Token = "0x6000CFE")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000CFF")]
				[CompilerGenerated]
				protected set
				{
				}
			}

			[Token(Token = "0x170001AA")]
			public float AccumAvgPeakAmp
			{
				[Token(Token = "0x6000D00")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x6000CFC")]
			internal LevelMeter(int samplingRate, int numChannels)
			{
			}

			[Token(Token = "0x6000D01")]
			public void ResetAccumAvgPeakAmp()
			{
			}

			[Token(Token = "0x6000D02")]
			public abstract T[] Process(T[] buf);

			[Token(Token = "0x6000D03")]
			public void Dispose()
			{
			}
		}

		[Token(Token = "0x20001B3")]
		public class LevelMeterFloat : LevelMeter<float>
		{
			[Token(Token = "0x6000D04")]
			[Address(RVA = "0xBBC524", Offset = "0xBBC524", VA = "0xBBC524")]
			public LevelMeterFloat(int samplingRate, int numChannels)
			{
			}

			[Token(Token = "0x6000D05")]
			[Address(RVA = "0xBBC584", Offset = "0xBBC584", VA = "0xBBC584", Slot = "10")]
			public override float[] Process(float[] buf)
			{
				return null;
			}
		}

		[Token(Token = "0x20001B4")]
		public class LevelMeterShort : LevelMeter<short>
		{
			[Token(Token = "0x6000D06")]
			[Address(RVA = "0xBBC69C", Offset = "0xBBC69C", VA = "0xBBC69C")]
			public LevelMeterShort(int samplingRate, int numChannels)
			{
			}

			[Token(Token = "0x6000D07")]
			[Address(RVA = "0xBBC6FC", Offset = "0xBBC6FC", VA = "0xBBC6FC", Slot = "10")]
			public override short[] Process(short[] buf)
			{
				return null;
			}
		}

		[Token(Token = "0x20001B5")]
		public interface IVoiceDetector
		{
			[Token(Token = "0x170001AB")]
			bool On
			{
				[Token(Token = "0x6000D08")]
				get;
				[Token(Token = "0x6000D09")]
				set;
			}

			[Token(Token = "0x170001AC")]
			float Threshold
			{
				[Token(Token = "0x6000D0A")]
				get;
				[Token(Token = "0x6000D0B")]
				set;
			}

			[Token(Token = "0x170001AD")]
			bool Detected
			{
				[Token(Token = "0x6000D0C")]
				get;
			}

			[Token(Token = "0x170001AE")]
			DateTime DetectedTime
			{
				[Token(Token = "0x6000D0D")]
				get;
			}

			[Token(Token = "0x170001AF")]
			int ActivityDelayMs
			{
				[Token(Token = "0x6000D10")]
				get;
				[Token(Token = "0x6000D11")]
				set;
			}

			[Token(Token = "0x14000004")]
			event Action OnDetected;
		}

		[Token(Token = "0x20001B6")]
		public class VoiceDetectorCalibration<T> : LocalVoiceFramed<T>.IProcessor, IDisposable
		{
			[Token(Token = "0x4000BF1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private IVoiceDetector voiceDetector;

			[Token(Token = "0x4000BF2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private ILevelMeter levelMeter;

			[Token(Token = "0x4000BF3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int valuesPerSec;

			[Token(Token = "0x4000BF4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			protected int voiceDetectorCalibrateCount;

			[Token(Token = "0x170001B0")]
			public bool VoiceDetectorCalibrating
			{
				[Token(Token = "0x6000D12")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6000D13")]
			public VoiceDetectorCalibration(IVoiceDetector voiceDetector, ILevelMeter levelMeter, int samplingRate, int channels)
			{
			}

			[Token(Token = "0x6000D14")]
			public void VoiceDetectorCalibrate(int durationMs)
			{
			}

			[Token(Token = "0x6000D15")]
			public T[] Process(T[] buf)
			{
				return null;
			}

			[Token(Token = "0x6000D16")]
			public void Dispose()
			{
			}
		}

		[Token(Token = "0x20001B7")]
		public class VoiceDetectorDummy : IVoiceDetector
		{
			[Token(Token = "0x170001B1")]
			public bool On
			{
				[Token(Token = "0x6000D17")]
				[Address(RVA = "0xBBC818", Offset = "0xBBC818", VA = "0xBBC818", Slot = "4")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6000D18")]
				[Address(RVA = "0xBBC820", Offset = "0xBBC820", VA = "0xBBC820", Slot = "5")]
				set
				{
				}
			}

			[Token(Token = "0x170001B2")]
			public float Threshold
			{
				[Token(Token = "0x6000D19")]
				[Address(RVA = "0xBBC824", Offset = "0xBBC824", VA = "0xBBC824", Slot = "6")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000D1A")]
				[Address(RVA = "0xBBC82C", Offset = "0xBBC82C", VA = "0xBBC82C", Slot = "7")]
				set
				{
				}
			}

			[Token(Token = "0x170001B3")]
			public bool Detected
			{
				[Token(Token = "0x6000D1B")]
				[Address(RVA = "0xBBC830", Offset = "0xBBC830", VA = "0xBBC830", Slot = "8")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x170001B4")]
			public int ActivityDelayMs
			{
				[Token(Token = "0x6000D1C")]
				[Address(RVA = "0xBBC838", Offset = "0xBBC838", VA = "0xBBC838", Slot = "12")]
				get
				{
					return default(int);
				}
				[Token(Token = "0x6000D1D")]
				[Address(RVA = "0xBBC840", Offset = "0xBBC840", VA = "0xBBC840", Slot = "13")]
				set
				{
				}
			}

			[Token(Token = "0x170001B5")]
			public DateTime DetectedTime
			{
				[Token(Token = "0x6000D1E")]
				[Address(RVA = "0xBBC844", Offset = "0xBBC844", VA = "0xBBC844", Slot = "9")]
				[CompilerGenerated]
				get
				{
					return default(DateTime);
				}
				[Token(Token = "0x6000D1F")]
				[Address(RVA = "0xBBC84C", Offset = "0xBBC84C", VA = "0xBBC84C")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x14000005")]
			public event Action OnDetected
			{
				[Token(Token = "0x6000D20")]
				[Address(RVA = "0xBBC854", Offset = "0xBBC854", VA = "0xBBC854", Slot = "10")]
				[CompilerGenerated]
				add
				{
				}
				[Token(Token = "0x6000D21")]
				[Address(RVA = "0xBBC8F0", Offset = "0xBBC8F0", VA = "0xBBC8F0", Slot = "11")]
				[CompilerGenerated]
				remove
				{
				}
			}

			[Token(Token = "0x6000D22")]
			[Address(RVA = "0xBBC98C", Offset = "0xBBC98C", VA = "0xBBC98C")]
			public VoiceDetectorDummy()
			{
			}
		}

		[Token(Token = "0x20001B8")]
		public abstract class VoiceDetector<T> : LocalVoiceFramed<T>.IProcessor, IDisposable, IVoiceDetector
		{
			[Token(Token = "0x4000BF9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool detected;

			[Token(Token = "0x4000BFC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			protected int activityDelay;

			[Token(Token = "0x4000BFD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			protected int autoSilenceCounter;

			[Token(Token = "0x4000BFE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			protected int valuesCountPerSec;

			[Token(Token = "0x4000BFF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			protected int activityDelayValuesCount;

			[Token(Token = "0x170001B6")]
			public bool On
			{
				[Token(Token = "0x6000D23")]
				[CompilerGenerated]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6000D24")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x170001B7")]
			public float Threshold
			{
				[Token(Token = "0x6000D25")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000D26")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x170001B8")]
			public bool Detected
			{
				[Token(Token = "0x6000D27")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6000D28")]
				protected set
				{
				}
			}

			[Token(Token = "0x170001B9")]
			public DateTime DetectedTime
			{
				[Token(Token = "0x6000D29")]
				[CompilerGenerated]
				get
				{
					return default(DateTime);
				}
				[Token(Token = "0x6000D2A")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170001BA")]
			public int ActivityDelayMs
			{
				[Token(Token = "0x6000D2B")]
				get
				{
					return default(int);
				}
				[Token(Token = "0x6000D2C")]
				set
				{
				}
			}

			[Token(Token = "0x14000006")]
			public event Action OnDetected
			{
				[Token(Token = "0x6000D2D")]
				[CompilerGenerated]
				add
				{
				}
				[Token(Token = "0x6000D2E")]
				[CompilerGenerated]
				remove
				{
				}
			}

			[Token(Token = "0x6000D2F")]
			internal VoiceDetector(int samplingRate, int numChannels)
			{
			}

			[Token(Token = "0x6000D30")]
			public abstract T[] Process(T[] buf);

			[Token(Token = "0x6000D31")]
			public void Dispose()
			{
			}
		}

		[Token(Token = "0x20001B9")]
		public class VoiceDetectorFloat : VoiceDetector<float>
		{
			[Token(Token = "0x6000D32")]
			[Address(RVA = "0xBBC994", Offset = "0xBBC994", VA = "0xBBC994")]
			public VoiceDetectorFloat(int samplingRate, int numChannels)
			{
			}

			[Token(Token = "0x6000D33")]
			[Address(RVA = "0xBBCA10", Offset = "0xBBCA10", VA = "0xBBCA10", Slot = "16")]
			public override float[] Process(float[] buffer)
			{
				return null;
			}
		}

		[Token(Token = "0x20001BA")]
		public class VoiceDetectorShort : VoiceDetector<short>
		{
			[Token(Token = "0x6000D34")]
			[Address(RVA = "0xBBCB48", Offset = "0xBBCB48", VA = "0xBBCB48")]
			internal VoiceDetectorShort(int samplingRate, int numChannels)
			{
			}

			[Token(Token = "0x6000D35")]
			[Address(RVA = "0xBBCBC4", Offset = "0xBBCBC4", VA = "0xBBCBC4", Slot = "16")]
			public override short[] Process(short[] buffer)
			{
				return null;
			}
		}

		[Token(Token = "0x20001BB")]
		public class VoiceLevelDetectCalibrate<T> : LocalVoiceFramed<T>.IProcessor, IDisposable
		{
			[Token(Token = "0x4000C02")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private VoiceDetectorCalibration<T> c;

			[Token(Token = "0x170001BB")]
			public ILevelMeter Level
			{
				[Token(Token = "0x6000D36")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x6000D37")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170001BC")]
			public IVoiceDetector Detector
			{
				[Token(Token = "0x6000D38")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x6000D39")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x6000D3A")]
			public VoiceLevelDetectCalibrate(int samplingRate, int channels)
			{
			}

			[Token(Token = "0x6000D3B")]
			public void Calibrate(int durationMs)
			{
			}

			[Token(Token = "0x6000D3C")]
			public T[] Process(T[] buf)
			{
				return null;
			}

			[Token(Token = "0x6000D3D")]
			public void Dispose()
			{
			}
		}

		[Token(Token = "0x6000CE9")]
		public static void Resample<T>(T[] src, T[] dst, int dstCount, int channels)
		{
		}

		[Token(Token = "0x6000CEA")]
		[Address(RVA = "0xBBC044", Offset = "0xBBC044", VA = "0xBBC044")]
		public static void ResampleAndConvert(short[] src, float[] dst, int dstCount, int channels)
		{
		}

		[Token(Token = "0x6000CEB")]
		[Address(RVA = "0xBBC20C", Offset = "0xBBC20C", VA = "0xBBC20C")]
		public static void ResampleAndConvert(float[] src, short[] dst, int dstCount, int channels)
		{
		}

		[Token(Token = "0x6000CEC")]
		[Address(RVA = "0xBBC410", Offset = "0xBBC410", VA = "0xBBC410")]
		public static void Convert(float[] src, short[] dst, int dstCount)
		{
		}

		[Token(Token = "0x6000CED")]
		[Address(RVA = "0xBBC490", Offset = "0xBBC490", VA = "0xBBC490")]
		public static void Convert(short[] src, float[] dst, int dstCount)
		{
		}

		[Token(Token = "0x6000CEE")]
		public static void ForceToStereo<T>(T[] src, T[] dst, int srcChannels)
		{
		}

		[Token(Token = "0x6000CEF")]
		internal static string tostr<T>(T[] x, int lim = 10)
		{
			return null;
		}
	}
	[Token(Token = "0x20001BC")]
	public interface IAudioOut
	{
		[Token(Token = "0x170001BD")]
		bool IsPlaying
		{
			[Token(Token = "0x6000D3E")]
			get;
		}

		[Token(Token = "0x170001BE")]
		int CurrentBufferLag
		{
			[Token(Token = "0x6000D43")]
			get;
		}

		[Token(Token = "0x6000D3F")]
		void Start(int frequency, int channels, int frameSamplesPerChannel, int playDelayMs);

		[Token(Token = "0x6000D40")]
		void Stop();

		[Token(Token = "0x6000D41")]
		void OnAudioFrame(float[] frame);

		[Token(Token = "0x6000D42")]
		void Service();
	}
	[Token(Token = "0x20001BD")]
	public abstract class ObjectPool<TType, TInfo> : IDisposable
	{
		[Token(Token = "0x4000C03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected int capacity;

		[Token(Token = "0x4000C04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected TInfo info;

		[Token(Token = "0x4000C05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private TType[] freeObj;

		[Token(Token = "0x4000C06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected int pos;

		[Token(Token = "0x4000C07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected string name;

		[Token(Token = "0x4000C08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool inited;

		[Token(Token = "0x170001BF")]
		internal string LogPrefix
		{
			[Token(Token = "0x6000D47")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001C0")]
		public TInfo Info
		{
			[Token(Token = "0x6000D4B")]
			get
			{
				return (TInfo)null;
			}
		}

		[Token(Token = "0x6000D44")]
		protected abstract TType createObject(TInfo info);

		[Token(Token = "0x6000D45")]
		protected abstract void destroyObject(TType obj);

		[Token(Token = "0x6000D46")]
		protected abstract bool infosMatch(TInfo i0, TInfo i1);

		[Token(Token = "0x6000D48")]
		public ObjectPool(int capacity, string name)
		{
		}

		[Token(Token = "0x6000D49")]
		public ObjectPool(int capacity, string name, TInfo info)
		{
		}

		[Token(Token = "0x6000D4A")]
		public void Init(TInfo info)
		{
		}

		[Token(Token = "0x6000D4C")]
		public TType AcquireOrCreate()
		{
			return (TType)null;
		}

		[Token(Token = "0x6000D4D")]
		public TType AcquireOrCreate(TInfo info)
		{
			return (TType)null;
		}

		[Token(Token = "0x6000D4E")]
		public virtual bool Release(TType obj, TInfo objInfo)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D4F")]
		public virtual bool Release(TType obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D50")]
		public void Dispose()
		{
		}
	}
	[Token(Token = "0x20001BE")]
	public class PrimitiveArrayPool<T> : ObjectPool<T[], int>
	{
		[Token(Token = "0x6000D51")]
		public PrimitiveArrayPool(int capacity, string name)
		{
		}

		[Token(Token = "0x6000D52")]
		public PrimitiveArrayPool(int capacity, string name, int info)
		{
		}

		[Token(Token = "0x6000D53")]
		protected override T[] createObject(int info)
		{
			return null;
		}

		[Token(Token = "0x6000D54")]
		protected override void destroyObject(T[] obj)
		{
		}

		[Token(Token = "0x6000D55")]
		protected override bool infosMatch(int i0, int i1)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20001BF")]
	public class ImageBufferNativePool<T> : ObjectPool<T, ImageBufferInfo> where T : ImageBufferNative
	{
		[Token(Token = "0x20001C0")]
		public delegate T Factory(ImageBufferNativePool<T> pool, ImageBufferInfo info);

		[Token(Token = "0x4000C09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Factory factory;

		[Token(Token = "0x6000D56")]
		public ImageBufferNativePool(int capacity, Factory factory, string name)
		{
		}

		[Token(Token = "0x6000D57")]
		public ImageBufferNativePool(int capacity, Factory factory, string name, ImageBufferInfo info)
		{
		}

		[Token(Token = "0x6000D58")]
		protected override T createObject(ImageBufferInfo info)
		{
			return null;
		}

		[Token(Token = "0x6000D59")]
		protected override void destroyObject(T obj)
		{
		}

		[Token(Token = "0x6000D5A")]
		protected override bool infosMatch(ImageBufferInfo i0, ImageBufferInfo i1)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20001C1")]
	public class OpusCodec
	{
		[Token(Token = "0x20001C2")]
		public enum FrameDuration
		{
			[Token(Token = "0x4000C0B")]
			Frame2dot5ms = 2500,
			[Token(Token = "0x4000C0C")]
			Frame5ms = 5000,
			[Token(Token = "0x4000C0D")]
			Frame10ms = 10000,
			[Token(Token = "0x4000C0E")]
			Frame20ms = 20000,
			[Token(Token = "0x4000C0F")]
			Frame40ms = 40000,
			[Token(Token = "0x4000C10")]
			Frame60ms = 60000
		}

		[Token(Token = "0x20001C3")]
		public static class EncoderFactory
		{
			[Token(Token = "0x6000D60")]
			[Address(RVA = "0xBBCD08", Offset = "0xBBCD08", VA = "0xBBCD08")]
			public static IEncoder Create(VoiceInfo i, LocalVoice localVoice)
			{
				return null;
			}
		}

		[Token(Token = "0x20001C4")]
		public abstract class Encoder<T> : IEncoderDataFlowDirect<T>, IEncoderDataFlow<T>, IEncoder, IDisposable
		{
			[Token(Token = "0x4000C11")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			protected OpusEncoder encoder;

			[Token(Token = "0x4000C12")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			protected bool disposed;

			[Token(Token = "0x6000D61")]
			protected Encoder(VoiceInfo i)
			{
			}

			[Token(Token = "0x6000D62")]
			public void Dispose()
			{
			}

			[Token(Token = "0x6000D63")]
			public abstract ArraySegment<byte> EncodeAndGetOutput(T[] buf);
		}

		[Token(Token = "0x20001C5")]
		public class EncoderFloat : Encoder<float>
		{
			[Token(Token = "0x4000C13")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private static readonly ArraySegment<byte> EmptyBuffer;

			[Token(Token = "0x6000D64")]
			[Address(RVA = "0xBBCF00", Offset = "0xBBCF00", VA = "0xBBCF00")]
			internal EncoderFloat(VoiceInfo i)
			{
			}

			[Token(Token = "0x6000D65")]
			[Address(RVA = "0xBBD128", Offset = "0xBBD128", VA = "0xBBD128", Slot = "6")]
			public override ArraySegment<byte> EncodeAndGetOutput(float[] buf)
			{
				return default(ArraySegment<byte>);
			}
		}

		[Token(Token = "0x20001C6")]
		public class EncoderShort : Encoder<short>
		{
			[Token(Token = "0x4000C14")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private static readonly ArraySegment<byte> EmptyBuffer;

			[Token(Token = "0x6000D67")]
			[Address(RVA = "0xBBCF7C", Offset = "0xBBCF7C", VA = "0xBBCF7C")]
			internal EncoderShort(VoiceInfo i)
			{
			}

			[Token(Token = "0x6000D68")]
			[Address(RVA = "0xBBD30C", Offset = "0xBBD30C", VA = "0xBBD30C", Slot = "6")]
			public override ArraySegment<byte> EncodeAndGetOutput(short[] buf)
			{
				return default(ArraySegment<byte>);
			}
		}

		[Token(Token = "0x20001C7")]
		public class Decoder : IDecoderDirect, IDecoder, IDisposable
		{
			[Token(Token = "0x4000C15")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private OpusDecoder decoder;

			[Token(Token = "0x6000D6A")]
			[Address(RVA = "0xBBD4F0", Offset = "0xBBD4F0", VA = "0xBBD4F0", Slot = "7")]
			public void Open(VoiceInfo i)
			{
			}

			[Token(Token = "0x6000D6B")]
			[Address(RVA = "0xBBD568", Offset = "0xBBD568", VA = "0xBBD568", Slot = "4")]
			public byte[] DecodeToByte(byte[] buf)
			{
				return null;
			}

			[Token(Token = "0x6000D6C")]
			[Address(RVA = "0xBBD5A8", Offset = "0xBBD5A8", VA = "0xBBD5A8", Slot = "5")]
			public float[] DecodeToFloat(byte[] buf)
			{
				return null;
			}

			[Token(Token = "0x6000D6D")]
			[Address(RVA = "0xBBD5C0", Offset = "0xBBD5C0", VA = "0xBBD5C0", Slot = "6")]
			public short[] DecodeToShort(byte[] buf)
			{
				return null;
			}

			[Token(Token = "0x6000D6E")]
			[Address(RVA = "0xBBD5D8", Offset = "0xBBD5D8", VA = "0xBBD5D8", Slot = "8")]
			public void Dispose()
			{
			}

			[Token(Token = "0x6000D6F")]
			[Address(RVA = "0xBBD5F0", Offset = "0xBBD5F0", VA = "0xBBD5F0")]
			public Decoder()
			{
			}
		}

		[Token(Token = "0x20001C8")]
		public class Util
		{
			[Token(Token = "0x6000D70")]
			[Address(RVA = "0xBBD5F8", Offset = "0xBBD5F8", VA = "0xBBD5F8")]
			internal static int bestEncoderSampleRate(int f)
			{
				return default(int);
			}

			[Token(Token = "0x6000D71")]
			[Address(RVA = "0xBBD9C8", Offset = "0xBBD9C8", VA = "0xBBD9C8")]
			public Util()
			{
			}
		}

		[Token(Token = "0x6000D5F")]
		[Address(RVA = "0xBBCD00", Offset = "0xBBCD00", VA = "0xBBCD00")]
		public OpusCodec()
		{
		}
	}
	[Token(Token = "0x20001C9")]
	public interface IDataReader<T> : IDisposable
	{
		[Token(Token = "0x6000D72")]
		bool Read(T[] buffer);
	}
	[Token(Token = "0x20001CA")]
	public interface IServiceable
	{
		[Token(Token = "0x6000D73")]
		void Service(LocalVoice localVoice);
	}
	[Token(Token = "0x20001CB")]
	public class LocalVoice : IDisposable
	{
		[Token(Token = "0x4000C16")]
		public const int DATA_POOL_CAPACITY = 50;

		[Token(Token = "0x4000C20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool debugEchoMode;

		[Token(Token = "0x4000C21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal VoiceInfo info;

		[Token(Token = "0x4000C22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected IEncoder encoder;

		[Token(Token = "0x4000C23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		internal byte id;

		[Token(Token = "0x4000C24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		internal int channelId;

		[Token(Token = "0x4000C25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		internal byte evNumber;

		[Token(Token = "0x4000C26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected VoiceClient voiceClient;

		[Token(Token = "0x4000C27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected bool disposed;

		[Token(Token = "0x4000C28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected object disposeLock;

		[Token(Token = "0x4000C29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private int noTransmitCnt;

		[Token(Token = "0x4000C2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		internal Dictionary<byte, int> eventTimestamps;

		[Token(Token = "0x170001C1")]
		public byte Group
		{
			[Token(Token = "0x6000D74")]
			[Address(RVA = "0xBBD9D0", Offset = "0xBBD9D0", VA = "0xBBD9D0")]
			[CompilerGenerated]
			get
			{
				return default(byte);
			}
			[Token(Token = "0x6000D75")]
			[Address(RVA = "0xBBD9D8", Offset = "0xBBD9D8", VA = "0xBBD9D8")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170001C2")]
		public VoiceInfo Info
		{
			[Token(Token = "0x6000D76")]
			[Address(RVA = "0xBBD9E0", Offset = "0xBBD9E0", VA = "0xBBD9E0")]
			get
			{
				return default(VoiceInfo);
			}
		}

		[Token(Token = "0x170001C3")]
		public bool Transmit
		{
			[Token(Token = "0x6000D77")]
			[Address(RVA = "0xBBD9F8", Offset = "0xBBD9F8", VA = "0xBBD9F8")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D78")]
			[Address(RVA = "0xBBDA00", Offset = "0xBBDA00", VA = "0xBBDA00")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170001C4")]
		public bool IsTransmitting
		{
			[Token(Token = "0x6000D79")]
			[Address(RVA = "0xBBDA0C", Offset = "0xBBDA0C", VA = "0xBBDA0C")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D7A")]
			[Address(RVA = "0xBBDA14", Offset = "0xBBDA14", VA = "0xBBDA14")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x170001C5")]
		public int FramesSent
		{
			[Token(Token = "0x6000D7B")]
			[Address(RVA = "0xBBDA20", Offset = "0xBBDA20", VA = "0xBBDA20")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000D7C")]
			[Address(RVA = "0xBBDA28", Offset = "0xBBDA28", VA = "0xBBDA28")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001C6")]
		public int FramesSentBytes
		{
			[Token(Token = "0x6000D7D")]
			[Address(RVA = "0xBBDA30", Offset = "0xBBDA30", VA = "0xBBDA30")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000D7E")]
			[Address(RVA = "0xBBDA38", Offset = "0xBBDA38", VA = "0xBBDA38")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001C7")]
		public bool Reliable
		{
			[Token(Token = "0x6000D7F")]
			[Address(RVA = "0xBBDA40", Offset = "0xBBDA40", VA = "0xBBDA40")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D80")]
			[Address(RVA = "0xBBDA48", Offset = "0xBBDA48", VA = "0xBBDA48")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170001C8")]
		public bool Encrypt
		{
			[Token(Token = "0x6000D81")]
			[Address(RVA = "0xBBDA54", Offset = "0xBBDA54", VA = "0xBBDA54")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D82")]
			[Address(RVA = "0xBBDA5C", Offset = "0xBBDA5C", VA = "0xBBDA5C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170001C9")]
		public object LocalUserObject
		{
			[Token(Token = "0x6000D83")]
			[Address(RVA = "0xBBDA68", Offset = "0xBBDA68", VA = "0xBBDA68")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D84")]
			[Address(RVA = "0xBBDA70", Offset = "0xBBDA70", VA = "0xBBDA70")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170001CA")]
		public IServiceable LocalUserServiceable
		{
			[Token(Token = "0x6000D85")]
			[Address(RVA = "0xBBDA78", Offset = "0xBBDA78", VA = "0xBBDA78")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D86")]
			[Address(RVA = "0xBBDA80", Offset = "0xBBDA80", VA = "0xBBDA80")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170001CB")]
		public bool DebugEchoMode
		{
			[Token(Token = "0x6000D87")]
			[Address(RVA = "0xBBDA88", Offset = "0xBBDA88", VA = "0xBBDA88")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D88")]
			[Address(RVA = "0xBBDA90", Offset = "0xBBDA90", VA = "0xBBDA90")]
			set
			{
			}
		}

		[Token(Token = "0x170001CC")]
		internal string Name
		{
			[Token(Token = "0x6000D8B")]
			[Address(RVA = "0xBBDD10", Offset = "0xBBDD10", VA = "0xBBDD10")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001CD")]
		internal string LogPrefix
		{
			[Token(Token = "0x6000D8C")]
			[Address(RVA = "0xBBDEB0", Offset = "0xBBDEB0", VA = "0xBBDEB0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D89")]
		[Address(RVA = "0xBBDB5C", Offset = "0xBBDB5C", VA = "0xBBDB5C")]
		internal LocalVoice()
		{
		}

		[Token(Token = "0x6000D8A")]
		[Address(RVA = "0xBBDC08", Offset = "0xBBDC08", VA = "0xBBDC08")]
		internal LocalVoice(VoiceClient voiceClient, IEncoder encoder, byte id, VoiceInfo voiceInfo, int channelId)
		{
		}

		[Token(Token = "0x6000D8D")]
		[Address(RVA = "0xBBDF08", Offset = "0xBBDF08", VA = "0xBBDF08")]
		protected void resetNoTransmitCnt()
		{
		}

		[Token(Token = "0x6000D8E")]
		[Address(RVA = "0xBBDF14", Offset = "0xBBDF14", VA = "0xBBDF14", Slot = "5")]
		internal virtual void service()
		{
		}

		[Token(Token = "0x6000D8F")]
		[Address(RVA = "0xBBE3F4", Offset = "0xBBE3F4", VA = "0xBBE3F4")]
		internal void sendFrame(ArraySegment<byte> compressed)
		{
		}

		[Token(Token = "0x6000D90")]
		[Address(RVA = "0xBBE550", Offset = "0xBBE550", VA = "0xBBE550")]
		public void RemoveSelf()
		{
		}

		[Token(Token = "0x6000D91")]
		[Address(RVA = "0xBBE830", Offset = "0xBBE830", VA = "0xBBE830", Slot = "6")]
		public virtual void Dispose()
		{
		}
	}
	[Token(Token = "0x20001CC")]
	public struct RemoteVoiceOptions
	{
		[Token(Token = "0x170001CE")]
		public Action<byte[]> OnDecodedFrameByteAction
		{
			[Token(Token = "0x6000D92")]
			[Address(RVA = "0xBBE8E8", Offset = "0xBBE8E8", VA = "0xBBE8E8")]
			[CompilerGenerated]
			readonly get
			{
				return null;
			}
			[Token(Token = "0x6000D93")]
			[Address(RVA = "0xBBE8F0", Offset = "0xBBE8F0", VA = "0xBBE8F0")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170001CF")]
		public Action<float[]> OnDecodedFrameFloatAction
		{
			[Token(Token = "0x6000D94")]
			[Address(RVA = "0xBBE8F8", Offset = "0xBBE8F8", VA = "0xBBE8F8")]
			[CompilerGenerated]
			readonly get
			{
				return null;
			}
			[Token(Token = "0x6000D95")]
			[Address(RVA = "0xBBE900", Offset = "0xBBE900", VA = "0xBBE900")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170001D0")]
		public Action<short[]> OnDecodedFrameShortAction
		{
			[Token(Token = "0x6000D96")]
			[Address(RVA = "0xBBE908", Offset = "0xBBE908", VA = "0xBBE908")]
			[CompilerGenerated]
			readonly get
			{
				return null;
			}
			[Token(Token = "0x6000D97")]
			[Address(RVA = "0xBBE910", Offset = "0xBBE910", VA = "0xBBE910")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170001D1")]
		public Action OnRemoteVoiceRemoveAction
		{
			[Token(Token = "0x6000D98")]
			[Address(RVA = "0xBBE918", Offset = "0xBBE918", VA = "0xBBE918")]
			[CompilerGenerated]
			readonly get
			{
				return null;
			}
			[Token(Token = "0x6000D99")]
			[Address(RVA = "0xBBE920", Offset = "0xBBE920", VA = "0xBBE920")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170001D2")]
		public object LocalUserObject
		{
			[Token(Token = "0x6000D9A")]
			[Address(RVA = "0xBBE928", Offset = "0xBBE928", VA = "0xBBE928")]
			[CompilerGenerated]
			readonly get
			{
				return null;
			}
			[Token(Token = "0x6000D9B")]
			[Address(RVA = "0xBBE930", Offset = "0xBBE930", VA = "0xBBE930")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170001D3")]
		public IDecoder Decoder
		{
			[Token(Token = "0x6000D9C")]
			[Address(RVA = "0xBBE938", Offset = "0xBBE938", VA = "0xBBE938")]
			[CompilerGenerated]
			readonly get
			{
				return null;
			}
			[Token(Token = "0x6000D9D")]
			[Address(RVA = "0xBBE940", Offset = "0xBBE940", VA = "0xBBE940")]
			[CompilerGenerated]
			set
			{
			}
		}
	}
	[Token(Token = "0x20001CD")]
	internal class RemoteVoice : IDisposable
	{
		[Token(Token = "0x4000C32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal RemoteVoiceOptions options;

		[Token(Token = "0x4000C33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int channelId;

		[Token(Token = "0x4000C34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private int playerId;

		[Token(Token = "0x4000C35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private byte voiceId;

		[Token(Token = "0x4000C36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		private bool disposed;

		[Token(Token = "0x4000C37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private object disposeLock;

		[Token(Token = "0x4000C38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		internal byte lastEvNumber;

		[Token(Token = "0x4000C39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private VoiceClient voiceClient;

		[Token(Token = "0x4000C3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Queue<byte[]> frameQueue;

		[Token(Token = "0x4000C3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private AutoResetEvent frameQueueReady;

		[Token(Token = "0x170001D4")]
		internal VoiceInfo Info
		{
			[Token(Token = "0x6000D9E")]
			[Address(RVA = "0xBBE948", Offset = "0xBBE948", VA = "0xBBE948")]
			[CompilerGenerated]
			get
			{
				return default(VoiceInfo);
			}
			[Token(Token = "0x6000D9F")]
			[Address(RVA = "0xBBE95C", Offset = "0xBBE95C", VA = "0xBBE95C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001D5")]
		protected string Name
		{
			[Token(Token = "0x6000DA1")]
			[Address(RVA = "0xBBED10", Offset = "0xBBED10", VA = "0xBBED10")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001D6")]
		protected string LogPrefix
		{
			[Token(Token = "0x6000DA2")]
			[Address(RVA = "0xBBECB8", Offset = "0xBBECB8", VA = "0xBBECB8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000DA0")]
		[Address(RVA = "0xBBE970", Offset = "0xBBE970", VA = "0xBBE970")]
		internal RemoteVoice(VoiceClient client, RemoteVoiceOptions options, int channelId, int playerId, byte voiceId, VoiceInfo info, byte lastEventNumber)
		{
		}

		[Token(Token = "0x6000DA3")]
		[Address(RVA = "0xBBEEF0", Offset = "0xBBEEF0", VA = "0xBBEEF0")]
		private static byte byteDiff(byte latest, byte last)
		{
			return default(byte);
		}

		[Token(Token = "0x6000DA4")]
		[Address(RVA = "0xBBEEFC", Offset = "0xBBEEFC", VA = "0xBBEEFC")]
		internal void receiveBytes(byte[] receivedBytes, byte evNumber)
		{
		}

		[Token(Token = "0x6000DA5")]
		[Address(RVA = "0xBBF504", Offset = "0xBBF504", VA = "0xBBF504")]
		private void receiveFrame(byte[] frame)
		{
		}

		[Token(Token = "0x6000DA6")]
		[Address(RVA = "0xBBF304", Offset = "0xBBF304", VA = "0xBBF304")]
		private void receiveNullFrames(int count)
		{
		}

		[Token(Token = "0x6000DA7")]
		[Address(RVA = "0xBBF6E4", Offset = "0xBBF6E4", VA = "0xBBF6E4")]
		private void decodeThread(IDecoder decoder)
		{
		}

		[Token(Token = "0x6000DA8")]
		[Address(RVA = "0xBBFCF4", Offset = "0xBBFCF4", VA = "0xBBFCF4")]
		private void decodeFrame(IDecoder decoder, byte[] frame)
		{
		}

		[Token(Token = "0x6000DA9")]
		[Address(RVA = "0xBBFEAC", Offset = "0xBBFEAC", VA = "0xBBFEAC")]
		internal byte[] decodeFrameToByte(byte[] buffer)
		{
			return null;
		}

		[Token(Token = "0x6000DAA")]
		[Address(RVA = "0xBC0150", Offset = "0xBC0150", VA = "0xBC0150")]
		internal short[] decodeFrameToShort(byte[] buffer)
		{
			return null;
		}

		[Token(Token = "0x6000DAB")]
		[Address(RVA = "0xBC03FC", Offset = "0xBC03FC", VA = "0xBC03FC")]
		internal float[] decodeFrameToFloat(byte[] buffer)
		{
			return null;
		}

		[Token(Token = "0x6000DAC")]
		[Address(RVA = "0xBC06A8", Offset = "0xBC06A8", VA = "0xBC06A8")]
		internal void removeAndDispose()
		{
		}

		[Token(Token = "0x6000DAD")]
		[Address(RVA = "0xBC06D4", Offset = "0xBC06D4", VA = "0xBC06D4", Slot = "4")]
		public void Dispose()
		{
		}
	}
	[Token(Token = "0x20001CE")]
	public interface IAudioSource : IDisposable
	{
		[Token(Token = "0x170001D7")]
		int SamplingRate
		{
			[Token(Token = "0x6000DAF")]
			get;
		}

		[Token(Token = "0x170001D8")]
		int Channels
		{
			[Token(Token = "0x6000DB0")]
			get;
		}
	}
	[Token(Token = "0x20001CF")]
	public interface IAudioReader<T> : IDataReader<T>, IDisposable, IAudioSource
	{
	}
	[Token(Token = "0x20001D0")]
	public interface IAudioPusher<T> : IAudioSource, IDisposable
	{
		[Token(Token = "0x6000DB1")]
		void SetCallback(Action<T[]> callback, LocalVoice localVoice);
	}
	[Token(Token = "0x20001D1")]
	public interface ILocalVoiceAudio
	{
		[Token(Token = "0x170001D9")]
		AudioUtil.IVoiceDetector VoiceDetector
		{
			[Token(Token = "0x6000DB2")]
			get;
		}

		[Token(Token = "0x170001DA")]
		AudioUtil.ILevelMeter LevelMeter
		{
			[Token(Token = "0x6000DB3")]
			get;
		}

		[Token(Token = "0x170001DB")]
		bool VoiceDetectorCalibrating
		{
			[Token(Token = "0x6000DB4")]
			get;
		}

		[Token(Token = "0x6000DB5")]
		void VoiceDetectorCalibrate(int durationMs);
	}
	[Token(Token = "0x20001D2")]
	public static class LocalVoiceAudio
	{
		[Token(Token = "0x4000C3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static LocalVoiceAudioDummy Dummy;

		[Token(Token = "0x6000DB6")]
		public static LocalVoiceAudio<T> Create<T>(VoiceClient voiceClient, byte voiceId, IEncoder encoder, VoiceInfo voiceInfo, int channelId)
		{
			return null;
		}
	}
	[Token(Token = "0x20001D3")]
	public abstract class LocalVoiceAudio<T> : LocalVoiceFramed<T>, ILocalVoiceAudio
	{
		[Token(Token = "0x4000C3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected AudioUtil.VoiceDetector<T> voiceDetector;

		[Token(Token = "0x4000C3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected AudioUtil.VoiceDetectorCalibration<T> voiceDetectorCalibration;

		[Token(Token = "0x4000C3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected AudioUtil.LevelMeter<T> levelMeter;

		[Token(Token = "0x4000C40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected int channels;

		[Token(Token = "0x4000C41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected int sourceSamplingRateHz;

		[Token(Token = "0x4000C42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected bool resampleSource;

		[Token(Token = "0x170001DC")]
		public virtual AudioUtil.IVoiceDetector VoiceDetector
		{
			[Token(Token = "0x6000DB8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001DD")]
		public virtual AudioUtil.ILevelMeter LevelMeter
		{
			[Token(Token = "0x6000DB9")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001DE")]
		public bool VoiceDetectorCalibrating
		{
			[Token(Token = "0x6000DBB")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000DBA")]
		public void VoiceDetectorCalibrate(int durationMs)
		{
		}

		[Token(Token = "0x6000DBC")]
		internal LocalVoiceAudio(VoiceClient voiceClient, IEncoderDataFlow<T> encoder, byte id, VoiceInfo voiceInfo, int channelId)
		{
		}

		[Token(Token = "0x6000DBD")]
		protected void initBuiltinProcessors()
		{
		}
	}
	[Token(Token = "0x20001D4")]
	public class LocalVoiceAudioDummy : LocalVoice, ILocalVoiceAudio
	{
		[Token(Token = "0x4000C43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private AudioUtil.VoiceDetectorDummy voiceDetector;

		[Token(Token = "0x4000C44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private AudioUtil.LevelMetterDummy levelMeter;

		[Token(Token = "0x170001DF")]
		public AudioUtil.IVoiceDetector VoiceDetector
		{
			[Token(Token = "0x6000DBE")]
			[Address(RVA = "0xBC08E0", Offset = "0xBC08E0", VA = "0xBC08E0", Slot = "7")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001E0")]
		public AudioUtil.ILevelMeter LevelMeter
		{
			[Token(Token = "0x6000DBF")]
			[Address(RVA = "0xBC08E8", Offset = "0xBC08E8", VA = "0xBC08E8", Slot = "8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001E1")]
		public bool VoiceDetectorCalibrating
		{
			[Token(Token = "0x6000DC0")]
			[Address(RVA = "0xBC08F0", Offset = "0xBC08F0", VA = "0xBC08F0", Slot = "9")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000DC1")]
		[Address(RVA = "0xBC08F8", Offset = "0xBC08F8", VA = "0xBC08F8", Slot = "10")]
		public void VoiceDetectorCalibrate(int durationMs)
		{
		}

		[Token(Token = "0x6000DC2")]
		[Address(RVA = "0xBC0848", Offset = "0xBC0848", VA = "0xBC0848")]
		public LocalVoiceAudioDummy()
		{
		}
	}
	[Token(Token = "0x20001D5")]
	public class LocalVoiceAudioFloat : LocalVoiceAudio<float>
	{
		[Token(Token = "0x6000DC3")]
		[Address(RVA = "0xBC08FC", Offset = "0xBC08FC", VA = "0xBC08FC")]
		internal LocalVoiceAudioFloat(VoiceClient voiceClient, IEncoderDataFlow<float> encoder, byte id, VoiceInfo voiceInfo, int channelId)
		{
		}
	}
	[Token(Token = "0x20001D6")]
	public class LocalVoiceAudioShort : LocalVoiceAudio<short>
	{
		[Token(Token = "0x6000DC4")]
		[Address(RVA = "0xBC0A44", Offset = "0xBC0A44", VA = "0xBC0A44")]
		internal LocalVoiceAudioShort(VoiceClient voiceClient, IEncoderDataFlow<short> encoder, byte id, VoiceInfo voiceInfo, int channelId)
		{
		}
	}
	[Token(Token = "0x20001D7")]
	internal enum EventSubcode : byte
	{
		[Token(Token = "0x4000C46")]
		VoiceInfo = 1,
		[Token(Token = "0x4000C47")]
		VoiceRemove,
		[Token(Token = "0x4000C48")]
		Frame
	}
	[Token(Token = "0x20001D8")]
	internal enum EventParam : byte
	{
		[Token(Token = "0x4000C4A")]
		VoiceId = 1,
		[Token(Token = "0x4000C4B")]
		SamplingRate = 2,
		[Token(Token = "0x4000C4C")]
		Channels = 3,
		[Token(Token = "0x4000C4D")]
		FrameDurationUs = 4,
		[Token(Token = "0x4000C4E")]
		Bitrate = 5,
		[Token(Token = "0x4000C4F")]
		UserData = 10,
		[Token(Token = "0x4000C50")]
		EventNumber = 11,
		[Token(Token = "0x4000C51")]
		Codec = 12
	}
	[Token(Token = "0x20001D9")]
	public interface ILogger
	{
		[Token(Token = "0x6000DC5")]
		void LogError(string fmt, params object[] args);

		[Token(Token = "0x6000DC6")]
		void LogWarning(string fmt, params object[] args);

		[Token(Token = "0x6000DC7")]
		void LogInfo(string fmt, params object[] args);

		[Token(Token = "0x6000DC8")]
		void LogDebug(string fmt, params object[] args);
	}
	[Token(Token = "0x20001DA")]
	internal interface IVoiceFrontend : ILogger
	{
		[Token(Token = "0x6000DC9")]
		int AssignChannel(VoiceInfo v);

		[Token(Token = "0x6000DCA")]
		bool IsChannelJoined(int channelId);

		[Token(Token = "0x6000DCB")]
		void SendVoicesInfo(IEnumerable<LocalVoice> voices, int channelId, int targetPlayerId);

		[Token(Token = "0x6000DCC")]
		void SendVoiceRemove(LocalVoice voice, int channelId, int targetPlayerId);

		[Token(Token = "0x6000DCD")]
		void SendFrame(ArraySegment<byte> data, byte evNumber, byte voiceId, int channelId, LocalVoice localVoice);

		[Token(Token = "0x6000DCE")]
		string ChannelIdStr(int channelId);

		[Token(Token = "0x6000DCF")]
		string PlayerIdStr(int playerId);

		[Token(Token = "0x6000DD0")]
		void SetDebugEchoMode(LocalVoice v);
	}
	[Token(Token = "0x20001DB")]
	public class VoiceClient : IDisposable
	{
		[Token(Token = "0x20001DC")]
		public delegate void RemoteVoiceInfoDelegate(int channelId, int playerId, byte voiceId, VoiceInfo voiceInfo, ref RemoteVoiceOptions options);

		[Token(Token = "0x20001DD")]
		[CompilerGenerated]
		private sealed class <get_RemoteVoiceInfos>d__39 : IEnumerable<RemoteVoiceInfo>, IEnumerable, IEnumerator<RemoteVoiceInfo>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000C62")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000C63")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private RemoteVoiceInfo <>2__current;

			[Token(Token = "0x4000C64")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4000C65")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public VoiceClient <>4__this;

			[Token(Token = "0x4000C66")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Dictionary<int, Dictionary<int, Dictionary<byte, RemoteVoice>>>.Enumerator <>7__wrap1;

			[Token(Token = "0x4000C67")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private KeyValuePair<int, Dictionary<int, Dictionary<byte, RemoteVoice>>> <channelVoices>5__3;

			[Token(Token = "0x4000C68")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			private Dictionary<int, Dictionary<byte, RemoteVoice>>.Enumerator <>7__wrap3;

			[Token(Token = "0x4000C69")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			private KeyValuePair<int, Dictionary<byte, RemoteVoice>> <playerVoices>5__5;

			[Token(Token = "0x4000C6A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			private Dictionary<byte, RemoteVoice>.Enumerator <>7__wrap5;

			[Token(Token = "0x170001EF")]
			private RemoteVoiceInfo System.Collections.Generic.IEnumerator<ExitGames.Client.Photon.Voice.RemoteVoiceInfo>.Current
			{
				[Token(Token = "0x6000E09")]
				[Address(RVA = "0xBC70D4", Offset = "0xBC70D4", VA = "0xBC70D4", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001F0")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000E0B")]
				[Address(RVA = "0xBC711C", Offset = "0xBC711C", VA = "0xBC711C", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000E03")]
			[Address(RVA = "0xBC10F8", Offset = "0xBC10F8", VA = "0xBC10F8")]
			[DebuggerHidden]
			public <get_RemoteVoiceInfos>d__39(int <>1__state)
			{
			}

			[Token(Token = "0x6000E04")]
			[Address(RVA = "0xBC6A60", Offset = "0xBC6A60", VA = "0xBC6A60", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000E05")]
			[Address(RVA = "0xBC6B94", Offset = "0xBC6B94", VA = "0xBC6B94", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000E06")]
			[Address(RVA = "0xBC7084", Offset = "0xBC7084", VA = "0xBC7084")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6000E07")]
			[Address(RVA = "0xBC7034", Offset = "0xBC7034", VA = "0xBC7034")]
			private void <>m__Finally2()
			{
			}

			[Token(Token = "0x6000E08")]
			[Address(RVA = "0xBC6FE4", Offset = "0xBC6FE4", VA = "0xBC6FE4")]
			private void <>m__Finally3()
			{
			}

			[Token(Token = "0x6000E0A")]
			[Address(RVA = "0xBC70DC", Offset = "0xBC70DC", VA = "0xBC70DC", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6000E0C")]
			[Address(RVA = "0xBC7124", Offset = "0xBC7124", VA = "0xBC7124", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<RemoteVoiceInfo> System.Collections.Generic.IEnumerable<ExitGames.Client.Photon.Voice.RemoteVoiceInfo>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6000E0D")]
			[Address(RVA = "0xBC71C8", Offset = "0xBC71C8", VA = "0xBC71C8", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x20001DE")]
		[CompilerGenerated]
		private sealed class <get_RemoteVoiceLocalUserObjects>d__41 : IEnumerable<object>, IEnumerable, IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000C6B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000C6C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000C6D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4000C6E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public VoiceClient <>4__this;

			[Token(Token = "0x4000C6F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Dictionary<int, Dictionary<int, Dictionary<byte, RemoteVoice>>>.Enumerator <>7__wrap1;

			[Token(Token = "0x4000C70")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private Dictionary<int, Dictionary<byte, RemoteVoice>>.Enumerator <>7__wrap2;

			[Token(Token = "0x4000C71")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			private Dictionary<byte, RemoteVoice>.Enumerator <>7__wrap3;

			[Token(Token = "0x170001F1")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000E14")]
				[Address(RVA = "0xBC7718", Offset = "0xBC7718", VA = "0xBC7718", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001F2")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000E16")]
				[Address(RVA = "0xBC7760", Offset = "0xBC7760", VA = "0xBC7760", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000E0E")]
			[Address(RVA = "0xBC11A4", Offset = "0xBC11A4", VA = "0xBC11A4")]
			[DebuggerHidden]
			public <get_RemoteVoiceLocalUserObjects>d__41(int <>1__state)
			{
			}

			[Token(Token = "0x6000E0F")]
			[Address(RVA = "0xBC71CC", Offset = "0xBC71CC", VA = "0xBC71CC", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000E10")]
			[Address(RVA = "0xBC7300", Offset = "0xBC7300", VA = "0xBC7300", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000E11")]
			[Address(RVA = "0xBC76C8", Offset = "0xBC76C8", VA = "0xBC76C8")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6000E12")]
			[Address(RVA = "0xBC7678", Offset = "0xBC7678", VA = "0xBC7678")]
			private void <>m__Finally2()
			{
			}

			[Token(Token = "0x6000E13")]
			[Address(RVA = "0xBC7628", Offset = "0xBC7628", VA = "0xBC7628")]
			private void <>m__Finally3()
			{
			}

			[Token(Token = "0x6000E15")]
			[Address(RVA = "0xBC7720", Offset = "0xBC7720", VA = "0xBC7720", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6000E17")]
			[Address(RVA = "0xBC7768", Offset = "0xBC7768", VA = "0xBC7768", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<object> System.Collections.Generic.IEnumerable<System.Object>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6000E18")]
			[Address(RVA = "0xBC780C", Offset = "0xBC780C", VA = "0xBC780C", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x4000C52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal IVoiceFrontend frontend;

		[Token(Token = "0x4000C5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private int prevRtt;

		[Token(Token = "0x4000C5B")]
		public const int ChannelAuto = -1;

		[Token(Token = "0x4000C5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private byte globalGroup;

		[Token(Token = "0x4000C5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		private byte voiceIdCnt;

		[Token(Token = "0x4000C5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Dictionary<byte, LocalVoice> localVoices;

		[Token(Token = "0x4000C5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Dictionary<int, List<LocalVoice>> localVoicesPerChannel;

		[Token(Token = "0x4000C60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Dictionary<int, Dictionary<int, Dictionary<byte, RemoteVoice>>> remoteVoices;

		[Token(Token = "0x4000C61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private System.Random rnd;

		[Token(Token = "0x170001E2")]
		public int FramesLost
		{
			[Token(Token = "0x6000DD1")]
			[Address(RVA = "0xBC0B8C", Offset = "0xBC0B8C", VA = "0xBC0B8C")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000DD2")]
			[Address(RVA = "0xBC0B94", Offset = "0xBC0B94", VA = "0xBC0B94")]
			[CompilerGenerated]
			internal set
			{
			}
		}

		[Token(Token = "0x170001E3")]
		public int FramesReceived
		{
			[Token(Token = "0x6000DD3")]
			[Address(RVA = "0xBC0B9C", Offset = "0xBC0B9C", VA = "0xBC0B9C")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000DD4")]
			[Address(RVA = "0xBC0BA4", Offset = "0xBC0BA4", VA = "0xBC0BA4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001E4")]
		public int FramesSent
		{
			[Token(Token = "0x6000DD5")]
			[Address(RVA = "0xBC0BAC", Offset = "0xBC0BAC", VA = "0xBC0BAC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001E5")]
		public int FramesSentBytes
		{
			[Token(Token = "0x6000DD6")]
			[Address(RVA = "0xBC0D0C", Offset = "0xBC0D0C", VA = "0xBC0D0C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001E6")]
		public int RoundTripTime
		{
			[Token(Token = "0x6000DD7")]
			[Address(RVA = "0xBC0E6C", Offset = "0xBC0E6C", VA = "0xBC0E6C")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000DD8")]
			[Address(RVA = "0xBC0E74", Offset = "0xBC0E74", VA = "0xBC0E74")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001E7")]
		public int RoundTripTimeVariance
		{
			[Token(Token = "0x6000DD9")]
			[Address(RVA = "0xBC0E7C", Offset = "0xBC0E7C", VA = "0xBC0E7C")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000DDA")]
			[Address(RVA = "0xBC0E84", Offset = "0xBC0E84", VA = "0xBC0E84")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001E8")]
		public bool SuppressInfoDuplicateWarning
		{
			[Token(Token = "0x6000DDB")]
			[Address(RVA = "0xBC0E8C", Offset = "0xBC0E8C", VA = "0xBC0E8C")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000DDC")]
			[Address(RVA = "0xBC0E94", Offset = "0xBC0E94", VA = "0xBC0E94")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170001E9")]
		public RemoteVoiceInfoDelegate OnRemoteVoiceInfoAction
		{
			[Token(Token = "0x6000DDD")]
			[Address(RVA = "0xBC0EA0", Offset = "0xBC0EA0", VA = "0xBC0EA0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000DDE")]
			[Address(RVA = "0xBC0EA8", Offset = "0xBC0EA8", VA = "0xBC0EA8")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170001EA")]
		public int DebugLostPercent
		{
			[Token(Token = "0x6000DDF")]
			[Address(RVA = "0xBC0EB0", Offset = "0xBC0EB0", VA = "0xBC0EB0")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000DE0")]
			[Address(RVA = "0xBC0EB8", Offset = "0xBC0EB8", VA = "0xBC0EB8")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170001EB")]
		public IEnumerable<LocalVoice> LocalVoices
		{
			[Token(Token = "0x6000DE1")]
			[Address(RVA = "0xBC0EC0", Offset = "0xBC0EC0", VA = "0xBC0EC0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001EC")]
		public IEnumerable<RemoteVoiceInfo> RemoteVoiceInfos
		{
			[Token(Token = "0x6000DE3")]
			[Address(RVA = "0xBC1080", Offset = "0xBC1080", VA = "0xBC1080")]
			[IteratorStateMachine(typeof(<get_RemoteVoiceInfos>d__39))]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001ED")]
		public IEnumerable<object> RemoteVoiceLocalUserObjects
		{
			[Token(Token = "0x6000DE4")]
			[Address(RVA = "0xBC112C", Offset = "0xBC112C", VA = "0xBC112C")]
			[IteratorStateMachine(typeof(<get_RemoteVoiceLocalUserObjects>d__41))]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001EE")]
		internal byte GlobalGroup
		{
			[Token(Token = "0x6000DF1")]
			[Address(RVA = "0xBC45CC", Offset = "0xBC45CC", VA = "0xBC45CC")]
			get
			{
				return default(byte);
			}
			[Token(Token = "0x6000DF2")]
			[Address(RVA = "0xBC45D4", Offset = "0xBC45D4", VA = "0xBC45D4")]
			set
			{
			}
		}

		[Token(Token = "0x6000DE2")]
		[Address(RVA = "0xBC0F90", Offset = "0xBC0F90", VA = "0xBC0F90")]
		public IEnumerable<LocalVoice> LocalVoicesInChannel(int channelId)
		{
			return null;
		}

		[Token(Token = "0x6000DE5")]
		[Address(RVA = "0xBC11D8", Offset = "0xBC11D8", VA = "0xBC11D8")]
		internal VoiceClient(IVoiceFrontend frontend)
		{
		}

		[Token(Token = "0x6000DE6")]
		[Address(RVA = "0xBC1320", Offset = "0xBC1320", VA = "0xBC1320")]
		public void Service()
		{
		}

		[Token(Token = "0x6000DE7")]
		[Address(RVA = "0xBC1480", Offset = "0xBC1480", VA = "0xBC1480")]
		private LocalVoice createLocalVoice(VoiceInfo voiceInfo, int channelId, Func<byte, int, LocalVoice> voiceFactory)
		{
			return null;
		}

		[Token(Token = "0x6000DE8")]
		[Address(RVA = "0xBC216C", Offset = "0xBC216C", VA = "0xBC216C")]
		public LocalVoice CreateLocalVoice(VoiceInfo voiceInfo, int channelId = -1, [Optional] IEncoder encoder)
		{
			return null;
		}

		[Token(Token = "0x6000DE9")]
		public LocalVoiceFramed<T> CreateLocalVoiceFramed<T>(VoiceInfo voiceInfo, int frameSize, int channelId = -1, [Optional] IEncoderDataFlow<T> encoder)
		{
			return null;
		}

		[Token(Token = "0x6000DEA")]
		public LocalVoiceAudio<T> CreateLocalVoiceAudio<T>(VoiceInfo voiceInfo, int channelId = -1, [Optional] IEncoderDataFlow<T> encoder)
		{
			return null;
		}

		[Token(Token = "0x6000DEB")]
		[Address(RVA = "0xBC1704", Offset = "0xBC1704", VA = "0xBC1704")]
		private byte getNewVoiceId()
		{
			return default(byte);
		}

		[Token(Token = "0x6000DEC")]
		[Address(RVA = "0xBC1910", Offset = "0xBC1910", VA = "0xBC1910")]
		private void addVoice(byte newId, int channelId, LocalVoice v)
		{
		}

		[Token(Token = "0x6000DED")]
		[Address(RVA = "0xBBE56C", Offset = "0xBBE56C", VA = "0xBBE56C")]
		public void RemoveLocalVoice(LocalVoice voice)
		{
		}

		[Token(Token = "0x6000DEE")]
		[Address(RVA = "0xBC2280", Offset = "0xBC2280", VA = "0xBC2280")]
		internal void sendVoicesInfo(int targetPlayerId)
		{
		}

		[Token(Token = "0x6000DEF")]
		[Address(RVA = "0xBC23E0", Offset = "0xBC23E0", VA = "0xBC23E0")]
		internal void sendChannelVoicesInfo(int channelId, int targetPlayerId)
		{
		}

		[Token(Token = "0x6000DF0")]
		[Address(RVA = "0xBC2550", Offset = "0xBC2550", VA = "0xBC2550")]
		internal void onVoiceEvent(object content0, int channelId, int playerId, int localPlayerId)
		{
		}

		[Token(Token = "0x6000DF3")]
		[Address(RVA = "0xBC4724", Offset = "0xBC4724", VA = "0xBC4724")]
		internal object[] buildVoicesInfo(IEnumerable<LocalVoice> voicesToSend, bool logInfo)
		{
			return null;
		}

		[Token(Token = "0x6000DF4")]
		[Address(RVA = "0xBC506C", Offset = "0xBC506C", VA = "0xBC506C")]
		internal object[] buildVoiceRemoveMessage(LocalVoice v)
		{
			return null;
		}

		[Token(Token = "0x6000DF5")]
		[Address(RVA = "0xBC52F8", Offset = "0xBC52F8", VA = "0xBC52F8")]
		internal void clearRemoteVoices()
		{
		}

		[Token(Token = "0x6000DF6")]
		[Address(RVA = "0xBC57E0", Offset = "0xBC57E0", VA = "0xBC57E0")]
		internal void clearRemoteVoicesInChannel(int channelId)
		{
		}

		[Token(Token = "0x6000DF7")]
		[Address(RVA = "0xBC29A0", Offset = "0xBC29A0", VA = "0xBC29A0")]
		private void onVoiceInfo(int channelId, int playerId, object payload)
		{
		}

		[Token(Token = "0x6000DF8")]
		[Address(RVA = "0xBC3410", Offset = "0xBC3410", VA = "0xBC3410")]
		private void onVoiceRemove(int channelId, int playerId, object payload)
		{
		}

		[Token(Token = "0x6000DF9")]
		[Address(RVA = "0xBC3E20", Offset = "0xBC3E20", VA = "0xBC3E20")]
		private void onFrame(int channelId, int playerId, byte voiceId, byte evNumber, byte[] receivedBytes)
		{
		}

		[Token(Token = "0x6000DFA")]
		[Address(RVA = "0xBC5F7C", Offset = "0xBC5F7C", VA = "0xBC5F7C")]
		internal bool removePlayerVoices(int playerId)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DFB")]
		[Address(RVA = "0xBC60E0", Offset = "0xBC60E0", VA = "0xBC60E0")]
		internal bool removePlayerVoices(int channelId, int playerId)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DFC")]
		[Address(RVA = "0xBBDDA4", Offset = "0xBBDDA4", VA = "0xBBDDA4")]
		internal string channelStr(int channelId)
		{
			return null;
		}

		[Token(Token = "0x6000DFD")]
		[Address(RVA = "0xBC5DFC", Offset = "0xBC5DFC", VA = "0xBC5DFC")]
		internal string playerStr(int playerId)
		{
			return null;
		}

		[Token(Token = "0x6000DFE")]
		[Address(RVA = "0xBC62F0", Offset = "0xBC62F0", VA = "0xBC62F0", Slot = "4")]
		public void Dispose()
		{
		}
	}
	[Token(Token = "0x20001E2")]
	public interface IEncoder : IDisposable
	{
	}
	[Token(Token = "0x20001E3")]
	public interface IEncoderDataFlow<T> : IEncoder, IDisposable
	{
	}
	[Token(Token = "0x20001E4")]
	public interface IEncoderDataFlowDirect<T> : IEncoderDataFlow<T>, IEncoder, IDisposable
	{
		[Token(Token = "0x6000E1F")]
		ArraySegment<byte> EncodeAndGetOutput(T[] buf);
	}
	[Token(Token = "0x20001E5")]
	public interface IEncoderNativeImageDirect : IEncoder, IDisposable
	{
		[Token(Token = "0x6000E20")]
		IEnumerable<ArraySegment<byte>> EncodeAndGetOutput(IntPtr[] buf, int width, int height, int[] stride, ImageFormat imageFormat, Rotation rotation, Flip flip);
	}
	[Token(Token = "0x20001E6")]
	public interface IEncoderQueued : IEncoder, IDisposable
	{
		[Token(Token = "0x6000E21")]
		IEnumerable<ArraySegment<byte>> GetOutput();
	}
	[Token(Token = "0x20001E7")]
	public interface IDecoder : IDisposable
	{
		[Token(Token = "0x6000E22")]
		void Open(VoiceInfo info);
	}
	[Token(Token = "0x20001E8")]
	public interface IDecoderDirect : IDecoder, IDisposable
	{
		[Token(Token = "0x6000E23")]
		byte[] DecodeToByte(byte[] buf);

		[Token(Token = "0x6000E24")]
		float[] DecodeToFloat(byte[] buf);

		[Token(Token = "0x6000E25")]
		short[] DecodeToShort(byte[] buf);
	}
	[Token(Token = "0x20001E9")]
	public interface IDecoderQueued : IDecoder, IDisposable
	{
		[Token(Token = "0x6000E26")]
		void Decode(byte[] buf);
	}
	[Token(Token = "0x20001EA")]
	public delegate void OnImageOutputNative(IntPtr buf, int width, int height, int stride);
	[Token(Token = "0x20001EB")]
	public interface IDecoderQueuedOutputImageNative : IDecoderQueued, IDecoder, IDisposable
	{
		[Token(Token = "0x170001F3")]
		ImageFormat OutputImageFormat
		{
			[Token(Token = "0x6000E2B")]
			get;
			[Token(Token = "0x6000E2C")]
			set;
		}

		[Token(Token = "0x170001F4")]
		Flip OutputImageFlip
		{
			[Token(Token = "0x6000E2D")]
			get;
			[Token(Token = "0x6000E2E")]
			set;
		}

		[Token(Token = "0x170001F5")]
		Func<int, int, IntPtr> OutputImageBufferGetter
		{
			[Token(Token = "0x6000E2F")]
			get;
			[Token(Token = "0x6000E30")]
			set;
		}

		[Token(Token = "0x170001F6")]
		OnImageOutputNative OnOutputImage
		{
			[Token(Token = "0x6000E31")]
			get;
			[Token(Token = "0x6000E32")]
			set;
		}
	}
	[Token(Token = "0x20001EC")]
	internal class UnsupportedSampleTypeException : Exception
	{
		[Token(Token = "0x6000E33")]
		[Address(RVA = "0xBC7A80", Offset = "0xBC7A80", VA = "0xBC7A80")]
		public UnsupportedSampleTypeException(Type t)
		{
		}
	}
	[Token(Token = "0x20001ED")]
	internal class UnsupportedCodecException : Exception
	{
		[Token(Token = "0x6000E34")]
		[Address(RVA = "0xBBCFF8", Offset = "0xBBCFF8", VA = "0xBBCFF8")]
		public UnsupportedCodecException(Codec codec, LocalVoice voice)
		{
		}
	}
	[Token(Token = "0x20001EE")]
	public enum Codec
	{
		[Token(Token = "0x4000C7D")]
		AudioOpus = 11
	}
	[Token(Token = "0x20001EF")]
	public enum ImageFormat
	{
		[Token(Token = "0x4000C7F")]
		I420,
		[Token(Token = "0x4000C80")]
		YV12,
		[Token(Token = "0x4000C81")]
		Android420,
		[Token(Token = "0x4000C82")]
		RGBA,
		[Token(Token = "0x4000C83")]
		ABGR,
		[Token(Token = "0x4000C84")]
		BGRA,
		[Token(Token = "0x4000C85")]
		ARGB
	}
	[Token(Token = "0x20001F0")]
	public enum Rotation
	{
		[Token(Token = "0x4000C87")]
		Rotate0 = 0,
		[Token(Token = "0x4000C88")]
		Rotate90 = 90,
		[Token(Token = "0x4000C89")]
		Rotate180 = 180,
		[Token(Token = "0x4000C8A")]
		Rotate270 = 270
	}
	[Token(Token = "0x20001F1")]
	public enum Flip
	{
		[Token(Token = "0x4000C8C")]
		None,
		[Token(Token = "0x4000C8D")]
		Vertical,
		[Token(Token = "0x4000C8E")]
		Horizontal
	}
	[Token(Token = "0x20001F2")]
	public class ImageBufferInfo
	{
		[Token(Token = "0x170001F7")]
		public int Width
		{
			[Token(Token = "0x6000E35")]
			[Address(RVA = "0xBC7B34", Offset = "0xBC7B34", VA = "0xBC7B34")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000E36")]
			[Address(RVA = "0xBC7B3C", Offset = "0xBC7B3C", VA = "0xBC7B3C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001F8")]
		public int Height
		{
			[Token(Token = "0x6000E37")]
			[Address(RVA = "0xBC7B44", Offset = "0xBC7B44", VA = "0xBC7B44")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000E38")]
			[Address(RVA = "0xBC7B4C", Offset = "0xBC7B4C", VA = "0xBC7B4C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001F9")]
		public int[] Stride
		{
			[Token(Token = "0x6000E39")]
			[Address(RVA = "0xBC7B54", Offset = "0xBC7B54", VA = "0xBC7B54")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E3A")]
			[Address(RVA = "0xBC7B5C", Offset = "0xBC7B5C", VA = "0xBC7B5C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001FA")]
		public ImageFormat Format
		{
			[Token(Token = "0x6000E3B")]
			[Address(RVA = "0xBC7B64", Offset = "0xBC7B64", VA = "0xBC7B64")]
			[CompilerGenerated]
			get
			{
				return default(ImageFormat);
			}
			[Token(Token = "0x6000E3C")]
			[Address(RVA = "0xBC7B6C", Offset = "0xBC7B6C", VA = "0xBC7B6C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001FB")]
		public Rotation Rotation
		{
			[Token(Token = "0x6000E3D")]
			[Address(RVA = "0xBC7B74", Offset = "0xBC7B74", VA = "0xBC7B74")]
			[CompilerGenerated]
			get
			{
				return default(Rotation);
			}
			[Token(Token = "0x6000E3E")]
			[Address(RVA = "0xBC7B7C", Offset = "0xBC7B7C", VA = "0xBC7B7C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170001FC")]
		public Flip Flip
		{
			[Token(Token = "0x6000E3F")]
			[Address(RVA = "0xBC7B84", Offset = "0xBC7B84", VA = "0xBC7B84")]
			[CompilerGenerated]
			get
			{
				return default(Flip);
			}
			[Token(Token = "0x6000E40")]
			[Address(RVA = "0xBC7B8C", Offset = "0xBC7B8C", VA = "0xBC7B8C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6000E41")]
		[Address(RVA = "0xBC7B94", Offset = "0xBC7B94", VA = "0xBC7B94")]
		public ImageBufferInfo(int width, int height, int[] stride, ImageFormat format)
		{
		}
	}
	[Token(Token = "0x20001F3")]
	public class ImageBufferNative
	{
		[Token(Token = "0x170001FD")]
		public ImageBufferInfo Info
		{
			[Token(Token = "0x6000E43")]
			[Address(RVA = "0xBC7C00", Offset = "0xBC7C00", VA = "0xBC7C00")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E44")]
			[Address(RVA = "0xBC7C08", Offset = "0xBC7C08", VA = "0xBC7C08")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x170001FE")]
		public IntPtr[] Planes
		{
			[Token(Token = "0x6000E45")]
			[Address(RVA = "0xBC7C10", Offset = "0xBC7C10", VA = "0xBC7C10")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E46")]
			[Address(RVA = "0xBC7C18", Offset = "0xBC7C18", VA = "0xBC7C18")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x6000E42")]
		[Address(RVA = "0xBC7BD8", Offset = "0xBC7BD8", VA = "0xBC7BD8")]
		public ImageBufferNative(ImageBufferInfo info)
		{
		}

		[Token(Token = "0x6000E47")]
		[Address(RVA = "0xBC7C20", Offset = "0xBC7C20", VA = "0xBC7C20", Slot = "4")]
		public virtual void Release()
		{
		}

		[Token(Token = "0x6000E48")]
		[Address(RVA = "0xBC7C24", Offset = "0xBC7C24", VA = "0xBC7C24", Slot = "5")]
		public virtual void Dispose()
		{
		}
	}
	[Token(Token = "0x20001F4")]
	public class ImageBufferNativeAlloc : ImageBufferNative, IDisposable
	{
		[Token(Token = "0x4000C97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ImageBufferNativePool<ImageBufferNativeAlloc> pool;

		[Token(Token = "0x6000E49")]
		[Address(RVA = "0xBC7C28", Offset = "0xBC7C28", VA = "0xBC7C28")]
		public ImageBufferNativeAlloc(ImageBufferNativePool<ImageBufferNativeAlloc> pool, ImageBufferInfo info)
		{
		}

		[Token(Token = "0x6000E4A")]
		[Address(RVA = "0xBC7D3C", Offset = "0xBC7D3C", VA = "0xBC7D3C", Slot = "4")]
		public override void Release()
		{
		}

		[Token(Token = "0x6000E4B")]
		[Address(RVA = "0xBC7D58", Offset = "0xBC7D58", VA = "0xBC7D58", Slot = "5")]
		public override void Dispose()
		{
		}
	}
	[Token(Token = "0x20001F5")]
	public class ImageBufferNativeGCHandleSinglePlane : ImageBufferNative, IDisposable
	{
		[Token(Token = "0x4000C98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ImageBufferNativePool<ImageBufferNativeGCHandleSinglePlane> pool;

		[Token(Token = "0x4000C99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GCHandle planeHandle;

		[Token(Token = "0x6000E4C")]
		[Address(RVA = "0xBC7E0C", Offset = "0xBC7E0C", VA = "0xBC7E0C")]
		public ImageBufferNativeGCHandleSinglePlane(ImageBufferNativePool<ImageBufferNativeGCHandleSinglePlane> pool, ImageBufferInfo info)
		{
		}

		[Token(Token = "0x6000E4D")]
		[Address(RVA = "0xBC7F28", Offset = "0xBC7F28", VA = "0xBC7F28")]
		public void PinPlane(byte[] plane)
		{
		}

		[Token(Token = "0x6000E4E")]
		[Address(RVA = "0xBC7F80", Offset = "0xBC7F80", VA = "0xBC7F80", Slot = "4")]
		public override void Release()
		{
		}

		[Token(Token = "0x6000E4F")]
		[Address(RVA = "0xBC7FB8", Offset = "0xBC7FB8", VA = "0xBC7FB8", Slot = "5")]
		public override void Dispose()
		{
		}
	}
	[Token(Token = "0x20001F6")]
	internal static class VoiceCodec
	{
		[Token(Token = "0x6000E50")]
		[Address(RVA = "0xBC7FBC", Offset = "0xBC7FBC", VA = "0xBC7FBC")]
		internal static IEncoder CreateDefaultEncoder(VoiceInfo info, LocalVoice localVoice)
		{
			return null;
		}

		[Token(Token = "0x6000E51")]
		[Address(RVA = "0xBC5F08", Offset = "0xBC5F08", VA = "0xBC5F08")]
		internal static IDecoder CreateDefaultDecoder(int channelId, int playerId, byte voiceId, VoiceInfo info)
		{
			return null;
		}
	}
	[Token(Token = "0x20001F7")]
	public class Framer<T>
	{
		[Token(Token = "0x20001F8")]
		[CompilerGenerated]
		private sealed class <Frame>d__5 : IEnumerable<T[]>, IEnumerable, IEnumerator<T[]>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000C9D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <>1__state;

			[Token(Token = "0x4000C9E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T[] <>2__current;

			[Token(Token = "0x4000C9F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4000CA0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Framer<T> <>4__this;

			[Token(Token = "0x4000CA1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T[] buf;

			[Token(Token = "0x4000CA2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public T[] <>3__buf;

			[Token(Token = "0x4000CA3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <s>5__2;

			[Token(Token = "0x4000CA4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <bufPos>5__3;

			[Token(Token = "0x170001FF")]
			private T[] System.Collections.Generic.IEnumerator<T[]>.Current
			{
				[Token(Token = "0x6000E58")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000200")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000E5A")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000E55")]
			[DebuggerHidden]
			public <Frame>d__5(int <>1__state)
			{
			}

			[Token(Token = "0x6000E56")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000E57")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000E59")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6000E5B")]
			[DebuggerHidden]
			private IEnumerator<T[]> System.Collections.Generic.IEnumerable<T[]>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6000E5C")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x4000C9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T[] frame;

		[Token(Token = "0x4000C9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int sizeofT;

		[Token(Token = "0x4000C9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int framePos;

		[Token(Token = "0x6000E52")]
		public Framer(int frameSize)
		{
		}

		[Token(Token = "0x6000E53")]
		public int Count(int bufLen)
		{
			return default(int);
		}

		[Token(Token = "0x6000E54")]
		[IteratorStateMachine(typeof(Framer<>.<Frame>d__5))]
		public IEnumerable<T[]> Frame(T[] buf)
		{
			return null;
		}
	}
	[Token(Token = "0x20001F9")]
	public class LocalVoiceFramed : LocalVoice
	{
		[Token(Token = "0x17000201")]
		public int FrameSize
		{
			[Token(Token = "0x6000E5D")]
			[Address(RVA = "0xBC8040", Offset = "0xBC8040", VA = "0xBC8040")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000E5E")]
			[Address(RVA = "0xBC8048", Offset = "0xBC8048", VA = "0xBC8048")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000E5F")]
		[Address(RVA = "0xBC8050", Offset = "0xBC8050", VA = "0xBC8050")]
		internal LocalVoiceFramed(VoiceClient voiceClient, IEncoder encoder, byte id, VoiceInfo voiceInfo, int channelId, int frameSize)
		{
		}
	}
	[Token(Token = "0x20001FA")]
	public class LocalVoiceFramed<T> : LocalVoiceFramed
	{
		[Token(Token = "0x20001FB")]
		public interface IProcessor : IDisposable
		{
			[Token(Token = "0x6000E6B")]
			T[] Process(T[] buf);
		}

		[Token(Token = "0x4000CA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Framer<T> framer;

		[Token(Token = "0x4000CA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int preProcessorsCnt;

		[Token(Token = "0x4000CA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private List<IProcessor> processors;

		[Token(Token = "0x4000CA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool dataEncodeThreadStarted;

		[Token(Token = "0x4000CAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Queue<T[]> pushDataQueue;

		[Token(Token = "0x4000CAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private AutoResetEvent pushDataQueueReady;

		[Token(Token = "0x4000CAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private PrimitiveArrayPool<T> pushDataBufferPool;

		[Token(Token = "0x4000CAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int framesSkipped;

		[Token(Token = "0x4000CAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool exitThread;

		[Token(Token = "0x17000202")]
		public PrimitiveArrayPool<T> PushDataBufferPool
		{
			[Token(Token = "0x6000E65")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000203")]
		public bool PushDataAsyncReady
		{
			[Token(Token = "0x6000E66")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000E60")]
		internal T[] processFrame(T[] buf)
		{
			return null;
		}

		[Token(Token = "0x6000E61")]
		public void AddPostProcessor(params IProcessor[] processors)
		{
		}

		[Token(Token = "0x6000E62")]
		public void AddPreProcessor(params IProcessor[] processors)
		{
		}

		[Token(Token = "0x6000E63")]
		public void ClearProcessors()
		{
		}

		[Token(Token = "0x6000E64")]
		internal LocalVoiceFramed(VoiceClient voiceClient, IEncoder encoder, byte id, VoiceInfo voiceInfo, int channelId, int frameSize)
		{
		}

		[Token(Token = "0x6000E67")]
		public void PushDataAsync(T[] buf)
		{
		}

		[Token(Token = "0x6000E68")]
		private void PushDataAsyncThread()
		{
		}

		[Token(Token = "0x6000E69")]
		public void PushData(T[] buf)
		{
		}

		[Token(Token = "0x6000E6A")]
		public override void Dispose()
		{
		}
	}
	[Token(Token = "0x20001FC")]
	public struct VoiceInfo
	{
		[Token(Token = "0x17000204")]
		public Codec Codec
		{
			[Token(Token = "0x6000E6F")]
			[Address(RVA = "0xBC80E0", Offset = "0xBC80E0", VA = "0xBC80E0")]
			[CompilerGenerated]
			readonly get
			{
				return default(Codec);
			}
			[Token(Token = "0x6000E70")]
			[Address(RVA = "0xBC80E8", Offset = "0xBC80E8", VA = "0xBC80E8")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000205")]
		public int SamplingRate
		{
			[Token(Token = "0x6000E71")]
			[Address(RVA = "0xBC80F0", Offset = "0xBC80F0", VA = "0xBC80F0")]
			[CompilerGenerated]
			readonly get
			{
				return default(int);
			}
			[Token(Token = "0x6000E72")]
			[Address(RVA = "0xBC80F8", Offset = "0xBC80F8", VA = "0xBC80F8")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000206")]
		public int SourceSamplingRate
		{
			[Token(Token = "0x6000E73")]
			[Address(RVA = "0xBC8100", Offset = "0xBC8100", VA = "0xBC8100")]
			[CompilerGenerated]
			readonly get
			{
				return default(int);
			}
			[Token(Token = "0x6000E74")]
			[Address(RVA = "0xBC8108", Offset = "0xBC8108", VA = "0xBC8108")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000207")]
		public int Channels
		{
			[Token(Token = "0x6000E75")]
			[Address(RVA = "0xBC8110", Offset = "0xBC8110", VA = "0xBC8110")]
			[CompilerGenerated]
			readonly get
			{
				return default(int);
			}
			[Token(Token = "0x6000E76")]
			[Address(RVA = "0xBC8118", Offset = "0xBC8118", VA = "0xBC8118")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000208")]
		public int FrameDurationUs
		{
			[Token(Token = "0x6000E77")]
			[Address(RVA = "0xBC8120", Offset = "0xBC8120", VA = "0xBC8120")]
			[CompilerGenerated]
			readonly get
			{
				return default(int);
			}
			[Token(Token = "0x6000E78")]
			[Address(RVA = "0xBC8128", Offset = "0xBC8128", VA = "0xBC8128")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000209")]
		public int Bitrate
		{
			[Token(Token = "0x6000E79")]
			[Address(RVA = "0xBC8130", Offset = "0xBC8130", VA = "0xBC8130")]
			[CompilerGenerated]
			readonly get
			{
				return default(int);
			}
			[Token(Token = "0x6000E7A")]
			[Address(RVA = "0xBC8138", Offset = "0xBC8138", VA = "0xBC8138")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700020A")]
		public object UserData
		{
			[Token(Token = "0x6000E7B")]
			[Address(RVA = "0xBC8140", Offset = "0xBC8140", VA = "0xBC8140")]
			[CompilerGenerated]
			readonly get
			{
				return null;
			}
			[Token(Token = "0x6000E7C")]
			[Address(RVA = "0xBC8148", Offset = "0xBC8148", VA = "0xBC8148")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700020B")]
		public int FrameDurationSamples
		{
			[Token(Token = "0x6000E7D")]
			[Address(RVA = "0xBC8150", Offset = "0xBC8150", VA = "0xBC8150")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700020C")]
		public int FrameSize
		{
			[Token(Token = "0x6000E7E")]
			[Address(RVA = "0xBC80A8", Offset = "0xBC80A8", VA = "0xBC80A8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700020D")]
		public int Width
		{
			[Token(Token = "0x6000E7F")]
			[Address(RVA = "0xBC8180", Offset = "0xBC8180", VA = "0xBC8180")]
			[CompilerGenerated]
			readonly get
			{
				return default(int);
			}
			[Token(Token = "0x6000E80")]
			[Address(RVA = "0xBC8188", Offset = "0xBC8188", VA = "0xBC8188")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700020E")]
		public int Height
		{
			[Token(Token = "0x6000E81")]
			[Address(RVA = "0xBC8190", Offset = "0xBC8190", VA = "0xBC8190")]
			[CompilerGenerated]
			readonly get
			{
				return default(int);
			}
			[Token(Token = "0x6000E82")]
			[Address(RVA = "0xBC8198", Offset = "0xBC8198", VA = "0xBC8198")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6000E6C")]
		[Address(RVA = "0xBC8090", Offset = "0xBC8090", VA = "0xBC8090")]
		public static VoiceInfo CreateAudioOpus(SamplingRate samplingRate, int sourceSamplingRate, int channels, OpusCodec.FrameDuration frameDurationUs, int bitrate, [Optional] object userdata)
		{
			return default(VoiceInfo);
		}

		[Token(Token = "0x6000E6D")]
		[Address(RVA = "0xBC1C14", Offset = "0xBC1C14", VA = "0xBC1C14", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000E6E")]
		[Address(RVA = "0xBC5C4C", Offset = "0xBC5C4C", VA = "0xBC5C4C")]
		internal static VoiceInfo CreateFromEventPayload(Dictionary<byte, object> h)
		{
			return default(VoiceInfo);
		}
	}
	[Token(Token = "0x20001FD")]
	public class RemoteVoiceInfo
	{
		[Token(Token = "0x1700020F")]
		public VoiceInfo Info
		{
			[Token(Token = "0x6000E84")]
			[Address(RVA = "0xBC81A0", Offset = "0xBC81A0", VA = "0xBC81A0")]
			[CompilerGenerated]
			get
			{
				return default(VoiceInfo);
			}
			[Token(Token = "0x6000E85")]
			[Address(RVA = "0xBC81B4", Offset = "0xBC81B4", VA = "0xBC81B4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000210")]
		public int ChannelId
		{
			[Token(Token = "0x6000E86")]
			[Address(RVA = "0xBC81C8", Offset = "0xBC81C8", VA = "0xBC81C8")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000E87")]
			[Address(RVA = "0xBC81D0", Offset = "0xBC81D0", VA = "0xBC81D0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000211")]
		public int PlayerId
		{
			[Token(Token = "0x6000E88")]
			[Address(RVA = "0xBC81D8", Offset = "0xBC81D8", VA = "0xBC81D8")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000E89")]
			[Address(RVA = "0xBC81E0", Offset = "0xBC81E0", VA = "0xBC81E0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000212")]
		public byte VoiceId
		{
			[Token(Token = "0x6000E8A")]
			[Address(RVA = "0xBC81E8", Offset = "0xBC81E8", VA = "0xBC81E8")]
			[CompilerGenerated]
			get
			{
				return default(byte);
			}
			[Token(Token = "0x6000E8B")]
			[Address(RVA = "0xBC81F0", Offset = "0xBC81F0", VA = "0xBC81F0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000213")]
		public object LocalUserObject
		{
			[Token(Token = "0x6000E8C")]
			[Address(RVA = "0xBC81F8", Offset = "0xBC81F8", VA = "0xBC81F8")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E8D")]
			[Address(RVA = "0xBC8200", Offset = "0xBC8200", VA = "0xBC8200")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000E83")]
		[Address(RVA = "0xBC6F84", Offset = "0xBC6F84", VA = "0xBC6F84")]
		internal RemoteVoiceInfo(int channelId, int playerId, byte voiceId, VoiceInfo info, object localUserObject)
		{
		}
	}
	[Token(Token = "0x20001FE")]
	public abstract class BufferReaderPushAdapterBase<T> : IServiceable
	{
		[Token(Token = "0x4000CBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected IDataReader<T> reader;

		[Token(Token = "0x6000E8E")]
		public abstract void Service(LocalVoice localVoice);

		[Token(Token = "0x6000E8F")]
		public BufferReaderPushAdapterBase(IDataReader<T> reader)
		{
		}

		[Token(Token = "0x6000E90")]
		public void Dispose()
		{
		}
	}
	[Token(Token = "0x20001FF")]
	public class BufferReaderPushAdapter<T> : BufferReaderPushAdapterBase<T>
	{
		[Token(Token = "0x4000CBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected T[] buffer;

		[Token(Token = "0x6000E91")]
		public BufferReaderPushAdapter(LocalVoice localVoice, IDataReader<T> reader)
		{
		}

		[Token(Token = "0x6000E92")]
		public override void Service(LocalVoice localVoice)
		{
		}
	}
	[Token(Token = "0x2000200")]
	public class BufferReaderPushAdapterAsyncPool<T> : BufferReaderPushAdapterBase<T>
	{
		[Token(Token = "0x6000E93")]
		public BufferReaderPushAdapterAsyncPool(LocalVoice localVoice, IDataReader<T> reader)
		{
		}

		[Token(Token = "0x6000E94")]
		public override void Service(LocalVoice localVoice)
		{
		}
	}
	[Token(Token = "0x2000201")]
	public class BufferReaderPushAdapterAsyncPoolCopy<T> : BufferReaderPushAdapterBase<T>
	{
		[Token(Token = "0x4000CBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected T[] buffer;

		[Token(Token = "0x6000E95")]
		public BufferReaderPushAdapterAsyncPoolCopy(LocalVoice localVoice, IDataReader<T> reader)
		{
		}

		[Token(Token = "0x6000E96")]
		public override void Service(LocalVoice localVoice)
		{
		}
	}
	[Token(Token = "0x2000202")]
	public class BufferReaderPushAdapterAsyncPoolFloatToShort : BufferReaderPushAdapterBase<float>
	{
		[Token(Token = "0x4000CC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float[] buffer;

		[Token(Token = "0x6000E97")]
		[Address(RVA = "0xBC8208", Offset = "0xBC8208", VA = "0xBC8208")]
		public BufferReaderPushAdapterAsyncPoolFloatToShort(LocalVoice localVoice, IDataReader<float> reader)
		{
		}

		[Token(Token = "0x6000E98")]
		[Address(RVA = "0xBC82DC", Offset = "0xBC82DC", VA = "0xBC82DC", Slot = "5")]
		public override void Service(LocalVoice localVoice)
		{
		}
	}
	[Token(Token = "0x2000203")]
	internal class VoiceEventCode
	{
		[Token(Token = "0x4000CC1")]
		public const byte Code0 = 201;

		[Token(Token = "0x6000E99")]
		[Address(RVA = "0xBC8504", Offset = "0xBC8504", VA = "0xBC8504")]
		public static byte GetCode(int channelID)
		{
			return default(byte);
		}

		[Token(Token = "0x6000E9A")]
		[Address(RVA = "0xBC850C", Offset = "0xBC850C", VA = "0xBC850C")]
		public static bool TryGetChannelID(byte evCode, int maxChannels, out byte channelID)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E9B")]
		[Address(RVA = "0xBC8540", Offset = "0xBC8540", VA = "0xBC8540")]
		public VoiceEventCode()
		{
		}
	}
	[Token(Token = "0x2000204")]
	public class LoadBalancingFrontend : LoadBalancingClient, IVoiceFrontend, ILogger, IDisposable
	{
		[Token(Token = "0x4000CC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		protected VoiceClient voiceClient;

		[Token(Token = "0x4000CC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private object sendLock;

		[Token(Token = "0x17000214")]
		public VoiceClient VoiceClient
		{
			[Token(Token = "0x6000E9C")]
			[Address(RVA = "0xBC8548", Offset = "0xBC8548", VA = "0xBC8548")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000215")]
		public new Action<EventData> OnEventAction
		{
			[Token(Token = "0x6000EA4")]
			[Address(RVA = "0xBC8C20", Offset = "0xBC8C20", VA = "0xBC8C20")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000EA5")]
			[Address(RVA = "0xBC8C28", Offset = "0xBC8C28", VA = "0xBC8C28")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000216")]
		public new Action<ClientState> OnStateChangeAction
		{
			[Token(Token = "0x6000EA6")]
			[Address(RVA = "0xBC8C30", Offset = "0xBC8C30", VA = "0xBC8C30")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000EA7")]
			[Address(RVA = "0xBC8C38", Offset = "0xBC8C38", VA = "0xBC8C38")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000217")]
		public byte GlobalAudioGroup
		{
			[Token(Token = "0x6000EAB")]
			[Address(RVA = "0xBC91E8", Offset = "0xBC91E8", VA = "0xBC91E8")]
			get
			{
				return default(byte);
			}
			[Token(Token = "0x6000EAC")]
			[Address(RVA = "0xBC9204", Offset = "0xBC9204", VA = "0xBC9204")]
			set
			{
			}
		}

		[Token(Token = "0x6000E9D")]
		[Address(RVA = "0xBC8550", Offset = "0xBC8550", VA = "0xBC8550", Slot = "27")]
		public void LogError(string fmt, params object[] args)
		{
		}

		[Token(Token = "0x6000E9E")]
		[Address(RVA = "0xBC8588", Offset = "0xBC8588", VA = "0xBC8588", Slot = "28")]
		public void LogWarning(string fmt, params object[] args)
		{
		}

		[Token(Token = "0x6000E9F")]
		[Address(RVA = "0xBC85C0", Offset = "0xBC85C0", VA = "0xBC85C0", Slot = "29")]
		public void LogInfo(string fmt, params object[] args)
		{
		}

		[Token(Token = "0x6000EA0")]
		[Address(RVA = "0xBC85F8", Offset = "0xBC85F8", VA = "0xBC85F8", Slot = "30")]
		public void LogDebug(string fmt, params object[] args)
		{
		}

		[Token(Token = "0x6000EA1")]
		[Address(RVA = "0xBC8630", Offset = "0xBC8630", VA = "0xBC8630", Slot = "19")]
		public int AssignChannel(VoiceInfo v)
		{
			return default(int);
		}

		[Token(Token = "0x6000EA2")]
		[Address(RVA = "0xBC8724", Offset = "0xBC8724", VA = "0xBC8724", Slot = "20")]
		public bool IsChannelJoined(int channelId)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EA3")]
		[Address(RVA = "0xBC8734", Offset = "0xBC8734", VA = "0xBC8734", Slot = "26")]
		public void SetDebugEchoMode(LocalVoice v)
		{
		}

		[Token(Token = "0x6000EA8")]
		[Address(RVA = "0xBC8C40", Offset = "0xBC8C40", VA = "0xBC8C40")]
		public LoadBalancingFrontend(ConnectionProtocol connectionProtocol = ConnectionProtocol.Udp)
		{
		}

		[Token(Token = "0x6000EA9")]
		[Address(RVA = "0xBC917C", Offset = "0xBC917C", VA = "0xBC917C")]
		public new void Service()
		{
		}

		[Token(Token = "0x6000EAA")]
		[Address(RVA = "0xBC91C4", Offset = "0xBC91C4", VA = "0xBC91C4", Slot = "32")]
		public virtual bool ChangeAudioGroups(byte[] groupsToRemove, byte[] groupsToAdd)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EAD")]
		[Address(RVA = "0xBC8884", Offset = "0xBC8884", VA = "0xBC8884", Slot = "21")]
		public void SendVoicesInfo(IEnumerable<LocalVoice> voices, int channelId, int targetPlayerId)
		{
		}

		[Token(Token = "0x6000EAE")]
		[Address(RVA = "0xBC9304", Offset = "0xBC9304", VA = "0xBC9304")]
		public void SendDebugEchoVoicesInfo(int channelId)
		{
		}

		[Token(Token = "0x6000EAF")]
		[Address(RVA = "0xBC8A58", Offset = "0xBC8A58", VA = "0xBC8A58", Slot = "22")]
		public void SendVoiceRemove(LocalVoice voice, int channelId, int targetPlayerId)
		{
		}

		[Token(Token = "0x6000EB0")]
		[Address(RVA = "0xBC9478", Offset = "0xBC9478", VA = "0xBC9478", Slot = "23")]
		public void SendFrame(ArraySegment<byte> data, byte evNumber, byte voiceId, int channelId, LocalVoice localVoice)
		{
		}

		[Token(Token = "0x6000EB1")]
		[Address(RVA = "0xBC974C", Offset = "0xBC974C", VA = "0xBC974C", Slot = "24")]
		public string ChannelIdStr(int channelId)
		{
			return null;
		}

		[Token(Token = "0x6000EB2")]
		[Address(RVA = "0xBC9754", Offset = "0xBC9754", VA = "0xBC9754", Slot = "25")]
		public string PlayerIdStr(int playerId)
		{
			return null;
		}

		[Token(Token = "0x6000EB3")]
		[Address(RVA = "0xBC975C", Offset = "0xBC975C", VA = "0xBC975C")]
		private void onEventActionVoiceClient(EventData ev)
		{
		}

		[Token(Token = "0x6000EB4")]
		[Address(RVA = "0xBC9A20", Offset = "0xBC9A20", VA = "0xBC9A20")]
		private void onStateChangeVoiceClient(ClientState state)
		{
		}

		[Token(Token = "0x6000EB5")]
		[Address(RVA = "0xBC9950", Offset = "0xBC9950", VA = "0xBC9950")]
		private void onPlayerLeave(int playerId)
		{
		}

		[Token(Token = "0x6000EB6")]
		[Address(RVA = "0xBC9B48", Offset = "0xBC9B48", VA = "0xBC9B48", Slot = "31")]
		public void Dispose()
		{
		}
	}
	[Token(Token = "0x2000206")]
	public class AudioInEnumerator : IDisposable
	{
		[Token(Token = "0x4000CC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly bool IsSupported;

		[Token(Token = "0x17000218")]
		public int Count
		{
			[Token(Token = "0x6000EBC")]
			[Address(RVA = "0xBC9BF0", Offset = "0xBC9BF0", VA = "0xBC9BF0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000EBA")]
		[Address(RVA = "0xBC9BE4", Offset = "0xBC9BE4", VA = "0xBC9BE4")]
		public AudioInEnumerator()
		{
		}

		[Token(Token = "0x6000EBB")]
		[Address(RVA = "0xBC9BEC", Offset = "0xBC9BEC", VA = "0xBC9BEC")]
		public void Refresh()
		{
		}

		[Token(Token = "0x6000EBD")]
		[Address(RVA = "0xBC9BF8", Offset = "0xBC9BF8", VA = "0xBC9BF8")]
		public string NameAtIndex(int i)
		{
			return null;
		}

		[Token(Token = "0x6000EBE")]
		[Address(RVA = "0xBC9C00", Offset = "0xBC9C00", VA = "0xBC9C00")]
		public int IDAtIndex(int i)
		{
			return default(int);
		}

		[Token(Token = "0x6000EBF")]
		[Address(RVA = "0xBC9C08", Offset = "0xBC9C08", VA = "0xBC9C08")]
		public bool IDIsValid(int id)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EC0")]
		[Address(RVA = "0xBC9C14", Offset = "0xBC9C14", VA = "0xBC9C14", Slot = "4")]
		public void Dispose()
		{
		}
	}
}
namespace ExitGames.Client.Photon.LoadBalancing
{
	[Token(Token = "0x2000207")]
	public static class Extensions
	{
		[Token(Token = "0x6000EC1")]
		[Address(RVA = "0xBC9C18", Offset = "0xBC9C18", VA = "0xBC9C18")]
		public static void Merge(this IDictionary target, IDictionary addHash)
		{
		}

		[Token(Token = "0x6000EC2")]
		[Address(RVA = "0xBCA058", Offset = "0xBCA058", VA = "0xBCA058")]
		public static void MergeStringKeys(this IDictionary target, IDictionary addHash)
		{
		}

		[Token(Token = "0x6000EC3")]
		[Address(RVA = "0xBCA4C0", Offset = "0xBCA4C0", VA = "0xBCA4C0")]
		public static string ToStringFull(this IDictionary origin)
		{
			return null;
		}

		[Token(Token = "0x6000EC4")]
		[Address(RVA = "0xBCA51C", Offset = "0xBCA51C", VA = "0xBCA51C")]
		public static string ToStringFull(this object[] data)
		{
			return null;
		}

		[Token(Token = "0x6000EC5")]
		[Address(RVA = "0xBCA664", Offset = "0xBCA664", VA = "0xBCA664")]
		public static Hashtable StripToStringKeys(this IDictionary original)
		{
			return null;
		}

		[Token(Token = "0x6000EC6")]
		[Address(RVA = "0xBCAA88", Offset = "0xBCAA88", VA = "0xBCAA88")]
		public static void StripKeysWithNullValues(this IDictionary original)
		{
		}

		[Token(Token = "0x6000EC7")]
		[Address(RVA = "0xBCAD30", Offset = "0xBCAD30", VA = "0xBCAD30")]
		public static bool Contains(this int[] target, int nr)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000208")]
	public class FriendInfo
	{
		[Token(Token = "0x17000219")]
		[Obsolete("Use UserId.")]
		public string Name
		{
			[Token(Token = "0x6000EC8")]
			[Address(RVA = "0xBCAD84", Offset = "0xBCAD84", VA = "0xBCAD84")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700021A")]
		public string UserId
		{
			[Token(Token = "0x6000EC9")]
			[Address(RVA = "0xBCAD8C", Offset = "0xBCAD8C", VA = "0xBCAD8C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000ECA")]
			[Address(RVA = "0xBCAD94", Offset = "0xBCAD94", VA = "0xBCAD94")]
			[CompilerGenerated]
			protected internal set
			{
			}
		}

		[Token(Token = "0x1700021B")]
		public bool IsOnline
		{
			[Token(Token = "0x6000ECB")]
			[Address(RVA = "0xBCAD9C", Offset = "0xBCAD9C", VA = "0xBCAD9C")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000ECC")]
			[Address(RVA = "0xBCADA4", Offset = "0xBCADA4", VA = "0xBCADA4")]
			[CompilerGenerated]
			protected internal set
			{
			}
		}

		[Token(Token = "0x1700021C")]
		public string Room
		{
			[Token(Token = "0x6000ECD")]
			[Address(RVA = "0xBCADB0", Offset = "0xBCADB0", VA = "0xBCADB0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000ECE")]
			[Address(RVA = "0xBCADB8", Offset = "0xBCADB8", VA = "0xBCADB8")]
			[CompilerGenerated]
			protected internal set
			{
			}
		}

		[Token(Token = "0x1700021D")]
		public bool IsInRoom
		{
			[Token(Token = "0x6000ECF")]
			[Address(RVA = "0xBCADC0", Offset = "0xBCADC0", VA = "0xBCADC0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000ED0")]
		[Address(RVA = "0xBCADE8", Offset = "0xBCADE8", VA = "0xBCADE8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000ED1")]
		[Address(RVA = "0xBCAEA4", Offset = "0xBCAEA4", VA = "0xBCAEA4")]
		public FriendInfo()
		{
		}
	}
	[Token(Token = "0x2000209")]
	public enum ClientState
	{
		[Token(Token = "0x4000CCD")]
		PeerCreated = 0,
		[Token(Token = "0x4000CCE")]
		Authenticating = 1,
		[Token(Token = "0x4000CCF")]
		Authenticated = 2,
		[Token(Token = "0x4000CD0")]
		JoinedLobby = 3,
		[Token(Token = "0x4000CD1")]
		DisconnectingFromMasterserver = 4,
		[Token(Token = "0x4000CD2")]
		ConnectingToGameserver = 5,
		[Token(Token = "0x4000CD3")]
		ConnectedToGameserver = 6,
		[Token(Token = "0x4000CD4")]
		Joining = 7,
		[Token(Token = "0x4000CD5")]
		Joined = 8,
		[Token(Token = "0x4000CD6")]
		Leaving = 9,
		[Token(Token = "0x4000CD7")]
		DisconnectingFromGameserver = 10,
		[Token(Token = "0x4000CD8")]
		ConnectingToMasterserver = 11,
		[Token(Token = "0x4000CD9")]
		Disconnecting = 12,
		[Token(Token = "0x4000CDA")]
		Disconnected = 13,
		[Token(Token = "0x4000CDB")]
		ConnectedToMasterserver = 14,
		[Token(Token = "0x4000CDC")]
		[Obsolete("Renamed to ConnectedToMasterserver.")]
		ConnectedToMaster = 14,
		[Token(Token = "0x4000CDD")]
		ConnectingToNameServer = 15,
		[Token(Token = "0x4000CDE")]
		ConnectedToNameServer = 16,
		[Token(Token = "0x4000CDF")]
		DisconnectingFromNameServer = 17
	}
	[Token(Token = "0x200020A")]
	internal enum JoinType
	{
		[Token(Token = "0x4000CE1")]
		CreateRoom,
		[Token(Token = "0x4000CE2")]
		JoinRoom,
		[Token(Token = "0x4000CE3")]
		JoinRandomRoom,
		[Token(Token = "0x4000CE4")]
		JoinOrCreateRoom
	}
	[Token(Token = "0x200020B")]
	public enum DisconnectCause
	{
		[Token(Token = "0x4000CE6")]
		None,
		[Token(Token = "0x4000CE7")]
		DisconnectByServerUserLimit,
		[Token(Token = "0x4000CE8")]
		ExceptionOnConnect,
		[Token(Token = "0x4000CE9")]
		DisconnectByServer,
		[Token(Token = "0x4000CEA")]
		TimeoutDisconnect,
		[Token(Token = "0x4000CEB")]
		Exception,
		[Token(Token = "0x4000CEC")]
		InvalidAuthentication,
		[Token(Token = "0x4000CED")]
		MaxCcuReached,
		[Token(Token = "0x4000CEE")]
		InvalidRegion,
		[Token(Token = "0x4000CEF")]
		OperationNotAllowedInCurrentState,
		[Token(Token = "0x4000CF0")]
		CustomAuthenticationFailed,
		[Token(Token = "0x4000CF1")]
		DisconnectByServerLogic,
		[Token(Token = "0x4000CF2")]
		AuthenticationTicketExpired
	}
	[Token(Token = "0x200020C")]
	public enum ServerConnection
	{
		[Token(Token = "0x4000CF4")]
		MasterServer,
		[Token(Token = "0x4000CF5")]
		GameServer,
		[Token(Token = "0x4000CF6")]
		NameServer
	}
	[Token(Token = "0x200020D")]
	public enum EncryptionMode
	{
		[Token(Token = "0x4000CF8")]
		PayloadEncryption = 0,
		[Token(Token = "0x4000CF9")]
		DatagramEncryption = 10,
		[Token(Token = "0x4000CFA")]
		DatagramEncryptionRandomSequence = 11
	}
	[Token(Token = "0x200020E")]
	public static class EncryptionDataParameters
	{
		[Token(Token = "0x4000CFB")]
		public const byte Mode = 0;

		[Token(Token = "0x4000CFC")]
		public const byte Secret1 = 1;

		[Token(Token = "0x4000CFD")]
		public const byte Secret2 = 2;
	}
	[Token(Token = "0x200020F")]
	public class LoadBalancingClient : IPhotonPeerListener
	{
		[Token(Token = "0x4000CFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public LoadBalancingPeer loadBalancingPeer;

		[Token(Token = "0x4000D02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AuthModeOption AuthMode;

		[Token(Token = "0x4000D03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public EncryptionMode EncryptionMode;

		[Token(Token = "0x4000D04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private ConnectionProtocol ExpectedProtocol;

		[Token(Token = "0x4000D06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string NameServerHost;

		[Token(Token = "0x4000D07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string NameServerHttp;

		[Token(Token = "0x4000D08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Dictionary<ConnectionProtocol, int> ProtocolToNameServerPort;

		[Token(Token = "0x4000D0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private ClientState state;

		[Token(Token = "0x4000D11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private bool inLobby;

		[Token(Token = "0x4000D13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool autoJoinLobby;

		[Token(Token = "0x4000D14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
		public bool EnableLobbyStatistics;

		[Token(Token = "0x4000D15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private List<TypedLobbyInfo> lobbyStatistics;

		[Token(Token = "0x4000D17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Dictionary<string, RoomInfo> RoomInfoList;

		[Token(Token = "0x4000D18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public Room CurrentRoom;

		[Token(Token = "0x4000D1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private JoinType lastJoinType;

		[Token(Token = "0x4000D1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		protected internal EnterRoomParams enterRoomParamsCache;

		[Token(Token = "0x4000D1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private bool didAuthenticate;

		[Token(Token = "0x4000D20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private string[] friendListRequested;

		[Token(Token = "0x4000D21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private int friendListTimestamp;

		[Token(Token = "0x4000D22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private bool isFetchingFriendList;

		[Token(Token = "0x4000D26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private byte[] encryptionSecret;

		[Token(Token = "0x1700021E")]
		public string AppVersion
		{
			[Token(Token = "0x6000ED2")]
			[Address(RVA = "0xBCAEAC", Offset = "0xBCAEAC", VA = "0xBCAEAC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000ED3")]
			[Address(RVA = "0xBCAEB4", Offset = "0xBCAEB4", VA = "0xBCAEB4")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700021F")]
		public string AppId
		{
			[Token(Token = "0x6000ED4")]
			[Address(RVA = "0xBCAEBC", Offset = "0xBCAEBC", VA = "0xBCAEBC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000ED5")]
			[Address(RVA = "0xBCAEC4", Offset = "0xBCAEC4", VA = "0xBCAEC4")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000220")]
		public AuthenticationValues AuthValues
		{
			[Token(Token = "0x6000ED6")]
			[Address(RVA = "0xBCAECC", Offset = "0xBCAECC", VA = "0xBCAECC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000ED7")]
			[Address(RVA = "0xBCAED4", Offset = "0xBCAED4", VA = "0xBCAED4")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000221")]
		public ConnectionProtocol TransportProtocol
		{
			[Token(Token = "0x6000ED8")]
			[Address(RVA = "0xBCAEDC", Offset = "0xBCAEDC", VA = "0xBCAEDC")]
			get
			{
				return default(ConnectionProtocol);
			}
			[Token(Token = "0x6000ED9")]
			[Address(RVA = "0xBCAEF8", Offset = "0xBCAEF8", VA = "0xBCAEF8")]
			set
			{
			}
		}

		[Token(Token = "0x17000222")]
		public Dictionary<ConnectionProtocol, Type> SocketImplementationConfig
		{
			[Token(Token = "0x6000EDA")]
			[Address(RVA = "0xBCB030", Offset = "0xBCB030", VA = "0xBCB030")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000223")]
		private string TokenForInit
		{
			[Token(Token = "0x6000EDB")]
			[Address(RVA = "0xBCB04C", Offset = "0xBCB04C", VA = "0xBCB04C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000224")]
		public bool IsUsingNameServer
		{
			[Token(Token = "0x6000EDC")]
			[Address(RVA = "0xBCB06C", Offset = "0xBCB06C", VA = "0xBCB06C")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000EDD")]
			[Address(RVA = "0xBCB074", Offset = "0xBCB074", VA = "0xBCB074")]
			[CompilerGenerated]
			protected internal set
			{
			}
		}

		[Token(Token = "0x17000225")]
		public string NameServerAddress
		{
			[Token(Token = "0x6000EDE")]
			[Address(RVA = "0xBCB080", Offset = "0xBCB080", VA = "0xBCB080")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000226")]
		public string CurrentServerAddress
		{
			[Token(Token = "0x6000EDF")]
			[Address(RVA = "0xBCB228", Offset = "0xBCB228", VA = "0xBCB228")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000227")]
		public string MasterServerAddress
		{
			[Token(Token = "0x6000EE0")]
			[Address(RVA = "0xBCB244", Offset = "0xBCB244", VA = "0xBCB244")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000EE1")]
			[Address(RVA = "0xBCB24C", Offset = "0xBCB24C", VA = "0xBCB24C")]
			[CompilerGenerated]
			protected internal set
			{
			}
		}

		[Token(Token = "0x17000228")]
		public string GameServerAddress
		{
			[Token(Token = "0x6000EE2")]
			[Address(RVA = "0xBCB254", Offset = "0xBCB254", VA = "0xBCB254")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000EE3")]
			[Address(RVA = "0xBCB25C", Offset = "0xBCB25C", VA = "0xBCB25C")]
			[CompilerGenerated]
			protected internal set
			{
			}
		}

		[Token(Token = "0x17000229")]
		public ServerConnection Server
		{
			[Token(Token = "0x6000EE4")]
			[Address(RVA = "0xBCB264", Offset = "0xBCB264", VA = "0xBCB264")]
			[CompilerGenerated]
			get
			{
				return default(ServerConnection);
			}
			[Token(Token = "0x6000EE5")]
			[Address(RVA = "0xBCB26C", Offset = "0xBCB26C", VA = "0xBCB26C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700022A")]
		public ClientState State
		{
			[Token(Token = "0x6000EE6")]
			[Address(RVA = "0xBCB274", Offset = "0xBCB274", VA = "0xBCB274")]
			get
			{
				return default(ClientState);
			}
			[Token(Token = "0x6000EE7")]
			[Address(RVA = "0xBCB27C", Offset = "0xBCB27C", VA = "0xBCB27C")]
			protected internal set
			{
			}
		}

		[Token(Token = "0x1700022B")]
		public bool IsConnected
		{
			[Token(Token = "0x6000EE8")]
			[Address(RVA = "0xBCB29C", Offset = "0xBCB29C", VA = "0xBCB29C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700022C")]
		public bool IsConnectedAndReady
		{
			[Token(Token = "0x6000EE9")]
			[Address(RVA = "0xBCB2C8", Offset = "0xBCB2C8", VA = "0xBCB2C8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700022D")]
		public DisconnectCause DisconnectedCause
		{
			[Token(Token = "0x6000EF0")]
			[Address(RVA = "0xBCB5BC", Offset = "0xBCB5BC", VA = "0xBCB5BC")]
			[CompilerGenerated]
			get
			{
				return default(DisconnectCause);
			}
			[Token(Token = "0x6000EF1")]
			[Address(RVA = "0xBCB5C4", Offset = "0xBCB5C4", VA = "0xBCB5C4")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x1700022E")]
		public TypedLobby CurrentLobby
		{
			[Token(Token = "0x6000EF2")]
			[Address(RVA = "0xBCB5CC", Offset = "0xBCB5CC", VA = "0xBCB5CC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000EF3")]
			[Address(RVA = "0xBCB5D4", Offset = "0xBCB5D4", VA = "0xBCB5D4")]
			[CompilerGenerated]
			protected internal set
			{
			}
		}

		[Token(Token = "0x1700022F")]
		public bool AutoJoinLobby
		{
			[Token(Token = "0x6000EF4")]
			[Address(RVA = "0xBCB5DC", Offset = "0xBCB5DC", VA = "0xBCB5DC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000EF5")]
			[Address(RVA = "0xBCB5E4", Offset = "0xBCB5E4", VA = "0xBCB5E4")]
			set
			{
			}
		}

		[Token(Token = "0x17000230")]
		public List<TypedLobbyInfo> LobbyStatistics
		{
			[Token(Token = "0x6000EF6")]
			[Address(RVA = "0xBCB5F0", Offset = "0xBCB5F0", VA = "0xBCB5F0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000EF7")]
			[Address(RVA = "0xBCB5F8", Offset = "0xBCB5F8", VA = "0xBCB5F8")]
			private set
			{
			}
		}

		[Token(Token = "0x17000231")]
		public Player LocalPlayer
		{
			[Token(Token = "0x6000EF8")]
			[Address(RVA = "0xBCB600", Offset = "0xBCB600", VA = "0xBCB600")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000EF9")]
			[Address(RVA = "0xBCB608", Offset = "0xBCB608", VA = "0xBCB608")]
			[CompilerGenerated]
			internal set
			{
			}
		}

		[Token(Token = "0x17000232")]
		public string NickName
		{
			[Token(Token = "0x6000EFA")]
			[Address(RVA = "0xBCB610", Offset = "0xBCB610", VA = "0xBCB610")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000EFB")]
			[Address(RVA = "0xBCB62C", Offset = "0xBCB62C", VA = "0xBCB62C")]
			set
			{
			}
		}

		[Token(Token = "0x17000233")]
		public string UserId
		{
			[Token(Token = "0x6000EFC")]
			[Address(RVA = "0xBCB640", Offset = "0xBCB640", VA = "0xBCB640")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000EFD")]
			[Address(RVA = "0xBCB658", Offset = "0xBCB658", VA = "0xBCB658")]
			set
			{
			}
		}

		[Token(Token = "0x17000234")]
		public int PlayersOnMasterCount
		{
			[Token(Token = "0x6000EFE")]
			[Address(RVA = "0xBCB6C8", Offset = "0xBCB6C8", VA = "0xBCB6C8")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000EFF")]
			[Address(RVA = "0xBCB6D0", Offset = "0xBCB6D0", VA = "0xBCB6D0")]
			[CompilerGenerated]
			internal set
			{
			}
		}

		[Token(Token = "0x17000235")]
		public int PlayersInRoomsCount
		{
			[Token(Token = "0x6000F00")]
			[Address(RVA = "0xBCB6D8", Offset = "0xBCB6D8", VA = "0xBCB6D8")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000F01")]
			[Address(RVA = "0xBCB6E0", Offset = "0xBCB6E0", VA = "0xBCB6E0")]
			[CompilerGenerated]
			internal set
			{
			}
		}

		[Token(Token = "0x17000236")]
		public int RoomsCount
		{
			[Token(Token = "0x6000F02")]
			[Address(RVA = "0xBCB6E8", Offset = "0xBCB6E8", VA = "0xBCB6E8")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000F03")]
			[Address(RVA = "0xBCB6F0", Offset = "0xBCB6F0", VA = "0xBCB6F0")]
			[CompilerGenerated]
			internal set
			{
			}
		}

		[Token(Token = "0x17000237")]
		public List<FriendInfo> FriendList
		{
			[Token(Token = "0x6000F04")]
			[Address(RVA = "0xBCB6F8", Offset = "0xBCB6F8", VA = "0xBCB6F8")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F05")]
			[Address(RVA = "0xBCB700", Offset = "0xBCB700", VA = "0xBCB700")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000238")]
		public int FriendListAge
		{
			[Token(Token = "0x6000F06")]
			[Address(RVA = "0xBCB708", Offset = "0xBCB708", VA = "0xBCB708")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000239")]
		protected bool IsAuthorizeSecretAvailable
		{
			[Token(Token = "0x6000F07")]
			[Address(RVA = "0xBCB740", Offset = "0xBCB740", VA = "0xBCB740")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700023A")]
		public string[] AvailableRegions
		{
			[Token(Token = "0x6000F08")]
			[Address(RVA = "0xBCB768", Offset = "0xBCB768", VA = "0xBCB768")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F09")]
			[Address(RVA = "0xBCB770", Offset = "0xBCB770", VA = "0xBCB770")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700023B")]
		public string[] AvailableRegionsServers
		{
			[Token(Token = "0x6000F0A")]
			[Address(RVA = "0xBCB778", Offset = "0xBCB778", VA = "0xBCB778")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F0B")]
			[Address(RVA = "0xBCB780", Offset = "0xBCB780", VA = "0xBCB780")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700023C")]
		public string CloudRegion
		{
			[Token(Token = "0x6000F0C")]
			[Address(RVA = "0xBCB788", Offset = "0xBCB788", VA = "0xBCB788")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F0D")]
			[Address(RVA = "0xBCB790", Offset = "0xBCB790", VA = "0xBCB790")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x14000007")]
		public event Action<ClientState> OnStateChangeAction
		{
			[Token(Token = "0x6000EEA")]
			[Address(RVA = "0xBC90CC", Offset = "0xBC90CC", VA = "0xBC90CC")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000EEB")]
			[Address(RVA = "0xBCB2FC", Offset = "0xBCB2FC", VA = "0xBCB2FC")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000008")]
		public event Action<EventData> OnEventAction
		{
			[Token(Token = "0x6000EEC")]
			[Address(RVA = "0xBC901C", Offset = "0xBC901C", VA = "0xBC901C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000EED")]
			[Address(RVA = "0xBCB3AC", Offset = "0xBCB3AC", VA = "0xBCB3AC")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000009")]
		public event Action<OperationResponse> OnOpResponseAction
		{
			[Token(Token = "0x6000EEE")]
			[Address(RVA = "0xBCB45C", Offset = "0xBCB45C", VA = "0xBCB45C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000EEF")]
			[Address(RVA = "0xBCB50C", Offset = "0xBCB50C", VA = "0xBCB50C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000F0E")]
		[Address(RVA = "0xBC8E5C", Offset = "0xBC8E5C", VA = "0xBC8E5C")]
		public LoadBalancingClient(ConnectionProtocol protocol = ConnectionProtocol.Udp)
		{
		}

		[Token(Token = "0x6000F0F")]
		[Address(RVA = "0xBCB798", Offset = "0xBCB798", VA = "0xBCB798")]
		public LoadBalancingClient(string masterAddress, string appId, string gameVersion, ConnectionProtocol protocol = ConnectionProtocol.Udp)
		{
		}

		[Token(Token = "0x6000F10")]
		[Address(RVA = "0xBCB084", Offset = "0xBCB084", VA = "0xBCB084")]
		private string GetNameServerAddress()
		{
			return null;
		}

		[Token(Token = "0x6000F11")]
		[Address(RVA = "0xBCB7D4", Offset = "0xBCB7D4", VA = "0xBCB7D4")]
		public bool Connect(string masterServerAddress, string appId, string appVersion, string nickName, AuthenticationValues authValues)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F12")]
		[Address(RVA = "0xBCB880", Offset = "0xBCB880", VA = "0xBCB880", Slot = "8")]
		public virtual bool Connect()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F13")]
		[Address(RVA = "0xBCB908", Offset = "0xBCB908", VA = "0xBCB908")]
		public bool ConnectToNameServer()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F14")]
		[Address(RVA = "0xBCB9F4", Offset = "0xBCB9F4", VA = "0xBCB9F4")]
		public bool ConnectToRegionMaster(string region)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F15")]
		[Address(RVA = "0xBCBB80", Offset = "0xBCBB80", VA = "0xBCBB80")]
		public void Disconnect()
		{
		}

		[Token(Token = "0x6000F16")]
		[Address(RVA = "0xBCBB08", Offset = "0xBCBB08", VA = "0xBCBB08")]
		private bool CallAuthenticate()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F17")]
		[Address(RVA = "0xBC91AC", Offset = "0xBC91AC", VA = "0xBC91AC")]
		public void Service()
		{
		}

		[Token(Token = "0x6000F18")]
		[Address(RVA = "0xBCBBE0", Offset = "0xBCBBE0", VA = "0xBCBBE0")]
		private void DisconnectToReconnect()
		{
		}

		[Token(Token = "0x6000F19")]
		[Address(RVA = "0xBCBC88", Offset = "0xBCBC88", VA = "0xBCBC88")]
		private bool ConnectToGameServer()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F1A")]
		[Address(RVA = "0xBCBD0C", Offset = "0xBCBD0C", VA = "0xBCBD0C")]
		public bool OpGetRegions()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F1B")]
		[Address(RVA = "0xBCBD5C", Offset = "0xBCBD5C", VA = "0xBCBD5C")]
		public bool OpFindFriends(string[] friendsToFind)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F1C")]
		[Address(RVA = "0xBCC104", Offset = "0xBCC104", VA = "0xBCC104")]
		public bool OpJoinLobby(TypedLobby lobby)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F1D")]
		[Address(RVA = "0xBCC19C", Offset = "0xBCC19C", VA = "0xBCC19C")]
		public bool OpLeaveLobby()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F1E")]
		[Address(RVA = "0xBCC1C0", Offset = "0xBCC1C0", VA = "0xBCC1C0")]
		public bool OpJoinRandomRoom(Hashtable expectedCustomRoomProperties, byte expectedMaxPlayers, [Optional] string[] expectedUsers)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F1F")]
		[Address(RVA = "0xBCC3A4", Offset = "0xBCC3A4", VA = "0xBCC3A4")]
		public bool OpJoinRandomRoom(Hashtable expectedCustomRoomProperties, byte expectedMaxPlayers, MatchmakingMode matchmakingMode)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F20")]
		[Address(RVA = "0xBCC250", Offset = "0xBCC250", VA = "0xBCC250")]
		public bool OpJoinRandomRoom(Hashtable expectedCustomRoomProperties, byte expectedMaxPlayers, MatchmakingMode matchmakingMode, TypedLobby lobby, string sqlLobbyFilter, [Optional] string[] expectedUsers)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F21")]
		[Address(RVA = "0xBCC434", Offset = "0xBCC434", VA = "0xBCC434")]
		public bool OpJoinRoom(string roomName, [Optional] string[] expectedUsers)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F22")]
		[Address(RVA = "0xBCC500", Offset = "0xBCC500", VA = "0xBCC500")]
		public bool OpReJoinRoom(string roomName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F23")]
		[Address(RVA = "0xBCC5C8", Offset = "0xBCC5C8", VA = "0xBCC5C8")]
		public bool OpJoinOrCreateRoom(string roomName, RoomOptions roomOptions, TypedLobby lobby, [Optional] string[] expectedUsers)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F24")]
		[Address(RVA = "0xBCC6B4", Offset = "0xBCC6B4", VA = "0xBCC6B4")]
		public bool OpCreateRoom(string roomName, RoomOptions roomOptions, TypedLobby lobby, [Optional] string[] expectedUsers)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F25")]
		[Address(RVA = "0xBCC794", Offset = "0xBCC794", VA = "0xBCC794")]
		public bool OpLeaveRoom()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F26")]
		[Address(RVA = "0xBCC7A0", Offset = "0xBCC7A0", VA = "0xBCC7A0")]
		public bool OpLeaveRoom(bool becomeInactive, bool sendAuthCookie = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F27")]
		[Address(RVA = "0xBCC834", Offset = "0xBCC834", VA = "0xBCC834")]
		public bool OpGetGameList(TypedLobby typedLobby, string sqlLobbyFilter)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F28")]
		[Address(RVA = "0xBCC858", Offset = "0xBCC858", VA = "0xBCC858")]
		public bool OpSetCustomPropertiesOfActor(int actorNr, Hashtable propertiesToSet, [Optional] Hashtable expectedProperties, [Optional] WebFlags webFlags)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F29")]
		[Address(RVA = "0xBCCB54", Offset = "0xBCCB54", VA = "0xBCCB54")]
		[Obsolete("Use the overload with WebFlags.")]
		public bool OpSetCustomPropertiesOfActor(int actorNr, Hashtable propertiesToSet, Hashtable expectedProperties, bool webForward)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F2A")]
		[Address(RVA = "0xBCC9E0", Offset = "0xBCC9E0", VA = "0xBCC9E0")]
		protected internal bool OpSetPropertiesOfActor(int actorNr, Hashtable actorProperties, [Optional] Hashtable expectedProperties, [Optional] WebFlags webFlags)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F2B")]
		[Address(RVA = "0xBCCBFC", Offset = "0xBCCBFC", VA = "0xBCCBFC")]
		public bool OpSetCustomPropertiesOfRoom(Hashtable propertiesToSet, [Optional] Hashtable expectedProperties, [Optional] WebFlags webFlags)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F2C")]
		[Address(RVA = "0xBCCDDC", Offset = "0xBCCDDC", VA = "0xBCCDDC")]
		[Obsolete("Use the overload with WebFlags.")]
		public bool OpSetCustomPropertiesOfRoom(Hashtable propertiesToSet, Hashtable expectedProperties, bool webForward)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F2D")]
		[Address(RVA = "0xBCCC90", Offset = "0xBCCC90", VA = "0xBCCC90")]
		protected internal bool OpSetPropertiesOfRoom(Hashtable gameProperties, [Optional] Hashtable expectedProperties, [Optional] WebFlags webFlags)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F2E")]
		[Address(RVA = "0xBCCE74", Offset = "0xBCCE74", VA = "0xBCCE74", Slot = "9")]
		public virtual bool OpRaiseEvent(byte eventCode, object customEventContent, RaiseEventOptions raiseEventOptions, SendOptions sendOptions)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F2F")]
		[Address(RVA = "0xBCCE90", Offset = "0xBCCE90", VA = "0xBCCE90", Slot = "10")]
		[Obsolete("Use OpRaiseEvent(byte eventCode, object customEventContent, RaiseEventOptions raiseEventOptions) instead. Parameter 'sendReliable' moved to: RaiseEventOptions.SendOptions.")]
		public virtual bool OpRaiseEvent(byte eventCode, object customEventContent, bool sendReliable, RaiseEventOptions raiseEventOptions)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F30")]
		[Address(RVA = "0xBCCF18", Offset = "0xBCCF18", VA = "0xBCCF18", Slot = "11")]
		public virtual bool OpChangeGroups(byte[] groupsToRemove, byte[] groupsToAdd)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F31")]
		[Address(RVA = "0xBCCF34", Offset = "0xBCCF34", VA = "0xBCCF34")]
		private void ReadoutProperties(Hashtable gameProperties, Hashtable actorProperties, int targetActorNr)
		{
		}

		[Token(Token = "0x6000F32")]
		[Address(RVA = "0xBCD330", Offset = "0xBCD330", VA = "0xBCD330")]
		private Hashtable ReadoutPropertiesForActorNr(Hashtable actorProperties, int actorNr)
		{
			return null;
		}

		[Token(Token = "0x6000F33")]
		[Address(RVA = "0xBCD430", Offset = "0xBCD430", VA = "0xBCD430")]
		protected internal void ChangeLocalID(int newID)
		{
		}

		[Token(Token = "0x6000F34")]
		[Address(RVA = "0xBCD590", Offset = "0xBCD590", VA = "0xBCD590")]
		private void CleanCachedValues()
		{
		}

		[Token(Token = "0x6000F35")]
		[Address(RVA = "0xBCD630", Offset = "0xBCD630", VA = "0xBCD630")]
		private void GameEnteredOnGameServer(OperationResponse operationResponse)
		{
		}

		[Token(Token = "0x6000F36")]
		[Address(RVA = "0xBCD880", Offset = "0xBCD880", VA = "0xBCD880")]
		private void UpdatedActorList(int[] actorsInGame)
		{
		}

		[Token(Token = "0x6000F37")]
		[Address(RVA = "0xBCD974", Offset = "0xBCD974", VA = "0xBCD974", Slot = "12")]
		protected internal virtual Player CreatePlayer(string actorName, int actorNumber, bool isLocal, Hashtable actorProperties)
		{
			return null;
		}

		[Token(Token = "0x6000F38")]
		[Address(RVA = "0xBCDA00", Offset = "0xBCDA00", VA = "0xBCDA00", Slot = "13")]
		protected internal virtual Room CreateRoom(string roomName, RoomOptions opt)
		{
			return null;
		}

		[Token(Token = "0x6000F39")]
		[Address(RVA = "0xBCDA74", Offset = "0xBCDA74", VA = "0xBCDA74", Slot = "14")]
		public virtual void DebugReturn(DebugLevel level, string message)
		{
		}

		[Token(Token = "0x6000F3A")]
		[Address(RVA = "0xBCDB84", Offset = "0xBCDB84", VA = "0xBCDB84", Slot = "15")]
		public virtual void OnOperationResponse(OperationResponse operationResponse)
		{
		}

		[Token(Token = "0x6000F3B")]
		[Address(RVA = "0xBCEB4C", Offset = "0xBCEB4C", VA = "0xBCEB4C", Slot = "16")]
		public virtual void OnStatusChanged(StatusCode statusCode)
		{
		}

		[Token(Token = "0x6000F3C")]
		[Address(RVA = "0xBCF1E8", Offset = "0xBCF1E8", VA = "0xBCF1E8", Slot = "17")]
		public virtual void OnEvent(EventData photonEvent)
		{
		}

		[Token(Token = "0x6000F3D")]
		[Address(RVA = "0xBCFCA0", Offset = "0xBCFCA0", VA = "0xBCFCA0", Slot = "18")]
		public virtual void OnMessage(object message)
		{
		}

		[Token(Token = "0x6000F3E")]
		[Address(RVA = "0xBCE94C", Offset = "0xBCE94C", VA = "0xBCE94C")]
		private void SetupEncryption(Dictionary<byte, object> encryptionData)
		{
		}

		[Token(Token = "0x6000F3F")]
		[Address(RVA = "0xBCFD14", Offset = "0xBCFD14", VA = "0xBCFD14")]
		public bool OpWebRpc(string uriPath, object parameters, bool sendAuthCookie = false)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000210")]
	public class LoadBalancingPeer : PhotonPeer
	{
		[Token(Token = "0x2000211")]
		private enum RoomOptionBit
		{
			[Token(Token = "0x4000D2A")]
			CheckUserOnJoin = 1,
			[Token(Token = "0x4000D2B")]
			DeleteCacheOnLeave = 2,
			[Token(Token = "0x4000D2C")]
			SuppressRoomEvents = 4,
			[Token(Token = "0x4000D2D")]
			PublishUserId = 8,
			[Token(Token = "0x4000D2E")]
			DeleteNullProps = 0x10,
			[Token(Token = "0x4000D2F")]
			BroadcastPropsChangeToAll = 0x20
		}

		[Token(Token = "0x4000D27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected internal static Type PingImplementation;

		[Token(Token = "0x4000D28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private readonly Dictionary<byte, object> opParameters;

		[Token(Token = "0x6000F41")]
		[Address(RVA = "0xBCFF58", Offset = "0xBCFF58", VA = "0xBCFF58")]
		public LoadBalancingPeer(ConnectionProtocol protocolType)
		{
		}

		[Token(Token = "0x6000F42")]
		[Address(RVA = "0xBD0244", Offset = "0xBD0244", VA = "0xBD0244")]
		public LoadBalancingPeer(IPhotonPeerListener listener, ConnectionProtocol protocolType)
		{
		}

		[Token(Token = "0x6000F43")]
		[Address(RVA = "0xBD0010", Offset = "0xBD0010", VA = "0xBD0010")]
		[Conditional("UNITY")]
		private void ConfigUnitySockets()
		{
		}

		[Token(Token = "0x6000F44")]
		[Address(RVA = "0xBD02B4", Offset = "0xBD02B4", VA = "0xBD02B4", Slot = "16")]
		public virtual bool OpGetRegions(string appId)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F45")]
		[Address(RVA = "0xBD039C", Offset = "0xBD039C", VA = "0xBD039C", Slot = "17")]
		public virtual bool OpJoinLobby([Optional] TypedLobby lobby)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F46")]
		[Address(RVA = "0xBD05A4", Offset = "0xBD05A4", VA = "0xBD05A4", Slot = "18")]
		public virtual bool OpLeaveLobby()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F47")]
		[Address(RVA = "0xBD06B8", Offset = "0xBD06B8", VA = "0xBD06B8")]
		private void RoomOptionsToOpParameters(Dictionary<byte, object> op, RoomOptions roomOptions)
		{
		}

		[Token(Token = "0x6000F48")]
		[Address(RVA = "0xBD0B3C", Offset = "0xBD0B3C", VA = "0xBD0B3C", Slot = "19")]
		public virtual bool OpCreateRoom(EnterRoomParams opParams)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F49")]
		[Address(RVA = "0xBD0E00", Offset = "0xBD0E00", VA = "0xBD0E00", Slot = "20")]
		public virtual bool OpJoinRoom(EnterRoomParams opParams)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F4A")]
		[Address(RVA = "0xBD1114", Offset = "0xBD1114", VA = "0xBD1114", Slot = "21")]
		public virtual bool OpJoinRandomRoom(OpJoinRandomRoomParams opJoinRandomRoomParams)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F4B")]
		[Address(RVA = "0xBD143C", Offset = "0xBD143C", VA = "0xBD143C", Slot = "22")]
		public virtual bool OpLeaveRoom(bool becomeInactive, bool sendAuthCookie = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F4C")]
		[Address(RVA = "0xBD1594", Offset = "0xBD1594", VA = "0xBD1594", Slot = "23")]
		public virtual bool OpGetGameList(TypedLobby lobby, string queryData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F4D")]
		[Address(RVA = "0xBD187C", Offset = "0xBD187C", VA = "0xBD187C", Slot = "24")]
		public virtual bool OpFindFriends(string[] friendsToFind)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F4E")]
		[Address(RVA = "0xBD1968", Offset = "0xBD1968", VA = "0xBD1968")]
		public bool OpSetCustomPropertiesOfActor(int actorNr, Hashtable actorProperties)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F4F")]
		[Address(RVA = "0xBD19A4", Offset = "0xBD19A4", VA = "0xBD19A4")]
		protected internal bool OpSetPropertiesOfActor(int actorNr, Hashtable actorProperties, [Optional] Hashtable expectedProperties, [Optional] WebFlags webflags)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F50")]
		[Address(RVA = "0xBD1CFC", Offset = "0xBD1CFC", VA = "0xBD1CFC")]
		protected void OpSetPropertyOfRoom(byte propCode, object value)
		{
		}

		[Token(Token = "0x6000F51")]
		[Address(RVA = "0xBD2024", Offset = "0xBD2024", VA = "0xBD2024")]
		public bool OpSetCustomPropertiesOfRoom(Hashtable gameProperties)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F52")]
		[Address(RVA = "0xBD1DBC", Offset = "0xBD1DBC", VA = "0xBD1DBC")]
		protected internal bool OpSetPropertiesOfRoom(Hashtable gameProperties, [Optional] Hashtable expectedProperties, [Optional] WebFlags webflags)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F53")]
		[Address(RVA = "0xBD2050", Offset = "0xBD2050", VA = "0xBD2050", Slot = "25")]
		public virtual bool OpAuthenticate(string appId, string appVersion, AuthenticationValues authValues, string regionCode, bool getLobbyStatistics)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F54")]
		[Address(RVA = "0xBD2380", Offset = "0xBD2380", VA = "0xBD2380", Slot = "26")]
		public virtual bool OpAuthenticateOnce(string appId, string appVersion, AuthenticationValues authValues, string regionCode, EncryptionMode encryptionMode, ConnectionProtocol expectedProtocol)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F55")]
		[Address(RVA = "0xBD26C4", Offset = "0xBD26C4", VA = "0xBD26C4", Slot = "27")]
		public virtual bool OpChangeGroups(byte[] groupsToRemove, byte[] groupsToAdd)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F56")]
		[Address(RVA = "0xBD286C", Offset = "0xBD286C", VA = "0xBD286C", Slot = "28")]
		public virtual bool OpRaiseEvent(byte eventCode, object customEventContent, RaiseEventOptions raiseEventOptions, SendOptions sendOptions)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F57")]
		[Address(RVA = "0xBD2A9C", Offset = "0xBD2A9C", VA = "0xBD2A9C", Slot = "29")]
		public virtual bool OpSettings(bool receiveLobbyStats)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000212")]
	public class OpJoinRandomRoomParams
	{
		[Token(Token = "0x4000D30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Hashtable ExpectedCustomRoomProperties;

		[Token(Token = "0x4000D31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public byte ExpectedMaxPlayers;

		[Token(Token = "0x4000D32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public MatchmakingMode MatchingType;

		[Token(Token = "0x4000D33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TypedLobby TypedLobby;

		[Token(Token = "0x4000D34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string SqlLobbyFilter;

		[Token(Token = "0x4000D35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string[] ExpectedUsers;

		[Token(Token = "0x6000F58")]
		[Address(RVA = "0xBD2C70", Offset = "0xBD2C70", VA = "0xBD2C70")]
		public OpJoinRandomRoomParams()
		{
		}
	}
	[Token(Token = "0x2000213")]
	public class EnterRoomParams
	{
		[Token(Token = "0x4000D36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string RoomName;

		[Token(Token = "0x4000D37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RoomOptions RoomOptions;

		[Token(Token = "0x4000D38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TypedLobby Lobby;

		[Token(Token = "0x4000D39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Hashtable PlayerProperties;

		[Token(Token = "0x4000D3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool OnGameServer;

		[Token(Token = "0x4000D3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool CreateIfNotExists;

		[Token(Token = "0x4000D3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		public bool RejoinOnly;

		[Token(Token = "0x4000D3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string[] ExpectedUsers;

		[Token(Token = "0x6000F59")]
		[Address(RVA = "0xBD2C78", Offset = "0xBD2C78", VA = "0xBD2C78")]
		public EnterRoomParams()
		{
		}
	}
	[Token(Token = "0x2000214")]
	public class ErrorCode
	{
		[Token(Token = "0x4000D3E")]
		public const int Ok = 0;

		[Token(Token = "0x4000D3F")]
		public const int OperationNotAllowedInCurrentState = -3;

		[Token(Token = "0x4000D40")]
		[Obsolete("Use InvalidOperation.")]
		public const int InvalidOperationCode = -2;

		[Token(Token = "0x4000D41")]
		public const int InvalidOperation = -2;

		[Token(Token = "0x4000D42")]
		public const int InternalServerError = -1;

		[Token(Token = "0x4000D43")]
		public const int InvalidAuthentication = 32767;

		[Token(Token = "0x4000D44")]
		public const int GameIdAlreadyExists = 32766;

		[Token(Token = "0x4000D45")]
		public const int GameFull = 32765;

		[Token(Token = "0x4000D46")]
		public const int GameClosed = 32764;

		[Token(Token = "0x4000D47")]
		[Obsolete("No longer used, cause random matchmaking is no longer a process.")]
		public const int AlreadyMatched = 32763;

		[Token(Token = "0x4000D48")]
		public const int ServerFull = 32762;

		[Token(Token = "0x4000D49")]
		public const int UserBlocked = 32761;

		[Token(Token = "0x4000D4A")]
		public const int NoRandomMatchFound = 32760;

		[Token(Token = "0x4000D4B")]
		public const int GameDoesNotExist = 32758;

		[Token(Token = "0x4000D4C")]
		public const int MaxCcuReached = 32757;

		[Token(Token = "0x4000D4D")]
		public const int InvalidRegion = 32756;

		[Token(Token = "0x4000D4E")]
		public const int CustomAuthenticationFailed = 32755;

		[Token(Token = "0x4000D4F")]
		public const int AuthenticationTicketExpired = 32753;

		[Token(Token = "0x4000D50")]
		public const int PluginReportedError = 32752;

		[Token(Token = "0x4000D51")]
		public const int PluginMismatch = 32751;

		[Token(Token = "0x4000D52")]
		public const int JoinFailedPeerAlreadyJoined = 32750;

		[Token(Token = "0x4000D53")]
		public const int JoinFailedFoundInactiveJoiner = 32749;

		[Token(Token = "0x4000D54")]
		public const int JoinFailedWithRejoinerNotFound = 32748;

		[Token(Token = "0x4000D55")]
		public const int JoinFailedFoundExcludedUserId = 32747;

		[Token(Token = "0x4000D56")]
		public const int JoinFailedFoundActiveJoiner = 32746;

		[Token(Token = "0x4000D57")]
		public const int HttpLimitReached = 32745;

		[Token(Token = "0x4000D58")]
		public const int ExternalHttpCallFailed = 32744;

		[Token(Token = "0x4000D59")]
		public const int SlotError = 32742;

		[Token(Token = "0x4000D5A")]
		public const int InvalidEncryptionParameters = 32741;

		[Token(Token = "0x6000F5A")]
		[Address(RVA = "0xBD2C88", Offset = "0xBD2C88", VA = "0xBD2C88")]
		public ErrorCode()
		{
		}
	}
	[Token(Token = "0x2000215")]
	public class ActorProperties
	{
		[Token(Token = "0x4000D5B")]
		public const byte PlayerName = byte.MaxValue;

		[Token(Token = "0x4000D5C")]
		public const byte IsInactive = 254;

		[Token(Token = "0x4000D5D")]
		public const byte UserId = 253;

		[Token(Token = "0x6000F5B")]
		[Address(RVA = "0xBD2C90", Offset = "0xBD2C90", VA = "0xBD2C90")]
		public ActorProperties()
		{
		}
	}
	[Token(Token = "0x2000216")]
	public class GamePropertyKey
	{
		[Token(Token = "0x4000D5E")]
		public const byte MaxPlayers = byte.MaxValue;

		[Token(Token = "0x4000D5F")]
		public const byte IsVisible = 254;

		[Token(Token = "0x4000D60")]
		public const byte IsOpen = 253;

		[Token(Token = "0x4000D61")]
		public const byte PlayerCount = 252;

		[Token(Token = "0x4000D62")]
		public const byte Removed = 251;

		[Token(Token = "0x4000D63")]
		public const byte PropsListedInLobby = 250;

		[Token(Token = "0x4000D64")]
		public const byte CleanupCacheOnLeave = 249;

		[Token(Token = "0x4000D65")]
		public const byte MasterClientId = 248;

		[Token(Token = "0x4000D66")]
		public const byte ExpectedUsers = 247;

		[Token(Token = "0x6000F5C")]
		[Address(RVA = "0xBD2C98", Offset = "0xBD2C98", VA = "0xBD2C98")]
		public GamePropertyKey()
		{
		}
	}
	[Token(Token = "0x2000217")]
	public class EventCode
	{
		[Token(Token = "0x4000D67")]
		public const byte GameList = 230;

		[Token(Token = "0x4000D68")]
		public const byte GameListUpdate = 229;

		[Token(Token = "0x4000D69")]
		public const byte QueueState = 228;

		[Token(Token = "0x4000D6A")]
		public const byte Match = 227;

		[Token(Token = "0x4000D6B")]
		public const byte AppStats = 226;

		[Token(Token = "0x4000D6C")]
		public const byte LobbyStats = 224;

		[Token(Token = "0x4000D6D")]
		[Obsolete("TCP routing was removed after becoming obsolete.")]
		public const byte AzureNodeInfo = 210;

		[Token(Token = "0x4000D6E")]
		public const byte Join = byte.MaxValue;

		[Token(Token = "0x4000D6F")]
		public const byte Leave = 254;

		[Token(Token = "0x4000D70")]
		public const byte PropertiesChanged = 253;

		[Token(Token = "0x4000D71")]
		[Obsolete("Use PropertiesChanged now.")]
		public const byte SetProperties = 253;

		[Token(Token = "0x4000D72")]
		public const byte ErrorInfo = 251;

		[Token(Token = "0x4000D73")]
		public const byte CacheSliceChanged = 250;

		[Token(Token = "0x4000D74")]
		public const byte AuthEvent = 223;

		[Token(Token = "0x6000F5D")]
		[Address(RVA = "0xBD2CA0", Offset = "0xBD2CA0", VA = "0xBD2CA0")]
		public EventCode()
		{
		}
	}
	[Token(Token = "0x2000218")]
	public class ParameterCode
	{
		[Token(Token = "0x4000D75")]
		public const byte SuppressRoomEvents = 237;

		[Token(Token = "0x4000D76")]
		public const byte EmptyRoomTTL = 236;

		[Token(Token = "0x4000D77")]
		public const byte PlayerTTL = 235;

		[Token(Token = "0x4000D78")]
		public const byte EventForward = 234;

		[Token(Token = "0x4000D79")]
		[Obsolete("Use: IsInactive")]
		public const byte IsComingBack = 233;

		[Token(Token = "0x4000D7A")]
		public const byte IsInactive = 233;

		[Token(Token = "0x4000D7B")]
		public const byte CheckUserOnJoin = 232;

		[Token(Token = "0x4000D7C")]
		public const byte ExpectedValues = 231;

		[Token(Token = "0x4000D7D")]
		public const byte Address = 230;

		[Token(Token = "0x4000D7E")]
		public const byte PeerCount = 229;

		[Token(Token = "0x4000D7F")]
		public const byte GameCount = 228;

		[Token(Token = "0x4000D80")]
		public const byte MasterPeerCount = 227;

		[Token(Token = "0x4000D81")]
		public const byte UserId = 225;

		[Token(Token = "0x4000D82")]
		public const byte ApplicationId = 224;

		[Token(Token = "0x4000D83")]
		public const byte Position = 223;

		[Token(Token = "0x4000D84")]
		public const byte MatchMakingType = 223;

		[Token(Token = "0x4000D85")]
		public const byte GameList = 222;

		[Token(Token = "0x4000D86")]
		public const byte Secret = 221;

		[Token(Token = "0x4000D87")]
		public const byte AppVersion = 220;

		[Token(Token = "0x4000D88")]
		[Obsolete("TCP routing was removed after becoming obsolete.")]
		public const byte AzureNodeInfo = 210;

		[Token(Token = "0x4000D89")]
		[Obsolete("TCP routing was removed after becoming obsolete.")]
		public const byte AzureLocalNodeId = 209;

		[Token(Token = "0x4000D8A")]
		[Obsolete("TCP routing was removed after becoming obsolete.")]
		public const byte AzureMasterNodeId = 208;

		[Token(Token = "0x4000D8B")]
		public const byte RoomName = byte.MaxValue;

		[Token(Token = "0x4000D8C")]
		public const byte Broadcast = 250;

		[Token(Token = "0x4000D8D")]
		public const byte ActorList = 252;

		[Token(Token = "0x4000D8E")]
		public const byte ActorNr = 254;

		[Token(Token = "0x4000D8F")]
		public const byte PlayerProperties = 249;

		[Token(Token = "0x4000D90")]
		public const byte CustomEventContent = 245;

		[Token(Token = "0x4000D91")]
		public const byte Data = 245;

		[Token(Token = "0x4000D92")]
		public const byte Code = 244;

		[Token(Token = "0x4000D93")]
		public const byte GameProperties = 248;

		[Token(Token = "0x4000D94")]
		public const byte Properties = 251;

		[Token(Token = "0x4000D95")]
		public const byte TargetActorNr = 253;

		[Token(Token = "0x4000D96")]
		public const byte ReceiverGroup = 246;

		[Token(Token = "0x4000D97")]
		public const byte Cache = 247;

		[Token(Token = "0x4000D98")]
		public const byte CleanupCacheOnLeave = 241;

		[Token(Token = "0x4000D99")]
		public const byte Group = 240;

		[Token(Token = "0x4000D9A")]
		public const byte Remove = 239;

		[Token(Token = "0x4000D9B")]
		public const byte PublishUserId = 239;

		[Token(Token = "0x4000D9C")]
		public const byte Add = 238;

		[Token(Token = "0x4000D9D")]
		public const byte Info = 218;

		[Token(Token = "0x4000D9E")]
		public const byte ClientAuthenticationType = 217;

		[Token(Token = "0x4000D9F")]
		public const byte ClientAuthenticationParams = 216;

		[Token(Token = "0x4000DA0")]
		public const byte JoinMode = 215;

		[Token(Token = "0x4000DA1")]
		public const byte ClientAuthenticationData = 214;

		[Token(Token = "0x4000DA2")]
		public const byte MasterClientId = 203;

		[Token(Token = "0x4000DA3")]
		public const byte FindFriendsRequestList = 1;

		[Token(Token = "0x4000DA4")]
		public const byte FindFriendsResponseOnlineList = 1;

		[Token(Token = "0x4000DA5")]
		public const byte FindFriendsResponseRoomIdList = 2;

		[Token(Token = "0x4000DA6")]
		public const byte LobbyName = 213;

		[Token(Token = "0x4000DA7")]
		public const byte LobbyType = 212;

		[Token(Token = "0x4000DA8")]
		public const byte LobbyStats = 211;

		[Token(Token = "0x4000DA9")]
		public const byte Region = 210;

		[Token(Token = "0x4000DAA")]
		public const byte UriPath = 209;

		[Token(Token = "0x4000DAB")]
		public const byte WebRpcParameters = 208;

		[Token(Token = "0x4000DAC")]
		public const byte WebRpcReturnCode = 207;

		[Token(Token = "0x4000DAD")]
		public const byte WebRpcReturnMessage = 206;

		[Token(Token = "0x4000DAE")]
		public const byte CacheSliceIndex = 205;

		[Token(Token = "0x4000DAF")]
		public const byte Plugins = 204;

		[Token(Token = "0x4000DB0")]
		public const byte NickName = 202;

		[Token(Token = "0x4000DB1")]
		public const byte PluginName = 201;

		[Token(Token = "0x4000DB2")]
		public const byte PluginVersion = 200;

		[Token(Token = "0x4000DB3")]
		public const byte ExpectedProtocol = 195;

		[Token(Token = "0x4000DB4")]
		public const byte CustomInitData = 194;

		[Token(Token = "0x4000DB5")]
		public const byte EncryptionMode = 193;

		[Token(Token = "0x4000DB6")]
		public const byte EncryptionData = 192;

		[Token(Token = "0x4000DB7")]
		public const byte RoomOptionFlags = 191;

		[Token(Token = "0x6000F5E")]
		[Address(RVA = "0xBD2CA8", Offset = "0xBD2CA8", VA = "0xBD2CA8")]
		public ParameterCode()
		{
		}
	}
	[Token(Token = "0x2000219")]
	public class OperationCode
	{
		[Token(Token = "0x4000DB8")]
		[Obsolete("Exchanging encrpytion keys is done internally in the lib now. Don't expect this operation-result.")]
		public const byte ExchangeKeysForEncryption = 250;

		[Token(Token = "0x4000DB9")]
		[Obsolete]
		public const byte Join = byte.MaxValue;

		[Token(Token = "0x4000DBA")]
		public const byte AuthenticateOnce = 231;

		[Token(Token = "0x4000DBB")]
		public const byte Authenticate = 230;

		[Token(Token = "0x4000DBC")]
		public const byte JoinLobby = 229;

		[Token(Token = "0x4000DBD")]
		public const byte LeaveLobby = 228;

		[Token(Token = "0x4000DBE")]
		public const byte CreateGame = 227;

		[Token(Token = "0x4000DBF")]
		public const byte JoinGame = 226;

		[Token(Token = "0x4000DC0")]
		public const byte JoinRandomGame = 225;

		[Token(Token = "0x4000DC1")]
		public const byte Leave = 254;

		[Token(Token = "0x4000DC2")]
		public const byte RaiseEvent = 253;

		[Token(Token = "0x4000DC3")]
		public const byte SetProperties = 252;

		[Token(Token = "0x4000DC4")]
		public const byte GetProperties = 251;

		[Token(Token = "0x4000DC5")]
		public const byte ChangeGroups = 248;

		[Token(Token = "0x4000DC6")]
		public const byte FindFriends = 222;

		[Token(Token = "0x4000DC7")]
		public const byte GetLobbyStats = 221;

		[Token(Token = "0x4000DC8")]
		public const byte GetRegions = 220;

		[Token(Token = "0x4000DC9")]
		public const byte WebRpc = 219;

		[Token(Token = "0x4000DCA")]
		public const byte ServerSettings = 218;

		[Token(Token = "0x4000DCB")]
		public const byte GetGameList = 217;

		[Token(Token = "0x6000F5F")]
		[Address(RVA = "0xBD2CB0", Offset = "0xBD2CB0", VA = "0xBD2CB0")]
		public OperationCode()
		{
		}
	}
	[Token(Token = "0x200021A")]
	public enum JoinMode : byte
	{
		[Token(Token = "0x4000DCD")]
		Default,
		[Token(Token = "0x4000DCE")]
		CreateIfNotExists,
		[Token(Token = "0x4000DCF")]
		JoinOrRejoin,
		[Token(Token = "0x4000DD0")]
		RejoinOnly
	}
	[Token(Token = "0x200021B")]
	public enum MatchmakingMode : byte
	{
		[Token(Token = "0x4000DD2")]
		FillRoom,
		[Token(Token = "0x4000DD3")]
		SerialMatching,
		[Token(Token = "0x4000DD4")]
		RandomMatching
	}
	[Token(Token = "0x200021C")]
	public enum ReceiverGroup : byte
	{
		[Token(Token = "0x4000DD6")]
		Others,
		[Token(Token = "0x4000DD7")]
		All,
		[Token(Token = "0x4000DD8")]
		MasterClient
	}
	[Token(Token = "0x200021D")]
	public enum EventCaching : byte
	{
		[Token(Token = "0x4000DDA")]
		DoNotCache = 0,
		[Token(Token = "0x4000DDB")]
		[Obsolete]
		MergeCache = 1,
		[Token(Token = "0x4000DDC")]
		[Obsolete]
		ReplaceCache = 2,
		[Token(Token = "0x4000DDD")]
		[Obsolete]
		RemoveCache = 3,
		[Token(Token = "0x4000DDE")]
		AddToRoomCache = 4,
		[Token(Token = "0x4000DDF")]
		AddToRoomCacheGlobal = 5,
		[Token(Token = "0x4000DE0")]
		RemoveFromRoomCache = 6,
		[Token(Token = "0x4000DE1")]
		RemoveFromRoomCacheForActorsLeft = 7,
		[Token(Token = "0x4000DE2")]
		SliceIncreaseIndex = 10,
		[Token(Token = "0x4000DE3")]
		SliceSetIndex = 11,
		[Token(Token = "0x4000DE4")]
		SlicePurgeIndex = 12,
		[Token(Token = "0x4000DE5")]
		SlicePurgeUpToIndex = 13
	}
	[Token(Token = "0x200021E")]
	[Flags]
	public enum PropertyTypeFlag : byte
	{
		[Token(Token = "0x4000DE7")]
		None = 0,
		[Token(Token = "0x4000DE8")]
		Game = 1,
		[Token(Token = "0x4000DE9")]
		Actor = 2,
		[Token(Token = "0x4000DEA")]
		GameAndActor = 3
	}
	[Token(Token = "0x200021F")]
	public class RoomOptions
	{
		[Token(Token = "0x4000DEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool isVisible;

		[Token(Token = "0x4000DEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		private bool isOpen;

		[Token(Token = "0x4000DED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		public byte MaxPlayers;

		[Token(Token = "0x4000DEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int PlayerTtl;

		[Token(Token = "0x4000DEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int EmptyRoomTtl;

		[Token(Token = "0x4000DF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private bool cleanupCacheOnLeave;

		[Token(Token = "0x4000DF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Hashtable CustomRoomProperties;

		[Token(Token = "0x4000DF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string[] CustomRoomPropertiesForLobby;

		[Token(Token = "0x4000DF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string[] Plugins;

		[Token(Token = "0x1700023D")]
		public bool IsVisible
		{
			[Token(Token = "0x6000F60")]
			[Address(RVA = "0xBD2CB8", Offset = "0xBD2CB8", VA = "0xBD2CB8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000F61")]
			[Address(RVA = "0xBD2CC0", Offset = "0xBD2CC0", VA = "0xBD2CC0")]
			set
			{
			}
		}

		[Token(Token = "0x1700023E")]
		public bool IsOpen
		{
			[Token(Token = "0x6000F62")]
			[Address(RVA = "0xBD2CCC", Offset = "0xBD2CCC", VA = "0xBD2CCC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000F63")]
			[Address(RVA = "0xBD2CD4", Offset = "0xBD2CD4", VA = "0xBD2CD4")]
			set
			{
			}
		}

		[Token(Token = "0x1700023F")]
		public bool CleanupCacheOnLeave
		{
			[Token(Token = "0x6000F64")]
			[Address(RVA = "0xBD2CE0", Offset = "0xBD2CE0", VA = "0xBD2CE0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000F65")]
			[Address(RVA = "0xBD2CE8", Offset = "0xBD2CE8", VA = "0xBD2CE8")]
			set
			{
			}
		}

		[Token(Token = "0x17000240")]
		public bool SuppressRoomEvents
		{
			[Token(Token = "0x6000F66")]
			[Address(RVA = "0xBD2CF4", Offset = "0xBD2CF4", VA = "0xBD2CF4")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000F67")]
			[Address(RVA = "0xBD2CFC", Offset = "0xBD2CFC", VA = "0xBD2CFC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000241")]
		public bool PublishUserId
		{
			[Token(Token = "0x6000F68")]
			[Address(RVA = "0xBD2D08", Offset = "0xBD2D08", VA = "0xBD2D08")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000F69")]
			[Address(RVA = "0xBD2D10", Offset = "0xBD2D10", VA = "0xBD2D10")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000242")]
		public bool DeleteNullProperties
		{
			[Token(Token = "0x6000F6A")]
			[Address(RVA = "0xBD2D1C", Offset = "0xBD2D1C", VA = "0xBD2D1C")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000F6B")]
			[Address(RVA = "0xBD2D24", Offset = "0xBD2D24", VA = "0xBD2D24")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6000F6C")]
		[Address(RVA = "0xBD0AD4", Offset = "0xBD0AD4", VA = "0xBD0AD4")]
		public RoomOptions()
		{
		}
	}
	[Token(Token = "0x2000220")]
	public class RaiseEventOptions
	{
		[Token(Token = "0x4000DF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly RaiseEventOptions Default;

		[Token(Token = "0x4000DF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public EventCaching CachingOption;

		[Token(Token = "0x4000DF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public byte InterestGroup;

		[Token(Token = "0x4000DFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int[] TargetActors;

		[Token(Token = "0x4000DFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ReceiverGroup Receivers;

		[Token(Token = "0x4000DFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		[Obsolete("Not used where SendOptions are a parameter too. Use SendOptions.Channel instead.")]
		public byte SequenceChannel;

		[Token(Token = "0x4000DFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public WebFlags Flags;

		[Token(Token = "0x6000F6D")]
		[Address(RVA = "0xBD2D30", Offset = "0xBD2D30", VA = "0xBD2D30")]
		public RaiseEventOptions()
		{
		}
	}
	[Token(Token = "0x2000221")]
	public enum LobbyType : byte
	{
		[Token(Token = "0x4000DFF")]
		Default = 0,
		[Token(Token = "0x4000E00")]
		SqlLobby = 2,
		[Token(Token = "0x4000E01")]
		AsyncRandomLobby = 3
	}
	[Token(Token = "0x2000222")]
	public class TypedLobby
	{
		[Token(Token = "0x4000E02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string Name;

		[Token(Token = "0x4000E03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LobbyType Type;

		[Token(Token = "0x4000E04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly TypedLobby Default;

		[Token(Token = "0x17000243")]
		public bool IsDefault
		{
			[Token(Token = "0x6000F6F")]
			[Address(RVA = "0xBD0588", Offset = "0xBD0588", VA = "0xBD0588")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000F70")]
		[Address(RVA = "0xBD2DF8", Offset = "0xBD2DF8", VA = "0xBD2DF8")]
		public TypedLobby()
		{
		}

		[Token(Token = "0x6000F71")]
		[Address(RVA = "0xBD2E58", Offset = "0xBD2E58", VA = "0xBD2E58")]
		public TypedLobby(string name, LobbyType type)
		{
		}

		[Token(Token = "0x6000F72")]
		[Address(RVA = "0xBD2E88", Offset = "0xBD2E88", VA = "0xBD2E88", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000223")]
	public class TypedLobbyInfo : TypedLobby
	{
		[Token(Token = "0x4000E05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int PlayerCount;

		[Token(Token = "0x4000E06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int RoomCount;

		[Token(Token = "0x6000F74")]
		[Address(RVA = "0xBD2F74", Offset = "0xBD2F74", VA = "0xBD2F74", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000F75")]
		[Address(RVA = "0xBD3120", Offset = "0xBD3120", VA = "0xBD3120")]
		public TypedLobbyInfo()
		{
		}
	}
	[Token(Token = "0x2000224")]
	public enum AuthModeOption
	{
		[Token(Token = "0x4000E08")]
		Auth,
		[Token(Token = "0x4000E09")]
		AuthOnce,
		[Token(Token = "0x4000E0A")]
		AuthOnceWss
	}
	[Token(Token = "0x2000225")]
	public enum CustomAuthenticationType : byte
	{
		[Token(Token = "0x4000E0C")]
		Custom = 0,
		[Token(Token = "0x4000E0D")]
		Steam = 1,
		[Token(Token = "0x4000E0E")]
		Facebook = 2,
		[Token(Token = "0x4000E0F")]
		Oculus = 3,
		[Token(Token = "0x4000E10")]
		PlayStation = 4,
		[Token(Token = "0x4000E11")]
		Xbox = 5,
		[Token(Token = "0x4000E12")]
		None = byte.MaxValue
	}
	[Token(Token = "0x2000226")]
	public class AuthenticationValues
	{
		[Token(Token = "0x4000E13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private CustomAuthenticationType authType;

		[Token(Token = "0x17000244")]
		public CustomAuthenticationType AuthType
		{
			[Token(Token = "0x6000F76")]
			[Address(RVA = "0xBD3174", Offset = "0xBD3174", VA = "0xBD3174")]
			get
			{
				return default(CustomAuthenticationType);
			}
			[Token(Token = "0x6000F77")]
			[Address(RVA = "0xBD317C", Offset = "0xBD317C", VA = "0xBD317C")]
			set
			{
			}
		}

		[Token(Token = "0x17000245")]
		public string AuthGetParameters
		{
			[Token(Token = "0x6000F78")]
			[Address(RVA = "0xBD3184", Offset = "0xBD3184", VA = "0xBD3184")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F79")]
			[Address(RVA = "0xBD318C", Offset = "0xBD318C", VA = "0xBD318C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000246")]
		public object AuthPostData
		{
			[Token(Token = "0x6000F7A")]
			[Address(RVA = "0xBD3194", Offset = "0xBD3194", VA = "0xBD3194")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F7B")]
			[Address(RVA = "0xBD319C", Offset = "0xBD319C", VA = "0xBD319C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000247")]
		public string Token
		{
			[Token(Token = "0x6000F7C")]
			[Address(RVA = "0xBD31A4", Offset = "0xBD31A4", VA = "0xBD31A4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F7D")]
			[Address(RVA = "0xBD31AC", Offset = "0xBD31AC", VA = "0xBD31AC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000248")]
		public string UserId
		{
			[Token(Token = "0x6000F7E")]
			[Address(RVA = "0xBD31B4", Offset = "0xBD31B4", VA = "0xBD31B4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F7F")]
			[Address(RVA = "0xBD31BC", Offset = "0xBD31BC", VA = "0xBD31BC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6000F80")]
		[Address(RVA = "0xBD31C4", Offset = "0xBD31C4", VA = "0xBD31C4")]
		public AuthenticationValues()
		{
		}

		[Token(Token = "0x6000F81")]
		[Address(RVA = "0xBD31D4", Offset = "0xBD31D4", VA = "0xBD31D4")]
		public AuthenticationValues(string userId)
		{
		}

		[Token(Token = "0x6000F82")]
		[Address(RVA = "0xBD3204", Offset = "0xBD3204", VA = "0xBD3204", Slot = "4")]
		public virtual void SetAuthPostData(string stringData)
		{
		}

		[Token(Token = "0x6000F83")]
		[Address(RVA = "0xBD3240", Offset = "0xBD3240", VA = "0xBD3240", Slot = "5")]
		public virtual void SetAuthPostData(byte[] byteData)
		{
		}

		[Token(Token = "0x6000F84")]
		[Address(RVA = "0xBD3248", Offset = "0xBD3248", VA = "0xBD3248", Slot = "6")]
		public virtual void AddAuthParameter(string key, string value)
		{
		}

		[Token(Token = "0x6000F85")]
		[Address(RVA = "0xBD3414", Offset = "0xBD3414", VA = "0xBD3414", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000227")]
	public abstract class PhotonPing : IDisposable
	{
		[Token(Token = "0x4000E18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string DebugString;

		[Token(Token = "0x4000E19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool Successful;

		[Token(Token = "0x4000E1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		protected internal bool GotResult;

		[Token(Token = "0x4000E1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		protected internal int PingLength;

		[Token(Token = "0x4000E1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected internal byte[] PingBytes;

		[Token(Token = "0x4000E1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected internal byte PingId;

		[Token(Token = "0x6000F86")]
		[Address(RVA = "0xBD34AC", Offset = "0xBD34AC", VA = "0xBD34AC", Slot = "5")]
		public virtual bool StartPing(string ip)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F87")]
		[Address(RVA = "0xBD34EC", Offset = "0xBD34EC", VA = "0xBD34EC", Slot = "6")]
		public virtual bool Done()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F88")]
		[Address(RVA = "0xBD352C", Offset = "0xBD352C", VA = "0xBD352C", Slot = "7")]
		public virtual void Dispose()
		{
		}

		[Token(Token = "0x6000F89")]
		[Address(RVA = "0xBD356C", Offset = "0xBD356C", VA = "0xBD356C")]
		protected internal void Init()
		{
		}

		[Token(Token = "0x6000F8A")]
		[Address(RVA = "0xBD35AC", Offset = "0xBD35AC", VA = "0xBD35AC")]
		protected PhotonPing()
		{
		}
	}
	[Token(Token = "0x2000228")]
	public class PingMono : PhotonPing
	{
		[Token(Token = "0x4000E1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Socket sock;

		[Token(Token = "0x6000F8B")]
		[Address(RVA = "0xBD3654", Offset = "0xBD3654", VA = "0xBD3654", Slot = "5")]
		public override bool StartPing(string ip)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F8C")]
		[Address(RVA = "0xBD38CC", Offset = "0xBD38CC", VA = "0xBD38CC", Slot = "6")]
		public override bool Done()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F8D")]
		[Address(RVA = "0xBD39F4", Offset = "0xBD39F4", VA = "0xBD39F4", Slot = "7")]
		public override void Dispose()
		{
		}

		[Token(Token = "0x6000F8E")]
		[Address(RVA = "0xBD3A94", Offset = "0xBD3A94", VA = "0xBD3A94")]
		public PingMono()
		{
		}
	}
	[Token(Token = "0x2000229")]
	public class Player
	{
		[Token(Token = "0x4000E20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int actorID;

		[Token(Token = "0x4000E21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public readonly bool IsLocal;

		[Token(Token = "0x4000E22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private string nickName;

		[Token(Token = "0x4000E26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public object TagObject;

		[Token(Token = "0x17000249")]
		protected internal Room RoomReference
		{
			[Token(Token = "0x6000F8F")]
			[Address(RVA = "0xBD3A98", Offset = "0xBD3A98", VA = "0xBD3A98")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F90")]
			[Address(RVA = "0xBD3AA0", Offset = "0xBD3AA0", VA = "0xBD3AA0")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700024A")]
		public int ID
		{
			[Token(Token = "0x6000F91")]
			[Address(RVA = "0xBD3AA8", Offset = "0xBD3AA8", VA = "0xBD3AA8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700024B")]
		public string NickName
		{
			[Token(Token = "0x6000F92")]
			[Address(RVA = "0xBD3AB0", Offset = "0xBD3AB0", VA = "0xBD3AB0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F93")]
			[Address(RVA = "0xBD3AB8", Offset = "0xBD3AB8", VA = "0xBD3AB8")]
			set
			{
			}
		}

		[Token(Token = "0x1700024C")]
		public string UserId
		{
			[Token(Token = "0x6000F94")]
			[Address(RVA = "0xBD3C08", Offset = "0xBD3C08", VA = "0xBD3C08")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F95")]
			[Address(RVA = "0xBD3C10", Offset = "0xBD3C10", VA = "0xBD3C10")]
			[CompilerGenerated]
			internal set
			{
			}
		}

		[Token(Token = "0x1700024D")]
		public bool IsMasterClient
		{
			[Token(Token = "0x6000F96")]
			[Address(RVA = "0xBD3C18", Offset = "0xBD3C18", VA = "0xBD3C18")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700024E")]
		public bool IsInactive
		{
			[Token(Token = "0x6000F97")]
			[Address(RVA = "0xBD3C3C", Offset = "0xBD3C3C", VA = "0xBD3C3C")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000F98")]
			[Address(RVA = "0xBD3C44", Offset = "0xBD3C44", VA = "0xBD3C44")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700024F")]
		public Hashtable CustomProperties
		{
			[Token(Token = "0x6000F99")]
			[Address(RVA = "0xBD3C50", Offset = "0xBD3C50", VA = "0xBD3C50")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F9A")]
			[Address(RVA = "0xBD3C58", Offset = "0xBD3C58", VA = "0xBD3C58")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000250")]
		public Hashtable AllProperties
		{
			[Token(Token = "0x6000F9B")]
			[Address(RVA = "0xBD3C60", Offset = "0xBD3C60", VA = "0xBD3C60")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F9C")]
		[Address(RVA = "0xBD3D14", Offset = "0xBD3D14", VA = "0xBD3D14")]
		protected internal Player(string nickName, int actorID, bool isLocal)
		{
		}

		[Token(Token = "0x6000F9D")]
		[Address(RVA = "0xBD3D20", Offset = "0xBD3D20", VA = "0xBD3D20")]
		protected internal Player(string nickName, int actorID, bool isLocal, Hashtable playerProperties)
		{
		}

		[Token(Token = "0x6000F9E")]
		[Address(RVA = "0xBD3DD8", Offset = "0xBD3DD8", VA = "0xBD3DD8")]
		public Player Get(int id)
		{
			return null;
		}

		[Token(Token = "0x6000F9F")]
		[Address(RVA = "0xBD3DF0", Offset = "0xBD3DF0", VA = "0xBD3DF0")]
		public Player GetNext()
		{
			return null;
		}

		[Token(Token = "0x6000FA0")]
		[Address(RVA = "0xBD3FF4", Offset = "0xBD3FF4", VA = "0xBD3FF4")]
		public Player GetNextFor(Player currentPlayer)
		{
			return null;
		}

		[Token(Token = "0x6000FA1")]
		[Address(RVA = "0xBD3DF8", Offset = "0xBD3DF8", VA = "0xBD3DF8")]
		public Player GetNextFor(int currentPlayerId)
		{
			return null;
		}

		[Token(Token = "0x6000FA2")]
		[Address(RVA = "0xBD4008", Offset = "0xBD4008", VA = "0xBD4008", Slot = "4")]
		public virtual void InternalCacheProperties(Hashtable properties)
		{
		}

		[Token(Token = "0x6000FA3")]
		[Address(RVA = "0xBD4270", Offset = "0xBD4270", VA = "0xBD4270", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000FA4")]
		[Address(RVA = "0xBD42F8", Offset = "0xBD42F8", VA = "0xBD42F8")]
		public string ToStringFull()
		{
			return null;
		}

		[Token(Token = "0x6000FA5")]
		[Address(RVA = "0xBD44A4", Offset = "0xBD44A4", VA = "0xBD44A4", Slot = "0")]
		public override bool Equals(object p)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FA6")]
		[Address(RVA = "0xBD4558", Offset = "0xBD4558", VA = "0xBD4558", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000FA7")]
		[Address(RVA = "0xBD4560", Offset = "0xBD4560", VA = "0xBD4560")]
		protected internal void ChangeLocalID(int newID)
		{
		}

		[Token(Token = "0x6000FA8")]
		[Address(RVA = "0xBD4570", Offset = "0xBD4570", VA = "0xBD4570")]
		public void SetCustomProperties(Hashtable propertiesToSet, [Optional] Hashtable expectedValues, [Optional] WebFlags webFlags)
		{
		}

		[Token(Token = "0x6000FA9")]
		[Address(RVA = "0xBD3B2C", Offset = "0xBD3B2C", VA = "0xBD3B2C")]
		private void SetPlayerNameProperty()
		{
		}
	}
	[Token(Token = "0x200022A")]
	public class Room : RoomInfo
	{
		[Token(Token = "0x4000E27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected internal int PlayerTTL;

		[Token(Token = "0x4000E28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		protected internal int RoomTTL;

		[Token(Token = "0x4000E2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Dictionary<int, Player> players;

		[Token(Token = "0x17000251")]
		protected internal LoadBalancingClient LoadBalancingClient
		{
			[Token(Token = "0x6000FAA")]
			[Address(RVA = "0xBD465C", Offset = "0xBD465C", VA = "0xBD465C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FAB")]
			[Address(RVA = "0xBD4664", Offset = "0xBD4664", VA = "0xBD4664")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000252")]
		public new string Name
		{
			[Token(Token = "0x6000FAC")]
			[Address(RVA = "0xBD466C", Offset = "0xBD466C", VA = "0xBD466C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FAD")]
			[Address(RVA = "0xBD4674", Offset = "0xBD4674", VA = "0xBD4674")]
			internal set
			{
			}
		}

		[Token(Token = "0x17000253")]
		public new bool IsOpen
		{
			[Token(Token = "0x6000FAE")]
			[Address(RVA = "0xBD467C", Offset = "0xBD467C", VA = "0xBD467C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000FAF")]
			[Address(RVA = "0xBD4684", Offset = "0xBD4684", VA = "0xBD4684")]
			set
			{
			}
		}

		[Token(Token = "0x17000254")]
		public new bool IsVisible
		{
			[Token(Token = "0x6000FB0")]
			[Address(RVA = "0xBD47E8", Offset = "0xBD47E8", VA = "0xBD47E8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000FB1")]
			[Address(RVA = "0xBD47F0", Offset = "0xBD47F0", VA = "0xBD47F0")]
			set
			{
			}
		}

		[Token(Token = "0x17000255")]
		public new byte MaxPlayers
		{
			[Token(Token = "0x6000FB2")]
			[Address(RVA = "0xBD4954", Offset = "0xBD4954", VA = "0xBD4954")]
			get
			{
				return default(byte);
			}
			[Token(Token = "0x6000FB3")]
			[Address(RVA = "0xBD495C", Offset = "0xBD495C", VA = "0xBD495C")]
			set
			{
			}
		}

		[Token(Token = "0x17000256")]
		public new byte PlayerCount
		{
			[Token(Token = "0x6000FB4")]
			[Address(RVA = "0xBD4AA4", Offset = "0xBD4AA4", VA = "0xBD4AA4")]
			get
			{
				return default(byte);
			}
		}

		[Token(Token = "0x17000257")]
		public Dictionary<int, Player> Players
		{
			[Token(Token = "0x6000FB5")]
			[Address(RVA = "0xBD4AF4", Offset = "0xBD4AF4", VA = "0xBD4AF4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FB6")]
			[Address(RVA = "0xBD4AFC", Offset = "0xBD4AFC", VA = "0xBD4AFC")]
			private set
			{
			}
		}

		[Token(Token = "0x17000258")]
		public string[] ExpectedUsers
		{
			[Token(Token = "0x6000FB7")]
			[Address(RVA = "0xBD4B04", Offset = "0xBD4B04", VA = "0xBD4B04")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000259")]
		public int MasterClientId
		{
			[Token(Token = "0x6000FB8")]
			[Address(RVA = "0xBD4B0C", Offset = "0xBD4B0C", VA = "0xBD4B0C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700025A")]
		public string[] PropertiesListedInLobby
		{
			[Token(Token = "0x6000FB9")]
			[Address(RVA = "0xBD4B14", Offset = "0xBD4B14", VA = "0xBD4B14")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FBA")]
			[Address(RVA = "0xBD4B1C", Offset = "0xBD4B1C", VA = "0xBD4B1C")]
			private set
			{
			}
		}

		[Token(Token = "0x1700025B")]
		public bool AutoCleanUp
		{
			[Token(Token = "0x6000FBB")]
			[Address(RVA = "0xBD4B24", Offset = "0xBD4B24", VA = "0xBD4B24")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000FBC")]
		[Address(RVA = "0xBD4B2C", Offset = "0xBD4B2C", VA = "0xBD4B2C")]
		protected internal Room(string roomName, RoomOptions options)
		{
		}

		[Token(Token = "0x6000FBD")]
		[Address(RVA = "0xBD4CAC", Offset = "0xBD4CAC", VA = "0xBD4CAC", Slot = "5")]
		public virtual void SetCustomProperties(Hashtable propertiesToSet, [Optional] Hashtable expectedProperties, [Optional] WebFlags webFlags)
		{
		}

		[Token(Token = "0x6000FBE")]
		[Address(RVA = "0xBD4D78", Offset = "0xBD4D78", VA = "0xBD4D78")]
		public void SetPropertiesListedInLobby(string[] propertiesListedInLobby)
		{
		}

		[Token(Token = "0x6000FBF")]
		[Address(RVA = "0xBD4E40", Offset = "0xBD4E40", VA = "0xBD4E40", Slot = "6")]
		protected internal virtual void RemovePlayer(Player player)
		{
		}

		[Token(Token = "0x6000FC0")]
		[Address(RVA = "0xBD4EA4", Offset = "0xBD4EA4", VA = "0xBD4EA4", Slot = "7")]
		protected internal virtual void RemovePlayer(int id)
		{
		}

		[Token(Token = "0x6000FC1")]
		[Address(RVA = "0xBD4ED0", Offset = "0xBD4ED0", VA = "0xBD4ED0")]
		public bool SetMasterClient(Player masterClientPlayer)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FC2")]
		[Address(RVA = "0xBD508C", Offset = "0xBD508C", VA = "0xBD508C", Slot = "8")]
		public virtual bool AddPlayer(Player player)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FC3")]
		[Address(RVA = "0xBD5110", Offset = "0xBD5110", VA = "0xBD5110", Slot = "9")]
		public virtual Player StorePlayer(Player player)
		{
			return null;
		}

		[Token(Token = "0x6000FC4")]
		[Address(RVA = "0xBD5194", Offset = "0xBD5194", VA = "0xBD5194", Slot = "10")]
		public virtual Player GetPlayer(int id)
		{
			return null;
		}

		[Token(Token = "0x6000FC5")]
		[Address(RVA = "0xBD5204", Offset = "0xBD5204", VA = "0xBD5204")]
		public void ClearExpectedUsers()
		{
		}

		[Token(Token = "0x6000FC6")]
		[Address(RVA = "0xBD532C", Offset = "0xBD532C", VA = "0xBD532C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000FC7")]
		[Address(RVA = "0xBD5550", Offset = "0xBD5550", VA = "0xBD5550")]
		public new string ToStringFull()
		{
			return null;
		}
	}
	[Token(Token = "0x200022B")]
	public class RoomInfo
	{
		[Token(Token = "0x4000E2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected internal bool removedFromList;

		[Token(Token = "0x4000E2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Hashtable customProperties;

		[Token(Token = "0x4000E2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected byte maxPlayers;

		[Token(Token = "0x4000E2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected string[] expectedUsers;

		[Token(Token = "0x4000E2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected bool isOpen;

		[Token(Token = "0x4000E30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		protected bool isVisible;

		[Token(Token = "0x4000E31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		protected bool autoCleanUp;

		[Token(Token = "0x4000E32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected string name;

		[Token(Token = "0x4000E33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected internal int masterClientId;

		[Token(Token = "0x4000E34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected string[] propertiesListedInLobby;

		[Token(Token = "0x1700025C")]
		public Hashtable CustomProperties
		{
			[Token(Token = "0x6000FC8")]
			[Address(RVA = "0xBD57AC", Offset = "0xBD57AC", VA = "0xBD57AC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700025D")]
		public string Name
		{
			[Token(Token = "0x6000FC9")]
			[Address(RVA = "0xBD57B4", Offset = "0xBD57B4", VA = "0xBD57B4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700025E")]
		public int PlayerCount
		{
			[Token(Token = "0x6000FCA")]
			[Address(RVA = "0xBD57BC", Offset = "0xBD57BC", VA = "0xBD57BC")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000FCB")]
			[Address(RVA = "0xBD57C4", Offset = "0xBD57C4", VA = "0xBD57C4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700025F")]
		public bool IsLocalClientInside
		{
			[Token(Token = "0x6000FCC")]
			[Address(RVA = "0xBD57CC", Offset = "0xBD57CC", VA = "0xBD57CC")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000FCD")]
			[Address(RVA = "0xBD57D4", Offset = "0xBD57D4", VA = "0xBD57D4")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000260")]
		public byte MaxPlayers
		{
			[Token(Token = "0x6000FCE")]
			[Address(RVA = "0xBD57E0", Offset = "0xBD57E0", VA = "0xBD57E0")]
			get
			{
				return default(byte);
			}
		}

		[Token(Token = "0x17000261")]
		public bool IsOpen
		{
			[Token(Token = "0x6000FCF")]
			[Address(RVA = "0xBD57E8", Offset = "0xBD57E8", VA = "0xBD57E8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000262")]
		public bool IsVisible
		{
			[Token(Token = "0x6000FD0")]
			[Address(RVA = "0xBD57F0", Offset = "0xBD57F0", VA = "0xBD57F0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000FD1")]
		[Address(RVA = "0xBD4C08", Offset = "0xBD4C08", VA = "0xBD4C08")]
		protected internal RoomInfo(string roomName, Hashtable roomProperties)
		{
		}

		[Token(Token = "0x6000FD2")]
		[Address(RVA = "0xBD57F8", Offset = "0xBD57F8", VA = "0xBD57F8", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FD3")]
		[Address(RVA = "0xBD5898", Offset = "0xBD5898", VA = "0xBD5898", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000FD4")]
		[Address(RVA = "0xBD58B8", Offset = "0xBD58B8", VA = "0xBD58B8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000FD5")]
		[Address(RVA = "0xBD5AE0", Offset = "0xBD5AE0", VA = "0xBD5AE0")]
		public string ToStringFull()
		{
			return null;
		}

		[Token(Token = "0x6000FD6")]
		[Address(RVA = "0xBD5D40", Offset = "0xBD5D40", VA = "0xBD5D40", Slot = "4")]
		protected internal virtual void InternalCacheProperties(Hashtable propertiesToCache)
		{
		}
	}
	[Token(Token = "0x200022C")]
	public class WebRpcResponse
	{
		[Token(Token = "0x17000263")]
		public string Name
		{
			[Token(Token = "0x6000FD7")]
			[Address(RVA = "0xBD624C", Offset = "0xBD624C", VA = "0xBD624C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FD8")]
			[Address(RVA = "0xBD6254", Offset = "0xBD6254", VA = "0xBD6254")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000264")]
		public int ReturnCode
		{
			[Token(Token = "0x6000FD9")]
			[Address(RVA = "0xBD625C", Offset = "0xBD625C", VA = "0xBD625C")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000FDA")]
			[Address(RVA = "0xBD6264", Offset = "0xBD6264", VA = "0xBD6264")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000265")]
		public string DebugMessage
		{
			[Token(Token = "0x6000FDB")]
			[Address(RVA = "0xBD626C", Offset = "0xBD626C", VA = "0xBD626C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FDC")]
			[Address(RVA = "0xBD6274", Offset = "0xBD6274", VA = "0xBD6274")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000266")]
		public Dictionary<string, object> Parameters
		{
			[Token(Token = "0x6000FDD")]
			[Address(RVA = "0xBD627C", Offset = "0xBD627C", VA = "0xBD627C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FDE")]
			[Address(RVA = "0xBD6284", Offset = "0xBD6284", VA = "0xBD6284")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000FDF")]
		[Address(RVA = "0xBD628C", Offset = "0xBD628C", VA = "0xBD628C")]
		public WebRpcResponse(OperationResponse response)
		{
		}

		[Token(Token = "0x6000FE0")]
		[Address(RVA = "0xBD643C", Offset = "0xBD643C", VA = "0xBD643C")]
		public string ToStringFull()
		{
			return null;
		}
	}
	[Token(Token = "0x200022D")]
	public class WebFlags
	{
		[Token(Token = "0x4000E3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly WebFlags Default;

		[Token(Token = "0x4000E3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public byte WebhookFlags;

		[Token(Token = "0x4000E3D")]
		public const byte HttpForwardConst = 1;

		[Token(Token = "0x4000E3E")]
		public const byte SendAuthCookieConst = 2;

		[Token(Token = "0x4000E3F")]
		public const byte SendSyncConst = 4;

		[Token(Token = "0x4000E40")]
		public const byte SendStateConst = 8;

		[Token(Token = "0x17000267")]
		public bool HttpForward
		{
			[Token(Token = "0x6000FE1")]
			[Address(RVA = "0xBD1CF0", Offset = "0xBD1CF0", VA = "0xBD1CF0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000FE2")]
			[Address(RVA = "0xBD65D8", Offset = "0xBD65D8", VA = "0xBD65D8")]
			set
			{
			}
		}

		[Token(Token = "0x17000268")]
		public bool SendAuthCookie
		{
			[Token(Token = "0x6000FE3")]
			[Address(RVA = "0xBD65F4", Offset = "0xBD65F4", VA = "0xBD65F4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000FE4")]
			[Address(RVA = "0xBD6600", Offset = "0xBD6600", VA = "0xBD6600")]
			set
			{
			}
		}

		[Token(Token = "0x17000269")]
		public bool SendSync
		{
			[Token(Token = "0x6000FE5")]
			[Address(RVA = "0xBD661C", Offset = "0xBD661C", VA = "0xBD661C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000FE6")]
			[Address(RVA = "0xBD6628", Offset = "0xBD6628", VA = "0xBD6628")]
			set
			{
			}
		}

		[Token(Token = "0x1700026A")]
		public bool SendState
		{
			[Token(Token = "0x6000FE7")]
			[Address(RVA = "0xBD6644", Offset = "0xBD6644", VA = "0xBD6644")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000FE8")]
			[Address(RVA = "0xBD6650", Offset = "0xBD6650", VA = "0xBD6650")]
			set
			{
			}
		}

		[Token(Token = "0x6000FE9")]
		[Address(RVA = "0xBD666C", Offset = "0xBD666C", VA = "0xBD666C")]
		public WebFlags(byte webhookFlags)
		{
		}
	}
}
namespace MagicLightProbes
{
	[Token(Token = "0x200022E")]
	public class PingPong : MonoBehaviour
	{
		[Token(Token = "0x200022F")]
		public enum Direction
		{
			[Token(Token = "0x4000E45")]
			TopDown,
			[Token(Token = "0x4000E46")]
			LeftRight,
			[Token(Token = "0x4000E47")]
			ForwarBackward
		}

		[Token(Token = "0x4000E41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Direction direction;

		[Token(Token = "0x4000E42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float distance;

		[Token(Token = "0x4000E43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float speed;

		[Token(Token = "0x6000FEB")]
		[Address(RVA = "0xBD66FC", Offset = "0xBD66FC", VA = "0xBD66FC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000FEC")]
		[Address(RVA = "0xBD6700", Offset = "0xBD6700", VA = "0xBD6700")]
		private void Update()
		{
		}

		[Token(Token = "0x6000FED")]
		[Address(RVA = "0xBD6850", Offset = "0xBD6850", VA = "0xBD6850")]
		public PingPong()
		{
		}
	}
	[Token(Token = "0x2000230")]
	[ExecuteInEditMode]
	public class Rotator : MonoBehaviour
	{
		[Token(Token = "0x4000E48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEngine.Vector3 localRotationSpeed;

		[Token(Token = "0x4000E49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public UnityEngine.Vector3 worldRotationSpeed;

		[Token(Token = "0x4000E4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool executeInEditMode;

		[Token(Token = "0x4000E4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool unscaledTime;

		[Token(Token = "0x6000FEE")]
		[Address(RVA = "0xBD6858", Offset = "0xBD6858", VA = "0xBD6858")]
		private void OnRenderObject()
		{
		}

		[Token(Token = "0x6000FEF")]
		[Address(RVA = "0xBD6A18", Offset = "0xBD6A18", VA = "0xBD6A18")]
		private void Update()
		{
		}

		[Token(Token = "0x6000FF0")]
		[Address(RVA = "0xBD6888", Offset = "0xBD6888", VA = "0xBD6888")]
		private void Rotate()
		{
		}

		[Token(Token = "0x6000FF1")]
		[Address(RVA = "0xBD6A40", Offset = "0xBD6A40", VA = "0xBD6A40")]
		public Rotator()
		{
		}
	}
	[Token(Token = "0x2000231")]
	[HelpURL("https://motion-games-studio.gitbook.io/magic-light-probes/system-components/main-component")]
	[ExecuteInEditMode]
	public class MagicLightProbes : MonoBehaviour
	{
		[Token(Token = "0x2000232")]
		public struct VolumeParameters
		{
			[Token(Token = "0x4000F02")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int volumeIndex;

			[Token(Token = "0x4000F03")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public UnityEngine.Vector3 position;

			[Token(Token = "0x4000F04")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public UnityEngine.Vector3 demensions;

			[Token(Token = "0x6000FF7")]
			[Address(RVA = "0xBD7588", Offset = "0xBD7588", VA = "0xBD7588")]
			public VolumeParameters(int _volumeIndex, UnityEngine.Vector3 _position, UnityEngine.Vector3 _demensions)
			{
			}
		}

		[Token(Token = "0x2000233")]
		public enum FillingMode
		{
			[Token(Token = "0x4000F06")]
			VerticalDublicating,
			[Token(Token = "0x4000F07")]
			FullFilling,
			[Token(Token = "0x4000F08")]
			SeparateFilling
		}

		[Token(Token = "0x2000234")]
		public enum ExcludingLightsMode
		{
			[Token(Token = "0x4000F0A")]
			AllInList,
			[Token(Token = "0x4000F0B")]
			AllExceptInList
		}

		[Token(Token = "0x2000235")]
		public enum Workflow
		{
			[Token(Token = "0x4000F0D")]
			Simple,
			[Token(Token = "0x4000F0E")]
			Advanced
		}

		[Token(Token = "0x2000236")]
		public enum BoundsDisplayMode
		{
			[Token(Token = "0x4000F10")]
			Always,
			[Token(Token = "0x4000F11")]
			OnSelection
		}

		[Token(Token = "0x2000237")]
		public enum DebugPasses
		{
			[Token(Token = "0x4000F13")]
			MaximumHeight,
			[Token(Token = "0x4000F14")]
			GeometryCollision,
			[Token(Token = "0x4000F15")]
			GeometryIntersections,
			[Token(Token = "0x4000F16")]
			NearGeometry,
			[Token(Token = "0x4000F17")]
			OutOfRange,
			[Token(Token = "0x4000F18")]
			OutOfRangeBorders,
			[Token(Token = "0x4000F19")]
			ShadingBorders,
			[Token(Token = "0x4000F1A")]
			ContrastAreas,
			[Token(Token = "0x4000F1B")]
			NearLights,
			[Token(Token = "0x4000F1C")]
			LightIntensity,
			[Token(Token = "0x4000F1D")]
			UnlitProbes,
			[Token(Token = "0x4000F1E")]
			EqualProbes,
			[Token(Token = "0x4000F1F")]
			GeometryEdges,
			[Token(Token = "0x4000F20")]
			EqualColor
		}

		[Token(Token = "0x2000238")]
		public enum DrawModes
		{
			[Token(Token = "0x4000F22")]
			Accepted,
			[Token(Token = "0x4000F23")]
			Culled,
			[Token(Token = "0x4000F24")]
			Both
		}

		[Token(Token = "0x2000239")]
		public enum CalculationTarget
		{
			[Token(Token = "0x4000F26")]
			GeometryEdges,
			[Token(Token = "0x4000F27")]
			GeneralCalculation
		}

		[Serializable]
		[Token(Token = "0x200023A")]
		private struct TempPointData
		{
			[Token(Token = "0x4000F28")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public float xPos;

			[Token(Token = "0x4000F29")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public float yPos;

			[Token(Token = "0x4000F2A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public float zPos;

			[Token(Token = "0x6000FF8")]
			[Address(RVA = "0xBD759C", Offset = "0xBD759C", VA = "0xBD759C")]
			public TempPointData(UnityEngine.Vector3 _position)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200023B")]
		public class WorkPathFoundEvent : UnityEvent<string>
		{
			[Token(Token = "0x6000FF9")]
			[Address(RVA = "0xBD75A8", Offset = "0xBD75A8", VA = "0xBD75A8")]
			public WorkPathFoundEvent()
			{
			}
		}

		[Token(Token = "0x4000E4C")]
		private const string COMPUTE_SHADERS_FOLDER = "/Passes/Compute Shaders/";

		[Token(Token = "0x4000E4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public IEnumerator colorThresholdRecalculationRoutine;

		[Token(Token = "0x4000E4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public IEnumerator lightProbesVolumeCalculatingRoutine;

		[Token(Token = "0x4000E4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public IEnumerator lightProbesVolumeCalculatingSubRoutine;

		[Token(Token = "0x4000E50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public IEnumerator executingPassesRoutine;

		[Token(Token = "0x4000E51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IEnumerator volumeDivideingRoutine;

		[Token(Token = "0x4000E52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool autoSaveSettings;

		[Token(Token = "0x4000E53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public MLPSettings lastSettingsAsset;

		[Token(Token = "0x4000E54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public List<string> groundAndFloorObjects;

		[Token(Token = "0x4000E55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public List<string> storedGroundAndFloorKeywords;

		[Token(Token = "0x4000E56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public GameObject probesVolume;

		[Token(Token = "0x4000E57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool useDynamicDensity;

		[Token(Token = "0x4000E58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float volumeSpacing;

		[Token(Token = "0x4000E59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float volumeSpacingMin;

		[Token(Token = "0x4000E5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public float volumeSpacingMax;

		[Token(Token = "0x4000E5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float cornersDetectionThreshold;

		[Token(Token = "0x4000E5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float cornersDetectionThresholdMin;

		[Token(Token = "0x4000E5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float cornersDetectionThresholdMax;

		[Token(Token = "0x4000E5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public float lastCornersDetectionThreshold;

		[Token(Token = "0x4000E5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float lastCornersDetectionThresholdMin;

		[Token(Token = "0x4000E60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float lastCornersDetectionThresholdMax;

		[Token(Token = "0x4000E61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public int lastMaxProbesInVolume;

		[Token(Token = "0x4000E62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public int maxProbesInVolume;

		[Token(Token = "0x4000E63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public int defaultMaxProbesCount;

		[Token(Token = "0x4000E64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public float lastVolumeSpacing;

		[Token(Token = "0x4000E65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public float lastVolumeSpacingMin;

		[Token(Token = "0x4000E66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public float lastVolumeSpacingMax;

		[Token(Token = "0x4000E67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public bool volumeSpacingChanged;

		[Token(Token = "0x4000E68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA9")]
		public bool tooManySubVolumes;

		[Token(Token = "0x4000E69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public FillingMode fillingMode;

		[Token(Token = "0x4000E6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public ExcludingLightsMode excludingLightsMode;

		[Token(Token = "0x4000E6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public MLPSettings settingsAsset;

		[Token(Token = "0x4000E6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public Workflow workflow;

		[Token(Token = "0x4000E6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public float maxHeightAboveGeometry;

		[Token(Token = "0x4000E6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public float lastMaxHeightAboveGeometry;

		[Token(Token = "0x4000E6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		public float maxHeightAboveTerrain;

		[Token(Token = "0x4000E70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public bool considerDistanceToLights;

		[Token(Token = "0x4000E71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		public float lightIntensityTreshold;

		[Token(Token = "0x4000E72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public float colorTreshold;

		[Token(Token = "0x4000E73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		public float collisionDetectionRadius;

		[Token(Token = "0x4000E74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public bool saveProbesNearbyGeometry;

		[Token(Token = "0x4000E75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		public float cornerProbesSpacing;

		[Token(Token = "0x4000E76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public float nearbyGeometryDetectionRadius;

		[Token(Token = "0x4000E77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		public float nearbyGeometryDetectionRadiusMin;

		[Token(Token = "0x4000E78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public float nearbyGeometryDetectionRadiusMax;

		[Token(Token = "0x4000E79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		public float distanceFromNearbyGeometry;

		[Token(Token = "0x4000E7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public bool fillEquivalentVolume;

		[Token(Token = "0x4000E7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		public float equivalentVolumeFillingRate;

		[Token(Token = "0x4000E7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public bool fillUnlitVolume;

		[Token(Token = "0x4000E7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x101")]
		public bool fillFreeVolume;

		[Token(Token = "0x4000E7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		public float unlitVolumeFillingRate;

		[Token(Token = "0x4000E7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public float freeVolumeFillingRate;

		[Token(Token = "0x4000E80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		public bool cullAcceptedVolume;

		[Token(Token = "0x4000E81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public float acceptedVolumeFillingRate;

		[Token(Token = "0x4000E82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		public float nearbyGeometryVolumeFillingRate;

		[Token(Token = "0x4000E83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public float verticalDublicatingHeight;

		[Token(Token = "0x4000E84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		public float verticalDublicatingStep;

		[Token(Token = "0x4000E85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public LayerMask raycastFilter;

		[Token(Token = "0x4000E86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public List<MLPLight> excludedLights;

		[Token(Token = "0x4000E87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public LayerMask layerMask;

		[Token(Token = "0x4000E88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		public int firstCollisionLayer;

		[Token(Token = "0x4000E89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		public bool useMultithreading;

		[Token(Token = "0x4000E8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		public GameObject previousSelection;

		[Token(Token = "0x4000E8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		public bool unloaded;

		[Token(Token = "0x4000E8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x149")]
		public bool sceneChanging;

		[Token(Token = "0x4000E8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14A")]
		public bool waitForPrevious;

		[Token(Token = "0x4000E8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		public MagicLightProbes previousVolume;

		[Token(Token = "0x4000E8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		public bool optimizeForMixedLighting;

		[Token(Token = "0x4000E90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x159")]
		public bool lastOptimizeForMixedLightingValue;

		[Token(Token = "0x4000E91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15A")]
		public bool lastUseDynamicDensityValue;

		[Token(Token = "0x4000E92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15B")]
		public bool preventLeakageThroughWalls;

		[Token(Token = "0x4000E93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
		public bool useVolumeBottom;

		[Token(Token = "0x4000E94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15D")]
		public bool placeProbesOnGeometryEdges;

		[Token(Token = "0x4000E95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		public float lastColorThreshold;

		[Token(Token = "0x4000E96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		public float lastLightIntensityThreshold;

		[Token(Token = "0x4000E97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		public float lastEquivalentVolumeFillingRate;

		[Token(Token = "0x4000E98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		public float lastUnlitVolumeFillingRate;

		[Token(Token = "0x4000E99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		public float lastFreeVolumeFillingRate;

		[Token(Token = "0x4000E9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
		public float lastCornerProbesSpacing;

		[Token(Token = "0x4000E9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		public float lastDistanceFromGeometry;

		[Token(Token = "0x4000E9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
		public bool debugMode;

		[Token(Token = "0x4000E9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		public float debugObjectScale;

		[Token(Token = "0x4000E9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
		public BoundsDisplayMode boundsDisplayMode;

		[Token(Token = "0x4000E9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		public DebugPasses debugPass;

		[Token(Token = "0x4000EA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
		public DrawModes drawMode;

		[Token(Token = "0x4000EA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		public bool debugShowLightIntensity;

		[Token(Token = "0x4000EA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x191")]
		public bool showPreviewGrid;

		[Token(Token = "0x4000EA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x192")]
		public bool nextStep;

		[Token(Token = "0x4000EA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x193")]
		public bool cullByColor;

		[Token(Token = "0x4000EA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
		public bool forceSaveProbesOnShadingBorders;

		[Token(Token = "0x4000EA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		public string dataPath;

		[Token(Token = "0x4000EA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		public string workPath;

		[Token(Token = "0x4000EA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		public bool workPathFound;

		[Token(Token = "0x4000EA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		public List<UnityEngine.Vector3> localFinishedPositions;

		[Token(Token = "0x4000EAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		public ComputeShader calculateVolumeFilling;

		[Token(Token = "0x4000EAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		public ComputeShader calculateProbeSpacing;

		[Token(Token = "0x4000EAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		public ComputeShader calculateDistanceFromGeometry;

		[Token(Token = "0x4000EAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		public MLPVolume currentVolume;

		[Token(Token = "0x4000EAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		public bool recalculationRequired;

		[Token(Token = "0x4000EAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		private List<Collider> lightColliders;

		[Token(Token = "0x4000EB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		private List<Collider> objectColliders;

		[Token(Token = "0x4000EB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		private List<MLPPointData> finalDebugAcceptedPoints;

		[Token(Token = "0x4000EB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		private List<MLPPointData> finalDebugCulledPoints;

		[Token(Token = "0x4000EB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		private List<GameObject> tempObjects;

		[Token(Token = "0x4000EB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		private List<GameObject> temporarilyDisabledDynamicObjects;

		[Token(Token = "0x4000EB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		private List<GameObject> staticObjectsWithoutCollider;

		[Token(Token = "0x4000EB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		public List<GameObject> finalStaticGameObjectsList;

		[Token(Token = "0x4000EB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		private GameObject combinedVolumeObject;

		[Token(Token = "0x4000EB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		private VolumeParameters currentEditingVolume;

		[Token(Token = "0x4000EB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x244")]
		private UnityEngine.Vector3 currentSelectedObjectLastPosition;

		[Token(Token = "0x4000EBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
		private GameObject lastSelectedObject;

		[Token(Token = "0x4000EBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
		public bool cancelCombination;

		[Token(Token = "0x4000EBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
		public List<IEnumerator> passesToExecute;

		[Token(Token = "0x4000EBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
		public List<GameObject> staticObjects;

		[Token(Token = "0x4000EBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
		public List<MLPLight> lights;

		[Token(Token = "0x4000EBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
		public List<MLPPointData> tmpSharedPointsArray;

		[Token(Token = "0x4000EC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
		public List<MLPPointData> tmpOutOfRangePoints;

		[Token(Token = "0x4000EC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
		public List<MLPPointData> tmpOutOfMaxHeightPoints;

		[Token(Token = "0x4000EC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
		public List<MLPPointData> tmpGeometryCollisionPoints;

		[Token(Token = "0x4000EC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
		public List<MLPPointData> tmpContrastOnOutOfRangePoints;

		[Token(Token = "0x4000EC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
		public List<MLPPointData> tmpContrastShadingBordersPoints;

		[Token(Token = "0x4000EC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
		public List<MLPPointData> tmpUnlitPoints;

		[Token(Token = "0x4000EC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
		public List<MLPPointData> tmpFreePoints;

		[Token(Token = "0x4000EC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B8")]
		public List<MLPPointData> tmpNearbyGeometryPoints;

		[Token(Token = "0x4000EC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C0")]
		public List<MLPPointData> tmpPointsNearGeometryIntersections;

		[Token(Token = "0x4000EC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C8")]
		public List<MLPPointData> tmpNearbyLightsPoints;

		[Token(Token = "0x4000ECA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D0")]
		public List<MLPPointData> tmpEqualPoints;

		[Token(Token = "0x4000ECB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D8")]
		public List<MLPPointData> debugCulledPoints;

		[Token(Token = "0x4000ECC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E0")]
		public List<MLPPointData> debugAcceptedPoints;

		[Token(Token = "0x4000ECD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E8")]
		public List<GameObject> subVolumesDivided;

		[Token(Token = "0x4000ECE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F0")]
		public List<UnityEngine.Vector3> points;

		[Token(Token = "0x4000ECF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F8")]
		public List<VolumeParameters> innerVolumes;

		[Token(Token = "0x4000ED0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x300")]
		public List<VolumeParameters> subVolumesParameters;

		[Token(Token = "0x4000ED1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x308")]
		public List<MagicLightProbes> innerVolumesObjects;

		[Token(Token = "0x4000ED2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x310")]
		public List<LayerMask> layerMasks;

		[Token(Token = "0x4000ED3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x318")]
		public List<UnityEngine.Vector3> transformedPoints;

		[Token(Token = "0x4000ED4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x320")]
		public string assetEditorPath;

		[Token(Token = "0x4000ED5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x328")]
		public MagicLightProbes parentVolume;

		[Token(Token = "0x4000ED6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool operationalDataLost;

		[Token(Token = "0x4000ED7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x330")]
		public bool localOperationalDataLost;

		[Token(Token = "0x4000ED8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x331")]
		public bool recombinationNeeded;

		[Token(Token = "0x4000ED9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x332")]
		public bool isInBackground;

		[Token(Token = "0x4000EDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x333")]
		public bool realtimeEditing;

		[Token(Token = "0x4000EDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x334")]
		public bool calculated;

		[Token(Token = "0x4000EDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x335")]
		public bool calculatingError;

		[Token(Token = "0x4000EDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x338")]
		public int xPointsCount;

		[Token(Token = "0x4000EDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x33C")]
		public int yPointsCount;

		[Token(Token = "0x4000EDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x340")]
		public int zPointsCount;

		[Token(Token = "0x4000EE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x344")]
		public float prevVolumeScaleX;

		[Token(Token = "0x4000EE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x348")]
		public float prevVolumeScaleY;

		[Token(Token = "0x4000EE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34C")]
		public float prevVolumeScaleZ;

		[Token(Token = "0x4000EE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x350")]
		public int totalProbes;

		[Token(Token = "0x4000EE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x354")]
		public int totalProbesInSubVolume;

		[Token(Token = "0x4000EE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x358")]
		public int totalProbesInVolume;

		[Token(Token = "0x4000EE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35C")]
		public bool calculatingVolume;

		[Token(Token = "0x4000EE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35D")]
		public bool calculatingVolumeSubPass;

		[Token(Token = "0x4000EE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x360")]
		public string currentPass;

		[Token(Token = "0x4000EE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x368")]
		public int currentPassProgressCounter;

		[Token(Token = "0x4000EEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x36C")]
		public int currentPassProgressFrameSkipper;

		[Token(Token = "0x4000EEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x370")]
		public float totalProgress;

		[Token(Token = "0x4000EEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x374")]
		public float currentPassProgress;

		[Token(Token = "0x4000EED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x378")]
		public int selectedTab;

		[Token(Token = "0x4000EEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x37C")]
		public bool showOptionsInManagerWindow;

		[Token(Token = "0x4000EEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x37D")]
		public bool restored;

		[Token(Token = "0x4000EF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x380")]
		public int currentVolumePart;

		[Token(Token = "0x4000EF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x384")]
		public float eta;

		[Token(Token = "0x4000EF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x388")]
		public bool changed;

		[Token(Token = "0x4000EF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x389")]
		public bool redivideParts;

		[Token(Token = "0x4000EF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38A")]
		public bool combinedVolumeError;

		[Token(Token = "0x4000EF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38B")]
		public bool isInPrefab;

		[Token(Token = "0x4000EF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38C")]
		public UnityEngine.Vector3 prefabPosition;

		[Token(Token = "0x4000EF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x398")]
		public GameObject prefabRoot;

		[Token(Token = "0x4000EF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A0")]
		public MLPPrefab prefabConnectionObject;

		[Token(Token = "0x4000EF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A8")]
		public string prefabRootName;

		[Token(Token = "0x4000EFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B0")]
		public bool calculatedFromPrefab;

		[Token(Token = "0x4000EFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B8")]
		public string prefabUID;

		[Token(Token = "0x4000EFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C0")]
		private bool passesExecuting;

		[Token(Token = "0x4000EFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C4")]
		private int totalProgressCounter;

		[Token(Token = "0x4000EFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C8")]
		private int totalProgressFrameSkipper;

		[Token(Token = "0x4000EFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3CC")]
		private float startTime;

		[Token(Token = "0x4000F00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D0")]
		private float endTime;

		[Token(Token = "0x4000F01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D4")]
		private bool scenePreparing;

		[Token(Token = "0x6000FF2")]
		[Address(RVA = "0xBD6A48", Offset = "0xBD6A48", VA = "0xBD6A48")]
		public void CheckForNearContrast(MLPPointData pointForCheck)
		{
		}

		[Token(Token = "0x6000FF3")]
		[Address(RVA = "0xBD6E1C", Offset = "0xBD6E1C", VA = "0xBD6E1C")]
		public bool UpdateProgress(int count, int period = 100)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FF4")]
		[Address(RVA = "0xBD6E64", Offset = "0xBD6E64", VA = "0xBD6E64")]
		private bool UpdateTotalProgress(int count, int period = 100)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FF5")]
		[Address(RVA = "0xBD6EAC", Offset = "0xBD6EAC", VA = "0xBD6EAC")]
		public MagicLightProbes()
		{
		}
	}
	[Token(Token = "0x200023C")]
	[ExecuteInEditMode]
	[HelpURL("https://motion-games-studio.gitbook.io/magic-light-probes/system-components/mlp-combined-volume")]
	public class MLPCombinedVolume : MonoBehaviour
	{
		[Token(Token = "0x6000FFA")]
		[Address(RVA = "0xBD75F0", Offset = "0xBD75F0", VA = "0xBD75F0")]
		public MLPCombinedVolume()
		{
		}
	}
	[Token(Token = "0x200023D")]
	[HelpURL("https://motion-games-studio.gitbook.io/magic-light-probes/system-components/mlp-light")]
	[ExecuteInEditMode]
	[DisallowMultipleComponent]
	public class MLPLight : MonoBehaviour
	{
		[Token(Token = "0x200023E")]
		public enum CalculationMode
		{
			[Token(Token = "0x4000F50")]
			AccurateShadows,
			[Token(Token = "0x4000F51")]
			LightIntensity
		}

		[Token(Token = "0x200023F")]
		public enum MLPLightType
		{
			[Token(Token = "0x4000F53")]
			Spot,
			[Token(Token = "0x4000F54")]
			Directional,
			[Token(Token = "0x4000F55")]
			Point,
			[Token(Token = "0x4000F56")]
			Area,
			[Token(Token = "0x4000F57")]
			Mesh
		}

		[Token(Token = "0x2000240")]
		public enum MLPLightTypeMA
		{
			[Token(Token = "0x4000F59")]
			Area = 3,
			[Token(Token = "0x4000F5A")]
			Mesh
		}

		[Token(Token = "0x2000241")]
		public enum TracePointSettingMode
		{
			[Token(Token = "0x4000F5C")]
			Auto,
			[Token(Token = "0x4000F5D")]
			Custom
		}

		[Token(Token = "0x2000242")]
		public enum ShadowmaskMode
		{
			[Token(Token = "0x4000F5F")]
			Shadowmask,
			[Token(Token = "0x4000F60")]
			DistanceShadowmask
		}

		[Token(Token = "0x4000F2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MLPLightType lightType;

		[Token(Token = "0x4000F2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public MLPLightType lastLightType;

		[Token(Token = "0x4000F2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MLPLightTypeMA lightTypeMA;

		[Token(Token = "0x4000F2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public CalculationMode calculationMode;

		[Token(Token = "0x4000F2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TracePointSettingMode tracePointSettingType;

		[Token(Token = "0x4000F30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public LightmapBakeType lightMode;

		[Token(Token = "0x4000F31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ShadowmaskMode shadowmaskMode;

		[Token(Token = "0x4000F32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Light targetLight;

		[Token(Token = "0x4000F33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject parentGameObject;

		[Token(Token = "0x4000F34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public UnityEngine.Vector3 position;

		[Token(Token = "0x4000F35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public UnityEngine.Vector3 forward;

		[Token(Token = "0x4000F36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool saveNearbyProbes;

		[Token(Token = "0x4000F37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float saveRadius;

		[Token(Token = "0x4000F38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float range;

		[Token(Token = "0x4000F39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public bool useSourceParameters;

		[Token(Token = "0x4000F3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6D")]
		public bool reverseDirection;

		[Token(Token = "0x4000F3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float angle;

		[Token(Token = "0x4000F3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public bool customTracePoints;

		[Token(Token = "0x4000F3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x75")]
		public bool accurateTrace;

		[Token(Token = "0x4000F3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public int accuracy;

		[Token(Token = "0x4000F3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public int lastAccuracy;

		[Token(Token = "0x4000F40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public bool isDirectional;

		[Token(Token = "0x4000F41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public float tracePointSize;

		[Token(Token = "0x4000F42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float lastTracePointSize;

		[Token(Token = "0x4000F43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public MeshFilter lastMesh;

		[Token(Token = "0x4000F44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public List<GameObject> tracePoints;

		[Token(Token = "0x4000F45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public List<MLPTracePoint> tracePointsData;

		[Token(Token = "0x4000F46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public MLPTracePoint mainTracePoint;

		[Token(Token = "0x4000F47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public MagicLightProbes parentVolume;

		[Token(Token = "0x4000F48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public bool showOptionsInManagerWindow;

		[Token(Token = "0x4000F49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public float intensity;

		[Token(Token = "0x4000F4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public bool resetEditor;

		[Token(Token = "0x4000F4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC1")]
		public bool showLightOnScene;

		[Token(Token = "0x4000F4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC2")]
		public bool saveOnOutOfRange;

		[Token(Token = "0x4000F4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC3")]
		public bool isHDRP;

		[Token(Token = "0x4000F4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public UnityEngine.Vector2 hdrpAreaSize;

		[Token(Token = "0x6000FFB")]
		[Address(RVA = "0xBD75F8", Offset = "0xBD75F8", VA = "0xBD75F8")]
		public MLPLight()
		{
		}
	}
	[Token(Token = "0x2000243")]
	public class MLPPointData
	{
		[Token(Token = "0x4000F61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float lightIntensity;

		[Token(Token = "0x4000F62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float maxIntencity;

		[Token(Token = "0x4000F63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEngine.Vector3 position;

		[Token(Token = "0x4000F64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int col;

		[Token(Token = "0x4000F65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int row;

		[Token(Token = "0x4000F66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int depth;

		[Token(Token = "0x4000F67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public List<float> distancesToLights;

		[Token(Token = "0x4000F68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public List<UnityEngine.Vector3> collisionPoints;

		[Token(Token = "0x4000F69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public List<MLPPointData> nearbyPoints;

		[Token(Token = "0x4000F6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public List<MLPPointData> nearbyPointsOptimaziable;

		[Token(Token = "0x4000F6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool removed;

		[Token(Token = "0x4000F6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		public bool outOfRange;

		[Token(Token = "0x4000F6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
		public bool inSaveRange;

		[Token(Token = "0x4000F6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x53")]
		public bool savedNearGeometry;

		[Token(Token = "0x4000F6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public bool contrastOnOutOfRangeArea;

		[Token(Token = "0x4000F70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
		public bool inRangeOfLight;

		[Token(Token = "0x4000F71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x56")]
		public bool contrastOnShadingArea;

		[Token(Token = "0x4000F72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x57")]
		public bool equalIntensity;

		[Token(Token = "0x4000F73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool equalColor;

		[Token(Token = "0x4000F74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		public bool borderPoint;

		[Token(Token = "0x4000F75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5A")]
		public bool outOfMaxHeight;

		[Token(Token = "0x4000F76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float angleToLight;

		[Token(Token = "0x4000F77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public UnityEngine.Vector3 contactPoint;

		[Token(Token = "0x4000F78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public bool inCorner;

		[Token(Token = "0x4000F79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6D")]
		public bool lockForCull;

		[Token(Token = "0x4000F7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6E")]
		public bool onGeometryEdge;

		[Token(Token = "0x4000F7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6F")]
		public bool lightLeakLocked;

		[Token(Token = "0x4000F7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public UnityEngine.Vector3 collisionNormal;

		[Token(Token = "0x4000F7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public List<MLPLight> inRangeForLights;

		[Token(Token = "0x4000F7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public List<MLPLight> inShadowForLights;

		[Token(Token = "0x4000F7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public GameObject temporaryObject;

		[Token(Token = "0x4000F80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public GameObject collisionObject;

		[Token(Token = "0x4000F81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Color averagedColor;

		[Token(Token = "0x4000F82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public bool xEndPoint;

		[Token(Token = "0x4000F83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB1")]
		public bool yEndPoint;

		[Token(Token = "0x4000F84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB2")]
		public bool zEndPoint;

		[Token(Token = "0x4000F85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB3")]
		public bool xStartPoint;

		[Token(Token = "0x4000F86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public bool yStartPoint;

		[Token(Token = "0x4000F87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB5")]
		public bool zStartPoint;

		[Token(Token = "0x4000F88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public int equivalent;

		[Token(Token = "0x4000F89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public float avaragedColorValue;

		[Token(Token = "0x4000F8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public bool isUnlit;

		[Token(Token = "0x6000FFC")]
		[Address(RVA = "0xBD76C4", Offset = "0xBD76C4", VA = "0xBD76C4")]
		public void SetPosition(UnityEngine.Vector3 position)
		{
		}

		[Token(Token = "0x6000FFD")]
		[Address(RVA = "0xBD76D0", Offset = "0xBD76D0", VA = "0xBD76D0")]
		public void SetOutOfRange(bool visibility)
		{
		}

		[Token(Token = "0x6000FFE")]
		[Address(RVA = "0xBD76DC", Offset = "0xBD76DC", VA = "0xBD76DC")]
		public void SetLightIntensity(float intensity)
		{
		}

		[Token(Token = "0x6000FFF")]
		[Address(RVA = "0xBD76E4", Offset = "0xBD76E4", VA = "0xBD76E4")]
		public void SetInSaveRange(bool value)
		{
		}

		[Token(Token = "0x6001000")]
		[Address(RVA = "0xBD76F0", Offset = "0xBD76F0", VA = "0xBD76F0")]
		public void SetInContrastArea(bool value)
		{
		}

		[Token(Token = "0x6001001")]
		[Address(RVA = "0xBD76FC", Offset = "0xBD76FC", VA = "0xBD76FC")]
		public MLPPointData()
		{
		}
	}
	[Token(Token = "0x2000244")]
	[ExecuteInEditMode]
	public class MLPPrefab : MonoBehaviour
	{
		[Token(Token = "0x4000F8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public new string name;

		[Token(Token = "0x4000F8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string uid;

		[Token(Token = "0x6001002")]
		[Address(RVA = "0xBD7884", Offset = "0xBD7884", VA = "0xBD7884")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001003")]
		[Address(RVA = "0xBD78E8", Offset = "0xBD78E8", VA = "0xBD78E8")]
		public MLPPrefab()
		{
		}
	}
	[Token(Token = "0x2000245")]
	[HelpURL("https://motion-games-studio.gitbook.io/magic-light-probes/system-components/mlp-quick-editing")]
	public class MLPQuickEditing : MonoBehaviour
	{
		[Token(Token = "0x4000F8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MagicLightProbes parent;

		[Token(Token = "0x4000F8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float gizmoScale;

		[Token(Token = "0x4000F8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float drawDistance;

		[Token(Token = "0x4000F90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private UnityEngine.Vector3 _lastPrefabPosition;

		[Token(Token = "0x4000F91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Quaternion _lastPrefabRotation;

		[Token(Token = "0x6001004")]
		[Address(RVA = "0xBD78F0", Offset = "0xBD78F0", VA = "0xBD78F0")]
		public MLPQuickEditing()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000246")]
	public class MLPTracePoint
	{
		[Token(Token = "0x4000F92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public UnityEngine.Vector3 position;

		[Token(Token = "0x4000F93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public UnityEngine.Vector3 forward;

		[Token(Token = "0x4000F94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string name;

		[Token(Token = "0x4000F95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject pointGameObject;

		[Token(Token = "0x6001005")]
		[Address(RVA = "0xBD7990", Offset = "0xBD7990", VA = "0xBD7990")]
		public MLPTracePoint()
		{
		}
	}
	[Token(Token = "0x2000247")]
	[ExecuteInEditMode]
	public class MLPVolume : MonoBehaviour
	{
		[Token(Token = "0x4000F96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public MagicLightProbes parentRootComponent;

		[Token(Token = "0x4000F97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public MeshRenderer selfRenderer;

		[Token(Token = "0x4000F98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public bool showGizmo;

		[Token(Token = "0x4000F99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool showGizmoSelected;

		[Token(Token = "0x4000F9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		public bool isPartVolume;

		[Token(Token = "0x4000F9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B")]
		public bool isSubdividedPart;

		[Token(Token = "0x4000F9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool isCalculated;

		[Token(Token = "0x4000F9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		public bool isInProcess;

		[Token(Token = "0x4000F9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E")]
		public bool skipped;

		[Token(Token = "0x4000F9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int id;

		[Token(Token = "0x4000FA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Color colorOnSelection;

		[Token(Token = "0x4000FA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public List<MLPPointData> localAcceptedPoints;

		[Token(Token = "0x4000FA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public List<MLPPointData> localNearbyGeometryPoints;

		[Token(Token = "0x4000FA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public List<MLPPointData> localContrastPoints;

		[Token(Token = "0x4000FA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public List<MLPPointData> localCornerPoints;

		[Token(Token = "0x4000FA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public List<UnityEngine.Vector3> localNearbyGeometryPointsPositions;

		[Token(Token = "0x4000FA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public List<UnityEngine.Vector3> resultNearbyGeometryPointsPositions;

		[Token(Token = "0x4000FA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public List<UnityEngine.Vector3> localCornerPointsPositions;

		[Token(Token = "0x4000FA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public List<UnityEngine.Vector3> resultLocalCornerPointsPositions;

		[Token(Token = "0x4000FA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public List<UnityEngine.Vector3> localEquivalentPointsPositions;

		[Token(Token = "0x4000FAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public List<UnityEngine.Vector3> resultLocalEquivalentPointsPositions;

		[Token(Token = "0x4000FAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public List<UnityEngine.Vector3> resultLocalFreePointsPositions;

		[Token(Token = "0x4000FAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public List<UnityEngine.Vector3> localUnlitPointsPositions;

		[Token(Token = "0x4000FAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public List<UnityEngine.Vector3> localFreePointsPositions;

		[Token(Token = "0x4000FAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public List<UnityEngine.Vector3> resultLocalUnlitPointsPositions;

		[Token(Token = "0x4000FAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public List<UnityEngine.Vector3> localDirections;

		[Token(Token = "0x4000FB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public List<UnityEngine.Vector3> localAvaragedDirections;

		[Token(Token = "0x4000FB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public List<MLPPointData> localColorThresholdEditingPoints;

		[Token(Token = "0x4000FB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public int objectsInside;

		[Token(Token = "0x6001006")]
		[Address(RVA = "0xBD7998", Offset = "0xBD7998", VA = "0xBD7998")]
		public MLPVolume()
		{
		}
	}
	[Token(Token = "0x2000248")]
	public class DublicateVertical
	{
		[Token(Token = "0x2000249")]
		[CompilerGenerated]
		private sealed class <ExecutePass>d__0 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000FB3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000FB4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000FB5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MagicLightProbes parent;

			[Token(Token = "0x4000FB6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <steps>5__2;

			[Token(Token = "0x4000FB7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private List<MLPPointData> <candidates>5__3;

			[Token(Token = "0x4000FB8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private List<MLPPointData> <savedNearGeometry>5__4;

			[Token(Token = "0x4000FB9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private int <i>5__5;

			[Token(Token = "0x4000FBA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private List<MLPPointData>.Enumerator <>7__wrap5;

			[Token(Token = "0x1700026B")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600100D")]
				[Address(RVA = "0xBD8818", Offset = "0xBD8818", VA = "0xBD8818", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700026C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600100F")]
				[Address(RVA = "0xBD8860", Offset = "0xBD8860", VA = "0xBD8860", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001009")]
			[Address(RVA = "0xBD7C74", Offset = "0xBD7C74", VA = "0xBD7C74")]
			[DebuggerHidden]
			public <ExecutePass>d__0(int <>1__state)
			{
			}

			[Token(Token = "0x600100A")]
			[Address(RVA = "0xBD7CA4", Offset = "0xBD7CA4", VA = "0xBD7CA4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600100B")]
			[Address(RVA = "0xBD7CC0", Offset = "0xBD7CC0", VA = "0xBD7CC0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600100C")]
			[Address(RVA = "0xBD87C8", Offset = "0xBD87C8", VA = "0xBD87C8")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x600100E")]
			[Address(RVA = "0xBD8820", Offset = "0xBD8820", VA = "0xBD8820", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x6001007")]
		[Address(RVA = "0xBD7C0C", Offset = "0xBD7C0C", VA = "0xBD7C0C")]
		[IteratorStateMachine(typeof(<ExecutePass>d__0))]
		public IEnumerator ExecutePass(MagicLightProbes parent)
		{
			return null;
		}

		[Token(Token = "0x6001008")]
		[Address(RVA = "0xBD7C9C", Offset = "0xBD7C9C", VA = "0xBD7C9C")]
		public DublicateVertical()
		{
		}
	}
	[Token(Token = "0x200024A")]
	public static class RandomGen
	{
		[Token(Token = "0x4000FBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static System.Random _global;

		[Token(Token = "0x4000FBC")]
		[ThreadStatic]
		private static System.Random _local;

		[Token(Token = "0x6001010")]
		[Address(RVA = "0xBD8868", Offset = "0xBD8868", VA = "0xBD8868")]
		public static int Next(int min, int max)
		{
			return default(int);
		}
	}
	[Token(Token = "0x200024B")]
	public class EquivalentProbesOptimization
	{
		[Token(Token = "0x200024C")]
		[CompilerGenerated]
		private sealed class <ExecutePass>d__0 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000FBD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000FBE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000FBF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MagicLightProbes parent;

			[Token(Token = "0x4000FC0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public MLPVolume currentVolume;

			[Token(Token = "0x4000FC1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public bool realtimeEditing;

			[Token(Token = "0x4000FC2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private UnityEngine.Vector3[] <exit>5__2;

			[Token(Token = "0x4000FC3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private List<MLPPointData> <tempList>5__3;

			[Token(Token = "0x4000FC4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private int <i>5__4;

			[Token(Token = "0x1700026D")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001017")]
				[Address(RVA = "0xBD92BC", Offset = "0xBD92BC", VA = "0xBD92BC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700026E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001019")]
				[Address(RVA = "0xBD9304", Offset = "0xBD9304", VA = "0xBD9304", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001014")]
			[Address(RVA = "0xBD8B58", Offset = "0xBD8B58", VA = "0xBD8B58")]
			[DebuggerHidden]
			public <ExecutePass>d__0(int <>1__state)
			{
			}

			[Token(Token = "0x6001015")]
			[Address(RVA = "0xBD8B88", Offset = "0xBD8B88", VA = "0xBD8B88", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001016")]
			[Address(RVA = "0xBD8B8C", Offset = "0xBD8B8C", VA = "0xBD8B8C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001018")]
			[Address(RVA = "0xBD92C4", Offset = "0xBD92C4", VA = "0xBD92C4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x6001012")]
		[Address(RVA = "0xBD8AD8", Offset = "0xBD8AD8", VA = "0xBD8AD8")]
		[IteratorStateMachine(typeof(<ExecutePass>d__0))]
		public IEnumerator ExecutePass(MagicLightProbes parent, [Optional] MLPVolume currentVolume, bool realtimeEditing = false)
		{
			return null;
		}

		[Token(Token = "0x6001013")]
		[Address(RVA = "0xBD8B80", Offset = "0xBD8B80", VA = "0xBD8B80")]
		public EquivalentProbesOptimization()
		{
		}
	}
	[Token(Token = "0x200024D")]
	public class PartialVolumeFilling
	{
		[Token(Token = "0x200024E")]
		public enum TargetPoint
		{
			[Token(Token = "0x4000FC6")]
			Unlit,
			[Token(Token = "0x4000FC7")]
			Equivalent,
			[Token(Token = "0x4000FC8")]
			Free
		}

		[Token(Token = "0x200024F")]
		[CompilerGenerated]
		private sealed class <ExecutePass>d__1 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000FC9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000FCA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000FCB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TargetPoint targetPoint;

			[Token(Token = "0x4000FCC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public MagicLightProbes parent;

			[Token(Token = "0x4000FCD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public MLPVolume currentVolume;

			[Token(Token = "0x4000FCE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public bool realtimeEditing;

			[Token(Token = "0x4000FCF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private List<MLPPointData> <tempList>5__2;

			[Token(Token = "0x4000FD0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private List<UnityEngine.Vector3> <realTimeEditingList>5__3;

			[Token(Token = "0x4000FD1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private List<UnityEngine.Vector3> <targetPoints>5__4;

			[Token(Token = "0x4000FD2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private float <fillingRate>5__5;

			[Token(Token = "0x4000FD3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private UnityEngine.Vector3[] <exit>5__6;

			[Token(Token = "0x4000FD4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			private int <i>5__7;

			[Token(Token = "0x1700026F")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600101F")]
				[Address(RVA = "0xBDA35C", Offset = "0xBDA35C", VA = "0xBDA35C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000270")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001021")]
				[Address(RVA = "0xBDA3A4", Offset = "0xBDA3A4", VA = "0xBDA3A4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600101C")]
			[Address(RVA = "0xBD939C", Offset = "0xBD939C", VA = "0xBD939C")]
			[DebuggerHidden]
			public <ExecutePass>d__1(int <>1__state)
			{
			}

			[Token(Token = "0x600101D")]
			[Address(RVA = "0xBD93CC", Offset = "0xBD93CC", VA = "0xBD93CC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600101E")]
			[Address(RVA = "0xBD93D0", Offset = "0xBD93D0", VA = "0xBD93D0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001020")]
			[Address(RVA = "0xBDA364", Offset = "0xBDA364", VA = "0xBDA364", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x600101A")]
		[Address(RVA = "0xBD930C", Offset = "0xBD930C", VA = "0xBD930C")]
		[IteratorStateMachine(typeof(<ExecutePass>d__1))]
		public IEnumerator ExecutePass(MagicLightProbes parent, TargetPoint targetPoint, [Optional] MLPVolume currentVolume, bool realtimeEditing = false)
		{
			return null;
		}

		[Token(Token = "0x600101B")]
		[Address(RVA = "0xBD93C4", Offset = "0xBD93C4", VA = "0xBD93C4")]
		public PartialVolumeFilling()
		{
		}
	}
	[Token(Token = "0x2000250")]
	public class RemoveUnusedPoints
	{
		[Token(Token = "0x2000251")]
		[CompilerGenerated]
		private sealed class <ExecutePass>d__0 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000FD5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000FD6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000FD7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MagicLightProbes parent;

			[Token(Token = "0x4000FD8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private List<MLPPointData> <pointsToRemove>5__2;

			[Token(Token = "0x4000FD9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private int <i>5__3;

			[Token(Token = "0x17000271")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001027")]
				[Address(RVA = "0xBDA7A4", Offset = "0xBDA7A4", VA = "0xBDA7A4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000272")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001029")]
				[Address(RVA = "0xBDA7EC", Offset = "0xBDA7EC", VA = "0xBDA7EC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001024")]
			[Address(RVA = "0xBDA414", Offset = "0xBDA414", VA = "0xBDA414")]
			[DebuggerHidden]
			public <ExecutePass>d__0(int <>1__state)
			{
			}

			[Token(Token = "0x6001025")]
			[Address(RVA = "0xBDA444", Offset = "0xBDA444", VA = "0xBDA444", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001026")]
			[Address(RVA = "0xBDA448", Offset = "0xBDA448", VA = "0xBDA448", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001028")]
			[Address(RVA = "0xBDA7AC", Offset = "0xBDA7AC", VA = "0xBDA7AC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x6001022")]
		[Address(RVA = "0xBDA3AC", Offset = "0xBDA3AC", VA = "0xBDA3AC")]
		[IteratorStateMachine(typeof(<ExecutePass>d__0))]
		public IEnumerator ExecutePass(MagicLightProbes parent)
		{
			return null;
		}

		[Token(Token = "0x6001023")]
		[Address(RVA = "0xBDA43C", Offset = "0xBDA43C", VA = "0xBDA43C")]
		public RemoveUnusedPoints()
		{
		}
	}
	[Token(Token = "0x2000252")]
	public class SetDistanceFromGeometry
	{
		[Token(Token = "0x2000253")]
		[CompilerGenerated]
		private sealed class <ExecutePass>d__0 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000FDA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000FDB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000FDC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MLPVolume currentVolume;

			[Token(Token = "0x4000FDD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public MagicLightProbes parent;

			[Token(Token = "0x4000FDE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private UnityEngine.Vector3[] <exit>5__2;

			[Token(Token = "0x4000FDF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int <i>5__3;

			[Token(Token = "0x17000273")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600102F")]
				[Address(RVA = "0xBDAE20", Offset = "0xBDAE20", VA = "0xBDAE20", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000274")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001031")]
				[Address(RVA = "0xBDAE68", Offset = "0xBDAE68", VA = "0xBDAE68", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600102C")]
			[Address(RVA = "0xBDA868", Offset = "0xBDA868", VA = "0xBDA868")]
			[DebuggerHidden]
			public <ExecutePass>d__0(int <>1__state)
			{
			}

			[Token(Token = "0x600102D")]
			[Address(RVA = "0xBDA898", Offset = "0xBDA898", VA = "0xBDA898", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600102E")]
			[Address(RVA = "0xBDA89C", Offset = "0xBDA89C", VA = "0xBDA89C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001030")]
			[Address(RVA = "0xBDAE28", Offset = "0xBDAE28", VA = "0xBDAE28", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x600102A")]
		[Address(RVA = "0xBDA7F4", Offset = "0xBDA7F4", VA = "0xBDA7F4")]
		[IteratorStateMachine(typeof(<ExecutePass>d__0))]
		public IEnumerator ExecutePass(MagicLightProbes parent, MLPVolume currentVolume)
		{
			return null;
		}

		[Token(Token = "0x600102B")]
		[Address(RVA = "0xBDA890", Offset = "0xBDA890", VA = "0xBDA890")]
		public SetDistanceFromGeometry()
		{
		}
	}
}
namespace HellTap.MeshDecimator
{
	[Token(Token = "0x2000254")]
	public struct BoneWeight : IEquatable<BoneWeight>
	{
		[Token(Token = "0x4000FE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int boneIndex0;

		[Token(Token = "0x4000FE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int boneIndex1;

		[Token(Token = "0x4000FE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int boneIndex2;

		[Token(Token = "0x4000FE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int boneIndex3;

		[Token(Token = "0x4000FE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float boneWeight0;

		[Token(Token = "0x4000FE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float boneWeight1;

		[Token(Token = "0x4000FE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float boneWeight2;

		[Token(Token = "0x4000FE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float boneWeight3;

		[Token(Token = "0x6001032")]
		[Address(RVA = "0xBDAE70", Offset = "0xBDAE70", VA = "0xBDAE70")]
		public BoneWeight(int boneIndex0, int boneIndex1, int boneIndex2, int boneIndex3, float boneWeight0, float boneWeight1, float boneWeight2, float boneWeight3)
		{
		}

		[Token(Token = "0x6001033")]
		[Address(RVA = "0xBDAE84", Offset = "0xBDAE84", VA = "0xBDAE84")]
		public static bool operator ==(BoneWeight lhs, BoneWeight rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x6001034")]
		[Address(RVA = "0xBDAF74", Offset = "0xBDAF74", VA = "0xBDAF74")]
		public static bool operator !=(BoneWeight lhs, BoneWeight rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x6001035")]
		[Address(RVA = "0xBDAFAC", Offset = "0xBDAFAC", VA = "0xBDAFAC")]
		private void MergeBoneWeight(int boneIndex, float weight)
		{
		}

		[Token(Token = "0x6001036")]
		[Address(RVA = "0xBDB08C", Offset = "0xBDB08C", VA = "0xBDB08C")]
		private void Normalize()
		{
		}

		[Token(Token = "0x6001037")]
		[Address(RVA = "0xBDB140", Offset = "0xBDB140", VA = "0xBDB140", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6001038")]
		[Address(RVA = "0xBDB204", Offset = "0xBDB204", VA = "0xBDB204", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001039")]
		[Address(RVA = "0xBDB2EC", Offset = "0xBDB2EC", VA = "0xBDB2EC", Slot = "4")]
		public bool Equals(BoneWeight other)
		{
			return default(bool);
		}

		[Token(Token = "0x600103A")]
		[Address(RVA = "0xBDB378", Offset = "0xBDB378", VA = "0xBDB378", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x600103B")]
		[Address(RVA = "0xBDB638", Offset = "0xBDB638", VA = "0xBDB638")]
		public static void Merge(ref BoneWeight a, ref BoneWeight b)
		{
		}
	}
	[Token(Token = "0x2000255")]
	public interface ILogger
	{
		[Token(Token = "0x600103C")]
		void LogVerbose(string text);

		[Token(Token = "0x600103D")]
		void LogWarning(string text);

		[Token(Token = "0x600103E")]
		void LogError(string text);
	}
	[Token(Token = "0x2000256")]
	public static class Logging
	{
		[Token(Token = "0x4000FE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static ILogger logger;

		[Token(Token = "0x4000FE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static object syncObj;

		[Token(Token = "0x17000275")]
		public static ILogger Logger
		{
			[Token(Token = "0x600103F")]
			[Address(RVA = "0xBDB6BC", Offset = "0xBDB6BC", VA = "0xBDB6BC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001040")]
			[Address(RVA = "0xBDB714", Offset = "0xBDB714", VA = "0xBDB714")]
			set
			{
			}
		}

		[Token(Token = "0x6001041")]
		[Address(RVA = "0xBDB82C", Offset = "0xBDB82C", VA = "0xBDB82C")]
		static Logging()
		{
		}

		[Token(Token = "0x6001042")]
		[Address(RVA = "0xBDB8E8", Offset = "0xBDB8E8", VA = "0xBDB8E8")]
		public static void LogVerbose(string text)
		{
		}

		[Token(Token = "0x6001043")]
		[Address(RVA = "0xBDBA98", Offset = "0xBDBA98", VA = "0xBDBA98")]
		public static void LogVerbose(string format, params object[] args)
		{
		}

		[Token(Token = "0x6001044")]
		[Address(RVA = "0xBDBB10", Offset = "0xBDBB10", VA = "0xBDBB10")]
		public static void LogWarning(string text)
		{
		}

		[Token(Token = "0x6001045")]
		[Address(RVA = "0xBDBCC4", Offset = "0xBDBCC4", VA = "0xBDBCC4")]
		public static void LogWarning(string format, params object[] args)
		{
		}

		[Token(Token = "0x6001046")]
		[Address(RVA = "0xBDBD3C", Offset = "0xBDBD3C", VA = "0xBDBD3C")]
		public static void LogError(string text)
		{
		}

		[Token(Token = "0x6001047")]
		[Address(RVA = "0xBDBEF0", Offset = "0xBDBEF0", VA = "0xBDBEF0")]
		public static void LogError(string format, params object[] args)
		{
		}
	}
	[Token(Token = "0x2000257")]
	public sealed class Mesh
	{
		[Token(Token = "0x4000FEA")]
		public const int UVChannelCount = 4;

		[Token(Token = "0x4000FEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Vector3d[] vertices;

		[Token(Token = "0x4000FEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int[][] indices;

		[Token(Token = "0x4000FED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private HellTap.MeshDecimator.Math.Vector3[] normals;

		[Token(Token = "0x4000FEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private HellTap.MeshDecimator.Math.Vector4[] tangents;

		[Token(Token = "0x4000FEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private HellTap.MeshDecimator.Math.Vector2[][] uvs2D;

		[Token(Token = "0x4000FF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private HellTap.MeshDecimator.Math.Vector3[][] uvs3D;

		[Token(Token = "0x4000FF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private HellTap.MeshDecimator.Math.Vector4[][] uvs4D;

		[Token(Token = "0x4000FF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private HellTap.MeshDecimator.Math.Vector4[] colors;

		[Token(Token = "0x4000FF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private BoneWeight[] boneWeights;

		[Token(Token = "0x4000FF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int[] emptyIndices;

		[Token(Token = "0x17000276")]
		public int VertexCount
		{
			[Token(Token = "0x6001048")]
			[Address(RVA = "0xBDBF68", Offset = "0xBDBF68", VA = "0xBDBF68")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000277")]
		public int SubMeshCount
		{
			[Token(Token = "0x6001049")]
			[Address(RVA = "0xBDBF84", Offset = "0xBDBF84", VA = "0xBDBF84")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600104A")]
			[Address(RVA = "0xBDBFA0", Offset = "0xBDBFA0", VA = "0xBDBFA0")]
			set
			{
			}
		}

		[Token(Token = "0x17000278")]
		public int TriangleCount
		{
			[Token(Token = "0x600104B")]
			[Address(RVA = "0xBDC090", Offset = "0xBDC090", VA = "0xBDC090")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000279")]
		public Vector3d[] Vertices
		{
			[Token(Token = "0x600104C")]
			[Address(RVA = "0xBDC110", Offset = "0xBDC110", VA = "0xBDC110")]
			get
			{
				return null;
			}
			[Token(Token = "0x600104D")]
			[Address(RVA = "0xBDC118", Offset = "0xBDC118", VA = "0xBDC118")]
			set
			{
			}
		}

		[Token(Token = "0x1700027A")]
		public int[] Indices
		{
			[Token(Token = "0x600104E")]
			[Address(RVA = "0xBDC19C", Offset = "0xBDC19C", VA = "0xBDC19C")]
			get
			{
				return null;
			}
			[Token(Token = "0x600104F")]
			[Address(RVA = "0xBDC2FC", Offset = "0xBDC2FC", VA = "0xBDC2FC")]
			set
			{
			}
		}

		[Token(Token = "0x1700027B")]
		public HellTap.MeshDecimator.Math.Vector3[] Normals
		{
			[Token(Token = "0x6001050")]
			[Address(RVA = "0xBDC54C", Offset = "0xBDC54C", VA = "0xBDC54C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001051")]
			[Address(RVA = "0xBDC554", Offset = "0xBDC554", VA = "0xBDC554")]
			set
			{
			}
		}

		[Token(Token = "0x1700027C")]
		public HellTap.MeshDecimator.Math.Vector4[] Tangents
		{
			[Token(Token = "0x6001052")]
			[Address(RVA = "0xBDC650", Offset = "0xBDC650", VA = "0xBDC650")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001053")]
			[Address(RVA = "0xBDC658", Offset = "0xBDC658", VA = "0xBDC658")]
			set
			{
			}
		}

		[Token(Token = "0x1700027D")]
		public HellTap.MeshDecimator.Math.Vector2[] UV1
		{
			[Token(Token = "0x6001054")]
			[Address(RVA = "0xBDC754", Offset = "0xBDC754", VA = "0xBDC754")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001055")]
			[Address(RVA = "0xBDC808", Offset = "0xBDC808", VA = "0xBDC808")]
			set
			{
			}
		}

		[Token(Token = "0x1700027E")]
		public HellTap.MeshDecimator.Math.Vector2[] UV2
		{
			[Token(Token = "0x6001056")]
			[Address(RVA = "0xBDCA84", Offset = "0xBDCA84", VA = "0xBDCA84")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001057")]
			[Address(RVA = "0xBDCAB4", Offset = "0xBDCAB4", VA = "0xBDCAB4")]
			set
			{
			}
		}

		[Token(Token = "0x1700027F")]
		public HellTap.MeshDecimator.Math.Vector2[] UV3
		{
			[Token(Token = "0x6001058")]
			[Address(RVA = "0xBDCAC0", Offset = "0xBDCAC0", VA = "0xBDCAC0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001059")]
			[Address(RVA = "0xBDCAF0", Offset = "0xBDCAF0", VA = "0xBDCAF0")]
			set
			{
			}
		}

		[Token(Token = "0x17000280")]
		public HellTap.MeshDecimator.Math.Vector2[] UV4
		{
			[Token(Token = "0x600105A")]
			[Address(RVA = "0xBDCAFC", Offset = "0xBDCAFC", VA = "0xBDCAFC")]
			get
			{
				return null;
			}
			[Token(Token = "0x600105B")]
			[Address(RVA = "0xBDCB2C", Offset = "0xBDCB2C", VA = "0xBDCB2C")]
			set
			{
			}
		}

		[Token(Token = "0x17000281")]
		public HellTap.MeshDecimator.Math.Vector4[] Colors
		{
			[Token(Token = "0x600105C")]
			[Address(RVA = "0xBDCB38", Offset = "0xBDCB38", VA = "0xBDCB38")]
			get
			{
				return null;
			}
			[Token(Token = "0x600105D")]
			[Address(RVA = "0xBDCB40", Offset = "0xBDCB40", VA = "0xBDCB40")]
			set
			{
			}
		}

		[Token(Token = "0x17000282")]
		public BoneWeight[] BoneWeights
		{
			[Token(Token = "0x600105E")]
			[Address(RVA = "0xBDCC3C", Offset = "0xBDCC3C", VA = "0xBDCC3C")]
			get
			{
				return null;
			}
			[Token(Token = "0x600105F")]
			[Address(RVA = "0xBDCC44", Offset = "0xBDCC44", VA = "0xBDCC44")]
			set
			{
			}
		}

		[Token(Token = "0x6001060")]
		[Address(RVA = "0xBDCD40", Offset = "0xBDCD40", VA = "0xBDCD40")]
		public Mesh(Vector3d[] vertices, int[] indices)
		{
		}

		[Token(Token = "0x6001061")]
		[Address(RVA = "0xBDCED8", Offset = "0xBDCED8", VA = "0xBDCED8")]
		public Mesh(Vector3d[] vertices, int[][] indices)
		{
		}

		[Token(Token = "0x6001062")]
		[Address(RVA = "0xBDC188", Offset = "0xBDC188", VA = "0xBDC188")]
		private void ClearVertexAttributes()
		{
		}

		[Token(Token = "0x6001063")]
		[Address(RVA = "0xBDD070", Offset = "0xBDD070", VA = "0xBDD070")]
		public void RecalculateNormals()
		{
		}

		[Token(Token = "0x6001064")]
		[Address(RVA = "0xBDD448", Offset = "0xBDD448", VA = "0xBDD448")]
		public void RecalculateTangents()
		{
		}

		[Token(Token = "0x6001065")]
		[Address(RVA = "0xBDDBA4", Offset = "0xBDDBA4", VA = "0xBDDBA4")]
		public int GetTriangleCount(int subMeshIndex)
		{
			return default(int);
		}

		[Token(Token = "0x6001066")]
		[Address(RVA = "0xBDDC38", Offset = "0xBDDC38", VA = "0xBDDC38")]
		public int[] GetIndices(int subMeshIndex)
		{
			return null;
		}

		[Token(Token = "0x6001067")]
		[Address(RVA = "0xBDC3F0", Offset = "0xBDC3F0", VA = "0xBDC3F0")]
		public void SetIndices(int subMeshIndex, int[] indices)
		{
		}

		[Token(Token = "0x6001068")]
		[Address(RVA = "0xBDDD04", Offset = "0xBDDD04", VA = "0xBDDD04")]
		public int GetUVDimension(int channel)
		{
			return default(int);
		}

		[Token(Token = "0x6001069")]
		[Address(RVA = "0xBDC780", Offset = "0xBDC780", VA = "0xBDC780")]
		public HellTap.MeshDecimator.Math.Vector2[] GetUVs2D(int channel)
		{
			return null;
		}

		[Token(Token = "0x600106A")]
		[Address(RVA = "0xBDDDE4", Offset = "0xBDDDE4", VA = "0xBDDDE4")]
		public HellTap.MeshDecimator.Math.Vector3[] GetUVs3D(int channel)
		{
			return null;
		}

		[Token(Token = "0x600106B")]
		[Address(RVA = "0xBDDE6C", Offset = "0xBDDE6C", VA = "0xBDDE6C")]
		public HellTap.MeshDecimator.Math.Vector4[] GetUVs4D(int channel)
		{
			return null;
		}

		[Token(Token = "0x600106C")]
		[Address(RVA = "0xBDDEF4", Offset = "0xBDDEF4", VA = "0xBDDEF4")]
		public void GetUVs(int channel, List<HellTap.MeshDecimator.Math.Vector2> uvs)
		{
		}

		[Token(Token = "0x600106D")]
		[Address(RVA = "0xBDE028", Offset = "0xBDE028", VA = "0xBDE028")]
		public void GetUVs(int channel, List<HellTap.MeshDecimator.Math.Vector3> uvs)
		{
		}

		[Token(Token = "0x600106E")]
		[Address(RVA = "0xBDE15C", Offset = "0xBDE15C", VA = "0xBDE15C")]
		public void GetUVs(int channel, List<HellTap.MeshDecimator.Math.Vector4> uvs)
		{
		}

		[Token(Token = "0x600106F")]
		[Address(RVA = "0xBDC814", Offset = "0xBDC814", VA = "0xBDC814")]
		public void SetUVs(int channel, HellTap.MeshDecimator.Math.Vector2[] uvs)
		{
		}

		[Token(Token = "0x6001070")]
		[Address(RVA = "0xBDE290", Offset = "0xBDE290", VA = "0xBDE290")]
		public void SetUVs(int channel, HellTap.MeshDecimator.Math.Vector3[] uvs)
		{
		}

		[Token(Token = "0x6001071")]
		[Address(RVA = "0xBDE504", Offset = "0xBDE504", VA = "0xBDE504")]
		public void SetUVs(int channel, HellTap.MeshDecimator.Math.Vector4[] uvs)
		{
		}

		[Token(Token = "0x6001072")]
		[Address(RVA = "0xBDE778", Offset = "0xBDE778", VA = "0xBDE778")]
		public void SetUVs(int channel, List<HellTap.MeshDecimator.Math.Vector2> uvs)
		{
		}

		[Token(Token = "0x6001073")]
		[Address(RVA = "0xBDEA10", Offset = "0xBDEA10", VA = "0xBDEA10")]
		public void SetUVs(int channel, List<HellTap.MeshDecimator.Math.Vector3> uvs)
		{
		}

		[Token(Token = "0x6001074")]
		[Address(RVA = "0xBDECA8", Offset = "0xBDECA8", VA = "0xBDECA8")]
		public void SetUVs(int channel, List<HellTap.MeshDecimator.Math.Vector4> uvs)
		{
		}

		[Token(Token = "0x6001075")]
		[Address(RVA = "0xBDEF40", Offset = "0xBDEF40", VA = "0xBDEF40", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000258")]
	public enum Algorithm
	{
		[Token(Token = "0x4000FF6")]
		Default,
		[Token(Token = "0x4000FF7")]
		FastQuadricMesh
	}
	[Token(Token = "0x2000259")]
	public static class MeshDecimation
	{
		[Token(Token = "0x6001077")]
		[Address(RVA = "0xBDF030", Offset = "0xBDF030", VA = "0xBDF030")]
		public static DecimationAlgorithm CreateAlgorithm(Algorithm algorithm, bool preserveBorders = false, bool preserveSeams = false, bool preserveFoldovers = false)
		{
			return null;
		}

		[Token(Token = "0x6001078")]
		[Address(RVA = "0xBDF118", Offset = "0xBDF118", VA = "0xBDF118")]
		public static Mesh DecimateMesh(Mesh mesh, int targetTriangleCount)
		{
			return null;
		}

		[Token(Token = "0x6001079")]
		[Address(RVA = "0xBDF134", Offset = "0xBDF134", VA = "0xBDF134")]
		public static Mesh DecimateMesh(Algorithm algorithm, Mesh mesh, int targetTriangleCount, bool preserveBorders = false, bool preserveSeams = false, bool preserveFoldovers = false)
		{
			return null;
		}

		[Token(Token = "0x600107A")]
		[Address(RVA = "0xBDF1B8", Offset = "0xBDF1B8", VA = "0xBDF1B8")]
		public static Mesh DecimateMesh(DecimationAlgorithm algorithm, Mesh mesh, int targetTriangleCount)
		{
			return null;
		}

		[Token(Token = "0x600107B")]
		[Address(RVA = "0xBDF298", Offset = "0xBDF298", VA = "0xBDF298")]
		public static Mesh DecimateMeshLossless(Mesh mesh)
		{
			return null;
		}

		[Token(Token = "0x600107C")]
		[Address(RVA = "0xBDF2B0", Offset = "0xBDF2B0", VA = "0xBDF2B0")]
		public static Mesh DecimateMeshLossless(Algorithm algorithm, Mesh mesh, bool preserveBorders = false, bool preserveSeams = false, bool preserveFoldovers = false)
		{
			return null;
		}

		[Token(Token = "0x600107D")]
		[Address(RVA = "0xBDF324", Offset = "0xBDF324", VA = "0xBDF324")]
		public static Mesh DecimateMeshLossless(DecimationAlgorithm algorithm, Mesh mesh)
		{
			return null;
		}
	}
}
namespace HellTap.MeshDecimator.Math
{
	[Token(Token = "0x200025A")]
	public static class MathHelper
	{
		[Token(Token = "0x4000FF8")]
		public const float PI = (float)System.Math.PI;

		[Token(Token = "0x4000FF9")]
		public const double PId = System.Math.PI;

		[Token(Token = "0x4000FFA")]
		public const float Deg2Rad = (float)System.Math.PI / 180f;

		[Token(Token = "0x4000FFB")]
		public const double Deg2Radd = System.Math.PI / 180.0;

		[Token(Token = "0x4000FFC")]
		public const float Rad2Deg = 180f / (float)System.Math.PI;

		[Token(Token = "0x4000FFD")]
		public const double Rad2Degd = 180.0 / System.Math.PI;

		[Token(Token = "0x600107E")]
		[Address(RVA = "0xBDC084", Offset = "0xBDC084", VA = "0xBDC084")]
		public static int Min(int val1, int val2)
		{
			return default(int);
		}

		[Token(Token = "0x600107F")]
		[Address(RVA = "0xBDF3F0", Offset = "0xBDF3F0", VA = "0xBDF3F0")]
		public static int Min(int val1, int val2, int val3)
		{
			return default(int);
		}

		[Token(Token = "0x6001080")]
		[Address(RVA = "0xBDF410", Offset = "0xBDF410", VA = "0xBDF410")]
		public static float Min(float val1, float val2)
		{
			return default(float);
		}

		[Token(Token = "0x6001081")]
		[Address(RVA = "0xBDF41C", Offset = "0xBDF41C", VA = "0xBDF41C")]
		public static float Min(float val1, float val2, float val3)
		{
			return default(float);
		}

		[Token(Token = "0x6001082")]
		[Address(RVA = "0xBDF43C", Offset = "0xBDF43C", VA = "0xBDF43C")]
		public static double Min(double val1, double val2)
		{
			return default(double);
		}

		[Token(Token = "0x6001083")]
		[Address(RVA = "0xBDF448", Offset = "0xBDF448", VA = "0xBDF448")]
		public static double Min(double val1, double val2, double val3)
		{
			return default(double);
		}

		[Token(Token = "0x6001084")]
		[Address(RVA = "0xBDF468", Offset = "0xBDF468", VA = "0xBDF468")]
		public static int Max(int val1, int val2)
		{
			return default(int);
		}

		[Token(Token = "0x6001085")]
		[Address(RVA = "0xBDF474", Offset = "0xBDF474", VA = "0xBDF474")]
		public static int Max(int val1, int val2, int val3)
		{
			return default(int);
		}

		[Token(Token = "0x6001086")]
		[Address(RVA = "0xBDF494", Offset = "0xBDF494", VA = "0xBDF494")]
		public static float Max(float val1, float val2)
		{
			return default(float);
		}

		[Token(Token = "0x6001087")]
		[Address(RVA = "0xBDF4A0", Offset = "0xBDF4A0", VA = "0xBDF4A0")]
		public static float Max(float val1, float val2, float val3)
		{
			return default(float);
		}

		[Token(Token = "0x6001088")]
		[Address(RVA = "0xBDF4C0", Offset = "0xBDF4C0", VA = "0xBDF4C0")]
		public static double Max(double val1, double val2)
		{
			return default(double);
		}

		[Token(Token = "0x6001089")]
		[Address(RVA = "0xBDF4CC", Offset = "0xBDF4CC", VA = "0xBDF4CC")]
		public static double Max(double val1, double val2, double val3)
		{
			return default(double);
		}

		[Token(Token = "0x600108A")]
		[Address(RVA = "0xBDF4EC", Offset = "0xBDF4EC", VA = "0xBDF4EC")]
		public static float Clamp(float value, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x600108B")]
		[Address(RVA = "0xBDF508", Offset = "0xBDF508", VA = "0xBDF508")]
		public static double Clamp(double value, double min, double max)
		{
			return default(double);
		}

		[Token(Token = "0x600108C")]
		[Address(RVA = "0xBDF524", Offset = "0xBDF524", VA = "0xBDF524")]
		public static float Clamp01(float value)
		{
			return default(float);
		}

		[Token(Token = "0x600108D")]
		[Address(RVA = "0xBDF540", Offset = "0xBDF540", VA = "0xBDF540")]
		public static double Clamp01(double value)
		{
			return default(double);
		}

		[Token(Token = "0x600108E")]
		[Address(RVA = "0xBDF55C", Offset = "0xBDF55C", VA = "0xBDF55C")]
		public static float TriangleArea(ref Vector3 p0, ref Vector3 p1, ref Vector3 p2)
		{
			return default(float);
		}

		[Token(Token = "0x600108F")]
		[Address(RVA = "0xBDF820", Offset = "0xBDF820", VA = "0xBDF820")]
		public static double TriangleArea(ref Vector3d p0, ref Vector3d p1, ref Vector3d p2)
		{
			return default(double);
		}
	}
	[Token(Token = "0x200025B")]
	public struct SymmetricMatrix
	{
		[Token(Token = "0x4000FFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public double m0;

		[Token(Token = "0x4000FFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public double m1;

		[Token(Token = "0x4001000")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public double m2;

		[Token(Token = "0x4001001")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public double m3;

		[Token(Token = "0x4001002")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public double m4;

		[Token(Token = "0x4001003")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public double m5;

		[Token(Token = "0x4001004")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public double m6;

		[Token(Token = "0x4001005")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public double m7;

		[Token(Token = "0x4001006")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public double m8;

		[Token(Token = "0x4001007")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public double m9;

		[Token(Token = "0x17000283")]
		public double this[int index]
		{
			[Token(Token = "0x6001090")]
			[Address(RVA = "0xBDF97C", Offset = "0xBDF97C", VA = "0xBDF97C")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x6001091")]
		[Address(RVA = "0xBDFA30", Offset = "0xBDFA30", VA = "0xBDFA30")]
		public SymmetricMatrix(double c)
		{
		}

		[Token(Token = "0x6001092")]
		[Address(RVA = "0xBDFA48", Offset = "0xBDFA48", VA = "0xBDFA48")]
		public SymmetricMatrix(double m0, double m1, double m2, double m3, double m4, double m5, double m6, double m7, double m8, double m9)
		{
		}

		[Token(Token = "0x6001093")]
		[Address(RVA = "0xBDFA64", Offset = "0xBDFA64", VA = "0xBDFA64")]
		public SymmetricMatrix(double a, double b, double c, double d)
		{
		}

		[Token(Token = "0x6001094")]
		[Address(RVA = "0xBDFAA4", Offset = "0xBDFAA4", VA = "0xBDFAA4")]
		public static SymmetricMatrix operator +(SymmetricMatrix a, SymmetricMatrix b)
		{
			return default(SymmetricMatrix);
		}

		[Token(Token = "0x6001095")]
		[Address(RVA = "0xBDFAE0", Offset = "0xBDFAE0", VA = "0xBDFAE0")]
		internal double Determinant1()
		{
			return default(double);
		}

		[Token(Token = "0x6001096")]
		[Address(RVA = "0xBDFB38", Offset = "0xBDFB38", VA = "0xBDFB38")]
		internal double Determinant2()
		{
			return default(double);
		}

		[Token(Token = "0x6001097")]
		[Address(RVA = "0xBDFB94", Offset = "0xBDFB94", VA = "0xBDFB94")]
		internal double Determinant3()
		{
			return default(double);
		}

		[Token(Token = "0x6001098")]
		[Address(RVA = "0xBDFBEC", Offset = "0xBDFBEC", VA = "0xBDFBEC")]
		internal double Determinant4()
		{
			return default(double);
		}

		[Token(Token = "0x6001099")]
		[Address(RVA = "0xBDFC48", Offset = "0xBDFC48", VA = "0xBDFC48")]
		public double Determinant(int a11, int a12, int a13, int a21, int a22, int a23, int a31, int a32, int a33)
		{
			return default(double);
		}
	}
	[Token(Token = "0x200025C")]
	public struct Vector2 : IEquatable<Vector2>
	{
		[Token(Token = "0x4001008")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Vector2 zero;

		[Token(Token = "0x4001009")]
		public const float Epsilon = 9.9999994E-11f;

		[Token(Token = "0x400100A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float x;

		[Token(Token = "0x400100B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float y;

		[Token(Token = "0x17000284")]
		public float Magnitude
		{
			[Token(Token = "0x600109A")]
			[Address(RVA = "0xBDFE40", Offset = "0xBDFE40", VA = "0xBDFE40")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000285")]
		public float MagnitudeSqr
		{
			[Token(Token = "0x600109B")]
			[Address(RVA = "0xBDFEAC", Offset = "0xBDFEAC", VA = "0xBDFEAC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000286")]
		public Vector2 Normalized
		{
			[Token(Token = "0x600109C")]
			[Address(RVA = "0xBDFEC0", Offset = "0xBDFEC0", VA = "0xBDFEC0")]
			get
			{
				return default(Vector2);
			}
		}

		[Token(Token = "0x17000287")]
		public float this[int index]
		{
			[Token(Token = "0x600109D")]
			[Address(RVA = "0xBDFFBC", Offset = "0xBDFFBC", VA = "0xBDFFBC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600109E")]
			[Address(RVA = "0xBE0028", Offset = "0xBE0028", VA = "0xBE0028")]
			set
			{
			}
		}

		[Token(Token = "0x600109F")]
		[Address(RVA = "0xBE0094", Offset = "0xBE0094", VA = "0xBE0094")]
		public Vector2(float value)
		{
		}

		[Token(Token = "0x60010A0")]
		[Address(RVA = "0xBE009C", Offset = "0xBE009C", VA = "0xBE009C")]
		public Vector2(float x, float y)
		{
		}

		[Token(Token = "0x60010A1")]
		[Address(RVA = "0xBE00A4", Offset = "0xBE00A4", VA = "0xBE00A4")]
		public static Vector2 operator +(Vector2 a, Vector2 b)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60010A2")]
		[Address(RVA = "0xBE00B0", Offset = "0xBE00B0", VA = "0xBE00B0")]
		public static Vector2 operator -(Vector2 a, Vector2 b)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60010A3")]
		[Address(RVA = "0xBE00BC", Offset = "0xBE00BC", VA = "0xBE00BC")]
		public static Vector2 operator *(Vector2 a, float d)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60010A4")]
		[Address(RVA = "0xBE00C8", Offset = "0xBE00C8", VA = "0xBE00C8")]
		public static Vector2 operator *(float d, Vector2 a)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60010A5")]
		[Address(RVA = "0xBE00D8", Offset = "0xBE00D8", VA = "0xBE00D8")]
		public static Vector2 operator /(Vector2 a, float d)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60010A6")]
		[Address(RVA = "0xBE00E4", Offset = "0xBE00E4", VA = "0xBE00E4")]
		public static Vector2 operator -(Vector2 a)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60010A7")]
		[Address(RVA = "0xBE00F0", Offset = "0xBE00F0", VA = "0xBE00F0")]
		public static bool operator ==(Vector2 lhs, Vector2 rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x60010A8")]
		[Address(RVA = "0xBE0180", Offset = "0xBE0180", VA = "0xBE0180")]
		public static bool operator !=(Vector2 lhs, Vector2 rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x60010A9")]
		[Address(RVA = "0xBE0210", Offset = "0xBE0210", VA = "0xBE0210")]
		public static explicit operator Vector2(Vector2d v)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60010AA")]
		[Address(RVA = "0xBE021C", Offset = "0xBE021C", VA = "0xBE021C")]
		public static implicit operator Vector2(Vector2i v)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60010AB")]
		[Address(RVA = "0xBE022C", Offset = "0xBE022C", VA = "0xBE022C")]
		public void Set(float x, float y)
		{
		}

		[Token(Token = "0x60010AC")]
		[Address(RVA = "0xBE0234", Offset = "0xBE0234", VA = "0xBE0234")]
		public void Scale(ref Vector2 scale)
		{
		}

		[Token(Token = "0x60010AD")]
		[Address(RVA = "0xBE0248", Offset = "0xBE0248", VA = "0xBE0248")]
		public void Normalize()
		{
		}

		[Token(Token = "0x60010AE")]
		[Address(RVA = "0xBE0284", Offset = "0xBE0284", VA = "0xBE0284")]
		public void Clamp(float min, float max)
		{
		}

		[Token(Token = "0x60010AF")]
		[Address(RVA = "0xBE02C4", Offset = "0xBE02C4", VA = "0xBE02C4", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60010B0")]
		[Address(RVA = "0xBE02F8", Offset = "0xBE02F8", VA = "0xBE02F8", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x60010B1")]
		[Address(RVA = "0xBE0380", Offset = "0xBE0380", VA = "0xBE0380", Slot = "4")]
		public bool Equals(Vector2 other)
		{
			return default(bool);
		}

		[Token(Token = "0x60010B2")]
		[Address(RVA = "0xBE03A4", Offset = "0xBE03A4", VA = "0xBE03A4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60010B3")]
		[Address(RVA = "0xBE0478", Offset = "0xBE0478", VA = "0xBE0478")]
		public string ToString(string format)
		{
			return null;
		}

		[Token(Token = "0x60010B4")]
		[Address(RVA = "0xBE053C", Offset = "0xBE053C", VA = "0xBE053C")]
		public static float Dot(ref Vector2 lhs, ref Vector2 rhs)
		{
			return default(float);
		}

		[Token(Token = "0x60010B5")]
		[Address(RVA = "0xBE0550", Offset = "0xBE0550", VA = "0xBE0550")]
		public static void Lerp(ref Vector2 a, ref Vector2 b, float t, out Vector2 result)
		{
		}

		[Token(Token = "0x60010B6")]
		[Address(RVA = "0xBE056C", Offset = "0xBE056C", VA = "0xBE056C")]
		public static void Scale(ref Vector2 a, ref Vector2 b, out Vector2 result)
		{
		}

		[Token(Token = "0x60010B7")]
		[Address(RVA = "0xBDFF2C", Offset = "0xBDFF2C", VA = "0xBDFF2C")]
		public static void Normalize(ref Vector2 value, out Vector2 result)
		{
		}
	}
	[Token(Token = "0x200025D")]
	public struct Vector2d : IEquatable<Vector2d>
	{
		[Token(Token = "0x400100C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Vector2d zero;

		[Token(Token = "0x400100D")]
		public const double Epsilon = double.Epsilon;

		[Token(Token = "0x400100E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public double x;

		[Token(Token = "0x400100F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public double y;

		[Token(Token = "0x17000288")]
		public double Magnitude
		{
			[Token(Token = "0x60010B9")]
			[Address(RVA = "0xBE05C8", Offset = "0xBE05C8", VA = "0xBE05C8")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000289")]
		public double MagnitudeSqr
		{
			[Token(Token = "0x60010BA")]
			[Address(RVA = "0xBE0634", Offset = "0xBE0634", VA = "0xBE0634")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x1700028A")]
		public Vector2d Normalized
		{
			[Token(Token = "0x60010BB")]
			[Address(RVA = "0xBE0648", Offset = "0xBE0648", VA = "0xBE0648")]
			get
			{
				return default(Vector2d);
			}
		}

		[Token(Token = "0x1700028B")]
		public double this[int index]
		{
			[Token(Token = "0x60010BC")]
			[Address(RVA = "0xBE0740", Offset = "0xBE0740", VA = "0xBE0740")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x60010BD")]
			[Address(RVA = "0xBE07AC", Offset = "0xBE07AC", VA = "0xBE07AC")]
			set
			{
			}
		}

		[Token(Token = "0x60010BE")]
		[Address(RVA = "0xBE0818", Offset = "0xBE0818", VA = "0xBE0818")]
		public Vector2d(double value)
		{
		}

		[Token(Token = "0x60010BF")]
		[Address(RVA = "0xBE0820", Offset = "0xBE0820", VA = "0xBE0820")]
		public Vector2d(double x, double y)
		{
		}

		[Token(Token = "0x60010C0")]
		[Address(RVA = "0xBE0828", Offset = "0xBE0828", VA = "0xBE0828")]
		public static Vector2d operator +(Vector2d a, Vector2d b)
		{
			return default(Vector2d);
		}

		[Token(Token = "0x60010C1")]
		[Address(RVA = "0xBE0834", Offset = "0xBE0834", VA = "0xBE0834")]
		public static Vector2d operator -(Vector2d a, Vector2d b)
		{
			return default(Vector2d);
		}

		[Token(Token = "0x60010C2")]
		[Address(RVA = "0xBE0840", Offset = "0xBE0840", VA = "0xBE0840")]
		public static Vector2d operator *(Vector2d a, double d)
		{
			return default(Vector2d);
		}

		[Token(Token = "0x60010C3")]
		[Address(RVA = "0xBE084C", Offset = "0xBE084C", VA = "0xBE084C")]
		public static Vector2d operator *(double d, Vector2d a)
		{
			return default(Vector2d);
		}

		[Token(Token = "0x60010C4")]
		[Address(RVA = "0xBE085C", Offset = "0xBE085C", VA = "0xBE085C")]
		public static Vector2d operator /(Vector2d a, double d)
		{
			return default(Vector2d);
		}

		[Token(Token = "0x60010C5")]
		[Address(RVA = "0xBE0868", Offset = "0xBE0868", VA = "0xBE0868")]
		public static Vector2d operator -(Vector2d a)
		{
			return default(Vector2d);
		}

		[Token(Token = "0x60010C6")]
		[Address(RVA = "0xBE0874", Offset = "0xBE0874", VA = "0xBE0874")]
		public static bool operator ==(Vector2d lhs, Vector2d rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x60010C7")]
		[Address(RVA = "0xBE0904", Offset = "0xBE0904", VA = "0xBE0904")]
		public static bool operator !=(Vector2d lhs, Vector2d rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x60010C8")]
		[Address(RVA = "0xBE0994", Offset = "0xBE0994", VA = "0xBE0994")]
		public static implicit operator Vector2d(Vector2 v)
		{
			return default(Vector2d);
		}

		[Token(Token = "0x60010C9")]
		[Address(RVA = "0xBE09A0", Offset = "0xBE09A0", VA = "0xBE09A0")]
		public static implicit operator Vector2d(Vector2i v)
		{
			return default(Vector2d);
		}

		[Token(Token = "0x60010CA")]
		[Address(RVA = "0xBE09B0", Offset = "0xBE09B0", VA = "0xBE09B0")]
		public void Set(double x, double y)
		{
		}

		[Token(Token = "0x60010CB")]
		[Address(RVA = "0xBE09B8", Offset = "0xBE09B8", VA = "0xBE09B8")]
		public void Scale(ref Vector2d scale)
		{
		}

		[Token(Token = "0x60010CC")]
		[Address(RVA = "0xBE09CC", Offset = "0xBE09CC", VA = "0xBE09CC")]
		public void Normalize()
		{
		}

		[Token(Token = "0x60010CD")]
		[Address(RVA = "0xBE0A08", Offset = "0xBE0A08", VA = "0xBE0A08")]
		public void Clamp(double min, double max)
		{
		}

		[Token(Token = "0x60010CE")]
		[Address(RVA = "0xBE0A48", Offset = "0xBE0A48", VA = "0xBE0A48", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60010CF")]
		[Address(RVA = "0xBE0B20", Offset = "0xBE0B20", VA = "0xBE0B20", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x60010D0")]
		[Address(RVA = "0xBE0BA8", Offset = "0xBE0BA8", VA = "0xBE0BA8", Slot = "4")]
		public bool Equals(Vector2d other)
		{
			return default(bool);
		}

		[Token(Token = "0x60010D1")]
		[Address(RVA = "0xBE0BCC", Offset = "0xBE0BCC", VA = "0xBE0BCC", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60010D2")]
		[Address(RVA = "0xBE0CA0", Offset = "0xBE0CA0", VA = "0xBE0CA0")]
		public string ToString(string format)
		{
			return null;
		}

		[Token(Token = "0x60010D3")]
		[Address(RVA = "0xBE0D64", Offset = "0xBE0D64", VA = "0xBE0D64")]
		public static double Dot(ref Vector2d lhs, ref Vector2d rhs)
		{
			return default(double);
		}

		[Token(Token = "0x60010D4")]
		[Address(RVA = "0xBE0D78", Offset = "0xBE0D78", VA = "0xBE0D78")]
		public static void Lerp(ref Vector2d a, ref Vector2d b, double t, out Vector2d result)
		{
		}

		[Token(Token = "0x60010D5")]
		[Address(RVA = "0xBE0D94", Offset = "0xBE0D94", VA = "0xBE0D94")]
		public static void Scale(ref Vector2d a, ref Vector2d b, out Vector2d result)
		{
		}

		[Token(Token = "0x60010D6")]
		[Address(RVA = "0xBE06B4", Offset = "0xBE06B4", VA = "0xBE06B4")]
		public static void Normalize(ref Vector2d value, out Vector2d result)
		{
		}
	}
	[Token(Token = "0x200025E")]
	public struct Vector2i : IEquatable<Vector2i>
	{
		[Token(Token = "0x4001010")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Vector2i zero;

		[Token(Token = "0x4001011")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int x;

		[Token(Token = "0x4001012")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int y;

		[Token(Token = "0x1700028C")]
		public int Magnitude
		{
			[Token(Token = "0x60010D8")]
			[Address(RVA = "0xBE0DF0", Offset = "0xBE0DF0", VA = "0xBE0DF0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700028D")]
		public int MagnitudeSqr
		{
			[Token(Token = "0x60010D9")]
			[Address(RVA = "0xBE0E6C", Offset = "0xBE0E6C", VA = "0xBE0E6C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700028E")]
		public int this[int index]
		{
			[Token(Token = "0x60010DA")]
			[Address(RVA = "0xBE0E7C", Offset = "0xBE0E7C", VA = "0xBE0E7C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60010DB")]
			[Address(RVA = "0xBE0EE8", Offset = "0xBE0EE8", VA = "0xBE0EE8")]
			set
			{
			}
		}

		[Token(Token = "0x60010DC")]
		[Address(RVA = "0xBE0F54", Offset = "0xBE0F54", VA = "0xBE0F54")]
		public Vector2i(int value)
		{
		}

		[Token(Token = "0x60010DD")]
		[Address(RVA = "0xBE0F5C", Offset = "0xBE0F5C", VA = "0xBE0F5C")]
		public Vector2i(int x, int y)
		{
		}

		[Token(Token = "0x60010DE")]
		[Address(RVA = "0xBE0F64", Offset = "0xBE0F64", VA = "0xBE0F64")]
		public static Vector2i operator +(Vector2i a, Vector2i b)
		{
			return default(Vector2i);
		}

		[Token(Token = "0x60010DF")]
		[Address(RVA = "0xBE0F7C", Offset = "0xBE0F7C", VA = "0xBE0F7C")]
		public static Vector2i operator -(Vector2i a, Vector2i b)
		{
			return default(Vector2i);
		}

		[Token(Token = "0x60010E0")]
		[Address(RVA = "0xBE0F94", Offset = "0xBE0F94", VA = "0xBE0F94")]
		public static Vector2i operator *(Vector2i a, int d)
		{
			return default(Vector2i);
		}

		[Token(Token = "0x60010E1")]
		[Address(RVA = "0xBE0FA8", Offset = "0xBE0FA8", VA = "0xBE0FA8")]
		public static Vector2i operator *(int d, Vector2i a)
		{
			return default(Vector2i);
		}

		[Token(Token = "0x60010E2")]
		[Address(RVA = "0xBE0FC0", Offset = "0xBE0FC0", VA = "0xBE0FC0")]
		public static Vector2i operator /(Vector2i a, int d)
		{
			return default(Vector2i);
		}

		[Token(Token = "0x60010E3")]
		[Address(RVA = "0xBE0FD4", Offset = "0xBE0FD4", VA = "0xBE0FD4")]
		public static Vector2i operator -(Vector2i a)
		{
			return default(Vector2i);
		}

		[Token(Token = "0x60010E4")]
		[Address(RVA = "0xBE0FE4", Offset = "0xBE0FE4", VA = "0xBE0FE4")]
		public static bool operator ==(Vector2i lhs, Vector2i rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x60010E5")]
		[Address(RVA = "0xBE1004", Offset = "0xBE1004", VA = "0xBE1004")]
		public static bool operator !=(Vector2i lhs, Vector2i rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x60010E6")]
		[Address(RVA = "0xBE1024", Offset = "0xBE1024", VA = "0xBE1024")]
		public static explicit operator Vector2i(Vector2 v)
		{
			return default(Vector2i);
		}

		[Token(Token = "0x60010E7")]
		[Address(RVA = "0xBE1058", Offset = "0xBE1058", VA = "0xBE1058")]
		public static explicit operator Vector2i(Vector2d v)
		{
			return default(Vector2i);
		}

		[Token(Token = "0x60010E8")]
		[Address(RVA = "0xBE108C", Offset = "0xBE108C", VA = "0xBE108C")]
		public void Set(int x, int y)
		{
		}

		[Token(Token = "0x60010E9")]
		[Address(RVA = "0xBE1094", Offset = "0xBE1094", VA = "0xBE1094")]
		public void Scale(ref Vector2i scale)
		{
		}

		[Token(Token = "0x60010EA")]
		[Address(RVA = "0xBE10A8", Offset = "0xBE10A8", VA = "0xBE10A8")]
		public void Clamp(int min, int max)
		{
		}

		[Token(Token = "0x60010EB")]
		[Address(RVA = "0xBE10E8", Offset = "0xBE10E8", VA = "0xBE10E8", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60010EC")]
		[Address(RVA = "0xBE111C", Offset = "0xBE111C", VA = "0xBE111C", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x60010ED")]
		[Address(RVA = "0xBE11A4", Offset = "0xBE11A4", VA = "0xBE11A4", Slot = "4")]
		public bool Equals(Vector2i other)
		{
			return default(bool);
		}

		[Token(Token = "0x60010EE")]
		[Address(RVA = "0xBE11CC", Offset = "0xBE11CC", VA = "0xBE11CC", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60010EF")]
		[Address(RVA = "0xBE127C", Offset = "0xBE127C", VA = "0xBE127C")]
		public string ToString(string format)
		{
			return null;
		}

		[Token(Token = "0x60010F0")]
		[Address(RVA = "0xBE1340", Offset = "0xBE1340", VA = "0xBE1340")]
		public static void Scale(ref Vector2i a, ref Vector2i b, out Vector2i result)
		{
		}
	}
	[Token(Token = "0x200025F")]
	public struct Vector3 : IEquatable<Vector3>
	{
		[Token(Token = "0x4001013")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Vector3 zero;

		[Token(Token = "0x4001014")]
		public const float Epsilon = 9.9999994E-11f;

		[Token(Token = "0x4001015")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float x;

		[Token(Token = "0x4001016")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float y;

		[Token(Token = "0x4001017")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float z;

		[Token(Token = "0x1700028F")]
		public float Magnitude
		{
			[Token(Token = "0x60010F2")]
			[Address(RVA = "0xBDF6A0", Offset = "0xBDF6A0", VA = "0xBDF6A0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000290")]
		public float MagnitudeSqr
		{
			[Token(Token = "0x60010F3")]
			[Address(RVA = "0xBE13A4", Offset = "0xBE13A4", VA = "0xBE13A4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000291")]
		public Vector3 Normalized
		{
			[Token(Token = "0x60010F4")]
			[Address(RVA = "0xBE13C4", Offset = "0xBE13C4", VA = "0xBE13C4")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000292")]
		public float this[int index]
		{
			[Token(Token = "0x60010F5")]
			[Address(RVA = "0xBE14DC", Offset = "0xBE14DC", VA = "0xBE14DC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60010F6")]
			[Address(RVA = "0xBE1558", Offset = "0xBE1558", VA = "0xBE1558")]
			set
			{
			}
		}

		[Token(Token = "0x60010F7")]
		[Address(RVA = "0xBE15D4", Offset = "0xBE15D4", VA = "0xBE15D4")]
		public Vector3(float value)
		{
		}

		[Token(Token = "0x60010F8")]
		[Address(RVA = "0xBDDB60", Offset = "0xBDDB60", VA = "0xBDDB60")]
		public Vector3(float x, float y, float z)
		{
		}

		[Token(Token = "0x60010F9")]
		[Address(RVA = "0xBE15E0", Offset = "0xBE15E0", VA = "0xBE15E0")]
		public Vector3(Vector3d vector)
		{
		}

		[Token(Token = "0x60010FA")]
		[Address(RVA = "0xBDD438", Offset = "0xBDD438", VA = "0xBDD438")]
		public static Vector3 operator +(Vector3 a, Vector3 b)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010FB")]
		[Address(RVA = "0xBDD39C", Offset = "0xBDD39C", VA = "0xBDD39C")]
		public static Vector3 operator -(Vector3 a, Vector3 b)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010FC")]
		[Address(RVA = "0xBDDB94", Offset = "0xBDDB94", VA = "0xBDDB94")]
		public static Vector3 operator *(Vector3 a, float d)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010FD")]
		[Address(RVA = "0xBE15F8", Offset = "0xBE15F8", VA = "0xBE15F8")]
		public static Vector3 operator *(float d, Vector3 a)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010FE")]
		[Address(RVA = "0xBE160C", Offset = "0xBE160C", VA = "0xBE160C")]
		public static Vector3 operator /(Vector3 a, float d)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010FF")]
		[Address(RVA = "0xBE161C", Offset = "0xBE161C", VA = "0xBE161C")]
		public static Vector3 operator -(Vector3 a)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001100")]
		[Address(RVA = "0xBE162C", Offset = "0xBE162C", VA = "0xBE162C")]
		public static bool operator ==(Vector3 lhs, Vector3 rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x6001101")]
		[Address(RVA = "0xBE16D8", Offset = "0xBE16D8", VA = "0xBE16D8")]
		public static bool operator !=(Vector3 lhs, Vector3 rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x6001102")]
		[Address(RVA = "0xBDD38C", Offset = "0xBDD38C", VA = "0xBDD38C")]
		public static explicit operator Vector3(Vector3d v)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001103")]
		[Address(RVA = "0xBE1784", Offset = "0xBE1784", VA = "0xBE1784")]
		public static implicit operator Vector3(Vector3i v)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001104")]
		[Address(RVA = "0xBE1798", Offset = "0xBE1798", VA = "0xBE1798")]
		public void Set(float x, float y, float z)
		{
		}

		[Token(Token = "0x6001105")]
		[Address(RVA = "0xBE17A4", Offset = "0xBE17A4", VA = "0xBE17A4")]
		public void Scale(ref Vector3 scale)
		{
		}

		[Token(Token = "0x6001106")]
		[Address(RVA = "0xBDD3EC", Offset = "0xBDD3EC", VA = "0xBDD3EC")]
		public void Normalize()
		{
		}

		[Token(Token = "0x6001107")]
		[Address(RVA = "0xBE17C8", Offset = "0xBE17C8", VA = "0xBE17C8")]
		public void Clamp(float min, float max)
		{
		}

		[Token(Token = "0x6001108")]
		[Address(RVA = "0xBE1828", Offset = "0xBE1828", VA = "0xBE1828", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6001109")]
		[Address(RVA = "0xBE1870", Offset = "0xBE1870", VA = "0xBE1870", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x600110A")]
		[Address(RVA = "0xBE1908", Offset = "0xBE1908", VA = "0xBE1908", Slot = "4")]
		public bool Equals(Vector3 other)
		{
			return default(bool);
		}

		[Token(Token = "0x600110B")]
		[Address(RVA = "0xBE1938", Offset = "0xBE1938", VA = "0xBE1938", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x600110C")]
		[Address(RVA = "0xBE1A34", Offset = "0xBE1A34", VA = "0xBE1A34")]
		public string ToString(string format)
		{
			return null;
		}

		[Token(Token = "0x600110D")]
		[Address(RVA = "0xBDDB6C", Offset = "0xBDDB6C", VA = "0xBDDB6C")]
		public static float Dot(ref Vector3 lhs, ref Vector3 rhs)
		{
			return default(float);
		}

		[Token(Token = "0x600110E")]
		[Address(RVA = "0xBDD3AC", Offset = "0xBDD3AC", VA = "0xBDD3AC")]
		public static void Cross(ref Vector3 lhs, ref Vector3 rhs, out Vector3 result)
		{
		}

		[Token(Token = "0x600110F")]
		[Address(RVA = "0xBDF720", Offset = "0xBDF720", VA = "0xBDF720")]
		public static float Angle(ref Vector3 from, ref Vector3 to)
		{
			return default(float);
		}

		[Token(Token = "0x6001110")]
		[Address(RVA = "0xBE1B20", Offset = "0xBE1B20", VA = "0xBE1B20")]
		public static void Lerp(ref Vector3 a, ref Vector3 b, float t, out Vector3 result)
		{
		}

		[Token(Token = "0x6001111")]
		[Address(RVA = "0xBE1B54", Offset = "0xBE1B54", VA = "0xBE1B54")]
		public static void Scale(ref Vector3 a, ref Vector3 b, out Vector3 result)
		{
		}

		[Token(Token = "0x6001112")]
		[Address(RVA = "0xBE1438", Offset = "0xBE1438", VA = "0xBE1438")]
		public static void Normalize(ref Vector3 value, out Vector3 result)
		{
		}

		[Token(Token = "0x6001113")]
		[Address(RVA = "0xBE1B78", Offset = "0xBE1B78", VA = "0xBE1B78")]
		public static void OrthoNormalize(ref Vector3 normal, ref Vector3 tangent)
		{
		}
	}
	[Token(Token = "0x2000260")]
	public struct Vector3d : IEquatable<Vector3d>
	{
		[Token(Token = "0x4001018")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Vector3d zero;

		[Token(Token = "0x4001019")]
		public const double Epsilon = double.Epsilon;

		[Token(Token = "0x400101A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public double x;

		[Token(Token = "0x400101B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public double y;

		[Token(Token = "0x400101C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public double z;

		[Token(Token = "0x17000293")]
		public double Magnitude
		{
			[Token(Token = "0x6001115")]
			[Address(RVA = "0xBE1C94", Offset = "0xBE1C94", VA = "0xBE1C94")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000294")]
		public double MagnitudeSqr
		{
			[Token(Token = "0x6001116")]
			[Address(RVA = "0xBE1D14", Offset = "0xBE1D14", VA = "0xBE1D14")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000295")]
		public Vector3d Normalized
		{
			[Token(Token = "0x6001117")]
			[Address(RVA = "0xBE1D34", Offset = "0xBE1D34", VA = "0xBE1D34")]
			get
			{
				return default(Vector3d);
			}
		}

		[Token(Token = "0x17000296")]
		public double this[int index]
		{
			[Token(Token = "0x6001118")]
			[Address(RVA = "0xBE1E4C", Offset = "0xBE1E4C", VA = "0xBE1E4C")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6001119")]
			[Address(RVA = "0xBE1EC8", Offset = "0xBE1EC8", VA = "0xBE1EC8")]
			set
			{
			}
		}

		[Token(Token = "0x600111A")]
		[Address(RVA = "0xBE1F44", Offset = "0xBE1F44", VA = "0xBE1F44")]
		public Vector3d(double value)
		{
		}

		[Token(Token = "0x600111B")]
		[Address(RVA = "0xBE1F50", Offset = "0xBE1F50", VA = "0xBE1F50")]
		public Vector3d(double x, double y, double z)
		{
		}

		[Token(Token = "0x600111C")]
		[Address(RVA = "0xBE1F5C", Offset = "0xBE1F5C", VA = "0xBE1F5C")]
		public Vector3d(Vector3 vector)
		{
		}

		[Token(Token = "0x600111D")]
		[Address(RVA = "0xBE1F74", Offset = "0xBE1F74", VA = "0xBE1F74")]
		public static Vector3d operator +(Vector3d a, Vector3d b)
		{
			return default(Vector3d);
		}

		[Token(Token = "0x600111E")]
		[Address(RVA = "0xBE1F84", Offset = "0xBE1F84", VA = "0xBE1F84")]
		public static Vector3d operator -(Vector3d a, Vector3d b)
		{
			return default(Vector3d);
		}

		[Token(Token = "0x600111F")]
		[Address(RVA = "0xBE1F94", Offset = "0xBE1F94", VA = "0xBE1F94")]
		public static Vector3d operator *(Vector3d a, double d)
		{
			return default(Vector3d);
		}

		[Token(Token = "0x6001120")]
		[Address(RVA = "0xBE1FA4", Offset = "0xBE1FA4", VA = "0xBE1FA4")]
		public static Vector3d operator *(double d, Vector3d a)
		{
			return default(Vector3d);
		}

		[Token(Token = "0x6001121")]
		[Address(RVA = "0xBE1FB8", Offset = "0xBE1FB8", VA = "0xBE1FB8")]
		public static Vector3d operator /(Vector3d a, double d)
		{
			return default(Vector3d);
		}

		[Token(Token = "0x6001122")]
		[Address(RVA = "0xBE1FC8", Offset = "0xBE1FC8", VA = "0xBE1FC8")]
		public static Vector3d operator -(Vector3d a)
		{
			return default(Vector3d);
		}

		[Token(Token = "0x6001123")]
		[Address(RVA = "0xBE1FD8", Offset = "0xBE1FD8", VA = "0xBE1FD8")]
		public static bool operator ==(Vector3d lhs, Vector3d rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x6001124")]
		[Address(RVA = "0xBE2084", Offset = "0xBE2084", VA = "0xBE2084")]
		public static bool operator !=(Vector3d lhs, Vector3d rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x6001125")]
		[Address(RVA = "0xBE2130", Offset = "0xBE2130", VA = "0xBE2130")]
		public static implicit operator Vector3d(Vector3 v)
		{
			return default(Vector3d);
		}

		[Token(Token = "0x6001126")]
		[Address(RVA = "0xBE2140", Offset = "0xBE2140", VA = "0xBE2140")]
		public static implicit operator Vector3d(Vector3i v)
		{
			return default(Vector3d);
		}

		[Token(Token = "0x6001127")]
		[Address(RVA = "0xBE2154", Offset = "0xBE2154", VA = "0xBE2154")]
		public void Set(double x, double y, double z)
		{
		}

		[Token(Token = "0x6001128")]
		[Address(RVA = "0xBE2160", Offset = "0xBE2160", VA = "0xBE2160")]
		public void Scale(ref Vector3d scale)
		{
		}

		[Token(Token = "0x6001129")]
		[Address(RVA = "0xBE2184", Offset = "0xBE2184", VA = "0xBE2184")]
		public void Normalize()
		{
		}

		[Token(Token = "0x600112A")]
		[Address(RVA = "0xBE21D0", Offset = "0xBE21D0", VA = "0xBE21D0")]
		public void Clamp(double min, double max)
		{
		}

		[Token(Token = "0x600112B")]
		[Address(RVA = "0xBE2230", Offset = "0xBE2230", VA = "0xBE2230", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x600112C")]
		[Address(RVA = "0xBE2370", Offset = "0xBE2370", VA = "0xBE2370", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x600112D")]
		[Address(RVA = "0xBE2408", Offset = "0xBE2408", VA = "0xBE2408", Slot = "4")]
		public bool Equals(Vector3d other)
		{
			return default(bool);
		}

		[Token(Token = "0x600112E")]
		[Address(RVA = "0xBE2438", Offset = "0xBE2438", VA = "0xBE2438", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x600112F")]
		[Address(RVA = "0xBE2534", Offset = "0xBE2534", VA = "0xBE2534")]
		public string ToString(string format)
		{
			return null;
		}

		[Token(Token = "0x6001130")]
		[Address(RVA = "0xBE2620", Offset = "0xBE2620", VA = "0xBE2620")]
		public static double Dot(ref Vector3d lhs, ref Vector3d rhs)
		{
			return default(double);
		}

		[Token(Token = "0x6001131")]
		[Address(RVA = "0xBE2648", Offset = "0xBE2648", VA = "0xBE2648")]
		public static void Cross(ref Vector3d lhs, ref Vector3d rhs, out Vector3d result)
		{
		}

		[Token(Token = "0x6001132")]
		[Address(RVA = "0xBE2688", Offset = "0xBE2688", VA = "0xBE2688")]
		public static double Angle(ref Vector3d from, ref Vector3d to)
		{
			return default(double);
		}

		[Token(Token = "0x6001133")]
		[Address(RVA = "0xBE2784", Offset = "0xBE2784", VA = "0xBE2784")]
		public static void Lerp(ref Vector3d a, ref Vector3d b, double t, out Vector3d result)
		{
		}

		[Token(Token = "0x6001134")]
		[Address(RVA = "0xBE27B8", Offset = "0xBE27B8", VA = "0xBE27B8")]
		public static void Scale(ref Vector3d a, ref Vector3d b, out Vector3d result)
		{
		}

		[Token(Token = "0x6001135")]
		[Address(RVA = "0xBE1DA8", Offset = "0xBE1DA8", VA = "0xBE1DA8")]
		public static void Normalize(ref Vector3d value, out Vector3d result)
		{
		}
	}
	[Token(Token = "0x2000261")]
	public struct Vector3i : IEquatable<Vector3i>
	{
		[Token(Token = "0x400101D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Vector3i zero;

		[Token(Token = "0x400101E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int x;

		[Token(Token = "0x400101F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int y;

		[Token(Token = "0x4001020")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int z;

		[Token(Token = "0x17000297")]
		public int Magnitude
		{
			[Token(Token = "0x6001137")]
			[Address(RVA = "0xBE2828", Offset = "0xBE2828", VA = "0xBE2828")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000298")]
		public int MagnitudeSqr
		{
			[Token(Token = "0x6001138")]
			[Address(RVA = "0xBE28AC", Offset = "0xBE28AC", VA = "0xBE28AC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000299")]
		public int this[int index]
		{
			[Token(Token = "0x6001139")]
			[Address(RVA = "0xBE28C4", Offset = "0xBE28C4", VA = "0xBE28C4")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600113A")]
			[Address(RVA = "0xBE2940", Offset = "0xBE2940", VA = "0xBE2940")]
			set
			{
			}
		}

		[Token(Token = "0x600113B")]
		[Address(RVA = "0xBE29BC", Offset = "0xBE29BC", VA = "0xBE29BC")]
		public Vector3i(int value)
		{
		}

		[Token(Token = "0x600113C")]
		[Address(RVA = "0xBE29C8", Offset = "0xBE29C8", VA = "0xBE29C8")]
		public Vector3i(int x, int y, int z)
		{
		}

		[Token(Token = "0x600113D")]
		[Address(RVA = "0xBE29D4", Offset = "0xBE29D4", VA = "0xBE29D4")]
		public static Vector3i operator +(Vector3i a, Vector3i b)
		{
			return default(Vector3i);
		}

		[Token(Token = "0x600113E")]
		[Address(RVA = "0xBE29F0", Offset = "0xBE29F0", VA = "0xBE29F0")]
		public static Vector3i operator -(Vector3i a, Vector3i b)
		{
			return default(Vector3i);
		}

		[Token(Token = "0x600113F")]
		[Address(RVA = "0xBE2A0C", Offset = "0xBE2A0C", VA = "0xBE2A0C")]
		public static Vector3i operator *(Vector3i a, int d)
		{
			return default(Vector3i);
		}

		[Token(Token = "0x6001140")]
		[Address(RVA = "0xBE2A24", Offset = "0xBE2A24", VA = "0xBE2A24")]
		public static Vector3i operator *(int d, Vector3i a)
		{
			return default(Vector3i);
		}

		[Token(Token = "0x6001141")]
		[Address(RVA = "0xBE2A40", Offset = "0xBE2A40", VA = "0xBE2A40")]
		public static Vector3i operator /(Vector3i a, int d)
		{
			return default(Vector3i);
		}

		[Token(Token = "0x6001142")]
		[Address(RVA = "0xBE2A58", Offset = "0xBE2A58", VA = "0xBE2A58")]
		public static Vector3i operator -(Vector3i a)
		{
			return default(Vector3i);
		}

		[Token(Token = "0x6001143")]
		[Address(RVA = "0xBE2A6C", Offset = "0xBE2A6C", VA = "0xBE2A6C")]
		public static bool operator ==(Vector3i lhs, Vector3i rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x6001144")]
		[Address(RVA = "0xBE2A9C", Offset = "0xBE2A9C", VA = "0xBE2A9C")]
		public static bool operator !=(Vector3i lhs, Vector3i rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x6001145")]
		[Address(RVA = "0xBE2ACC", Offset = "0xBE2ACC", VA = "0xBE2ACC")]
		public static implicit operator Vector3i(Vector3 v)
		{
			return default(Vector3i);
		}

		[Token(Token = "0x6001146")]
		[Address(RVA = "0xBE2B0C", Offset = "0xBE2B0C", VA = "0xBE2B0C")]
		public static explicit operator Vector3i(Vector3d v)
		{
			return default(Vector3i);
		}

		[Token(Token = "0x6001147")]
		[Address(RVA = "0xBE2B4C", Offset = "0xBE2B4C", VA = "0xBE2B4C")]
		public void Set(int x, int y, int z)
		{
		}

		[Token(Token = "0x6001148")]
		[Address(RVA = "0xBE2B58", Offset = "0xBE2B58", VA = "0xBE2B58")]
		public void Scale(ref Vector3i scale)
		{
		}

		[Token(Token = "0x6001149")]
		[Address(RVA = "0xBE2B7C", Offset = "0xBE2B7C", VA = "0xBE2B7C")]
		public void Clamp(int min, int max)
		{
		}

		[Token(Token = "0x600114A")]
		[Address(RVA = "0xBE2BDC", Offset = "0xBE2BDC", VA = "0xBE2BDC", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x600114B")]
		[Address(RVA = "0xBE2C24", Offset = "0xBE2C24", VA = "0xBE2C24", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x600114C")]
		[Address(RVA = "0xBE2CBC", Offset = "0xBE2CBC", VA = "0xBE2CBC", Slot = "4")]
		public bool Equals(Vector3i other)
		{
			return default(bool);
		}

		[Token(Token = "0x600114D")]
		[Address(RVA = "0xBE2CF0", Offset = "0xBE2CF0", VA = "0xBE2CF0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x600114E")]
		[Address(RVA = "0xBE2DCC", Offset = "0xBE2DCC", VA = "0xBE2DCC")]
		public string ToString(string format)
		{
			return null;
		}

		[Token(Token = "0x600114F")]
		[Address(RVA = "0xBE2EB8", Offset = "0xBE2EB8", VA = "0xBE2EB8")]
		public static void Scale(ref Vector3i a, ref Vector3i b, out Vector3i result)
		{
		}
	}
	[Token(Token = "0x2000262")]
	public struct Vector4 : IEquatable<Vector4>
	{
		[Token(Token = "0x4001021")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Vector4 zero;

		[Token(Token = "0x4001022")]
		public const float Epsilon = 9.9999994E-11f;

		[Token(Token = "0x4001023")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float x;

		[Token(Token = "0x4001024")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float y;

		[Token(Token = "0x4001025")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float z;

		[Token(Token = "0x4001026")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float w;

		[Token(Token = "0x1700029A")]
		public float Magnitude
		{
			[Token(Token = "0x6001151")]
			[Address(RVA = "0xBE2F28", Offset = "0xBE2F28", VA = "0xBE2F28")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700029B")]
		public float MagnitudeSqr
		{
			[Token(Token = "0x6001152")]
			[Address(RVA = "0xBE2FB0", Offset = "0xBE2FB0", VA = "0xBE2FB0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700029C")]
		public Vector4 Normalized
		{
			[Token(Token = "0x6001153")]
			[Address(RVA = "0xBE2FD8", Offset = "0xBE2FD8", VA = "0xBE2FD8")]
			get
			{
				return default(Vector4);
			}
		}

		[Token(Token = "0x1700029D")]
		public float this[int index]
		{
			[Token(Token = "0x6001154")]
			[Address(RVA = "0xBE30D4", Offset = "0xBE30D4", VA = "0xBE30D4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001155")]
			[Address(RVA = "0xBE3168", Offset = "0xBE3168", VA = "0xBE3168")]
			set
			{
			}
		}

		[Token(Token = "0x6001156")]
		[Address(RVA = "0xBE31FC", Offset = "0xBE31FC", VA = "0xBE31FC")]
		public Vector4(float value)
		{
		}

		[Token(Token = "0x6001157")]
		[Address(RVA = "0xBE3208", Offset = "0xBE3208", VA = "0xBE3208")]
		public Vector4(float x, float y, float z, float w)
		{
		}

		[Token(Token = "0x6001158")]
		[Address(RVA = "0xBE3214", Offset = "0xBE3214", VA = "0xBE3214")]
		public static Vector4 operator +(Vector4 a, Vector4 b)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6001159")]
		[Address(RVA = "0xBE3228", Offset = "0xBE3228", VA = "0xBE3228")]
		public static Vector4 operator -(Vector4 a, Vector4 b)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600115A")]
		[Address(RVA = "0xBE323C", Offset = "0xBE323C", VA = "0xBE323C")]
		public static Vector4 operator *(Vector4 a, float d)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600115B")]
		[Address(RVA = "0xBE3250", Offset = "0xBE3250", VA = "0xBE3250")]
		public static Vector4 operator *(float d, Vector4 a)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600115C")]
		[Address(RVA = "0xBE3268", Offset = "0xBE3268", VA = "0xBE3268")]
		public static Vector4 operator /(Vector4 a, float d)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600115D")]
		[Address(RVA = "0xBE327C", Offset = "0xBE327C", VA = "0xBE327C")]
		public static Vector4 operator -(Vector4 a)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600115E")]
		[Address(RVA = "0xBE3290", Offset = "0xBE3290", VA = "0xBE3290")]
		public static bool operator ==(Vector4 lhs, Vector4 rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x600115F")]
		[Address(RVA = "0xBE3358", Offset = "0xBE3358", VA = "0xBE3358")]
		public static bool operator !=(Vector4 lhs, Vector4 rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x6001160")]
		[Address(RVA = "0xBE3420", Offset = "0xBE3420", VA = "0xBE3420")]
		public static explicit operator Vector4(Vector4d v)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6001161")]
		[Address(RVA = "0xBE3434", Offset = "0xBE3434", VA = "0xBE3434")]
		public static implicit operator Vector4(Vector4i v)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6001162")]
		[Address(RVA = "0xBE3450", Offset = "0xBE3450", VA = "0xBE3450")]
		public void Set(float x, float y, float z, float w)
		{
		}

		[Token(Token = "0x6001163")]
		[Address(RVA = "0xBE345C", Offset = "0xBE345C", VA = "0xBE345C")]
		public void Scale(ref Vector4 scale)
		{
		}

		[Token(Token = "0x6001164")]
		[Address(RVA = "0xBE3470", Offset = "0xBE3470", VA = "0xBE3470")]
		public void Normalize()
		{
		}

		[Token(Token = "0x6001165")]
		[Address(RVA = "0xBE34AC", Offset = "0xBE34AC", VA = "0xBE34AC")]
		public void Clamp(float min, float max)
		{
		}

		[Token(Token = "0x6001166")]
		[Address(RVA = "0xBE352C", Offset = "0xBE352C", VA = "0xBE352C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6001167")]
		[Address(RVA = "0xBE3590", Offset = "0xBE3590", VA = "0xBE3590", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6001168")]
		[Address(RVA = "0xBE3638", Offset = "0xBE3638", VA = "0xBE3638", Slot = "4")]
		public bool Equals(Vector4 other)
		{
			return default(bool);
		}

		[Token(Token = "0x6001169")]
		[Address(RVA = "0xBE3674", Offset = "0xBE3674", VA = "0xBE3674", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x600116A")]
		[Address(RVA = "0xBE3868", Offset = "0xBE3868", VA = "0xBE3868")]
		public string ToString(string format)
		{
			return null;
		}

		[Token(Token = "0x600116B")]
		[Address(RVA = "0xBE3A4C", Offset = "0xBE3A4C", VA = "0xBE3A4C")]
		public static float Dot(ref Vector4 lhs, ref Vector4 rhs)
		{
			return default(float);
		}

		[Token(Token = "0x600116C")]
		[Address(RVA = "0xBE3A7C", Offset = "0xBE3A7C", VA = "0xBE3A7C")]
		public static void Lerp(ref Vector4 a, ref Vector4 b, float t, out Vector4 result)
		{
		}

		[Token(Token = "0x600116D")]
		[Address(RVA = "0xBE3A98", Offset = "0xBE3A98", VA = "0xBE3A98")]
		public static void Scale(ref Vector4 a, ref Vector4 b, out Vector4 result)
		{
		}

		[Token(Token = "0x600116E")]
		[Address(RVA = "0xBE3048", Offset = "0xBE3048", VA = "0xBE3048")]
		public static void Normalize(ref Vector4 value, out Vector4 result)
		{
		}
	}
	[Token(Token = "0x2000263")]
	public struct Vector4d : IEquatable<Vector4d>
	{
		[Token(Token = "0x4001027")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Vector4d zero;

		[Token(Token = "0x4001028")]
		public const double Epsilon = double.Epsilon;

		[Token(Token = "0x4001029")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public double x;

		[Token(Token = "0x400102A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public double y;

		[Token(Token = "0x400102B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public double z;

		[Token(Token = "0x400102C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public double w;

		[Token(Token = "0x1700029E")]
		public double Magnitude
		{
			[Token(Token = "0x6001170")]
			[Address(RVA = "0xBE3AF4", Offset = "0xBE3AF4", VA = "0xBE3AF4")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x1700029F")]
		public double MagnitudeSqr
		{
			[Token(Token = "0x6001171")]
			[Address(RVA = "0xBE3B7C", Offset = "0xBE3B7C", VA = "0xBE3B7C")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x170002A0")]
		public Vector4d Normalized
		{
			[Token(Token = "0x6001172")]
			[Address(RVA = "0xBE3BA4", Offset = "0xBE3BA4", VA = "0xBE3BA4")]
			get
			{
				return default(Vector4d);
			}
		}

		[Token(Token = "0x170002A1")]
		public double this[int index]
		{
			[Token(Token = "0x6001173")]
			[Address(RVA = "0xBE3CAC", Offset = "0xBE3CAC", VA = "0xBE3CAC")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6001174")]
			[Address(RVA = "0xBE3D40", Offset = "0xBE3D40", VA = "0xBE3D40")]
			set
			{
			}
		}

		[Token(Token = "0x6001175")]
		[Address(RVA = "0xBE3DD4", Offset = "0xBE3DD4", VA = "0xBE3DD4")]
		public Vector4d(double value)
		{
		}

		[Token(Token = "0x6001176")]
		[Address(RVA = "0xBE3DE0", Offset = "0xBE3DE0", VA = "0xBE3DE0")]
		public Vector4d(double x, double y, double z, double w)
		{
		}

		[Token(Token = "0x6001177")]
		[Address(RVA = "0xBE3DEC", Offset = "0xBE3DEC", VA = "0xBE3DEC")]
		public static Vector4d operator +(Vector4d a, Vector4d b)
		{
			return default(Vector4d);
		}

		[Token(Token = "0x6001178")]
		[Address(RVA = "0xBE3E00", Offset = "0xBE3E00", VA = "0xBE3E00")]
		public static Vector4d operator -(Vector4d a, Vector4d b)
		{
			return default(Vector4d);
		}

		[Token(Token = "0x6001179")]
		[Address(RVA = "0xBE3E14", Offset = "0xBE3E14", VA = "0xBE3E14")]
		public static Vector4d operator *(Vector4d a, double d)
		{
			return default(Vector4d);
		}

		[Token(Token = "0x600117A")]
		[Address(RVA = "0xBE3E28", Offset = "0xBE3E28", VA = "0xBE3E28")]
		public static Vector4d operator *(double d, Vector4d a)
		{
			return default(Vector4d);
		}

		[Token(Token = "0x600117B")]
		[Address(RVA = "0xBE3E40", Offset = "0xBE3E40", VA = "0xBE3E40")]
		public static Vector4d operator /(Vector4d a, double d)
		{
			return default(Vector4d);
		}

		[Token(Token = "0x600117C")]
		[Address(RVA = "0xBE3E54", Offset = "0xBE3E54", VA = "0xBE3E54")]
		public static Vector4d operator -(Vector4d a)
		{
			return default(Vector4d);
		}

		[Token(Token = "0x600117D")]
		[Address(RVA = "0xBE3E68", Offset = "0xBE3E68", VA = "0xBE3E68")]
		public static bool operator ==(Vector4d lhs, Vector4d rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x600117E")]
		[Address(RVA = "0xBE3F30", Offset = "0xBE3F30", VA = "0xBE3F30")]
		public static bool operator !=(Vector4d lhs, Vector4d rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x600117F")]
		[Address(RVA = "0xBE3FF8", Offset = "0xBE3FF8", VA = "0xBE3FF8")]
		public static implicit operator Vector4d(Vector4 v)
		{
			return default(Vector4d);
		}

		[Token(Token = "0x6001180")]
		[Address(RVA = "0xBE400C", Offset = "0xBE400C", VA = "0xBE400C")]
		public static implicit operator Vector4d(Vector4i v)
		{
			return default(Vector4d);
		}

		[Token(Token = "0x6001181")]
		[Address(RVA = "0xBE4028", Offset = "0xBE4028", VA = "0xBE4028")]
		public void Set(double x, double y, double z, double w)
		{
		}

		[Token(Token = "0x6001182")]
		[Address(RVA = "0xBE4034", Offset = "0xBE4034", VA = "0xBE4034")]
		public void Scale(ref Vector4d scale)
		{
		}

		[Token(Token = "0x6001183")]
		[Address(RVA = "0xBE4054", Offset = "0xBE4054", VA = "0xBE4054")]
		public void Normalize()
		{
		}

		[Token(Token = "0x6001184")]
		[Address(RVA = "0xBE409C", Offset = "0xBE409C", VA = "0xBE409C")]
		public void Clamp(double min, double max)
		{
		}

		[Token(Token = "0x6001185")]
		[Address(RVA = "0xBE411C", Offset = "0xBE411C", VA = "0xBE411C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6001186")]
		[Address(RVA = "0xBE42C4", Offset = "0xBE42C4", VA = "0xBE42C4", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6001187")]
		[Address(RVA = "0xBE436C", Offset = "0xBE436C", VA = "0xBE436C", Slot = "4")]
		public bool Equals(Vector4d other)
		{
			return default(bool);
		}

		[Token(Token = "0x6001188")]
		[Address(RVA = "0xBE43A8", Offset = "0xBE43A8", VA = "0xBE43A8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6001189")]
		[Address(RVA = "0xBE459C", Offset = "0xBE459C", VA = "0xBE459C")]
		public string ToString(string format)
		{
			return null;
		}

		[Token(Token = "0x600118A")]
		[Address(RVA = "0xBE4780", Offset = "0xBE4780", VA = "0xBE4780")]
		public static double Dot(ref Vector4d lhs, ref Vector4d rhs)
		{
			return default(double);
		}

		[Token(Token = "0x600118B")]
		[Address(RVA = "0xBE47B0", Offset = "0xBE47B0", VA = "0xBE47B0")]
		public static void Lerp(ref Vector4d a, ref Vector4d b, double t, out Vector4d result)
		{
		}

		[Token(Token = "0x600118C")]
		[Address(RVA = "0xBE47D8", Offset = "0xBE47D8", VA = "0xBE47D8")]
		public static void Scale(ref Vector4d a, ref Vector4d b, out Vector4d result)
		{
		}

		[Token(Token = "0x600118D")]
		[Address(RVA = "0xBE3C18", Offset = "0xBE3C18", VA = "0xBE3C18")]
		public static void Normalize(ref Vector4d value, out Vector4d result)
		{
		}
	}
	[Token(Token = "0x2000264")]
	public struct Vector4i : IEquatable<Vector4i>
	{
		[Token(Token = "0x400102D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Vector4i zero;

		[Token(Token = "0x400102E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int x;

		[Token(Token = "0x400102F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int y;

		[Token(Token = "0x4001030")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int z;

		[Token(Token = "0x4001031")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int w;

		[Token(Token = "0x170002A2")]
		public int Magnitude
		{
			[Token(Token = "0x600118F")]
			[Address(RVA = "0xBE483C", Offset = "0xBE483C", VA = "0xBE483C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170002A3")]
		public int MagnitudeSqr
		{
			[Token(Token = "0x6001190")]
			[Address(RVA = "0xBE48CC", Offset = "0xBE48CC", VA = "0xBE48CC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170002A4")]
		public int this[int index]
		{
			[Token(Token = "0x6001191")]
			[Address(RVA = "0xBE48E0", Offset = "0xBE48E0", VA = "0xBE48E0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001192")]
			[Address(RVA = "0xBE4974", Offset = "0xBE4974", VA = "0xBE4974")]
			set
			{
			}
		}

		[Token(Token = "0x6001193")]
		[Address(RVA = "0xBE4A08", Offset = "0xBE4A08", VA = "0xBE4A08")]
		public Vector4i(int value)
		{
		}

		[Token(Token = "0x6001194")]
		[Address(RVA = "0xBE4A14", Offset = "0xBE4A14", VA = "0xBE4A14")]
		public Vector4i(int x, int y, int z, int w)
		{
		}

		[Token(Token = "0x6001195")]
		[Address(RVA = "0xBE4A20", Offset = "0xBE4A20", VA = "0xBE4A20")]
		public static Vector4i operator +(Vector4i a, Vector4i b)
		{
			return default(Vector4i);
		}

		[Token(Token = "0x6001196")]
		[Address(RVA = "0xBE4A4C", Offset = "0xBE4A4C", VA = "0xBE4A4C")]
		public static Vector4i operator -(Vector4i a, Vector4i b)
		{
			return default(Vector4i);
		}

		[Token(Token = "0x6001197")]
		[Address(RVA = "0xBE4A78", Offset = "0xBE4A78", VA = "0xBE4A78")]
		public static Vector4i operator *(Vector4i a, int d)
		{
			return default(Vector4i);
		}

		[Token(Token = "0x6001198")]
		[Address(RVA = "0xBE4A9C", Offset = "0xBE4A9C", VA = "0xBE4A9C")]
		public static Vector4i operator *(int d, Vector4i a)
		{
			return default(Vector4i);
		}

		[Token(Token = "0x6001199")]
		[Address(RVA = "0xBE4AC4", Offset = "0xBE4AC4", VA = "0xBE4AC4")]
		public static Vector4i operator /(Vector4i a, int d)
		{
			return default(Vector4i);
		}

		[Token(Token = "0x600119A")]
		[Address(RVA = "0xBE4AE8", Offset = "0xBE4AE8", VA = "0xBE4AE8")]
		public static Vector4i operator -(Vector4i a)
		{
			return default(Vector4i);
		}

		[Token(Token = "0x600119B")]
		[Address(RVA = "0xBE4B04", Offset = "0xBE4B04", VA = "0xBE4B04")]
		public static bool operator ==(Vector4i lhs, Vector4i rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x600119C")]
		[Address(RVA = "0xBE4B40", Offset = "0xBE4B40", VA = "0xBE4B40")]
		public static bool operator !=(Vector4i lhs, Vector4i rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x600119D")]
		[Address(RVA = "0xBE4B7C", Offset = "0xBE4B7C", VA = "0xBE4B7C")]
		public static explicit operator Vector4i(Vector4 v)
		{
			return default(Vector4i);
		}

		[Token(Token = "0x600119E")]
		[Address(RVA = "0xBE4BD0", Offset = "0xBE4BD0", VA = "0xBE4BD0")]
		public static explicit operator Vector4i(Vector4d v)
		{
			return default(Vector4i);
		}

		[Token(Token = "0x600119F")]
		[Address(RVA = "0xBE4C24", Offset = "0xBE4C24", VA = "0xBE4C24")]
		public void Set(int x, int y, int z, int w)
		{
		}

		[Token(Token = "0x60011A0")]
		[Address(RVA = "0xBE4C30", Offset = "0xBE4C30", VA = "0xBE4C30")]
		public void Scale(ref Vector4i scale)
		{
		}

		[Token(Token = "0x60011A1")]
		[Address(RVA = "0xBE4C44", Offset = "0xBE4C44", VA = "0xBE4C44")]
		public void Clamp(int min, int max)
		{
		}

		[Token(Token = "0x60011A2")]
		[Address(RVA = "0xBE4CC4", Offset = "0xBE4CC4", VA = "0xBE4CC4", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60011A3")]
		[Address(RVA = "0xBE4D28", Offset = "0xBE4D28", VA = "0xBE4D28", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x60011A4")]
		[Address(RVA = "0xBE4DD0", Offset = "0xBE4DD0", VA = "0xBE4DD0", Slot = "4")]
		public bool Equals(Vector4i other)
		{
			return default(bool);
		}

		[Token(Token = "0x60011A5")]
		[Address(RVA = "0xBE4E14", Offset = "0xBE4E14", VA = "0xBE4E14", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60011A6")]
		[Address(RVA = "0xBE4FE4", Offset = "0xBE4FE4", VA = "0xBE4FE4")]
		public string ToString(string format)
		{
			return null;
		}

		[Token(Token = "0x60011A7")]
		[Address(RVA = "0xBE51C8", Offset = "0xBE51C8", VA = "0xBE51C8")]
		public static void Scale(ref Vector4i a, ref Vector4i b, out Vector4i result)
		{
		}
	}
}
namespace HellTap.MeshDecimator.Loggers
{
	[Token(Token = "0x2000265")]
	public sealed class ConsoleLogger : ILogger
	{
		[Token(Token = "0x60011A9")]
		[Address(RVA = "0xBE5224", Offset = "0xBE5224", VA = "0xBE5224", Slot = "4")]
		public void LogVerbose(string text)
		{
		}

		[Token(Token = "0x60011AA")]
		[Address(RVA = "0xBE527C", Offset = "0xBE527C", VA = "0xBE527C", Slot = "5")]
		public void LogWarning(string text)
		{
		}

		[Token(Token = "0x60011AB")]
		[Address(RVA = "0xBE52D4", Offset = "0xBE52D4", VA = "0xBE52D4", Slot = "6")]
		public void LogError(string text)
		{
		}

		[Token(Token = "0x60011AC")]
		[Address(RVA = "0xBE5378", Offset = "0xBE5378", VA = "0xBE5378")]
		public ConsoleLogger()
		{
		}
	}
}
namespace HellTap.MeshDecimator.Collections
{
	[Token(Token = "0x2000266")]
	internal sealed class ResizableArray<T>
	{
		[Token(Token = "0x4001032")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T[] items;

		[Token(Token = "0x4001033")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int length;

		[Token(Token = "0x4001034")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static T[] emptyArr;

		[Token(Token = "0x170002A5")]
		public int Length
		{
			[Token(Token = "0x60011AD")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170002A6")]
		public T[] Data
		{
			[Token(Token = "0x60011AE")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002A7")]
		public T this[int index]
		{
			[Token(Token = "0x60011AF")]
			get
			{
				return (T)null;
			}
			[Token(Token = "0x60011B0")]
			set
			{
			}
		}

		[Token(Token = "0x60011B1")]
		public ResizableArray(int capacity)
		{
		}

		[Token(Token = "0x60011B2")]
		public ResizableArray(int capacity, int length)
		{
		}

		[Token(Token = "0x60011B3")]
		private void IncreaseCapacity(int capacity)
		{
		}

		[Token(Token = "0x60011B4")]
		public void Clear()
		{
		}

		[Token(Token = "0x60011B5")]
		public void Resize(int length, bool trimExess = false)
		{
		}

		[Token(Token = "0x60011B6")]
		public void TrimExcess()
		{
		}

		[Token(Token = "0x60011B7")]
		public void Add(T item)
		{
		}
	}
	[Token(Token = "0x2000267")]
	internal sealed class UVChannels<TVec>
	{
		[Token(Token = "0x4001035")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private ResizableArray<TVec>[] channels;

		[Token(Token = "0x4001036")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private TVec[][] channelsData;

		[Token(Token = "0x170002A8")]
		public TVec[][] Data
		{
			[Token(Token = "0x60011B9")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002A9")]
		public ResizableArray<TVec> this[int index]
		{
			[Token(Token = "0x60011BA")]
			get
			{
				return null;
			}
			[Token(Token = "0x60011BB")]
			set
			{
			}
		}

		[Token(Token = "0x60011BC")]
		public UVChannels()
		{
		}

		[Token(Token = "0x60011BD")]
		public void Resize(int capacity, bool trimExess = false)
		{
		}
	}
}
namespace HellTap.MeshDecimator.Algorithms
{
	[Token(Token = "0x2000268")]
	public abstract class DecimationAlgorithm
	{
		[Token(Token = "0x2000269")]
		public delegate void StatusReportCallback(int iteration, int originalTris, int currentTris, int targetTris);

		[Token(Token = "0x4001037")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool preserveBorders;

		[Token(Token = "0x4001038")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private int maxVertexCount;

		[Token(Token = "0x4001039")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool verbose;

		[Token(Token = "0x400103A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private StatusReportCallback statusReportInvoker;

		[Token(Token = "0x170002AA")]
		[Obsolete("Use the 'DecimationAlgorithm.PreserveBorders' property instead.", false)]
		public bool KeepBorders
		{
			[Token(Token = "0x60011BE")]
			[Address(RVA = "0xBE5380", Offset = "0xBE5380", VA = "0xBE5380")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60011BF")]
			[Address(RVA = "0xBE5388", Offset = "0xBE5388", VA = "0xBE5388")]
			set
			{
			}
		}

		[Token(Token = "0x170002AB")]
		public bool PreserveBorders
		{
			[Token(Token = "0x60011C0")]
			[Address(RVA = "0xBE5394", Offset = "0xBE5394", VA = "0xBE5394")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60011C1")]
			[Address(RVA = "0xBE539C", Offset = "0xBE539C", VA = "0xBE539C")]
			set
			{
			}
		}

		[Token(Token = "0x170002AC")]
		[Obsolete("This feature has been removed, for more details why please read the readme.", true)]
		public bool KeepLinkedVertices
		{
			[Token(Token = "0x60011C2")]
			[Address(RVA = "0xBE53A8", Offset = "0xBE53A8", VA = "0xBE53A8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60011C3")]
			[Address(RVA = "0xBE53B0", Offset = "0xBE53B0", VA = "0xBE53B0")]
			set
			{
			}
		}

		[Token(Token = "0x170002AD")]
		public int MaxVertexCount
		{
			[Token(Token = "0x60011C4")]
			[Address(RVA = "0xBE53B4", Offset = "0xBE53B4", VA = "0xBE53B4")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60011C5")]
			[Address(RVA = "0xBE53BC", Offset = "0xBE53BC", VA = "0xBE53BC")]
			set
			{
			}
		}

		[Token(Token = "0x170002AE")]
		public bool Verbose
		{
			[Token(Token = "0x60011C6")]
			[Address(RVA = "0xBE53E0", Offset = "0xBE53E0", VA = "0xBE53E0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60011C7")]
			[Address(RVA = "0xBE53E8", Offset = "0xBE53E8", VA = "0xBE53E8")]
			set
			{
			}
		}

		[Token(Token = "0x1400000A")]
		public event StatusReportCallback StatusReport
		{
			[Token(Token = "0x60011C8")]
			[Address(RVA = "0xBE53F4", Offset = "0xBE53F4", VA = "0xBE53F4")]
			add
			{
			}
			[Token(Token = "0x60011C9")]
			[Address(RVA = "0xBE5474", Offset = "0xBE5474", VA = "0xBE5474")]
			remove
			{
			}
		}

		[Token(Token = "0x60011CA")]
		[Address(RVA = "0xBE54F4", Offset = "0xBE54F4", VA = "0xBE54F4")]
		protected void ReportStatus(int iteration, int originalTris, int currentTris, int targetTris)
		{
		}

		[Token(Token = "0x60011CB")]
		public abstract void Initialize(Mesh mesh);

		[Token(Token = "0x60011CC")]
		public abstract void DecimateMesh(int targetTrisCount);

		[Token(Token = "0x60011CD")]
		public abstract void DecimateMeshLossless();

		[Token(Token = "0x60011CE")]
		public abstract Mesh ToMesh();

		[Token(Token = "0x60011CF")]
		[Address(RVA = "0xBE5510", Offset = "0xBE5510", VA = "0xBE5510")]
		protected DecimationAlgorithm()
		{
		}
	}
	[Token(Token = "0x200026A")]
	public sealed class FastQuadricMeshSimplification : DecimationAlgorithm
	{
		[Token(Token = "0x200026B")]
		private struct Triangle
		{
			[Token(Token = "0x4001050")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int v0;

			[Token(Token = "0x4001051")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public int v1;

			[Token(Token = "0x4001052")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public int v2;

			[Token(Token = "0x4001053")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public int subMeshIndex;

			[Token(Token = "0x4001054")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int va0;

			[Token(Token = "0x4001055")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int va1;

			[Token(Token = "0x4001056")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int va2;

			[Token(Token = "0x4001057")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public double err0;

			[Token(Token = "0x4001058")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public double err1;

			[Token(Token = "0x4001059")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public double err2;

			[Token(Token = "0x400105A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public double err3;

			[Token(Token = "0x400105B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public bool deleted;

			[Token(Token = "0x400105C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
			public bool dirty;

			[Token(Token = "0x400105D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Vector3d n;

			[Token(Token = "0x170002B5")]
			public int this[int index]
			{
				[Token(Token = "0x60011F1")]
				[Address(RVA = "0xBE5FD4", Offset = "0xBE5FD4", VA = "0xBE5FD4")]
				get
				{
					return default(int);
				}
				[Token(Token = "0x60011F2")]
				[Address(RVA = "0xBE632C", Offset = "0xBE632C", VA = "0xBE632C")]
				set
				{
				}
			}

			[Token(Token = "0x60011F3")]
			[Address(RVA = "0xBE9978", Offset = "0xBE9978", VA = "0xBE9978")]
			public Triangle(int v0, int v1, int v2, int subMeshIndex)
			{
			}

			[Token(Token = "0x60011F4")]
			[Address(RVA = "0xBE75F8", Offset = "0xBE75F8", VA = "0xBE75F8")]
			public void GetAttributeIndices(int[] attributeIndices)
			{
			}

			[Token(Token = "0x60011F5")]
			[Address(RVA = "0xBE639C", Offset = "0xBE639C", VA = "0xBE639C")]
			public void SetAttributeIndex(int index, int value)
			{
			}

			[Token(Token = "0x60011F6")]
			[Address(RVA = "0xBE75B0", Offset = "0xBE75B0", VA = "0xBE75B0")]
			public void GetErrors(double[] err)
			{
			}
		}

		[Token(Token = "0x200026C")]
		private struct Vertex
		{
			[Token(Token = "0x400105E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3d p;

			[Token(Token = "0x400105F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int tstart;

			[Token(Token = "0x4001060")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public int tcount;

			[Token(Token = "0x4001061")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SymmetricMatrix q;

			[Token(Token = "0x4001062")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			public bool border;

			[Token(Token = "0x4001063")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
			public bool seam;

			[Token(Token = "0x4001064")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x72")]
			public bool foldover;

			[Token(Token = "0x60011F7")]
			[Address(RVA = "0xBE9944", Offset = "0xBE9944", VA = "0xBE9944")]
			public Vertex(Vector3d p)
			{
			}
		}

		[Token(Token = "0x200026D")]
		private struct Ref
		{
			[Token(Token = "0x4001065")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int tid;

			[Token(Token = "0x4001066")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public int tvertex;

			[Token(Token = "0x60011F8")]
			[Address(RVA = "0xBE8774", Offset = "0xBE8774", VA = "0xBE8774")]
			public void Set(int tid, int tvertex)
			{
			}
		}

		[Token(Token = "0x200026E")]
		private struct BorderVertex
		{
			[Token(Token = "0x4001067")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int index;

			[Token(Token = "0x4001068")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public int hash;

			[Token(Token = "0x60011F9")]
			[Address(RVA = "0xBE876C", Offset = "0xBE876C", VA = "0xBE876C")]
			public BorderVertex(int index, int hash)
			{
			}
		}

		[Token(Token = "0x200026F")]
		private class BorderVertexComparer : IComparer<BorderVertex>
		{
			[Token(Token = "0x4001069")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly BorderVertexComparer instance;

			[Token(Token = "0x60011FA")]
			[Address(RVA = "0xBEA6D0", Offset = "0xBEA6D0", VA = "0xBEA6D0", Slot = "4")]
			public int Compare(BorderVertex x, BorderVertex y)
			{
				return default(int);
			}

			[Token(Token = "0x60011FB")]
			[Address(RVA = "0xBEA6F4", Offset = "0xBEA6F4", VA = "0xBEA6F4")]
			public BorderVertexComparer()
			{
			}
		}

		[Token(Token = "0x400103B")]
		private const double DoubleEpsilon = 0.001;

		[Token(Token = "0x400103C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool preserveSeams;

		[Token(Token = "0x400103D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		private bool preserveFoldovers;

		[Token(Token = "0x400103E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		private bool enableSmartLink;

		[Token(Token = "0x400103F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int maxIterationCount;

		[Token(Token = "0x4001040")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private double agressiveness;

		[Token(Token = "0x4001041")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private double vertexLinkDistanceSqr;

		[Token(Token = "0x4001042")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int subMeshCount;

		[Token(Token = "0x4001043")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private ResizableArray<Triangle> triangles;

		[Token(Token = "0x4001044")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private ResizableArray<Vertex> vertices;

		[Token(Token = "0x4001045")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private ResizableArray<Ref> refs;

		[Token(Token = "0x4001046")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private ResizableArray<HellTap.MeshDecimator.Math.Vector3> vertNormals;

		[Token(Token = "0x4001047")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private ResizableArray<HellTap.MeshDecimator.Math.Vector4> vertTangents;

		[Token(Token = "0x4001048")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private UVChannels<HellTap.MeshDecimator.Math.Vector2> vertUV2D;

		[Token(Token = "0x4001049")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private UVChannels<HellTap.MeshDecimator.Math.Vector3> vertUV3D;

		[Token(Token = "0x400104A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private UVChannels<HellTap.MeshDecimator.Math.Vector4> vertUV4D;

		[Token(Token = "0x400104B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private ResizableArray<HellTap.MeshDecimator.Math.Vector4> vertColors;

		[Token(Token = "0x400104C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private ResizableArray<BoneWeight> vertBoneWeights;

		[Token(Token = "0x400104D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private int remainingVertices;

		[Token(Token = "0x400104E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private double[] errArr;

		[Token(Token = "0x400104F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private int[] attributeIndexArr;

		[Token(Token = "0x170002AF")]
		public bool PreserveSeams
		{
			[Token(Token = "0x60011D4")]
			[Address(RVA = "0xBE56C0", Offset = "0xBE56C0", VA = "0xBE56C0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60011D5")]
			[Address(RVA = "0xBE56C8", Offset = "0xBE56C8", VA = "0xBE56C8")]
			set
			{
			}
		}

		[Token(Token = "0x170002B0")]
		public bool PreserveFoldovers
		{
			[Token(Token = "0x60011D6")]
			[Address(RVA = "0xBE56D4", Offset = "0xBE56D4", VA = "0xBE56D4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60011D7")]
			[Address(RVA = "0xBE56DC", Offset = "0xBE56DC", VA = "0xBE56DC")]
			set
			{
			}
		}

		[Token(Token = "0x170002B1")]
		public bool EnableSmartLink
		{
			[Token(Token = "0x60011D8")]
			[Address(RVA = "0xBE56E8", Offset = "0xBE56E8", VA = "0xBE56E8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60011D9")]
			[Address(RVA = "0xBE56F0", Offset = "0xBE56F0", VA = "0xBE56F0")]
			set
			{
			}
		}

		[Token(Token = "0x170002B2")]
		public int MaxIterationCount
		{
			[Token(Token = "0x60011DA")]
			[Address(RVA = "0xBE56FC", Offset = "0xBE56FC", VA = "0xBE56FC")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60011DB")]
			[Address(RVA = "0xBE5704", Offset = "0xBE5704", VA = "0xBE5704")]
			set
			{
			}
		}

		[Token(Token = "0x170002B3")]
		public double Agressiveness
		{
			[Token(Token = "0x60011DC")]
			[Address(RVA = "0xBE570C", Offset = "0xBE570C", VA = "0xBE570C")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x60011DD")]
			[Address(RVA = "0xBE5714", Offset = "0xBE5714", VA = "0xBE5714")]
			set
			{
			}
		}

		[Token(Token = "0x170002B4")]
		public double VertexLinkDistanceSqr
		{
			[Token(Token = "0x60011DE")]
			[Address(RVA = "0xBE571C", Offset = "0xBE571C", VA = "0xBE571C")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x60011DF")]
			[Address(RVA = "0xBE5724", Offset = "0xBE5724", VA = "0xBE5724")]
			set
			{
			}
		}

		[Token(Token = "0x60011E0")]
		[Address(RVA = "0xBE572C", Offset = "0xBE572C", VA = "0xBE572C")]
		public FastQuadricMeshSimplification(bool preserveBorders = false, bool preserveSeams = false, bool preserveFoldovers = false)
		{
		}

		[Token(Token = "0x60011E1")]
		private ResizableArray<T> InitializeVertexAttribute<T>(T[] attributeValues, string attributeName)
		{
			return null;
		}

		[Token(Token = "0x60011E2")]
		[Address(RVA = "0xBE58E0", Offset = "0xBE58E0", VA = "0xBE58E0")]
		private double VertexError(ref SymmetricMatrix q, double x, double y, double z)
		{
			return default(double);
		}

		[Token(Token = "0x60011E3")]
		[Address(RVA = "0xBE5970", Offset = "0xBE5970", VA = "0xBE5970")]
		private double CalculateError(ref Vertex vert0, ref Vertex vert1, out Vector3d result, out int resultIndex)
		{
			return default(double);
		}

		[Token(Token = "0x60011E4")]
		[Address(RVA = "0xBE5BE0", Offset = "0xBE5BE0", VA = "0xBE5BE0")]
		private bool Flipped(ref Vector3d p, int i0, int i1, ref Vertex v0, bool[] deleted)
		{
			return default(bool);
		}

		[Token(Token = "0x60011E5")]
		[Address(RVA = "0xBE5FF4", Offset = "0xBE5FF4", VA = "0xBE5FF4")]
		private void UpdateTriangles(int i0, int ia0, ref Vertex v, ResizableArray<bool> deleted, ref int deletedTriangles)
		{
		}

		[Token(Token = "0x60011E6")]
		[Address(RVA = "0xBE640C", Offset = "0xBE640C", VA = "0xBE640C")]
		private void MoveVertexAttributes(int i0, int i1)
		{
		}

		[Token(Token = "0x60011E7")]
		[Address(RVA = "0xBE66FC", Offset = "0xBE66FC", VA = "0xBE66FC")]
		private void MergeVertexAttributes(int i0, int i1)
		{
		}

		[Token(Token = "0x60011E8")]
		[Address(RVA = "0xBE6C7C", Offset = "0xBE6C7C", VA = "0xBE6C7C")]
		private bool AreUVsTheSame(int channel, int indexA, int indexB)
		{
			return default(bool);
		}

		[Token(Token = "0x60011E9")]
		[Address(RVA = "0xBE6F64", Offset = "0xBE6F64", VA = "0xBE6F64")]
		private void RemoveVertexPass(int startTrisCount, int targetTrisCount, double threshold, ResizableArray<bool> deleted0, ResizableArray<bool> deleted1, ref int deletedTris)
		{
		}

		[Token(Token = "0x60011EA")]
		[Address(RVA = "0xBE7640", Offset = "0xBE7640", VA = "0xBE7640")]
		private void UpdateMesh(int iteration)
		{
		}

		[Token(Token = "0x60011EB")]
		[Address(RVA = "0xBE8474", Offset = "0xBE8474", VA = "0xBE8474")]
		private void UpdateReferences()
		{
		}

		[Token(Token = "0x60011EC")]
		[Address(RVA = "0xBE877C", Offset = "0xBE877C", VA = "0xBE877C")]
		private void CompactMesh()
		{
		}

		[Token(Token = "0x60011ED")]
		[Address(RVA = "0xBE91F8", Offset = "0xBE91F8", VA = "0xBE91F8", Slot = "4")]
		public override void Initialize(Mesh mesh)
		{
		}

		[Token(Token = "0x60011EE")]
		[Address(RVA = "0xBE99A0", Offset = "0xBE99A0", VA = "0xBE99A0", Slot = "5")]
		public override void DecimateMesh(int targetTrisCount)
		{
		}

		[Token(Token = "0x60011EF")]
		[Address(RVA = "0xBE9E04", Offset = "0xBE9E04", VA = "0xBE9E04", Slot = "6")]
		public override void DecimateMeshLossless()
		{
		}

		[Token(Token = "0x60011F0")]
		[Address(RVA = "0xBEA0C4", Offset = "0xBEA0C4", VA = "0xBEA0C4", Slot = "7")]
		public override Mesh ToMesh()
		{
			return null;
		}
	}
}
namespace HellTap.MeshDecimator.Unity
{
	[Token(Token = "0x2000270")]
	public sealed class DecimatedObject : MonoBehaviour
	{
		[Token(Token = "0x400106A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private LODSettings[] levels;

		[Token(Token = "0x400106B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private bool generated;

		[Token(Token = "0x170002B6")]
		public LODSettings[] Levels
		{
			[Token(Token = "0x60011FD")]
			[Address(RVA = "0xBEA760", Offset = "0xBEA760", VA = "0xBEA760")]
			get
			{
				return null;
			}
			[Token(Token = "0x60011FE")]
			[Address(RVA = "0xBEA768", Offset = "0xBEA768", VA = "0xBEA768")]
			set
			{
			}
		}

		[Token(Token = "0x170002B7")]
		public bool IsGenerated
		{
			[Token(Token = "0x60011FF")]
			[Address(RVA = "0xBEA770", Offset = "0xBEA770", VA = "0xBEA770")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001200")]
		[Address(RVA = "0xBEA778", Offset = "0xBEA778", VA = "0xBEA778")]
		private void Reset()
		{
		}

		[Token(Token = "0x6001201")]
		[Address(RVA = "0xBEABB0", Offset = "0xBEABB0", VA = "0xBEABB0")]
		public void GenerateLODs([Optional] LODStatusReportCallback statusCallback)
		{
		}

		[Token(Token = "0x6001202")]
		[Address(RVA = "0xBEAB90", Offset = "0xBEAB90", VA = "0xBEAB90")]
		public void ResetLODs()
		{
		}

		[Token(Token = "0x6001203")]
		[Address(RVA = "0xBEC498", Offset = "0xBEC498", VA = "0xBEC498")]
		public DecimatedObject()
		{
		}
	}
	[Token(Token = "0x2000271")]
	public delegate void LODStatusReportCallback(int lodLevel, int iteration, int originalTris, int currentTris, int targetTris);
	[Serializable]
	[Token(Token = "0x2000272")]
	public struct LODSettings
	{
		[Token(Token = "0x400106C")]
		private const string _UNTAGGED = "Untagged";

		[Token(Token = "0x400106D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[Header("LOD Distance")]
		[Range(0.01f, 100f)]
		[Tooltip("At what distance should this LOD be shown? 100 is used for the best quality mesh.")]
		public float lodDistancePercentage;

		[Token(Token = "0x400106E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		[Header("Decimation")]
		[Range(0.01f, 1f)]
		[Tooltip("When decimating, a value of 0 will reduce mesh complexity as much as possible. 1 will preserve it.")]
		public float quality;

		[Token(Token = "0x400106F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[Tooltip("Combining Meshes should always be false in MeshKit.")]
		[HideInInspector]
		public bool combineMeshes;

		[Token(Token = "0x4001070")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[Tooltip("The Skin Quality setting used in the Renderer.")]
		[Header("Renderers")]
		public SkinQuality skinQuality;

		[Token(Token = "0x4001071")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Tooltip("The Recieve Shadows setting used in the Renderer.")]
		public bool receiveShadows;

		[Token(Token = "0x4001072")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[Tooltip("The Shadow Casting setting used in the Renderer.")]
		public ShadowCastingMode shadowCasting;

		[Token(Token = "0x4001073")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The Motion Vectors setting used in the Renderer.")]
		public MotionVectorGenerationMode motionVectors;

		[Token(Token = "0x4001074")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("The Skinned Motion Vectors setting used in the Renderer.")]
		public bool skinnedMotionVectors;

		[Token(Token = "0x4001075")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The Light Probe Usage setting found in the Renderer.")]
		public LightProbeUsage lightProbeUsage;

		[Token(Token = "0x4001076")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("The Reflection Probe Usage setting found in the Renderer.")]
		public ReflectionProbeUsage reflectionProbeUsage;

		[Token(Token = "0x4001077")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("GameObject")]
		[Tooltip("The tag to use on the GameObject.")]
		public string tag;

		[Token(Token = "0x4001078")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The layer to use on the GameObject.")]
		public int layer;

		[Token(Token = "0x6001208")]
		[Address(RVA = "0xBEC660", Offset = "0xBEC660", VA = "0xBEC660")]
		public LODSettings(float quality, float lodDistancePercentage = 0.8f)
		{
		}

		[Token(Token = "0x6001209")]
		[Address(RVA = "0xBEC6E0", Offset = "0xBEC6E0", VA = "0xBEC6E0")]
		public LODSettings(float quality, float lodDistancePercentage, SkinQuality skinQuality)
		{
		}

		[Token(Token = "0x600120A")]
		[Address(RVA = "0xBEAA4C", Offset = "0xBEAA4C", VA = "0xBEAA4C")]
		public LODSettings(float quality, float lodDistancePercentage, SkinQuality skinQuality, bool receiveShadows, ShadowCastingMode shadowCasting)
		{
		}

		[Token(Token = "0x600120B")]
		[Address(RVA = "0xBEAAE8", Offset = "0xBEAAE8", VA = "0xBEAAE8")]
		public LODSettings(float quality, float lodDistancePercentage, SkinQuality skinQuality, bool receiveShadows, ShadowCastingMode shadowCasting, MotionVectorGenerationMode motionVectors, bool skinnedMotionVectors)
		{
		}

		[Token(Token = "0x600120C")]
		[Address(RVA = "0xBEC76C", Offset = "0xBEC76C", VA = "0xBEC76C")]
		public LODSettings(float quality, float lodDistancePercentage, SkinQuality skinQuality, bool receiveShadows, ShadowCastingMode shadowCasting, MotionVectorGenerationMode motionVectors, bool skinnedMotionVectors, LightProbeUsage lightProbeUsage, ReflectionProbeUsage reflectionProbeUsage)
		{
		}

		[Token(Token = "0x600120D")]
		[Address(RVA = "0xBEC820", Offset = "0xBEC820", VA = "0xBEC820")]
		public LODSettings(float quality, float lodDistancePercentage, SkinQuality skinQuality, bool receiveShadows, ShadowCastingMode shadowCasting, MotionVectorGenerationMode motionVectors, bool skinnedMotionVectors, LightProbeUsage lightProbeUsage, ReflectionProbeUsage reflectionProbeUsage, string tag, int layer)
		{
		}
	}
	[Token(Token = "0x2000273")]
	public static class LODGenerator
	{
		[Token(Token = "0x4001079")]
		private const string ParentGameObjectName = "_LOD_";

		[Token(Token = "0x600120E")]
		[Address(RVA = "0xBEC858", Offset = "0xBEC858", VA = "0xBEC858")]
		private static Renderer[] CombineRenderers(MeshRenderer[] meshRenderers, SkinnedMeshRenderer[] skinnedRenderers)
		{
			return null;
		}

		[Token(Token = "0x600120F")]
		[Address(RVA = "0xBEC8FC", Offset = "0xBEC8FC", VA = "0xBEC8FC")]
		private static UnityEngine.Mesh GenerateStaticLOD(Transform transform, MeshRenderer renderer, float quality, out Material[] materials, DecimationAlgorithm.StatusReportCallback statusCallback, bool preserveBorders = false, bool preserveSeams = false, bool preserveFoldovers = false)
		{
			return null;
		}

		[Token(Token = "0x6001210")]
		[Address(RVA = "0xBED0CC", Offset = "0xBED0CC", VA = "0xBED0CC")]
		private static UnityEngine.Mesh GenerateStaticLOD(Transform transform, MeshRenderer[] renderers, float quality, out Material[] materials, DecimationAlgorithm.StatusReportCallback statusCallback, bool preserveBorders = false, bool preserveSeams = false, bool preserveFoldovers = false)
		{
			return null;
		}

		[Token(Token = "0x6001211")]
		[Address(RVA = "0xBED514", Offset = "0xBED514", VA = "0xBED514")]
		private static UnityEngine.Mesh GenerateSkinnedLOD(Transform transform, SkinnedMeshRenderer renderer, float quality, out Material[] materials, out Transform[] mergedBones, DecimationAlgorithm.StatusReportCallback statusCallback, bool preserveBorders = false, bool preserveSeams = false, bool preserveFoldovers = false)
		{
			return null;
		}

		[Token(Token = "0x6001212")]
		[Address(RVA = "0xBED6E4", Offset = "0xBED6E4", VA = "0xBED6E4")]
		private static UnityEngine.Mesh GenerateSkinnedLOD(Transform transform, SkinnedMeshRenderer[] renderers, float quality, out Material[] materials, out Transform[] mergedBones, DecimationAlgorithm.StatusReportCallback statusCallback, bool preserveBorders = false, bool preserveSeams = false, bool preserveFoldovers = false)
		{
			return null;
		}

		[Token(Token = "0x6001213")]
		[Address(RVA = "0xBEEF04", Offset = "0xBEEF04", VA = "0xBEEF04")]
		private static Transform FindRootBone(Transform transform, Transform[] transforms)
		{
			return null;
		}

		[Token(Token = "0x6001214")]
		[Address(RVA = "0xBEF004", Offset = "0xBEF004", VA = "0xBEF004")]
		private static void SetupLODRenderer(Renderer renderer, LODSettings settings)
		{
		}

		[Token(Token = "0x6001215")]
		[Address(RVA = "0xBEAC00", Offset = "0xBEAC00", VA = "0xBEAC00")]
		public static void GenerateLODs(GameObject gameObj, LODSettings[] levels, [Optional] LODStatusReportCallback statusCallback, bool preserveBorders = false, bool preserveSeams = false, bool preserveFoldovers = false)
		{
		}

		[Token(Token = "0x6001216")]
		[Address(RVA = "0xBEF1D8", Offset = "0xBEF1D8", VA = "0xBEF1D8")]
		private static void CopyStaticFlags(GameObject source, GameObject destination)
		{
		}

		[Token(Token = "0x6001217")]
		[Address(RVA = "0xBEC298", Offset = "0xBEC298", VA = "0xBEC298")]
		public static void DestroyLODs(GameObject gameObj)
		{
		}
	}
	[Token(Token = "0x2000275")]
	public static class MeshDecimatorUtility
	{
		[Token(Token = "0x600121A")]
		[Address(RVA = "0xBEF214", Offset = "0xBEF214", VA = "0xBEF214")]
		static MeshDecimatorUtility()
		{
		}

		[Token(Token = "0x600121B")]
		[Address(RVA = "0xBEF368", Offset = "0xBEF368", VA = "0xBEF368")]
		private static Vector3d[] ToSimplifyVertices(UnityEngine.Vector3[] vertices)
		{
			return null;
		}

		[Token(Token = "0x600121C")]
		[Address(RVA = "0xBEF41C", Offset = "0xBEF41C", VA = "0xBEF41C")]
		private static HellTap.MeshDecimator.Math.Vector2[] ToSimplifyVec(UnityEngine.Vector2[] vectors)
		{
			return null;
		}

		[Token(Token = "0x600121D")]
		[Address(RVA = "0xBEF4F8", Offset = "0xBEF4F8", VA = "0xBEF4F8")]
		private static HellTap.MeshDecimator.Math.Vector3[] ToSimplifyVec(UnityEngine.Vector3[] vectors)
		{
			return null;
		}

		[Token(Token = "0x600121E")]
		[Address(RVA = "0xBEF5E4", Offset = "0xBEF5E4", VA = "0xBEF5E4")]
		private static HellTap.MeshDecimator.Math.Vector4[] ToSimplifyVec(UnityEngine.Vector4[] vectors)
		{
			return null;
		}

		[Token(Token = "0x600121F")]
		[Address(RVA = "0xBEF690", Offset = "0xBEF690", VA = "0xBEF690")]
		private static HellTap.MeshDecimator.Math.Vector4[] ToSimplifyVec(Color[] colors)
		{
			return null;
		}

		[Token(Token = "0x6001220")]
		[Address(RVA = "0xBEF73C", Offset = "0xBEF73C", VA = "0xBEF73C")]
		private static BoneWeight[] ToSimplifyBoneWeights(UnityEngine.BoneWeight[] boneWeights)
		{
			return null;
		}

		[Token(Token = "0x6001221")]
		[Address(RVA = "0xBEF8EC", Offset = "0xBEF8EC", VA = "0xBEF8EC")]
		private static UnityEngine.Vector3[] FromSimplifyVertices(Vector3d[] vertices)
		{
			return null;
		}

		[Token(Token = "0x6001222")]
		[Address(RVA = "0xBEF9A0", Offset = "0xBEF9A0", VA = "0xBEF9A0")]
		private static UnityEngine.Vector2[] FromSimplifyVec(HellTap.MeshDecimator.Math.Vector2[] vectors)
		{
			return null;
		}

		[Token(Token = "0x6001223")]
		[Address(RVA = "0xBEFA4C", Offset = "0xBEFA4C", VA = "0xBEFA4C")]
		private static UnityEngine.Vector3[] FromSimplifyVec(HellTap.MeshDecimator.Math.Vector3[] vectors)
		{
			return null;
		}

		[Token(Token = "0x6001224")]
		[Address(RVA = "0xBEFB00", Offset = "0xBEFB00", VA = "0xBEFB00")]
		private static UnityEngine.Vector4[] FromSimplifyVec(HellTap.MeshDecimator.Math.Vector4[] vectors)
		{
			return null;
		}

		[Token(Token = "0x6001225")]
		[Address(RVA = "0xBEFBAC", Offset = "0xBEFBAC", VA = "0xBEFBAC")]
		private static Color[] FromSimplifyColor(HellTap.MeshDecimator.Math.Vector4[] vectors)
		{
			return null;
		}

		[Token(Token = "0x6001226")]
		[Address(RVA = "0xBEFC58", Offset = "0xBEFC58", VA = "0xBEFC58")]
		private static UnityEngine.BoneWeight[] FromSimplifyBoneWeights(BoneWeight[] boneWeights)
		{
			return null;
		}

		[Token(Token = "0x6001227")]
		[Address(RVA = "0xBEFDEC", Offset = "0xBEFDEC", VA = "0xBEFDEC")]
		private static void AddToList(List<Vector3d> list, UnityEngine.Vector3[] arr, int previousVertexCount, int totalVertexCount)
		{
		}

		[Token(Token = "0x6001228")]
		[Address(RVA = "0xBEFEF4", Offset = "0xBEFEF4", VA = "0xBEFEF4")]
		private static void AddToList(ref List<HellTap.MeshDecimator.Math.Vector2> list, UnityEngine.Vector2[] arr, int previousVertexCount, int currentVertexCount, int totalVertexCount, HellTap.MeshDecimator.Math.Vector2 defaultValue)
		{
		}

		[Token(Token = "0x6001229")]
		[Address(RVA = "0xBF0164", Offset = "0xBF0164", VA = "0xBF0164")]
		private static void AddToList(ref List<HellTap.MeshDecimator.Math.Vector3> list, UnityEngine.Vector3[] arr, int previousVertexCount, int currentVertexCount, int totalVertexCount, HellTap.MeshDecimator.Math.Vector3 defaultValue)
		{
		}

		[Token(Token = "0x600122A")]
		[Address(RVA = "0xBF0414", Offset = "0xBF0414", VA = "0xBF0414")]
		private static void AddToList(ref List<HellTap.MeshDecimator.Math.Vector4> list, UnityEngine.Vector4[] arr, int previousVertexCount, int currentVertexCount, int totalVertexCount, HellTap.MeshDecimator.Math.Vector4 defaultValue)
		{
		}

		[Token(Token = "0x600122B")]
		[Address(RVA = "0xBF069C", Offset = "0xBF069C", VA = "0xBF069C")]
		private static void AddToList(ref List<HellTap.MeshDecimator.Math.Vector4> list, Color[] arr, int previousVertexCount, int currentVertexCount, int totalVertexCount)
		{
		}

		[Token(Token = "0x600122C")]
		[Address(RVA = "0xBF08FC", Offset = "0xBF08FC", VA = "0xBF08FC")]
		private static void AddToList(ref List<BoneWeight> list, UnityEngine.BoneWeight[] arr, int previousVertexCount, int currentVertexCount, int totalVertexCount)
		{
		}

		[Token(Token = "0x600122D")]
		[Address(RVA = "0xBF0C90", Offset = "0xBF0C90", VA = "0xBF0C90")]
		private static void TransformVertices(UnityEngine.Vector3[] vertices, ref Matrix4x4 transform)
		{
		}

		[Token(Token = "0x600122E")]
		[Address(RVA = "0xBF0D14", Offset = "0xBF0D14", VA = "0xBF0D14")]
		private static void TransformVertices(UnityEngine.Vector3[] vertices, UnityEngine.BoneWeight[] boneWeights, Matrix4x4[] oldBindposes, Matrix4x4[] newBindposes)
		{
		}

		[Token(Token = "0x600122F")]
		[Address(RVA = "0xBF1248", Offset = "0xBF1248", VA = "0xBF1248")]
		private static Matrix4x4 ScaleMatrix(ref Matrix4x4 m, float scale)
		{
			return default(Matrix4x4);
		}

		[Token(Token = "0x6001230")]
		private static T[] MergeArrays<T>(T[] arr1, T[] arr2)
		{
			return null;
		}

		[Token(Token = "0x6001231")]
		[Address(RVA = "0xBF126C", Offset = "0xBF126C", VA = "0xBF126C")]
		private static void RemapBones(UnityEngine.BoneWeight[] boneWeights, int[] boneIndices)
		{
		}

		[Token(Token = "0x6001232")]
		[Address(RVA = "0xBF140C", Offset = "0xBF140C", VA = "0xBF140C")]
		private static UnityEngine.Mesh CreateMesh(Matrix4x4[] bindposes, UnityEngine.Vector3[] vertices, Mesh destMesh, bool recalculateNormals)
		{
			return null;
		}

		[Token(Token = "0x6001233")]
		[Address(RVA = "0xBECAD8", Offset = "0xBECAD8", VA = "0xBECAD8")]
		public static UnityEngine.Mesh DecimateMesh(UnityEngine.Mesh mesh, Matrix4x4 transform, float quality, bool recalculateNormals, [Optional] DecimationAlgorithm.StatusReportCallback statusCallback, bool preserveBorders = false, bool preserveSeams = false, bool preserveFoldovers = false)
		{
			return null;
		}

		[Token(Token = "0x6001234")]
		[Address(RVA = "0xBED44C", Offset = "0xBED44C", VA = "0xBED44C")]
		public static UnityEngine.Mesh DecimateMeshes(UnityEngine.Mesh[] meshes, Matrix4x4[] transforms, Material[][] materials, float quality, bool recalculateNormals, out Material[] resultMaterials, [Optional] DecimationAlgorithm.StatusReportCallback statusCallback, bool preserveBorders = false, bool preserveSeams = false, bool preserveFoldovers = false)
		{
			return null;
		}

		[Token(Token = "0x6001235")]
		[Address(RVA = "0xBEDABC", Offset = "0xBEDABC", VA = "0xBEDABC")]
		public static UnityEngine.Mesh DecimateMeshes(UnityEngine.Mesh[] meshes, Matrix4x4[] transforms, Material[][] materials, Transform[][] meshBones, float quality, bool recalculateNormals, out Material[] resultMaterials, out Transform[] mergedBones, [Optional] DecimationAlgorithm.StatusReportCallback statusCallback, bool preserveBorders = false, bool preserveSeams = false, bool preserveFoldovers = false)
		{
			return null;
		}
	}
}
namespace HellTap.MeshDecimator.Unity.Loggers
{
	[Token(Token = "0x2000276")]
	public sealed class UnityLogger : ILogger
	{
		[Token(Token = "0x6001236")]
		[Address(RVA = "0xBF170C", Offset = "0xBF170C", VA = "0xBF170C", Slot = "4")]
		public void LogVerbose(string text)
		{
		}

		[Token(Token = "0x6001237")]
		[Address(RVA = "0xBF1764", Offset = "0xBF1764", VA = "0xBF1764", Slot = "5")]
		public void LogWarning(string text)
		{
		}

		[Token(Token = "0x6001238")]
		[Address(RVA = "0xBF17BC", Offset = "0xBF17BC", VA = "0xBF17BC", Slot = "6")]
		public void LogError(string text)
		{
		}

		[Token(Token = "0x6001239")]
		[Address(RVA = "0xBEF360", Offset = "0xBEF360", VA = "0xBEF360")]
		public UnityLogger()
		{
		}
	}
}
namespace HellTap.MeshKit
{
	[Token(Token = "0x2000277")]
	[ExecuteInEditMode]
	[DisallowMultipleComponent]
	[AddComponentMenu("MeshKit/AutoLOD At Runtime")]
	public class AutoLODAtRuntime : MonoBehaviour
	{
		[Token(Token = "0x400107D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("These options will be used to setup the LOD Group. The group at the top of the list will be closest to the camera.")]
		[Header("LOD Settings")]
		public MeshKit.AutoLODSettings[] levels;

		[Token(Token = "0x400107E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 100f)]
		[Tooltip("At what distance should this LOD Group be hidden?")]
		[Header("LOD Culling Distance")]
		public float cullingDistancePercentage;

		[Token(Token = "0x400107F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("If there are gaps showing up in the mesh, you can try to stop the decimator from removing borders. This will affect the decimator's ability to reduce complexity.")]
		[Header("Decimation Options")]
		public bool preserveBorders;

		[Token(Token = "0x4001080")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		[Tooltip("If there are gaps showing up in the mesh, you can try to stop the decimator from removing seams. This will affect the decimator's ability to reduce complexity.")]
		public bool preserveSeams;

		[Token(Token = "0x4001081")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
		[Tooltip("If there are gaps showing up in the mesh, you can try to stop the decimator from removing UV foldovers. This will affect the decimator's ability to reduce complexity.")]
		public bool preserveFoldovers;

		[Token(Token = "0x600123A")]
		[Address(RVA = "0xBF1814", Offset = "0xBF1814", VA = "0xBF1814")]
		private void Start()
		{
		}

		[Token(Token = "0x600123B")]
		[Address(RVA = "0xBF1920", Offset = "0xBF1920", VA = "0xBF1920")]
		public AutoLODAtRuntime()
		{
		}
	}
	[Token(Token = "0x2000278")]
	[DisallowMultipleComponent]
	[AddComponentMenu("MeshKit/Combine Children At Runtime")]
	public class CombineChildrenAtRuntime : MonoBehaviour
	{
		[Token(Token = "0x4001082")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("This GameObject and it's children will be scanned for submeshes. If found, they will be broken apart and rebuilt before the combine process begins.\n\nNOTE: This should generally not be used in runtime builds as it is a very expensive operation which can take several minutes or more to complete!")]
		[Header("SubMesh Options   (this can take a while in large scenes)")]
		public bool seperateSubMeshesFirst;

		[Token(Token = "0x4001083")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[Tooltip("After seperating meshes, MeshKit strips unused vertices making each mesh highly optimized and memory efficient. Unfortunatly this can heavily increase processing time, especially with large meshes.")]
		public bool stripUnusedVertices;

		[Token(Token = "0x4001084")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		[Tooltip("Only Seperates SubMeshes which have Renderers that are enabled.")]
		public bool onlySeperateEnabledRenderers;

		[Token(Token = "0x4001085")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Range(16000f, 65534f)]
		[Tooltip("Only GameObjects with their Renderer component enabled will be combined.")]
		[Header("Combine Options")]
		public int maximumVerticesPerObject;

		[Token(Token = "0x4001086")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Only GameObjects with their Renderer component enabled will be combined.")]
		public bool onlyCombineEnabledRenderers;

		[Token(Token = "0x4001087")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		[Tooltip("Apply Unity's mesh optimization function to the combined Meshes.\n\nNOTE: This increases the time it takes to combine objects.")]
		public bool optimizeCombinedMeshes;

		[Token(Token = "0x4001088")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		[Tooltip("Adds Mesh Colliders to the new combined objects. It's usually a good idea to check \"Delete Objects With Disabled Renderers\" when selecting this option.")]
		public bool createMeshCollidersOnNewObjects;

		[Token(Token = "0x4001089")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("Use -1 to create new GameObjects using the Default layer. Alternatively, enter a layer index to use ( 0 - 31 ).")]
		public int createNewObjectsWithLayer;

		[Token(Token = "0x400108A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Leave this blank to create untagged GameObjects or enter the name of the tag to set.")]
		public string createNewObjectsWithTag;

		[Token(Token = "0x400108B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Cleanup Options")]
		[Tooltip("Destroys all GameObjects originally used to create the combined mesh (with the exception of those that have Colliders attached to them).")]
		public bool destroyOriginalObjects;

		[Token(Token = "0x400108C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		[Tooltip("Destroys all GameObjects that are in this group with disabled Renderer components (This includes objects with active Colliders).")]
		public bool destroyObjectsWithDisabledRenderers;

		[Token(Token = "0x400108D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		[Tooltip("Destroys any empty GameObjects which do not have any components or children. ")]
		public bool destroyEmptyObjects;

		[Token(Token = "0x600123C")]
		[Address(RVA = "0xBF1B00", Offset = "0xBF1B00", VA = "0xBF1B00")]
		private void Start()
		{
		}

		[Token(Token = "0x600123D")]
		[Address(RVA = "0xBF1C4C", Offset = "0xBF1C4C", VA = "0xBF1C4C")]
		public CombineChildrenAtRuntime()
		{
		}
	}
	[Token(Token = "0x2000279")]
	[AddComponentMenu("MeshKit/Decimate Mesh At Runtime")]
	[DisallowMultipleComponent]
	public class DecimateMeshAtRuntime : MonoBehaviour
	{
		[Token(Token = "0x400108E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Attempt to decimate all child objects too.")]
		[Header("Selection")]
		public bool applyToChildren;

		[Token(Token = "0x400108F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[Tooltip("Decimate the meshes within MeshFilters")]
		public bool applyToMeshFilters;

		[Token(Token = "0x4001090")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		[Tooltip("Decimate the meshes within Skinned Mesh Renderers")]
		public bool applyToSkinnedMeshRenderers;

		[Token(Token = "0x4001091")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
		[Tooltip("Only apply to GameObjects with active Renderer components.")]
		public bool onlyApplyToEnabledRenderers;

		[Token(Token = "0x4001092")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Header("Decimator")]
		[Tooltip("Set the quality of the decimation. 0 = No details, 1 = Full details.")]
		[Range(0f, 1f)]
		public float decimatorQuality;

		[Token(Token = "0x4001093")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Recalculate the mesh's normals after it has been decimated.")]
		public bool recalculateNormals;

		[Token(Token = "0x4001094")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		[Header("Try these options if gaps appear in the Mesh")]
		[Tooltip("Preserve border vertices.")]
		public bool preserveBorders;

		[Token(Token = "0x4001095")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		[Tooltip("Preserve seams on the Mesh.")]
		public bool preserveSeams;

		[Token(Token = "0x4001096")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x23")]
		[Tooltip("Preserve UV foldovers.")]
		public bool preserveFoldovers;

		[Token(Token = "0x600123E")]
		[Address(RVA = "0xBF1CC0", Offset = "0xBF1CC0", VA = "0xBF1CC0")]
		private void Start()
		{
		}

		[Token(Token = "0x600123F")]
		[Address(RVA = "0xBF1DF8", Offset = "0xBF1DF8", VA = "0xBF1DF8")]
		public DecimateMeshAtRuntime()
		{
		}
	}
	[Token(Token = "0x200027A")]
	[AddComponentMenu("MeshKit/Invert Children At Runtime")]
	[DisallowMultipleComponent]
	public class InvertMeshAtRuntime : MonoBehaviour
	{
		[Token(Token = "0x4001097")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Attempt to make all child objects containing MeshFilters Inverted too.")]
		public bool applyToChildren;

		[Token(Token = "0x4001098")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[Tooltip("Invert the meshes within MeshFilters")]
		public bool applyToMeshFilters;

		[Token(Token = "0x4001099")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		[Tooltip("Invert the meshes within Skinned Mesh Renderers")]
		public bool applyToSkinnedMeshRenderers;

		[Token(Token = "0x400109A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
		[Tooltip("Only apply to GameObjects with active Renderer components.")]
		public bool onlyApplyToEnabledRenderers;

		[Token(Token = "0x6001240")]
		[Address(RVA = "0xBF2E10", Offset = "0xBF2E10", VA = "0xBF2E10")]
		private void Start()
		{
		}

		[Token(Token = "0x6001241")]
		[Address(RVA = "0xBF2F94", Offset = "0xBF2F94", VA = "0xBF2F94")]
		public InvertMeshAtRuntime()
		{
		}
	}
	[Token(Token = "0x200027B")]
	[AddComponentMenu("MeshKit/Double-Sided Children At Runtime")]
	[DisallowMultipleComponent]
	public class MakeDoubleSidedAtRuntime : MonoBehaviour
	{
		[Token(Token = "0x400109B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Attempt to make all child objects containing MeshFilters Double-Sided too.")]
		public bool applyToChildren;

		[Token(Token = "0x400109C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[Tooltip("Make the meshes within MeshFilters Double-Sided")]
		public bool applyToMeshFilters;

		[Token(Token = "0x400109D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		[Tooltip("Make the meshes within Skinned Mesh Renderers Double-Sided")]
		public bool applyToSkinnedMeshRenderers;

		[Token(Token = "0x400109E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
		[Tooltip("Only apply to GameObjects with active Renderer components.")]
		public bool onlyApplyToEnabledRenderers;

		[Token(Token = "0x6001242")]
		[Address(RVA = "0xBF2FAC", Offset = "0xBF2FAC", VA = "0xBF2FAC")]
		private void Start()
		{
		}

		[Token(Token = "0x6001243")]
		[Address(RVA = "0xBF3130", Offset = "0xBF3130", VA = "0xBF3130")]
		public MakeDoubleSidedAtRuntime()
		{
		}
	}
	[Token(Token = "0x200027C")]
	[DisallowMultipleComponent]
	[AddComponentMenu("MeshKit/SeperateChildrenAtRuntime")]
	public class SeperateChildrenAtRuntime : MonoBehaviour
	{
		[Token(Token = "0x400109F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("After seperating meshes, MeshKit strips unused vertices making each mesh highly optimized and memory efficient. Unfortunatly this can heavily increase processing time, especially with large meshes.")]
		public bool stripUnusedVertices;

		[Token(Token = "0x40010A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[Tooltip("Only apply to GameObjects with active Renderer components.")]
		public bool onlyApplyToEnabledRenderers;

		[Token(Token = "0x6001244")]
		[Address(RVA = "0xBF3148", Offset = "0xBF3148", VA = "0xBF3148")]
		private void Start()
		{
		}

		[Token(Token = "0x6001245")]
		[Address(RVA = "0xBF3B0C", Offset = "0xBF3B0C", VA = "0xBF3B0C")]
		public SeperateChildrenAtRuntime()
		{
		}
	}
	[Token(Token = "0x200027D")]
	public class MeshKit : MonoBehaviour
	{
		[Token(Token = "0x200027E")]
		public class BatchMeshes
		{
			[Token(Token = "0x40010A4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Material[] key;

			[Token(Token = "0x40010A5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Mesh originalMesh;

			[Token(Token = "0x40010A6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Mesh[] splitMeshes;

			[Token(Token = "0x40010A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public ArrayList gos;

			[Token(Token = "0x6001262")]
			[Address(RVA = "0xBF80E8", Offset = "0xBF80E8", VA = "0xBF80E8")]
			public BatchMeshes()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200027F")]
		public class AutoLODSettings
		{
			[Token(Token = "0x40010A8")]
			private const string _UNTAGGED = "Untagged";

			[Token(Token = "0x40010A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Header("LOD Distance")]
			[Tooltip("At what distance should this LOD be shown? 100 is used for the best quality mesh.")]
			[Range(0.01f, 100f)]
			public float lodDistancePercentage;

			[Token(Token = "0x40010AA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("When decimating, a value of 0 will reduce mesh complexity as much as possible. 1 will preserve it.")]
			[Range(0.01f, 1f)]
			[Header("Decimation")]
			public float quality;

			[Token(Token = "0x40010AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("The Skin Quality setting used in the Renderer.")]
			[Header("Renderers")]
			public SkinQuality skinQuality;

			[Token(Token = "0x40010AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[Tooltip("The Recieve Shadows setting used in the Renderer.")]
			public bool receiveShadows;

			[Token(Token = "0x40010AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("The Shadow Casting setting used in the Renderer.")]
			public ShadowCastingMode shadowCasting;

			[Token(Token = "0x40010AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[Tooltip("The Motion Vectors setting used in the Renderer.")]
			public MotionVectorGenerationMode motionVectors;

			[Token(Token = "0x40010AF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("The Skinned Motion Vectors setting used in the Renderer.")]
			public bool skinnedMotionVectors;

			[Token(Token = "0x40010B0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[Tooltip("The Light Probe Usage setting found in the Renderer.")]
			public LightProbeUsage lightProbeUsage;

			[Token(Token = "0x40010B1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[Tooltip("The Reflection Probe Usage setting found in the Renderer.")]
			public ReflectionProbeUsage reflectionProbeUsage;

			[Token(Token = "0x40010B2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[Header("GameObject")]
			[Tooltip("The tag to use on the GameObject.")]
			public string tag;

			[Token(Token = "0x40010B3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			[Tooltip("The layer to use on the GameObject.")]
			public int layer;

			[Token(Token = "0x6001263")]
			[Address(RVA = "0xBF9F28", Offset = "0xBF9F28", VA = "0xBF9F28")]
			public AutoLODSettings(float lodDistancePercentageValue, float qualityValue = 0.8f)
			{
			}

			[Token(Token = "0x6001264")]
			[Address(RVA = "0xBF9FD8", Offset = "0xBF9FD8", VA = "0xBF9FD8")]
			public AutoLODSettings(float lodDistancePercentage, float quality, SkinQuality skinQuality, bool receiveShadows, ShadowCastingMode shadowCasting, MotionVectorGenerationMode motionVectors, bool skinnedMotionVectors, LightProbeUsage lightProbeUsage = LightProbeUsage.BlendProbes, ReflectionProbeUsage reflectionProbeUsage = ReflectionProbeUsage.BlendProbes, string tag = "Untagged", int layer = 0)
			{
			}

			[Token(Token = "0x6001265")]
			[Address(RVA = "0xBF96D4", Offset = "0xBF96D4", VA = "0xBF96D4")]
			public LODSettings ToLODSettings()
			{
				return default(LODSettings);
			}
		}

		[Token(Token = "0x2000280")]
		[CompilerGenerated]
		private sealed class <InvertMeshAtRuntime>d__13 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40010B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40010B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40010B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public bool recursive;

			[Token(Token = "0x40010B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
			public bool optionUseMeshFilters;

			[Token(Token = "0x40010B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public GameObject go;

			[Token(Token = "0x40010B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public bool enabledRenderersOnly;

			[Token(Token = "0x40010BA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
			public bool optionUseSkinnedMeshRenderers;

			[Token(Token = "0x40010BB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private MeshFilter[] <>7__wrap1;

			[Token(Token = "0x40010BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private int <>7__wrap2;

			[Token(Token = "0x40010BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private SkinnedMeshRenderer[] <>7__wrap3;

			[Token(Token = "0x170002B9")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001269")]
				[Address(RVA = "0xBFA89C", Offset = "0xBFA89C", VA = "0xBFA89C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002BA")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600126B")]
				[Address(RVA = "0xBFA8E4", Offset = "0xBFA8E4", VA = "0xBFA8E4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001266")]
			[Address(RVA = "0xBF796C", Offset = "0xBF796C", VA = "0xBF796C")]
			[DebuggerHidden]
			public <InvertMeshAtRuntime>d__13(int <>1__state)
			{
			}

			[Token(Token = "0x6001267")]
			[Address(RVA = "0xBFA090", Offset = "0xBFA090", VA = "0xBFA090", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001268")]
			[Address(RVA = "0xBFA094", Offset = "0xBFA094", VA = "0xBFA094", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600126A")]
			[Address(RVA = "0xBFA8A4", Offset = "0xBFA8A4", VA = "0xBFA8A4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000281")]
		[CompilerGenerated]
		private sealed class <MakeDoubleSidedAtRuntime>d__15 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40010BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40010BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40010C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public bool recursive;

			[Token(Token = "0x40010C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
			public bool optionUseMeshFilters;

			[Token(Token = "0x40010C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public GameObject go;

			[Token(Token = "0x40010C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public bool enabledRenderersOnly;

			[Token(Token = "0x40010C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
			public bool optionUseSkinnedMeshRenderers;

			[Token(Token = "0x40010C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private MeshFilter[] <>7__wrap1;

			[Token(Token = "0x40010C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private int <>7__wrap2;

			[Token(Token = "0x40010C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private SkinnedMeshRenderer[] <>7__wrap3;

			[Token(Token = "0x170002BB")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600126F")]
				[Address(RVA = "0xBFB0F8", Offset = "0xBFB0F8", VA = "0xBFB0F8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002BC")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001271")]
				[Address(RVA = "0xBFB140", Offset = "0xBFB140", VA = "0xBFB140", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600126C")]
			[Address(RVA = "0xBF7A3C", Offset = "0xBF7A3C", VA = "0xBF7A3C")]
			[DebuggerHidden]
			public <MakeDoubleSidedAtRuntime>d__15(int <>1__state)
			{
			}

			[Token(Token = "0x600126D")]
			[Address(RVA = "0xBFA8EC", Offset = "0xBFA8EC", VA = "0xBFA8EC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600126E")]
			[Address(RVA = "0xBFA8F0", Offset = "0xBFA8F0", VA = "0xBFA8F0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001270")]
			[Address(RVA = "0xBFB100", Offset = "0xBFB100", VA = "0xBFB100", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000282")]
		[CompilerGenerated]
		private sealed class <CombineChildrenAtRuntime>d__17 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40010C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40010C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40010CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public int userMaxVertices;

			[Token(Token = "0x40010CB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public GameObject go;

			[Token(Token = "0x40010CC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public bool enabledRenderersOnly;

			[Token(Token = "0x40010CD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public int createNewObjectsWithLayer;

			[Token(Token = "0x40010CE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public string createNewObjectsWithTag;

			[Token(Token = "0x40010CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public bool createNewObjectsWithMeshColliders;

			[Token(Token = "0x40010D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
			public bool deleteSourceObjects;

			[Token(Token = "0x40010D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
			public bool deleteObjectsWithDisabledRenderers;

			[Token(Token = "0x40010D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x43")]
			public bool deleteEmptyObjects;

			[Token(Token = "0x40010D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			private bool <foundEmptyObjects>5__2;

			[Token(Token = "0x170002BD")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001275")]
				[Address(RVA = "0xBFDE08", Offset = "0xBFDE08", VA = "0xBFDE08", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002BE")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001277")]
				[Address(RVA = "0xBFDE50", Offset = "0xBFDE50", VA = "0xBFDE50", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001272")]
			[Address(RVA = "0xBF7C30", Offset = "0xBF7C30", VA = "0xBF7C30")]
			[DebuggerHidden]
			public <CombineChildrenAtRuntime>d__17(int <>1__state)
			{
			}

			[Token(Token = "0x6001273")]
			[Address(RVA = "0xBFB148", Offset = "0xBFB148", VA = "0xBFB148", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001274")]
			[Address(RVA = "0xBFB14C", Offset = "0xBFB14C", VA = "0xBFB14C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001276")]
			[Address(RVA = "0xBFDE10", Offset = "0xBFDE10", VA = "0xBFDE10", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000283")]
		[CompilerGenerated]
		private sealed class <DecimateMeshAtRuntime>d__26 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40010D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40010D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40010D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public bool recursive;

			[Token(Token = "0x40010D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
			public bool optionUseMeshFilters;

			[Token(Token = "0x40010D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public GameObject go;

			[Token(Token = "0x40010D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public bool optionUseSkinnedMeshRenderers;

			[Token(Token = "0x40010DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
			public bool enabledRenderersOnly;

			[Token(Token = "0x40010DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public float quality;

			[Token(Token = "0x40010DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public bool recalculateNormals;

			[Token(Token = "0x40010DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
			public bool preserveBorders;

			[Token(Token = "0x40010DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
			public bool preserveSeams;

			[Token(Token = "0x40010DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3B")]
			public bool preserveFoldovers;

			[Token(Token = "0x40010E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private MeshFilter[] <>7__wrap1;

			[Token(Token = "0x40010E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private int <>7__wrap2;

			[Token(Token = "0x40010E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private SkinnedMeshRenderer[] <>7__wrap3;

			[Token(Token = "0x170002BF")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600127B")]
				[Address(RVA = "0xBFE68C", Offset = "0xBFE68C", VA = "0xBFE68C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002C0")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600127D")]
				[Address(RVA = "0xBFE6D4", Offset = "0xBFE6D4", VA = "0xBFE6D4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001278")]
			[Address(RVA = "0xBF9588", Offset = "0xBF9588", VA = "0xBF9588")]
			[DebuggerHidden]
			public <DecimateMeshAtRuntime>d__26(int <>1__state)
			{
			}

			[Token(Token = "0x6001279")]
			[Address(RVA = "0xBFDE58", Offset = "0xBFDE58", VA = "0xBFDE58", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600127A")]
			[Address(RVA = "0xBFDE5C", Offset = "0xBFDE5C", VA = "0xBFDE5C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600127C")]
			[Address(RVA = "0xBFE694", Offset = "0xBFE694", VA = "0xBFE694", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40010A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool debug;

		[Token(Token = "0x40010A2")]
		private const int maxVertices = 65534;

		[Token(Token = "0x40010A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static MeshKit _instance;

		[Token(Token = "0x170002B8")]
		public static MeshKit com
		{
			[Token(Token = "0x6001246")]
			[Address(RVA = "0xBF3B1C", Offset = "0xBF3B1C", VA = "0xBF3B1C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001247")]
		[Address(RVA = "0xBF3D4C", Offset = "0xBF3D4C", VA = "0xBF3D4C")]
		public static Mesh RebuildMesh(Mesh m, bool optionStripNormals, bool optionStripTangents, bool optionStripColors, bool optionStripUV2, bool optionStripUV3, bool optionStripUV4, bool optionStripUV5, bool optionStripUV6, bool optionStripUV7, bool optionStripUV8, bool optionRebuildNormals, bool optionRebuildTangents, float rebuildNormalsAngle = -1f)
		{
			return null;
		}

		[Token(Token = "0x6001248")]
		[Address(RVA = "0xBF50E0", Offset = "0xBF50E0", VA = "0xBF50E0")]
		public static Mesh StripUnusedVertices(Mesh m, bool optimize)
		{
			return null;
		}

		[Token(Token = "0x6001249")]
		[Address(RVA = "0xBF5178", Offset = "0xBF5178", VA = "0xBF5178")]
		public static Mesh Strip(Mesh m, bool optimize, bool stripNormals, bool stripTangents, bool stripColors, bool stripUV, bool stripUV2, bool stripUV3, bool stripUV4, bool stripUV5, bool stripUV6, bool stripUV7, bool stripUV8, bool stripBoneWeights, bool stripBindPoses)
		{
			return null;
		}

		[Token(Token = "0x600124A")]
		[Address(RVA = "0xBF6134", Offset = "0xBF6134", VA = "0xBF6134")]
		public static Mesh[] SplitMesh(Mesh mesh, bool stripUnusedVertices)
		{
			return null;
		}

		[Token(Token = "0x600124B")]
		[Address(RVA = "0xBF4BCC", Offset = "0xBF4BCC", VA = "0xBF4BCC")]
		public static Mesh CreateTangents(Mesh mesh)
		{
			return null;
		}

		[Token(Token = "0x600124C")]
		[Address(RVA = "0xBF6754", Offset = "0xBF6754", VA = "0xBF6754")]
		public static Mesh InvertMesh(Mesh mesh)
		{
			return null;
		}

		[Token(Token = "0x600124D")]
		[Address(RVA = "0xBF6884", Offset = "0xBF6884", VA = "0xBF6884")]
		public static Mesh MakeDoubleSidedMesh(Mesh mesh)
		{
			return null;
		}

		[Token(Token = "0x600124E")]
		[Address(RVA = "0xBF2EE8", Offset = "0xBF2EE8", VA = "0xBF2EE8")]
		public static void InvertMesh(GameObject go, bool recursive, bool optionUseMeshFilters, bool optionUseSkinnedMeshRenderers, bool enabledRenderersOnly)
		{
		}

		[Token(Token = "0x600124F")]
		[Address(RVA = "0xBF78C4", Offset = "0xBF78C4", VA = "0xBF78C4")]
		[IteratorStateMachine(typeof(<InvertMeshAtRuntime>d__13))]
		public IEnumerator InvertMeshAtRuntime(GameObject go, bool recursive, bool optionUseMeshFilters, bool optionUseSkinnedMeshRenderers, bool enabledRenderersOnly)
		{
			return null;
		}

		[Token(Token = "0x6001250")]
		[Address(RVA = "0xBF3084", Offset = "0xBF3084", VA = "0xBF3084")]
		public static void MakeDoubleSided(GameObject go, bool recursive, bool optionUseMeshFilters, bool optionUseSkinnedMeshRenderers, bool enabledRenderersOnly)
		{
		}

		[Token(Token = "0x6001251")]
		[Address(RVA = "0xBF7994", Offset = "0xBF7994", VA = "0xBF7994")]
		[IteratorStateMachine(typeof(<MakeDoubleSidedAtRuntime>d__15))]
		public IEnumerator MakeDoubleSidedAtRuntime(GameObject go, bool recursive, bool optionUseMeshFilters, bool optionUseSkinnedMeshRenderers, bool enabledRenderersOnly)
		{
			return null;
		}

		[Token(Token = "0x6001252")]
		[Address(RVA = "0xBF7A64", Offset = "0xBF7A64", VA = "0xBF7A64")]
		public static void CombineChildren(GameObject go, bool optimizeMeshes, int createNewObjectsWithLayer, string createNewObjectsWithTag, bool enabledRenderersOnly, bool createNewObjectsWithMeshColliders, bool deleteSourceObjects, bool deleteObjectsWithDisabledRenderers, bool deleteEmptyObjects, int userMaxVertices = 65534)
		{
		}

		[Token(Token = "0x6001253")]
		[Address(RVA = "0xBF7B54", Offset = "0xBF7B54", VA = "0xBF7B54")]
		[IteratorStateMachine(typeof(<CombineChildrenAtRuntime>d__17))]
		public IEnumerator CombineChildrenAtRuntime(GameObject go, bool optimizeMeshes, int createNewObjectsWithLayer, string createNewObjectsWithTag, bool enabledRenderersOnly, bool createNewObjectsWithMeshColliders, bool deleteSourceObjects, bool deleteObjectsWithDisabledRenderers, bool deleteEmptyObjects, int userMaxVertices = 65534)
		{
			return null;
		}

		[Token(Token = "0x6001254")]
		[Address(RVA = "0xBF7C58", Offset = "0xBF7C58", VA = "0xBF7C58")]
		public static bool ListContains(ArrayList list, Material[] key, Mesh originalMesh, MeshFilter mf)
		{
			return default(bool);
		}

		[Token(Token = "0x6001255")]
		[Address(RVA = "0xBF3200", Offset = "0xBF3200", VA = "0xBF3200")]
		public static void SeparateMeshes(GameObject go, bool onlyApplyToEnabledRenderers, bool stripUnusedVertices)
		{
		}

		[Token(Token = "0x6001256")]
		[Address(RVA = "0xBF80F0", Offset = "0xBF80F0", VA = "0xBF80F0")]
		public static void RebuildSeparatedObjects(BatchMeshes bm)
		{
		}

		[Token(Token = "0x6001257")]
		[Address(RVA = "0xBF881C", Offset = "0xBF881C", VA = "0xBF881C")]
		public static void Rebuild(GameObject go, bool recursive, bool optionUseMeshFilters, bool optionUseSkinnedMeshRenderers, bool optionStripNormals, bool optionStripTangents, bool optionStripColors, bool optionStripUV2, bool optionStripUV3, bool optionStripUV4, bool optionStripUV5, bool optionStripUV6, bool optionStripUV7, bool optionStripUV8, bool optionRebuildNormals, bool optionRebuildTangents, float rebuildNormalsAngle = -1f)
		{
		}

		[Token(Token = "0x6001258")]
		[Address(RVA = "0xBF8DEC", Offset = "0xBF8DEC", VA = "0xBF8DEC")]
		public static Mesh DecimateMesh(SkinnedMeshRenderer smr, float quality, bool recalculateNormals, bool preserveBorders = false, bool preserveSeams = false, bool preserveFoldovers = false)
		{
			return null;
		}

		[Token(Token = "0x6001259")]
		[Address(RVA = "0xBF90C0", Offset = "0xBF90C0", VA = "0xBF90C0")]
		public static Mesh DecimateMesh(MeshFilter mf, float quality, bool recalculateNormals, bool preserveBorders = false, bool preserveSeams = false, bool preserveFoldovers = false)
		{
			return null;
		}

		[Token(Token = "0x600125A")]
		[Address(RVA = "0xBF9394", Offset = "0xBF9394", VA = "0xBF9394")]
		public static void DecimateMesh(GameObject go, bool recursive, bool optionUseMeshFilters, bool optionUseSkinnedMeshRenderers, bool enabledRenderersOnly, float quality, bool recalculateNormals, bool preserveBorders = false, bool preserveSeams = false, bool preserveFoldovers = false)
		{
		}

		[Token(Token = "0x600125B")]
		[Address(RVA = "0xBF9490", Offset = "0xBF9490", VA = "0xBF9490")]
		[IteratorStateMachine(typeof(<DecimateMeshAtRuntime>d__26))]
		public IEnumerator DecimateMeshAtRuntime(GameObject go, bool recursive, bool optionUseMeshFilters, bool optionUseSkinnedMeshRenderers, bool enabledRenderersOnly, float quality, bool recalculateNormals, bool preserveBorders = false, bool preserveSeams = false, bool preserveFoldovers = false)
		{
			return null;
		}

		[Token(Token = "0x600125C")]
		[Address(RVA = "0xBF95B0", Offset = "0xBF95B0", VA = "0xBF95B0")]
		public static LODSettings[] AutoLODSetttingsToLODSettings(AutoLODSettings[] autoLODSettings)
		{
			return null;
		}

		[Token(Token = "0x600125D")]
		[Address(RVA = "0xBF972C", Offset = "0xBF972C", VA = "0xBF972C")]
		public static void AutoLOD(GameObject go, bool preserveBorders = false, bool preserveSeams = false, bool preserveFoldovers = false)
		{
		}

		[Token(Token = "0x600125E")]
		[Address(RVA = "0xBF9E38", Offset = "0xBF9E38", VA = "0xBF9E38")]
		public static void AutoLOD(GameObject go, AutoLODSettings[] levels, float cullingDistance = 1f, bool preserveBorders = false, bool preserveSeams = false, bool preserveFoldovers = false)
		{
		}

		[Token(Token = "0x600125F")]
		[Address(RVA = "0xBF9950", Offset = "0xBF9950", VA = "0xBF9950")]
		public static void AutoLOD(GameObject go, LODSettings[] levels, float cullingDistance = 1f, bool preserveBorders = false, bool preserveSeams = false, bool preserveFoldovers = false)
		{
		}

		[Token(Token = "0x6001260")]
		[Address(RVA = "0xBF9ED4", Offset = "0xBF9ED4", VA = "0xBF9ED4")]
		public MeshKit()
		{
		}
	}
	[Token(Token = "0x2000284")]
	public static class Arrays
	{
		[Token(Token = "0x600127E")]
		public static bool AddItem<T>(ref T[] _arr, T item)
		{
			return default(bool);
		}

		[Token(Token = "0x600127F")]
		public static void AddItemFastest<T>(ref T[] _arr, T item)
		{
		}

		[Token(Token = "0x6001280")]
		public static bool AddItemIfNotPresent<T>(ref T[] _arr, T item)
		{
			return default(bool);
		}

		[Token(Token = "0x6001281")]
		public static bool RemoveItem<T>(ref T[] _arr, ref T item, bool onlyRemoveFirstInstance = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6001282")]
		public static bool RemoveFirstItem<T>(ref T[] _arr)
		{
			return default(bool);
		}

		[Token(Token = "0x6001283")]
		public static bool RemoveItemAtIndex<T>(ref T[] _arr, int index)
		{
			return default(bool);
		}

		[Token(Token = "0x6001284")]
		public static int ItemExistsAtIndex<T>(ref T[] _arr, ref T item)
		{
			return default(int);
		}

		[Token(Token = "0x6001285")]
		public static bool ItemExists<T>(T[] _arr, T item)
		{
			return default(bool);
		}

		[Token(Token = "0x6001286")]
		public static T[] Concat<T>(this T[] a, T[] b)
		{
			return null;
		}

		[Token(Token = "0x6001287")]
		public static T[] Combine<T>(T[] a, T[] b)
		{
			return null;
		}

		[Token(Token = "0x6001288")]
		public static bool Clear<T>(ref T[] arr)
		{
			return default(bool);
		}

		[Token(Token = "0x6001289")]
		public static bool Shift<T>(ref T[] _arr, int id, bool moveUp)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000285")]
	[AddComponentMenu("MeshKit/Automatic LOD")]
	[DisallowMultipleComponent]
	public sealed class MeshKitAutoLOD : MonoBehaviour
	{
		[Token(Token = "0x40010E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public bool advancedMode;

		[Token(Token = "0x40010E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[HideInInspector]
		public bool preserveBorders;

		[Token(Token = "0x40010E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		[HideInInspector]
		public bool preserveSeams;

		[Token(Token = "0x40010E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
		[HideInInspector]
		public bool preserveFoldovers;

		[Token(Token = "0x40010E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public LODSettings[] levels;

		[Token(Token = "0x40010E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		[Range(0f, 99.9f)]
		public float cullingDistance;

		[Token(Token = "0x40010E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[HideInInspector]
		public bool generated;

		[Token(Token = "0x170002C1")]
		public LODSettings[] Levels
		{
			[Token(Token = "0x600128A")]
			[Address(RVA = "0xBFE6DC", Offset = "0xBFE6DC", VA = "0xBFE6DC")]
			get
			{
				return null;
			}
			[Token(Token = "0x600128B")]
			[Address(RVA = "0xBFE8B8", Offset = "0xBFE8B8", VA = "0xBFE8B8")]
			set
			{
			}
		}

		[Token(Token = "0x170002C2")]
		public bool IsGenerated
		{
			[Token(Token = "0x600128C")]
			[Address(RVA = "0xBFE8C0", Offset = "0xBFE8C0", VA = "0xBFE8C0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600128D")]
		[Address(RVA = "0xBFE8C8", Offset = "0xBFE8C8", VA = "0xBFE8C8")]
		public void Reset()
		{
		}

		[Token(Token = "0x600128E")]
		[Address(RVA = "0xBFEAE8", Offset = "0xBFEAE8", VA = "0xBFEAE8")]
		public void GenerateLODs([Optional] LODStatusReportCallback statusCallback)
		{
		}

		[Token(Token = "0x600128F")]
		[Address(RVA = "0xBFEAC0", Offset = "0xBFEAC0", VA = "0xBFEAC0")]
		public void ResetLODs()
		{
		}

		[Token(Token = "0x6001290")]
		[Address(RVA = "0xBFEB4C", Offset = "0xBFEB4C", VA = "0xBFEB4C")]
		public MeshKitAutoLOD()
		{
		}
	}
	[Token(Token = "0x2000286")]
	public static class MeshKitNormals
	{
		[Token(Token = "0x2000287")]
		private struct VertexKey
		{
			[Token(Token = "0x40010EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly long _x;

			[Token(Token = "0x40010EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private readonly long _y;

			[Token(Token = "0x40010EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly long _z;

			[Token(Token = "0x40010ED")]
			private const int Tolerance = 100000;

			[Token(Token = "0x6001292")]
			[Address(RVA = "0xBFEB5C", Offset = "0xBFEB5C", VA = "0xBFEB5C")]
			public VertexKey(UnityEngine.Vector3 position)
			{
			}

			[Token(Token = "0x6001293")]
			[Address(RVA = "0xBFEEA8", Offset = "0xBFEEA8", VA = "0xBFEEA8", Slot = "0")]
			public override bool Equals(object obj)
			{
				return default(bool);
			}

			[Token(Token = "0x6001294")]
			[Address(RVA = "0xBFEF50", Offset = "0xBFEF50", VA = "0xBFEF50", Slot = "2")]
			public override int GetHashCode()
			{
				return default(int);
			}
		}

		[Token(Token = "0x2000288")]
		private sealed class VertexEntry
		{
			[Token(Token = "0x40010EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int[] TriangleIndex;

			[Token(Token = "0x40010EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int[] VertexIndex;

			[Token(Token = "0x40010F0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int _reserved;

			[Token(Token = "0x40010F1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			private int _count;

			[Token(Token = "0x170002C3")]
			public int Count
			{
				[Token(Token = "0x6001295")]
				[Address(RVA = "0xBFEF94", Offset = "0xBFEF94", VA = "0xBFEF94")]
				get
				{
					return default(int);
				}
			}

			[Token(Token = "0x6001296")]
			[Address(RVA = "0xBFEDD4", Offset = "0xBFEDD4", VA = "0xBFEDD4")]
			public void Add(int vertIndex, int triIndex)
			{
			}

			[Token(Token = "0x6001297")]
			[Address(RVA = "0xBFED64", Offset = "0xBFED64", VA = "0xBFED64")]
			public VertexEntry()
			{
			}
		}

		[Token(Token = "0x6001291")]
		[Address(RVA = "0xBF41E4", Offset = "0xBF41E4", VA = "0xBF41E4")]
		public static void RecalculateNormalsBasedOnAngleThreshold(this Mesh mesh, float angle)
		{
		}
	}
}
namespace DG.Tweening
{
	[Token(Token = "0x2000289")]
	public static class DOTweenModuleAudio
	{
		[Token(Token = "0x6001298")]
		[Address(RVA = "0xBFEF9C", Offset = "0xBFEF9C", VA = "0xBFEF9C")]
		public static TweenerCore<float, float, FloatOptions> DOFade(this AudioSource target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001299")]
		[Address(RVA = "0xBFF138", Offset = "0xBFF138", VA = "0xBFF138")]
		public static TweenerCore<float, float, FloatOptions> DOPitch(this AudioSource target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x600129A")]
		[Address(RVA = "0xBFF2AC", Offset = "0xBFF2AC", VA = "0xBFF2AC")]
		public static TweenerCore<float, float, FloatOptions> DOSetFloat(this AudioMixer target, string floatName, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x600129B")]
		[Address(RVA = "0xBFF424", Offset = "0xBFF424", VA = "0xBFF424")]
		public static int DOComplete(this AudioMixer target, bool withCallbacks = false)
		{
			return default(int);
		}

		[Token(Token = "0x600129C")]
		[Address(RVA = "0xBFF48C", Offset = "0xBFF48C", VA = "0xBFF48C")]
		public static int DOKill(this AudioMixer target, bool complete = false)
		{
			return default(int);
		}

		[Token(Token = "0x600129D")]
		[Address(RVA = "0xBFF4F4", Offset = "0xBFF4F4", VA = "0xBFF4F4")]
		public static int DOFlip(this AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x600129E")]
		[Address(RVA = "0xBFF54C", Offset = "0xBFF54C", VA = "0xBFF54C")]
		public static int DOGoto(this AudioMixer target, float to, bool andPlay = false)
		{
			return default(int);
		}

		[Token(Token = "0x600129F")]
		[Address(RVA = "0xBFF5C4", Offset = "0xBFF5C4", VA = "0xBFF5C4")]
		public static int DOPause(this AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x60012A0")]
		[Address(RVA = "0xBFF61C", Offset = "0xBFF61C", VA = "0xBFF61C")]
		public static int DOPlay(this AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x60012A1")]
		[Address(RVA = "0xBFF674", Offset = "0xBFF674", VA = "0xBFF674")]
		public static int DOPlayBackwards(this AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x60012A2")]
		[Address(RVA = "0xBFF6CC", Offset = "0xBFF6CC", VA = "0xBFF6CC")]
		public static int DOPlayForward(this AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x60012A3")]
		[Address(RVA = "0xBFF724", Offset = "0xBFF724", VA = "0xBFF724")]
		public static int DORestart(this AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x60012A4")]
		[Address(RVA = "0xBFF784", Offset = "0xBFF784", VA = "0xBFF784")]
		public static int DORewind(this AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x60012A5")]
		[Address(RVA = "0xBFF7E0", Offset = "0xBFF7E0", VA = "0xBFF7E0")]
		public static int DOSmoothRewind(this AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x60012A6")]
		[Address(RVA = "0xBFF838", Offset = "0xBFF838", VA = "0xBFF838")]
		public static int DOTogglePause(this AudioMixer target)
		{
			return default(int);
		}
	}
	[Token(Token = "0x200028D")]
	public static class DOTweenModulePhysics
	{
		[Token(Token = "0x60012B0")]
		[Address(RVA = "0xBFF958", Offset = "0xBFF958", VA = "0xBFF958")]
		public static TweenerCore<UnityEngine.Vector3, UnityEngine.Vector3, VectorOptions> DOMove(this Rigidbody target, UnityEngine.Vector3 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x60012B1")]
		[Address(RVA = "0xBFFB00", Offset = "0xBFFB00", VA = "0xBFFB00")]
		public static TweenerCore<UnityEngine.Vector3, UnityEngine.Vector3, VectorOptions> DOMoveX(this Rigidbody target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x60012B2")]
		[Address(RVA = "0xBFFC9C", Offset = "0xBFFC9C", VA = "0xBFFC9C")]
		public static TweenerCore<UnityEngine.Vector3, UnityEngine.Vector3, VectorOptions> DOMoveY(this Rigidbody target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x60012B3")]
		[Address(RVA = "0xBFFE38", Offset = "0xBFFE38", VA = "0xBFFE38")]
		public static TweenerCore<UnityEngine.Vector3, UnityEngine.Vector3, VectorOptions> DOMoveZ(this Rigidbody target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x60012B4")]
		[Address(RVA = "0xBFFFD4", Offset = "0xBFFFD4", VA = "0xBFFFD4")]
		public static TweenerCore<Quaternion, UnityEngine.Vector3, QuaternionOptions> DORotate(this Rigidbody target, UnityEngine.Vector3 endValue, float duration, RotateMode mode = RotateMode.Fast)
		{
			return null;
		}

		[Token(Token = "0x60012B5")]
		[Address(RVA = "0xC00178", Offset = "0xC00178", VA = "0xC00178")]
		public static TweenerCore<Quaternion, UnityEngine.Vector3, QuaternionOptions> DOLookAt(this Rigidbody target, UnityEngine.Vector3 towards, float duration, AxisConstraint axisConstraint = AxisConstraint.None, [Optional] UnityEngine.Vector3? up)
		{
			return null;
		}

		[Token(Token = "0x60012B6")]
		[Address(RVA = "0xC003D0", Offset = "0xC003D0", VA = "0xC003D0")]
		public static Sequence DOJump(this Rigidbody target, UnityEngine.Vector3 endValue, float jumpPower, int numJumps, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x60012B7")]
		[Address(RVA = "0xC008B0", Offset = "0xC008B0", VA = "0xC008B0")]
		public static TweenerCore<UnityEngine.Vector3, Path, PathOptions> DOPath(this Rigidbody target, UnityEngine.Vector3[] path, float duration, PathType pathType = PathType.Linear, PathMode pathMode = PathMode.Full3D, int resolution = 10, [Optional] Color? gizmoColor)
		{
			return null;
		}

		[Token(Token = "0x60012B8")]
		[Address(RVA = "0xC00B14", Offset = "0xC00B14", VA = "0xC00B14")]
		public static TweenerCore<UnityEngine.Vector3, Path, PathOptions> DOLocalPath(this Rigidbody target, UnityEngine.Vector3[] path, float duration, PathType pathType = PathType.Linear, PathMode pathMode = PathMode.Full3D, int resolution = 10, [Optional] Color? gizmoColor)
		{
			return null;
		}

		[Token(Token = "0x60012B9")]
		[Address(RVA = "0xC00D84", Offset = "0xC00D84", VA = "0xC00D84")]
		internal static TweenerCore<UnityEngine.Vector3, Path, PathOptions> DOPath(this Rigidbody target, Path path, float duration, PathMode pathMode = PathMode.Full3D)
		{
			return null;
		}

		[Token(Token = "0x60012BA")]
		[Address(RVA = "0xC00F48", Offset = "0xC00F48", VA = "0xC00F48")]
		internal static TweenerCore<UnityEngine.Vector3, Path, PathOptions> DOLocalPath(this Rigidbody target, Path path, float duration, PathMode pathMode = PathMode.Full3D)
		{
			return null;
		}
	}
	[Token(Token = "0x2000299")]
	public static class DOTweenModulePhysics2D
	{
		[Token(Token = "0x60012D7")]
		[Address(RVA = "0xC01538", Offset = "0xC01538", VA = "0xC01538")]
		public static TweenerCore<UnityEngine.Vector2, UnityEngine.Vector2, VectorOptions> DOMove(this Rigidbody2D target, UnityEngine.Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x60012D8")]
		[Address(RVA = "0xC016D8", Offset = "0xC016D8", VA = "0xC016D8")]
		public static TweenerCore<UnityEngine.Vector2, UnityEngine.Vector2, VectorOptions> DOMoveX(this Rigidbody2D target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x60012D9")]
		[Address(RVA = "0xC01870", Offset = "0xC01870", VA = "0xC01870")]
		public static TweenerCore<UnityEngine.Vector2, UnityEngine.Vector2, VectorOptions> DOMoveY(this Rigidbody2D target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x60012DA")]
		[Address(RVA = "0xC01A08", Offset = "0xC01A08", VA = "0xC01A08")]
		public static TweenerCore<float, float, FloatOptions> DORotate(this Rigidbody2D target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x60012DB")]
		[Address(RVA = "0xC01B88", Offset = "0xC01B88", VA = "0xC01B88")]
		public static Sequence DOJump(this Rigidbody2D target, UnityEngine.Vector2 endValue, float jumpPower, int numJumps, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x60012DC")]
		[Address(RVA = "0xC01F90", Offset = "0xC01F90", VA = "0xC01F90")]
		public static TweenerCore<UnityEngine.Vector3, Path, PathOptions> DOPath(this Rigidbody2D target, UnityEngine.Vector2[] path, float duration, PathType pathType = PathType.Linear, PathMode pathMode = PathMode.Full3D, int resolution = 10, [Optional] Color? gizmoColor)
		{
			return null;
		}

		[Token(Token = "0x60012DD")]
		[Address(RVA = "0xC0226C", Offset = "0xC0226C", VA = "0xC0226C")]
		public static TweenerCore<UnityEngine.Vector3, Path, PathOptions> DOLocalPath(this Rigidbody2D target, UnityEngine.Vector2[] path, float duration, PathType pathType = PathType.Linear, PathMode pathMode = PathMode.Full3D, int resolution = 10, [Optional] Color? gizmoColor)
		{
			return null;
		}
	}
	[Token(Token = "0x20002A1")]
	public static class DOTweenModuleSprite
	{
		[Token(Token = "0x60012F3")]
		[Address(RVA = "0xC02854", Offset = "0xC02854", VA = "0xC02854")]
		public static TweenerCore<Color, Color, ColorOptions> DOColor(this SpriteRenderer target, Color endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x60012F4")]
		[Address(RVA = "0xC029F0", Offset = "0xC029F0", VA = "0xC029F0")]
		public static TweenerCore<Color, Color, ColorOptions> DOFade(this SpriteRenderer target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x60012F5")]
		[Address(RVA = "0xC02B64", Offset = "0xC02B64", VA = "0xC02B64")]
		public static Sequence DOGradientColor(this SpriteRenderer target, Gradient gradient, float duration)
		{
			return null;
		}

		[Token(Token = "0x60012F6")]
		[Address(RVA = "0xC02D40", Offset = "0xC02D40", VA = "0xC02D40")]
		public static Tweener DOBlendableColor(this SpriteRenderer target, Color endValue, float duration)
		{
			return null;
		}
	}
	[Token(Token = "0x20002A5")]
	public static class DOTweenModuleUI
	{
		[Token(Token = "0x20002A6")]
		public static class Utils
		{
			[Token(Token = "0x6001329")]
			[Address(RVA = "0xC075A8", Offset = "0xC075A8", VA = "0xC075A8")]
			public static UnityEngine.Vector2 SwitchToRectTransform(RectTransform from, RectTransform to)
			{
				return default(UnityEngine.Vector2);
			}
		}

		[Token(Token = "0x6001300")]
		[Address(RVA = "0xC03020", Offset = "0xC03020", VA = "0xC03020")]
		public static TweenerCore<float, float, FloatOptions> DOFade(this CanvasGroup target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001301")]
		[Address(RVA = "0xC03194", Offset = "0xC03194", VA = "0xC03194")]
		public static TweenerCore<Color, Color, ColorOptions> DOColor(this Graphic target, Color endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001302")]
		[Address(RVA = "0xC03330", Offset = "0xC03330", VA = "0xC03330")]
		public static TweenerCore<Color, Color, ColorOptions> DOFade(this Graphic target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001303")]
		[Address(RVA = "0xC034A4", Offset = "0xC034A4", VA = "0xC034A4")]
		public static TweenerCore<Color, Color, ColorOptions> DOColor(this Image target, Color endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001304")]
		[Address(RVA = "0xC03640", Offset = "0xC03640", VA = "0xC03640")]
		public static TweenerCore<Color, Color, ColorOptions> DOFade(this Image target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001305")]
		[Address(RVA = "0xC037B4", Offset = "0xC037B4", VA = "0xC037B4")]
		public static TweenerCore<float, float, FloatOptions> DOFillAmount(this Image target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001306")]
		[Address(RVA = "0xC0394C", Offset = "0xC0394C", VA = "0xC0394C")]
		public static Sequence DOGradientColor(this Image target, Gradient gradient, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001307")]
		[Address(RVA = "0xC03B30", Offset = "0xC03B30", VA = "0xC03B30")]
		public static TweenerCore<UnityEngine.Vector2, UnityEngine.Vector2, VectorOptions> DOFlexibleSize(this LayoutElement target, UnityEngine.Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6001308")]
		[Address(RVA = "0xC03CCC", Offset = "0xC03CCC", VA = "0xC03CCC")]
		public static TweenerCore<UnityEngine.Vector2, UnityEngine.Vector2, VectorOptions> DOMinSize(this LayoutElement target, UnityEngine.Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6001309")]
		[Address(RVA = "0xC03E68", Offset = "0xC03E68", VA = "0xC03E68")]
		public static TweenerCore<UnityEngine.Vector2, UnityEngine.Vector2, VectorOptions> DOPreferredSize(this LayoutElement target, UnityEngine.Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x600130A")]
		[Address(RVA = "0xC04004", Offset = "0xC04004", VA = "0xC04004")]
		public static TweenerCore<Color, Color, ColorOptions> DOColor(this Outline target, Color endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x600130B")]
		[Address(RVA = "0xC041A0", Offset = "0xC041A0", VA = "0xC041A0")]
		public static TweenerCore<Color, Color, ColorOptions> DOFade(this Outline target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x600130C")]
		[Address(RVA = "0xC04314", Offset = "0xC04314", VA = "0xC04314")]
		public static TweenerCore<UnityEngine.Vector2, UnityEngine.Vector2, VectorOptions> DOScale(this Outline target, UnityEngine.Vector2 endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x600130D")]
		[Address(RVA = "0xC04498", Offset = "0xC04498", VA = "0xC04498")]
		public static TweenerCore<UnityEngine.Vector2, UnityEngine.Vector2, VectorOptions> DOAnchorPos(this RectTransform target, UnityEngine.Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x600130E")]
		[Address(RVA = "0xC04634", Offset = "0xC04634", VA = "0xC04634")]
		public static TweenerCore<UnityEngine.Vector2, UnityEngine.Vector2, VectorOptions> DOAnchorPosX(this RectTransform target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x600130F")]
		[Address(RVA = "0xC047C8", Offset = "0xC047C8", VA = "0xC047C8")]
		public static TweenerCore<UnityEngine.Vector2, UnityEngine.Vector2, VectorOptions> DOAnchorPosY(this RectTransform target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6001310")]
		[Address(RVA = "0xC0495C", Offset = "0xC0495C", VA = "0xC0495C")]
		public static TweenerCore<UnityEngine.Vector3, UnityEngine.Vector3, VectorOptions> DOAnchorPos3D(this RectTransform target, UnityEngine.Vector3 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6001311")]
		[Address(RVA = "0xC04B00", Offset = "0xC04B00", VA = "0xC04B00")]
		public static TweenerCore<UnityEngine.Vector3, UnityEngine.Vector3, VectorOptions> DOAnchorPos3DX(this RectTransform target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6001312")]
		[Address(RVA = "0xC04C98", Offset = "0xC04C98", VA = "0xC04C98")]
		public static TweenerCore<UnityEngine.Vector3, UnityEngine.Vector3, VectorOptions> DOAnchorPos3DY(this RectTransform target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6001313")]
		[Address(RVA = "0xC04E30", Offset = "0xC04E30", VA = "0xC04E30")]
		public static TweenerCore<UnityEngine.Vector3, UnityEngine.Vector3, VectorOptions> DOAnchorPos3DZ(this RectTransform target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6001314")]
		[Address(RVA = "0xC04FC8", Offset = "0xC04FC8", VA = "0xC04FC8")]
		public static TweenerCore<UnityEngine.Vector2, UnityEngine.Vector2, VectorOptions> DOAnchorMax(this RectTransform target, UnityEngine.Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6001315")]
		[Address(RVA = "0xC05164", Offset = "0xC05164", VA = "0xC05164")]
		public static TweenerCore<UnityEngine.Vector2, UnityEngine.Vector2, VectorOptions> DOAnchorMin(this RectTransform target, UnityEngine.Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6001316")]
		[Address(RVA = "0xC05300", Offset = "0xC05300", VA = "0xC05300")]
		public static TweenerCore<UnityEngine.Vector2, UnityEngine.Vector2, VectorOptions> DOPivot(this RectTransform target, UnityEngine.Vector2 endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001317")]
		[Address(RVA = "0xC05484", Offset = "0xC05484", VA = "0xC05484")]
		public static TweenerCore<UnityEngine.Vector2, UnityEngine.Vector2, VectorOptions> DOPivotX(this RectTransform target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001318")]
		[Address(RVA = "0xC0560C", Offset = "0xC0560C", VA = "0xC0560C")]
		public static TweenerCore<UnityEngine.Vector2, UnityEngine.Vector2, VectorOptions> DOPivotY(this RectTransform target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001319")]
		[Address(RVA = "0xC05794", Offset = "0xC05794", VA = "0xC05794")]
		public static TweenerCore<UnityEngine.Vector2, UnityEngine.Vector2, VectorOptions> DOSizeDelta(this RectTransform target, UnityEngine.Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x600131A")]
		[Address(RVA = "0xC05930", Offset = "0xC05930", VA = "0xC05930")]
		public static Tweener DOPunchAnchorPos(this RectTransform target, UnityEngine.Vector2 punch, float duration, int vibrato = 10, float elasticity = 1f, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x600131B")]
		[Address(RVA = "0xC05AD4", Offset = "0xC05AD4", VA = "0xC05AD4")]
		public static Tweener DOShakeAnchorPos(this RectTransform target, float duration, float strength = 100f, int vibrato = 10, float randomness = 90f, bool snapping = false, bool fadeOut = true)
		{
			return null;
		}

		[Token(Token = "0x600131C")]
		[Address(RVA = "0xC05CA0", Offset = "0xC05CA0", VA = "0xC05CA0")]
		public static Tweener DOShakeAnchorPos(this RectTransform target, float duration, UnityEngine.Vector2 strength, int vibrato = 10, float randomness = 90f, bool snapping = false, bool fadeOut = true)
		{
			return null;
		}

		[Token(Token = "0x600131D")]
		[Address(RVA = "0xC05E74", Offset = "0xC05E74", VA = "0xC05E74")]
		public static Sequence DOJumpAnchorPos(this RectTransform target, UnityEngine.Vector2 endValue, float jumpPower, int numJumps, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x600131E")]
		[Address(RVA = "0xC06280", Offset = "0xC06280", VA = "0xC06280")]
		public static Tweener DONormalizedPos(this ScrollRect target, UnityEngine.Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x600131F")]
		[Address(RVA = "0xC06410", Offset = "0xC06410", VA = "0xC06410")]
		public static Tweener DOHorizontalNormalizedPos(this ScrollRect target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6001320")]
		[Address(RVA = "0xC06590", Offset = "0xC06590", VA = "0xC06590")]
		public static Tweener DOVerticalNormalizedPos(this ScrollRect target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6001321")]
		[Address(RVA = "0xC06710", Offset = "0xC06710", VA = "0xC06710")]
		public static TweenerCore<float, float, FloatOptions> DOValue(this Slider target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6001322")]
		[Address(RVA = "0xC0689C", Offset = "0xC0689C", VA = "0xC0689C")]
		public static TweenerCore<Color, Color, ColorOptions> DOColor(this Text target, Color endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001323")]
		[Address(RVA = "0xC06A38", Offset = "0xC06A38", VA = "0xC06A38")]
		public static TweenerCore<int, int, NoOptions> DOCounter(this Text target, int fromValue, int endValue, float duration, bool addThousandsSeparator = true, [Optional] CultureInfo culture)
		{
			return null;
		}

		[Token(Token = "0x6001324")]
		[Address(RVA = "0xC06C14", Offset = "0xC06C14", VA = "0xC06C14")]
		public static TweenerCore<Color, Color, ColorOptions> DOFade(this Text target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001325")]
		[Address(RVA = "0xC06D88", Offset = "0xC06D88", VA = "0xC06D88")]
		public static TweenerCore<string, string, StringOptions> DOText(this Text target, string endValue, float duration, bool richTextEnabled = true, ScrambleMode scrambleMode = ScrambleMode.None, [Optional] string scrambleChars)
		{
			return null;
		}

		[Token(Token = "0x6001326")]
		[Address(RVA = "0xC06FA8", Offset = "0xC06FA8", VA = "0xC06FA8")]
		public static Tweener DOBlendableColor(this Graphic target, Color endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001327")]
		[Address(RVA = "0xC071A8", Offset = "0xC071A8", VA = "0xC071A8")]
		public static Tweener DOBlendableColor(this Image target, Color endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001328")]
		[Address(RVA = "0xC073A8", Offset = "0xC073A8", VA = "0xC073A8")]
		public static Tweener DOBlendableColor(this Text target, Color endValue, float duration)
		{
			return null;
		}
	}
	[Token(Token = "0x20002CF")]
	public static class DOTweenModuleUnityVersion
	{
		[StructLayout(3)]
		[Token(Token = "0x20002D2")]
		[CompilerGenerated]
		private struct <AsyncWaitForCompletion>d__10 : IAsyncStateMachine
		{
			[Token(Token = "0x4001152")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4001153")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder <>t__builder;

			[Token(Token = "0x4001154")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Tween t;

			[Token(Token = "0x4001155")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private YieldAwaitable.YieldAwaiter <>u__1;

			[Token(Token = "0x60013BC")]
			[Address(RVA = "0xC096DC", Offset = "0xC096DC", VA = "0xC096DC", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x60013BD")]
			[Address(RVA = "0xC09914", Offset = "0xC09914", VA = "0xC09914", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20002D3")]
		[CompilerGenerated]
		private struct <AsyncWaitForRewind>d__11 : IAsyncStateMachine
		{
			[Token(Token = "0x4001156")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4001157")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder <>t__builder;

			[Token(Token = "0x4001158")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Tween t;

			[Token(Token = "0x4001159")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private YieldAwaitable.YieldAwaiter <>u__1;

			[Token(Token = "0x60013BE")]
			[Address(RVA = "0xC09920", Offset = "0xC09920", VA = "0xC09920", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x60013BF")]
			[Address(RVA = "0xC09B7C", Offset = "0xC09B7C", VA = "0xC09B7C", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20002D4")]
		[CompilerGenerated]
		private struct <AsyncWaitForKill>d__12 : IAsyncStateMachine
		{
			[Token(Token = "0x400115A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x400115B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder <>t__builder;

			[Token(Token = "0x400115C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Tween t;

			[Token(Token = "0x400115D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private YieldAwaitable.YieldAwaiter <>u__1;

			[Token(Token = "0x60013C0")]
			[Address(RVA = "0xC09B88", Offset = "0xC09B88", VA = "0xC09B88", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x60013C1")]
			[Address(RVA = "0xC09DAC", Offset = "0xC09DAC", VA = "0xC09DAC", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20002D5")]
		[CompilerGenerated]
		private struct <AsyncWaitForElapsedLoops>d__13 : IAsyncStateMachine
		{
			[Token(Token = "0x400115E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x400115F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder <>t__builder;

			[Token(Token = "0x4001160")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Tween t;

			[Token(Token = "0x4001161")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public int elapsedLoops;

			[Token(Token = "0x4001162")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private YieldAwaitable.YieldAwaiter <>u__1;

			[Token(Token = "0x60013C2")]
			[Address(RVA = "0xC09DB8", Offset = "0xC09DB8", VA = "0xC09DB8", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x60013C3")]
			[Address(RVA = "0xC09FF8", Offset = "0xC09FF8", VA = "0xC09FF8", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20002D6")]
		[CompilerGenerated]
		private struct <AsyncWaitForPosition>d__14 : IAsyncStateMachine
		{
			[Token(Token = "0x4001163")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4001164")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder <>t__builder;

			[Token(Token = "0x4001165")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Tween t;

			[Token(Token = "0x4001166")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float position;

			[Token(Token = "0x4001167")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private YieldAwaitable.YieldAwaiter <>u__1;

			[Token(Token = "0x60013C4")]
			[Address(RVA = "0xC0A004", Offset = "0xC0A004", VA = "0xC0A004", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x60013C5")]
			[Address(RVA = "0xC0A25C", Offset = "0xC0A25C", VA = "0xC0A25C", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20002D7")]
		[CompilerGenerated]
		private struct <AsyncWaitForStart>d__15 : IAsyncStateMachine
		{
			[Token(Token = "0x4001168")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4001169")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder <>t__builder;

			[Token(Token = "0x400116A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Tween t;

			[Token(Token = "0x400116B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private YieldAwaitable.YieldAwaiter <>u__1;

			[Token(Token = "0x60013C6")]
			[Address(RVA = "0xC0A268", Offset = "0xC0A268", VA = "0xC0A268", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x60013C7")]
			[Address(RVA = "0xC0A494", Offset = "0xC0A494", VA = "0xC0A494", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[Token(Token = "0x60013A6")]
		[Address(RVA = "0xC08530", Offset = "0xC08530", VA = "0xC08530")]
		public static Sequence DOGradientColor(this Material target, Gradient gradient, float duration)
		{
			return null;
		}

		[Token(Token = "0x60013A7")]
		[Address(RVA = "0xC08710", Offset = "0xC08710", VA = "0xC08710")]
		public static Sequence DOGradientColor(this Material target, Gradient gradient, string property, float duration)
		{
			return null;
		}

		[Token(Token = "0x60013A8")]
		[Address(RVA = "0xC088FC", Offset = "0xC088FC", VA = "0xC088FC")]
		public static CustomYieldInstruction WaitForCompletion(this Tween t, bool returnCustomYieldInstruction)
		{
			return null;
		}

		[Token(Token = "0x60013A9")]
		[Address(RVA = "0xC089BC", Offset = "0xC089BC", VA = "0xC089BC")]
		public static CustomYieldInstruction WaitForRewind(this Tween t, bool returnCustomYieldInstruction)
		{
			return null;
		}

		[Token(Token = "0x60013AA")]
		[Address(RVA = "0xC08A7C", Offset = "0xC08A7C", VA = "0xC08A7C")]
		public static CustomYieldInstruction WaitForKill(this Tween t, bool returnCustomYieldInstruction)
		{
			return null;
		}

		[Token(Token = "0x60013AB")]
		[Address(RVA = "0xC08B3C", Offset = "0xC08B3C", VA = "0xC08B3C")]
		public static CustomYieldInstruction WaitForElapsedLoops(this Tween t, int elapsedLoops, bool returnCustomYieldInstruction)
		{
			return null;
		}

		[Token(Token = "0x60013AC")]
		[Address(RVA = "0xC08C04", Offset = "0xC08C04", VA = "0xC08C04")]
		public static CustomYieldInstruction WaitForPosition(this Tween t, float position, bool returnCustomYieldInstruction)
		{
			return null;
		}

		[Token(Token = "0x60013AD")]
		[Address(RVA = "0xC08CD4", Offset = "0xC08CD4", VA = "0xC08CD4")]
		public static CustomYieldInstruction WaitForStart(this Tween t, bool returnCustomYieldInstruction)
		{
			return null;
		}

		[Token(Token = "0x60013AE")]
		[Address(RVA = "0xC08D94", Offset = "0xC08D94", VA = "0xC08D94")]
		public static TweenerCore<UnityEngine.Vector2, UnityEngine.Vector2, VectorOptions> DOOffset(this Material target, UnityEngine.Vector2 endValue, int propertyID, float duration)
		{
			return null;
		}

		[Token(Token = "0x60013AF")]
		[Address(RVA = "0xC08F88", Offset = "0xC08F88", VA = "0xC08F88")]
		public static TweenerCore<UnityEngine.Vector2, UnityEngine.Vector2, VectorOptions> DOTiling(this Material target, UnityEngine.Vector2 endValue, int propertyID, float duration)
		{
			return null;
		}

		[Token(Token = "0x60013B0")]
		[Address(RVA = "0xC0917C", Offset = "0xC0917C", VA = "0xC0917C")]
		[AsyncStateMachine(typeof(<AsyncWaitForCompletion>d__10))]
		public static Task AsyncWaitForCompletion(this Tween t)
		{
			return null;
		}

		[Token(Token = "0x60013B1")]
		[Address(RVA = "0xC09244", Offset = "0xC09244", VA = "0xC09244")]
		[AsyncStateMachine(typeof(<AsyncWaitForRewind>d__11))]
		public static Task AsyncWaitForRewind(this Tween t)
		{
			return null;
		}

		[Token(Token = "0x60013B2")]
		[Address(RVA = "0xC0930C", Offset = "0xC0930C", VA = "0xC0930C")]
		[AsyncStateMachine(typeof(<AsyncWaitForKill>d__12))]
		public static Task AsyncWaitForKill(this Tween t)
		{
			return null;
		}

		[Token(Token = "0x60013B3")]
		[Address(RVA = "0xC093D4", Offset = "0xC093D4", VA = "0xC093D4")]
		[AsyncStateMachine(typeof(<AsyncWaitForElapsedLoops>d__13))]
		public static Task AsyncWaitForElapsedLoops(this Tween t, int elapsedLoops)
		{
			return null;
		}

		[Token(Token = "0x60013B4")]
		[Address(RVA = "0xC094AC", Offset = "0xC094AC", VA = "0xC094AC")]
		[AsyncStateMachine(typeof(<AsyncWaitForPosition>d__14))]
		public static Task AsyncWaitForPosition(this Tween t, float position)
		{
			return null;
		}

		[Token(Token = "0x60013B5")]
		[Address(RVA = "0xC09584", Offset = "0xC09584", VA = "0xC09584")]
		[AsyncStateMachine(typeof(<AsyncWaitForStart>d__15))]
		public static Task AsyncWaitForStart(this Tween t)
		{
			return null;
		}
	}
	[Token(Token = "0x20002D8")]
	public static class DOTweenCYInstruction
	{
		[Token(Token = "0x20002D9")]
		public class WaitForCompletion : CustomYieldInstruction
		{
			[Token(Token = "0x400116C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly Tween t;

			[Token(Token = "0x170002C4")]
			public override bool keepWaiting
			{
				[Token(Token = "0x60013C8")]
				[Address(RVA = "0xC0A4A0", Offset = "0xC0A4A0", VA = "0xC0A4A0", Slot = "7")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x60013C9")]
			[Address(RVA = "0xC0A4D0", Offset = "0xC0A4D0", VA = "0xC0A4D0")]
			public WaitForCompletion(Tween tween)
			{
			}
		}

		[Token(Token = "0x20002DA")]
		public class WaitForRewind : CustomYieldInstruction
		{
			[Token(Token = "0x400116D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly Tween t;

			[Token(Token = "0x170002C5")]
			public override bool keepWaiting
			{
				[Token(Token = "0x60013CA")]
				[Address(RVA = "0xC0A4F8", Offset = "0xC0A4F8", VA = "0xC0A4F8", Slot = "7")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x60013CB")]
			[Address(RVA = "0xC0A558", Offset = "0xC0A558", VA = "0xC0A558")]
			public WaitForRewind(Tween tween)
			{
			}
		}

		[Token(Token = "0x20002DB")]
		public class WaitForKill : CustomYieldInstruction
		{
			[Token(Token = "0x400116E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly Tween t;

			[Token(Token = "0x170002C6")]
			public override bool keepWaiting
			{
				[Token(Token = "0x60013CC")]
				[Address(RVA = "0xC0A580", Offset = "0xC0A580", VA = "0xC0A580", Slot = "7")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x60013CD")]
			[Address(RVA = "0xC0A59C", Offset = "0xC0A59C", VA = "0xC0A59C")]
			public WaitForKill(Tween tween)
			{
			}
		}

		[Token(Token = "0x20002DC")]
		public class WaitForElapsedLoops : CustomYieldInstruction
		{
			[Token(Token = "0x400116F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly Tween t;

			[Token(Token = "0x4001170")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private readonly int elapsedLoops;

			[Token(Token = "0x170002C7")]
			public override bool keepWaiting
			{
				[Token(Token = "0x60013CE")]
				[Address(RVA = "0xC0A5C4", Offset = "0xC0A5C4", VA = "0xC0A5C4", Slot = "7")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x60013CF")]
			[Address(RVA = "0xC0A604", Offset = "0xC0A604", VA = "0xC0A604")]
			public WaitForElapsedLoops(Tween tween, int elapsedLoops)
			{
			}
		}

		[Token(Token = "0x20002DD")]
		public class WaitForPosition : CustomYieldInstruction
		{
			[Token(Token = "0x4001171")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly Tween t;

			[Token(Token = "0x4001172")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private readonly float position;

			[Token(Token = "0x170002C8")]
			public override bool keepWaiting
			{
				[Token(Token = "0x60013D0")]
				[Address(RVA = "0xC0A634", Offset = "0xC0A634", VA = "0xC0A634", Slot = "7")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x60013D1")]
			[Address(RVA = "0xC0A68C", Offset = "0xC0A68C", VA = "0xC0A68C")]
			public WaitForPosition(Tween tween, float position)
			{
			}
		}

		[Token(Token = "0x20002DE")]
		public class WaitForStart : CustomYieldInstruction
		{
			[Token(Token = "0x4001173")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly Tween t;

			[Token(Token = "0x170002C9")]
			public override bool keepWaiting
			{
				[Token(Token = "0x60013D2")]
				[Address(RVA = "0xC0A6C4", Offset = "0xC0A6C4", VA = "0xC0A6C4", Slot = "7")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x60013D3")]
			[Address(RVA = "0xC0A6F8", Offset = "0xC0A6F8", VA = "0xC0A6F8")]
			public WaitForStart(Tween tween)
			{
			}
		}
	}
	[Token(Token = "0x20002DF")]
	public static class DOTweenModuleUtils
	{
		[Token(Token = "0x20002E0")]
		public static class Physics
		{
			[Token(Token = "0x60013D6")]
			[Address(RVA = "0xC0A87C", Offset = "0xC0A87C", VA = "0xC0A87C")]
			public static void SetOrientationOnPath(PathOptions options, Tween t, Quaternion newRot, Transform trans)
			{
			}

			[Token(Token = "0x60013D7")]
			[Address(RVA = "0xC0A97C", Offset = "0xC0A97C", VA = "0xC0A97C")]
			public static bool HasRigidbody2D(Component target)
			{
				return default(bool);
			}

			[Token(Token = "0x60013D8")]
			[Address(RVA = "0xC0AA08", Offset = "0xC0AA08", VA = "0xC0AA08")]
			[Preserve]
			public static bool HasRigidbody(Component target)
			{
				return default(bool);
			}

			[Token(Token = "0x60013D9")]
			[Address(RVA = "0xC0AA94", Offset = "0xC0AA94", VA = "0xC0AA94")]
			[Preserve]
			public static TweenerCore<UnityEngine.Vector3, Path, PathOptions> CreateDOTweenPathTween(MonoBehaviour target, bool tweenRigidbody, bool isLocal, Path path, float duration, PathMode pathMode)
			{
				return null;
			}
		}

		[Token(Token = "0x4001174")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool _initialized;

		[Token(Token = "0x60013D4")]
		[Address(RVA = "0xC0A720", Offset = "0xC0A720", VA = "0xC0A720")]
		[Preserve]
		public static void Init()
		{
		}

		[Token(Token = "0x60013D5")]
		[Address(RVA = "0xC0A7D4", Offset = "0xC0A7D4", VA = "0xC0A7D4")]
		[Preserve]
		private static void Preserver()
		{
		}
	}
}
